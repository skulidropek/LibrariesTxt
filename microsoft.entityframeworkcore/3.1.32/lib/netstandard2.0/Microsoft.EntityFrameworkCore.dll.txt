[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.CanBeNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.ContractAnnotationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Contract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceFullStates>k__BackingField;
    public string Contract { get; }
    public bool ForceFullStates { get; }
    public ContractAnnotationAttribute(string contract);
    public ContractAnnotationAttribute(string contract, bool forceFullStates);
    [CompilerGeneratedAttribute]
public string get_Contract();
    [CompilerGeneratedAttribute]
public bool get_ForceFullStates();
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InvokerParameterNameAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.NoEnumerationAttribute : Attribute {
}
[AttributeUsageAttribute("6592")]
internal class JetBrains.Annotations.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("4320")]
internal class JetBrains.Annotations.StringFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FormatParameterName>k__BackingField;
    [NotNullAttribute]
public string FormatParameterName { get; }
    public StringFormatMethodAttribute(string formatParameterName);
    [CompilerGeneratedAttribute]
public string get_FormatParameterName();
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    public ImplicitUseKindFlags UseKindFlags { get; }
    public ImplicitUseTargetFlags TargetFlags { get; }
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.ArrayStructuralComparer`1 : ValueComparer`1<TElement[]> {
}
public enum Microsoft.EntityFrameworkCore.ChangeTracking.CascadeTiming : Enum {
    public int value__;
    public static CascadeTiming Immediate;
    public static CascadeTiming OnSaveChanges;
    public static CascadeTiming Never;
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker : object {
    private IModel _model;
    private QueryTrackingBehavior _queryTrackingBehavior;
    private QueryTrackingBehavior _defaultQueryTrackingBehavior;
    [CompilerGeneratedAttribute]
private bool <AutoDetectChangesEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LazyLoadingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private DbContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IStateManager <StateManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IChangeDetector <ChangeDetector>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityEntryGraphIterator <GraphIterator>k__BackingField;
    public bool AutoDetectChangesEnabled { get; public set; }
    public bool LazyLoadingEnabled { get; public set; }
    public QueryTrackingBehavior QueryTrackingBehavior { get; public set; }
    public CascadeTiming DeleteOrphansTiming { get; public set; }
    public CascadeTiming CascadeDeleteTiming { get; public set; }
    public DbContext Context { get; }
    private IStateManager StateManager { get; }
    private IChangeDetector ChangeDetector { get; }
    private IEntityEntryGraphIterator GraphIterator { get; }
    [EntityFrameworkInternalAttribute]
public ChangeTracker(DbContext context, IStateManager stateManager, IChangeDetector changeDetector, IModel model, IEntityEntryGraphIterator graphIterator);
    [CompilerGeneratedAttribute]
public virtual bool get_AutoDetectChangesEnabled();
    [CompilerGeneratedAttribute]
public virtual void set_AutoDetectChangesEnabled(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_LazyLoadingEnabled();
    [CompilerGeneratedAttribute]
public virtual void set_LazyLoadingEnabled(bool value);
    public virtual QueryTrackingBehavior get_QueryTrackingBehavior();
    public virtual void set_QueryTrackingBehavior(QueryTrackingBehavior value);
    public virtual CascadeTiming get_DeleteOrphansTiming();
    public virtual void set_DeleteOrphansTiming(CascadeTiming value);
    public virtual CascadeTiming get_CascadeDeleteTiming();
    public virtual void set_CascadeDeleteTiming(CascadeTiming value);
    public virtual IEnumerable`1<EntityEntry> Entries();
    public virtual IEnumerable`1<EntityEntry`1<TEntity>> Entries();
    private void TryDetectChanges();
    public virtual bool HasChanges();
    [CompilerGeneratedAttribute]
public virtual DbContext get_Context();
    public virtual void DetectChanges();
    public virtual void AcceptAllChanges();
    public virtual void TrackGraph(object rootEntity, Action`1<EntityEntryGraphNode> callback);
    public virtual void TrackGraph(object rootEntity, TState state, Func`2<EntityEntryGraphNode`1<TState>, bool> callback);
    [CompilerGeneratedAttribute]
private IStateManager get_StateManager();
    [CompilerGeneratedAttribute]
private IChangeDetector get_ChangeDetector();
    [CompilerGeneratedAttribute]
private IEntityEntryGraphIterator get_GraphIterator();
    public void add_Tracked(EventHandler`1<EntityTrackedEventArgs> value);
    public void remove_Tracked(EventHandler`1<EntityTrackedEventArgs> value);
    public void add_StateChanged(EventHandler`1<EntityStateChangedEventArgs> value);
    public void remove_StateChanged(EventHandler`1<EntityStateChangedEventArgs> value);
    public virtual void CascadeChanges();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetState();
    private sealed virtual override Task Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetStateAsync(CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry : NavigationEntry {
    public IEnumerable CurrentValue { get; public set; }
    [EntityFrameworkInternalAttribute]
public CollectionEntry(InternalEntityEntry internalEntry, string name);
    [EntityFrameworkInternalAttribute]
public CollectionEntry(InternalEntityEntry internalEntry, INavigation navigation);
    private void LocalDetectChanges();
    public virtual IEnumerable get_CurrentValue();
    public virtual void set_CurrentValue(IEnumerable value);
    public virtual void Load();
    public virtual Task LoadAsync(CancellationToken cancellationToken);
    public virtual IQueryable Query();
    private void EnsureInitialized();
    public virtual EntityEntry FindEntry(object entity);
    protected virtual InternalEntityEntry GetInternalTargetEntry(object entity);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry`2 : CollectionEntry {
    public EntityEntry`1<TEntity> EntityEntry { get; }
    public IEnumerable`1<TRelatedEntity> CurrentValue { get; public set; }
    [EntityFrameworkInternalAttribute]
public CollectionEntry`2(InternalEntityEntry internalEntry, string name);
    [EntityFrameworkInternalAttribute]
public CollectionEntry`2(InternalEntityEntry internalEntry, INavigation navigation);
    public virtual EntityEntry`1<TEntity> get_EntityEntry();
    public virtual IEnumerable`1<TRelatedEntity> get_CurrentValue();
    public virtual void set_CurrentValue(IEnumerable`1<TRelatedEntity> value);
    public virtual IQueryable`1<TRelatedEntity> Query();
    public virtual EntityEntry`1<TRelatedEntity> FindEntry(object entity);
}
[DebuggerDisplayAttribute("{InternalEntry,nq}")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry : object {
    private static int _maxEntityState;
    [CompilerGeneratedAttribute]
private InternalEntityEntry <InternalEntry>k__BackingField;
    [EntityFrameworkInternalAttribute]
protected InternalEntityEntry InternalEntry { get; }
    public object Entity { get; }
    public EntityState State { get; public set; }
    [EntityFrameworkInternalAttribute]
private InternalEntityEntry Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>.Instance { get; }
    public DbContext Context { get; }
    public IEntityType Metadata { get; }
    public IEnumerable`1<MemberEntry> Members { get; }
    public IEnumerable`1<NavigationEntry> Navigations { get; }
    public IEnumerable`1<PropertyEntry> Properties { get; }
    public IEnumerable`1<ReferenceEntry> References { get; }
    public IEnumerable`1<CollectionEntry> Collections { get; }
    public bool IsKeySet { get; }
    public PropertyValues CurrentValues { get; }
    public PropertyValues OriginalValues { get; }
    private IEntityFinder Finder { get; }
    [EntityFrameworkInternalAttribute]
public EntityEntry(InternalEntityEntry internalEntry);
    private static EntityEntry();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
protected virtual InternalEntityEntry get_InternalEntry();
    public virtual object get_Entity();
    public virtual EntityState get_State();
    public virtual void set_State(EntityState value);
    public virtual void DetectChanges();
    private sealed virtual override InternalEntityEntry Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>.get_Instance();
    public virtual DbContext get_Context();
    public virtual IEntityType get_Metadata();
    public virtual MemberEntry Member(string propertyName);
    public virtual IEnumerable`1<MemberEntry> get_Members();
    public virtual NavigationEntry Navigation(string propertyName);
    public virtual IEnumerable`1<NavigationEntry> get_Navigations();
    public virtual PropertyEntry Property(string propertyName);
    public virtual IEnumerable`1<PropertyEntry> get_Properties();
    public virtual ReferenceEntry Reference(string propertyName);
    public virtual IEnumerable`1<ReferenceEntry> get_References();
    public virtual CollectionEntry Collection(string propertyName);
    public virtual IEnumerable`1<CollectionEntry> get_Collections();
    public virtual bool get_IsKeySet();
    [DebuggerStepThroughAttribute]
public virtual PropertyValues get_CurrentValues();
    [DebuggerStepThroughAttribute]
public virtual PropertyValues get_OriginalValues();
    public virtual PropertyValues GetDatabaseValues();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry/<GetDatabaseValuesAsync>d__39")]
public virtual Task`1<PropertyValues> GetDatabaseValuesAsync(CancellationToken cancellationToken);
    public virtual void Reload();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry/<ReloadAsync>d__41")]
public virtual Task ReloadAsync(CancellationToken cancellationToken);
    private void Reload(PropertyValues storeValues);
    private IEntityFinder get_Finder();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
private NavigationEntry <get_Navigations>b__22_0(INavigation navigation);
    [CompilerGeneratedAttribute]
private PropertyEntry <get_Properties>b__25_0(IProperty property);
    [CompilerGeneratedAttribute]
private ReferenceEntry <get_References>b__28_1(INavigation navigation);
    [CompilerGeneratedAttribute]
private CollectionEntry <get_Collections>b__31_1(INavigation navigation);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1 : EntityEntry {
    public TEntity Entity { get; }
    [EntityFrameworkInternalAttribute]
public EntityEntry`1(InternalEntityEntry internalEntry);
    public virtual TEntity get_Entity();
    public virtual PropertyEntry`2<TEntity, TProperty> Property(Expression`1<Func`2<TEntity, TProperty>> propertyExpression);
    public virtual ReferenceEntry`2<TEntity, TProperty> Reference(Expression`1<Func`2<TEntity, TProperty>> propertyExpression);
    public virtual CollectionEntry`2<TEntity, TProperty> Collection(Expression`1<Func`2<TEntity, IEnumerable`1<TProperty>>> propertyExpression);
    public virtual ReferenceEntry`2<TEntity, TProperty> Reference(string propertyName);
    public virtual CollectionEntry`2<TEntity, TProperty> Collection(string propertyName);
    public virtual PropertyEntry`2<TEntity, TProperty> Property(string propertyName);
    private static void ValidateType(IProperty property);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryEventArgs : EventArgs {
    private InternalEntityEntry _internalEntityEntry;
    private EntityEntry _entry;
    public EntityEntry Entry { get; }
    [EntityFrameworkInternalAttribute]
public EntityEntryEventArgs(InternalEntityEntry internalEntityEntry);
    public virtual EntityEntry get_Entry();
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode : object {
    private InternalEntityEntry _entry;
    private InternalEntityEntry _sourceEntry;
    [CompilerGeneratedAttribute]
private INavigation <InboundNavigation>k__BackingField;
    public EntityEntry SourceEntry { get; }
    public INavigation InboundNavigation { get; }
    public EntityEntry Entry { get; }
    private InternalEntityEntry Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>.Instance { get; }
    [DebuggerStepThroughAttribute]
[EntityFrameworkInternalAttribute]
public EntityEntryGraphNode(InternalEntityEntry entry, InternalEntityEntry sourceEntry, INavigation inboundNavigation);
    public virtual EntityEntry get_SourceEntry();
    [CompilerGeneratedAttribute]
public virtual INavigation get_InboundNavigation();
    public virtual EntityEntry get_Entry();
    private sealed virtual override InternalEntityEntry Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>.get_Instance();
    public virtual EntityEntryGraphNode CreateNode(EntityEntryGraphNode currentNode, InternalEntityEntry internalEntityEntry, INavigation reachedVia);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode`1 : EntityEntryGraphNode {
    [CompilerGeneratedAttribute]
private TState <NodeState>k__BackingField;
    public TState NodeState { get; }
    [DebuggerStepThroughAttribute]
[EntityFrameworkInternalAttribute]
public EntityEntryGraphNode`1(InternalEntityEntry entry, TState state, InternalEntityEntry sourceEntry, INavigation inboundNavigation);
    [CompilerGeneratedAttribute]
public virtual TState get_NodeState();
    public virtual EntityEntryGraphNode CreateNode(EntityEntryGraphNode currentNode, InternalEntityEntry internalEntityEntry, INavigation reachedVia);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.EntityStateChangedEventArgs : EntityEntryEventArgs {
    [CompilerGeneratedAttribute]
private EntityState <OldState>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityState <NewState>k__BackingField;
    public EntityState OldState { get; }
    public EntityState NewState { get; }
    [EntityFrameworkInternalAttribute]
public EntityStateChangedEventArgs(InternalEntityEntry internalEntityEntry, EntityState oldState, EntityState newState);
    [CompilerGeneratedAttribute]
public virtual EntityState get_OldState();
    [CompilerGeneratedAttribute]
public virtual EntityState get_NewState();
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.EntityTrackedEventArgs : EntityEntryEventArgs {
    [CompilerGeneratedAttribute]
private bool <FromQuery>k__BackingField;
    public bool FromQuery { get; }
    [EntityFrameworkInternalAttribute]
public EntityTrackedEventArgs(InternalEntityEntry internalEntityEntry, bool fromQuery);
    [CompilerGeneratedAttribute]
public virtual bool get_FromQuery();
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.GeometryValueComparer`1 : ValueComparer`1<TGeometry> {
    private static Expression`1<Func`3<TGeometry, TGeometry, bool>> GetEqualsExpression();
    private static Expression`1<Func`2<TGeometry, TGeometry>> GetSnapshotExpression();
}
public interface Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator {
    public abstract virtual void TraverseGraph(EntityEntryGraphNode`1<TState> node, Func`2<EntityEntryGraphNode`1<TState>, bool> handleNode);
    public abstract virtual Task TraverseGraphAsync(EntityEntryGraphNode`1<TState> node, Func`3<EntityEntryGraphNode`1<TState>, CancellationToken, Task`1<bool>> handleNode, CancellationToken cancellationToken);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ArrayPropertyValues : PropertyValues {
    private Object[] _values;
    private IReadOnlyList`1<IProperty> _properties;
    public IReadOnlyList`1<IProperty> Properties { get; }
    public object Item { get; public set; }
    public object Item { get; public set; }
    private IEntityMaterializerSource MaterializerSource { get; }
    public ArrayPropertyValues(InternalEntityEntry internalEntry, Object[] values);
    public virtual object ToObject();
    public virtual void SetValues(object obj);
    public virtual PropertyValues Clone();
    public virtual void SetValues(PropertyValues propertyValues);
    public virtual IReadOnlyList`1<IProperty> get_Properties();
    public virtual object get_Item(string propertyName);
    public virtual void set_Item(string propertyName, object value);
    public virtual object get_Item(IProperty property);
    public virtual void set_Item(IProperty property, object value);
    public virtual TValue GetValue(string propertyName);
    public virtual TValue GetValue(IProperty property);
    private void SetValue(int index, object value);
    private IEntityMaterializerSource get_MaterializerSource();
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector : object {
    private IDiagnosticsLogger`1<ChangeTracking> _logger;
    private ILoggingOptions _loggingOptions;
    public static string SkipDetectChangesAnnotation;
    private bool _suspended;
    public ChangeDetector(IDiagnosticsLogger`1<ChangeTracking> logger, ILoggingOptions loggingOptions);
    public virtual void Suspend();
    public virtual void Resume();
    public virtual void PropertyChanged(InternalEntityEntry entry, IPropertyBase propertyBase, bool setModified);
    public virtual void PropertyChanging(InternalEntityEntry entry, IPropertyBase propertyBase);
    public virtual void DetectChanges(IStateManager stateManager);
    public virtual void DetectChanges(InternalEntityEntry entry);
    private void DetectChanges(InternalEntityEntry entry, HashSet`1<InternalEntityEntry> visited);
    private void LocalDetectChanges(InternalEntityEntry entry);
    private void LogChangeDetected(InternalEntityEntry entry, IProperty property, object original, object current);
    private void DetectKeyChange(InternalEntityEntry entry, IProperty property);
    private void DetectNavigationChange(InternalEntityEntry entry, INavigation navigation);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeTrackerFactory : object {
    private DbContext _context;
    private IStateManager _stateManager;
    private IChangeDetector _changeDetector;
    private IModel _model;
    private IEntityEntryGraphIterator _graphIterator;
    public ChangeTrackerFactory(ICurrentDbContext currentContext, IStateManager stateManager, IChangeDetector changeDetector, IModel model, IEntityEntryGraphIterator graphIterator);
    public virtual ChangeTracker Create();
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeNullableValueFactory : CompositeValueFactory {
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<Object[]> <EqualityComparer>k__BackingField;
    public IEqualityComparer`1<Object[]> EqualityComparer { get; }
    public CompositeNullableValueFactory(IReadOnlyList`1<IProperty> properties);
    [CompilerGeneratedAttribute]
public virtual IEqualityComparer`1<Object[]> get_EqualityComparer();
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory : CompositeValueFactory {
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<Object[]> <EqualityComparer>k__BackingField;
    public IEqualityComparer`1<Object[]> EqualityComparer { get; }
    public CompositePrincipalKeyValueFactory(IKey key);
    public virtual object CreateFromKeyValues(Object[] keyValues);
    public virtual object CreateFromBuffer(ValueBuffer valueBuffer);
    public virtual IProperty FindNullPropertyInKeyValues(Object[] keyValues);
    public virtual IProperty FindNullPropertyInValueBuffer(ValueBuffer valueBuffer);
    public virtual Object[] CreateFromCurrentValues(InternalEntityEntry entry);
    public virtual IProperty FindNullPropertyInCurrentValues(InternalEntityEntry entry);
    public virtual Object[] CreateFromOriginalValues(InternalEntityEntry entry);
    public virtual Object[] CreateFromRelationshipSnapshot(InternalEntityEntry entry);
    private Object[] CreateFromEntry(InternalEntityEntry entry, Func`3<InternalEntityEntry, IProperty, object> getValue);
    [CompilerGeneratedAttribute]
public virtual IEqualityComparer`1<Object[]> get_EqualityComparer();
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IProperty> <Properties>k__BackingField;
    protected IReadOnlyList`1<IProperty> Properties { get; }
    public CompositeValueFactory(IReadOnlyList`1<IProperty> properties);
    [CompilerGeneratedAttribute]
protected virtual IReadOnlyList`1<IProperty> get_Properties();
    public virtual bool TryCreateFromBuffer(ValueBuffer& modreq(System.Runtime.InteropServices.InAttribute) valueBuffer, Object[]& key);
    public virtual bool TryCreateFromCurrentValues(InternalEntityEntry entry, Object[]& key);
    public virtual bool TryCreateFromPreStoreGeneratedCurrentValues(InternalEntityEntry entry, Object[]& key);
    public virtual bool TryCreateFromOriginalValues(InternalEntityEntry entry, Object[]& key);
    public virtual bool TryCreateFromRelationshipSnapshot(InternalEntityEntry entry, Object[]& key);
    protected virtual bool TryCreateFromEntry(InternalEntityEntry entry, Func`3<InternalEntityEntry, IProperty, object> getValue, Object[]& key);
    protected static IEqualityComparer`1<Object[]> CreateEqualityComparer(IReadOnlyList`1<IProperty> properties);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CurrentPropertyValues : EntryPropertyValues {
    public CurrentPropertyValues(InternalEntityEntry internalEntry);
    public virtual TValue GetValue(string propertyName);
    public virtual TValue GetValue(IProperty property);
    protected virtual void SetValueInternal(IProperty property, object value);
    protected virtual object GetValueInternal(IProperty property);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.DependentKeyValueFactoryFactory : object {
    public virtual IDependentKeyValueFactory`1<TKey> Create(IForeignKey foreignKey);
    public virtual IDependentKeyValueFactory`1<TKey> CreateSimple(IForeignKey foreignKey);
    public virtual IDependentKeyValueFactory`1<Object[]> CreateComposite(IForeignKey foreignKey);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.DependentsMap`1 : object {
    private IForeignKey _foreignKey;
    private IPrincipalKeyValueFactory`1<TKey> _principalKeyValueFactory;
    private IDependentKeyValueFactory`1<TKey> _dependentKeyValueFactory;
    private Dictionary`2<TKey, HashSet`1<InternalEntityEntry>> _map;
    public DependentsMap`1(IForeignKey foreignKey, IPrincipalKeyValueFactory`1<TKey> principalKeyValueFactory, IDependentKeyValueFactory`1<TKey> dependentKeyValueFactory);
    public virtual void Add(InternalEntityEntry entry);
    public virtual void Remove(InternalEntityEntry entry);
    public virtual void Update(InternalEntityEntry entry);
    private bool TryCreateFromCurrentValues(InternalEntityEntry entry, TKey& key);
    public virtual IEnumerable`1<InternalEntityEntry> GetDependents(InternalEntityEntry principalEntry);
    public virtual IEnumerable`1<InternalEntityEntry> GetDependentsUsingRelationshipSnapshot(InternalEntityEntry principalEntry);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.DependentsMapFactoryFactory : IdentityMapFactoryFactoryBase {
    public virtual Func`1<IDependentsMap> Create(IForeignKey foreignKey);
    [UsedImplicitlyAttribute]
private static Func`1<IDependentsMap> CreateFactory(IForeignKey foreignKey);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EmptyShadowValuesFactoryFactory : SnapshotFactoryFactory {
    protected bool UseEntityVariable { get; }
    protected virtual int GetPropertyIndex(IPropertyBase propertyBase);
    protected virtual int GetPropertyCount(IEntityType entityType);
    protected virtual ValueComparer GetValueComparer(IProperty property);
    protected virtual bool get_UseEntityVariable();
    protected virtual Expression CreateReadShadowValueExpression(ParameterExpression parameter, IPropertyBase property);
    protected virtual Expression CreateReadValueExpression(ParameterExpression parameter, IPropertyBase property);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator : object {
    public virtual void TraverseGraph(EntityEntryGraphNode`1<TState> node, Func`2<EntityEntryGraphNode`1<TState>, bool> handleNode);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator/<TraverseGraphAsync>d__1`1")]
public virtual Task TraverseGraphAsync(EntityEntryGraphNode`1<TState> node, Func`3<EntityEntryGraphNode`1<TState>, CancellationToken, Task`1<bool>> handleNode, CancellationToken cancellationToken);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher : object {
    private IEntityEntryGraphIterator _graphIterator;
    public EntityGraphAttacher(IEntityEntryGraphIterator graphIterator);
    public virtual void AttachGraph(InternalEntityEntry rootEntry, EntityState targetState, EntityState storeGeneratedWithKeySetTargetState, bool forceStateWhenUnknownKey);
    public virtual Task AttachGraphAsync(InternalEntityEntry rootEntry, EntityState targetState, EntityState storeGeneratedWithKeySetTargetState, bool forceStateWhenUnknownKey, CancellationToken cancellationToken);
    private static bool PaintAction(EntityEntryGraphNode`1<ValueTuple`3<EntityState, EntityState, bool>> node);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher/<PaintActionAsync>d__5")]
private static Task`1<bool> PaintActionAsync(EntityEntryGraphNode`1<ValueTuple`3<EntityState, EntityState, bool>> node, CancellationToken cancellationToken);
    private static void SetReferenceLoaded(EntityEntryGraphNode`1<ValueTuple`3<EntityState, EntityState, bool>> node);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityReferenceMap : object {
    private bool _hasSubMap;
    private Dictionary`2<object, InternalEntityEntry> _detachedReferenceMap;
    private Dictionary`2<object, InternalEntityEntry> _unchangedReferenceMap;
    private Dictionary`2<object, InternalEntityEntry> _addedReferenceMap;
    private Dictionary`2<object, InternalEntityEntry> _modifiedReferenceMap;
    private Dictionary`2<object, InternalEntityEntry> _deletedReferenceMap;
    private Dictionary`2<IEntityType, EntityReferenceMap> _dependentTypeReferenceMap;
    public EntityReferenceMap(bool hasSubMap);
    public virtual void Update(InternalEntityEntry entry, EntityState state, Nullable`1<EntityState> oldState);
    public virtual bool TryGet(object entity, IEntityType entityType, InternalEntityEntry& entry, bool throwOnNonUniqueness);
    public virtual int GetCountForState(bool added, bool modified, bool deleted, bool unchanged);
    public virtual IEnumerable`1<InternalEntityEntry> GetEntriesForState(bool added, bool modified, bool deleted, bool unchanged);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityReferenceMap/<GetEntriesForState>d__12")]
private IEnumerable`1<InternalEntityEntry> GetEntriesForState(bool added, bool modified, bool deleted, bool unchanged, bool hasDependentTypes, bool returnAdded, bool returnModified, bool returnDeleted, bool returnUnchanged);
    private void Remove(object entity, IEntityType entityType, EntityState oldState);
    public virtual void Clear();
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityReferenceMap/<GetNonDeletedEntities>d__15`1")]
public virtual IEnumerable`1<TEntity> GetNonDeletedEntities();
}
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntryPropertyValues : PropertyValues {
    private IReadOnlyList`1<IProperty> _properties;
    public IReadOnlyList`1<IProperty> Properties { get; }
    public object Item { get; public set; }
    public object Item { get; public set; }
    protected EntryPropertyValues(InternalEntityEntry internalEntry);
    public virtual object ToObject();
    public virtual void SetValues(object obj);
    public virtual PropertyValues Clone();
    public virtual void SetValues(PropertyValues propertyValues);
    [DebuggerStepThroughAttribute]
public virtual IReadOnlyList`1<IProperty> get_Properties();
    public virtual object get_Item(string propertyName);
    public virtual void set_Item(string propertyName, object value);
    public virtual object get_Item(IProperty property);
    public virtual void set_Item(IProperty property, object value);
    protected abstract virtual void SetValueInternal(IProperty property, object value);
    protected abstract virtual object GetValueInternal(IProperty property);
}
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector {
    public abstract virtual void PropertyChanged(InternalEntityEntry entry, IPropertyBase propertyBase, bool setModified);
    public abstract virtual void PropertyChanging(InternalEntityEntry entry, IPropertyBase propertyBase);
    public abstract virtual void DetectChanges(IStateManager stateManager);
    public abstract virtual void DetectChanges(InternalEntityEntry entry);
    public abstract virtual void Suspend();
    public abstract virtual void Resume();
}
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeTrackerFactory {
    public abstract virtual ChangeTracker Create();
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1 : object {
    private bool _sensitiveLoggingEnabled;
    private Dictionary`2<TKey, InternalEntityEntry> _identityMap;
    private IForeignKey[] _foreignKeys;
    private Dictionary`2<IForeignKey, IDependentsMap> _dependentMaps;
    [CompilerGeneratedAttribute]
private IPrincipalKeyValueFactory`1<TKey> <PrincipalKeyValueFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IKey <Key>k__BackingField;
    protected IPrincipalKeyValueFactory`1<TKey> PrincipalKeyValueFactory { get; }
    public IKey Key { get; }
    public IdentityMap`1(IKey key, IPrincipalKeyValueFactory`1<TKey> principalKeyValueFactory, bool sensitiveLoggingEnabled);
    [CompilerGeneratedAttribute]
protected virtual IPrincipalKeyValueFactory`1<TKey> get_PrincipalKeyValueFactory();
    [CompilerGeneratedAttribute]
public virtual IKey get_Key();
    public virtual bool Contains(ValueBuffer& modreq(System.Runtime.InteropServices.InAttribute) valueBuffer);
    public virtual bool Contains(IForeignKey foreignKey, ValueBuffer& modreq(System.Runtime.InteropServices.InAttribute) valueBuffer);
    public virtual InternalEntityEntry TryGetEntry(Object[] keyValues);
    public virtual InternalEntityEntry TryGetEntry(Object[] keyValues, bool throwOnNullKey, Boolean& hasNullKey);
    public virtual InternalEntityEntry TryGetEntry(IForeignKey foreignKey, InternalEntityEntry dependentEntry);
    public virtual InternalEntityEntry TryGetEntryUsingPreStoreGeneratedValues(IForeignKey foreignKey, InternalEntityEntry dependentEntry);
    public virtual InternalEntityEntry TryGetEntryUsingRelationshipSnapshot(IForeignKey foreignKey, InternalEntityEntry dependentEntry);
    public virtual void AddOrUpdate(InternalEntityEntry entry);
    public virtual void Add(InternalEntityEntry entry);
    public virtual void Add(Object[] keyValues, InternalEntityEntry entry);
    protected virtual void Add(TKey key, InternalEntityEntry entry);
    private void ThrowIdentityConflict(InternalEntityEntry entry);
    private void Add(TKey key, InternalEntityEntry entry, bool updateDuplicate);
    public virtual IDependentsMap GetDependentsMap(IForeignKey foreignKey);
    public virtual IDependentsMap FindDependentsMap(IForeignKey foreignKey);
    public virtual void Clear();
    public virtual void Remove(InternalEntityEntry entry);
    public virtual void RemoveUsingRelationshipSnapshot(InternalEntityEntry entry);
    protected virtual void Remove(TKey key, InternalEntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMapFactoryFactory : IdentityMapFactoryFactoryBase {
    public virtual Func`2<bool, IIdentityMap> Create(IKey key);
    [UsedImplicitlyAttribute]
private static Func`2<bool, IIdentityMap> CreateFactory(IKey key);
}
public abstract class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMapFactoryFactoryBase : object {
    protected virtual Type GetKeyType(IKey key);
}
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentKeyValueFactory`1 {
    [ContractAnnotationAttribute("=>true, key:notnull; =>false, key:null")]
public abstract virtual bool TryCreateFromBuffer(ValueBuffer& modreq(System.Runtime.InteropServices.InAttribute) valueBuffer, TKey& key);
    [ContractAnnotationAttribute("=>true, key:notnull; =>false, key:null")]
public abstract virtual bool TryCreateFromCurrentValues(InternalEntityEntry entry, TKey& key);
    [ContractAnnotationAttribute("=>true, key:notnull; =>false, key:null")]
public abstract virtual bool TryCreateFromPreStoreGeneratedCurrentValues(InternalEntityEntry entry, TKey& key);
    [ContractAnnotationAttribute("=>true, key:notnull; =>false, key:null")]
public abstract virtual bool TryCreateFromOriginalValues(InternalEntityEntry entry, TKey& key);
    [ContractAnnotationAttribute("=>true, key:notnull; =>false, key:null")]
public abstract virtual bool TryCreateFromRelationshipSnapshot(InternalEntityEntry entry, TKey& key);
}
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentsMap {
    public abstract virtual void Add(InternalEntityEntry entry);
    public abstract virtual void Update(InternalEntityEntry entry);
    public abstract virtual void Remove(InternalEntityEntry entry);
    public abstract virtual IEnumerable`1<InternalEntityEntry> GetDependents(InternalEntityEntry principalEntry);
    public abstract virtual IEnumerable`1<InternalEntityEntry> GetDependentsUsingRelationshipSnapshot(InternalEntityEntry principalEntry);
}
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityGraphAttacher {
    public abstract virtual void AttachGraph(InternalEntityEntry rootEntry, EntityState targetState, EntityState storeGeneratedWithKeySetTargetState, bool forceStateWhenUnknownKey);
    public abstract virtual Task AttachGraphAsync(InternalEntityEntry rootEntry, EntityState targetState, EntityState storeGeneratedWithKeySetTargetState, bool forceStateWhenUnknownKey, CancellationToken cancellationToken);
}
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap {
    public IKey Key { get; }
    public abstract virtual IKey get_Key();
    public abstract virtual bool Contains(ValueBuffer& modreq(System.Runtime.InteropServices.InAttribute) valueBuffer);
    public abstract virtual bool Contains(IForeignKey foreignKey, ValueBuffer& modreq(System.Runtime.InteropServices.InAttribute) valueBuffer);
    public abstract virtual InternalEntityEntry TryGetEntry(Object[] keyValues);
    public abstract virtual InternalEntityEntry TryGetEntry(Object[] keyValues, bool throwOnNullKey, Boolean& hasNullKey);
    public abstract virtual InternalEntityEntry TryGetEntry(IForeignKey foreignKey, InternalEntityEntry dependentEntry);
    public abstract virtual InternalEntityEntry TryGetEntryUsingPreStoreGeneratedValues(IForeignKey foreignKey, InternalEntityEntry dependentEntry);
    public abstract virtual InternalEntityEntry TryGetEntryUsingRelationshipSnapshot(IForeignKey foreignKey, InternalEntityEntry dependentEntry);
    public abstract virtual void AddOrUpdate(InternalEntityEntry entry);
    public abstract virtual void Add(InternalEntityEntry entry);
    public abstract virtual void Add(Object[] keyValues, InternalEntityEntry entry);
    public abstract virtual void Remove(InternalEntityEntry entry);
    public abstract virtual void RemoveUsingRelationshipSnapshot(InternalEntityEntry entry);
    public abstract virtual IDependentsMap GetDependentsMap(IForeignKey foreignKey);
    public abstract virtual IDependentsMap FindDependentsMap(IForeignKey foreignKey);
    public abstract virtual void Clear();
}
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryFactory {
    public abstract virtual InternalEntityEntry Create(IStateManager stateManager, IEntityType entityType, object entity);
    public abstract virtual InternalEntityEntry Create(IStateManager stateManager, IEntityType entityType, object entity, ValueBuffer& modreq(System.Runtime.InteropServices.InAttribute) valueBuffer);
}
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryNotifier {
    public abstract virtual void StateChanging(InternalEntityEntry entry, EntityState newState);
    public abstract virtual void StateChanged(InternalEntityEntry entry, EntityState oldState, bool fromQuery);
    public abstract virtual void TrackedFromQuery(InternalEntityEntry entry);
    public abstract virtual void NavigationReferenceChanged(InternalEntityEntry entry, INavigation navigation, object oldValue, object newValue);
    public abstract virtual void NavigationCollectionChanged(InternalEntityEntry entry, INavigation navigation, IEnumerable`1<object> added, IEnumerable`1<object> removed);
    public abstract virtual void KeyPropertyChanged(InternalEntityEntry entry, IProperty property, IReadOnlyList`1<IKey> keys, IReadOnlyList`1<IForeignKey> foreignKeys, object oldValue, object newValue);
    public abstract virtual void PropertyChanged(InternalEntityEntry entry, IPropertyBase property, bool setModified);
    public abstract virtual void PropertyChanging(InternalEntityEntry entry, IPropertyBase property);
}
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntrySubscriber {
    public abstract virtual bool SnapshotAndSubscribe(InternalEntityEntry entry);
    public abstract virtual void Unsubscribe(InternalEntityEntry entry);
}
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IKeyPropagator {
    public abstract virtual InternalEntityEntry PropagateValue(InternalEntityEntry entry, IProperty property);
    public abstract virtual Task`1<InternalEntityEntry> PropagateValueAsync(InternalEntityEntry entry, IProperty property, CancellationToken cancellationToken);
}
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ILocalViewListener {
    public abstract virtual void RegisterView(Action`2<InternalEntityEntry, EntityState> viewAction);
    public abstract virtual void StateChanging(InternalEntityEntry entry, EntityState newState);
    public abstract virtual void StateChanged(InternalEntityEntry entry, EntityState oldState, bool fromQuery);
}
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.INavigationFixer {
    public abstract virtual void NavigationReferenceChanged(InternalEntityEntry entry, INavigation navigation, object oldValue, object newValue);
    public abstract virtual void NavigationCollectionChanged(InternalEntityEntry entry, INavigation navigation, IEnumerable`1<object> added, IEnumerable`1<object> removed);
    public abstract virtual void TrackedFromQuery(InternalEntityEntry entry);
    public abstract virtual void KeyPropertyChanged(InternalEntityEntry entry, IProperty property, IReadOnlyList`1<IKey> containingPrincipalKeys, IReadOnlyList`1<IForeignKey> containingForeignKeys, object oldValue, object newValue);
    public abstract virtual void StateChanging(InternalEntityEntry entry, EntityState newState);
    public abstract virtual void StateChanged(InternalEntityEntry entry, EntityState oldState, bool fromQuery);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalClrEntityEntry : InternalEntityEntry {
    [CompilerGeneratedAttribute]
private object <Entity>k__BackingField;
    public object Entity { get; }
    public InternalClrEntityEntry(IStateManager stateManager, IEntityType entityType, object entity);
    [CompilerGeneratedAttribute]
public virtual object get_Entity();
}
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry : object {
    private StateData _stateData;
    private OriginalValues _originalValues;
    private RelationshipsSnapshot _relationshipsSnapshot;
    private SidecarValues _temporaryValues;
    private SidecarValues _storeGeneratedValues;
    [CompilerGeneratedAttribute]
private IEntityType <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private IStateManager <StateManager>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalEntityEntry <SharedIdentityEntry>k__BackingField;
    internal static MethodInfo ReadShadowValueMethod;
    internal static MethodInfo ReadOriginalValueMethod;
    internal static MethodInfo ReadRelationshipSnapshotValueMethod;
    internal static MethodInfo ReadStoreGeneratedValueMethod;
    internal static MethodInfo ReadTemporaryValueMethod;
    internal static MethodInfo GetCurrentValueMethod;
    public object Entity { get; }
    public IEntityType EntityType { get; }
    private EntityState Microsoft.EntityFrameworkCore.Update.IUpdateEntry.EntityState { get; private set; }
    public IStateManager StateManager { get; }
    public InternalEntityEntry SharedIdentityEntry { get; public set; }
    public EntityState EntityState { get; }
    public bool HasConceptualNull { get; }
    public bool HasOriginalValuesSnapshot { get; }
    public bool HasRelationshipSnapshot { get; }
    public object Item { get; public set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ValueTuple`2<bool, bool> IsKeySet { get; }
    public bool IsKeyUnknown { get; }
    private IUpdateEntry Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SharedIdentityEntry { get; }
    protected InternalEntityEntry(IStateManager stateManager, IEntityType entityType);
    private static InternalEntityEntry();
    public abstract virtual object get_Entity();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetOriginalValue(IProperty property, object value);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetPropertyModified(IProperty property);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual IEntityType get_EntityType();
    private sealed virtual override EntityState Microsoft.EntityFrameworkCore.Update.IUpdateEntry.get_EntityState();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Update.IUpdateEntry.set_EntityState(EntityState value);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual IStateManager get_StateManager();
    [CompilerGeneratedAttribute]
public virtual InternalEntityEntry get_SharedIdentityEntry();
    [CompilerGeneratedAttribute]
public virtual void set_SharedIdentityEntry(InternalEntityEntry value);
    public virtual void SetEntityState(EntityState entityState, bool acceptChanges, bool modifyProperties, Nullable`1<EntityState> forceStateWhenUnknownKey);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry/<SetEntityStateAsync>d__24")]
public virtual Task SetEntityStateAsync(EntityState entityState, bool acceptChanges, bool modifyProperties, Nullable`1<EntityState> forceStateWhenUnknownKey, CancellationToken cancellationToken);
    private EntityState PropagateToUnknownKey(EntityState oldState, EntityState entityState, bool adding, Nullable`1<EntityState> forceStateWhenUnknownKey);
    private bool PrepareForAdd(EntityState newState);
    private void SetEntityState(EntityState oldState, EntityState newState, bool acceptChanges, bool modifyProperties);
    private void FireStateChanged(EntityState oldState);
    private void SetServiceProperties(EntityState oldState, EntityState newState);
    public virtual void MarkUnchangedFromQuery();
    public virtual EntityState get_EntityState();
    public virtual bool IsModified(IProperty property);
    public virtual void SetPropertyModified(IProperty property, bool changeState, bool isModified, bool isConceptualNull, bool acceptChanges);
    public virtual bool get_HasConceptualNull();
    public virtual bool IsConceptualNull(IProperty property);
    public virtual bool HasTemporaryValue(IProperty property);
    private CurrentValueType GetValueType(IProperty property, Func`3<object, object, bool> equals);
    public virtual void SetTemporaryValue(IProperty property, object value, bool setModified);
    public virtual void SetStoreGeneratedValue(IProperty property, object value);
    protected virtual void MarkShadowPropertiesNotSet(IEntityType entityType);
    [UsedImplicitlyAttribute]
protected virtual T ReadShadowValue(int shadowIndex);
    [UsedImplicitlyAttribute]
private T ReadOriginalValue(IProperty property, int originalValueIndex);
    [UsedImplicitlyAttribute]
private T ReadRelationshipSnapshotValue(IPropertyBase propertyBase, int relationshipSnapshotIndex);
    [UsedImplicitlyAttribute]
private T ReadStoreGeneratedValue(int storeGeneratedIndex);
    [UsedImplicitlyAttribute]
private T ReadTemporaryValue(int storeGeneratedIndex);
    public virtual TProperty GetCurrentValue(IPropertyBase propertyBase);
    public virtual TProperty GetOriginalValue(IProperty property);
    public virtual TProperty GetRelationshipSnapshotValue(IPropertyBase propertyBase);
    protected virtual object ReadPropertyValue(IPropertyBase propertyBase);
    protected virtual bool PropertyHasDefaultValue(IPropertyBase propertyBase);
    protected virtual void WritePropertyValue(IPropertyBase propertyBase, object value, bool forMaterialization);
    public virtual object GetOrCreateCollection(INavigation navigation, bool forMaterialization);
    public virtual bool CollectionContains(INavigation navigation, InternalEntityEntry value);
    public virtual bool AddToCollection(INavigation navigation, InternalEntityEntry value, bool forMaterialization);
    public virtual bool RemoveFromCollection(INavigation navigation, InternalEntityEntry value);
    public virtual object GetCurrentValue(IPropertyBase propertyBase);
    public virtual object GetPreStoreGeneratedCurrentValue(IPropertyBase propertyBase);
    public virtual object GetOriginalValue(IPropertyBase propertyBase);
    public virtual object GetRelationshipSnapshotValue(IPropertyBase propertyBase);
    public virtual void SetOriginalValue(IPropertyBase propertyBase, object value, int index);
    public virtual void SetRelationshipSnapshotValue(IPropertyBase propertyBase, object value);
    public virtual void EnsureOriginalValues();
    public virtual void EnsureTemporaryValues();
    public virtual void EnsureStoreGeneratedValues();
    public virtual void EnsureRelationshipSnapshot();
    public virtual bool get_HasOriginalValuesSnapshot();
    public virtual bool get_HasRelationshipSnapshot();
    public virtual void RemoveFromCollectionSnapshot(IPropertyBase propertyBase, object removedEntity);
    public virtual void AddToCollectionSnapshot(IPropertyBase propertyBase, object addedEntity);
    public virtual void AddRangeToCollectionSnapshot(IPropertyBase propertyBase, IEnumerable`1<object> addedEntities);
    public object get_Item(IPropertyBase propertyBase);
    public void set_Item(IPropertyBase propertyBase, object value);
    public virtual void SetProperty(IPropertyBase propertyBase, object value, bool isMaterialization, bool setModified, bool isCascadeDelete);
    private void SetProperty(IPropertyBase propertyBase, object value, bool isMaterialization, bool setModified, bool isCascadeDelete, CurrentValueType valueType);
    private static Func`3<object, object, bool> ValuesEqualFunc(IProperty property);
    public virtual void AcceptChanges();
    public virtual InternalEntityEntry PrepareToSave();
    public virtual void HandleConceptualNulls(bool sensitiveLoggingEnabled, bool force, bool isCascadeDelete);
    public virtual void DiscardStoreGeneratedValues();
    public virtual bool IsStoreGenerated(IProperty property);
    public bool HasDefaultValue(IProperty property);
    public virtual ValueTuple`2<bool, bool> get_IsKeySet();
    public virtual bool get_IsKeyUnknown();
    public virtual EntityEntry ToEntityEntry();
    public virtual void HandleINotifyPropertyChanging(object sender, PropertyChangingEventArgs eventArgs);
    public virtual void HandleINotifyPropertyChanged(object sender, PropertyChangedEventArgs eventArgs);
    public virtual void HandleINotifyCollectionChanged(object sender, NotifyCollectionChangedEventArgs eventArgs);
    public virtual void SetIsLoaded(INavigation navigation, bool loaded);
    public virtual bool IsLoaded(INavigation navigation);
    public virtual string ToString();
    private sealed virtual override IUpdateEntry Microsoft.EntityFrameworkCore.Update.IUpdateEntry.get_SharedIdentityEntry();
    [CompilerGeneratedAttribute]
private bool <SetProperty>b__85_0(ForeignKey fk);
    [CompilerGeneratedAttribute]
private bool <HandleConceptualNulls>b__89_2(IProperty p);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryFactory : object {
    public virtual InternalEntityEntry Create(IStateManager stateManager, IEntityType entityType, object entity);
    public virtual InternalEntityEntry Create(IStateManager stateManager, IEntityType entityType, object entity, ValueBuffer& modreq(System.Runtime.InteropServices.InAttribute) valueBuffer);
    private static InternalEntityEntry NewInternalEntityEntry(IStateManager stateManager, IEntityType entityType, object entity);
    private static InternalEntityEntry NewInternalEntityEntry(IStateManager stateManager, IEntityType entityType, object entity, ValueBuffer& valueBuffer);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier : object {
    private ILocalViewListener _localViewListener;
    private IChangeDetector _changeDetector;
    private INavigationFixer _navigationFixer;
    public InternalEntityEntryNotifier(ILocalViewListener localViewListener, IChangeDetector changeDetector, INavigationFixer navigationFixer);
    public virtual void StateChanging(InternalEntityEntry entry, EntityState newState);
    public virtual void StateChanged(InternalEntityEntry entry, EntityState oldState, bool fromQuery);
    public virtual void TrackedFromQuery(InternalEntityEntry entry);
    public virtual void NavigationReferenceChanged(InternalEntityEntry entry, INavigation navigation, object oldValue, object newValue);
    public virtual void NavigationCollectionChanged(InternalEntityEntry entry, INavigation navigation, IEnumerable`1<object> added, IEnumerable`1<object> removed);
    public virtual void KeyPropertyChanged(InternalEntityEntry entry, IProperty property, IReadOnlyList`1<IKey> keys, IReadOnlyList`1<IForeignKey> foreignKeys, object oldValue, object newValue);
    public virtual void PropertyChanged(InternalEntityEntry entry, IPropertyBase property, bool setModified);
    public virtual void PropertyChanging(InternalEntityEntry entry, IPropertyBase property);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntrySubscriber : object {
    public virtual bool SnapshotAndSubscribe(InternalEntityEntry entry);
    public virtual void Unsubscribe(InternalEntityEntry entry);
    private static INotifyCollectionChanged AsINotifyCollectionChanged(InternalEntityEntry entry, INavigation navigation, IEntityType entityType, ChangeTrackingStrategy changeTrackingStrategy);
    private static INotifyPropertyChanged AsINotifyPropertyChanged(InternalEntityEntry entry, IEntityType entityType, ChangeTrackingStrategy changeTrackingStrategy);
    private static INotifyPropertyChanging AsINotifyPropertyChanging(InternalEntityEntry entry, IEntityType entityType, ChangeTrackingStrategy changeTrackingStrategy);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalMixedEntityEntry : InternalEntityEntry {
    private ISnapshot _shadowValues;
    [CompilerGeneratedAttribute]
private object <Entity>k__BackingField;
    public object Entity { get; }
    public InternalMixedEntityEntry(IStateManager stateManager, IEntityType entityType, object entity);
    public InternalMixedEntityEntry(IStateManager stateManager, IEntityType entityType, object entity, ValueBuffer& valueBuffer);
    [CompilerGeneratedAttribute]
public virtual object get_Entity();
    protected virtual T ReadShadowValue(int shadowIndex);
    protected virtual object ReadPropertyValue(IPropertyBase propertyBase);
    protected virtual bool PropertyHasDefaultValue(IPropertyBase propertyBase);
    protected virtual void WritePropertyValue(IPropertyBase propertyBase, object value, bool forMaterialization);
    public virtual object GetOrCreateCollection(INavigation navigation, bool forMaterialization);
    private ICollection`1<object> GetOrCreateCollectionTyped(INavigation navigation);
    public virtual bool CollectionContains(INavigation navigation, InternalEntityEntry value);
    public virtual bool AddToCollection(INavigation navigation, InternalEntityEntry value, bool forMaterialization);
    public virtual bool RemoveFromCollection(INavigation navigation, InternalEntityEntry value);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalShadowEntityEntry : InternalEntityEntry {
    private ISnapshot _propertyValues;
    public object Entity { get; }
    public InternalShadowEntityEntry(IStateManager stateManager, IEntityType entityType);
    public InternalShadowEntityEntry(IStateManager stateManager, IEntityType entityType, ValueBuffer& valueBuffer);
    public virtual object get_Entity();
    protected virtual T ReadShadowValue(int shadowIndex);
    protected virtual object ReadPropertyValue(IPropertyBase propertyBase);
    protected virtual bool PropertyHasDefaultValue(IPropertyBase propertyBase);
    protected virtual void WritePropertyValue(IPropertyBase propertyBase, object value, bool forMaterialization);
    public virtual object GetOrCreateCollection(INavigation navigation, bool forMaterialization);
    private ICollection`1<object> GetOrCreateCollectionTyped(INavigation navigation);
    public virtual bool CollectionContains(INavigation navigation, InternalEntityEntry value);
    public virtual bool AddToCollection(INavigation navigation, InternalEntityEntry value, bool forMaterialization);
    public virtual bool RemoveFromCollection(INavigation navigation, InternalEntityEntry value);
}
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.INullableValueFactory`1 {
    public IEqualityComparer`1<TKey> EqualityComparer { get; }
    public abstract virtual IEqualityComparer`1<TKey> get_EqualityComparer();
}
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IPrincipalKeyValueFactory`1 {
    public IEqualityComparer`1<TKey> EqualityComparer { get; }
    public abstract virtual object CreateFromKeyValues(Object[] keyValues);
    public abstract virtual object CreateFromBuffer(ValueBuffer valueBuffer);
    public abstract virtual IProperty FindNullPropertyInKeyValues(Object[] keyValues);
    public abstract virtual IProperty FindNullPropertyInValueBuffer(ValueBuffer valueBuffer);
    public abstract virtual TKey CreateFromCurrentValues(InternalEntityEntry entry);
    public abstract virtual IProperty FindNullPropertyInCurrentValues(InternalEntityEntry entry);
    public abstract virtual TKey CreateFromOriginalValues(InternalEntityEntry entry);
    public abstract virtual TKey CreateFromRelationshipSnapshot(InternalEntityEntry entry);
    public abstract virtual IEqualityComparer`1<TKey> get_EqualityComparer();
}
[DefaultMemberAttribute("Item")]
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot {
    public object Item { get; public set; }
    public abstract virtual object get_Item(int index);
    public abstract virtual void set_Item(int index, object value);
    public abstract virtual T GetValue(int index);
}
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager {
    public StateManagerDependencies Dependencies { get; }
    public CascadeTiming DeleteOrphansTiming { get; public set; }
    public CascadeTiming CascadeDeleteTiming { get; public set; }
    public bool SavingChanges { get; }
    public IEnumerable`1<InternalEntityEntry> Entries { get; }
    public int Count { get; }
    public int ChangedCount { get; public set; }
    public IInternalEntityEntryNotifier InternalEntityEntryNotifier { get; }
    public IValueGenerationManager ValueGenerationManager { get; }
    public DbContext Context { get; }
    public IModel Model { get; }
    public IEntityMaterializerSource EntityMaterializerSource { get; }
    public bool SensitiveLoggingEnabled { get; }
    public IDiagnosticsLogger`1<Update> UpdateLogger { get; }
    public abstract virtual StateManagerDependencies get_Dependencies();
    public abstract virtual CascadeTiming get_DeleteOrphansTiming();
    public abstract virtual void set_DeleteOrphansTiming(CascadeTiming value);
    public abstract virtual CascadeTiming get_CascadeDeleteTiming();
    public abstract virtual void set_CascadeDeleteTiming(CascadeTiming value);
    public abstract virtual bool get_SavingChanges();
    public abstract virtual InternalEntityEntry GetOrCreateEntry(object entity);
    public abstract virtual InternalEntityEntry GetOrCreateEntry(object entity, IEntityType entityType);
    public abstract virtual InternalEntityEntry CreateEntry(IDictionary`2<string, object> values, IEntityType entityType);
    public abstract virtual InternalEntityEntry StartTrackingFromQuery(IEntityType baseEntityType, object entity, ValueBuffer& modreq(System.Runtime.InteropServices.InAttribute) valueBuffer);
    public abstract virtual InternalEntityEntry TryGetEntry(IKey key, Object[] keyValues);
    public abstract virtual InternalEntityEntry TryGetEntry(IKey key, Object[] keyValues, bool throwOnNullKey, Boolean& hasNullKey);
    public abstract virtual InternalEntityEntry TryGetEntry(object entity, bool throwOnNonUniqueness);
    public abstract virtual InternalEntityEntry TryGetEntry(object entity, IEntityType type, bool throwOnTypeMismatch);
    public abstract virtual IEnumerable`1<InternalEntityEntry> get_Entries();
    public abstract virtual IEnumerable`1<InternalEntityEntry> GetEntriesForState(bool added, bool modified, bool deleted, bool unchanged);
    public abstract virtual int GetCountForState(bool added, bool modified, bool deleted, bool unchanged);
    public abstract virtual int get_Count();
    public abstract virtual IEnumerable`1<TEntity> GetNonDeletedEntities();
    public abstract virtual int get_ChangedCount();
    public abstract virtual void set_ChangedCount(int value);
    public abstract virtual IInternalEntityEntryNotifier get_InternalEntityEntryNotifier();
    public abstract virtual void StateChanging(InternalEntityEntry entry, EntityState newState);
    public abstract virtual IValueGenerationManager get_ValueGenerationManager();
    public abstract virtual DbContext get_Context();
    public abstract virtual IModel get_Model();
    public abstract virtual IEntityMaterializerSource get_EntityMaterializerSource();
    public abstract virtual InternalEntityEntry StartTracking(InternalEntityEntry entry);
    public abstract virtual void StopTracking(InternalEntityEntry entry, EntityState oldState);
    public abstract virtual void RecordReferencedUntrackedEntity(object referencedEntity, INavigation navigation, InternalEntityEntry referencedFromEntry);
    public abstract virtual IEnumerable`1<Tuple`2<INavigation, InternalEntityEntry>> GetRecordedReferrers(object referencedEntity, bool clear);
    public abstract virtual InternalEntityEntry FindPrincipal(InternalEntityEntry dependentEntry, IForeignKey foreignKey);
    public abstract virtual InternalEntityEntry FindPrincipalUsingPreStoreGeneratedValues(InternalEntityEntry dependentEntry, IForeignKey foreignKey);
    public abstract virtual InternalEntityEntry FindPrincipalUsingRelationshipSnapshot(InternalEntityEntry dependentEntry, IForeignKey foreignKey);
    public abstract virtual void UpdateIdentityMap(InternalEntityEntry entry, IKey principalKey);
    public abstract virtual void UpdateDependentMap(InternalEntityEntry entry, IForeignKey foreignKey);
    public abstract virtual IEnumerable`1<InternalEntityEntry> GetDependentsFromNavigation(InternalEntityEntry principalEntry, IForeignKey foreignKey);
    public abstract virtual IEnumerable`1<InternalEntityEntry> GetDependents(InternalEntityEntry principalEntry, IForeignKey foreignKey);
    public abstract virtual IEnumerable`1<InternalEntityEntry> GetDependentsUsingRelationshipSnapshot(InternalEntityEntry principalEntry, IForeignKey foreignKey);
    public abstract virtual IList`1<IUpdateEntry> GetEntriesToSave(bool cascadeChanges);
    public abstract virtual int SaveChanges(bool acceptAllChangesOnSuccess);
    public abstract virtual Task`1<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken);
    public abstract virtual void AcceptAllChanges();
    public abstract virtual IEntityFinder CreateEntityFinder(IEntityType entityType);
    public abstract virtual void Unsubscribe();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Tracked(EventHandler`1<EntityTrackedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Tracked(EventHandler`1<EntityTrackedEventArgs> value);
    public abstract virtual void OnTracked(InternalEntityEntry internalEntityEntry, bool fromQuery);
    [CompilerGeneratedAttribute]
public abstract virtual void add_StateChanged(EventHandler`1<EntityStateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StateChanged(EventHandler`1<EntityStateChangedEventArgs> value);
    public abstract virtual void OnStateChanged(InternalEntityEntry internalEntityEntry, EntityState oldState);
    public abstract virtual bool get_SensitiveLoggingEnabled();
    public abstract virtual void CascadeChanges(bool force);
    public abstract virtual void CascadeDelete(InternalEntityEntry entry, bool force, IEnumerable`1<IForeignKey> foreignKeys);
    public abstract virtual IDiagnosticsLogger`1<Update> get_UpdateLogger();
}
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IValueGenerationManager {
    public abstract virtual void Generate(InternalEntityEntry entry);
    public abstract virtual InternalEntityEntry Propagate(InternalEntityEntry entry);
    public abstract virtual Task GenerateAsync(InternalEntityEntry entry, CancellationToken cancellationToken);
    public abstract virtual bool MayGetTemporaryValue(IProperty property, IEntityType entityType);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.KeyPropagator : object {
    private IValueGeneratorSelector _valueGeneratorSelector;
    public KeyPropagator(IValueGeneratorSelector valueGeneratorSelector);
    public virtual InternalEntityEntry PropagateValue(InternalEntityEntry entry, IProperty property);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.Internal.KeyPropagator/<PropagateValueAsync>d__3")]
public virtual Task`1<InternalEntityEntry> PropagateValueAsync(InternalEntityEntry entry, IProperty property, CancellationToken cancellationToken);
    private static InternalEntityEntry TryPropagateValue(InternalEntityEntry entry, IProperty property);
    private ValueGenerator TryGetValueGenerator(IProperty property);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.KeyValueFactoryFactory : object {
    public virtual IPrincipalKeyValueFactory`1<TKey> Create(IKey key);
    [UsedImplicitlyAttribute]
private static SimplePrincipalKeyValueFactory`1<TKey> CreateSimpleFactory(IKey key);
    private static CompositePrincipalKeyValueFactory CreateCompositeFactory(IKey key);
    private static void SetFactories(IForeignKey foreignKey, object dependentKeyValueFactory, Func`1<IDependentsMap> dependentsMapFactory);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.LocalViewListener : object {
    private IList`1<Action`2<InternalEntityEntry, EntityState>> _viewActions;
    public virtual void RegisterView(Action`2<InternalEntityEntry, EntityState> viewAction);
    public virtual void StateChanged(InternalEntityEntry entry, EntityState oldState, bool fromQuery);
    public virtual void StateChanging(InternalEntityEntry entry, EntityState newState);
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.MultiSnapshot : ValueType {
    private ISnapshot[] _snapshots;
    internal static ConstructorInfo Constructor;
    public object Item { get; public set; }
    public MultiSnapshot(ISnapshot[] snapshots);
    private static MultiSnapshot();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer : object {
    private IChangeDetector _changeDetector;
    private IEntityGraphAttacher _attacher;
    private bool _inFixup;
    public NavigationFixer(IChangeDetector changeDetector, IEntityGraphAttacher attacher);
    public virtual void NavigationReferenceChanged(InternalEntityEntry entry, INavigation navigation, object oldValue, object newValue);
    public virtual void NavigationCollectionChanged(InternalEntityEntry entry, INavigation navigation, IEnumerable`1<object> added, IEnumerable`1<object> removed);
    public virtual void KeyPropertyChanged(InternalEntityEntry entry, IProperty property, IReadOnlyList`1<IKey> containingPrincipalKeys, IReadOnlyList`1<IForeignKey> containingForeignKeys, object oldValue, object newValue);
    public virtual void StateChanging(InternalEntityEntry entry, EntityState newState);
    public virtual void TrackedFromQuery(InternalEntityEntry entry);
    public virtual void StateChanged(InternalEntityEntry entry, EntityState oldState, bool fromQuery);
    private void DeleteFixup(InternalEntityEntry entry);
    private void InitialFixup(InternalEntityEntry entry, bool fromQuery);
    private void DelayedFixup(InternalEntityEntry entry, INavigation navigation, InternalEntityEntry referencedEntry, bool fromQuery);
    private void FixupToDependent(InternalEntityEntry principalEntry, InternalEntityEntry dependentEntry, IForeignKey foreignKey, bool setModified, bool fromQuery);
    private void FixupToPrincipal(InternalEntityEntry dependentEntry, InternalEntityEntry principalEntry, IForeignKey foreignKey, bool setModified, bool fromQuery);
    private void ToDependentFixup(InternalEntityEntry dependentEntry, InternalEntityEntry principalEntry, IForeignKey foreignKey, bool fromQuery);
    private static void SetForeignKeyProperties(InternalEntityEntry dependentEntry, InternalEntityEntry principalEntry, IForeignKey foreignKey, bool setModified, bool fromQuery);
    private static bool PrincipalValueEqualsDependentValue(IProperty principalProperty, object dependentValue, object principalValue);
    private void ConditionallyNullForeignKeyProperties(InternalEntityEntry dependentEntry, InternalEntityEntry principalEntry, IForeignKey foreignKey);
    private void SetNavigation(InternalEntityEntry entry, INavigation navigation, InternalEntityEntry value, bool fromQuery);
    private void AddToCollection(InternalEntityEntry entry, INavigation navigation, InternalEntityEntry value, bool fromQuery);
    private void RemoveFromCollection(InternalEntityEntry entry, INavigation navigation, InternalEntityEntry value);
    private void SetReferenceOrAddToCollection(InternalEntityEntry entry, INavigation navigation, InternalEntityEntry value, bool fromQuery);
    private void ResetReferenceOrRemoveCollection(InternalEntityEntry entry, INavigation navigation, InternalEntityEntry value, bool fromQuery);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NullableKeyIdentityMap`1 : IdentityMap`1<TKey> {
    public NullableKeyIdentityMap`1(IKey key, IPrincipalKeyValueFactory`1<TKey> principalKeyValueFactory, bool sensitiveLoggingEnabled);
    public virtual void Add(InternalEntityEntry entry);
    public virtual void RemoveUsingRelationshipSnapshot(InternalEntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ObservableBackedBindingList`1 : SortableBindingList`1<T> {
    private bool _addingNewInstance;
    private T _addNewInstance;
    private T _cancelNewInstance;
    private ICollection`1<T> _observableCollection;
    private bool _inCollectionChanged;
    private bool _changingObservableCollection;
    public ObservableBackedBindingList`1(ICollection`1<T> observableCollection);
    protected virtual object AddNewCore();
    public virtual void CancelNew(int itemIndex);
    protected virtual void ClearItems();
    public virtual void EndNew(int itemIndex);
    protected virtual void InsertItem(int index, T item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, T item);
    private void ObservableCollectionChanged(object sender, NotifyCollectionChangedEventArgs e);
    private void AddToObservableCollection(T item);
    private void RemoveFromObservableCollection(T item);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.OriginalPropertyValues : EntryPropertyValues {
    public OriginalPropertyValues(InternalEntityEntry internalEntry);
    public virtual TValue GetValue(string propertyName);
    public virtual TValue GetValue(IProperty property);
    protected virtual void SetValueInternal(IProperty property, object value);
    protected virtual object GetValueInternal(IProperty property);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.OriginalValuesFactoryFactory : SnapshotFactoryFactory`1<InternalEntityEntry> {
    protected virtual int GetPropertyIndex(IPropertyBase propertyBase);
    protected virtual int GetPropertyCount(IEntityType entityType);
    protected virtual ValueComparer GetValueComparer(IProperty property);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.RelationshipSnapshotFactoryFactory : SnapshotFactoryFactory`1<InternalEntityEntry> {
    protected virtual int GetPropertyIndex(IPropertyBase propertyBase);
    protected virtual int GetPropertyCount(IEntityType entityType);
    protected virtual ValueComparer GetValueComparer(IProperty property);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ShadowValuesFactoryFactory : SnapshotFactoryFactory`1<ValueBuffer> {
    protected bool UseEntityVariable { get; }
    protected virtual int GetPropertyIndex(IPropertyBase propertyBase);
    protected virtual int GetPropertyCount(IEntityType entityType);
    protected virtual ValueComparer GetValueComparer(IProperty property);
    protected virtual bool get_UseEntityVariable();
    protected virtual Expression CreateReadShadowValueExpression(ParameterExpression parameter, IPropertyBase property);
    protected virtual Expression CreateReadValueExpression(ParameterExpression parameter, IPropertyBase property);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SidecarValuesFactoryFactory : SnapshotFactoryFactory`1<InternalEntityEntry> {
    protected virtual int GetPropertyIndex(IPropertyBase propertyBase);
    protected virtual int GetPropertyCount(IEntityType entityType);
    protected virtual ValueComparer GetValueComparer(IProperty property);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleFullyNullableDependentKeyValueFactory`1 : object {
    private PropertyAccessors _propertyAccessors;
    public SimpleFullyNullableDependentKeyValueFactory`1(PropertyAccessors propertyAccessors);
    public virtual bool TryCreateFromBuffer(ValueBuffer& modreq(System.Runtime.InteropServices.InAttribute) valueBuffer, TKey& key);
    public virtual bool TryCreateFromCurrentValues(InternalEntityEntry entry, TKey& key);
    public virtual bool TryCreateFromPreStoreGeneratedCurrentValues(InternalEntityEntry entry, TKey& key);
    public virtual bool TryCreateFromOriginalValues(InternalEntityEntry entry, TKey& key);
    public virtual bool TryCreateFromRelationshipSnapshot(InternalEntityEntry entry, TKey& key);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleNonNullableDependentKeyValueFactory`1 : object {
    private PropertyAccessors _propertyAccessors;
    public SimpleNonNullableDependentKeyValueFactory`1(PropertyAccessors propertyAccessors);
    public virtual bool TryCreateFromBuffer(ValueBuffer& modreq(System.Runtime.InteropServices.InAttribute) valueBuffer, TKey& key);
    public virtual bool TryCreateFromCurrentValues(InternalEntityEntry entry, TKey& key);
    public virtual bool TryCreateFromPreStoreGeneratedCurrentValues(InternalEntityEntry entry, TKey& key);
    public virtual bool TryCreateFromOriginalValues(InternalEntityEntry entry, TKey& key);
    public virtual bool TryCreateFromRelationshipSnapshot(InternalEntityEntry entry, TKey& key);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleNullableDependentKeyValueFactory`1 : object {
    private PropertyAccessors _propertyAccessors;
    public SimpleNullableDependentKeyValueFactory`1(PropertyAccessors propertyAccessors);
    public virtual bool TryCreateFromBuffer(ValueBuffer& modreq(System.Runtime.InteropServices.InAttribute) valueBuffer, TKey& key);
    public virtual bool TryCreateFromCurrentValues(InternalEntityEntry entry, TKey& key);
    public virtual bool TryCreateFromPreStoreGeneratedCurrentValues(InternalEntityEntry entry, TKey& key);
    public virtual bool TryCreateFromOriginalValues(InternalEntityEntry entry, TKey& key);
    public virtual bool TryCreateFromRelationshipSnapshot(InternalEntityEntry entry, TKey& key);
    private static bool HandleNullableValue(Nullable`1<TKey> value, TKey& key);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleNullablePrincipalDependentKeyValueFactory`2 : object {
    private PropertyAccessors _propertyAccessors;
    public SimpleNullablePrincipalDependentKeyValueFactory`2(PropertyAccessors propertyAccessors);
    public virtual bool TryCreateFromBuffer(ValueBuffer& modreq(System.Runtime.InteropServices.InAttribute) valueBuffer, TKey& key);
    public virtual bool TryCreateFromCurrentValues(InternalEntityEntry entry, TKey& key);
    public virtual bool TryCreateFromPreStoreGeneratedCurrentValues(InternalEntityEntry entry, TKey& key);
    public virtual bool TryCreateFromOriginalValues(InternalEntityEntry entry, TKey& key);
    public virtual bool TryCreateFromRelationshipSnapshot(InternalEntityEntry entry, TKey& key);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimplePrincipalKeyValueFactory`1 : object {
    private IProperty _property;
    private PropertyAccessors _propertyAccessors;
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<TKey> <EqualityComparer>k__BackingField;
    public IEqualityComparer`1<TKey> EqualityComparer { get; }
    public SimplePrincipalKeyValueFactory`1(IProperty property);
    public virtual object CreateFromKeyValues(Object[] keyValues);
    public virtual object CreateFromBuffer(ValueBuffer valueBuffer);
    public virtual IProperty FindNullPropertyInKeyValues(Object[] keyValues);
    public virtual IProperty FindNullPropertyInValueBuffer(ValueBuffer valueBuffer);
    public virtual TKey CreateFromCurrentValues(InternalEntityEntry entry);
    public virtual IProperty FindNullPropertyInCurrentValues(InternalEntityEntry entry);
    public virtual TKey CreateFromOriginalValues(InternalEntityEntry entry);
    public virtual TKey CreateFromRelationshipSnapshot(InternalEntityEntry entry);
    [CompilerGeneratedAttribute]
public virtual IEqualityComparer`1<TKey> get_EqualityComparer();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot : object {
    public static int MaxGenericTypes;
    public static ISnapshot Empty;
    public object Item { get; public set; }
    private static Snapshot();
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
    public sealed virtual T GetValue(int index);
    public static Delegate[] CreateReaders();
    public static Type CreateSnapshotType(Type[] types);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`1 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    public object Item { get; public set; }
    public Snapshot`1(T0 value0);
    private static Snapshot`1();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`10 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    public object Item { get; public set; }
    public Snapshot`10(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9);
    private static Snapshot`10();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`11 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    public object Item { get; public set; }
    public Snapshot`11(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10);
    private static Snapshot`11();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`12 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    public object Item { get; public set; }
    public Snapshot`12(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11);
    private static Snapshot`12();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`13 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    public object Item { get; public set; }
    public Snapshot`13(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12);
    private static Snapshot`13();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`14 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    public object Item { get; public set; }
    public Snapshot`14(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13);
    private static Snapshot`14();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`15 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    public object Item { get; public set; }
    public Snapshot`15(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14);
    private static Snapshot`15();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`16 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    public object Item { get; public set; }
    public Snapshot`16(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15);
    private static Snapshot`16();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`17 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    public object Item { get; public set; }
    public Snapshot`17(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16);
    private static Snapshot`17();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`18 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    private T17 _value17;
    public object Item { get; public set; }
    public Snapshot`18(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16, T17 value17);
    private static Snapshot`18();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`19 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    private T17 _value17;
    private T18 _value18;
    public object Item { get; public set; }
    public Snapshot`19(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16, T17 value17, T18 value18);
    private static Snapshot`19();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`2 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    public object Item { get; public set; }
    public Snapshot`2(T0 value0, T1 value1);
    private static Snapshot`2();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`20 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    private T17 _value17;
    private T18 _value18;
    private T19 _value19;
    public object Item { get; public set; }
    public Snapshot`20(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16, T17 value17, T18 value18, T19 value19);
    private static Snapshot`20();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`21 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    private T17 _value17;
    private T18 _value18;
    private T19 _value19;
    private T20 _value20;
    public object Item { get; public set; }
    public Snapshot`21(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16, T17 value17, T18 value18, T19 value19, T20 value20);
    private static Snapshot`21();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`22 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    private T17 _value17;
    private T18 _value18;
    private T19 _value19;
    private T20 _value20;
    private T21 _value21;
    public object Item { get; public set; }
    public Snapshot`22(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16, T17 value17, T18 value18, T19 value19, T20 value20, T21 value21);
    private static Snapshot`22();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`23 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    private T17 _value17;
    private T18 _value18;
    private T19 _value19;
    private T20 _value20;
    private T21 _value21;
    private T22 _value22;
    public object Item { get; public set; }
    public Snapshot`23(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16, T17 value17, T18 value18, T19 value19, T20 value20, T21 value21, T22 value22);
    private static Snapshot`23();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`24 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    private T17 _value17;
    private T18 _value18;
    private T19 _value19;
    private T20 _value20;
    private T21 _value21;
    private T22 _value22;
    private T23 _value23;
    public object Item { get; public set; }
    public Snapshot`24(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16, T17 value17, T18 value18, T19 value19, T20 value20, T21 value21, T22 value22, T23 value23);
    private static Snapshot`24();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`25 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    private T17 _value17;
    private T18 _value18;
    private T19 _value19;
    private T20 _value20;
    private T21 _value21;
    private T22 _value22;
    private T23 _value23;
    private T24 _value24;
    public object Item { get; public set; }
    public Snapshot`25(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16, T17 value17, T18 value18, T19 value19, T20 value20, T21 value21, T22 value22, T23 value23, T24 value24);
    private static Snapshot`25();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`26 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    private T17 _value17;
    private T18 _value18;
    private T19 _value19;
    private T20 _value20;
    private T21 _value21;
    private T22 _value22;
    private T23 _value23;
    private T24 _value24;
    private T25 _value25;
    public object Item { get; public set; }
    public Snapshot`26(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16, T17 value17, T18 value18, T19 value19, T20 value20, T21 value21, T22 value22, T23 value23, T24 value24, T25 value25);
    private static Snapshot`26();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`27 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    private T17 _value17;
    private T18 _value18;
    private T19 _value19;
    private T20 _value20;
    private T21 _value21;
    private T22 _value22;
    private T23 _value23;
    private T24 _value24;
    private T25 _value25;
    private T26 _value26;
    public object Item { get; public set; }
    public Snapshot`27(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16, T17 value17, T18 value18, T19 value19, T20 value20, T21 value21, T22 value22, T23 value23, T24 value24, T25 value25, T26 value26);
    private static Snapshot`27();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`28 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    private T17 _value17;
    private T18 _value18;
    private T19 _value19;
    private T20 _value20;
    private T21 _value21;
    private T22 _value22;
    private T23 _value23;
    private T24 _value24;
    private T25 _value25;
    private T26 _value26;
    private T27 _value27;
    public object Item { get; public set; }
    public Snapshot`28(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16, T17 value17, T18 value18, T19 value19, T20 value20, T21 value21, T22 value22, T23 value23, T24 value24, T25 value25, T26 value26, T27 value27);
    private static Snapshot`28();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`29 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    private T17 _value17;
    private T18 _value18;
    private T19 _value19;
    private T20 _value20;
    private T21 _value21;
    private T22 _value22;
    private T23 _value23;
    private T24 _value24;
    private T25 _value25;
    private T26 _value26;
    private T27 _value27;
    private T28 _value28;
    public object Item { get; public set; }
    public Snapshot`29(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16, T17 value17, T18 value18, T19 value19, T20 value20, T21 value21, T22 value22, T23 value23, T24 value24, T25 value25, T26 value26, T27 value27, T28 value28);
    private static Snapshot`29();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`3 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    public object Item { get; public set; }
    public Snapshot`3(T0 value0, T1 value1, T2 value2);
    private static Snapshot`3();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`30 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    private T17 _value17;
    private T18 _value18;
    private T19 _value19;
    private T20 _value20;
    private T21 _value21;
    private T22 _value22;
    private T23 _value23;
    private T24 _value24;
    private T25 _value25;
    private T26 _value26;
    private T27 _value27;
    private T28 _value28;
    private T29 _value29;
    public object Item { get; public set; }
    public Snapshot`30(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16, T17 value17, T18 value18, T19 value19, T20 value20, T21 value21, T22 value22, T23 value23, T24 value24, T25 value25, T26 value26, T27 value27, T28 value28, T29 value29);
    private static Snapshot`30();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`4 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    public object Item { get; public set; }
    public Snapshot`4(T0 value0, T1 value1, T2 value2, T3 value3);
    private static Snapshot`4();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`5 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    public object Item { get; public set; }
    public Snapshot`5(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4);
    private static Snapshot`5();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`6 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    public object Item { get; public set; }
    public Snapshot`6(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5);
    private static Snapshot`6();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`7 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    public object Item { get; public set; }
    public Snapshot`7(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6);
    private static Snapshot`7();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`8 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    public object Item { get; public set; }
    public Snapshot`8(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7);
    private static Snapshot`8();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`9 : object {
    private static Delegate[] _valueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    public object Item { get; public set; }
    public Snapshot`9(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8);
    private static Snapshot`9();
    public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
public abstract class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory : object {
    private static MethodInfo _snapshotCollectionMethod;
    protected bool UseEntityVariable { get; }
    private static SnapshotFactoryFactory();
    public virtual Func`1<ISnapshot> CreateEmpty(IEntityType entityType);
    protected virtual Expression CreateConstructorExpression(IEntityType entityType, ParameterExpression parameter);
    protected virtual Expression CreateSnapshotExpression(Type entityType, ParameterExpression parameter, Type[] types, IList`1<IPropertyBase> propertyBases);
    private Expression CreateSnapshotValueExpression(Expression expression, IPropertyBase propertyBase);
    protected abstract virtual ValueComparer GetValueComparer(IProperty property);
    protected virtual Expression CreateReadShadowValueExpression(ParameterExpression parameter, IPropertyBase property);
    protected virtual Expression CreateReadValueExpression(ParameterExpression parameter, IPropertyBase property);
    protected abstract virtual int GetPropertyIndex(IPropertyBase propertyBase);
    protected abstract virtual int GetPropertyCount(IEntityType entityType);
    protected virtual bool get_UseEntityVariable();
    [UsedImplicitlyAttribute]
private static HashSet`1<object> SnapshotCollection(IEnumerable`1<object> collection);
}
public abstract class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory`1 : SnapshotFactoryFactory {
    public virtual Func`2<TInput, ISnapshot> Create(IEntityType entityType);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SortableBindingList`1 : BindingList`1<T> {
    private bool _isSorted;
    private ListSortDirection _sortDirection;
    private PropertyDescriptor _sortProperty;
    protected bool IsSortedCore { get; }
    protected ListSortDirection SortDirectionCore { get; }
    protected PropertyDescriptor SortPropertyCore { get; }
    protected bool SupportsSortingCore { get; }
    public SortableBindingList`1(List`1<T> list);
    protected virtual void ApplySortCore(PropertyDescriptor prop, ListSortDirection direction);
    protected virtual void RemoveSortCore();
    protected virtual bool get_IsSortedCore();
    protected virtual ListSortDirection get_SortDirectionCore();
    protected virtual PropertyDescriptor get_SortPropertyCore();
    protected virtual bool get_SupportsSortingCore();
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager : object {
    private EntityReferenceMap _entityReferenceMap;
    private IDictionary`2<object, IList`1<Tuple`2<INavigation, InternalEntityEntry>>> _referencedUntrackedEntities;
    private IIdentityMap _identityMap0;
    private IIdentityMap _identityMap1;
    private Dictionary`2<IKey, IIdentityMap> _identityMaps;
    private bool _needsUnsubscribe;
    private IDiagnosticsLogger`1<ChangeTracking> _changeTrackingLogger;
    private IInternalEntityEntryFactory _internalEntityEntryFactory;
    private IInternalEntityEntrySubscriber _internalEntityEntrySubscriber;
    private IModel _model;
    private IDatabase _database;
    private IConcurrencyDetector _concurrencyDetector;
    [CompilerGeneratedAttribute]
private StateManagerDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SensitiveLoggingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Update> <UpdateLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private CascadeTiming <DeleteOrphansTiming>k__BackingField;
    [CompilerGeneratedAttribute]
private CascadeTiming <CascadeDeleteTiming>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SavingChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private IInternalEntityEntryNotifier <InternalEntityEntryNotifier>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueGenerationManager <ValueGenerationManager>k__BackingField;
    [CompilerGeneratedAttribute]
private DbContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityFinderFactory <EntityFinderFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityMaterializerSource <EntityMaterializerSource>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ChangedCount>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EntityTrackedEventArgs> Tracked;
    [CompilerGeneratedAttribute]
private EventHandler`1<EntityStateChangedEventArgs> StateChanged;
    public StateManagerDependencies Dependencies { get; }
    public bool SensitiveLoggingEnabled { get; }
    public IDiagnosticsLogger`1<Update> UpdateLogger { get; }
    public CascadeTiming DeleteOrphansTiming { get; public set; }
    public CascadeTiming CascadeDeleteTiming { get; public set; }
    public bool SavingChanges { get; public set; }
    public IInternalEntityEntryNotifier InternalEntityEntryNotifier { get; }
    public IValueGenerationManager ValueGenerationManager { get; }
    public DbContext Context { get; }
    public IModel Model { get; }
    public IEntityFinderFactory EntityFinderFactory { get; }
    public IEntityMaterializerSource EntityMaterializerSource { get; }
    public int Count { get; }
    public IEnumerable`1<InternalEntityEntry> Entries { get; }
    public int ChangedCount { get; public set; }
    public StateManager(StateManagerDependencies dependencies);
    [CompilerGeneratedAttribute]
public virtual StateManagerDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
public virtual bool get_SensitiveLoggingEnabled();
    [CompilerGeneratedAttribute]
public virtual IDiagnosticsLogger`1<Update> get_UpdateLogger();
    [CompilerGeneratedAttribute]
public virtual CascadeTiming get_DeleteOrphansTiming();
    [CompilerGeneratedAttribute]
public virtual void set_DeleteOrphansTiming(CascadeTiming value);
    [CompilerGeneratedAttribute]
public virtual CascadeTiming get_CascadeDeleteTiming();
    [CompilerGeneratedAttribute]
public virtual void set_CascadeDeleteTiming(CascadeTiming value);
    [CompilerGeneratedAttribute]
public virtual bool get_SavingChanges();
    [CompilerGeneratedAttribute]
public virtual void set_SavingChanges(bool value);
    [CompilerGeneratedAttribute]
public virtual IInternalEntityEntryNotifier get_InternalEntityEntryNotifier();
    public virtual void StateChanging(InternalEntityEntry entry, EntityState newState);
    [CompilerGeneratedAttribute]
public virtual IValueGenerationManager get_ValueGenerationManager();
    [CompilerGeneratedAttribute]
public virtual DbContext get_Context();
    public virtual IModel get_Model();
    [CompilerGeneratedAttribute]
public virtual IEntityFinderFactory get_EntityFinderFactory();
    [CompilerGeneratedAttribute]
public virtual IEntityMaterializerSource get_EntityMaterializerSource();
    public virtual InternalEntityEntry GetOrCreateEntry(object entity);
    public virtual InternalEntityEntry GetOrCreateEntry(object entity, IEntityType entityType);
    public virtual InternalEntityEntry CreateEntry(IDictionary`2<string, object> values, IEntityType entityType);
    private void UpdateReferenceMaps(InternalEntityEntry entry, EntityState state, Nullable`1<EntityState> oldState);
    public virtual InternalEntityEntry StartTrackingFromQuery(IEntityType baseEntityType, object entity, ValueBuffer& modreq(System.Runtime.InteropServices.InAttribute) valueBuffer);
    public virtual InternalEntityEntry TryGetEntry(IKey key, Object[] keyValues);
    public virtual InternalEntityEntry TryGetEntry(IKey key, Object[] keyValues, bool throwOnNullKey, Boolean& hasNullKey);
    public virtual InternalEntityEntry TryGetEntry(object entity, bool throwOnNonUniqueness);
    public virtual InternalEntityEntry TryGetEntry(object entity, IEntityType entityType, bool throwOnTypeMismatch);
    private IIdentityMap GetOrCreateIdentityMap(IKey key);
    private IIdentityMap FindIdentityMap(IKey key);
    public virtual int GetCountForState(bool added, bool modified, bool deleted, bool unchanged);
    public virtual int get_Count();
    public virtual IEnumerable`1<InternalEntityEntry> GetEntriesForState(bool added, bool modified, bool deleted, bool unchanged);
    public virtual IEnumerable`1<InternalEntityEntry> get_Entries();
    public virtual IEnumerable`1<TEntity> GetNonDeletedEntities();
    public virtual InternalEntityEntry StartTracking(InternalEntityEntry entry);
    public virtual void StopTracking(InternalEntityEntry entry, EntityState oldState);
    public virtual void Unsubscribe();
    public virtual void ResetState();
    public virtual Task ResetStateAsync(CancellationToken cancellationToken);
    public virtual void RecordReferencedUntrackedEntity(object referencedEntity, INavigation navigation, InternalEntityEntry referencedFromEntry);
    public virtual IEnumerable`1<Tuple`2<INavigation, InternalEntityEntry>> GetRecordedReferrers(object referencedEntity, bool clear);
    public virtual InternalEntityEntry FindPrincipal(InternalEntityEntry dependentEntry, IForeignKey foreignKey);
    public virtual InternalEntityEntry FindPrincipalUsingPreStoreGeneratedValues(InternalEntityEntry dependentEntry, IForeignKey foreignKey);
    public virtual InternalEntityEntry FindPrincipalUsingRelationshipSnapshot(InternalEntityEntry dependentEntry, IForeignKey foreignKey);
    private static InternalEntityEntry FilterIncompatiblePrincipal(IForeignKey foreignKey, InternalEntityEntry principalEntry);
    public virtual void UpdateIdentityMap(InternalEntityEntry entry, IKey key);
    public virtual void UpdateDependentMap(InternalEntityEntry entry, IForeignKey foreignKey);
    public virtual IEnumerable`1<InternalEntityEntry> GetDependents(InternalEntityEntry principalEntry, IForeignKey foreignKey);
    public virtual IEnumerable`1<InternalEntityEntry> GetDependentsUsingRelationshipSnapshot(InternalEntityEntry principalEntry, IForeignKey foreignKey);
    public virtual IEnumerable`1<InternalEntityEntry> GetDependentsFromNavigation(InternalEntityEntry principalEntry, IForeignKey foreignKey);
    public virtual IEntityFinder CreateEntityFinder(IEntityType entityType);
    [CompilerGeneratedAttribute]
public virtual int get_ChangedCount();
    [CompilerGeneratedAttribute]
public virtual void set_ChangedCount(int value);
    public virtual IList`1<IUpdateEntry> GetEntriesToSave(bool cascadeChanges);
    public virtual void CascadeChanges(bool force);
    public virtual void CascadeDelete(InternalEntityEntry entry, bool force, IEnumerable`1<IForeignKey> foreignKeys);
    private static bool KeysEqual(InternalEntityEntry entry, IForeignKey fk, InternalEntityEntry dependent);
    private static bool KeyValuesEqual(IProperty property, object value, object currentValue);
    protected virtual int SaveChanges(IList`1<IUpdateEntry> entriesToSave);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager/<SaveChangesAsync>d__97")]
protected virtual Task`1<int> SaveChangesAsync(IList`1<IUpdateEntry> entriesToSave, CancellationToken cancellationToken);
    public virtual int SaveChanges(bool acceptAllChangesOnSuccess);
    private int SaveChanges(DbContext _, bool acceptAllChangesOnSuccess);
    public virtual Task`1<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager/<SaveChangesAsync>d__101")]
private Task`1<int> SaveChangesAsync(DbContext _, bool acceptAllChangesOnSuccess, CancellationToken cancellationToken);
    public virtual void AcceptAllChanges();
    private static void AcceptAllChanges(IReadOnlyList`1<IUpdateEntry> changedEntries);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Tracked(EventHandler`1<EntityTrackedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Tracked(EventHandler`1<EntityTrackedEventArgs> value);
    public virtual void OnTracked(InternalEntityEntry internalEntityEntry, bool fromQuery);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StateChanged(EventHandler`1<EntityStateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StateChanged(EventHandler`1<EntityStateChangedEventArgs> value);
    public virtual void OnStateChanged(InternalEntityEntry internalEntityEntry, EntityState oldState);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies : object {
    [CompilerGeneratedAttribute]
private IInternalEntityEntryFactory <InternalEntityEntryFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IInternalEntityEntrySubscriber <InternalEntityEntrySubscriber>k__BackingField;
    [CompilerGeneratedAttribute]
private IInternalEntityEntryNotifier <InternalEntityEntryNotifier>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueGenerationManager <ValueGenerationManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private IDatabase <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private IConcurrencyDetector <ConcurrencyDetector>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbSetSource <SetSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityFinderSource <EntityFinderSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityMaterializerSource <EntityMaterializerSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IExecutionStrategyFactory <ExecutionStrategyFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private ILoggingOptions <LoggingOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Update> <UpdateLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<ChangeTracking> <ChangeTrackingLogger>k__BackingField;
    public IInternalEntityEntryFactory InternalEntityEntryFactory { get; }
    public IInternalEntityEntrySubscriber InternalEntityEntrySubscriber { get; }
    public IInternalEntityEntryNotifier InternalEntityEntryNotifier { get; }
    public IValueGenerationManager ValueGenerationManager { get; }
    public IModel Model { get; }
    public IDatabase Database { get; }
    public IConcurrencyDetector ConcurrencyDetector { get; }
    public ICurrentDbContext CurrentContext { get; }
    public IDbSetSource SetSource { get; }
    public IEntityFinderSource EntityFinderSource { get; }
    public IEntityMaterializerSource EntityMaterializerSource { get; }
    public IExecutionStrategyFactory ExecutionStrategyFactory { get; }
    public ILoggingOptions LoggingOptions { get; }
    public IDiagnosticsLogger`1<Update> UpdateLogger { get; }
    public IDiagnosticsLogger`1<ChangeTracking> ChangeTrackingLogger { get; }
    [EntityFrameworkInternalAttribute]
public StateManagerDependencies(IInternalEntityEntryFactory internalEntityEntryFactory, IInternalEntityEntrySubscriber internalEntityEntrySubscriber, IInternalEntityEntryNotifier internalEntityEntryNotifier, IValueGenerationManager valueGenerationManager, IModel model, IDatabase database, IConcurrencyDetector concurrencyDetector, ICurrentDbContext currentContext, IEntityFinderSource entityFinderSource, IDbSetSource setSource, IEntityMaterializerSource entityMaterializerSource, IExecutionStrategyFactory executionStrategyFactory, ILoggingOptions loggingOptions, IDiagnosticsLogger`1<Update> updateLogger, IDiagnosticsLogger`1<ChangeTracking> changeTrackingLogger);
    [CompilerGeneratedAttribute]
public IInternalEntityEntryFactory get_InternalEntityEntryFactory();
    [CompilerGeneratedAttribute]
public IInternalEntityEntrySubscriber get_InternalEntityEntrySubscriber();
    [CompilerGeneratedAttribute]
public IInternalEntityEntryNotifier get_InternalEntityEntryNotifier();
    [CompilerGeneratedAttribute]
public IValueGenerationManager get_ValueGenerationManager();
    [CompilerGeneratedAttribute]
public IModel get_Model();
    [CompilerGeneratedAttribute]
public IDatabase get_Database();
    [CompilerGeneratedAttribute]
public IConcurrencyDetector get_ConcurrencyDetector();
    [CompilerGeneratedAttribute]
public ICurrentDbContext get_CurrentContext();
    [CompilerGeneratedAttribute]
public IDbSetSource get_SetSource();
    [CompilerGeneratedAttribute]
public IEntityFinderSource get_EntityFinderSource();
    [CompilerGeneratedAttribute]
public IEntityMaterializerSource get_EntityMaterializerSource();
    [CompilerGeneratedAttribute]
public IExecutionStrategyFactory get_ExecutionStrategyFactory();
    [CompilerGeneratedAttribute]
public ILoggingOptions get_LoggingOptions();
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Update> get_UpdateLogger();
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<ChangeTracking> get_ChangeTrackingLogger();
    public StateManagerDependencies With(IInternalEntityEntryFactory internalEntityEntryFactory);
    public StateManagerDependencies With(IInternalEntityEntrySubscriber internalEntityEntrySubscriber);
    public StateManagerDependencies With(IInternalEntityEntryNotifier internalEntityEntryNotifier);
    public StateManagerDependencies With(ValueGenerationManager valueGenerationManager);
    public StateManagerDependencies With(IModel model);
    public StateManagerDependencies With(IDatabase database);
    public StateManagerDependencies With(IConcurrencyDetector concurrencyDetector);
    public StateManagerDependencies With(ICurrentDbContext currentContext);
    public StateManagerDependencies With(IEntityFinderSource entityFinderSource);
    public StateManagerDependencies With(IDbSetSource setSource);
    public StateManagerDependencies With(IEntityMaterializerSource entityMaterializerSource);
    public StateManagerDependencies With(IExecutionStrategyFactory executionStrategyFactory);
    public StateManagerDependencies With(ILoggingOptions loggingOptions);
    public StateManagerDependencies With(IDiagnosticsLogger`1<Update> updateLogger);
    public StateManagerDependencies With(IDiagnosticsLogger`1<ChangeTracking> changeTrackingLogger);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerExtensions : object {
    [ExtensionAttribute]
public static IReadOnlyList`1<InternalEntityEntry> ToListForState(IStateManager stateManager, bool added, bool modified, bool deleted, bool unchanged);
    [ExtensionAttribute]
public static IReadOnlyList`1<InternalEntityEntry> ToList(IStateManager stateManager);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.TemporaryValuesFactoryFactory : SidecarValuesFactoryFactory {
    protected virtual Expression CreateSnapshotExpression(Type entityType, ParameterExpression parameter, Type[] types, IList`1<IPropertyBase> propertyBases);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ValueComparerExtensions : object {
    [ExtensionAttribute]
public static ValueComparer ToNonNullNullableComparer(ValueComparer comparer);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ValueGenerationManager : object {
    private IValueGeneratorSelector _valueGeneratorSelector;
    private IKeyPropagator _keyPropagator;
    private IDiagnosticsLogger`1<ChangeTracking> _logger;
    private ILoggingOptions _loggingOptions;
    public ValueGenerationManager(IValueGeneratorSelector valueGeneratorSelector, IKeyPropagator keyPropagator, IDiagnosticsLogger`1<ChangeTracking> logger, ILoggingOptions loggingOptions);
    public virtual InternalEntityEntry Propagate(InternalEntityEntry entry);
    public virtual void Generate(InternalEntityEntry entry);
    private void Log(InternalEntityEntry entry, IProperty property, object generatedValue, bool temporary);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ValueGenerationManager/<GenerateAsync>d__8")]
public virtual Task GenerateAsync(InternalEntityEntry entry, CancellationToken cancellationToken);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ValueGenerationManager/<FindPropagatingProperties>d__9")]
private static IEnumerable`1<IProperty> FindPropagatingProperties(InternalEntityEntry entry);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ValueGenerationManager/<FindGeneratingProperties>d__10")]
private static IEnumerable`1<IProperty> FindGeneratingProperties(InternalEntityEntry entry);
    private ValueGenerator GetValueGenerator(InternalEntityEntry entry, IProperty property);
    public virtual bool MayGetTemporaryValue(IProperty property, IEntityType entityType);
    private static void SetGeneratedValue(InternalEntityEntry entry, IProperty property, object generatedValue, bool isTemporary);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1 : object {
    private ObservableBackedBindingList`1<TEntity> _bindingList;
    private ObservableCollection`1<TEntity> _observable;
    private DbContext _context;
    private int _countChanges;
    private Nullable`1<int> _count;
    private bool _triggeringStateManagerChange;
    private bool _triggeringObservableChange;
    private bool _triggeringLocalViewChange;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private PropertyChangingEventHandler PropertyChanging;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    public int Count { get; }
    public bool IsReadOnly { get; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    [EntityFrameworkInternalAttribute]
public LocalView`1(DbSet`1<TEntity> set);
    public virtual ObservableCollection`1<TEntity> ToObservableCollection();
    private void LocalViewCollectionChanged(object _, NotifyCollectionChangedEventArgs args);
    private void ObservableCollectionChanged(object _, NotifyCollectionChangedEventArgs args);
    public virtual IEnumerator`1<TEntity> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual void Add(TEntity item);
    public virtual void Clear();
    public virtual bool Contains(TEntity item);
    public virtual void CopyTo(TEntity[] array, int arrayIndex);
    public virtual bool Remove(TEntity item);
    private void StateManagerChangedHandler(InternalEntityEntry entry, EntityState previousState);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void add_PropertyChanging(PropertyChangingEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_PropertyChanging(PropertyChangingEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    protected virtual void OnPropertyChanging(PropertyChangingEventArgs e);
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    private void OnCountPropertyChanged();
    private void OnCountPropertyChanging();
    private void OnCollectionChanged(NotifyCollectionChangedAction action, object item);
    public virtual BindingList`1<TEntity> ToBindingList();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
}
public abstract class Microsoft.EntityFrameworkCore.ChangeTracking.MemberEntry : object {
    [CompilerGeneratedAttribute]
private InternalEntityEntry <InternalEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private IPropertyBase <Metadata>k__BackingField;
    [EntityFrameworkInternalAttribute]
protected InternalEntityEntry InternalEntry { get; }
    public bool IsModified { get; public set; }
    public IPropertyBase Metadata { get; }
    public object CurrentValue { get; public set; }
    public EntityEntry EntityEntry { get; }
    [EntityFrameworkInternalAttribute]
private InternalEntityEntry Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>.Instance { get; }
    [EntityFrameworkInternalAttribute]
protected MemberEntry(InternalEntityEntry internalEntry, IPropertyBase metadata);
    [CompilerGeneratedAttribute]
protected virtual InternalEntityEntry get_InternalEntry();
    public abstract virtual bool get_IsModified();
    public abstract virtual void set_IsModified(bool value);
    [CompilerGeneratedAttribute]
public virtual IPropertyBase get_Metadata();
    public virtual object get_CurrentValue();
    public virtual void set_CurrentValue(object value);
    public virtual EntityEntry get_EntityEntry();
    private sealed virtual override InternalEntityEntry Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>.get_Instance();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
public abstract class Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry : MemberEntry {
    public bool IsLoaded { get; public set; }
    private IEntityFinder TargetFinder { get; }
    public bool IsModified { get; public set; }
    public INavigation Metadata { get; }
    [EntityFrameworkInternalAttribute]
protected NavigationEntry(InternalEntityEntry internalEntry, string name, bool collection);
    [EntityFrameworkInternalAttribute]
protected NavigationEntry(InternalEntityEntry internalEntry, INavigation navigation);
    private static INavigation GetNavigation(InternalEntityEntry internalEntry, string name, bool collection);
    public virtual void Load();
    public virtual Task LoadAsync(CancellationToken cancellationToken);
    public virtual IQueryable Query();
    public virtual bool get_IsLoaded();
    public virtual void set_IsLoaded(bool value);
    private IEntityFinder get_TargetFinder();
    public virtual bool get_IsModified();
    public virtual void set_IsModified(bool value);
    private bool CollectionContainsNewOrChangedRelationships(object relatedEntity);
    private bool AnyFkPropertiesModified(object relatedEntity);
    private void SetFkPropertiesModified(object relatedEntity, bool modified);
    private void SetFkPropertiesModified(InternalEntityEntry internalEntityEntry, bool modified);
    private bool AnyFkPropertiesModified(InternalEntityEntry internalEntityEntry);
    public virtual INavigation get_Metadata();
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.ObservableCollectionListSource`1 : ObservableCollection`1<T> {
    private IBindingList _bindingList;
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    public ObservableCollectionListSource`1(IEnumerable`1<T> collection);
    public ObservableCollectionListSource`1(List`1<T> list);
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1 : object {
    private HashSet`1<T> _set;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private PropertyChangingEventHandler PropertyChanging;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public IEqualityComparer`1<T> Comparer { get; }
    public ObservableHashSet`1(IEqualityComparer`1<T> comparer);
    public ObservableHashSet`1(IEnumerable`1<T> collection);
    public ObservableHashSet`1(IEnumerable`1<T> collection, IEqualityComparer`1<T> comparer);
    [CompilerGeneratedAttribute]
public virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void add_PropertyChanging(PropertyChangingEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_PropertyChanging(PropertyChangingEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    public virtual void Clear();
    public virtual bool Contains(T item);
    public virtual void CopyTo(T[] array, int arrayIndex);
    public virtual bool Remove(T item);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual Enumerator<T> GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual bool Add(T item);
    public virtual void UnionWith(IEnumerable`1<T> other);
    public virtual void IntersectWith(IEnumerable`1<T> other);
    public virtual void ExceptWith(IEnumerable`1<T> other);
    public virtual void SymmetricExceptWith(IEnumerable`1<T> other);
    public virtual bool IsSubsetOf(IEnumerable`1<T> other);
    public virtual bool IsProperSubsetOf(IEnumerable`1<T> other);
    public virtual bool IsSupersetOf(IEnumerable`1<T> other);
    public virtual bool IsProperSupersetOf(IEnumerable`1<T> other);
    public virtual bool Overlaps(IEnumerable`1<T> other);
    public virtual bool SetEquals(IEnumerable`1<T> other);
    public virtual void CopyTo(T[] array);
    public virtual void CopyTo(T[] array, int arrayIndex, int count);
    public virtual int RemoveWhere(Predicate`1<T> match);
    public virtual IEqualityComparer`1<T> get_Comparer();
    public virtual void TrimExcess();
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    protected virtual void OnPropertyChanging(PropertyChangingEventArgs e);
    private void OnCountPropertyChanged();
    private void OnCountPropertyChanging();
    private void OnCollectionChanged(NotifyCollectionChangedAction action, object item);
    private void OnCollectionChanged(IList newItems, IList oldItems);
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
private bool <UnionWith>b__27_0(T i);
}
internal static class Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSetSingletons : object {
    public static PropertyChangedEventArgs _countPropertyChanged;
    public static PropertyChangingEventArgs _countPropertyChanging;
    public static Object[] _noItems;
    private static ObservableHashSetSingletons();
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry : MemberEntry {
    public bool IsModified { get; public set; }
    public bool IsTemporary { get; public set; }
    public IProperty Metadata { get; }
    public object OriginalValue { get; public set; }
    [EntityFrameworkInternalAttribute]
public PropertyEntry(InternalEntityEntry internalEntry, string name);
    [EntityFrameworkInternalAttribute]
public PropertyEntry(InternalEntityEntry internalEntry, IProperty property);
    public virtual bool get_IsModified();
    public virtual void set_IsModified(bool value);
    public virtual bool get_IsTemporary();
    public virtual void set_IsTemporary(bool value);
    public virtual IProperty get_Metadata();
    public virtual object get_OriginalValue();
    public virtual void set_OriginalValue(object value);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry`2 : PropertyEntry {
    public EntityEntry`1<TEntity> EntityEntry { get; }
    public TProperty CurrentValue { get; public set; }
    public TProperty OriginalValue { get; public set; }
    [EntityFrameworkInternalAttribute]
public PropertyEntry`2(InternalEntityEntry internalEntry, string name);
    [EntityFrameworkInternalAttribute]
public PropertyEntry`2(InternalEntityEntry internalEntry, IProperty property);
    public virtual EntityEntry`1<TEntity> get_EntityEntry();
    public virtual TProperty get_CurrentValue();
    public virtual void set_CurrentValue(TProperty value);
    public virtual TProperty get_OriginalValue();
    public virtual void set_OriginalValue(TProperty value);
}
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues : object {
    [CompilerGeneratedAttribute]
private InternalEntityEntry <InternalEntry>k__BackingField;
    [EntityFrameworkInternalAttribute]
protected InternalEntityEntry InternalEntry { get; }
    public IReadOnlyList`1<IProperty> Properties { get; }
    public IEntityType EntityType { get; }
    public object Item { get; public set; }
    public object Item { get; public set; }
    [EntityFrameworkInternalAttribute]
protected PropertyValues(InternalEntityEntry internalEntry);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
protected virtual InternalEntityEntry get_InternalEntry();
    public abstract virtual object ToObject();
    public abstract virtual void SetValues(object obj);
    public abstract virtual PropertyValues Clone();
    public abstract virtual void SetValues(PropertyValues propertyValues);
    public virtual void SetValues(IDictionary`2<string, object> values);
    public abstract virtual IReadOnlyList`1<IProperty> get_Properties();
    [DebuggerStepThroughAttribute]
public virtual IEntityType get_EntityType();
    public abstract virtual object get_Item(string propertyName);
    public abstract virtual void set_Item(string propertyName, object value);
    public abstract virtual object get_Item(IProperty property);
    public abstract virtual void set_Item(IProperty property, object value);
    public abstract virtual TValue GetValue(string propertyName);
    public abstract virtual TValue GetValue(IProperty property);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry : NavigationEntry {
    public EntityEntry TargetEntry { get; }
    [EntityFrameworkInternalAttribute]
public ReferenceEntry(InternalEntityEntry internalEntry, string name);
    [EntityFrameworkInternalAttribute]
public ReferenceEntry(InternalEntityEntry internalEntry, INavigation navigation);
    private void LocalDetectChanges();
    public virtual EntityEntry get_TargetEntry();
    [EntityFrameworkInternalAttribute]
protected virtual InternalEntityEntry GetTargetEntry();
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry`2 : ReferenceEntry {
    public EntityEntry`1<TEntity> EntityEntry { get; }
    public EntityEntry`1<TProperty> TargetEntry { get; }
    public TProperty CurrentValue { get; public set; }
    [EntityFrameworkInternalAttribute]
public ReferenceEntry`2(InternalEntityEntry internalEntry, string name);
    [EntityFrameworkInternalAttribute]
public ReferenceEntry`2(InternalEntityEntry internalEntry, INavigation navigation);
    public virtual EntityEntry`1<TEntity> get_EntityEntry();
    public virtual EntityEntry`1<TProperty> get_TargetEntry();
    public virtual TProperty get_CurrentValue();
    public virtual void set_CurrentValue(TProperty value);
    public virtual IQueryable`1<TProperty> Query();
}
public abstract class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer : object {
    internal static MethodInfo EqualityComparerHashCodeMethod;
    internal static MethodInfo EqualityComparerEqualsMethod;
    internal static MethodInfo ObjectEqualsMethod;
    internal static MethodInfo ObjectGetHashCodeMethod;
    [CompilerGeneratedAttribute]
private LambdaExpression <EqualsExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private LambdaExpression <HashCodeExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private LambdaExpression <SnapshotExpression>k__BackingField;
    public Type Type { get; }
    public LambdaExpression EqualsExpression { get; }
    public LambdaExpression HashCodeExpression { get; }
    public LambdaExpression SnapshotExpression { get; }
    protected ValueComparer(LambdaExpression equalsExpression, LambdaExpression hashCodeExpression, LambdaExpression snapshotExpression);
    private static ValueComparer();
    public abstract virtual Type get_Type();
    public abstract virtual bool Equals(object left, object right);
    public abstract virtual int GetHashCode(object instance);
    public abstract virtual object Snapshot(object instance);
    [CompilerGeneratedAttribute]
public virtual LambdaExpression get_EqualsExpression();
    [CompilerGeneratedAttribute]
public virtual LambdaExpression get_HashCodeExpression();
    [CompilerGeneratedAttribute]
public virtual LambdaExpression get_SnapshotExpression();
    public virtual Expression ExtractEqualsBody(Expression leftExpression, Expression rightExpression);
    public virtual Expression ExtractHashCodeBody(Expression expression);
    public virtual Expression ExtractSnapshotBody(Expression expression);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1 : ValueComparer {
    private Func`3<T, T, bool> _equals;
    private Func`2<T, int> _hashCode;
    private Func`2<T, T> _snapshot;
    public Type Type { get; }
    public Expression`1<Func`3<T, T, bool>> EqualsExpression { get; }
    public Expression`1<Func`2<T, int>> HashCodeExpression { get; }
    public Expression`1<Func`2<T, T>> SnapshotExpression { get; }
    public ValueComparer`1(bool favorStructuralComparisons);
    public ValueComparer`1(Expression`1<Func`3<T, T, bool>> equalsExpression, Expression`1<Func`2<T, int>> hashCodeExpression);
    public ValueComparer`1(Expression`1<Func`3<T, T, bool>> equalsExpression, Expression`1<Func`2<T, int>> hashCodeExpression, Expression`1<Func`2<T, T>> snapshotExpression);
    protected static Expression`1<Func`3<T, T, bool>> CreateDefaultEqualsExpression();
    protected static Expression`1<Func`2<T, int>> CreateDefaultHashCodeExpression(bool favorStructuralComparisons);
    public virtual bool Equals(object left, object right);
    public virtual int GetHashCode(object instance);
    public virtual bool Equals(T left, T right);
    public virtual int GetHashCode(T instance);
    public virtual object Snapshot(object instance);
    public virtual T Snapshot(T instance);
    public virtual Type get_Type();
    public virtual Expression`1<Func`3<T, T, bool>> get_EqualsExpression();
    public virtual Expression`1<Func`2<T, int>> get_HashCodeExpression();
    public virtual Expression`1<Func`2<T, T>> get_SnapshotExpression();
}
public enum Microsoft.EntityFrameworkCore.ChangeTrackingStrategy : Enum {
    public int value__;
    public static ChangeTrackingStrategy Snapshot;
    public static ChangeTrackingStrategy ChangedNotifications;
    public static ChangeTrackingStrategy ChangingAndChangedNotifications;
    public static ChangeTrackingStrategy ChangingAndChangedNotificationsWithOriginalValues;
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.ConventionAnnotatableExtensions : object {
    [ExtensionAttribute]
public static IConventionAnnotation GetAnnotation(IConventionAnnotatable annotatable, string annotationName);
    [ExtensionAttribute]
public static void AddAnnotations(IConventionAnnotatable annotatable, IEnumerable`1<IConventionAnnotation> annotations, bool fromDataAnnotation);
    [ExtensionAttribute]
public static void SetOrRemoveAnnotation(IConventionAnnotatable annotatable, string name, object value, bool fromDataAnnotation);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions : object {
    [ExtensionAttribute]
public static IConventionEntityType GetRootType(IConventionEntityType entityType);
    [ExtensionAttribute]
[ObsoleteAttribute("Use GetRootType")]
public static IConventionEntityType RootType(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionEntityType> GetDerivedTypes(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionEntityType> GetDerivedTypesInclusive(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionEntityType> GetDirectlyDerivedTypes(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionEntityType> GetAllBaseTypesInclusive(IConventionEntityType entityType);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions/<GetAllBaseTypesInclusiveAscending>d__6")]
[ExtensionAttribute]
public static IEnumerable`1<IConventionEntityType> GetAllBaseTypesInclusiveAscending(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionKey> GetDeclaredKeys(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionProperty> GetDeclaredProperties(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionNavigation> GetDeclaredNavigations(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionServiceProperty> GetDeclaredServiceProperties(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionIndex> GetDeclaredIndexes(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IConventionProperty RemoveProperty(IConventionEntityType entityType, string name);
    [ExtensionAttribute]
public static IConventionKey SetPrimaryKey(IConventionEntityType entityType, IConventionProperty property, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionKey FindKey(IConventionEntityType entityType, IProperty property);
    [ExtensionAttribute]
public static IConventionKey AddKey(IConventionEntityType entityType, IConventionProperty property, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionKey RemoveKey(IConventionEntityType entityType, IReadOnlyList`1<IConventionProperty> properties);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionForeignKey> GetDeclaredForeignKeys(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionForeignKey> GetDerivedForeignKeys(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionForeignKey> FindForeignKeys(IConventionEntityType entityType, IProperty property);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionForeignKey> FindForeignKeys(IConventionEntityType entityType, IReadOnlyList`1<IProperty> properties);
    [ExtensionAttribute]
public static IConventionForeignKey FindForeignKey(IConventionEntityType entityType, IProperty property, IKey principalKey, IEntityType principalEntityType);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionForeignKey> FindDeclaredForeignKeys(IConventionEntityType entityType, IReadOnlyList`1<IProperty> properties);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionForeignKey> GetReferencingForeignKeys(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionForeignKey> GetDeclaredReferencingForeignKeys(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IConventionForeignKey FindOwnership(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IConventionForeignKey AddForeignKey(IConventionEntityType entityType, IConventionProperty property, IConventionKey principalKey, IConventionEntityType principalEntityType, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionForeignKey RemoveForeignKey(IConventionEntityType entityType, IReadOnlyList`1<IConventionProperty> properties, IConventionKey principalKey, IConventionEntityType principalEntityType);
    [ExtensionAttribute]
public static IConventionNavigation FindNavigation(IConventionEntityType entityType, MemberInfo memberInfo);
    [ExtensionAttribute]
public static IConventionNavigation FindNavigation(IConventionEntityType entityType, string name);
    [ExtensionAttribute]
public static IConventionNavigation FindDeclaredNavigation(IConventionEntityType entityType, string name);
    [ExtensionAttribute]
public static IConventionNavigation FindDefiningNavigation(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionNavigation> GetNavigations(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IConventionProperty FindProperty(IConventionEntityType entityType, MemberInfo memberInfo);
    [ExtensionAttribute]
public static IReadOnlyList`1<IConventionProperty> FindProperties(IConventionEntityType entityType, IReadOnlyList`1<string> propertyNames);
    [ExtensionAttribute]
public static IConventionProperty FindDeclaredProperty(IConventionEntityType entityType, string name);
    [ExtensionAttribute]
public static IConventionProperty AddProperty(IConventionEntityType entityType, MemberInfo memberInfo, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionProperty AddProperty(IConventionEntityType entityType, string name, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionProperty AddProperty(IConventionEntityType entityType, string name, Type propertyType, bool setTypeConfigurationSource, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionIndex FindIndex(IConventionEntityType entityType, IProperty property);
    [ExtensionAttribute]
public static IConventionIndex AddIndex(IConventionEntityType entityType, IConventionProperty property, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IConventionIndex RemoveIndex(IConventionEntityType entityType, IReadOnlyList`1<IConventionProperty> properties);
    [ExtensionAttribute]
public static void SetChangeTrackingStrategy(IConventionEntityType entityType, Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetChangeTrackingStrategyConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static void SetQueryFilter(IConventionEntityType entityType, LambdaExpression queryFilter, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetQueryFilterConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static void SetDefiningQuery(IConventionEntityType entityType, LambdaExpression definingQuery, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetDefiningQueryConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IConventionProperty GetDiscriminatorProperty(IConventionEntityType entityType);
    [ExtensionAttribute]
public static void SetDiscriminatorProperty(IConventionEntityType entityType, IProperty property, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetDiscriminatorPropertyConfigurationSource(IConventionEntityType entityType);
    [ExtensionAttribute]
public static void SetDiscriminatorValue(IConventionEntityType entityType, object value, bool fromDataAnnotation);
    [ExtensionAttribute]
public static void RemoveDiscriminatorValue(IConventionEntityType entityType);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetDiscriminatorValueConfigurationSource(IConventionEntityType entityType);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.ConventionForeignKeyExtensions : object {
    [ExtensionAttribute]
public static IConventionEntityType GetRelatedEntityType(IConventionForeignKey foreignKey, IConventionEntityType entityType);
    [ExtensionAttribute]
public static IConventionNavigation GetNavigation(IConventionForeignKey foreignKey, bool pointsToPrincipal);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.ConventionKeyExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<IConventionForeignKey> GetReferencingForeignKeys(IConventionKey key);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.ConventionModelExtensions : object {
    [ExtensionAttribute]
public static IConventionEntityType FindEntityType(IConventionModel model, Type type);
    [ExtensionAttribute]
public static IConventionEntityType FindEntityType(IConventionModel model, Type type, string definingNavigationName, IConventionEntityType definingEntityType);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static IReadOnlyCollection`1<IConventionEntityType> GetEntityTypes(IConventionModel model, Type type);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static IReadOnlyCollection`1<IConventionEntityType> GetEntityTypes(IConventionModel model, string name);
    [ExtensionAttribute]
public static IConventionEntityType RemoveEntityType(IConventionModel model, string name);
    [ExtensionAttribute]
public static IConventionEntityType RemoveEntityType(IConventionModel model, string name, string definingNavigationName, IConventionEntityType definingEntityType);
    [ExtensionAttribute]
public static IConventionEntityType RemoveEntityType(IConventionModel model, Type type);
    [ExtensionAttribute]
public static IConventionEntityType RemoveEntityType(IConventionModel model, Type type, string definingNavigationName, IConventionEntityType definingEntityType);
    [ExtensionAttribute]
public static IReadOnlyList`1<IConventionEntityType> FindLeastDerivedEntityTypes(IConventionModel model, Type type, Func`2<IConventionEntityType, bool> condition);
    [ExtensionAttribute]
public static void SetPropertyAccessMode(IConventionModel model, Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetPropertyAccessModeConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static void SetChangeTrackingStrategy(IConventionModel model, Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetChangeTrackingStrategyConfigurationSource(IConventionModel model);
    [ExtensionAttribute]
public static bool IsOwned(IConventionModel model, Type clrType);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> FindIsOwnedConfigurationSource(IConventionModel model, Type clrType);
    [ExtensionAttribute]
public static void AddOwned(IConventionModel model, Type clrType, bool fromDataAnnotation);
    [ExtensionAttribute]
public static bool IsIgnored(IConventionModel model, string typeName);
    [ExtensionAttribute]
public static bool IsIgnored(IConventionModel model, Type type);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> FindIgnoredConfigurationSource(IConventionModel model, Type type);
    [ExtensionAttribute]
public static void RemoveOwned(IConventionModel model, Type clrType);
    [ExtensionAttribute]
public static void AddIgnored(IConventionModel model, Type clrType, bool fromDataAnnotation);
    [ExtensionAttribute]
public static IModel FinalizeModel(IConventionModel model);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.ConventionNavigationExtensions : object {
    [ExtensionAttribute]
public static IConventionNavigation FindInverse(IConventionNavigation navigation);
    [ExtensionAttribute]
public static IConventionEntityType GetTargetType(IConventionNavigation navigation);
    [ExtensionAttribute]
public static void SetIsEagerLoaded(IConventionNavigation navigation, Nullable`1<bool> eagerLoaded, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIsEagerLoadedConfigurationSource(IConventionNavigation navigation);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.ConventionPropertyBaseExtensions : object {
    [ExtensionAttribute]
public static void SetField(IConventionPropertyBase property, string fieldName, bool fromDataAnnotation);
    [ExtensionAttribute]
public static void SetPropertyAccessMode(IConventionPropertyBase property, Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetPropertyAccessModeConfigurationSource(IConventionPropertyBase property);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.ConventionPropertyExtensions : object {
    [ExtensionAttribute]
public static IConventionProperty FindFirstPrincipal(IConventionProperty property);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionForeignKey> GetContainingForeignKeys(IConventionProperty property);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionIndex> GetContainingIndexes(IConventionProperty property);
    [ExtensionAttribute]
public static IConventionKey FindContainingPrimaryKey(IConventionProperty property);
    [ExtensionAttribute]
public static IEnumerable`1<IConventionKey> GetContainingKeys(IConventionProperty property);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetTypeMappingConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static void SetMaxLength(IConventionProperty property, Nullable`1<int> maxLength, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetMaxLengthConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static void SetIsUnicode(IConventionProperty property, Nullable`1<bool> unicode, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetIsUnicodeConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static void SetBeforeSaveBehavior(IConventionProperty property, Nullable`1<PropertySaveBehavior> beforeSaveBehavior, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetBeforeSaveBehaviorConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static void SetAfterSaveBehavior(IConventionProperty property, Nullable`1<PropertySaveBehavior> afterSaveBehavior, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetAfterSaveBehaviorConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static void SetValueGeneratorFactory(IConventionProperty property, Func`3<IProperty, IEntityType, ValueGenerator> valueGeneratorFactory, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetValueGeneratorFactoryConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static void SetValueConverter(IConventionProperty property, ValueConverter converter, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetValueConverterConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static void SetProviderClrType(IConventionProperty property, Type providerClrType, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetProviderClrTypeConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static void SetValueComparer(IConventionProperty property, ValueComparer comparer, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetValueComparerConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static void SetKeyValueComparer(IConventionProperty property, ValueComparer comparer, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetKeyValueComparerConfigurationSource(IConventionProperty property);
    [ExtensionAttribute]
public static void SetStructuralValueComparer(IConventionProperty property, ValueComparer comparer, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetStructuralValueComparerConfigurationSource(IConventionProperty property);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.ConventionTypeBaseExtensions : object {
    [ExtensionAttribute]
public static bool IsIgnored(IConventionTypeBase entityType, string memberName);
    [ExtensionAttribute]
public static void SetPropertyAccessMode(IConventionTypeBase entityType, Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetPropertyAccessModeConfigurationSource(IConventionTypeBase entityType);
    [ExtensionAttribute]
public static void SetNavigationAccessMode(IConventionTypeBase entityType, Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    [ExtensionAttribute]
public static Nullable`1<ConfigurationSource> GetNavigationAccessModeConfigurationSource(IConventionTypeBase entityType);
}
public class Microsoft.EntityFrameworkCore.DbContext : object {
    private IDictionary`2<Type, object> _sets;
    private DbContextOptions _options;
    private IDbContextServices _contextServices;
    private IDbContextDependencies _dbContextDependencies;
    private DatabaseFacade _database;
    private ChangeTracker _changeTracker;
    private IServiceScope _serviceScope;
    private IDbContextPool _dbContextPool;
    private bool _initializing;
    private bool _disposed;
    private Guid _contextId;
    private int _lease;
    public DatabaseFacade Database { get; }
    public ChangeTracker ChangeTracker { get; }
    public IModel Model { get; }
    public DbContextId ContextId { get; }
    [EntityFrameworkInternalAttribute]
private IDbSetSource Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.SetSource { get; }
    [EntityFrameworkInternalAttribute]
private IEntityFinderFactory Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.EntityFinderFactory { get; }
    [EntityFrameworkInternalAttribute]
private IAsyncQueryProvider Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.QueryProvider { get; }
    [EntityFrameworkInternalAttribute]
private IStateManager Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.StateManager { get; }
    [EntityFrameworkInternalAttribute]
private IChangeDetector Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.ChangeDetector { get; }
    [EntityFrameworkInternalAttribute]
private IEntityGraphAttacher Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.EntityGraphAttacher { get; }
    [EntityFrameworkInternalAttribute]
private IDiagnosticsLogger`1<Update> Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.UpdateLogger { get; }
    [EntityFrameworkInternalAttribute]
private IDiagnosticsLogger`1<Infrastructure> Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.InfrastructureLogger { get; }
    private IServiceProvider InternalServiceProvider { get; }
    private IDbContextDependencies DbContextDependencies { get; }
    private IServiceProvider Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.Instance { get; }
    public DbContext(DbContextOptions options);
    public virtual DatabaseFacade get_Database();
    public virtual ChangeTracker get_ChangeTracker();
    [DebuggerStepThroughAttribute]
public virtual IModel get_Model();
    public virtual DbContextId get_ContextId();
    private sealed virtual override IDbSetSource Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.get_SetSource();
    private sealed virtual override IEntityFinderFactory Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.get_EntityFinderFactory();
    private sealed virtual override IAsyncQueryProvider Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.get_QueryProvider();
    private sealed virtual override IStateManager Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.get_StateManager();
    private sealed virtual override IChangeDetector Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.get_ChangeDetector();
    private sealed virtual override IEntityGraphAttacher Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.get_EntityGraphAttacher();
    private sealed virtual override IDiagnosticsLogger`1<Update> Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.get_UpdateLogger();
    private sealed virtual override IDiagnosticsLogger`1<Infrastructure> Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.get_InfrastructureLogger();
    [EntityFrameworkInternalAttribute]
private sealed virtual override object Microsoft.EntityFrameworkCore.Internal.IDbSetCache.GetOrAddSet(IDbSetSource source, Type type);
    public virtual DbSet`1<TEntity> Set();
    [ObsoleteAttribute("Use Set() for entity types without keys")]
public virtual DbQuery`1<TQuery> Query();
    private IEntityFinder Finder(Type type);
    private IServiceProvider get_InternalServiceProvider();
    [DebuggerStepThroughAttribute]
private IDbContextDependencies get_DbContextDependencies();
    [DebuggerStepThroughAttribute]
private void CheckDisposed();
    protected internal virtual void OnConfiguring(DbContextOptionsBuilder optionsBuilder);
    protected internal virtual void OnModelCreating(ModelBuilder modelBuilder);
    public virtual int SaveChanges();
    public virtual int SaveChanges(bool acceptAllChangesOnSuccess);
    private void TryDetectChanges();
    private void TryDetectChanges(EntityEntry entry);
    public virtual Task`1<int> SaveChangesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.DbContext/<SaveChangesAsync>d__54")]
public virtual Task`1<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.SetPool(IDbContextPool contextPool);
    private sealed virtual override DbContextPoolConfigurationSnapshot Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.SnapshotConfiguration();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.Resurrect(DbContextPoolConfigurationSnapshot configurationSnapshot);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetState();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.DbContext/<Microsoft-EntityFrameworkCore-Infrastructure-IResettableService-ResetStateAsync>d__59")]
private sealed virtual override Task Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetStateAsync(CancellationToken cancellationToken);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.DbContext/<GetResettableServices>d__60")]
private IEnumerable`1<IResettableService> GetResettableServices();
    public virtual void Dispose();
    private bool DisposeSync();
    public virtual ValueTask DisposeAsync();
    public virtual EntityEntry`1<TEntity> Entry(TEntity entity);
    private EntityEntry`1<TEntity> EntryWithoutDetectChanges(TEntity entity);
    public virtual EntityEntry Entry(object entity);
    private EntityEntry EntryWithoutDetectChanges(object entity);
    private void SetEntityState(InternalEntityEntry entry, EntityState entityState);
    private Task SetEntityStateAsync(InternalEntityEntry entry, EntityState entityState, CancellationToken cancellationToken);
    public virtual EntityEntry`1<TEntity> Add(TEntity entity);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.DbContext/<AddAsync>d__71`1")]
public virtual ValueTask`1<EntityEntry`1<TEntity>> AddAsync(TEntity entity, CancellationToken cancellationToken);
    public virtual EntityEntry`1<TEntity> Attach(TEntity entity);
    public virtual EntityEntry`1<TEntity> Update(TEntity entity);
    public virtual EntityEntry`1<TEntity> Remove(TEntity entity);
    private EntityEntry`1<TEntity> SetEntityState(TEntity entity, EntityState entityState);
    public virtual EntityEntry Add(object entity);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.DbContext/<AddAsync>d__77")]
public virtual ValueTask`1<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken);
    public virtual EntityEntry Attach(object entity);
    public virtual EntityEntry Update(object entity);
    public virtual EntityEntry Remove(object entity);
    private EntityEntry SetEntityState(object entity, EntityState entityState);
    public virtual void AddRange(Object[] entities);
    public virtual Task AddRangeAsync(Object[] entities);
    public virtual void AttachRange(Object[] entities);
    public virtual void UpdateRange(Object[] entities);
    public virtual void RemoveRange(Object[] entities);
    private void SetEntityStates(IEnumerable`1<object> entities, EntityState entityState);
    public virtual void AddRange(IEnumerable`1<object> entities);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.DbContext/<AddRangeAsync>d__89")]
public virtual Task AddRangeAsync(IEnumerable`1<object> entities, CancellationToken cancellationToken);
    public virtual void AttachRange(IEnumerable`1<object> entities);
    public virtual void UpdateRange(IEnumerable`1<object> entities);
    public virtual void RemoveRange(IEnumerable`1<object> entities);
    public virtual object Find(Type entityType, Object[] keyValues);
    public virtual ValueTask`1<object> FindAsync(Type entityType, Object[] keyValues);
    public virtual ValueTask`1<object> FindAsync(Type entityType, Object[] keyValues, CancellationToken cancellationToken);
    public virtual TEntity Find(Object[] keyValues);
    public virtual ValueTask`1<TEntity> FindAsync(Object[] keyValues);
    public virtual ValueTask`1<TEntity> FindAsync(Object[] keyValues, CancellationToken cancellationToken);
    private sealed virtual override IServiceProvider Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.get_Instance();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.DbContextId : ValueType {
    [CompilerGeneratedAttribute]
private Guid <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Lease>k__BackingField;
    public Guid InstanceId { get; }
    public int Lease { get; }
    public DbContextId(Guid id, int lease);
    public bool Equals(DbContextId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(DbContextId left, DbContextId right);
    public static bool op_Inequality(DbContextId left, DbContextId right);
    [CompilerGeneratedAttribute]
public Guid get_InstanceId();
    [CompilerGeneratedAttribute]
public int get_Lease();
    public virtual string ToString();
}
public abstract class Microsoft.EntityFrameworkCore.DbContextOptions : object {
    private IReadOnlyDictionary`2<Type, IDbContextOptionsExtension> _extensions;
    [CompilerGeneratedAttribute]
private bool <IsFrozen>k__BackingField;
    public IEnumerable`1<IDbContextOptionsExtension> Extensions { get; }
    public Type ContextType { get; }
    public bool IsFrozen { get; private set; }
    protected DbContextOptions(IReadOnlyDictionary`2<Type, IDbContextOptionsExtension> extensions);
    public virtual IEnumerable`1<IDbContextOptionsExtension> get_Extensions();
    public virtual TExtension FindExtension();
    public virtual TExtension GetExtension();
    public abstract virtual DbContextOptions WithExtension(TExtension extension);
    public abstract virtual Type get_ContextType();
    public virtual void Freeze();
    [CompilerGeneratedAttribute]
public virtual bool get_IsFrozen();
    [CompilerGeneratedAttribute]
private void set_IsFrozen(bool value);
}
public class Microsoft.EntityFrameworkCore.DbContextOptions`1 : DbContextOptions {
    public Type ContextType { get; }
    public DbContextOptions`1(IReadOnlyDictionary`2<Type, IDbContextOptionsExtension> extensions);
    public virtual DbContextOptions WithExtension(TExtension extension);
    public virtual Type get_ContextType();
}
public class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder : object {
    private DbContextOptions _options;
    public DbContextOptions Options { get; }
    public bool IsConfigured { get; }
    public DbContextOptionsBuilder(DbContextOptions options);
    public virtual DbContextOptions get_Options();
    public virtual bool get_IsConfigured();
    public virtual DbContextOptionsBuilder UseModel(IModel model);
    public virtual DbContextOptionsBuilder UseLoggerFactory(ILoggerFactory loggerFactory);
    public virtual DbContextOptionsBuilder EnableDetailedErrors(bool detailedErrorsEnabled);
    public virtual DbContextOptionsBuilder UseMemoryCache(IMemoryCache memoryCache);
    public virtual DbContextOptionsBuilder UseInternalServiceProvider(IServiceProvider serviceProvider);
    public virtual DbContextOptionsBuilder UseApplicationServiceProvider(IServiceProvider serviceProvider);
    public virtual DbContextOptionsBuilder EnableSensitiveDataLogging(bool sensitiveDataLoggingEnabled);
    public virtual DbContextOptionsBuilder EnableServiceProviderCaching(bool cacheServiceProvider);
    public virtual DbContextOptionsBuilder UseQueryTrackingBehavior(QueryTrackingBehavior queryTrackingBehavior);
    public virtual DbContextOptionsBuilder ConfigureWarnings(Action`1<WarningsConfigurationBuilder> warningsConfigurationBuilderAction);
    public virtual DbContextOptionsBuilder ReplaceService();
    public virtual DbContextOptionsBuilder AddInterceptors(IEnumerable`1<IInterceptor> interceptors);
    public virtual DbContextOptionsBuilder AddInterceptors(IInterceptor[] interceptors);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsBuilderInfrastructure.AddOrUpdateExtension(TExtension extension);
    private DbContextOptionsBuilder WithOption(Func`2<CoreOptionsExtension, CoreOptionsExtension> withFunc);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1 : DbContextOptionsBuilder {
    public DbContextOptions`1<TContext> Options { get; }
    public DbContextOptionsBuilder`1(DbContextOptions`1<TContext> options);
    public virtual DbContextOptions`1<TContext> get_Options();
    public virtual DbContextOptionsBuilder`1<TContext> UseModel(IModel model);
    public virtual DbContextOptionsBuilder`1<TContext> UseLoggerFactory(ILoggerFactory loggerFactory);
    public virtual DbContextOptionsBuilder`1<TContext> EnableDetailedErrors(bool detailedErrorsEnabled);
    public virtual DbContextOptionsBuilder`1<TContext> UseMemoryCache(IMemoryCache memoryCache);
    public virtual DbContextOptionsBuilder`1<TContext> UseInternalServiceProvider(IServiceProvider serviceProvider);
    public virtual DbContextOptionsBuilder`1<TContext> UseApplicationServiceProvider(IServiceProvider serviceProvider);
    public virtual DbContextOptionsBuilder`1<TContext> EnableSensitiveDataLogging(bool sensitiveDataLoggingEnabled);
    public virtual DbContextOptionsBuilder`1<TContext> EnableServiceProviderCaching(bool cacheServiceProvider);
    public virtual DbContextOptionsBuilder`1<TContext> UseQueryTrackingBehavior(QueryTrackingBehavior queryTrackingBehavior);
    public virtual DbContextOptionsBuilder`1<TContext> ConfigureWarnings(Action`1<WarningsConfigurationBuilder> warningsConfigurationBuilderAction);
    public virtual DbContextOptionsBuilder`1<TContext> ReplaceService();
}
public class Microsoft.EntityFrameworkCore.DbFunctions : object {
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.DbFunctionsExtensions : object {
    private static Char[] _regexSpecialChars;
    private static string _defaultEscapeRegexCharsPattern;
    private static TimeSpan _regexTimeout;
    private static DbFunctionsExtensions();
    [ExtensionAttribute]
public static bool Like(DbFunctions _, string matchExpression, string pattern);
    [ExtensionAttribute]
public static bool Like(DbFunctions _, string matchExpression, string pattern, string escapeCharacter);
    private static string BuildEscapeRegexCharsPattern(IEnumerable`1<char> regexSpecialChars);
    private static bool LikeCore(string matchExpression, string pattern, string escapeCharacter);
}
public static class Microsoft.EntityFrameworkCore.DbLoggerCategory : object {
    public static string Name;
}
[ObsoleteAttribute("Use DbSet<T> instead")]
public abstract class Microsoft.EntityFrameworkCore.DbQuery`1 : DbSet`1<TQuery> {
}
public abstract class Microsoft.EntityFrameworkCore.DbSet`1 : object {
    public LocalView`1<TEntity> Local { get; }
    private Type System.Linq.IQueryable.ElementType { get; }
    private Expression System.Linq.IQueryable.Expression { get; }
    private IQueryProvider System.Linq.IQueryable.Provider { get; }
    private IServiceProvider Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.Instance { get; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    public virtual IAsyncEnumerable`1<TEntity> AsAsyncEnumerable();
    public virtual IQueryable`1<TEntity> AsQueryable();
    public virtual LocalView`1<TEntity> get_Local();
    public virtual TEntity Find(Object[] keyValues);
    public virtual ValueTask`1<TEntity> FindAsync(Object[] keyValues);
    public virtual ValueTask`1<TEntity> FindAsync(Object[] keyValues, CancellationToken cancellationToken);
    public virtual EntityEntry`1<TEntity> Add(TEntity entity);
    public virtual ValueTask`1<EntityEntry`1<TEntity>> AddAsync(TEntity entity, CancellationToken cancellationToken);
    public virtual EntityEntry`1<TEntity> Attach(TEntity entity);
    public virtual EntityEntry`1<TEntity> Remove(TEntity entity);
    public virtual EntityEntry`1<TEntity> Update(TEntity entity);
    public virtual void AddRange(TEntity[] entities);
    public virtual Task AddRangeAsync(TEntity[] entities);
    public virtual void AttachRange(TEntity[] entities);
    public virtual void RemoveRange(TEntity[] entities);
    public virtual void UpdateRange(TEntity[] entities);
    public virtual void AddRange(IEnumerable`1<TEntity> entities);
    public virtual Task AddRangeAsync(IEnumerable`1<TEntity> entities, CancellationToken cancellationToken);
    public virtual void AttachRange(IEnumerable`1<TEntity> entities);
    public virtual void RemoveRange(IEnumerable`1<TEntity> entities);
    public virtual void UpdateRange(IEnumerable`1<TEntity> entities);
    private sealed virtual override IEnumerator`1<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IAsyncEnumerator`1<TEntity> System.Collections.Generic.IAsyncEnumerable<TEntity>.GetAsyncEnumerator(CancellationToken cancellationToken);
    private sealed virtual override Type System.Linq.IQueryable.get_ElementType();
    private sealed virtual override Expression System.Linq.IQueryable.get_Expression();
    private sealed virtual override IQueryProvider System.Linq.IQueryable.get_Provider();
    private sealed virtual override IServiceProvider Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.get_Instance();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException : DbUpdateException {
    public DbUpdateConcurrencyException(string message);
    public DbUpdateConcurrencyException(string message, Exception innerException);
    public DbUpdateConcurrencyException(string message, Exception innerException, IReadOnlyList`1<IUpdateEntry> entries);
    public DbUpdateConcurrencyException(string message, IReadOnlyList`1<IUpdateEntry> entries);
    public DbUpdateConcurrencyException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.EntityFrameworkCore.DbUpdateException : Exception {
    private IReadOnlyList`1<EntityEntry> _entries;
    public IReadOnlyList`1<EntityEntry> Entries { get; }
    public DbUpdateException(string message);
    public DbUpdateException(string message, Exception innerException);
    public DbUpdateException(string message, IReadOnlyList`1<IUpdateEntry> entries);
    public DbUpdateException(string message, Exception innerException, IReadOnlyList`1<IUpdateEntry> entries);
    public DbUpdateException(SerializationInfo info, StreamingContext context);
    public virtual IReadOnlyList`1<EntityEntry> get_Entries();
}
public enum Microsoft.EntityFrameworkCore.DeleteBehavior : Enum {
    public int value__;
    public static DeleteBehavior ClientSetNull;
    public static DeleteBehavior Restrict;
    public static DeleteBehavior SetNull;
    public static DeleteBehavior Cascade;
    public static DeleteBehavior ClientCascade;
    public static DeleteBehavior NoAction;
    public static DeleteBehavior ClientNoAction;
}
[AttributeUsageAttribute("1")]
public class Microsoft.EntityFrameworkCore.Design.DesignTimeProviderServicesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    public string TypeName { get; }
    public DesignTimeProviderServicesAttribute(string typeName);
    [CompilerGeneratedAttribute]
public string get_TypeName();
}
[AttributeUsageAttribute("1")]
public class Microsoft.EntityFrameworkCore.Design.DesignTimeServicesReferenceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForProvider>k__BackingField;
    public string TypeName { get; }
    public string ForProvider { get; }
    public DesignTimeServicesReferenceAttribute(string typeName);
    public DesignTimeServicesReferenceAttribute(string typeName, string forProvider);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public string get_ForProvider();
}
public interface Microsoft.EntityFrameworkCore.Design.IDesignTimeDbContextFactory`1 {
    public abstract virtual TContext CreateDbContext(String[] args);
}
public interface Microsoft.EntityFrameworkCore.Design.IDesignTimeServices {
    public abstract virtual void ConfigureDesignTimeServices(IServiceCollection serviceCollection);
}
public class Microsoft.EntityFrameworkCore.Diagnostics.BinaryExpressionEventData : EventData {
    [CompilerGeneratedAttribute]
private Expression <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Right>k__BackingField;
    public Expression Left { get; }
    public Expression Right { get; }
    public BinaryExpressionEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, Expression left, Expression right);
    [CompilerGeneratedAttribute]
public virtual Expression get_Left();
    [CompilerGeneratedAttribute]
public virtual Expression get_Right();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.CascadeDeleteEventData : EntityEntryEventData {
    [CompilerGeneratedAttribute]
private EntityState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityEntry <ParentEntityEntry>k__BackingField;
    public EntityState State { get; }
    public EntityEntry ParentEntityEntry { get; }
    public CascadeDeleteEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, EntityEntry entityEntry, EntityEntry parentEntry, EntityState state);
    [CompilerGeneratedAttribute]
public virtual EntityState get_State();
    [CompilerGeneratedAttribute]
public virtual EntityEntry get_ParentEntityEntry();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.CascadeDeleteOrphanEventData : EntityEntryEventData {
    [CompilerGeneratedAttribute]
private EntityState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityType <ParentEntityType>k__BackingField;
    public EntityState State { get; }
    public IEntityType ParentEntityType { get; }
    public CascadeDeleteOrphanEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, EntityEntry entityEntry, IEntityType parentEntityTypes, EntityState state);
    [CompilerGeneratedAttribute]
public virtual EntityState get_State();
    [CompilerGeneratedAttribute]
public virtual IEntityType get_ParentEntityType();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.CollectionChangedEventData : NavigationEventData {
    [CompilerGeneratedAttribute]
private EntityEntry <EntityEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<object> <Added>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<object> <Removed>k__BackingField;
    public EntityEntry EntityEntry { get; }
    public IEnumerable`1<object> Added { get; }
    public IEnumerable`1<object> Removed { get; }
    public CollectionChangedEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, EntityEntry entityEntry, INavigation navigation, IEnumerable`1<object> added, IEnumerable`1<object> removed);
    [CompilerGeneratedAttribute]
public virtual EntityEntry get_EntityEntry();
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<object> get_Added();
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<object> get_Removed();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.ContextInitializedEventData : EventData {
    [CompilerGeneratedAttribute]
private DbContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private DbContextOptions <ContextOptions>k__BackingField;
    public DbContext Context { get; }
    public DbContextOptions ContextOptions { get; }
    public ContextInitializedEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbContext context, DbContextOptions contextOptions);
    [CompilerGeneratedAttribute]
public virtual DbContext get_Context();
    [CompilerGeneratedAttribute]
public virtual DbContextOptions get_ContextOptions();
}
public static class Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId : object {
    public static int CoreBaseId;
    public static int RelationalBaseId;
    public static int ProviderBaseId;
    public static int ProviderDesignBaseId;
    private static string _updatePrefix;
    public static EventId SaveChangesFailed;
    public static EventId DuplicateDependentEntityTypeInstanceWarning;
    private static string _queryPrefix;
    public static EventId QueryIterationFailed;
    [ObsoleteAttribute]
public static EventId QueryModelCompiling;
    [ObsoleteAttribute]
public static EventId RowLimitingOperationWithoutOrderByWarning;
    [ObsoleteAttribute]
public static EventId FirstWithoutOrderByAndFilterWarning;
    [ObsoleteAttribute]
public static EventId QueryModelOptimized;
    [ObsoleteAttribute]
public static EventId NavigationIncluded;
    [ObsoleteAttribute]
public static EventId IncludeIgnoredWarning;
    public static EventId QueryExecutionPlanned;
    public static EventId PossibleUnintendedCollectionNavigationNullComparisonWarning;
    public static EventId PossibleUnintendedReferenceComparisonWarning;
    private static string _infraPrefix;
    public static EventId SensitiveDataLoggingEnabledWarning;
    public static EventId ServiceProviderCreated;
    public static EventId ManyServiceProvidersCreatedWarning;
    public static EventId ContextInitialized;
    public static EventId ServiceProviderDebugInfo;
    public static EventId ExecutionStrategyRetrying;
    public static EventId NavigationLazyLoading;
    public static EventId LazyLoadOnDisposedContextWarning;
    public static EventId DetachedLazyLoadingWarning;
    public static EventId RedundantAddServicesCallWarning;
    private static string _modelPrefix;
    private static string _modelValidationPrefix;
    public static EventId ShadowPropertyCreated;
    public static EventId RedundantIndexRemoved;
    public static EventId IncompatibleMatchingForeignKeyProperties;
    public static EventId RequiredAttributeInverted;
    public static EventId NonNullableInverted;
    public static EventId RequiredAttributeOnBothNavigations;
    public static EventId NonNullableReferenceOnBothNavigations;
    public static EventId RequiredAttributeOnDependent;
    public static EventId NonNullableReferenceOnDependent;
    public static EventId RequiredAttributeOnCollection;
    public static EventId ConflictingShadowForeignKeysWarning;
    public static EventId MultiplePrimaryKeyCandidates;
    public static EventId MultipleNavigationProperties;
    public static EventId MultipleInversePropertiesSameTargetWarning;
    public static EventId NonDefiningInverseNavigationWarning;
    public static EventId NonOwnershipInverseNavigationWarning;
    public static EventId ForeignKeyAttributesOnBothPropertiesWarning;
    public static EventId ForeignKeyAttributesOnBothNavigationsWarning;
    public static EventId ConflictingForeignKeyAttributesOnNavigationAndPropertyWarning;
    public static EventId RedundantForeignKeyWarning;
    private static string _changeTrackingPrefix;
    public static EventId DetectChangesStarting;
    public static EventId DetectChangesCompleted;
    public static EventId PropertyChangeDetected;
    public static EventId ForeignKeyChangeDetected;
    public static EventId CollectionChangeDetected;
    public static EventId ReferenceChangeDetected;
    public static EventId StartedTracking;
    public static EventId StateChanged;
    public static EventId ValueGenerated;
    public static EventId CascadeDelete;
    public static EventId CascadeDeleteOrphan;
    public static EventId SaveChangesStarting;
    public static EventId SaveChangesCompleted;
    public static EventId OptimisticConcurrencyException;
    public static EventId ContextDisposed;
    public static EventId CollectionWithoutComparer;
    private static CoreEventId();
    private static EventId MakeUpdateId(Id id);
    private static EventId MakeQueryId(Id id);
    private static EventId MakeInfraId(Id id);
    private static EventId MakeModelId(Id id);
    private static EventId MakeModelValidationId(Id id);
    private static EventId MakeChangeTrackingId(Id id);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Diagnostics.CoreLoggerExtensions : object {
    [ExtensionAttribute]
public static void SaveChangesFailed(IDiagnosticsLogger`1<Update> diagnostics, DbContext context, Exception exception);
    private static string SaveChangesFailed(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void OptimisticConcurrencyException(IDiagnosticsLogger`1<Update> diagnostics, DbContext context, Exception exception);
    private static string OptimisticConcurrencyException(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void DuplicateDependentEntityTypeInstanceWarning(IDiagnosticsLogger`1<Update> diagnostics, IEntityType dependent1, IEntityType dependent2);
    private static string DuplicateDependentEntityTypeInstanceWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void QueryIterationFailed(IDiagnosticsLogger`1<Query> diagnostics, Type contextType, Exception exception);
    private static string QueryIterationFailed(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void QueryExecutionPlanned(IDiagnosticsLogger`1<Query> diagnostics, ExpressionPrinter expressionPrinter, Expression queryExecutorExpression);
    private static string QueryExecutionPlanned(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void SensitiveDataLoggingEnabledWarning(IDiagnosticsLogger`1<TLoggerCategory> diagnostics);
    [ExtensionAttribute]
public static void PossibleUnintendedCollectionNavigationNullComparisonWarning(IDiagnosticsLogger`1<Query> diagnostics, INavigation navigation);
    private static string PossibleUnintendedCollectionNavigationNullComparisonWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void PossibleUnintendedReferenceComparisonWarning(IDiagnosticsLogger`1<Query> diagnostics, Expression left, Expression right);
    private static string PossibleUnintendedReferenceComparisonWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ServiceProviderCreated(IDiagnosticsLogger`1<Infrastructure> diagnostics, IServiceProvider serviceProvider);
    [ExtensionAttribute]
public static void ManyServiceProvidersCreatedWarning(IDiagnosticsLogger`1<Infrastructure> diagnostics, ICollection`1<IServiceProvider> serviceProviders);
    [ExtensionAttribute]
public static void ServiceProviderDebugInfo(IDiagnosticsLogger`1<Infrastructure> diagnostics, IDictionary`2<string, string> newDebugInfo, IList`1<IDictionary`2<string, string>> cachedDebugInfos);
    private static string ServiceProviderDebugInfo(EventDefinitionBase definition, EventData payload);
    private static string GenerateDebugInfoString(IDictionary`2<string, string> newDebugInfo, IList`1<IDictionary`2<string, string>> cachedDebugInfos);
    [ExtensionAttribute]
public static void ContextInitialized(IDiagnosticsLogger`1<Infrastructure> diagnostics, DbContext context, DbContextOptions contextOptions);
    private static string ContextInitialized(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ExecutionStrategyRetrying(IDiagnosticsLogger`1<Infrastructure> diagnostics, IReadOnlyList`1<Exception> exceptionsEncountered, TimeSpan delay, bool async);
    private static string ExecutionStrategyRetrying(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void LazyLoadOnDisposedContextWarning(IDiagnosticsLogger`1<Infrastructure> diagnostics, DbContext context, object entityType, string navigationName);
    private static string LazyLoadOnDisposedContextWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void NavigationLazyLoading(IDiagnosticsLogger`1<Infrastructure> diagnostics, DbContext context, object entityType, string navigationName);
    private static string NavigationLazyLoading(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void DetachedLazyLoadingWarning(IDiagnosticsLogger`1<Infrastructure> diagnostics, DbContext context, object entityType, string navigationName);
    private static string DetachedLazyLoadingWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void RedundantAddServicesCallWarning(IDiagnosticsLogger`1<Infrastructure> diagnostics, IServiceProvider serviceProvider);
    [ExtensionAttribute]
public static void ShadowPropertyCreated(IDiagnosticsLogger`1<Validation> diagnostics, IProperty property);
    private static string ShadowPropertyCreated(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void CollectionWithoutComparer(IDiagnosticsLogger`1<Validation> diagnostics, IProperty property);
    private static string CollectionWithoutComparer(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void RedundantIndexRemoved(IDiagnosticsLogger`1<Model> diagnostics, IReadOnlyList`1<IPropertyBase> redundantIndex, IReadOnlyList`1<IPropertyBase> otherIndex);
    private static string RedundantIndexRemoved(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void RedundantForeignKeyWarning(IDiagnosticsLogger`1<Validation> diagnostics, IForeignKey redundantForeignKey);
    private static string RedundantForeignKeyWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void IncompatibleMatchingForeignKeyProperties(IDiagnosticsLogger`1<Model> diagnostics, IReadOnlyList`1<IPropertyBase> foreignKeyProperties, IReadOnlyList`1<IPropertyBase> principalKeyProperties);
    private static string IncompatibleMatchingForeignKeyProperties(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void RequiredAttributeInverted(IDiagnosticsLogger`1<Model> diagnostics, INavigation navigation);
    private static string RequiredAttributeInverted(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void NonNullableInverted(IDiagnosticsLogger`1<Model> diagnostics, INavigation navigation);
    private static string NonNullableInverted(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void RequiredAttributeOnBothNavigations(IDiagnosticsLogger`1<Model> diagnostics, INavigation firstNavigation, INavigation secondNavigation);
    private static string RequiredAttributeOnBothNavigations(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void NonNullableReferenceOnBothNavigations(IDiagnosticsLogger`1<Model> diagnostics, INavigation firstNavigation, INavigation secondNavigation);
    private static string NonNullableReferenceOnBothNavigations(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void RequiredAttributeOnDependent(IDiagnosticsLogger`1<Model> diagnostics, INavigation navigation);
    private static string RequiredAttributeOnDependent(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void NonNullableReferenceOnDependent(IDiagnosticsLogger`1<Model> diagnostics, INavigation navigation);
    private static string NonNullableReferenceOnDependent(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void RequiredAttributeOnCollection(IDiagnosticsLogger`1<Model> diagnostics, INavigation navigation);
    private static string RequiredAttributeOnCollection(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ConflictingShadowForeignKeysWarning(IDiagnosticsLogger`1<Model> diagnostics, IForeignKey foreignKey);
    private static string ConflictingShadowForeignKeysWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void MultiplePrimaryKeyCandidates(IDiagnosticsLogger`1<Model> diagnostics, IProperty firstProperty, IProperty secondProperty);
    private static string MultiplePrimaryKeyCandidates(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void MultipleNavigationProperties(IDiagnosticsLogger`1<Model> diagnostics, IEnumerable`1<Tuple`2<MemberInfo, Type>> firstPropertyCollection, IEnumerable`1<Tuple`2<MemberInfo, Type>> secondPropertyCollection);
    private static string MultipleNavigationProperties(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void MultipleInversePropertiesSameTargetWarning(IDiagnosticsLogger`1<Model> diagnostics, IEnumerable`1<Tuple`2<MemberInfo, Type>> conflictingNavigations, MemberInfo inverseNavigation, Type targetType);
    private static string MultipleInversePropertiesSameTargetWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void NonDefiningInverseNavigationWarning(IDiagnosticsLogger`1<Model> diagnostics, IEntityType declaringType, MemberInfo navigation, IEntityType targetType, MemberInfo inverseNavigation, MemberInfo definingNavigation);
    private static string NonDefiningInverseNavigationWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void NonOwnershipInverseNavigationWarning(IDiagnosticsLogger`1<Model> diagnostics, IEntityType declaringType, MemberInfo navigation, IEntityType targetType, MemberInfo inverseNavigation, MemberInfo ownershipNavigation);
    private static string NonOwnershipInverseNavigationWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ForeignKeyAttributesOnBothPropertiesWarning(IDiagnosticsLogger`1<Model> diagnostics, INavigation firstNavigation, INavigation secondNavigation, MemberInfo firstProperty, MemberInfo secondProperty);
    private static string ForeignKeyAttributesOnBothPropertiesWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ForeignKeyAttributesOnBothNavigationsWarning(IDiagnosticsLogger`1<Model> diagnostics, INavigation firstNavigation, INavigation secondNavigation);
    private static string ForeignKeyAttributesOnBothNavigationsWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ConflictingForeignKeyAttributesOnNavigationAndPropertyWarning(IDiagnosticsLogger`1<Model> diagnostics, INavigation navigation, MemberInfo property);
    private static string ConflictingForeignKeyAttributesOnNavigationAndPropertyWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void DetectChangesStarting(IDiagnosticsLogger`1<ChangeTracking> diagnostics, DbContext context);
    private static string DetectChangesStarting(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void DetectChangesCompleted(IDiagnosticsLogger`1<ChangeTracking> diagnostics, DbContext context);
    private static string DetectChangesCompleted(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void PropertyChangeDetected(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry, IProperty property, object oldValue, object newValue);
    private static string PropertyChangeDetected(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void PropertyChangeDetectedSensitive(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry, IProperty property, object oldValue, object newValue);
    private static string PropertyChangeDetectedSensitive(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ForeignKeyChangeDetected(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry, IProperty property, object oldValue, object newValue);
    private static string ForeignKeyChangeDetected(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ForeignKeyChangeDetectedSensitive(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry, IProperty property, object oldValue, object newValue);
    private static string ForeignKeyChangeDetectedSensitive(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void CollectionChangeDetected(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry, INavigation navigation, ISet`1<object> added, ISet`1<object> removed);
    private static string CollectionChangeDetected(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void CollectionChangeDetectedSensitive(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry, INavigation navigation, ISet`1<object> added, ISet`1<object> removed);
    private static string CollectionChangeDetectedSensitive(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ReferenceChangeDetected(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry, INavigation navigation, object oldValue, object newValue);
    private static string ReferenceChangeDetected(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ReferenceChangeDetectedSensitive(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry, INavigation navigation, object oldValue, object newValue);
    private static string ReferenceChangeDetectedSensitive(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void StartedTracking(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry);
    private static string StartedTracking(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void StartedTrackingSensitive(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry);
    private static string StartedTrackingSensitive(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void StateChanged(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry, EntityState oldState, EntityState newState);
    private static string StateChanged(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void StateChangedSensitive(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry, EntityState oldState, EntityState newState);
    private static string StateChangedSensitive(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ValueGenerated(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry, IProperty property, object value, bool temporary);
    private static string ValueGenerated(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ValueGeneratedSensitive(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry, IProperty property, object value, bool temporary);
    private static string ValueGeneratedSensitive(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void CascadeDelete(IDiagnosticsLogger`1<Update> diagnostics, InternalEntityEntry internalChildEntry, InternalEntityEntry internalParentEntry, EntityState state);
    private static string CascadeDelete(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void CascadeDeleteSensitive(IDiagnosticsLogger`1<Update> diagnostics, InternalEntityEntry internalChildEntry, InternalEntityEntry internalParentEntry, EntityState state);
    private static string CascadeDeleteSensitive(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void CascadeDeleteOrphan(IDiagnosticsLogger`1<Update> diagnostics, InternalEntityEntry internalChildEntry, IEntityType parentEntityType, EntityState state);
    private static string CascadeDeleteOrphan(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void CascadeDeleteOrphanSensitive(IDiagnosticsLogger`1<Update> diagnostics, InternalEntityEntry internalChildEntry, IEntityType parentEntityType, EntityState state);
    private static string CascadeDeleteOrphanSensitive(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void SaveChangesStarting(IDiagnosticsLogger`1<Update> diagnostics, DbContext context);
    private static string SaveChangesStarting(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void SaveChangesCompleted(IDiagnosticsLogger`1<Update> diagnostics, DbContext context, int entitiesSavedCount);
    private static string SaveChangesCompleted(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ContextDisposed(IDiagnosticsLogger`1<Infrastructure> diagnostics, DbContext context);
    private static string ContextDisposed(EventDefinitionBase definition, EventData payload);
}
public static class Microsoft.EntityFrameworkCore.Diagnostics.CoreStrings : object {
    private static ResourceManager _resourceManager;
    public static string NoElements { get; }
    public static string IQueryableProviderNotAsync { get; }
    public static string ResetNotSupported { get; }
    public static string NoProviderConfigured { get; }
    public static string NoEfServices { get; }
    public static string CanConnectNotImplemented { get; }
    public static string PropertyMethodInvoked { get; }
    public static string RecursiveOnModelCreating { get; }
    public static string RecursiveOnConfiguring { get; }
    public static string RelationshipCannotBeInverted { get; }
    public static string ExpressionParameterizationException { get; }
    public static string HiLoBadBlockSize { get; }
    public static string DataBindingWithIListSource { get; }
    public static string DataBindingToLocalWithIListSource { get; }
    public static string InvalidMemberInitBinding { get; }
    public static string ConcurrentMethodInvocation { get; }
    public static string ContextDisposed { get; }
    public static string ErrorMaterializingValue { get; }
    public static string InvalidPoolSize { get; }
    public static string PoolingOptionsModified { get; }
    public static string ConventionsInfiniteLoop { get; }
    public static string TransactionsNotSupported { get; }
    public static string ErrorInvalidQueryable { get; }
    public static string NoInterceptionResult { get; }
    public static string SetOperationWithDifferentIncludesInOperands { get; }
    private static CoreStrings();
    public static string CircularDependency(object cycle);
    public static string TranslationFailed(object expression);
    public static string QueryFailed(object expression, object visitor);
    public static string ModelNotFinalized(object method);
    public static string get_NoElements();
    public static string InvalidEnumValue(object argumentName, object enumType);
    public static string LiteralGenerationNotSupported(object type);
    public static string InvalidPropertiesExpression(object expression);
    public static string InvalidPropertyExpression(object expression);
    public static string IdentityConflict(object entityType, object keyProperties);
    public static string IdentityConflictSensitive(object entityType, object keyValue);
    public static string WrongStateManager(object entityType);
    public static string MultipleEntries(object entityType);
    public static string PropertyNotFound(object property, object entityType);
    public static string PropertyIsNavigation(object property, object entityType, object PropertyMethod, object ReferenceMethod, object CollectionMethod);
    public static string NavigationIsProperty(object property, object entityType, object ReferenceMethod, object CollectionMethod, object PropertyMethod);
    public static string ReferenceIsCollection(object property, object entityType, object ReferenceMethod, object CollectionMethod);
    public static string CollectionIsReference(object property, object entityType, object CollectionMethod, object ReferenceMethod);
    public static string ReferenceMustBeLoaded(object navigation, object entityType);
    public static string CannotLoadDetached(object navigation, object entityType);
    public static string EntityRequiresKey(object entityType);
    public static string KeyPropertiesWrongEntity(object key, object entityType);
    public static string ForeignKeyPropertiesWrongEntity(object foreignKey, object entityType);
    public static string IndexPropertiesWrongEntity(object index, object entityType);
    public static string IQueryableNotAsync(object genericParameter);
    public static string get_IQueryableProviderNotAsync();
    public static string ChangeTrackingInterfaceMissing(object entityType, object changeTrackingStrategy, object notificationInterface);
    public static string NonNotifyingCollection(object navigation, object entityType, object changeTrackingStrategy);
    public static string get_ResetNotSupported();
    public static string OriginalValueNotTracked(object property, object entityType);
    public static string ValueCannotBeNull(object property, object entityType, object propertyType);
    public static string InvalidType(object property, object entityType, object valueType, object propertyType);
    public static string PropertyDoesNotBelong(object property, object entityType, object expectedType);
    public static string MissingBackingField(object field, object property, object entityType);
    public static string BadBackingFieldType(object field, object fieldType, object entityType, object property, object propertyType);
    public static string NoBackingField(object property, object entity, object pam);
    public static string NoBackingFieldLazyLoading(object property, object entity);
    public static string NoFieldOrSetter(object property, object entity);
    public static string NoFieldOrGetter(object property, object entity);
    public static string NoProperty(object field, object entity, object pam);
    public static string NoSetter(object property, object entity, object pam);
    public static string NoGetter(object property, object entity, object pam);
    public static string NoClrType(object entityType);
    public static string MultipleProvidersConfigured(object storeNames);
    public static string DbContextMissingConstructor(object contextType);
    public static string get_NoProviderConfigured();
    public static string get_NoEfServices();
    public static string InvalidReplaceService(object replaceService, object useInternalServiceProvider);
    public static string InvalidUseService(object useService, object useInternalServiceProvider, object service);
    public static string SingletonOptionChanged(object optionCall, object useInternalServiceProvider);
    public static string ServiceProviderConfigChanged(object key);
    public static string ServiceProviderConfigAdded(object key);
    public static string ServiceProviderConfigRemoved(object key);
    public static string NotAnEFService(object service);
    public static string get_CanConnectNotImplemented();
    public static string ImplementationTypeRequired(object service);
    public static string SingletonRequired(object scope, object service);
    public static string NoValueGenerator(object property, object entityType, object propertyType);
    public static string BadDependencyRegistration(object dependenciesType);
    public static string BadValueGeneratorType(object givenType, object expectedType);
    public static string CannotCreateValueGenerator(object generatorType);
    public static string TempValuePersists(object property, object entityType, object state);
    public static string get_PropertyMethodInvoked();
    public static string PropertyWrongClrType(object property, object entityType, object clrType, object propertyType);
    public static string ClrPropertyOnShadowEntity(object property, object entityType);
    public static string PropertyInUseKey(object property, object entityType, object key);
    public static string KeyInUse(object key, object entityType, object dependentType);
    public static string DuplicateServicePropertyType(object property, object serviceType, object entityType, object duplicateName, object duplicateEntityType);
    public static string NoClrNavigation(object navigation, object entityType);
    public static string NavigationSingleWrongClrType(object navigation, object entityType, object clrType, object targetType);
    public static string NavigationCollectionWrongClrType(object navigation, object entityType, object clrType, object targetType);
    public static string ForeignKeyCountMismatch(object foreignKey, object dependentType, object principalKey, object principalType);
    public static string ForeignKeyTypeMismatch(object foreignKey, object dependentType, object principalKey, object principalType);
    public static string NavigationBadType(object navigation, object entityType, object foundType, object targetType);
    public static string NavigationArray(object navigation, object entityType, object foundType);
    public static string NavigationNoSetter(object navigation, object entityType);
    public static string NavigationCannotCreateType(object navigation, object entityType, object foundType);
    public static string KeyReadOnly(object property, object entityType);
    public static string PropertyReadOnlyAfterSave(object property, object entityType);
    public static string PropertyReadOnlyBeforeSave(object property, object entityType);
    public static string KeyPropertyMustBeReadOnly(object property, object entityType);
    public static string RelationshipConceptualNull(object firstType, object secondType);
    public static string PropertyConceptualNull(object property, object entityType);
    public static string DuplicateForeignKey(object foreignKey, object entityType, object duplicateEntityType, object key, object principalType);
    public static string DuplicateIndex(object index, object entityType, object duplicateEntityType);
    public static string DuplicateKey(object key, object entityType, object duplicateEntityType);
    public static string NavigationToShadowEntity(object navigation, object entityType, object targetType);
    public static string EntityTypeNotInRelationship(object entityType, object dependentType, object principalType);
    public static string DuplicateEntityType(object entityType);
    public static string DuplicateAnnotation(object annotation);
    public static string AnnotationNotFound(object annotation);
    public static string IncludeBadNavigation(object property, object entityType);
    public static string CannotBeNullable(object property, object entityType, object propertyType);
    public static string KeyPropertyCannotBeNullable(object property, object entityType, object key);
    public static string get_RecursiveOnModelCreating();
    public static string get_RecursiveOnConfiguring();
    public static string EntityTypeInUseByReferencingForeignKey(object entityType, object foreignKey, object referencingEntityType);
    public static string ArgumentPropertyNull(object property, object argument);
    public static string get_RelationshipCannotBeInverted();
    public static string InvalidEntityType(object type);
    public static string ReferencedShadowKey(object referencingEntityTypeOrNavigation, object referencedEntityTypeOrNavigation, object foreignKeyPropertiesWithTypes, object primaryKeyPropertiesWithTypes);
    public static string MutableKeyProperty(object keyProperty);
    public static string get_ExpressionParameterizationException();
    public static string InvalidValueGeneratorFactoryProperty(object factory, object property, object entityType);
    public static string DerivedEntityTypeKey(object derivedType, object rootType);
    public static string CircularInheritance(object entityType, object baseEntityType);
    public static string DerivedEntityCannotHaveKeys(object entityType);
    public static string GraphDoesNotContainVertex(object vertex);
    public static string CannotMaterializeAbstractType(object entityType);
    public static string FindNotCompositeKey(object entityType, object valuesCount);
    public static string FindValueCountMismatch(object entityType, object propertiesCount, object valuesCount);
    public static string FindValueTypeMismatch(object index, object entityType, object valueType, object propertyType);
    public static string ForeignKeyReferencedEntityKeyMismatch(object principalKey, object principalEntityType);
    public static string WrongGenericPropertyType(object property, object entityType, object actualType, object genericType);
    public static string NonGenericOptions(object contextType);
    public static string OptionsExtensionNotFound(object optionsExtension);
    public static string DuplicatePropertiesOnBase(object entityType, object baseType, object derivedPropertyType, object derivedProperty, object basePropertyType, object baseProperty);
    public static string CannotBeNullablePK(object property, object entityType);
    public static string ShadowEntity(object entityType);
    public static string CompositePKWithDataAnnotation(object entityType);
    public static string DuplicateNavigationsOnBase(object entityType, object baseType, object navigations);
    public static string EntityTypeModelMismatch(object firstEntityType, object secondEntityType);
    public static string get_HiLoBadBlockSize();
    public static string ValueGenWithConversion(object entityType, object property, object converter);
    public static string IntraHierarchicalAmbiguousTargetEntityType(object entityType, object foreignKey, object principalEntityType, object dependentEntityType);
    public static string NonClrBaseType(object entityType, object baseEntityType);
    public static string NonShadowBaseType(object entityType, object baseEntityType);
    public static string NotAssignableClrBaseType(object entityType, object baseEntityType, object clrType, object baseClrType);
    public static string PropertyWrongEntityClrType(object property, object entityType, object clrType);
    public static string InvalidNavigationWithInverseProperty(object property, object entityType, object referencedProperty, object referencedEntityType);
    public static string SelfReferencingNavigationWithInverseProperty(object property, object entityType, object referencedProperty, object referencedEntityType);
    public static string get_DataBindingWithIListSource();
    public static string get_DataBindingToLocalWithIListSource();
    public static string KeyAttributeOnDerivedEntity(object derivedType, object property);
    public static string InversePropertyMismatch(object navigation, object entityType, object referencedNavigation, object referencedEntityType);
    public static string CompositeFkOnProperty(object navigation, object entityType);
    public static string FkAttributeOnPropertyNavigationMismatch(object property, object navigation, object entityType);
    public static string InvalidPropertyListOnNavigation(object navigation, object entityType);
    public static string InvalidRelationshipUsingDataAnnotations(object navigation, object entityType, object referencedNavigation, object referencedEntityType);
    public static string ConflictingPropertyOrNavigation(object member, object entityType, object conflictingEntityType);
    public static string EntityTypeNotInRelationshipStrict(object entityType, object dependentType, object principalType);
    public static string EntityTypeInUseByDerived(object entityType, object derivedEntityType);
    public static string NavigationNotAdded(object entityType, object navigation, object propertyType);
    public static string PropertyNotAdded(object entityType, object property, object propertyType);
    public static string PropertyNotMapped(object entityType, object property, object propertyType);
    public static string InterfacePropertyNotAdded(object entityType, object navigation, object propertyType);
    public static string NavigationForWrongForeignKey(object navigation, object entityType, object targetFk, object actualFk);
    public static string EntityTypeNotFound(object entityType);
    public static string CustomMetadata(object method, object interfaceType, object concreteType);
    public static string get_InvalidMemberInitBinding();
    public static string InvalidKeyValue(object entityType, object keyProperty);
    public static string InvalidAlternateKeyValue(object entityType, object keyProperty);
    public static string ExpressionParameterizationExceptionSensitive(object expression);
    public static string MultipleNavigationsSameFk(object entityType, object propertyList);
    public static string InconsistentInheritance(object entityType, object baseEntityType);
    public static string DependentEntityTypeNotInRelationship(object dependentEntityType, object principalEntityType, object entityType);
    public static string PrincipalEntityTypeNotInRelationship(object dependentEntityType, object principalEntityType, object entityType);
    public static string ForeignKeyPropertyInKey(object property, object entityType, object key, object baseEntityType);
    public static string KeyPropertyInForeignKey(object property, object entityType);
    public static string NullableKey(object entityType, object property);
    public static string get_ConcurrentMethodInvocation();
    public static string EntityTypesNotInRelationship(object invalidDependentType, object invalidPrincipalType, object dependentType, object principalType);
    public static string InvalidSetType(object typeName);
    public static string AmbiguousOneToOneRelationship(object dependentToPrincipalNavigationSpecification, object principalToDependentNavigationSpecification);
    public static string AmbiguousForeignKeyPropertyCandidates(object firstDependentToPrincipalNavigationSpecification, object firstPrincipalToDependentNavigationSpecification, object secondDependentToPrincipalNavigationSpecification, object secondPrincipalToDependentNavigationSpecification, object foreignKeyProperties);
    public static string InvalidIncludeLambdaExpression(object methodName, object includeLambdaExpression);
    public static string AbstractLeafEntityType(object entityType);
    public static string NoPropertyType(object property, object entityType);
    public static string TempValue(object property, object entityType);
    public static string StoreGenValue(object property, object entityType);
    public static string NoParameterlessConstructor(object entityType);
    public static string ConflictingRelationshipNavigation(object newPrincipalEntityType, object newPrincipalNavigation, object newDependentEntityType, object newDependentNavigation, object existingPrincipalEntityType, object existingPrincipalNavigation, object existingDependentEntityType, object existingDependentNavigation);
    public static string WarningAsErrorTemplate(object eventName, object message, object eventId);
    public static string get_ContextDisposed();
    public static string NoProviderConfiguredFailedToResolveService(object service);
    public static string ErrorMaterializingProperty(object entityType, object property);
    public static string ErrorMaterializingPropertyInvalidCast(object entityType, object property, object expectedType, object actualType);
    public static string ErrorMaterializingPropertyNullReference(object entityType, object property, object expectedType);
    public static string get_ErrorMaterializingValue();
    public static string ErrorMaterializingValueInvalidCast(object expectedType, object actualType);
    public static string ErrorMaterializingValueNullReference(object expectedType);
    public static string InheritedPropertyCannotBeIgnored(object property, object entityType, object baseEntityType);
    public static string RetryLimitExceeded(object retryLimit, object strategy);
    public static string ExecutionStrategyExistingTransaction(object strategy, object getExecutionStrategyMethod);
    public static string PropertyCalledOnNavigation(object property, object entityType);
    public static string PropertyInUseForeignKey(object property, object entityType, object foreignKey, object foreignKeyType);
    public static string PropertyInUseIndex(object property, object entityType, object index, object indexType);
    public static string get_InvalidPoolSize();
    public static string PoolingContextCtorError(object contextType);
    public static string get_PoolingOptionsModified();
    public static string ForeignKeySelfReferencingDependentEntityType(object dependentType);
    public static string EntityTypeInUseByForeignKey(object entityType, object referencedEntityType, object foreignKey);
    public static string ClashingWeakEntityType(object entityType);
    public static string ClashingNonWeakEntityType(object entityType);
    public static string WeakBaseType(object entityType, object baseType);
    public static string WeakDerivedType(object entityType);
    public static string DuplicatePropertyInList(object propertyList, object property);
    public static string get_ConventionsInfiniteLoop();
    public static string NoDefiningNavigation(object navigation, object entityType, object definingEntityType);
    public static string MultipleOwnerships(object entityType);
    public static string NonDefiningOwnership(object ownershipNavigation, object definingNavigation, object entityType);
    public static string InconsistentOwnership(object ownedEntityType, object nonOwnedEntityType);
    public static string InverseToOwnedType(object principalEntityType, object navigation, object ownedType, object ownerType);
    public static string PrincipalOwnedType(object referencingEntityTypeOrNavigation, object referencedEntityTypeOrNavigation, object ownedType);
    public static string AmbiguousDependentEntity(object entityType, object targetEntryCall);
    public static string UntrackedDependentEntity(object entityType, object referenceCall, object collectionCall);
    public static string BadFilterExpression(object filter, object entityType, object clrType);
    public static string BadFilterDerivedType(object filter, object entityType);
    public static string DefiningQueryWithKey(object entityType);
    public static string ConverterPropertyMismatch(object converterType, object entityType, object propertyName, object propertyType);
    public static string ComparerPropertyMismatch(object type, object entityType, object propertyName, object propertyType);
    public static string IncludeNotSpecifiedDirectlyOnEntityType(object include, object invalidNavigation);
    public static string IdentityConflictOwned(object entityType, object keyProperties);
    public static string IdentityConflictOwnedSensitive(object entityType, object keyValue);
    public static string ConvertersCannotBeComposed(object typeOneIn, object typeOneOut, object typeTwoIn, object typeTwoOut);
    public static string ConverterBadType(object converter, object type, object allowed);
    public static string SeedDatumDuplicate(object entityType, object keyProperties);
    public static string SeedDatumDuplicateSensitive(object entityType, object keyValue);
    public static string SeedDatumIncompatibleValue(object entityType, object property, object type);
    public static string SeedDatumIncompatibleValueSensitive(object entityType, object value, object property, object type);
    public static string SeedDatumMissingValue(object entityType, object property);
    public static string SeedDatumDefaultValue(object entityType, object property, object defaultValue);
    public static string SeedDatumSignedNumericValue(object entityType, object property);
    public static string SeedDatumNavigation(object entityType, object navigation, object relatedEntityType, object foreignKeyProperties);
    public static string SeedDatumNavigationSensitive(object entityType, object keyValue, object navigation, object relatedEntityType, object foreignKeyProperties);
    public static string SeedDatumDerivedType(object entityType, object derivedType);
    public static string ConstructorNotFound(object entityType, object constructors);
    public static string ConstructorConflict(object firstConstructor, object secondConstructor);
    public static string ClashingNonOwnedEntityType(object entityType);
    public static string get_TransactionsNotSupported();
    public static string KeylessTypeTracked(object type);
    public static string OwnedDerivedType(object entityType);
    public static string InvalidSetTypeWeak(object typeName);
    public static string PropertyConceptualNullSensitive(object property, object entityType, object keyValue);
    public static string RelationshipConceptualNullSensitive(object firstType, object secondType, object secondKeyValue);
    public static string IdentifyingRelationshipCycle(object entityType);
    public static string AmbiguousServiceProperty(object property, object serviceType, object entityType);
    public static string get_ErrorInvalidQueryable();
    public static string DerivedTypeDefiningQuery(object entityType, object baseType);
    public static string OwnerlessOwnedType(object ownedType);
    public static string AmbiguousOwnedNavigation(object entityType, object otherEntityType);
    public static string FkAttributeOnNonUniquePrincipal(object navigation, object principalType, object dependentType);
    public static string NoIndexer(object entity);
    public static string ConstructorBindingFailed(object failedBinds, object parameters);
    public static string NavigationToKeylessType(object navigation, object entityType);
    public static string ConflictingBackingFields(object property, object entityType, object field1, object field2);
    public static string KeylessTypeExistingKey(object entityType);
    public static string KeylessTypeWithKey(object key, object entityType);
    public static string ConflictingForeignKeyAttributes(object propertyList, object entityType);
    public static string ClashingOwnedEntityType(object entityType);
    public static string InvalidSetTypeOwned(object typeName);
    public static string InvalidSetKeylessOperation(object entityType);
    public static string DerivedEntityTypeHasNoKey(object derivedType, object rootType);
    public static string DerivedEntityCannotBeKeyless(object entityType);
    public static string TrackingTypeMismatch(object runtimeEntityType, object entityType);
    public static string FieldNameMismatch(object field, object entityType, object property);
    public static string DiscriminatorEntityTypeNotDerived(object entityType, object rootEntityType);
    public static string DiscriminatorPropertyMustBeOnRoot(object entityType);
    public static string DiscriminatorPropertyNotFound(object property, object entityType);
    public static string DiscriminatorValueIncompatible(object value, object discriminator, object discriminatorType);
    public static string DuplicateDiscriminatorValue(object entityType1, object discriminatorValue, object entityType2);
    public static string NoDiscriminatorForValue(object entityType, object rootEntityType);
    public static string NoDiscriminatorProperty(object entityType);
    public static string NoDiscriminatorValue(object entityType);
    public static string ForeignKeyWrongType(object foreignKey, object key, object principalType, object otherEntityType, object entityType);
    public static string IndexWrongType(object index, object otherEntityType, object entityType);
    public static string KeyWrongType(object key, object otherEntityType, object entityType);
    public static string PropertyWrongType(object property, object otherEntityType, object entityType);
    public static string NoNavigation(object entityType, object foreignKey);
    public static string PropertyWrongName(object property, object entityType, object clrName);
    public static string PropertyClashingNonIndexer(object property, object entityType);
    public static string EntityEqualitySubqueryWithCompositeKeyNotSupported(object entityType);
    public static string EntityEqualityContainsWithCompositeKeyNotSupported(object entityType);
    public static string EntityEqualityOnKeylessEntityNotSupported(object entityType);
    public static string UnableToDiscriminate(object entityType, object discriminator);
    public static string get_NoInterceptionResult();
    public static string get_SetOperationWithDifferentIncludesInOperands();
    public static string IncludeOnEntityWithDefiningQueryNotSupported(object entityType);
    public static string ClashingNonOwnedDerivedEntityType(object entityType, object derivedType);
    public static string ClientProjectionCapturingConstantInMethodArgument(object constantType, object methodName);
    public static string ClientProjectionCapturingConstantInMethodInstance(object constantType, object methodName);
    public static string ClientProjectionCapturingConstantInTree(object constantType);
    private static string GetString(string name, String[] formatterNames);
}
public class Microsoft.EntityFrameworkCore.Diagnostics.DbContextErrorEventData : DbContextEventData {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; }
    public DbContextErrorEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbContext context, Exception exception);
    [CompilerGeneratedAttribute]
public virtual Exception get_Exception();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.DbContextEventData : EventData {
    [CompilerGeneratedAttribute]
private DbContext <Context>k__BackingField;
    public DbContext Context { get; }
    public DbContextEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbContext context);
    [CompilerGeneratedAttribute]
public virtual DbContext get_Context();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.DbContextTypeErrorEventData : DbContextTypeEventData {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; }
    public DbContextTypeErrorEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, Type contextType, Exception exception);
    [CompilerGeneratedAttribute]
public virtual Exception get_Exception();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.DbContextTypeEventData : EventData {
    [CompilerGeneratedAttribute]
private Type <ContextType>k__BackingField;
    public Type ContextType { get; }
    public DbContextTypeEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, Type contextType);
    [CompilerGeneratedAttribute]
public virtual Type get_ContextType();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.EntityEntryEventData : EventData {
    [CompilerGeneratedAttribute]
private EntityEntry <EntityEntry>k__BackingField;
    public EntityEntry EntityEntry { get; }
    public EntityEntryEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, EntityEntry entityEntry);
    [CompilerGeneratedAttribute]
public virtual EntityEntry get_EntityEntry();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.EventData : object {
    private EventDefinitionBase _eventDefinition;
    private Func`3<EventDefinitionBase, EventData, string> _messageGenerator;
    public EventId EventId { get; }
    public LogLevel LogLevel { get; }
    public EventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator);
    public virtual EventId get_EventId();
    public virtual LogLevel get_LogLevel();
    public virtual string ToString();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition : EventDefinitionBase {
    private Action`2<ILogger, Exception> _logAction;
    public EventDefinition(ILoggingOptions loggingOptions, EventId eventId, LogLevel level, string eventIdCode, Func`2<LogLevel, Action`2<ILogger, Exception>> logActionFunc);
    public virtual string GenerateMessage();
    public virtual void Log(IDiagnosticsLogger`1<TLoggerCategory> logger, WarningBehavior warningBehavior, Exception exception);
}
public class Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`1 : EventDefinitionBase {
    private Action`3<ILogger, TParam, Exception> _logAction;
    public EventDefinition`1(ILoggingOptions loggingOptions, EventId eventId, LogLevel level, string eventIdCode, Func`2<LogLevel, Action`3<ILogger, TParam, Exception>> logActionFunc);
    public virtual string GenerateMessage(TParam arg);
    public virtual void Log(IDiagnosticsLogger`1<TLoggerCategory> logger, WarningBehavior warningBehavior, TParam arg);
}
public class Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`2 : EventDefinitionBase {
    private Action`4<ILogger, TParam1, TParam2, Exception> _logAction;
    public EventDefinition`2(ILoggingOptions loggingOptions, EventId eventId, LogLevel level, string eventIdCode, Func`2<LogLevel, Action`4<ILogger, TParam1, TParam2, Exception>> logActionFunc);
    public virtual string GenerateMessage(TParam1 arg1, TParam2 arg2);
    public virtual void Log(IDiagnosticsLogger`1<TLoggerCategory> logger, WarningBehavior warningBehavior, TParam1 arg1, TParam2 arg2);
}
public class Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`3 : EventDefinitionBase {
    private Action`5<ILogger, TParam1, TParam2, TParam3, Exception> _logAction;
    public EventDefinition`3(ILoggingOptions loggingOptions, EventId eventId, LogLevel level, string eventIdCode, Func`2<LogLevel, Action`5<ILogger, TParam1, TParam2, TParam3, Exception>> logActionFunc);
    public virtual string GenerateMessage(TParam1 arg1, TParam2 arg2, TParam3 arg3, Exception exception);
    public virtual void Log(IDiagnosticsLogger`1<TLoggerCategory> logger, WarningBehavior warningBehavior, TParam1 arg1, TParam2 arg2, TParam3 arg3, Exception exception);
}
public class Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`4 : EventDefinitionBase {
    private Action`6<ILogger, TParam1, TParam2, TParam3, TParam4, Exception> _logAction;
    public EventDefinition`4(ILoggingOptions loggingOptions, EventId eventId, LogLevel level, string eventIdCode, Func`2<LogLevel, Action`6<ILogger, TParam1, TParam2, TParam3, TParam4, Exception>> logActionFunc);
    public virtual string GenerateMessage(TParam1 arg1, TParam2 arg2, TParam3 arg3, TParam4 arg4);
    public virtual void Log(IDiagnosticsLogger`1<TLoggerCategory> logger, WarningBehavior warningBehavior, TParam1 arg1, TParam2 arg2, TParam3 arg3, TParam4 arg4);
}
public class Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`5 : EventDefinitionBase {
    private Action`7<ILogger, TParam1, TParam2, TParam3, TParam4, TParam5, Exception> _logAction;
    public EventDefinition`5(ILoggingOptions loggingOptions, EventId eventId, LogLevel level, string eventIdCode, Func`2<LogLevel, Action`7<ILogger, TParam1, TParam2, TParam3, TParam4, TParam5, Exception>> logActionFunc);
    public virtual string GenerateMessage(TParam1 arg1, TParam2 arg2, TParam3 arg3, TParam4 arg4, TParam5 arg5);
    public virtual void Log(IDiagnosticsLogger`1<TLoggerCategory> logger, WarningBehavior warningBehavior, TParam1 arg1, TParam2 arg2, TParam3 arg3, TParam4 arg4, TParam5 arg5);
}
public class Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`6 : EventDefinitionBase {
    private Action`8<ILogger, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, Exception> _logAction;
    public EventDefinition`6(ILoggingOptions loggingOptions, EventId eventId, LogLevel level, string eventIdCode, Func`2<LogLevel, Action`8<ILogger, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, Exception>> logActionFunc);
    public virtual string GenerateMessage(TParam1 arg1, TParam2 arg2, TParam3 arg3, TParam4 arg4, TParam5 arg5, TParam6 arg6);
    public virtual void Log(IDiagnosticsLogger`1<TLoggerCategory> logger, WarningBehavior warningBehavior, TParam1 arg1, TParam2 arg2, TParam3 arg3, TParam4 arg4, TParam5 arg5, TParam6 arg6);
}
public abstract class Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase : object {
    private WarningBehavior _warningBehavior;
    [CompilerGeneratedAttribute]
private EventId <EventId>k__BackingField;
    [CompilerGeneratedAttribute]
private LogLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventIdCode>k__BackingField;
    public EventId EventId { get; }
    public LogLevel Level { get; }
    public string EventIdCode { get; }
    protected EventDefinitionBase(ILoggingOptions loggingOptions, EventId eventId, LogLevel level, string eventIdCode);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual EventId get_EventId();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual LogLevel get_Level();
    [CompilerGeneratedAttribute]
public virtual string get_EventIdCode();
    protected virtual Exception WarningAsError(string message);
    public virtual WarningBehavior GetLogBehavior(IDiagnosticsLogger`1<TLoggerCategory> logger);
}
public class Microsoft.EntityFrameworkCore.Diagnostics.ExecutionStrategyEventData : EventData {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Exception> <ExceptionsEncountered>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    public IReadOnlyList`1<Exception> ExceptionsEncountered { get; }
    public TimeSpan Delay { get; }
    public bool IsAsync { get; }
    public ExecutionStrategyEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IReadOnlyList`1<Exception> exceptionsEncountered, TimeSpan delay, bool async);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<Exception> get_ExceptionsEncountered();
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_Delay();
    [CompilerGeneratedAttribute]
public virtual bool get_IsAsync();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.ExpressionEventData : EventData {
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    public Expression Expression { get; }
    public ExpressionEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, Expression expression);
    [CompilerGeneratedAttribute]
public virtual Expression get_Expression();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.FallbackEventDefinition : EventDefinitionBase {
    [CompilerGeneratedAttribute]
private string <MessageFormat>k__BackingField;
    public string MessageFormat { get; }
    public FallbackEventDefinition(ILoggingOptions loggingOptions, EventId eventId, LogLevel level, string eventIdCode, string messageFormat);
    public virtual string GenerateMessage(Action`1<ILogger> logAction);
    public virtual void Log(IDiagnosticsLogger`1<TLoggerCategory> logger, WarningBehavior warningBehavior, Action`1<ILogger> logAction);
    [CompilerGeneratedAttribute]
public virtual string get_MessageFormat();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.ForeignKeyEventData : EventData {
    [CompilerGeneratedAttribute]
private IForeignKey <ForeignKey>k__BackingField;
    public IForeignKey ForeignKey { get; }
    public ForeignKeyEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IForeignKey foreignKey);
    [CompilerGeneratedAttribute]
public virtual IForeignKey get_ForeignKey();
}
public interface Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger {
    public ILoggingOptions Options { get; }
    public LoggingDefinitions Definitions { get; }
    public ILogger Logger { get; }
    public DiagnosticSource DiagnosticSource { get; }
    public abstract virtual ILoggingOptions get_Options();
    public abstract virtual LoggingDefinitions get_Definitions();
    public abstract virtual bool ShouldLogSensitiveData();
    public abstract virtual ILogger get_Logger();
    public abstract virtual DiagnosticSource get_DiagnosticSource();
}
public interface Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1 {
    public IInterceptors Interceptors { get; }
    public abstract virtual IInterceptors get_Interceptors();
}
public interface Microsoft.EntityFrameworkCore.Diagnostics.IErrorEventData {
    public Exception Exception { get; }
    public abstract virtual Exception get_Exception();
}
public interface Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor {
}
public interface Microsoft.EntityFrameworkCore.Diagnostics.IInterceptorAggregator {
    public Type InterceptorType { get; }
    public abstract virtual Type get_InterceptorType();
    public abstract virtual IInterceptor AggregateInterceptors(IReadOnlyList`1<IInterceptor> interceptors);
}
public interface Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors {
    public abstract virtual TInterceptor Aggregate();
}
public interface Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions {
    public bool IsSensitiveDataLoggingEnabled { get; }
    public bool IsSensitiveDataLoggingWarned { get; public set; }
    public WarningsConfiguration WarningsConfiguration { get; }
    public abstract virtual bool get_IsSensitiveDataLoggingEnabled();
    public abstract virtual bool get_IsSensitiveDataLoggingWarned();
    public abstract virtual void set_IsSensitiveDataLoggingWarned(bool value);
    public abstract virtual WarningsConfiguration get_WarningsConfiguration();
}
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsSuppressed>k__BackingField;
    public bool IsSuppressed { get; }
    private InterceptionResult(bool suppress);
    public static InterceptionResult Suppress();
    [CompilerGeneratedAttribute]
public bool get_IsSuppressed();
}
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1 : ValueType {
    private TResult _result;
    [CompilerGeneratedAttribute]
private bool <HasResult>k__BackingField;
    public TResult Result { get; }
    public bool HasResult { get; }
    private InterceptionResult`1(TResult result);
    public static InterceptionResult`1<TResult> SuppressWithResult(TResult result);
    public TResult get_Result();
    [CompilerGeneratedAttribute]
public bool get_HasResult();
}
public abstract class Microsoft.EntityFrameworkCore.Diagnostics.InterceptorAggregator`1 : object {
    private TInterceptor _interceptor;
    private bool _resolved;
    public Type InterceptorType { get; }
    public virtual Type get_InterceptorType();
    public virtual IInterceptor AggregateInterceptors(IReadOnlyList`1<IInterceptor> interceptors);
    protected abstract virtual TInterceptor CreateChain(IEnumerable`1<TInterceptor> interceptors);
}
public static class Microsoft.EntityFrameworkCore.Diagnostics.Internal.CoreResources : object {
    private static ResourceManager _resourceManager;
    private static CoreResources();
    public static EventDefinition LogServiceProviderCreated(IDiagnosticsLogger logger);
    public static EventDefinition LogManyServiceProvidersCreated(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogServiceProviderDebugInfo(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, string, string, string> LogContextInitialized(IDiagnosticsLogger logger);
    public static EventDefinition`3<Type, string, Exception> LogExceptionDuringQueryIteration(IDiagnosticsLogger logger);
    public static EventDefinition`3<Type, string, Exception> LogExceptionDuringSaveChanges(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogDetectChangesStarting(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogDetectChangesCompleted(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogPropertyChangeDetected(IDiagnosticsLogger logger);
    public static EventDefinition`5<string, string, object, object, string> LogPropertyChangeDetectedSensitive(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogForeignKeyChangeDetected(IDiagnosticsLogger logger);
    public static EventDefinition`5<string, string, object, object, string> LogForeignKeyChangeDetectedSensitive(IDiagnosticsLogger logger);
    public static EventDefinition`4<int, int, string, string> LogCollectionChangeDetected(IDiagnosticsLogger logger);
    public static EventDefinition`5<int, int, string, string, string> LogCollectionChangeDetectedSensitive(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogReferenceChangeDetected(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, string> LogReferenceChangeDetectedSensitive(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, EntityState, string> LogCascadeDelete(IDiagnosticsLogger logger);
    public static EventDefinition`5<string, string, EntityState, string, string> LogCascadeDeleteSensitive(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, EntityState, string> LogCascadeDeleteOrphan(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, string, EntityState, string> LogCascadeDeleteOrphanSensitive(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogStartedTracking(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, string> LogStartedTrackingSensitive(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, string, EntityState, EntityState> LogStateChanged(IDiagnosticsLogger logger);
    public static EventDefinition`5<string, string, string, EntityState, EntityState> LogStateChangedSensitive(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, string> LogValueGenerated(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, object, string, string> LogValueGeneratedSensitive(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, string> LogTempValueGenerated(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, object, string, string> LogTempValueGeneratedSensitive(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogSaveChangesStarting(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, int> LogSaveChangesCompleted(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogContextDisposed(IDiagnosticsLogger logger);
    [ObsoleteAttribute]
public static EventDefinition`2<string, string> LogCompilingQueryModel(IDiagnosticsLogger logger);
    [ObsoleteAttribute]
public static EventDefinition`2<string, string> LogOptimizedQueryModel(IDiagnosticsLogger logger);
    [ObsoleteAttribute]
public static EventDefinition`1<string> LogIncludingNavigation(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogQueryExecutionPlanned(IDiagnosticsLogger logger);
    public static EventDefinition LogSensitiveDataLoggingEnabled(IDiagnosticsLogger logger);
    [ObsoleteAttribute]
public static EventDefinition`1<string> LogIgnoredInclude(IDiagnosticsLogger logger);
    [ObsoleteAttribute]
public static EventDefinition`1<string> LogRowLimitingOperationWithoutOrderBy(IDiagnosticsLogger logger);
    [ObsoleteAttribute]
public static EventDefinition`1<string> LogFirstWithoutOrderByAndFilter(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogPossibleUnintendedCollectionNavigationNullComparison(IDiagnosticsLogger logger);
    public static EventDefinition`2<object, object> LogPossibleUnintendedReferenceComparison(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogDuplicateDependentEntityTypeInstance(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogShadowPropertyCreated(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogCollectionWithoutComparer(IDiagnosticsLogger logger);
    public static EventDefinition`3<int, string, Exception> LogExecutionStrategyRetrying(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogNavigationLazyLoading(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogLazyLoadOnDisposedContext(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogDetachedLazyLoading(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, string> LogRedundantIndexRemoved(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogIncompatibleMatchingForeignKeyProperties(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogRequiredAttributeInverted(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogNonNullableInverted(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, string, string, string> LogRequiredAttributeOnBothNavigations(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, string, string, string> LogNonNullableReferenceOnBothNavigations(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, string, string, string> LogForeignKeyAttributesOnBothNavigations(IDiagnosticsLogger logger);
    public static EventDefinition`6<string, string, string, string, string, string> LogForeignKeyAttributesOnBothProperties(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, string, string, string> LogConflictingForeignKeyAttributesOnNavigationAndProperty(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogMultipleInversePropertiesSameTarget(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, string> LogConflictingShadowForeignKeys(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, string, string, string> LogMultipleNavigationProperties(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, string> LogMultiplePrimaryKeyCandidates(IDiagnosticsLogger logger);
    public static EventDefinition`5<string, string, string, string, string> LogNonDefiningInverseNavigation(IDiagnosticsLogger logger);
    public static EventDefinition`5<string, string, string, string, string> LogNonOwnershipInverseNavigation(IDiagnosticsLogger logger);
    public static EventDefinition`1<Exception> LogOptimisticConcurrencyException(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogRedundantForeignKey(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogRequiredAttributeOnCollection(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogRequiredAttributeOnDependent(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogNonNullableReferenceOnDependent(IDiagnosticsLogger logger);
    public static EventDefinition LogRedundantAddServicesCall(IDiagnosticsLogger logger);
}
public class Microsoft.EntityFrameworkCore.Diagnostics.Internal.Interceptors : object {
    private IServiceProvider _serviceProvider;
    private IEnumerable`1<IInterceptor> _injectedInterceptors;
    private Dictionary`2<Type, IInterceptorAggregator> _aggregators;
    private CoreOptionsExtension _coreOptionsExtension;
    private List`1<IInterceptor> _interceptors;
    private IReadOnlyList`1<IInterceptor> RegisteredInterceptors { get; }
    private CoreOptionsExtension CoreOptionsExtension { get; }
    public Interceptors(IServiceProvider serviceProvider, IEnumerable`1<IInterceptor> injectedInterceptors, IEnumerable`1<IInterceptorAggregator> interceptorAggregators);
    private IReadOnlyList`1<IInterceptor> get_RegisteredInterceptors();
    public virtual TInterceptor Aggregate();
    private CoreOptionsExtension get_CoreOptionsExtension();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.LazyLoadingEventData : DbContextEventData {
    [CompilerGeneratedAttribute]
private object <Entity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NavigationPropertyName>k__BackingField;
    public object Entity { get; }
    public string NavigationPropertyName { get; }
    public LazyLoadingEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbContext context, object entity, string navigationPropertyName);
    [CompilerGeneratedAttribute]
public virtual object get_Entity();
    [CompilerGeneratedAttribute]
public virtual string get_NavigationPropertyName();
}
public abstract class Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory`1 : object {
    [CompilerGeneratedAttribute]
private static string <Name>k__BackingField;
    public static string Name { get; }
    private static LoggerCategory`1();
    [CompilerGeneratedAttribute]
public static string get_Name();
    public virtual string ToString();
    public static string op_Implicit(LoggerCategory`1<T> loggerCategory);
    private static string ToName(Type loggerCategoryType);
}
public abstract class Microsoft.EntityFrameworkCore.Diagnostics.LoggingDefinitions : object {
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogServiceProviderCreated;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogManyServiceProvidersCreated;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogServiceProviderDebugInfo;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogContextInitialized;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogExceptionDuringQueryIteration;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogExceptionDuringSaveChanges;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogDetectChangesStarting;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogDetectChangesCompleted;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogPropertyChangeDetected;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogPropertyChangeDetectedSensitive;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogForeignKeyChangeDetected;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogForeignKeyChangeDetectedSensitive;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCollectionChangeDetected;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCollectionChangeDetectedSensitive;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogReferenceChangeDetected;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogReferenceChangeDetectedSensitive;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCascadeDelete;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCascadeDeleteSensitive;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCascadeDeleteOrphan;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCascadeDeleteOrphanSensitive;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogStartedTracking;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogStartedTrackingSensitive;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogStateChanged;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogStateChangedSensitive;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogValueGenerated;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogValueGeneratedSensitive;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogTempValueGenerated;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogTempValueGeneratedSensitive;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogSaveChangesStarting;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogSaveChangesCompleted;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogContextDisposed;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCompilingQueryModel;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogOptimizedQueryModel;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogIncludingNavigation;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogQueryExecutionPlanned;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogSensitiveDataLoggingEnabled;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogIgnoredInclude;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogRowLimitingOperationWithoutOrderBy;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogPossibleUnintendedCollectionNavigationNullComparison;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogPossibleUnintendedReferenceComparison;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogDuplicateDependentEntityTypeInstance;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogShadowPropertyCreated;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCollectionWithoutComparer;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogExecutionStrategyRetrying;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogNavigationLazyLoading;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogLazyLoadOnDisposedContext;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogDetachedLazyLoading;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogRedundantAddServicesCall;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogRedundantIndexRemoved;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogIncompatibleMatchingForeignKeyProperties;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogRequiredAttributeInverted;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogNonNullableInverted;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogRequiredAttributeOnDependent;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogNonNullableReferenceOnDependent;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogRequiredAttributeOnBothNavigations;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogNonNullableReferenceOnBothNavigations;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogForeignKeyAttributesOnBothNavigations;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogRequiredAttributeOnCollection;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogForeignKeyAttributesOnBothProperties;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogConflictingForeignKeyAttributesOnNavigationAndProperty;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogMultipleInversePropertiesSameTarget;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogConflictingShadowForeignKeys;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogMultipleNavigationProperties;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogMultiplePrimaryKeyCandidates;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogNonOwnershipInverseNavigation;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogFirstWithoutOrderByAndFilter;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogNonDefiningInverseNavigation;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogOptimisticConcurrencyException;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogRedundantForeignKey;
}
public class Microsoft.EntityFrameworkCore.Diagnostics.NavigationEventData : EventData {
    [CompilerGeneratedAttribute]
private INavigation <Navigation>k__BackingField;
    public INavigation Navigation { get; }
    public NavigationEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, INavigation navigation);
    [CompilerGeneratedAttribute]
public virtual INavigation get_Navigation();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.PropertyChangedEventData : PropertyEventData {
    [CompilerGeneratedAttribute]
private EntityEntry <EntityEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OldValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <NewValue>k__BackingField;
    public EntityEntry EntityEntry { get; }
    public object OldValue { get; }
    public object NewValue { get; }
    public PropertyChangedEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, EntityEntry entityEntry, IProperty property, object oldValue, object newValue);
    [CompilerGeneratedAttribute]
public virtual EntityEntry get_EntityEntry();
    [CompilerGeneratedAttribute]
public virtual object get_OldValue();
    [CompilerGeneratedAttribute]
public virtual object get_NewValue();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.PropertyEventData : EventData {
    [CompilerGeneratedAttribute]
private IProperty <Property>k__BackingField;
    public IProperty Property { get; }
    public PropertyEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IProperty property);
    [CompilerGeneratedAttribute]
public virtual IProperty get_Property();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.PropertyValueEventData : PropertyEventData {
    [CompilerGeneratedAttribute]
private EntityEntry <EntityEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public EntityEntry EntityEntry { get; }
    public object Value { get; }
    public PropertyValueEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, EntityEntry entityEntry, IProperty property, object value);
    [CompilerGeneratedAttribute]
public virtual EntityEntry get_EntityEntry();
    [CompilerGeneratedAttribute]
public virtual object get_Value();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.QueryExpressionEventData : EventData {
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpressionPrinter <ExpressionPrinter>k__BackingField;
    public Expression Expression { get; }
    public ExpressionPrinter ExpressionPrinter { get; }
    public QueryExpressionEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, Expression queryExpression, ExpressionPrinter expressionPrinter);
    [CompilerGeneratedAttribute]
public virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public virtual ExpressionPrinter get_ExpressionPrinter();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.ReferenceChangedEventData : NavigationEventData {
    [CompilerGeneratedAttribute]
private EntityEntry <EntityEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OldReferencedEntity>k__BackingField;
    [CompilerGeneratedAttribute]
private object <NewReferencedEntity>k__BackingField;
    public EntityEntry EntityEntry { get; }
    public object OldReferencedEntity { get; }
    public object NewReferencedEntity { get; }
    public ReferenceChangedEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, EntityEntry entityEntry, INavigation navigation, object oldReferencedEntity, object newReferencedEntity);
    [CompilerGeneratedAttribute]
public virtual EntityEntry get_EntityEntry();
    [CompilerGeneratedAttribute]
public virtual object get_OldReferencedEntity();
    [CompilerGeneratedAttribute]
public virtual object get_NewReferencedEntity();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.SaveChangesCompletedEventData : DbContextEventData {
    [CompilerGeneratedAttribute]
private int <EntitiesSavedCount>k__BackingField;
    public int EntitiesSavedCount { get; }
    public SaveChangesCompletedEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbContext context, int entitiesSavedCount);
    [CompilerGeneratedAttribute]
public virtual int get_EntitiesSavedCount();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.SaveChangesEventData : EventData {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IUpdateEntry> <Entries>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowsAffected>k__BackingField;
    public IEnumerable`1<IUpdateEntry> Entries { get; }
    public int RowsAffected { get; }
    public SaveChangesEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IEnumerable`1<IUpdateEntry> entries, int rowsAffected);
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<IUpdateEntry> get_Entries();
    [CompilerGeneratedAttribute]
public virtual int get_RowsAffected();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.ServiceProviderDebugInfoEventData : EventData {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <NewDebugInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IDictionary`2<string, string>> <CachedDebugInfos>k__BackingField;
    public IDictionary`2<string, string> NewDebugInfo { get; }
    public IList`1<IDictionary`2<string, string>> CachedDebugInfos { get; }
    public ServiceProviderDebugInfoEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IDictionary`2<string, string> newDebugInfo, IList`1<IDictionary`2<string, string>> cachedDebugInfos);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, string> get_NewDebugInfo();
    [CompilerGeneratedAttribute]
public virtual IList`1<IDictionary`2<string, string>> get_CachedDebugInfos();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.ServiceProviderEventData : EventData {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    public IServiceProvider ServiceProvider { get; }
    public ServiceProviderEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public virtual IServiceProvider get_ServiceProvider();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.ServiceProvidersEventData : EventData {
    [CompilerGeneratedAttribute]
private ICollection`1<IServiceProvider> <ServiceProviders>k__BackingField;
    public ICollection`1<IServiceProvider> ServiceProviders { get; }
    public ServiceProvidersEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, ICollection`1<IServiceProvider> serviceProviders);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<IServiceProvider> get_ServiceProviders();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.SharedDependentEntityEventData : EventData {
    [CompilerGeneratedAttribute]
private IEntityType <FirstEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityType <SecondEntityType>k__BackingField;
    public IEntityType FirstEntityType { get; }
    public IEntityType SecondEntityType { get; }
    public SharedDependentEntityEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IEntityType firstEntityType, IEntityType secondEntityType);
    [CompilerGeneratedAttribute]
public virtual IEntityType get_FirstEntityType();
    [CompilerGeneratedAttribute]
public virtual IEntityType get_SecondEntityType();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.StateChangedEventData : EntityEntryEventData {
    [CompilerGeneratedAttribute]
private EntityState <OldState>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityState <NewState>k__BackingField;
    public EntityState OldState { get; }
    public EntityState NewState { get; }
    public StateChangedEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, EntityEntry entityEntry, EntityState oldState, EntityState newState);
    [CompilerGeneratedAttribute]
public virtual EntityState get_OldState();
    [CompilerGeneratedAttribute]
public virtual EntityState get_NewState();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.TwoPropertyBaseCollectionsEventData : EventData {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IPropertyBase> <FirstPropertyCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IPropertyBase> <SecondPropertyCollection>k__BackingField;
    public IReadOnlyList`1<IPropertyBase> FirstPropertyCollection { get; }
    public IReadOnlyList`1<IPropertyBase> SecondPropertyCollection { get; }
    public TwoPropertyBaseCollectionsEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IReadOnlyList`1<IPropertyBase> firstPropertyCollection, IReadOnlyList`1<IPropertyBase> secondPropertyCollection);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<IPropertyBase> get_FirstPropertyCollection();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<IPropertyBase> get_SecondPropertyCollection();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.TwoUnmappedPropertyCollectionsEventData : EventData {
    [CompilerGeneratedAttribute]
private IEnumerable`1<Tuple`2<MemberInfo, Type>> <FirstPropertyCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Tuple`2<MemberInfo, Type>> <SecondPropertyCollection>k__BackingField;
    public IEnumerable`1<Tuple`2<MemberInfo, Type>> FirstPropertyCollection { get; }
    public IEnumerable`1<Tuple`2<MemberInfo, Type>> SecondPropertyCollection { get; }
    public TwoUnmappedPropertyCollectionsEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IEnumerable`1<Tuple`2<MemberInfo, Type>> firstPropertyCollection, IEnumerable`1<Tuple`2<MemberInfo, Type>> secondPropertyCollection);
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<Tuple`2<MemberInfo, Type>> get_FirstPropertyCollection();
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<Tuple`2<MemberInfo, Type>> get_SecondPropertyCollection();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.ValueConverterEventData : EventData {
    [CompilerGeneratedAttribute]
private Type <MappingClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueConverter <ValueConverter>k__BackingField;
    public Type MappingClrType { get; }
    public ValueConverter ValueConverter { get; }
    public ValueConverterEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, Type mappingClrType, ValueConverter valueConverter);
    [CompilerGeneratedAttribute]
public virtual Type get_MappingClrType();
    [CompilerGeneratedAttribute]
public virtual ValueConverter get_ValueConverter();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfiguration : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<int, ValueTuple`2<Nullable`1<WarningBehavior>, Nullable`1<LogLevel>>> _explicitBehaviors;
    private WarningBehavior _defaultBehavior;
    private Nullable`1<long> _serviceProviderHash;
    public WarningBehavior DefaultBehavior { get; }
    protected WarningsConfiguration(WarningsConfiguration copyFrom);
    protected virtual WarningsConfiguration Clone();
    public virtual WarningBehavior get_DefaultBehavior();
    public virtual WarningsConfiguration WithDefaultBehavior(WarningBehavior warningBehavior);
    public virtual WarningsConfiguration WithExplicit(IEnumerable`1<EventId> eventIds, WarningBehavior warningBehavior);
    public virtual WarningsConfiguration WithExplicit(IEnumerable`1<ValueTuple`2<EventId, LogLevel>> eventsAndLevels);
    public virtual Nullable`1<WarningBehavior> GetBehavior(EventId eventId);
    public virtual Nullable`1<LogLevel> GetLevel(EventId eventId);
    public virtual WarningsConfiguration TryWithExplicit(EventId eventId, WarningBehavior warningBehavior);
    public virtual long GetServiceProviderHashCode();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder : object {
    private DbContextOptionsBuilder _optionsBuilder;
    public WarningsConfigurationBuilder(DbContextOptionsBuilder optionsBuilder);
    public virtual WarningsConfigurationBuilder Default(WarningBehavior warningBehavior);
    public virtual WarningsConfigurationBuilder Throw(EventId[] eventIds);
    public virtual WarningsConfigurationBuilder Log(EventId[] eventIds);
    public virtual WarningsConfigurationBuilder Log(ValueTuple`2[] eventsAndLevels);
    public virtual WarningsConfigurationBuilder Ignore(EventId[] eventIds);
    private WarningsConfigurationBuilder WithOption(Func`2<WarningsConfiguration, WarningsConfiguration> withFunc);
}
public static class Microsoft.EntityFrameworkCore.EF : object {
    internal static MethodInfo PropertyMethod;
    [CompilerGeneratedAttribute]
private static DbFunctions <Functions>k__BackingField;
    public static DbFunctions Functions { get; }
    private static EF();
    public static Func`2<TContext, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`2<TContext, DbSet`1<TResult>>> queryExpression);
    [ObsoleteAttribute("Use DbSet instead")]
public static Func`2<TContext, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`2<TContext, DbQuery`1<TResult>>> queryExpression);
    public static Func`2<TContext, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`2<TContext, IQueryable`1<TResult>>> queryExpression);
    public static Func`3<TContext, TParam1, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`3<TContext, TParam1, IQueryable`1<TResult>>> queryExpression);
    public static Func`4<TContext, TParam1, TParam2, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`4<TContext, TParam1, TParam2, IQueryable`1<TResult>>> queryExpression);
    public static Func`5<TContext, TParam1, TParam2, TParam3, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`5<TContext, TParam1, TParam2, TParam3, IQueryable`1<TResult>>> queryExpression);
    public static Func`6<TContext, TParam1, TParam2, TParam3, TParam4, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`6<TContext, TParam1, TParam2, TParam3, TParam4, IQueryable`1<TResult>>> queryExpression);
    public static Func`7<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`7<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, IQueryable`1<TResult>>> queryExpression);
    public static Func`2<TContext, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`2<TContext, TResult>> queryExpression);
    public static Func`3<TContext, CancellationToken, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`3<TContext, CancellationToken, TResult>> queryExpression);
    public static Func`3<TContext, TParam1, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`3<TContext, TParam1, TResult>> queryExpression);
    public static Func`4<TContext, TParam1, CancellationToken, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`4<TContext, TParam1, CancellationToken, TResult>> queryExpression);
    public static Func`4<TContext, TParam1, TParam2, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`4<TContext, TParam1, TParam2, TResult>> queryExpression);
    public static Func`5<TContext, TParam1, TParam2, CancellationToken, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`5<TContext, TParam1, TParam2, CancellationToken, TResult>> queryExpression);
    public static Func`5<TContext, TParam1, TParam2, TParam3, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`5<TContext, TParam1, TParam2, TParam3, TResult>> queryExpression);
    public static Func`6<TContext, TParam1, TParam2, TParam3, CancellationToken, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`6<TContext, TParam1, TParam2, TParam3, CancellationToken, TResult>> queryExpression);
    public static Func`6<TContext, TParam1, TParam2, TParam3, TParam4, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`6<TContext, TParam1, TParam2, TParam3, TParam4, TResult>> queryExpression);
    public static Func`7<TContext, TParam1, TParam2, TParam3, TParam4, CancellationToken, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`7<TContext, TParam1, TParam2, TParam3, TParam4, CancellationToken, TResult>> queryExpression);
    public static Func`7<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`7<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TResult>> queryExpression);
    public static Func`8<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, CancellationToken, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`8<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, CancellationToken, TResult>> queryExpression);
    public static Func`2<TContext, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`2<TContext, DbSet`1<TResult>>> queryExpression);
    [ObsoleteAttribute("Use DbSet instead")]
public static Func`2<TContext, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`2<TContext, DbQuery`1<TResult>>> queryExpression);
    public static Func`2<TContext, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`2<TContext, IQueryable`1<TResult>>> queryExpression);
    public static Func`2<TContext, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`2<TContext, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`2<TContext, TResult> CompileQuery(Expression`1<Func`2<TContext, TResult>> queryExpression);
    public static Func`3<TContext, TParam1, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`3<TContext, TParam1, IQueryable`1<TResult>>> queryExpression);
    public static Func`3<TContext, TParam1, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`3<TContext, TParam1, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`3<TContext, TParam1, TResult> CompileQuery(Expression`1<Func`3<TContext, TParam1, TResult>> queryExpression);
    public static Func`4<TContext, TParam1, TParam2, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`4<TContext, TParam1, TParam2, IQueryable`1<TResult>>> queryExpression);
    public static Func`4<TContext, TParam1, TParam2, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`4<TContext, TParam1, TParam2, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`4<TContext, TParam1, TParam2, TResult> CompileQuery(Expression`1<Func`4<TContext, TParam1, TParam2, TResult>> queryExpression);
    public static Func`5<TContext, TParam1, TParam2, TParam3, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`5<TContext, TParam1, TParam2, TParam3, IQueryable`1<TResult>>> queryExpression);
    public static Func`5<TContext, TParam1, TParam2, TParam3, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`5<TContext, TParam1, TParam2, TParam3, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`5<TContext, TParam1, TParam2, TParam3, TResult> CompileQuery(Expression`1<Func`5<TContext, TParam1, TParam2, TParam3, TResult>> queryExpression);
    public static Func`6<TContext, TParam1, TParam2, TParam3, TParam4, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`6<TContext, TParam1, TParam2, TParam3, TParam4, IQueryable`1<TResult>>> queryExpression);
    public static Func`6<TContext, TParam1, TParam2, TParam3, TParam4, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`6<TContext, TParam1, TParam2, TParam3, TParam4, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`6<TContext, TParam1, TParam2, TParam3, TParam4, TResult> CompileQuery(Expression`1<Func`6<TContext, TParam1, TParam2, TParam3, TParam4, TResult>> queryExpression);
    public static Func`7<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`7<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, IQueryable`1<TResult>>> queryExpression);
    public static Func`7<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`7<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`7<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TResult> CompileQuery(Expression`1<Func`7<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TResult>> queryExpression);
    public static TProperty Property(object entity, string propertyName);
    [CompilerGeneratedAttribute]
public static DbFunctions get_Functions();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions : object {
    internal static MethodInfo IncludeMethodInfo;
    internal static MethodInfo ThenIncludeAfterEnumerableMethodInfo;
    internal static MethodInfo ThenIncludeAfterReferenceMethodInfo;
    internal static MethodInfo StringIncludeMethodInfo;
    internal static MethodInfo IgnoreQueryFiltersMethodInfo;
    internal static MethodInfo AsNoTrackingMethodInfo;
    internal static MethodInfo AsTrackingMethodInfo;
    internal static MethodInfo TagWithMethodInfo;
    private static EntityFrameworkQueryableExtensions();
    [ExtensionAttribute]
public static Task`1<bool> AnyAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<bool> AnyAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<bool> AllAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> CountAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> CountAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<long> LongCountAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<long> LongCountAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> FirstAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> FirstAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> FirstOrDefaultAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> FirstOrDefaultAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> LastAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> LastAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> LastOrDefaultAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> LastOrDefaultAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> SingleAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> SingleAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> SingleOrDefaultAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> SingleOrDefaultAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> MinAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> MinAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> MaxAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> MaxAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<decimal> SumAsync(IQueryable`1<decimal> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> SumAsync(IQueryable`1<Nullable`1<decimal>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<decimal> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> SumAsync(IQueryable`1<int> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<int>> SumAsync(IQueryable`1<Nullable`1<int>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<int>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<long> SumAsync(IQueryable`1<long> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<long>> SumAsync(IQueryable`1<Nullable`1<long>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<long> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<long>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> SumAsync(IQueryable`1<double> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> SumAsync(IQueryable`1<Nullable`1<double>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<float> SumAsync(IQueryable`1<float> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> SumAsync(IQueryable`1<Nullable`1<float>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<float> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<decimal> AverageAsync(IQueryable`1<decimal> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> AverageAsync(IQueryable`1<Nullable`1<decimal>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<decimal> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<int> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<int>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<long> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<long>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<double> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<double>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<float> AverageAsync(IQueryable`1<float> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> AverageAsync(IQueryable`1<Nullable`1<float>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<float> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<bool> ContainsAsync(IQueryable`1<TSource> source, TSource item, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions/<ToListAsync>d__64`1")]
[ExtensionAttribute]
public static Task`1<List`1<TSource>> ToListAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions/<ToArrayAsync>d__65`1")]
[ExtensionAttribute]
public static Task`1<TSource[]> ToArrayAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IIncludableQueryable`2<TEntity, TProperty> Include(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, TProperty>> navigationPropertyPath);
    private static MethodInfo GetThenIncludeMethodInfo(Type navType);
    [ExtensionAttribute]
public static IIncludableQueryable`2<TEntity, TProperty> ThenInclude(IIncludableQueryable`2<TEntity, IEnumerable`1<TPreviousProperty>> source, Expression`1<Func`2<TPreviousProperty, TProperty>> navigationPropertyPath);
    [ExtensionAttribute]
public static IIncludableQueryable`2<TEntity, TProperty> ThenInclude(IIncludableQueryable`2<TEntity, TPreviousProperty> source, Expression`1<Func`2<TPreviousProperty, TProperty>> navigationPropertyPath);
    [ExtensionAttribute]
public static IQueryable`1<TEntity> Include(IQueryable`1<TEntity> source, string navigationPropertyPath);
    [ExtensionAttribute]
public static IQueryable`1<TEntity> IgnoreQueryFilters(IQueryable`1<TEntity> source);
    [ExtensionAttribute]
public static IQueryable`1<TEntity> AsNoTracking(IQueryable`1<TEntity> source);
    [ExtensionAttribute]
public static IQueryable`1<TEntity> AsTracking(IQueryable`1<TEntity> source);
    [ExtensionAttribute]
public static IQueryable`1<TEntity> AsTracking(IQueryable`1<TEntity> source, QueryTrackingBehavior track);
    [ExtensionAttribute]
public static IQueryable`1<T> TagWith(IQueryable`1<T> source, string tag);
    [ExtensionAttribute]
public static void Load(IQueryable`1<TSource> source);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions/<LoadAsync>d__86`1")]
[ExtensionAttribute]
public static Task LoadAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, TSource>> ToDictionaryAsync(IQueryable`1<TSource> source, Func`2<TSource, TKey> keySelector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, TSource>> ToDictionaryAsync(IQueryable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(IQueryable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions/<ToDictionaryAsync>d__90`3")]
[ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(IQueryable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions/<ForEachAsync>d__91`1")]
[ExtensionAttribute]
public static Task ForEachAsync(IQueryable`1<T> source, Action`1<T> action, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TSource> AsAsyncEnumerable(IQueryable`1<TSource> source);
    private static TResult ExecuteAsync(MethodInfo operatorMethodInfo, IQueryable`1<TSource> source, Expression expression, CancellationToken cancellationToken);
    private static TResult ExecuteAsync(MethodInfo operatorMethodInfo, IQueryable`1<TSource> source, LambdaExpression expression, CancellationToken cancellationToken);
    private static TResult ExecuteAsync(MethodInfo operatorMethodInfo, IQueryable`1<TSource> source, CancellationToken cancellationToken);
}
public enum Microsoft.EntityFrameworkCore.EntityState : Enum {
    public int value__;
    public static EntityState Detached;
    public static EntityState Unchanged;
    public static EntityState Deleted;
    public static EntityState Modified;
    public static EntityState Added;
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.EntityTypeExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<IEntityType> GetConcreteDerivedTypesInclusive(IEntityType entityType);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static bool IsAbstract(ITypeBase type);
    [ExtensionAttribute]
public static IEntityType GetRootType(IEntityType entityType);
    [ExtensionAttribute]
[ObsoleteAttribute("Use GetRootType")]
public static IEntityType RootType(IEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IEntityType> GetDerivedTypes(IEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IEntityType> GetDerivedTypesInclusive(IEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IEntityType> GetDirectlyDerivedTypes(IEntityType entityType);
    [ExtensionAttribute]
public static bool IsAssignableFrom(IEntityType entityType, IEntityType derivedType);
    [ExtensionAttribute]
public static IEntityType GetClosestCommonParent(IEntityType entityType1, IEntityType entityType2);
    [ExtensionAttribute]
public static bool IsStrictlyDerivedFrom(IEntityType entityType, IEntityType baseType);
    [ExtensionAttribute]
public static IEntityType LeastDerivedType(IEntityType entityType, IEntityType otherEntityType);
    [ExtensionAttribute]
public static IEnumerable`1<IEntityType> GetAllBaseTypesInclusive(IEntityType entityType);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.EntityTypeExtensions/<GetAllBaseTypesInclusiveAscending>d__12")]
[ExtensionAttribute]
public static IEnumerable`1<IEntityType> GetAllBaseTypesInclusiveAscending(IEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IKey> GetDeclaredKeys(IEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IForeignKey> GetDeclaredForeignKeys(IEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IForeignKey> GetDerivedForeignKeys(IEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<INavigation> GetDeclaredNavigations(IEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IProperty> GetDeclaredProperties(IEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IServiceProperty> GetDeclaredServiceProperties(IEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IIndex> GetDeclaredIndexes(IEntityType entityType);
    [ExtensionAttribute]
private static string DisplayNameDefault(ITypeBase type);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static string DisplayName(ITypeBase type);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static string ShortName(ITypeBase type);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static bool HasDefiningNavigation(IEntityType entityType);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static bool IsOwned(IEntityType entityType);
    [ExtensionAttribute]
public static IKey FindKey(IEntityType entityType, IProperty property);
    [ExtensionAttribute]
public static IEnumerable`1<IForeignKey> FindForeignKeys(IEntityType entityType, IProperty property);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.EntityTypeExtensions/<FindForeignKeys>d__27")]
[ExtensionAttribute]
public static IEnumerable`1<IForeignKey> FindForeignKeys(IEntityType entityType, IReadOnlyList`1<IProperty> properties);
    [ExtensionAttribute]
public static IForeignKey FindForeignKey(IEntityType entityType, IProperty property, IKey principalKey, IEntityType principalEntityType);
    [ExtensionAttribute]
public static IEnumerable`1<IForeignKey> GetReferencingForeignKeys(IEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IForeignKey> GetDeclaredReferencingForeignKeys(IEntityType entityType);
    [ExtensionAttribute]
public static IForeignKey FindOwnership(IEntityType entityType);
    [ExtensionAttribute]
public static INavigation FindNavigation(IEntityType entityType, MemberInfo memberInfo);
    [ExtensionAttribute]
public static INavigation FindNavigation(IEntityType entityType, string name);
    [ExtensionAttribute]
public static INavigation FindDeclaredNavigation(IEntityType entityType, string name);
    [ExtensionAttribute]
public static INavigation FindDefiningNavigation(IEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<INavigation> GetNavigations(IEntityType entityType);
    [ExtensionAttribute]
public static IProperty FindProperty(IEntityType entityType, MemberInfo memberInfo);
    [ExtensionAttribute]
public static IReadOnlyList`1<IProperty> FindProperties(IEntityType entityType, IReadOnlyList`1<string> propertyNames);
    [ExtensionAttribute]
public static IProperty FindDeclaredProperty(IEntityType entityType, string name);
    [ExtensionAttribute]
public static IIndex FindIndex(IEntityType entityType, IProperty property);
    [ExtensionAttribute]
public static ChangeTrackingStrategy GetChangeTrackingStrategy(IEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IDictionary`2<string, object>> GetSeedData(IEntityType entityType, bool providerValues);
    [ExtensionAttribute]
public static LambdaExpression GetQueryFilter(IEntityType entityType);
    [ExtensionAttribute]
public static LambdaExpression GetDefiningQuery(IEntityType entityType);
    [ExtensionAttribute]
public static IProperty GetDiscriminatorProperty(IEntityType entityType);
    [ExtensionAttribute]
public static object GetDiscriminatorValue(IEntityType entityType);
}
internal static class Microsoft.EntityFrameworkCore.EnumerableMethods : object {
    [CompilerGeneratedAttribute]
private static MethodInfo <All>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AnyWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AnyWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AsEnumerable>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Cast>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Concat>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Contains>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <CountWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <CountWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <DefaultIfEmptyWithoutArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <DefaultIfEmptyWithArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Distinct>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ElementAt>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ElementAtOrDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Except>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeySelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyElementSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyElementResultSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyResultSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupJoin>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Intersect>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Join>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LongCountWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LongCountWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MaxWithoutSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MaxWithSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MinWithoutSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MinWithSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OfType>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OrderByDescending>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Reverse>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Select>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectWithOrdinal>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectManyWithoutCollectionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectManyWithCollectionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SequenceEqual>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SkipWhile>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Take>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <TakeWhile>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ThenBy>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ThenByDescending>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ToArray>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ToList>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Union>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <SumWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <SumWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <AverageWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <AverageWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MaxWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MaxWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MinWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MinWithSelectorMethods>k__BackingField;
    public static MethodInfo All { get; }
    public static MethodInfo AnyWithoutPredicate { get; }
    public static MethodInfo AnyWithPredicate { get; }
    public static MethodInfo AsEnumerable { get; }
    public static MethodInfo Cast { get; }
    public static MethodInfo Concat { get; }
    public static MethodInfo Contains { get; }
    public static MethodInfo CountWithoutPredicate { get; }
    public static MethodInfo CountWithPredicate { get; }
    public static MethodInfo DefaultIfEmptyWithoutArgument { get; }
    public static MethodInfo DefaultIfEmptyWithArgument { get; }
    public static MethodInfo Distinct { get; }
    public static MethodInfo ElementAt { get; }
    public static MethodInfo ElementAtOrDefault { get; }
    public static MethodInfo Except { get; }
    public static MethodInfo FirstWithoutPredicate { get; }
    public static MethodInfo FirstWithPredicate { get; }
    public static MethodInfo FirstOrDefaultWithoutPredicate { get; }
    public static MethodInfo FirstOrDefaultWithPredicate { get; }
    public static MethodInfo GroupByWithKeySelector { get; }
    public static MethodInfo GroupByWithKeyElementSelector { get; }
    public static MethodInfo GroupByWithKeyElementResultSelector { get; }
    public static MethodInfo GroupByWithKeyResultSelector { get; }
    public static MethodInfo GroupJoin { get; }
    public static MethodInfo Intersect { get; }
    public static MethodInfo Join { get; }
    public static MethodInfo LastWithoutPredicate { get; }
    public static MethodInfo LastWithPredicate { get; }
    public static MethodInfo LastOrDefaultWithoutPredicate { get; }
    public static MethodInfo LastOrDefaultWithPredicate { get; }
    public static MethodInfo LongCountWithoutPredicate { get; }
    public static MethodInfo LongCountWithPredicate { get; }
    public static MethodInfo MaxWithoutSelector { get; }
    public static MethodInfo MaxWithSelector { get; }
    public static MethodInfo MinWithoutSelector { get; }
    public static MethodInfo MinWithSelector { get; }
    public static MethodInfo OfType { get; }
    public static MethodInfo OrderBy { get; }
    public static MethodInfo OrderByDescending { get; }
    public static MethodInfo Reverse { get; }
    public static MethodInfo Select { get; }
    public static MethodInfo SelectWithOrdinal { get; }
    public static MethodInfo SelectManyWithoutCollectionSelector { get; }
    public static MethodInfo SelectManyWithCollectionSelector { get; }
    public static MethodInfo SequenceEqual { get; }
    public static MethodInfo SingleWithoutPredicate { get; }
    public static MethodInfo SingleWithPredicate { get; }
    public static MethodInfo SingleOrDefaultWithoutPredicate { get; }
    public static MethodInfo SingleOrDefaultWithPredicate { get; }
    public static MethodInfo Skip { get; }
    public static MethodInfo SkipWhile { get; }
    public static MethodInfo Take { get; }
    public static MethodInfo TakeWhile { get; }
    public static MethodInfo ThenBy { get; }
    public static MethodInfo ThenByDescending { get; }
    public static MethodInfo ToArray { get; }
    public static MethodInfo ToList { get; }
    public static MethodInfo Union { get; }
    public static MethodInfo Where { get; }
    private static Dictionary`2<Type, MethodInfo> SumWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> SumWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> AverageWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> AverageWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MaxWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MaxWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MinWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MinWithSelectorMethods { get; }
    private static EnumerableMethods();
    [CompilerGeneratedAttribute]
public static MethodInfo get_All();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AnyWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AnyWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AsEnumerable();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Cast();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Concat();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Contains();
    [CompilerGeneratedAttribute]
public static MethodInfo get_CountWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_CountWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_DefaultIfEmptyWithoutArgument();
    [CompilerGeneratedAttribute]
public static MethodInfo get_DefaultIfEmptyWithArgument();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Distinct();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ElementAt();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ElementAtOrDefault();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Except();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeySelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyElementSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyElementResultSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyResultSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupJoin();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Intersect();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Join();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LongCountWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LongCountWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MaxWithoutSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MaxWithSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MinWithoutSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MinWithSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OfType();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OrderBy();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OrderByDescending();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Reverse();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Select();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectWithOrdinal();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectManyWithoutCollectionSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectManyWithCollectionSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SequenceEqual();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Skip();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SkipWhile();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Take();
    [CompilerGeneratedAttribute]
public static MethodInfo get_TakeWhile();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ThenBy();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ThenByDescending();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ToArray();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ToList();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Union();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Where();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_SumWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_SumWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_AverageWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_AverageWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MaxWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MaxWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MinWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MinWithSelectorMethods();
    public static bool IsSumWithoutSelector(MethodInfo methodInfo);
    public static bool IsSumWithSelector(MethodInfo methodInfo);
    public static bool IsAverageWithoutSelector(MethodInfo methodInfo);
    public static bool IsAverageWithSelector(MethodInfo methodInfo);
    public static MethodInfo GetSumWithoutSelector(Type type);
    public static MethodInfo GetSumWithSelector(Type type);
    public static MethodInfo GetAverageWithoutSelector(Type type);
    public static MethodInfo GetAverageWithSelector(Type type);
    public static MethodInfo GetMaxWithoutSelector(Type type);
    public static MethodInfo GetMaxWithSelector(Type type);
    public static MethodInfo GetMinWithoutSelector(Type type);
    public static MethodInfo GetMinWithSelector(Type type);
    [CompilerGeneratedAttribute]
internal static MethodInfo <.cctor>g__GetMethod|213_62(string name, int genericParameterCount, Func`2<Type[], Type[]> parameterGenerator, <>c__DisplayClass213_0& );
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions : object {
    [ExtensionAttribute]
public static void Execute(IExecutionStrategy strategy, Action operation);
    [ExtensionAttribute]
public static TResult Execute(IExecutionStrategy strategy, Func`1<TResult> operation);
    [ExtensionAttribute]
public static void Execute(IExecutionStrategy strategy, TState state, Action`1<TState> operation);
    [ExtensionAttribute]
public static Task ExecuteAsync(IExecutionStrategy strategy, Func`1<Task> operation);
    [ExtensionAttribute]
public static Task ExecuteAsync(IExecutionStrategy strategy, Func`2<CancellationToken, Task> operation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> ExecuteAsync(IExecutionStrategy strategy, Func`1<Task`1<TResult>> operation);
    [ExtensionAttribute]
public static Task`1<TResult> ExecuteAsync(IExecutionStrategy strategy, Func`2<CancellationToken, Task`1<TResult>> operation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ExecuteAsync(IExecutionStrategy strategy, TState state, Func`2<TState, Task> operation);
    [ExtensionAttribute]
public static Task ExecuteAsync(IExecutionStrategy strategy, TState state, Func`3<TState, CancellationToken, Task> operation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> ExecuteAsync(IExecutionStrategy strategy, TState state, Func`2<TState, Task`1<TResult>> operation);
    [ExtensionAttribute]
public static TResult Execute(IExecutionStrategy strategy, TState state, Func`2<TState, TResult> operation);
    [ExtensionAttribute]
public static Task`1<TResult> ExecuteAsync(IExecutionStrategy strategy, TState state, Func`3<TState, CancellationToken, Task`1<TResult>> operation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TResult Execute(IExecutionStrategy strategy, TState state, Func`2<TState, TResult> operation, Func`2<TState, ExecutionResult`1<TResult>> verifySucceeded);
    [ExtensionAttribute]
[ObsoleteAttribute("Use overload that takes the state first")]
public static TResult Execute(IExecutionStrategy strategy, Func`2<TState, TResult> operation, Func`2<TState, ExecutionResult`1<TResult>> verifySucceeded, TState state);
    [ExtensionAttribute]
public static Task`1<TResult> ExecuteAsync(IExecutionStrategy strategy, TState state, Func`3<TState, CancellationToken, Task`1<TResult>> operation, Func`3<TState, CancellationToken, Task`1<ExecutionResult`1<TResult>>> verifySucceeded, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void ExecuteInTransaction(IExecutionStrategy strategy, Action operation, Func`1<bool> verifySucceeded);
    [ExtensionAttribute]
public static Task ExecuteInTransactionAsync(IExecutionStrategy strategy, Func`1<Task> operation, Func`1<Task`1<bool>> verifySucceeded);
    [ExtensionAttribute]
public static Task ExecuteInTransactionAsync(IExecutionStrategy strategy, Func`2<CancellationToken, Task> operation, Func`2<CancellationToken, Task`1<bool>> verifySucceeded, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TResult ExecuteInTransaction(IExecutionStrategy strategy, Func`1<TResult> operation, Func`1<bool> verifySucceeded);
    [ExtensionAttribute]
public static Task`1<TResult> ExecuteInTransactionAsync(IExecutionStrategy strategy, Func`2<CancellationToken, Task`1<TResult>> operation, Func`2<CancellationToken, Task`1<bool>> verifySucceeded, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void ExecuteInTransaction(IExecutionStrategy strategy, TState state, Action`1<TState> operation, Func`2<TState, bool> verifySucceeded);
    [ExtensionAttribute]
public static Task ExecuteInTransactionAsync(IExecutionStrategy strategy, TState state, Func`3<TState, CancellationToken, Task> operation, Func`3<TState, CancellationToken, Task`1<bool>> verifySucceeded, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TResult ExecuteInTransaction(IExecutionStrategy strategy, TState state, Func`2<TState, TResult> operation, Func`2<TState, bool> verifySucceeded);
    [ExtensionAttribute]
public static Task`1<TResult> ExecuteInTransactionAsync(IExecutionStrategy strategy, TState state, Func`3<TState, CancellationToken, Task`1<TResult>> operation, Func`3<TState, CancellationToken, Task`1<bool>> verifySucceeded, CancellationToken cancellationToken);
    public static TResult ExecuteInTransaction(IExecutionStrategy strategy, TState state, Func`2<TState, TResult> operation, Func`2<TState, bool> verifySucceeded, Func`2<DbContext, IDbContextTransaction> beginTransaction);
    public static Task`1<TResult> ExecuteInTransactionAsync(IExecutionStrategy strategy, TState state, Func`3<TState, CancellationToken, Task`1<TResult>> operation, Func`3<TState, CancellationToken, Task`1<bool>> verifySucceeded, Func`3<DbContext, CancellationToken, Task`1<IDbContextTransaction>> beginTransaction, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.ForeignKeyExtensions : object {
    [ExtensionAttribute]
public static IEntityType GetRelatedEntityType(IForeignKey foreignKey, IEntityType entityType);
    [ExtensionAttribute]
public static INavigation GetNavigation(IForeignKey foreignKey, bool pointsToPrincipal);
}
public interface Microsoft.EntityFrameworkCore.IEntityTypeConfiguration`1 {
    public abstract virtual void Configure(EntityTypeBuilder`1<TEntity> builder);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions : object {
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static TService GetService(IInfrastructure`1<IServiceProvider> accessor);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static T GetInfrastructure(IInfrastructure`1<T> accessor);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.Infrastructure.Annotatable : object {
    private SortedDictionary`2<string, Annotation> _annotations;
    public object Item { get; public set; }
    public virtual IEnumerable`1<Annotation> GetAnnotations();
    public virtual Annotation AddAnnotation(string name, object value);
    protected virtual Annotation AddAnnotation(string name, Annotation annotation);
    public virtual void SetAnnotation(string name, object value);
    protected virtual Annotation SetAnnotation(string name, Annotation annotation, Annotation oldAnnotation);
    protected virtual Annotation OnAnnotationSet(string name, Annotation annotation, Annotation oldAnnotation);
    public virtual Annotation FindAnnotation(string name);
    public virtual Annotation RemoveAnnotation(string name);
    public virtual object get_Item(string name);
    public virtual void set_Item(string name, object value);
    protected virtual Annotation CreateAnnotation(string name, object value);
    private sealed virtual override IEnumerable`1<IAnnotation> Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable.GetAnnotations();
    private sealed virtual override IAnnotation Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable.FindAnnotation(string name);
    private sealed virtual override IAnnotation Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable.AddAnnotation(string name, object value);
    private sealed virtual override IAnnotation Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable.RemoveAnnotation(string name);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Infrastructure.AnnotatableExtensions : object {
    [ExtensionAttribute]
public static IAnnotation GetAnnotation(IAnnotatable annotatable, string annotationName);
}
public class Microsoft.EntityFrameworkCore.Infrastructure.Annotation : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string Name { get; }
    public object Value { get; }
    public Annotation(string name, object value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual object get_Value();
}
public class Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension : object {
    private IServiceProvider _internalServiceProvider;
    private IServiceProvider _applicationServiceProvider;
    private IModel _model;
    private ILoggerFactory _loggerFactory;
    private IMemoryCache _memoryCache;
    private bool _sensitiveDataLoggingEnabled;
    private bool _detailedErrorsEnabled;
    private QueryTrackingBehavior _queryTrackingBehavior;
    private IDictionary`2<Type, Type> _replacedServices;
    private Nullable`1<int> _maxPoolSize;
    private bool _serviceProviderCachingEnabled;
    private DbContextOptionsExtensionInfo _info;
    private IEnumerable`1<IInterceptor> _interceptors;
    private WarningsConfiguration _warningsConfiguration;
    public DbContextOptionsExtensionInfo Info { get; }
    public bool IsSensitiveDataLoggingEnabled { get; }
    public bool DetailedErrorsEnabled { get; }
    public IModel Model { get; }
    public ILoggerFactory LoggerFactory { get; }
    public IMemoryCache MemoryCache { get; }
    public IServiceProvider InternalServiceProvider { get; }
    public IServiceProvider ApplicationServiceProvider { get; }
    public WarningsConfiguration WarningsConfiguration { get; }
    public QueryTrackingBehavior QueryTrackingBehavior { get; }
    public bool ServiceProviderCachingEnabled { get; }
    public IReadOnlyDictionary`2<Type, Type> ReplacedServices { get; }
    public Nullable`1<int> MaxPoolSize { get; }
    public IEnumerable`1<IInterceptor> Interceptors { get; }
    protected CoreOptionsExtension(CoreOptionsExtension copyFrom);
    public virtual DbContextOptionsExtensionInfo get_Info();
    protected virtual CoreOptionsExtension Clone();
    public virtual CoreOptionsExtension WithInternalServiceProvider(IServiceProvider internalServiceProvider);
    public virtual CoreOptionsExtension WithApplicationServiceProvider(IServiceProvider applicationServiceProvider);
    public virtual CoreOptionsExtension WithModel(IModel model);
    public virtual CoreOptionsExtension WithMemoryCache(IMemoryCache memoryCache);
    public virtual CoreOptionsExtension WithLoggerFactory(ILoggerFactory loggerFactory);
    public virtual CoreOptionsExtension WithSensitiveDataLoggingEnabled(bool sensitiveDataLoggingEnabled);
    public virtual CoreOptionsExtension WithDetailedErrorsEnabled(bool detailedErrorsEnabled);
    public virtual CoreOptionsExtension WithQueryTrackingBehavior(QueryTrackingBehavior queryTrackingBehavior);
    public virtual CoreOptionsExtension WithReplacedService(Type serviceType, Type implementationType);
    public virtual CoreOptionsExtension WithMaxPoolSize(Nullable`1<int> maxPoolSize);
    public virtual CoreOptionsExtension WithWarningsConfiguration(WarningsConfiguration warningsConfiguration);
    public virtual CoreOptionsExtension WithServiceProviderCachingEnabled(bool serviceProviderCachingEnabled);
    public virtual CoreOptionsExtension WithInterceptors(IEnumerable`1<IInterceptor> interceptors);
    public virtual bool get_IsSensitiveDataLoggingEnabled();
    public virtual bool get_DetailedErrorsEnabled();
    public virtual IModel get_Model();
    public virtual ILoggerFactory get_LoggerFactory();
    public virtual IMemoryCache get_MemoryCache();
    public virtual IServiceProvider get_InternalServiceProvider();
    public virtual IServiceProvider get_ApplicationServiceProvider();
    public virtual WarningsConfiguration get_WarningsConfiguration();
    public virtual QueryTrackingBehavior get_QueryTrackingBehavior();
    public virtual bool get_ServiceProviderCachingEnabled();
    public virtual IReadOnlyDictionary`2<Type, Type> get_ReplacedServices();
    public virtual Nullable`1<int> get_MaxPoolSize();
    public virtual IEnumerable`1<IInterceptor> get_Interceptors();
    public virtual void ApplyServices(IServiceCollection services);
    private IMemoryCache GetMemoryCache();
    public virtual void Validate(IDbContextOptions options);
}
public class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade : object {
    private DbContext _context;
    private IDatabaseFacadeDependencies _dependencies;
    [CompilerGeneratedAttribute]
private bool <AutoTransactionsEnabled>k__BackingField;
    private IDatabaseFacadeDependencies Dependencies { get; }
    public IDbContextTransaction CurrentTransaction { get; }
    public bool AutoTransactionsEnabled { get; public set; }
    public string ProviderName { get; }
    private IServiceProvider Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.Instance { get; }
    private IDatabaseFacadeDependencies Microsoft.EntityFrameworkCore.Internal.IDatabaseFacadeDependenciesAccessor.Dependencies { get; }
    private DbContext Microsoft.EntityFrameworkCore.Internal.IDatabaseFacadeDependenciesAccessor.Context { get; }
    public DatabaseFacade(DbContext context);
    private IDatabaseFacadeDependencies get_Dependencies();
    public virtual bool EnsureCreated();
    public virtual Task`1<bool> EnsureCreatedAsync(CancellationToken cancellationToken);
    public virtual bool EnsureDeleted();
    public virtual Task`1<bool> EnsureDeletedAsync(CancellationToken cancellationToken);
    public virtual bool CanConnect();
    public virtual Task`1<bool> CanConnectAsync(CancellationToken cancellationToken);
    public virtual IDbContextTransaction BeginTransaction();
    public virtual Task`1<IDbContextTransaction> BeginTransactionAsync(CancellationToken cancellationToken);
    public virtual void CommitTransaction();
    public virtual void RollbackTransaction();
    public virtual IExecutionStrategy CreateExecutionStrategy();
    public virtual IDbContextTransaction get_CurrentTransaction();
    [CompilerGeneratedAttribute]
public virtual bool get_AutoTransactionsEnabled();
    [CompilerGeneratedAttribute]
public virtual void set_AutoTransactionsEnabled(bool value);
    public virtual string get_ProviderName();
    private sealed virtual override IServiceProvider Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.get_Instance();
    private sealed virtual override IDatabaseFacadeDependencies Microsoft.EntityFrameworkCore.Internal.IDatabaseFacadeDependenciesAccessor.get_Dependencies();
    private sealed virtual override DbContext Microsoft.EntityFrameworkCore.Internal.IDatabaseFacadeDependenciesAccessor.get_Context();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[AttributeUsageAttribute("4")]
public class Microsoft.EntityFrameworkCore.Infrastructure.DbContextAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ContextType>k__BackingField;
    public Type ContextType { get; }
    public DbContextAttribute(Type contextType);
    [CompilerGeneratedAttribute]
public Type get_ContextType();
}
public abstract class Microsoft.EntityFrameworkCore.Infrastructure.DbContextOptionsExtensionInfo : object {
    [CompilerGeneratedAttribute]
private IDbContextOptionsExtension <Extension>k__BackingField;
    public IDbContextOptionsExtension Extension { get; }
    public bool IsDatabaseProvider { get; }
    public string LogFragment { get; }
    protected DbContextOptionsExtensionInfo(IDbContextOptionsExtension extension);
    [CompilerGeneratedAttribute]
public virtual IDbContextOptionsExtension get_Extension();
    public abstract virtual bool get_IsDatabaseProvider();
    public abstract virtual string get_LogFragment();
    public abstract virtual long GetServiceProviderHashCode();
    public abstract virtual void PopulateDebugInfo(IDictionary`2<string, string> debugInfo);
}
[AttributeUsageAttribute("6140")]
public class Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternalAttribute : Attribute {
}
public class Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder : object {
    [EntityFrameworkInternalAttribute]
public static IDictionary`2<Type, ServiceCharacteristics> CoreServices;
    [CompilerGeneratedAttribute]
private ServiceCollectionMap <ServiceCollectionMap>k__BackingField;
    protected ServiceCollectionMap ServiceCollectionMap { get; }
    public EntityFrameworkServicesBuilder(IServiceCollection serviceCollection);
    private static EntityFrameworkServicesBuilder();
    [CompilerGeneratedAttribute]
protected virtual ServiceCollectionMap get_ServiceCollectionMap();
    [EntityFrameworkInternalAttribute]
protected virtual ServiceCharacteristics GetServiceCharacteristics(Type serviceType);
    public virtual EntityFrameworkServicesBuilder TryAddProviderSpecificServices(Action`1<ServiceCollectionMap> serviceMap);
    public virtual EntityFrameworkServicesBuilder TryAddCoreServices();
    private static IDbContextServices GetContextServices(IServiceProvider serviceProvider);
    public virtual EntityFrameworkServicesBuilder TryAdd();
    public virtual EntityFrameworkServicesBuilder TryAdd(Type serviceType, Type implementationType);
    public virtual EntityFrameworkServicesBuilder TryAdd(Func`2<IServiceProvider, TService> factory);
    public virtual EntityFrameworkServicesBuilder TryAdd(Func`2<IServiceProvider, TImplementation> factory);
    public virtual EntityFrameworkServicesBuilder TryAdd(Type serviceType, Type implementationType, Func`2<IServiceProvider, object> factory);
    public virtual EntityFrameworkServicesBuilder TryAdd(TService implementation);
    public virtual EntityFrameworkServicesBuilder TryAdd(Type serviceType, object implementation);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions : object {
    private static Type _assignBinaryExpressionType;
    private static MethodInfo _fieldInfoSetValueMethod;
    private static ExpressionExtensions();
    [ExtensionAttribute]
public static string Print(Expression expression, Nullable`1<int> characterLimit);
    [ExtensionAttribute]
public static MemberExpression MakeMemberAccess(Expression expression, MemberInfo member);
    [ExtensionAttribute]
public static Expression Assign(MemberExpression memberExpression, Expression valueExpression);
    [ExtensionAttribute]
public static bool TryGetEFPropertyArguments(MethodCallExpression methodCallExpression, Expression& entityExpression, String& propertyName);
    [ExtensionAttribute]
public static PropertyInfo GetPropertyAccess(LambdaExpression propertyAccessExpression);
    [ExtensionAttribute]
public static IReadOnlyList`1<PropertyInfo> GetPropertyAccessList(LambdaExpression propertyAccessExpression);
    [ExtensionAttribute]
[ObsoleteAttribute("Unwrap each convert manually by evaluating how they are used.")]
public static Expression RemoveConvert(Expression expression);
}
[DefaultMemberAttribute("Item")]
public interface Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable {
    public object Item { get; }
    public abstract virtual object get_Item(string name);
    public abstract virtual IAnnotation FindAnnotation(string name);
    public abstract virtual IEnumerable`1<IAnnotation> GetAnnotations();
}
public interface Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation {
    public string Name { get; }
    public object Value { get; }
    public abstract virtual string get_Name();
    public abstract virtual object get_Value();
}
public interface Microsoft.EntityFrameworkCore.Infrastructure.IConcurrencyDetector {
    public abstract virtual IDisposable EnterCriticalSection();
}
public interface Microsoft.EntityFrameworkCore.Infrastructure.ICoreSingletonOptions {
    public bool AreDetailedErrorsEnabled { get; }
    public abstract virtual bool get_AreDetailedErrorsEnabled();
}
public interface Microsoft.EntityFrameworkCore.Infrastructure.ICurrentDbContext {
    public DbContext Context { get; }
    public abstract virtual DbContext get_Context();
}
public interface Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions {
    public IEnumerable`1<IDbContextOptionsExtension> Extensions { get; }
    public abstract virtual IEnumerable`1<IDbContextOptionsExtension> get_Extensions();
    public abstract virtual TExtension FindExtension();
}
public interface Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsBuilderInfrastructure {
    public abstract virtual void AddOrUpdateExtension(TExtension extension);
}
public interface Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension {
    public DbContextOptionsExtensionInfo Info { get; }
    public abstract virtual DbContextOptionsExtensionInfo get_Info();
    public abstract virtual void ApplyServices(IServiceCollection services);
    public abstract virtual void Validate(IDbContextOptions options);
}
public interface Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1 {
    public T Instance { get; }
    public abstract virtual T get_Instance();
}
public interface Microsoft.EntityFrameworkCore.Infrastructure.IModelCacheKeyFactory {
    public abstract virtual object Create(DbContext context);
}
public interface Microsoft.EntityFrameworkCore.Infrastructure.IModelCustomizer {
    public abstract virtual void Customize(ModelBuilder modelBuilder, DbContext context);
}
public interface Microsoft.EntityFrameworkCore.Infrastructure.IModelSource {
    public abstract virtual IModel GetModel(DbContext context, IConventionSetBuilder conventionSetBuilder);
}
public interface Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator {
    public abstract virtual void Validate(IModel model, IDiagnosticsLogger`1<Validation> logger);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Infrastructure.Internal.AnnotatableExtensions : object {
    [ExtensionAttribute]
public static string AnnotationsToDebugString(IAnnotatable annotatable, string indent);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Infrastructure.Internal.DbContextOptionsExtensions : object {
    [ExtensionAttribute]
public static string BuildOptionsFragment(IDbContextOptions contextOptions);
}
public static class Microsoft.EntityFrameworkCore.Infrastructure.Internal.InfrastructureExtensions : object {
    public static TService GetService(IInfrastructure`1<IServiceProvider> accessor);
}
public interface Microsoft.EntityFrameworkCore.Infrastructure.IResettableService {
    public abstract virtual void ResetState();
    public abstract virtual Task ResetStateAsync(CancellationToken cancellationToken);
}
public interface Microsoft.EntityFrameworkCore.Infrastructure.ISingletonOptions {
    public abstract virtual void Initialize(IDbContextOptions options);
    public abstract virtual void Validate(IDbContextOptions options);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Infrastructure.MethodInfoExtensions : object {
    private static string _efTypeName;
    private static MethodInfoExtensions();
    [ExtensionAttribute]
public static bool IsEFPropertyMethod(MethodInfo methodInfo);
}
public class Microsoft.EntityFrameworkCore.Infrastructure.ModelCacheKey : object {
    private Type _dbContextType;
    public ModelCacheKey(DbContext context);
    protected virtual bool Equals(ModelCacheKey other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Infrastructure.ModelCacheKeyFactory : object {
    public ModelCacheKeyFactory(ModelCacheKeyFactoryDependencies dependencies);
    public virtual object Create(DbContext context);
}
public class Microsoft.EntityFrameworkCore.Infrastructure.ModelCacheKeyFactoryDependencies : object {
}
public class Microsoft.EntityFrameworkCore.Infrastructure.ModelCustomizer : object {
    [CompilerGeneratedAttribute]
private ModelCustomizerDependencies <Dependencies>k__BackingField;
    protected ModelCustomizerDependencies Dependencies { get; }
    public ModelCustomizer(ModelCustomizerDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ModelCustomizerDependencies get_Dependencies();
    public virtual void Customize(ModelBuilder modelBuilder, DbContext context);
}
public class Microsoft.EntityFrameworkCore.Infrastructure.ModelCustomizerDependencies : object {
    [CompilerGeneratedAttribute]
private IDbSetFinder <SetFinder>k__BackingField;
    public IDbSetFinder SetFinder { get; }
    [EntityFrameworkInternalAttribute]
public ModelCustomizerDependencies(IDbSetFinder setFinder);
    [CompilerGeneratedAttribute]
public IDbSetFinder get_SetFinder();
    public ModelCustomizerDependencies With(IDbSetFinder setFinder);
}
public class Microsoft.EntityFrameworkCore.Infrastructure.ModelSource : object {
    private object _syncObject;
    [CompilerGeneratedAttribute]
private ModelSourceDependencies <Dependencies>k__BackingField;
    protected ModelSourceDependencies Dependencies { get; }
    public ModelSource(ModelSourceDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ModelSourceDependencies get_Dependencies();
    public virtual IModel GetModel(DbContext context, IConventionSetBuilder conventionSetBuilder);
    protected virtual IModel CreateModel(DbContext context, IConventionSetBuilder conventionSetBuilder);
}
public class Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies : object {
    [CompilerGeneratedAttribute]
private IModelCustomizer <ModelCustomizer>k__BackingField;
    [CompilerGeneratedAttribute]
private IModelCacheKeyFactory <ModelCacheKeyFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IMemoryCache <MemoryCache>k__BackingField;
    public IModelCustomizer ModelCustomizer { get; }
    public IModelCacheKeyFactory ModelCacheKeyFactory { get; }
    public IMemoryCache MemoryCache { get; }
    [EntityFrameworkInternalAttribute]
public ModelSourceDependencies(IModelCustomizer modelCustomizer, IModelCacheKeyFactory modelCacheKeyFactory, IMemoryCache memoryCache);
    [CompilerGeneratedAttribute]
public IModelCustomizer get_ModelCustomizer();
    [CompilerGeneratedAttribute]
public IModelCacheKeyFactory get_ModelCacheKeyFactory();
    [CompilerGeneratedAttribute]
public IMemoryCache get_MemoryCache();
    public ModelSourceDependencies With(IModelCustomizer modelCustomizer);
    public ModelSourceDependencies With(IModelCacheKeyFactory modelCacheKeyFactory);
    public ModelSourceDependencies With(IMemoryCache memoryCache);
}
public class Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator : object {
    [CompilerGeneratedAttribute]
private ModelValidatorDependencies <Dependencies>k__BackingField;
    protected ModelValidatorDependencies Dependencies { get; }
    public ModelValidator(ModelValidatorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ModelValidatorDependencies get_Dependencies();
    public virtual void Validate(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateRelationships(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidatePropertyMapping(IModel model, IDiagnosticsLogger`1<Validation> logger);
    private Type FindCandidateNavigationPropertyType(PropertyInfo propertyInfo);
    protected virtual void ValidateIgnoredMembers(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateNoShadowEntities(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateNoShadowKeys(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateNoMutableKeys(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateNoCycles(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateNonNullPrimaryKeys(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateClrInheritance(IModel model, IDiagnosticsLogger`1<Validation> logger);
    private void ValidateClrInheritance(IModel model, IEntityType entityType, HashSet`1<IEntityType> validEntityTypes);
    protected virtual void ValidateDiscriminatorValues(IModel model, IDiagnosticsLogger`1<Validation> logger);
    private static void ValidateDiscriminatorValues(IEntityType rootEntityType);
    protected virtual void ValidateChangeTrackingStrategy(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateOwnership(IModel model, IDiagnosticsLogger`1<Validation> logger);
    private bool Contains(IForeignKey inheritedFk, IForeignKey derivedFk);
    protected virtual void ValidateForeignKeys(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateDefiningNavigations(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateFieldMapping(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateTypeMappings(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateKeylessTypes(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateQueryFilters(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateDefiningQuery(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateData(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void LogShadowProperties(IModel model, IDiagnosticsLogger`1<Validation> logger);
    [CompilerGeneratedAttribute]
private bool <ValidateOwnership>b__19_1(IForeignKey fk);
    [CompilerGeneratedAttribute]
private bool <ValidateOwnership>b__19_2(IForeignKey fk);
}
public class Microsoft.EntityFrameworkCore.Infrastructure.ModelValidatorDependencies : object {
    [CompilerGeneratedAttribute]
private ITypeMappingSource <TypeMappingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IMemberClassifier <MemberClassifier>k__BackingField;
    public ITypeMappingSource TypeMappingSource { get; }
    public IMemberClassifier MemberClassifier { get; }
    [EntityFrameworkInternalAttribute]
public ModelValidatorDependencies(ITypeMappingSource typeMappingSource, IMemberClassifier memberClassifier);
    [CompilerGeneratedAttribute]
public ITypeMappingSource get_TypeMappingSource();
    [CompilerGeneratedAttribute]
public IMemberClassifier get_MemberClassifier();
    public ModelValidatorDependencies With(ITypeMappingSource typeMappingSource);
    public ModelValidatorDependencies With(IMemberClassifier memberClassifier);
}
public static class Microsoft.EntityFrameworkCore.Infrastructure.ProductInfo : object {
    public static string GetVersion();
}
public class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap : object {
    private InternalServiceCollectionMap _map;
    public IServiceCollection ServiceCollection { get; }
    private InternalServiceCollectionMap Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Internal.InternalServiceCollectionMap>.Instance { get; }
    public ServiceCollectionMap(IServiceCollection serviceCollection);
    public virtual IServiceCollection get_ServiceCollection();
    public virtual ServiceCollectionMap TryAddTransient();
    public virtual ServiceCollectionMap TryAddScoped();
    public virtual ServiceCollectionMap TryAddSingleton();
    public virtual ServiceCollectionMap TryAddTransient(Type serviceType, Type implementationType);
    public virtual ServiceCollectionMap TryAddScoped(Type serviceType, Type implementationType);
    public virtual ServiceCollectionMap TryAddSingleton(Type serviceType, Type implementationType);
    public virtual ServiceCollectionMap TryAdd(Type serviceType, Type implementationType, ServiceLifetime lifetime);
    public virtual ServiceCollectionMap TryAddTransient(Func`2<IServiceProvider, TService> factory);
    public virtual ServiceCollectionMap TryAddScoped(Func`2<IServiceProvider, TService> factory);
    public virtual ServiceCollectionMap TryAddSingleton(Func`2<IServiceProvider, TService> factory);
    public virtual ServiceCollectionMap TryAddTransient(Func`2<IServiceProvider, TImplementation> factory);
    public virtual ServiceCollectionMap TryAddScoped(Func`2<IServiceProvider, TImplementation> factory);
    public virtual ServiceCollectionMap TryAddSingleton(Func`2<IServiceProvider, TImplementation> factory);
    public virtual ServiceCollectionMap TryAddTransient(Type serviceType, Func`2<IServiceProvider, object> factory);
    public virtual ServiceCollectionMap TryAddScoped(Type serviceType, Func`2<IServiceProvider, object> factory);
    public virtual ServiceCollectionMap TryAddSingleton(Type serviceType, Func`2<IServiceProvider, object> factory);
    public virtual ServiceCollectionMap TryAdd(Type serviceType, Func`2<IServiceProvider, object> factory, ServiceLifetime lifetime);
    public virtual ServiceCollectionMap TryAddSingleton(TService implementation);
    public virtual ServiceCollectionMap TryAddSingleton(Type serviceType, object implementation);
    public virtual ServiceCollectionMap TryAddTransientEnumerable();
    public virtual ServiceCollectionMap TryAddScopedEnumerable();
    public virtual ServiceCollectionMap TryAddSingletonEnumerable();
    public virtual ServiceCollectionMap TryAddTransientEnumerable(Type serviceType, Type implementationType);
    public virtual ServiceCollectionMap TryAddScopedEnumerable(Type serviceType, Type implementationType);
    public virtual ServiceCollectionMap TryAddSingletonEnumerable(Type serviceType, Type implementationType);
    public virtual ServiceCollectionMap TryAddEnumerable(Type serviceType, Type implementationType, ServiceLifetime lifetime);
    public virtual ServiceCollectionMap TryAddTransientEnumerable(Func`2<IServiceProvider, TImplementation> factory);
    public virtual ServiceCollectionMap TryAddScopedEnumerable(Func`2<IServiceProvider, TImplementation> factory);
    public virtual ServiceCollectionMap TryAddSingletonEnumerable(Func`2<IServiceProvider, TImplementation> factory);
    public virtual ServiceCollectionMap TryAddEnumerable(Type serviceType, Type implementationType, Func`2<IServiceProvider, object> factory, ServiceLifetime lifetime);
    public virtual ServiceCollectionMap TryAddSingletonEnumerable(TService implementation);
    public virtual ServiceCollectionMap TryAddSingletonEnumerable(Type serviceType, object implementation);
    private static Type TryGetImplementationType(ServiceDescriptor descriptor);
    private sealed virtual override InternalServiceCollectionMap Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Internal.InternalServiceCollectionMap>.get_Instance();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Infrastructure.TypeExtensions : object {
    [ExtensionAttribute]
public static string ShortDisplayName(Type type);
}
public static class Microsoft.EntityFrameworkCore.Infrastructure.Uniquifier : object {
    public static string Uniquify(string currentIdentifier, IReadOnlyDictionary`2<string, T> otherIdentifiers, int maxLength);
    public static string Uniquify(string currentIdentifier, IReadOnlyDictionary`2<TKey, TValue> otherIdentifiers, Func`2<string, TKey> keySelector, int maxLength);
    public static string Truncate(string identifier, int maxLength, Nullable`1<int> uniquifier);
    private static int GetLength(Nullable`1<int> number);
}
public class Microsoft.EntityFrameworkCore.Internal.AsyncLock : object {
    private SemaphoreSlim _semaphore;
    private Releaser _releaser;
    private Task`1<Releaser> _releaserTask;
    public Task`1<Releaser> LockAsync(CancellationToken cancellationToken);
    public Releaser Lock();
}
public class Microsoft.EntityFrameworkCore.Internal.ConcurrencyDetector : object {
    private IDisposable _disposer;
    private int _inCriticalSection;
    private static AsyncLocal`1<bool> _threadHasLock;
    private int _refCount;
    private static ConcurrencyDetector();
    public virtual IDisposable EnterCriticalSection();
    private void ExitCriticalSection();
}
public class Microsoft.EntityFrameworkCore.Internal.CoreSingletonOptions : object {
    [CompilerGeneratedAttribute]
private bool <AreDetailedErrorsEnabled>k__BackingField;
    public bool AreDetailedErrorsEnabled { get; private set; }
    public virtual void Initialize(IDbContextOptions options);
    public virtual void Validate(IDbContextOptions options);
    [CompilerGeneratedAttribute]
public virtual bool get_AreDetailedErrorsEnabled();
    [CompilerGeneratedAttribute]
private void set_AreDetailedErrorsEnabled(bool value);
}
public class Microsoft.EntityFrameworkCore.Internal.CurrentDbContext : object {
    [CompilerGeneratedAttribute]
private DbContext <Context>k__BackingField;
    public DbContext Context { get; }
    public CurrentDbContext(DbContext context);
    [CompilerGeneratedAttribute]
public sealed virtual DbContext get_Context();
}
public class Microsoft.EntityFrameworkCore.Internal.DatabaseFacadeDependencies : object {
    [CompilerGeneratedAttribute]
private IDbContextTransactionManager <TransactionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IDatabaseCreator <DatabaseCreator>k__BackingField;
    [CompilerGeneratedAttribute]
private IExecutionStrategyFactory <ExecutionStrategyFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDatabaseProvider> <DatabaseProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Command> <CommandLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private IConcurrencyDetector <ConcurrencyDetector>k__BackingField;
    public IDbContextTransactionManager TransactionManager { get; }
    public IDatabaseCreator DatabaseCreator { get; }
    public IExecutionStrategyFactory ExecutionStrategyFactory { get; }
    public IEnumerable`1<IDatabaseProvider> DatabaseProviders { get; }
    public IDiagnosticsLogger`1<Command> CommandLogger { get; }
    public IConcurrencyDetector ConcurrencyDetector { get; }
    public DbContext Context { get; }
    public DatabaseFacadeDependencies(IDbContextTransactionManager transactionManager, IDatabaseCreator databaseCreator, IExecutionStrategyFactory executionStrategyFactory, IEnumerable`1<IDatabaseProvider> databaseProviders, IDiagnosticsLogger`1<Command> commandLogger, IConcurrencyDetector concurrencyDetector);
    [CompilerGeneratedAttribute]
public virtual IDbContextTransactionManager get_TransactionManager();
    [CompilerGeneratedAttribute]
public virtual IDatabaseCreator get_DatabaseCreator();
    [CompilerGeneratedAttribute]
public virtual IExecutionStrategyFactory get_ExecutionStrategyFactory();
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<IDatabaseProvider> get_DatabaseProviders();
    [CompilerGeneratedAttribute]
public virtual IDiagnosticsLogger`1<Command> get_CommandLogger();
    [CompilerGeneratedAttribute]
public virtual IConcurrencyDetector get_ConcurrencyDetector();
    public virtual DbContext get_Context();
}
public class Microsoft.EntityFrameworkCore.Internal.DbContextDependencies : object {
    [CompilerGeneratedAttribute]
private IModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbSetSource <SetSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityFinderFactory <EntityFinderFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IAsyncQueryProvider <QueryProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IStateManager <StateManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IChangeDetector <ChangeDetector>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityGraphAttacher <EntityGraphAttacher>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Update> <UpdateLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Infrastructure> <InfrastructureLogger>k__BackingField;
    public IModel Model { get; }
    public IDbSetSource SetSource { get; }
    public IEntityFinderFactory EntityFinderFactory { get; }
    public IAsyncQueryProvider QueryProvider { get; }
    public IStateManager StateManager { get; }
    public IChangeDetector ChangeDetector { get; }
    public IEntityGraphAttacher EntityGraphAttacher { get; }
    public IDiagnosticsLogger`1<Update> UpdateLogger { get; }
    public IDiagnosticsLogger`1<Infrastructure> InfrastructureLogger { get; }
    public DbContextDependencies(ICurrentDbContext currentContext, IChangeDetector changeDetector, IDbSetSource setSource, IEntityFinderSource entityFinderSource, IEntityGraphAttacher entityGraphAttacher, IModel model, IAsyncQueryProvider queryProvider, IStateManager stateManager, IDiagnosticsLogger`1<Update> updateLogger, IDiagnosticsLogger`1<Infrastructure> infrastructureLogger);
    [CompilerGeneratedAttribute]
public sealed virtual IModel get_Model();
    [CompilerGeneratedAttribute]
public sealed virtual IDbSetSource get_SetSource();
    [CompilerGeneratedAttribute]
public sealed virtual IEntityFinderFactory get_EntityFinderFactory();
    [CompilerGeneratedAttribute]
public sealed virtual IAsyncQueryProvider get_QueryProvider();
    [CompilerGeneratedAttribute]
public sealed virtual IStateManager get_StateManager();
    [CompilerGeneratedAttribute]
public sealed virtual IChangeDetector get_ChangeDetector();
    [CompilerGeneratedAttribute]
public sealed virtual IEntityGraphAttacher get_EntityGraphAttacher();
    [CompilerGeneratedAttribute]
public sealed virtual IDiagnosticsLogger`1<Update> get_UpdateLogger();
    [CompilerGeneratedAttribute]
public sealed virtual IDiagnosticsLogger`1<Infrastructure> get_InfrastructureLogger();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Internal.DbContextDependenciesExtensions : object {
    [ExtensionAttribute]
public static IDbContextDependencies GetDependencies(IDbContextDependencies context);
    [ExtensionAttribute]
public static IDbContextDependencies GetDependencies(ICurrentDbContext currentContext);
}
public class Microsoft.EntityFrameworkCore.Internal.DbContextPool`1 : object {
    private static int DefaultPoolSize;
    private ConcurrentQueue`1<TContext> _pool;
    private Func`1<TContext> _activator;
    private int _maxSize;
    private int _count;
    private DbContextPoolConfigurationSnapshot _configurationSnapshot;
    public DbContextPool`1(DbContextOptions options);
    private static Func`1<TContext> CreateActivator(DbContextOptions options);
    public virtual TContext Rent();
    public virtual bool Return(TContext context);
    private sealed virtual override DbContext Microsoft.EntityFrameworkCore.Internal.IDbContextPool.Rent();
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Internal.IDbContextPool.Return(DbContext context);
    public virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Internal.DbContextPool`1/<DisposeAsync>d__14")]
public virtual ValueTask DisposeAsync();
}
public class Microsoft.EntityFrameworkCore.Internal.DbContextPoolConfigurationSnapshot : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AutoDetectChangesEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <LazyLoadingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CascadeTiming> <CascadeDeleteTiming>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<CascadeTiming> <DeleteOrphansTiming>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<QueryTrackingBehavior> <QueryTrackingBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AutoTransactionsEnabled>k__BackingField;
    public Nullable`1<bool> AutoDetectChangesEnabled { get; }
    public Nullable`1<bool> LazyLoadingEnabled { get; }
    public Nullable`1<CascadeTiming> CascadeDeleteTiming { get; }
    public Nullable`1<CascadeTiming> DeleteOrphansTiming { get; }
    public Nullable`1<QueryTrackingBehavior> QueryTrackingBehavior { get; }
    public Nullable`1<bool> AutoTransactionsEnabled { get; }
    public DbContextPoolConfigurationSnapshot(Nullable`1<bool> autoDetectChangesEnabled, Nullable`1<QueryTrackingBehavior> queryTrackingBehavior, Nullable`1<bool> autoTransactionsEnabled, Nullable`1<bool> lazyLoadingEnabled, Nullable`1<CascadeTiming> cascadeDeleteTiming, Nullable`1<CascadeTiming> deleteOrphansTiming);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_AutoDetectChangesEnabled();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_LazyLoadingEnabled();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<CascadeTiming> get_CascadeDeleteTiming();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<CascadeTiming> get_DeleteOrphansTiming();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<QueryTrackingBehavior> get_QueryTrackingBehavior();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_AutoTransactionsEnabled();
}
public class Microsoft.EntityFrameworkCore.Internal.DbContextServices : object {
    private IServiceProvider _scopedProvider;
    private IDbContextOptions _contextOptions;
    private ICurrentDbContext _currentContext;
    private IModel _modelFromSource;
    private bool _inOnModelCreating;
    public ICurrentDbContext CurrentContext { get; }
    public IModel Model { get; }
    private CoreOptionsExtension CoreOptions { get; }
    public IDbContextOptions ContextOptions { get; }
    public IServiceProvider InternalServiceProvider { get; }
    public virtual IDbContextServices Initialize(IServiceProvider scopedProvider, IDbContextOptions contextOptions, DbContext context);
    private static string BuildDatabaseNamesString(IEnumerable`1<IDatabaseProvider> available);
    private IModel CreateModel();
    public virtual ICurrentDbContext get_CurrentContext();
    public virtual IModel get_Model();
    private CoreOptionsExtension get_CoreOptions();
    public virtual IDbContextOptions get_ContextOptions();
    public virtual IServiceProvider get_InternalServiceProvider();
}
public class Microsoft.EntityFrameworkCore.Internal.DbSetFinder : object {
    private ConcurrentDictionary`2<Type, IReadOnlyList`1<DbSetProperty>> _cache;
    public virtual IReadOnlyList`1<DbSetProperty> FindSets(Type contextType);
    private static DbSetProperty[] FindSetsNonCached(Type contextType);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Internal.DbSetFinderExtensions : object {
    [ExtensionAttribute]
public static IDictionary`2<Type, DbSetProperty> CreateClrTypeDbSetMapping(IDbSetFinder setFinder, Type contextType);
}
public class Microsoft.EntityFrameworkCore.Internal.DbSetInitializer : object {
    private IDbSetFinder _setFinder;
    private IDbSetSource _setSource;
    public DbSetInitializer(IDbSetFinder setFinder, IDbSetSource setSource);
    public virtual void InitializeSets(DbContext context);
}
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Internal.DbSetProperty : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private IClrPropertySetter <Setter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsKeyless>k__BackingField;
    public string Name { get; }
    public Type ClrType { get; }
    public IClrPropertySetter Setter { get; }
    public bool IsKeyless { get; }
    public DbSetProperty(string name, Type clrType, IClrPropertySetter setter, bool keyless);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Type get_ClrType();
    [CompilerGeneratedAttribute]
public IClrPropertySetter get_Setter();
    [CompilerGeneratedAttribute]
public bool get_IsKeyless();
}
public class Microsoft.EntityFrameworkCore.Internal.DbSetSource : object {
    private static MethodInfo _genericCreateSet;
    private ConcurrentDictionary`2<Type, Func`2<DbContext, object>> _cache;
    private static DbSetSource();
    public virtual object Create(DbContext context, Type type);
    private object CreateCore(DbContext context, Type type, MethodInfo createMethod);
    [UsedImplicitlyAttribute]
private static Func`2<DbContext, object> CreateSetFactory();
}
public class Microsoft.EntityFrameworkCore.Internal.DiagnosticsLogger`1 : object {
    [CompilerGeneratedAttribute]
private ILoggingOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IInterceptors <Interceptors>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticSource <DiagnosticSource>k__BackingField;
    [CompilerGeneratedAttribute]
private LoggingDefinitions <Definitions>k__BackingField;
    public ILoggingOptions Options { get; }
    public ILogger Logger { get; }
    public IInterceptors Interceptors { get; }
    public DiagnosticSource DiagnosticSource { get; }
    public LoggingDefinitions Definitions { get; }
    public DiagnosticsLogger`1(ILoggerFactory loggerFactory, ILoggingOptions loggingOptions, DiagnosticSource diagnosticSource, LoggingDefinitions loggingDefinitions, IInterceptors interceptors);
    [CompilerGeneratedAttribute]
public virtual ILoggingOptions get_Options();
    [CompilerGeneratedAttribute]
public virtual ILogger get_Logger();
    [CompilerGeneratedAttribute]
public virtual IInterceptors get_Interceptors();
    [CompilerGeneratedAttribute]
public virtual DiagnosticSource get_DiagnosticSource();
    [CompilerGeneratedAttribute]
public virtual LoggingDefinitions get_Definitions();
    public virtual bool ShouldLogSensitiveData();
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static class Microsoft.EntityFrameworkCore.Internal.EFPropertyExtensions : object {
    [ExtensionAttribute]
public static bool TryGetEFIndexerArguments(MethodCallExpression methodCallExpression, Expression& entityExpression, String& propertyName);
    [ExtensionAttribute]
public static bool IsEFIndexer(MethodCallExpression methodCallExpression);
    [ExtensionAttribute]
public static bool IsEFIndexer(MethodInfo methodInfo);
    [ExtensionAttribute]
public static Expression CreateKeyAccessExpression(Expression target, IReadOnlyList`1<IProperty> properties, bool makeNullable);
    [ExtensionAttribute]
public static Expression CreateEFPropertyExpression(Expression target, IPropertyBase property, bool makeNullable);
    [ExtensionAttribute]
public static Expression CreateEFPropertyExpression(Expression target, MemberInfo memberInfo);
    private static Expression CreateEFPropertyExpression(Expression target, Type propertyDeclaringType, Type propertyType, string propertyName, bool makeNullable);
}
public class Microsoft.EntityFrameworkCore.Internal.EntityFinder`1 : object {
    private IStateManager _stateManager;
    private IDbSetSource _setSource;
    private IDbSetCache _setCache;
    private IModel _model;
    private IQueryable`1<TEntity> _queryRoot;
    private static MethodInfo _selectMethod;
    public EntityFinder`1(IStateManager stateManager, IDbSetSource setSource, IDbSetCache setCache, IEntityType entityType);
    private static EntityFinder`1();
    public virtual TEntity Find(Object[] keyValues);
    private sealed virtual override object Microsoft.EntityFrameworkCore.Internal.IEntityFinder.Find(Object[] keyValues);
    public virtual ValueTask`1<TEntity> FindAsync(Object[] keyValues, CancellationToken cancellationToken);
    private sealed virtual override ValueTask`1<object> Microsoft.EntityFrameworkCore.Internal.IEntityFinder.FindAsync(Object[] keyValues, CancellationToken cancellationToken);
    public virtual void Load(INavigation navigation, InternalEntityEntry entry);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Internal.EntityFinder`1/<LoadAsync>d__11")]
public virtual Task LoadAsync(INavigation navigation, InternalEntityEntry entry, CancellationToken cancellationToken);
    public virtual IQueryable`1<TEntity> Query(INavigation navigation, InternalEntityEntry entry);
    public virtual Object[] GetDatabaseValues(InternalEntityEntry entry);
    public virtual Task`1<Object[]> GetDatabaseValuesAsync(InternalEntityEntry entry, CancellationToken cancellationToken);
    private IQueryable`1<Object[]> GetDatabaseValuesQuery(InternalEntityEntry entry);
    private IQueryable`1<TEntity> Query(INavigation navigation, Object[] keyValues);
    private sealed virtual override IQueryable Microsoft.EntityFrameworkCore.Internal.IEntityFinder.Query(INavigation navigation, InternalEntityEntry entry);
    private static Object[] GetLoadValues(INavigation navigation, InternalEntityEntry entry);
    private static IReadOnlyList`1<IProperty> GetLoadProperties(INavigation navigation);
    private TEntity FindTracked(Object[] keyValues, IReadOnlyList`1& keyProperties);
    private static Expression`1<Func`2<TEntity, bool>> BuildLambda(IReadOnlyList`1<IProperty> keyProperties, ValueBuffer keyValues);
    private static Expression`1<Func`2<object, bool>> BuildObjectLambda(IReadOnlyList`1<IProperty> keyProperties, ValueBuffer keyValues);
    private IQueryable BuildQueryRoot(IEntityType entityType);
    private IQueryable BuildQueryRoot(IEntityType ownerOrDefiningEntityType, IEntityType entityType, string navigationName);
    private static IQueryable`1<TResult> Select(IQueryable`1<TSource> source, string propertyName);
    private static BinaryExpression BuildPredicate(IReadOnlyList`1<IProperty> keyProperties, ValueBuffer keyValues, ParameterExpression entityParameter);
    private static Expression`1<Func`2<object, Object[]>> BuildProjection(IEntityType entityType);
    [CompilerGeneratedAttribute]
internal static BinaryExpression <BuildPredicate>g__GenerateEqualExpression|27_0(IProperty property, int i, <>c__DisplayClass27_0& );
}
public class Microsoft.EntityFrameworkCore.Internal.EntityFinderFactory : object {
    private IEntityFinderSource _entityFinderSource;
    private IStateManager _stateManager;
    private IDbSetSource _setSource;
    private IDbSetCache _setCache;
    public EntityFinderFactory(IEntityFinderSource entityFinderSource, IStateManager stateManager, IDbSetSource setSource, IDbSetCache setCache);
    public virtual IEntityFinder Create(IEntityType type);
}
public class Microsoft.EntityFrameworkCore.Internal.EntityFinderSource : object {
    private static MethodInfo _genericCreate;
    private ConcurrentDictionary`2<Type, Func`5<IStateManager, IDbSetSource, IDbSetCache, IEntityType, IEntityFinder>> _cache;
    private static EntityFinderSource();
    public virtual IEntityFinder Create(IStateManager stateManager, IDbSetSource setSource, IDbSetCache setCache, IEntityType type);
    [UsedImplicitlyAttribute]
private static Func`5<IStateManager, IDbSetSource, IDbSetCache, IEntityType, IEntityFinder> CreateConstructor();
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static class Microsoft.EntityFrameworkCore.Internal.EnumerableExtensions : object {
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderByOrdinal(IEnumerable`1<TSource> source, Func`2<TSource, string> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<T> Distinct(IEnumerable`1<T> source, Func`3<T, T, bool> comparer);
    [ExtensionAttribute]
public static string Join(IEnumerable`1<object> source, string separator);
    [ExtensionAttribute]
public static bool StructuralSequenceEqual(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second);
    [ExtensionAttribute]
public static bool StartsWith(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> source, T item);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> source, T item, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static T FirstOr(IEnumerable`1<T> source, T alternate);
    [ExtensionAttribute]
public static T FirstOr(IEnumerable`1<T> source, Func`2<T, bool> predicate, T alternate);
    [ExtensionAttribute]
public static bool Any(IEnumerable source);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static class Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions : object {
    [ExtensionAttribute]
public static bool IsNullConstantExpression(Expression expression);
    [ExtensionAttribute]
public static IReadOnlyList`1<PropertyInfo> MatchPropertyAccessList(LambdaExpression lambdaExpression, Func`3<Expression, Expression, PropertyInfo> propertyMatcher);
    [ExtensionAttribute]
public static PropertyInfo MatchSimplePropertyAccess(Expression parameterExpression, Expression propertyAccessExpression);
    [ExtensionAttribute]
private static IReadOnlyList`1<PropertyInfo> MatchPropertyAccess(Expression parameterExpression, Expression propertyAccessExpression);
    [ExtensionAttribute]
public static Expression RemoveTypeAs(Expression expression);
    [ExtensionAttribute]
public static bool IsLogicalOperation(Expression expression);
    [ExtensionAttribute]
public static bool IsEntityQueryable(ConstantExpression constantExpression);
    [ExtensionAttribute]
public static LambdaExpression GetLambdaOrNull(Expression expression);
    private static Expression RemoveConvert(Expression expression);
}
public abstract class Microsoft.EntityFrameworkCore.Internal.Graph`1 : object {
    public IEnumerable`1<TVertex> Vertices { get; }
    public abstract virtual IEnumerable`1<TVertex> get_Vertices();
    public abstract virtual IEnumerable`1<TVertex> GetOutgoingNeighbors(TVertex from);
    public abstract virtual IEnumerable`1<TVertex> GetIncomingNeighbors(TVertex to);
    public virtual ISet`1<TVertex> GetUnreachableVertices(IReadOnlyList`1<TVertex> roots);
}
public interface Microsoft.EntityFrameworkCore.Internal.IDatabaseFacadeDependencies {
    public IDbContextTransactionManager TransactionManager { get; }
    public IDatabaseCreator DatabaseCreator { get; }
    public IExecutionStrategyFactory ExecutionStrategyFactory { get; }
    public IEnumerable`1<IDatabaseProvider> DatabaseProviders { get; }
    public IDiagnosticsLogger`1<Command> CommandLogger { get; }
    public IConcurrencyDetector ConcurrencyDetector { get; }
    public abstract virtual IDbContextTransactionManager get_TransactionManager();
    public abstract virtual IDatabaseCreator get_DatabaseCreator();
    public abstract virtual IExecutionStrategyFactory get_ExecutionStrategyFactory();
    public abstract virtual IEnumerable`1<IDatabaseProvider> get_DatabaseProviders();
    public abstract virtual IDiagnosticsLogger`1<Command> get_CommandLogger();
    public abstract virtual IConcurrencyDetector get_ConcurrencyDetector();
}
public interface Microsoft.EntityFrameworkCore.Internal.IDatabaseFacadeDependenciesAccessor {
    public IDatabaseFacadeDependencies Dependencies { get; }
    public DbContext Context { get; }
    public abstract virtual IDatabaseFacadeDependencies get_Dependencies();
    public abstract virtual DbContext get_Context();
}
public interface Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies {
    public IModel Model { get; }
    public IDbSetSource SetSource { get; }
    public IEntityFinderFactory EntityFinderFactory { get; }
    public IAsyncQueryProvider QueryProvider { get; }
    public IStateManager StateManager { get; }
    public IChangeDetector ChangeDetector { get; }
    public IEntityGraphAttacher EntityGraphAttacher { get; }
    public IDiagnosticsLogger`1<Update> UpdateLogger { get; }
    public IDiagnosticsLogger`1<Infrastructure> InfrastructureLogger { get; }
    public abstract virtual IModel get_Model();
    public abstract virtual IDbSetSource get_SetSource();
    public abstract virtual IEntityFinderFactory get_EntityFinderFactory();
    public abstract virtual IAsyncQueryProvider get_QueryProvider();
    public abstract virtual IStateManager get_StateManager();
    public abstract virtual IChangeDetector get_ChangeDetector();
    public abstract virtual IEntityGraphAttacher get_EntityGraphAttacher();
    public abstract virtual IDiagnosticsLogger`1<Update> get_UpdateLogger();
    public abstract virtual IDiagnosticsLogger`1<Infrastructure> get_InfrastructureLogger();
}
public interface Microsoft.EntityFrameworkCore.Internal.IDbContextPool {
    public abstract virtual DbContext Rent();
    public abstract virtual bool Return(DbContext context);
}
public interface Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable {
    public abstract virtual void SetPool(IDbContextPool contextPool);
    public abstract virtual DbContextPoolConfigurationSnapshot SnapshotConfiguration();
    public abstract virtual void Resurrect(DbContextPoolConfigurationSnapshot configurationSnapshot);
}
public interface Microsoft.EntityFrameworkCore.Internal.IDbContextServices {
    public ICurrentDbContext CurrentContext { get; }
    public IModel Model { get; }
    public IDbContextOptions ContextOptions { get; }
    public IServiceProvider InternalServiceProvider { get; }
    public abstract virtual IDbContextServices Initialize(IServiceProvider scopedProvider, IDbContextOptions contextOptions, DbContext context);
    public abstract virtual ICurrentDbContext get_CurrentContext();
    public abstract virtual IModel get_Model();
    public abstract virtual IDbContextOptions get_ContextOptions();
    public abstract virtual IServiceProvider get_InternalServiceProvider();
}
public interface Microsoft.EntityFrameworkCore.Internal.IDbSetCache {
    public abstract virtual object GetOrAddSet(IDbSetSource source, Type type);
}
public interface Microsoft.EntityFrameworkCore.Internal.IDbSetFinder {
    public abstract virtual IReadOnlyList`1<DbSetProperty> FindSets(Type contextType);
}
public interface Microsoft.EntityFrameworkCore.Internal.IDbSetInitializer {
    public abstract virtual void InitializeSets(DbContext context);
}
public interface Microsoft.EntityFrameworkCore.Internal.IDbSetSource {
    public abstract virtual object Create(DbContext context, Type type);
}
public interface Microsoft.EntityFrameworkCore.Internal.IEntityFinder {
    public abstract virtual object Find(Object[] keyValues);
    public abstract virtual ValueTask`1<object> FindAsync(Object[] keyValues, CancellationToken cancellationToken);
    public abstract virtual void Load(INavigation navigation, InternalEntityEntry entry);
    public abstract virtual Task LoadAsync(INavigation navigation, InternalEntityEntry entry, CancellationToken cancellationToken);
    public abstract virtual IQueryable Query(INavigation navigation, InternalEntityEntry entry);
    public abstract virtual Object[] GetDatabaseValues(InternalEntityEntry entry);
    public abstract virtual Task`1<Object[]> GetDatabaseValuesAsync(InternalEntityEntry entry, CancellationToken cancellationToken);
}
public interface Microsoft.EntityFrameworkCore.Internal.IEntityFinder`1 {
    public abstract virtual TEntity Find(Object[] keyValues);
    public abstract virtual ValueTask`1<TEntity> FindAsync(Object[] keyValues, CancellationToken cancellationToken);
    public abstract virtual IQueryable`1<TEntity> Query(INavigation navigation, InternalEntityEntry entry);
}
public interface Microsoft.EntityFrameworkCore.Internal.IEntityFinderFactory {
    public abstract virtual IEntityFinder Create(IEntityType type);
}
public interface Microsoft.EntityFrameworkCore.Internal.IEntityFinderSource {
    public abstract virtual IEntityFinder Create(IStateManager stateManager, IDbSetSource setSource, IDbSetCache setCache, IEntityType type);
}
public class Microsoft.EntityFrameworkCore.Internal.IndentedStringBuilder : object {
    private static byte IndentSize;
    private byte _indent;
    private bool _indentPending;
    private StringBuilder _stringBuilder;
    public int Length { get; }
    public IndentedStringBuilder(IndentedStringBuilder from);
    public virtual int get_Length();
    public virtual IndentedStringBuilder Append(object o);
    public virtual IndentedStringBuilder AppendLine();
    public virtual IndentedStringBuilder AppendLine(object o);
    public virtual IndentedStringBuilder AppendLines(object o, bool skipFinalNewline);
    public virtual IndentedStringBuilder Clear();
    public virtual IndentedStringBuilder IncrementIndent();
    public virtual IndentedStringBuilder DecrementIndent();
    public virtual IDisposable Indent();
    public virtual string ToString();
    private void DoIndent();
}
public class Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1 : DbQuery`1<TEntity> {
    private DbContext _context;
    private IEntityType _entityType;
    private EntityQueryable`1<TEntity> _entityQueryable;
    private LocalView`1<TEntity> _localView;
    private IEntityType EntityType { get; }
    private EntityQueryable`1<TEntity> EntityQueryable { get; }
    public LocalView`1<TEntity> Local { get; }
    private IEntityFinder`1<TEntity> Finder { get; }
    private Type System.Linq.IQueryable.ElementType { get; }
    private Expression System.Linq.IQueryable.Expression { get; }
    private IQueryProvider System.Linq.IQueryable.Provider { get; }
    private IServiceProvider Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.Instance { get; }
    public InternalDbSet`1(DbContext context);
    private IEntityType get_EntityType();
    private void CheckState();
    private void CheckKey();
    private EntityQueryable`1<TEntity> get_EntityQueryable();
    private EntityQueryable`1<TEntity> CreateEntityQueryable();
    public virtual LocalView`1<TEntity> get_Local();
    public virtual TEntity Find(Object[] keyValues);
    public virtual ValueTask`1<TEntity> FindAsync(Object[] keyValues);
    public virtual ValueTask`1<TEntity> FindAsync(Object[] keyValues, CancellationToken cancellationToken);
    public virtual EntityEntry`1<TEntity> Add(TEntity entity);
    public virtual ValueTask`1<EntityEntry`1<TEntity>> AddAsync(TEntity entity, CancellationToken cancellationToken);
    public virtual EntityEntry`1<TEntity> Attach(TEntity entity);
    public virtual EntityEntry`1<TEntity> Remove(TEntity entity);
    public virtual EntityEntry`1<TEntity> Update(TEntity entity);
    public virtual void AddRange(TEntity[] entities);
    public virtual Task AddRangeAsync(TEntity[] entities);
    public virtual void AttachRange(TEntity[] entities);
    public virtual void RemoveRange(TEntity[] entities);
    public virtual void UpdateRange(TEntity[] entities);
    public virtual void AddRange(IEnumerable`1<TEntity> entities);
    public virtual Task AddRangeAsync(IEnumerable`1<TEntity> entities, CancellationToken cancellationToken);
    public virtual void AttachRange(IEnumerable`1<TEntity> entities);
    public virtual void RemoveRange(IEnumerable`1<TEntity> entities);
    public virtual void UpdateRange(IEnumerable`1<TEntity> entities);
    private IEntityFinder`1<TEntity> get_Finder();
    private sealed virtual override IEnumerator`1<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IAsyncEnumerator`1<TEntity> System.Collections.Generic.IAsyncEnumerable<TEntity>.GetAsyncEnumerator(CancellationToken cancellationToken);
    private sealed virtual override Type System.Linq.IQueryable.get_ElementType();
    private sealed virtual override Expression System.Linq.IQueryable.get_Expression();
    private sealed virtual override IQueryProvider System.Linq.IQueryable.get_Provider();
    private sealed virtual override IServiceProvider Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.get_Instance();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetState();
    private sealed virtual override Task Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetStateAsync(CancellationToken cancellationToken);
}
public class Microsoft.EntityFrameworkCore.Internal.InternalServiceCollectionMap : object {
    private IDictionary`2<Type, IList`1<int>> _serviceMap;
    [CompilerGeneratedAttribute]
private IServiceCollection <ServiceCollection>k__BackingField;
    public IServiceCollection ServiceCollection { get; }
    public InternalServiceCollectionMap(IServiceCollection serviceCollection);
    [CompilerGeneratedAttribute]
public virtual IServiceCollection get_ServiceCollection();
    public virtual IList`1<int> GetOrCreateDescriptorIndexes(Type serviceType);
    public virtual void AddNewDescriptor(IList`1<int> indexes, ServiceDescriptor newDescriptor);
    public virtual InternalServiceCollectionMap AddDependencySingleton();
    public virtual InternalServiceCollectionMap AddDependencyScoped();
    public virtual InternalServiceCollectionMap AddDependency(Type serviceType, ServiceLifetime lifetime);
    public virtual InternalServiceCollectionMap DoPatchInjection();
    private static object InjectServices(IServiceProvider serviceProvider, Type concreteType);
    private static object InjectServices(IServiceProvider serviceProvider, object service);
    private static object InjectServices(IServiceProvider serviceProvider, Func`2<IServiceProvider, object> implementationFactory);
}
public interface Microsoft.EntityFrameworkCore.Internal.IPatchServiceInjectionSite {
    public abstract virtual void InjectServices(IServiceProvider serviceProvider);
}
public interface Microsoft.EntityFrameworkCore.Internal.IRegisteredServices {
    public ISet`1<Type> Services { get; }
    public abstract virtual ISet`1<Type> get_Services();
}
public interface Microsoft.EntityFrameworkCore.Internal.ISingletonOptionsInitializer {
    public abstract virtual void EnsureInitialized(IServiceProvider serviceProvider, IDbContextOptions options);
}
public class Microsoft.EntityFrameworkCore.Internal.LazyLoader : object {
    private bool _disposed;
    private IDictionary`2<string, bool> _loadedStates;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Infrastructure> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private DbContext <Context>k__BackingField;
    protected IDiagnosticsLogger`1<Infrastructure> Logger { get; }
    protected DbContext Context { get; }
    public LazyLoader(ICurrentDbContext currentContext, IDiagnosticsLogger`1<Infrastructure> logger);
    public virtual void SetLoaded(object entity, string navigationName, bool loaded);
    [CompilerGeneratedAttribute]
protected virtual IDiagnosticsLogger`1<Infrastructure> get_Logger();
    [CompilerGeneratedAttribute]
protected virtual DbContext get_Context();
    public virtual void Load(object entity, string navigationName);
    public virtual Task LoadAsync(object entity, CancellationToken cancellationToken, string navigationName);
    private bool ShouldLoad(object entity, string navigationName, NavigationEntry& navigationEntry);
    public virtual void Dispose();
}
public class Microsoft.EntityFrameworkCore.Internal.LoggingOptions : object {
    [CompilerGeneratedAttribute]
private bool <IsSensitiveDataLoggingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSensitiveDataLoggingWarned>k__BackingField;
    [CompilerGeneratedAttribute]
private WarningsConfiguration <WarningsConfiguration>k__BackingField;
    public bool IsSensitiveDataLoggingEnabled { get; private set; }
    public bool IsSensitiveDataLoggingWarned { get; public set; }
    public WarningsConfiguration WarningsConfiguration { get; private set; }
    public virtual void Initialize(IDbContextOptions options);
    public virtual void Validate(IDbContextOptions options);
    [CompilerGeneratedAttribute]
public virtual bool get_IsSensitiveDataLoggingEnabled();
    [CompilerGeneratedAttribute]
private void set_IsSensitiveDataLoggingEnabled(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsSensitiveDataLoggingWarned();
    [CompilerGeneratedAttribute]
public virtual void set_IsSensitiveDataLoggingWarned(bool value);
    [CompilerGeneratedAttribute]
public virtual WarningsConfiguration get_WarningsConfiguration();
    [CompilerGeneratedAttribute]
private void set_WarningsConfiguration(WarningsConfiguration value);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static class Microsoft.EntityFrameworkCore.Internal.MethodInfoExtensions : object {
    [ExtensionAttribute]
public static bool MethodIsClosedFormOf(MethodInfo methodInfo, MethodInfo genericMethod);
}
public class Microsoft.EntityFrameworkCore.Internal.Multigraph`2 : Graph`1<TVertex> {
    private HashSet`1<TVertex> _vertices;
    private Dictionary`2<TVertex, Dictionary`2<TVertex, List`1<TEdge>>> _successorMap;
    public IEnumerable`1<TEdge> Edges { get; }
    public IEnumerable`1<TVertex> Vertices { get; }
    protected virtual string ToString(TVertex vertex);
    public virtual IEnumerable`1<TEdge> get_Edges();
    public virtual IEnumerable`1<TEdge> GetEdges(TVertex from, TVertex to);
    public virtual void AddVertex(TVertex vertex);
    public virtual void AddVertices(IEnumerable`1<TVertex> vertices);
    public virtual void AddEdge(TVertex from, TVertex to, TEdge edge);
    public virtual void AddEdges(TVertex from, TVertex to, IEnumerable`1<TEdge> edges);
    public virtual IReadOnlyList`1<TVertex> TopologicalSort();
    public virtual IReadOnlyList`1<TVertex> TopologicalSort(Func`4<TVertex, TVertex, IEnumerable`1<TEdge>, bool> canBreakEdge);
    public virtual IReadOnlyList`1<TVertex> TopologicalSort(Func`2<IEnumerable`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle);
    public virtual IReadOnlyList`1<TVertex> TopologicalSort(Func`4<TVertex, TVertex, IEnumerable`1<TEdge>, bool> canBreakEdge, Func`2<IReadOnlyList`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle);
    private void ThrowCycle(List`1<TVertex> cycle, Func`2<IReadOnlyList`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle);
    public virtual IReadOnlyList`1<List`1<TVertex>> BatchingTopologicalSort();
    public virtual IReadOnlyList`1<List`1<TVertex>> BatchingTopologicalSort(Func`2<IReadOnlyList`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle);
    public virtual IEnumerable`1<TVertex> get_Vertices();
    public virtual IEnumerable`1<TVertex> GetOutgoingNeighbors(TVertex from);
    public virtual IEnumerable`1<TVertex> GetIncomingNeighbors(TVertex to);
}
public static class Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer : object {
    public static TValue EnsureInitialized(TValue& target, TParam param, Func`2<TParam, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TParam1 param1, TParam2 param2, Func`3<TParam1, TParam2, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TValue value);
    public static TValue EnsureInitialized(TValue& target, TParam param, Action`1<TParam> valueFactory);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Internal.QueryableExtensions : object {
    internal static MethodInfo LeftJoinMethodInfo;
    private static QueryableExtensions();
    [ExtensionAttribute]
public static IQueryable`1<TResult> LeftJoin(IQueryable`1<TOuter> outer, IEnumerable`1<TInner> inner, Expression`1<Func`2<TOuter, TKey>> outerKeySelector, Expression`1<Func`2<TInner, TKey>> innerKeySelector, Expression`1<Func`3<TOuter, TInner, TResult>> resultSelector);
}
public class Microsoft.EntityFrameworkCore.Internal.ReferenceEnumerableEqualityComparer`2 : object {
    public sealed virtual bool Equals(TEnumerable x, TEnumerable y);
    public sealed virtual int GetHashCode(TEnumerable obj);
}
public class Microsoft.EntityFrameworkCore.Internal.ReferenceEqualityComparer : object {
    [CompilerGeneratedAttribute]
private static ReferenceEqualityComparer <Instance>k__BackingField;
    public static ReferenceEqualityComparer Instance { get; }
    private static ReferenceEqualityComparer();
    [CompilerGeneratedAttribute]
public static ReferenceEqualityComparer get_Instance();
    private sealed virtual override bool System.Collections.Generic.IEqualityComparer<System.Object>.Equals(object x, object y);
    private sealed virtual override int System.Collections.Generic.IEqualityComparer<System.Object>.GetHashCode(object obj);
}
public class Microsoft.EntityFrameworkCore.Internal.RegisteredServices : object {
    [CompilerGeneratedAttribute]
private ISet`1<Type> <Services>k__BackingField;
    public ISet`1<Type> Services { get; }
    public RegisteredServices(IEnumerable`1<Type> services);
    [CompilerGeneratedAttribute]
public virtual ISet`1<Type> get_Services();
}
public class Microsoft.EntityFrameworkCore.Internal.ScopedLoggerFactory : object {
    private ILoggerFactory _underlyingFactory;
    private bool _dispose;
    public ScopedLoggerFactory(ILoggerFactory loggerFactory, bool dispose);
    public static ScopedLoggerFactory Create(IServiceProvider internalServiceProvider, IDbContextOptions contextOptions);
    public virtual void Dispose();
    public virtual ILogger CreateLogger(string categoryName);
    public virtual void AddProvider(ILoggerProvider provider);
}
public class Microsoft.EntityFrameworkCore.Internal.SemanticVersionComparer : object {
    public virtual int Compare(string x, string y);
    private static Version CreateVersion(string semanticVersion);
}
public class Microsoft.EntityFrameworkCore.Internal.ServiceProviderCache : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<long, ValueTuple`2<IServiceProvider, IDictionary`2<string, string>>> _configurations;
    [CompilerGeneratedAttribute]
private static ServiceProviderCache <Instance>k__BackingField;
    public static ServiceProviderCache Instance { get; }
    private static ServiceProviderCache();
    [CompilerGeneratedAttribute]
public static ServiceProviderCache get_Instance();
    public virtual IServiceProvider GetOrAdd(IDbContextOptions options, bool providerRequired);
    private static void ValidateOptions(IDbContextOptions options);
    private static bool ApplyServices(IDbContextOptions options, ServiceCollection services);
}
public class Microsoft.EntityFrameworkCore.Internal.SingletonOptionsInitializer : object {
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isInitialized;
    private object _lock;
    public virtual void EnsureInitialized(IServiceProvider serviceProvider, IDbContextOptions options);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Internal.TypeExtensions : object {
    private static Dictionary`2<Type, string> _builtInTypeNames;
    private static TypeExtensions();
    [ExtensionAttribute]
public static bool IsDefaultValue(Type type, object value);
    [ExtensionAttribute]
public static string DisplayName(Type type, bool fullName);
    private static void ProcessType(StringBuilder builder, Type type, bool fullName);
    private static void ProcessArrayType(StringBuilder builder, Type type, bool fullName);
    private static void ProcessGenericType(StringBuilder builder, Type type, Type[] genericArguments, int length, bool fullName);
    [ExtensionAttribute]
public static FieldInfo GetFieldInfo(Type type, string fieldName);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Internal.TypeExtensions/<GetNamespaces>d__7")]
[ExtensionAttribute]
public static IEnumerable`1<string> GetNamespaces(Type type);
    [ExtensionAttribute]
public static string GenerateParameterName(Type type);
    [ExtensionAttribute]
public static bool IsQueryableType(Type type);
}
[ObsoleteAttribute("Use IEntityTypeConfiguration<TEntity> instead")]
public interface Microsoft.EntityFrameworkCore.IQueryTypeConfiguration`1 {
    public abstract virtual void Configure(QueryTypeBuilder`1<TQuery> builder);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.KeyExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<IForeignKey> GetReferencingForeignKeys(IKey key);
    [ExtensionAttribute]
public static bool IsPrimaryKey(IKey key);
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder : object {
    [CompilerGeneratedAttribute]
private InternalRelationshipBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CollectionName>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfo <CollectionMember>k__BackingField;
    [CompilerGeneratedAttribute]
private IMutableEntityType <RelatedEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private IMutableEntityType <DeclaringEntityType>k__BackingField;
    private InternalRelationshipBuilder Builder { get; }
    [EntityFrameworkInternalAttribute]
protected string CollectionName { get; }
    [EntityFrameworkInternalAttribute]
protected MemberInfo CollectionMember { get; }
    [EntityFrameworkInternalAttribute]
protected IMutableEntityType RelatedEntityType { get; }
    [EntityFrameworkInternalAttribute]
protected IMutableEntityType DeclaringEntityType { get; }
    private InternalRelationshipBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public CollectionNavigationBuilder(IMutableEntityType declaringEntityType, IMutableEntityType relatedEntityType, string navigationName, IMutableForeignKey foreignKey);
    [EntityFrameworkInternalAttribute]
public CollectionNavigationBuilder(IMutableEntityType declaringEntityType, IMutableEntityType relatedEntityType, MemberInfo navigationMemberInfo, IMutableForeignKey foreignKey);
    [CompilerGeneratedAttribute]
private InternalRelationshipBuilder get_Builder();
    [CompilerGeneratedAttribute]
protected virtual string get_CollectionName();
    [CompilerGeneratedAttribute]
protected virtual MemberInfo get_CollectionMember();
    [CompilerGeneratedAttribute]
protected virtual IMutableEntityType get_RelatedEntityType();
    [CompilerGeneratedAttribute]
protected virtual IMutableEntityType get_DeclaringEntityType();
    private sealed virtual override InternalRelationshipBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder>.get_Instance();
    public virtual ReferenceCollectionBuilder WithOne(string navigationName);
    [EntityFrameworkInternalAttribute]
protected virtual InternalRelationshipBuilder WithOneBuilder(string navigationName);
    [EntityFrameworkInternalAttribute]
protected virtual InternalRelationshipBuilder WithOneBuilder(MemberInfo navigationMemberInfo);
    private InternalRelationshipBuilder WithOneBuilder(MemberIdentity reference);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder`2 : CollectionNavigationBuilder {
    [EntityFrameworkInternalAttribute]
public CollectionNavigationBuilder`2(IMutableEntityType declaringEntityType, IMutableEntityType relatedEntityType, string navigationName, IMutableForeignKey foreignKey);
    [EntityFrameworkInternalAttribute]
public CollectionNavigationBuilder`2(IMutableEntityType declaringEntityType, IMutableEntityType relatedEntityType, MemberInfo navigationMemberInfo, IMutableForeignKey foreignKey);
    public virtual ReferenceCollectionBuilder`2<TEntity, TRelatedEntity> WithOne(string navigationName);
    public virtual ReferenceCollectionBuilder`2<TEntity, TRelatedEntity> WithOne(Expression`1<Func`2<TRelatedEntity, TEntity>> navigationExpression);
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.DataBuilder : object {
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.DataBuilder`1 : DataBuilder {
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder : object {
    [CompilerGeneratedAttribute]
private InternalEntityTypeBuilder <EntityTypeBuilder>k__BackingField;
    [EntityFrameworkInternalAttribute]
protected InternalEntityTypeBuilder EntityTypeBuilder { get; }
    [EntityFrameworkInternalAttribute]
public DiscriminatorBuilder(IMutableEntityType entityType);
    [CompilerGeneratedAttribute]
protected virtual InternalEntityTypeBuilder get_EntityTypeBuilder();
    public virtual DiscriminatorBuilder HasValue(object value);
    public virtual DiscriminatorBuilder HasValue(object value);
    public virtual DiscriminatorBuilder HasValue(Type entityType, object value);
    public virtual DiscriminatorBuilder HasValue(string entityTypeName, object value);
    private DiscriminatorBuilder HasValue(InternalEntityTypeBuilder entityTypeBuilder, object value, ConfigurationSource configurationSource);
    private sealed virtual override IConventionDiscriminatorBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder.HasValue(object value, bool fromDataAnnotation);
    private sealed virtual override IConventionDiscriminatorBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder.HasValue(IConventionEntityType entityType, object value, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder.CanSetValue(object value, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder.CanSetValue(IConventionEntityType entityType, object value, bool fromDataAnnotation);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder`1 : object {
    [CompilerGeneratedAttribute]
private DiscriminatorBuilder <Builder>k__BackingField;
    private DiscriminatorBuilder Builder { get; }
    [EntityFrameworkInternalAttribute]
public DiscriminatorBuilder`1(DiscriminatorBuilder builder);
    [CompilerGeneratedAttribute]
private DiscriminatorBuilder get_Builder();
    public virtual DiscriminatorBuilder`1<TDiscriminator> HasValue(TDiscriminator value);
    public virtual DiscriminatorBuilder`1<TDiscriminator> HasValue(TDiscriminator value);
    public virtual DiscriminatorBuilder`1<TDiscriminator> HasValue(Type entityType, TDiscriminator value);
    public virtual DiscriminatorBuilder`1<TDiscriminator> HasValue(string entityTypeName, TDiscriminator value);
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder : object {
    [CompilerGeneratedAttribute]
private InternalEntityTypeBuilder <Builder>k__BackingField;
    private InternalEntityTypeBuilder Builder { get; }
    private InternalEntityTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder>.Instance { get; }
    public IMutableEntityType Metadata { get; }
    [EntityFrameworkInternalAttribute]
public EntityTypeBuilder(IMutableEntityType entityType);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
private InternalEntityTypeBuilder get_Builder();
    private sealed virtual override InternalEntityTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder>.get_Instance();
    public virtual IMutableEntityType get_Metadata();
    public virtual EntityTypeBuilder HasAnnotation(string annotation, object value);
    public virtual EntityTypeBuilder HasBaseType(string name);
    public virtual EntityTypeBuilder HasBaseType(Type entityType);
    public virtual KeyBuilder HasKey(String[] propertyNames);
    public virtual KeyBuilder HasAlternateKey(String[] propertyNames);
    public virtual EntityTypeBuilder HasNoKey();
    public virtual PropertyBuilder Property(string propertyName);
    public virtual PropertyBuilder`1<TProperty> Property(string propertyName);
    public virtual PropertyBuilder Property(Type propertyType, string propertyName);
    public virtual EntityTypeBuilder Ignore(string propertyName);
    public virtual EntityTypeBuilder HasQueryFilter(LambdaExpression filter);
    public virtual IndexBuilder HasIndex(String[] propertyNames);
    public virtual OwnedNavigationBuilder OwnsOne(string ownedTypeName, string navigationName);
    public virtual OwnedNavigationBuilder OwnsOne(Type ownedType, string navigationName);
    public virtual EntityTypeBuilder OwnsOne(string ownedTypeName, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    public virtual EntityTypeBuilder OwnsOne(Type ownedType, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    private OwnedNavigationBuilder OwnsOneBuilder(TypeIdentity& ownedType, string navigationName);
    public virtual OwnedNavigationBuilder OwnsMany(string ownedTypeName, string navigationName);
    public virtual OwnedNavigationBuilder OwnsMany(Type ownedType, string navigationName);
    public virtual EntityTypeBuilder OwnsMany(string ownedTypeName, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    public virtual EntityTypeBuilder OwnsMany(Type ownedType, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    private OwnedNavigationBuilder OwnsManyBuilder(TypeIdentity& ownedType, string navigationName);
    public virtual ReferenceNavigationBuilder HasOne(string relatedTypeName, string navigationName);
    public virtual ReferenceNavigationBuilder HasOne(Type relatedType, string navigationName);
    public virtual ReferenceNavigationBuilder HasOne(string navigationName);
    public virtual CollectionNavigationBuilder HasMany(string relatedTypeName, string navigationName);
    public virtual CollectionNavigationBuilder HasMany(string navigationName);
    public virtual CollectionNavigationBuilder HasMany(Type relatedType, string navigationName);
    [EntityFrameworkInternalAttribute]
protected virtual EntityType FindRelatedEntityType(string relatedTypeName, string navigationName);
    [EntityFrameworkInternalAttribute]
protected virtual EntityType FindRelatedEntityType(Type relatedType, string navigationName);
    public virtual EntityTypeBuilder HasChangeTrackingStrategy(ChangeTrackingStrategy changeTrackingStrategy);
    public virtual EntityTypeBuilder UsePropertyAccessMode(PropertyAccessMode propertyAccessMode);
    public virtual DataBuilder HasData(Object[] data);
    public virtual DataBuilder HasData(IEnumerable`1<object> data);
    public virtual DiscriminatorBuilder HasDiscriminator();
    public virtual DiscriminatorBuilder HasDiscriminator(string name, Type type);
    public virtual DiscriminatorBuilder`1<TDiscriminator> HasDiscriminator(string name);
    public virtual EntityTypeBuilder HasNoDiscriminator();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1 : EntityTypeBuilder {
    private InternalEntityTypeBuilder Builder { get; }
    [EntityFrameworkInternalAttribute]
public EntityTypeBuilder`1(IMutableEntityType entityType);
    public virtual EntityTypeBuilder`1<TEntity> HasAnnotation(string annotation, object value);
    public virtual EntityTypeBuilder`1<TEntity> HasBaseType(string name);
    public virtual EntityTypeBuilder`1<TEntity> HasBaseType(Type entityType);
    public virtual EntityTypeBuilder`1<TEntity> HasBaseType();
    public virtual KeyBuilder HasKey(Expression`1<Func`2<TEntity, object>> keyExpression);
    public virtual KeyBuilder HasAlternateKey(Expression`1<Func`2<TEntity, object>> keyExpression);
    public virtual EntityTypeBuilder`1<TEntity> HasNoKey();
    public virtual PropertyBuilder`1<TProperty> Property(Expression`1<Func`2<TEntity, TProperty>> propertyExpression);
    public virtual EntityTypeBuilder`1<TEntity> Ignore(Expression`1<Func`2<TEntity, object>> propertyExpression);
    public virtual EntityTypeBuilder`1<TEntity> Ignore(string propertyName);
    public virtual EntityTypeBuilder`1<TEntity> HasQueryFilter(Expression`1<Func`2<TEntity, bool>> filter);
    public virtual EntityTypeBuilder`1<TEntity> ToQuery(Expression`1<Func`1<IQueryable`1<TEntity>>> query);
    public virtual IndexBuilder`1<TEntity> HasIndex(Expression`1<Func`2<TEntity, object>> indexExpression);
    public virtual OwnedNavigationBuilder`2<TEntity, TRelatedEntity> OwnsOne(string navigationName);
    public virtual OwnedNavigationBuilder`2<TEntity, TRelatedEntity> OwnsOne(Expression`1<Func`2<TEntity, TRelatedEntity>> navigationExpression);
    public virtual EntityTypeBuilder`1<TEntity> OwnsOne(string navigationName, Action`1<OwnedNavigationBuilder`2<TEntity, TRelatedEntity>> buildAction);
    public virtual EntityTypeBuilder`1<TEntity> OwnsOne(Expression`1<Func`2<TEntity, TRelatedEntity>> navigationExpression, Action`1<OwnedNavigationBuilder`2<TEntity, TRelatedEntity>> buildAction);
    private OwnedNavigationBuilder`2<TEntity, TRelatedEntity> OwnsOneBuilder(MemberIdentity navigation);
    public virtual OwnedNavigationBuilder`2<TEntity, TRelatedEntity> OwnsMany(string navigationName);
    public virtual OwnedNavigationBuilder`2<TEntity, TRelatedEntity> OwnsMany(Expression`1<Func`2<TEntity, IEnumerable`1<TRelatedEntity>>> navigationExpression);
    public virtual EntityTypeBuilder`1<TEntity> OwnsMany(string navigationName, Action`1<OwnedNavigationBuilder`2<TEntity, TRelatedEntity>> buildAction);
    public virtual EntityTypeBuilder`1<TEntity> OwnsMany(Expression`1<Func`2<TEntity, IEnumerable`1<TRelatedEntity>>> navigationExpression, Action`1<OwnedNavigationBuilder`2<TEntity, TRelatedEntity>> buildAction);
    private OwnedNavigationBuilder`2<TEntity, TRelatedEntity> OwnsManyBuilder(MemberIdentity navigation);
    public virtual ReferenceNavigationBuilder`2<TEntity, TRelatedEntity> HasOne(string navigationName);
    public virtual ReferenceNavigationBuilder`2<TEntity, TRelatedEntity> HasOne(Expression`1<Func`2<TEntity, TRelatedEntity>> navigationExpression);
    public virtual CollectionNavigationBuilder`2<TEntity, TRelatedEntity> HasMany(string navigationName);
    public virtual CollectionNavigationBuilder`2<TEntity, TRelatedEntity> HasMany(Expression`1<Func`2<TEntity, IEnumerable`1<TRelatedEntity>>> navigationExpression);
    public virtual EntityTypeBuilder`1<TEntity> HasChangeTrackingStrategy(ChangeTrackingStrategy changeTrackingStrategy);
    public virtual EntityTypeBuilder`1<TEntity> UsePropertyAccessMode(PropertyAccessMode propertyAccessMode);
    public virtual DataBuilder`1<TEntity> HasData(TEntity[] data);
    public virtual DataBuilder`1<TEntity> HasData(IEnumerable`1<TEntity> data);
    public virtual DataBuilder`1<TEntity> HasData(Object[] data);
    public virtual DataBuilder`1<TEntity> HasData(IEnumerable`1<object> data);
    public virtual DiscriminatorBuilder`1<TDiscriminator> HasDiscriminator(Expression`1<Func`2<TEntity, TDiscriminator>> propertyExpression);
    public virtual EntityTypeBuilder`1<TEntity> HasNoDiscriminator();
    private InternalEntityTypeBuilder get_Builder();
}
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder {
    public IConventionAnnotatable Metadata { get; }
    public IConventionModelBuilder ModelBuilder { get; }
    public abstract virtual IConventionAnnotatable get_Metadata();
    public abstract virtual IConventionModelBuilder get_ModelBuilder();
    public abstract virtual IConventionAnnotatableBuilder HasAnnotation(string name, object value, bool fromDataAnnotation);
    public abstract virtual IConventionAnnotatableBuilder SetOrRemoveAnnotation(string name, object value, bool fromDataAnnotation);
    public abstract virtual bool CanSetAnnotation(string name, object value, bool fromDataAnnotation);
    public abstract virtual IConventionAnnotatableBuilder RemoveAnnotation(string name, bool fromDataAnnotation);
    public abstract virtual bool CanRemoveAnnotation(string name, bool fromDataAnnotation);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder {
    public abstract virtual IConventionDiscriminatorBuilder HasValue(object value, bool fromDataAnnotation);
    public abstract virtual IConventionDiscriminatorBuilder HasValue(IConventionEntityType entityType, object value, bool fromDataAnnotation);
    public abstract virtual bool CanSetValue(object value, bool fromDataAnnotation);
    public abstract virtual bool CanSetValue(IConventionEntityType entityType, object value, bool fromDataAnnotation);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder {
    public IConventionEntityType Metadata { get; }
    public abstract virtual IConventionEntityType get_Metadata();
    public abstract virtual IConventionEntityTypeBuilder HasBaseType(IConventionEntityType baseEntityType, bool fromDataAnnotation);
    public abstract virtual bool CanSetBaseType(IConventionEntityType baseEntityType, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder Property(Type propertyType, string propertyName, bool setTypeConfigurationSource, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder Property(MemberInfo memberInfo, bool fromDataAnnotation);
    public abstract virtual IReadOnlyList`1<IConventionProperty> GetOrCreateProperties(IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
    public abstract virtual IReadOnlyList`1<IConventionProperty> GetOrCreateProperties(IEnumerable`1<MemberInfo> memberInfos, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder RemoveUnusedShadowProperties(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    public abstract virtual IConventionServicePropertyBuilder ServiceProperty(MemberInfo memberInfo, bool fromDataAnnotation);
    public abstract virtual bool IsIgnored(string memberName, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder Ignore(string memberName, bool fromDataAnnotation);
    public abstract virtual bool CanIgnore(string memberName, bool fromDataAnnotation);
    public abstract virtual IConventionKeyBuilder PrimaryKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    public abstract virtual bool CanSetPrimaryKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    public abstract virtual IConventionKeyBuilder HasKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder HasNoKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder HasNoKey(IConventionKey key, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder HasNoKey(bool fromDataAnnotation);
    public abstract virtual IConventionIndexBuilder HasIndex(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder HasNoIndex(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder HasNoIndex(IConventionIndex index, bool fromDataAnnotation);
    public abstract virtual IConventionRelationshipBuilder HasRelationship(IConventionEntityType targetEntityType, bool fromDataAnnotation);
    public abstract virtual IConventionRelationshipBuilder HasRelationship(IConventionEntityType principalEntityType, IReadOnlyList`1<IConventionProperty> dependentProperties, bool fromDataAnnotation);
    public abstract virtual IConventionRelationshipBuilder HasRelationship(IConventionEntityType principalEntityType, IConventionKey principalKey, bool fromDataAnnotation);
    public abstract virtual IConventionRelationshipBuilder HasRelationship(IConventionEntityType principalEntityType, IReadOnlyList`1<IConventionProperty> dependentProperties, IConventionKey principalKey, bool fromDataAnnotation);
    public abstract virtual IConventionRelationshipBuilder HasRelationship(IConventionEntityType targetEntityType, string navigationToTargetName, bool setTargetAsPrincipal, bool fromDataAnnotation);
    public abstract virtual IConventionRelationshipBuilder HasRelationship(IConventionEntityType targetEntityType, MemberInfo navigationToTarget, bool setTargetAsPrincipal, bool fromDataAnnotation);
    public abstract virtual IConventionRelationshipBuilder HasRelationship(IConventionEntityType targetEntityType, string navigationToTargetName, string inverseNavigationName, bool setTargetAsPrincipal, bool fromDataAnnotation);
    public abstract virtual IConventionRelationshipBuilder HasRelationship(IConventionEntityType targetEntityType, MemberInfo navigationToTarget, MemberInfo inverseNavigation, bool setTargetAsPrincipal, bool fromDataAnnotation);
    public abstract virtual IConventionRelationshipBuilder HasOwnership(Type targetEntityType, string navigationToTargetName, bool fromDataAnnotation);
    public abstract virtual IConventionRelationshipBuilder HasOwnership(Type targetEntityType, MemberInfo navigationToTarget, bool fromDataAnnotation);
    public abstract virtual IConventionRelationshipBuilder HasOwnership(Type targetEntityType, string navigationToTargetName, string inverseNavigationName, bool fromDataAnnotation);
    public abstract virtual IConventionRelationshipBuilder HasOwnership(Type targetEntityType, MemberInfo navigationToTarget, MemberInfo inverseNavigation, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder HasNoRelationship(IReadOnlyList`1<IConventionProperty> properties, IConventionKey principalKey, IConventionEntityType principalEntityType, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder HasNoRelationship(IConventionForeignKey foreignKey, bool fromDataAnnotation);
    public abstract virtual bool CanAddNavigation(string navigationName, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder HasQueryFilter(LambdaExpression filter, bool fromDataAnnotation);
    public abstract virtual bool CanSetQueryFilter(LambdaExpression filter, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder HasDefiningQuery(LambdaExpression query, bool fromDataAnnotation);
    public abstract virtual bool CanSetDefiningQuery(LambdaExpression query, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder HasChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, bool fromDataAnnotation);
    public abstract virtual bool CanSetChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    public abstract virtual bool CanSetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    public abstract virtual IConventionDiscriminatorBuilder HasDiscriminator(bool fromDataAnnotation);
    public abstract virtual IConventionDiscriminatorBuilder HasDiscriminator(Type type, bool fromDataAnnotation);
    public abstract virtual IConventionDiscriminatorBuilder HasDiscriminator(string name, bool fromDataAnnotation);
    public abstract virtual IConventionDiscriminatorBuilder HasDiscriminator(string name, Type type, bool fromDataAnnotation);
    public abstract virtual IConventionDiscriminatorBuilder HasDiscriminator(MemberInfo memberInfo, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder HasNoDeclaredDiscriminator(bool fromDataAnnotation);
    public abstract virtual bool CanSetDiscriminator(string name, bool fromDataAnnotation);
    public abstract virtual bool CanSetDiscriminator(Type type, bool fromDataAnnotation);
    public abstract virtual bool CanSetDiscriminator(Type type, string name, bool fromDataAnnotation);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder {
    public IConventionIndex Metadata { get; }
    public abstract virtual IConventionIndex get_Metadata();
    public abstract virtual IConventionIndexBuilder IsUnique(Nullable`1<bool> unique, bool fromDataAnnotation);
    public abstract virtual bool CanSetIsUnique(Nullable`1<bool> unique, bool fromDataAnnotation);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder {
    public IConventionKey Metadata { get; }
    public abstract virtual IConventionKey get_Metadata();
}
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder {
    public IConventionModel Metadata { get; }
    public abstract virtual IConventionModel get_Metadata();
    public abstract virtual IConventionEntityTypeBuilder Entity(string name, Nullable`1<bool> shouldBeOwned, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder Entity(Type type, Nullable`1<bool> shouldBeOwned, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder Entity(string name, string definingNavigationName, IConventionEntityType definingEntityType, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder Entity(Type type, string definingNavigationName, IConventionEntityType definingEntityType, bool fromDataAnnotation);
    public abstract virtual IConventionOwnedEntityTypeBuilder Owned(Type type, bool fromDataAnnotation);
    public abstract virtual bool IsIgnored(Type type, bool fromDataAnnotation);
    public abstract virtual bool IsIgnored(string typeName, bool fromDataAnnotation);
    public abstract virtual IConventionModelBuilder Ignore(Type type, bool fromDataAnnotation);
    public abstract virtual IConventionModelBuilder Ignore(string typeName, bool fromDataAnnotation);
    public abstract virtual IConventionModelBuilder HasNoEntityType(IConventionEntityType entityType, bool fromDataAnnotation);
    public abstract virtual bool CanIgnore(Type type, bool fromDataAnnotation);
    public abstract virtual bool CanIgnore(string typeName, bool fromDataAnnotation);
    public abstract virtual IConventionModelBuilder HasChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, bool fromDataAnnotation);
    public abstract virtual bool CanSetChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, bool fromDataAnnotation);
    public abstract virtual IConventionModelBuilder UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    public abstract virtual bool CanSetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionOwnedEntityTypeBuilder {
}
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder {
    public IConventionProperty Metadata { get; }
    public abstract virtual IConventionProperty get_Metadata();
    public abstract virtual IConventionPropertyBuilder IsRequired(Nullable`1<bool> required, bool fromDataAnnotation);
    public abstract virtual bool CanSetIsRequired(Nullable`1<bool> required, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder ValueGenerated(Nullable`1<ValueGenerated> valueGenerated, bool fromDataAnnotation);
    public abstract virtual bool CanSetValueGenerated(Nullable`1<ValueGenerated> valueGenerated, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder IsConcurrencyToken(Nullable`1<bool> concurrencyToken, bool fromDataAnnotation);
    public abstract virtual bool CanSetIsConcurrencyToken(Nullable`1<bool> concurrencyToken, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder HasField(string fieldName, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder HasField(FieldInfo fieldInfo, bool fromDataAnnotation);
    public abstract virtual bool CanSetField(string fieldName, bool fromDataAnnotation);
    public abstract virtual bool CanSetField(FieldInfo fieldInfo, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    public abstract virtual bool CanSetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder HasMaxLength(Nullable`1<int> maxLength, bool fromDataAnnotation);
    public abstract virtual bool CanSetMaxLength(Nullable`1<int> maxLength, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder IsUnicode(Nullable`1<bool> unicode, bool fromDataAnnotation);
    public abstract virtual bool CanSetIsUnicode(Nullable`1<bool> unicode, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder BeforeSave(Nullable`1<PropertySaveBehavior> behavior, bool fromDataAnnotation);
    public abstract virtual bool CanSetBeforeSave(Nullable`1<PropertySaveBehavior> behavior, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder AfterSave(Nullable`1<PropertySaveBehavior> behavior, bool fromDataAnnotation);
    public abstract virtual bool CanSetAfterSave(Nullable`1<PropertySaveBehavior> behavior, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder HasValueGenerator(Type valueGeneratorType, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder HasValueGenerator(Func`3<IProperty, IEntityType, ValueGenerator> factory, bool fromDataAnnotation);
    public abstract virtual bool CanSetValueGenerator(Func`3<IProperty, IEntityType, ValueGenerator> factory, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder HasConversion(ValueConverter converter, bool fromDataAnnotation);
    public abstract virtual bool CanSetConversion(ValueConverter converter, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder HasConversion(Type providerClrType, bool fromDataAnnotation);
    public abstract virtual bool CanSetConversion(Type providerClrType, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder HasValueComparer(ValueComparer comparer, bool fromDataAnnotation);
    public abstract virtual bool CanSetValueComparer(ValueComparer comparer, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder HasKeyValueComparer(ValueComparer comparer, bool fromDataAnnotation);
    public abstract virtual bool CanSetKeyValueComparer(ValueComparer comparer, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder HasStructuralValueComparer(ValueComparer comparer, bool fromDataAnnotation);
    public abstract virtual bool CanSetStructuralValueComparer(ValueComparer comparer, bool fromDataAnnotation);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder {
    public IConventionForeignKey Metadata { get; }
    public abstract virtual IConventionForeignKey get_Metadata();
    public abstract virtual IConventionRelationshipBuilder HasEntityTypes(IConventionEntityType principalEntityType, IConventionEntityType dependentEntityType, bool fromDataAnnotation);
    public abstract virtual bool CanInvert(IReadOnlyList`1<IConventionProperty> newForeignKeyProperties, bool fromDataAnnotation);
    public abstract virtual IConventionRelationshipBuilder HasForeignKey(IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
    public abstract virtual IConventionRelationshipBuilder HasForeignKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    public abstract virtual bool CanSetForeignKey(IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
    public abstract virtual bool CanSetForeignKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    public abstract virtual IConventionRelationshipBuilder HasPrincipalKey(IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
    public abstract virtual IConventionRelationshipBuilder HasPrincipalKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    public abstract virtual bool CanSetPrincipalKey(IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
    public abstract virtual bool CanSetPrincipalKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    public abstract virtual IConventionRelationshipBuilder HasNavigation(string name, bool pointsToPrincipal, bool fromDataAnnotation);
    public abstract virtual IConventionRelationshipBuilder HasNavigation(MemberInfo property, bool pointsToPrincipal, bool fromDataAnnotation);
    public abstract virtual IConventionRelationshipBuilder HasNavigations(string navigationToPrincipalName, string navigationToDependentName, bool fromDataAnnotation);
    public abstract virtual IConventionRelationshipBuilder HasNavigations(MemberInfo navigationToPrincipal, MemberInfo navigationToDependent, bool fromDataAnnotation);
    public abstract virtual bool CanSetNavigation(string name, bool pointsToPrincipal, bool fromDataAnnotation);
    public abstract virtual bool CanSetNavigation(MemberInfo property, bool pointsToPrincipal, bool fromDataAnnotation);
    public abstract virtual bool CanSetNavigations(string navigationToPrincipalName, string navigationToDependentName, bool fromDataAnnotation);
    public abstract virtual bool CanSetNavigations(MemberInfo navigationToPrincipal, MemberInfo navigationToDependent, bool fromDataAnnotation);
    public abstract virtual IConventionRelationshipBuilder HasField(string fieldName, bool pointsToPrincipal, bool fromDataAnnotation);
    public abstract virtual IConventionRelationshipBuilder HasField(FieldInfo fieldInfo, bool pointsToPrincipal, bool fromDataAnnotation);
    public abstract virtual bool CanSetField(string fieldName, bool pointsToPrincipal, bool fromDataAnnotation);
    public abstract virtual bool CanSetField(FieldInfo fieldInfo, bool pointsToPrincipal, bool fromDataAnnotation);
    public abstract virtual IConventionRelationshipBuilder IsEagerLoaded(Nullable`1<bool> eagerLoaded, bool pointsToPrincipal, bool fromDataAnnotation);
    public abstract virtual bool CanSetIsEagerLoaded(Nullable`1<bool> eagerLoaded, bool pointsToPrincipal, bool fromDataAnnotation);
    public abstract virtual IConventionRelationshipBuilder IsRequired(Nullable`1<bool> required, bool fromDataAnnotation);
    public abstract virtual bool CanSetIsRequired(Nullable`1<bool> required, bool fromDataAnnotation);
    public abstract virtual IConventionRelationshipBuilder IsOwnership(Nullable`1<bool> ownership, bool fromDataAnnotation);
    public abstract virtual bool CanSetIsOwnership(Nullable`1<bool> ownership, bool fromDataAnnotation);
    public abstract virtual IConventionRelationshipBuilder IsUnique(Nullable`1<bool> unique, bool fromDataAnnotation);
    public abstract virtual bool CanSetIsUnique(Nullable`1<bool> unique, bool fromDataAnnotation);
    public abstract virtual IConventionRelationshipBuilder OnDelete(Nullable`1<DeleteBehavior> deleteBehavior, bool fromDataAnnotation);
    public abstract virtual bool CanSetOnDelete(Nullable`1<DeleteBehavior> deleteBehavior, bool fromDataAnnotation);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder {
    public IConventionServiceProperty Metadata { get; }
    public abstract virtual IConventionServiceProperty get_Metadata();
    public abstract virtual IConventionServicePropertyBuilder HasField(string fieldName, bool fromDataAnnotation);
    public abstract virtual IConventionServicePropertyBuilder HasField(FieldInfo fieldInfo, bool fromDataAnnotation);
    public abstract virtual bool CanSetField(string fieldName, bool fromDataAnnotation);
    public abstract virtual bool CanSetField(FieldInfo fieldInfo, bool fromDataAnnotation);
    public abstract virtual IConventionServicePropertyBuilder HasParameterBinding(ServiceParameterBinding parameterBinding, bool fromDataAnnotation);
    public abstract virtual bool CanSetParameterBinding(ServiceParameterBinding parameterBinding, bool fromDataAnnotation);
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder : object {
    private InternalIndexBuilder _builder;
    private InternalIndexBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder>.Instance { get; }
    public IMutableIndex Metadata { get; }
    private InternalIndexBuilder Builder { get; }
    [EntityFrameworkInternalAttribute]
public IndexBuilder(IMutableIndex index);
    private sealed virtual override InternalIndexBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder>.get_Instance();
    public virtual IMutableIndex get_Metadata();
    public virtual IndexBuilder HasAnnotation(string annotation, object value);
    public virtual IndexBuilder IsUnique(bool unique);
    private InternalIndexBuilder get_Builder();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder`1 : IndexBuilder {
    [EntityFrameworkInternalAttribute]
public IndexBuilder`1(IMutableIndex index);
    public virtual IndexBuilder`1<T> HasAnnotation(string annotation, object value);
    public virtual IndexBuilder`1<T> IsUnique(bool unique);
}
public abstract class Microsoft.EntityFrameworkCore.Metadata.Builders.InvertibleRelationshipBuilderBase : object {
    private IReadOnlyList`1<Property> _foreignKeyProperties;
    private IReadOnlyList`1<Property> _principalKeyProperties;
    private Nullable`1<bool> _required;
    [CompilerGeneratedAttribute]
private IMutableEntityType <DeclaringEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private IMutableEntityType <RelatedEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalRelationshipBuilder <Builder>k__BackingField;
    protected IMutableEntityType DeclaringEntityType { get; }
    protected IMutableEntityType RelatedEntityType { get; }
    [EntityFrameworkInternalAttribute]
protected InternalRelationshipBuilder Builder { get; protected set; }
    private InternalRelationshipBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder>.Instance { get; }
    public IMutableForeignKey Metadata { get; }
    [EntityFrameworkInternalAttribute]
protected InvertibleRelationshipBuilderBase(IMutableEntityType declaringEntityType, IMutableEntityType relatedEntityType, IMutableForeignKey foreignKey);
    [EntityFrameworkInternalAttribute]
protected InvertibleRelationshipBuilderBase(InternalRelationshipBuilder builder, InvertibleRelationshipBuilderBase oldBuilder, bool inverted, bool foreignKeySet, bool principalKeySet, bool requiredSet);
    [CompilerGeneratedAttribute]
protected virtual IMutableEntityType get_DeclaringEntityType();
    [CompilerGeneratedAttribute]
protected virtual IMutableEntityType get_RelatedEntityType();
    [CompilerGeneratedAttribute]
protected virtual InternalRelationshipBuilder get_Builder();
    [CompilerGeneratedAttribute]
protected virtual void set_Builder(InternalRelationshipBuilder value);
    private sealed virtual override InternalRelationshipBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder>.get_Instance();
    public virtual IMutableForeignKey get_Metadata();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder : object {
    private InternalKeyBuilder _builder;
    private InternalKeyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder>.Instance { get; }
    public IMutableKey Metadata { get; }
    private InternalKeyBuilder Builder { get; }
    [EntityFrameworkInternalAttribute]
public KeyBuilder(IMutableKey key);
    private sealed virtual override InternalKeyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder>.get_Instance();
    public virtual IMutableKey get_Metadata();
    public virtual KeyBuilder HasAnnotation(string annotation, object value);
    private InternalKeyBuilder get_Builder();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedEntityTypeBuilder : object {
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedEntityTypeBuilder`1 : OwnedEntityTypeBuilder {
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder : object {
    private InternalRelationshipBuilder _builder;
    [CompilerGeneratedAttribute]
private EntityType <PrincipalEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityType <DependentEntityType>k__BackingField;
    protected EntityType PrincipalEntityType { get; }
    protected EntityType DependentEntityType { get; }
    [EntityFrameworkInternalAttribute]
protected InternalRelationshipBuilder Builder { get; private set; }
    private InternalEntityTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder>.Instance { get; }
    public IMutableForeignKey Metadata { get; }
    public IMutableEntityType OwnedEntityType { get; }
    [EntityFrameworkInternalAttribute]
public OwnedNavigationBuilder(EntityType principalEntityType, EntityType dependentEntityType, InternalRelationshipBuilder builder);
    [CompilerGeneratedAttribute]
protected virtual EntityType get_PrincipalEntityType();
    [CompilerGeneratedAttribute]
protected virtual EntityType get_DependentEntityType();
    protected virtual InternalRelationshipBuilder get_Builder();
    private void set_Builder(InternalRelationshipBuilder value);
    [EntityFrameworkInternalAttribute]
protected virtual T UpdateBuilder(Func`1<T> configure);
    private sealed virtual override InternalEntityTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder>.get_Instance();
    public virtual IMutableForeignKey get_Metadata();
    public virtual IMutableEntityType get_OwnedEntityType();
    public virtual OwnedNavigationBuilder HasAnnotation(string annotation, object value);
    public virtual KeyBuilder HasKey(String[] propertyNames);
    public virtual PropertyBuilder Property(string propertyName);
    public virtual PropertyBuilder`1<TProperty> Property(string propertyName);
    public virtual PropertyBuilder Property(Type propertyType, string propertyName);
    public virtual OwnedNavigationBuilder Ignore(string propertyName);
    public virtual IndexBuilder HasIndex(String[] propertyNames);
    public virtual OwnershipBuilder WithOwner(string ownerReference);
    public virtual OwnedNavigationBuilder OwnsOne(string ownedTypeName, string navigationName);
    public virtual OwnedNavigationBuilder OwnsOne(Type ownedType, string navigationName);
    public virtual OwnedNavigationBuilder OwnsOne(string ownedTypeName, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    public virtual OwnedNavigationBuilder OwnsOne(Type ownedType, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    private OwnedNavigationBuilder OwnsOneBuilder(TypeIdentity& ownedType, string navigationName);
    public virtual OwnedNavigationBuilder OwnsMany(string ownedTypeName, string navigationName);
    public virtual OwnedNavigationBuilder OwnsMany(Type ownedType, string navigationName);
    public virtual OwnedNavigationBuilder OwnsMany(string ownedTypeName, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    public virtual OwnedNavigationBuilder OwnsMany(Type ownedType, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    private OwnedNavigationBuilder OwnsManyBuilder(TypeIdentity& ownedType, string navigationName);
    public virtual ReferenceNavigationBuilder HasOne(string relatedTypeName, string navigationName);
    public virtual ReferenceNavigationBuilder HasOne(string navigationName);
    public virtual ReferenceNavigationBuilder HasOne(Type relatedType, string navigationName);
    [EntityFrameworkInternalAttribute]
protected virtual EntityType FindRelatedEntityType(string relatedTypeName, string navigationName);
    [EntityFrameworkInternalAttribute]
protected virtual EntityType FindRelatedEntityType(Type relatedType, string navigationName);
    public virtual OwnedNavigationBuilder HasChangeTrackingStrategy(ChangeTrackingStrategy changeTrackingStrategy);
    public virtual OwnedNavigationBuilder UsePropertyAccessMode(PropertyAccessMode propertyAccessMode);
    public virtual DataBuilder HasData(Object[] data);
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2 : OwnedNavigationBuilder {
    [EntityFrameworkInternalAttribute]
public OwnedNavigationBuilder`2(EntityType principalEntityType, EntityType dependentEntityType, InternalRelationshipBuilder builder);
    public virtual OwnedNavigationBuilder`2<TEntity, TDependentEntity> HasAnnotation(string annotation, object value);
    public virtual KeyBuilder HasKey(Expression`1<Func`2<TDependentEntity, object>> keyExpression);
    public virtual PropertyBuilder`1<TProperty> Property(Expression`1<Func`2<TDependentEntity, TProperty>> propertyExpression);
    public virtual OwnedNavigationBuilder`2<TEntity, TDependentEntity> Ignore(string propertyName);
    public virtual OwnedNavigationBuilder`2<TEntity, TDependentEntity> Ignore(Expression`1<Func`2<TDependentEntity, object>> propertyExpression);
    public virtual IndexBuilder HasIndex(Expression`1<Func`2<TDependentEntity, object>> indexExpression);
    public virtual OwnershipBuilder`2<TEntity, TDependentEntity> WithOwner(string ownerReference);
    public virtual OwnershipBuilder`2<TEntity, TDependentEntity> WithOwner(Expression`1<Func`2<TDependentEntity, TEntity>> referenceExpression);
    public virtual OwnedNavigationBuilder`2<TDependentEntity, TNewDependentEntity> OwnsOne(string navigationName);
    public virtual OwnedNavigationBuilder`2<TDependentEntity, TNewDependentEntity> OwnsOne(Expression`1<Func`2<TDependentEntity, TNewDependentEntity>> navigationExpression);
    public virtual OwnedNavigationBuilder`2<TEntity, TDependentEntity> OwnsOne(string navigationName, Action`1<OwnedNavigationBuilder`2<TDependentEntity, TNewDependentEntity>> buildAction);
    public virtual OwnedNavigationBuilder`2<TEntity, TDependentEntity> OwnsOne(Expression`1<Func`2<TDependentEntity, TNewDependentEntity>> navigationExpression, Action`1<OwnedNavigationBuilder`2<TDependentEntity, TNewDependentEntity>> buildAction);
    private OwnedNavigationBuilder`2<TDependentEntity, TNewDependentEntity> OwnsOneBuilder(MemberIdentity navigation);
    public virtual OwnedNavigationBuilder`2<TDependentEntity, TNewDependentEntity> OwnsMany(string navigationName);
    public virtual OwnedNavigationBuilder`2<TDependentEntity, TNewDependentEntity> OwnsMany(Expression`1<Func`2<TDependentEntity, IEnumerable`1<TNewDependentEntity>>> navigationExpression);
    public virtual OwnedNavigationBuilder`2<TEntity, TDependentEntity> OwnsMany(string navigationName, Action`1<OwnedNavigationBuilder`2<TDependentEntity, TNewDependentEntity>> buildAction);
    public virtual OwnedNavigationBuilder`2<TEntity, TDependentEntity> OwnsMany(Expression`1<Func`2<TDependentEntity, IEnumerable`1<TNewDependentEntity>>> navigationExpression, Action`1<OwnedNavigationBuilder`2<TDependentEntity, TNewDependentEntity>> buildAction);
    private OwnedNavigationBuilder`2<TDependentEntity, TNewRelatedEntity> OwnsManyBuilder(MemberIdentity navigation);
    public virtual ReferenceNavigationBuilder`2<TDependentEntity, TNewRelatedEntity> HasOne(string navigationName);
    public virtual ReferenceNavigationBuilder`2<TDependentEntity, TNewRelatedEntity> HasOne(Expression`1<Func`2<TDependentEntity, TNewRelatedEntity>> navigationExpression);
    public virtual OwnedNavigationBuilder`2<TEntity, TDependentEntity> HasChangeTrackingStrategy(ChangeTrackingStrategy changeTrackingStrategy);
    public virtual OwnedNavigationBuilder`2<TEntity, TDependentEntity> UsePropertyAccessMode(PropertyAccessMode propertyAccessMode);
    public virtual DataBuilder`1<TDependentEntity> HasData(TDependentEntity[] data);
    public virtual DataBuilder`1<TDependentEntity> HasData(Object[] data);
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder : RelationshipBuilderBase {
    [EntityFrameworkInternalAttribute]
public OwnershipBuilder(IMutableEntityType principalEntityType, IMutableEntityType dependentEntityType, IMutableForeignKey foreignKey);
    [EntityFrameworkInternalAttribute]
protected OwnershipBuilder(InternalRelationshipBuilder builder, OwnershipBuilder oldBuilder, bool foreignKeySet, bool principalKeySet, bool requiredSet);
    public virtual OwnershipBuilder HasAnnotation(string annotation, object value);
    public virtual OwnershipBuilder HasForeignKey(String[] foreignKeyPropertyNames);
    public virtual OwnershipBuilder HasPrincipalKey(String[] keyPropertyNames);
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder`2 : OwnershipBuilder {
    [EntityFrameworkInternalAttribute]
public OwnershipBuilder`2(IMutableEntityType principalEntityType, IMutableEntityType dependentEntityType, IMutableForeignKey foreignKey);
    [EntityFrameworkInternalAttribute]
protected OwnershipBuilder`2(InternalRelationshipBuilder builder, OwnershipBuilder oldBuilder, bool foreignKeySet, bool principalKeySet, bool requiredSet);
    public virtual OwnershipBuilder`2<TEntity, TDependentEntity> HasAnnotation(string annotation, object value);
    public virtual OwnershipBuilder`2<TEntity, TDependentEntity> HasForeignKey(String[] foreignKeyPropertyNames);
    public virtual OwnershipBuilder`2<TEntity, TDependentEntity> HasForeignKey(Expression`1<Func`2<TDependentEntity, object>> foreignKeyExpression);
    public virtual OwnershipBuilder`2<TEntity, TDependentEntity> HasPrincipalKey(String[] keyPropertyNames);
    public virtual OwnershipBuilder`2<TEntity, TDependentEntity> HasPrincipalKey(Expression`1<Func`2<TEntity, object>> keyExpression);
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder : object {
    [CompilerGeneratedAttribute]
private InternalPropertyBuilder <Builder>k__BackingField;
    private InternalPropertyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder>.Instance { get; }
    public IMutableProperty Metadata { get; }
    private InternalPropertyBuilder Builder { get; }
    [EntityFrameworkInternalAttribute]
public PropertyBuilder(IMutableProperty property);
    private sealed virtual override InternalPropertyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder>.get_Instance();
    public virtual IMutableProperty get_Metadata();
    public virtual PropertyBuilder HasAnnotation(string annotation, object value);
    public virtual PropertyBuilder IsRequired(bool required);
    public virtual PropertyBuilder HasMaxLength(int maxLength);
    public virtual PropertyBuilder IsUnicode(bool unicode);
    public virtual PropertyBuilder IsRowVersion();
    public virtual PropertyBuilder HasValueGenerator();
    public virtual PropertyBuilder HasValueGenerator(Type valueGeneratorType);
    public virtual PropertyBuilder HasValueGenerator(Func`3<IProperty, IEntityType, ValueGenerator> factory);
    public virtual PropertyBuilder IsConcurrencyToken(bool concurrencyToken);
    public virtual PropertyBuilder ValueGeneratedNever();
    public virtual PropertyBuilder ValueGeneratedOnAdd();
    public virtual PropertyBuilder ValueGeneratedOnAddOrUpdate();
    public virtual PropertyBuilder ValueGeneratedOnUpdate();
    public virtual PropertyBuilder HasField(string fieldName);
    public virtual PropertyBuilder UsePropertyAccessMode(PropertyAccessMode propertyAccessMode);
    public virtual PropertyBuilder HasConversion();
    public virtual PropertyBuilder HasConversion(Type providerClrType);
    public virtual PropertyBuilder HasConversion(ValueConverter converter);
    [CompilerGeneratedAttribute]
private InternalPropertyBuilder get_Builder();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1 : PropertyBuilder {
    [EntityFrameworkInternalAttribute]
public PropertyBuilder`1(IMutableProperty property);
    public virtual PropertyBuilder`1<TProperty> HasAnnotation(string annotation, object value);
    public virtual PropertyBuilder`1<TProperty> IsRequired(bool required);
    public virtual PropertyBuilder`1<TProperty> HasMaxLength(int maxLength);
    public virtual PropertyBuilder`1<TProperty> IsUnicode(bool unicode);
    public virtual PropertyBuilder`1<TProperty> IsRowVersion();
    public virtual PropertyBuilder`1<TProperty> HasValueGenerator();
    public virtual PropertyBuilder`1<TProperty> HasValueGenerator(Type valueGeneratorType);
    public virtual PropertyBuilder`1<TProperty> HasValueGenerator(Func`3<IProperty, IEntityType, ValueGenerator> factory);
    public virtual PropertyBuilder`1<TProperty> IsConcurrencyToken(bool concurrencyToken);
    public virtual PropertyBuilder`1<TProperty> ValueGeneratedNever();
    public virtual PropertyBuilder`1<TProperty> ValueGeneratedOnAdd();
    public virtual PropertyBuilder`1<TProperty> ValueGeneratedOnAddOrUpdate();
    public virtual PropertyBuilder`1<TProperty> ValueGeneratedOnUpdate();
    public virtual PropertyBuilder`1<TProperty> HasField(string fieldName);
    public virtual PropertyBuilder`1<TProperty> HasConversion();
    public virtual PropertyBuilder`1<TProperty> HasConversion(Type providerClrType);
    public virtual PropertyBuilder`1<TProperty> HasConversion(Expression`1<Func`2<TProperty, TProvider>> convertToProviderExpression, Expression`1<Func`2<TProvider, TProperty>> convertFromProviderExpression);
    public virtual PropertyBuilder`1<TProperty> HasConversion(ValueConverter`2<TProperty, TProvider> converter);
    public virtual PropertyBuilder`1<TProperty> HasConversion(ValueConverter converter);
    public virtual PropertyBuilder`1<TProperty> UsePropertyAccessMode(PropertyAccessMode propertyAccessMode);
}
[ObsoleteAttribute("Use EntityTypeBuilder instead")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.QueryTypeBuilder`1 : EntityTypeBuilder`1<TQuery> {
    [EntityFrameworkInternalAttribute]
public QueryTypeBuilder`1(IMutableEntityType entityType);
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder : RelationshipBuilderBase {
    [EntityFrameworkInternalAttribute]
public ReferenceCollectionBuilder(IMutableEntityType principalEntityType, IMutableEntityType dependentEntityType, IMutableForeignKey foreignKey);
    [EntityFrameworkInternalAttribute]
protected ReferenceCollectionBuilder(InternalRelationshipBuilder builder, ReferenceCollectionBuilder oldBuilder, bool foreignKeySet, bool principalKeySet, bool requiredSet);
    public virtual ReferenceCollectionBuilder HasAnnotation(string annotation, object value);
    public virtual ReferenceCollectionBuilder HasForeignKey(String[] foreignKeyPropertyNames);
    [EntityFrameworkInternalAttribute]
protected virtual InternalRelationshipBuilder HasForeignKeyBuilder(IReadOnlyList`1<string> foreignKeyPropertyNames);
    [EntityFrameworkInternalAttribute]
protected virtual InternalRelationshipBuilder HasForeignKeyBuilder(IReadOnlyList`1<MemberInfo> foreignKeyProperties);
    public virtual ReferenceCollectionBuilder HasPrincipalKey(String[] keyPropertyNames);
    [EntityFrameworkInternalAttribute]
protected virtual InternalRelationshipBuilder HasPrincipalKeyBuilder(IReadOnlyList`1<string> keyPropertyNames);
    [EntityFrameworkInternalAttribute]
protected virtual InternalRelationshipBuilder HasPrincipalKeyBuilder(IReadOnlyList`1<MemberInfo> keyProperties);
    public virtual ReferenceCollectionBuilder IsRequired(bool required);
    public virtual ReferenceCollectionBuilder OnDelete(DeleteBehavior deleteBehavior);
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2 : ReferenceCollectionBuilder {
    [EntityFrameworkInternalAttribute]
public ReferenceCollectionBuilder`2(IMutableEntityType principalEntityType, IMutableEntityType dependentEntityType, IMutableForeignKey foreignKey);
    [EntityFrameworkInternalAttribute]
protected ReferenceCollectionBuilder`2(InternalRelationshipBuilder builder, ReferenceCollectionBuilder oldBuilder, bool foreignKeySet, bool principalKeySet, bool requiredSet);
    public virtual ReferenceCollectionBuilder`2<TPrincipalEntity, TDependentEntity> HasForeignKey(String[] foreignKeyPropertyNames);
    public virtual ReferenceCollectionBuilder`2<TPrincipalEntity, TDependentEntity> HasForeignKey(Expression`1<Func`2<TDependentEntity, object>> foreignKeyExpression);
    public virtual ReferenceCollectionBuilder`2<TPrincipalEntity, TDependentEntity> HasPrincipalKey(String[] keyPropertyNames);
    public virtual ReferenceCollectionBuilder`2<TPrincipalEntity, TDependentEntity> HasPrincipalKey(Expression`1<Func`2<TPrincipalEntity, object>> keyExpression);
    public virtual ReferenceCollectionBuilder`2<TPrincipalEntity, TDependentEntity> HasAnnotation(string annotation, object value);
    public virtual ReferenceCollectionBuilder`2<TPrincipalEntity, TDependentEntity> IsRequired(bool required);
    public virtual ReferenceCollectionBuilder`2<TPrincipalEntity, TDependentEntity> OnDelete(DeleteBehavior deleteBehavior);
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder : object {
    [CompilerGeneratedAttribute]
private InternalRelationshipBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReferenceName>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfo <ReferenceMember>k__BackingField;
    [CompilerGeneratedAttribute]
private IMutableEntityType <RelatedEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private IMutableEntityType <DeclaringEntityType>k__BackingField;
    private InternalRelationshipBuilder Builder { get; }
    [EntityFrameworkInternalAttribute]
protected string ReferenceName { get; }
    [EntityFrameworkInternalAttribute]
protected MemberInfo ReferenceMember { get; }
    [EntityFrameworkInternalAttribute]
protected IMutableEntityType RelatedEntityType { get; }
    [EntityFrameworkInternalAttribute]
protected IMutableEntityType DeclaringEntityType { get; }
    private InternalRelationshipBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public ReferenceNavigationBuilder(IMutableEntityType declaringEntityType, IMutableEntityType relatedEntityType, string navigationName, IMutableForeignKey foreignKey);
    [EntityFrameworkInternalAttribute]
public ReferenceNavigationBuilder(IMutableEntityType declaringEntityType, IMutableEntityType relatedEntityType, MemberInfo navigationMemberInfo, IMutableForeignKey foreignKey);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
private InternalRelationshipBuilder get_Builder();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
protected virtual string get_ReferenceName();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
protected virtual MemberInfo get_ReferenceMember();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
protected virtual IMutableEntityType get_RelatedEntityType();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
protected virtual IMutableEntityType get_DeclaringEntityType();
    private sealed virtual override InternalRelationshipBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder>.get_Instance();
    public virtual ReferenceCollectionBuilder WithMany(string collection);
    [EntityFrameworkInternalAttribute]
protected virtual InternalRelationshipBuilder WithManyBuilder(string navigationName);
    [EntityFrameworkInternalAttribute]
protected virtual InternalRelationshipBuilder WithManyBuilder(MemberInfo navigationMemberInfo);
    private InternalRelationshipBuilder WithManyBuilder(MemberIdentity collection);
    public virtual ReferenceReferenceBuilder WithOne(string reference);
    [EntityFrameworkInternalAttribute]
protected virtual InternalRelationshipBuilder WithOneBuilder(string navigationName);
    [EntityFrameworkInternalAttribute]
protected virtual InternalRelationshipBuilder WithOneBuilder(MemberInfo navigationMemberInfo);
    private InternalRelationshipBuilder WithOneBuilder(MemberIdentity reference);
    private static void ThrowForConflictingNavigation(ForeignKey foreignKey, string newInverseName, bool newToPrincipal);
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder`2 : ReferenceNavigationBuilder {
    [EntityFrameworkInternalAttribute]
public ReferenceNavigationBuilder`2(IMutableEntityType declaringEntityType, IMutableEntityType relatedEntityType, string navigationName, IMutableForeignKey foreignKey);
    [EntityFrameworkInternalAttribute]
public ReferenceNavigationBuilder`2(IMutableEntityType declaringEntityType, IMutableEntityType relatedEntityType, MemberInfo navigationMemberInfo, IMutableForeignKey foreignKey);
    public virtual ReferenceCollectionBuilder`2<TRelatedEntity, TEntity> WithMany(string navigationName);
    public virtual ReferenceCollectionBuilder`2<TRelatedEntity, TEntity> WithMany(Expression`1<Func`2<TRelatedEntity, IEnumerable`1<TEntity>>> navigationExpression);
    public virtual ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> WithOne(string navigationName);
    public virtual ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> WithOne(Expression`1<Func`2<TRelatedEntity, TEntity>> navigationExpression);
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder : InvertibleRelationshipBuilderBase {
    [EntityFrameworkInternalAttribute]
public ReferenceReferenceBuilder(IMutableEntityType declaringEntityType, IMutableEntityType relatedEntityType, IMutableForeignKey foreignKey);
    [EntityFrameworkInternalAttribute]
protected ReferenceReferenceBuilder(InternalRelationshipBuilder builder, ReferenceReferenceBuilder oldBuilder, bool inverted, bool foreignKeySet, bool principalKeySet, bool requiredSet);
    public virtual ReferenceReferenceBuilder HasAnnotation(string annotation, object value);
    public virtual ReferenceReferenceBuilder HasForeignKey(string dependentEntityTypeName, String[] foreignKeyPropertyNames);
    public virtual ReferenceReferenceBuilder HasForeignKey(Type dependentEntityType, String[] foreignKeyPropertyNames);
    [EntityFrameworkInternalAttribute]
protected virtual InternalRelationshipBuilder HasForeignKeyBuilder(EntityType dependentEntityType, string dependentEntityTypeName, IReadOnlyList`1<string> foreignKeyPropertyNames);
    [EntityFrameworkInternalAttribute]
protected virtual InternalRelationshipBuilder HasForeignKeyBuilder(EntityType dependentEntityType, string dependentEntityTypeName, IReadOnlyList`1<MemberInfo> foreignKeyProperties);
    private InternalRelationshipBuilder HasForeignKeyBuilder(EntityType dependentEntityType, string dependentEntityTypeName, Func`3<InternalRelationshipBuilder, EntityType, InternalRelationshipBuilder> hasForeignKey);
    public virtual ReferenceReferenceBuilder HasPrincipalKey(string principalEntityTypeName, String[] keyPropertyNames);
    public virtual ReferenceReferenceBuilder HasPrincipalKey(Type principalEntityType, String[] keyPropertyNames);
    [EntityFrameworkInternalAttribute]
protected virtual InternalRelationshipBuilder HasPrincipalKeyBuilder(EntityType principalEntityType, string principalEntityTypeName, IReadOnlyList`1<string> foreignKeyPropertyNames);
    [EntityFrameworkInternalAttribute]
protected virtual InternalRelationshipBuilder HasPrincipalKeyBuilder(EntityType principalEntityType, string principalEntityTypeName, IReadOnlyList`1<MemberInfo> foreignKeyProperties);
    private InternalRelationshipBuilder HasPrincipalKeyBuilder(EntityType principalEntityType, string principalEntityTypeName, Func`2<InternalRelationshipBuilder, InternalRelationshipBuilder> hasPrincipalKey);
    [EntityFrameworkInternalAttribute]
protected virtual EntityType ResolveEntityType(string entityTypeName);
    [EntityFrameworkInternalAttribute]
protected virtual EntityType ResolveEntityType(Type entityType);
    private EntityType GetOtherEntityType(EntityType entityType);
    public virtual ReferenceReferenceBuilder IsRequired(bool required);
    public virtual ReferenceReferenceBuilder OnDelete(DeleteBehavior deleteBehavior);
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2 : ReferenceReferenceBuilder {
    [EntityFrameworkInternalAttribute]
public ReferenceReferenceBuilder`2(IMutableEntityType declaringEntityType, IMutableEntityType relatedEntityType, IMutableForeignKey foreignKey);
    [EntityFrameworkInternalAttribute]
protected ReferenceReferenceBuilder`2(InternalRelationshipBuilder builder, ReferenceReferenceBuilder oldBuilder, bool inverted, bool foreignKeySet, bool principalKeySet, bool requiredSet);
    public virtual ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> HasAnnotation(string annotation, object value);
    public virtual ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> HasForeignKey(string dependentEntityTypeName, String[] foreignKeyPropertyNames);
    public virtual ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> HasForeignKey(Type dependentEntityType, String[] foreignKeyPropertyNames);
    public virtual ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> HasForeignKey(String[] foreignKeyPropertyNames);
    public virtual ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> HasForeignKey(Expression`1<Func`2<TDependentEntity, object>> foreignKeyExpression);
    public virtual ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> HasPrincipalKey(string principalEntityTypeName, String[] keyPropertyNames);
    public virtual ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> HasPrincipalKey(Type principalEntityType, String[] keyPropertyNames);
    public virtual ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> HasPrincipalKey(String[] keyPropertyNames);
    public virtual ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> HasPrincipalKey(Expression`1<Func`2<TPrincipalEntity, object>> keyExpression);
    public virtual ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> IsRequired(bool required);
    public virtual ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> OnDelete(DeleteBehavior deleteBehavior);
}
public abstract class Microsoft.EntityFrameworkCore.Metadata.Builders.RelationshipBuilderBase : object {
    private IReadOnlyList`1<Property> _foreignKeyProperties;
    private IReadOnlyList`1<Property> _principalKeyProperties;
    private Nullable`1<bool> _required;
    [CompilerGeneratedAttribute]
private IMutableEntityType <PrincipalEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private IMutableEntityType <DependentEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalRelationshipBuilder <Builder>k__BackingField;
    protected IMutableEntityType PrincipalEntityType { get; }
    protected IMutableEntityType DependentEntityType { get; }
    [EntityFrameworkInternalAttribute]
protected InternalRelationshipBuilder Builder { get; protected set; }
    public IMutableForeignKey Metadata { get; }
    private InternalRelationshipBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder>.Instance { get; }
    [EntityFrameworkInternalAttribute]
protected RelationshipBuilderBase(IMutableEntityType principalEntityType, IMutableEntityType dependentEntityType, IMutableForeignKey foreignKey);
    [EntityFrameworkInternalAttribute]
protected RelationshipBuilderBase(InternalRelationshipBuilder builder, RelationshipBuilderBase oldBuilder, bool foreignKeySet, bool principalKeySet, bool requiredSet);
    [CompilerGeneratedAttribute]
protected virtual IMutableEntityType get_PrincipalEntityType();
    [CompilerGeneratedAttribute]
protected virtual IMutableEntityType get_DependentEntityType();
    [CompilerGeneratedAttribute]
protected virtual InternalRelationshipBuilder get_Builder();
    [CompilerGeneratedAttribute]
protected virtual void set_Builder(InternalRelationshipBuilder value);
    public virtual IMutableForeignKey get_Metadata();
    private sealed virtual override InternalRelationshipBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder>.get_Instance();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
public enum Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource : Enum {
    public int value__;
    public static ConfigurationSource Explicit;
    public static ConfigurationSource DataAnnotation;
    public static ConfigurationSource Convention;
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.ConfigurationSourceExtensions : object {
    [ExtensionAttribute]
[ContractAnnotationAttribute("oldConfigurationSource:null => true")]
public static bool Overrides(ConfigurationSource newConfigurationSource, Nullable`1<ConfigurationSource> oldConfigurationSource);
    [ExtensionAttribute]
public static bool Overrides(Nullable`1<ConfigurationSource> newConfigurationSource, Nullable`1<ConfigurationSource> oldConfigurationSource);
    [ExtensionAttribute]
public static bool OverridesStrictly(ConfigurationSource newConfigurationSource, Nullable`1<ConfigurationSource> oldConfigurationSource);
    [ExtensionAttribute]
public static bool OverridesStrictly(Nullable`1<ConfigurationSource> newConfigurationSource, Nullable`1<ConfigurationSource> oldConfigurationSource);
}
public class Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding : InstantiationBinding {
    [CompilerGeneratedAttribute]
private ConstructorInfo <Constructor>k__BackingField;
    public ConstructorInfo Constructor { get; }
    public Type RuntimeType { get; }
    public ConstructorBinding(ConstructorInfo constructor, IReadOnlyList`1<ParameterBinding> parameterBindings);
    [CompilerGeneratedAttribute]
public virtual ConstructorInfo get_Constructor();
    public virtual Expression CreateConstructorExpression(ParameterBindingInfo bindingInfo);
    public virtual Type get_RuntimeType();
}
public class Microsoft.EntityFrameworkCore.Metadata.ContextParameterBinding : ServiceParameterBinding {
    public ContextParameterBinding(Type contextType, IPropertyBase serviceProperty);
    public virtual Expression BindToParameter(Expression materializationExpression, Expression entityTypeExpression);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.BackingFieldConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public BackingFieldConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, IConventionContext`1<IConventionPropertyBuilder> context);
    public virtual void ProcessNavigationAdded(IConventionRelationshipBuilder relationshipBuilder, IConventionNavigation navigation, IConventionContext`1<IConventionNavigation> context);
    private FieldInfo GetFieldToSet(IConventionPropertyBase propertyBase);
    private static FieldInfo TryMatchFieldName(IConventionPropertyBase propertyBase, Type entityClrType);
    private static FieldInfo TryMatch(KeyValuePair`2[] array, string prefix, string middle, string suffix, IConventionPropertyBase propertyBase, FieldInfo existingMatch, Type entityClrType, string propertyName);
    private static int PrefixBinarySearch(KeyValuePair`2[] array, string prefix, int left, int right);
    private static bool IsConvertible(TypeInfo typeInfo, FieldInfo fieldInfo);
    public virtual void ProcessModelFinalized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.BaseTypeDiscoveryConvention : InheritanceDiscoveryConventionBase {
    public BaseTypeDiscoveryConvention(ProviderConventionSetBuilderDependencies dependencies);
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.CascadeDeleteConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public CascadeDeleteConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessForeignKeyAdded(IConventionRelationshipBuilder relationshipBuilder, IConventionContext`1<IConventionRelationshipBuilder> context);
    public virtual void ProcessForeignKeyRequirednessChanged(IConventionRelationshipBuilder relationshipBuilder, IConventionContext`1<IConventionRelationshipBuilder> context);
    protected virtual DeleteBehavior GetTargetDeleteBehavior(IConventionForeignKey foreignKey);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.ChangeTrackingStrategyConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public ChangeTrackingStrategyConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessModelFinalized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.ConcurrencyCheckAttributeConvention : PropertyAttributeConventionBase`1<ConcurrencyCheckAttribute> {
    public ConcurrencyCheckAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, ConcurrencyCheckAttribute attribute, MemberInfo clrMember, IConventionContext context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.ConstructorBindingConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public ConstructorBindingConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessModelFinalized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    private static string FormatConstructorString(IEntityType entityType, InstantiationBinding binding);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet : object {
    [CompilerGeneratedAttribute]
private IList`1<IModelInitializedConvention> <ModelInitializedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IModelFinalizedConvention> <ModelFinalizedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IModelAnnotationChangedConvention> <ModelAnnotationChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IEntityTypeAddedConvention> <EntityTypeAddedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IEntityTypeIgnoredConvention> <EntityTypeIgnoredConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IEntityTypeRemovedConvention> <EntityTypeRemovedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IEntityTypeMemberIgnoredConvention> <EntityTypeMemberIgnoredConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IEntityTypeBaseTypeChangedConvention> <EntityTypeBaseTypeChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IEntityTypePrimaryKeyChangedConvention> <EntityTypePrimaryKeyChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IEntityTypeAnnotationChangedConvention> <EntityTypeAnnotationChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IForeignKeyAddedConvention> <ForeignKeyAddedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IForeignKeyRemovedConvention> <ForeignKeyRemovedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IForeignKeyPrincipalEndChangedConvention> <ForeignKeyPrincipalEndChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IForeignKeyPropertiesChangedConvention> <ForeignKeyPropertiesChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IForeignKeyUniquenessChangedConvention> <ForeignKeyUniquenessChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IForeignKeyRequirednessChangedConvention> <ForeignKeyRequirednessChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IForeignKeyOwnershipChangedConvention> <ForeignKeyOwnershipChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IForeignKeyAnnotationChangedConvention> <ForeignKeyAnnotationChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<INavigationAddedConvention> <NavigationAddedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<INavigationRemovedConvention> <NavigationRemovedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IKeyAddedConvention> <KeyAddedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IKeyRemovedConvention> <KeyRemovedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IKeyAnnotationChangedConvention> <KeyAnnotationChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IIndexAddedConvention> <IndexAddedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IIndexRemovedConvention> <IndexRemovedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IIndexUniquenessChangedConvention> <IndexUniquenessChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IIndexAnnotationChangedConvention> <IndexAnnotationChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IPropertyAddedConvention> <PropertyAddedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IPropertyNullabilityChangedConvention> <PropertyNullabilityChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IPropertyFieldChangedConvention> <PropertyFieldChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IPropertyAnnotationChangedConvention> <PropertyAnnotationChangedConventions>k__BackingField;
    public IList`1<IModelInitializedConvention> ModelInitializedConventions { get; }
    public IList`1<IModelFinalizedConvention> ModelFinalizedConventions { get; }
    public IList`1<IModelAnnotationChangedConvention> ModelAnnotationChangedConventions { get; }
    public IList`1<IEntityTypeAddedConvention> EntityTypeAddedConventions { get; }
    public IList`1<IEntityTypeIgnoredConvention> EntityTypeIgnoredConventions { get; }
    public IList`1<IEntityTypeRemovedConvention> EntityTypeRemovedConventions { get; }
    public IList`1<IEntityTypeMemberIgnoredConvention> EntityTypeMemberIgnoredConventions { get; }
    public IList`1<IEntityTypeBaseTypeChangedConvention> EntityTypeBaseTypeChangedConventions { get; }
    public IList`1<IEntityTypePrimaryKeyChangedConvention> EntityTypePrimaryKeyChangedConventions { get; }
    public IList`1<IEntityTypeAnnotationChangedConvention> EntityTypeAnnotationChangedConventions { get; }
    public IList`1<IForeignKeyAddedConvention> ForeignKeyAddedConventions { get; }
    public IList`1<IForeignKeyRemovedConvention> ForeignKeyRemovedConventions { get; }
    public IList`1<IForeignKeyPrincipalEndChangedConvention> ForeignKeyPrincipalEndChangedConventions { get; }
    public IList`1<IForeignKeyPropertiesChangedConvention> ForeignKeyPropertiesChangedConventions { get; }
    public IList`1<IForeignKeyUniquenessChangedConvention> ForeignKeyUniquenessChangedConventions { get; }
    public IList`1<IForeignKeyRequirednessChangedConvention> ForeignKeyRequirednessChangedConventions { get; }
    public IList`1<IForeignKeyOwnershipChangedConvention> ForeignKeyOwnershipChangedConventions { get; }
    public IList`1<IForeignKeyAnnotationChangedConvention> ForeignKeyAnnotationChangedConventions { get; }
    public IList`1<INavigationAddedConvention> NavigationAddedConventions { get; }
    public IList`1<INavigationRemovedConvention> NavigationRemovedConventions { get; }
    public IList`1<IKeyAddedConvention> KeyAddedConventions { get; }
    public IList`1<IKeyRemovedConvention> KeyRemovedConventions { get; }
    public IList`1<IKeyAnnotationChangedConvention> KeyAnnotationChangedConventions { get; }
    public IList`1<IIndexAddedConvention> IndexAddedConventions { get; }
    public IList`1<IIndexRemovedConvention> IndexRemovedConventions { get; }
    public IList`1<IIndexUniquenessChangedConvention> IndexUniquenessChangedConventions { get; }
    public IList`1<IIndexAnnotationChangedConvention> IndexAnnotationChangedConventions { get; }
    public IList`1<IPropertyAddedConvention> PropertyAddedConventions { get; }
    public IList`1<IPropertyNullabilityChangedConvention> PropertyNullabilityChangedConventions { get; }
    public IList`1<IPropertyFieldChangedConvention> PropertyFieldChangedConventions { get; }
    public IList`1<IPropertyAnnotationChangedConvention> PropertyAnnotationChangedConventions { get; }
    [CompilerGeneratedAttribute]
public virtual IList`1<IModelInitializedConvention> get_ModelInitializedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IModelFinalizedConvention> get_ModelFinalizedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IModelAnnotationChangedConvention> get_ModelAnnotationChangedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IEntityTypeAddedConvention> get_EntityTypeAddedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IEntityTypeIgnoredConvention> get_EntityTypeIgnoredConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IEntityTypeRemovedConvention> get_EntityTypeRemovedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IEntityTypeMemberIgnoredConvention> get_EntityTypeMemberIgnoredConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IEntityTypeBaseTypeChangedConvention> get_EntityTypeBaseTypeChangedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IEntityTypePrimaryKeyChangedConvention> get_EntityTypePrimaryKeyChangedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IEntityTypeAnnotationChangedConvention> get_EntityTypeAnnotationChangedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IForeignKeyAddedConvention> get_ForeignKeyAddedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IForeignKeyRemovedConvention> get_ForeignKeyRemovedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IForeignKeyPrincipalEndChangedConvention> get_ForeignKeyPrincipalEndChangedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IForeignKeyPropertiesChangedConvention> get_ForeignKeyPropertiesChangedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IForeignKeyUniquenessChangedConvention> get_ForeignKeyUniquenessChangedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IForeignKeyRequirednessChangedConvention> get_ForeignKeyRequirednessChangedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IForeignKeyOwnershipChangedConvention> get_ForeignKeyOwnershipChangedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IForeignKeyAnnotationChangedConvention> get_ForeignKeyAnnotationChangedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<INavigationAddedConvention> get_NavigationAddedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<INavigationRemovedConvention> get_NavigationRemovedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IKeyAddedConvention> get_KeyAddedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IKeyRemovedConvention> get_KeyRemovedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IKeyAnnotationChangedConvention> get_KeyAnnotationChangedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IIndexAddedConvention> get_IndexAddedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IIndexRemovedConvention> get_IndexRemovedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IIndexUniquenessChangedConvention> get_IndexUniquenessChangedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IIndexAnnotationChangedConvention> get_IndexAnnotationChangedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IPropertyAddedConvention> get_PropertyAddedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IPropertyNullabilityChangedConvention> get_PropertyNullabilityChangedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IPropertyFieldChangedConvention> get_PropertyFieldChangedConventions();
    [CompilerGeneratedAttribute]
public virtual IList`1<IPropertyAnnotationChangedConvention> get_PropertyAnnotationChangedConventions();
    public static bool Replace(IList`1<TConvention> conventionsList, TImplementation newConvention);
    public static bool AddBefore(IList`1<TConvention> conventionsList, TConvention newConvention, Type existingConventionType);
    public static bool AddAfter(IList`1<TConvention> conventionsList, TConvention newConvention, Type existingConventionType);
    public static bool Remove(IList`1<TConvention> conventionsList, Type existingConventionType);
    public static ConventionSet CreateConventionSet(DbContext context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.DatabaseGeneratedAttributeConvention : PropertyAttributeConventionBase`1<DatabaseGeneratedAttribute> {
    public DatabaseGeneratedAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, DatabaseGeneratedAttribute attribute, MemberInfo clrMember, IConventionContext context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.DbSetFindingConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public DbSetFindingConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessModelInitialized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.DerivedTypeDiscoveryConvention : InheritanceDiscoveryConventionBase {
    public DerivedTypeDiscoveryConvention(ProviderConventionSetBuilderDependencies dependencies);
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.DiscriminatorConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public DiscriminatorConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    public virtual void ProcessEntityTypeRemoved(IConventionModelBuilder modelBuilder, IConventionEntityType entityType, IConventionContext`1<IConventionEntityType> context);
    protected virtual void SetDefaultDiscriminatorValues(IEnumerable`1<IConventionEntityType> entityTypes, IConventionDiscriminatorBuilder discriminatorBuilder);
}
public abstract class Microsoft.EntityFrameworkCore.Metadata.Conventions.EntityTypeAttributeConventionBase`1 : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected EntityTypeAttributeConventionBase`1(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
    protected abstract virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, TAttribute attribute, IConventionContext`1<IConventionEntityTypeBuilder> context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.ForeignKeyAttributeConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public ForeignKeyAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessForeignKeyAdded(IConventionRelationshipBuilder relationshipBuilder, IConventionContext`1<IConventionRelationshipBuilder> context);
    private static IConventionRelationshipBuilder SplitNavigationsToSeparateRelationships(IConventionRelationshipBuilder relationshipBuilder);
    private static ForeignKeyAttribute GetForeignKeyAttribute(IConventionTypeBase entityType, string propertyName);
    private static ForeignKeyAttribute GetForeignKeyAttribute(IConventionNavigation navigation);
    private static InversePropertyAttribute GetInversePropertyAttribute(IConventionNavigation navigation);
    private static TAttribute GetAttribute(MemberInfo memberInfo);
    [ContractAnnotationAttribute("navigationName:null => null")]
private MemberInfo FindForeignKeyAttributeOnProperty(IConventionEntityType entityType, string navigationName);
    private Type FindCandidateNavigationPropertyType(PropertyInfo propertyInfo);
    private static IReadOnlyList`1<string> FindCandidateDependentPropertiesThroughNavigation(IConventionRelationshipBuilder relationshipBuilder, bool pointsToPrincipal);
    public virtual void ProcessModelFinalized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.ForeignKeyIndexConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public ForeignKeyIndexConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessForeignKeyAdded(IConventionRelationshipBuilder relationshipBuilder, IConventionContext`1<IConventionRelationshipBuilder> context);
    public virtual void ProcessForeignKeyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionForeignKey foreignKey, IConventionContext`1<IConventionForeignKey> context);
    public virtual void ProcessForeignKeyPropertiesChanged(IConventionRelationshipBuilder relationshipBuilder, IReadOnlyList`1<IConventionProperty> oldDependentProperties, IConventionKey oldPrincipalKey, IConventionContext`1<IConventionRelationshipBuilder> context);
    private static void OnForeignKeyRemoved(IConventionEntityType declaringType, IReadOnlyList`1<IConventionProperty> foreignKeyProperties);
    public virtual void ProcessKeyAdded(IConventionKeyBuilder keyBuilder, IConventionContext`1<IConventionKeyBuilder> context);
    public virtual void ProcessKeyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionKey key, IConventionContext`1<IConventionKey> context);
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    public virtual void ProcessIndexAdded(IConventionIndexBuilder indexBuilder, IConventionContext`1<IConventionIndexBuilder> context);
    public virtual void ProcessIndexRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionIndex index, IConventionContext`1<IConventionIndex> context);
    public virtual void ProcessForeignKeyUniquenessChanged(IConventionRelationshipBuilder relationshipBuilder, IConventionContext`1<IConventionRelationshipBuilder> context);
    public virtual void ProcessIndexUniquenessChanged(IConventionIndexBuilder indexBuilder, IConventionContext`1<IConventionIndexBuilder> context);
    protected virtual IConventionIndex CreateIndex(IReadOnlyList`1<IConventionProperty> properties, bool unique, IConventionEntityTypeBuilder entityTypeBuilder);
    protected virtual bool AreIndexedBy(IReadOnlyList`1<IConventionProperty> properties, bool unique, IReadOnlyList`1<IConventionProperty> coveringIndexProperties, bool coveringIndexUnique);
    private static void RemoveIndex(IConventionIndex index);
    public virtual void ProcessModelFinalized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.ForeignKeyPropertyDiscoveryConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public ForeignKeyPropertyDiscoveryConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessForeignKeyAdded(IConventionRelationshipBuilder relationshipBuilder, IConventionContext`1<IConventionRelationshipBuilder> context);
    private IConventionRelationshipBuilder DiscoverProperties(IConventionRelationshipBuilder relationshipBuilder, IConventionContext context);
    private IReadOnlyList`1<IConventionProperty> FindCandidateForeignKeyProperties(IConventionForeignKey foreignKey, bool onDependent, bool matchPk);
    private static IReadOnlyList`1<IConventionProperty> GetCompatiblePrimaryKeyProperties(IConventionEntityType dependentEntityType, IConventionEntityType principalEntityType, IReadOnlyList`1<IConventionProperty> propertiesToReference);
    private bool TryFindMatchingProperties(IConventionForeignKey foreignKey, string baseName, bool onDependent, bool matchPk, IReadOnlyList`1& match);
    private static IConventionProperty TryGetProperty(IConventionEntityType entityType, string prefix, string suffix);
    public virtual void ProcessNavigationAdded(IConventionRelationshipBuilder relationshipBuilder, IConventionNavigation navigation, IConventionContext`1<IConventionNavigation> context);
    public virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, IConventionContext`1<IConventionPropertyBuilder> context);
    private void Process(IConventionPropertyBuilder propertyBuilder, IConventionContext context);
    public virtual void ProcessEntityTypeMemberIgnored(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionContext`1<string> context);
    private void Process(IConventionEntityType entityType, IConventionContext context);
    public virtual void ProcessPropertyFieldChanged(IConventionPropertyBuilder propertyBuilder, FieldInfo newFieldInfo, FieldInfo oldFieldInfo, IConventionContext`1<FieldInfo> context);
    public virtual void ProcessPropertyNullabilityChanged(IConventionPropertyBuilder propertyBuilder, IConventionContext`1<IConventionPropertyBuilder> context);
    public virtual void ProcessForeignKeyUniquenessChanged(IConventionRelationshipBuilder relationshipBuilder, IConventionContext`1<IConventionRelationshipBuilder> context);
    public virtual void ProcessForeignKeyRequirednessChanged(IConventionRelationshipBuilder relationshipBuilder, IConventionContext`1<IConventionRelationshipBuilder> context);
    public virtual void ProcessForeignKeyPropertiesChanged(IConventionRelationshipBuilder relationshipBuilder, IReadOnlyList`1<IConventionProperty> oldDependentProperties, IConventionKey oldPrincipalKey, IConventionContext`1<IConventionRelationshipBuilder> context);
    public virtual void ProcessForeignKeyPrincipalEndChanged(IConventionRelationshipBuilder relationshipBuilder, IConventionContext`1<IConventionRelationshipBuilder> context);
    public virtual void ProcessKeyAdded(IConventionKeyBuilder keyBuilder, IConventionContext`1<IConventionKeyBuilder> context);
    public virtual void ProcessKeyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionKey key, IConventionContext`1<IConventionKey> context);
    public virtual void ProcessEntityTypePrimaryKeyChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionKey newPrimaryKey, IConventionKey previousPrimaryKey, IConventionContext`1<IConventionKey> context);
    public virtual void ProcessModelFinalized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    private static string GetPropertyBaseName(IConventionForeignKey foreignKey);
    private static bool HasUniquifiedProperties(IConventionForeignKey foreignKey);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IConvention {
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionBatch {
    public abstract virtual IConventionForeignKey Run(IConventionForeignKey foreignKey);
    public abstract virtual IMetadataReference`1<IConventionForeignKey> Track(IConventionForeignKey foreignKey);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext {
    public abstract virtual void StopProcessing();
    public abstract virtual IConventionBatch DelayConventions();
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext`1 {
    public abstract virtual void StopProcessing(TMetadata result);
    public abstract virtual void StopProcessingIfChanged(TMetadata result);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IEntityTypeAddedConvention {
    public abstract virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IEntityTypeAnnotationChangedConvention {
    public abstract virtual void ProcessEntityTypeAnnotationChanged(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IEntityTypeBaseTypeChangedConvention {
    public abstract virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IEntityTypeIgnoredConvention {
    public abstract virtual void ProcessEntityTypeIgnored(IConventionModelBuilder modelBuilder, string name, Type type, IConventionContext`1<string> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IEntityTypeMemberIgnoredConvention {
    public abstract virtual void ProcessEntityTypeMemberIgnored(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionContext`1<string> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IEntityTypePrimaryKeyChangedConvention {
    public abstract virtual void ProcessEntityTypePrimaryKeyChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionKey newPrimaryKey, IConventionKey previousPrimaryKey, IConventionContext`1<IConventionKey> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IEntityTypeRemovedConvention {
    public abstract virtual void ProcessEntityTypeRemoved(IConventionModelBuilder modelBuilder, IConventionEntityType entityType, IConventionContext`1<IConventionEntityType> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IForeignKeyAddedConvention {
    public abstract virtual void ProcessForeignKeyAdded(IConventionRelationshipBuilder relationshipBuilder, IConventionContext`1<IConventionRelationshipBuilder> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IForeignKeyAnnotationChangedConvention {
    public abstract virtual void ProcessForeignKeyAnnotationChanged(IConventionRelationshipBuilder relationshipBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IForeignKeyOwnershipChangedConvention {
    public abstract virtual void ProcessForeignKeyOwnershipChanged(IConventionRelationshipBuilder relationshipBuilder, IConventionContext`1<IConventionRelationshipBuilder> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IForeignKeyPrincipalEndChangedConvention {
    public abstract virtual void ProcessForeignKeyPrincipalEndChanged(IConventionRelationshipBuilder relationshipBuilder, IConventionContext`1<IConventionRelationshipBuilder> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IForeignKeyPropertiesChangedConvention {
    public abstract virtual void ProcessForeignKeyPropertiesChanged(IConventionRelationshipBuilder relationshipBuilder, IReadOnlyList`1<IConventionProperty> oldDependentProperties, IConventionKey oldPrincipalKey, IConventionContext`1<IConventionRelationshipBuilder> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IForeignKeyRemovedConvention {
    public abstract virtual void ProcessForeignKeyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionForeignKey foreignKey, IConventionContext`1<IConventionForeignKey> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IForeignKeyRequirednessChangedConvention {
    public abstract virtual void ProcessForeignKeyRequirednessChanged(IConventionRelationshipBuilder relationshipBuilder, IConventionContext`1<IConventionRelationshipBuilder> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IForeignKeyUniquenessChangedConvention {
    public abstract virtual void ProcessForeignKeyUniquenessChanged(IConventionRelationshipBuilder relationshipBuilder, IConventionContext`1<IConventionRelationshipBuilder> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IIndexAddedConvention {
    public abstract virtual void ProcessIndexAdded(IConventionIndexBuilder indexBuilder, IConventionContext`1<IConventionIndexBuilder> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IIndexAnnotationChangedConvention {
    public abstract virtual void ProcessIndexAnnotationChanged(IConventionIndexBuilder indexBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IIndexRemovedConvention {
    public abstract virtual void ProcessIndexRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionIndex index, IConventionContext`1<IConventionIndex> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IIndexUniquenessChangedConvention {
    public abstract virtual void ProcessIndexUniquenessChanged(IConventionIndexBuilder indexBuilder, IConventionContext`1<IConventionIndexBuilder> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IKeyAddedConvention {
    public abstract virtual void ProcessKeyAdded(IConventionKeyBuilder keyBuilder, IConventionContext`1<IConventionKeyBuilder> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IKeyAnnotationChangedConvention {
    public abstract virtual void ProcessKeyAnnotationChanged(IConventionKeyBuilder keyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IKeyRemovedConvention {
    public abstract virtual void ProcessKeyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionKey key, IConventionContext`1<IConventionKey> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IModelAnnotationChangedConvention {
    public abstract virtual void ProcessModelAnnotationChanged(IConventionModelBuilder modelBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IModelFinalizedConvention {
    public abstract virtual void ProcessModelFinalized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IModelInitializedConvention {
    public abstract virtual void ProcessModelInitialized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.INavigationAddedConvention {
    public abstract virtual void ProcessNavigationAdded(IConventionRelationshipBuilder relationshipBuilder, IConventionNavigation navigation, IConventionContext`1<IConventionNavigation> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.INavigationRemovedConvention {
    public abstract virtual void ProcessNavigationRemoved(IConventionEntityTypeBuilder sourceEntityTypeBuilder, IConventionEntityTypeBuilder targetEntityTypeBuilder, string navigationName, MemberInfo memberInfo, IConventionContext`1<string> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder {
    public abstract virtual ConventionSet CreateConventionSet();
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetPlugin {
    public abstract virtual ConventionSet ModifyConventions(ConventionSet conventionSet);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IProviderConventionSetBuilder {
    public abstract virtual ConventionSet CreateConventionSet();
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilder : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public ProviderConventionSetBuilder(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual ConventionSet CreateConventionSet();
    protected virtual bool ReplaceConvention(IList`1<TConvention> conventionsList, TImplementation newConvention);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies : object {
    private ICurrentDbContext _currentContext;
    [CompilerGeneratedAttribute]
private ITypeMappingSource <TypeMappingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IParameterBindingFactories <ParameterBindingFactories>k__BackingField;
    [CompilerGeneratedAttribute]
private IMemberClassifier <MemberClassifier>k__BackingField;
    [CompilerGeneratedAttribute]
private IConstructorBindingFactory <ConstructorBindingFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Model> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Validation> <ValidationLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbSetFinder <SetFinder>k__BackingField;
    [CompilerGeneratedAttribute]
private IModelValidator <ModelValidator>k__BackingField;
    public ITypeMappingSource TypeMappingSource { get; }
    public IParameterBindingFactories ParameterBindingFactories { get; }
    public IMemberClassifier MemberClassifier { get; }
    public IConstructorBindingFactory ConstructorBindingFactory { get; }
    public IDiagnosticsLogger`1<Model> Logger { get; }
    public IDiagnosticsLogger`1<Validation> ValidationLogger { get; }
    public IDbSetFinder SetFinder { get; }
    public Type ContextType { get; }
    public IModelValidator ModelValidator { get; }
    [EntityFrameworkInternalAttribute]
public ProviderConventionSetBuilderDependencies(ITypeMappingSource typeMappingSource, IConstructorBindingFactory constructorBindingFactory, IParameterBindingFactories parameterBindingFactories, IMemberClassifier memberClassifier, IDiagnosticsLogger`1<Model> logger, IDiagnosticsLogger`1<Validation> validationLogger, IDbSetFinder setFinder, ICurrentDbContext currentContext, IModelValidator validator);
    [CompilerGeneratedAttribute]
public ITypeMappingSource get_TypeMappingSource();
    [CompilerGeneratedAttribute]
public IParameterBindingFactories get_ParameterBindingFactories();
    [CompilerGeneratedAttribute]
public IMemberClassifier get_MemberClassifier();
    [CompilerGeneratedAttribute]
public IConstructorBindingFactory get_ConstructorBindingFactory();
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Model> get_Logger();
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Validation> get_ValidationLogger();
    [CompilerGeneratedAttribute]
public IDbSetFinder get_SetFinder();
    public Type get_ContextType();
    [CompilerGeneratedAttribute]
public IModelValidator get_ModelValidator();
    public ProviderConventionSetBuilderDependencies With(ITypeMappingSource typeMappingSource);
    public ProviderConventionSetBuilderDependencies With(IConstructorBindingFactory constructorBindingFactory);
    public ProviderConventionSetBuilderDependencies With(IDiagnosticsLogger`1<Model> logger);
    public ProviderConventionSetBuilderDependencies With(IDiagnosticsLogger`1<Validation> validationLogger);
    public ProviderConventionSetBuilderDependencies With(IParameterBindingFactories parameterBindingFactories);
    public ProviderConventionSetBuilderDependencies With(IMemberClassifier memberClassifier);
    public ProviderConventionSetBuilderDependencies With(IDbSetFinder setFinder);
    public ProviderConventionSetBuilderDependencies With(ICurrentDbContext currentContext);
    public ProviderConventionSetBuilderDependencies With(IModelValidator validator);
}
public abstract class Microsoft.EntityFrameworkCore.Metadata.Conventions.InheritanceDiscoveryConventionBase : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected InheritanceDiscoveryConventionBase(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    protected virtual IConventionEntityType FindClosestBaseType(IConventionEntityType entityType);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionBatchExtensions : object {
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static InternalRelationshipBuilder Run(IConventionBatch batch, InternalRelationshipBuilder relationshipBuilder);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionContext`1 : object {
    private bool _stopProcessing;
    private ConventionDispatcher _dispatcher;
    private TMetadata _result;
    public TMetadata Result { get; }
    public ConventionContext`1(ConventionDispatcher dispatcher);
    public virtual TMetadata get_Result();
    public virtual void StopProcessing();
    public virtual void StopProcessing(TMetadata result);
    public virtual void StopProcessingIfChanged(TMetadata result);
    public virtual IConventionBatch DelayConventions();
    public virtual bool ShouldStopProcessing();
    public virtual void ResetState(TMetadata input);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher : object {
    private ConventionScope _scope;
    private ImmediateConventionScope _immediateConventionScope;
    [CompilerGeneratedAttribute]
private MetadataTracker <Tracker>k__BackingField;
    public MetadataTracker Tracker { get; }
    public ConventionDispatcher(ConventionSet conventionSet);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual MetadataTracker get_Tracker();
    public virtual IConventionModelBuilder OnModelFinalized(IConventionModelBuilder modelBuilder);
    public virtual IConventionModelBuilder OnModelInitialized(IConventionModelBuilder modelBuilder);
    public virtual IConventionAnnotation OnModelAnnotationChanged(IConventionModelBuilder modelBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    public virtual IConventionEntityTypeBuilder OnEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder);
    public virtual string OnEntityTypeIgnored(IConventionModelBuilder modelBuilder, string name, Type type);
    public virtual IConventionEntityType OnEntityTypeRemoved(IConventionModelBuilder modelBuilder, IConventionEntityType type);
    public virtual string OnEntityTypeMemberIgnored(IConventionEntityTypeBuilder entityTypeBuilder, string name);
    public virtual IConventionEntityType OnEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType previousBaseType);
    public virtual IConventionAnnotation OnEntityTypeAnnotationChanged(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    public virtual IConventionRelationshipBuilder OnForeignKeyAdded(IConventionRelationshipBuilder relationshipBuilder);
    public virtual IConventionForeignKey OnForeignKeyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionForeignKey foreignKey);
    public virtual void OnForeignKeyPropertiesChanged(InternalRelationshipBuilder relationshipBuilder, IReadOnlyList`1<Property> oldDependentProperties, Key oldPrincipalKey);
    public virtual IConventionRelationshipBuilder OnForeignKeyUniquenessChanged(IConventionRelationshipBuilder relationshipBuilder);
    public virtual IConventionRelationshipBuilder OnForeignKeyRequirednessChanged(IConventionRelationshipBuilder relationshipBuilder);
    public virtual IConventionRelationshipBuilder OnForeignKeyOwnershipChanged(IConventionRelationshipBuilder relationshipBuilder);
    public virtual IConventionRelationshipBuilder OnForeignKeyPrincipalEndChanged(IConventionRelationshipBuilder relationshipBuilder);
    public virtual IConventionAnnotation OnForeignKeyAnnotationChanged(IConventionRelationshipBuilder relationshipBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    public virtual IConventionNavigation OnNavigationAdded(IConventionRelationshipBuilder relationshipBuilder, IConventionNavigation navigation);
    public virtual string OnNavigationRemoved(IConventionEntityTypeBuilder sourceEntityTypeBuilder, IConventionEntityTypeBuilder targetEntityTypeBuilder, string navigationName, MemberInfo memberInfo);
    public virtual IConventionKeyBuilder OnKeyAdded(IConventionKeyBuilder keyBuilder);
    public virtual IConventionKey OnKeyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionKey key);
    public virtual IConventionAnnotation OnKeyAnnotationChanged(IConventionKeyBuilder keyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    public virtual IConventionKey OnPrimaryKeyChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionKey newPrimaryKey, IConventionKey previousPrimaryKey);
    public virtual IConventionIndexBuilder OnIndexAdded(IConventionIndexBuilder indexBuilder);
    public virtual void OnIndexRemoved(InternalEntityTypeBuilder entityTypeBuilder, Index index);
    public virtual IConventionIndexBuilder OnIndexUniquenessChanged(IConventionIndexBuilder indexBuilder);
    public virtual IConventionAnnotation OnIndexAnnotationChanged(IConventionIndexBuilder indexBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    public virtual IConventionPropertyBuilder OnPropertyAdded(IConventionPropertyBuilder propertyBuilder);
    public virtual IConventionPropertyBuilder OnPropertyNullableChanged(IConventionPropertyBuilder propertyBuilder);
    public virtual FieldInfo OnPropertyFieldChanged(InternalPropertyBuilder propertyBuilder, FieldInfo newFieldInfo, FieldInfo oldFieldInfo);
    public virtual IConventionAnnotation OnPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    public virtual IConventionBatch DelayConventions();
    public virtual T Run(Func`1<T> func, ForeignKey& foreignKey);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IReadableConventionContext {
    public abstract virtual bool ShouldStopProcessing();
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.MetadataTracker : object {
    private Dictionary`2<ForeignKey, Reference`1<ForeignKey>> _trackedForeignKeys;
    public virtual void Update(ForeignKey oldForeignKey, ForeignKey newForeignKey);
    public virtual Reference`1<ForeignKey> Track(ForeignKey foreignKey);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.Internal.IReferenceRoot<Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey>.Release(Reference`1<ForeignKey> foreignKeyReference);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RuntimeConventionSetBuilder : object {
    private IProviderConventionSetBuilder _conventionSetBuilder;
    private IList`1<IConventionSetPlugin> _plugins;
    public RuntimeConventionSetBuilder(IProviderConventionSetBuilder providerConventionSetBuilder, IEnumerable`1<IConventionSetPlugin> plugins);
    public virtual ConventionSet CreateConventionSet();
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.InversePropertyAttributeConvention : NavigationAttributeConventionBase`1<InversePropertyAttribute> {
    public InversePropertyAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, MemberInfo navigationMemberInfo, Type targetClrType, InversePropertyAttribute attribute, IConventionContext`1<IConventionEntityTypeBuilder> context);
    private void Process(IConventionEntityTypeBuilder entityTypeBuilder, MemberInfo navigationMemberInfo, Type targetClrType, InversePropertyAttribute attribute);
    private IConventionRelationshipBuilder ConfigureInverseNavigation(IConventionEntityTypeBuilder entityTypeBuilder, MemberInfo navigationMemberInfo, IConventionEntityTypeBuilder targetEntityTypeBuilder, InversePropertyAttribute attribute);
    public virtual void ProcessEntityTypeIgnored(IConventionModelBuilder modelBuilder, Type type, MemberInfo navigationMemberInfo, Type targetClrType, InversePropertyAttribute attribute, IConventionContext`1<string> context);
    public virtual void ProcessNavigationAdded(IConventionRelationshipBuilder relationshipBuilder, IConventionNavigation navigation, InversePropertyAttribute attribute, IConventionContext`1<IConventionNavigation> context);
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, MemberInfo navigationMemberInfo, Type targetClrType, InversePropertyAttribute attribute, IConventionContext`1<IConventionEntityType> context);
    public virtual void ProcessEntityTypeMemberIgnored(IConventionEntityTypeBuilder entityTypeBuilder, MemberInfo navigationMemberInfo, Type targetClrType, InversePropertyAttribute attribute, IConventionContext`1<string> context);
    public virtual void ProcessModelFinalized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    public static bool IsAmbiguous(IConventionEntityType entityType, MemberInfo navigation, IConventionEntityType targetEntityType);
    private static bool IsAmbiguousInverse(MemberInfo navigation, IConventionEntityType entityType, List`1<ValueTuple`2<MemberInfo, IConventionEntityType>> referencingNavigationsWithAttribute);
    private static Nullable`1<ValueTuple`2<MemberInfo, IConventionEntityType>> FindAmbiguousInverse(MemberInfo navigation, IConventionEntityType entityType, List`1<ValueTuple`2<MemberInfo, IConventionEntityType>> referencingNavigationsWithAttribute);
    private static List`1<ValueTuple`2<MemberInfo, IConventionEntityType>> AddInverseNavigation(IConventionEntityType entityType, MemberInfo navigation, IConventionEntityType targetEntityType, MemberInfo inverseNavigation);
    private static void RemoveInverseNavigation(IConventionEntityType entityType, MemberInfo navigation, IConventionEntityType targetEntityType);
    private static IConventionEntityType FindActualEntityType(IConventionEntityType entityType);
    private static Dictionary`2<string, ValueTuple`2<MemberInfo, List`1<ValueTuple`2<MemberInfo, IConventionEntityType>>>> GetInverseNavigations(IConventionAnnotatable entityType);
    private static void SetInverseNavigations(IConventionAnnotatableBuilder entityTypeBuilder, Dictionary`2<string, ValueTuple`2<MemberInfo, List`1<ValueTuple`2<MemberInfo, IConventionEntityType>>>> inverseNavigations);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IPropertyAddedConvention {
    public abstract virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, IConventionContext`1<IConventionPropertyBuilder> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IPropertyAnnotationChangedConvention {
    public abstract virtual void ProcessPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IPropertyFieldChangedConvention {
    public abstract virtual void ProcessPropertyFieldChanged(IConventionPropertyBuilder propertyBuilder, FieldInfo newFieldInfo, FieldInfo oldFieldInfo, IConventionContext`1<FieldInfo> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IPropertyNullabilityChangedConvention {
    public abstract virtual void ProcessPropertyNullabilityChanged(IConventionPropertyBuilder propertyBuilder, IConventionContext`1<IConventionPropertyBuilder> context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.KeyAttributeConvention : PropertyAttributeConventionBase`1<KeyAttribute> {
    public KeyAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, KeyAttribute attribute, MemberInfo clrMember, IConventionContext context);
    public virtual void ProcessModelFinalized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.KeyDiscoveryConvention : object {
    private static string KeySuffix;
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public KeyDiscoveryConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    private void TryConfigurePrimaryKey(IConventionEntityTypeBuilder entityTypeBuilder);
    public static IEnumerable`1<IConventionProperty> DiscoverKeyProperties(IConventionEntityType entityType, IEnumerable`1<IConventionProperty> candidateProperties);
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    public virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, IConventionContext`1<IConventionPropertyBuilder> context);
    public virtual void ProcessPropertyFieldChanged(IConventionPropertyBuilder propertyBuilder, FieldInfo newFieldInfo, FieldInfo oldFieldInfo, IConventionContext`1<FieldInfo> context);
    public virtual void ProcessKeyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionKey key, IConventionContext`1<IConventionKey> context);
    public virtual void ProcessForeignKeyAdded(IConventionRelationshipBuilder relationshipBuilder, IConventionContext`1<IConventionRelationshipBuilder> context);
    public virtual void ProcessForeignKeyPropertiesChanged(IConventionRelationshipBuilder relationshipBuilder, IReadOnlyList`1<IConventionProperty> oldDependentProperties, IConventionKey oldPrincipalKey, IConventionContext`1<IConventionRelationshipBuilder> context);
    public virtual void ProcessForeignKeyOwnershipChanged(IConventionRelationshipBuilder relationshipBuilder, IConventionContext`1<IConventionRelationshipBuilder> context);
    public virtual void ProcessForeignKeyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionForeignKey foreignKey, IConventionContext`1<IConventionForeignKey> context);
    public virtual void ProcessForeignKeyUniquenessChanged(IConventionRelationshipBuilder relationshipBuilder, IConventionContext`1<IConventionRelationshipBuilder> context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.MaxLengthAttributeConvention : PropertyAttributeConventionBase`1<MaxLengthAttribute> {
    public MaxLengthAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, MaxLengthAttribute attribute, MemberInfo clrMember, IConventionContext context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.ModelCleanupConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public ModelCleanupConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessModelFinalized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    private void RemoveEntityTypesUnreachableByNavigations(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    private IReadOnlyList`1<IConventionEntityType> GetRoots(IConventionModel model, ConfigurationSource configurationSource);
    private void RemoveNavigationlessForeignKeys(IConventionModelBuilder modelBuilder);
    private void RemoveModelBuildingAnnotations(IConventionModelBuilder modelBuilder);
}
public abstract class Microsoft.EntityFrameworkCore.Metadata.Conventions.NavigationAttributeConventionBase`1 : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected NavigationAttributeConventionBase`1(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
    public virtual void ProcessEntityTypeIgnored(IConventionModelBuilder modelBuilder, string name, Type type, IConventionContext`1<string> context);
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    public virtual void ProcessNavigationAdded(IConventionRelationshipBuilder relationshipBuilder, IConventionNavigation navigation, IConventionContext`1<IConventionNavigation> context);
    public virtual void ProcessEntityTypeMemberIgnored(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionContext`1<string> context);
    private Type FindCandidateNavigationWithAttributePropertyType(PropertyInfo propertyInfo);
    protected static IEnumerable`1<TCustomAttribute> GetAttributes(IConventionEntityType entityType, IConventionNavigation navigation);
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, MemberInfo navigationMemberInfo, Type targetClrType, TAttribute attribute, IConventionContext`1<IConventionEntityTypeBuilder> context);
    public virtual void ProcessEntityTypeIgnored(IConventionModelBuilder modelBuilder, Type type, MemberInfo navigationMemberInfo, Type targetClrType, TAttribute attribute, IConventionContext`1<string> context);
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, MemberInfo navigationMemberInfo, Type targetClrType, TAttribute attribute, IConventionContext`1<IConventionEntityType> context);
    public virtual void ProcessNavigationAdded(IConventionRelationshipBuilder relationshipBuilder, IConventionNavigation navigation, TAttribute attribute, IConventionContext`1<IConventionNavigation> context);
    public virtual void ProcessEntityTypeMemberIgnored(IConventionEntityTypeBuilder entityTypeBuilder, MemberInfo navigationMemberInfo, Type targetClrType, TAttribute attribute, IConventionContext`1<string> context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.NavigationEagerLoadingConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public NavigationEagerLoadingConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessForeignKeyOwnershipChanged(IConventionRelationshipBuilder relationshipBuilder, IConventionContext`1<IConventionRelationshipBuilder> context);
}
public abstract class Microsoft.EntityFrameworkCore.Metadata.Conventions.NonNullableConventionBase : object {
    private static string StateAnnotationName;
    private static string NullableAttributeFullName;
    private static string NullableContextAttributeFullName;
    private static string MaybeNullAttributeFullName;
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected NonNullableConventionBase(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    protected virtual bool IsNonNullableReferenceType(IConventionModelBuilder modelBuilder, MemberInfo memberInfo);
    private NonNullabilityConventionState GetOrInitializeState(IConventionModelBuilder modelBuilder);
    public virtual void ProcessModelFinalized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.NonNullableNavigationConvention : NonNullableConventionBase {
    public NonNullableNavigationConvention(ProviderConventionSetBuilderDependencies dependencies);
    public virtual void ProcessNavigationAdded(IConventionRelationshipBuilder relationshipBuilder, IConventionNavigation navigation, IConventionContext`1<IConventionNavigation> context);
    private bool IsNonNullable(IConventionModelBuilder modelBuilder, IConventionNavigation navigation);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.NonNullableReferencePropertyConvention : NonNullableConventionBase {
    public NonNullableReferencePropertyConvention(ProviderConventionSetBuilderDependencies dependencies);
    private void Process(IConventionPropertyBuilder propertyBuilder);
    public virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, IConventionContext`1<IConventionPropertyBuilder> context);
    public virtual void ProcessPropertyFieldChanged(IConventionPropertyBuilder propertyBuilder, FieldInfo newFieldInfo, FieldInfo oldFieldInfo, IConventionContext`1<FieldInfo> context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.NotMappedEntityTypeAttributeConvention : EntityTypeAttributeConventionBase`1<NotMappedAttribute> {
    public NotMappedEntityTypeAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, NotMappedAttribute attribute, IConventionContext`1<IConventionEntityTypeBuilder> context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.NotMappedMemberAttributeConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public NotMappedMemberAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.OwnedEntityTypeAttributeConvention : EntityTypeAttributeConventionBase`1<OwnedAttribute> {
    public OwnedEntityTypeAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, OwnedAttribute attribute, IConventionContext`1<IConventionEntityTypeBuilder> context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.OwnedTypesConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public OwnedTypesConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessEntityTypeRemoved(IConventionModelBuilder modelBuilder, IConventionEntityType entityType, IConventionContext`1<IConventionEntityType> context);
}
public abstract class Microsoft.EntityFrameworkCore.Metadata.Conventions.PropertyAttributeConventionBase`1 : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected PropertyAttributeConventionBase`1(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, IConventionContext`1<IConventionPropertyBuilder> context);
    public virtual void ProcessPropertyFieldChanged(IConventionPropertyBuilder propertyBuilder, FieldInfo newFieldInfo, FieldInfo oldFieldInfo, IConventionContext`1<FieldInfo> context);
    private void Process(IConventionPropertyBuilder propertyBuilder, MemberInfo memberInfo, IReadableConventionContext context);
    protected abstract virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, TAttribute attribute, MemberInfo clrMember, IConventionContext context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.PropertyDiscoveryConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public PropertyDiscoveryConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    private void Process(IConventionEntityTypeBuilder entityTypeBuilder);
    private bool IsCandidatePrimitiveProperty(PropertyInfo propertyInfo);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.QueryFilterDefiningQueryRewritingConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSetAccessRewritingExpressionVisitor <DbSetAccessRewriter>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected DbSetAccessRewritingExpressionVisitor DbSetAccessRewriter { get; protected set; }
    public QueryFilterDefiningQueryRewritingConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual DbSetAccessRewritingExpressionVisitor get_DbSetAccessRewriter();
    [CompilerGeneratedAttribute]
protected virtual void set_DbSetAccessRewriter(DbSetAccessRewritingExpressionVisitor value);
    public virtual void ProcessModelFinalized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationshipDiscoveryConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public RelationshipDiscoveryConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    private void DiscoverRelationships(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext context);
    private IReadOnlyList`1<RelationshipCandidate> FindRelationshipCandidates(IConventionEntityTypeBuilder entityTypeBuilder);
    private static IReadOnlyList`1<RelationshipCandidate> RemoveIncompatibleWithExistingRelationships(IReadOnlyList`1<RelationshipCandidate> relationshipCandidates, IConventionEntityTypeBuilder entityTypeBuilder);
    private static bool IsCompatibleInverse(PropertyInfo navigationProperty, PropertyInfo inversePropertyInfo, IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityTypeBuilder targetEntityTypeBuilder);
    private static bool CanMergeWith(IConventionNavigation existingNavigation, MemberInfo inverse, IConventionEntityTypeBuilder inverseEntityTypeBuilder);
    private static IReadOnlyList`1<RelationshipCandidate> RemoveInheritedInverseNavigations(IReadOnlyList`1<RelationshipCandidate> relationshipCandidates);
    private static void RemoveInheritedInverseNavigations(RelationshipCandidate relationshipCandidate, List`1<RelationshipCandidate> relationshipCandidatesHierarchy, HashSet`1<RelationshipCandidate> filteredRelationshipCandidates);
    private static IReadOnlyList`1<RelationshipCandidate> RemoveSingleSidedBaseNavigations(IReadOnlyList`1<RelationshipCandidate> relationshipCandidates, IConventionEntityTypeBuilder entityTypeBuilder);
    private void CreateRelationships(IEnumerable`1<RelationshipCandidate> relationshipCandidates, IConventionEntityTypeBuilder entityTypeBuilder);
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    private void ApplyOnRelatedEntityTypes(IConventionEntityType entityType, IConventionContext context);
    public virtual void ProcessNavigationRemoved(IConventionEntityTypeBuilder sourceEntityTypeBuilder, IConventionEntityTypeBuilder targetEntityTypeBuilder, string navigationName, MemberInfo memberInfo, IConventionContext`1<string> context);
    private void Process(IConventionEntityType entityType, string navigationName, MemberInfo memberInfo, IConventionContext context);
    [ContractAnnotationAttribute("memberInfo:null => false")]
private static bool IsCandidateNavigationProperty(IConventionEntityTypeBuilder sourceEntityTypeBuilder, string navigationName, MemberInfo memberInfo);
    public virtual void ProcessEntityTypeIgnored(IConventionModelBuilder modelBuilder, string name, Type type, IConventionContext`1<string> context);
    public virtual void ProcessEntityTypeMemberIgnored(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionContext`1<string> context);
    private bool ProcessEntityTypeMemberIgnoredOnBase(IConventionEntityType entityType, string name);
    public virtual void ProcessNavigationAdded(IConventionRelationshipBuilder relationshipBuilder, IConventionNavigation navigation, IConventionContext`1<IConventionNavigation> context);
    public virtual void ProcessForeignKeyOwnershipChanged(IConventionRelationshipBuilder relationshipBuilder, IConventionContext`1<IConventionRelationshipBuilder> context);
    private Type FindCandidateNavigationPropertyType(PropertyInfo propertyInfo);
    private ImmutableSortedDictionary`2<PropertyInfo, Type> GetNavigationCandidates(IConventionEntityType entityType);
    private static void SetNavigationCandidates(IConventionEntityTypeBuilder entityTypeBuilder, ImmutableSortedDictionary`2<PropertyInfo, Type> navigationCandidates);
    private static bool IsCandidateUnusedOwnedType(IConventionEntityType entityType);
    private static bool IsAmbiguous(IConventionEntityType entityType, MemberInfo navigationProperty);
    private static bool HasAmbiguousNavigationsTo(IConventionEntityType sourceEntityType, Type targetClrType);
    private static bool HasDeclaredAmbiguousNavigationsTo(IConventionEntityType sourceEntityType, Type targetClrType);
    private static ImmutableSortedDictionary`2<MemberInfo, Type> GetAmbiguousNavigations(IConventionEntityType entityType);
    private static void AddAmbiguous(IConventionEntityTypeBuilder entityTypeBuilder, IReadOnlyList`1<PropertyInfo> navigationProperties, Type targetType);
    private static bool RemoveAmbiguous(IConventionEntityType entityType, Type targetType);
    private static void SetAmbiguousNavigations(IConventionEntityTypeBuilder entityTypeBuilder, ImmutableSortedDictionary`2<MemberInfo, Type> ambiguousNavigations);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.RequiredNavigationAttributeConvention : NavigationAttributeConventionBase`1<RequiredAttribute> {
    public RequiredNavigationAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    public virtual void ProcessNavigationAdded(IConventionRelationshipBuilder relationshipBuilder, IConventionNavigation navigation, RequiredAttribute attribute, IConventionContext`1<IConventionNavigation> context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.RequiredPropertyAttributeConvention : PropertyAttributeConventionBase`1<RequiredAttribute> {
    public RequiredPropertyAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, RequiredAttribute attribute, MemberInfo clrMember, IConventionContext context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.ServicePropertyDiscoveryConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public ServicePropertyDiscoveryConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    private void Process(IConventionEntityTypeBuilder entityTypeBuilder);
    public virtual void ProcessEntityTypeMemberIgnored(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionContext`1<string> context);
    public virtual void ProcessModelFinalized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    private static void AddDuplicateServiceProperty(IConventionEntityTypeBuilder entityTypeBuilder, MemberInfo serviceProperty);
    private static Dictionary`2<Type, HashSet`1<MemberInfo>> GetDuplicateServiceProperties(IConventionEntityType entityType);
    private static void SetDuplicateServiceProperties(IConventionEntityTypeBuilder entityTypeBuilder, Dictionary`2<Type, HashSet`1<MemberInfo>> duplicateServiceProperties);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.StringLengthAttributeConvention : PropertyAttributeConventionBase`1<StringLengthAttribute> {
    public StringLengthAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, StringLengthAttribute attribute, MemberInfo clrMember, IConventionContext context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.TimestampAttributeConvention : PropertyAttributeConventionBase`1<TimestampAttribute> {
    public TimestampAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, TimestampAttribute attribute, MemberInfo clrMember, IConventionContext context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.TypeMappingConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public TypeMappingConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessModelFinalized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.ValidatingConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public ValidatingConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessModelFinalized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.ValueGenerationConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public ValueGenerationConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessForeignKeyAdded(IConventionRelationshipBuilder relationshipBuilder, IConventionContext`1<IConventionRelationshipBuilder> context);
    public virtual void ProcessForeignKeyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionForeignKey foreignKey, IConventionContext`1<IConventionForeignKey> context);
    public virtual void ProcessForeignKeyPropertiesChanged(IConventionRelationshipBuilder relationshipBuilder, IReadOnlyList`1<IConventionProperty> oldDependentProperties, IConventionKey oldPrincipalKey, IConventionContext`1<IConventionRelationshipBuilder> context);
    private void OnForeignKeyRemoved(IReadOnlyList`1<IConventionProperty> foreignKeyProperties);
    public virtual void ProcessEntityTypePrimaryKeyChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionKey newPrimaryKey, IConventionKey previousPrimaryKey, IConventionContext`1<IConventionKey> context);
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    protected virtual Nullable`1<ValueGenerated> GetValueGenerated(IConventionProperty property);
    public static Nullable`1<ValueGenerated> GetValueGenerated(IProperty property);
    private static bool ShouldHaveGeneratedProperty(IKey key);
    private static bool CanBeGenerated(IProperty property);
}
public class Microsoft.EntityFrameworkCore.Metadata.DependencyInjectionMethodParameterBinding : DependencyInjectionParameterBinding {
    [CompilerGeneratedAttribute]
private MethodInfo <Method>k__BackingField;
    public MethodInfo Method { get; }
    public DependencyInjectionMethodParameterBinding(Type parameterType, Type serviceType, MethodInfo method, IPropertyBase serviceProperty);
    [CompilerGeneratedAttribute]
public virtual MethodInfo get_Method();
    public virtual Expression BindToParameter(Expression materializationExpression, Expression entityTypeExpression);
}
public class Microsoft.EntityFrameworkCore.Metadata.DependencyInjectionParameterBinding : ServiceParameterBinding {
    private static MethodInfo _getServiceMethod;
    public DependencyInjectionParameterBinding(Type parameterType, Type serviceType, IPropertyBase serviceProperty);
    private static DependencyInjectionParameterBinding();
    public virtual Expression BindToParameter(Expression materializationExpression, Expression entityTypeExpression);
}
public class Microsoft.EntityFrameworkCore.Metadata.EntityTypeParameterBinding : ServiceParameterBinding {
    public EntityTypeParameterBinding(IPropertyBase serviceProperty);
    public virtual Expression BindToParameter(Expression materializationExpression, Expression entityTypeExpression);
}
public class Microsoft.EntityFrameworkCore.Metadata.FactoryMethodBinding : InstantiationBinding {
    private object _factoryInstance;
    private MethodInfo _factoryMethod;
    [CompilerGeneratedAttribute]
private Type <RuntimeType>k__BackingField;
    public Type RuntimeType { get; }
    public FactoryMethodBinding(MethodInfo factoryMethod, IReadOnlyList`1<ParameterBinding> parameterBindings, Type runtimeType);
    public FactoryMethodBinding(object factoryInstance, MethodInfo factoryMethod, IReadOnlyList`1<ParameterBinding> parameterBindings, Type runtimeType);
    public virtual Expression CreateConstructorExpression(ParameterBindingInfo bindingInfo);
    [CompilerGeneratedAttribute]
public virtual Type get_RuntimeType();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor {
    public Type CollectionType { get; }
    public abstract virtual bool Add(object entity, object value, bool forMaterialization);
    public abstract virtual bool Contains(object entity, object value);
    public abstract virtual bool Remove(object entity, object value);
    public abstract virtual object Create();
    public abstract virtual object GetOrCreate(object entity, bool forMaterialization);
    public abstract virtual Type get_CollectionType();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IClrPropertyGetter {
    public abstract virtual object GetClrValue(object entity);
    public abstract virtual bool HasDefaultValue(object entity);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IClrPropertySetter {
    public abstract virtual void SetClrValue(object instance, object value);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IConstructorBindingFactory {
    [ContractAnnotationAttribute("=>true, binding:notnull, failedBindings:null; =>false, binding:null, failedBindings:notnull")]
public abstract virtual bool TryBindConstructor(IConventionEntityType entityType, ConstructorInfo constructor, InstantiationBinding& binding, IEnumerable`1& unboundParameters);
    [ContractAnnotationAttribute("=>true, binding:notnull, failedBindings:null; =>false, binding:null, failedBindings:notnull")]
public abstract virtual bool TryBindConstructor(IMutableEntityType entityType, ConstructorInfo constructor, InstantiationBinding& binding, IEnumerable`1& unboundParameters);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable {
    public abstract virtual IEnumerable`1<IConventionAnnotation> GetAnnotations();
    public abstract virtual IConventionAnnotation AddAnnotation(string name, object value, bool fromDataAnnotation);
    public abstract virtual void SetAnnotation(string name, object value, bool fromDataAnnotation);
    public abstract virtual IConventionAnnotation FindAnnotation(string name);
    public abstract virtual IConventionAnnotation RemoveAnnotation(string name);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation {
    public abstract virtual ConfigurationSource GetConfigurationSource();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType {
    public IConventionModel Model { get; }
    public IConventionEntityTypeBuilder Builder { get; }
    public IConventionEntityType BaseType { get; }
    public IConventionEntityType DefiningEntityType { get; }
    public bool IsKeyless { get; }
    public abstract virtual ConfigurationSource GetConfigurationSource();
    public abstract virtual IConventionModel get_Model();
    public abstract virtual IConventionEntityTypeBuilder get_Builder();
    public abstract virtual IConventionEntityType get_BaseType();
    public abstract virtual IConventionEntityType get_DefiningEntityType();
    public abstract virtual bool get_IsKeyless();
    public abstract virtual void HasBaseType(IConventionEntityType entityType, bool fromDataAnnotation);
    public abstract virtual void HasNoKey(Nullable`1<bool> keyless, bool fromDataAnnotation);
    public abstract virtual IConventionKey SetPrimaryKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    public abstract virtual IConventionKey FindPrimaryKey();
    public abstract virtual Nullable`1<ConfigurationSource> GetPrimaryKeyConfigurationSource();
    public abstract virtual IConventionKey AddKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    public abstract virtual IConventionKey FindKey(IReadOnlyList`1<IProperty> properties);
    public abstract virtual IEnumerable`1<IConventionKey> GetKeys();
    public abstract virtual void RemoveKey(IConventionKey key);
    public abstract virtual IConventionForeignKey AddForeignKey(IReadOnlyList`1<IConventionProperty> properties, IConventionKey principalKey, IConventionEntityType principalEntityType, bool setComponentConfigurationSource, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKey FindForeignKey(IReadOnlyList`1<IProperty> properties, IKey principalKey, IEntityType principalEntityType);
    public abstract virtual IEnumerable`1<IConventionForeignKey> GetForeignKeys();
    public abstract virtual void RemoveForeignKey(IConventionForeignKey foreignKey);
    public abstract virtual IConventionIndex AddIndex(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    public abstract virtual IConventionIndex FindIndex(IReadOnlyList`1<IProperty> properties);
    public abstract virtual IEnumerable`1<IConventionIndex> GetIndexes();
    public abstract virtual void RemoveIndex(IConventionIndex index);
    public abstract virtual IConventionProperty AddProperty(string name, Type propertyType, MemberInfo memberInfo, bool setTypeConfigurationSource, bool fromDataAnnotation);
    public abstract virtual IConventionProperty FindProperty(string name);
    public abstract virtual IEnumerable`1<IConventionProperty> GetProperties();
    public abstract virtual void RemoveProperty(IConventionProperty property);
    public abstract virtual IConventionServiceProperty AddServiceProperty(MemberInfo memberInfo, bool fromDataAnnotation);
    public abstract virtual IConventionServiceProperty FindServiceProperty(string name);
    public abstract virtual IEnumerable`1<IConventionServiceProperty> GetServiceProperties();
    public abstract virtual IConventionServiceProperty RemoveServiceProperty(string name);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey {
    public IConventionRelationshipBuilder Builder { get; }
    public IReadOnlyList`1<IConventionProperty> Properties { get; }
    public IConventionKey PrincipalKey { get; }
    public IConventionEntityType DeclaringEntityType { get; }
    public IConventionEntityType PrincipalEntityType { get; }
    public IConventionNavigation DependentToPrincipal { get; }
    public IConventionNavigation PrincipalToDependent { get; }
    public abstract virtual IConventionRelationshipBuilder get_Builder();
    public abstract virtual IReadOnlyList`1<IConventionProperty> get_Properties();
    public abstract virtual IConventionKey get_PrincipalKey();
    public abstract virtual IConventionEntityType get_DeclaringEntityType();
    public abstract virtual IConventionEntityType get_PrincipalEntityType();
    public abstract virtual IConventionNavigation get_DependentToPrincipal();
    public abstract virtual IConventionNavigation get_PrincipalToDependent();
    public abstract virtual ConfigurationSource GetConfigurationSource();
    public abstract virtual void SetProperties(IReadOnlyList`1<IConventionProperty> properties, IConventionKey principalKey, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetPropertiesConfigurationSource();
    public abstract virtual Nullable`1<ConfigurationSource> GetPrincipalKeyConfigurationSource();
    public abstract virtual Nullable`1<ConfigurationSource> GetPrincipalEndConfigurationSource();
    public abstract virtual void SetIsUnique(Nullable`1<bool> unique, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetIsUniqueConfigurationSource();
    public abstract virtual void SetIsRequired(Nullable`1<bool> required, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetIsRequiredConfigurationSource();
    public abstract virtual void SetIsOwnership(Nullable`1<bool> ownership, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetIsOwnershipConfigurationSource();
    public abstract virtual void SetDeleteBehavior(Nullable`1<DeleteBehavior> deleteBehavior, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetDeleteBehaviorConfigurationSource();
    public abstract virtual IConventionNavigation HasDependentToPrincipal(string name, bool fromDataAnnotation);
    public abstract virtual IConventionNavigation HasDependentToPrincipal(MemberInfo property, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetDependentToPrincipalConfigurationSource();
    public abstract virtual IConventionNavigation HasPrincipalToDependent(string name, bool fromDataAnnotation);
    public abstract virtual IConventionNavigation HasPrincipalToDependent(MemberInfo property, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetPrincipalToDependentConfigurationSource();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionIndex {
    public IConventionIndexBuilder Builder { get; }
    public IReadOnlyList`1<IConventionProperty> Properties { get; }
    public IConventionEntityType DeclaringEntityType { get; }
    public abstract virtual IConventionIndexBuilder get_Builder();
    public abstract virtual IReadOnlyList`1<IConventionProperty> get_Properties();
    public abstract virtual IConventionEntityType get_DeclaringEntityType();
    public abstract virtual ConfigurationSource GetConfigurationSource();
    public abstract virtual void SetIsUnique(Nullable`1<bool> unique, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetIsUniqueConfigurationSource();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionKey {
    public IConventionKeyBuilder Builder { get; }
    public IReadOnlyList`1<IConventionProperty> Properties { get; }
    public IConventionEntityType DeclaringEntityType { get; }
    public abstract virtual IConventionKeyBuilder get_Builder();
    public abstract virtual IReadOnlyList`1<IConventionProperty> get_Properties();
    public abstract virtual IConventionEntityType get_DeclaringEntityType();
    public abstract virtual ConfigurationSource GetConfigurationSource();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionModel {
    public IConventionModelBuilder Builder { get; }
    public abstract virtual IConventionModelBuilder get_Builder();
    public abstract virtual IConventionEntityType AddEntityType(string name, bool fromDataAnnotation);
    public abstract virtual IConventionEntityType AddEntityType(Type clrType, bool fromDataAnnotation);
    public abstract virtual IConventionEntityType AddEntityType(string name, string definingNavigationName, IConventionEntityType definingEntityType, bool fromDataAnnotation);
    public abstract virtual IConventionEntityType AddEntityType(Type clrType, string definingNavigationName, IConventionEntityType definingEntityType, bool fromDataAnnotation);
    public abstract virtual IConventionEntityType FindEntityType(string name);
    public abstract virtual IConventionEntityType FindEntityType(string name, string definingNavigationName, IConventionEntityType definingEntityType);
    public abstract virtual void RemoveEntityType(IConventionEntityType entityType);
    public abstract virtual IEnumerable`1<IConventionEntityType> GetEntityTypes();
    public abstract virtual void AddIgnored(string typeName, bool fromDataAnnotation);
    public abstract virtual void RemoveIgnored(string typeName);
    public abstract virtual Nullable`1<ConfigurationSource> FindIgnoredConfigurationSource(string typeName);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation {
    public IConventionEntityType DeclaringEntityType { get; }
    public IConventionForeignKey ForeignKey { get; }
    public abstract virtual IConventionEntityType get_DeclaringEntityType();
    public abstract virtual IConventionForeignKey get_ForeignKey();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionProperty {
    public IConventionPropertyBuilder Builder { get; }
    public IConventionEntityType DeclaringEntityType { get; }
    public abstract virtual IConventionPropertyBuilder get_Builder();
    public abstract virtual IConventionEntityType get_DeclaringEntityType();
    public abstract virtual ConfigurationSource GetConfigurationSource();
    public abstract virtual Nullable`1<ConfigurationSource> GetTypeConfigurationSource();
    public abstract virtual void SetIsNullable(Nullable`1<bool> nullable, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetIsNullableConfigurationSource();
    public abstract virtual void SetValueGenerated(Nullable`1<ValueGenerated> valueGenerated, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetValueGeneratedConfigurationSource();
    public abstract virtual void SetIsConcurrencyToken(Nullable`1<bool> concurrencyToken, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetIsConcurrencyTokenConfigurationSource();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase {
    public IConventionTypeBase DeclaringType { get; }
    public abstract virtual IConventionTypeBase get_DeclaringType();
    public abstract virtual void SetField(FieldInfo fieldInfo, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetFieldInfoConfigurationSource();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty {
    public IConventionServicePropertyBuilder Builder { get; }
    public IConventionEntityType DeclaringEntityType { get; }
    public abstract virtual IConventionServicePropertyBuilder get_Builder();
    public abstract virtual IConventionEntityType get_DeclaringEntityType();
    public abstract virtual ConfigurationSource GetConfigurationSource();
    public abstract virtual void SetParameterBinding(ServiceParameterBinding parameterBinding, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetParameterBindingConfigurationSource();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionTypeBase {
    public IConventionModel Model { get; }
    public abstract virtual IConventionModel get_Model();
    public abstract virtual void AddIgnored(string memberName, bool fromDataAnnotation);
    public abstract virtual void RemoveIgnored(string memberName);
    public abstract virtual Nullable`1<ConfigurationSource> FindIgnoredConfigurationSource(string memberName);
    public abstract virtual IReadOnlyList`1<string> GetIgnoredMembers();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IEntityType {
    public IEntityType BaseType { get; }
    public string DefiningNavigationName { get; }
    public IEntityType DefiningEntityType { get; }
    public abstract virtual IEntityType get_BaseType();
    public abstract virtual string get_DefiningNavigationName();
    public abstract virtual IEntityType get_DefiningEntityType();
    public abstract virtual IKey FindPrimaryKey();
    public abstract virtual IKey FindKey(IReadOnlyList`1<IProperty> properties);
    public abstract virtual IEnumerable`1<IKey> GetKeys();
    public abstract virtual IForeignKey FindForeignKey(IReadOnlyList`1<IProperty> properties, IKey principalKey, IEntityType principalEntityType);
    public abstract virtual IEnumerable`1<IForeignKey> GetForeignKeys();
    public abstract virtual IIndex FindIndex(IReadOnlyList`1<IProperty> properties);
    public abstract virtual IEnumerable`1<IIndex> GetIndexes();
    public abstract virtual IProperty FindProperty(string name);
    public abstract virtual IEnumerable`1<IProperty> GetProperties();
    public abstract virtual IServiceProperty FindServiceProperty(string name);
    public abstract virtual IEnumerable`1<IServiceProperty> GetServiceProperties();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IForeignKey {
    public IEntityType DeclaringEntityType { get; }
    public IReadOnlyList`1<IProperty> Properties { get; }
    public IEntityType PrincipalEntityType { get; }
    public IKey PrincipalKey { get; }
    public INavigation DependentToPrincipal { get; }
    public INavigation PrincipalToDependent { get; }
    public bool IsUnique { get; }
    public bool IsRequired { get; }
    public bool IsOwnership { get; }
    public DeleteBehavior DeleteBehavior { get; }
    public abstract virtual IEntityType get_DeclaringEntityType();
    public abstract virtual IReadOnlyList`1<IProperty> get_Properties();
    public abstract virtual IEntityType get_PrincipalEntityType();
    public abstract virtual IKey get_PrincipalKey();
    public abstract virtual INavigation get_DependentToPrincipal();
    public abstract virtual INavigation get_PrincipalToDependent();
    public abstract virtual bool get_IsUnique();
    public abstract virtual bool get_IsRequired();
    public abstract virtual bool get_IsOwnership();
    public abstract virtual DeleteBehavior get_DeleteBehavior();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IIndex {
    public IReadOnlyList`1<IProperty> Properties { get; }
    public bool IsUnique { get; }
    public IEntityType DeclaringEntityType { get; }
    public abstract virtual IReadOnlyList`1<IProperty> get_Properties();
    public abstract virtual bool get_IsUnique();
    public abstract virtual IEntityType get_DeclaringEntityType();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IKey {
    public IReadOnlyList`1<IProperty> Properties { get; }
    public IEntityType DeclaringEntityType { get; }
    public abstract virtual IReadOnlyList`1<IProperty> get_Properties();
    public abstract virtual IEntityType get_DeclaringEntityType();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IMetadataReference`1 {
    public T Object { get; }
    public abstract virtual T get_Object();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IModel {
    public abstract virtual IEnumerable`1<IEntityType> GetEntityTypes();
    public abstract virtual IEntityType FindEntityType(string name);
    public abstract virtual IEntityType FindEntityType(string name, string definingNavigationName, IEntityType definingEntityType);
}
[DefaultMemberAttribute("Item")]
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable {
    public object Item { get; public set; }
    public abstract virtual object get_Item(string name);
    public abstract virtual void set_Item(string name, object value);
    public abstract virtual IAnnotation AddAnnotation(string name, object value);
    public abstract virtual void SetAnnotation(string name, object value);
    public abstract virtual IAnnotation RemoveAnnotation(string name);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType {
    public IMutableModel Model { get; }
    public IMutableEntityType BaseType { get; public set; }
    public IMutableEntityType DefiningEntityType { get; }
    public bool IsKeyless { get; public set; }
    public abstract virtual IMutableModel get_Model();
    public abstract virtual IMutableEntityType get_BaseType();
    public abstract virtual void set_BaseType(IMutableEntityType value);
    public abstract virtual IMutableEntityType get_DefiningEntityType();
    public abstract virtual bool get_IsKeyless();
    public abstract virtual void set_IsKeyless(bool value);
    public abstract virtual IMutableKey SetPrimaryKey(IReadOnlyList`1<IMutableProperty> properties);
    public abstract virtual IMutableKey FindPrimaryKey();
    public abstract virtual IMutableKey AddKey(IReadOnlyList`1<IMutableProperty> properties);
    public abstract virtual IMutableKey FindKey(IReadOnlyList`1<IProperty> properties);
    public abstract virtual IEnumerable`1<IMutableKey> GetKeys();
    public abstract virtual void RemoveKey(IMutableKey key);
    public abstract virtual IMutableForeignKey AddForeignKey(IReadOnlyList`1<IMutableProperty> properties, IMutableKey principalKey, IMutableEntityType principalEntityType);
    public abstract virtual IMutableForeignKey FindForeignKey(IReadOnlyList`1<IProperty> properties, IKey principalKey, IEntityType principalEntityType);
    public abstract virtual IEnumerable`1<IMutableForeignKey> GetForeignKeys();
    public abstract virtual void RemoveForeignKey(IMutableForeignKey foreignKey);
    public abstract virtual IMutableIndex AddIndex(IReadOnlyList`1<IMutableProperty> properties);
    public abstract virtual IMutableIndex FindIndex(IReadOnlyList`1<IProperty> properties);
    public abstract virtual IEnumerable`1<IMutableIndex> GetIndexes();
    public abstract virtual void RemoveIndex(IMutableIndex index);
    public abstract virtual IMutableProperty AddProperty(string name, Type propertyType, MemberInfo memberInfo);
    public abstract virtual IMutableProperty FindProperty(string name);
    public abstract virtual IEnumerable`1<IMutableProperty> GetProperties();
    public abstract virtual void RemoveProperty(IMutableProperty property);
    public abstract virtual IMutableServiceProperty AddServiceProperty(MemberInfo memberInfo);
    public abstract virtual IMutableServiceProperty FindServiceProperty(string name);
    public abstract virtual IEnumerable`1<IMutableServiceProperty> GetServiceProperties();
    public abstract virtual IMutableServiceProperty RemoveServiceProperty(string name);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey {
    public IReadOnlyList`1<IMutableProperty> Properties { get; }
    public IMutableKey PrincipalKey { get; }
    public IMutableEntityType DeclaringEntityType { get; }
    public IMutableEntityType PrincipalEntityType { get; }
    public bool IsUnique { get; public set; }
    public bool IsRequired { get; public set; }
    public bool IsOwnership { get; public set; }
    public DeleteBehavior DeleteBehavior { get; public set; }
    public IMutableNavigation DependentToPrincipal { get; }
    public IMutableNavigation PrincipalToDependent { get; }
    public abstract virtual IReadOnlyList`1<IMutableProperty> get_Properties();
    public abstract virtual IMutableKey get_PrincipalKey();
    public abstract virtual IMutableEntityType get_DeclaringEntityType();
    public abstract virtual IMutableEntityType get_PrincipalEntityType();
    public abstract virtual bool get_IsUnique();
    public abstract virtual void set_IsUnique(bool value);
    public abstract virtual bool get_IsRequired();
    public abstract virtual void set_IsRequired(bool value);
    public abstract virtual bool get_IsOwnership();
    public abstract virtual void set_IsOwnership(bool value);
    public abstract virtual DeleteBehavior get_DeleteBehavior();
    public abstract virtual void set_DeleteBehavior(DeleteBehavior value);
    public abstract virtual IMutableNavigation get_DependentToPrincipal();
    public abstract virtual IMutableNavigation get_PrincipalToDependent();
    public abstract virtual void SetProperties(IReadOnlyList`1<IMutableProperty> properties, IMutableKey principalKey);
    public abstract virtual IMutableNavigation HasDependentToPrincipal(string name);
    public abstract virtual IMutableNavigation HasDependentToPrincipal(MemberInfo property);
    public abstract virtual IMutableNavigation HasPrincipalToDependent(string name);
    public abstract virtual IMutableNavigation HasPrincipalToDependent(MemberInfo property);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableIndex {
    public bool IsUnique { get; public set; }
    public IReadOnlyList`1<IMutableProperty> Properties { get; }
    public IMutableEntityType DeclaringEntityType { get; }
    public abstract virtual bool get_IsUnique();
    public abstract virtual void set_IsUnique(bool value);
    public abstract virtual IReadOnlyList`1<IMutableProperty> get_Properties();
    public abstract virtual IMutableEntityType get_DeclaringEntityType();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableKey {
    public IReadOnlyList`1<IMutableProperty> Properties { get; }
    public IMutableEntityType DeclaringEntityType { get; }
    public abstract virtual IReadOnlyList`1<IMutableProperty> get_Properties();
    public abstract virtual IMutableEntityType get_DeclaringEntityType();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableModel {
    public abstract virtual IMutableEntityType AddEntityType(string name);
    public abstract virtual IMutableEntityType AddEntityType(Type clrType);
    public abstract virtual IMutableEntityType AddEntityType(string name, string definingNavigationName, IMutableEntityType definingEntityType);
    public abstract virtual IMutableEntityType AddEntityType(Type clrType, string definingNavigationName, IMutableEntityType definingEntityType);
    public abstract virtual IMutableEntityType FindEntityType(string name);
    public abstract virtual IMutableEntityType FindEntityType(string name, string definingNavigationName, IMutableEntityType definingEntityType);
    public abstract virtual void RemoveEntityType(IMutableEntityType entityType);
    public abstract virtual IEnumerable`1<IMutableEntityType> GetEntityTypes();
    public abstract virtual void AddIgnored(string typeName);
    public abstract virtual void RemoveIgnored(string typeName);
    public abstract virtual bool IsIgnored(string typeName);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation {
    public IMutableEntityType DeclaringEntityType { get; }
    public IMutableForeignKey ForeignKey { get; }
    public abstract virtual IMutableEntityType get_DeclaringEntityType();
    public abstract virtual IMutableForeignKey get_ForeignKey();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableProperty {
    public IMutableEntityType DeclaringEntityType { get; }
    public bool IsNullable { get; public set; }
    public ValueGenerated ValueGenerated { get; public set; }
    public bool IsConcurrencyToken { get; public set; }
    public abstract virtual IMutableEntityType get_DeclaringEntityType();
    public abstract virtual bool get_IsNullable();
    public abstract virtual void set_IsNullable(bool value);
    public abstract virtual ValueGenerated get_ValueGenerated();
    public abstract virtual void set_ValueGenerated(ValueGenerated value);
    public abstract virtual bool get_IsConcurrencyToken();
    public abstract virtual void set_IsConcurrencyToken(bool value);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase {
    public IMutableTypeBase DeclaringType { get; }
    public FieldInfo FieldInfo { get; public set; }
    public abstract virtual IMutableTypeBase get_DeclaringType();
    public abstract virtual FieldInfo get_FieldInfo();
    public abstract virtual void set_FieldInfo(FieldInfo value);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty {
    public IMutableEntityType DeclaringEntityType { get; }
    public ServiceParameterBinding ParameterBinding { get; public set; }
    public abstract virtual IMutableEntityType get_DeclaringEntityType();
    public abstract virtual ServiceParameterBinding get_ParameterBinding();
    public abstract virtual void set_ParameterBinding(ServiceParameterBinding value);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableTypeBase {
    public IMutableModel Model { get; }
    public abstract virtual IMutableModel get_Model();
    public abstract virtual void AddIgnored(string memberName);
    public abstract virtual void RemoveIgnored(string memberName);
    public abstract virtual bool IsIgnored(string memberName);
    public abstract virtual IReadOnlyList`1<string> GetIgnoredMembers();
}
public interface Microsoft.EntityFrameworkCore.Metadata.INavigation {
    public IEntityType DeclaringEntityType { get; }
    public IForeignKey ForeignKey { get; }
    public abstract virtual IEntityType get_DeclaringEntityType();
    public abstract virtual IForeignKey get_ForeignKey();
}
public abstract class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ParameterBinding> <ParameterBindings>k__BackingField;
    public IReadOnlyList`1<ParameterBinding> ParameterBindings { get; }
    public Type RuntimeType { get; }
    protected InstantiationBinding(IReadOnlyList`1<ParameterBinding> parameterBindings);
    public abstract virtual Expression CreateConstructorExpression(ParameterBindingInfo bindingInfo);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<ParameterBinding> get_ParameterBindings();
    public abstract virtual Type get_RuntimeType();
}
public abstract class Microsoft.EntityFrameworkCore.Metadata.Internal.ClrAccessorFactory`1 : object {
    private static MethodInfo _genericCreate;
    private static ClrAccessorFactory`1();
    public abstract virtual TAccessor Create(IPropertyBase property);
    public virtual TAccessor Create(MemberInfo memberInfo);
    protected virtual TAccessor Create(MemberInfo memberInfo, IPropertyBase propertyBase);
    protected abstract virtual TAccessor CreateGeneric(MemberInfo memberInfo, IPropertyBase propertyBase);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ClrCollectionAccessorFactory : object {
    private static MethodInfo _genericCreate;
    private static MethodInfo _createAndSet;
    private static MethodInfo _create;
    private static MethodInfo _createAndSetHashSet;
    private static MethodInfo _createHashSet;
    private static MethodInfo _createAndSetObservableHashSet;
    private static MethodInfo _createObservableHashSet;
    private static ClrCollectionAccessorFactory();
    public virtual IClrCollectionAccessor Create(INavigation navigation);
    [UsedImplicitlyAttribute]
private static IClrCollectionAccessor CreateGeneric(INavigation navigation);
    private static bool IsObservableHashSet(Type type);
    [UsedImplicitlyAttribute]
private static TCollection CreateAndSet(TEntity entity, Action`2<TEntity, TCollection> setterDelegate);
    [UsedImplicitlyAttribute]
private static TCollection CreateCollection();
    [UsedImplicitlyAttribute]
private static TCollection CreateAndSetHashSet(TEntity entity, Action`2<TEntity, TCollection> setterDelegate);
    [UsedImplicitlyAttribute]
private static TCollection CreateHashSet();
    [UsedImplicitlyAttribute]
private static TCollection CreateAndSetObservableHashSet(TEntity entity, Action`2<TEntity, TCollection> setterDelegate);
    [UsedImplicitlyAttribute]
private static TCollection CreateObservableHashSet();
    [CompilerGeneratedAttribute]
internal static MemberInfo <Create>g__GetMostDerivedMemberInfo|7_0(<>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static Action`2<TEntity, TCollection> <CreateGeneric>g__CreateSetterDelegate|8_0(ParameterExpression parameterExpression, MemberInfo memberInfo, ParameterExpression valueParameter1);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ClrICollectionAccessor`3 : object {
    private string _propertyName;
    private Func`2<TEntity, TCollection> _getCollection;
    private Action`2<TEntity, TCollection> _setCollection;
    private Action`2<TEntity, TCollection> _setCollectionForMaterialization;
    private Func`3<TEntity, Action`2<TEntity, TCollection>, TCollection> _createAndSetCollection;
    private Func`1<TCollection> _createCollection;
    public Type CollectionType { get; }
    public ClrICollectionAccessor`3(string propertyName, Func`2<TEntity, TCollection> getCollection, Action`2<TEntity, TCollection> setCollection, Action`2<TEntity, TCollection> setCollectionForMaterialization, Func`3<TEntity, Action`2<TEntity, TCollection>, TCollection> createAndSetCollection, Func`1<TCollection> createCollection);
    public virtual Type get_CollectionType();
    public virtual bool Add(object entity, object value, bool forMaterialization);
    public virtual object Create();
    public virtual object GetOrCreate(object entity, bool forMaterialization);
    private ICollection`1<TElement> GetOrCreateCollection(object instance, bool forMaterialization);
    private ICollection`1<TElement> GetCollection(object instance);
    public virtual bool Contains(object entity, object value);
    public virtual bool Remove(object entity, object value);
    private static bool Contains(ICollection`1<TElement> collection, object value);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ClrPropertyGetter`2 : object {
    private Func`2<TEntity, TValue> _getter;
    private Func`2<TEntity, bool> _hasDefaultValue;
    public ClrPropertyGetter`2(Func`2<TEntity, TValue> getter, Func`2<TEntity, bool> hasDefaultValue);
    public sealed virtual object GetClrValue(object entity);
    public sealed virtual bool HasDefaultValue(object entity);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ClrPropertyGetterFactory : ClrAccessorFactory`1<IClrPropertyGetter> {
    public virtual IClrPropertyGetter Create(IPropertyBase property);
    protected virtual IClrPropertyGetter CreateGeneric(MemberInfo memberInfo, IPropertyBase propertyBase);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ClrPropertyMaterializationSetterFactory : ClrPropertySetterFactory {
    public virtual IClrPropertySetter Create(IPropertyBase property);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ClrPropertySetter`2 : object {
    private Action`2<TEntity, TValue> _setter;
    public ClrPropertySetter`2(Action`2<TEntity, TValue> setter);
    public sealed virtual void SetClrValue(object instance, object value);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ClrPropertySetterFactory : ClrAccessorFactory`1<IClrPropertySetter> {
    public virtual IClrPropertySetter Create(IPropertyBase property);
    protected virtual IClrPropertySetter CreateGeneric(MemberInfo memberInfo, IPropertyBase propertyBase);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.CollectionTypeFactory : object {
    public virtual Type TryFindTypeToInstantiate(Type entityType, Type collectionType);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.ConfigurationSourceExtensions : object {
    [ExtensionAttribute]
[ContractAnnotationAttribute("left:notnull => notnull;right:notnull => notnull")]
public static Nullable`1<ConfigurationSource> Max(Nullable`1<ConfigurationSource> left, Nullable`1<ConfigurationSource> right);
    [ExtensionAttribute]
public static ConfigurationSource Max(ConfigurationSource left, Nullable`1<ConfigurationSource> right);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBindingFactory : object {
    private IPropertyParameterBindingFactory _propertyFactory;
    private IParameterBindingFactories _factories;
    public ConstructorBindingFactory(IPropertyParameterBindingFactory propertyFactory, IParameterBindingFactories factories);
    public virtual bool TryBindConstructor(IMutableEntityType entityType, ConstructorInfo constructor, InstantiationBinding& binding, IEnumerable`1& unboundParameters);
    public virtual bool TryBindConstructor(IConventionEntityType entityType, ConstructorInfo constructor, InstantiationBinding& binding, IEnumerable`1& unboundParameters);
    private bool TryBindConstructor(IEntityType entityType, ConstructorInfo constructor, Func`5<IParameterBindingFactory, IEntityType, Type, string, ParameterBinding> bind, InstantiationBinding& binding, IEnumerable`1& unboundParameters);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ContextParameterBindingFactory : object {
    public virtual bool CanBind(Type parameterType, string parameterName);
    public virtual ParameterBinding Bind(IMutableEntityType entityType, Type parameterType, string parameterName);
    public virtual ParameterBinding Bind(IConventionEntityType entityType, Type parameterType, string parameterName);
}
public abstract class Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionAnnotatable : Annotatable {
    public virtual IEnumerable`1<ConventionAnnotation> GetAnnotations();
    public virtual ConventionAnnotation AddAnnotation(string name, object value, ConfigurationSource configurationSource);
    public virtual ConventionAnnotation SetAnnotation(string name, object value, ConfigurationSource configurationSource);
    protected virtual Annotation OnAnnotationSet(string name, Annotation annotation, Annotation oldAnnotation);
    protected virtual IConventionAnnotation OnAnnotationSet(string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    public virtual ConventionAnnotation FindAnnotation(string name);
    public virtual ConventionAnnotation RemoveAnnotation(string name);
    protected virtual Annotation CreateAnnotation(string name, object value);
    private static ConventionAnnotation CreateAnnotation(string name, object value, ConfigurationSource configurationSource);
    private sealed virtual override IEnumerable`1<IConventionAnnotation> Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.GetAnnotations();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.SetAnnotation(string name, object value, bool fromDataAnnotation);
    private sealed virtual override IConventionAnnotation Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.AddAnnotation(string name, object value, bool fromDataAnnotation);
    private sealed virtual override IConventionAnnotation Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.FindAnnotation(string name);
    private sealed virtual override IConventionAnnotation Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.RemoveAnnotation(string name);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionAnnotatableExtensions : object {
    [ExtensionAttribute]
public static void SetOrRemoveAnnotation(ConventionAnnotatable annotatable, string name, object value, ConfigurationSource configurationSource);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionAnnotation : Annotation {
    private ConfigurationSource _configurationSource;
    public ConventionAnnotation(string name, object value, ConfigurationSource configurationSource);
    public virtual ConfigurationSource GetConfigurationSource();
    public virtual ConfigurationSource UpdateConfigurationSource(ConfigurationSource configurationSource);
}
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames : object {
    public static string MaxLength;
    public static string Unicode;
    public static string ProductVersion;
    public static string ValueGeneratorFactory;
    public static string PropertyAccessMode;
    public static string NavigationAccessMode;
    public static string ChangeTrackingStrategy;
    public static string OwnedTypes;
    public static string DiscriminatorProperty;
    public static string DiscriminatorValue;
    public static string ConstructorBinding;
    public static string TypeMapping;
    public static string ValueConverter;
    public static string ValueComparer;
    public static string KeyValueComparer;
    public static string StructuralValueComparer;
    public static string AfterSaveBehavior;
    public static string BeforeSaveBehavior;
    public static string QueryFilter;
    public static string DefiningQuery;
    public static string EagerLoaded;
    public static string ProviderClrType;
    public static string InverseNavigations;
    public static string NavigationCandidates;
    public static string AmbiguousNavigations;
    public static string DuplicateServiceProperties;
    public static string AmbiguousField;
    public static ISet`1<string> AllNames;
    private static CoreAnnotationNames();
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.DebugView`1 : object {
    [DebuggerBrowsableAttribute("0")]
private TMetadata _metadata;
    [DebuggerBrowsableAttribute("0")]
private Func`2<TMetadata, string> _toDebugString;
    [DebuggerBrowsableAttribute("0")]
private string _view;
    public string View { get; }
    public DebugView`1(TMetadata metadata, Func`2<TMetadata, string> toDebugString);
    public virtual string get_View();
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType : TypeBase {
    private SortedSet`1<ForeignKey> _foreignKeys;
    private SortedDictionary`2<string, Navigation> _navigations;
    private SortedDictionary`2<IReadOnlyList`1<IProperty>, Index> _indexes;
    private SortedDictionary`2<string, Property> _properties;
    private SortedDictionary`2<IReadOnlyList`1<IProperty>, Key> _keys;
    private SortedDictionary`2<string, ServiceProperty> _serviceProperties;
    private List`1<object> _data;
    private Key _primaryKey;
    private Nullable`1<bool> _isKeyless;
    private EntityType _baseType;
    private Nullable`1<ConfigurationSource> _primaryKeyConfigurationSource;
    private Nullable`1<ConfigurationSource> _isKeylessConfigurationSource;
    private Nullable`1<ConfigurationSource> _baseTypeConfigurationSource;
    private PropertyCounts _counts;
    private Func`2<InternalEntityEntry, ISnapshot> _relationshipSnapshotFactory;
    private Func`2<InternalEntityEntry, ISnapshot> _originalValuesFactory;
    private Func`2<InternalEntityEntry, ISnapshot> _temporaryValuesFactory;
    private Func`2<InternalEntityEntry, ISnapshot> _storeGeneratedValuesFactory;
    private Func`2<ValueBuffer, ISnapshot> _shadowValuesFactory;
    private Func`1<ISnapshot> _emptyShadowValuesFactory;
    [CompilerGeneratedAttribute]
private InternalEntityTypeBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefiningNavigationName>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityType <DefiningEntityType>k__BackingField;
    private SortedSet`1<EntityType> _directlyDerivedTypes;
    [CompilerGeneratedAttribute]
private SortedSet`1<ForeignKey> <DeclaredReferencingForeignKeys>k__BackingField;
    public InternalEntityTypeBuilder Builder { get; public set; }
    public EntityType BaseType { get; }
    public bool IsKeyless { get; public set; }
    public string DefiningNavigationName { get; }
    public EntityType DefiningEntityType { get; }
    private SortedSet`1<ForeignKey> DeclaredReferencingForeignKeys { get; private set; }
    public PropertyCounts Counts { get; }
    public Func`2<InternalEntityEntry, ISnapshot> RelationshipSnapshotFactory { get; }
    public Func`2<InternalEntityEntry, ISnapshot> OriginalValuesFactory { get; }
    public Func`2<InternalEntityEntry, ISnapshot> StoreGeneratedValuesFactory { get; }
    public Func`2<InternalEntityEntry, ISnapshot> TemporaryValuesFactory { get; }
    public Func`2<ValueBuffer, ISnapshot> ShadowValuesFactory { get; }
    public Func`1<ISnapshot> EmptyShadowValuesFactory { get; }
    private IModel Microsoft.EntityFrameworkCore.Metadata.ITypeBase.Model { get; }
    private IMutableModel Microsoft.EntityFrameworkCore.Metadata.IMutableTypeBase.Model { get; }
    private IMutableModel Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.Model { get; }
    private IEntityType Microsoft.EntityFrameworkCore.Metadata.IEntityType.BaseType { get; }
    private IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.BaseType { get; private set; }
    private IEntityType Microsoft.EntityFrameworkCore.Metadata.IEntityType.DefiningEntityType { get; }
    private IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.DefiningEntityType { get; }
    private IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.DefiningEntityType { get; }
    private IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.Builder { get; }
    private IConventionModel Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.Model { get; }
    private IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.BaseType { get; }
    public DebugView`1<EntityType> DebugView { get; }
    public EntityType(string name, Model model, ConfigurationSource configurationSource);
    public EntityType(Type clrType, Model model, ConfigurationSource configurationSource);
    public EntityType(string name, Model model, string definingNavigationName, EntityType definingEntityType, ConfigurationSource configurationSource);
    public EntityType(Type clrType, Model model, string definingNavigationName, EntityType definingEntityType, ConfigurationSource configurationSource);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual InternalEntityTypeBuilder get_Builder();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual void set_Builder(InternalEntityTypeBuilder value);
    public virtual EntityType get_BaseType();
    public virtual bool get_IsKeyless();
    public virtual void set_IsKeyless(bool value);
    [CompilerGeneratedAttribute]
public virtual string get_DefiningNavigationName();
    [CompilerGeneratedAttribute]
public virtual EntityType get_DefiningEntityType();
    public virtual void HasNoKey(Nullable`1<bool> keyless, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetIsKeylessConfigurationSource();
    public virtual void UpdateIsKeylessConfigurationSource(ConfigurationSource configurationSource);
    public virtual void HasBaseType(EntityType newBaseType, ConfigurationSource configurationSource);
    public virtual void OnTypeRemoved();
    public virtual Nullable`1<ConfigurationSource> GetBaseTypeConfigurationSource();
    private void UpdateBaseTypeConfigurationSource(ConfigurationSource configurationSource);
    public virtual ISet`1<EntityType> GetDirectlyDerivedTypes();
    public virtual IEnumerable`1<EntityType> GetDerivedTypes();
    public virtual IEnumerable`1<EntityType> GetDerivedTypesInclusive();
    public virtual IEnumerable`1<ForeignKey> GetForeignKeysInHierarchy();
    private bool InheritsFrom(EntityType entityType);
    [DebuggerStepThroughAttribute]
public virtual EntityType RootType();
    public virtual string ToString();
    protected virtual IConventionAnnotation OnAnnotationSet(string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    public virtual IEnumerable`1<PropertyBase> FindMembersInHierarchy(string name);
    public virtual Key SetPrimaryKey(Property property, ConfigurationSource configurationSource);
    public virtual Key SetPrimaryKey(IReadOnlyList`1<Property> properties, ConfigurationSource configurationSource);
    public virtual Key FindPrimaryKey();
    public virtual Key FindDeclaredPrimaryKey();
    public virtual Key FindPrimaryKey(IReadOnlyList`1<Property> properties);
    public virtual Nullable`1<ConfigurationSource> GetPrimaryKeyConfigurationSource();
    private void SetPrimaryKeyConfigurationSource(Nullable`1<ConfigurationSource> configurationSource);
    private void UpdatePrimaryKeyConfigurationSource(ConfigurationSource configurationSource);
    public virtual Key AddKey(Property property, ConfigurationSource configurationSource);
    public virtual Key AddKey(IReadOnlyList`1<Property> properties, ConfigurationSource configurationSource);
    public virtual Key FindKey(IProperty property);
    public virtual Key FindKey(IReadOnlyList`1<IProperty> properties);
    public virtual IEnumerable`1<Key> GetDeclaredKeys();
    public virtual Key FindDeclaredKey(IReadOnlyList`1<IProperty> properties);
    public virtual Key RemoveKey(IReadOnlyList`1<IProperty> properties);
    public virtual Key RemoveKey(Key key);
    private void CheckKeyNotInUse(Key key);
    public virtual IEnumerable`1<Key> GetKeys();
    public virtual ForeignKey AddForeignKey(Property property, Key principalKey, EntityType principalEntityType, Nullable`1<ConfigurationSource> componentConfigurationSource, ConfigurationSource configurationSource);
    public virtual ForeignKey AddForeignKey(IReadOnlyList`1<Property> properties, Key principalKey, EntityType principalEntityType, Nullable`1<ConfigurationSource> componentConfigurationSource, ConfigurationSource configurationSource);
    public virtual void OnForeignKeyUpdating(ForeignKey foreignKey);
    public virtual void OnForeignKeyUpdated(ForeignKey foreignKey);
    public virtual IEnumerable`1<ForeignKey> FindForeignKeys(IProperty property);
    public virtual IEnumerable`1<ForeignKey> FindForeignKeys(IReadOnlyList`1<IProperty> properties);
    public virtual ForeignKey FindForeignKey(IProperty property, IKey principalKey, IEntityType principalEntityType);
    public virtual ForeignKey FindForeignKey(IReadOnlyList`1<IProperty> properties, IKey principalKey, IEntityType principalEntityType);
    public virtual ForeignKey FindOwnership();
    public virtual ForeignKey FindDeclaredOwnership();
    public virtual IEnumerable`1<ForeignKey> GetDeclaredForeignKeys();
    public virtual IEnumerable`1<ForeignKey> GetDerivedForeignKeys();
    public virtual IEnumerable`1<ForeignKey> GetForeignKeys();
    public virtual IEnumerable`1<ForeignKey> FindDeclaredForeignKeys(IReadOnlyList`1<IProperty> properties);
    public virtual ForeignKey FindDeclaredForeignKey(IReadOnlyList`1<IProperty> properties, IKey principalKey, IEntityType principalEntityType);
    public virtual IEnumerable`1<ForeignKey> FindDerivedForeignKeys(IReadOnlyList`1<IProperty> properties);
    public virtual IEnumerable`1<ForeignKey> FindDerivedForeignKeys(IReadOnlyList`1<IProperty> properties, IKey principalKey, IEntityType principalEntityType);
    public virtual IEnumerable`1<ForeignKey> FindForeignKeysInHierarchy(IReadOnlyList`1<IProperty> properties);
    public virtual IEnumerable`1<ForeignKey> FindForeignKeysInHierarchy(IReadOnlyList`1<IProperty> properties, IKey principalKey, IEntityType principalEntityType);
    public virtual ForeignKey RemoveForeignKey(IReadOnlyList`1<IProperty> properties, IKey principalKey, IEntityType principalEntityType);
    public virtual ForeignKey RemoveForeignKey(ForeignKey foreignKey);
    public virtual IEnumerable`1<ForeignKey> GetReferencingForeignKeys();
    public virtual IEnumerable`1<ForeignKey> GetDeclaredReferencingForeignKeys();
    public virtual IEnumerable`1<ForeignKey> GetDerivedReferencingForeignKeys();
    [CompilerGeneratedAttribute]
private SortedSet`1<ForeignKey> get_DeclaredReferencingForeignKeys();
    [CompilerGeneratedAttribute]
private void set_DeclaredReferencingForeignKeys(SortedSet`1<ForeignKey> value);
    public virtual Navigation AddNavigation(string name, ForeignKey foreignKey, bool pointsToPrincipal);
    public virtual Navigation AddNavigation(MemberInfo navigationProperty, ForeignKey foreignKey, bool pointsToPrincipal);
    private Navigation AddNavigation(MemberIdentity propertyIdentity, ForeignKey foreignKey, bool pointsToPrincipal);
    public virtual Navigation FindNavigation(string name);
    public virtual Navigation FindNavigation(MemberInfo memberInfo);
    public virtual Navigation FindDeclaredNavigation(string name);
    public virtual IEnumerable`1<Navigation> GetDeclaredNavigations();
    public virtual IEnumerable`1<Navigation> GetDerivedNavigations();
    public virtual IEnumerable`1<Navigation> GetDerivedNavigationsInclusive();
    public virtual IEnumerable`1<Navigation> FindDerivedNavigations(string navigationName);
    public virtual IEnumerable`1<Navigation> FindNavigationsInHierarchy(string navigationName);
    public virtual Navigation RemoveNavigation(string name);
    public virtual IEnumerable`1<Navigation> GetNavigations();
    public virtual Index AddIndex(Property property, ConfigurationSource configurationSource);
    public virtual Index AddIndex(IReadOnlyList`1<Property> properties, ConfigurationSource configurationSource);
    public virtual Index FindIndex(IProperty property);
    public virtual Index FindIndex(IReadOnlyList`1<IProperty> properties);
    public virtual IEnumerable`1<Index> GetDeclaredIndexes();
    public virtual IEnumerable`1<Index> GetDerivedIndexes();
    public virtual Index FindDeclaredIndex(IReadOnlyList`1<IProperty> properties);
    public virtual IEnumerable`1<Index> FindDerivedIndexes(IReadOnlyList`1<IProperty> properties);
    public virtual IEnumerable`1<Index> FindIndexesInHierarchy(IReadOnlyList`1<IProperty> properties);
    public virtual Index RemoveIndex(IReadOnlyList`1<IProperty> properties);
    public virtual Index RemoveIndex(Index index);
    public virtual IEnumerable`1<Index> GetIndexes();
    public virtual Property AddProperty(string name, Type propertyType, Nullable`1<ConfigurationSource> typeConfigurationSource, ConfigurationSource configurationSource);
    public virtual Property AddProperty(MemberInfo memberInfo, ConfigurationSource configurationSource);
    public virtual Property AddProperty(string name, ConfigurationSource configurationSource);
    public virtual Property AddProperty(string name, Type propertyType, MemberInfo memberInfo, Nullable`1<ConfigurationSource> typeConfigurationSource, ConfigurationSource configurationSource);
    public virtual Property FindProperty(string name);
    public virtual Property FindDeclaredProperty(string name);
    public virtual IEnumerable`1<Property> GetDeclaredProperties();
    public virtual IEnumerable`1<Property> FindDerivedProperties(string propertyName);
    public virtual IEnumerable`1<Property> FindDerivedPropertiesInclusive(string propertyName);
    public virtual IEnumerable`1<Property> FindPropertiesInHierarchy(string propertyName);
    public virtual IReadOnlyList`1<Property> FindProperties(IReadOnlyList`1<string> propertyNames);
    public virtual Property RemoveProperty(string name);
    public virtual Property RemoveProperty(Property property);
    private void CheckPropertyNotInUse(Property property);
    public virtual IEnumerable`1<Property> GetProperties();
    public virtual PropertyCounts get_Counts();
    public virtual Func`2<InternalEntityEntry, ISnapshot> get_RelationshipSnapshotFactory();
    public virtual Func`2<InternalEntityEntry, ISnapshot> get_OriginalValuesFactory();
    public virtual Func`2<InternalEntityEntry, ISnapshot> get_StoreGeneratedValuesFactory();
    public virtual Func`2<InternalEntityEntry, ISnapshot> get_TemporaryValuesFactory();
    public virtual Func`2<ValueBuffer, ISnapshot> get_ShadowValuesFactory();
    public virtual Func`1<ISnapshot> get_EmptyShadowValuesFactory();
    public virtual ServiceProperty AddServiceProperty(MemberInfo memberInfo, ConfigurationSource configurationSource);
    public virtual ServiceProperty FindServiceProperty(string name);
    public virtual Property FindServiceProperty(MemberInfo memberInfo);
    public virtual ServiceProperty FindDeclaredServiceProperty(string name);
    public virtual IEnumerable`1<ServiceProperty> FindDerivedServiceProperties(string propertyName);
    public virtual IEnumerable`1<ServiceProperty> FindDerivedServicePropertiesInclusive(string propertyName);
    public virtual IEnumerable`1<ServiceProperty> FindServicePropertiesInHierarchy(string propertyName);
    public virtual ServiceProperty RemoveServiceProperty(string name);
    private ServiceProperty RemoveServiceProperty(ServiceProperty property);
    public virtual IEnumerable`1<ServiceProperty> GetServiceProperties();
    public virtual IEnumerable`1<ServiceProperty> GetDeclaredServiceProperties();
    public virtual Nullable`1<ConfigurationSource> FindIgnoredConfigurationSource(string name);
    public virtual void OnTypeMemberIgnored(string name);
    public virtual IEnumerable`1<IDictionary`2<string, object>> GetSeedData(bool providerValues);
    public virtual void AddData(IEnumerable`1<object> data);
    public virtual void SetChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, ConfigurationSource configurationSource);
    public virtual string CheckChangeTrackingStrategy(ChangeTrackingStrategy value);
    public virtual void SetQueryFilter(LambdaExpression queryFilter, ConfigurationSource configurationSource);
    public virtual string CheckQueryFilter(LambdaExpression queryFilter);
    public virtual void SetDefiningQuery(LambdaExpression definingQuery, ConfigurationSource configurationSource);
    public virtual void SetDiscriminatorProperty(IProperty property, ConfigurationSource configurationSource);
    private void CheckDiscriminatorProperty(IProperty property);
    public virtual void CheckDiscriminatorValue(IEntityType entityType, object value);
    [DebuggerStepThroughAttribute]
private sealed virtual override IModel Microsoft.EntityFrameworkCore.Metadata.ITypeBase.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableModel Microsoft.EntityFrameworkCore.Metadata.IMutableTypeBase.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableModel Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IEntityType.get_BaseType();
    private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.get_BaseType();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.set_BaseType(IMutableEntityType value);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IEntityType.get_DefiningEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.get_DefiningEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.get_DefiningEntityType();
    private sealed virtual override IMutableKey Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.SetPrimaryKey(IReadOnlyList`1<IMutableProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IKey Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindPrimaryKey();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableKey Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.FindPrimaryKey();
    private sealed virtual override IMutableKey Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.AddKey(IReadOnlyList`1<IMutableProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IKey Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindKey(IReadOnlyList`1<IProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableKey Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.FindKey(IReadOnlyList`1<IProperty> properties);
    private sealed virtual override IEnumerable`1<IKey> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetKeys();
    private sealed virtual override IEnumerable`1<IMutableKey> Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.GetKeys();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.RemoveKey(IMutableKey key);
    private sealed virtual override IMutableForeignKey Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.AddForeignKey(IReadOnlyList`1<IMutableProperty> properties, IMutableKey principalKey, IMutableEntityType principalEntityType);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableForeignKey Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.FindForeignKey(IReadOnlyList`1<IProperty> properties, IKey principalKey, IEntityType principalEntityType);
    [DebuggerStepThroughAttribute]
private sealed virtual override IForeignKey Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindForeignKey(IReadOnlyList`1<IProperty> properties, IKey principalKey, IEntityType principalEntityType);
    private sealed virtual override IEnumerable`1<IForeignKey> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetForeignKeys();
    private sealed virtual override IEnumerable`1<IMutableForeignKey> Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.GetForeignKeys();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.RemoveForeignKey(IMutableForeignKey foreignKey);
    private sealed virtual override IMutableIndex Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.AddIndex(IReadOnlyList`1<IMutableProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IIndex Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindIndex(IReadOnlyList`1<IProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableIndex Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.FindIndex(IReadOnlyList`1<IProperty> properties);
    private sealed virtual override IEnumerable`1<IIndex> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetIndexes();
    private sealed virtual override IEnumerable`1<IMutableIndex> Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.GetIndexes();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.RemoveIndex(IMutableIndex index);
    private sealed virtual override IMutableProperty Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.AddProperty(string name, Type propertyType, MemberInfo memberInfo);
    [DebuggerStepThroughAttribute]
private sealed virtual override IProperty Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindProperty(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableProperty Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.FindProperty(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IProperty> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IMutableProperty> Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.GetProperties();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.RemoveProperty(IMutableProperty property);
    private sealed virtual override IMutableServiceProperty Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.AddServiceProperty(MemberInfo memberInfo);
    [DebuggerStepThroughAttribute]
private sealed virtual override IServiceProperty Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindServiceProperty(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableServiceProperty Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.FindServiceProperty(string name);
    private sealed virtual override IEnumerable`1<IServiceProperty> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetServiceProperties();
    private sealed virtual override IEnumerable`1<IMutableServiceProperty> Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.GetServiceProperties();
    private sealed virtual override IMutableServiceProperty Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.RemoveServiceProperty(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionModel Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.get_BaseType();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.HasBaseType(IConventionEntityType entityType, bool fromDataAnnotation);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.HasNoKey(Nullable`1<bool> keyless, bool fromDataAnnotation);
    private sealed virtual override IConventionKey Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.SetPrimaryKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    private sealed virtual override IConventionKey Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindPrimaryKey();
    private sealed virtual override IConventionKey Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindKey(IReadOnlyList`1<IProperty> properties);
    private sealed virtual override IEnumerable`1<IConventionKey> Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetKeys();
    private sealed virtual override IConventionForeignKey Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindForeignKey(IReadOnlyList`1<IProperty> properties, IKey principalKey, IEntityType principalEntityType);
    private sealed virtual override IEnumerable`1<IConventionForeignKey> Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetForeignKeys();
    private sealed virtual override IConventionIndex Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindIndex(IReadOnlyList`1<IProperty> properties);
    private sealed virtual override IEnumerable`1<IConventionIndex> Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetIndexes();
    private sealed virtual override IConventionProperty Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindProperty(string name);
    private sealed virtual override IEnumerable`1<IConventionProperty> Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetProperties();
    private sealed virtual override IConventionServiceProperty Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindServiceProperty(string name);
    private sealed virtual override IEnumerable`1<IConventionServiceProperty> Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetServiceProperties();
    private sealed virtual override IConventionServiceProperty Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveServiceProperty(string name);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveProperty(IConventionProperty property);
    private sealed virtual override IConventionServiceProperty Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddServiceProperty(MemberInfo memberInfo, bool fromDataAnnotation);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveIndex(IConventionIndex index);
    private sealed virtual override IConventionProperty Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddProperty(string name, Type propertyType, MemberInfo memberInfo, bool setTypeConfigurationSource, bool fromDataAnnotation);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveForeignKey(IConventionForeignKey foreignKey);
    private sealed virtual override IConventionIndex Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddIndex(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveKey(IConventionKey key);
    private sealed virtual override IConventionForeignKey Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddForeignKey(IReadOnlyList`1<IConventionProperty> properties, IConventionKey principalKey, IConventionEntityType principalEntityType, bool setComponentConfigurationSource, bool fromDataAnnotation);
    private sealed virtual override IConventionKey Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    private static IEnumerable`1<T> ToEnumerable(T element);
    public virtual DebugView`1<EntityType> get_DebugView();
    [CompilerGeneratedAttribute]
private bool <AddKey>b__65_0(ForeignKey k);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions : object {
    [ExtensionAttribute]
public static MemberInfo GetNavigationMemberInfo(IEntityType entityType, string navigationName);
    [ExtensionAttribute]
public static IEnumerable`1<IEntityType> GetAllBaseTypes(IEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IEntityType> GetAllBaseTypesAscending(IEntityType entityType);
    [ExtensionAttribute]
public static IForeignKey FindDeclaredOwnership(IEntityType entityType);
    [ExtensionAttribute]
public static IEntityType FindInDefinitionPath(IEntityType entityType, Type targetType);
    [ExtensionAttribute]
public static EntityType FindInDefinitionPath(EntityType entityType, Type targetType);
    [ExtensionAttribute]
public static IEntityType FindInDefinitionPath(IEntityType entityType, string targetTypeName);
    [ExtensionAttribute]
public static EntityType FindInDefinitionPath(EntityType entityType, string targetTypeName);
    [ExtensionAttribute]
public static bool IsInDefinitionPath(IEntityType entityType, Type targetType);
    [ExtensionAttribute]
public static bool IsInDefinitionPath(IEntityType entityType, string targetTypeName);
    [ExtensionAttribute]
public static IEntityType FindInOwnershipPath(IEntityType entityType, Type targetType);
    [ExtensionAttribute]
public static bool IsInOwnershipPath(IEntityType entityType, Type targetType);
    [ExtensionAttribute]
public static bool IsInOwnershipPath(IEntityType entityType, IEntityType targetType);
    [ExtensionAttribute]
public static bool UseEagerSnapshots(IEntityType entityType);
    [ExtensionAttribute]
public static int StoreGeneratedCount(IEntityType entityType);
    [ExtensionAttribute]
public static int RelationshipPropertyCount(IEntityType entityType);
    [ExtensionAttribute]
public static int OriginalValueCount(IEntityType entityType);
    [ExtensionAttribute]
public static int ShadowPropertyCount(IEntityType entityType);
    [ExtensionAttribute]
public static int NavigationCount(IEntityType entityType);
    [ExtensionAttribute]
public static int PropertyCount(IEntityType entityType);
    [ExtensionAttribute]
public static PropertyCounts GetCounts(IEntityType entityType);
    [ExtensionAttribute]
public static PropertyCounts CalculateCounts(EntityType entityType);
    [ExtensionAttribute]
public static Func`1<ISnapshot> GetEmptyShadowValuesFactory(IEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IEntityType> GetTypesInHierarchy(IEntityType entityType);
    [ExtensionAttribute]
public static bool IsSameHierarchy(IEntityType firstEntityType, IEntityType secondEntityType);
    [ExtensionAttribute]
public static EntityType LeastDerivedType(EntityType entityType, EntityType otherEntityType);
    [ExtensionAttribute]
public static IKey FindDeclaredPrimaryKey(IEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<INavigation> FindDerivedNavigations(IEntityType entityType, string navigationName);
    [ExtensionAttribute]
public static IEnumerable`1<Navigation> GetDerivedNavigations(IEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IPropertyBase> GetPropertiesAndNavigations(IEntityType entityType);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions/<GetNotificationProperties>d__30")]
[ExtensionAttribute]
public static IEnumerable`1<IPropertyBase> GetNotificationProperties(IEntityType entityType, string propertyName);
    [ExtensionAttribute]
public static string ToDebugString(IEntityType entityType, bool singleLine, string indent);
    [ExtensionAttribute]
public static IProperty GetProperty(IEntityType entityType, string name);
    [ExtensionAttribute]
public static IProperty CheckPropertyBelongsToType(IEntityType entityType, IProperty property);
    [ExtensionAttribute]
public static EntityType AsEntityType(IEntityType entityType, string methodName);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeParameterBindingFactory : object {
    public virtual bool CanBind(Type parameterType, string parameterName);
    public virtual ParameterBinding Bind(IMutableEntityType entityType, Type parameterType, string parameterName);
    public virtual ParameterBinding Bind(IConventionEntityType entityType, Type parameterType, string parameterName);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypePathComparer : object {
    public static EntityTypePathComparer Instance;
    private static EntityTypePathComparer();
    public virtual int Compare(IEntityType x, IEntityType y);
    public sealed virtual bool Equals(IEntityType x, IEntityType y);
    public virtual int GetHashCode(IEntityType entityType);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey : ConventionAnnotatable {
    private Nullable`1<DeleteBehavior> _deleteBehavior;
    private Nullable`1<bool> _isUnique;
    private bool _isRequired;
    private Nullable`1<bool> _isOwnership;
    private ConfigurationSource _configurationSource;
    private Nullable`1<ConfigurationSource> _propertiesConfigurationSource;
    private Nullable`1<ConfigurationSource> _principalKeyConfigurationSource;
    private Nullable`1<ConfigurationSource> _isUniqueConfigurationSource;
    private Nullable`1<ConfigurationSource> _isRequiredConfigurationSource;
    private Nullable`1<ConfigurationSource> _deleteBehaviorConfigurationSource;
    private Nullable`1<ConfigurationSource> _principalEndConfigurationSource;
    private Nullable`1<ConfigurationSource> _isOwnershipConfigurationSource;
    private Nullable`1<ConfigurationSource> _dependentToPrincipalConfigurationSource;
    private Nullable`1<ConfigurationSource> _principalToDependentConfigurationSource;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Property> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private Key <PrincipalKey>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityType <DeclaringEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityType <PrincipalEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalRelationshipBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private Navigation <DependentToPrincipal>k__BackingField;
    [CompilerGeneratedAttribute]
private Navigation <PrincipalToDependent>k__BackingField;
    [CompilerGeneratedAttribute]
private object <DependentKeyValueFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`1<IDependentsMap> <DependentsMapFactory>k__BackingField;
    public IReadOnlyList`1<Property> Properties { get; private set; }
    public Key PrincipalKey { get; private set; }
    public EntityType DeclaringEntityType { get; }
    public EntityType PrincipalEntityType { get; }
    public InternalRelationshipBuilder Builder { get; public set; }
    public Navigation DependentToPrincipal { get; private set; }
    public Navigation PrincipalToDependent { get; private set; }
    public bool IsUnique { get; public set; }
    private static bool DefaultIsUnique { get; }
    public bool IsRequired { get; public set; }
    private bool DefaultIsRequired { get; }
    public DeleteBehavior DeleteBehavior { get; public set; }
    private static DeleteBehavior DefaultDeleteBehavior { get; }
    public bool IsOwnership { get; public set; }
    private static bool DefaultIsOwnership { get; }
    public object DependentKeyValueFactory { get; public set; }
    public Func`1<IDependentsMap> DependentsMapFactory { get; public set; }
    private IReadOnlyList`1<IProperty> Microsoft.EntityFrameworkCore.Metadata.IForeignKey.Properties { get; }
    private IKey Microsoft.EntityFrameworkCore.Metadata.IForeignKey.PrincipalKey { get; }
    private IEntityType Microsoft.EntityFrameworkCore.Metadata.IForeignKey.DeclaringEntityType { get; }
    private IEntityType Microsoft.EntityFrameworkCore.Metadata.IForeignKey.PrincipalEntityType { get; }
    private INavigation Microsoft.EntityFrameworkCore.Metadata.IForeignKey.DependentToPrincipal { get; }
    private INavigation Microsoft.EntityFrameworkCore.Metadata.IForeignKey.PrincipalToDependent { get; }
    private IReadOnlyList`1<IMutableProperty> Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.Properties { get; }
    private IMutableKey Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.PrincipalKey { get; }
    private IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.DeclaringEntityType { get; }
    private IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.PrincipalEntityType { get; }
    private IMutableNavigation Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.DependentToPrincipal { get; }
    private IMutableNavigation Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.PrincipalToDependent { get; }
    private IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.DeclaringEntityType { get; }
    private IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.PrincipalEntityType { get; }
    private IConventionKey Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.PrincipalKey { get; }
    private IReadOnlyList`1<IConventionProperty> Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.Properties { get; }
    private IConventionNavigation Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.DependentToPrincipal { get; }
    private IConventionNavigation Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.PrincipalToDependent { get; }
    public DebugView`1<ForeignKey> DebugView { get; }
    private IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.Builder { get; }
    public ForeignKey(IReadOnlyList`1<Property> dependentProperties, Key principalKey, EntityType dependentEntityType, EntityType principalEntityType, ConfigurationSource configurationSource);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual IReadOnlyList`1<Property> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(IReadOnlyList`1<Property> value);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual Key get_PrincipalKey();
    [CompilerGeneratedAttribute]
private void set_PrincipalKey(Key value);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual EntityType get_DeclaringEntityType();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual EntityType get_PrincipalEntityType();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual InternalRelationshipBuilder get_Builder();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual void set_Builder(InternalRelationshipBuilder value);
    public virtual ConfigurationSource GetConfigurationSource();
    public virtual void UpdateConfigurationSource(ConfigurationSource configurationSource);
    protected virtual IConventionAnnotation OnAnnotationSet(string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    public virtual void SetProperties(IReadOnlyList`1<Property> properties, Key principalKey, Nullable`1<ConfigurationSource> configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetPropertiesConfigurationSource();
    public virtual void UpdatePropertiesConfigurationSource(ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetPrincipalKeyConfigurationSource();
    public virtual void UpdatePrincipalKeyConfigurationSource(ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetPrincipalEndConfigurationSource();
    public virtual void SetPrincipalEndConfigurationSource(Nullable`1<ConfigurationSource> configurationSource);
    public virtual void UpdatePrincipalEndConfigurationSource(ConfigurationSource configurationSource);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual Navigation get_DependentToPrincipal();
    [CompilerGeneratedAttribute]
private void set_DependentToPrincipal(Navigation value);
    public virtual Navigation HasDependentToPrincipal(string name, ConfigurationSource configurationSource);
    public virtual Navigation HasDependentToPrincipal(MemberInfo property, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetDependentToPrincipalConfigurationSource();
    public virtual void UpdateDependentToPrincipalConfigurationSource(Nullable`1<ConfigurationSource> configurationSource);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual Navigation get_PrincipalToDependent();
    [CompilerGeneratedAttribute]
private void set_PrincipalToDependent(Navigation value);
    public virtual Navigation HasPrincipalToDependent(string name, ConfigurationSource configurationSource);
    public virtual Navigation HasPrincipalToDependent(MemberInfo property, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetPrincipalToDependentConfigurationSource();
    public virtual void UpdatePrincipalToDependentConfigurationSource(Nullable`1<ConfigurationSource> configurationSource);
    private Navigation Navigation(Nullable`1<MemberIdentity> propertyIdentity, ConfigurationSource configurationSource, bool pointsToPrincipal);
    public virtual bool get_IsUnique();
    public virtual void set_IsUnique(bool value);
    public virtual ForeignKey SetIsUnique(Nullable`1<bool> unique, ConfigurationSource configurationSource);
    private static bool get_DefaultIsUnique();
    public virtual Nullable`1<ConfigurationSource> GetIsUniqueConfigurationSource();
    public virtual void UpdateIsUniqueConfigurationSource(ConfigurationSource configurationSource);
    public virtual bool get_IsRequired();
    public virtual void set_IsRequired(bool value);
    public virtual ForeignKey SetIsRequired(Nullable`1<bool> required, ConfigurationSource configurationSource);
    private bool get_DefaultIsRequired();
    public virtual Nullable`1<ConfigurationSource> GetIsRequiredConfigurationSource();
    public virtual void SetIsRequiredConfigurationSource(Nullable`1<ConfigurationSource> configurationSource);
    public virtual void UpdateIsRequiredConfigurationSource(ConfigurationSource configurationSource);
    public virtual DeleteBehavior get_DeleteBehavior();
    public virtual void set_DeleteBehavior(DeleteBehavior value);
    public virtual ForeignKey SetDeleteBehavior(Nullable`1<DeleteBehavior> deleteBehavior, ConfigurationSource configurationSource);
    private static DeleteBehavior get_DefaultDeleteBehavior();
    public virtual Nullable`1<ConfigurationSource> GetDeleteBehaviorConfigurationSource();
    public virtual void UpdateDeleteBehaviorConfigurationSource(ConfigurationSource configurationSource);
    public virtual bool get_IsOwnership();
    public virtual void set_IsOwnership(bool value);
    public virtual ForeignKey SetIsOwnership(Nullable`1<bool> ownership, ConfigurationSource configurationSource);
    private static bool get_DefaultIsOwnership();
    public virtual Nullable`1<ConfigurationSource> GetIsOwnershipConfigurationSource();
    public virtual void UpdateIsOwnershipConfigurationSource(ConfigurationSource configurationSource);
    public virtual IEnumerable`1<Navigation> FindNavigationsFromInHierarchy(EntityType entityType);
    public virtual IEnumerable`1<Navigation> FindNavigationsTo(EntityType entityType);
    public virtual EntityType ResolveOtherEntityType(EntityType entityType);
    [CompilerGeneratedAttribute]
public virtual object get_DependentKeyValueFactory();
    [CompilerGeneratedAttribute]
public virtual void set_DependentKeyValueFactory(object value);
    [CompilerGeneratedAttribute]
public virtual Func`1<IDependentsMap> get_DependentsMapFactory();
    [CompilerGeneratedAttribute]
public virtual void set_DependentsMapFactory(Func`1<IDependentsMap> value);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IProperty> Microsoft.EntityFrameworkCore.Metadata.IForeignKey.get_Properties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IKey Microsoft.EntityFrameworkCore.Metadata.IForeignKey.get_PrincipalKey();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IForeignKey.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IForeignKey.get_PrincipalEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override INavigation Microsoft.EntityFrameworkCore.Metadata.IForeignKey.get_DependentToPrincipal();
    [DebuggerStepThroughAttribute]
private sealed virtual override INavigation Microsoft.EntityFrameworkCore.Metadata.IForeignKey.get_PrincipalToDependent();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IMutableProperty> Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.get_Properties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableKey Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.get_PrincipalKey();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.get_PrincipalEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableNavigation Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.get_DependentToPrincipal();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableNavigation Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.get_PrincipalToDependent();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.SetProperties(IReadOnlyList`1<IMutableProperty> properties, IMutableKey principalKey);
    private sealed virtual override IMutableNavigation Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.HasDependentToPrincipal(string name);
    private sealed virtual override IMutableNavigation Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.HasDependentToPrincipal(MemberInfo property);
    private sealed virtual override IMutableNavigation Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.HasPrincipalToDependent(string name);
    private sealed virtual override IMutableNavigation Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.HasPrincipalToDependent(MemberInfo property);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.get_PrincipalEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionKey Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.get_PrincipalKey();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IConventionProperty> Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.get_Properties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionNavigation Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.get_DependentToPrincipal();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionNavigation Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.get_PrincipalToDependent();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.SetProperties(IReadOnlyList`1<IConventionProperty> properties, IConventionKey principalKey, bool fromDataAnnotation);
    private sealed virtual override IConventionNavigation Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.HasDependentToPrincipal(string name, bool fromDataAnnotation);
    private sealed virtual override IConventionNavigation Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.HasDependentToPrincipal(MemberInfo property, bool fromDataAnnotation);
    private sealed virtual override IConventionNavigation Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.HasPrincipalToDependent(string name, bool fromDataAnnotation);
    private sealed virtual override IConventionNavigation Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.HasPrincipalToDependent(MemberInfo property, bool fromDataAnnotation);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.SetIsUnique(Nullable`1<bool> unique, bool fromDataAnnotation);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.SetIsRequired(Nullable`1<bool> required, bool fromDataAnnotation);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.SetIsOwnership(Nullable`1<bool> ownership, bool fromDataAnnotation);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.SetDeleteBehavior(Nullable`1<DeleteBehavior> deleteBehavior, bool fromDataAnnotation);
    public virtual string ToString();
    private void Validate(IReadOnlyList`1<Property> properties, Key principalKey, EntityType declaringEntityType, EntityType principalEntityType);
    public static bool AreCompatible(EntityType principalEntityType, EntityType dependentEntityType, MemberInfo navigationToPrincipal, MemberInfo navigationToDependent, IReadOnlyList`1<Property> dependentProperties, IReadOnlyList`1<Property> principalProperties, Nullable`1<bool> unique, bool shouldThrow);
    public static bool AreCompatible(IReadOnlyList`1<IProperty> principalProperties, IReadOnlyList`1<IProperty> dependentProperties, IEntityType principalEntityType, IEntityType dependentEntityType, bool shouldThrow);
    private static bool ArePropertyCountsEqual(IReadOnlyList`1<IProperty> principalProperties, IReadOnlyList`1<IProperty> dependentProperties);
    private static bool ArePropertyTypesCompatible(IReadOnlyList`1<IProperty> principalProperties, IReadOnlyList`1<IProperty> dependentProperties);
    public virtual DebugView`1<ForeignKey> get_DebugView();
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.get_Builder();
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyComparer : object {
    public static ForeignKeyComparer Instance;
    private static ForeignKeyComparer();
    public virtual int Compare(IForeignKey x, IForeignKey y);
    public virtual bool Equals(IForeignKey x, IForeignKey y);
    public virtual int GetHashCode(IForeignKey obj);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions : object {
    [ExtensionAttribute]
public static bool IsSelfReferencing(IForeignKey foreignKey);
    [ExtensionAttribute]
public static bool IsIntraHierarchical(IForeignKey foreignKey);
    [ExtensionAttribute]
public static bool IsSelfPrimaryKeyReferencing(IForeignKey foreignKey);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions/<GetNavigations>d__3")]
[ExtensionAttribute]
public static IEnumerable`1<INavigation> GetNavigations(IForeignKey foreignKey);
    [ExtensionAttribute]
public static IEnumerable`1<INavigation> FindNavigationsFrom(IForeignKey foreignKey, IEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<INavigation> FindNavigationsFromInHierarchy(IForeignKey foreignKey, IEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<INavigation> FindNavigationsTo(IForeignKey foreignKey, IEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<INavigation> FindNavigationsToInHierarchy(IForeignKey foreignKey, IEntityType entityType);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions/<FindNavigations>d__8")]
[ExtensionAttribute]
private static IEnumerable`1<INavigation> FindNavigations(IForeignKey foreignKey, bool toPrincipal);
    [ExtensionAttribute]
public static IEntityType ResolveOtherEntityTypeInHierarchy(IForeignKey foreignKey, IEntityType entityType);
    [ExtensionAttribute]
public static IEntityType ResolveEntityTypeInHierarchy(IForeignKey foreignKey, IEntityType entityType);
    [ExtensionAttribute]
public static IDependentKeyValueFactory`1<TKey> GetDependentKeyValueFactory(IForeignKey foreignKey);
    [ExtensionAttribute]
public static IDependentsMap CreateDependentsMapFactory(IForeignKey foreignKey);
    [ExtensionAttribute]
public static string ToDebugString(IForeignKey foreignKey, bool singleLine, string indent);
    [ExtensionAttribute]
public static ForeignKey AsForeignKey(IForeignKey foreignKey, string methodName);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Internal.IMemberClassifier {
    public abstract virtual Type FindCandidateNavigationPropertyType(MemberInfo memberInfo);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.Index : ConventionAnnotatable {
    private Nullable`1<bool> _isUnique;
    private ConfigurationSource _configurationSource;
    private Nullable`1<ConfigurationSource> _isUniqueConfigurationSource;
    private object _nullableValueFactory;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Property> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityType <DeclaringEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalIndexBuilder <Builder>k__BackingField;
    public IReadOnlyList`1<Property> Properties { get; }
    public EntityType DeclaringEntityType { get; }
    public InternalIndexBuilder Builder { get; public set; }
    public bool IsUnique { get; public set; }
    private static bool DefaultIsUnique { get; }
    public DebugView`1<Index> DebugView { get; }
    private IReadOnlyList`1<IProperty> Microsoft.EntityFrameworkCore.Metadata.IIndex.Properties { get; }
    private IEntityType Microsoft.EntityFrameworkCore.Metadata.IIndex.DeclaringEntityType { get; }
    private IReadOnlyList`1<IMutableProperty> Microsoft.EntityFrameworkCore.Metadata.IMutableIndex.Properties { get; }
    private IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableIndex.DeclaringEntityType { get; }
    private IConventionIndexBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionIndex.Builder { get; }
    private IReadOnlyList`1<IConventionProperty> Microsoft.EntityFrameworkCore.Metadata.IConventionIndex.Properties { get; }
    private IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionIndex.DeclaringEntityType { get; }
    public Index(IReadOnlyList`1<Property> properties, EntityType declaringEntityType, ConfigurationSource configurationSource);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual IReadOnlyList`1<Property> get_Properties();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual EntityType get_DeclaringEntityType();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual InternalIndexBuilder get_Builder();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual void set_Builder(InternalIndexBuilder value);
    public virtual ConfigurationSource GetConfigurationSource();
    public virtual void UpdateConfigurationSource(ConfigurationSource configurationSource);
    public virtual bool get_IsUnique();
    public virtual void set_IsUnique(bool value);
    public virtual Index SetIsUnique(Nullable`1<bool> unique, ConfigurationSource configurationSource);
    private static bool get_DefaultIsUnique();
    public virtual Nullable`1<ConfigurationSource> GetIsUniqueConfigurationSource();
    private void UpdateIsUniqueConfigurationSource(ConfigurationSource configurationSource);
    protected virtual IConventionAnnotation OnAnnotationSet(string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    public virtual INullableValueFactory`1<TKey> GetNullableValueFactory();
    public virtual string ToString();
    public virtual DebugView`1<Index> get_DebugView();
    private sealed virtual override IReadOnlyList`1<IProperty> Microsoft.EntityFrameworkCore.Metadata.IIndex.get_Properties();
    private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IIndex.get_DeclaringEntityType();
    private sealed virtual override IReadOnlyList`1<IMutableProperty> Microsoft.EntityFrameworkCore.Metadata.IMutableIndex.get_Properties();
    private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableIndex.get_DeclaringEntityType();
    private sealed virtual override IConventionIndexBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionIndex.get_Builder();
    private sealed virtual override IReadOnlyList`1<IConventionProperty> Microsoft.EntityFrameworkCore.Metadata.IConventionIndex.get_Properties();
    private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionIndex.get_DeclaringEntityType();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionIndex.SetIsUnique(Nullable`1<bool> unique, bool fromDataAnnotation);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.IndexExtensions : object {
    [ExtensionAttribute]
public static INullableValueFactory`1<TKey> GetNullableValueFactory(IIndex index);
    [ExtensionAttribute]
public static Index AsIndex(IIndex index, string methodName);
    [ExtensionAttribute]
public static string ToDebugString(IIndex index, bool singleLine, string indent);
}
[DebuggerDisplayAttribute("{Metadata,nq}")]
public abstract class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalAnnotatableBuilder : object {
    [CompilerGeneratedAttribute]
private ConventionAnnotatable <Metadata>k__BackingField;
    public ConventionAnnotatable Metadata { get; }
    public InternalModelBuilder ModelBuilder { get; }
    private IConventionModelBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder.ModelBuilder { get; }
    private IConventionAnnotatable Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder.Metadata { get; }
    protected InternalAnnotatableBuilder(ConventionAnnotatable metadata);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual ConventionAnnotatable get_Metadata();
    [DebuggerStepThroughAttribute]
public abstract virtual InternalModelBuilder get_ModelBuilder();
    public virtual InternalAnnotatableBuilder HasAnnotation(string name, object value, ConfigurationSource configurationSource);
    private InternalAnnotatableBuilder HasAnnotation(string name, object value, ConfigurationSource configurationSource, bool canOverrideSameSource);
    public virtual InternalAnnotatableBuilder SetOrRemoveAnnotation(string name, object value, ConfigurationSource configurationSource);
    public virtual bool CanSetAnnotation(string name, object value, ConfigurationSource configurationSource);
    private static bool CanSetAnnotationValue(ConventionAnnotation annotation, object value, ConfigurationSource configurationSource, bool canOverrideSameSource);
    public virtual InternalAnnotatableBuilder RemoveAnnotation(string name, ConfigurationSource configurationSource);
    public virtual bool CanRemoveAnnotation(string name, ConfigurationSource configurationSource);
    public virtual void MergeAnnotationsFrom(ConventionAnnotatable annotatable);
    public virtual void MergeAnnotationsFrom(ConventionAnnotatable annotatable, ConfigurationSource minimalConfigurationSource);
    private sealed virtual override IConventionModelBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder.get_ModelBuilder();
    private sealed virtual override IConventionAnnotatable Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder.get_Metadata();
    private sealed virtual override IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder.HasAnnotation(string name, object value, bool fromDataAnnotation);
    private sealed virtual override IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder.SetOrRemoveAnnotation(string name, object value, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder.CanSetAnnotation(string name, object value, bool fromDataAnnotation);
    private sealed virtual override IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder.RemoveAnnotation(string name, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder.CanRemoveAnnotation(string name, bool fromDataAnnotation);
}
public abstract class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalAnnotatableBuilder`1 : InternalAnnotatableBuilder {
    public TMetadata Metadata { get; }
    protected InternalAnnotatableBuilder`1(TMetadata metadata);
    [DebuggerStepThroughAttribute]
public virtual TMetadata get_Metadata();
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder : InternalModelItemBuilder`1<EntityType> {
    private static string _defaultDiscriminatorName;
    private static Type _defaultDiscriminatorType;
    private IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Metadata { get; }
    public InternalEntityTypeBuilder(EntityType metadata, InternalModelBuilder modelBuilder);
    private static InternalEntityTypeBuilder();
    public virtual InternalKeyBuilder PrimaryKey(IReadOnlyList`1<string> propertyNames, ConfigurationSource configurationSource);
    public virtual InternalKeyBuilder PrimaryKey(IReadOnlyList`1<MemberInfo> clrMembers, ConfigurationSource configurationSource);
    public virtual InternalKeyBuilder PrimaryKey(IReadOnlyList`1<Property> properties, ConfigurationSource configurationSource);
    public virtual bool CanSetPrimaryKey(IReadOnlyList`1<IConventionProperty> properties, ConfigurationSource configurationSource);
    public virtual InternalKeyBuilder HasKey(IReadOnlyList`1<string> propertyNames, ConfigurationSource configurationSource);
    public virtual InternalKeyBuilder HasKey(IReadOnlyList`1<MemberInfo> clrProperties, ConfigurationSource configurationSource);
    public virtual InternalKeyBuilder HasKey(IReadOnlyList`1<Property> properties, Nullable`1<ConfigurationSource> configurationSource);
    private InternalKeyBuilder HasKeyInternal(IReadOnlyList`1<Property> properties, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalEntityTypeBuilder HasNoKey(Key key, ConfigurationSource configurationSource);
    public static List`1<ValueTuple`2<InternalKeyBuilder, Nullable`1<ConfigurationSource>>> DetachKeys(IEnumerable`1<Key> keysToDetach);
    private static ValueTuple`2<InternalKeyBuilder, Nullable`1<ConfigurationSource>> DetachKey(Key keyToDetach);
    public virtual InternalEntityTypeBuilder HasNoKey(ConfigurationSource configurationSource);
    public virtual InternalPropertyBuilder Property(Type propertyType, string propertyName, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder Property(Type propertyType, string propertyName, Nullable`1<ConfigurationSource> typeConfigurationSource, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder Property(string propertyName, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder Property(MemberInfo memberInfo, Nullable`1<ConfigurationSource> configurationSource);
    private InternalPropertyBuilder Property(Type propertyType, string propertyName, MemberInfo memberInfo, Nullable`1<ConfigurationSource> typeConfigurationSource, Nullable`1<ConfigurationSource> configurationSource);
    private InternalPropertyBuilder Property(Property existingProperty, string propertyName, Type propertyType, MemberInfo clrProperty, Nullable`1<ConfigurationSource> typeConfigurationSource, Nullable`1<ConfigurationSource> configurationSource);
    private bool CanRemoveProperty(Property property, ConfigurationSource configurationSource, bool canOverrideSameSource);
    public virtual bool CanAddProperty(Type propertyType, string name, Nullable`1<ConfigurationSource> typeConfigurationSource);
    public virtual InternalServicePropertyBuilder ServiceProperty(MemberInfo memberInfo, ConfigurationSource configurationSource);
    public virtual bool CanAddNavigation(string navigationName, ConfigurationSource configurationSource);
    public virtual bool IsIgnored(string name, Nullable`1<ConfigurationSource> configurationSource);
    public virtual bool CanRemoveForeignKey(ForeignKey foreignKey, ConfigurationSource configurationSource);
    public virtual InternalEntityTypeBuilder Ignore(string name, ConfigurationSource configurationSource);
    public virtual bool CanIgnore(string name, ConfigurationSource configurationSource);
    private bool CanIgnore(string name, ConfigurationSource configurationSource, bool shouldThrow);
    public virtual InternalEntityTypeBuilder HasQueryFilter(LambdaExpression filter, ConfigurationSource configurationSource);
    public virtual bool CanSetQueryFilter(LambdaExpression filter, ConfigurationSource configurationSource);
    public virtual InternalEntityTypeBuilder HasDefiningQuery(LambdaExpression query, ConfigurationSource configurationSource);
    public virtual bool CanSetDefiningQuery(LambdaExpression query, ConfigurationSource configurationSource);
    public virtual InternalEntityTypeBuilder HasBaseType(Type baseEntityType, ConfigurationSource configurationSource);
    public virtual InternalEntityTypeBuilder HasBaseType(string baseEntityTypeName, ConfigurationSource configurationSource);
    public virtual InternalEntityTypeBuilder HasBaseType(EntityType baseEntityType, ConfigurationSource configurationSource);
    public virtual bool CanSetBaseType(EntityType baseEntityType, ConfigurationSource configurationSource);
    internal static PropertiesSnapshot DetachProperties(IEnumerable`1<Property> propertiesToDetach);
    private IEnumerable`1<ForeignKey> FindConflictingRelationships(EntityType baseEntityType, ConfigurationSource configurationSource);
    private Nullable`1<ConfigurationSource> RemoveProperty(Property property, ConfigurationSource configurationSource, bool canOverrideSameSource);
    public static RelationshipSnapshot DetachRelationship(ForeignKey foreignKey);
    public static RelationshipSnapshot DetachRelationship(ForeignKey foreignKey, bool includeDefinedType);
    public virtual InternalEntityTypeBuilder HasNoRelationship(ForeignKey foreignKey, ConfigurationSource configurationSource);
    public static Snapshot DetachAllMembers(EntityType entityType);
    private void RemoveKeyIfUnused(Key key, ConfigurationSource configurationSource);
    public virtual InternalEntityTypeBuilder RemoveUnusedShadowProperties(IReadOnlyList`1<T> properties, ConfigurationSource configurationSource);
    private static void RemovePropertyIfUnused(Property property, ConfigurationSource configurationSource);
    public virtual InternalIndexBuilder HasIndex(IReadOnlyList`1<string> propertyNames, ConfigurationSource configurationSource);
    public virtual InternalIndexBuilder HasIndex(IReadOnlyList`1<MemberInfo> clrMembers, ConfigurationSource configurationSource);
    public virtual InternalIndexBuilder HasIndex(IReadOnlyList`1<Property> properties, ConfigurationSource configurationSource);
    private InternalIndexBuilder HasIndex(Index index, IReadOnlyList`1<Property> properties, ConfigurationSource configurationSource);
    public virtual InternalEntityTypeBuilder HasNoIndex(Index index, ConfigurationSource configurationSource);
    public static List`1<InternalIndexBuilder> DetachIndexes(IEnumerable`1<Index> indexesToDetach);
    private static InternalIndexBuilder DetachIndex(Index indexToDetach);
    public virtual InternalRelationshipBuilder HasRelationship(string principalEntityTypeName, IReadOnlyList`1<string> propertyNames, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder HasRelationship(string principalEntityTypeName, IReadOnlyList`1<string> propertyNames, Key principalKey, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder HasRelationship(Type principalClrType, IReadOnlyList`1<MemberInfo> clrMembers, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder HasRelationship(Type principalClrType, IReadOnlyList`1<MemberInfo> clrMembers, Key principalKey, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder HasRelationship(EntityType principalEntityType, IReadOnlyList`1<Property> dependentProperties, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder HasRelationship(EntityType principalEntityType, IReadOnlyList`1<Property> dependentProperties, Key principalKey, ConfigurationSource configurationSource);
    private InternalRelationshipBuilder HasForeignKey(EntityType principalEntityType, IReadOnlyList`1<Property> dependentProperties, Key principalKey, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder HasRelationship(EntityType targetEntityType, string navigationToTargetName, string inverseNavigationName, ConfigurationSource configurationSource, bool setTargetAsPrincipal);
    public virtual InternalRelationshipBuilder HasRelationship(EntityType targetEntityType, MemberInfo navigationToTarget, MemberInfo inverseNavigation, ConfigurationSource configurationSource, bool setTargetAsPrincipal);
    private InternalRelationshipBuilder HasRelationship(EntityType targetEntityType, Nullable`1<MemberIdentity> navigationToTarget, Nullable`1<MemberIdentity> inverseNavigation, bool setTargetAsPrincipal, ConfigurationSource configurationSource, Nullable`1<bool> required);
    public virtual InternalRelationshipBuilder HasRelationship(EntityType principalEntityType, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder HasRelationship(EntityType principalEntityType, Key principalKey, ConfigurationSource configurationSource);
    private InternalRelationshipBuilder HasRelationshipInternal(EntityType targetEntityType, Key principalKey, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder HasOwnership(string targetEntityTypeName, string navigationName, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder HasOwnership(Type targetEntityType, string navigationName, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder HasOwnership(Type targetEntityType, MemberInfo navigationProperty, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder HasOwnership(Type targetEntityType, string navigationPropertyName, string inversePropertyName, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder HasOwnership(Type targetEntityType, MemberInfo navigationProperty, MemberInfo inverseProperty, ConfigurationSource configurationSource);
    private InternalRelationshipBuilder HasOwnership(TypeIdentity& targetEntityType, MemberIdentity navigation, Nullable`1<MemberIdentity> inverse, ConfigurationSource configurationSource);
    public virtual bool RemoveNonOwnershipRelationships(ForeignKey ownership, ConfigurationSource configurationSource);
    private bool Contains(IForeignKey inheritedFk, IForeignKey derivedFk);
    public virtual InternalRelationshipBuilder HasRelationship(EntityType targetEntityType, string navigationName, ConfigurationSource configurationSource, bool setTargetAsPrincipal);
    public virtual InternalRelationshipBuilder HasRelationship(EntityType targetEntityType, MemberInfo navigationProperty, ConfigurationSource configurationSource, bool setTargetAsPrincipal);
    public virtual InternalEntityTypeBuilder GetTargetEntityTypeBuilder(Type targetClrType, MemberInfo navigationInfo, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalRelationshipBuilder CreateForeignKey(InternalEntityTypeBuilder principalEntityTypeBuilder, IReadOnlyList`1<Property> dependentProperties, Key principalKey, string navigationToPrincipalName, Nullable`1<bool> isRequired, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder UpdateForeignKey(ForeignKey foreignKey, IReadOnlyList`1<Property> dependentProperties, Key principalKey, string navigationToPrincipalName, Nullable`1<bool> isRequired, Nullable`1<ConfigurationSource> configurationSource);
    private ForeignKey SetOrAddForeignKey(ForeignKey foreignKey, InternalEntityTypeBuilder principalEntityTypeBuilder, IReadOnlyList`1<Property> dependentProperties, Key principalKey, string navigationToPrincipalName, Nullable`1<bool> isRequired, Nullable`1<ConfigurationSource> configurationSource);
    public virtual bool ShouldReuniquifyTemporaryProperties(ForeignKey foreignKey);
    public virtual Property CreateUniqueProperty(string propertyName, Type propertyType, bool isRequired);
    public virtual IReadOnlyList`1<Property> CreateUniqueProperties(IReadOnlyList`1<string> propertyNames, IReadOnlyList`1<Type> propertyTypes, bool isRequired);
    private IReadOnlyList`1<Property> CreateUniqueProperties(IReadOnlyList`1<Property> currentProperties, IReadOnlyList`1<Property> principalProperties, bool isRequired, string baseName);
    private ValueTuple`2<bool, IReadOnlyList`1<Property>> TryCreateUniqueProperties(int propertyCount, IReadOnlyList`1<Property> currentProperties, IEnumerable`1<string> principalPropertyNames, IEnumerable`1<Type> principalPropertyTypes, bool isRequired, string baseName);
    public virtual IReadOnlyList`1<Property> GetOrCreateProperties(IReadOnlyList`1<string> propertyNames, Nullable`1<ConfigurationSource> configurationSource, IReadOnlyList`1<Property> referencedProperties, bool required, bool useDefaultType);
    public virtual IReadOnlyList`1<Property> GetOrCreateProperties(IEnumerable`1<MemberInfo> clrMembers, Nullable`1<ConfigurationSource> configurationSource);
    public virtual IReadOnlyList`1<Property> GetActualProperties(IReadOnlyList`1<Property> properties, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalEntityTypeBuilder HasChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, ConfigurationSource configurationSource);
    public virtual bool CanSetChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, ConfigurationSource configurationSource);
    public virtual InternalEntityTypeBuilder UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, ConfigurationSource configurationSource);
    public virtual bool CanSetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, ConfigurationSource configurationSource);
    public virtual InternalPropertyBuilder GetOrCreateDiscriminatorProperty(Type type, string name, bool fromDataAnnotation);
    public virtual DiscriminatorBuilder DiscriminatorBuilder(InternalPropertyBuilder discriminatorPropertyBuilder, ConfigurationSource configurationSource);
    public virtual InternalEntityTypeBuilder HasNoDeclaredDiscriminator(ConfigurationSource configurationSource);
    private void RemoveUnusedDiscriminatorProperty(Property newDiscriminatorProperty, ConfigurationSource configurationSource);
    private bool CanSetDiscriminator(IProperty discriminatorProperty, string name, Type discriminatorType, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.get_Metadata();
    private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasBaseType(IConventionEntityType baseEntityType, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetBaseType(IConventionEntityType baseEntityType, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Property(Type propertyType, string propertyName, bool setTypeConfigurationSource, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Property(MemberInfo memberInfo, bool fromDataAnnotation);
    private sealed virtual override IReadOnlyList`1<IConventionProperty> Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.GetOrCreateProperties(IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
    private sealed virtual override IReadOnlyList`1<IConventionProperty> Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.GetOrCreateProperties(IEnumerable`1<MemberInfo> memberInfos, bool fromDataAnnotation);
    private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.RemoveUnusedShadowProperties(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    private sealed virtual override IConventionServicePropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.ServiceProperty(MemberInfo memberInfo, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.IsIgnored(string name, bool fromDataAnnotation);
    private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Ignore(string name, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanIgnore(string name, bool fromDataAnnotation);
    private sealed virtual override IConventionKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.PrimaryKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetPrimaryKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    private sealed virtual override IConventionKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoKey(bool fromDataAnnotation);
    private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoKey(IConventionKey key, bool fromDataAnnotation);
    private sealed virtual override IConventionIndexBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoIndex(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoIndex(IConventionIndex index, bool fromDataAnnotation);
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(IConventionEntityType targetEntityType, bool fromDataAnnotation);
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(IConventionEntityType principalEntityType, IReadOnlyList`1<IConventionProperty> dependentProperties, bool fromDataAnnotation);
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(IConventionEntityType principalEntityType, IConventionKey principalKey, bool fromDataAnnotation);
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(IConventionEntityType principalEntityType, IReadOnlyList`1<IConventionProperty> dependentProperties, IConventionKey principalKey, bool fromDataAnnotation);
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(IConventionEntityType targetEntityType, string navigationToTargetName, bool setTargetAsPrincipal, bool fromDataAnnotation);
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(IConventionEntityType targetEntityType, MemberInfo navigationToTarget, bool setTargetAsPrincipal, bool fromDataAnnotation);
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(IConventionEntityType targetEntityType, string navigationToTargetName, string inverseNavigationName, bool setTargetAsPrincipal, bool fromDataAnnotation);
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(IConventionEntityType targetEntityType, MemberInfo navigationToTarget, MemberInfo inverseNavigation, bool setTargetAsPrincipal, bool fromDataAnnotation);
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(Type targetEntityType, string navigationToTargetName, bool fromDataAnnotation);
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(Type targetEntityType, MemberInfo navigationToTarget, bool fromDataAnnotation);
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(Type targetEntityType, string navigationToTargetName, string inversePropertyName, bool fromDataAnnotation);
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(Type targetEntityType, MemberInfo navigationToTarget, MemberInfo inverseProperty, bool fromDataAnnotation);
    private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoRelationship(IReadOnlyList`1<IConventionProperty> properties, IConventionKey principalKey, IConventionEntityType principalEntityType, bool fromDataAnnotation);
    private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoRelationship(IConventionForeignKey foreignKey, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanAddNavigation(string navigationName, bool fromDataAnnotation);
    private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasQueryFilter(LambdaExpression filter, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetQueryFilter(LambdaExpression filter, bool fromDataAnnotation);
    private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDefiningQuery(LambdaExpression query, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDefiningQuery(LambdaExpression query, bool fromDataAnnotation);
    private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, bool fromDataAnnotation);
    private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    private sealed virtual override IConventionDiscriminatorBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator(bool fromDataAnnotation);
    private sealed virtual override IConventionDiscriminatorBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator(Type type, bool fromDataAnnotation);
    private sealed virtual override IConventionDiscriminatorBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator(string name, bool fromDataAnnotation);
    private sealed virtual override IConventionDiscriminatorBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator(string name, Type type, bool fromDataAnnotation);
    private sealed virtual override IConventionDiscriminatorBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator(MemberInfo memberInfo, bool fromDataAnnotation);
    private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoDeclaredDiscriminator(bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator(string name, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator(Type type, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator(Type type, string name, bool fromDataAnnotation);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder : InternalModelItemBuilder`1<Index> {
    private IConventionIndex Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder.Metadata { get; }
    public InternalIndexBuilder(Index index, InternalModelBuilder modelBuilder);
    public virtual InternalIndexBuilder IsUnique(Nullable`1<bool> unique, ConfigurationSource configurationSource);
    public virtual bool CanSetIsUnique(Nullable`1<bool> unique, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalIndexBuilder Attach(InternalEntityTypeBuilder entityTypeBuilder);
    private sealed virtual override IConventionIndex Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder.get_Metadata();
    private sealed virtual override IConventionIndexBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder.IsUnique(Nullable`1<bool> unique, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder.CanSetIsUnique(Nullable`1<bool> unique, bool fromDataAnnotation);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder : InternalModelItemBuilder`1<Key> {
    private IConventionKey Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder.Metadata { get; }
    public InternalKeyBuilder(Key key, InternalModelBuilder modelBuilder);
    public virtual InternalKeyBuilder Attach(InternalEntityTypeBuilder entityTypeBuilder, Nullable`1<ConfigurationSource> primaryKeyConfigurationSource);
    private sealed virtual override IConventionKey Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder.get_Metadata();
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder : InternalAnnotatableBuilder`1<Model> {
    public InternalModelBuilder ModelBuilder { get; }
    private IConventionModel Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.Metadata { get; }
    public InternalModelBuilder(Model metadata);
    public virtual InternalModelBuilder get_ModelBuilder();
    public virtual InternalEntityTypeBuilder Entity(string name, ConfigurationSource configurationSource, Nullable`1<bool> shouldBeOwned);
    public virtual InternalEntityTypeBuilder Entity(Type type, ConfigurationSource configurationSource, Nullable`1<bool> shouldBeOwned);
    private InternalEntityTypeBuilder Entity(TypeIdentity& type, ConfigurationSource configurationSource, Nullable`1<bool> shouldBeOwned);
    public virtual InternalEntityTypeBuilder Entity(string name, string definingNavigationName, EntityType definingEntityType, ConfigurationSource configurationSource);
    public virtual InternalEntityTypeBuilder Entity(Type type, string definingNavigationName, EntityType definingEntityType, ConfigurationSource configurationSource);
    private InternalEntityTypeBuilder Entity(TypeIdentity& type, string definingNavigationName, EntityType definingEntityType, ConfigurationSource configurationSource);
    public virtual IConventionOwnedEntityTypeBuilder Owned(Type type, ConfigurationSource configurationSource);
    private bool ShouldBeOwnedType(TypeIdentity& type);
    public virtual bool IsIgnored(Type type, ConfigurationSource configurationSource);
    public virtual bool IsIgnored(string name, ConfigurationSource configurationSource);
    private bool IsIgnored(TypeIdentity& type, ConfigurationSource configurationSource);
    public virtual InternalModelBuilder Ignore(Type type, ConfigurationSource configurationSource);
    public virtual InternalModelBuilder Ignore(string name, ConfigurationSource configurationSource);
    private InternalModelBuilder Ignore(TypeIdentity& type, ConfigurationSource configurationSource);
    public virtual bool CanIgnore(Type type, ConfigurationSource configurationSource);
    public virtual bool CanIgnore(string name, ConfigurationSource configurationSource);
    private bool CanIgnore(TypeIdentity& type, ConfigurationSource configurationSource);
    public virtual InternalModelBuilder HasNoEntityType(EntityType entityType, ConfigurationSource configurationSource);
    public virtual InternalModelBuilder UseChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, ConfigurationSource configurationSource);
    public virtual bool CanSetChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, ConfigurationSource configurationSource);
    public virtual InternalModelBuilder UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, ConfigurationSource configurationSource);
    public virtual bool CanSetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, ConfigurationSource configurationSource);
    private sealed virtual override IConventionModel Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.get_Metadata();
    private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.Entity(string name, Nullable`1<bool> shouldBeOwned, bool fromDataAnnotation);
    private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.Entity(Type type, Nullable`1<bool> shouldBeOwned, bool fromDataAnnotation);
    private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.Entity(string name, string definingNavigationName, IConventionEntityType definingEntityType, bool fromDataAnnotation);
    private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.Entity(Type type, string definingNavigationName, IConventionEntityType definingEntityType, bool fromDataAnnotation);
    private sealed virtual override IConventionOwnedEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.Owned(Type type, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.IsIgnored(Type type, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.IsIgnored(string name, bool fromDataAnnotation);
    private sealed virtual override IConventionModelBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.Ignore(Type type, bool fromDataAnnotation);
    private sealed virtual override IConventionModelBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.Ignore(string name, bool fromDataAnnotation);
    private sealed virtual override IConventionModelBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.HasNoEntityType(IConventionEntityType entityType, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.CanIgnore(Type type, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.CanIgnore(string name, bool fromDataAnnotation);
    private sealed virtual override IConventionModelBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.HasChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.CanSetChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, bool fromDataAnnotation);
    private sealed virtual override IConventionModelBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.CanSetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
}
public abstract class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelItemBuilder`1 : InternalAnnotatableBuilder`1<TMetadata> {
    [CompilerGeneratedAttribute]
private InternalModelBuilder <ModelBuilder>k__BackingField;
    public InternalModelBuilder ModelBuilder { get; }
    protected InternalModelItemBuilder`1(TMetadata metadata, InternalModelBuilder modelBuilder);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual InternalModelBuilder get_ModelBuilder();
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalNavigationBuilder : InternalModelItemBuilder`1<Navigation> {
    public InternalNavigationBuilder(Navigation metadata, InternalModelBuilder modelBuilder);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalOwnedEntityTypeBuilder : object {
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder : InternalModelItemBuilder`1<Property> {
    private IConventionProperty Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.Metadata { get; }
    public InternalPropertyBuilder(Property property, InternalModelBuilder modelBuilder);
    public virtual InternalPropertyBuilder IsRequired(Nullable`1<bool> required, ConfigurationSource configurationSource);
    public virtual bool CanSetIsRequired(Nullable`1<bool> required, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder ValueGenerated(Nullable`1<ValueGenerated> valueGenerated, ConfigurationSource configurationSource);
    public virtual bool CanSetValueGenerated(Nullable`1<ValueGenerated> valueGenerated, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder IsConcurrencyToken(Nullable`1<bool> concurrencyToken, ConfigurationSource configurationSource);
    public virtual bool CanSetIsConcurrencyToken(Nullable`1<bool> concurrencyToken, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder HasField(string fieldName, ConfigurationSource configurationSource);
    public virtual bool CanSetField(string fieldName, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder HasField(FieldInfo fieldInfo, ConfigurationSource configurationSource);
    public virtual bool CanSetField(FieldInfo fieldInfo, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, ConfigurationSource configurationSource);
    public virtual bool CanSetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder HasMaxLength(Nullable`1<int> maxLength, ConfigurationSource configurationSource);
    public virtual bool CanSetMaxLength(Nullable`1<int> maxLength, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder IsUnicode(Nullable`1<bool> unicode, ConfigurationSource configurationSource);
    public virtual bool CanSetIsUnicode(Nullable`1<bool> unicode, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder BeforeSave(Nullable`1<PropertySaveBehavior> behavior, ConfigurationSource configurationSource);
    public virtual bool CanSetBeforeSave(Nullable`1<PropertySaveBehavior> behavior, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder AfterSave(Nullable`1<PropertySaveBehavior> behavior, ConfigurationSource configurationSource);
    public virtual bool CanSetAfterSave(Nullable`1<PropertySaveBehavior> behavior, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder HasValueGenerator(Type valueGeneratorType, ConfigurationSource configurationSource);
    public virtual InternalPropertyBuilder HasValueGenerator(Func`3<IProperty, IEntityType, ValueGenerator> factory, ConfigurationSource configurationSource);
    public virtual bool CanSetValueGenerator(Func`3<IProperty, IEntityType, ValueGenerator> factory, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder HasConversion(ValueConverter converter, ConfigurationSource configurationSource);
    public virtual bool CanSetConversion(ValueConverter converter, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder HasConversion(Type providerClrType, ConfigurationSource configurationSource);
    public virtual bool CanSetConversion(Type providerClrType, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder HasValueComparer(ValueComparer comparer, ConfigurationSource configurationSource);
    public virtual bool CanSetValueComparer(ValueComparer comparer, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder HasKeyValueComparer(ValueComparer comparer, ConfigurationSource configurationSource);
    public virtual bool CanSetKeyValueComparer(ValueComparer comparer, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder HasStructuralValueComparer(ValueComparer comparer, ConfigurationSource configurationSource);
    public virtual bool CanSetStructuralValueComparer(ValueComparer comparer, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder Attach(InternalEntityTypeBuilder entityTypeBuilder);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionProperty Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.get_Metadata();
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.IsRequired(Nullable`1<bool> required, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetIsRequired(Nullable`1<bool> required, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.ValueGenerated(Nullable`1<ValueGenerated> valueGenerated, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetValueGenerated(Nullable`1<ValueGenerated> valueGenerated, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.IsConcurrencyToken(Nullable`1<bool> concurrencyToken, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetIsConcurrencyToken(Nullable`1<bool> concurrencyToken, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasField(string fieldName, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasField(FieldInfo fieldInfo, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetField(string fieldName, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetField(FieldInfo fieldInfo, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasMaxLength(Nullable`1<int> maxLength, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetMaxLength(Nullable`1<int> maxLength, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.IsUnicode(Nullable`1<bool> unicode, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetIsUnicode(Nullable`1<bool> unicode, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.BeforeSave(Nullable`1<PropertySaveBehavior> behavior, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetBeforeSave(Nullable`1<PropertySaveBehavior> behavior, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.AfterSave(Nullable`1<PropertySaveBehavior> behavior, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetAfterSave(Nullable`1<PropertySaveBehavior> behavior, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasValueGenerator(Type valueGeneratorType, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasValueGenerator(Func`3<IProperty, IEntityType, ValueGenerator> factory, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetValueGenerator(Func`3<IProperty, IEntityType, ValueGenerator> factory, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasConversion(ValueConverter converter, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetConversion(ValueConverter converter, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasConversion(Type providerClrType, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetConversion(Type providerClrType, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasValueComparer(ValueComparer comparer, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetValueComparer(ValueComparer comparer, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasKeyValueComparer(ValueComparer comparer, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetKeyValueComparer(ValueComparer comparer, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasStructuralValueComparer(ValueComparer comparer, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetStructuralValueComparer(ValueComparer comparer, bool fromDataAnnotation);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalRelationshipBuilder : InternalModelItemBuilder`1<ForeignKey> {
    private IConventionForeignKey Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.Metadata { get; }
    public InternalRelationshipBuilder(ForeignKey foreignKey, InternalModelBuilder modelBuilder);
    public virtual InternalRelationshipBuilder HasNavigation(string name, bool pointsToPrincipal, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder HasNavigation(MemberInfo property, bool pointsToPrincipal, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder HasNavigations(string navigationToPrincipalName, string navigationToDependentName, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder HasNavigations(MemberInfo navigationToPrincipal, MemberInfo navigationToDependent, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder HasNavigations(Nullable`1<MemberIdentity> navigationToPrincipal, Nullable`1<MemberIdentity> navigationToDependent, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder HasNavigations(string navigationToPrincipalName, string navigationToDependentName, EntityType principalEntityType, EntityType dependentEntityType, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder HasNavigations(MemberInfo navigationToPrincipal, MemberInfo navigationToDependent, EntityType principalEntityType, EntityType dependentEntityType, ConfigurationSource configurationSource);
    private InternalRelationshipBuilder HasNavigations(Nullable`1<MemberIdentity> navigationToPrincipal, Nullable`1<MemberIdentity> navigationToDependent, EntityType principalEntityType, EntityType dependentEntityType, ConfigurationSource configurationSource);
    private static MemberInfo FindCompatibleClrMember(string navigationName, EntityType sourceType, EntityType targetType, bool shouldThrow);
    public virtual bool CanSetNavigation(MemberInfo property, bool pointsToPrincipal, Nullable`1<ConfigurationSource> configurationSource);
    public virtual bool CanSetNavigation(string name, bool pointsToPrincipal, Nullable`1<ConfigurationSource> configurationSource);
    private bool CanSetNavigation(string name, bool pointsToPrincipal, Nullable`1<ConfigurationSource> configurationSource, bool overrideSameSource);
    private bool CanSetNavigation(MemberIdentity navigation, bool pointsToPrincipal, Nullable`1<ConfigurationSource> configurationSource, bool shouldThrow, bool overrideSameSource, Nullable`1& shouldBeUnique, Boolean& removeOppositeNavigation, Boolean& removeConflictingNavigations);
    public virtual bool CanSetNavigations(MemberInfo navigationToPrincipal, MemberInfo navigationToDependent, Nullable`1<ConfigurationSource> configurationSource);
    public virtual bool CanSetNavigations(string navigationToPrincipalName, string navigationToDependentName, Nullable`1<ConfigurationSource> configurationSource);
    private bool CanSetNavigations(Nullable`1<MemberIdentity> navigationToPrincipal, Nullable`1<MemberIdentity> navigationToDependent, Nullable`1<ConfigurationSource> configurationSource, bool shouldThrow, bool overrideSameSource, Nullable`1& shouldInvert, Nullable`1& shouldBeUnique, Boolean& removeOppositeNavigation, Boolean& removeConflictingNavigations);
    private bool CanSetNavigations(Nullable`1<MemberIdentity> navigationToPrincipal, Nullable`1<MemberIdentity> navigationToDependent, EntityType principalEntityType, EntityType dependentEntityType, Nullable`1<ConfigurationSource> configurationSource, bool shouldThrow, bool overrideSameSource, Nullable`1& shouldInvert, Nullable`1& shouldBeUnique, Boolean& removeOppositeNavigation, Boolean& removeConflictingNavigations, Boolean& changeRelatedTypes);
    private static bool IsCompatible(MemberInfo navigationProperty, bool pointsToPrincipal, Type dependentType, Type principalType, bool shouldThrow, Nullable`1& shouldBeUnique);
    public virtual InternalRelationshipBuilder HasField(string fieldName, bool pointsToPrincipal, ConfigurationSource configurationSource);
    public virtual bool CanSetField(string fieldName, bool pointsToPrincipal, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalRelationshipBuilder HasField(FieldInfo fieldInfo, bool pointsToPrincipal, ConfigurationSource configurationSource);
    public virtual bool CanSetField(FieldInfo fieldInfo, bool pointsToPrincipal, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalRelationshipBuilder IsEagerLoaded(Nullable`1<bool> eagerLoaded, bool pointsToPrincipal, ConfigurationSource configurationSource);
    public virtual bool CanSetIsEagerLoaded(Nullable`1<bool> eagerLoaded, bool pointsToPrincipal, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalRelationshipBuilder IsRequired(Nullable`1<bool> required, ConfigurationSource configurationSource);
    public virtual bool CanSetIsRequired(Nullable`1<bool> required, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalRelationshipBuilder IsOwnership(Nullable`1<bool> ownership, ConfigurationSource configurationSource);
    public virtual bool CanSetIsOwnership(Nullable`1<bool> ownership, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalRelationshipBuilder IsWeakTypeDefinition(ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder OnDelete(Nullable`1<DeleteBehavior> deleteBehavior, ConfigurationSource configurationSource);
    public virtual bool CanSetDeleteBehavior(Nullable`1<DeleteBehavior> deleteBehavior, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalRelationshipBuilder IsUnique(Nullable`1<bool> unique, ConfigurationSource configurationSource);
    public virtual bool CanSetIsUnique(Nullable`1<bool> unique, Nullable`1<ConfigurationSource> configurationSource);
    private bool CanSetIsUnique(Nullable`1<bool> unique, Nullable`1<ConfigurationSource> configurationSource, Boolean& resetToDependent);
    public virtual InternalRelationshipBuilder DependentEntityType(InternalEntityTypeBuilder dependentEntityTypeBuilder, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder DependentEntityType(Type dependentType, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder DependentEntityType(string dependentTypeName, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder DependentEntityType(EntityType dependentEntityType, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder PrincipalEntityType(InternalEntityTypeBuilder principalEntityTypeBuilder, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder PrincipalEntityType(Type principalType, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder PrincipalEntityType(string principalTypeName, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder PrincipalEntityType(EntityType principalEntityType, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder HasEntityTypes(EntityType principalEntityType, EntityType dependentEntityType, ConfigurationSource configurationSource);
    private InternalRelationshipBuilder HasEntityTypes(EntityType principalEntityType, EntityType dependentEntityType, Nullable`1<ConfigurationSource> principalEndConfigurationSource, ConfigurationSource configurationSource);
    public virtual bool CanSetRelatedTypes(EntityType principalEntityType, EntityType dependentEntityType, Nullable`1<ConfigurationSource> configurationSource);
    public virtual bool CanInvert(IReadOnlyList`1<Property> newForeignKeyProperties, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalRelationshipBuilder ReuniquifyTemporaryProperties(bool force);
    public virtual InternalRelationshipBuilder HasForeignKey(IReadOnlyList`1<MemberInfo> properties, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder HasForeignKey(IReadOnlyList`1<string> propertyNames, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder HasForeignKey(IReadOnlyList`1<MemberInfo> properties, EntityType dependentEntityType, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder HasForeignKey(IReadOnlyList`1<string> propertyNames, EntityType dependentEntityType, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder HasForeignKey(IReadOnlyList`1<Property> properties, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder HasForeignKey(IReadOnlyList`1<Property> properties, EntityType dependentEntityType, ConfigurationSource configurationSource);
    public virtual bool CanSetForeignKey(IReadOnlyList`1<string> propertyNames, Nullable`1<ConfigurationSource> configurationSource);
    public virtual bool CanSetForeignKey(IReadOnlyList`1<Property> properties, Nullable`1<ConfigurationSource> configurationSource);
    private bool CanSetForeignKey(IReadOnlyList`1<Property> properties, EntityType dependentEntityType, Nullable`1<ConfigurationSource> configurationSource, bool overrideSameSource);
    private bool CanSetForeignKey(IReadOnlyList`1<Property> properties, EntityType dependentEntityType, Nullable`1<ConfigurationSource> configurationSource, Boolean& resetPrincipalKey, bool overrideSameSource);
    private bool CanSetForeignKey(IReadOnlyList`1<Property> properties, EntityType dependentEntityType, IReadOnlyList`1<Property> principalKeyProperties, EntityType principalEntityType, Nullable`1<ConfigurationSource> configurationSource, Boolean& resetPrincipalKey, bool overrideSameSource);
    public virtual InternalRelationshipBuilder HasPrincipalKey(IReadOnlyList`1<MemberInfo> properties, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder HasPrincipalKey(IReadOnlyList`1<string> propertyNames, ConfigurationSource configurationSource);
    public virtual InternalRelationshipBuilder HasPrincipalKey(IReadOnlyList`1<Property> properties, ConfigurationSource configurationSource);
    public virtual bool CanSetPrincipalKey(IReadOnlyList`1<string> propertyNames, Nullable`1<ConfigurationSource> configurationSource);
    public virtual bool CanSetPrincipalKey(IReadOnlyList`1<Property> properties, Nullable`1<ConfigurationSource> configurationSource);
    private bool CanSetPrincipalKey(IReadOnlyList`1<Property> properties, Nullable`1<ConfigurationSource> configurationSource, Boolean& resetDependent, IReadOnlyList`1& oldNameDependentProperties);
    private InternalRelationshipBuilder ReplaceForeignKey(ConfigurationSource configurationSource, InternalEntityTypeBuilder principalEntityTypeBuilder, InternalEntityTypeBuilder dependentEntityTypeBuilder, Nullable`1<MemberIdentity> navigationToPrincipal, Nullable`1<MemberIdentity> navigationToDependent, IReadOnlyList`1<Property> dependentProperties, IReadOnlyList`1<Property> oldNameDependentProperties, IReadOnlyList`1<Property> principalProperties, Nullable`1<bool> isUnique, Nullable`1<bool> isRequired, Nullable`1<bool> isOwnership, Nullable`1<DeleteBehavior> deleteBehavior, bool removeCurrent, Nullable`1<ConfigurationSource> principalEndConfigurationSource, bool oldRelationshipInverted);
    private InternalRelationshipBuilder ReplaceForeignKey(InternalEntityTypeBuilder principalEntityTypeBuilder, InternalEntityTypeBuilder dependentEntityTypeBuilder, Nullable`1<MemberIdentity> navigationToPrincipal, Nullable`1<MemberIdentity> navigationToDependent, IReadOnlyList`1<Property> dependentProperties, IReadOnlyList`1<Property> oldNameDependentProperties, IReadOnlyList`1<Property> principalProperties, Nullable`1<bool> isUnique, Nullable`1<bool> isRequired, Nullable`1<bool> isOwnership, Nullable`1<DeleteBehavior> deleteBehavior, bool removeCurrent, bool oldRelationshipInverted, Nullable`1<ConfigurationSource> principalEndConfigurationSource, ConfigurationSource configurationSource);
    private InternalRelationshipBuilder GetOrCreateRelationshipBuilder(EntityType principalEntityType, EntityType dependentEntityType, Nullable`1<MemberIdentity> navigationToPrincipal, Nullable`1<MemberIdentity> navigationToDependent, IReadOnlyList`1<Property> dependentProperties, IReadOnlyList`1<Property> oldNameDependentProperties, IReadOnlyList`1<Property> principalProperties, Nullable`1<bool> isRequired, bool removeCurrent, Nullable`1<ConfigurationSource> principalEndConfigurationSource, Nullable`1<ConfigurationSource> configurationSource, Nullable`1& existingRelationshipInverted);
    private static IReadOnlyList`1<InternalRelationshipBuilder> FindRelationships(EntityType principalEntityType, EntityType dependentEntityType, Nullable`1<MemberIdentity> navigationToPrincipal, Nullable`1<MemberIdentity> navigationToDependent, IReadOnlyList`1<Property> dependentProperties, IReadOnlyList`1<Property> principalProperties);
    public static InternalRelationshipBuilder FindCurrentRelationshipBuilder(EntityType principalEntityType, EntityType dependentEntityType, Nullable`1<MemberIdentity> navigationToPrincipal, Nullable`1<MemberIdentity> navigationToDependent, IReadOnlyList`1<Property> dependentProperties, IReadOnlyList`1<Property> principalProperties);
    public virtual InternalRelationshipBuilder Attach(InternalEntityTypeBuilder entityTypeBuilder);
    public static bool AreCompatible(EntityType principalEntityType, EntityType dependentEntityType, MemberInfo navigationToPrincipal, MemberInfo navigationToDependent, IReadOnlyList`1<Property> dependentProperties, IReadOnlyList`1<Property> principalProperties, Nullable`1<bool> isUnique, Nullable`1<ConfigurationSource> configurationSource);
    private bool CanSetRelatedTypes(EntityType principalEntityType, EntityType dependentEntityType, bool strictPrincipal, Nullable`1<MemberIdentity> navigationToPrincipal, Nullable`1<MemberIdentity> navigationToDependent, Nullable`1<ConfigurationSource> configurationSource, bool shouldThrow, Boolean& shouldInvert, Boolean& shouldResetToPrincipal, Boolean& shouldResetToDependent, Boolean& shouldResetPrincipalProperties, Boolean& shouldResetDependentProperties, Nullable`1& shouldBeUnique);
    private bool CanSetRelatedTypes(EntityType principalEntityType, EntityType dependentEntityType, Nullable`1<MemberIdentity> navigationToPrincipal, Nullable`1<MemberIdentity> navigationToDependent, Nullable`1<ConfigurationSource> configurationSource, bool inverted, bool shouldThrow, Boolean& shouldResetToPrincipal, Boolean& shouldResetToDependent, Boolean& shouldResetPrincipalProperties, Boolean& shouldResetDependentProperties, Nullable`1& shouldBeUnique);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKey Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.get_Metadata();
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.HasEntityTypes(IConventionEntityType principalEntityType, IConventionEntityType dependentEntityType, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanInvert(IReadOnlyList`1<IConventionProperty> newForeignKeyProperties, bool fromDataAnnotation);
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.HasForeignKey(IReadOnlyList`1<string> properties, bool fromDataAnnotation);
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.HasForeignKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetForeignKey(IReadOnlyList`1<string> properties, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetForeignKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.HasPrincipalKey(IReadOnlyList`1<string> properties, bool fromDataAnnotation);
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.HasPrincipalKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetPrincipalKey(IReadOnlyList`1<string> properties, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetPrincipalKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.HasNavigation(string name, bool pointsToPrincipal, bool fromDataAnnotation);
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.HasNavigation(MemberInfo property, bool pointsToPrincipal, bool fromDataAnnotation);
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.HasNavigations(string navigationToPrincipalName, string navigationToDependentName, bool fromDataAnnotation);
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.HasNavigations(MemberInfo navigationToPrincipal, MemberInfo navigationToDependent, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetNavigation(MemberInfo property, bool pointsToPrincipal, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetNavigation(string name, bool pointsToPrincipal, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetNavigations(MemberInfo navigationToPrincipal, MemberInfo navigationToDependent, bool fromDataAnnotation);
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.HasField(string fieldName, bool pointsToPrincipal, bool fromDataAnnotation);
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.HasField(FieldInfo fieldInfo, bool pointsToPrincipal, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetField(string fieldName, bool pointsToPrincipal, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetField(FieldInfo fieldInfo, bool pointsToPrincipal, bool fromDataAnnotation);
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.IsEagerLoaded(Nullable`1<bool> eagerLoaded, bool pointsToPrincipal, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetIsEagerLoaded(Nullable`1<bool> eagerLoaded, bool pointsToPrincipal, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetNavigations(string navigationToPrincipalName, string navigationToDependentName, bool fromDataAnnotation);
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.IsRequired(Nullable`1<bool> required, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetIsRequired(Nullable`1<bool> required, bool fromDataAnnotation);
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.IsOwnership(Nullable`1<bool> ownership, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetIsOwnership(Nullable`1<bool> ownership, bool fromDataAnnotation);
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.OnDelete(Nullable`1<DeleteBehavior> deleteBehavior, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetOnDelete(Nullable`1<DeleteBehavior> deleteBehavior, bool fromDataAnnotation);
    private sealed virtual override IConventionRelationshipBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.IsUnique(Nullable`1<bool> unique, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionRelationshipBuilder.CanSetIsUnique(Nullable`1<bool> unique, bool fromDataAnnotation);
    [CompilerGeneratedAttribute]
private bool <CanSetNavigations>b__17_0(InternalRelationshipBuilder r);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder : InternalModelItemBuilder`1<ServiceProperty> {
    private IConventionServiceProperty Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.Metadata { get; }
    public InternalServicePropertyBuilder(ServiceProperty property, InternalModelBuilder modelBuilder);
    public virtual InternalServicePropertyBuilder HasField(string fieldName, ConfigurationSource configurationSource);
    public virtual bool CanSetField(string fieldName, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalServicePropertyBuilder HasField(FieldInfo fieldInfo, ConfigurationSource configurationSource);
    public virtual bool CanSetField(FieldInfo fieldInfo, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalServicePropertyBuilder UsePropertyAccessMode(PropertyAccessMode propertyAccessMode, ConfigurationSource configurationSource);
    public virtual InternalServicePropertyBuilder HasParameterBinding(ServiceParameterBinding parameterBinding, ConfigurationSource configurationSource);
    public virtual bool CanSetParameterBinding(ServiceParameterBinding parameterBinding, ConfigurationSource configurationSource);
    private sealed virtual override IConventionServiceProperty Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.get_Metadata();
    private sealed virtual override IConventionServicePropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.HasField(string fieldName, bool fromDataAnnotation);
    private sealed virtual override IConventionServicePropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.HasField(FieldInfo fieldInfo, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.CanSetField(string fieldName, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.CanSetField(FieldInfo fieldInfo, bool fromDataAnnotation);
    private sealed virtual override IConventionServicePropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.HasParameterBinding(ServiceParameterBinding parameterBinding, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.CanSetParameterBinding(ServiceParameterBinding parameterBinding, bool fromDataAnnotation);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Internal.IReferenceRoot`1 {
    public abstract virtual Reference`1<T> Track(T object);
    public abstract virtual void Release(Reference`1<T> reference);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.Key : ConventionAnnotatable {
    private ConfigurationSource _configurationSource;
    private Func`2<bool, IIdentityMap> _identityMapFactory;
    private object _principalKeyValueFactory;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Property> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalKeyBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<ForeignKey> <ReferencingForeignKeys>k__BackingField;
    public IReadOnlyList`1<Property> Properties { get; }
    public EntityType DeclaringEntityType { get; }
    public InternalKeyBuilder Builder { get; public set; }
    public Func`2<bool, IIdentityMap> IdentityMapFactory { get; }
    public ISet`1<ForeignKey> ReferencingForeignKeys { get; public set; }
    public DebugView`1<Key> DebugView { get; }
    private IReadOnlyList`1<IProperty> Microsoft.EntityFrameworkCore.Metadata.IKey.Properties { get; }
    private IEntityType Microsoft.EntityFrameworkCore.Metadata.IKey.DeclaringEntityType { get; }
    private IReadOnlyList`1<IMutableProperty> Microsoft.EntityFrameworkCore.Metadata.IMutableKey.Properties { get; }
    private IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableKey.DeclaringEntityType { get; }
    private IConventionKeyBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionKey.Builder { get; }
    private IReadOnlyList`1<IConventionProperty> Microsoft.EntityFrameworkCore.Metadata.IConventionKey.Properties { get; }
    private IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionKey.DeclaringEntityType { get; }
    public Key(IReadOnlyList`1<Property> properties, ConfigurationSource configurationSource);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual IReadOnlyList`1<Property> get_Properties();
    [DebuggerStepThroughAttribute]
public virtual EntityType get_DeclaringEntityType();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual InternalKeyBuilder get_Builder();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual void set_Builder(InternalKeyBuilder value);
    [DebuggerStepThroughAttribute]
public virtual ConfigurationSource GetConfigurationSource();
    public virtual void UpdateConfigurationSource(ConfigurationSource configurationSource);
    protected virtual IConventionAnnotation OnAnnotationSet(string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    public virtual IEnumerable`1<ForeignKey> GetReferencingForeignKeys();
    public virtual Func`2<bool, IIdentityMap> get_IdentityMapFactory();
    public virtual IPrincipalKeyValueFactory`1<TKey> GetPrincipalKeyValueFactory();
    [CompilerGeneratedAttribute]
public virtual ISet`1<ForeignKey> get_ReferencingForeignKeys();
    [CompilerGeneratedAttribute]
public virtual void set_ReferencingForeignKeys(ISet`1<ForeignKey> value);
    public virtual string ToString();
    public virtual DebugView`1<Key> get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IProperty> Microsoft.EntityFrameworkCore.Metadata.IKey.get_Properties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IKey.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IMutableProperty> Microsoft.EntityFrameworkCore.Metadata.IMutableKey.get_Properties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableKey.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionKeyBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionKey.get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IConventionProperty> Microsoft.EntityFrameworkCore.Metadata.IConventionKey.get_Properties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionKey.get_DeclaringEntityType();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions : object {
    [ExtensionAttribute]
public static Func`2<bool, IIdentityMap> GetIdentityMapFactory(IKey key);
    [ExtensionAttribute]
public static IPrincipalKeyValueFactory`1<TKey> GetPrincipalKeyValueFactory(IKey key);
    [ExtensionAttribute]
public static int IndexOf(IKey key, IProperty property);
    [ExtensionAttribute]
public static string ToDebugString(IKey key, bool singleLine, string indent);
    [ExtensionAttribute]
public static Key AsKey(IKey key, string methodName);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.MemberClassifier : object {
    private ITypeMappingSource _typeMappingSource;
    private IParameterBindingFactories _parameterBindingFactories;
    public MemberClassifier(ITypeMappingSource typeMappingSource, IParameterBindingFactories parameterBindingFactories);
    public virtual Type FindCandidateNavigationPropertyType(MemberInfo memberInfo);
}
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.MetadataExtensions : object {
    public static TConcrete AsConcreteMetadataType(TInterface interface, string methodName);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.Model : ConventionAnnotatable {
    private SortedDictionary`2<string, EntityType> _entityTypes;
    private ConcurrentDictionary`2<Type, string> _clrTypeNameMap;
    private SortedDictionary`2<string, SortedSet`1<EntityType>> _entityTypesWithDefiningNavigation;
    private SortedDictionary`2<string, List`1<ValueTuple`2<string, string>>> _detachedEntityTypesWithDefiningNavigation;
    private Dictionary`2<string, ConfigurationSource> _ignoredTypeNames;
    [CompilerGeneratedAttribute]
private ConventionDispatcher <ConventionDispatcher>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalModelBuilder <Builder>k__BackingField;
    public ConventionDispatcher ConventionDispatcher { get; private set; }
    public bool IsReadonly { get; }
    public InternalModelBuilder Builder { get; }
    public DebugView`1<Model> DebugView { get; }
    private IConventionModelBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionModel.Builder { get; }
    public Model(ConventionSet conventions);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual ConventionDispatcher get_ConventionDispatcher();
    [CompilerGeneratedAttribute]
private void set_ConventionDispatcher(ConventionDispatcher value);
    public virtual bool get_IsReadonly();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual InternalModelBuilder get_Builder();
    public virtual IEnumerable`1<EntityType> GetEntityTypes();
    public virtual EntityType AddEntityType(string name, ConfigurationSource configurationSource);
    public virtual EntityType AddEntityType(Type type, ConfigurationSource configurationSource);
    private EntityType AddEntityType(EntityType entityType);
    public virtual EntityType FindEntityType(Type type);
    public virtual EntityType FindEntityType(string name);
    public virtual EntityType RemoveEntityType(Type type);
    public virtual EntityType RemoveEntityType(string name);
    private static void AssertCanRemove(EntityType entityType);
    public virtual EntityType RemoveEntityType(EntityType entityType);
    public virtual EntityType AddEntityType(string name, string definingNavigationName, EntityType definingEntityType, ConfigurationSource configurationSource);
    public virtual EntityType AddEntityType(Type type, string definingNavigationName, EntityType definingEntityType, ConfigurationSource configurationSource);
    public virtual void AddDetachedEntityType(string name, string definingNavigationName, string definingEntityTypeName);
    [DebuggerStepThroughAttribute]
public virtual string GetDisplayName(Type type);
    public virtual bool HasEntityTypeWithDefiningNavigation(Type clrType);
    public virtual bool HasEntityTypeWithDefiningNavigation(string name);
    public virtual bool HasOtherEntityTypesWithDefiningNavigation(EntityType entityType);
    public virtual bool EntityTypeShouldHaveDefiningNavigation(Type clrType);
    public virtual bool EntityTypeShouldHaveDefiningNavigation(string name);
    private bool EntityTypeShouldHaveDefiningNavigation(TypeIdentity& type);
    public virtual EntityType FindEntityType(Type type, string definingNavigationName, EntityType definingEntityType);
    public virtual EntityType FindEntityType(string name, string definingNavigationName, EntityType definingEntityType);
    public virtual EntityType FindActualEntityType(EntityType entityType);
    public virtual Type FindClrType(string name);
    public virtual IReadOnlyCollection`1<EntityType> GetEntityTypes(Type type);
    public virtual IReadOnlyCollection`1<EntityType> GetEntityTypes(string name);
    public virtual IReadOnlyList`1<EntityType> FindLeastDerivedEntityTypes(Type type, Func`2<EntityType, bool> condition);
    private static int GetDerivedLevel(TypeInfo derivedType, Dictionary`2<TypeInfo, int> derivedLevels);
    public virtual EntityType RemoveEntityType(Type type, string definingNavigationName, EntityType definingEntityType);
    public virtual EntityType RemoveEntityType(string name, string definingNavigationName, EntityType definingEntityType);
    public virtual void AddIgnored(Type type, ConfigurationSource configurationSource);
    public virtual void AddIgnored(string name, ConfigurationSource configurationSource);
    private void AddIgnored(string name, Type type, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> FindIgnoredConfigurationSource(Type type);
    public virtual Nullable`1<ConfigurationSource> FindIgnoredConfigurationSource(string name);
    public virtual bool IsIgnored(string name);
    public virtual bool IsIgnored(Type type);
    public virtual void RemoveIgnored(Type type);
    public virtual void RemoveIgnored(string name);
    public virtual bool IsOwned(Type clrType);
    public virtual Nullable`1<ConfigurationSource> FindIsOwnedConfigurationSource(Type clrType);
    public virtual void AddOwned(Type clrType, ConfigurationSource configurationSource);
    public virtual void RemoveOwned(Type clrType);
    public virtual void SetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, ConfigurationSource configurationSource);
    public virtual void SetChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, ConfigurationSource configurationSource);
    protected virtual IConventionAnnotation OnAnnotationSet(string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    public virtual IModel FinalizeModel();
    public virtual IModel MakeReadonly();
    public virtual DebugView`1<Model> get_DebugView();
    private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(string name);
    private sealed virtual override IEnumerable`1<IEntityType> Microsoft.EntityFrameworkCore.Metadata.IModel.GetEntityTypes();
    private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.FindEntityType(string name);
    private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(string name);
    private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(Type type);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableModel.RemoveEntityType(IMutableEntityType entityType);
    private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(string name, string definingNavigationName, IEntityType definingEntityType);
    private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.FindEntityType(string name, string definingNavigationName, IMutableEntityType definingEntityType);
    private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(string name, string definingNavigationName, IMutableEntityType definingEntityType);
    private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(Type type, string definingNavigationName, IMutableEntityType definingEntityType);
    private sealed virtual override IEnumerable`1<IMutableEntityType> Microsoft.EntityFrameworkCore.Metadata.IMutableModel.GetEntityTypes();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddIgnored(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionModelBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionModel.get_Builder();
    private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionModel.FindEntityType(string name);
    private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionModel.FindEntityType(string name, string definingNavigationName, IConventionEntityType definingEntityType);
    private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionModel.AddEntityType(string name, bool fromDataAnnotation);
    private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionModel.AddEntityType(Type clrType, bool fromDataAnnotation);
    private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionModel.AddEntityType(string name, string definingNavigationName, IConventionEntityType definingEntityType, bool fromDataAnnotation);
    private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionModel.AddEntityType(Type clrType, string definingNavigationName, IConventionEntityType definingEntityType, bool fromDataAnnotation);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionModel.RemoveEntityType(IConventionEntityType entityType);
    private sealed virtual override IEnumerable`1<IConventionEntityType> Microsoft.EntityFrameworkCore.Metadata.IConventionModel.GetEntityTypes();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionModel.AddIgnored(string name, bool fromDataAnnotation);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions : object {
    [ExtensionAttribute]
public static void SetProductVersion(IMutableModel model, string value);
    [ExtensionAttribute]
public static IEnumerable`1<IEntityType> GetRootEntityTypes(IModel model);
    [ExtensionAttribute]
public static string ToDebugString(IModel model, string indent);
    [ExtensionAttribute]
public static Model AsModel(IModel model, string methodName);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ModelNavigationsGraphAdapter : Graph`1<IConventionEntityType> {
    private IConventionModel _model;
    public IEnumerable`1<IConventionEntityType> Vertices { get; }
    public ModelNavigationsGraphAdapter(IConventionModel model);
    public virtual IEnumerable`1<IConventionEntityType> get_Vertices();
    public virtual IEnumerable`1<IConventionEntityType> GetOutgoingNeighbors(IConventionEntityType from);
    public virtual IEnumerable`1<IConventionEntityType> GetIncomingNeighbors(IConventionEntityType to);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.MutableEntityTypeExtensions : object {
    [ExtensionAttribute]
public static void AddData(IMutableEntityType entityType, Object[] data);
    [ExtensionAttribute]
public static void AddData(IMutableEntityType entityType, IEnumerable`1<object> data);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation : PropertyBase {
    private IClrCollectionAccessor _collectionAccessor;
    [CompilerGeneratedAttribute]
private ForeignKey <ForeignKey>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalNavigationBuilder <Builder>k__BackingField;
    public Type ClrType { get; }
    public ForeignKey ForeignKey { get; }
    public InternalNavigationBuilder Builder { get; public set; }
    public EntityType DeclaringEntityType { get; }
    public TypeBase DeclaringType { get; }
    public IClrCollectionAccessor CollectionAccessor { get; }
    public DebugView`1<Navigation> DebugView { get; }
    private IForeignKey Microsoft.EntityFrameworkCore.Metadata.INavigation.ForeignKey { get; }
    private IMutableForeignKey Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.ForeignKey { get; }
    private IEntityType Microsoft.EntityFrameworkCore.Metadata.INavigation.DeclaringEntityType { get; }
    private IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.DeclaringEntityType { get; }
    private IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.DeclaringEntityType { get; }
    private IConventionForeignKey Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.ForeignKey { get; }
    public Navigation(string name, PropertyInfo propertyInfo, FieldInfo fieldInfo, ForeignKey foreignKey);
    public virtual Type get_ClrType();
    [CompilerGeneratedAttribute]
public virtual ForeignKey get_ForeignKey();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual InternalNavigationBuilder get_Builder();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual void set_Builder(InternalNavigationBuilder value);
    public virtual EntityType get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
public virtual TypeBase get_DeclaringType();
    public virtual void SetIsEagerLoaded(Nullable`1<bool> eagerLoaded, ConfigurationSource configurationSource);
    public static bool IsCompatible(string navigationName, MemberInfo navigationProperty, EntityType sourceType, EntityType targetType, Nullable`1<bool> shouldBeCollection, bool shouldThrow);
    public static bool IsCompatible(MemberInfo navigationProperty, Type sourceClrType, Type targetClrType, Nullable`1<bool> shouldBeCollection, bool shouldThrow);
    [DebuggerStepThroughAttribute]
public virtual Navigation FindInverse();
    [DebuggerStepThroughAttribute]
public virtual EntityType GetTargetType();
    public virtual IClrCollectionAccessor get_CollectionAccessor();
    public virtual string ToString();
    public virtual DebugView`1<Navigation> get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IForeignKey Microsoft.EntityFrameworkCore.Metadata.INavigation.get_ForeignKey();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableForeignKey Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.get_ForeignKey();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.INavigation.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.get_DeclaringEntityType();
    private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.get_DeclaringEntityType();
    private sealed virtual override IConventionForeignKey Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.get_ForeignKey();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.NavigationExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute]
public static string ToDebugString(INavigation navigation, bool singleLine, bool includeIndexes, string indent);
    [ExtensionAttribute]
public static string ToDebugString(INavigation navigation, bool singleLine, bool includeIndexes, string indent, bool detailed);
    [ExtensionAttribute]
public static MemberIdentity CreateMemberIdentity(INavigation navigation);
    [ExtensionAttribute]
public static Navigation AsNavigation(INavigation navigation, string methodName);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.NullableEnumClrPropertySetter`3 : object {
    private Action`2<TEntity, TValue> _setter;
    public NullableEnumClrPropertySetter`3(Action`2<TEntity, TValue> setter);
    public virtual void SetClrValue(object instance, object value);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ParameterBindingFactories : object {
    private IRegisteredServices _registeredServices;
    private List`1<IParameterBindingFactory> _parameterBindingFactories;
    public ParameterBindingFactories(IEnumerable`1<IParameterBindingFactory> registeredFactories, IRegisteredServices registeredServices);
    public virtual IParameterBindingFactory FindFactory(Type parameterType, string parameterName);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertiesSnapshot : object {
    [CompilerGeneratedAttribute]
private List`1<InternalPropertyBuilder> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RelationshipSnapshot> <Relationships>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<InternalIndexBuilder> <Indexes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ValueTuple`2<InternalKeyBuilder, Nullable`1<ConfigurationSource>>> <Keys>k__BackingField;
    private List`1<InternalPropertyBuilder> Properties { get; }
    private List`1<RelationshipSnapshot> Relationships { get; private set; }
    private List`1<InternalIndexBuilder> Indexes { get; private set; }
    private List`1<ValueTuple`2<InternalKeyBuilder, Nullable`1<ConfigurationSource>>> Keys { get; private set; }
    public PropertiesSnapshot(List`1<InternalPropertyBuilder> properties, List`1<InternalIndexBuilder> indexes, List`1<ValueTuple`2<InternalKeyBuilder, Nullable`1<ConfigurationSource>>> keys, List`1<RelationshipSnapshot> relationships);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
private List`1<InternalPropertyBuilder> get_Properties();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
private List`1<RelationshipSnapshot> get_Relationships();
    [CompilerGeneratedAttribute]
private void set_Relationships(List`1<RelationshipSnapshot> value);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
private List`1<InternalIndexBuilder> get_Indexes();
    [CompilerGeneratedAttribute]
private void set_Indexes(List`1<InternalIndexBuilder> value);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
private List`1<ValueTuple`2<InternalKeyBuilder, Nullable`1<ConfigurationSource>>> get_Keys();
    [CompilerGeneratedAttribute]
private void set_Keys(List`1<ValueTuple`2<InternalKeyBuilder, Nullable`1<ConfigurationSource>>> value);
    public virtual void Add(List`1<RelationshipSnapshot> relationships);
    public virtual void Add(List`1<InternalIndexBuilder> indexes);
    public virtual void Add(List`1<ValueTuple`2<InternalKeyBuilder, Nullable`1<ConfigurationSource>>> keys);
    public virtual void Attach(InternalEntityTypeBuilder entityTypeBuilder);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.Property : PropertyBase {
    private Nullable`1<bool> _isConcurrencyToken;
    private Nullable`1<bool> _isNullable;
    private Nullable`1<ValueGenerated> _valueGenerated;
    private ConfigurationSource _configurationSource;
    private Nullable`1<ConfigurationSource> _typeConfigurationSource;
    private Nullable`1<ConfigurationSource> _isNullableConfigurationSource;
    private Nullable`1<ConfigurationSource> _isConcurrencyTokenConfigurationSource;
    private Nullable`1<ConfigurationSource> _valueGeneratedConfigurationSource;
    [CompilerGeneratedAttribute]
private EntityType <DeclaringEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalPropertyBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private IKey <PrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Key> <Keys>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ForeignKey> <ForeignKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Index> <Indexes>k__BackingField;
    public EntityType DeclaringEntityType { get; }
    public TypeBase DeclaringType { get; }
    public Type ClrType { get; }
    public InternalPropertyBuilder Builder { get; public set; }
    public bool IsNullable { get; public set; }
    private bool DefaultIsNullable { get; }
    public ValueGenerated ValueGenerated { get; public set; }
    private static ValueGenerated DefaultValueGenerated { get; }
    public bool IsConcurrencyToken { get; public set; }
    private static bool DefaultIsConcurrencyToken { get; }
    public IKey PrimaryKey { get; public set; }
    public List`1<Key> Keys { get; public set; }
    public List`1<ForeignKey> ForeignKeys { get; public set; }
    public List`1<Index> Indexes { get; public set; }
    public DebugView`1<Property> DebugView { get; }
    private IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.Builder { get; }
    private IEntityType Microsoft.EntityFrameworkCore.Metadata.IProperty.DeclaringEntityType { get; }
    private IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.DeclaringEntityType { get; }
    private IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.DeclaringEntityType { get; }
    public Property(string name, Type clrType, PropertyInfo propertyInfo, FieldInfo fieldInfo, EntityType declaringEntityType, ConfigurationSource configurationSource, Nullable`1<ConfigurationSource> typeConfigurationSource);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual EntityType get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
public virtual TypeBase get_DeclaringType();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual Type get_ClrType();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual InternalPropertyBuilder get_Builder();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual void set_Builder(InternalPropertyBuilder value);
    public virtual ConfigurationSource GetConfigurationSource();
    public virtual bool UpdateConfigurationSource(ConfigurationSource configurationSource);
    public virtual void SetConfigurationSource(ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetTypeConfigurationSource();
    public virtual void UpdateTypeConfigurationSource(ConfigurationSource configurationSource);
    public virtual bool get_IsNullable();
    public virtual void set_IsNullable(bool value);
    public virtual void SetIsNullable(Nullable`1<bool> nullable, ConfigurationSource configurationSource);
    private bool get_DefaultIsNullable();
    public virtual Nullable`1<ConfigurationSource> GetIsNullableConfigurationSource();
    private void UpdateIsNullableConfigurationSource(ConfigurationSource configurationSource);
    protected virtual void OnFieldInfoSet(FieldInfo newFieldInfo, FieldInfo oldFieldInfo);
    public virtual ValueGenerated get_ValueGenerated();
    public virtual void set_ValueGenerated(ValueGenerated value);
    public virtual void SetValueGenerated(Nullable`1<ValueGenerated> valueGenerated, ConfigurationSource configurationSource);
    private static ValueGenerated get_DefaultValueGenerated();
    public virtual Nullable`1<ConfigurationSource> GetValueGeneratedConfigurationSource();
    private void UpdateValueGeneratedConfigurationSource(ConfigurationSource configurationSource);
    public virtual bool get_IsConcurrencyToken();
    public virtual void set_IsConcurrencyToken(bool value);
    public virtual void SetIsConcurrencyToken(Nullable`1<bool> concurrencyToken, ConfigurationSource configurationSource);
    private static bool get_DefaultIsConcurrencyToken();
    public virtual Nullable`1<ConfigurationSource> GetIsConcurrencyTokenConfigurationSource();
    private void UpdateIsConcurrencyTokenConfigurationSource(ConfigurationSource configurationSource);
    public virtual void SetMaxLength(Nullable`1<int> maxLength, ConfigurationSource configurationSource);
    public virtual void SetIsUnicode(Nullable`1<bool> unicode, ConfigurationSource configurationSource);
    public virtual void SetBeforeSaveBehavior(Nullable`1<PropertySaveBehavior> beforeSaveBehavior, ConfigurationSource configurationSource);
    public virtual void SetAfterSaveBehavior(Nullable`1<PropertySaveBehavior> afterSaveBehavior, ConfigurationSource configurationSource);
    public virtual string CheckAfterSaveBehavior(PropertySaveBehavior behavior);
    public virtual void SetValueGeneratorFactory(Func`3<IProperty, IEntityType, ValueGenerator> factory, ConfigurationSource configurationSource);
    public virtual void SetValueConverter(ValueConverter converter, ConfigurationSource configurationSource);
    public virtual string CheckValueConverter(ValueConverter converter);
    public virtual void SetProviderClrType(Type providerClrType, ConfigurationSource configurationSource);
    public virtual void SetValueComparer(ValueComparer comparer, ConfigurationSource configurationSource);
    public virtual void SetKeyValueComparer(ValueComparer comparer, ConfigurationSource configurationSource);
    public virtual void SetStructuralValueComparer(ValueComparer comparer, ConfigurationSource configurationSource);
    public virtual string CheckValueComparer(ValueComparer comparer);
    public virtual IEnumerable`1<ForeignKey> GetContainingForeignKeys();
    public virtual IEnumerable`1<Key> GetContainingKeys();
    public virtual IEnumerable`1<Index> GetContainingIndexes();
    protected virtual IConventionAnnotation OnAnnotationSet(string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    public static string Format(IEnumerable`1<string> properties);
    public static bool AreCompatible(IReadOnlyList`1<Property> properties, EntityType entityType);
    [CompilerGeneratedAttribute]
public virtual IKey get_PrimaryKey();
    [CompilerGeneratedAttribute]
public virtual void set_PrimaryKey(IKey value);
    [CompilerGeneratedAttribute]
public virtual List`1<Key> get_Keys();
    [CompilerGeneratedAttribute]
public virtual void set_Keys(List`1<Key> value);
    [CompilerGeneratedAttribute]
public virtual List`1<ForeignKey> get_ForeignKeys();
    [CompilerGeneratedAttribute]
public virtual void set_ForeignKeys(List`1<ForeignKey> value);
    [CompilerGeneratedAttribute]
public virtual List`1<Index> get_Indexes();
    [CompilerGeneratedAttribute]
public virtual void set_Indexes(List`1<Index> value);
    public virtual string ToString();
    public virtual DebugView`1<Property> get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IProperty.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.get_DeclaringEntityType();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.SetIsNullable(Nullable`1<bool> nullable, bool fromDataAnnotation);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.SetValueGenerated(Nullable`1<ValueGenerated> valueGenerated, bool fromDataAnnotation);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.SetIsConcurrencyToken(Nullable`1<bool> concurrencyToken, bool fromDataAnnotation);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors : object {
    [CompilerGeneratedAttribute]
private Delegate <CurrentValueGetter>k__BackingField;
    [CompilerGeneratedAttribute]
private Delegate <PreStoreGeneratedCurrentValueGetter>k__BackingField;
    [CompilerGeneratedAttribute]
private Delegate <OriginalValueGetter>k__BackingField;
    [CompilerGeneratedAttribute]
private Delegate <RelationshipSnapshotGetter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<ValueBuffer, object> <ValueBufferGetter>k__BackingField;
    public Delegate CurrentValueGetter { get; }
    public Delegate PreStoreGeneratedCurrentValueGetter { get; }
    public Delegate OriginalValueGetter { get; }
    public Delegate RelationshipSnapshotGetter { get; }
    public Func`2<ValueBuffer, object> ValueBufferGetter { get; }
    public PropertyAccessors(Delegate currentValueGetter, Delegate preStoreGeneratedCurrentValueGetter, Delegate originalValueGetter, Delegate relationshipSnapshotGetter, Func`2<ValueBuffer, object> valueBufferGetter);
    [CompilerGeneratedAttribute]
public Delegate get_CurrentValueGetter();
    [CompilerGeneratedAttribute]
public Delegate get_PreStoreGeneratedCurrentValueGetter();
    [CompilerGeneratedAttribute]
public Delegate get_OriginalValueGetter();
    [CompilerGeneratedAttribute]
public Delegate get_RelationshipSnapshotGetter();
    [CompilerGeneratedAttribute]
public Func`2<ValueBuffer, object> get_ValueBufferGetter();
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessorsFactory : object {
    private static MethodInfo _genericCreate;
    private static PropertyAccessorsFactory();
    public virtual PropertyAccessors Create(IPropertyBase propertyBase);
    [UsedImplicitlyAttribute]
private static PropertyAccessors CreateGeneric(IPropertyBase propertyBase);
    private static Func`2<InternalEntityEntry, TProperty> CreateCurrentValueGetter(IPropertyBase propertyBase, bool useStoreGeneratedValues);
    private static Func`2<InternalEntityEntry, TProperty> CreateOriginalValueGetter(IProperty property);
    private static Func`2<InternalEntityEntry, TProperty> CreateRelationshipSnapshotGetter(IPropertyBase propertyBase);
    private static Func`2<ValueBuffer, object> CreateValueBufferGetter(IProperty property);
}
public abstract class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase : ConventionAnnotatable {
    private FieldInfo _fieldInfo;
    private Nullable`1<ConfigurationSource> _fieldInfoConfigurationSource;
    private IClrPropertyGetter _getter;
    private IClrPropertySetter _setter;
    private IClrPropertySetter _materializationSetter;
    private PropertyAccessors _accessors;
    private PropertyIndexes _indexes;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <PropertyInfo>k__BackingField;
    public string Name { get; }
    public TypeBase DeclaringType { get; }
    public PropertyInfo PropertyInfo { get; }
    public FieldInfo FieldInfo { get; public set; }
    public PropertyIndexes PropertyIndexes { get; public set; }
    public Type ClrType { get; }
    public IClrPropertyGetter Getter { get; }
    public IClrPropertySetter Setter { get; }
    public IClrPropertySetter MaterializationSetter { get; }
    public PropertyAccessors Accessors { get; }
    private ITypeBase Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.DeclaringType { get; }
    private IMutableTypeBase Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase.DeclaringType { get; }
    private IConventionTypeBase Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase.DeclaringType { get; }
    protected PropertyBase(string name, PropertyInfo propertyInfo, FieldInfo fieldInfo);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual string get_Name();
    public abstract virtual TypeBase get_DeclaringType();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual PropertyInfo get_PropertyInfo();
    [DebuggerStepThroughAttribute]
public virtual FieldInfo get_FieldInfo();
    [DebuggerStepThroughAttribute]
public virtual void set_FieldInfo(FieldInfo value);
    public virtual void SetField(string fieldName, ConfigurationSource configurationSource);
    public static FieldInfo GetFieldInfo(string fieldName, TypeBase type, string propertyName, bool shouldThrow);
    public virtual void SetField(FieldInfo fieldInfo, ConfigurationSource configurationSource);
    public virtual void SetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, ConfigurationSource configurationSource);
    public static bool IsCompatible(FieldInfo fieldInfo, Type propertyType, Type entityClrType, string propertyName, bool shouldThrow);
    public virtual PropertyIndexes get_PropertyIndexes();
    public virtual void set_PropertyIndexes(PropertyIndexes value);
    protected virtual void OnFieldInfoSet(FieldInfo newFieldInfo, FieldInfo oldFieldInfo);
    public virtual Nullable`1<ConfigurationSource> GetFieldInfoConfigurationSource();
    private void UpdateFieldInfoConfigurationSource(ConfigurationSource configurationSource);
    public abstract virtual Type get_ClrType();
    public virtual IClrPropertyGetter get_Getter();
    public virtual IClrPropertySetter get_Setter();
    public virtual IClrPropertySetter get_MaterializationSetter();
    public virtual PropertyAccessors get_Accessors();
    private sealed virtual override ITypeBase Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.get_DeclaringType();
    private sealed virtual override IMutableTypeBase Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase.get_DeclaringType();
    private sealed virtual override IConventionTypeBase Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase.get_DeclaringType();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase.SetField(FieldInfo fieldInfo, bool fromDataAnnotation);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions : object {
    [ExtensionAttribute]
public static int GetShadowIndex(IPropertyBase property);
    [ExtensionAttribute]
public static int GetStoreGeneratedIndex(IPropertyBase propertyBase);
    [ExtensionAttribute]
public static int GetRelationshipIndex(IPropertyBase propertyBase);
    [ExtensionAttribute]
public static int GetIndex(IPropertyBase property);
    [ExtensionAttribute]
public static int GetOriginalValueIndex(IPropertyBase propertyBase);
    [ExtensionAttribute]
public static PropertyIndexes GetPropertyIndexes(IPropertyBase propertyBase);
    [ExtensionAttribute]
public static PropertyAccessors GetPropertyAccessors(IPropertyBase propertyBase);
    [ExtensionAttribute]
public static MemberInfo GetIdentifyingMemberInfo(IPropertyBase propertyBase);
    [ExtensionAttribute]
public static bool TryGetMemberInfo(IPropertyBase propertyBase, bool forConstruction, bool forSet, MemberInfo& memberInfo, String& errorMessage);
    private static string GetNoFieldErrorMessage(IPropertyBase propertyBase);
    [ExtensionAttribute]
public static PropertyBase AsPropertyBase(IPropertyBase propertyBase, string methodName);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyCounts : object {
    [CompilerGeneratedAttribute]
private int <PropertyCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NavigationCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OriginalValueCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ShadowCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RelationshipCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StoreGeneratedCount>k__BackingField;
    public int PropertyCount { get; }
    public int NavigationCount { get; }
    public int OriginalValueCount { get; }
    public int ShadowCount { get; }
    public int RelationshipCount { get; }
    public int StoreGeneratedCount { get; }
    public PropertyCounts(int propertyCount, int navigationCount, int originalValueCount, int shadowCount, int relationshipCount, int storeGeneratedCount);
    [CompilerGeneratedAttribute]
public virtual int get_PropertyCount();
    [CompilerGeneratedAttribute]
public virtual int get_NavigationCount();
    [CompilerGeneratedAttribute]
public virtual int get_OriginalValueCount();
    [CompilerGeneratedAttribute]
public virtual int get_ShadowCount();
    [CompilerGeneratedAttribute]
public virtual int get_RelationshipCount();
    [CompilerGeneratedAttribute]
public virtual int get_StoreGeneratedCount();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions : object {
    [ExtensionAttribute]
public static bool ForAdd(ValueGenerated valueGenerated);
    [ExtensionAttribute]
public static bool ForUpdate(ValueGenerated valueGenerated);
    [ExtensionAttribute]
public static IEnumerable`1<IEntityType> GetContainingEntityTypes(IProperty property);
    [ExtensionAttribute]
public static IEnumerable`1<IForeignKey> GetReferencingForeignKeys(IProperty property);
    [ExtensionAttribute]
public static IProperty GetGenerationProperty(IProperty property);
    [ExtensionAttribute]
public static bool RequiresValueGenerator(IProperty property);
    [ExtensionAttribute]
public static bool MayBeStoreGenerated(IProperty property);
    [ExtensionAttribute]
public static bool RequiresOriginalValue(IProperty property);
    [ExtensionAttribute]
public static bool IsKeyOrForeignKey(IProperty property);
    [ExtensionAttribute]
public static IReadOnlyList`1<IProperty> FindPrincipals(IProperty property);
    private static void AddPrincipals(IProperty property, List`1<IProperty> visited);
    [ExtensionAttribute]
public static string ToDebugString(IProperty property, bool singleLine, bool includeIndexes, string indent);
    [ExtensionAttribute]
public static Property AsProperty(IProperty property, string methodName);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes : object {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OriginalValueIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ShadowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RelationshipIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StoreGenerationIndex>k__BackingField;
    public int Index { get; }
    public int OriginalValueIndex { get; }
    public int ShadowIndex { get; }
    public int RelationshipIndex { get; }
    public int StoreGenerationIndex { get; }
    public PropertyIndexes(int index, int originalValueIndex, int shadowIndex, int relationshipIndex, int storeGenerationIndex);
    [CompilerGeneratedAttribute]
public virtual int get_Index();
    [CompilerGeneratedAttribute]
public virtual int get_OriginalValueIndex();
    [CompilerGeneratedAttribute]
public virtual int get_ShadowIndex();
    [CompilerGeneratedAttribute]
public virtual int get_RelationshipIndex();
    [CompilerGeneratedAttribute]
public virtual int get_StoreGenerationIndex();
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyListComparer : object {
    public static PropertyListComparer Instance;
    private static PropertyListComparer();
    public sealed virtual int Compare(IReadOnlyList`1<IProperty> x, IReadOnlyList`1<IProperty> y);
    public sealed virtual bool Equals(IReadOnlyList`1<IProperty> x, IReadOnlyList`1<IProperty> y);
    public sealed virtual int GetHashCode(IReadOnlyList`1<IProperty> obj);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyParameterBindingFactory : object {
    public virtual ParameterBinding FindParameter(IEntityType entityType, Type parameterType, string parameterName);
    private static IList`1<string> GetCandidatePropertyNames(string parameterName);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.Reference`1 : object {
    private IReferenceRoot`1<T> _root;
    private int _referenceCount;
    [CompilerGeneratedAttribute]
private T <Object>k__BackingField;
    public T Object { get; public set; }
    public Reference`1(T object);
    public Reference`1(T object, IReferenceRoot`1<T> root);
    [CompilerGeneratedAttribute]
public virtual T get_Object();
    [CompilerGeneratedAttribute]
public virtual void set_Object(T value);
    public virtual void Dispose();
    public virtual void IncreaseReferenceCount();
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationshipSnapshot : object {
    [CompilerGeneratedAttribute]
private InternalRelationshipBuilder <Relationship>k__BackingField;
    [CompilerGeneratedAttribute]
private Snapshot <DefinedEntityTypeSnapshot>k__BackingField;
    public InternalRelationshipBuilder Relationship { get; }
    public Snapshot DefinedEntityTypeSnapshot { get; }
    public RelationshipSnapshot(InternalRelationshipBuilder relationship, Snapshot definedEntityTypeSnapshot);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual InternalRelationshipBuilder get_Relationship();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual Snapshot get_DefinedEntityTypeSnapshot();
    public virtual InternalRelationshipBuilder Attach(InternalEntityTypeBuilder entityTypeBuilder);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty : PropertyBase {
    private ServiceParameterBinding _parameterBinding;
    private ConfigurationSource _configurationSource;
    private Nullable`1<ConfigurationSource> _parameterBindingConfigurationSource;
    [CompilerGeneratedAttribute]
private EntityType <DeclaringEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalServicePropertyBuilder <Builder>k__BackingField;
    public EntityType DeclaringEntityType { get; }
    public TypeBase DeclaringType { get; }
    public Type ClrType { get; }
    public InternalServicePropertyBuilder Builder { get; public set; }
    public ServiceParameterBinding ParameterBinding { get; public set; }
    private IEntityType Microsoft.EntityFrameworkCore.Metadata.IServiceProperty.DeclaringEntityType { get; }
    private IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty.DeclaringEntityType { get; }
    private IConventionServicePropertyBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty.Builder { get; }
    private IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty.DeclaringEntityType { get; }
    public DebugView`1<ServiceProperty> DebugView { get; }
    public ServiceProperty(string name, PropertyInfo propertyInfo, FieldInfo fieldInfo, EntityType declaringEntityType, ConfigurationSource configurationSource);
    [CompilerGeneratedAttribute]
public virtual EntityType get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
public virtual TypeBase get_DeclaringType();
    [CompilerGeneratedAttribute]
public virtual Type get_ClrType();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual InternalServicePropertyBuilder get_Builder();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual void set_Builder(InternalServicePropertyBuilder value);
    public virtual ConfigurationSource GetConfigurationSource();
    public virtual void UpdateConfigurationSource(ConfigurationSource configurationSource);
    public virtual ServiceParameterBinding get_ParameterBinding();
    public virtual void set_ParameterBinding(ServiceParameterBinding value);
    public virtual void SetParameterBinding(ServiceParameterBinding parameterBinding, ConfigurationSource configurationSource);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty.SetParameterBinding(ServiceParameterBinding parameterBinding, bool fromDataAnnotation);
    public virtual Nullable`1<ConfigurationSource> GetParameterBindingConfigurationSource();
    private void UpdateParameterBindingConfigurationSource(ConfigurationSource configurationSource);
    private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IServiceProperty.get_DeclaringEntityType();
    private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty.get_DeclaringEntityType();
    private sealed virtual override IConventionServicePropertyBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty.get_Builder();
    private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty.get_DeclaringEntityType();
    public virtual string ToString();
    public virtual DebugView`1<ServiceProperty> get_DebugView();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.ServicePropertyExtensions : object {
    [ExtensionAttribute]
public static ServiceParameterBinding GetParameterBinding(IServiceProperty serviceProperty);
    [ExtensionAttribute]
public static string ToDebugString(IServiceProperty serviceProperty, bool singleLine, string indent);
    [ExtensionAttribute]
public static ServiceProperty AsServiceProperty(IServiceProperty serviceProperty, string methodName);
}
public abstract class Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBase : ConventionAnnotatable {
    private ConfigurationSource _configurationSource;
    private Dictionary`2<string, ConfigurationSource> _ignoredMembers;
    private Dictionary`2<string, PropertyInfo> _runtimeProperties;
    private Dictionary`2<string, FieldInfo> _runtimeFields;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private Model <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public Type ClrType { get; }
    public Model Model { get; }
    public string Name { get; }
    private IModel Microsoft.EntityFrameworkCore.Metadata.ITypeBase.Model { get; }
    private IMutableModel Microsoft.EntityFrameworkCore.Metadata.IMutableTypeBase.Model { get; }
    private IConventionModel Microsoft.EntityFrameworkCore.Metadata.IConventionTypeBase.Model { get; }
    private Type Microsoft.EntityFrameworkCore.Metadata.ITypeBase.ClrType { get; }
    protected TypeBase(string name, Model model, ConfigurationSource configurationSource);
    protected TypeBase(Type clrType, Model model, ConfigurationSource configurationSource);
    private TypeBase(Model model, ConfigurationSource configurationSource);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual Type get_ClrType();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual Model get_Model();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual string get_Name();
    [DebuggerStepThroughAttribute]
public virtual ConfigurationSource GetConfigurationSource();
    public virtual void UpdateConfigurationSource(ConfigurationSource configurationSource);
    public virtual IReadOnlyDictionary`2<string, PropertyInfo> GetRuntimeProperties();
    public virtual IReadOnlyDictionary`2<string, FieldInfo> GetRuntimeFields();
    public virtual void SetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, ConfigurationSource configurationSource);
    public virtual void SetNavigationAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, ConfigurationSource configurationSource);
    public virtual void ClearCaches();
    public virtual void AddIgnored(string name, ConfigurationSource configurationSource);
    public abstract virtual void OnTypeMemberIgnored(string name);
    public virtual IReadOnlyList`1<string> GetIgnoredMembers();
    public virtual Nullable`1<ConfigurationSource> FindDeclaredIgnoredConfigurationSource(string name);
    public virtual Nullable`1<ConfigurationSource> FindIgnoredConfigurationSource(string name);
    public virtual bool IsIgnored(string name);
    public virtual void RemoveIgnored(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IModel Microsoft.EntityFrameworkCore.Metadata.ITypeBase.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableModel Microsoft.EntityFrameworkCore.Metadata.IMutableTypeBase.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionModel Microsoft.EntityFrameworkCore.Metadata.IConventionTypeBase.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override Type Microsoft.EntityFrameworkCore.Metadata.ITypeBase.get_ClrType();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableTypeBase.AddIgnored(string name);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionTypeBase.AddIgnored(string name, bool fromDataAnnotation);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBaseExtensions : object {
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static bool HasClrType(ITypeBase type);
    [ExtensionAttribute]
public static IReadOnlyDictionary`2<string, PropertyInfo> GetRuntimeProperties(ITypeBase type);
    [ExtensionAttribute]
public static IReadOnlyDictionary`2<string, FieldInfo> GetRuntimeFields(ITypeBase type);
    [ExtensionAttribute]
public static MemberInfo FindClrMember(TypeBase type, string name);
    [ExtensionAttribute]
public static TypeBase AsTypeBase(ITypeBase entityType, string methodName);
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{DebuggerDisplay(),nq}")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.TypeIdentity : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public string Name { get; }
    public Type Type { get; }
    [DebuggerStepThroughAttribute]
public TypeIdentity(string name);
    [DebuggerStepThroughAttribute]
public TypeIdentity(Type type, Model model);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public Type get_Type();
    private string DebuggerDisplay();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IParameterBindingFactories {
    public abstract virtual IParameterBindingFactory FindFactory(Type parameterType, string parameterName);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IParameterBindingFactory {
    public abstract virtual bool CanBind(Type parameterType, string parameterName);
    public abstract virtual ParameterBinding Bind(IMutableEntityType entityType, Type parameterType, string parameterName);
    public abstract virtual ParameterBinding Bind(IConventionEntityType entityType, Type parameterType, string parameterName);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IProperty {
    public IEntityType DeclaringEntityType { get; }
    public bool IsNullable { get; }
    public ValueGenerated ValueGenerated { get; }
    public bool IsConcurrencyToken { get; }
    public abstract virtual IEntityType get_DeclaringEntityType();
    public abstract virtual bool get_IsNullable();
    public abstract virtual ValueGenerated get_ValueGenerated();
    public abstract virtual bool get_IsConcurrencyToken();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IPropertyBase {
    public string Name { get; }
    public ITypeBase DeclaringType { get; }
    public Type ClrType { get; }
    public PropertyInfo PropertyInfo { get; }
    public FieldInfo FieldInfo { get; }
    public abstract virtual string get_Name();
    public abstract virtual ITypeBase get_DeclaringType();
    public abstract virtual Type get_ClrType();
    public abstract virtual PropertyInfo get_PropertyInfo();
    public abstract virtual FieldInfo get_FieldInfo();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IPropertyParameterBindingFactory {
    public abstract virtual ParameterBinding FindParameter(IEntityType entityType, Type parameterType, string parameterName);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IServiceProperty {
    public IEntityType DeclaringEntityType { get; }
    public ServiceParameterBinding ParameterBinding { get; }
    public abstract virtual IEntityType get_DeclaringEntityType();
    public abstract virtual ServiceParameterBinding get_ParameterBinding();
}
public interface Microsoft.EntityFrameworkCore.Metadata.ITypeBase {
    public IModel Model { get; }
    public string Name { get; }
    public Type ClrType { get; }
    public abstract virtual IModel get_Model();
    public abstract virtual string get_Name();
    public abstract virtual Type get_ClrType();
}
public class Microsoft.EntityFrameworkCore.Metadata.LazyLoaderParameterBindingFactory : ServiceParameterBindingFactory {
    private static MethodInfo _loadMethod;
    private static MethodInfo _loadAsyncMethod;
    public LazyLoaderParameterBindingFactory(LazyLoaderParameterBindingFactoryDependencies dependencies);
    private static LazyLoaderParameterBindingFactory();
    public virtual bool CanBind(Type parameterType, string parameterName);
    public virtual ParameterBinding Bind(IMutableEntityType entityType, Type parameterType, string parameterName);
    public virtual ParameterBinding Bind(IConventionEntityType entityType, Type parameterType, string parameterName);
    private static ParameterBinding Bind(IEntityType entityType, Type parameterType);
    private static bool IsLazyLoader(Type type);
    private static bool IsLazyLoaderMethod(Type type, string name);
    private static bool IsLazyLoaderAsyncMethod(Type type, string name);
}
public class Microsoft.EntityFrameworkCore.Metadata.LazyLoaderParameterBindingFactoryDependencies : object {
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{DebuggerDisplay(),nq}")]
public class Microsoft.EntityFrameworkCore.Metadata.MemberIdentity : ValueType {
    private object _nameOrMember;
    public static MemberIdentity None;
    public string Name { get; }
    public MemberInfo MemberInfo { get; }
    [DebuggerStepThroughAttribute]
public MemberIdentity(string name);
    [DebuggerStepThroughAttribute]
public MemberIdentity(MemberInfo memberInfo);
    [DebuggerStepThroughAttribute]
private MemberIdentity(object nameOrMember);
    private static MemberIdentity();
    public bool IsNone();
    [DebuggerStepThroughAttribute]
public static MemberIdentity Create(string name);
    [DebuggerStepThroughAttribute]
public static MemberIdentity Create(MemberInfo member);
    [DebuggerStepThroughAttribute]
public string get_Name();
    [DebuggerStepThroughAttribute]
public MemberInfo get_MemberInfo();
    private string DebuggerDisplay();
}
public class Microsoft.EntityFrameworkCore.Metadata.ObjectArrayParameterBinding : ParameterBinding {
    private IReadOnlyList`1<ParameterBinding> _bindings;
    public ObjectArrayParameterBinding(IReadOnlyList`1<ParameterBinding> bindings);
    public virtual Expression BindToParameter(ParameterBindingInfo bindingInfo);
}
public abstract class Microsoft.EntityFrameworkCore.Metadata.ParameterBinding : object {
    [CompilerGeneratedAttribute]
private Type <ParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IPropertyBase> <ConsumedProperties>k__BackingField;
    public Type ParameterType { get; }
    public IReadOnlyList`1<IPropertyBase> ConsumedProperties { get; }
    protected ParameterBinding(Type parameterType, IPropertyBase[] consumedProperties);
    [CompilerGeneratedAttribute]
public virtual Type get_ParameterType();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<IPropertyBase> get_ConsumedProperties();
    public abstract virtual Expression BindToParameter(ParameterBindingInfo bindingInfo);
}
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Metadata.ParameterBindingInfo : ValueType {
    [CompilerGeneratedAttribute]
private IEntityType <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <MaterializationContextExpression>k__BackingField;
    public IEntityType EntityType { get; }
    public Expression MaterializationContextExpression { get; }
    public ParameterBindingInfo(IEntityType entityType, Expression materializationContextExpression);
    [CompilerGeneratedAttribute]
public IEntityType get_EntityType();
    [CompilerGeneratedAttribute]
public Expression get_MaterializationContextExpression();
    public int GetValueBufferIndex(IPropertyBase property);
}
public class Microsoft.EntityFrameworkCore.Metadata.PropertyParameterBinding : ParameterBinding {
    public PropertyParameterBinding(IProperty property);
    public virtual Expression BindToParameter(ParameterBindingInfo bindingInfo);
}
public enum Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior : Enum {
    public int value__;
    public static PropertySaveBehavior Save;
    public static PropertySaveBehavior Ignore;
    public static PropertySaveBehavior Throw;
}
public abstract class Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding : ParameterBinding {
    private Func`4<MaterializationContext, IEntityType, object, object> _serviceDelegate;
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    public Type ServiceType { get; }
    public Func`4<MaterializationContext, IEntityType, object, object> ServiceDelegate { get; }
    protected ServiceParameterBinding(Type parameterType, Type serviceType, IPropertyBase serviceProperty);
    [CompilerGeneratedAttribute]
public virtual Type get_ServiceType();
    public virtual Expression BindToParameter(ParameterBindingInfo bindingInfo);
    public abstract virtual Expression BindToParameter(Expression materializationExpression, Expression entityTypeExpression);
    public virtual Func`4<MaterializationContext, IEntityType, object, object> get_ServiceDelegate();
}
public class Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBindingFactory : object {
    private Type _serviceType;
    public ServiceParameterBindingFactory(Type serviceType);
    public virtual bool CanBind(Type parameterType, string parameterName);
    public virtual ParameterBinding Bind(IMutableEntityType entityType, Type parameterType, string parameterName);
    public virtual ParameterBinding Bind(IConventionEntityType entityType, Type parameterType, string parameterName);
    [CompilerGeneratedAttribute]
private bool <Bind>b__3_0(IMutableServiceProperty p);
    [CompilerGeneratedAttribute]
private bool <Bind>b__4_0(IConventionServiceProperty p);
}
public class Microsoft.EntityFrameworkCore.Metadata.SimpleModelFactory : object {
    public virtual IMutableModel Create();
}
[FlagsAttribute]
public enum Microsoft.EntityFrameworkCore.Metadata.ValueGenerated : Enum {
    public int value__;
    public static ValueGenerated Never;
    public static ValueGenerated OnAdd;
    public static ValueGenerated OnUpdate;
    public static ValueGenerated OnAddOrUpdate;
}
public class Microsoft.EntityFrameworkCore.ModelBuilder : object {
    private InternalModelBuilder _builder;
    public IMutableModel Model { get; }
    private InternalModelBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder>.Instance { get; }
    private InternalModelBuilder Builder { get; }
    public ModelBuilder(ConventionSet conventions);
    [EntityFrameworkInternalAttribute]
public ModelBuilder(IMutableModel model);
    public virtual IMutableModel get_Model();
    public virtual ModelBuilder HasAnnotation(string annotation, object value);
    private sealed virtual override InternalModelBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder>.get_Instance();
    public virtual EntityTypeBuilder`1<TEntity> Entity();
    public virtual EntityTypeBuilder Entity(Type type);
    public virtual EntityTypeBuilder Entity(string name);
    public virtual ModelBuilder Entity(Action`1<EntityTypeBuilder`1<TEntity>> buildAction);
    public virtual ModelBuilder Entity(Type type, Action`1<EntityTypeBuilder> buildAction);
    public virtual ModelBuilder Entity(string name, Action`1<EntityTypeBuilder> buildAction);
    [ObsoleteAttribute("Use Entity<TEntity>().HasNoKey() instead")]
public virtual QueryTypeBuilder`1<TQuery> Query();
    [ObsoleteAttribute("Use Entity(type).HasNoKey() instead")]
public virtual EntityTypeBuilder Query(Type type);
    [ObsoleteAttribute("Use Entity<TEntity>().HasNoKey() instead")]
public virtual ModelBuilder Query(Action`1<QueryTypeBuilder`1<TQuery>> buildAction);
    [ObsoleteAttribute("Use Entity(type).HasNoKey() instead")]
public virtual ModelBuilder Query(Type type, Action`1<EntityTypeBuilder> buildAction);
    public virtual ModelBuilder Ignore();
    public virtual ModelBuilder Ignore(Type type);
    public virtual ModelBuilder ApplyConfiguration(IEntityTypeConfiguration`1<TEntity> configuration);
    [ObsoleteAttribute("Use IEntityTypeConfiguration<TEntity> instead")]
public virtual ModelBuilder ApplyConfiguration(IQueryTypeConfiguration`1<TQuery> configuration);
    public virtual ModelBuilder ApplyConfigurationsFromAssembly(Assembly assembly, Func`2<Type, bool> predicate);
    public virtual OwnedEntityTypeBuilder`1<T> Owned();
    public virtual OwnedEntityTypeBuilder Owned(Type type);
    public virtual ModelBuilder HasChangeTrackingStrategy(ChangeTrackingStrategy changeTrackingStrategy);
    public virtual ModelBuilder UsePropertyAccessMode(PropertyAccessMode propertyAccessMode);
    public virtual IModel FinalizeModel();
    private InternalModelBuilder get_Builder();
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.ModelExtensions : object {
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static IEntityType FindEntityType(IModel model, Type type);
    [ExtensionAttribute]
public static IEntityType FindRuntimeEntityType(IModel model, Type type);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static IEntityType FindEntityType(IModel model, Type type, string definingNavigationName, IEntityType definingEntityType);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static IReadOnlyCollection`1<IEntityType> GetEntityTypes(IModel model, Type type);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static IReadOnlyCollection`1<IEntityType> GetEntityTypes(IModel model, string name);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static bool HasEntityTypeWithDefiningNavigation(IModel model, Type type);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static bool HasEntityTypeWithDefiningNavigation(IModel model, string name);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static ChangeTrackingStrategy GetChangeTrackingStrategy(IModel model);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static PropertyAccessMode GetPropertyAccessMode(IModel model);
    [ExtensionAttribute]
public static string GetProductVersion(IModel model);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.MutableAnnotatableExtensions : object {
    [ExtensionAttribute]
public static IAnnotation GetAnnotation(IMutableAnnotatable annotatable, string annotationName);
    [ExtensionAttribute]
public static void AddAnnotations(IMutableAnnotatable annotatable, IEnumerable`1<IAnnotation> annotations);
    [ExtensionAttribute]
public static void SetOrRemoveAnnotation(IMutableAnnotatable annotatable, string name, object value);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions : object {
    [ExtensionAttribute]
public static IMutableEntityType GetRootType(IMutableEntityType entityType);
    [ExtensionAttribute]
[ObsoleteAttribute("Use GetRootType")]
public static IMutableEntityType RootType(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableEntityType> GetDerivedTypes(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableEntityType> GetDerivedTypesInclusive(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableEntityType> GetDirectlyDerivedTypes(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableKey> GetDeclaredKeys(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableProperty> GetDeclaredProperties(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableNavigation> GetDeclaredNavigations(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableServiceProperty> GetDeclaredServiceProperties(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableIndex> GetDeclaredIndexes(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IMutableProperty RemoveProperty(IMutableEntityType entityType, string name);
    [ExtensionAttribute]
public static IMutableKey SetPrimaryKey(IMutableEntityType entityType, IMutableProperty property);
    [ExtensionAttribute]
public static IMutableKey FindKey(IMutableEntityType entityType, IProperty property);
    [ExtensionAttribute]
public static IMutableKey AddKey(IMutableEntityType entityType, IMutableProperty property);
    [ExtensionAttribute]
public static IMutableKey RemoveKey(IMutableEntityType entityType, IReadOnlyList`1<IMutableProperty> properties);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableForeignKey> GetDeclaredForeignKeys(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableForeignKey> GetDerivedForeignKeys(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableForeignKey> FindForeignKeys(IMutableEntityType entityType, IProperty property);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableForeignKey> FindForeignKeys(IMutableEntityType entityType, IReadOnlyList`1<IProperty> properties);
    [ExtensionAttribute]
public static IMutableForeignKey FindForeignKey(IMutableEntityType entityType, IProperty property, IKey principalKey, IEntityType principalEntityType);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableForeignKey> FindDeclaredForeignKeys(IMutableEntityType entityType, IReadOnlyList`1<IProperty> properties);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableForeignKey> GetReferencingForeignKeys(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableForeignKey> GetDeclaredReferencingForeignKeys(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IMutableForeignKey AddForeignKey(IMutableEntityType entityType, IMutableProperty property, IMutableKey principalKey, IMutableEntityType principalEntityType);
    [ExtensionAttribute]
public static IMutableForeignKey FindOwnership(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IMutableForeignKey RemoveForeignKey(IMutableEntityType entityType, IReadOnlyList`1<IMutableProperty> properties, IMutableKey principalKey, IMutableEntityType principalEntityType);
    [ExtensionAttribute]
public static IMutableNavigation FindNavigation(IMutableEntityType entityType, MemberInfo memberInfo);
    [ExtensionAttribute]
public static IMutableNavigation FindNavigation(IMutableEntityType entityType, string name);
    [ExtensionAttribute]
public static IMutableNavigation FindDeclaredNavigation(IMutableEntityType entityType, string name);
    [ExtensionAttribute]
public static IMutableNavigation FindDefiningNavigation(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableNavigation> GetNavigations(IMutableEntityType entityType);
    [ExtensionAttribute]
public static IMutableProperty FindProperty(IMutableEntityType entityType, PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static IReadOnlyList`1<IMutableProperty> FindProperties(IMutableEntityType entityType, IReadOnlyList`1<string> propertyNames);
    [ExtensionAttribute]
public static IMutableProperty FindDeclaredProperty(IMutableEntityType entityType, string name);
    [ExtensionAttribute]
public static IMutableProperty AddProperty(IMutableEntityType entityType, MemberInfo memberInfo);
    [ExtensionAttribute]
public static IMutableProperty AddProperty(IMutableEntityType entityType, string name);
    [ExtensionAttribute]
public static IMutableProperty AddProperty(IMutableEntityType entityType, string name, Type propertyType);
    [ExtensionAttribute]
public static IMutableIndex FindIndex(IMutableEntityType entityType, IProperty property);
    [ExtensionAttribute]
public static IMutableIndex AddIndex(IMutableEntityType entityType, IMutableProperty property);
    [ExtensionAttribute]
public static IMutableIndex RemoveIndex(IMutableEntityType entityType, IReadOnlyList`1<IMutableProperty> properties);
    [ExtensionAttribute]
public static void SetChangeTrackingStrategy(IMutableEntityType entityType, Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy);
    [ExtensionAttribute]
public static void SetQueryFilter(IMutableEntityType entityType, LambdaExpression queryFilter);
    [ExtensionAttribute]
public static void SetDefiningQuery(IMutableEntityType entityType, LambdaExpression definingQuery);
    [ExtensionAttribute]
public static IMutableProperty GetDiscriminatorProperty(IMutableEntityType entityType);
    [ExtensionAttribute]
public static void SetDiscriminatorProperty(IMutableEntityType entityType, IProperty property);
    [ExtensionAttribute]
public static void SetDiscriminatorValue(IMutableEntityType entityType, object value);
    [ExtensionAttribute]
public static void RemoveDiscriminatorValue(IMutableEntityType entityType);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.MutableForeignKeyExtensions : object {
    [ExtensionAttribute]
public static IMutableEntityType GetRelatedEntityType(IMutableForeignKey foreignKey, IMutableEntityType entityType);
    [ExtensionAttribute]
public static IMutableNavigation GetNavigation(IMutableForeignKey foreignKey, bool pointsToPrincipal);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.MutableKeyExtensions : object {
    [ExtensionAttribute]
public static IEnumerable`1<IMutableForeignKey> GetReferencingForeignKeys(IMutableKey key);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.MutableModelExtensions : object {
    [ExtensionAttribute]
public static IMutableEntityType FindEntityType(IMutableModel model, Type type);
    [ExtensionAttribute]
public static IMutableEntityType FindEntityType(IMutableModel model, Type type, string definingNavigationName, IMutableEntityType definingEntityType);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static IReadOnlyCollection`1<IMutableEntityType> GetEntityTypes(IMutableModel model, Type type);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static IReadOnlyCollection`1<IMutableEntityType> GetEntityTypes(IMutableModel model, string name);
    [ExtensionAttribute]
public static IMutableEntityType RemoveEntityType(IMutableModel model, Type type);
    [ExtensionAttribute]
public static IMutableEntityType RemoveEntityType(IMutableModel model, Type type, string definingNavigationName, IMutableEntityType definingEntityType);
    [ExtensionAttribute]
public static IMutableEntityType RemoveEntityType(IMutableModel model, string name);
    [ExtensionAttribute]
public static IMutableEntityType RemoveEntityType(IMutableModel model, string name, string definingNavigationName, IMutableEntityType definingEntityType);
    [ExtensionAttribute]
public static IReadOnlyList`1<IMutableEntityType> FindLeastDerivedEntityTypes(IMutableModel model, Type type, Func`2<IMutableEntityType, bool> condition);
    [ExtensionAttribute]
public static void RemoveIgnored(IMutableModel model, Type type);
    [ExtensionAttribute]
public static bool IsIgnored(IMutableModel model, Type type);
    [ExtensionAttribute]
public static void SetPropertyAccessMode(IMutableModel model, Nullable`1<PropertyAccessMode> propertyAccessMode);
    [ExtensionAttribute]
public static void SetChangeTrackingStrategy(IMutableModel model, Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy);
    [ExtensionAttribute]
public static void AddIgnored(IMutableModel model, Type clrType);
    [ExtensionAttribute]
public static bool IsOwned(IMutableModel model, Type clrType);
    [ExtensionAttribute]
public static void AddOwned(IMutableModel model, Type clrType);
    [ExtensionAttribute]
public static void RemoveOwned(IMutableModel model, Type clrType);
    [ExtensionAttribute]
public static IModel FinalizeModel(IMutableModel model);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.MutableNavigationExtensions : object {
    [ExtensionAttribute]
public static IMutableNavigation FindInverse(IMutableNavigation navigation);
    [ExtensionAttribute]
public static IMutableEntityType GetTargetType(IMutableNavigation navigation);
    [ExtensionAttribute]
public static void SetIsEagerLoaded(IMutableNavigation navigation, Nullable`1<bool> eagerLoaded);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.MutablePropertyBaseExtensions : object {
    [ExtensionAttribute]
public static void SetField(IMutablePropertyBase property, string fieldName);
    [ExtensionAttribute]
public static void SetPropertyAccessMode(IMutablePropertyBase property, Nullable`1<PropertyAccessMode> propertyAccessMode);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.MutablePropertyExtensions : object {
    [ExtensionAttribute]
public static IMutableProperty FindFirstPrincipal(IMutableProperty property);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableForeignKey> GetContainingForeignKeys(IMutableProperty property);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableIndex> GetContainingIndexes(IMutableProperty property);
    [ExtensionAttribute]
[ObsoleteAttribute("Use FindContainingPrimaryKey()")]
public static IMutableKey GetContainingPrimaryKey(IMutableProperty property);
    [ExtensionAttribute]
public static IMutableKey FindContainingPrimaryKey(IMutableProperty property);
    [ExtensionAttribute]
public static IEnumerable`1<IMutableKey> GetContainingKeys(IMutableProperty property);
    [ExtensionAttribute]
public static void SetMaxLength(IMutableProperty property, Nullable`1<int> maxLength);
    [ExtensionAttribute]
public static void SetIsUnicode(IMutableProperty property, Nullable`1<bool> unicode);
    [ExtensionAttribute]
public static void SetBeforeSaveBehavior(IMutableProperty property, Nullable`1<PropertySaveBehavior> beforeSaveBehavior);
    [ExtensionAttribute]
public static void SetAfterSaveBehavior(IMutableProperty property, Nullable`1<PropertySaveBehavior> afterSaveBehavior);
    [ExtensionAttribute]
public static void SetValueGeneratorFactory(IMutableProperty property, Func`3<IProperty, IEntityType, ValueGenerator> valueGeneratorFactory);
    [ExtensionAttribute]
public static void SetValueConverter(IMutableProperty property, ValueConverter converter);
    [ExtensionAttribute]
public static void SetProviderClrType(IMutableProperty property, Type providerClrType);
    [ExtensionAttribute]
public static void SetValueComparer(IMutableProperty property, ValueComparer comparer);
    [ExtensionAttribute]
public static void SetKeyValueComparer(IMutableProperty property, ValueComparer comparer);
    [ExtensionAttribute]
public static void SetStructuralValueComparer(IMutableProperty property, ValueComparer comparer);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.MutableTypeBaseExtensions : object {
    [ExtensionAttribute]
public static void SetPropertyAccessMode(IMutableTypeBase entityType, Nullable`1<PropertyAccessMode> propertyAccessMode);
    [ExtensionAttribute]
public static void SetNavigationAccessMode(IMutableTypeBase entityType, Nullable`1<PropertyAccessMode> propertyAccessMode);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.NavigationExtensions : object {
    [ExtensionAttribute]
public static IClrCollectionAccessor GetCollectionAccessor(INavigation navigation);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static bool IsDependentToPrincipal(INavigation navigation);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static bool IsCollection(INavigation navigation);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static INavigation FindInverse(INavigation navigation);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static IEntityType GetTargetType(INavigation navigation);
    [ExtensionAttribute]
public static bool IsEagerLoaded(INavigation navigation);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.ObservableCollectionExtensions : object {
    [ExtensionAttribute]
public static BindingList`1<T> ToBindingList(ObservableCollection`1<T> source);
}
public enum Microsoft.EntityFrameworkCore.PropertyAccessMode : Enum {
    public int value__;
    public static PropertyAccessMode Field;
    public static PropertyAccessMode FieldDuringConstruction;
    public static PropertyAccessMode Property;
    public static PropertyAccessMode PreferField;
    public static PropertyAccessMode PreferFieldDuringConstruction;
    public static PropertyAccessMode PreferProperty;
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.PropertyBaseExtensions : object {
    [ExtensionAttribute]
public static MemberInfo GetMemberInfo(IPropertyBase propertyBase, bool forMaterialization, bool forSet);
    [ExtensionAttribute]
public static IClrPropertyGetter GetGetter(IPropertyBase propertyBase);
    [ExtensionAttribute]
public static string GetFieldName(IPropertyBase propertyBase);
    [ExtensionAttribute]
public static bool IsShadowProperty(IPropertyBase property);
    [ExtensionAttribute]
public static PropertyAccessMode GetPropertyAccessMode(IPropertyBase propertyBase);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.PropertyExtensions : object {
    [ExtensionAttribute]
public static CoreTypeMapping GetTypeMapping(IProperty property);
    [ExtensionAttribute]
public static CoreTypeMapping FindTypeMapping(IProperty property);
    [ExtensionAttribute]
[ObsoleteAttribute("Use FindTypeMapping instead")]
public static CoreTypeMapping FindMapping(IProperty property);
    [ExtensionAttribute]
public static IProperty FindFirstPrincipal(IProperty property);
    [ExtensionAttribute]
public static bool IsForeignKey(IProperty property);
    [ExtensionAttribute]
public static bool IsIndex(IProperty property);
    [ExtensionAttribute]
public static bool IsPrimaryKey(IProperty property);
    [ExtensionAttribute]
public static bool IsKey(IProperty property);
    [ExtensionAttribute]
public static IEnumerable`1<IForeignKey> GetContainingForeignKeys(IProperty property);
    [ExtensionAttribute]
public static IEnumerable`1<IIndex> GetContainingIndexes(IProperty property);
    [ExtensionAttribute]
[ObsoleteAttribute("Use FindContainingPrimaryKey()")]
public static IKey GetContainingPrimaryKey(IProperty property);
    [ExtensionAttribute]
public static IKey FindContainingPrimaryKey(IProperty property);
    [ExtensionAttribute]
public static IEnumerable`1<IKey> GetContainingKeys(IProperty property);
    [ExtensionAttribute]
public static Nullable`1<int> GetMaxLength(IProperty property);
    [ExtensionAttribute]
public static Nullable`1<bool> IsUnicode(IProperty property);
    [ExtensionAttribute]
public static PropertySaveBehavior GetBeforeSaveBehavior(IProperty property);
    [ExtensionAttribute]
public static PropertySaveBehavior GetAfterSaveBehavior(IProperty property);
    [ExtensionAttribute]
public static Func`3<IProperty, IEntityType, ValueGenerator> GetValueGeneratorFactory(IProperty property);
    [ExtensionAttribute]
public static ValueConverter GetValueConverter(IProperty property);
    [ExtensionAttribute]
public static Type GetProviderClrType(IProperty property);
    [ExtensionAttribute]
public static ValueComparer GetValueComparer(IProperty property);
    [ExtensionAttribute]
public static ValueComparer GetKeyValueComparer(IProperty property);
    [ExtensionAttribute]
public static ValueComparer GetStructuralValueComparer(IProperty property);
    [ExtensionAttribute]
public static string Format(IEnumerable`1<IPropertyBase> properties, bool includeTypes);
}
public class Microsoft.EntityFrameworkCore.Query.CollectionShaperExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <Projection>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <InnerShaper>k__BackingField;
    [CompilerGeneratedAttribute]
private INavigation <Navigation>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ElementType>k__BackingField;
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public Expression Projection { get; }
    public Expression InnerShaper { get; }
    public INavigation Navigation { get; }
    public Type ElementType { get; }
    public CollectionShaperExpression(Expression projection, Expression innerShaper, INavigation navigation, Type elementType);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual CollectionShaperExpression Update(Expression projection, Expression innerShaper);
    public sealed virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    [CompilerGeneratedAttribute]
public virtual Expression get_Projection();
    [CompilerGeneratedAttribute]
public virtual Expression get_InnerShaper();
    [CompilerGeneratedAttribute]
public virtual INavigation get_Navigation();
    [CompilerGeneratedAttribute]
public virtual Type get_ElementType();
    public virtual void Print(ExpressionPrinter expressionPrinter);
}
public class Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGenerator : object {
    [CompilerGeneratedAttribute]
private CompiledQueryCacheKeyGeneratorDependencies <Dependencies>k__BackingField;
    protected CompiledQueryCacheKeyGeneratorDependencies Dependencies { get; }
    public CompiledQueryCacheKeyGenerator(CompiledQueryCacheKeyGeneratorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual CompiledQueryCacheKeyGeneratorDependencies get_Dependencies();
    public virtual object GenerateCacheKey(Expression query, bool async);
    protected CompiledQueryCacheKey GenerateCacheKeyCore(Expression query, bool async);
}
public class Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGeneratorDependencies : object {
    private IExecutionStrategyFactory _executionStrategyFactory;
    [CompilerGeneratedAttribute]
private IModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRetryingExecutionStrategy>k__BackingField;
    public IModel Model { get; }
    public ICurrentDbContext CurrentContext { get; }
    public bool IsRetryingExecutionStrategy { get; }
    [EntityFrameworkInternalAttribute]
public CompiledQueryCacheKeyGeneratorDependencies(IModel model, ICurrentDbContext currentContext, IExecutionStrategyFactory executionStrategyFactory);
    [CompilerGeneratedAttribute]
public IModel get_Model();
    [CompilerGeneratedAttribute]
public ICurrentDbContext get_CurrentContext();
    [CompilerGeneratedAttribute]
public bool get_IsRetryingExecutionStrategy();
    public CompiledQueryCacheKeyGeneratorDependencies With(IModel model);
    public CompiledQueryCacheKeyGeneratorDependencies With(ICurrentDbContext currentContext);
    public CompiledQueryCacheKeyGeneratorDependencies With(IExecutionStrategyFactory executionStrategyFactory);
}
public class Microsoft.EntityFrameworkCore.Query.EntityMaterializerSource : object {
    private ConcurrentDictionary`2<IEntityType, Func`2<MaterializationContext, object>> _materializers;
    public static MethodInfo TryReadValueMethod;
    private ConcurrentDictionary`2<IEntityType, Func`2<MaterializationContext, object>> Materializers { get; }
    public EntityMaterializerSource(EntityMaterializerSourceDependencies dependencies);
    private static EntityMaterializerSource();
    public virtual Expression CreateReadValueExpression(Expression valueBufferExpression, Type type, int index, IPropertyBase property);
    private static TValue TryReadValue(ValueBuffer& valueBuffer, int index, IPropertyBase property);
    public virtual Expression CreateMaterializeExpression(IEntityType entityType, string entityInstanceName, Expression materializationContextExpression);
    private ConcurrentDictionary`2<IEntityType, Func`2<MaterializationContext, object>> get_Materializers();
    public virtual Func`2<MaterializationContext, object> GetMaterializer(IEntityType entityType);
    [CompilerGeneratedAttribute]
private Func`2<MaterializationContext, object> <GetMaterializer>b__8_0(IEntityType e);
}
public class Microsoft.EntityFrameworkCore.Query.EntityMaterializerSourceDependencies : object {
}
public class Microsoft.EntityFrameworkCore.Query.EntityShaperExpression : Expression {
    [CompilerGeneratedAttribute]
private IEntityType <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <ValueBufferExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    public IEntityType EntityType { get; }
    public Expression ValueBufferExpression { get; }
    public bool IsNullable { get; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public EntityShaperExpression(IEntityType entityType, Expression valueBufferExpression, bool nullable);
    [CompilerGeneratedAttribute]
public virtual IEntityType get_EntityType();
    [CompilerGeneratedAttribute]
public virtual Expression get_ValueBufferExpression();
    [CompilerGeneratedAttribute]
public virtual bool get_IsNullable();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual EntityShaperExpression WithEntityType(IEntityType entityType);
    public virtual EntityShaperExpression MarkAsNullable();
    public virtual EntityShaperExpression Update(Expression valueBufferExpression);
    public virtual Type get_Type();
    public sealed virtual ExpressionType get_NodeType();
    public virtual void Print(ExpressionPrinter expressionPrinter);
}
public class Microsoft.EntityFrameworkCore.Query.EvaluatableExpressionFilter : object {
    private static PropertyInfo _dateTimeNow;
    private static PropertyInfo _dateTimeUtcNow;
    private static PropertyInfo _dateTimeToday;
    private static PropertyInfo _dateTimeOffsetNow;
    private static PropertyInfo _dateTimeOffsetUtcNow;
    private static MethodInfo _guidNewGuid;
    private static MethodInfo _randomNextNoArgs;
    private static MethodInfo _randomNextOneArg;
    private static MethodInfo _randomNextTwoArgs;
    [CompilerGeneratedAttribute]
private EvaluatableExpressionFilterDependencies <Dependencies>k__BackingField;
    protected EvaluatableExpressionFilterDependencies Dependencies { get; }
    public EvaluatableExpressionFilter(EvaluatableExpressionFilterDependencies dependencies);
    private static EvaluatableExpressionFilter();
    [CompilerGeneratedAttribute]
protected virtual EvaluatableExpressionFilterDependencies get_Dependencies();
    public virtual bool IsEvaluatableExpression(Expression expression, IModel model);
}
public class Microsoft.EntityFrameworkCore.Query.EvaluatableExpressionFilterDependencies : object {
}
public class Microsoft.EntityFrameworkCore.Query.ExpressionPrinter : ExpressionVisitor {
    private IndentedStringBuilder _stringBuilder;
    private Dictionary`2<ParameterExpression, string> _parametersInScope;
    private List`1<ParameterExpression> _namelessParameters;
    private List`1<ParameterExpression> _encounteredParameters;
    private Dictionary`2<ExpressionType, string> _binaryOperandMap;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CharacterLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateUniqueParameterIds>k__BackingField;
    private static List`1<string> _simpleMethods;
    private Nullable`1<int> CharacterLimit { get; private set; }
    private bool GenerateUniqueParameterIds { get; private set; }
    private static ExpressionPrinter();
    [CompilerGeneratedAttribute]
private Nullable`1<int> get_CharacterLimit();
    [CompilerGeneratedAttribute]
private void set_CharacterLimit(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
private bool get_GenerateUniqueParameterIds();
    [CompilerGeneratedAttribute]
private void set_GenerateUniqueParameterIds(bool value);
    public virtual void VisitList(IReadOnlyList`1<T> items, Action`1<ExpressionPrinter> joinAction);
    public virtual ExpressionPrinter Append(object o);
    public virtual ExpressionPrinter AppendLine();
    public virtual ExpressionVisitor AppendLine(object o);
    public virtual ExpressionPrinter AppendLines(object o, bool skipFinalNewline);
    public virtual IDisposable Indent();
    private void Append(string message);
    private void AppendLine(string message);
    public virtual string Print(Expression expression, Nullable`1<int> characterLimit);
    public virtual string PrintDebug(Expression expression, Nullable`1<int> characterLimit, bool generateUniqueParameterIds);
    protected virtual string PrintCore(Expression expression, Nullable`1<int> characterLimit, bool generateUniqueParameterIds);
    public virtual string GenerateBinaryOperator(ExpressionType expressionType);
    public virtual Expression Visit(Expression expression);
    protected virtual Expression VisitBinary(BinaryExpression binaryExpression);
    protected virtual Expression VisitBlock(BlockExpression blockExpression);
    protected virtual Expression VisitConditional(ConditionalExpression conditionalExpression);
    protected virtual Expression VisitConstant(ConstantExpression constantExpression);
    private void Print(object value);
    protected virtual Expression VisitGoto(GotoExpression gotoExpression);
    protected virtual Expression VisitLabel(LabelExpression labelExpression);
    protected virtual Expression VisitLambda(Expression`1<T> lambdaExpression);
    protected virtual Expression VisitMember(MemberExpression memberExpression);
    protected virtual Expression VisitMemberInit(MemberInitExpression memberInitExpression);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    protected virtual Expression VisitNew(NewExpression newExpression);
    protected virtual Expression VisitNewArray(NewArrayExpression newArrayExpression);
    protected virtual Expression VisitParameter(ParameterExpression parameterExpression);
    protected virtual Expression VisitUnary(UnaryExpression unaryExpression);
    protected virtual Expression VisitDefault(DefaultExpression defaultExpression);
    protected virtual Expression VisitTry(TryExpression tryExpression);
    protected virtual Expression VisitIndex(IndexExpression indexExpression);
    protected virtual Expression VisitTypeBinary(TypeBinaryExpression typeBinaryExpression);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    private void VisitArguments(IReadOnlyList`1<Expression> arguments, Action`1<string> appendAction, string lastSeparator, bool areConnected);
    protected virtual string PostProcess(string printedExpression);
    private void UnhandledExpressionType(Expression expression);
    [CompilerGeneratedAttribute]
private void <VisitIndex>b__45_0(string s);
}
public class Microsoft.EntityFrameworkCore.Query.GroupByShaperExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <KeySelector>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <ElementSelector>k__BackingField;
    public Expression KeySelector { get; }
    public Expression ElementSelector { get; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public GroupByShaperExpression(Expression keySelector, Expression elementSelector);
    [CompilerGeneratedAttribute]
public virtual Expression get_KeySelector();
    [CompilerGeneratedAttribute]
public virtual Expression get_ElementSelector();
    public virtual Type get_Type();
    public sealed virtual ExpressionType get_NodeType();
    public virtual void Print(ExpressionPrinter expressionPrinter);
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual GroupByShaperExpression Update(Expression keySelector, Expression elementSelector);
}
public interface Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator {
    public abstract virtual object GenerateCacheKey(Expression query, bool async);
}
public interface Microsoft.EntityFrameworkCore.Query.IEntityMaterializerSource {
    public abstract virtual Expression CreateReadValueExpression(Expression valueBuffer, Type type, int index, IPropertyBase property);
    public abstract virtual Expression CreateMaterializeExpression(IEntityType entityType, string entityInstanceName, Expression materializationExpression);
    public abstract virtual Func`2<MaterializationContext, object> GetMaterializer(IEntityType entityType);
}
public interface Microsoft.EntityFrameworkCore.Query.IEvaluatableExpressionFilter {
    public abstract virtual bool IsEvaluatableExpression(Expression expression, IModel model);
}
public interface Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2 {
}
public class Microsoft.EntityFrameworkCore.Query.IncludeExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <EntityExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <NavigationExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private INavigation <Navigation>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Expression EntityExpression { get; public set; }
    public Expression NavigationExpression { get; public set; }
    public INavigation Navigation { get; public set; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public IncludeExpression(Expression entityExpression, Expression navigationExpression, INavigation navigation);
    [CompilerGeneratedAttribute]
public virtual Expression get_EntityExpression();
    [CompilerGeneratedAttribute]
public virtual void set_EntityExpression(Expression value);
    [CompilerGeneratedAttribute]
public virtual Expression get_NavigationExpression();
    [CompilerGeneratedAttribute]
public virtual void set_NavigationExpression(Expression value);
    [CompilerGeneratedAttribute]
public virtual INavigation get_Navigation();
    [CompilerGeneratedAttribute]
public virtual void set_Navigation(INavigation value);
    public sealed virtual ExpressionType get_NodeType();
    [CompilerGeneratedAttribute]
public virtual Type get_Type();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual IncludeExpression Update(Expression entityExpression, Expression navigationExpression);
    public virtual void Print(ExpressionPrinter expressionPrinter);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.AllAnyToContainsRewritingExpressionVisitor : ExpressionVisitor {
    private static bool IsExpressionOfFunc(Type type, int funcGenericArgs);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    private bool TryExtractEqualityOperands(Expression expression, Expression& left, Expression& right, Boolean& negated);
}
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Query.Internal.AnonymousObject : ValueType {
    private Object[] _values;
    public static ConstructorInfo AnonymousObjectCtor;
    [UsedImplicitlyAttribute]
public AnonymousObject(Object[] values);
    private static AnonymousObject();
    public static bool op_Equality(AnonymousObject x, AnonymousObject y);
    public static bool op_Inequality(AnonymousObject x, AnonymousObject y);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryProviderExtensions : object {
    private static MethodInfo _createEntityQueryableMethod;
    private static AsyncQueryProviderExtensions();
    [ExtensionAttribute]
public static ConstantExpression CreateEntityQueryableExpression(IAsyncQueryProvider entityQueryProvider, Type type);
    [UsedImplicitlyAttribute]
private static EntityQueryable`1<TResult> CreateEntityQueryable(IAsyncQueryProvider entityQueryProvider);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncEnumerableQuery`2 : CompiledQueryBase`2<TContext, IAsyncEnumerable`1<TResult>> {
    public CompiledAsyncEnumerableQuery`2(LambdaExpression queryExpression);
    public virtual IAsyncEnumerable`1<TResult> Execute(TContext context);
    public virtual IAsyncEnumerable`1<TResult> Execute(TContext context, TParam1 param1);
    public virtual IAsyncEnumerable`1<TResult> Execute(TContext context, TParam1 param1, TParam2 param2);
    public virtual IAsyncEnumerable`1<TResult> Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3);
    public virtual IAsyncEnumerable`1<TResult> Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4);
    public virtual IAsyncEnumerable`1<TResult> Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5);
    protected virtual Func`2<QueryContext, IAsyncEnumerable`1<TResult>> CreateCompiledQuery(IQueryCompiler queryCompiler, Expression expression);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncTaskQuery`2 : CompiledQueryBase`2<TContext, Task`1<TResult>> {
    public CompiledAsyncTaskQuery`2(LambdaExpression queryExpression);
    public virtual Task`1<TResult> ExecuteAsync(TContext context);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, CancellationToken cancellationToken);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, CancellationToken cancellationToken);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, CancellationToken cancellationToken);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, CancellationToken cancellationToken);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, CancellationToken cancellationToken);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, CancellationToken cancellationToken);
    protected virtual Func`2<QueryContext, Task`1<TResult>> CreateCompiledQuery(IQueryCompiler queryCompiler, Expression expression);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.CompiledQuery`2 : CompiledQueryBase`2<TContext, TResult> {
    public CompiledQuery`2(LambdaExpression queryExpression);
    public virtual TResult Execute(TContext context);
    public virtual TResult Execute(TContext context, TParam1 param1);
    public virtual TResult ExecuteAsync(TContext context, CancellationToken cancellationToken, TParam1 param1);
    public virtual TResult Execute(TContext context, TParam1 param1, TParam2 param2);
    public virtual TResult Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3);
    public virtual TResult Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4);
    public virtual TResult Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5);
    protected virtual Func`2<QueryContext, TResult> CreateCompiledQuery(IQueryCompiler queryCompiler, Expression expression);
}
public abstract class Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryBase`2 : object {
    private LambdaExpression _queryExpression;
    private Func`2<QueryContext, TResult> _executor;
    protected CompiledQueryBase`2(LambdaExpression queryExpression);
    protected virtual TResult ExecuteCore(TContext context, Object[] parameters);
    protected virtual TResult ExecuteCore(TContext context, CancellationToken cancellationToken, Object[] parameters);
    protected abstract virtual Func`2<QueryContext, TResult> CreateCompiledQuery(IQueryCompiler queryCompiler, Expression expression);
    private Func`2<QueryContext, TResult> EnsureExecutor(TContext context);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache : object {
    public static string CompiledQueryParameterPrefix;
    private static ConcurrentDictionary`2<object, object> _querySyncObjects;
    private IMemoryCache _memoryCache;
    public CompiledQueryCache(IMemoryCache memoryCache);
    private static CompiledQueryCache();
    public virtual Func`2<QueryContext, TResult> GetOrAddQuery(object cacheKey, Func`1<Func`2<QueryContext, TResult>> compiler);
    public virtual Func`2<QueryContext, TResult> GetOrAddAsyncQuery(object cacheKey, Func`1<Func`2<QueryContext, TResult>> compiler);
    private Func`2<QueryContext, TFunc> GetOrAddQueryCore(object cacheKey, Func`1<Func`2<QueryContext, TFunc>> compiler);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.EntityEqualityRewritingExpressionVisitor : ExpressionVisitor {
    private static string RuntimeParameterPrefix;
    private QueryCompilationContext _queryCompilationContext;
    private IDiagnosticsLogger`1<Query> _logger;
    private static MethodInfo _objectEqualsMethodInfo;
    private static MethodInfo _enumerableContainsMethodInfo;
    private static MethodInfo _parameterValueExtractor;
    private static MethodInfo _parameterListValueExtractor;
    public EntityEqualityRewritingExpressionVisitor(QueryCompilationContext queryCompilationContext);
    private static EntityEqualityRewritingExpressionVisitor();
    public virtual Expression Rewrite(Expression expression);
    protected virtual Expression VisitConstant(ConstantExpression constantExpression);
    protected virtual Expression VisitNew(NewExpression newExpression);
    protected virtual Expression VisitMemberInit(MemberInitExpression memberInitExpression);
    protected virtual Expression VisitNewArray(NewArrayExpression newArrayExpression);
    protected virtual Expression VisitListInit(ListInitExpression listInitExpression);
    protected virtual ElementInit VisitElementInit(ElementInit elementInit);
    protected virtual Expression VisitMember(MemberExpression memberExpression);
    protected virtual Expression VisitBinary(BinaryExpression binaryExpression);
    protected virtual Expression VisitUnary(UnaryExpression unaryExpression);
    protected virtual Expression VisitTypeBinary(TypeBinaryExpression typeBinaryExpression);
    protected virtual Expression VisitConditional(ConditionalExpression conditionalExpression);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    private Expression VisitContainsMethodCall(MethodCallExpression methodCallExpression);
    private Expression VisitOrderingMethodCall(MethodCallExpression methodCallExpression);
    private Expression VisitSelectMethodCall(MethodCallExpression methodCallExpression);
    private Expression VisitJoinMethodCall(MethodCallExpression methodCallExpression);
    private Expression VisitOfType(MethodCallExpression methodCallExpression);
    private LambdaExpression RewriteAndVisitLambda(LambdaExpression lambda, EntityReferenceExpression source);
    private LambdaExpression RewriteAndVisitLambda(LambdaExpression lambda, EntityReferenceExpression source1, EntityReferenceExpression source2);
    private Expression RewriteEquality(bool equality, Expression left, Expression right);
    private Expression RewriteNullEquality(bool equality, IEntityType entityType, Expression nonNullExpression, INavigation lastNavigation);
    private Expression RewriteEntityEquality(bool equality, IEntityType entityType, Expression left, INavigation leftNavigation, Expression right, INavigation rightNavigation, bool subqueryTraversed);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    private Expression CreateKeyAccessExpression(Expression target, IReadOnlyList`1<IProperty> properties);
    private Expression CreatePropertyAccessExpression(Expression target, IProperty property);
    private static bool CanEvaluate(Expression expression);
    private static T ParameterValueExtractor(QueryContext context, string baseParameterName, IProperty property);
    private static List`1<TProperty> ParameterListValueExtractor(QueryContext context, string baseParameterName, IProperty property);
    protected static Expression UnwrapLastNavigation(Expression expression);
    protected static Expression Unwrap(Expression expression);
    [CompilerGeneratedAttribute]
private ValueTuple`2<IEnumerable`1<MemberBinding>, Dictionary`2<string, EntityOrDtoType>> <VisitMemberInit>g__VisitMemberBindings|9_0(ReadOnlyCollection`1<MemberBinding> bindings);
    [CompilerGeneratedAttribute]
internal static Expression <VisitContainsMethodCall>g__NoTranslation|19_0(<>c__DisplayClass19_0& );
    [CompilerGeneratedAttribute]
internal static MethodInfo <VisitOrderingMethodCall>g__GetOrderingMethodInfo|20_0(bool firstOrdering, bool ascending);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1 : object {
    private static EntityQueryable`1<TResult> _detached;
    private IAsyncQueryProvider _queryProvider;
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    public Type ElementType { get; }
    public Expression Expression { get; }
    public IQueryProvider Provider { get; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    public EntityQueryable`1(IAsyncQueryProvider queryProvider);
    public EntityQueryable`1(IAsyncQueryProvider queryProvider, Expression expression);
    private static EntityQueryable`1();
    public virtual Type get_ElementType();
    [CompilerGeneratedAttribute]
public virtual Expression get_Expression();
    public virtual IQueryProvider get_Provider();
    public virtual IEnumerator`1<TResult> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual IAsyncEnumerator`1<TResult> GetAsyncEnumerator(CancellationToken cancellationToken);
    private sealed virtual override IDetachableContext Microsoft.EntityFrameworkCore.Query.Internal.IDetachableContext.DetachContext();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
}
public class Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider : object {
    private static MethodInfo _genericCreateQueryMethod;
    private MethodInfo _genericExecuteMethod;
    private IQueryCompiler _queryCompiler;
    public EntityQueryProvider(IQueryCompiler queryCompiler);
    private static EntityQueryProvider();
    public virtual IQueryable`1<TElement> CreateQuery(Expression expression);
    public virtual IQueryable CreateQuery(Expression expression);
    public virtual TResult Execute(Expression expression);
    public virtual object Execute(Expression expression);
    public virtual TResult ExecuteAsync(Expression expression, CancellationToken cancellationToken);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.EnumerableToQueryableMethodConvertingExpressionVisitor : ExpressionVisitor {
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    private static bool ClientSource(Expression expression);
    private static bool CanConvertEnumerableToQueryable(Type enumerableType, Type queryableType);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.ExpressionEqualityComparer : object {
    [CompilerGeneratedAttribute]
private static ExpressionEqualityComparer <Instance>k__BackingField;
    public static ExpressionEqualityComparer Instance { get; }
    private static ExpressionEqualityComparer();
    [CompilerGeneratedAttribute]
public static ExpressionEqualityComparer get_Instance();
    public virtual int GetHashCode(Expression obj);
    private void AddListToHash(HashCode& hash, IReadOnlyList`1<T> expressions);
    public virtual bool Equals(Expression x, Expression y);
    [ObsoleteAttribute("Use Equals instead")]
public virtual bool SequenceEquals(IEnumerable`1<Expression> x, IEnumerable`1<Expression> y);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.FunctionPreprocessingExpressionVisitor : ExpressionVisitor {
    private static MethodInfo _startsWithMethodInfo;
    private static MethodInfo _endsWithMethodInfo;
    private static Expression _constantNullString;
    private static FunctionPreprocessingExpressionVisitor();
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    protected virtual Expression VisitUnary(UnaryExpression unaryExpression);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.Grouping`2 : object {
    private List`1<TElement> _elements;
    [CompilerGeneratedAttribute]
private TKey <Key>k__BackingField;
    public TKey Key { get; }
    public Grouping`2(TKey key);
    [CompilerGeneratedAttribute]
public virtual TKey get_Key();
    public virtual void Add(TElement element);
    public virtual IEnumerator`1<TElement> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.EntityFrameworkCore.Query.Internal.GroupJoinFlatteningExpressionVisitor : ExpressionVisitor {
    private static EnumerableToQueryableMethodConvertingExpressionVisitor _enumerableToQueryableReMappingExpressionVisitor;
    private SelectManyVerifyingExpressionVisitor _selectManyVerifyingExpressionVisitor;
    private static GroupJoinFlatteningExpressionVisitor();
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
}
public interface Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider {
    public abstract virtual TResult ExecuteAsync(Expression expression, CancellationToken cancellationToken);
}
public interface Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache {
    public abstract virtual Func`2<QueryContext, TResult> GetOrAddQuery(object cacheKey, Func`1<Func`2<QueryContext, TResult>> compiler);
    public abstract virtual Func`2<QueryContext, TResult> GetOrAddAsyncQuery(object cacheKey, Func`1<Func`2<QueryContext, TResult>> compiler);
}
public interface Microsoft.EntityFrameworkCore.Query.Internal.IDetachableContext {
    public abstract virtual IDetachableContext DetachContext();
}
public class Microsoft.EntityFrameworkCore.Query.Internal.InvocationExpressionRemovingExpressionVisitor : ExpressionVisitor {
    protected virtual Expression VisitInvocation(InvocationExpression invocationExpression);
    private Expression StripTrivialConversions(Expression expression);
    private Expression InlineLambdaExpression(LambdaExpression lambdaExpression, ReadOnlyCollection`1<Expression> arguments);
}
public interface Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler {
    public abstract virtual TResult Execute(Expression query);
    public abstract virtual TResult ExecuteAsync(Expression query, CancellationToken cancellationToken);
    public abstract virtual Func`2<QueryContext, TResult> CreateCompiledQuery(Expression query);
    public abstract virtual Func`2<QueryContext, TResult> CreateCompiledAsyncQuery(Expression query);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.NavigationExpandingExpressionVisitor : ExpressionVisitor {
    private static PropertyInfo _queryContextContextPropertyInfo;
    private static IDictionary`2<MethodInfo, MethodInfo> _predicateLessMethodInfo;
    private QueryCompilationContext _queryCompilationContext;
    private PendingSelectorExpandingExpressionVisitor _pendingSelectorExpandingExpressionVisitor;
    private SubqueryMemberPushdownExpressionVisitor _subqueryMemberPushdownExpressionVisitor;
    private ReducingExpressionVisitor _reducingExpressionVisitor;
    private EntityReferenceOptionalMarkingExpressionVisitor _entityReferenceOptionalMarkingExpressionVisitor;
    private ISet`1<string> _parameterNames;
    private EnumerableToQueryableMethodConvertingExpressionVisitor _enumerableToQueryableMethodConvertingExpressionVisitor;
    private EntityEqualityRewritingExpressionVisitor _entityEqualityRewritingExpressionVisitor;
    private ParameterExtractingExpressionVisitor _parameterExtractingExpressionVisitor;
    private Dictionary`2<IEntityType, LambdaExpression> _parameterizedQueryFilterPredicateCache;
    private Parameters _parameters;
    public NavigationExpandingExpressionVisitor(QueryCompilationContext queryCompilationContext, IEvaluatableExpressionFilter evaluatableExpressionFilter);
    private static NavigationExpandingExpressionVisitor();
    public virtual Expression Expand(Expression query);
    protected virtual Expression VisitConstant(ConstantExpression constantExpression);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    protected virtual Expression VisitMember(MemberExpression memberExpression);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    private Expression ProcessAllAnyCountLongCount(NavigationExpansionExpression source, MethodInfo genericMethod, LambdaExpression predicate);
    private Expression ProcessAverageMaxMinSum(NavigationExpansionExpression source, MethodInfo method, LambdaExpression selector);
    private Expression ProcessCastOfType(NavigationExpansionExpression source, MethodInfo genericMethod, Type castType);
    private Expression ProcessContains(NavigationExpansionExpression source, Expression item);
    private Expression ProcessDefaultIfEmpty(NavigationExpansionExpression source);
    private Expression ProcessDistinctSkipTake(NavigationExpansionExpression source, MethodInfo genericMethod, Expression count);
    private Expression ProcessFirstSingleLastOrDefault(NavigationExpansionExpression source, MethodInfo genericMethod, LambdaExpression predicate, Type returnType);
    private Expression ProcessGroupBy(NavigationExpansionExpression source, LambdaExpression keySelector, LambdaExpression elementSelector, LambdaExpression resultSelector);
    private Expression ProcessInclude(NavigationExpansionExpression source, Expression expression, bool thenInclude);
    private Expression ProcessJoin(NavigationExpansionExpression outerSource, NavigationExpansionExpression innerSource, LambdaExpression outerKeySelector, LambdaExpression innerKeySelector, LambdaExpression resultSelector);
    private Expression ProcessLeftJoin(NavigationExpansionExpression outerSource, NavigationExpansionExpression innerSource, LambdaExpression outerKeySelector, LambdaExpression innerKeySelector, LambdaExpression resultSelector);
    private Expression ProcessOrderByThenBy(NavigationExpansionExpression source, MethodInfo genericMethod, LambdaExpression keySelector, bool thenBy);
    private Expression ProcessSelect(NavigationExpansionExpression source, LambdaExpression selector);
    private Expression ProcessSelectMany(NavigationExpansionExpression source, LambdaExpression collectionSelector, LambdaExpression resultSelector);
    private Expression ProcessSetOperation(NavigationExpansionExpression outerSource, MethodInfo genericMethod, NavigationExpansionExpression innerSource);
    private Expression ProcessUnknownMethod(MethodCallExpression methodCallExpression);
    private Expression ProcessWhere(NavigationExpansionExpression source, LambdaExpression predicate);
    private void ApplyPendingOrderings(NavigationExpansionExpression source);
    private Expression ApplyQueryFilter(NavigationExpansionExpression navigationExpansionExpression);
    private bool CompareIncludes(Expression outer, Expression inner);
    private MethodCallExpression ConvertToEnumerable(MethodInfo queryableMethod, List`1<Expression> arguments);
    private NavigationExpansionExpression CreateNavigationExpansionExpression(Expression sourceExpression, IEntityType entityType);
    private Expression ExpandNavigationsInLambdaExpression(NavigationExpansionExpression source, LambdaExpression lambdaExpression);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Query.Internal.NavigationExpandingExpressionVisitor/<FindNavigations>d__42")]
private static IEnumerable`1<INavigation> FindNavigations(IEntityType entityType, string navigationName);
    private LambdaExpression GenerateLambda(Expression body, ParameterExpression currentParameter);
    private string GetParameterName(string prefix);
    private static void PopulateEagerLoadedNavigations(IncludeTreeNode includeTreeNode);
    private IncludeTreeNode PopulateIncludeTree(IncludeTreeNode includeTreeNode, Expression expression);
    private Expression Reduce(Expression source);
    private Expression SnapshotExpression(Expression selector);
    [CompilerGeneratedAttribute]
private Expression <ProcessUnknownMethod>b__34_2(Expression e);
    [CompilerGeneratedAttribute]
internal static bool <ConvertToEnumerable>g__IsNumericType|39_1(Type type);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.NegationOptimizingExpressionVisitor : ExpressionVisitor {
    private static bool TryNegate(ExpressionType expressionType, ExpressionType& result);
    private static ExpressionType Negate(ExpressionType expressionType);
    protected virtual Expression VisitUnary(UnaryExpression unaryExpression);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.NullAsyncQueryProvider : object {
    public static IAsyncQueryProvider Instance;
    private static NullAsyncQueryProvider();
    private sealed virtual override IQueryable System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override IQueryable`1<TElement> System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override object System.Linq.IQueryProvider.Execute(Expression expression);
    private sealed virtual override TResult System.Linq.IQueryProvider.Execute(Expression expression);
    private sealed virtual override TResult Microsoft.EntityFrameworkCore.Query.Internal.IAsyncQueryProvider.ExecuteAsync(Expression expression, CancellationToken cancellationToken);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.NullCheckRemovingExpressionVisitor : ExpressionVisitor {
    private NullSafeAccessVerifyingExpressionVisitor _nullSafeAccessVerifyingExpressionVisitor;
    protected virtual Expression VisitConditional(ConditionalExpression conditionalExpression);
    private bool IsNullConstant(Expression expression);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor : ExpressionVisitor {
    private static string QueryFilterPrefix;
    private IParameterValues _parameterValues;
    private IDiagnosticsLogger`1<Query> _logger;
    private bool _parameterize;
    private bool _generateContextAccessors;
    private EvaluatableExpressionFindingExpressionVisitor _evaluatableExpressionFindingExpressionVisitor;
    private ContextParameterReplacingExpressionVisitor _contextParameterReplacingExpressionVisitor;
    private Dictionary`2<Expression, Expression> _evaluatedValues;
    private IDictionary`2<Expression, bool> _evaluatableExpressions;
    private IQueryProvider _currentQueryProvider;
    public ParameterExtractingExpressionVisitor(IEvaluatableExpressionFilter evaluatableExpressionFilter, IParameterValues parameterValues, Type contextType, IModel model, IDiagnosticsLogger`1<Query> logger, bool parameterize, bool generateContextAccessors);
    public virtual Expression ExtractParameters(Expression expression);
    public virtual Expression Visit(Expression expression);
    private bool PreserveInitializationConstant(Expression expression, bool generateParameter);
    private bool PreserveConvertNode(Expression expression);
    protected virtual Expression VisitConditional(ConditionalExpression conditionalExpression);
    protected virtual Expression VisitBinary(BinaryExpression binaryExpression);
    private Expression TryGetConstantValue(Expression expression);
    private static bool ShortCircuitLogicalExpression(Expression expression, ExpressionType nodeType);
    protected virtual Expression VisitConstant(ConstantExpression constantExpression);
    private static Expression GenerateConstantExpression(object value, Type returnType);
    private Expression Evaluate(Expression expression, bool generateParameter);
    private static Expression RemoveConvert(Expression expression);
    private object GetValue(Expression expression, String& parameterName);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.QueryCompilationContextFactory : object {
    private QueryCompilationContextDependencies _dependencies;
    public QueryCompilationContextFactory(QueryCompilationContextDependencies dependencies);
    public virtual QueryCompilationContext Create(bool async);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler : object {
    private IQueryContextFactory _queryContextFactory;
    private ICompiledQueryCache _compiledQueryCache;
    private ICompiledQueryCacheKeyGenerator _compiledQueryCacheKeyGenerator;
    private IDatabase _database;
    private IDiagnosticsLogger`1<Query> _logger;
    private Type _contextType;
    private IEvaluatableExpressionFilter _evaluatableExpressionFilter;
    private IModel _model;
    public QueryCompiler(IQueryContextFactory queryContextFactory, ICompiledQueryCache compiledQueryCache, ICompiledQueryCacheKeyGenerator compiledQueryCacheKeyGenerator, IDatabase database, IDiagnosticsLogger`1<Query> logger, ICurrentDbContext currentContext, IEvaluatableExpressionFilter evaluatableExpressionFilter, IModel model);
    public virtual TResult Execute(Expression query);
    public virtual Func`2<QueryContext, TResult> CompileQueryCore(IDatabase database, Expression query, IModel model, bool async);
    public virtual Func`2<QueryContext, TResult> CreateCompiledQuery(Expression query);
    public virtual TResult ExecuteAsync(Expression query, CancellationToken cancellationToken);
    public virtual Func`2<QueryContext, TResult> CreateCompiledAsyncQuery(Expression query);
    public virtual Expression ExtractParameters(Expression query, IParameterValues parameterValues, IDiagnosticsLogger`1<Query> logger, bool parameterize, bool generateContextAccessors);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.QueryMetadataExtractingExpressionVisitor : ExpressionVisitor {
    private QueryCompilationContext _queryCompilationContext;
    public QueryMetadataExtractingExpressionVisitor(QueryCompilationContext queryCompilationContext);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.QueryTranslationPostprocessorFactory : object {
    private QueryTranslationPostprocessorDependencies _dependencies;
    public QueryTranslationPostprocessorFactory(QueryTranslationPostprocessorDependencies dependencies);
    public virtual QueryTranslationPostprocessor Create(QueryCompilationContext queryCompilationContext);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.QueryTranslationPreprocessorFactory : object {
    private QueryTranslationPreprocessorDependencies _dependencies;
    public QueryTranslationPreprocessorFactory(QueryTranslationPreprocessorDependencies dependencies);
    public virtual QueryTranslationPreprocessor Create(QueryCompilationContext queryCompilationContext);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.SubqueryMemberPushdownExpressionVisitor : ExpressionVisitor {
    private static List`1<MethodInfo> _supportedMethods;
    private static IDictionary`2<MethodInfo, MethodInfo> _predicateLessMethodInfo;
    private static SubqueryMemberPushdownExpressionVisitor();
    protected virtual Expression VisitMember(MemberExpression memberExpression);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    private Expression PushdownMember(MethodCallExpression methodCallExpression, Func`3<Expression, bool, Expression> createSelector, Type returnType);
}
public interface Microsoft.EntityFrameworkCore.Query.IParameterValues {
    public IReadOnlyDictionary`2<string, object> ParameterValues { get; }
    public abstract virtual IReadOnlyDictionary`2<string, object> get_ParameterValues();
    public abstract virtual void AddParameter(string name, object value);
}
public interface Microsoft.EntityFrameworkCore.Query.IPrintableExpression {
    public abstract virtual void Print(ExpressionPrinter expressionPrinter);
}
public interface Microsoft.EntityFrameworkCore.Query.IQueryableMethodTranslatingExpressionVisitorFactory {
    public abstract virtual QueryableMethodTranslatingExpressionVisitor Create(IModel model);
}
public interface Microsoft.EntityFrameworkCore.Query.IQueryCompilationContextFactory {
    public abstract virtual QueryCompilationContext Create(bool async);
}
public interface Microsoft.EntityFrameworkCore.Query.IQueryContextFactory {
    public abstract virtual QueryContext Create();
}
public interface Microsoft.EntityFrameworkCore.Query.IQueryTranslationPostprocessorFactory {
    public abstract virtual QueryTranslationPostprocessor Create(QueryCompilationContext queryCompilationContext);
}
public interface Microsoft.EntityFrameworkCore.Query.IQueryTranslationPreprocessorFactory {
    public abstract virtual QueryTranslationPreprocessor Create(QueryCompilationContext queryCompilationContext);
}
public interface Microsoft.EntityFrameworkCore.Query.IShapedQueryCompilingExpressionVisitorFactory {
    public abstract virtual ShapedQueryCompilingExpressionVisitor Create(QueryCompilationContext queryCompilationContext);
}
public class Microsoft.EntityFrameworkCore.Query.MaterializeCollectionNavigationExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <Subquery>k__BackingField;
    [CompilerGeneratedAttribute]
private INavigation <Navigation>k__BackingField;
    public Expression Subquery { get; }
    public INavigation Navigation { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public MaterializeCollectionNavigationExpression(Expression subquery, INavigation navigation);
    [CompilerGeneratedAttribute]
public virtual Expression get_Subquery();
    [CompilerGeneratedAttribute]
public virtual INavigation get_Navigation();
    public sealed virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual MaterializeCollectionNavigationExpression Update(Expression subquery);
    public virtual void Print(ExpressionPrinter expressionPrinter);
}
[ObsoleteAttribute("Use ConditionalExpression with null check instead")]
public class Microsoft.EntityFrameworkCore.Query.NullConditionalExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <Caller>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <AccessOperation>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Expression Caller { get; }
    public Expression AccessOperation { get; }
    public bool CanReduce { get; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public NullConditionalExpression(Expression caller, Expression accessOperation);
    [CompilerGeneratedAttribute]
public virtual Expression get_Caller();
    [CompilerGeneratedAttribute]
public virtual Expression get_AccessOperation();
    public virtual bool get_CanReduce();
    [CompilerGeneratedAttribute]
public virtual Type get_Type();
    public sealed virtual ExpressionType get_NodeType();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual Expression Reduce();
    public virtual Expression Update(Expression newCaller, Expression newAccessOperation);
    protected virtual bool Equals(NullConditionalExpression other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual void Print(ExpressionPrinter expressionPrinter);
    private static void VisitArguments(ExpressionPrinter expressionPrinter, IReadOnlyList`1<Expression> arguments);
    public virtual string ToString();
}
public class Microsoft.EntityFrameworkCore.Query.ProjectionBindingExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <QueryExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectionMember <ProjectionMember>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<IProperty, int> <IndexMap>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Expression QueryExpression { get; }
    public ProjectionMember ProjectionMember { get; }
    public Nullable`1<int> Index { get; }
    public IDictionary`2<IProperty, int> IndexMap { get; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public ProjectionBindingExpression(Expression queryExpression, ProjectionMember projectionMember, Type type);
    public ProjectionBindingExpression(Expression queryExpression, int index, Type type);
    public ProjectionBindingExpression(Expression queryExpression, IDictionary`2<IProperty, int> indexMap);
    [CompilerGeneratedAttribute]
public virtual Expression get_QueryExpression();
    [CompilerGeneratedAttribute]
public virtual ProjectionMember get_ProjectionMember();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_Index();
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<IProperty, int> get_IndexMap();
    [CompilerGeneratedAttribute]
public virtual Type get_Type();
    public sealed virtual ExpressionType get_NodeType();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual void Print(ExpressionPrinter expressionPrinter);
    public virtual bool Equals(object obj);
    private bool Equals(ProjectionBindingExpression projectionBindingExpression);
    public virtual int GetHashCode();
}
[DebuggerDisplayAttribute("{ToString(), nq}")]
public class Microsoft.EntityFrameworkCore.Query.ProjectionMember : object {
    private IList`1<MemberInfo> _memberChain;
    public MemberInfo Last { get; }
    private ProjectionMember(IList`1<MemberInfo> memberChain);
    public virtual ProjectionMember Append(MemberInfo member);
    public virtual ProjectionMember Prepend(MemberInfo member);
    public virtual MemberInfo get_Last();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    private bool Equals(ProjectionMember other);
    public virtual string ToString();
}
public static class Microsoft.EntityFrameworkCore.Query.QueryableMethods : object {
    [CompilerGeneratedAttribute]
private static MethodInfo <All>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AnyWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AnyWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AsQueryable>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Cast>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Concat>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Contains>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <CountWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <CountWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <DefaultIfEmptyWithoutArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <DefaultIfEmptyWithArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Distinct>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ElementAt>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ElementAtOrDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Except>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeySelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyElementSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyElementResultSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyResultSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupJoin>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Intersect>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Join>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LongCountWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LongCountWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MaxWithoutSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MaxWithSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MinWithoutSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MinWithSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OfType>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OrderByDescending>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Reverse>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Select>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectManyWithoutCollectionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectManyWithCollectionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SkipWhile>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Take>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <TakeWhile>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ThenBy>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ThenByDescending>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Union>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <AverageWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <AverageWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <SumWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <SumWithSelectorMethods>k__BackingField;
    public static MethodInfo All { get; }
    public static MethodInfo AnyWithoutPredicate { get; }
    public static MethodInfo AnyWithPredicate { get; }
    public static MethodInfo AsQueryable { get; }
    public static MethodInfo Cast { get; }
    public static MethodInfo Concat { get; }
    public static MethodInfo Contains { get; }
    public static MethodInfo CountWithoutPredicate { get; }
    public static MethodInfo CountWithPredicate { get; }
    public static MethodInfo DefaultIfEmptyWithoutArgument { get; }
    public static MethodInfo DefaultIfEmptyWithArgument { get; }
    public static MethodInfo Distinct { get; }
    public static MethodInfo ElementAt { get; }
    public static MethodInfo ElementAtOrDefault { get; }
    public static MethodInfo Except { get; }
    public static MethodInfo FirstWithoutPredicate { get; }
    public static MethodInfo FirstWithPredicate { get; }
    public static MethodInfo FirstOrDefaultWithoutPredicate { get; }
    public static MethodInfo FirstOrDefaultWithPredicate { get; }
    public static MethodInfo GroupByWithKeySelector { get; }
    public static MethodInfo GroupByWithKeyElementSelector { get; }
    public static MethodInfo GroupByWithKeyElementResultSelector { get; }
    public static MethodInfo GroupByWithKeyResultSelector { get; }
    public static MethodInfo GroupJoin { get; }
    public static MethodInfo Intersect { get; }
    public static MethodInfo Join { get; }
    public static MethodInfo LastWithoutPredicate { get; }
    public static MethodInfo LastWithPredicate { get; }
    public static MethodInfo LastOrDefaultWithoutPredicate { get; }
    public static MethodInfo LastOrDefaultWithPredicate { get; }
    public static MethodInfo LongCountWithoutPredicate { get; }
    public static MethodInfo LongCountWithPredicate { get; }
    public static MethodInfo MaxWithoutSelector { get; }
    public static MethodInfo MaxWithSelector { get; }
    public static MethodInfo MinWithoutSelector { get; }
    public static MethodInfo MinWithSelector { get; }
    public static MethodInfo OfType { get; }
    public static MethodInfo OrderBy { get; }
    public static MethodInfo OrderByDescending { get; }
    public static MethodInfo Reverse { get; }
    public static MethodInfo Select { get; }
    public static MethodInfo SelectManyWithoutCollectionSelector { get; }
    public static MethodInfo SelectManyWithCollectionSelector { get; }
    public static MethodInfo SingleWithoutPredicate { get; }
    public static MethodInfo SingleWithPredicate { get; }
    public static MethodInfo SingleOrDefaultWithoutPredicate { get; }
    public static MethodInfo SingleOrDefaultWithPredicate { get; }
    public static MethodInfo Skip { get; }
    public static MethodInfo SkipWhile { get; }
    public static MethodInfo Take { get; }
    public static MethodInfo TakeWhile { get; }
    public static MethodInfo ThenBy { get; }
    public static MethodInfo ThenByDescending { get; }
    public static MethodInfo Union { get; }
    public static MethodInfo Where { get; }
    private static Dictionary`2<Type, MethodInfo> AverageWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> AverageWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> SumWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> SumWithSelectorMethods { get; }
    private static QueryableMethods();
    [CompilerGeneratedAttribute]
public static MethodInfo get_All();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AnyWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AnyWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AsQueryable();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Cast();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Concat();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Contains();
    [CompilerGeneratedAttribute]
public static MethodInfo get_CountWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_CountWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_DefaultIfEmptyWithoutArgument();
    [CompilerGeneratedAttribute]
public static MethodInfo get_DefaultIfEmptyWithArgument();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Distinct();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ElementAt();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ElementAtOrDefault();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Except();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeySelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyElementSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyElementResultSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyResultSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupJoin();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Intersect();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Join();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LongCountWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LongCountWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MaxWithoutSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MaxWithSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MinWithoutSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MinWithSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OfType();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OrderBy();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OrderByDescending();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Reverse();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Select();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectManyWithoutCollectionSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectManyWithCollectionSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Skip();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SkipWhile();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Take();
    [CompilerGeneratedAttribute]
public static MethodInfo get_TakeWhile();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ThenBy();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ThenByDescending();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Union();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Where();
    public static bool IsAverageWithoutSelector(MethodInfo methodInfo);
    public static bool IsAverageWithSelector(MethodInfo methodInfo);
    public static bool IsSumWithoutSelector(MethodInfo methodInfo);
    public static bool IsSumWithSelector(MethodInfo methodInfo);
    public static MethodInfo GetAverageWithoutSelector(Type type);
    public static MethodInfo GetAverageWithSelector(Type type);
    public static MethodInfo GetSumWithoutSelector(Type type);
    public static MethodInfo GetSumWithSelector(Type type);
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_AverageWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_AverageWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_SumWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_SumWithSelectorMethods();
    [CompilerGeneratedAttribute]
internal static MethodInfo <.cctor>g__GetMethod|185_58(string name, int genericParameterCount, Func`2<Type[], Type[]> parameterGenerator, <>c__DisplayClass185_0& );
}
public abstract class Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor : ExpressionVisitor {
    private bool _subquery;
    private EntityShaperNullableMarkingExpressionVisitor _entityShaperNullableMarkingExpressionVisitor;
    [CompilerGeneratedAttribute]
private QueryableMethodTranslatingExpressionVisitorDependencies <Dependencies>k__BackingField;
    protected QueryableMethodTranslatingExpressionVisitorDependencies Dependencies { get; }
    protected QueryableMethodTranslatingExpressionVisitor(QueryableMethodTranslatingExpressionVisitorDependencies dependencies, bool subquery);
    [CompilerGeneratedAttribute]
protected virtual QueryableMethodTranslatingExpressionVisitorDependencies get_Dependencies();
    protected virtual Expression VisitConstant(ConstantExpression constantExpression);
    protected virtual Expression VisitExtension(Expression expression);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    protected virtual Expression MarkShaperNullable(Expression shaperExpression);
    protected virtual ShapedQueryExpression TranslateResultSelectorForJoin(ShapedQueryExpression outer, LambdaExpression resultSelector, Expression innerShaper, Type transparentIdentifierType);
    private Expression CombineShapers(Expression queryExpression, Expression outerShaper, Expression innerShaper, Type transparentIdentifierType);
    private static Expression AccessOuterTransparentField(Type transparentIdentifierType, Expression targetExpression);
    private static Expression AccessInnerTransparentField(Type transparentIdentifierType, Expression targetExpression);
    public virtual ShapedQueryExpression TranslateSubquery(Expression expression);
    protected abstract virtual QueryableMethodTranslatingExpressionVisitor CreateSubqueryVisitor();
    protected abstract virtual ShapedQueryExpression CreateShapedQueryExpression(Type elementType);
    protected abstract virtual ShapedQueryExpression TranslateAll(ShapedQueryExpression source, LambdaExpression predicate);
    protected abstract virtual ShapedQueryExpression TranslateAny(ShapedQueryExpression source, LambdaExpression predicate);
    protected abstract virtual ShapedQueryExpression TranslateAverage(ShapedQueryExpression source, LambdaExpression selector, Type resultType);
    protected abstract virtual ShapedQueryExpression TranslateCast(ShapedQueryExpression source, Type resultType);
    protected abstract virtual ShapedQueryExpression TranslateConcat(ShapedQueryExpression source1, ShapedQueryExpression source2);
    protected abstract virtual ShapedQueryExpression TranslateContains(ShapedQueryExpression source, Expression item);
    protected abstract virtual ShapedQueryExpression TranslateCount(ShapedQueryExpression source, LambdaExpression predicate);
    protected abstract virtual ShapedQueryExpression TranslateDefaultIfEmpty(ShapedQueryExpression source, Expression defaultValue);
    protected abstract virtual ShapedQueryExpression TranslateDistinct(ShapedQueryExpression source);
    protected abstract virtual ShapedQueryExpression TranslateElementAtOrDefault(ShapedQueryExpression source, Expression index, bool returnDefault);
    protected abstract virtual ShapedQueryExpression TranslateExcept(ShapedQueryExpression source1, ShapedQueryExpression source2);
    protected abstract virtual ShapedQueryExpression TranslateFirstOrDefault(ShapedQueryExpression source, LambdaExpression predicate, Type returnType, bool returnDefault);
    protected abstract virtual ShapedQueryExpression TranslateGroupBy(ShapedQueryExpression source, LambdaExpression keySelector, LambdaExpression elementSelector, LambdaExpression resultSelector);
    protected abstract virtual ShapedQueryExpression TranslateGroupJoin(ShapedQueryExpression outer, ShapedQueryExpression inner, LambdaExpression outerKeySelector, LambdaExpression innerKeySelector, LambdaExpression resultSelector);
    protected abstract virtual ShapedQueryExpression TranslateIntersect(ShapedQueryExpression source1, ShapedQueryExpression source2);
    protected abstract virtual ShapedQueryExpression TranslateJoin(ShapedQueryExpression outer, ShapedQueryExpression inner, LambdaExpression outerKeySelector, LambdaExpression innerKeySelector, LambdaExpression resultSelector);
    protected abstract virtual ShapedQueryExpression TranslateLeftJoin(ShapedQueryExpression outer, ShapedQueryExpression inner, LambdaExpression outerKeySelector, LambdaExpression innerKeySelector, LambdaExpression resultSelector);
    protected abstract virtual ShapedQueryExpression TranslateLastOrDefault(ShapedQueryExpression source, LambdaExpression predicate, Type returnType, bool returnDefault);
    protected abstract virtual ShapedQueryExpression TranslateLongCount(ShapedQueryExpression source, LambdaExpression predicate);
    protected abstract virtual ShapedQueryExpression TranslateMax(ShapedQueryExpression source, LambdaExpression selector, Type resultType);
    protected abstract virtual ShapedQueryExpression TranslateMin(ShapedQueryExpression source, LambdaExpression selector, Type resultType);
    protected abstract virtual ShapedQueryExpression TranslateOfType(ShapedQueryExpression source, Type resultType);
    protected abstract virtual ShapedQueryExpression TranslateOrderBy(ShapedQueryExpression source, LambdaExpression keySelector, bool ascending);
    protected abstract virtual ShapedQueryExpression TranslateReverse(ShapedQueryExpression source);
    protected abstract virtual ShapedQueryExpression TranslateSelect(ShapedQueryExpression source, LambdaExpression selector);
    protected abstract virtual ShapedQueryExpression TranslateSelectMany(ShapedQueryExpression source, LambdaExpression collectionSelector, LambdaExpression resultSelector);
    protected abstract virtual ShapedQueryExpression TranslateSelectMany(ShapedQueryExpression source, LambdaExpression selector);
    protected abstract virtual ShapedQueryExpression TranslateSingleOrDefault(ShapedQueryExpression source, LambdaExpression predicate, Type returnType, bool returnDefault);
    protected abstract virtual ShapedQueryExpression TranslateSkip(ShapedQueryExpression source, Expression count);
    protected abstract virtual ShapedQueryExpression TranslateSkipWhile(ShapedQueryExpression source, LambdaExpression predicate);
    protected abstract virtual ShapedQueryExpression TranslateSum(ShapedQueryExpression source, LambdaExpression selector, Type resultType);
    protected abstract virtual ShapedQueryExpression TranslateTake(ShapedQueryExpression source, Expression count);
    protected abstract virtual ShapedQueryExpression TranslateTakeWhile(ShapedQueryExpression source, LambdaExpression predicate);
    protected abstract virtual ShapedQueryExpression TranslateThenBy(ShapedQueryExpression source, LambdaExpression keySelector, bool ascending);
    protected abstract virtual ShapedQueryExpression TranslateUnion(ShapedQueryExpression source1, ShapedQueryExpression source2);
    protected abstract virtual ShapedQueryExpression TranslateWhere(ShapedQueryExpression source, LambdaExpression predicate);
    [CompilerGeneratedAttribute]
internal static ShapedQueryExpression <VisitMethodCall>g__CheckTranslated|8_0(ShapedQueryExpression translated, <>c__DisplayClass8_0& );
    [CompilerGeneratedAttribute]
internal static LambdaExpression <VisitMethodCall>g__GetLambdaExpressionFromArgument|8_1(int argumentIndex, <>c__DisplayClass8_0& );
}
public class Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies : object {
}
public class Microsoft.EntityFrameworkCore.Query.QueryCompilationContext : object {
    public static ParameterExpression QueryContextParameter;
    private IQueryTranslationPreprocessorFactory _queryTranslationPreprocessorFactory;
    private IQueryableMethodTranslatingExpressionVisitorFactory _queryableMethodTranslatingExpressionVisitorFactory;
    private IQueryTranslationPostprocessorFactory _queryTranslationPostprocessorFactory;
    private IShapedQueryCompilingExpressionVisitorFactory _shapedQueryCompilingExpressionVisitorFactory;
    private Dictionary`2<string, LambdaExpression> _runtimeParameters;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private IModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbContextOptions <ContextOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTracking>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBuffering>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreQueryFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Query> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ContextType>k__BackingField;
    private static MethodInfo _queryContextAddParameterMethodInfo;
    public bool IsAsync { get; }
    public IModel Model { get; }
    public IDbContextOptions ContextOptions { get; }
    public bool IsTracking { get; internal set; }
    public bool IsBuffering { get; }
    public bool IgnoreQueryFilters { get; internal set; }
    public ISet`1<string> Tags { get; }
    public IDiagnosticsLogger`1<Query> Logger { get; }
    public Type ContextType { get; }
    public QueryCompilationContext(QueryCompilationContextDependencies dependencies, bool async);
    private static QueryCompilationContext();
    [CompilerGeneratedAttribute]
public virtual bool get_IsAsync();
    [CompilerGeneratedAttribute]
public virtual IModel get_Model();
    [CompilerGeneratedAttribute]
public virtual IDbContextOptions get_ContextOptions();
    [CompilerGeneratedAttribute]
public virtual bool get_IsTracking();
    [CompilerGeneratedAttribute]
internal virtual void set_IsTracking(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsBuffering();
    [CompilerGeneratedAttribute]
public virtual bool get_IgnoreQueryFilters();
    [CompilerGeneratedAttribute]
internal virtual void set_IgnoreQueryFilters(bool value);
    [CompilerGeneratedAttribute]
public virtual ISet`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public virtual IDiagnosticsLogger`1<Query> get_Logger();
    [CompilerGeneratedAttribute]
public virtual Type get_ContextType();
    public virtual void AddTag(string tag);
    public virtual Func`2<QueryContext, TResult> CreateQueryExecutor(Expression query);
    public virtual ParameterExpression RegisterRuntimeParameter(string name, LambdaExpression valueExtractor);
    private Expression InsertRuntimeParameters(Expression query);
}
public class Microsoft.EntityFrameworkCore.Query.QueryCompilationContextDependencies : object {
    private IExecutionStrategyFactory _executionStrategyFactory;
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private IQueryTranslationPreprocessorFactory <QueryTranslationPreprocessorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IQueryableMethodTranslatingExpressionVisitorFactory <QueryableMethodTranslatingExpressionVisitorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IQueryTranslationPostprocessorFactory <QueryTranslationPostprocessorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IShapedQueryCompilingExpressionVisitorFactory <ShapedQueryCompilingExpressionVisitorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRetryingExecutionStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbContextOptions <ContextOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Query> <Logger>k__BackingField;
    public ICurrentDbContext CurrentContext { get; }
    public IModel Model { get; }
    public IQueryTranslationPreprocessorFactory QueryTranslationPreprocessorFactory { get; }
    public IQueryableMethodTranslatingExpressionVisitorFactory QueryableMethodTranslatingExpressionVisitorFactory { get; }
    public IQueryTranslationPostprocessorFactory QueryTranslationPostprocessorFactory { get; }
    public IShapedQueryCompilingExpressionVisitorFactory ShapedQueryCompilingExpressionVisitorFactory { get; }
    public bool IsRetryingExecutionStrategy { get; }
    public IDbContextOptions ContextOptions { get; }
    public IDiagnosticsLogger`1<Query> Logger { get; }
    [EntityFrameworkInternalAttribute]
public QueryCompilationContextDependencies(IModel model, IQueryTranslationPreprocessorFactory queryTranslationPreprocessorFactory, IQueryableMethodTranslatingExpressionVisitorFactory queryableMethodTranslatingExpressionVisitorFactory, IQueryTranslationPostprocessorFactory queryTranslationPostprocessorFactory, IShapedQueryCompilingExpressionVisitorFactory shapedQueryCompilingExpressionVisitorFactory, IExecutionStrategyFactory executionStrategyFactory, ICurrentDbContext currentContext, IDbContextOptions contextOptions, IDiagnosticsLogger`1<Query> logger);
    [CompilerGeneratedAttribute]
public ICurrentDbContext get_CurrentContext();
    [CompilerGeneratedAttribute]
public IModel get_Model();
    [CompilerGeneratedAttribute]
public IQueryTranslationPreprocessorFactory get_QueryTranslationPreprocessorFactory();
    [CompilerGeneratedAttribute]
public IQueryableMethodTranslatingExpressionVisitorFactory get_QueryableMethodTranslatingExpressionVisitorFactory();
    [CompilerGeneratedAttribute]
public IQueryTranslationPostprocessorFactory get_QueryTranslationPostprocessorFactory();
    [CompilerGeneratedAttribute]
public IShapedQueryCompilingExpressionVisitorFactory get_ShapedQueryCompilingExpressionVisitorFactory();
    [CompilerGeneratedAttribute]
public bool get_IsRetryingExecutionStrategy();
    [CompilerGeneratedAttribute]
public IDbContextOptions get_ContextOptions();
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Query> get_Logger();
    public QueryCompilationContextDependencies With(IModel model);
    public QueryCompilationContextDependencies With(IQueryTranslationPreprocessorFactory queryTranslationPreprocessorFactory);
    public QueryCompilationContextDependencies With(IQueryableMethodTranslatingExpressionVisitorFactory queryableMethodTranslatingExpressionVisitorFactory);
    public QueryCompilationContextDependencies With(IQueryTranslationPostprocessorFactory queryTranslationPostprocessorFactory);
    public QueryCompilationContextDependencies With(IShapedQueryCompilingExpressionVisitorFactory shapedQueryCompilingExpressionVisitorFactory);
    public QueryCompilationContextDependencies With(IExecutionStrategyFactory executionStrategyFactory);
    public QueryCompilationContextDependencies With(ICurrentDbContext currentContext);
    public QueryCompilationContextDependencies With(IDbContextOptions contextOptions);
    public QueryCompilationContextDependencies With(IDiagnosticsLogger`1<Query> logger);
}
public abstract class Microsoft.EntityFrameworkCore.Query.QueryContext : object {
    private IDictionary`2<string, object> _parameterValues;
    [CompilerGeneratedAttribute]
private QueryContextDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public DbContext Context { get; }
    protected QueryContextDependencies Dependencies { get; }
    [EntityFrameworkInternalAttribute]
public IStateManager StateManager { get; }
    public IQueryProvider QueryProvider { get; }
    public IExecutionStrategyFactory ExecutionStrategyFactory { get; }
    public IConcurrencyDetector ConcurrencyDetector { get; }
    public CancellationToken CancellationToken { get; public set; }
    public IDiagnosticsLogger`1<Command> CommandLogger { get; }
    public IDiagnosticsLogger`1<Query> QueryLogger { get; }
    public IReadOnlyDictionary`2<string, object> ParameterValues { get; }
    protected QueryContext(QueryContextDependencies dependencies);
    public virtual DbContext get_Context();
    [CompilerGeneratedAttribute]
protected virtual QueryContextDependencies get_Dependencies();
    public virtual IStateManager get_StateManager();
    public virtual void SetNavigationIsLoaded(object entity, INavigation navigation);
    public virtual IQueryProvider get_QueryProvider();
    public virtual IExecutionStrategyFactory get_ExecutionStrategyFactory();
    public virtual IConcurrencyDetector get_ConcurrencyDetector();
    [CompilerGeneratedAttribute]
public virtual CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public virtual void set_CancellationToken(CancellationToken value);
    public virtual IDiagnosticsLogger`1<Command> get_CommandLogger();
    public virtual IDiagnosticsLogger`1<Query> get_QueryLogger();
    public virtual IReadOnlyDictionary`2<string, object> get_ParameterValues();
    public virtual void AddParameter(string name, object value);
    [EntityFrameworkInternalAttribute]
public virtual InternalEntityEntry StartTracking(IEntityType entityType, object entity, ValueBuffer valueBuffer);
}
public class Microsoft.EntityFrameworkCore.Query.QueryContextDependencies : object {
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IExecutionStrategyFactory <ExecutionStrategyFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IConcurrencyDetector <ConcurrencyDetector>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Command> <CommandLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Query> <QueryLogger>k__BackingField;
    public ICurrentDbContext CurrentContext { get; }
    [EntityFrameworkInternalAttribute]
public IStateManager StateManager { get; }
    public IQueryProvider QueryProvider { get; }
    public IExecutionStrategyFactory ExecutionStrategyFactory { get; }
    public IConcurrencyDetector ConcurrencyDetector { get; }
    public IDiagnosticsLogger`1<Command> CommandLogger { get; }
    public IDiagnosticsLogger`1<Query> QueryLogger { get; }
    [EntityFrameworkInternalAttribute]
public QueryContextDependencies(ICurrentDbContext currentContext, IExecutionStrategyFactory executionStrategyFactory, IConcurrencyDetector concurrencyDetector, IDiagnosticsLogger`1<Command> commandLogger, IDiagnosticsLogger`1<Query> queryLogger);
    [CompilerGeneratedAttribute]
public ICurrentDbContext get_CurrentContext();
    public IStateManager get_StateManager();
    public IQueryProvider get_QueryProvider();
    [CompilerGeneratedAttribute]
public IExecutionStrategyFactory get_ExecutionStrategyFactory();
    [CompilerGeneratedAttribute]
public IConcurrencyDetector get_ConcurrencyDetector();
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Command> get_CommandLogger();
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Query> get_QueryLogger();
    public QueryContextDependencies With(ICurrentDbContext currentContext);
    public QueryContextDependencies With(IExecutionStrategyFactory executionStrategyFactor);
    public QueryContextDependencies With(IConcurrencyDetector concurrencyDetector);
    public QueryContextDependencies With(IDiagnosticsLogger`1<Command> commandLogger);
    public QueryContextDependencies With(IDiagnosticsLogger`1<Query> queryLogger);
}
public class Microsoft.EntityFrameworkCore.Query.QueryTranslationPostprocessor : object {
    [CompilerGeneratedAttribute]
private QueryTranslationPostprocessorDependencies <Dependencies>k__BackingField;
    protected QueryTranslationPostprocessorDependencies Dependencies { get; }
    public QueryTranslationPostprocessor(QueryTranslationPostprocessorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual QueryTranslationPostprocessorDependencies get_Dependencies();
    public virtual Expression Process(Expression query);
}
public class Microsoft.EntityFrameworkCore.Query.QueryTranslationPostprocessorDependencies : object {
}
public class Microsoft.EntityFrameworkCore.Query.QueryTranslationPreprocessor : object {
    private QueryCompilationContext _queryCompilationContext;
    [CompilerGeneratedAttribute]
private QueryTranslationPreprocessorDependencies <Dependencies>k__BackingField;
    protected QueryTranslationPreprocessorDependencies Dependencies { get; }
    public QueryTranslationPreprocessor(QueryTranslationPreprocessorDependencies dependencies, QueryCompilationContext queryCompilationContext);
    [CompilerGeneratedAttribute]
protected virtual QueryTranslationPreprocessorDependencies get_Dependencies();
    public virtual Expression Process(Expression query);
}
public class Microsoft.EntityFrameworkCore.Query.QueryTranslationPreprocessorDependencies : object {
    [CompilerGeneratedAttribute]
private IEvaluatableExpressionFilter <EvaluatableExpressionFilter>k__BackingField;
    public IEvaluatableExpressionFilter EvaluatableExpressionFilter { get; }
    [EntityFrameworkInternalAttribute]
public QueryTranslationPreprocessorDependencies(IEvaluatableExpressionFilter evaluatableExpressionFilter);
    [CompilerGeneratedAttribute]
public IEvaluatableExpressionFilter get_EvaluatableExpressionFilter();
    public QueryTranslationPreprocessorDependencies With(IEvaluatableExpressionFilter evaluatableExpressionFilter);
}
public class Microsoft.EntityFrameworkCore.Query.ReplacingExpressionVisitor : ExpressionVisitor {
    private bool _quirkMode19737;
    private bool _quirkMode19087;
    private Expression[] _originals;
    private Expression[] _replacements;
    private IDictionary`2<Expression, Expression> _quirkReplacements;
    public ReplacingExpressionVisitor(Expression[] originals, Expression[] replacements);
    public ReplacingExpressionVisitor(IDictionary`2<Expression, Expression> replacements);
    public static Expression Replace(Expression original, Expression replacement, Expression tree);
    public virtual Expression Visit(Expression expression);
    protected virtual Expression VisitMember(MemberExpression memberExpression);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
}
public enum Microsoft.EntityFrameworkCore.Query.ResultCardinality : Enum {
    public int value__;
    public static ResultCardinality Enumerable;
    public static ResultCardinality Single;
    public static ResultCardinality SingleOrDefault;
}
public abstract class Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor : ExpressionVisitor {
    private static PropertyInfo _cancellationTokenMemberInfo;
    private Expression _cancellationTokenParameter;
    private EntityMaterializerInjectingExpressionVisitor _entityMaterializerInjectingExpressionVisitor;
    private ConstantVerifyingExpressionVisitor _constantVerifyingExpressionVisitor;
    [CompilerGeneratedAttribute]
private ShapedQueryCompilingExpressionVisitorDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsTracking>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBuffering>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    private static MethodInfo _singleAsyncMethodInfo;
    private static MethodInfo _singleOrDefaultAsyncMethodInfo;
    protected ShapedQueryCompilingExpressionVisitorDependencies Dependencies { get; }
    protected bool IsTracking { get; }
    public bool IsBuffering { get; internal set; }
    protected bool IsAsync { get; }
    protected ShapedQueryCompilingExpressionVisitor(ShapedQueryCompilingExpressionVisitorDependencies dependencies, QueryCompilationContext queryCompilationContext);
    private static ShapedQueryCompilingExpressionVisitor();
    [CompilerGeneratedAttribute]
protected virtual ShapedQueryCompilingExpressionVisitorDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual bool get_IsTracking();
    [CompilerGeneratedAttribute]
public virtual bool get_IsBuffering();
    [CompilerGeneratedAttribute]
internal virtual void set_IsBuffering(bool value);
    [CompilerGeneratedAttribute]
protected virtual bool get_IsAsync();
    protected virtual Expression VisitExtension(Expression extensionExpression);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor/<SingleAsync>d__21`1")]
private static Task`1<TSource> SingleAsync(IAsyncEnumerable`1<TSource> asyncEnumerable, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor/<SingleOrDefaultAsync>d__22`1")]
private static Task`1<TSource> SingleOrDefaultAsync(IAsyncEnumerable`1<TSource> asyncEnumerable, CancellationToken cancellationToken);
    protected abstract virtual Expression VisitShapedQueryExpression(ShapedQueryExpression shapedQueryExpression);
    protected virtual Expression InjectEntityMaterializers(Expression expression);
}
public class Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitorDependencies : object {
    [CompilerGeneratedAttribute]
private IEntityMaterializerSource <EntityMaterializerSource>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeMappingSource <TypeMappingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IMemoryCache <MemoryCache>k__BackingField;
    public IEntityMaterializerSource EntityMaterializerSource { get; }
    public ITypeMappingSource TypeMappingSource { get; }
    public IMemoryCache MemoryCache { get; }
    [EntityFrameworkInternalAttribute]
public ShapedQueryCompilingExpressionVisitorDependencies(IEntityMaterializerSource entityMaterializerSource, ITypeMappingSource typeMappingSource, IMemoryCache memoryCache);
    [CompilerGeneratedAttribute]
public IEntityMaterializerSource get_EntityMaterializerSource();
    [CompilerGeneratedAttribute]
public ITypeMappingSource get_TypeMappingSource();
    [CompilerGeneratedAttribute]
public IMemoryCache get_MemoryCache();
    public ShapedQueryCompilingExpressionVisitorDependencies With(IEntityMaterializerSource entityMaterializerSource);
    public ShapedQueryCompilingExpressionVisitorDependencies With(ITypeMappingSource typeMappingSource);
    public ShapedQueryCompilingExpressionVisitorDependencies With(IMemoryCache memoryCache);
}
public class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <QueryExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private ResultCardinality <ResultCardinality>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <ShaperExpression>k__BackingField;
    public Expression QueryExpression { get; public set; }
    public ResultCardinality ResultCardinality { get; public set; }
    public Expression ShaperExpression { get; public set; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public ShapedQueryExpression(Expression queryExpression, Expression shaperExpression);
    [CompilerGeneratedAttribute]
public virtual Expression get_QueryExpression();
    [CompilerGeneratedAttribute]
public virtual void set_QueryExpression(Expression value);
    [CompilerGeneratedAttribute]
public virtual ResultCardinality get_ResultCardinality();
    [CompilerGeneratedAttribute]
public virtual void set_ResultCardinality(ResultCardinality value);
    [CompilerGeneratedAttribute]
public virtual Expression get_ShaperExpression();
    [CompilerGeneratedAttribute]
public virtual void set_ShaperExpression(Expression value);
    public virtual Type get_Type();
    public sealed virtual ExpressionType get_NodeType();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual void Print(ExpressionPrinter expressionPrinter);
}
public static class Microsoft.EntityFrameworkCore.Query.TransparentIdentifierFactory : object {
    public static Type Create(Type outerType, Type innerType);
}
public enum Microsoft.EntityFrameworkCore.QueryTrackingBehavior : Enum {
    public int value__;
    public static QueryTrackingBehavior TrackAll;
    public static QueryTrackingBehavior NoTracking;
}
public abstract class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping : object {
    private ValueComparer _comparer;
    private ValueComparer _keyComparer;
    private ValueComparer _structuralComparer;
    [CompilerGeneratedAttribute]
private CoreTypeMappingParameters <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<IProperty, IEntityType, ValueGenerator> <ValueGeneratorFactory>k__BackingField;
    protected CoreTypeMappingParameters Parameters { get; }
    public Type ClrType { get; }
    public ValueConverter Converter { get; }
    public Func`3<IProperty, IEntityType, ValueGenerator> ValueGeneratorFactory { get; }
    public ValueComparer Comparer { get; }
    public ValueComparer KeyComparer { get; }
    public ValueComparer StructuralComparer { get; }
    protected CoreTypeMapping(CoreTypeMappingParameters parameters);
    [CompilerGeneratedAttribute]
protected virtual CoreTypeMappingParameters get_Parameters();
    [CompilerGeneratedAttribute]
public virtual Type get_ClrType();
    public virtual ValueConverter get_Converter();
    [CompilerGeneratedAttribute]
public virtual Func`3<IProperty, IEntityType, ValueGenerator> get_ValueGeneratorFactory();
    public virtual ValueComparer get_Comparer();
    public virtual ValueComparer get_KeyComparer();
    public virtual ValueComparer get_StructuralComparer();
    private static ValueComparer CreateComparer(Type clrType, bool favorStructuralComparisons);
    public abstract virtual CoreTypeMapping Clone(ValueConverter converter);
    public virtual Expression GenerateCodeLiteral(object value);
}
public abstract class Microsoft.EntityFrameworkCore.Storage.Database : object {
    [CompilerGeneratedAttribute]
private DatabaseDependencies <Dependencies>k__BackingField;
    protected DatabaseDependencies Dependencies { get; }
    protected Database(DatabaseDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual DatabaseDependencies get_Dependencies();
    public abstract virtual int SaveChanges(IList`1<IUpdateEntry> entries);
    public abstract virtual Task`1<int> SaveChangesAsync(IList`1<IUpdateEntry> entries, CancellationToken cancellationToken);
    public virtual Func`2<QueryContext, TResult> CompileQuery(Expression query, bool async);
}
public class Microsoft.EntityFrameworkCore.Storage.DatabaseDependencies : object {
    [CompilerGeneratedAttribute]
private IQueryCompilationContextFactory <QueryCompilationContextFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IUpdateAdapterFactory <UpdateAdapterFactory>k__BackingField;
    public IQueryCompilationContextFactory QueryCompilationContextFactory { get; }
    public IUpdateAdapterFactory UpdateAdapterFactory { get; }
    [EntityFrameworkInternalAttribute]
public DatabaseDependencies(IQueryCompilationContextFactory queryCompilationContextFactory, IUpdateAdapterFactory updateAdapterFactory);
    [CompilerGeneratedAttribute]
public IQueryCompilationContextFactory get_QueryCompilationContextFactory();
    [CompilerGeneratedAttribute]
public IUpdateAdapterFactory get_UpdateAdapterFactory();
    public DatabaseDependencies With(IQueryCompilationContextFactory queryCompilationContextFactory);
    public DatabaseDependencies With(IUpdateAdapterFactory updateAdapterFactory);
}
public class Microsoft.EntityFrameworkCore.Storage.DatabaseProvider`1 : object {
    public string Name { get; }
    public DatabaseProvider`1(DatabaseProviderDependencies dependencies);
    public virtual string get_Name();
    public virtual bool IsConfigured(IDbContextOptions options);
}
public class Microsoft.EntityFrameworkCore.Storage.DatabaseProviderDependencies : object {
}
public class Microsoft.EntityFrameworkCore.Storage.ExecutionResult`1 : object {
    [CompilerGeneratedAttribute]
private bool <IsSuccessful>k__BackingField;
    [CompilerGeneratedAttribute]
private TResult <Result>k__BackingField;
    public bool IsSuccessful { get; }
    public TResult Result { get; }
    public ExecutionResult`1(bool successful, TResult result);
    [CompilerGeneratedAttribute]
public virtual bool get_IsSuccessful();
    [CompilerGeneratedAttribute]
public virtual TResult get_Result();
}
public abstract class Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy : object {
    protected static int DefaultMaxRetryCount;
    protected static TimeSpan DefaultMaxDelay;
    private static double DefaultRandomFactor;
    private static double DefaultExponentialBase;
    private static TimeSpan _defaultCoefficient;
    [CompilerGeneratedAttribute]
private List`1<Exception> <ExceptionsEncountered>k__BackingField;
    [CompilerGeneratedAttribute]
private Random <Random>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxRetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxRetryDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private ExecutionStrategyDependencies <Dependencies>k__BackingField;
    private static AsyncLocal`1<Nullable`1<bool>> _suspended;
    protected List`1<Exception> ExceptionsEncountered { get; }
    protected Random Random { get; }
    protected int MaxRetryCount { get; }
    protected TimeSpan MaxRetryDelay { get; }
    protected ExecutionStrategyDependencies Dependencies { get; }
    protected static bool Suspended { get; protected set; }
    public bool RetriesOnFailure { get; }
    protected ExecutionStrategy(DbContext context, int maxRetryCount, TimeSpan maxRetryDelay);
    protected ExecutionStrategy(ExecutionStrategyDependencies dependencies, int maxRetryCount, TimeSpan maxRetryDelay);
    private static ExecutionStrategy();
    [CompilerGeneratedAttribute]
protected virtual List`1<Exception> get_ExceptionsEncountered();
    [CompilerGeneratedAttribute]
protected virtual Random get_Random();
    [CompilerGeneratedAttribute]
protected virtual int get_MaxRetryCount();
    [CompilerGeneratedAttribute]
protected virtual TimeSpan get_MaxRetryDelay();
    [CompilerGeneratedAttribute]
protected virtual ExecutionStrategyDependencies get_Dependencies();
    protected static bool get_Suspended();
    protected static void set_Suspended(bool value);
    public virtual bool get_RetriesOnFailure();
    public virtual TResult Execute(TState state, Func`3<DbContext, TState, TResult> operation, Func`3<DbContext, TState, ExecutionResult`1<TResult>> verifySucceeded);
    private TResult ExecuteImplementation(Func`3<DbContext, TState, TResult> operation, Func`3<DbContext, TState, ExecutionResult`1<TResult>> verifySucceeded, TState state);
    public virtual Task`1<TResult> ExecuteAsync(TState state, Func`4<DbContext, TState, CancellationToken, Task`1<TResult>> operation, Func`4<DbContext, TState, CancellationToken, Task`1<ExecutionResult`1<TResult>>> verifySucceeded, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy/<ExecuteImplementationAsync>d__31`2")]
private Task`1<TResult> ExecuteImplementationAsync(Func`4<DbContext, TState, CancellationToken, Task`1<TResult>> operation, Func`4<DbContext, TState, CancellationToken, Task`1<ExecutionResult`1<TResult>>> verifySucceeded, TState state, CancellationToken cancellationToken);
    protected virtual void OnFirstExecution();
    protected virtual void OnRetry();
    protected virtual Nullable`1<TimeSpan> GetNextDelay(Exception lastException);
    protected internal virtual bool ShouldVerifySuccessOn(Exception exception);
    protected internal abstract virtual bool ShouldRetryOn(Exception exception);
    public static TResult CallOnWrappedException(Exception exception, Func`2<Exception, TResult> exceptionHandler);
}
public class Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies : object {
    [CompilerGeneratedAttribute]
private IDbContextOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Infrastructure> <Logger>k__BackingField;
    public IDbContextOptions Options { get; }
    public ICurrentDbContext CurrentContext { get; }
    public IDiagnosticsLogger`1<Infrastructure> Logger { get; }
    [EntityFrameworkInternalAttribute]
public ExecutionStrategyDependencies(ICurrentDbContext currentContext, IDbContextOptions options, IDiagnosticsLogger`1<Infrastructure> logger);
    [CompilerGeneratedAttribute]
public IDbContextOptions get_Options();
    [CompilerGeneratedAttribute]
public ICurrentDbContext get_CurrentContext();
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Infrastructure> get_Logger();
    public ExecutionStrategyDependencies With(ICurrentDbContext currentContext);
    public ExecutionStrategyDependencies With(IDbContextOptions options);
    public ExecutionStrategyDependencies With(IDiagnosticsLogger`1<Infrastructure> logger);
}
public interface Microsoft.EntityFrameworkCore.Storage.IDatabase {
    public abstract virtual int SaveChanges(IList`1<IUpdateEntry> entries);
    public abstract virtual Task`1<int> SaveChangesAsync(IList`1<IUpdateEntry> entries, CancellationToken cancellationToken);
    public abstract virtual Func`2<QueryContext, TResult> CompileQuery(Expression query, bool async);
}
public interface Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator {
    public abstract virtual bool EnsureDeleted();
    public abstract virtual Task`1<bool> EnsureDeletedAsync(CancellationToken cancellationToken);
    public abstract virtual bool EnsureCreated();
    public abstract virtual Task`1<bool> EnsureCreatedAsync(CancellationToken cancellationToken);
    public abstract virtual bool CanConnect();
    public abstract virtual Task`1<bool> CanConnectAsync(CancellationToken cancellationToken);
}
public interface Microsoft.EntityFrameworkCore.Storage.IDatabaseProvider {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual bool IsConfigured(IDbContextOptions options);
}
public interface Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction {
    public Guid TransactionId { get; }
    public abstract virtual Guid get_TransactionId();
    public abstract virtual void Commit();
    public abstract virtual void Rollback();
    public abstract virtual Task CommitAsync(CancellationToken cancellationToken);
    public abstract virtual Task RollbackAsync(CancellationToken cancellationToken);
}
public interface Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager {
    public IDbContextTransaction CurrentTransaction { get; }
    public abstract virtual IDbContextTransaction BeginTransaction();
    public abstract virtual Task`1<IDbContextTransaction> BeginTransactionAsync(CancellationToken cancellationToken);
    public abstract virtual void CommitTransaction();
    public abstract virtual void RollbackTransaction();
    public abstract virtual IDbContextTransaction get_CurrentTransaction();
}
public interface Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy {
    public bool RetriesOnFailure { get; }
    public abstract virtual bool get_RetriesOnFailure();
    public abstract virtual TResult Execute(TState state, Func`3<DbContext, TState, TResult> operation, Func`3<DbContext, TState, ExecutionResult`1<TResult>> verifySucceeded);
    public abstract virtual Task`1<TResult> ExecuteAsync(TState state, Func`4<DbContext, TState, CancellationToken, Task`1<TResult>> operation, Func`4<DbContext, TState, CancellationToken, Task`1<ExecutionResult`1<TResult>>> verifySucceeded, CancellationToken cancellationToken);
}
public interface Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory {
    public abstract virtual IExecutionStrategy Create();
}
public class Microsoft.EntityFrameworkCore.Storage.Internal.ExecutionStrategyFactory : object {
    [CompilerGeneratedAttribute]
private ExecutionStrategyDependencies <Dependencies>k__BackingField;
    protected ExecutionStrategyDependencies Dependencies { get; }
    public ExecutionStrategyFactory(ExecutionStrategyDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ExecutionStrategyDependencies get_Dependencies();
    public virtual IExecutionStrategy Create();
}
public class Microsoft.EntityFrameworkCore.Storage.Internal.NoopExecutionStrategy : object {
    [CompilerGeneratedAttribute]
private ExecutionStrategyDependencies <Dependencies>k__BackingField;
    private ExecutionStrategyDependencies Dependencies { get; }
    public bool RetriesOnFailure { get; }
    public NoopExecutionStrategy(ExecutionStrategyDependencies dependencies);
    [CompilerGeneratedAttribute]
private ExecutionStrategyDependencies get_Dependencies();
    public virtual bool get_RetriesOnFailure();
    public virtual TResult Execute(TState state, Func`3<DbContext, TState, TResult> operation, Func`3<DbContext, TState, ExecutionResult`1<TResult>> verifySucceeded);
    public virtual Task`1<TResult> ExecuteAsync(TState state, Func`4<DbContext, TState, CancellationToken, Task`1<TResult>> operation, Func`4<DbContext, TState, CancellationToken, Task`1<ExecutionResult`1<TResult>>> verifySucceeded, CancellationToken cancellationToken);
}
public interface Microsoft.EntityFrameworkCore.Storage.ITransactionEnlistmentManager {
    public Transaction EnlistedTransaction { get; }
    public abstract virtual Transaction get_EnlistedTransaction();
    public abstract virtual void EnlistTransaction(Transaction transaction);
}
public interface Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource {
    public abstract virtual CoreTypeMapping FindMapping(IProperty property);
    public abstract virtual CoreTypeMapping FindMapping(MemberInfo member);
    public abstract virtual CoreTypeMapping FindMapping(Type type);
}
public interface Microsoft.EntityFrameworkCore.Storage.ITypeMappingSourcePlugin {
    public abstract virtual CoreTypeMapping FindMapping(TypeMappingInfo& modreq(System.Runtime.InteropServices.InAttribute) mappingInfo);
}
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Storage.MaterializationContext : ValueType {
    public static MethodInfo GetValueBufferMethod;
    internal static PropertyInfo ContextProperty;
    [CompilerGeneratedAttribute]
private ValueBuffer <ValueBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private DbContext <Context>k__BackingField;
    public ValueBuffer ValueBuffer { get; }
    public DbContext Context { get; }
    public MaterializationContext(ValueBuffer& valueBuffer, DbContext context);
    private static MaterializationContext();
    [CompilerGeneratedAttribute]
public ValueBuffer get_ValueBuffer();
    [CompilerGeneratedAttribute]
public DbContext get_Context();
}
public class Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException : Exception {
    public RetryLimitExceededException(string message);
    public RetryLimitExceededException(string message, Exception innerException);
    public RetryLimitExceededException(SerializationInfo info, StreamingContext context);
}
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsKeyOrIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsUnicode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsRowVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    public bool IsKeyOrIndex { get; }
    public Nullable`1<int> Size { get; }
    public Nullable`1<bool> IsUnicode { get; }
    public Nullable`1<bool> IsRowVersion { get; }
    public Nullable`1<int> Precision { get; }
    public Nullable`1<int> Scale { get; }
    public Type ClrType { get; }
    public TypeMappingInfo(IProperty property);
    public TypeMappingInfo(IReadOnlyList`1<IProperty> principals, Nullable`1<bool> fallbackUnicode, Nullable`1<int> fallbackSize, Nullable`1<int> fallbackPrecision, Nullable`1<int> fallbackScale);
    public TypeMappingInfo(MemberInfo member, Nullable`1<bool> unicode, Nullable`1<int> size, Nullable`1<int> precision, Nullable`1<int> scale);
    public TypeMappingInfo(Type type, bool keyOrIndex, Nullable`1<bool> unicode, Nullable`1<int> size, Nullable`1<bool> rowVersion, Nullable`1<int> precision, Nullable`1<int> scale);
    public TypeMappingInfo(TypeMappingInfo source, ValueConverterInfo converter, Nullable`1<bool> unicode, Nullable`1<int> size, Nullable`1<int> precision, Nullable`1<int> scale);
    public TypeMappingInfo WithConverter(ValueConverterInfo& converterInfo);
    [CompilerGeneratedAttribute]
public bool get_IsKeyOrIndex();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Size();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsUnicode();
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsRowVersion();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Precision();
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Scale();
    [CompilerGeneratedAttribute]
public Type get_ClrType();
    public sealed virtual bool Equals(TypeMappingInfo other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class Microsoft.EntityFrameworkCore.Storage.TypeMappingSource : TypeMappingSourceBase {
    private ConcurrentDictionary`2<ValueTuple`3<TypeMappingInfo, Type, ValueConverter>, CoreTypeMapping> _explicitMappings;
    protected TypeMappingSource(TypeMappingSourceDependencies dependencies);
    private CoreTypeMapping FindMappingWithConversion(TypeMappingInfo& mappingInfo, IReadOnlyList`1<IProperty> principals);
    public virtual CoreTypeMapping FindMapping(IProperty property);
    public virtual CoreTypeMapping FindMapping(Type type);
    public virtual CoreTypeMapping FindMapping(MemberInfo member);
    [CompilerGeneratedAttribute]
private CoreTypeMapping <FindMappingWithConversion>b__2_0(ValueTuple`3<TypeMappingInfo, Type, ValueConverter> k);
}
public abstract class Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase : object {
    [CompilerGeneratedAttribute]
private TypeMappingSourceDependencies <Dependencies>k__BackingField;
    protected TypeMappingSourceDependencies Dependencies { get; }
    protected TypeMappingSourceBase(TypeMappingSourceDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual TypeMappingSourceDependencies get_Dependencies();
    protected virtual CoreTypeMapping FindMapping(TypeMappingInfo& modreq(System.Runtime.InteropServices.InAttribute) mappingInfo);
    protected virtual void ValidateMapping(CoreTypeMapping mapping, IProperty property);
    public abstract virtual CoreTypeMapping FindMapping(IProperty property);
    public abstract virtual CoreTypeMapping FindMapping(Type type);
    public abstract virtual CoreTypeMapping FindMapping(MemberInfo member);
}
public class Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies : object {
    [CompilerGeneratedAttribute]
private IValueConverterSelector <ValueConverterSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ITypeMappingSourcePlugin> <Plugins>k__BackingField;
    public IValueConverterSelector ValueConverterSelector { get; }
    public IEnumerable`1<ITypeMappingSourcePlugin> Plugins { get; }
    [EntityFrameworkInternalAttribute]
public TypeMappingSourceDependencies(IValueConverterSelector valueConverterSelector, IEnumerable`1<ITypeMappingSourcePlugin> plugins);
    [CompilerGeneratedAttribute]
public IValueConverterSelector get_ValueConverterSelector();
    [CompilerGeneratedAttribute]
public IEnumerable`1<ITypeMappingSourcePlugin> get_Plugins();
    public TypeMappingSourceDependencies With(IValueConverterSelector valueConverterSelector);
    public TypeMappingSourceDependencies With(IEnumerable`1<ITypeMappingSourcePlugin> plugins);
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.Storage.ValueBuffer : ValueType {
    public static ValueBuffer Empty;
    private Object[] _values;
    internal static MethodInfo GetValueMethod;
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsEmpty { get; }
    public ValueBuffer(Object[] values);
    private static ValueBuffer();
    public object get_Item(int index);
    public void set_Item(int index, object value);
    public int get_Count();
    public bool get_IsEmpty();
    public virtual bool Equals(object obj);
    private bool Equals(ValueBuffer other);
    public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.BoolToStringConverter : BoolToTwoValuesConverter`1<string> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public BoolToStringConverter(string falseValue, string trueValue, ConverterMappingHints mappingHints);
    private static BoolToStringConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
    private static Expression`1<Func`2<string, bool>> FromProvider(string trueValue);
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.BoolToTwoValuesConverter`1 : ValueConverter`2<bool, TProvider> {
    public BoolToTwoValuesConverter`1(TProvider falseValue, TProvider trueValue, Expression`1<Func`2<TProvider, bool>> fromProvider, ConverterMappingHints mappingHints);
    private static Expression`1<Func`2<bool, TProvider>> ToProvider(TProvider falseValue, TProvider trueValue);
    private static Expression`1<Func`2<TProvider, bool>> ToBool(TProvider trueValue);
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.BoolToZeroOneConverter`1 : BoolToTwoValuesConverter`1<TProvider> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public BoolToZeroOneConverter`1(ConverterMappingHints mappingHints);
    private static BoolToZeroOneConverter`1();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
    private static TProvider Zero();
    private static TProvider One();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.BytesToStringConverter : ValueConverter`2<Byte[], string> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public BytesToStringConverter(ConverterMappingHints mappingHints);
    private static BytesToStringConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.CastingConverter`2 : ValueConverter`2<TModel, TProvider> {
    private static ConverterMappingHints _defaultHints;
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public CastingConverter`2(ConverterMappingHints mappingHints);
    private static CastingConverter`2();
    private static ConverterMappingHints CreateDefaultHints();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
    private static Expression`1<Func`2<TIn, TOut>> Convert();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.CharToStringConverter : StringCharConverter`2<char, string> {
    private static ConverterMappingHints _defaultHints;
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public CharToStringConverter(ConverterMappingHints mappingHints);
    private static CharToStringConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsUnicode>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<IProperty, IEntityType, ValueGenerator> <ValueGeneratorFactory>k__BackingField;
    public Nullable`1<int> Size { get; }
    public Nullable`1<int> Precision { get; }
    public Nullable`1<int> Scale { get; }
    public Nullable`1<bool> IsUnicode { get; }
    public Func`3<IProperty, IEntityType, ValueGenerator> ValueGeneratorFactory { get; }
    public ConverterMappingHints(Nullable`1<int> size, Nullable`1<int> precision, Nullable`1<int> scale, Nullable`1<bool> unicode, Func`3<IProperty, IEntityType, ValueGenerator> valueGeneratorFactory);
    public virtual ConverterMappingHints With(ConverterMappingHints hints);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_Size();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_Precision();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_Scale();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_IsUnicode();
    [CompilerGeneratedAttribute]
public virtual Func`3<IProperty, IEntityType, ValueGenerator> get_ValueGeneratorFactory();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeOffsetToBinaryConverter : ValueConverter`2<DateTimeOffset, long> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public DateTimeOffsetToBinaryConverter(ConverterMappingHints mappingHints);
    private static DateTimeOffsetToBinaryConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeOffsetToBytesConverter : ValueConverter`2<DateTimeOffset, Byte[]> {
    private static ConverterMappingHints _defaultHints;
    private static NumberToBytesConverter`1<long> _longToBytes;
    private static NumberToBytesConverter`1<short> _shortToBytes;
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public DateTimeOffsetToBytesConverter(ConverterMappingHints mappingHints);
    private static DateTimeOffsetToBytesConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
    private static Byte[] ToBytes(DateTimeOffset value);
    private static DateTimeOffset FromBytes(Byte[] bytes);
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeOffsetToStringConverter : StringDateTimeOffsetConverter`2<DateTimeOffset, string> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public DateTimeOffsetToStringConverter(ConverterMappingHints mappingHints);
    private static DateTimeOffsetToStringConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeToBinaryConverter : ValueConverter`2<DateTime, long> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public DateTimeToBinaryConverter(ConverterMappingHints mappingHints);
    private static DateTimeToBinaryConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeToStringConverter : StringDateTimeConverter`2<DateTime, string> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public DateTimeToStringConverter(ConverterMappingHints mappingHints);
    private static DateTimeToStringConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeToTicksConverter : ValueConverter`2<DateTime, long> {
    public DateTimeToTicksConverter(ConverterMappingHints mappingHints);
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.EnumToNumberConverter`2 : ValueConverter`2<TEnum, TNumber> {
    private static ConverterMappingHints _defaultHints;
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public EnumToNumberConverter`2(ConverterMappingHints mappingHints);
    private static EnumToNumberConverter`2();
    private static ConverterMappingHints CreateDefaultHints();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
    private static Expression`1<Func`2<TEnum, TNumber>> ToNumber();
    private static Expression`1<Func`2<TNumber, TEnum>> ToEnum();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.EnumToStringConverter`1 : StringEnumConverter`3<TEnum, string, TEnum> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public EnumToStringConverter`1(ConverterMappingHints mappingHints);
    private static EnumToStringConverter`1();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.GuidToBytesConverter : ValueConverter`2<Guid, Byte[]> {
    private static ConverterMappingHints _defaultHints;
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public GuidToBytesConverter(ConverterMappingHints mappingHints);
    private static GuidToBytesConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.GuidToStringConverter : StringGuidConverter`2<Guid, string> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public GuidToStringConverter(ConverterMappingHints mappingHints);
    private static GuidToStringConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal.CompositeValueConverter`3 : ValueConverter`2<TModel, TProvider> {
    public CompositeValueConverter`3(ValueConverter converter1, ValueConverter converter2, ConverterMappingHints mappingHints);
    private static Expression`1<Func`2<TIn, TOut>> Compose(Expression`1<Func`2<TIn, TMiddle>> upper, Expression`1<Func`2<TMiddle, TOut>> lower);
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal.StringCharConverter`2 : ValueConverter`2<TModel, TProvider> {
    public StringCharConverter`2(Expression`1<Func`2<TModel, TProvider>> convertToProviderExpression, Expression`1<Func`2<TProvider, TModel>> convertFromProviderExpression, ConverterMappingHints mappingHints);
    protected static Expression`1<Func`2<char, string>> ToString();
    protected static Expression`1<Func`2<string, char>> ToChar();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal.StringDateTimeConverter`2 : ValueConverter`2<TModel, TProvider> {
    protected static ConverterMappingHints _defaultHints;
    public StringDateTimeConverter`2(Expression`1<Func`2<TModel, TProvider>> convertToProviderExpression, Expression`1<Func`2<TProvider, TModel>> convertFromProviderExpression, ConverterMappingHints mappingHints);
    private static StringDateTimeConverter`2();
    protected static Expression`1<Func`2<DateTime, string>> ToString();
    protected static Expression`1<Func`2<string, DateTime>> ToDateTime();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal.StringDateTimeOffsetConverter`2 : ValueConverter`2<TModel, TProvider> {
    protected static ConverterMappingHints _defaultHints;
    public StringDateTimeOffsetConverter`2(Expression`1<Func`2<TModel, TProvider>> convertToProviderExpression, Expression`1<Func`2<TProvider, TModel>> convertFromProviderExpression, ConverterMappingHints mappingHints);
    private static StringDateTimeOffsetConverter`2();
    protected static Expression`1<Func`2<DateTimeOffset, string>> ToString();
    protected static Expression`1<Func`2<string, DateTimeOffset>> ToDateTimeOffset();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal.StringEnumConverter`3 : ValueConverter`2<TModel, TProvider> {
    public StringEnumConverter`3(Expression`1<Func`2<TModel, TProvider>> convertToProviderExpression, Expression`1<Func`2<TProvider, TModel>> convertFromProviderExpression, ConverterMappingHints mappingHints);
    protected static Expression`1<Func`2<TEnum, string>> ToString();
    protected static Expression`1<Func`2<string, TEnum>> ToEnum();
    private static TEnum ConvertToEnum(string value);
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal.StringGuidConverter`2 : ValueConverter`2<TModel, TProvider> {
    protected static ConverterMappingHints _defaultHints;
    public StringGuidConverter`2(Expression`1<Func`2<TModel, TProvider>> convertToProviderExpression, Expression`1<Func`2<TProvider, TModel>> convertFromProviderExpression, ConverterMappingHints mappingHints);
    private static StringGuidConverter`2();
    protected static Expression`1<Func`2<Guid, string>> ToString();
    protected static Expression`1<Func`2<string, Guid>> ToGuid();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal.StringNumberConverter`3 : ValueConverter`2<TModel, TProvider> {
    protected static ConverterMappingHints _defaultHints;
    public StringNumberConverter`3(Expression`1<Func`2<TModel, TProvider>> convertToProviderExpression, Expression`1<Func`2<TProvider, TModel>> convertFromProviderExpression, ConverterMappingHints mappingHints);
    private static StringNumberConverter`3();
    protected static Expression`1<Func`2<string, TNumber>> ToNumber();
    protected static Expression`1<Func`2<TNumber, string>> ToString();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal.StringTimeSpanConverter`2 : ValueConverter`2<TModel, TProvider> {
    protected static ConverterMappingHints _defaultHints;
    public StringTimeSpanConverter`2(Expression`1<Func`2<TModel, TProvider>> convertToProviderExpression, Expression`1<Func`2<TProvider, TModel>> convertFromProviderExpression, ConverterMappingHints mappingHints);
    private static StringTimeSpanConverter`2();
    protected static Expression`1<Func`2<TimeSpan, string>> ToString();
    protected static Expression`1<Func`2<string, TimeSpan>> ToTimeSpan();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal.StringUriConverter`2 : ValueConverter`2<TModel, TProvider> {
    public StringUriConverter`2(Expression`1<Func`2<TModel, TProvider>> convertToProviderExpression, Expression`1<Func`2<TProvider, TModel>> convertFromProviderExpression, ConverterMappingHints mappingHints);
    protected static Expression`1<Func`2<Uri, string>> ToString();
    protected static Expression`1<Func`2<string, Uri>> ToUri();
    private static Uri ConvertToUri(string value);
}
public interface Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector {
    public abstract virtual IEnumerable`1<ValueConverterInfo> Select(Type modelClrType, Type providerClrType);
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.NumberToBytesConverter`1 : ValueConverter`2<TNumber, Byte[]> {
    private static ConverterMappingHints _defaultHints;
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    private static MethodInfo _reverseLongMethod;
    private static MethodInfo _reverseIntMethod;
    private static MethodInfo _reverseShortMethod;
    private static MethodInfo _toBytesMethod;
    private static MethodInfo _toDecimalMethod;
    public static ValueConverterInfo DefaultInfo { get; }
    public NumberToBytesConverter`1(ConverterMappingHints mappingHints);
    private static NumberToBytesConverter`1();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
    private static Expression`1<Func`2<TNumber, Byte[]>> ToBytes();
    private static Expression`1<Func`2<Byte[], TNumber>> ToNumber();
    private static Expression EnsureEndian(Expression expression);
    private static Byte[] ReverseLong(Byte[] bytes);
    private static Byte[] ReverseInt(Byte[] bytes);
    private static Byte[] ReverseShort(Byte[] bytes);
    private static int GetByteCount();
    private static Byte[] EnsureEndianInt(Byte[] bytes);
    private static Byte[] DecimalToBytes(decimal value);
    private static decimal BytesToDecimal(Byte[] bytes);
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.NumberToStringConverter`1 : StringNumberConverter`3<TNumber, string, TNumber> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public NumberToStringConverter`1(ConverterMappingHints mappingHints);
    private static NumberToStringConverter`1();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.StringToBoolConverter : ValueConverter`2<string, bool> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public StringToBoolConverter(ConverterMappingHints mappingHints);
    private static StringToBoolConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.StringToBytesConverter : ValueConverter`2<string, Byte[]> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public StringToBytesConverter(Encoding encoding, ConverterMappingHints mappingHints);
    private static StringToBytesConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.StringToCharConverter : StringCharConverter`2<string, char> {
    private static ConverterMappingHints _defaultHints;
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public StringToCharConverter(ConverterMappingHints mappingHints);
    private static StringToCharConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.StringToDateTimeConverter : StringDateTimeConverter`2<string, DateTime> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public StringToDateTimeConverter(ConverterMappingHints mappingHints);
    private static StringToDateTimeConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.StringToDateTimeOffsetConverter : StringDateTimeOffsetConverter`2<string, DateTimeOffset> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public StringToDateTimeOffsetConverter(ConverterMappingHints mappingHints);
    private static StringToDateTimeOffsetConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.StringToEnumConverter`1 : StringEnumConverter`3<string, TEnum, TEnum> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public StringToEnumConverter`1(ConverterMappingHints mappingHints);
    private static StringToEnumConverter`1();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.StringToGuidConverter : StringGuidConverter`2<string, Guid> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public StringToGuidConverter(ConverterMappingHints mappingHints);
    private static StringToGuidConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.StringToNumberConverter`1 : StringNumberConverter`3<string, TNumber, TNumber> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public StringToNumberConverter`1(ConverterMappingHints mappingHints);
    private static StringToNumberConverter`1();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.StringToTimeSpanConverter : StringTimeSpanConverter`2<string, TimeSpan> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public StringToTimeSpanConverter(ConverterMappingHints mappingHints);
    private static StringToTimeSpanConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.StringToUriConverter : StringUriConverter`2<string, Uri> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public StringToUriConverter(ConverterMappingHints mappingHints);
    private static StringToUriConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.TimeSpanToStringConverter : StringTimeSpanConverter`2<TimeSpan, string> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public TimeSpanToStringConverter(ConverterMappingHints mappingHints);
    private static TimeSpanToStringConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.TimeSpanToTicksConverter : ValueConverter`2<TimeSpan, long> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public TimeSpanToTicksConverter(ConverterMappingHints mappingHints);
    private static TimeSpanToTicksConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.UriToStringConverter : StringUriConverter`2<Uri, string> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public UriToStringConverter(ConverterMappingHints mappingHints);
    private static UriToStringConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
public abstract class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter : object {
    [CompilerGeneratedAttribute]
private LambdaExpression <ConvertToProviderExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private LambdaExpression <ConvertFromProviderExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private ConverterMappingHints <MappingHints>k__BackingField;
    public Func`2<object, object> ConvertToProvider { get; }
    public Func`2<object, object> ConvertFromProvider { get; }
    public LambdaExpression ConvertToProviderExpression { get; }
    public LambdaExpression ConvertFromProviderExpression { get; }
    public Type ModelClrType { get; }
    public Type ProviderClrType { get; }
    public ConverterMappingHints MappingHints { get; }
    protected ValueConverter(LambdaExpression convertToProviderExpression, LambdaExpression convertFromProviderExpression, ConverterMappingHints mappingHints);
    public abstract virtual Func`2<object, object> get_ConvertToProvider();
    public abstract virtual Func`2<object, object> get_ConvertFromProvider();
    [CompilerGeneratedAttribute]
public virtual LambdaExpression get_ConvertToProviderExpression();
    [CompilerGeneratedAttribute]
public virtual LambdaExpression get_ConvertFromProviderExpression();
    public abstract virtual Type get_ModelClrType();
    public abstract virtual Type get_ProviderClrType();
    [CompilerGeneratedAttribute]
public virtual ConverterMappingHints get_MappingHints();
    protected static Type CheckTypeSupported(Type type, Type converterType, Type[] supportedTypes);
    public virtual ValueConverter ComposeWith(ValueConverter secondConverter);
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter`2 : ValueConverter {
    private Func`2<object, object> _convertToProvider;
    private Func`2<object, object> _convertFromProvider;
    public Func`2<object, object> ConvertToProvider { get; }
    public Func`2<object, object> ConvertFromProvider { get; }
    public Expression`1<Func`2<TModel, TProvider>> ConvertToProviderExpression { get; }
    public Expression`1<Func`2<TProvider, TModel>> ConvertFromProviderExpression { get; }
    public Type ModelClrType { get; }
    public Type ProviderClrType { get; }
    public ValueConverter`2(Expression`1<Func`2<TModel, TProvider>> convertToProviderExpression, Expression`1<Func`2<TProvider, TModel>> convertFromProviderExpression, ConverterMappingHints mappingHints);
    private static Func`2<object, object> SanitizeConverter(Expression`1<Func`2<TIn, TOut>> convertExpression);
    private static T Sanitize(object value);
    public virtual Func`2<object, object> get_ConvertToProvider();
    public virtual Func`2<object, object> get_ConvertFromProvider();
    public virtual Expression`1<Func`2<TModel, TProvider>> get_ConvertToProviderExpression();
    public virtual Expression`1<Func`2<TProvider, TModel>> get_ConvertFromProviderExpression();
    public virtual Type get_ModelClrType();
    public virtual Type get_ProviderClrType();
}
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo : ValueType {
    private Func`2<ValueConverterInfo, ValueConverter> _factory;
    [CompilerGeneratedAttribute]
private Type <ModelClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ProviderClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private ConverterMappingHints <MappingHints>k__BackingField;
    public Type ModelClrType { get; }
    public Type ProviderClrType { get; }
    public ConverterMappingHints MappingHints { get; }
    public ValueConverterInfo(Type modelClrType, Type providerClrType, Func`2<ValueConverterInfo, ValueConverter> factory, ConverterMappingHints mappingHints);
    [CompilerGeneratedAttribute]
public Type get_ModelClrType();
    [CompilerGeneratedAttribute]
public Type get_ProviderClrType();
    [CompilerGeneratedAttribute]
public ConverterMappingHints get_MappingHints();
    public ValueConverter Create();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelector : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<ValueTuple`2<Type, Type>, ValueConverterInfo> _converters;
    private static Type[] _signedPreferred;
    private static Type[] _unsignedPreferred;
    private static Type[] _floatingPreferred;
    private static Type[] _charPreferred;
    private static Type[] _numerics;
    [CompilerGeneratedAttribute]
private ValueConverterSelectorDependencies <Dependencies>k__BackingField;
    protected ValueConverterSelectorDependencies Dependencies { get; }
    public ValueConverterSelector(ValueConverterSelectorDependencies dependencies);
    private static ValueConverterSelector();
    [CompilerGeneratedAttribute]
protected virtual ValueConverterSelectorDependencies get_Dependencies();
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelector/<Select>d__10")]
public virtual IEnumerable`1<ValueConverterInfo> Select(Type modelClrType, Type providerClrType);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelector/<ForChar>d__11")]
private IEnumerable`1<ValueConverterInfo> ForChar(Type underlyingModelType, Type underlyingProviderType);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelector/<CharToBytes>d__12")]
private IEnumerable`1<ValueConverterInfo> CharToBytes(Type underlyingModelType, Type underlyingProviderType);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelector/<EnumToStringOrBytes>d__13")]
private IEnumerable`1<ValueConverterInfo> EnumToStringOrBytes(Type underlyingModelType, Type underlyingProviderType);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelector/<NumberToStringOrBytes>d__14")]
private IEnumerable`1<ValueConverterInfo> NumberToStringOrBytes(Type underlyingModelType, Type underlyingProviderType);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelector/<FindNumericConventions>d__15")]
private IEnumerable`1<ValueConverterInfo> FindNumericConventions(Type modelType, Type providerType, Type converterType, Func`3<Type, Type, IEnumerable`1<ValueConverterInfo>> afterPreferred);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelector/<FindPreferredConversions>d__16")]
private IEnumerable`1<ValueConverterInfo> FindPreferredConversions(Type[] candidateTypes, Type modelType, Type providerType, Type converterType);
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelectorDependencies : object {
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.TypeBaseExtensions : object {
    [ExtensionAttribute]
public static PropertyAccessMode GetPropertyAccessMode(ITypeBase typeBase);
    [ExtensionAttribute]
public static PropertyAccessMode GetNavigationAccessMode(ITypeBase typeBase);
}
public class Microsoft.EntityFrameworkCore.Update.Internal.UpdateAdapter : object {
    private IStateManager _stateManager;
    private IChangeDetector _changeDetector;
    public CascadeTiming DeleteOrphansTiming { get; public set; }
    public CascadeTiming CascadeDeleteTiming { get; public set; }
    public IEnumerable`1<IUpdateEntry> Entries { get; }
    public IModel Model { get; }
    public UpdateAdapter(IStateManager stateManager);
    public virtual CascadeTiming get_DeleteOrphansTiming();
    public virtual void set_DeleteOrphansTiming(CascadeTiming value);
    public virtual CascadeTiming get_CascadeDeleteTiming();
    public virtual void set_CascadeDeleteTiming(CascadeTiming value);
    public virtual IUpdateEntry FindPrincipal(IUpdateEntry dependentEntry, IForeignKey foreignKey);
    public virtual IEnumerable`1<IUpdateEntry> GetDependents(IUpdateEntry principalEntry, IForeignKey foreignKey);
    public virtual IUpdateEntry TryGetEntry(IKey key, Object[] keyValues);
    public virtual IEnumerable`1<IUpdateEntry> get_Entries();
    public virtual void DetectChanges();
    public virtual void CascadeChanges();
    public virtual void CascadeDelete(IUpdateEntry entry, IEnumerable`1<IForeignKey> foreignKeys);
    public virtual IList`1<IUpdateEntry> GetEntriesToSave();
    public virtual IUpdateEntry CreateEntry(IDictionary`2<string, object> values, IEntityType entityType);
    public virtual IModel get_Model();
}
public class Microsoft.EntityFrameworkCore.Update.Internal.UpdateAdapterFactory : object {
    private ICurrentDbContext _currentContext;
    public UpdateAdapterFactory(ICurrentDbContext currentContext);
    public virtual IUpdateAdapter Create();
    public virtual IUpdateAdapter CreateStandalone(IModel model);
}
public interface Microsoft.EntityFrameworkCore.Update.IUpdateAdapter {
    public CascadeTiming DeleteOrphansTiming { get; public set; }
    public CascadeTiming CascadeDeleteTiming { get; public set; }
    public IEnumerable`1<IUpdateEntry> Entries { get; }
    public IModel Model { get; }
    public abstract virtual CascadeTiming get_DeleteOrphansTiming();
    public abstract virtual void set_DeleteOrphansTiming(CascadeTiming value);
    public abstract virtual CascadeTiming get_CascadeDeleteTiming();
    public abstract virtual void set_CascadeDeleteTiming(CascadeTiming value);
    public abstract virtual IUpdateEntry FindPrincipal(IUpdateEntry dependentEntry, IForeignKey foreignKey);
    public abstract virtual IEnumerable`1<IUpdateEntry> GetDependents(IUpdateEntry principalEntry, IForeignKey foreignKey);
    public abstract virtual IUpdateEntry TryGetEntry(IKey key, Object[] keyValues);
    public abstract virtual IEnumerable`1<IUpdateEntry> get_Entries();
    public abstract virtual void DetectChanges();
    public abstract virtual void CascadeChanges();
    public abstract virtual void CascadeDelete(IUpdateEntry entry, IEnumerable`1<IForeignKey> foreignKeys);
    public abstract virtual IList`1<IUpdateEntry> GetEntriesToSave();
    public abstract virtual IUpdateEntry CreateEntry(IDictionary`2<string, object> values, IEntityType entityType);
    public abstract virtual IModel get_Model();
}
public interface Microsoft.EntityFrameworkCore.Update.IUpdateAdapterFactory {
    public abstract virtual IUpdateAdapter Create();
    public abstract virtual IUpdateAdapter CreateStandalone(IModel model);
}
public interface Microsoft.EntityFrameworkCore.Update.IUpdateEntry {
    public IEntityType EntityType { get; }
    public EntityState EntityState { get; public set; }
    public IUpdateEntry SharedIdentityEntry { get; }
    public abstract virtual void SetOriginalValue(IProperty property, object value);
    public abstract virtual void SetPropertyModified(IProperty property);
    public abstract virtual IEntityType get_EntityType();
    public abstract virtual EntityState get_EntityState();
    public abstract virtual void set_EntityState(EntityState value);
    public abstract virtual IUpdateEntry get_SharedIdentityEntry();
    public abstract virtual bool IsModified(IProperty property);
    public abstract virtual bool HasTemporaryValue(IProperty property);
    public abstract virtual bool IsStoreGenerated(IProperty property);
    public abstract virtual object GetCurrentValue(IPropertyBase propertyBase);
    public abstract virtual object GetOriginalValue(IPropertyBase propertyBase);
    public abstract virtual TProperty GetCurrentValue(IPropertyBase propertyBase);
    public abstract virtual TProperty GetOriginalValue(IProperty property);
    public abstract virtual void SetStoreGeneratedValue(IProperty property, object value);
    public abstract virtual EntityEntry ToEntityEntry();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Update.UpdateEntryExtensions : object {
    [ExtensionAttribute]
public static string BuildCurrentValuesString(IUpdateEntry entry, IEnumerable`1<IPropertyBase> properties);
    [ExtensionAttribute]
public static string BuildOriginalValuesString(IUpdateEntry entry, IEnumerable`1<IPropertyBase> properties);
}
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.Check : object {
    [ContractAnnotationAttribute("value:null => halt")]
public static T NotNull(T value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static IReadOnlyList`1<T> NotEmpty(IReadOnlyList`1<T> value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static string NotEmpty(string value, string parameterName);
    public static string NullButNotEmpty(string value, string parameterName);
    public static IReadOnlyList`1<T> HasNoNulls(IReadOnlyList`1<T> value, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void DebugAssert(bool condition, string message);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.DictionaryExtensions : object {
    [ExtensionAttribute]
public static TValue GetOrAddNew(IDictionary`2<TKey, TValue> source, TKey key);
    [ExtensionAttribute]
public static TValue Find(IReadOnlyDictionary`2<TKey, TValue> source, TKey key);
}
[ExtensionAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.DisposableExtensions : object {
    [ExtensionAttribute]
public static ValueTask DisposeAsyncIfAvailable(IDisposable disposable);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.GuidValueGenerator : ValueGenerator`1<Guid> {
    public bool GeneratesTemporaryValues { get; }
    public virtual Guid Next(EntityEntry entry);
    public virtual bool get_GeneratesTemporaryValues();
}
public abstract class Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGenerator`1 : ValueGenerator`1<TValue> {
    private HiLoValueGeneratorState _generatorState;
    protected HiLoValueGenerator`1(HiLoValueGeneratorState generatorState);
    public virtual TValue Next(EntityEntry entry);
    public virtual ValueTask`1<TValue> NextAsync(EntityEntry entry, CancellationToken cancellationToken);
    protected abstract virtual long GetNewLowValue();
    protected virtual Task`1<long> GetNewLowValueAsync(CancellationToken cancellationToken);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState : object {
    private AsyncLock _asyncLock;
    private HiLoValue _currentValue;
    private int _blockSize;
    public HiLoValueGeneratorState(int blockSize);
    public virtual TValue Next(Func`1<long> getNewLowValue);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState/<NextAsync>d__5`1")]
public virtual ValueTask`1<TValue> NextAsync(Func`2<CancellationToken, Task`1<long>> getNewLowValue, CancellationToken cancellationToken);
    private static TValue ConvertResult(HiLoValue newValue);
    private HiLoValue GetNextValue();
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.BinaryValueGenerator : ValueGenerator`1<Byte[]> {
    [CompilerGeneratedAttribute]
private bool <GeneratesTemporaryValues>k__BackingField;
    public bool GeneratesTemporaryValues { get; }
    public BinaryValueGenerator(bool generateTemporaryValues);
    [CompilerGeneratedAttribute]
public virtual bool get_GeneratesTemporaryValues();
    public virtual Byte[] Next(EntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.DiscriminatorValueGenerator : ValueGenerator {
    public static Func`3<IProperty, IEntityType, ValueGenerator> Factory;
    private object _discriminator;
    public bool GeneratesTemporaryValues { get; }
    public DiscriminatorValueGenerator(object discriminator);
    private static DiscriminatorValueGenerator();
    protected virtual object NextValue(EntityEntry entry);
    public virtual bool get_GeneratesTemporaryValues();
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.StringValueGenerator : ValueGenerator`1<string> {
    [CompilerGeneratedAttribute]
private bool <GeneratesTemporaryValues>k__BackingField;
    public bool GeneratesTemporaryValues { get; }
    public StringValueGenerator(bool generateTemporaryValues);
    [CompilerGeneratedAttribute]
public virtual bool get_GeneratesTemporaryValues();
    public virtual string Next(EntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryByteValueGenerator : TemporaryNumberValueGenerator`1<byte> {
    private int _current;
    public virtual byte Next(EntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryCharValueGenerator : TemporaryNumberValueGenerator`1<char> {
    private int _current;
    public virtual char Next(EntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryDateTimeOffsetValueGenerator : ValueGenerator`1<DateTimeOffset> {
    private long _current;
    public bool GeneratesTemporaryValues { get; }
    public virtual DateTimeOffset Next(EntityEntry entry);
    public virtual bool get_GeneratesTemporaryValues();
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryDateTimeValueGenerator : ValueGenerator`1<DateTime> {
    private long _current;
    public bool GeneratesTemporaryValues { get; }
    public virtual DateTime Next(EntityEntry entry);
    public virtual bool get_GeneratesTemporaryValues();
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryDecimalValueGenerator : TemporaryNumberValueGenerator`1<decimal> {
    private int _current;
    public virtual decimal Next(EntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryDoubleValueGenerator : TemporaryNumberValueGenerator`1<double> {
    private int _current;
    public virtual double Next(EntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryFloatValueGenerator : TemporaryNumberValueGenerator`1<float> {
    private int _current;
    public virtual float Next(EntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryIntValueGenerator : TemporaryNumberValueGenerator`1<int> {
    private int _current;
    public virtual int Next(EntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryLongValueGenerator : TemporaryNumberValueGenerator`1<long> {
    private long _current;
    public virtual long Next(EntityEntry entry);
}
public abstract class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryNumberValueGenerator`1 : ValueGenerator`1<TValue> {
    public bool GeneratesTemporaryValues { get; }
    public virtual bool get_GeneratesTemporaryValues();
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryNumberValueGeneratorFactory : ValueGeneratorFactory {
    public virtual ValueGenerator Create(IProperty property);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporarySByteValueGenerator : TemporaryNumberValueGenerator`1<sbyte> {
    private int _current;
    public virtual sbyte Next(EntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryShortValueGenerator : TemporaryNumberValueGenerator`1<short> {
    private int _current;
    public virtual short Next(EntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryUIntValueGenerator : TemporaryNumberValueGenerator`1<UInt32> {
    private int _current;
    public virtual UInt32 Next(EntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryULongValueGenerator : TemporaryNumberValueGenerator`1<ulong> {
    private long _current;
    public virtual ulong Next(EntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryUShortValueGenerator : TemporaryNumberValueGenerator`1<ushort> {
    private int _current;
    public virtual ushort Next(EntityEntry entry);
}
public interface Microsoft.EntityFrameworkCore.ValueGeneration.IValueGeneratorCache {
    public abstract virtual ValueGenerator GetOrAdd(IProperty property, IEntityType entityType, Func`3<IProperty, IEntityType, ValueGenerator> factory);
}
public interface Microsoft.EntityFrameworkCore.ValueGeneration.IValueGeneratorSelector {
    public abstract virtual ValueGenerator Select(IProperty property, IEntityType entityType);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.SequentialGuidValueGenerator : ValueGenerator`1<Guid> {
    private long _counter;
    public bool GeneratesTemporaryValues { get; }
    public virtual Guid Next(EntityEntry entry);
    public virtual bool get_GeneratesTemporaryValues();
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.TemporaryGuidValueGenerator : GuidValueGenerator {
    public bool GeneratesTemporaryValues { get; }
    public virtual bool get_GeneratesTemporaryValues();
}
public abstract class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator : object {
    public bool GeneratesTemporaryValues { get; }
    public virtual object Next(EntityEntry entry);
    protected abstract virtual object NextValue(EntityEntry entry);
    public virtual ValueTask`1<object> NextAsync(EntityEntry entry, CancellationToken cancellationToken);
    protected virtual ValueTask`1<object> NextValueAsync(EntityEntry entry, CancellationToken cancellationToken);
    public abstract virtual bool get_GeneratesTemporaryValues();
}
public abstract class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator`1 : ValueGenerator {
    public abstract virtual TValue Next(EntityEntry entry);
    public virtual ValueTask`1<TValue> NextAsync(EntityEntry entry, CancellationToken cancellationToken);
    protected virtual object NextValue(EntityEntry entry);
    protected virtual ValueTask`1<object> NextValueAsync(EntityEntry entry, CancellationToken cancellationToken);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorCache : object {
    private ConcurrentDictionary`2<CacheKey, ValueGenerator> _cache;
    public ValueGeneratorCache(ValueGeneratorCacheDependencies dependencies);
    public virtual ValueGenerator GetOrAdd(IProperty property, IEntityType entityType, Func`3<IProperty, IEntityType, ValueGenerator> factory);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorCacheDependencies : object {
}
public abstract class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorFactory : object {
    public abstract virtual ValueGenerator Create(IProperty property);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorSelector : object {
    [CompilerGeneratedAttribute]
private ValueGeneratorSelectorDependencies <Dependencies>k__BackingField;
    public IValueGeneratorCache Cache { get; }
    protected ValueGeneratorSelectorDependencies Dependencies { get; }
    public ValueGeneratorSelector(ValueGeneratorSelectorDependencies dependencies);
    public virtual IValueGeneratorCache get_Cache();
    [CompilerGeneratedAttribute]
protected virtual ValueGeneratorSelectorDependencies get_Dependencies();
    public virtual ValueGenerator Select(IProperty property, IEntityType entityType);
    private static ValueGenerator CreateFromFactory(IProperty property, IEntityType entityType);
    public virtual ValueGenerator Create(IProperty property, IEntityType entityType);
    [CompilerGeneratedAttribute]
private ValueGenerator <Select>b__6_0(IProperty p, IEntityType t);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorSelectorDependencies : object {
    [CompilerGeneratedAttribute]
private IValueGeneratorCache <Cache>k__BackingField;
    public IValueGeneratorCache Cache { get; }
    [EntityFrameworkInternalAttribute]
public ValueGeneratorSelectorDependencies(IValueGeneratorCache cache);
    [CompilerGeneratedAttribute]
public IValueGeneratorCache get_Cache();
    public ValueGeneratorSelectorDependencies With(IValueGeneratorCache cache);
}
public enum Microsoft.EntityFrameworkCore.WarningBehavior : Enum {
    public int value__;
    public static WarningBehavior Log;
    public static WarningBehavior Ignore;
    public static WarningBehavior Throw;
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddDbContext(IServiceCollection serviceCollection, Action`1<DbContextOptionsBuilder> optionsAction, ServiceLifetime contextLifetime, ServiceLifetime optionsLifetime);
    [ExtensionAttribute]
public static IServiceCollection AddDbContext(IServiceCollection serviceCollection, Action`1<DbContextOptionsBuilder> optionsAction, ServiceLifetime contextLifetime, ServiceLifetime optionsLifetime);
    [ExtensionAttribute]
public static IServiceCollection AddDbContextPool(IServiceCollection serviceCollection, Action`1<DbContextOptionsBuilder> optionsAction, int poolSize);
    [ExtensionAttribute]
public static IServiceCollection AddDbContextPool(IServiceCollection serviceCollection, Action`1<DbContextOptionsBuilder> optionsAction, int poolSize);
    [ExtensionAttribute]
public static IServiceCollection AddDbContextPool(IServiceCollection serviceCollection, Action`2<IServiceProvider, DbContextOptionsBuilder> optionsAction, int poolSize);
    [ExtensionAttribute]
public static IServiceCollection AddDbContextPool(IServiceCollection serviceCollection, Action`2<IServiceProvider, DbContextOptionsBuilder> optionsAction, int poolSize);
    [ExtensionAttribute]
public static IServiceCollection AddDbContext(IServiceCollection serviceCollection, ServiceLifetime contextLifetime, ServiceLifetime optionsLifetime);
    [ExtensionAttribute]
public static IServiceCollection AddDbContext(IServiceCollection serviceCollection, ServiceLifetime contextLifetime, ServiceLifetime optionsLifetime);
    [ExtensionAttribute]
public static IServiceCollection AddDbContext(IServiceCollection serviceCollection, Action`2<IServiceProvider, DbContextOptionsBuilder> optionsAction, ServiceLifetime contextLifetime, ServiceLifetime optionsLifetime);
    [ExtensionAttribute]
public static IServiceCollection AddDbContext(IServiceCollection serviceCollection, Action`2<IServiceProvider, DbContextOptionsBuilder> optionsAction, ServiceLifetime contextLifetime, ServiceLifetime optionsLifetime);
    private static void AddCoreServices(IServiceCollection serviceCollection, Action`2<IServiceProvider, DbContextOptionsBuilder> optionsAction, ServiceLifetime optionsLifetime);
    private static DbContextOptions`1<TContext> CreateDbContextOptions(IServiceProvider applicationServiceProvider, Action`2<IServiceProvider, DbContextOptionsBuilder> optionsAction);
    private static void CheckContextConstructors();
}
[ExtensionAttribute]
internal static class System.Collections.Generic.ListExtensions : object {
    [ExtensionAttribute]
public static T AddAndReturn(IList`1<T> list, T item);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Linq.Expressions.ExpressionExtensions : object {
    [ExtensionAttribute]
public static LambdaExpression UnwrapLambdaFromQuote(Expression expression);
    [ExtensionAttribute]
public static Expression UnwrapTypeConversion(Expression expression, Type& convertedType);
}
[ExtensionAttribute]
internal static class System.Reflection.MemberInfoExtensions : object {
    [ExtensionAttribute]
public static Type GetMemberType(MemberInfo memberInfo);
    [ExtensionAttribute]
public static bool IsSameAs(MemberInfo propertyInfo, MemberInfo otherPropertyInfo);
    [ExtensionAttribute]
public static string GetSimpleMemberName(MemberInfo member);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Reflection.PropertyInfoExtensions : object {
    [ExtensionAttribute]
public static bool IsStatic(PropertyInfo property);
    [ExtensionAttribute]
public static bool IsCandidateProperty(PropertyInfo propertyInfo, bool needsWrite, bool publicOnly);
    [ExtensionAttribute]
public static bool IsEFIndexerProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static PropertyInfo FindGetterProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static PropertyInfo FindSetterProperty(PropertyInfo propertyInfo);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.SharedTypeExtensions : object {
    private static Dictionary`2<Type, object> _commonTypeDictionary;
    private static SharedTypeExtensions();
    [ExtensionAttribute]
public static Type UnwrapNullableType(Type type);
    [ExtensionAttribute]
public static bool IsNullableValueType(Type type);
    [ExtensionAttribute]
public static bool IsNullableType(Type type);
    [ExtensionAttribute]
public static bool IsValidEntityType(Type type);
    [ExtensionAttribute]
public static Type MakeNullable(Type type, bool nullable);
    [ExtensionAttribute]
public static bool IsNumeric(Type type);
    [ExtensionAttribute]
public static bool IsInteger(Type type);
    [ExtensionAttribute]
public static bool IsSignedInteger(Type type);
    [ExtensionAttribute]
public static bool IsAnonymousType(Type type);
    [ExtensionAttribute]
public static bool IsTupleType(Type type);
    [ExtensionAttribute]
public static PropertyInfo GetAnyProperty(Type type, string name);
    [ExtensionAttribute]
public static bool IsInstantiable(Type type);
    private static bool IsInstantiable(TypeInfo type);
    [ExtensionAttribute]
public static Type UnwrapEnumType(Type type);
    [ExtensionAttribute]
public static Type GetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetElementType(Type type, Type interfaceOrBaseType);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetGenericTypeImplementations>d__17")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetGenericTypeImplementations(Type type, Type interfaceOrBaseType);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetBaseTypes>d__18")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetBaseTypes(Type type);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetTypesInHierarchy>d__19")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetTypesInHierarchy(Type type);
    [ExtensionAttribute]
public static ConstructorInfo GetDeclaredConstructor(Type type, Type[] types);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetPropertiesInHierarchy>d__21")]
[ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetPropertiesInHierarchy(Type type, string name);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetMembersInHierarchy>d__22")]
[ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMembersInHierarchy(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMembersInHierarchy(Type type, string name);
    [ExtensionAttribute]
public static object GetDefaultValue(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<TypeInfo> GetConstructibleTypes(Assembly assembly);
    [ExtensionAttribute]
public static IEnumerable`1<TypeInfo> GetLoadableDefinedTypes(Assembly assembly);
}
[ExtensionAttribute]
internal static class System.Text.StringBuilderExtensions : object {
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<string> values, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, string separator, String[] values);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, Action`2<StringBuilder, T> joinAction, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, TParam param, Action`3<StringBuilder, T, TParam> joinAction, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, TParam1 param1, TParam2 param2, Action`4<StringBuilder, T, TParam1, TParam2> joinAction, string separator);
}
[ExtensionAttribute]
public static class System.Transactions.TransactionsDatabaseFacadeExtensions : object {
    [ExtensionAttribute]
public static void EnlistTransaction(DatabaseFacade databaseFacade, Transaction transaction);
    [ExtensionAttribute]
public static Transaction GetEnlistedTransaction(DatabaseFacade databaseFacade);
}
