[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
internal class JetBrains.Annotations.ContractAnnotationAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Contract>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceFullStates>k__BackingField;
    public string Contract { get; }
    public bool ForceFullStates { get; }
    public ContractAnnotationAttribute(string contract);
    public ContractAnnotationAttribute(string contract, bool forceFullStates);
    [CompilerGeneratedAttribute]
public string get_Contract();
    [CompilerGeneratedAttribute]
public bool get_ForceFullStates();
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseKindFlags : Enum {
    public int value__;
    public static ImplicitUseKindFlags Default;
    public static ImplicitUseKindFlags Access;
    public static ImplicitUseKindFlags Assign;
    public static ImplicitUseKindFlags InstantiatedWithFixedConstructorSignature;
    public static ImplicitUseKindFlags InstantiatedNoFixedConstructorSignature;
}
[FlagsAttribute]
internal enum JetBrains.Annotations.ImplicitUseTargetFlags : Enum {
    public int value__;
    public static ImplicitUseTargetFlags Default;
    public static ImplicitUseTargetFlags Itself;
    public static ImplicitUseTargetFlags Members;
    public static ImplicitUseTargetFlags WithMembers;
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.InvokerParameterNameAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class JetBrains.Annotations.NoEnumerationAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4320")]
internal class JetBrains.Annotations.StringFormatMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <FormatParameterName>k__BackingField;
    public string FormatParameterName { get; }
    public StringFormatMethodAttribute(string formatParameterName);
    [CompilerGeneratedAttribute]
public string get_FormatParameterName();
}
[AttributeUsageAttribute("32767")]
internal class JetBrains.Annotations.UsedImplicitlyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ImplicitUseKindFlags <UseKindFlags>k__BackingField;
    [CompilerGeneratedAttribute]
private ImplicitUseTargetFlags <TargetFlags>k__BackingField;
    public ImplicitUseKindFlags UseKindFlags { get; }
    public ImplicitUseTargetFlags TargetFlags { get; }
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags);
    public UsedImplicitlyAttribute(ImplicitUseTargetFlags targetFlags);
    public UsedImplicitlyAttribute(ImplicitUseKindFlags useKindFlags, ImplicitUseTargetFlags targetFlags);
    [CompilerGeneratedAttribute]
public ImplicitUseKindFlags get_UseKindFlags();
    [CompilerGeneratedAttribute]
public ImplicitUseTargetFlags get_TargetFlags();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public enum Microsoft.EntityFrameworkCore.AutoTransactionBehavior : Enum {
    public int value__;
    public static AutoTransactionBehavior WhenNeeded;
    public static AutoTransactionBehavior Always;
    public static AutoTransactionBehavior Never;
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.ChangeTrackerExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string ToDebugString(ChangeTracker changeTracker, ChangeTrackerDebugStringOptions options, int indent);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.ArrayStructuralComparer`1 : ValueComparer`1<TElement[]> {
}
public enum Microsoft.EntityFrameworkCore.ChangeTracking.CascadeTiming : Enum {
    public int value__;
    public static CascadeTiming Immediate;
    public static CascadeTiming OnSaveChanges;
    public static CascadeTiming Never;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTracker : object {
    private IRuntimeModel _model;
    private QueryTrackingBehavior _queryTrackingBehavior;
    private QueryTrackingBehavior _defaultQueryTrackingBehavior;
    [CompilerGeneratedAttribute]
private bool <AutoDetectChangesEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LazyLoadingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private DbContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IStateManager <StateManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IChangeDetector <ChangeDetector>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityEntryGraphIterator <GraphIterator>k__BackingField;
    public bool AutoDetectChangesEnabled { get; public set; }
    public bool LazyLoadingEnabled { get; public set; }
    public QueryTrackingBehavior QueryTrackingBehavior { get; public set; }
    public CascadeTiming DeleteOrphansTiming { get; public set; }
    public CascadeTiming CascadeDeleteTiming { get; public set; }
    public DbContext Context { get; }
    private IStateManager StateManager { get; }
    private IChangeDetector ChangeDetector { get; }
    private IEntityEntryGraphIterator GraphIterator { get; }
    public DebugView DebugView { get; }
    [EntityFrameworkInternalAttribute]
public ChangeTracker(DbContext context, IStateManager stateManager, IChangeDetector changeDetector, IModel model, IEntityEntryGraphIterator graphIterator);
    [CompilerGeneratedAttribute]
public virtual bool get_AutoDetectChangesEnabled();
    [CompilerGeneratedAttribute]
public virtual void set_AutoDetectChangesEnabled(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_LazyLoadingEnabled();
    [CompilerGeneratedAttribute]
public virtual void set_LazyLoadingEnabled(bool value);
    public virtual QueryTrackingBehavior get_QueryTrackingBehavior();
    public virtual void set_QueryTrackingBehavior(QueryTrackingBehavior value);
    public virtual CascadeTiming get_DeleteOrphansTiming();
    public virtual void set_DeleteOrphansTiming(CascadeTiming value);
    public virtual CascadeTiming get_CascadeDeleteTiming();
    public virtual void set_CascadeDeleteTiming(CascadeTiming value);
    public virtual IEnumerable`1<EntityEntry> Entries();
    public virtual IEnumerable`1<EntityEntry`1<TEntity>> Entries();
    private void TryDetectChanges();
    public virtual bool HasChanges();
    [CompilerGeneratedAttribute]
public virtual DbContext get_Context();
    public virtual void DetectChanges();
    public virtual void AcceptAllChanges();
    public virtual void TrackGraph(object rootEntity, Action`1<EntityEntryGraphNode> callback);
    public virtual void TrackGraph(object rootEntity, TState state, Func`2<EntityEntryGraphNode`1<TState>, bool> callback);
    [CompilerGeneratedAttribute]
private IStateManager get_StateManager();
    [CompilerGeneratedAttribute]
private IChangeDetector get_ChangeDetector();
    [CompilerGeneratedAttribute]
private IEntityEntryGraphIterator get_GraphIterator();
    public void add_Tracking(EventHandler`1<EntityTrackingEventArgs> value);
    public void remove_Tracking(EventHandler`1<EntityTrackingEventArgs> value);
    public void add_Tracked(EventHandler`1<EntityTrackedEventArgs> value);
    public void remove_Tracked(EventHandler`1<EntityTrackedEventArgs> value);
    public void add_StateChanging(EventHandler`1<EntityStateChangingEventArgs> value);
    public void remove_StateChanging(EventHandler`1<EntityStateChangingEventArgs> value);
    public void add_StateChanged(EventHandler`1<EntityStateChangedEventArgs> value);
    public void remove_StateChanged(EventHandler`1<EntityStateChangedEventArgs> value);
    public void add_DetectingEntityChanges(EventHandler`1<DetectEntityChangesEventArgs> value);
    public void remove_DetectingEntityChanges(EventHandler`1<DetectEntityChangesEventArgs> value);
    public void add_DetectedEntityChanges(EventHandler`1<DetectedEntityChangesEventArgs> value);
    public void remove_DetectedEntityChanges(EventHandler`1<DetectedEntityChangesEventArgs> value);
    public void add_DetectingAllChanges(EventHandler`1<DetectChangesEventArgs> value);
    public void remove_DetectingAllChanges(EventHandler`1<DetectChangesEventArgs> value);
    public void add_DetectedAllChanges(EventHandler`1<DetectedChangesEventArgs> value);
    public void remove_DetectedAllChanges(EventHandler`1<DetectedChangesEventArgs> value);
    public virtual void CascadeChanges();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetState();
    private sealed virtual override Task Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetStateAsync(CancellationToken cancellationToken);
    public virtual void Clear();
    public virtual DebugView get_DebugView();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__70_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__70_1();
}
[FlagsAttribute]
public enum Microsoft.EntityFrameworkCore.ChangeTracking.ChangeTrackerDebugStringOptions : Enum {
    public int value__;
    public static ChangeTrackerDebugStringOptions IncludeProperties;
    public static ChangeTrackerDebugStringOptions IncludeNavigations;
    public static ChangeTrackerDebugStringOptions ShortDefault;
    public static ChangeTrackerDebugStringOptions LongDefault;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry : NavigationEntry {
    private ICollectionLoader _loader;
    [NullableAttribute("2")]
public IEnumerable CurrentValue { get; public set; }
    public bool IsModified { get; public set; }
    private ICollectionLoader TargetLoader { get; }
    [EntityFrameworkInternalAttribute]
public CollectionEntry(InternalEntityEntry internalEntry, string name);
    [EntityFrameworkInternalAttribute]
public CollectionEntry(InternalEntityEntry internalEntry, INavigationBase navigationBase);
    private void LocalDetectChanges();
    [NullableContextAttribute("2")]
public virtual IEnumerable get_CurrentValue();
    [NullableContextAttribute("2")]
public virtual void set_CurrentValue(IEnumerable value);
    public virtual bool get_IsModified();
    public virtual void set_IsModified(bool value);
    public virtual void Load();
    public virtual Task LoadAsync(CancellationToken cancellationToken);
    public virtual IQueryable Query();
    private void EnsureInitialized();
    public virtual EntityEntry FindEntry(object entity);
    [EntityFrameworkInternalAttribute]
protected virtual InternalEntityEntry GetInternalTargetEntry(object entity);
    private ICollectionLoader get_TargetLoader();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.CollectionEntry`2 : CollectionEntry {
    public EntityEntry`1<TEntity> EntityEntry { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<TRelatedEntity> CurrentValue { get; public set; }
    [EntityFrameworkInternalAttribute]
public CollectionEntry`2(InternalEntityEntry internalEntry, string name);
    [EntityFrameworkInternalAttribute]
public CollectionEntry`2(InternalEntityEntry internalEntry, INavigationBase navigationBase);
    public virtual EntityEntry`1<TEntity> get_EntityEntry();
    public virtual IEnumerable`1<TRelatedEntity> get_CurrentValue();
    public virtual void set_CurrentValue(IEnumerable`1<TRelatedEntity> value);
    public virtual IQueryable`1<TRelatedEntity> Query();
    public virtual EntityEntry`1<TRelatedEntity> FindEntry(object entity);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.DetectChangesEventArgs : EventArgs {
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.DetectedChangesEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <ChangesFound>k__BackingField;
    public bool ChangesFound { get; }
    [EntityFrameworkInternalAttribute]
public DetectedChangesEventArgs(bool changesFound);
    [CompilerGeneratedAttribute]
public virtual bool get_ChangesFound();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.DetectedEntityChangesEventArgs : DetectedChangesEventArgs {
    private InternalEntityEntry _internalEntityEntry;
    private EntityEntry _entry;
    public EntityEntry Entry { get; }
    [EntityFrameworkInternalAttribute]
public DetectedEntityChangesEventArgs(InternalEntityEntry internalEntityEntry, bool changesFound);
    public virtual EntityEntry get_Entry();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.DetectEntityChangesEventArgs : DetectChangesEventArgs {
    private InternalEntityEntry _internalEntityEntry;
    private EntityEntry _entry;
    public EntityEntry Entry { get; }
    [EntityFrameworkInternalAttribute]
public DetectEntityChangesEventArgs(InternalEntityEntry internalEntityEntry);
    public virtual EntityEntry get_Entry();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{InternalEntry,nq}")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry : object {
    private static int MaxEntityState;
    private IEntityFinder _finder;
    [CompilerGeneratedAttribute]
private InternalEntityEntry <InternalEntry>k__BackingField;
    [EntityFrameworkInternalAttribute]
protected InternalEntityEntry InternalEntry { get; }
    public object Entity { get; }
    public EntityState State { get; public set; }
    [EntityFrameworkInternalAttribute]
private InternalEntityEntry Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>.Instance { get; }
    public DbContext Context { get; }
    public IEntityType Metadata { get; }
    public IEnumerable`1<MemberEntry> Members { get; }
    public IEnumerable`1<NavigationEntry> Navigations { get; }
    public IEnumerable`1<PropertyEntry> Properties { get; }
    public IEnumerable`1<ReferenceEntry> References { get; }
    public IEnumerable`1<CollectionEntry> Collections { get; }
    public bool IsKeySet { get; }
    public PropertyValues CurrentValues { get; }
    public PropertyValues OriginalValues { get; }
    private IEntityFinder Finder { get; }
    public DebugView DebugView { get; }
    [EntityFrameworkInternalAttribute]
public EntityEntry(InternalEntityEntry internalEntry);
    private static EntityEntry();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
protected virtual InternalEntityEntry get_InternalEntry();
    public virtual object get_Entity();
    public virtual EntityState get_State();
    public virtual void set_State(EntityState value);
    public virtual void DetectChanges();
    private sealed virtual override InternalEntityEntry Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>.get_Instance();
    public virtual DbContext get_Context();
    public virtual IEntityType get_Metadata();
    public virtual MemberEntry Member(IPropertyBase propertyBase);
    public virtual MemberEntry Member(string propertyName);
    public virtual IEnumerable`1<MemberEntry> get_Members();
    public virtual NavigationEntry Navigation(INavigationBase navigationBase);
    public virtual NavigationEntry Navigation(string propertyName);
    public virtual IEnumerable`1<NavigationEntry> get_Navigations();
    public virtual PropertyEntry Property(IProperty property);
    public virtual PropertyEntry Property(string propertyName);
    public virtual IEnumerable`1<PropertyEntry> get_Properties();
    public virtual ReferenceEntry Reference(INavigationBase navigation);
    public virtual ReferenceEntry Reference(string propertyName);
    public virtual IEnumerable`1<ReferenceEntry> get_References();
    public virtual CollectionEntry Collection(INavigationBase navigation);
    public virtual CollectionEntry Collection(string propertyName);
    public virtual IEnumerable`1<CollectionEntry> get_Collections();
    public virtual bool get_IsKeySet();
    [DebuggerStepThroughAttribute]
public virtual PropertyValues get_CurrentValues();
    [DebuggerStepThroughAttribute]
public virtual PropertyValues get_OriginalValues();
    [NullableContextAttribute("2")]
public virtual PropertyValues GetDatabaseValues();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry/<GetDatabaseValuesAsync>d__45")]
public virtual Task`1<PropertyValues> GetDatabaseValuesAsync(CancellationToken cancellationToken);
    public virtual void Reload();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry/<ReloadAsync>d__47")]
public virtual Task ReloadAsync(CancellationToken cancellationToken);
    private void Reload(PropertyValues storeValues);
    private IEntityFinder get_Finder();
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
private NavigationEntry <get_Navigations>b__25_0(INavigationBase navigation);
    [CompilerGeneratedAttribute]
private PropertyEntry <get_Properties>b__29_0(IProperty property);
    [CompilerGeneratedAttribute]
private ReferenceEntry <get_References>b__33_1(INavigation navigation);
    [CompilerGeneratedAttribute]
private CollectionEntry <get_Collections>b__37_1(INavigationBase navigation);
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__53_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__53_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry`1 : EntityEntry {
    public TEntity Entity { get; }
    [EntityFrameworkInternalAttribute]
public EntityEntry`1(InternalEntityEntry internalEntry);
    public virtual TEntity get_Entity();
    public virtual PropertyEntry`2<TEntity, TProperty> Property(Expression`1<Func`2<TEntity, TProperty>> propertyExpression);
    public virtual ReferenceEntry`2<TEntity, TProperty> Reference(Expression`1<Func`2<TEntity, TProperty>> propertyExpression);
    public virtual CollectionEntry`2<TEntity, TProperty> Collection(Expression`1<Func`2<TEntity, IEnumerable`1<TProperty>>> propertyExpression);
    public virtual PropertyEntry`2<TEntity, TProperty> Property(IProperty property);
    public virtual ReferenceEntry`2<TEntity, TProperty> Reference(INavigationBase navigation);
    public virtual CollectionEntry`2<TEntity, TProperty> Collection(INavigationBase navigation);
    public virtual ReferenceEntry`2<TEntity, TProperty> Reference(string propertyName);
    public virtual CollectionEntry`2<TEntity, TProperty> Collection(string propertyName);
    public virtual PropertyEntry`2<TEntity, TProperty> Property(string propertyName);
    private static void ValidateType(IProperty property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryEventArgs : EventArgs {
    private InternalEntityEntry _internalEntityEntry;
    private EntityEntry _entry;
    public EntityEntry Entry { get; }
    [EntityFrameworkInternalAttribute]
public EntityEntryEventArgs(InternalEntityEntry internalEntityEntry);
    public virtual EntityEntry get_Entry();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode : object {
    private InternalEntityEntry _entry;
    private InternalEntityEntry _sourceEntry;
    [CompilerGeneratedAttribute]
private INavigationBase <InboundNavigation>k__BackingField;
    public EntityEntry SourceEntry { get; }
    public INavigationBase InboundNavigation { get; }
    [NullableAttribute("1")]
public EntityEntry Entry { get; }
    [NullableAttribute("1")]
[EntityFrameworkInternalAttribute]
private InternalEntityEntry Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>.Instance { get; }
    [DebuggerStepThroughAttribute]
[EntityFrameworkInternalAttribute]
public EntityEntryGraphNode(InternalEntityEntry entry, InternalEntityEntry sourceEntry, INavigationBase inboundNavigation);
    public virtual EntityEntry get_SourceEntry();
    [CompilerGeneratedAttribute]
public virtual INavigationBase get_InboundNavigation();
    [NullableContextAttribute("1")]
public virtual EntityEntry get_Entry();
    private sealed virtual override InternalEntityEntry Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>.get_Instance();
    [NullableContextAttribute("1")]
[EntityFrameworkInternalAttribute]
public virtual EntityEntryGraphNode CreateNode(EntityEntryGraphNode currentNode, InternalEntityEntry internalEntityEntry, INavigationBase reachedVia);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntryGraphNode`1 : EntityEntryGraphNode {
    [CompilerGeneratedAttribute]
private TState <NodeState>k__BackingField;
    public TState NodeState { get; public set; }
    [DebuggerStepThroughAttribute]
[EntityFrameworkInternalAttribute]
public EntityEntryGraphNode`1(InternalEntityEntry entry, TState state, InternalEntityEntry sourceEntry, INavigationBase inboundNavigation);
    public EntityEntryGraphNode`1(EntityEntry entry, TState state, EntityEntry sourceEntry, INavigationBase inboundNavigation);
    [CompilerGeneratedAttribute]
public virtual TState get_NodeState();
    [CompilerGeneratedAttribute]
public virtual void set_NodeState(TState value);
    [EntityFrameworkInternalAttribute]
public virtual EntityEntryGraphNode CreateNode(EntityEntryGraphNode currentNode, InternalEntityEntry internalEntityEntry, INavigationBase reachedVia);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.EntityStateChangedEventArgs : EntityEntryEventArgs {
    [CompilerGeneratedAttribute]
private EntityState <OldState>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityState <NewState>k__BackingField;
    public EntityState OldState { get; }
    public EntityState NewState { get; }
    [NullableContextAttribute("1")]
[EntityFrameworkInternalAttribute]
public EntityStateChangedEventArgs(InternalEntityEntry internalEntityEntry, EntityState oldState, EntityState newState);
    [CompilerGeneratedAttribute]
public virtual EntityState get_OldState();
    [CompilerGeneratedAttribute]
public virtual EntityState get_NewState();
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.EntityStateChangingEventArgs : EntityEntryEventArgs {
    [CompilerGeneratedAttribute]
private EntityState <OldState>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityState <NewState>k__BackingField;
    public EntityState OldState { get; }
    public EntityState NewState { get; }
    [NullableContextAttribute("1")]
[EntityFrameworkInternalAttribute]
public EntityStateChangingEventArgs(InternalEntityEntry internalEntityEntry, EntityState oldState, EntityState newState);
    [CompilerGeneratedAttribute]
public virtual EntityState get_OldState();
    [CompilerGeneratedAttribute]
public virtual EntityState get_NewState();
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.EntityTrackedEventArgs : EntityEntryEventArgs {
    [CompilerGeneratedAttribute]
private bool <FromQuery>k__BackingField;
    public bool FromQuery { get; }
    [NullableContextAttribute("1")]
[EntityFrameworkInternalAttribute]
public EntityTrackedEventArgs(InternalEntityEntry internalEntityEntry, bool fromQuery);
    [CompilerGeneratedAttribute]
public virtual bool get_FromQuery();
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.EntityTrackingEventArgs : EntityEntryEventArgs {
    [CompilerGeneratedAttribute]
private EntityState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FromQuery>k__BackingField;
    public EntityState State { get; }
    public bool FromQuery { get; }
    [NullableContextAttribute("1")]
[EntityFrameworkInternalAttribute]
public EntityTrackingEventArgs(InternalEntityEntry internalEntityEntry, EntityState state, bool fromQuery);
    [CompilerGeneratedAttribute]
public virtual EntityState get_State();
    [CompilerGeneratedAttribute]
public virtual bool get_FromQuery();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.EntryCurrentValueComparer`1 : object {
    private IPropertyBase _property;
    private IComparer`1<TProperty> _underlyingComparer;
    [NullableContextAttribute("1")]
public EntryCurrentValueComparer`1(IPropertyBase property);
    public sealed virtual int Compare(IUpdateEntry x, IUpdateEntry y);
    public sealed virtual bool Equals(IUpdateEntry x, IUpdateEntry y);
    [NullableContextAttribute("1")]
public sealed virtual int GetHashCode(IUpdateEntry obj);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.GeometryValueComparer`1 : ValueComparer`1<TGeometry> {
    private static Expression`1<Func`3<TGeometry, TGeometry, bool>> GetEqualsExpression();
    private static Expression`1<Func`2<TGeometry, TGeometry>> GetSnapshotExpression();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory {
    public abstract virtual object CreatePrincipalEquatableKey(IUpdateEntry entry, bool fromOriginalValues);
    public abstract virtual object CreateDependentEquatableKey(IUpdateEntry entry, bool fromOriginalValues);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.ChangeTracking.IDependentKeyValueFactory`1 {
    public IEqualityComparer`1<TKey> EqualityComparer { get; }
    [NullableContextAttribute("2")]
[ContractAnnotationAttribute("=>true, key:notnull; =>false, key:null")]
public abstract virtual bool TryCreateFromBuffer(ValueBuffer& modreq(System.Runtime.InteropServices.InAttribute) valueBuffer, TKey& key);
    [ContractAnnotationAttribute("=>true, key:notnull; =>false, key:null")]
public abstract virtual bool TryCreateFromCurrentValues(IUpdateEntry entry, TKey& key);
    [ContractAnnotationAttribute("=>true, key:notnull; =>false, key:null")]
public abstract virtual bool TryCreateFromPreStoreGeneratedCurrentValues(IUpdateEntry entry, TKey& key);
    [ContractAnnotationAttribute("=>true, key:notnull; =>false, key:null")]
public abstract virtual bool TryCreateFromOriginalValues(IUpdateEntry entry, TKey& key);
    [ContractAnnotationAttribute("=>true, key:notnull; =>false, key:null")]
public abstract virtual bool TryCreateFromRelationshipSnapshot(IUpdateEntry entry, TKey& key);
    public abstract virtual IEqualityComparer`1<TKey> get_EqualityComparer();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.ChangeTracking.IEntityEntryGraphIterator {
    public abstract virtual void TraverseGraph(EntityEntryGraphNode`1<TState> node, Func`2<EntityEntryGraphNode`1<TState>, bool> handleNode);
    public abstract virtual Task TraverseGraphAsync(EntityEntryGraphNode`1<TState> node, Func`3<EntityEntryGraphNode`1<TState>, CancellationToken, Task`1<bool>> handleNode, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ArrayPropertyValues : PropertyValues {
    private Object[] _values;
    private IReadOnlyList`1<IProperty> _properties;
    public IReadOnlyList`1<IProperty> Properties { get; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    private IEntityMaterializerSource MaterializerSource { get; }
    public ArrayPropertyValues(InternalEntityEntry internalEntry, Object[] values);
    public virtual object ToObject();
    public virtual void SetValues(object obj);
    public virtual PropertyValues Clone();
    public virtual void SetValues(PropertyValues propertyValues);
    public virtual IReadOnlyList`1<IProperty> get_Properties();
    public virtual object get_Item(string propertyName);
    public virtual void set_Item(string propertyName, object value);
    public virtual object get_Item(IProperty property);
    public virtual void set_Item(IProperty property, object value);
    public virtual TValue GetValue(string propertyName);
    public virtual TValue GetValue(IProperty property);
    private void SetValue(int index, object value);
    private IEntityMaterializerSource get_MaterializerSource();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeDetector : object {
    private static bool QuirkEnabled30135;
    private IDiagnosticsLogger`1<ChangeTracking> _logger;
    private ILoggingOptions _loggingOptions;
    private bool _inCascadeDelete;
    [CompilerGeneratedAttribute]
private EventHandler`1<DetectEntityChangesEventArgs> DetectingEntityChanges;
    [CompilerGeneratedAttribute]
private EventHandler`1<DetectChangesEventArgs> DetectingAllChanges;
    [CompilerGeneratedAttribute]
private EventHandler`1<DetectedEntityChangesEventArgs> DetectedEntityChanges;
    [CompilerGeneratedAttribute]
private EventHandler`1<DetectedChangesEventArgs> DetectedAllChanges;
    public ChangeDetector(IDiagnosticsLogger`1<ChangeTracking> logger, ILoggingOptions loggingOptions);
    private static ChangeDetector();
    public virtual void PropertyChanged(InternalEntityEntry entry, IPropertyBase propertyBase, bool setModified);
    private static void ThrowIfKeyChanged(InternalEntityEntry entry, IProperty property);
    public virtual void PropertyChanging(InternalEntityEntry entry, IPropertyBase propertyBase);
    public virtual void DetectChanges(IStateManager stateManager);
    public virtual void DetectChanges(InternalEntityEntry entry);
    private bool DetectChanges(InternalEntityEntry entry, HashSet`1<InternalEntityEntry> visited);
    private bool LocalDetectChanges(InternalEntityEntry entry);
    public bool DetectValueChange(InternalEntityEntry entry, IProperty property);
    private void LogChangeDetected(InternalEntityEntry entry, IProperty property, object original, object current);
    private bool DetectKeyChange(InternalEntityEntry entry, IProperty property);
    public bool DetectNavigationChange(InternalEntityEntry entry, INavigationBase navigationBase);
    public virtual ValueTuple`4<EventHandler`1<DetectChangesEventArgs>, EventHandler`1<DetectedChangesEventArgs>, EventHandler`1<DetectEntityChangesEventArgs>, EventHandler`1<DetectedEntityChangesEventArgs>> CaptureEvents();
    public virtual void SetEvents(EventHandler`1<DetectChangesEventArgs> detectingAllChanges, EventHandler`1<DetectedChangesEventArgs> detectedAllChanges, EventHandler`1<DetectEntityChangesEventArgs> detectingEntityChanges, EventHandler`1<DetectedEntityChangesEventArgs> detectedEntityChanges);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DetectingEntityChanges(EventHandler`1<DetectEntityChangesEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DetectingEntityChanges(EventHandler`1<DetectEntityChangesEventArgs> value);
    public virtual void OnDetectingEntityChanges(InternalEntityEntry internalEntityEntry);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DetectingAllChanges(EventHandler`1<DetectChangesEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DetectingAllChanges(EventHandler`1<DetectChangesEventArgs> value);
    public virtual void OnDetectingAllChanges(IStateManager stateManager);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DetectedEntityChanges(EventHandler`1<DetectedEntityChangesEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DetectedEntityChanges(EventHandler`1<DetectedEntityChangesEventArgs> value);
    public virtual void OnDetectedEntityChanges(InternalEntityEntry internalEntityEntry, bool changesFound);
    [CompilerGeneratedAttribute]
public sealed virtual void add_DetectedAllChanges(EventHandler`1<DetectedChangesEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_DetectedAllChanges(EventHandler`1<DetectedChangesEventArgs> value);
    public virtual void OnDetectedAllChanges(IStateManager stateManager, bool changesFound);
    public virtual void ResetState();
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ChangeTrackerFactory : object {
    private DbContext _context;
    private IStateManager _stateManager;
    private IChangeDetector _changeDetector;
    private IModel _model;
    private IEntityEntryGraphIterator _graphIterator;
    [NullableContextAttribute("1")]
public ChangeTrackerFactory(ICurrentDbContext currentContext, IStateManager stateManager, IChangeDetector changeDetector, IModel model, IEntityEntryGraphIterator graphIterator);
    [NullableContextAttribute("1")]
public virtual ChangeTracker Create();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeDependentKeyValueFactory : CompositeValueFactory {
    private IForeignKey _foreignKey;
    private IPrincipalKeyValueFactory`1<Object[]> _principalKeyValueFactory;
    public CompositeDependentKeyValueFactory(IForeignKey foreignKey, IPrincipalKeyValueFactory`1<Object[]> principalKeyValueFactory);
    public virtual object CreatePrincipalEquatableKey(IUpdateEntry entry, bool fromOriginalValues);
    public virtual object CreateDependentEquatableKey(IUpdateEntry entry, bool fromOriginalValues);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositePrincipalKeyValueFactory : CompositeValueFactory {
    private IKey _key;
    public CompositePrincipalKeyValueFactory(IKey key);
    [NullableContextAttribute("2")]
public virtual object CreateFromKeyValues(Object[] keyValues);
    [NullableContextAttribute("2")]
public virtual object CreateFromBuffer(ValueBuffer valueBuffer);
    public virtual IProperty FindNullPropertyInKeyValues(Object[] keyValues);
    public virtual Object[] CreateFromCurrentValues(IUpdateEntry entry);
    public virtual IProperty FindNullPropertyInCurrentValues(IUpdateEntry entry);
    public virtual Object[] CreateFromOriginalValues(IUpdateEntry entry);
    public virtual Object[] CreateFromRelationshipSnapshot(IUpdateEntry entry);
    private Object[] CreateFromEntry(IUpdateEntry entry, Func`3<IUpdateEntry, IProperty, object> getValue);
    public virtual object CreateEquatableKey(IUpdateEntry entry, bool fromOriginalValues);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CompositeValueFactory : object {
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<Object[]> <EqualityComparer>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IProperty> <Properties>k__BackingField;
    public IEqualityComparer`1<Object[]> EqualityComparer { get; }
    protected IReadOnlyList`1<IProperty> Properties { get; }
    public CompositeValueFactory(IReadOnlyList`1<IProperty> properties);
    [CompilerGeneratedAttribute]
public virtual IEqualityComparer`1<Object[]> get_EqualityComparer();
    [CompilerGeneratedAttribute]
protected virtual IReadOnlyList`1<IProperty> get_Properties();
    public virtual bool TryCreateFromBuffer(ValueBuffer& modreq(System.Runtime.InteropServices.InAttribute) valueBuffer, Object[]& key);
    public virtual bool TryCreateFromCurrentValues(IUpdateEntry entry, Object[]& key);
    public virtual bool TryCreateFromPreStoreGeneratedCurrentValues(IUpdateEntry entry, Object[]& key);
    public virtual bool TryCreateFromOriginalValues(IUpdateEntry entry, Object[]& key);
    public virtual bool TryCreateFromRelationshipSnapshot(IUpdateEntry entry, Object[]& key);
    protected virtual bool TryCreateFromEntry(IUpdateEntry entry, Func`3<IUpdateEntry, IProperty, object> getValue, Object[]& key);
    public virtual object CreatePrincipalEquatableKey(IUpdateEntry entry, bool fromOriginalValues);
    public virtual object CreateDependentEquatableKey(IUpdateEntry entry, bool fromOriginalValues);
    protected static IEqualityComparer`1<Object[]> CreateEqualityComparer(IReadOnlyList`1<IProperty> properties);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CurrentPropertyValues : EntryPropertyValues {
    public CurrentPropertyValues(InternalEntityEntry internalEntry);
    public virtual TValue GetValue(string propertyName);
    public virtual TValue GetValue(IProperty property);
    protected virtual void SetValueInternal(IProperty property, object value);
    protected virtual object GetValueInternal(IProperty property);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CurrentProviderValueComparer`2 : object {
    private IPropertyBase _property;
    private IComparer`1<TProvider> _underlyingComparer;
    private Func`2<TModel, TProvider> _converter;
    [NullableContextAttribute("1")]
public CurrentProviderValueComparer`2(IPropertyBase property, ValueConverter`2<TModel, TProvider> converter);
    public virtual int Compare(IUpdateEntry x, IUpdateEntry y);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.CurrentValueComparerFactory : object {
    private static bool QuirkEnabled29985;
    private static CurrentValueComparerFactory();
    [NullableContextAttribute("1")]
public virtual IComparer`1<IUpdateEntry> Create(IPropertyBase propertyBase);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static bool <Create>g__IsGenericComparable|1_0(Type type, Type nonNullableType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.DependentKeyValueFactory`1 : object {
    private IForeignKey _foreignKey;
    private IPrincipalKeyValueFactory`1<TKey> _principalKeyValueFactory;
    public IEqualityComparer`1<TKey> EqualityComparer { get; }
    public DependentKeyValueFactory`1(IForeignKey foreignKey, IPrincipalKeyValueFactory`1<TKey> principalKeyValueFactory);
    public abstract virtual IEqualityComparer`1<TKey> get_EqualityComparer();
    public abstract virtual bool TryCreateFromCurrentValues(IUpdateEntry entry, TKey& key);
    public abstract virtual bool TryCreateFromOriginalValues(IUpdateEntry entry, TKey& key);
    public virtual object CreatePrincipalEquatableKey(IUpdateEntry entry, bool fromOriginalValues);
    public virtual object CreateDependentEquatableKey(IUpdateEntry entry, bool fromOriginalValues);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.DependentKeyValueFactoryFactory : object {
    public virtual IDependentKeyValueFactory`1<TKey> CreateSimple(IForeignKey foreignKey, IPrincipalKeyValueFactory`1<TKey> principalKeyValueFactory);
    public virtual IDependentKeyValueFactory`1<Object[]> CreateComposite(IForeignKey foreignKey, IPrincipalKeyValueFactory`1<Object[]> principalKeyValueFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.DependentsMap`1 : object {
    private IForeignKey _foreignKey;
    private IPrincipalKeyValueFactory`1<TKey> _principalKeyValueFactory;
    private IDependentKeyValueFactory`1<TKey> _dependentKeyValueFactory;
    private Dictionary`2<TKey, HashSet`1<IUpdateEntry>> _map;
    public DependentsMap`1(IForeignKey foreignKey, IPrincipalKeyValueFactory`1<TKey> principalKeyValueFactory, IDependentKeyValueFactory`1<TKey> dependentKeyValueFactory);
    public virtual void Add(IUpdateEntry entry);
    public virtual void Remove(IUpdateEntry entry);
    public virtual void Update(IUpdateEntry entry);
    private bool TryCreateFromCurrentValues(IUpdateEntry entry, TKey& key);
    public virtual IEnumerable`1<IUpdateEntry> GetDependents(IUpdateEntry principalEntry);
    public virtual IEnumerable`1<IUpdateEntry> GetDependentsUsingRelationshipSnapshot(IUpdateEntry principalEntry);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EmptyShadowValuesFactoryFactory : SnapshotFactoryFactory {
    protected bool UseEntityVariable { get; }
    protected virtual int GetPropertyIndex(IPropertyBase propertyBase);
    protected virtual int GetPropertyCount(IEntityType entityType);
    protected virtual ValueComparer GetValueComparer(IProperty property);
    protected virtual bool get_UseEntityVariable();
    protected virtual Expression CreateReadShadowValueExpression(ParameterExpression parameter, IPropertyBase property);
    protected virtual Expression CreateReadValueExpression(ParameterExpression parameter, IPropertyBase property);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator : object {
    [NullableContextAttribute("1")]
public virtual void TraverseGraph(EntityEntryGraphNode`1<TState> node, Func`2<EntityEntryGraphNode`1<TState>, bool> handleNode);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityEntryGraphIterator/<TraverseGraphAsync>d__1`1")]
public virtual Task TraverseGraphAsync(EntityEntryGraphNode`1<TState> node, Func`3<EntityEntryGraphNode`1<TState>, CancellationToken, Task`1<bool>> handleNode, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher : object {
    private IEntityEntryGraphIterator _graphIterator;
    private HashSet`1<object> _visited;
    public EntityGraphAttacher(IEntityEntryGraphIterator graphIterator);
    public virtual void AttachGraph(InternalEntityEntry rootEntry, EntityState targetState, EntityState storeGeneratedWithKeySetTargetState, bool forceStateWhenUnknownKey);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher/<AttachGraphAsync>d__4")]
public virtual Task AttachGraphAsync(InternalEntityEntry rootEntry, EntityState targetState, EntityState storeGeneratedWithKeySetTargetState, bool forceStateWhenUnknownKey, CancellationToken cancellationToken);
    private bool PaintAction(EntityEntryGraphNode`1<ValueTuple`3<EntityState, EntityState, bool>> node);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityGraphAttacher/<PaintActionAsync>d__6")]
private Task`1<bool> PaintActionAsync(EntityEntryGraphNode`1<ValueTuple`3<EntityState, EntityState, bool>> node, CancellationToken cancellationToken);
    private static void SetReferenceLoaded(EntityEntryGraphNode`1<ValueTuple`3<EntityState, EntityState, bool>> node);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityReferenceMap : object {
    private bool _hasSubMap;
    private Dictionary`2<object, InternalEntityEntry> _detachedReferenceMap;
    private Dictionary`2<object, InternalEntityEntry> _unchangedReferenceMap;
    private Dictionary`2<object, InternalEntityEntry> _addedReferenceMap;
    private Dictionary`2<object, InternalEntityEntry> _modifiedReferenceMap;
    private Dictionary`2<object, InternalEntityEntry> _deletedReferenceMap;
    private Dictionary`2<IEntityType, EntityReferenceMap> _sharedTypeReferenceMap;
    public EntityReferenceMap(bool hasSubMap);
    public virtual void Update(InternalEntityEntry entry, EntityState state, Nullable`1<EntityState> oldState);
    [NullableContextAttribute("2")]
public virtual bool TryGet(object entity, IEntityType entityType, InternalEntityEntry& entry, bool throwOnNonUniqueness);
    public virtual int GetCountForState(bool added, bool modified, bool deleted, bool unchanged, bool countDeletedSharedIdentity);
    public virtual IEnumerable`1<InternalEntityEntry> GetEntriesForState(bool added, bool modified, bool deleted, bool unchanged, bool returnDeletedSharedIdentity);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityReferenceMap/<GetEntriesForState>d__12")]
private IEnumerable`1<InternalEntityEntry> GetEntriesForState(bool added, bool modified, bool deleted, bool unchanged, bool hasSharedTypes, bool returnAdded, bool returnModified, bool returnDeleted, bool returnUnchanged, bool returnSharedIdentity);
    private void Remove(object entity, IEntityType entityType, EntityState oldState);
    public virtual void Clear();
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntityReferenceMap/<GetNonDeletedEntities>d__15`1")]
public virtual IEnumerable`1<TEntity> GetNonDeletedEntities();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntryCurrentProviderValueComparer : EntryCurrentValueComparer {
    private ValueConverter _converter;
    public EntryCurrentProviderValueComparer(IPropertyBase property, ValueConverter converter);
    protected virtual object GetPropertyValue(IUpdateEntry entry);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntryCurrentValueComparer : object {
    private IPropertyBase _property;
    private IComparer _underlyingComparer;
    public EntryCurrentValueComparer(IPropertyBase property);
    public EntryCurrentValueComparer(IPropertyBase property, IComparer underlyingComparer);
    protected virtual object GetPropertyValue(IUpdateEntry entry);
    [NullableContextAttribute("2")]
public virtual int Compare(IUpdateEntry x, IUpdateEntry y);
    [NullableContextAttribute("2")]
protected virtual int ComparePropertyValues(object x, object y);
    [NullableContextAttribute("2")]
public virtual bool Equals(IUpdateEntry x, IUpdateEntry y);
    public virtual int GetHashCode(IUpdateEntry obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.EntryPropertyValues : PropertyValues {
    private IReadOnlyList`1<IProperty> _properties;
    public IReadOnlyList`1<IProperty> Properties { get; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    protected EntryPropertyValues(InternalEntityEntry internalEntry);
    public virtual object ToObject();
    public virtual void SetValues(object obj);
    public virtual PropertyValues Clone();
    public virtual void SetValues(PropertyValues propertyValues);
    [DebuggerStepThroughAttribute]
public virtual IReadOnlyList`1<IProperty> get_Properties();
    public virtual object get_Item(string propertyName);
    public virtual void set_Item(string propertyName, object value);
    public virtual object get_Item(IProperty property);
    public virtual void set_Item(IProperty property, object value);
    protected abstract virtual void SetValueInternal(IProperty property, object value);
    protected abstract virtual object GetValueInternal(IProperty property);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector {
    public abstract virtual void PropertyChanged(InternalEntityEntry entry, IPropertyBase propertyBase, bool setModified);
    public abstract virtual void PropertyChanging(InternalEntityEntry entry, IPropertyBase propertyBase);
    public abstract virtual void DetectChanges(IStateManager stateManager);
    public abstract virtual void DetectChanges(InternalEntityEntry entry);
    public abstract virtual ValueTuple`4<EventHandler`1<DetectChangesEventArgs>, EventHandler`1<DetectedChangesEventArgs>, EventHandler`1<DetectEntityChangesEventArgs>, EventHandler`1<DetectedEntityChangesEventArgs>> CaptureEvents();
    public abstract virtual void SetEvents(EventHandler`1<DetectChangesEventArgs> detectingAllChanges, EventHandler`1<DetectedChangesEventArgs> detectedAllChanges, EventHandler`1<DetectEntityChangesEventArgs> detectingEntityChanges, EventHandler`1<DetectedEntityChangesEventArgs> detectedEntityChanges);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DetectingEntityChanges(EventHandler`1<DetectEntityChangesEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DetectingEntityChanges(EventHandler`1<DetectEntityChangesEventArgs> value);
    public abstract virtual void OnDetectingEntityChanges(InternalEntityEntry internalEntityEntry);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DetectingAllChanges(EventHandler`1<DetectChangesEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DetectingAllChanges(EventHandler`1<DetectChangesEventArgs> value);
    public abstract virtual void OnDetectingAllChanges(IStateManager stateManager);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DetectedEntityChanges(EventHandler`1<DetectedEntityChangesEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DetectedEntityChanges(EventHandler`1<DetectedEntityChangesEventArgs> value);
    public abstract virtual void OnDetectedEntityChanges(InternalEntityEntry internalEntityEntry, bool changesFound);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DetectedAllChanges(EventHandler`1<DetectedChangesEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DetectedAllChanges(EventHandler`1<DetectedChangesEventArgs> value);
    public abstract virtual void OnDetectedAllChanges(IStateManager stateManager, bool changesFound);
    public abstract virtual void ResetState();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeTrackerFactory {
    public abstract virtual ChangeTracker Create();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMap`1 : object {
    private bool _sensitiveLoggingEnabled;
    private Dictionary`2<TKey, InternalEntityEntry> _identityMap;
    private IForeignKey[] _foreignKeys;
    private Dictionary`2<IForeignKey, IDependentsMap> _dependentMaps;
    [CompilerGeneratedAttribute]
private IPrincipalKeyValueFactory`1<TKey> <PrincipalKeyValueFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IKey <Key>k__BackingField;
    protected IPrincipalKeyValueFactory`1<TKey> PrincipalKeyValueFactory { get; }
    public IKey Key { get; }
    public IdentityMap`1(IKey key, IPrincipalKeyValueFactory`1<TKey> principalKeyValueFactory, bool sensitiveLoggingEnabled);
    [CompilerGeneratedAttribute]
protected virtual IPrincipalKeyValueFactory`1<TKey> get_PrincipalKeyValueFactory();
    [CompilerGeneratedAttribute]
public virtual IKey get_Key();
    public virtual bool Contains(ValueBuffer& modreq(System.Runtime.InteropServices.InAttribute) valueBuffer);
    public virtual bool Contains(IForeignKey foreignKey, ValueBuffer& modreq(System.Runtime.InteropServices.InAttribute) valueBuffer);
    public virtual InternalEntityEntry TryGetEntry(InternalEntityEntry entry);
    [NullableContextAttribute("2")]
public virtual InternalEntityEntry TryGetEntry(Object[] keyValues);
    [NullableContextAttribute("2")]
public virtual InternalEntityEntry TryGetEntry(Object[] keyValues, bool throwOnNullKey, Boolean& hasNullKey);
    public virtual InternalEntityEntry TryGetEntry(IForeignKey foreignKey, InternalEntityEntry dependentEntry);
    public virtual InternalEntityEntry TryGetEntryUsingPreStoreGeneratedValues(IForeignKey foreignKey, InternalEntityEntry dependentEntry);
    public virtual InternalEntityEntry TryGetEntryUsingRelationshipSnapshot(IForeignKey foreignKey, InternalEntityEntry dependentEntry);
    public virtual void AddOrUpdate(InternalEntityEntry entry);
    public virtual void Add(InternalEntityEntry entry);
    public virtual void Add(Object[] keyValues, InternalEntityEntry entry);
    protected virtual void Add(TKey key, InternalEntityEntry entry);
    private void ThrowIdentityConflict(InternalEntityEntry entry);
    private void Add(TKey key, InternalEntityEntry entry, bool updateDuplicate);
    public virtual IDependentsMap GetDependentsMap(IForeignKey foreignKey);
    public virtual IDependentsMap FindDependentsMap(IForeignKey foreignKey);
    public virtual void Clear();
    public virtual void Remove(InternalEntityEntry entry);
    public virtual void RemoveUsingRelationshipSnapshot(InternalEntityEntry entry);
    protected virtual void Remove(TKey key, InternalEntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IdentityMapFactoryFactory : object {
    [NullableContextAttribute("1")]
public virtual Func`2<bool, IIdentityMap> Create(IKey key);
    [UsedImplicitlyAttribute]
private static Func`2<bool, IIdentityMap> CreateFactory(IKey key);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IDependentsMap {
    public abstract virtual void Add(IUpdateEntry entry);
    public abstract virtual void Update(IUpdateEntry entry);
    public abstract virtual void Remove(IUpdateEntry entry);
    public abstract virtual IEnumerable`1<IUpdateEntry> GetDependents(IUpdateEntry principalEntry);
    public abstract virtual IEnumerable`1<IUpdateEntry> GetDependentsUsingRelationshipSnapshot(IUpdateEntry principalEntry);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IEntityGraphAttacher {
    public abstract virtual void AttachGraph(InternalEntityEntry rootEntry, EntityState targetState, EntityState storeGeneratedWithKeySetTargetState, bool forceStateWhenUnknownKey);
    public abstract virtual Task AttachGraphAsync(InternalEntityEntry rootEntry, EntityState targetState, EntityState storeGeneratedWithKeySetTargetState, bool forceStateWhenUnknownKey, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IIdentityMap {
    public IKey Key { get; }
    public abstract virtual IKey get_Key();
    public abstract virtual bool Contains(ValueBuffer& modreq(System.Runtime.InteropServices.InAttribute) valueBuffer);
    public abstract virtual bool Contains(IForeignKey foreignKey, ValueBuffer& modreq(System.Runtime.InteropServices.InAttribute) valueBuffer);
    public abstract virtual InternalEntityEntry TryGetEntry(InternalEntityEntry entry);
    [NullableContextAttribute("2")]
public abstract virtual InternalEntityEntry TryGetEntry(Object[] keyValues);
    [NullableContextAttribute("2")]
public abstract virtual InternalEntityEntry TryGetEntry(Object[] keyValues, bool throwOnNullKey, Boolean& hasNullKey);
    public abstract virtual InternalEntityEntry TryGetEntry(IForeignKey foreignKey, InternalEntityEntry dependentEntry);
    public abstract virtual InternalEntityEntry TryGetEntryUsingPreStoreGeneratedValues(IForeignKey foreignKey, InternalEntityEntry dependentEntry);
    public abstract virtual InternalEntityEntry TryGetEntryUsingRelationshipSnapshot(IForeignKey foreignKey, InternalEntityEntry dependentEntry);
    public abstract virtual void AddOrUpdate(InternalEntityEntry entry);
    public abstract virtual void Add(InternalEntityEntry entry);
    public abstract virtual void Add(Object[] keyValues, InternalEntityEntry entry);
    public abstract virtual void Remove(InternalEntityEntry entry);
    public abstract virtual void RemoveUsingRelationshipSnapshot(InternalEntityEntry entry);
    public abstract virtual IDependentsMap GetDependentsMap(IForeignKey foreignKey);
    public abstract virtual IDependentsMap FindDependentsMap(IForeignKey foreignKey);
    public abstract virtual void Clear();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntryNotifier {
    public abstract virtual void StateChanging(InternalEntityEntry entry, EntityState newState);
    public abstract virtual void StateChanged(InternalEntityEntry entry, EntityState oldState, bool fromQuery);
    public abstract virtual void FixupResolved(InternalEntityEntry entry, InternalEntityEntry duplicateEntry);
    public abstract virtual void TrackedFromQuery(InternalEntityEntry entry);
    public abstract virtual void NavigationReferenceChanged(InternalEntityEntry entry, INavigation navigation, object oldValue, object newValue);
    public abstract virtual void NavigationCollectionChanged(InternalEntityEntry entry, INavigationBase navigationBase, IEnumerable`1<object> added, IEnumerable`1<object> removed);
    public abstract virtual void KeyPropertyChanged(InternalEntityEntry entry, IProperty property, IEnumerable`1<IKey> keys, IEnumerable`1<IForeignKey> foreignKeys, object oldValue, object newValue);
    public abstract virtual void PropertyChanged(InternalEntityEntry entry, IPropertyBase property, bool setModified);
    public abstract virtual void PropertyChanging(InternalEntityEntry entry, IPropertyBase property);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IInternalEntityEntrySubscriber {
    public abstract virtual bool SnapshotAndSubscribe(InternalEntityEntry entry);
    public abstract virtual void Unsubscribe(InternalEntityEntry entry);
    public abstract virtual void SubscribeCollectionChanged(InternalEntityEntry entry, INavigationBase navigation);
    public abstract virtual void UnsubscribeCollectionChanged(InternalEntityEntry entry, INavigationBase navigation);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IKeyPropagator {
    public abstract virtual InternalEntityEntry PropagateValue(InternalEntityEntry entry, IProperty property);
    public abstract virtual Task`1<InternalEntityEntry> PropagateValueAsync(InternalEntityEntry entry, IProperty property, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ILocalViewListener {
    public abstract virtual void RegisterView(Action`2<InternalEntityEntry, EntityState> viewAction);
    public abstract virtual void StateChanging(InternalEntityEntry entry, EntityState newState);
    public abstract virtual void StateChanged(InternalEntityEntry entry, EntityState oldState, bool fromQuery);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.INavigationFixer {
    public abstract virtual bool BeginDelayedFixup();
    public abstract virtual void CompleteDelayedFixup();
    public abstract virtual void AbortDelayedFixup();
    public abstract virtual void NavigationReferenceChanged(InternalEntityEntry entry, INavigationBase navigationBase, object oldValue, object newValue);
    public abstract virtual void NavigationCollectionChanged(InternalEntityEntry entry, INavigationBase navigationBase, IEnumerable`1<object> added, IEnumerable`1<object> removed);
    public abstract virtual void TrackedFromQuery(InternalEntityEntry entry);
    public abstract virtual void KeyPropertyChanged(InternalEntityEntry entry, IProperty property, IEnumerable`1<IKey> containingPrincipalKeys, IEnumerable`1<IForeignKey> containingForeignKeys, object oldValue, object newValue);
    public abstract virtual void StateChanging(InternalEntityEntry entry, EntityState newState);
    public abstract virtual void StateChanged(InternalEntityEntry entry, EntityState oldState, bool fromQuery);
    public abstract virtual void FixupResolved(InternalEntityEntry entry, InternalEntityEntry duplicateEntry);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry : object {
    private StateData _stateData;
    private OriginalValues _originalValues;
    private RelationshipsSnapshot _relationshipsSnapshot;
    private SidecarValues _temporaryValues;
    private SidecarValues _storeGeneratedValues;
    private ISnapshot _shadowValues;
    [CompilerGeneratedAttribute]
private object <Entity>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityType <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private IStateManager <StateManager>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalEntityEntry <SharedIdentityEntry>k__BackingField;
    private static MethodInfo ReadOriginalValueMethod;
    private static MethodInfo ReadRelationshipSnapshotValueMethod;
    private static MethodInfo ReadStoreGeneratedValueMethod;
    private static MethodInfo ReadTemporaryValueMethod;
    private static MethodInfo GetCurrentValueMethod;
    public DbContext Context { get; }
    public object Entity { get; }
    public IEntityType EntityType { get; }
    private EntityState Microsoft.EntityFrameworkCore.Update.IUpdateEntry.EntityState { get; private set; }
    public IStateManager StateManager { get; }
    [NullableAttribute("2")]
public InternalEntityEntry SharedIdentityEntry { get; public set; }
    public EntityState EntityState { get; }
    public bool HasConceptualNull { get; }
    public bool HasOriginalValuesSnapshot { get; }
    public bool HasRelationshipSnapshot { get; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("0")]
public ValueTuple`2<bool, bool> IsKeySet { get; }
    public bool IsKeyUnknown { get; }
    public DebugView DebugView { get; }
    [NullableAttribute("2")]
private IUpdateEntry Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SharedIdentityEntry { get; }
    public InternalEntityEntry(IStateManager stateManager, IEntityType entityType, object entity);
    public InternalEntityEntry(IStateManager stateManager, IEntityType entityType, object entity, ValueBuffer& valueBuffer);
    private static InternalEntityEntry();
    public sealed virtual DbContext get_Context();
    [CompilerGeneratedAttribute]
public object get_Entity();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetOriginalValue(IProperty property, object value);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Update.IUpdateEntry.SetPropertyModified(IProperty property);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public sealed virtual IEntityType get_EntityType();
    private sealed virtual override EntityState Microsoft.EntityFrameworkCore.Update.IUpdateEntry.get_EntityState();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Update.IUpdateEntry.set_EntityState(EntityState value);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public IStateManager get_StateManager();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public InternalEntityEntry get_SharedIdentityEntry();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_SharedIdentityEntry(InternalEntityEntry value);
    public void SetEntityState(EntityState entityState, bool acceptChanges, bool modifyProperties, Nullable`1<EntityState> forceStateWhenUnknownKey, Nullable`1<EntityState> fallbackState);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry/<SetEntityStateAsync>d__29")]
public Task SetEntityStateAsync(EntityState entityState, bool acceptChanges, bool modifyProperties, Nullable`1<EntityState> forceStateWhenUnknownKey, Nullable`1<EntityState> fallbackState, CancellationToken cancellationToken);
    private EntityState PropagateToUnknownKey(EntityState oldState, EntityState entityState, bool adding, Nullable`1<EntityState> forceStateWhenUnknownKey);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry/<PropagateToUnknownKeyAsync>d__31")]
private Task`1<EntityState> PropagateToUnknownKeyAsync(EntityState oldState, EntityState entityState, bool adding, Nullable`1<EntityState> forceStateWhenUnknownKey, CancellationToken cancellationToken);
    private static EntityState ForceState(EntityState entityState, Nullable`1<EntityState> forceStateWhenUnknownKey, bool keyUnknown, InternalEntityEntry principalEntry);
    private bool PrepareForAdd(EntityState newState);
    private void SetEntityState(EntityState oldState, EntityState newState, bool acceptChanges, bool modifyProperties);
    private void HandleSharedIdentityEntry(EntityState newState);
    private void FireStateChanging(EntityState newState);
    private void FireStateChanged(EntityState oldState);
    private void SetServiceProperties(EntityState oldState, EntityState newState);
    public void MarkUnchangedFromQuery();
    public EntityState get_EntityState();
    public sealed virtual bool IsModified(IProperty property);
    public bool IsUnknown(IProperty property);
    public void SetPropertyModified(IProperty property, bool changeState, bool isModified, bool isConceptualNull, bool acceptChanges);
    public bool get_HasConceptualNull();
    public sealed virtual bool IsConceptualNull(IProperty property);
    public sealed virtual bool HasTemporaryValue(IProperty property);
    public void PropagateValue(InternalEntityEntry principalEntry, IProperty principalProperty, IProperty dependentProperty, bool isMaterialization, bool setModified);
    private CurrentValueType GetValueType(IProperty property, Func`3<object, object, bool> equals);
    public void SetTemporaryValue(IProperty property, object value, bool setModified);
    public void MarkAsTemporary(IProperty property, bool temporary);
    public sealed virtual void SetStoreGeneratedValue(IProperty property, object value, bool setModified);
    private void MarkShadowPropertiesNotSet(IEntityType entityType);
    public void MarkUnknown(IProperty property);
    internal static MethodInfo MakeReadShadowValueMethod(Type type);
    private T ReadShadowValue(int shadowIndex);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2060")]
internal static MethodInfo MakeReadOriginalValueMethod(Type type);
    [UsedImplicitlyAttribute]
private T ReadOriginalValue(IProperty property, int originalValueIndex);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2060")]
internal static MethodInfo MakeReadRelationshipSnapshotValueMethod(Type type);
    [UsedImplicitlyAttribute]
private T ReadRelationshipSnapshotValue(IPropertyBase propertyBase, int relationshipSnapshotIndex);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2060")]
internal static MethodInfo MakeReadStoreGeneratedValueMethod(Type type);
    [UsedImplicitlyAttribute]
private T ReadStoreGeneratedValue(int storeGeneratedIndex);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2060")]
internal static MethodInfo MakeReadTemporaryValueMethod(Type type);
    [UsedImplicitlyAttribute]
private T ReadTemporaryValue(int storeGeneratedIndex);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2060")]
internal static MethodInfo MakeGetCurrentValueMethod(Type type);
    public sealed virtual TProperty GetCurrentValue(IPropertyBase propertyBase);
    public sealed virtual TProperty GetOriginalValue(IProperty property);
    public TProperty GetRelationshipSnapshotValue(IPropertyBase propertyBase);
    public object ReadPropertyValue(IPropertyBase propertyBase);
    private bool PropertyHasDefaultValue(IPropertyBase propertyBase);
    private void WritePropertyValue(IPropertyBase propertyBase, object value, bool forMaterialization);
    public object GetOrCreateCollection(INavigationBase navigationBase, bool forMaterialization);
    private object GetOrCreateShadowCollection(INavigationBase navigation);
    public bool CollectionContains(INavigationBase navigationBase, object value);
    public bool AddToCollection(INavigationBase navigationBase, object value, bool forMaterialization);
    public bool RemoveFromCollection(INavigationBase navigationBase, object value);
    public sealed virtual object GetCurrentValue(IPropertyBase propertyBase);
    public sealed virtual object GetPreStoreGeneratedCurrentValue(IPropertyBase propertyBase);
    public sealed virtual object GetOriginalValue(IPropertyBase propertyBase);
    public sealed virtual object GetRelationshipSnapshotValue(IPropertyBase propertyBase);
    public void SetOriginalValue(IPropertyBase propertyBase, object value, int index);
    public void SetRelationshipSnapshotValue(IPropertyBase propertyBase, object value);
    public void EnsureOriginalValues();
    public void EnsureTemporaryValues();
    public void EnsureStoreGeneratedValues();
    public void EnsureRelationshipSnapshot();
    public bool get_HasOriginalValuesSnapshot();
    public bool get_HasRelationshipSnapshot();
    public void RemoveFromCollectionSnapshot(INavigationBase navigation, object removedEntity);
    public void AddToCollectionSnapshot(INavigationBase navigation, object addedEntity);
    public void AddRangeToCollectionSnapshot(INavigationBase navigation, IEnumerable`1<object> addedEntities);
    public object get_Item(IPropertyBase propertyBase);
    public void set_Item(IPropertyBase propertyBase, object value);
    public void SetProperty(IPropertyBase propertyBase, object value, bool isMaterialization, bool setModified, bool isCascadeDelete);
    private void SetProperty(IPropertyBase propertyBase, object value, bool isMaterialization, bool setModified, bool isCascadeDelete, CurrentValueType valueType);
    public void HandleNullForeignKey(IProperty property, bool setModified, bool isCascadeDelete);
    private static bool AreEqual(object value, object otherValue, IProperty property);
    private static bool AreEqual(object value, object otherValue, IProperty property, Func`3<object, object, bool> equals);
    public void AcceptChanges();
    public InternalEntityEntry PrepareToSave();
    public void HandleConceptualNulls(bool sensitiveLoggingEnabled, bool force, bool isCascadeDelete);
    public void DiscardStoreGeneratedValues();
    public sealed virtual bool IsStoreGenerated(IProperty property);
    public bool HasDefaultValue(IProperty property);
    [NullableContextAttribute("0")]
public ValueTuple`2<bool, bool> get_IsKeySet();
    public bool get_IsKeyUnknown();
    public sealed virtual EntityEntry ToEntityEntry();
    public void HandleINotifyPropertyChanging(object sender, PropertyChangingEventArgs eventArgs);
    public void HandleINotifyPropertyChanged(object sender, PropertyChangedEventArgs eventArgs);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry/<GetNotificationProperties>d__121")]
private static IEnumerable`1<IPropertyBase> GetNotificationProperties(IEntityType entityType, string propertyName);
    public void HandleINotifyCollectionChanged(object sender, NotifyCollectionChangedEventArgs eventArgs);
    public void SetIsLoaded(INavigationBase navigation, bool loaded);
    public bool IsLoaded(INavigationBase navigation);
    public virtual string ToString();
    public DebugView get_DebugView();
    private sealed virtual override IUpdateEntry Microsoft.EntityFrameworkCore.Update.IUpdateEntry.get_SharedIdentityEntry();
    [CompilerGeneratedAttribute]
private void <SetEntityState>g__Setup|28_0(<>c__DisplayClass28_0& );
    [CompilerGeneratedAttribute]
private bool <SetProperty>b__104_0(IForeignKey fk);
    [CompilerGeneratedAttribute]
private void <PrepareToSave>g__CheckForUnknownKey|109_0(IProperty property, <>c__DisplayClass109_0& );
    [CompilerGeneratedAttribute]
private bool <HandleConceptualNulls>b__110_2(IProperty p);
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__127_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__127_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryNotifier : object {
    private ILocalViewListener _localViewListener;
    private IChangeDetector _changeDetector;
    private INavigationFixer _navigationFixer;
    public InternalEntityEntryNotifier(ILocalViewListener localViewListener, IChangeDetector changeDetector, INavigationFixer navigationFixer);
    public virtual void StateChanging(InternalEntityEntry entry, EntityState newState);
    public virtual void StateChanged(InternalEntityEntry entry, EntityState oldState, bool fromQuery);
    public virtual void FixupResolved(InternalEntityEntry entry, InternalEntityEntry duplicateEntry);
    public virtual void TrackedFromQuery(InternalEntityEntry entry);
    public virtual void NavigationReferenceChanged(InternalEntityEntry entry, INavigation navigation, object oldValue, object newValue);
    public virtual void NavigationCollectionChanged(InternalEntityEntry entry, INavigationBase navigationBase, IEnumerable`1<object> added, IEnumerable`1<object> removed);
    public virtual void KeyPropertyChanged(InternalEntityEntry entry, IProperty property, IEnumerable`1<IKey> keys, IEnumerable`1<IForeignKey> foreignKeys, object oldValue, object newValue);
    public virtual void PropertyChanged(InternalEntityEntry entry, IPropertyBase property, bool setModified);
    public virtual void PropertyChanging(InternalEntityEntry entry, IPropertyBase property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntrySubscriber : object {
    public virtual bool SnapshotAndSubscribe(InternalEntityEntry entry);
    public virtual void SubscribeCollectionChanged(InternalEntityEntry entry, INavigationBase navigation);
    public virtual void Unsubscribe(InternalEntityEntry entry);
    public virtual void UnsubscribeCollectionChanged(InternalEntityEntry entry, INavigationBase navigation);
    private static INotifyCollectionChanged AsINotifyCollectionChanged(InternalEntityEntry entry, INavigationBase navigation, IEntityType entityType, ChangeTrackingStrategy changeTrackingStrategy);
    private static INotifyPropertyChanged AsINotifyPropertyChanged(InternalEntityEntry entry, IEntityType entityType, ChangeTrackingStrategy changeTrackingStrategy);
    private static INotifyPropertyChanging AsINotifyPropertyChanging(InternalEntityEntry entry, IEntityType entityType, ChangeTrackingStrategy changeTrackingStrategy);
}
[NullableContextAttribute("2")]
[DefaultMemberAttribute("Item")]
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ISnapshot {
    public object Item { get; public set; }
    public abstract virtual object get_Item(int index);
    public abstract virtual void set_Item(int index, object value);
    [NullableContextAttribute("1")]
public abstract virtual T GetValue(int index);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IStateManager {
    public StateManagerDependencies Dependencies { get; }
    public CascadeTiming DeleteOrphansTiming { get; public set; }
    public CascadeTiming CascadeDeleteTiming { get; public set; }
    public bool SavingChanges { get; }
    public IEnumerable`1<InternalEntityEntry> Entries { get; }
    public int Count { get; }
    public int ChangedCount { get; public set; }
    public IInternalEntityEntryNotifier InternalEntityEntryNotifier { get; }
    public IValueGenerationManager ValueGenerationManager { get; }
    public DbContext Context { get; }
    public IModel Model { get; }
    public IEntityMaterializerSource EntityMaterializerSource { get; }
    public bool SensitiveLoggingEnabled { get; }
    public IDiagnosticsLogger`1<Update> UpdateLogger { get; }
    public abstract virtual StateManagerDependencies get_Dependencies();
    public abstract virtual CascadeTiming get_DeleteOrphansTiming();
    public abstract virtual void set_DeleteOrphansTiming(CascadeTiming value);
    public abstract virtual CascadeTiming get_CascadeDeleteTiming();
    public abstract virtual void set_CascadeDeleteTiming(CascadeTiming value);
    public abstract virtual bool get_SavingChanges();
    public abstract virtual InternalEntityEntry GetOrCreateEntry(object entity);
    public abstract virtual InternalEntityEntry GetOrCreateEntry(object entity, IEntityType entityType);
    public abstract virtual InternalEntityEntry CreateEntry(IDictionary`2<string, object> values, IEntityType entityType);
    public abstract virtual InternalEntityEntry StartTrackingFromQuery(IEntityType baseEntityType, object entity, ValueBuffer& modreq(System.Runtime.InteropServices.InAttribute) valueBuffer);
    public abstract virtual InternalEntityEntry TryGetEntry(IKey key, Object[] keyValues);
    public abstract virtual InternalEntityEntry TryGetEntry(IKey key, Object[] keyValues, bool throwOnNullKey, Boolean& hasNullKey);
    public abstract virtual InternalEntityEntry TryGetEntry(object entity, bool throwOnNonUniqueness);
    public abstract virtual InternalEntityEntry TryGetEntry(object entity, IEntityType type, bool throwOnTypeMismatch);
    public abstract virtual IEnumerable`1<InternalEntityEntry> get_Entries();
    public abstract virtual IEnumerable`1<InternalEntityEntry> GetEntriesForState(bool added, bool modified, bool deleted, bool unchanged, bool returnSharedIdentity);
    public abstract virtual int GetCountForState(bool added, bool modified, bool deleted, bool unchanged, bool returnSharedIdentity);
    public abstract virtual int get_Count();
    public abstract virtual IEnumerable`1<TEntity> GetNonDeletedEntities();
    public abstract virtual int get_ChangedCount();
    public abstract virtual void set_ChangedCount(int value);
    public abstract virtual IInternalEntityEntryNotifier get_InternalEntityEntryNotifier();
    public abstract virtual void ChangingState(InternalEntityEntry entry, EntityState newState);
    public abstract virtual IValueGenerationManager get_ValueGenerationManager();
    public abstract virtual DbContext get_Context();
    public abstract virtual IModel get_Model();
    public abstract virtual IEntityMaterializerSource get_EntityMaterializerSource();
    public abstract virtual InternalEntityEntry StartTracking(InternalEntityEntry entry);
    public abstract virtual void StopTracking(InternalEntityEntry entry, EntityState oldState);
    public abstract virtual void RecordReferencedUntrackedEntity(object referencedEntity, INavigationBase navigation, InternalEntityEntry referencedFromEntry);
    public abstract virtual void UpdateReferencedUntrackedEntity(object referencedEntity, object newReferencedEntity, INavigationBase navigation, InternalEntityEntry referencedFromEntry);
    [NullableContextAttribute("2")]
public abstract virtual bool ResolveToExistingEntry(InternalEntityEntry newEntry, INavigationBase navigation, InternalEntityEntry referencedFromEntry);
    public abstract virtual IEnumerable`1<Tuple`2<INavigationBase, InternalEntityEntry>> GetRecordedReferrers(object referencedEntity, bool clear);
    public abstract virtual void BeginAttachGraph();
    public abstract virtual void CompleteAttachGraph();
    public abstract virtual void AbortAttachGraph();
    public abstract virtual InternalEntityEntry FindPrincipal(InternalEntityEntry dependentEntry, IForeignKey foreignKey);
    public abstract virtual InternalEntityEntry FindPrincipalUsingPreStoreGeneratedValues(InternalEntityEntry dependentEntry, IForeignKey foreignKey);
    public abstract virtual InternalEntityEntry FindPrincipalUsingRelationshipSnapshot(InternalEntityEntry dependentEntry, IForeignKey foreignKey);
    public abstract virtual void UpdateIdentityMap(InternalEntityEntry entry, IKey principalKey);
    public abstract virtual void UpdateDependentMap(InternalEntityEntry entry, IForeignKey foreignKey);
    public abstract virtual IEnumerable`1<IUpdateEntry> GetDependentsFromNavigation(IUpdateEntry principalEntry, IForeignKey foreignKey);
    public abstract virtual IEnumerable`1<IUpdateEntry> GetDependents(IUpdateEntry principalEntry, IForeignKey foreignKey);
    public abstract virtual IEnumerable`1<IUpdateEntry> GetDependentsUsingRelationshipSnapshot(IUpdateEntry principalEntry, IForeignKey foreignKey);
    public abstract virtual IList`1<IUpdateEntry> GetEntriesToSave(bool cascadeChanges);
    public abstract virtual int SaveChanges(bool acceptAllChangesOnSuccess);
    public abstract virtual Task`1<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken);
    public abstract virtual void AcceptAllChanges();
    public abstract virtual IEntityFinder CreateEntityFinder(IEntityType entityType);
    public abstract virtual void Unsubscribe();
    public abstract virtual ValueTuple`4<EventHandler`1<EntityTrackingEventArgs>, EventHandler`1<EntityTrackedEventArgs>, EventHandler`1<EntityStateChangingEventArgs>, EventHandler`1<EntityStateChangedEventArgs>> CaptureEvents();
    public abstract virtual void SetEvents(EventHandler`1<EntityTrackingEventArgs> tracking, EventHandler`1<EntityTrackedEventArgs> tracked, EventHandler`1<EntityStateChangingEventArgs> stateChanging, EventHandler`1<EntityStateChangedEventArgs> stateChanged);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Tracking(EventHandler`1<EntityTrackingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Tracking(EventHandler`1<EntityTrackingEventArgs> value);
    public abstract virtual void OnTracking(InternalEntityEntry internalEntityEntry, EntityState state, bool fromQuery);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Tracked(EventHandler`1<EntityTrackedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Tracked(EventHandler`1<EntityTrackedEventArgs> value);
    public abstract virtual void OnTracked(InternalEntityEntry internalEntityEntry, bool fromQuery);
    [CompilerGeneratedAttribute]
public abstract virtual void add_StateChanging(EventHandler`1<EntityStateChangingEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StateChanging(EventHandler`1<EntityStateChangingEventArgs> value);
    public abstract virtual void OnStateChanging(InternalEntityEntry internalEntityEntry, EntityState newState);
    [CompilerGeneratedAttribute]
public abstract virtual void add_StateChanged(EventHandler`1<EntityStateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StateChanged(EventHandler`1<EntityStateChangedEventArgs> value);
    public abstract virtual void OnStateChanged(InternalEntityEntry internalEntityEntry, EntityState oldState);
    public abstract virtual bool get_SensitiveLoggingEnabled();
    public abstract virtual void CascadeChanges(bool force);
    public abstract virtual void CascadeDelete(InternalEntityEntry entry, bool force, IEnumerable`1<IForeignKey> foreignKeys);
    public abstract virtual IDiagnosticsLogger`1<Update> get_UpdateLogger();
    public abstract virtual void Clear();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IValueGenerationManager {
    public abstract virtual bool Generate(InternalEntityEntry entry, bool includePrimaryKey);
    public abstract virtual InternalEntityEntry Propagate(InternalEntityEntry entry);
    public abstract virtual Task`1<InternalEntityEntry> PropagateAsync(InternalEntityEntry entry, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> GenerateAsync(InternalEntityEntry entry, bool includePrimaryKey, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.KeyPropagator : object {
    private IValueGeneratorSelector _valueGeneratorSelector;
    public KeyPropagator(IValueGeneratorSelector valueGeneratorSelector);
    public virtual InternalEntityEntry PropagateValue(InternalEntityEntry entry, IProperty property);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.Internal.KeyPropagator/<PropagateValueAsync>d__3")]
public virtual Task`1<InternalEntityEntry> PropagateValueAsync(InternalEntityEntry entry, IProperty property, CancellationToken cancellationToken);
    private static void SetValue(InternalEntityEntry entry, IProperty property, ValueGenerator valueGenerator, object value);
    private static InternalEntityEntry TryPropagateValue(InternalEntityEntry entry, IProperty property, IProperty generationProperty);
    private ValueGenerator TryGetValueGenerator(IProperty generationProperty, IEntityType entityType);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.KeyValueFactoryFactory : object {
    [NullableContextAttribute("1")]
public virtual IPrincipalKeyValueFactory`1<TKey> Create(IKey key);
    private static SimplePrincipalKeyValueFactory`1<TKey> CreateSimpleFactory(IKey key);
    private static CompositePrincipalKeyValueFactory CreateCompositeFactory(IKey key);
    private static void SetFactories(IForeignKey foreignKey, IDependentKeyValueFactory dependentKeyValueFactory, Func`1<IDependentsMap> dependentsMapFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.LocalViewListener : object {
    private IList`1<Action`2<InternalEntityEntry, EntityState>> _viewActions;
    public virtual void RegisterView(Action`2<InternalEntityEntry, EntityState> viewAction);
    public virtual void StateChanged(InternalEntityEntry entry, EntityState oldState, bool fromQuery);
    public virtual void StateChanging(InternalEntityEntry entry, EntityState newState);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.MultiSnapshot : ValueType {
    private ISnapshot[] _snapshots;
    internal static ConstructorInfo Constructor;
    [NullableAttribute("2")]
public object Item { get; public set; }
    public MultiSnapshot(ISnapshot[] snapshots);
    private static MultiSnapshot();
    public sealed virtual T GetValue(int index);
    [NullableContextAttribute("2")]
public sealed virtual object get_Item(int index);
    [NullableContextAttribute("2")]
public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NavigationFixer : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IList`1<ValueTuple`5<InternalEntityEntry, InternalEntityEntry, ISkipNavigation, bool, bool>> _danglingJoinEntities;
    private IEntityGraphAttacher _attacher;
    private IEntityMaterializerSource _entityMaterializerSource;
    private bool _inFixup;
    private bool _inAttachGraph;
    public NavigationFixer(IEntityGraphAttacher attacher, IEntityMaterializerSource entityMaterializerSource);
    public virtual bool BeginDelayedFixup();
    public virtual void CompleteDelayedFixup();
    public virtual void AbortDelayedFixup();
    public virtual void NavigationReferenceChanged(InternalEntityEntry entry, INavigationBase navigationBase, object oldValue, object newValue);
    public virtual void NavigationCollectionChanged(InternalEntityEntry entry, INavigationBase navigationBase, IEnumerable`1<object> added, IEnumerable`1<object> removed);
    public virtual void KeyPropertyChanged(InternalEntityEntry entry, IProperty property, IEnumerable`1<IKey> containingPrincipalKeys, IEnumerable`1<IForeignKey> containingForeignKeys, object oldValue, object newValue);
    public virtual void StateChanging(InternalEntityEntry entry, EntityState newState);
    public virtual void TrackedFromQuery(InternalEntityEntry entry);
    public virtual void StateChanged(InternalEntityEntry entry, EntityState oldState, bool fromQuery);
    public virtual void FixupResolved(InternalEntityEntry entry, InternalEntityEntry duplicateEntry);
    private void DeleteFixup(InternalEntityEntry entry);
    private void InitialFixup(InternalEntityEntry entry, InternalEntityEntry duplicateEntry, bool fromQuery);
    private static bool IsAmbiguous(InternalEntityEntry dependentEntry);
    private void DelayedFixup(InternalEntityEntry entry, INavigationBase navigationBase, InternalEntityEntry referencedEntry, bool fromQuery);
    private void FixupSkipNavigations(InternalEntityEntry entry, IForeignKey foreignKey, bool fromQuery);
    private void FindOrCreateJoinEntry(ValueTuple`5<InternalEntityEntry, InternalEntityEntry, ISkipNavigation, bool, bool> arguments);
    private static InternalEntityEntry FindJoinEntry(InternalEntityEntry entry, InternalEntityEntry otherEntry, ISkipNavigation skipNavigation);
    private void FixupToDependent(InternalEntityEntry principalEntry, InternalEntityEntry dependentEntry, IForeignKey foreignKey, bool setModified, bool fromQuery);
    private void FixupToPrincipal(InternalEntityEntry dependentEntry, InternalEntityEntry principalEntry, IForeignKey foreignKey, bool setModified, bool fromQuery);
    private void ToDependentFixup(InternalEntityEntry dependentEntry, InternalEntityEntry principalEntry, IForeignKey foreignKey, bool fromQuery);
    private static void SetForeignKeyProperties(InternalEntityEntry dependentEntry, InternalEntityEntry principalEntry, IForeignKey foreignKey, bool setModified, bool fromQuery);
    private static void UndeleteDependent(InternalEntityEntry dependentEntry, InternalEntityEntry principalEntry);
    private static bool PrincipalValueEqualsDependentValue(IProperty principalProperty, object dependentValue, object principalValue);
    private void ConditionallyNullForeignKeyProperties(InternalEntityEntry dependentEntry, InternalEntityEntry principalEntry, IForeignKey foreignKey);
    private static bool CanOverrideCurrentValue(InternalEntityEntry entry, INavigationBase navigation, InternalEntityEntry value, bool fromQuery);
    private void SetNavigation(InternalEntityEntry entry, INavigationBase navigation, InternalEntityEntry value, bool fromQuery);
    private void AddToCollection(InternalEntityEntry entry, INavigationBase navigation, InternalEntityEntry value, bool fromQuery);
    private void RemoveFromCollection(InternalEntityEntry entry, INavigationBase navigation, InternalEntityEntry value);
    private void SetReferenceOrAddToCollection(InternalEntityEntry entry, INavigationBase navigation, InternalEntityEntry value, bool fromQuery);
    private void ResetReferenceOrRemoveCollection(InternalEntityEntry entry, INavigationBase navigation, InternalEntityEntry value, bool fromQuery);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NullableClassCurrentProviderValueComparer`2 : object {
    private IPropertyBase _property;
    private IComparer`1<TProvider> _underlyingComparer;
    private Func`2<TModel, TProvider> _converter;
    public NullableClassCurrentProviderValueComparer`2(IPropertyBase property, ValueConverter`2<TModel, TProvider> converter);
    [NullableContextAttribute("2")]
public virtual int Compare(IUpdateEntry x, IUpdateEntry y);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NullableKeyIdentityMap`1 : IdentityMap`1<TKey> {
    public NullableKeyIdentityMap`1(IKey key, IPrincipalKeyValueFactory`1<TKey> principalKeyValueFactory, bool sensitiveLoggingEnabled);
    public virtual void Add(InternalEntityEntry entry);
    public virtual void RemoveUsingRelationshipSnapshot(InternalEntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.NullableStructCurrentProviderValueComparer`2 : object {
    private IPropertyBase _property;
    private IComparer`1<TProvider> _underlyingComparer;
    private Func`2<TModel, TProvider> _converter;
    [NullableContextAttribute("1")]
public NullableStructCurrentProviderValueComparer`2(IPropertyBase property, ValueConverter`2<TModel, TProvider> converter);
    [NullableContextAttribute("2")]
public virtual int Compare(IUpdateEntry x, IUpdateEntry y);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.OriginalPropertyValues : EntryPropertyValues {
    public OriginalPropertyValues(InternalEntityEntry internalEntry);
    public virtual TValue GetValue(string propertyName);
    public virtual TValue GetValue(IProperty property);
    protected virtual void SetValueInternal(IProperty property, object value);
    protected virtual object GetValueInternal(IProperty property);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.OriginalValuesFactoryFactory : SnapshotFactoryFactory`1<InternalEntityEntry> {
    protected virtual int GetPropertyIndex(IPropertyBase propertyBase);
    protected virtual int GetPropertyCount(IEntityType entityType);
    protected virtual ValueComparer GetValueComparer(IProperty property);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.RelationshipSnapshotFactoryFactory : SnapshotFactoryFactory`1<InternalEntityEntry> {
    protected virtual int GetPropertyIndex(IPropertyBase propertyBase);
    protected virtual int GetPropertyCount(IEntityType entityType);
    protected virtual ValueComparer GetValueComparer(IProperty property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ShadowValuesFactoryFactory : SnapshotFactoryFactory`1<ValueBuffer> {
    protected bool UseEntityVariable { get; }
    protected virtual int GetPropertyIndex(IPropertyBase propertyBase);
    protected virtual int GetPropertyCount(IEntityType entityType);
    protected virtual ValueComparer GetValueComparer(IProperty property);
    protected virtual bool get_UseEntityVariable();
    protected virtual Expression CreateReadShadowValueExpression(ParameterExpression parameter, IPropertyBase property);
    protected virtual Expression CreateReadValueExpression(ParameterExpression parameter, IPropertyBase property);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SidecarValuesFactoryFactory : SnapshotFactoryFactory`1<InternalEntityEntry> {
    protected virtual int GetPropertyIndex(IPropertyBase propertyBase);
    protected virtual int GetPropertyCount(IEntityType entityType);
    protected virtual ValueComparer GetValueComparer(IProperty property);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleFullyNullableDependentKeyValueFactory`1 : DependentKeyValueFactory`1<TKey> {
    private PropertyAccessors _propertyAccessors;
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<TKey> <EqualityComparer>k__BackingField;
    public IEqualityComparer`1<TKey> EqualityComparer { get; }
    public SimpleFullyNullableDependentKeyValueFactory`1(IForeignKey foreignKey, IPrincipalKeyValueFactory`1<TKey> principalKeyValueFactory);
    [CompilerGeneratedAttribute]
public virtual IEqualityComparer`1<TKey> get_EqualityComparer();
    [NullableContextAttribute("2")]
public virtual bool TryCreateFromBuffer(ValueBuffer& modreq(System.Runtime.InteropServices.InAttribute) valueBuffer, TKey& key);
    public virtual bool TryCreateFromCurrentValues(IUpdateEntry entry, TKey& key);
    public virtual bool TryCreateFromPreStoreGeneratedCurrentValues(IUpdateEntry entry, TKey& key);
    public virtual bool TryCreateFromOriginalValues(IUpdateEntry entry, TKey& key);
    public virtual bool TryCreateFromRelationshipSnapshot(IUpdateEntry entry, TKey& key);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleNonNullableDependentKeyValueFactory`1 : DependentKeyValueFactory`1<TKey> {
    private PropertyAccessors _propertyAccessors;
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<TKey> <EqualityComparer>k__BackingField;
    public IEqualityComparer`1<TKey> EqualityComparer { get; }
    public SimpleNonNullableDependentKeyValueFactory`1(IForeignKey foreignKey, IPrincipalKeyValueFactory`1<TKey> principalKeyValueFactory);
    [CompilerGeneratedAttribute]
public virtual IEqualityComparer`1<TKey> get_EqualityComparer();
    [NullableContextAttribute("2")]
public virtual bool TryCreateFromBuffer(ValueBuffer& modreq(System.Runtime.InteropServices.InAttribute) valueBuffer, TKey& key);
    public virtual bool TryCreateFromCurrentValues(IUpdateEntry entry, TKey& key);
    public virtual bool TryCreateFromPreStoreGeneratedCurrentValues(IUpdateEntry entry, TKey& key);
    public virtual bool TryCreateFromOriginalValues(IUpdateEntry entry, TKey& key);
    public virtual bool TryCreateFromRelationshipSnapshot(IUpdateEntry entry, TKey& key);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleNullableDependentKeyValueFactory`1 : DependentKeyValueFactory`1<TKey> {
    private PropertyAccessors _propertyAccessors;
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<TKey> <EqualityComparer>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEqualityComparer`1<TKey> EqualityComparer { get; }
    [NullableContextAttribute("1")]
public SimpleNullableDependentKeyValueFactory`1(IForeignKey foreignKey, IPrincipalKeyValueFactory`1<TKey> principalKeyValueFactory);
    [CompilerGeneratedAttribute]
public virtual IEqualityComparer`1<TKey> get_EqualityComparer();
    public virtual bool TryCreateFromBuffer(ValueBuffer& modreq(System.Runtime.InteropServices.InAttribute) valueBuffer, TKey& key);
    public virtual bool TryCreateFromCurrentValues(IUpdateEntry entry, TKey& key);
    public virtual bool TryCreateFromPreStoreGeneratedCurrentValues(IUpdateEntry entry, TKey& key);
    public virtual bool TryCreateFromOriginalValues(IUpdateEntry entry, TKey& key);
    public virtual bool TryCreateFromRelationshipSnapshot(IUpdateEntry entry, TKey& key);
    private static bool HandleNullableValue(Nullable`1<TKey> value, TKey& key);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimpleNullablePrincipalDependentKeyValueFactory`2 : DependentKeyValueFactory`1<TKey> {
    private PropertyAccessors _propertyAccessors;
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<TKey> <EqualityComparer>k__BackingField;
    public IEqualityComparer`1<TKey> EqualityComparer { get; }
    public SimpleNullablePrincipalDependentKeyValueFactory`2(IForeignKey foreignKey, IPrincipalKeyValueFactory`1<TKey> principalKeyValueFactory);
    [CompilerGeneratedAttribute]
public virtual IEqualityComparer`1<TKey> get_EqualityComparer();
    [NullableContextAttribute("2")]
public virtual bool TryCreateFromBuffer(ValueBuffer& modreq(System.Runtime.InteropServices.InAttribute) valueBuffer, TKey& key);
    public virtual bool TryCreateFromCurrentValues(IUpdateEntry entry, TKey& key);
    public virtual bool TryCreateFromPreStoreGeneratedCurrentValues(IUpdateEntry entry, TKey& key);
    public virtual bool TryCreateFromOriginalValues(IUpdateEntry entry, TKey& key);
    public virtual bool TryCreateFromRelationshipSnapshot(IUpdateEntry entry, TKey& key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SimplePrincipalKeyValueFactory`1 : object {
    private IKey _key;
    private IProperty _property;
    private PropertyAccessors _propertyAccessors;
    [CompilerGeneratedAttribute]
private IEqualityComparer`1<TKey> <EqualityComparer>k__BackingField;
    public IEqualityComparer`1<TKey> EqualityComparer { get; }
    public SimplePrincipalKeyValueFactory`1(IKey key);
    [NullableContextAttribute("2")]
public virtual object CreateFromKeyValues(Object[] keyValues);
    [NullableContextAttribute("2")]
public virtual object CreateFromBuffer(ValueBuffer valueBuffer);
    public virtual IProperty FindNullPropertyInKeyValues(Object[] keyValues);
    public virtual TKey CreateFromCurrentValues(IUpdateEntry entry);
    public virtual IProperty FindNullPropertyInCurrentValues(IUpdateEntry entry);
    public virtual TKey CreateFromOriginalValues(IUpdateEntry entry);
    public virtual TKey CreateFromRelationshipSnapshot(IUpdateEntry entry);
    [CompilerGeneratedAttribute]
public virtual IEqualityComparer`1<TKey> get_EqualityComparer();
    public virtual object CreateEquatableKey(IUpdateEntry entry, bool fromOriginalValues);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot : object {
    public static int MaxGenericTypes;
    public static ISnapshot Empty;
    [NullableAttribute("2")]
public object Item { get; public set; }
    private static Snapshot();
    [NullableContextAttribute("2")]
public sealed virtual object get_Item(int index);
    [NullableContextAttribute("2")]
public sealed virtual void set_Item(int index, object value);
    public sealed virtual T GetValue(int index);
    public static Delegate[] CreateReaders();
    public static Type CreateSnapshotType(Type[] types);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`1 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`1(T0 value0);
    private static Snapshot`1();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`10 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`10(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9);
    private static Snapshot`10();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`11 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`11(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10);
    private static Snapshot`11();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`12 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`12(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11);
    private static Snapshot`12();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`13 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`13(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12);
    private static Snapshot`13();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`14 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`14(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13);
    private static Snapshot`14();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`15 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`15(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14);
    private static Snapshot`15();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`16 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`16(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15);
    private static Snapshot`16();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`17 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`17(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16);
    private static Snapshot`17();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`18 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    private T17 _value17;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`18(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16, T17 value17);
    private static Snapshot`18();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`19 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    private T17 _value17;
    private T18 _value18;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`19(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16, T17 value17, T18 value18);
    private static Snapshot`19();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`2 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`2(T0 value0, T1 value1);
    private static Snapshot`2();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`20 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    private T17 _value17;
    private T18 _value18;
    private T19 _value19;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`20(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16, T17 value17, T18 value18, T19 value19);
    private static Snapshot`20();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`21 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    private T17 _value17;
    private T18 _value18;
    private T19 _value19;
    private T20 _value20;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`21(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16, T17 value17, T18 value18, T19 value19, T20 value20);
    private static Snapshot`21();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`22 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    private T17 _value17;
    private T18 _value18;
    private T19 _value19;
    private T20 _value20;
    private T21 _value21;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`22(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16, T17 value17, T18 value18, T19 value19, T20 value20, T21 value21);
    private static Snapshot`22();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`23 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    private T17 _value17;
    private T18 _value18;
    private T19 _value19;
    private T20 _value20;
    private T21 _value21;
    private T22 _value22;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`23(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16, T17 value17, T18 value18, T19 value19, T20 value20, T21 value21, T22 value22);
    private static Snapshot`23();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`24 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    private T17 _value17;
    private T18 _value18;
    private T19 _value19;
    private T20 _value20;
    private T21 _value21;
    private T22 _value22;
    private T23 _value23;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`24(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16, T17 value17, T18 value18, T19 value19, T20 value20, T21 value21, T22 value22, T23 value23);
    private static Snapshot`24();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`25 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    private T17 _value17;
    private T18 _value18;
    private T19 _value19;
    private T20 _value20;
    private T21 _value21;
    private T22 _value22;
    private T23 _value23;
    private T24 _value24;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`25(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16, T17 value17, T18 value18, T19 value19, T20 value20, T21 value21, T22 value22, T23 value23, T24 value24);
    private static Snapshot`25();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`26 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    private T17 _value17;
    private T18 _value18;
    private T19 _value19;
    private T20 _value20;
    private T21 _value21;
    private T22 _value22;
    private T23 _value23;
    private T24 _value24;
    private T25 _value25;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`26(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16, T17 value17, T18 value18, T19 value19, T20 value20, T21 value21, T22 value22, T23 value23, T24 value24, T25 value25);
    private static Snapshot`26();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`27 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    private T17 _value17;
    private T18 _value18;
    private T19 _value19;
    private T20 _value20;
    private T21 _value21;
    private T22 _value22;
    private T23 _value23;
    private T24 _value24;
    private T25 _value25;
    private T26 _value26;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`27(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16, T17 value17, T18 value18, T19 value19, T20 value20, T21 value21, T22 value22, T23 value23, T24 value24, T25 value25, T26 value26);
    private static Snapshot`27();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`28 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    private T17 _value17;
    private T18 _value18;
    private T19 _value19;
    private T20 _value20;
    private T21 _value21;
    private T22 _value22;
    private T23 _value23;
    private T24 _value24;
    private T25 _value25;
    private T26 _value26;
    private T27 _value27;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`28(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16, T17 value17, T18 value18, T19 value19, T20 value20, T21 value21, T22 value22, T23 value23, T24 value24, T25 value25, T26 value26, T27 value27);
    private static Snapshot`28();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`29 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    private T17 _value17;
    private T18 _value18;
    private T19 _value19;
    private T20 _value20;
    private T21 _value21;
    private T22 _value22;
    private T23 _value23;
    private T24 _value24;
    private T25 _value25;
    private T26 _value26;
    private T27 _value27;
    private T28 _value28;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`29(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16, T17 value17, T18 value18, T19 value19, T20 value20, T21 value21, T22 value22, T23 value23, T24 value24, T25 value25, T26 value26, T27 value27, T28 value28);
    private static Snapshot`29();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`3 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`3(T0 value0, T1 value1, T2 value2);
    private static Snapshot`3();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`30 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    private T9 _value9;
    private T10 _value10;
    private T11 _value11;
    private T12 _value12;
    private T13 _value13;
    private T14 _value14;
    private T15 _value15;
    private T16 _value16;
    private T17 _value17;
    private T18 _value18;
    private T19 _value19;
    private T20 _value20;
    private T21 _value21;
    private T22 _value22;
    private T23 _value23;
    private T24 _value24;
    private T25 _value25;
    private T26 _value26;
    private T27 _value27;
    private T28 _value28;
    private T29 _value29;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`30(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8, T9 value9, T10 value10, T11 value11, T12 value12, T13 value13, T14 value14, T15 value15, T16 value16, T17 value17, T18 value18, T19 value19, T20 value20, T21 value21, T22 value22, T23 value23, T24 value24, T25 value25, T26 value26, T27 value27, T28 value28, T29 value29);
    private static Snapshot`30();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`4 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`4(T0 value0, T1 value1, T2 value2, T3 value3);
    private static Snapshot`4();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`5 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`5(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4);
    private static Snapshot`5();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`6 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`6(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5);
    private static Snapshot`6();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`7 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`7(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6);
    private static Snapshot`7();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`8 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`8(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7);
    private static Snapshot`8();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.Snapshot`9 : object {
    private static Delegate[] ValueReaders;
    private T0 _value0;
    private T1 _value1;
    private T2 _value2;
    private T3 _value3;
    private T4 _value4;
    private T5 _value5;
    private T6 _value6;
    private T7 _value7;
    private T8 _value8;
    public object Item { get; public set; }
    [NullableContextAttribute("1")]
public Snapshot`9(T0 value0, T1 value1, T2 value2, T3 value3, T4 value4, T5 value5, T6 value6, T7 value7, T8 value8);
    private static Snapshot`9();
    [NullableContextAttribute("1")]
public sealed virtual T GetValue(int index);
    public sealed virtual object get_Item(int index);
    public sealed virtual void set_Item(int index, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory : object {
    private static MethodInfo SnapshotCollectionMethod;
    protected bool UseEntityVariable { get; }
    private static SnapshotFactoryFactory();
    public virtual Func`1<ISnapshot> CreateEmpty(IEntityType entityType);
    protected virtual Expression CreateConstructorExpression(IEntityType entityType, ParameterExpression parameter);
    protected virtual Expression CreateSnapshotExpression(Type entityType, ParameterExpression parameter, Type[] types, IList`1<IPropertyBase> propertyBases);
    private Expression CreateSnapshotValueExpression(Expression expression, IPropertyBase propertyBase);
    protected abstract virtual ValueComparer GetValueComparer(IProperty property);
    protected virtual Expression CreateReadShadowValueExpression(ParameterExpression parameter, IPropertyBase property);
    protected virtual Expression CreateReadValueExpression(ParameterExpression parameter, IPropertyBase property);
    protected abstract virtual int GetPropertyIndex(IPropertyBase propertyBase);
    protected abstract virtual int GetPropertyCount(IEntityType entityType);
    protected virtual bool get_UseEntityVariable();
    [UsedImplicitlyAttribute]
private static HashSet`1<object> SnapshotCollection(IEnumerable`1<object> collection);
}
public abstract class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.SnapshotFactoryFactory`1 : SnapshotFactoryFactory {
    [NullableContextAttribute("1")]
public virtual Func`2<TInput, ISnapshot> Create(IEntityType entityType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager : object {
    private EntityReferenceMap _entityReferenceMap;
    private IDictionary`2<object, IList`1<Tuple`2<INavigationBase, InternalEntityEntry>>> _referencedUntrackedEntities;
    private IIdentityMap _identityMap0;
    private IIdentityMap _identityMap1;
    private Dictionary`2<IKey, IIdentityMap> _identityMaps;
    private bool _needsUnsubscribe;
    private IChangeDetector _changeDetector;
    private IDiagnosticsLogger`1<ChangeTracking> _changeTrackingLogger;
    private IInternalEntityEntrySubscriber _internalEntityEntrySubscriber;
    private IModel _model;
    private IDatabase _database;
    private IConcurrencyDetector _concurrencyDetector;
    private IIdentityResolutionInterceptor _resolutionInterceptor;
    [CompilerGeneratedAttribute]
private StateManagerDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SensitiveLoggingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Update> <UpdateLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private CascadeTiming <DeleteOrphansTiming>k__BackingField;
    [CompilerGeneratedAttribute]
private CascadeTiming <CascadeDeleteTiming>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SavingChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private IInternalEntityEntryNotifier <InternalEntityEntryNotifier>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueGenerationManager <ValueGenerationManager>k__BackingField;
    [CompilerGeneratedAttribute]
private DbContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityFinderFactory <EntityFinderFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityMaterializerSource <EntityMaterializerSource>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ChangedCount>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EntityTrackingEventArgs> Tracking;
    [CompilerGeneratedAttribute]
private EventHandler`1<EntityTrackedEventArgs> Tracked;
    [CompilerGeneratedAttribute]
private EventHandler`1<EntityStateChangingEventArgs> StateChanging;
    [CompilerGeneratedAttribute]
private EventHandler`1<EntityStateChangedEventArgs> StateChanged;
    public StateManagerDependencies Dependencies { get; }
    public bool SensitiveLoggingEnabled { get; }
    public IDiagnosticsLogger`1<Update> UpdateLogger { get; }
    public CascadeTiming DeleteOrphansTiming { get; public set; }
    public CascadeTiming CascadeDeleteTiming { get; public set; }
    public bool SavingChanges { get; public set; }
    public IInternalEntityEntryNotifier InternalEntityEntryNotifier { get; }
    public IValueGenerationManager ValueGenerationManager { get; }
    public DbContext Context { get; }
    public IModel Model { get; }
    public IEntityFinderFactory EntityFinderFactory { get; }
    public IEntityMaterializerSource EntityMaterializerSource { get; }
    public IChangeDetector ChangeDetector { get; }
    public int Count { get; }
    public IEnumerable`1<InternalEntityEntry> Entries { get; }
    public int ChangedCount { get; public set; }
    public StateManager(StateManagerDependencies dependencies);
    [CompilerGeneratedAttribute]
public virtual StateManagerDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
public virtual bool get_SensitiveLoggingEnabled();
    [CompilerGeneratedAttribute]
public virtual IDiagnosticsLogger`1<Update> get_UpdateLogger();
    [CompilerGeneratedAttribute]
public virtual CascadeTiming get_DeleteOrphansTiming();
    [CompilerGeneratedAttribute]
public virtual void set_DeleteOrphansTiming(CascadeTiming value);
    [CompilerGeneratedAttribute]
public virtual CascadeTiming get_CascadeDeleteTiming();
    [CompilerGeneratedAttribute]
public virtual void set_CascadeDeleteTiming(CascadeTiming value);
    [CompilerGeneratedAttribute]
public virtual bool get_SavingChanges();
    [CompilerGeneratedAttribute]
public virtual void set_SavingChanges(bool value);
    [CompilerGeneratedAttribute]
public virtual IInternalEntityEntryNotifier get_InternalEntityEntryNotifier();
    public virtual void ChangingState(InternalEntityEntry entry, EntityState newState);
    [CompilerGeneratedAttribute]
public virtual IValueGenerationManager get_ValueGenerationManager();
    [CompilerGeneratedAttribute]
public virtual DbContext get_Context();
    public virtual IModel get_Model();
    [CompilerGeneratedAttribute]
public virtual IEntityFinderFactory get_EntityFinderFactory();
    [CompilerGeneratedAttribute]
public virtual IEntityMaterializerSource get_EntityMaterializerSource();
    public IChangeDetector get_ChangeDetector();
    public virtual InternalEntityEntry GetOrCreateEntry(object entity);
    public virtual InternalEntityEntry GetOrCreateEntry(object entity, IEntityType entityType);
    public virtual InternalEntityEntry CreateEntry(IDictionary`2<string, object> values, IEntityType entityType);
    private void UpdateReferenceMaps(InternalEntityEntry entry, EntityState state, Nullable`1<EntityState> oldState);
    public virtual InternalEntityEntry StartTrackingFromQuery(IEntityType baseEntityType, object entity, ValueBuffer& modreq(System.Runtime.InteropServices.InAttribute) valueBuffer);
    public virtual InternalEntityEntry TryGetEntry(IKey key, Object[] keyValues);
    public virtual InternalEntityEntry TryGetEntry(IKey key, Object[] keyValues, bool throwOnNullKey, Boolean& hasNullKey);
    public virtual InternalEntityEntry TryGetEntry(object entity, bool throwOnNonUniqueness);
    public virtual InternalEntityEntry TryGetEntry(object entity, IEntityType entityType, bool throwOnTypeMismatch);
    private IIdentityMap GetOrCreateIdentityMap(IKey key);
    private IIdentityMap FindIdentityMap(IKey key);
    public virtual int GetCountForState(bool added, bool modified, bool deleted, bool unchanged, bool countDeletedSharedIdentity);
    public virtual int get_Count();
    public virtual IEnumerable`1<InternalEntityEntry> GetEntriesForState(bool added, bool modified, bool deleted, bool unchanged, bool returnDeletedSharedIdentity);
    public virtual IEnumerable`1<InternalEntityEntry> get_Entries();
    public virtual IEnumerable`1<TEntity> GetNonDeletedEntities();
    public virtual InternalEntityEntry StartTracking(InternalEntityEntry entry);
    public virtual void StopTracking(InternalEntityEntry entry, EntityState oldState);
    public virtual void Unsubscribe();
    public virtual void ResetState();
    public virtual void Clear();
    public virtual Task ResetStateAsync(CancellationToken cancellationToken);
    public virtual void BeginAttachGraph();
    public virtual void CompleteAttachGraph();
    public virtual void AbortAttachGraph();
    public virtual void RecordReferencedUntrackedEntity(object referencedEntity, INavigationBase navigation, InternalEntityEntry referencedFromEntry);
    public virtual void UpdateReferencedUntrackedEntity(object referencedEntity, object newReferencedEntity, INavigationBase navigation, InternalEntityEntry referencedFromEntry);
    [NullableContextAttribute("2")]
public virtual bool ResolveToExistingEntry(InternalEntityEntry newEntry, INavigationBase navigation, InternalEntityEntry referencedFromEntry);
    public virtual IEnumerable`1<Tuple`2<INavigationBase, InternalEntityEntry>> GetRecordedReferrers(object referencedEntity, bool clear);
    public virtual InternalEntityEntry FindPrincipal(InternalEntityEntry dependentEntry, IForeignKey foreignKey);
    public virtual InternalEntityEntry FindPrincipalUsingPreStoreGeneratedValues(InternalEntityEntry dependentEntry, IForeignKey foreignKey);
    public virtual InternalEntityEntry FindPrincipalUsingRelationshipSnapshot(InternalEntityEntry dependentEntry, IForeignKey foreignKey);
    private static InternalEntityEntry FilterIncompatiblePrincipal(IForeignKey foreignKey, InternalEntityEntry principalEntry);
    public virtual void UpdateIdentityMap(InternalEntityEntry entry, IKey key);
    public virtual void UpdateDependentMap(InternalEntityEntry entry, IForeignKey foreignKey);
    public virtual IEnumerable`1<IUpdateEntry> GetDependents(IUpdateEntry principalEntry, IForeignKey foreignKey);
    public virtual IEnumerable`1<IUpdateEntry> GetDependentsUsingRelationshipSnapshot(IUpdateEntry principalEntry, IForeignKey foreignKey);
    public virtual IEnumerable`1<IUpdateEntry> GetDependentsFromNavigation(IUpdateEntry principalEntry, IForeignKey foreignKey);
    public virtual IEntityFinder CreateEntityFinder(IEntityType entityType);
    [CompilerGeneratedAttribute]
public virtual int get_ChangedCount();
    [CompilerGeneratedAttribute]
public virtual void set_ChangedCount(int value);
    public virtual IList`1<IUpdateEntry> GetEntriesToSave(bool cascadeChanges);
    public virtual void CascadeChanges(bool force);
    public virtual void CascadeDelete(InternalEntityEntry entry, bool force, IEnumerable`1<IForeignKey> foreignKeys);
    private static bool KeysEqual(InternalEntityEntry entry, IForeignKey fk, InternalEntityEntry dependent);
    private static bool KeyValuesEqual(IProperty property, object value, object currentValue);
    protected virtual int SaveChanges(IList`1<IUpdateEntry> entriesToSave);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager/<SaveChangesAsync>d__106")]
protected virtual Task`1<int> SaveChangesAsync(IList`1<IUpdateEntry> entriesToSave, CancellationToken cancellationToken);
    public virtual int SaveChanges(bool acceptAllChangesOnSuccess);
    private static int SaveChanges(StateManager stateManager, bool acceptAllChangesOnSuccess);
    public virtual Task`1<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager/<SaveChangesAsync>d__110")]
private static Task`1<int> SaveChangesAsync(StateManager stateManager, bool acceptAllChangesOnSuccess, CancellationToken cancellationToken);
    public virtual void AcceptAllChanges();
    private static void AcceptAllChanges(IReadOnlyList`1<IUpdateEntry> changedEntries);
    public virtual ValueTuple`4<EventHandler`1<EntityTrackingEventArgs>, EventHandler`1<EntityTrackedEventArgs>, EventHandler`1<EntityStateChangingEventArgs>, EventHandler`1<EntityStateChangedEventArgs>> CaptureEvents();
    public virtual void SetEvents(EventHandler`1<EntityTrackingEventArgs> tracking, EventHandler`1<EntityTrackedEventArgs> tracked, EventHandler`1<EntityStateChangingEventArgs> stateChanging, EventHandler`1<EntityStateChangedEventArgs> stateChanged);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Tracking(EventHandler`1<EntityTrackingEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Tracking(EventHandler`1<EntityTrackingEventArgs> value);
    public virtual void OnTracking(InternalEntityEntry internalEntityEntry, EntityState state, bool fromQuery);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Tracked(EventHandler`1<EntityTrackedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Tracked(EventHandler`1<EntityTrackedEventArgs> value);
    public virtual void OnTracked(InternalEntityEntry internalEntityEntry, bool fromQuery);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StateChanging(EventHandler`1<EntityStateChangingEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StateChanging(EventHandler`1<EntityStateChangingEventArgs> value);
    public virtual void OnStateChanging(InternalEntityEntry internalEntityEntry, EntityState newState);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StateChanged(EventHandler`1<EntityStateChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StateChanged(EventHandler`1<EntityStateChangedEventArgs> value);
    public virtual void OnStateChanged(InternalEntityEntry internalEntityEntry, EntityState oldState);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerDependencies : object {
    [CompilerGeneratedAttribute]
private IInternalEntityEntrySubscriber <InternalEntityEntrySubscriber>k__BackingField;
    [CompilerGeneratedAttribute]
private IInternalEntityEntryNotifier <InternalEntityEntryNotifier>k__BackingField;
    [CompilerGeneratedAttribute]
private IValueGenerationManager <ValueGenerationManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private IDatabase <Database>k__BackingField;
    [CompilerGeneratedAttribute]
private IConcurrencyDetector <ConcurrencyDetector>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbSetSource <SetSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityFinderSource <EntityFinderSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityMaterializerSource <EntityMaterializerSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IExecutionStrategy <ExecutionStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private ICoreSingletonOptions <CoreSingletonOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ILoggingOptions <LoggingOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Update> <UpdateLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<ChangeTracking> <ChangeTrackingLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private INavigationFixer <NavigationFixer>k__BackingField;
    [CompilerGeneratedAttribute]
private IInterceptors <Interceptors>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IInternalEntityEntrySubscriber InternalEntityEntrySubscriber { get; public set; }
    public IInternalEntityEntryNotifier InternalEntityEntryNotifier { get; public set; }
    public IValueGenerationManager ValueGenerationManager { get; public set; }
    public IModel Model { get; public set; }
    public IDatabase Database { get; public set; }
    public IConcurrencyDetector ConcurrencyDetector { get; public set; }
    public ICurrentDbContext CurrentContext { get; public set; }
    [EntityFrameworkInternalAttribute]
public IDbSetSource SetSource { get; public set; }
    [EntityFrameworkInternalAttribute]
public IEntityFinderSource EntityFinderSource { get; public set; }
    public IEntityMaterializerSource EntityMaterializerSource { get; public set; }
    public IExecutionStrategy ExecutionStrategy { get; public set; }
    public ICoreSingletonOptions CoreSingletonOptions { get; public set; }
    public ILoggingOptions LoggingOptions { get; public set; }
    public IDiagnosticsLogger`1<Update> UpdateLogger { get; public set; }
    public IDiagnosticsLogger`1<ChangeTracking> ChangeTrackingLogger { get; public set; }
    public INavigationFixer NavigationFixer { get; public set; }
    public IInterceptors Interceptors { get; }
    [EntityFrameworkInternalAttribute]
public StateManagerDependencies(IInternalEntityEntrySubscriber internalEntityEntrySubscriber, IInternalEntityEntryNotifier internalEntityEntryNotifier, IValueGenerationManager valueGenerationManager, IModel model, IDatabase database, IConcurrencyDetector concurrencyDetector, ICurrentDbContext currentContext, IEntityFinderSource entityFinderSource, IDbSetSource setSource, IEntityMaterializerSource entityMaterializerSource, IExecutionStrategy executionStrategy, ICoreSingletonOptions coreSingletonOptions, ILoggingOptions loggingOptions, IDiagnosticsLogger`1<Update> updateLogger, IDiagnosticsLogger`1<ChangeTracking> changeTrackingLogger, INavigationFixer navigationFixer, IInterceptors interceptors);
    [CompilerGeneratedAttribute]
private StateManagerDependencies(StateManagerDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IInternalEntityEntrySubscriber get_InternalEntityEntrySubscriber();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_InternalEntityEntrySubscriber(IInternalEntityEntrySubscriber value);
    [CompilerGeneratedAttribute]
public IInternalEntityEntryNotifier get_InternalEntityEntryNotifier();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_InternalEntityEntryNotifier(IInternalEntityEntryNotifier value);
    [CompilerGeneratedAttribute]
public IValueGenerationManager get_ValueGenerationManager();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ValueGenerationManager(IValueGenerationManager value);
    [CompilerGeneratedAttribute]
public IModel get_Model();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Model(IModel value);
    [CompilerGeneratedAttribute]
public IDatabase get_Database();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Database(IDatabase value);
    [CompilerGeneratedAttribute]
public IConcurrencyDetector get_ConcurrencyDetector();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ConcurrencyDetector(IConcurrencyDetector value);
    [CompilerGeneratedAttribute]
public ICurrentDbContext get_CurrentContext();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CurrentContext(ICurrentDbContext value);
    [CompilerGeneratedAttribute]
public IDbSetSource get_SetSource();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SetSource(IDbSetSource value);
    [CompilerGeneratedAttribute]
public IEntityFinderSource get_EntityFinderSource();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_EntityFinderSource(IEntityFinderSource value);
    [CompilerGeneratedAttribute]
public IEntityMaterializerSource get_EntityMaterializerSource();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_EntityMaterializerSource(IEntityMaterializerSource value);
    [CompilerGeneratedAttribute]
public IExecutionStrategy get_ExecutionStrategy();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ExecutionStrategy(IExecutionStrategy value);
    [CompilerGeneratedAttribute]
public ICoreSingletonOptions get_CoreSingletonOptions();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CoreSingletonOptions(ICoreSingletonOptions value);
    [CompilerGeneratedAttribute]
public ILoggingOptions get_LoggingOptions();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_LoggingOptions(ILoggingOptions value);
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Update> get_UpdateLogger();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UpdateLogger(IDiagnosticsLogger`1<Update> value);
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<ChangeTracking> get_ChangeTrackingLogger();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ChangeTrackingLogger(IDiagnosticsLogger`1<ChangeTracking> value);
    [CompilerGeneratedAttribute]
public INavigationFixer get_NavigationFixer();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NavigationFixer(INavigationFixer value);
    [CompilerGeneratedAttribute]
public IInterceptors get_Interceptors();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(StateManagerDependencies left, StateManagerDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(StateManagerDependencies left, StateManagerDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(StateManagerDependencies other);
    [CompilerGeneratedAttribute]
public StateManagerDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManagerExtensions : object {
    [ExtensionAttribute]
public static IReadOnlyList`1<InternalEntityEntry> ToListForState(IStateManager stateManager, bool added, bool modified, bool deleted, bool unchanged, bool returnDeletedSharedIdentity);
    [ExtensionAttribute]
public static IReadOnlyList`1<InternalEntityEntry> ToList(IStateManager stateManager);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StoreGeneratedValuesFactoryFactory : SidecarValuesFactoryFactory {
    protected bool UseEntityVariable { get; }
    protected virtual bool get_UseEntityVariable();
    protected virtual Expression CreateReadShadowValueExpression(ParameterExpression parameter, IPropertyBase property);
    protected virtual Expression CreateReadValueExpression(ParameterExpression parameter, IPropertyBase property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StructuralEntryCurrentProviderValueComparer : StructuralEntryCurrentValueComparer {
    private ValueConverter _converter;
    public StructuralEntryCurrentProviderValueComparer(IPropertyBase property, ValueConverter converter);
    protected virtual object GetPropertyValue(IUpdateEntry entry);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StructuralEntryCurrentValueComparer : EntryCurrentValueComparer {
    [NullableContextAttribute("1")]
public StructuralEntryCurrentValueComparer(IPropertyBase property);
    [NullableContextAttribute("2")]
public virtual int Compare(IUpdateEntry x, IUpdateEntry y);
}
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.TemporaryValuesFactoryFactory : SidecarValuesFactoryFactory {
    [NullableContextAttribute("1")]
protected virtual Expression CreateSnapshotExpression(Type entityType, ParameterExpression parameter, Type[] types, IList`1<IPropertyBase> propertyBases);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ValueComparerExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ValueComparer ToNullableComparer(ValueComparer valueComparer, IReadOnlyProperty property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ValueGenerationManager : object {
    private IValueGeneratorSelector _valueGeneratorSelector;
    private IKeyPropagator _keyPropagator;
    private IDiagnosticsLogger`1<ChangeTracking> _logger;
    private ILoggingOptions _loggingOptions;
    public ValueGenerationManager(IValueGeneratorSelector valueGeneratorSelector, IKeyPropagator keyPropagator, IDiagnosticsLogger`1<ChangeTracking> logger, ILoggingOptions loggingOptions);
    public virtual InternalEntityEntry Propagate(InternalEntityEntry entry);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ValueGenerationManager/<PropagateAsync>d__6")]
public virtual Task`1<InternalEntityEntry> PropagateAsync(InternalEntityEntry entry, CancellationToken cancellationToken);
    public virtual bool Generate(InternalEntityEntry entry, bool includePrimaryKey);
    private void Log(InternalEntityEntry entry, IProperty property, object generatedValue, bool temporary);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.ChangeTracking.Internal.ValueGenerationManager/<GenerateAsync>d__9")]
public virtual Task`1<bool> GenerateAsync(InternalEntityEntry entry, bool includePrimaryKey, CancellationToken cancellationToken);
    private ValueGenerator GetValueGenerator(IProperty property);
    private static void SetGeneratedValue(InternalEntityEntry entry, IProperty property, object generatedValue, bool isTemporary);
    private static void MarkKeyUnknown(InternalEntityEntry entry, bool includePrimaryKey, IProperty property, ValueGenerator valueGenerator);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory {
    public abstract virtual object CreateEquatableKey(IUpdateEntry entry, bool fromOriginalValues);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory`1 {
    public IEqualityComparer`1<TKey> EqualityComparer { get; }
    [NullableContextAttribute("2")]
public abstract virtual object CreateFromKeyValues(Object[] keyValues);
    [NullableContextAttribute("2")]
public abstract virtual object CreateFromBuffer(ValueBuffer valueBuffer);
    [NullableContextAttribute("2")]
public abstract virtual IProperty FindNullPropertyInKeyValues(Object[] keyValues);
    public abstract virtual TKey CreateFromCurrentValues(IUpdateEntry entry);
    public abstract virtual IProperty FindNullPropertyInCurrentValues(IUpdateEntry entry);
    public abstract virtual TKey CreateFromOriginalValues(IUpdateEntry entry);
    public abstract virtual TKey CreateFromRelationshipSnapshot(IUpdateEntry entry);
    public abstract virtual IEqualityComparer`1<TKey> get_EqualityComparer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.LocalView`1 : object {
    private ObservableBackedBindingList`1<TEntity> _bindingList;
    private ObservableCollection`1<TEntity> _observable;
    private DbContext _context;
    private IEntityType _entityType;
    private int _countChanges;
    private Nullable`1<int> _count;
    private bool _triggeringStateManagerChange;
    private bool _triggeringObservableChange;
    private bool _triggeringLocalViewChange;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private PropertyChangingEventHandler PropertyChanging;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    public int Count { get; }
    public bool IsReadOnly { get; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    [EntityFrameworkInternalAttribute]
public LocalView`1(DbSet`1<TEntity> set);
    public virtual ObservableCollection`1<TEntity> ToObservableCollection();
    private void LocalViewCollectionChanged(object _, NotifyCollectionChangedEventArgs args);
    private void ObservableCollectionChanged(object _, NotifyCollectionChangedEventArgs args);
    public virtual IEnumerator`1<TEntity> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual void Add(TEntity item);
    public virtual void Clear();
    public virtual bool Contains(TEntity item);
    public virtual void CopyTo(TEntity[] array, int arrayIndex);
    public virtual bool Remove(TEntity item);
    private void StateManagerChangedHandler(InternalEntityEntry entry, EntityState previousState);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanging(PropertyChangingEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanging(PropertyChangingEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    protected virtual void OnPropertyChanging(PropertyChangingEventArgs e);
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    private void OnCountPropertyChanged();
    private void OnCountPropertyChanging();
    private void OnCollectionChanged(NotifyCollectionChangedAction action, object item);
    [RequiresUnreferencedCodeAttribute("BindingList raises ListChanged events with PropertyDescriptors. PropertyDescriptors require unreferenced code.")]
public virtual BindingList`1<TEntity> ToBindingList();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    public virtual void Reset();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.ChangeTracking.MemberEntry : object {
    [CompilerGeneratedAttribute]
private InternalEntityEntry <InternalEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private IPropertyBase <Metadata>k__BackingField;
    [EntityFrameworkInternalAttribute]
protected InternalEntityEntry InternalEntry { get; }
    public bool IsModified { get; public set; }
    public IPropertyBase Metadata { get; }
    [NullableAttribute("2")]
public object CurrentValue { get; public set; }
    public EntityEntry EntityEntry { get; }
    [EntityFrameworkInternalAttribute]
private InternalEntityEntry Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>.Instance { get; }
    [EntityFrameworkInternalAttribute]
protected MemberEntry(InternalEntityEntry internalEntry, IPropertyBase metadata);
    [CompilerGeneratedAttribute]
protected virtual InternalEntityEntry get_InternalEntry();
    public abstract virtual bool get_IsModified();
    public abstract virtual void set_IsModified(bool value);
    [CompilerGeneratedAttribute]
public virtual IPropertyBase get_Metadata();
    [NullableContextAttribute("2")]
public virtual object get_CurrentValue();
    [NullableContextAttribute("2")]
public virtual void set_CurrentValue(object value);
    public virtual EntityEntry get_EntityEntry();
    private sealed virtual override InternalEntityEntry Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntry>.get_Instance();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.ChangeTracking.NavigationEntry : MemberEntry {
    public bool IsLoaded { get; public set; }
    public INavigationBase Metadata { get; }
    [EntityFrameworkInternalAttribute]
protected NavigationEntry(InternalEntityEntry internalEntry, string name, bool collection);
    [EntityFrameworkInternalAttribute]
protected NavigationEntry(InternalEntityEntry internalEntry, INavigationBase navigationBase, bool collection);
    private static INavigationBase GetNavigation(InternalEntityEntry internalEntry, string name);
    public abstract virtual void Load();
    public abstract virtual Task LoadAsync(CancellationToken cancellationToken);
    public abstract virtual IQueryable Query();
    public virtual bool get_IsLoaded();
    public virtual void set_IsLoaded(bool value);
    public virtual INavigationBase get_Metadata();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSet`1 : object {
    private HashSet`1<T> _set;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    [CompilerGeneratedAttribute]
private PropertyChangingEventHandler PropertyChanging;
    [CompilerGeneratedAttribute]
private NotifyCollectionChangedEventHandler CollectionChanged;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public IEqualityComparer`1<T> Comparer { get; }
    public ObservableHashSet`1(IEqualityComparer`1<T> comparer);
    public ObservableHashSet`1(IEnumerable`1<T> collection);
    public ObservableHashSet`1(IEnumerable`1<T> collection, IEqualityComparer`1<T> comparer);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanging(PropertyChangingEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanging(PropertyChangingEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    private sealed virtual override void System.Collections.Generic.ICollection<T>.Add(T item);
    public virtual void Clear();
    public virtual bool Contains(T item);
    public virtual void CopyTo(T[] array, int arrayIndex);
    public virtual bool Remove(T item);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual Enumerator<T> GetEnumerator();
    private sealed virtual override IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual bool Add(T item);
    public virtual void UnionWith(IEnumerable`1<T> other);
    public virtual void IntersectWith(IEnumerable`1<T> other);
    public virtual void ExceptWith(IEnumerable`1<T> other);
    public virtual void SymmetricExceptWith(IEnumerable`1<T> other);
    public virtual bool IsSubsetOf(IEnumerable`1<T> other);
    public virtual bool IsProperSubsetOf(IEnumerable`1<T> other);
    public virtual bool IsSupersetOf(IEnumerable`1<T> other);
    public virtual bool IsProperSupersetOf(IEnumerable`1<T> other);
    public virtual bool Overlaps(IEnumerable`1<T> other);
    public virtual bool SetEquals(IEnumerable`1<T> other);
    public virtual void CopyTo(T[] array);
    public virtual void CopyTo(T[] array, int arrayIndex, int count);
    public virtual int RemoveWhere(Predicate`1<T> match);
    public virtual IEqualityComparer`1<T> get_Comparer();
    public virtual void TrimExcess();
    protected virtual void OnPropertyChanged(PropertyChangedEventArgs e);
    protected virtual void OnPropertyChanging(PropertyChangingEventArgs e);
    private void OnCountPropertyChanged();
    private void OnCountPropertyChanging();
    private void OnCollectionChanged(NotifyCollectionChangedAction action, object item);
    private void OnCollectionChanged(IList newItems, IList oldItems);
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    [CompilerGeneratedAttribute]
private bool <UnionWith>b__27_0(T i);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.EntityFrameworkCore.ChangeTracking.ObservableHashSetSingletons : object {
    public static PropertyChangedEventArgs CountPropertyChanged;
    public static PropertyChangingEventArgs CountPropertyChanging;
    public static Object[] NoItems;
    private static ObservableHashSetSingletons();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry : MemberEntry {
    public bool IsModified { get; public set; }
    public bool IsTemporary { get; public set; }
    public IProperty Metadata { get; }
    [NullableAttribute("2")]
public object OriginalValue { get; public set; }
    [EntityFrameworkInternalAttribute]
public PropertyEntry(InternalEntityEntry internalEntry, string name);
    [EntityFrameworkInternalAttribute]
public PropertyEntry(InternalEntityEntry internalEntry, IProperty property);
    public virtual bool get_IsModified();
    public virtual void set_IsModified(bool value);
    public virtual bool get_IsTemporary();
    public virtual void set_IsTemporary(bool value);
    public virtual IProperty get_Metadata();
    [NullableContextAttribute("2")]
public virtual object get_OriginalValue();
    [NullableContextAttribute("2")]
public virtual void set_OriginalValue(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.PropertyEntry`2 : PropertyEntry {
    public EntityEntry`1<TEntity> EntityEntry { get; }
    public TProperty CurrentValue { get; public set; }
    public TProperty OriginalValue { get; public set; }
    [EntityFrameworkInternalAttribute]
public PropertyEntry`2(InternalEntityEntry internalEntry, string name);
    [EntityFrameworkInternalAttribute]
public PropertyEntry`2(InternalEntityEntry internalEntry, IProperty property);
    public virtual EntityEntry`1<TEntity> get_EntityEntry();
    public virtual TProperty get_CurrentValue();
    public virtual void set_CurrentValue(TProperty value);
    public virtual TProperty get_OriginalValue();
    public virtual void set_OriginalValue(TProperty value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.EntityFrameworkCore.ChangeTracking.PropertyValues : object {
    [CompilerGeneratedAttribute]
private InternalEntityEntry <InternalEntry>k__BackingField;
    [EntityFrameworkInternalAttribute]
protected InternalEntityEntry InternalEntry { get; }
    public IReadOnlyList`1<IProperty> Properties { get; }
    public IEntityType EntityType { get; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    [EntityFrameworkInternalAttribute]
protected PropertyValues(InternalEntityEntry internalEntry);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
protected virtual InternalEntityEntry get_InternalEntry();
    public abstract virtual object ToObject();
    public abstract virtual void SetValues(object obj);
    public abstract virtual PropertyValues Clone();
    public abstract virtual void SetValues(PropertyValues propertyValues);
    public virtual void SetValues(IDictionary`2<string, TProperty> values);
    public abstract virtual IReadOnlyList`1<IProperty> get_Properties();
    [DebuggerStepThroughAttribute]
public virtual IEntityType get_EntityType();
    public abstract virtual object get_Item(string propertyName);
    public abstract virtual void set_Item(string propertyName, object value);
    public abstract virtual object get_Item(IProperty property);
    public abstract virtual void set_Item(IProperty property, object value);
    public abstract virtual TValue GetValue(string propertyName);
    public virtual bool TryGetValue(string propertyName, TValue& value);
    public abstract virtual TValue GetValue(IProperty property);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry : NavigationEntry {
    private IEntityFinder _finder;
    public bool IsModified { get; public set; }
    [NullableAttribute("2")]
public EntityEntry TargetEntry { get; }
    private IEntityFinder TargetFinder { get; }
    [EntityFrameworkInternalAttribute]
public ReferenceEntry(InternalEntityEntry internalEntry, string name);
    [EntityFrameworkInternalAttribute]
public ReferenceEntry(InternalEntityEntry internalEntry, INavigation navigation);
    private void LocalDetectChanges();
    public virtual void Load();
    public virtual Task LoadAsync(CancellationToken cancellationToken);
    public virtual IQueryable Query();
    public virtual bool get_IsModified();
    public virtual void set_IsModified(bool value);
    private static void SetFkPropertiesModified(INavigation navigation, InternalEntityEntry internalEntityEntry, bool modified);
    private bool AnyFkPropertiesModified(INavigation navigation, object relatedEntity);
    [NullableContextAttribute("2")]
public virtual EntityEntry get_TargetEntry();
    [NullableContextAttribute("2")]
[EntityFrameworkInternalAttribute]
protected virtual InternalEntityEntry GetTargetEntry();
    private IEntityFinder get_TargetFinder();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.ReferenceEntry`2 : ReferenceEntry {
    public EntityEntry`1<TEntity> EntityEntry { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public EntityEntry`1<TProperty> TargetEntry { get; }
    [NullableAttribute("2")]
public TProperty CurrentValue { get; public set; }
    [EntityFrameworkInternalAttribute]
public ReferenceEntry`2(InternalEntityEntry internalEntry, string name);
    [EntityFrameworkInternalAttribute]
public ReferenceEntry`2(InternalEntityEntry internalEntry, INavigation navigation);
    public virtual EntityEntry`1<TEntity> get_EntityEntry();
    public virtual EntityEntry`1<TProperty> get_TargetEntry();
    [NullableContextAttribute("2")]
public virtual TProperty get_CurrentValue();
    [NullableContextAttribute("2")]
public virtual void set_CurrentValue(TProperty value);
    public virtual IQueryable`1<TProperty> Query();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer : object {
    private static MethodInfo DoubleEqualsMethodInfo;
    private static MethodInfo FloatEqualsMethodInfo;
    internal static MethodInfo ArrayCopyMethod;
    internal static MethodInfo EqualityComparerHashCodeMethod;
    internal static MethodInfo EqualityComparerEqualsMethod;
    internal static MethodInfo ObjectGetHashCodeMethod;
    [CompilerGeneratedAttribute]
private LambdaExpression <EqualsExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private LambdaExpression <HashCodeExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private LambdaExpression <SnapshotExpression>k__BackingField;
    public Type Type { get; }
    public LambdaExpression EqualsExpression { get; }
    public LambdaExpression HashCodeExpression { get; }
    public LambdaExpression SnapshotExpression { get; }
    protected ValueComparer(LambdaExpression equalsExpression, LambdaExpression hashCodeExpression, LambdaExpression snapshotExpression);
    private static ValueComparer();
    public abstract virtual Type get_Type();
    [NullableContextAttribute("2")]
public abstract virtual bool Equals(object left, object right);
    public abstract virtual int GetHashCode(object instance);
    [NullableContextAttribute("2")]
public abstract virtual object Snapshot(object instance);
    [CompilerGeneratedAttribute]
public virtual LambdaExpression get_EqualsExpression();
    [CompilerGeneratedAttribute]
public virtual LambdaExpression get_HashCodeExpression();
    [CompilerGeneratedAttribute]
public virtual LambdaExpression get_SnapshotExpression();
    public virtual Expression ExtractEqualsBody(Expression leftExpression, Expression rightExpression);
    public virtual Expression ExtractHashCodeBody(Expression expression);
    public virtual Expression ExtractSnapshotBody(Expression expression);
    public static ValueComparer CreateDefault(Type type, bool favorStructuralComparisons);
    [CompilerGeneratedAttribute]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2055")]
internal static ValueComparer <CreateDefault>g__CreateInstance|24_0(<>c__DisplayClass24_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer`1 : ValueComparer {
    private Func`3<T, T, bool> _equals;
    private Func`2<T, int> _hashCode;
    private Func`2<T, T> _snapshot;
    public Type Type { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Expression`1<Func`3<T, T, bool>> EqualsExpression { get; }
    public Expression`1<Func`2<T, int>> HashCodeExpression { get; }
    public Expression`1<Func`2<T, T>> SnapshotExpression { get; }
    public ValueComparer`1(bool favorStructuralComparisons);
    public ValueComparer`1(Expression`1<Func`3<T, T, bool>> equalsExpression, Expression`1<Func`2<T, int>> hashCodeExpression);
    public ValueComparer`1(Expression`1<Func`3<T, T, bool>> equalsExpression, Expression`1<Func`2<T, int>> hashCodeExpression, Expression`1<Func`2<T, T>> snapshotExpression);
    protected static Expression`1<Func`3<T, T, bool>> CreateDefaultEqualsExpression();
    protected static Expression`1<Func`2<T, T>> CreateDefaultSnapshotExpression(bool favorStructuralComparisons);
    protected static Expression`1<Func`2<T, int>> CreateDefaultHashCodeExpression(bool favorStructuralComparisons);
    [NullableContextAttribute("2")]
public virtual bool Equals(object left, object right);
    public virtual int GetHashCode(object instance);
    [NullableContextAttribute("2")]
public virtual bool Equals(T left, T right);
    public virtual int GetHashCode(T instance);
    [NullableContextAttribute("2")]
public virtual object Snapshot(object instance);
    public virtual T Snapshot(T instance);
    public virtual Type get_Type();
    public virtual Expression`1<Func`3<T, T, bool>> get_EqualsExpression();
    public virtual Expression`1<Func`2<T, int>> get_HashCodeExpression();
    public virtual Expression`1<Func`2<T, T>> get_SnapshotExpression();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparerExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsDefault(ValueComparer valueComparer);
}
public enum Microsoft.EntityFrameworkCore.ChangeTrackingStrategy : Enum {
    public int value__;
    public static ChangeTrackingStrategy Snapshot;
    public static ChangeTrackingStrategy ChangedNotifications;
    public static ChangeTrackingStrategy ChangingAndChangedNotifications;
    public static ChangeTrackingStrategy ChangingAndChangedNotificationsWithOriginalValues;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[ObsoleteAttribute("Use IConventionEntityType")]
public static class Microsoft.EntityFrameworkCore.ConventionEntityTypeExtensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("Use InMemoryEntityTypeExtensions.SetInMemoryQuery")]
public static void SetDefiningQuery(IConventionEntityType entityType, LambdaExpression definingQuery, bool fromDataAnnotation);
    [ExtensionAttribute]
[ObsoleteAttribute("Use InMemoryEntityTypeExtensions.GetInMemoryQueryConfigurationSource")]
public static Nullable`1<ConfigurationSource> GetDefiningQueryConfigurationSource(IConventionEntityType entityType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.DbContext : object {
    private static bool QuirkEnabled29733;
    private DbContextOptions _options;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDictionary`2<ValueTuple`2<Type, string>, object> _sets;
    private IDbContextServices _contextServices;
    private IDbContextDependencies _dbContextDependencies;
    private DatabaseFacade _database;
    private ChangeTracker _changeTracker;
    private IServiceScope _serviceScope;
    private DbContextLease _lease;
    private DbContextPoolConfigurationSnapshot _configurationSnapshot;
    private List`1<IResettableService> _cachedResettableServices;
    private bool _initializing;
    private bool _disposed;
    private Guid _contextId;
    private int _leaseCount;
    [CompilerGeneratedAttribute]
private EventHandler`1<SavingChangesEventArgs> SavingChanges;
    [CompilerGeneratedAttribute]
private EventHandler`1<SavedChangesEventArgs> SavedChanges;
    [CompilerGeneratedAttribute]
private EventHandler`1<SaveChangesFailedEventArgs> SaveChangesFailed;
    internal static DynamicallyAccessedMemberTypes DynamicallyAccessedMemberTypes;
    public DatabaseFacade Database { get; }
    public ChangeTracker ChangeTracker { get; }
    public IModel Model { get; }
    public DbContextId ContextId { get; }
    [EntityFrameworkInternalAttribute]
private IDbSetSource Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.SetSource { get; }
    [EntityFrameworkInternalAttribute]
private IEntityFinderFactory Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.EntityFinderFactory { get; }
    [EntityFrameworkInternalAttribute]
private IAsyncQueryProvider Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.QueryProvider { get; }
    [EntityFrameworkInternalAttribute]
private IStateManager Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.StateManager { get; }
    [EntityFrameworkInternalAttribute]
private IChangeDetector Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.ChangeDetector { get; }
    [EntityFrameworkInternalAttribute]
private IEntityGraphAttacher Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.EntityGraphAttacher { get; }
    [EntityFrameworkInternalAttribute]
private IExceptionDetector Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.ExceptionDetector { get; }
    [EntityFrameworkInternalAttribute]
private IDiagnosticsLogger`1<Update> Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.UpdateLogger { get; }
    [EntityFrameworkInternalAttribute]
private IDiagnosticsLogger`1<Infrastructure> Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.InfrastructureLogger { get; }
    private IServiceProvider InternalServiceProvider { get; }
    private IDbContextServices ContextServices { get; }
    private IDbContextDependencies DbContextDependencies { get; }
    private IServiceProvider Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.Instance { get; }
    [RequiresUnreferencedCodeAttribute("EF Core isn't fully compatible with trimming, and running the application may generate unexpected runtime failures. Some specific coding pattern are usually required to make trimming work properly, see https://aka.ms/efcore-docs-trimming for more details.")]
public DbContext(DbContextOptions options);
    private static DbContext();
    public virtual DatabaseFacade get_Database();
    public virtual ChangeTracker get_ChangeTracker();
    [DebuggerStepThroughAttribute]
public virtual IModel get_Model();
    public virtual DbContextId get_ContextId();
    private sealed virtual override IDbSetSource Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.get_SetSource();
    private sealed virtual override IEntityFinderFactory Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.get_EntityFinderFactory();
    private sealed virtual override IAsyncQueryProvider Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.get_QueryProvider();
    private sealed virtual override IStateManager Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.get_StateManager();
    private sealed virtual override IChangeDetector Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.get_ChangeDetector();
    private sealed virtual override IEntityGraphAttacher Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.get_EntityGraphAttacher();
    private sealed virtual override IExceptionDetector Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.get_ExceptionDetector();
    private sealed virtual override IDiagnosticsLogger`1<Update> Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.get_UpdateLogger();
    private sealed virtual override IDiagnosticsLogger`1<Infrastructure> Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies.get_InfrastructureLogger();
    [EntityFrameworkInternalAttribute]
private sealed virtual override object Microsoft.EntityFrameworkCore.Internal.IDbSetCache.GetOrAddSet(IDbSetSource source, Type type);
    [EntityFrameworkInternalAttribute]
private sealed virtual override object Microsoft.EntityFrameworkCore.Internal.IDbSetCache.GetOrAddSet(IDbSetSource source, string entityTypeName, Type type);
    [EntityFrameworkInternalAttribute]
private sealed virtual override IEnumerable`1<object> Microsoft.EntityFrameworkCore.Internal.IDbSetCache.GetSets();
    public virtual DbSet`1<TEntity> Set();
    public virtual DbSet`1<TEntity> Set(string name);
    private IEntityFinder Finder(Type type);
    private IServiceProvider get_InternalServiceProvider();
    private IDbContextServices get_ContextServices();
    [DebuggerStepThroughAttribute]
private IDbContextDependencies get_DbContextDependencies();
    [DebuggerStepThroughAttribute]
private void CheckDisposed();
    protected internal virtual void OnConfiguring(DbContextOptionsBuilder optionsBuilder);
    protected internal virtual void ConfigureConventions(ModelConfigurationBuilder configurationBuilder);
    protected internal virtual void OnModelCreating(ModelBuilder modelBuilder);
    public virtual int SaveChanges();
    public virtual int SaveChanges(bool acceptAllChangesOnSuccess);
    private void TryDetectChanges();
    private void TryDetectChanges(EntityEntry entry);
    public virtual Task`1<int> SaveChangesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.DbContext/<SaveChangesAsync>d__64")]
public virtual Task`1<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public void add_SavingChanges(EventHandler`1<SavingChangesEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SavingChanges(EventHandler`1<SavingChangesEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_SavedChanges(EventHandler`1<SavedChangesEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SavedChanges(EventHandler`1<SavedChangesEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_SaveChangesFailed(EventHandler`1<SaveChangesFailedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_SaveChangesFailed(EventHandler`1<SaveChangesFailedEventArgs> value);
    [EntityFrameworkInternalAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.ClearLease();
    [EntityFrameworkInternalAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.SetLease(DbContextLease lease);
    [EntityFrameworkInternalAttribute]
private sealed virtual override Task Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.SetLeaseAsync(DbContextLease lease, CancellationToken cancellationToken);
    private void SetLeaseInternal(DbContextLease lease);
    [EntityFrameworkInternalAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable.SnapshotConfiguration();
    [EntityFrameworkInternalAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetState();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.DbContext/<Microsoft-EntityFrameworkCore-Infrastructure-IResettableService-ResetStateAsync>d__80")]
[EntityFrameworkInternalAttribute]
private sealed virtual override Task Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetStateAsync(CancellationToken cancellationToken);
    private IEnumerable`1<IResettableService> GetResettableServices();
    public virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.DbContext/<DisposeAsync>d__83")]
public virtual ValueTask DisposeAsync();
    private bool DisposeSync(bool leaseActive, bool contextShouldBeDisposed);
    public virtual EntityEntry`1<TEntity> Entry(TEntity entity);
    private EntityEntry`1<TEntity> EntryWithoutDetectChanges(TEntity entity);
    public virtual EntityEntry Entry(object entity);
    private EntityEntry EntryWithoutDetectChanges(object entity);
    private void SetEntityState(InternalEntityEntry entry, EntityState entityState);
    private Task SetEntityStateAsync(InternalEntityEntry entry, EntityState entityState, CancellationToken cancellationToken);
    public virtual EntityEntry`1<TEntity> Add(TEntity entity);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.DbContext/<AddAsync>d__92`1")]
public virtual ValueTask`1<EntityEntry`1<TEntity>> AddAsync(TEntity entity, CancellationToken cancellationToken);
    public virtual EntityEntry`1<TEntity> Attach(TEntity entity);
    public virtual EntityEntry`1<TEntity> Update(TEntity entity);
    public virtual EntityEntry`1<TEntity> Remove(TEntity entity);
    private EntityEntry`1<TEntity> SetEntityState(TEntity entity, EntityState entityState);
    public virtual EntityEntry Add(object entity);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.DbContext/<AddAsync>d__98")]
public virtual ValueTask`1<EntityEntry> AddAsync(object entity, CancellationToken cancellationToken);
    public virtual EntityEntry Attach(object entity);
    public virtual EntityEntry Update(object entity);
    public virtual EntityEntry Remove(object entity);
    private EntityEntry SetEntityState(object entity, EntityState entityState);
    public virtual void AddRange(Object[] entities);
    public virtual Task AddRangeAsync(Object[] entities);
    public virtual void AttachRange(Object[] entities);
    public virtual void UpdateRange(Object[] entities);
    public virtual void RemoveRange(Object[] entities);
    private void SetEntityStates(IEnumerable`1<object> entities, EntityState entityState);
    public virtual void AddRange(IEnumerable`1<object> entities);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.DbContext/<AddRangeAsync>d__110")]
public virtual Task AddRangeAsync(IEnumerable`1<object> entities, CancellationToken cancellationToken);
    public virtual void AttachRange(IEnumerable`1<object> entities);
    public virtual void UpdateRange(IEnumerable`1<object> entities);
    public virtual void RemoveRange(IEnumerable`1<object> entities);
    [NullableContextAttribute("2")]
public virtual object Find(Type entityType, Object[] keyValues);
    public virtual ValueTask`1<object> FindAsync(Type entityType, Object[] keyValues);
    public virtual ValueTask`1<object> FindAsync(Type entityType, Object[] keyValues, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public virtual TEntity Find(Object[] keyValues);
    public virtual ValueTask`1<TEntity> FindAsync(Object[] keyValues);
    public virtual ValueTask`1<TEntity> FindAsync(Object[] keyValues, CancellationToken cancellationToken);
    private sealed virtual override IServiceProvider Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.get_Instance();
    public virtual IQueryable`1<TResult> FromExpression(Expression`1<Func`1<IQueryable`1<TResult>>> expression);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.DbContextId : ValueType {
    [CompilerGeneratedAttribute]
private Guid <InstanceId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Lease>k__BackingField;
    public Guid InstanceId { get; }
    public int Lease { get; }
    public DbContextId(Guid id, int lease);
    public bool Equals(DbContextId other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(DbContextId left, DbContextId right);
    public static bool op_Inequality(DbContextId left, DbContextId right);
    [CompilerGeneratedAttribute]
public Guid get_InstanceId();
    [CompilerGeneratedAttribute]
public int get_Lease();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.DbContextOptions : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ImmutableSortedDictionary`2<Type, ValueTuple`2<IDbContextOptionsExtension, int>> _extensionsMap;
    [CompilerGeneratedAttribute]
private bool <IsFrozen>k__BackingField;
    public IEnumerable`1<IDbContextOptionsExtension> Extensions { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[EntityFrameworkInternalAttribute]
protected ImmutableSortedDictionary`2<Type, ValueTuple`2<IDbContextOptionsExtension, int>> ExtensionsMap { get; }
    public Type ContextType { get; }
    public bool IsFrozen { get; private set; }
    [EntityFrameworkInternalAttribute]
protected DbContextOptions(IReadOnlyDictionary`2<Type, IDbContextOptionsExtension> extensions);
    [EntityFrameworkInternalAttribute]
protected DbContextOptions(ImmutableSortedDictionary`2<Type, ValueTuple`2<IDbContextOptionsExtension, int>> extensions);
    public virtual IEnumerable`1<IDbContextOptionsExtension> get_Extensions();
    public virtual TExtension FindExtension();
    public virtual TExtension GetExtension();
    public abstract virtual DbContextOptions WithExtension(TExtension extension);
    protected virtual ImmutableSortedDictionary`2<Type, ValueTuple`2<IDbContextOptionsExtension, int>> get_ExtensionsMap();
    public abstract virtual Type get_ContextType();
    public virtual void Freeze();
    [CompilerGeneratedAttribute]
public virtual bool get_IsFrozen();
    [CompilerGeneratedAttribute]
private void set_IsFrozen(bool value);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    protected virtual bool Equals(DbContextOptions other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.DbContextOptions`1 : DbContextOptions {
    public Type ContextType { get; }
    public DbContextOptions`1(IReadOnlyDictionary`2<Type, IDbContextOptionsExtension> extensions);
    private DbContextOptions`1(ImmutableSortedDictionary`2<Type, ValueTuple`2<IDbContextOptionsExtension, int>> extensions);
    public virtual DbContextOptions WithExtension(TExtension extension);
    public virtual Type get_ContextType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder : object {
    private DbContextOptions _options;
    public DbContextOptions Options { get; }
    public bool IsConfigured { get; }
    public DbContextOptionsBuilder(DbContextOptions options);
    public virtual DbContextOptions get_Options();
    public virtual bool get_IsConfigured();
    public virtual DbContextOptionsBuilder UseModel(IModel model);
    public virtual DbContextOptionsBuilder UseLoggerFactory(ILoggerFactory loggerFactory);
    public virtual DbContextOptionsBuilder LogTo(Action`1<string> action, LogLevel minimumLevel, Nullable`1<DbContextLoggerOptions> options);
    public virtual DbContextOptionsBuilder LogTo(Action`1<string> action, IEnumerable`1<EventId> events, LogLevel minimumLevel, Nullable`1<DbContextLoggerOptions> options);
    public virtual DbContextOptionsBuilder LogTo(Action`1<string> action, IEnumerable`1<string> categories, LogLevel minimumLevel, Nullable`1<DbContextLoggerOptions> options);
    public virtual DbContextOptionsBuilder LogTo(Action`1<string> action, Func`3<EventId, LogLevel, bool> filter, Nullable`1<DbContextLoggerOptions> options);
    public virtual DbContextOptionsBuilder LogTo(Func`3<EventId, LogLevel, bool> filter, Action`1<EventData> logger);
    private DbContextOptionsBuilder LogTo(IDbContextLogger logger);
    public virtual DbContextOptionsBuilder EnableThreadSafetyChecks(bool enableChecks);
    public virtual DbContextOptionsBuilder EnableDetailedErrors(bool detailedErrorsEnabled);
    public virtual DbContextOptionsBuilder UseMemoryCache(IMemoryCache memoryCache);
    public virtual DbContextOptionsBuilder UseInternalServiceProvider(IServiceProvider serviceProvider);
    public virtual DbContextOptionsBuilder UseApplicationServiceProvider(IServiceProvider serviceProvider);
    public virtual DbContextOptionsBuilder EnableSensitiveDataLogging(bool sensitiveDataLoggingEnabled);
    public virtual DbContextOptionsBuilder EnableServiceProviderCaching(bool cacheServiceProvider);
    public virtual DbContextOptionsBuilder UseQueryTrackingBehavior(QueryTrackingBehavior queryTrackingBehavior);
    public virtual DbContextOptionsBuilder ConfigureWarnings(Action`1<WarningsConfigurationBuilder> warningsConfigurationBuilderAction);
    public virtual DbContextOptionsBuilder ReplaceService();
    public virtual DbContextOptionsBuilder ReplaceService();
    public virtual DbContextOptionsBuilder AddInterceptors(IEnumerable`1<IInterceptor> interceptors);
    public virtual DbContextOptionsBuilder AddInterceptors(IInterceptor[] interceptors);
    public virtual DbContextOptionsBuilder ConfigureLoggingCacheTime(TimeSpan timeSpan);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsBuilderInfrastructure.AddOrUpdateExtension(TExtension extension);
    private DbContextOptionsBuilder WithOption(Func`2<CoreOptionsExtension, CoreOptionsExtension> withFunc);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.DbContextOptionsBuilder`1 : DbContextOptionsBuilder {
    public DbContextOptions`1<TContext> Options { get; }
    public DbContextOptionsBuilder`1(DbContextOptions`1<TContext> options);
    public virtual DbContextOptions`1<TContext> get_Options();
    public virtual DbContextOptionsBuilder`1<TContext> UseModel(IModel model);
    public virtual DbContextOptionsBuilder`1<TContext> UseLoggerFactory(ILoggerFactory loggerFactory);
    public virtual DbContextOptionsBuilder`1<TContext> LogTo(Action`1<string> action, LogLevel minimumLevel, Nullable`1<DbContextLoggerOptions> options);
    public virtual DbContextOptionsBuilder`1<TContext> LogTo(Action`1<string> action, IEnumerable`1<EventId> events, LogLevel minimumLevel, Nullable`1<DbContextLoggerOptions> options);
    public virtual DbContextOptionsBuilder`1<TContext> LogTo(Action`1<string> action, IEnumerable`1<string> categories, LogLevel minimumLevel, Nullable`1<DbContextLoggerOptions> options);
    public virtual DbContextOptionsBuilder`1<TContext> LogTo(Action`1<string> action, Func`3<EventId, LogLevel, bool> filter, Nullable`1<DbContextLoggerOptions> options);
    public virtual DbContextOptionsBuilder`1<TContext> LogTo(Func`3<EventId, LogLevel, bool> filter, Action`1<EventData> logger);
    public virtual DbContextOptionsBuilder`1<TContext> EnableThreadSafetyChecks(bool checksEnabled);
    public virtual DbContextOptionsBuilder`1<TContext> EnableDetailedErrors(bool detailedErrorsEnabled);
    public virtual DbContextOptionsBuilder`1<TContext> UseMemoryCache(IMemoryCache memoryCache);
    public virtual DbContextOptionsBuilder`1<TContext> UseInternalServiceProvider(IServiceProvider serviceProvider);
    public virtual DbContextOptionsBuilder`1<TContext> UseApplicationServiceProvider(IServiceProvider serviceProvider);
    public virtual DbContextOptionsBuilder`1<TContext> EnableSensitiveDataLogging(bool sensitiveDataLoggingEnabled);
    public virtual DbContextOptionsBuilder`1<TContext> EnableServiceProviderCaching(bool cacheServiceProvider);
    public virtual DbContextOptionsBuilder`1<TContext> UseQueryTrackingBehavior(QueryTrackingBehavior queryTrackingBehavior);
    public virtual DbContextOptionsBuilder`1<TContext> ConfigureWarnings(Action`1<WarningsConfigurationBuilder> warningsConfigurationBuilderAction);
    public virtual DbContextOptionsBuilder`1<TContext> ReplaceService();
    public virtual DbContextOptionsBuilder`1<TContext> ReplaceService();
    public virtual DbContextOptionsBuilder`1<TContext> AddInterceptors(IEnumerable`1<IInterceptor> interceptors);
    public virtual DbContextOptionsBuilder`1<TContext> AddInterceptors(IInterceptor[] interceptors);
    public virtual DbContextOptionsBuilder`1<TContext> ConfigureLoggingCacheTime(TimeSpan timeSpan);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.DbFunctions : object {
    [CompilerGeneratedAttribute]
private static DbFunctions <Instance>k__BackingField;
    internal static DbFunctions Instance { get; }
    private static DbFunctions();
    [CompilerGeneratedAttribute]
internal static DbFunctions get_Instance();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.DbFunctionsExtensions : object {
    [ExtensionAttribute]
public static bool Like(DbFunctions _, string matchExpression, string pattern);
    [ExtensionAttribute]
public static bool Like(DbFunctions _, string matchExpression, string pattern, string escapeCharacter);
    [ExtensionAttribute]
public static double Random(DbFunctions _);
}
public static class Microsoft.EntityFrameworkCore.DbLoggerCategory : object {
    [NullableAttribute("1")]
public static string Name;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.DbSet`1 : object {
    public IEntityType EntityType { get; }
    public LocalView`1<TEntity> Local { get; }
    private Type System.Linq.IQueryable.ElementType { get; }
    private Expression System.Linq.IQueryable.Expression { get; }
    private IQueryProvider System.Linq.IQueryable.Provider { get; }
    private IServiceProvider Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.Instance { get; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    public abstract virtual IEntityType get_EntityType();
    public virtual IAsyncEnumerable`1<TEntity> AsAsyncEnumerable();
    public virtual IQueryable`1<TEntity> AsQueryable();
    public virtual LocalView`1<TEntity> get_Local();
    [NullableContextAttribute("2")]
public virtual TEntity Find(Object[] keyValues);
    [NullableContextAttribute("2")]
public virtual ValueTask`1<TEntity> FindAsync(Object[] keyValues);
    [NullableContextAttribute("2")]
public virtual ValueTask`1<TEntity> FindAsync(Object[] keyValues, CancellationToken cancellationToken);
    public virtual EntityEntry`1<TEntity> Add(TEntity entity);
    public virtual ValueTask`1<EntityEntry`1<TEntity>> AddAsync(TEntity entity, CancellationToken cancellationToken);
    public virtual EntityEntry`1<TEntity> Attach(TEntity entity);
    public virtual EntityEntry`1<TEntity> Remove(TEntity entity);
    public virtual EntityEntry`1<TEntity> Update(TEntity entity);
    public virtual void AddRange(TEntity[] entities);
    public virtual Task AddRangeAsync(TEntity[] entities);
    public virtual void AttachRange(TEntity[] entities);
    public virtual void RemoveRange(TEntity[] entities);
    public virtual void UpdateRange(TEntity[] entities);
    public virtual void AddRange(IEnumerable`1<TEntity> entities);
    public virtual Task AddRangeAsync(IEnumerable`1<TEntity> entities, CancellationToken cancellationToken);
    public virtual void AttachRange(IEnumerable`1<TEntity> entities);
    public virtual void RemoveRange(IEnumerable`1<TEntity> entities);
    public virtual void UpdateRange(IEnumerable`1<TEntity> entities);
    public virtual EntityEntry`1<TEntity> Entry(TEntity entity);
    private sealed virtual override IEnumerator`1<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual IAsyncEnumerator`1<TEntity> GetAsyncEnumerator(CancellationToken cancellationToken);
    private sealed virtual override Type System.Linq.IQueryable.get_ElementType();
    private sealed virtual override Expression System.Linq.IQueryable.get_Expression();
    private sealed virtual override IQueryProvider System.Linq.IQueryable.get_Provider();
    private sealed virtual override IServiceProvider Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.get_Instance();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.DbUpdateConcurrencyException : DbUpdateException {
    public DbUpdateConcurrencyException(string message);
    public DbUpdateConcurrencyException(string message, Exception innerException);
    public DbUpdateConcurrencyException(string message, Exception innerException, IReadOnlyList`1<IUpdateEntry> entries);
    public DbUpdateConcurrencyException(string message, IReadOnlyList`1<IUpdateEntry> entries);
    public DbUpdateConcurrencyException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.DbUpdateException : Exception {
    private IReadOnlyList`1<EntityEntry> _entries;
    public IReadOnlyList`1<EntityEntry> Entries { get; }
    public DbUpdateException(string message);
    public DbUpdateException(string message, Exception innerException);
    public DbUpdateException(string message, IReadOnlyList`1<IUpdateEntry> entries);
    public DbUpdateException(string message, Exception innerException, IReadOnlyList`1<IUpdateEntry> entries);
    public DbUpdateException(string message, IReadOnlyList`1<EntityEntry> entries);
    public DbUpdateException(string message, Exception innerException, IReadOnlyList`1<EntityEntry> entries);
    public DbUpdateException(SerializationInfo info, StreamingContext context);
    public virtual IReadOnlyList`1<EntityEntry> get_Entries();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment : object {
    private List`1<object> _arguments;
    private Dictionary`2<string, object> _namedArguments;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Type Type { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<object> Arguments { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> NamedArguments { get; }
    public AttributeCodeFragment(Type type, Object[] arguments);
    public AttributeCodeFragment(Type type, IEnumerable`1<object> arguments, IDictionary`2<string, object> namedArguments);
    [CompilerGeneratedAttribute]
public virtual Type get_Type();
    public virtual IReadOnlyList`1<object> get_Arguments();
    public virtual IReadOnlyDictionary`2<string, object> get_NamedArguments();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
public class Microsoft.EntityFrameworkCore.Design.DesignTimeProviderServicesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    public string TypeName { get; }
    public DesignTimeProviderServicesAttribute(string typeName);
    [CompilerGeneratedAttribute]
public string get_TypeName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("1")]
public class Microsoft.EntityFrameworkCore.Design.DesignTimeServicesReferenceAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ForProvider>k__BackingField;
    public string TypeName { get; }
    [NullableAttribute("2")]
public string ForProvider { get; }
    public DesignTimeServicesReferenceAttribute(string typeName);
    public DesignTimeServicesReferenceAttribute(string typeName, string forProvider);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ForProvider();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Design.EntityFrameworkDesignServicesBuilder : EntityFrameworkServicesBuilder {
    [EntityFrameworkInternalAttribute]
public static IDictionary`2<Type, ServiceCharacteristics> Services;
    public EntityFrameworkDesignServicesBuilder(IServiceCollection serviceCollection);
    private static EntityFrameworkDesignServicesBuilder();
    protected virtual Nullable`1<ServiceCharacteristics> TryGetServiceCharacteristics(Type serviceType);
    public virtual EntityFrameworkServicesBuilder TryAddCoreServices();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Design.ICSharpHelper {
    public abstract virtual string Fragment(IMethodCallCodeFragment fragment, string instanceIdentifier, bool typeQualified);
    public abstract virtual string Fragment(IMethodCallCodeFragment fragment, int indent);
    public abstract virtual string Fragment(NestedClosureCodeFragment fragment, int indent);
    public abstract virtual string Fragment(PropertyAccessorCodeFragment fragment);
    public abstract virtual string Identifier(string name, ICollection`1<string> scope, Nullable`1<bool> capitalize);
    public abstract virtual string Lambda(IReadOnlyList`1<string> properties, string lambdaIdentifier);
    public virtual string Lambda(IEnumerable`1<IProperty> properties, string lambdaIdentifier);
    public abstract virtual string Literal(Object[0...,0...] values);
    [NullableContextAttribute("0")]
public abstract virtual string Literal(Nullable`1<T> value);
    public abstract virtual string Literal(BigInteger value);
    public abstract virtual string Literal(bool value);
    public abstract virtual string Literal(byte value);
    public abstract virtual string Literal(char value);
    public abstract virtual string Literal(DateOnly value);
    public abstract virtual string Literal(DateTime value);
    public abstract virtual string Literal(DateTimeOffset value);
    public abstract virtual string Literal(decimal value);
    public abstract virtual string Literal(double value);
    public abstract virtual string Literal(Enum value);
    public abstract virtual string Literal(float value);
    public abstract virtual string Literal(Guid value);
    public abstract virtual string Literal(int value);
    public abstract virtual string Literal(long value);
    public abstract virtual string Literal(sbyte value);
    public abstract virtual string Literal(short value);
    public abstract virtual string Literal(string value);
    public abstract virtual string Literal(TimeOnly value);
    public abstract virtual string Literal(TimeSpan value);
    public abstract virtual string Literal(UInt32 value);
    public abstract virtual string Literal(ulong value);
    public abstract virtual string Literal(ushort value);
    public abstract virtual string Literal(Type value, Nullable`1<bool> fullName);
    public abstract virtual string Literal(T[] values, bool vertical);
    public abstract virtual string Literal(List`1<T> values, bool vertical);
    public abstract virtual string Literal(Dictionary`2<TKey, TValue> values, bool vertical);
    public abstract virtual string Namespace(String[] name);
    public abstract virtual string Reference(Type type, Nullable`1<bool> fullName);
    public abstract virtual string UnknownLiteral(object value);
    public abstract virtual string XmlComment(string comment, int indent);
    public abstract virtual string Fragment(AttributeCodeFragment fragment);
    public abstract virtual string Arguments(IEnumerable`1<object> values);
    public abstract virtual IEnumerable`1<string> GetRequiredUsings(Type type);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Design.IDesignTimeDbContextFactory`1 {
    public abstract virtual TContext CreateDbContext(String[] args);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Design.IDesignTimeServices {
    public abstract virtual void ConfigureDesignTimeServices(IServiceCollection serviceCollection);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Design.IMethodCallCodeFragment {
    [NullableAttribute("2")]
public string DeclaringType { get; }
    public string Method { get; }
    public IEnumerable`1<string> TypeArguments { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<object> Arguments { get; }
    [NullableAttribute("2")]
public IMethodCallCodeFragment ChainedCall { get; }
    [NullableContextAttribute("2")]
public abstract virtual string get_DeclaringType();
    public abstract virtual string get_Method();
    public abstract virtual IEnumerable`1<string> get_TypeArguments();
    public abstract virtual IEnumerable`1<object> get_Arguments();
    [NullableContextAttribute("2")]
public abstract virtual IMethodCallCodeFragment get_ChainedCall();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Design.Internal.CSharpRuntimeAnnotationCodeGenerator : object {
    [CompilerGeneratedAttribute]
private CSharpRuntimeAnnotationCodeGeneratorDependencies <Dependencies>k__BackingField;
    protected CSharpRuntimeAnnotationCodeGeneratorDependencies Dependencies { get; }
    public CSharpRuntimeAnnotationCodeGenerator(CSharpRuntimeAnnotationCodeGeneratorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual CSharpRuntimeAnnotationCodeGeneratorDependencies get_Dependencies();
    public virtual void Generate(IModel model, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IEntityType entityType, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IProperty property, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IServiceProperty property, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IKey key, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IForeignKey foreignKey, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(INavigation navigation, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(ISkipNavigation navigation, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(IIndex index, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(ITrigger trigger, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public virtual void Generate(ITypeMappingConfiguration typeConfiguration, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    protected virtual void GenerateSimpleAnnotations(CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    protected virtual void GenerateSimpleAnnotation(string annotationName, string valueString, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    protected virtual void AddNamespace(Type type, ISet`1<string> namespaces);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Design.Internal.CSharpRuntimeAnnotationCodeGeneratorDependencies : object {
    [CompilerGeneratedAttribute]
private ICSharpHelper <CSharpHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public ICSharpHelper CSharpHelper { get; public set; }
    [EntityFrameworkInternalAttribute]
public CSharpRuntimeAnnotationCodeGeneratorDependencies(ICSharpHelper cSharpHelper);
    [CompilerGeneratedAttribute]
private CSharpRuntimeAnnotationCodeGeneratorDependencies(CSharpRuntimeAnnotationCodeGeneratorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ICSharpHelper get_CSharpHelper();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CSharpHelper(ICSharpHelper value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CSharpRuntimeAnnotationCodeGeneratorDependencies left, CSharpRuntimeAnnotationCodeGeneratorDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CSharpRuntimeAnnotationCodeGeneratorDependencies left, CSharpRuntimeAnnotationCodeGeneratorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(CSharpRuntimeAnnotationCodeGeneratorDependencies other);
    [CompilerGeneratedAttribute]
public CSharpRuntimeAnnotationCodeGeneratorDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Design.Internal.CSharpRuntimeAnnotationCodeGeneratorParameters : object {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Annotations>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClassName>k__BackingField;
    [CompilerGeneratedAttribute]
private IndentedStringBuilder <MainBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private IndentedStringBuilder <MethodBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Namespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <ScopeVariables>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRuntime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseNullableReferenceTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IDictionary`2<string, object> Annotations { get; public set; }
    public string TargetName { get; public set; }
    public string ClassName { get; public set; }
    public IndentedStringBuilder MainBuilder { get; public set; }
    public IndentedStringBuilder MethodBuilder { get; public set; }
    public ISet`1<string> Namespaces { get; public set; }
    public ISet`1<string> ScopeVariables { get; public set; }
    public bool IsRuntime { get; public set; }
    public bool UseNullableReferenceTypes { get; public set; }
    [EntityFrameworkInternalAttribute]
public CSharpRuntimeAnnotationCodeGeneratorParameters(string targetName, string className, IndentedStringBuilder mainBuilder, IndentedStringBuilder methodBuilder, ISet`1<string> namespaces, ISet`1<string> scopeVariables, bool nullable);
    [CompilerGeneratedAttribute]
private CSharpRuntimeAnnotationCodeGeneratorParameters(CSharpRuntimeAnnotationCodeGeneratorParameters original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Annotations();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Annotations(IDictionary`2<string, object> value);
    [CompilerGeneratedAttribute]
public string get_TargetName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TargetName(string value);
    [CompilerGeneratedAttribute]
public string get_ClassName();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ClassName(string value);
    [CompilerGeneratedAttribute]
public IndentedStringBuilder get_MainBuilder();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MainBuilder(IndentedStringBuilder value);
    [CompilerGeneratedAttribute]
public IndentedStringBuilder get_MethodBuilder();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MethodBuilder(IndentedStringBuilder value);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_Namespaces();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Namespaces(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public ISet`1<string> get_ScopeVariables();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ScopeVariables(ISet`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_IsRuntime();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsRuntime(bool value);
    [CompilerGeneratedAttribute]
public bool get_UseNullableReferenceTypes();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UseNullableReferenceTypes(bool value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CSharpRuntimeAnnotationCodeGeneratorParameters left, CSharpRuntimeAnnotationCodeGeneratorParameters right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CSharpRuntimeAnnotationCodeGeneratorParameters left, CSharpRuntimeAnnotationCodeGeneratorParameters right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(CSharpRuntimeAnnotationCodeGeneratorParameters other);
    [CompilerGeneratedAttribute]
public CSharpRuntimeAnnotationCodeGeneratorParameters <Clone>$();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Design.Internal.ICSharpRuntimeAnnotationCodeGenerator {
    public abstract virtual void Generate(IModel model, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public abstract virtual void Generate(IEntityType entityType, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public abstract virtual void Generate(IProperty property, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public abstract virtual void Generate(IServiceProperty property, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public abstract virtual void Generate(IKey key, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public abstract virtual void Generate(IForeignKey foreignKey, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public abstract virtual void Generate(INavigation navigation, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public abstract virtual void Generate(ISkipNavigation navigation, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public abstract virtual void Generate(IIndex index, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public abstract virtual void Generate(ITrigger trigger, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
    public abstract virtual void Generate(ITypeMappingConfiguration typeConfiguration, CSharpRuntimeAnnotationCodeGeneratorParameters parameters);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment : object {
    private List`1<object> _arguments;
    [CompilerGeneratedAttribute]
private MethodInfo <MethodInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Namespace>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DeclaringType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private MethodCallCodeFragment <ChainedCall>k__BackingField;
    public MethodInfo MethodInfo { get; }
    public string Namespace { get; }
    public string DeclaringType { get; }
    [NullableAttribute("1")]
public string Method { get; }
    [NullableAttribute("1")]
private IEnumerable`1<string> Microsoft.EntityFrameworkCore.Design.IMethodCallCodeFragment.TypeArguments { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyList`1<object> Arguments { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IEnumerable`1<object> Microsoft.EntityFrameworkCore.Design.IMethodCallCodeFragment.Arguments { get; }
    public MethodCallCodeFragment ChainedCall { get; }
    private IMethodCallCodeFragment Microsoft.EntityFrameworkCore.Design.IMethodCallCodeFragment.ChainedCall { get; }
    [NullableContextAttribute("1")]
public MethodCallCodeFragment(MethodInfo methodInfo, Object[] arguments);
    [NullableContextAttribute("1")]
public MethodCallCodeFragment(string method, Object[] arguments);
    private MethodCallCodeFragment(MethodInfo methodInfo, Object[] arguments, MethodCallCodeFragment chainedCall);
    private MethodCallCodeFragment(string method, Object[] arguments, MethodCallCodeFragment chainedCall);
    [CompilerGeneratedAttribute]
public virtual MethodInfo get_MethodInfo();
    [CompilerGeneratedAttribute]
public virtual string get_Namespace();
    [CompilerGeneratedAttribute]
public virtual string get_DeclaringType();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string get_Method();
    private sealed virtual override IEnumerable`1<string> Microsoft.EntityFrameworkCore.Design.IMethodCallCodeFragment.get_TypeArguments();
    public virtual IReadOnlyList`1<object> get_Arguments();
    private sealed virtual override IEnumerable`1<object> Microsoft.EntityFrameworkCore.Design.IMethodCallCodeFragment.get_Arguments();
    [CompilerGeneratedAttribute]
public virtual MethodCallCodeFragment get_ChainedCall();
    private sealed virtual override IMethodCallCodeFragment Microsoft.EntityFrameworkCore.Design.IMethodCallCodeFragment.get_ChainedCall();
    [NullableContextAttribute("1")]
public virtual MethodCallCodeFragment Chain(MethodInfo methodInfo, Object[] arguments);
    [NullableContextAttribute("1")]
public virtual MethodCallCodeFragment Chain(string method, Object[] arguments);
    [NullableContextAttribute("1")]
public virtual MethodCallCodeFragment Chain(MethodCallCodeFragment call);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Design.NestedClosureCodeFragment : object {
    [CompilerGeneratedAttribute]
private string <Parameter>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<MethodCallCodeFragment> <MethodCalls>k__BackingField;
    public string Parameter { get; }
    public IReadOnlyList`1<MethodCallCodeFragment> MethodCalls { get; }
    public NestedClosureCodeFragment(string parameter, MethodCallCodeFragment methodCall);
    public NestedClosureCodeFragment(string parameter, IReadOnlyList`1<MethodCallCodeFragment> methodCalls);
    [CompilerGeneratedAttribute]
public virtual string get_Parameter();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<MethodCallCodeFragment> get_MethodCalls();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Design.PropertyAccessorCodeFragment : object {
    [CompilerGeneratedAttribute]
private string <Parameter>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<string> <Properties>k__BackingField;
    public string Parameter { get; }
    public IReadOnlyList`1<string> Properties { get; }
    public PropertyAccessorCodeFragment(string parameter, IReadOnlyList`1<string> properties);
    [CompilerGeneratedAttribute]
public virtual string get_Parameter();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<string> get_Properties();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.BinaryExpressionEventData : EventData {
    [CompilerGeneratedAttribute]
private Expression <Left>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <Right>k__BackingField;
    public Expression Left { get; }
    public Expression Right { get; }
    public BinaryExpressionEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, Expression left, Expression right);
    [CompilerGeneratedAttribute]
public virtual Expression get_Left();
    [CompilerGeneratedAttribute]
public virtual Expression get_Right();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.CascadeDeleteEventData : EntityEntryEventData {
    [CompilerGeneratedAttribute]
private EntityState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityEntry <ParentEntityEntry>k__BackingField;
    public EntityState State { get; }
    public EntityEntry ParentEntityEntry { get; }
    public CascadeDeleteEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, EntityEntry entityEntry, EntityEntry parentEntry, EntityState state);
    [CompilerGeneratedAttribute]
public virtual EntityState get_State();
    [CompilerGeneratedAttribute]
public virtual EntityEntry get_ParentEntityEntry();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.CascadeDeleteOrphanEventData : EntityEntryEventData {
    [CompilerGeneratedAttribute]
private EntityState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityType <ParentEntityType>k__BackingField;
    public EntityState State { get; }
    public IEntityType ParentEntityType { get; }
    public CascadeDeleteOrphanEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, EntityEntry entityEntry, IEntityType parentEntityTypes, EntityState state);
    [CompilerGeneratedAttribute]
public virtual EntityState get_State();
    [CompilerGeneratedAttribute]
public virtual IEntityType get_ParentEntityType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.CollectionChangedEventData : NavigationEventData {
    [CompilerGeneratedAttribute]
private EntityEntry <EntityEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<object> <Added>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<object> <Removed>k__BackingField;
    public EntityEntry EntityEntry { get; }
    public INavigation Navigation { get; }
    public IEnumerable`1<object> Added { get; }
    public IEnumerable`1<object> Removed { get; }
    public CollectionChangedEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, EntityEntry entityEntry, INavigation navigation, IEnumerable`1<object> added, IEnumerable`1<object> removed);
    [CompilerGeneratedAttribute]
public virtual EntityEntry get_EntityEntry();
    public virtual INavigation get_Navigation();
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<object> get_Added();
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<object> get_Removed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.ConcurrencyExceptionEventData : DbContextErrorEventData {
    private IReadOnlyList`1<IUpdateEntry> _internalEntries;
    private IReadOnlyList`1<EntityEntry> _entries;
    public DbUpdateConcurrencyException Exception { get; }
    public IReadOnlyList`1<EntityEntry> Entries { get; }
    public ConcurrencyExceptionEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbContext context, IReadOnlyList`1<IUpdateEntry> entries, DbUpdateConcurrencyException exception);
    public virtual DbUpdateConcurrencyException get_Exception();
    public virtual IReadOnlyList`1<EntityEntry> get_Entries();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.ContextInitializedEventData : EventData {
    [CompilerGeneratedAttribute]
private DbContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private DbContextOptions <ContextOptions>k__BackingField;
    public DbContext Context { get; }
    public DbContextOptions ContextOptions { get; }
    public ContextInitializedEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbContext context, DbContextOptions contextOptions);
    [CompilerGeneratedAttribute]
public virtual DbContext get_Context();
    [CompilerGeneratedAttribute]
public virtual DbContextOptions get_ContextOptions();
}
public static class Microsoft.EntityFrameworkCore.Diagnostics.CoreEventId : object {
    public static int CoreBaseId;
    public static int RelationalBaseId;
    public static int ProviderBaseId;
    public static int ProviderDesignBaseId;
    private static string _updatePrefix;
    public static EventId SaveChangesFailed;
    public static EventId SaveChangesCanceled;
    public static EventId DuplicateDependentEntityTypeInstanceWarning;
    private static string _queryPrefix;
    public static EventId QueryIterationFailed;
    public static EventId QueryExecutionPlanned;
    public static EventId PossibleUnintendedCollectionNavigationNullComparisonWarning;
    public static EventId PossibleUnintendedReferenceComparisonWarning;
    public static EventId InvalidIncludePathError;
    public static EventId QueryCompilationStarting;
    public static EventId NavigationBaseIncluded;
    public static EventId NavigationBaseIncludeIgnored;
    public static EventId RowLimitingOperationWithoutOrderByWarning;
    public static EventId FirstWithoutOrderByAndFilterWarning;
    public static EventId DistinctAfterOrderByWithoutRowLimitingOperatorWarning;
    public static EventId QueryCanceled;
    private static string _infraPrefix;
    public static EventId SensitiveDataLoggingEnabledWarning;
    public static EventId ServiceProviderCreated;
    public static EventId ManyServiceProvidersCreatedWarning;
    public static EventId ContextInitialized;
    public static EventId ServiceProviderDebugInfo;
    public static EventId ExecutionStrategyRetrying;
    public static EventId NavigationLazyLoading;
    public static EventId LazyLoadOnDisposedContextWarning;
    public static EventId DetachedLazyLoadingWarning;
    public static EventId RedundantAddServicesCallWarning;
    public static EventId OldModelVersionWarning;
    private static string _modelPrefix;
    private static string _modelValidationPrefix;
    public static EventId ShadowPropertyCreated;
    public static EventId ShadowForeignKeyPropertyCreated;
    public static EventId RedundantIndexRemoved;
    public static EventId IncompatibleMatchingForeignKeyProperties;
    public static EventId AmbiguousEndRequiredWarning;
    public static EventId RequiredAttributeOnCollection;
    public static EventId RequiredAttributeOnSkipNavigation;
    public static EventId ConflictingShadowForeignKeysWarning;
    public static EventId MultiplePrimaryKeyCandidates;
    public static EventId MultipleNavigationProperties;
    public static EventId MultipleInversePropertiesSameTargetWarning;
    [ObsoleteAttribute("Log message with this event Id has been removed.")]
public static EventId NonDefiningInverseNavigationWarning;
    public static EventId NonOwnershipInverseNavigationWarning;
    public static EventId ForeignKeyAttributesOnBothPropertiesWarning;
    public static EventId ForeignKeyAttributesOnBothNavigationsWarning;
    public static EventId ConflictingForeignKeyAttributesOnNavigationAndPropertyWarning;
    public static EventId RedundantForeignKeyWarning;
    public static EventId ConflictingKeylessAndKeyAttributesWarning;
    public static EventId PossibleIncorrectRequiredNavigationWithQueryFilterInteractionWarning;
    private static string _changeTrackingPrefix;
    public static EventId DetectChangesStarting;
    public static EventId DetectChangesCompleted;
    public static EventId PropertyChangeDetected;
    public static EventId ForeignKeyChangeDetected;
    public static EventId CollectionChangeDetected;
    public static EventId SkipCollectionChangeDetected;
    public static EventId ReferenceChangeDetected;
    public static EventId StartedTracking;
    public static EventId StateChanged;
    public static EventId ValueGenerated;
    public static EventId CascadeDelete;
    public static EventId CascadeDeleteOrphan;
    public static EventId SaveChangesStarting;
    public static EventId SaveChangesCompleted;
    public static EventId OptimisticConcurrencyException;
    public static EventId ContextDisposed;
    public static EventId CollectionWithoutComparer;
    private static CoreEventId();
    private static EventId MakeUpdateId(Id id);
    private static EventId MakeQueryId(Id id);
    private static EventId MakeInfraId(Id id);
    private static EventId MakeModelId(Id id);
    private static EventId MakeModelValidationId(Id id);
    private static EventId MakeChangeTrackingId(Id id);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Diagnostics.CoreLoggerExtensions : object {
    [ExtensionAttribute]
public static void SaveChangesFailed(IDiagnosticsLogger`1<Update> diagnostics, DbContext context, Exception exception);
    [ExtensionAttribute]
public static Task SaveChangesFailedAsync(IDiagnosticsLogger`1<Update> diagnostics, DbContext context, Exception exception, CancellationToken cancellationToken);
    private static DbContextErrorEventData CreateDbContextErrorEventData(DbContext context, Exception exception, EventDefinition`3<Type, string, Exception> definition);
    private static string SaveChangesFailed(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void SaveChangesCanceled(IDiagnosticsLogger`1<Update> diagnostics, DbContext context);
    [ExtensionAttribute]
public static Task SaveChangesCanceledAsync(IDiagnosticsLogger`1<Update> diagnostics, DbContext context, CancellationToken cancellationToken);
    private static string SaveChangesCanceled(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void OldModelVersionWarning(IDiagnosticsLogger`1<Infrastructure> diagnostics, DbContext context, DbContextOptions contextOptions);
    private static string OldModelVersion(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static InterceptionResult OptimisticConcurrencyException(IDiagnosticsLogger`1<Update> diagnostics, DbContext context, IReadOnlyList`1<IUpdateEntry> entries, DbUpdateConcurrencyException exception, Func`5<DbContext, DbUpdateConcurrencyException, IReadOnlyList`1<IUpdateEntry>, EventDefinition`1<Exception>, ConcurrencyExceptionEventData> createEventData);
    [ExtensionAttribute]
public static ValueTask`1<InterceptionResult> OptimisticConcurrencyExceptionAsync(IDiagnosticsLogger`1<Update> diagnostics, DbContext context, IReadOnlyList`1<IUpdateEntry> entries, DbUpdateConcurrencyException exception, Func`5<DbContext, DbUpdateConcurrencyException, IReadOnlyList`1<IUpdateEntry>, EventDefinition`1<Exception>, ConcurrencyExceptionEventData> createEventData, CancellationToken cancellationToken);
    private static ConcurrencyExceptionEventData CreateConcurrencyExceptionEventData(DbContext context, DbUpdateConcurrencyException exception, IReadOnlyList`1<IUpdateEntry> entries, EventDefinition`1<Exception> definition);
    private static string OptimisticConcurrencyException(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void DuplicateDependentEntityTypeInstanceWarning(IDiagnosticsLogger`1<Update> diagnostics, IEntityType dependent1, IEntityType dependent2);
    private static string DuplicateDependentEntityTypeInstanceWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void QueryIterationFailed(IDiagnosticsLogger`1<Query> diagnostics, Type contextType, Exception exception);
    private static string QueryIterationFailed(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void QueryCanceled(IDiagnosticsLogger`1<Query> diagnostics, Type contextType);
    private static string QueryCanceled(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static ValueTuple`2<Expression, QueryExpressionEventData> QueryCompilationStarting(IDiagnosticsLogger`1<Query> diagnostics, DbContext context, ExpressionPrinter expressionPrinter, Expression queryExpression);
    private static string QueryCompilationStarting(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void FirstWithoutOrderByAndFilterWarning(IDiagnosticsLogger`1<Query> diagnostics);
    private static string FirstWithoutOrderByAndFilterWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void RowLimitingOperationWithoutOrderByWarning(IDiagnosticsLogger`1<Query> diagnostics);
    private static string RowLimitingOperationWithoutOrderByWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void DistinctAfterOrderByWithoutRowLimitingOperatorWarning(IDiagnosticsLogger`1<Query> diagnostics);
    private static string DistinctAfterOrderByWithoutRowLimitingOperatorWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void NavigationBaseIncluded(IDiagnosticsLogger`1<Query> diagnostics, INavigationBase navigation);
    private static string NavigationBaseIncluded(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void NavigationBaseIncludeIgnored(IDiagnosticsLogger`1<Query> diagnostics, INavigationBase navigation);
    private static string NavigationBaseIncludeIgnored(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void QueryExecutionPlanned(IDiagnosticsLogger`1<Query> diagnostics, DbContext context, ExpressionPrinter expressionPrinter, Expression queryExecutorExpression);
    private static string QueryExecutionPlanned(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void SensitiveDataLoggingEnabledWarning(IDiagnosticsLogger`1<TLoggerCategory> diagnostics);
    [ExtensionAttribute]
public static void PossibleUnintendedCollectionNavigationNullComparisonWarning(IDiagnosticsLogger`1<Query> diagnostics, INavigation navigation);
    private static string PossibleUnintendedCollectionNavigationNullComparisonWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void PossibleUnintendedReferenceComparisonWarning(IDiagnosticsLogger`1<Query> diagnostics, Expression left, Expression right);
    private static string PossibleUnintendedReferenceComparisonWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void InvalidIncludePathError(IDiagnosticsLogger`1<Query> diagnostics, string navigationChain, string navigationName);
    private static string InvalidIncludePathError(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ServiceProviderCreated(IDiagnosticsLogger`1<Infrastructure> diagnostics, IServiceProvider serviceProvider);
    [ExtensionAttribute]
public static void ManyServiceProvidersCreatedWarning(IDiagnosticsLogger`1<Infrastructure> diagnostics, ICollection`1<IServiceProvider> serviceProviders);
    [ExtensionAttribute]
public static void ServiceProviderDebugInfo(IDiagnosticsLogger`1<Infrastructure> diagnostics, IDictionary`2<string, string> newDebugInfo, IList`1<IDictionary`2<string, string>> cachedDebugInfos);
    private static string ServiceProviderDebugInfo(EventDefinitionBase definition, EventData payload);
    private static string GenerateDebugInfoString(IDictionary`2<string, string> newDebugInfo, IList`1<IDictionary`2<string, string>> cachedDebugInfos);
    [ExtensionAttribute]
public static void ContextInitialized(IDiagnosticsLogger`1<Infrastructure> diagnostics, DbContext context, DbContextOptions contextOptions);
    private static string ContextInitialized(EventDefinitionBase definition, EventData payload);
    private static string GetProviderVersion(DbContext context);
    [ExtensionAttribute]
public static void ExecutionStrategyRetrying(IDiagnosticsLogger`1<Infrastructure> diagnostics, IReadOnlyList`1<Exception> exceptionsEncountered, TimeSpan delay, bool async);
    private static string ExecutionStrategyRetrying(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void LazyLoadOnDisposedContextWarning(IDiagnosticsLogger`1<Infrastructure> diagnostics, DbContext context, object entityType, string navigationName);
    private static string LazyLoadOnDisposedContextWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void NavigationLazyLoading(IDiagnosticsLogger`1<Infrastructure> diagnostics, DbContext context, object entityType, string navigationName);
    private static string NavigationLazyLoading(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void DetachedLazyLoadingWarning(IDiagnosticsLogger`1<Infrastructure> diagnostics, DbContext context, object entityType, string navigationName);
    private static string DetachedLazyLoadingWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void RedundantAddServicesCallWarning(IDiagnosticsLogger`1<Infrastructure> diagnostics, IServiceProvider serviceProvider);
    [ExtensionAttribute]
public static void ShadowForeignKeyPropertyCreated(IDiagnosticsLogger`1<Validation> diagnostics, IProperty property, string basePropertyName);
    private static string ShadowForeignKeyPropertyCreated(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ShadowPropertyCreated(IDiagnosticsLogger`1<Validation> diagnostics, IProperty property);
    private static string ShadowPropertyCreated(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void CollectionWithoutComparer(IDiagnosticsLogger`1<Validation> diagnostics, IProperty property);
    private static string CollectionWithoutComparer(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void RedundantIndexRemoved(IDiagnosticsLogger`1<Model> diagnostics, IReadOnlyList`1<IReadOnlyPropertyBase> redundantIndex, IReadOnlyList`1<IReadOnlyPropertyBase> otherIndex);
    private static string RedundantIndexRemoved(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void RedundantForeignKeyWarning(IDiagnosticsLogger`1<Validation> diagnostics, IForeignKey redundantForeignKey);
    private static string RedundantForeignKeyWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void IncompatibleMatchingForeignKeyProperties(IDiagnosticsLogger`1<Model> diagnostics, string dependentToPrincipalNavigationSpecification, string principalToDependentNavigationSpecification, IReadOnlyList`1<IReadOnlyPropertyBase> foreignKeyProperties, IReadOnlyList`1<IReadOnlyPropertyBase> principalKeyProperties);
    private static string IncompatibleMatchingForeignKeyProperties(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void AmbiguousEndRequiredWarning(IDiagnosticsLogger`1<Model> diagnostics, IForeignKey foreignKey);
    private static string AmbiguousEndRequiredWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void RequiredAttributeOnCollection(IDiagnosticsLogger`1<Model> diagnostics, IReadOnlyNavigation navigation);
    private static string RequiredAttributeOnCollection(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void RequiredAttributeOnSkipNavigation(IDiagnosticsLogger`1<Model> diagnostics, IReadOnlySkipNavigation navigation);
    private static string RequiredAttributeOnSkipNavigation(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ConflictingShadowForeignKeysWarning(IDiagnosticsLogger`1<Model> diagnostics, IReadOnlyForeignKey foreignKey);
    private static string ConflictingShadowForeignKeysWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void MultiplePrimaryKeyCandidates(IDiagnosticsLogger`1<Model> diagnostics, IReadOnlyProperty firstProperty, IReadOnlyProperty secondProperty);
    private static string MultiplePrimaryKeyCandidates(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void MultipleNavigationProperties(IDiagnosticsLogger`1<Model> diagnostics, IEnumerable`1<Tuple`2<MemberInfo, Type>> firstPropertyCollection, IEnumerable`1<Tuple`2<MemberInfo, Type>> secondPropertyCollection);
    private static string MultipleNavigationProperties(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void MultipleInversePropertiesSameTargetWarning(IDiagnosticsLogger`1<Model> diagnostics, IEnumerable`1<Tuple`2<MemberInfo, Type>> conflictingNavigations, MemberInfo inverseNavigation, Type targetType);
    private static string MultipleInversePropertiesSameTargetWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void NonOwnershipInverseNavigationWarning(IDiagnosticsLogger`1<Model> diagnostics, IReadOnlyEntityType declaringType, MemberInfo navigation, IReadOnlyEntityType targetType, MemberInfo inverseNavigation, MemberInfo ownershipNavigation);
    private static string NonOwnershipInverseNavigationWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ForeignKeyAttributesOnBothPropertiesWarning(IDiagnosticsLogger`1<Model> diagnostics, IReadOnlyNavigation firstNavigation, IReadOnlyNavigation secondNavigation, MemberInfo firstProperty, MemberInfo secondProperty);
    private static string ForeignKeyAttributesOnBothPropertiesWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ForeignKeyAttributesOnBothNavigationsWarning(IDiagnosticsLogger`1<Model> diagnostics, IReadOnlyNavigation firstNavigation, IReadOnlyNavigation secondNavigation);
    private static string ForeignKeyAttributesOnBothNavigationsWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ConflictingForeignKeyAttributesOnNavigationAndPropertyWarning(IDiagnosticsLogger`1<Model> diagnostics, IReadOnlyNavigation navigation, MemberInfo property);
    private static string ConflictingForeignKeyAttributesOnNavigationAndPropertyWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void DetectChangesStarting(IDiagnosticsLogger`1<ChangeTracking> diagnostics, DbContext context);
    private static string DetectChangesStarting(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void DetectChangesCompleted(IDiagnosticsLogger`1<ChangeTracking> diagnostics, DbContext context);
    private static string DetectChangesCompleted(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void PropertyChangeDetected(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry, IProperty property, object oldValue, object newValue);
    private static string PropertyChangeDetected(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void PropertyChangeDetectedSensitive(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry, IProperty property, object oldValue, object newValue);
    private static string PropertyChangeDetectedSensitive(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ForeignKeyChangeDetected(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry, IProperty property, object oldValue, object newValue);
    private static string ForeignKeyChangeDetected(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ForeignKeyChangeDetectedSensitive(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry, IProperty property, object oldValue, object newValue);
    private static string ForeignKeyChangeDetectedSensitive(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void CollectionChangeDetected(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry, INavigation navigation, ISet`1<object> added, ISet`1<object> removed);
    private static string CollectionChangeDetected(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void CollectionChangeDetectedSensitive(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry, INavigation navigation, ISet`1<object> added, ISet`1<object> removed);
    private static string CollectionChangeDetectedSensitive(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void SkipCollectionChangeDetected(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry, ISkipNavigation navigation, ISet`1<object> added, ISet`1<object> removed);
    private static string SkipCollectionChangeDetected(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void SkipCollectionChangeDetectedSensitive(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry, ISkipNavigation navigation, ISet`1<object> added, ISet`1<object> removed);
    private static string SkipCollectionChangeDetectedSensitive(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ReferenceChangeDetected(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry, INavigation navigation, object oldValue, object newValue);
    private static string ReferenceChangeDetected(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ReferenceChangeDetectedSensitive(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry, INavigation navigation, object oldValue, object newValue);
    private static string ReferenceChangeDetectedSensitive(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void StartedTracking(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry);
    private static string StartedTracking(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void StartedTrackingSensitive(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry);
    private static string StartedTrackingSensitive(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void StateChanged(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry, EntityState oldState, EntityState newState);
    private static string StateChanged(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void StateChangedSensitive(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry, EntityState oldState, EntityState newState);
    private static string StateChangedSensitive(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ValueGenerated(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry, IProperty property, object value, bool temporary);
    private static string ValueGenerated(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ValueGeneratedSensitive(IDiagnosticsLogger`1<ChangeTracking> diagnostics, InternalEntityEntry internalEntityEntry, IProperty property, object value, bool temporary);
    private static string ValueGeneratedSensitive(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void CascadeDelete(IDiagnosticsLogger`1<Update> diagnostics, InternalEntityEntry internalChildEntry, InternalEntityEntry internalParentEntry, EntityState state);
    private static string CascadeDelete(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void CascadeDeleteSensitive(IDiagnosticsLogger`1<Update> diagnostics, InternalEntityEntry internalChildEntry, InternalEntityEntry internalParentEntry, EntityState state);
    private static string CascadeDeleteSensitive(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void CascadeDeleteOrphan(IDiagnosticsLogger`1<Update> diagnostics, InternalEntityEntry internalChildEntry, IEntityType parentEntityType, EntityState state);
    private static string CascadeDeleteOrphan(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void CascadeDeleteOrphanSensitive(IDiagnosticsLogger`1<Update> diagnostics, InternalEntityEntry internalChildEntry, IEntityType parentEntityType, EntityState state);
    private static string CascadeDeleteOrphanSensitive(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static InterceptionResult`1<int> SaveChangesStarting(IDiagnosticsLogger`1<Update> diagnostics, DbContext context);
    [ExtensionAttribute]
public static ValueTask`1<InterceptionResult`1<int>> SaveChangesStartingAsync(IDiagnosticsLogger`1<Update> diagnostics, DbContext context, CancellationToken cancellationToken);
    private static DbContextEventData CreateSaveChangesStartingEventData(DbContext context, EventDefinition`1<string> definition);
    private static string SaveChangesStarting(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static int SaveChangesCompleted(IDiagnosticsLogger`1<Update> diagnostics, DbContext context, int entitiesSavedCount);
    [ExtensionAttribute]
public static ValueTask`1<int> SaveChangesCompletedAsync(IDiagnosticsLogger`1<Update> diagnostics, DbContext context, int entitiesSavedCount, CancellationToken cancellationToken);
    private static SaveChangesCompletedEventData CreateSaveChangesCompletedEventData(DbContext context, int entitiesSavedCount, EventDefinition`2<string, int> definition);
    private static string SaveChangesCompleted(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ContextDisposed(IDiagnosticsLogger`1<Infrastructure> diagnostics, DbContext context);
    private static string ContextDisposed(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void ConflictingKeylessAndKeyAttributesWarning(IDiagnosticsLogger`1<Model> diagnostics, IReadOnlyProperty property);
    private static string ConflictingKeylessAndKeyAttributesWarning(EventDefinitionBase definition, EventData payload);
    [ExtensionAttribute]
public static void PossibleIncorrectRequiredNavigationWithQueryFilterInteractionWarning(IDiagnosticsLogger`1<Validation> diagnostics, IForeignKey foreignKey);
    private static string PossibleIncorrectRequiredNavigationWithQueryFilterInteractionWarning(EventDefinitionBase definition, EventData payload);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class Microsoft.EntityFrameworkCore.Diagnostics.CoreStrings : object {
    private static ResourceManager _resourceManager;
    [NullableAttribute("1")]
public static string CannotConvertQueryableToEnumerableMethod { get; }
    [NullableAttribute("1")]
public static string ConcurrentMethodInvocation { get; }
    [NullableAttribute("1")]
public static string ContextDisposed { get; }
    [NullableAttribute("1")]
public static string ConventionsInfiniteLoop { get; }
    [NullableAttribute("1")]
public static string DataBindingToLocalWithIListSource { get; }
    [NullableAttribute("1")]
public static string DataBindingWithIListSource { get; }
    [NullableAttribute("1")]
public static string DefaultMethodInvoked { get; }
    [NullableAttribute("1")]
public static string DeleteBehaviorAttributeNotOnNavigationProperty { get; }
    [NullableAttribute("1")]
public static string DeleteBehaviorAttributeOnPrincipalProperty { get; }
    [NullableAttribute("1")]
public static string EnumerableResetNotSupported { get; }
    [NullableAttribute("1")]
public static string ErrorInvalidQueryable { get; }
    [NullableAttribute("1")]
public static string ExpressionParameterizationException { get; }
    [NullableAttribute("1")]
public static string HiLoBadBlockSize { get; }
    [NullableAttribute("1")]
public static string IncompatibleSourcesForSetOperation { get; }
    [NullableAttribute("1")]
public static string InvalidDbContext { get; }
    [NullableAttribute("1")]
public static string InvalidPoolSize { get; }
    [NullableAttribute("1")]
public static string IQueryableProviderNotAsync { get; }
    [NullableAttribute("1")]
public static string ModelMutable { get; }
    [NullableAttribute("1")]
public static string ModelReadOnly { get; }
    [NullableAttribute("1")]
public static string NoEfServices { get; }
    [NullableAttribute("1")]
public static string NoInterceptionResult { get; }
    [NullableAttribute("1")]
public static string NoProviderConfigured { get; }
    [NullableAttribute("1")]
public static string NotQueryingEnumerable { get; }
    [NullableAttribute("1")]
public static string ObjectRemovedFromModel { get; }
    [NullableAttribute("1")]
public static string OwnedEntitiesCannotBeTrackedWithoutTheirOwner { get; }
    [NullableAttribute("1")]
public static string PoolingOptionsModified { get; }
    [NullableAttribute("1")]
public static string PropertyMethodInvoked { get; }
    [NullableAttribute("1")]
public static string QuerySelectContainsGrouping { get; }
    [NullableAttribute("1")]
public static string QueryUnableToTranslateStringEqualsWithStringComparison { get; }
    [NullableAttribute("1")]
public static string RecursiveOnConfiguring { get; }
    [NullableAttribute("1")]
public static string RecursiveOnModelCreating { get; }
    [NullableAttribute("1")]
public static string RelationshipCannotBeInverted { get; }
    [NullableAttribute("1")]
public static string ResetNotSupported { get; }
    [NullableAttribute("1")]
public static string RuntimeModelMissingData { get; }
    [NullableAttribute("1")]
public static string RuntimeParameterMissingParameter { get; }
    [NullableAttribute("1")]
public static string SavepointsNotSupported { get; }
    [NullableAttribute("1")]
public static string SensitiveDataDisabled { get; }
    [NullableAttribute("1")]
public static string SequenceContainsMoreThanOneElement { get; }
    [NullableAttribute("1")]
public static string SequenceContainsNoElements { get; }
    [NullableAttribute("1")]
public static string SetOperationWithDifferentIncludesInOperands { get; }
    [NullableAttribute("1")]
public static string TransactionsNotSupported { get; }
    private static CoreStrings();
    [NullableContextAttribute("1")]
public static string AbstractLeafEntityType(object entityType);
    [NullableContextAttribute("1")]
public static string AddingProxyTypeAsEntityType(object typeName);
    public static string AmbiguousDependentEntity(object entityType, object targetEntryCall);
    public static string AmbiguousEndRequiredDependent(object foreignKeyProperties, object entityType);
    public static string AmbiguousEndRequiredDependentNavigation(object entityType, object navigation, object foreignKeyProperties);
    public static string AmbiguousEndRequiredInverted(object foreignKeyProperties, object entityType, object principalEntityType);
    public static string AmbiguousForeignKeyPropertyCandidates(object firstDependentToPrincipalNavigationSpecification, object firstPrincipalToDependentNavigationSpecification, object secondDependentToPrincipalNavigationSpecification, object secondPrincipalToDependentNavigationSpecification, object foreignKeyProperties);
    public static string AmbiguousOneToOneRelationship(object dependentToPrincipalNavigationSpecification, object principalToDependentNavigationSpecification);
    public static string AmbiguousOwnedNavigation(object entityTypeNavigationSpecification, object otherEntityType);
    [NullableContextAttribute("1")]
public static string AmbiguousSharedTypeEntityTypeName(object entityType);
    public static string AnnotationNotFound(object annotation, object annotatable);
    public static string ArgumentPropertyNull(object property, object argument);
    [NullableContextAttribute("1")]
public static string AutoIncludeNavigationCycle(object cycleNavigations);
    public static string BackingFieldOnIndexer(object field, object entityType, object property);
    public static string BadBackingFieldType(object field, object fieldType, object entityType, object property, object propertyType);
    [NullableContextAttribute("1")]
public static string BadDependencyRegistration(object dependenciesType);
    public static string BadFilterDerivedType(object filter, object entityType, object rootType);
    public static string BadFilterExpression(object filter, object entityType, object clrType);
    public static string BadFilterOwnedType(object filter, object entityType);
    public static string BadValueComparerType(object givenType, object expectedType);
    public static string BadValueConverterType(object givenType, object expectedType);
    public static string BadValueGeneratorType(object givenType, object expectedType);
    public static string CannotBeNullable(object property, object entityType, object propertyType);
    public static string CannotBeNullablePK(object property, object entityType);
    public static string CannotConvertEnumValue(object value, object enumType);
    [NullableContextAttribute("1")]
public static string get_CannotConvertQueryableToEnumerableMethod();
    public static string CannotCreateValueComparer(object generatorType, object method);
    public static string CannotCreateValueConverter(object generatorType, object method);
    public static string CannotCreateValueGenerator(object generatorType, object method);
    public static string CannotLoadDetached(object navigation, object entityType);
    [NullableContextAttribute("1")]
public static string CannotMarkNonShared(object type);
    [NullableContextAttribute("1")]
public static string CannotMarkShared(object type);
    [NullableContextAttribute("1")]
public static string CannotMaterializeAbstractType(object entityType);
    public static string CanOnlyConfigureExistingNavigations(object navigationName, object entityType);
    public static string ChangeTrackingInterfaceMissing(object entityType, object changeTrackingStrategy, object notificationInterface);
    [NullableContextAttribute("1")]
public static string CircularDependency(object cycle);
    public static string CircularInheritance(object entityType, object baseEntityType);
    public static string ClashingMismatchedSharedType(object entityType, object otherClrType);
    public static string ClashingNamedOwnedType(object ownedTypeName, object ownerEntityType, object navigation);
    public static string ClashingNonOwnedDerivedEntityType(object entityType, object derivedType);
    [NullableContextAttribute("1")]
public static string ClashingNonOwnedEntityType(object entityType);
    public static string ClashingNonSharedType(object entityType, object type);
    public static string ClashingOwnedDerivedEntityType(object entityType, object derivedType);
    [NullableContextAttribute("1")]
public static string ClashingOwnedEntityType(object entityType);
    [NullableContextAttribute("1")]
public static string ClashingSharedType(object entityType);
    public static string ClientProjectionCapturingConstantInMethodArgument(object constantType, object methodName);
    public static string ClientProjectionCapturingConstantInMethodInstance(object constantType, object methodName);
    [NullableContextAttribute("1")]
public static string ClientProjectionCapturingConstantInTree(object constantType);
    public static string CollectionIsReference(object property, object entityType, object collectionMethod, object referenceMethod);
    public static string ComparerPropertyMismatch(object type, object entityType, object propertyName, object propertyType);
    public static string CompositeFkOnProperty(object navigation, object entityType);
    [NullableContextAttribute("1")]
public static string CompositePKWithDataAnnotation(object entityType);
    [NullableContextAttribute("1")]
public static string get_ConcurrentMethodInvocation();
    public static string ConflictingBackingFields(object property, object entityType, object field1, object field2);
    public static string ConflictingForeignKeyAttributes(object propertyList, object entityType, object principalEntityType);
    [NullableContextAttribute("1")]
public static string ConflictingKeylessAndPrimaryKeyAttributes(object entity);
    public static string ConflictingPropertyOrNavigation(object member, object entityType, object conflictingEntityType);
    public static string ConflictingRelationshipNavigation(object newPrincipalNavigationSpecification, object newDependentNavigationSpecification, object existingPrincipalNavigationSpecification, object existingDependentNavigationSpecification);
    public static string ConstructorBindingFailed(object failedBinds, object parameters);
    public static string ConstructorConflict(object firstConstructor, object secondConstructor);
    public static string ConstructorNotFound(object entityType, object constructors);
    [NullableContextAttribute("1")]
public static string get_ContextDisposed();
    [NullableContextAttribute("1")]
public static string get_ConventionsInfiniteLoop();
    public static string ConverterBadType(object converter, object type, object allowed);
    public static string ConverterPropertyMismatch(object converterType, object entityType, object propertyName, object propertyType);
    public static string ConvertersCannotBeComposed(object typeOneIn, object typeOneOut, object typeTwoIn, object typeTwoOut);
    [NullableContextAttribute("1")]
public static string get_DataBindingToLocalWithIListSource();
    [NullableContextAttribute("1")]
public static string get_DataBindingWithIListSource();
    [NullableContextAttribute("1")]
public static string DbContextMissingConstructor(object contextType);
    public static string DbSetIncorrectGenericType(object entityType, object entityClrType, object genericType);
    [NullableContextAttribute("1")]
public static string DebugViewError(object message);
    [NullableContextAttribute("1")]
public static string DebugViewQueryExpressionError(object message);
    [NullableContextAttribute("1")]
public static string DebugViewQueryStringError(object message);
    [NullableContextAttribute("1")]
public static string get_DefaultMethodInvoked();
    [NullableContextAttribute("1")]
public static string get_DeleteBehaviorAttributeNotOnNavigationProperty();
    [NullableContextAttribute("1")]
public static string get_DeleteBehaviorAttributeOnPrincipalProperty();
    public static string DependentEntityTypeNotInRelationship(object dependentEntityType, object principalEntityType, object entityType);
    [NullableContextAttribute("1")]
public static string DerivedEntityCannotBeKeyless(object entityType);
    [NullableContextAttribute("1")]
public static string DerivedEntityCannotHaveKeys(object entityType);
    public static string DerivedEntityOwnershipMismatch(object baseEntityType, object derivedEntityType, object ownedEntityType, object nonOwnedEntityType);
    public static string DerivedEntityTypeHasNoKey(object derivedType, object rootType);
    public static string DerivedEntityTypeKey(object derivedType, object rootType);
    public static string DerivedTypeDefiningQuery(object entityType, object baseType);
    public static string DiscriminatorEntityTypeNotDerived(object entityType, object rootEntityType);
    [NullableContextAttribute("1")]
public static string DiscriminatorPropertyMustBeOnRoot(object entityType);
    public static string DiscriminatorPropertyNotFound(object property, object entityType);
    public static string DiscriminatorValueIncompatible(object value, object entityType, object discriminatorType);
    public static string DuplicateAnnotation(object annotation, object annotatable);
    public static string DuplicateDiscriminatorValue(object entityType1, object discriminatorValue, object entityType2);
    [NullableContextAttribute("1")]
public static string DuplicateEntityType(object entityType);
    public static string DuplicateForeignKey(object foreignKeyProperties, object entityType, object duplicateEntityType, object keyProperties, object principalType);
    public static string DuplicateIndex(object indexProperties, object entityType, object duplicateEntityType);
    public static string DuplicateKey(object keyProperties, object entityType, object duplicateEntityType);
    public static string DuplicateNamedIndex(object indexName, object indexProperties, object entityType, object duplicateEntityType);
    public static string DuplicatePropertiesOnBase(object entityType, object baseType, object derivedPropertyType, object derivedProperty, object basePropertyType, object baseProperty);
    public static string DuplicatePropertyInForeignKey(object propertyList, object property);
    public static string DuplicatePropertyInIndex(object propertyList, object property);
    public static string DuplicatePropertyInKey(object propertyList, object property);
    public static string DuplicateTrigger(object trigger, object entityType, object conflictingEntityType);
    public static string EntityEqualityOnCompositeKeyEntitySubqueryNotSupported(object comparisonOperator, object entityType);
    public static string EntityEqualityOnKeylessEntityNotSupported(object comparisonOperator, object entityType);
    [NullableContextAttribute("1")]
public static string EntityRequiresKey(object entityType);
    public static string EntityTypeInUseByDerived(object entityType, object derivedEntityType);
    public static string EntityTypeInUseByReferencingForeignKey(object entityType, object foreignKeyProperties, object referencingEntityType);
    public static string EntityTypeInUseByReferencingSkipNavigation(object entityType, object skipNavigation, object referencingEntityType);
    public static string EntityTypeModelMismatch(object firstEntityType, object secondEntityType);
    [NullableContextAttribute("1")]
public static string EntityTypeNotFound(object entityType);
    public static string EntityTypeNotInRelationship(object entityType, object dependentType, object principalType);
    public static string EntityTypeNotInRelationshipStrict(object entityType, object dependentType, object principalType);
    public static string EntityTypesNotInRelationship(object invalidDependentType, object invalidPrincipalType, object dependentType, object principalType);
    [NullableContextAttribute("1")]
public static string get_EnumerableResetNotSupported();
    [NullableContextAttribute("1")]
public static string get_ErrorInvalidQueryable();
    public static string ErrorMaterializingPropertyInvalidCast(object entityType, object property, object expectedType, object actualType);
    public static string ExecutionStrategyExistingTransaction(object strategy, object getExecutionStrategyMethod);
    [NullableContextAttribute("1")]
public static string get_ExpressionParameterizationException();
    [NullableContextAttribute("1")]
public static string ExpressionParameterizationExceptionSensitive(object expression);
    public static string FieldNameMismatch(object field, object entityType, object property);
    public static string FindNotCompositeKey(object entityType, object valuesCount);
    public static string FindValueCountMismatch(object entityType, object propertiesCount, object valuesCount);
    public static string FindValueTypeMismatch(object index, object entityType, object valueType, object propertyType);
    public static string FkAttributeOnNonUniquePrincipal(object navigation, object principalType, object dependentType);
    public static string FkAttributeOnPropertyNavigationMismatch(object property, object navigation, object entityType);
    public static string FkAttributeOnSkipNavigation(object entityType, object navigation);
    public static string ForeignKeyCountMismatch(object foreignKeyProperties, object dependentType, object principalKeyProperties, object principalType);
    public static string ForeignKeyInUseSkipNavigation(object foreignKeyProperties, object entityType, object navigation, object navigationEntityType);
    public static string ForeignKeyPropertiesWrongEntity(object foreignKeyProperties, object entityType);
    public static string ForeignKeyPropertyInKey(object property, object entityType, object keyProperties, object baseEntityType);
    public static string ForeignKeyReferencedEntityKeyMismatch(object principalKeyProperties, object principalEntityType);
    public static string ForeignKeyTypeMismatch(object foreignKeyProperties, object dependentType, object principalKeyProperties, object principalType);
    public static string ForeignKeyWrongType(object foreignKeyProperties, object keyProperties, object principalType, object entityType, object otherEntityType);
    public static string FullChangeTrackingRequired(object entityType, object changeTrackingStrategy, object fullStrategy, object fullPlusStrategy);
    [NullableContextAttribute("1")]
public static string FunctionOnClient(object methodName);
    [NullableContextAttribute("1")]
public static string GraphDoesNotContainVertex(object vertex);
    [NullableContextAttribute("1")]
public static string get_HiLoBadBlockSize();
    [NullableContextAttribute("1")]
public static string IdentifyingRelationshipCycle(object entityType);
    public static string IdentityConflict(object entityType, object keyProperties);
    public static string IdentityConflictOwned(object entityType, object keyProperties);
    public static string IdentityConflictOwnedSensitive(object entityType, object keyValue);
    public static string IdentityConflictSensitive(object entityType, object keyValue);
    [NullableContextAttribute("1")]
public static string ImplementationTypeRequired(object service);
    [ObsoleteAttribute]
public static string IncludeOnEntityWithDefiningQueryNotSupported(object expression, object entityType);
    [NullableContextAttribute("1")]
public static string IncludeOnNonEntity(object expression);
    public static string IncludeWithCycle(object navigationName, object inverseNavigationName);
    [NullableContextAttribute("1")]
public static string get_IncompatibleSourcesForSetOperation();
    public static string InconsistentInheritance(object entityType, object baseEntityType, object clrBaseEntityType);
    public static string IncorrectNumberOfArguments(object method, object argumentCount, object parameterCount);
    public static string IndexPropertiesWrongEntity(object indexProperties, object entityType);
    public static string IndexWrongType(object index, object entityType, object otherEntityType);
    public static string InheritedPropertyCannotBeIgnored(object property, object entityType, object baseEntityType);
    public static string InterfacePropertyNotAdded(object entityType, object navigation, object propertyType);
    public static string InvalidAlternateKeyValue(object entityType, object keyProperty);
    [NullableContextAttribute("1")]
public static string get_InvalidDbContext();
    [NullableContextAttribute("1")]
public static string InvalidEntityType(object type);
    public static string InvalidEntityTypeConfigurationAttribute(object entityTypeConfigurationType, object entityType);
    public static string InvalidEnumValue(object value, object argumentName, object enumType);
    [NullableContextAttribute("1")]
public static string InvalidIncludeExpression(object expression);
    public static string InvalidKeyValue(object entityType, object keyProperty);
    [NullableContextAttribute("1")]
public static string InvalidMemberExpression(object expression);
    [NullableContextAttribute("1")]
public static string InvalidMembersExpression(object expression);
    public static string InvalidNavigationWithInverseProperty(object property, object entityType, object referencedProperty, object referencedEntityType);
    public static string InvalidNumberOfIndexSortOrderValues(object indexProperties, object numValues, object numProperties);
    [NullableContextAttribute("1")]
public static string get_InvalidPoolSize();
    public static string InvalidPropertyListOnNavigation(object navigation, object entityType, object properties);
    public static string InvalidRelationshipUsingDataAnnotations(object navigation, object entityType, object referencedNavigation, object referencedEntityType);
    public static string InvalidReplaceService(object replaceService, object useInternalServiceProvider);
    [NullableContextAttribute("1")]
public static string InvalidSetKeylessOperation(object entityType);
    public static string InvalidSetSameTypeWithDifferentNamespace(object typeName, object entityTypeName);
    [NullableContextAttribute("1")]
public static string InvalidSetSharedType(object typeName);
    [NullableContextAttribute("1")]
public static string InvalidSetType(object typeName);
    public static string InvalidSetTypeOwned(object typeName, object ownerType);
    public static string InvalidSwitch(object name, object value);
    public static string InvalidType(object property, object entityType, object valueType, object propertyType);
    public static string InvalidTypeConversationWithInclude(object includeExpression, object type);
    public static string InvalidUseService(object useService, object useInternalServiceProvider, object service);
    public static string InvalidValueGeneratorFactoryProperty(object factory, object property, object entityType);
    public static string InversePropertyMismatch(object navigation, object entityType, object referencedNavigation, object referencedEntityType);
    public static string InverseToOwnedType(object principalEntityType, object navigation, object ownedType, object ownerType);
    [NullableContextAttribute("1")]
public static string IQueryableNotAsync(object genericParameter);
    [NullableContextAttribute("1")]
public static string get_IQueryableProviderNotAsync();
    public static string KeyAttributeOnDerivedEntity(object derivedType, object property, object rootType);
    public static string KeyInUse(object keyProperties, object entityType, object foreignKeyProperties, object dependentType);
    public static string KeylessTypeExistingKey(object entityType, object keyProperties);
    [NullableContextAttribute("1")]
public static string KeylessTypeTracked(object type);
    public static string KeylessTypeWithKey(object keyProperties, object entityType);
    public static string KeyPropertiesWrongEntity(object keyProperties, object entityType);
    public static string KeyPropertyCannotBeNullable(object property, object entityType, object keyProperties);
    public static string KeyPropertyMustBeReadOnly(object property, object entityType);
    public static string KeyReadOnly(object property, object entityType);
    public static string KeyWrongType(object keyProperties, object entityType, object otherEntityType);
    [NullableContextAttribute("1")]
public static string LiteralGenerationNotSupported(object type);
    public static string ManyToManyOneNav(object entityType, object navigation);
    public static string MissingBackingField(object field, object property, object entityType);
    [NullableContextAttribute("1")]
public static string get_ModelMutable();
    [NullableContextAttribute("1")]
public static string ModelNotFinalized(object method);
    [NullableContextAttribute("1")]
public static string get_ModelReadOnly();
    public static string MultipleFilteredIncludesOnSameNavigation(object filter1, object filter2);
    public static string MultipleNavigationsSameFk(object entityType, object properties, object navigations);
    public static string MultipleOwnerships(object entityType, object navigations);
    [NullableContextAttribute("1")]
public static string MultipleProvidersConfigured(object storeNames);
    [NullableContextAttribute("1")]
public static string MutableKeyProperty(object keyProperty);
    public static string NamedIndexDefinedOnIgnoredProperty(object indexName, object entityType, object indexProperties, object propertyName);
    public static string NamedIndexDefinedOnNonExistentProperty(object indexName, object entityType, object indexProperties, object propertyName);
    public static string NamedIndexWrongType(object indexName, object entityType);
    public static string NavigationArray(object navigation, object entityType, object foundType);
    public static string NavigationBadType(object navigation, object entityType, object foundType, object targetType);
    public static string NavigationCannotCreateType(object navigation, object entityType, object foundType);
    public static string NavigationCollectionWrongClrType(object navigation, object entityType, object clrType, object targetType);
    public static string NavigationForWrongForeignKey(object navigation, object entityType, object targetForeignKeyProperties, object actualForeignKeyProperties);
    public static string NavigationIsProperty(object property, object entityType, object referenceMethod, object collectionMethod, object propertyMethod);
    public static string NavigationlessOwnership(object principalEntityType, object dependentEntityType);
    public static string NavigationNoSetter(object navigation, object entityType);
    public static string NavigationNotAdded(object entityType, object navigation, object propertyType);
    public static string NavigationSingleWrongClrType(object navigation, object entityType, object clrType, object targetType);
    public static string NavigationToKeylessType(object navigation, object entityType);
    public static string NoBackingField(object property, object entityType, object propertyAccessMode);
    public static string NoBackingFieldLazyLoading(object property, object entityType);
    public static string NoClrNavigation(object navigation, object entityType);
    [NullableContextAttribute("1")]
public static string NoDiscriminatorProperty(object entityType);
    [NullableContextAttribute("1")]
public static string NoDiscriminatorValue(object entityType);
    [NullableContextAttribute("1")]
public static string get_NoEfServices();
    public static string NoFieldOrGetter(object property, object entityType);
    public static string NoFieldOrSetter(object property, object entityType);
    public static string NoGetter(object property, object entityType, object propertyAccessMode);
    [NullableContextAttribute("1")]
public static string get_NoInterceptionResult();
    public static string NonComparableKeyType(object entityType, object property, object providerType);
    public static string NonComparableKeyTypes(object entityType, object property, object modelType, object providerType);
    public static string NonConfiguredNavigationToSharedType(object navigation, object entityType);
    [NullableContextAttribute("1")]
public static string NonGenericOptions(object contextType);
    public static string NonIndexerEntityType(object property, object entityType, object type);
    public static string NonNotifyingCollection(object navigation, object entityType, object collectionType, object changeTrackingStrategy);
    public static string NonUniqueRequiredDependentForeignKey(object foreignKeyProperties, object declaringEntityType);
    public static string NonUniqueRequiredDependentNavigation(object principalEntityType, object principalNavigation);
    [NullableContextAttribute("1")]
public static string NoParameterlessConstructor(object entityType);
    public static string NoProperty(object field, object entity, object propertyAccessMode);
    public static string NoPropertyType(object property, object entityType);
    [NullableContextAttribute("1")]
public static string get_NoProviderConfigured();
    [NullableContextAttribute("1")]
public static string NoProviderConfiguredFailedToResolveService(object service);
    public static string NoSetter(object property, object entityType, object propertyAccessMode);
    [NullableContextAttribute("1")]
public static string NotAnEFService(object service);
    [NullableContextAttribute("1")]
public static string NotAProviderService(object service);
    public static string NotAssignableClrBaseType(object entityType, object baseEntityType, object clrType, object baseClrType);
    [NullableContextAttribute("1")]
public static string get_NotQueryingEnumerable();
    public static string NoValueGenerator(object property, object entityType, object propertyType);
    public static string NullableKey(object entityType, object property);
    [NullableContextAttribute("1")]
public static string get_ObjectRemovedFromModel();
    [NullableContextAttribute("1")]
public static string OptionsExtensionNotFound(object optionsExtension);
    public static string OriginalValueNotTracked(object property, object entityType);
    [NullableContextAttribute("1")]
public static string OwnedDerivedType(object entityType);
    [NullableContextAttribute("1")]
public static string get_OwnedEntitiesCannotBeTrackedWithoutTheirOwner();
    [NullableContextAttribute("1")]
public static string OwnerlessOwnedType(object ownedType);
    public static string OwnershipToDependent(object navigation, object principalEntityType, object dependentEntityType);
    [NullableContextAttribute("1")]
public static string PoolingContextCtorError(object contextType);
    [NullableContextAttribute("1")]
public static string get_PoolingOptionsModified();
    public static string PrimaryKeyAttributeOnDerivedEntity(object derivedType, object rootType);
    public static string PrimaryKeyDefinedOnIgnoredProperty(object entityType, object propertyName);
    public static string PrimaryKeyDefinedOnNonExistentProperty(object entityType, object properties, object propertyName);
    public static string PrincipalEndIncompatibleNavigations(object navigationSpecification1, object navigationSpecification2, object targetEntityType);
    public static string PrincipalEntityTypeNotInRelationship(object dependentEntityType, object principalEntityType, object entityType);
    public static string PrincipalKeylessType(object entityType, object firstNavigationSpecification, object secondNavigationSpecification);
    public static string PrincipalOwnedType(object referencingEntityTypeOrNavigation, object referencedEntityTypeOrNavigation, object ownedType);
    public static string PropertyCalledOnNavigation(object property, object entityType);
    public static string PropertyClashingNonIndexer(object property, object entityType);
    public static string PropertyConceptualNull(object property, object entityType);
    public static string PropertyConceptualNullSensitive(object property, object entityType, object keyValue);
    public static string PropertyDoesNotBelong(object property, object entityType, object expectedType);
    public static string PropertyInUseForeignKey(object property, object entityType, object foreignKeyProperties, object foreignKeyType);
    public static string PropertyInUseIndex(object property, object entityType, object index, object indexType);
    public static string PropertyInUseKey(object property, object entityType, object keyProperties);
    public static string PropertyIsNavigation(object property, object entityType, object propertyMethod, object referenceMethod, object collectionMethod);
    [NullableContextAttribute("1")]
public static string get_PropertyMethodInvoked();
    public static string PropertyNotAdded(object entityType, object property, object propertyType);
    public static string PropertyNotFound(object property, object entityType);
    public static string PropertyNotMapped(object propertyType, object entityType, object property);
    public static string PropertyReadOnlyAfterSave(object property, object entityType);
    public static string PropertyReadOnlyBeforeSave(object property, object entityType);
    public static string PropertyWrongClrType(object property, object entityType, object clrType, object propertyType);
    public static string PropertyWrongEntityClrType(object property, object entityType, object clrType);
    public static string PropertyWrongName(object property, object entityType, object clrName);
    public static string PropertyWrongType(object property, object entityType, object otherEntityType);
    [NullableContextAttribute("1")]
public static string QueryEntityMaterializationConditionWrongShape(object entityType);
    public static string QueryInvalidMaterializationType(object projection, object queryableType);
    [NullableContextAttribute("1")]
public static string QueryRootDifferentEntityType(object entityType);
    [NullableContextAttribute("1")]
public static string get_QuerySelectContainsGrouping();
    [NullableContextAttribute("1")]
public static string QueryUnableToTranslateEFProperty(object expression);
    public static string QueryUnableToTranslateMember(object member, object entityType);
    public static string QueryUnableToTranslateMethod(object declaringTypeName, object methodName);
    [NullableContextAttribute("1")]
public static string get_QueryUnableToTranslateStringEqualsWithStringComparison();
    [NullableContextAttribute("1")]
public static string QueryUnhandledQueryRootExpression(object type);
    [NullableContextAttribute("1")]
public static string get_RecursiveOnConfiguring();
    [NullableContextAttribute("1")]
public static string get_RecursiveOnModelCreating();
    public static string ReferencedShadowKey(object referencingEntityTypeOrNavigation, object referencedEntityTypeOrNavigation, object foreignKeyPropertiesWithTypes, object primaryKeyPropertiesWithTypes);
    public static string ReferenceIsCollection(object property, object entityType, object referenceMethod, object collectionMethod);
    public static string ReferenceMustBeLoaded(object navigation, object entityType);
    [NullableContextAttribute("1")]
public static string get_RelationshipCannotBeInverted();
    public static string RelationshipConceptualNull(object firstType, object secondType);
    public static string RelationshipConceptualNullSensitive(object firstType, object secondType, object secondKeyValue);
    public static string RequiredSkipNavigation(object entityType, object navigation);
    [NullableContextAttribute("1")]
public static string get_ResetNotSupported();
    public static string RetryLimitExceeded(object retryLimit, object strategy);
    [NullableContextAttribute("1")]
public static string get_RuntimeModelMissingData();
    [NullableContextAttribute("1")]
public static string get_RuntimeParameterMissingParameter();
    [NullableContextAttribute("1")]
public static string SaveOwnedWithoutOwner(object entityType);
    [NullableContextAttribute("1")]
public static string get_SavepointsNotSupported();
    public static string SeedDatumDefaultValue(object entityType, object property, object defaultValue);
    public static string SeedDatumDerivedType(object entityType, object derivedType);
    public static string SeedDatumDuplicate(object entityType, object keyProperties);
    public static string SeedDatumDuplicateSensitive(object entityType, object keyValue);
    public static string SeedDatumIncompatibleValue(object entityType, object property, object type);
    public static string SeedDatumIncompatibleValueSensitive(object entityType, object value, object property, object type);
    public static string SeedDatumMissingValue(object entityType, object property);
    public static string SeedDatumNavigation(object entityType, object navigation, object relatedEntityType, object foreignKeyProperties);
    public static string SeedDatumNavigationSensitive(object entityType, object keyValue, object navigation, object relatedEntityType, object foreignKeyProperties);
    public static string SeedDatumSignedNumericValue(object entityType, object property);
    [NullableContextAttribute("1")]
public static string SeedKeylessEntity(object entityType);
    public static string SelfReferencingNavigationWithInverseProperty(object entityType, object property);
    [NullableContextAttribute("1")]
public static string get_SensitiveDataDisabled();
    [NullableContextAttribute("1")]
public static string get_SequenceContainsMoreThanOneElement();
    [NullableContextAttribute("1")]
public static string get_SequenceContainsNoElements();
    [NullableContextAttribute("1")]
public static string ServiceProviderConfigAdded(object key);
    [NullableContextAttribute("1")]
public static string ServiceProviderConfigChanged(object key);
    [NullableContextAttribute("1")]
public static string ServiceProviderConfigRemoved(object key);
    [NullableContextAttribute("1")]
public static string get_SetOperationWithDifferentIncludesInOperands();
    [NullableContextAttribute("1")]
public static string SharedTypeDerivedType(object entityType);
    public static string SingletonOptionChanged(object optionCall, object useInternalServiceProvider);
    public static string SingletonRequired(object scope, object service);
    public static string SkipInverseMismatchedForeignKey(object foreignKeyProperties, object navigation, object joinType, object inverse, object inverseJoinType);
    public static string SkipInverseMismatchedJoinType(object inverse, object inverseJoinType, object navigation, object joinType);
    public static string SkipNavigationForeignKeyWrongDependentType(object foreignKeyProperties, object entityType, object navigation, object dependentEntityType);
    public static string SkipNavigationForeignKeyWrongPrincipalType(object foreignKeyProperties, object entityType, object navigation, object principalEntityType);
    public static string SkipNavigationInUseBySkipNavigation(object entityType, object skipNavigation, object referencingEntityType, object inverseSkipNavigation);
    public static string SkipNavigationNoForeignKey(object navigation, object entityType);
    public static string SkipNavigationNoInverse(object navigation, object entityType);
    public static string SkipNavigationNonCollection(object navigation, object entityType);
    public static string SkipNavigationWrongInverse(object inverse, object inverseEntityType, object navigation, object targetEntityType);
    public static string SkipNavigationWrongType(object navigation, object entityType, object otherEntityType);
    public static string StoreGenValue(object property, object entityType);
    public static string TempValue(object property, object entityType);
    public static string TempValuePersists(object property, object entityType, object state);
    public static string TrackingTypeMismatch(object runtimeEntityType, object entityType);
    [NullableContextAttribute("1")]
public static string get_TransactionsNotSupported();
    [NullableContextAttribute("1")]
public static string TranslationFailed(object expression);
    public static string TranslationFailedWithDetails(object expression, object details);
    public static string TypeConfigurationConflict(object type, object typeConfiguration, object otherType, object otherTypeConfiguration);
    [NullableContextAttribute("1")]
public static string TypeNotMarkedAsShared(object type);
    public static string UnableToDiscriminate(object entityType, object discriminator);
    public static string UnableToSetIsUnique(object isUnique, object navigationName, object entityType);
    public static string UnconfigurableType(object type, object configuration, object expectedConfiguration, object configurationType);
    [NullableContextAttribute("1")]
public static string UnconfigurableTypeMapping(object type);
    [NullableContextAttribute("1")]
public static string UnhandledExpressionNode(object nodeType);
    [NullableContextAttribute("1")]
public static string UnhandledMemberBinding(object bindingType);
    [NullableContextAttribute("1")]
public static string UnhandledNavigationBase(object type);
    [NullableContextAttribute("1")]
public static string UnknownEntity(object entity);
    public static string UnknownKeyValue(object entityType, object property);
    public static string UnknownShadowKeyValue(object entityType, object property);
    public static string UnnamedIndexDefinedOnIgnoredProperty(object entityType, object indexProperties, object propertyName);
    public static string UnnamedIndexDefinedOnNonExistentProperty(object entityType, object indexProperties, object propertyName);
    public static string UntrackedDependentEntity(object entityType, object referenceCall, object collectionCall);
    public static string ValueCannotBeNull(object property, object entityType, object propertyType);
    [NullableContextAttribute("1")]
public static string VisitIsNotAllowed(object visitMethodName);
    public static string WarningAsErrorTemplate(object eventName, object message, object eventId);
    public static string WrongGenericPropertyType(object property, object entityType, object actualType, object genericType);
    [NullableContextAttribute("1")]
public static string WrongStateManager(object entityType);
    private static string GetString(string name, String[] formatterNames);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.DbContextErrorEventData : DbContextEventData {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; }
    public DbContextErrorEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbContext context, Exception exception);
    [CompilerGeneratedAttribute]
public virtual Exception get_Exception();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.DbContextEventData : EventData {
    [CompilerGeneratedAttribute]
private DbContext <Context>k__BackingField;
    public DbContext Context { get; }
    [NullableContextAttribute("1")]
public DbContextEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbContext context);
    [CompilerGeneratedAttribute]
public virtual DbContext get_Context();
}
[FlagsAttribute]
public enum Microsoft.EntityFrameworkCore.Diagnostics.DbContextLoggerOptions : Enum {
    public int value__;
    public static DbContextLoggerOptions None;
    public static DbContextLoggerOptions SingleLine;
    public static DbContextLoggerOptions Level;
    public static DbContextLoggerOptions Category;
    public static DbContextLoggerOptions Id;
    public static DbContextLoggerOptions UtcTime;
    public static DbContextLoggerOptions LocalTime;
    public static DbContextLoggerOptions DefaultWithLocalTime;
    public static DbContextLoggerOptions DefaultWithUtcTime;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.DbContextTypeErrorEventData : DbContextTypeEventData {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; }
    public DbContextTypeErrorEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, Type contextType, Exception exception);
    [CompilerGeneratedAttribute]
public virtual Exception get_Exception();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.DbContextTypeEventData : EventData {
    [CompilerGeneratedAttribute]
private Type <ContextType>k__BackingField;
    public Type ContextType { get; }
    public DbContextTypeEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, Type contextType);
    [CompilerGeneratedAttribute]
public virtual Type get_ContextType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.EntityEntryEventData : EventData {
    [CompilerGeneratedAttribute]
private EntityEntry <EntityEntry>k__BackingField;
    public EntityEntry EntityEntry { get; }
    public EntityEntryEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, EntityEntry entityEntry);
    [CompilerGeneratedAttribute]
public virtual EntityEntry get_EntityEntry();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.EntityTypeEventData : EventData {
    [CompilerGeneratedAttribute]
private IReadOnlyEntityType <EntityType>k__BackingField;
    public IReadOnlyEntityType EntityType { get; }
    public EntityTypeEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IReadOnlyEntityType entityType);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyEntityType get_EntityType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.EventData : object {
    private EventDefinitionBase _eventDefinition;
    private Func`3<EventDefinitionBase, EventData, string> _messageGenerator;
    public EventId EventId { get; }
    public LogLevel LogLevel { get; }
    public string EventIdCode { get; }
    public EventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator);
    public virtual EventId get_EventId();
    public virtual LogLevel get_LogLevel();
    public virtual string get_EventIdCode();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition : EventDefinitionBase {
    private Action`2<ILogger, Exception> _logAction;
    public EventDefinition(ILoggingOptions loggingOptions, EventId eventId, LogLevel level, string eventIdCode, Func`2<LogLevel, Action`2<ILogger, Exception>> logActionFunc);
    public virtual string GenerateMessage();
    public virtual void Log(IDiagnosticsLogger`1<TLoggerCategory> logger, Exception exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`1 : EventDefinitionBase {
    private Action`3<ILogger, TParam, Exception> _logAction;
    public EventDefinition`1(ILoggingOptions loggingOptions, EventId eventId, LogLevel level, string eventIdCode, Func`2<LogLevel, Action`3<ILogger, TParam, Exception>> logActionFunc);
    public virtual string GenerateMessage(TParam arg);
    public virtual void Log(IDiagnosticsLogger`1<TLoggerCategory> logger, TParam arg);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`2 : EventDefinitionBase {
    private Action`4<ILogger, TParam1, TParam2, Exception> _logAction;
    public EventDefinition`2(ILoggingOptions loggingOptions, EventId eventId, LogLevel level, string eventIdCode, Func`2<LogLevel, Action`4<ILogger, TParam1, TParam2, Exception>> logActionFunc);
    public virtual string GenerateMessage(TParam1 arg1, TParam2 arg2);
    public virtual void Log(IDiagnosticsLogger`1<TLoggerCategory> logger, TParam1 arg1, TParam2 arg2);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`3 : EventDefinitionBase {
    private Action`5<ILogger, TParam1, TParam2, TParam3, Exception> _logAction;
    public EventDefinition`3(ILoggingOptions loggingOptions, EventId eventId, LogLevel level, string eventIdCode, Func`2<LogLevel, Action`5<ILogger, TParam1, TParam2, TParam3, Exception>> logActionFunc);
    public virtual string GenerateMessage(TParam1 arg1, TParam2 arg2, TParam3 arg3, Exception exception);
    public virtual void Log(IDiagnosticsLogger`1<TLoggerCategory> logger, TParam1 arg1, TParam2 arg2, TParam3 arg3, Exception exception);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`4 : EventDefinitionBase {
    private Action`6<ILogger, TParam1, TParam2, TParam3, TParam4, Exception> _logAction;
    [NullableContextAttribute("1")]
public EventDefinition`4(ILoggingOptions loggingOptions, EventId eventId, LogLevel level, string eventIdCode, Func`2<LogLevel, Action`6<ILogger, TParam1, TParam2, TParam3, TParam4, Exception>> logActionFunc);
    [NullableContextAttribute("1")]
public virtual string GenerateMessage(TParam1 arg1, TParam2 arg2, TParam3 arg3, TParam4 arg4);
    [NullableContextAttribute("1")]
public virtual void Log(IDiagnosticsLogger`1<TLoggerCategory> logger, TParam1 arg1, TParam2 arg2, TParam3 arg3, TParam4 arg4);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`5 : EventDefinitionBase {
    private Action`7<ILogger, TParam1, TParam2, TParam3, TParam4, TParam5, Exception> _logAction;
    [NullableContextAttribute("1")]
public EventDefinition`5(ILoggingOptions loggingOptions, EventId eventId, LogLevel level, string eventIdCode, Func`2<LogLevel, Action`7<ILogger, TParam1, TParam2, TParam3, TParam4, TParam5, Exception>> logActionFunc);
    [NullableContextAttribute("1")]
public virtual string GenerateMessage(TParam1 arg1, TParam2 arg2, TParam3 arg3, TParam4 arg4, TParam5 arg5);
    [NullableContextAttribute("1")]
public virtual void Log(IDiagnosticsLogger`1<TLoggerCategory> logger, TParam1 arg1, TParam2 arg2, TParam3 arg3, TParam4 arg4, TParam5 arg5);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.EventDefinition`6 : EventDefinitionBase {
    private Action`8<ILogger, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, Exception> _logAction;
    [NullableContextAttribute("1")]
public EventDefinition`6(ILoggingOptions loggingOptions, EventId eventId, LogLevel level, string eventIdCode, Func`2<LogLevel, Action`8<ILogger, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, Exception>> logActionFunc);
    [NullableContextAttribute("1")]
public virtual string GenerateMessage(TParam1 arg1, TParam2 arg2, TParam3 arg3, TParam4 arg4, TParam5 arg5, TParam6 arg6);
    [NullableContextAttribute("1")]
public virtual void Log(IDiagnosticsLogger`1<TLoggerCategory> logger, TParam1 arg1, TParam2 arg2, TParam3 arg3, TParam4 arg4, TParam5 arg5, TParam6 arg6);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase : object {
    [CompilerGeneratedAttribute]
private EventId <EventId>k__BackingField;
    [CompilerGeneratedAttribute]
private LogLevel <Level>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EventIdCode>k__BackingField;
    [CompilerGeneratedAttribute]
private WarningBehavior <WarningBehavior>k__BackingField;
    public EventId EventId { get; }
    public LogLevel Level { get; }
    public string EventIdCode { get; }
    public WarningBehavior WarningBehavior { get; }
    protected EventDefinitionBase(ILoggingOptions loggingOptions, EventId eventId, LogLevel level, string eventIdCode);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual EventId get_EventId();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual LogLevel get_Level();
    [CompilerGeneratedAttribute]
public virtual string get_EventIdCode();
    protected virtual Exception WarningAsError(string message);
    [CompilerGeneratedAttribute]
public virtual WarningBehavior get_WarningBehavior();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.ExecutionStrategyEventData : EventData {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Exception> <ExceptionsEncountered>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Delay>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    public IReadOnlyList`1<Exception> ExceptionsEncountered { get; }
    public TimeSpan Delay { get; }
    public bool IsAsync { get; }
    public ExecutionStrategyEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IReadOnlyList`1<Exception> exceptionsEncountered, TimeSpan delay, bool async);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<Exception> get_ExceptionsEncountered();
    [CompilerGeneratedAttribute]
public virtual TimeSpan get_Delay();
    [CompilerGeneratedAttribute]
public virtual bool get_IsAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.ExpressionEventData : EventData {
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    public Expression Expression { get; }
    public ExpressionEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, Expression expression);
    [CompilerGeneratedAttribute]
public virtual Expression get_Expression();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.FallbackEventDefinition : EventDefinitionBase {
    [CompilerGeneratedAttribute]
private string <MessageFormat>k__BackingField;
    public string MessageFormat { get; }
    public FallbackEventDefinition(ILoggingOptions loggingOptions, EventId eventId, LogLevel level, string eventIdCode, string messageFormat);
    public virtual string GenerateMessage(Action`1<ILogger> logAction);
    public virtual void Log(IDiagnosticsLogger`1<TLoggerCategory> logger, Action`1<ILogger> logAction);
    [CompilerGeneratedAttribute]
public virtual string get_MessageFormat();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.ForeignKeyCandidateEventData : TwoPropertyBaseCollectionsEventData {
    [CompilerGeneratedAttribute]
private string <DependentToPrincipalNavigationSpecification>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrincipalToDependentNavigationSpecification>k__BackingField;
    public string DependentToPrincipalNavigationSpecification { get; }
    public string PrincipalToDependentNavigationSpecification { get; }
    public ForeignKeyCandidateEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, string dependentToPrincipalNavigationSpecification, string principalToDependentNavigationSpecification, IReadOnlyList`1<IReadOnlyPropertyBase> firstPropertyCollection, IReadOnlyList`1<IReadOnlyPropertyBase> secondPropertyCollection);
    [CompilerGeneratedAttribute]
public virtual string get_DependentToPrincipalNavigationSpecification();
    [CompilerGeneratedAttribute]
public virtual string get_PrincipalToDependentNavigationSpecification();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.ForeignKeyEventData : EventData {
    [CompilerGeneratedAttribute]
private IReadOnlyForeignKey <ForeignKey>k__BackingField;
    public IReadOnlyForeignKey ForeignKey { get; }
    public ForeignKeyEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IReadOnlyForeignKey foreignKey);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyForeignKey get_ForeignKey();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Diagnostics.ICollectionChangedEventData {
    public EntityEntry EntityEntry { get; }
    public IEnumerable`1<object> Added { get; }
    public IEnumerable`1<object> Removed { get; }
    public abstract virtual EntityEntry get_EntityEntry();
    public abstract virtual IEnumerable`1<object> get_Added();
    public abstract virtual IEnumerable`1<object> get_Removed();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Diagnostics.IDbContextLogger {
    public abstract virtual void Log(EventData eventData);
    public abstract virtual bool ShouldLog(EventId eventId, LogLevel logLevel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Diagnostics.IdentityResolutionInterceptionData : ValueType {
    [CompilerGeneratedAttribute]
private DbContext <Context>k__BackingField;
    public DbContext Context { get; }
    public IdentityResolutionInterceptionData(DbContext context);
    [CompilerGeneratedAttribute]
public DbContext get_Context();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger {
    public ILoggingOptions Options { get; }
    public LoggingDefinitions Definitions { get; }
    public ILogger Logger { get; }
    public DiagnosticSource DiagnosticSource { get; }
    public IDbContextLogger DbContextLogger { get; }
    [NullableAttribute("2")]
public IInterceptors Interceptors { get; }
    public abstract virtual ILoggingOptions get_Options();
    public abstract virtual LoggingDefinitions get_Definitions();
    public abstract virtual bool ShouldLogSensitiveData();
    public abstract virtual ILogger get_Logger();
    public abstract virtual DiagnosticSource get_DiagnosticSource();
    public abstract virtual IDbContextLogger get_DbContextLogger();
    [NullableContextAttribute("2")]
public abstract virtual IInterceptors get_Interceptors();
    public virtual bool ShouldLog(EventDefinitionBase definition);
    public virtual void DispatchEventData(EventDefinitionBase definition, EventData eventData, bool diagnosticSourceEnabled, bool simpleLogEnabled);
    public virtual bool NeedsEventData(EventDefinitionBase definition, Boolean& diagnosticSourceEnabled, Boolean& simpleLogEnabled);
    public virtual bool NeedsEventData(EventDefinitionBase definition, TInterceptor& interceptor, Boolean& diagnosticSourceEnabled, Boolean& simpleLogEnabled);
}
public interface Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger`1 {
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Diagnostics.IErrorEventData {
    public Exception Exception { get; }
    public abstract virtual Exception get_Exception();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.IgnoringIdentityResolutionInterceptor : object {
    [NullableContextAttribute("1")]
public virtual void UpdateTrackedInstance(IdentityResolutionInterceptionData interceptionData, EntityEntry existingEntry, object newEntity);
}
public interface Microsoft.EntityFrameworkCore.Diagnostics.IIdentityResolutionInterceptor {
    [NullableContextAttribute("1")]
public abstract virtual void UpdateTrackedInstance(IdentityResolutionInterceptionData interceptionData, EntityEntry existingEntry, object newEntity);
}
public interface Microsoft.EntityFrameworkCore.Diagnostics.IInstantiationBindingInterceptor {
    [NullableContextAttribute("1")]
public abstract virtual InstantiationBinding ModifyBinding(InstantiationBindingInterceptionData interceptionData, InstantiationBinding binding);
}
public interface Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor {
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Diagnostics.IInterceptorAggregator {
    public Type InterceptorType { get; }
    public abstract virtual Type get_InterceptorType();
    public abstract virtual IInterceptor AggregateInterceptors(IReadOnlyList`1<IInterceptor> interceptors);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Diagnostics.IInterceptors {
    public abstract virtual TInterceptor Aggregate();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions {
    public bool IsSensitiveDataLoggingEnabled { get; }
    public bool IsSensitiveDataLoggingWarned { get; public set; }
    public bool DetailedErrorsEnabled { get; }
    public WarningsConfiguration WarningsConfiguration { get; }
    public abstract virtual bool get_IsSensitiveDataLoggingEnabled();
    public abstract virtual bool get_IsSensitiveDataLoggingWarned();
    public abstract virtual void set_IsSensitiveDataLoggingWarned(bool value);
    public abstract virtual bool get_DetailedErrorsEnabled();
    public abstract virtual WarningsConfiguration get_WarningsConfiguration();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Diagnostics.IMaterializationInterceptor {
    public virtual InterceptionResult`1<object> CreatingInstance(MaterializationInterceptionData materializationData, InterceptionResult`1<object> result);
    public virtual object CreatedInstance(MaterializationInterceptionData materializationData, object entity);
    public virtual InterceptionResult InitializingInstance(MaterializationInterceptionData materializationData, object entity, InterceptionResult result);
    public virtual object InitializedInstance(MaterializationInterceptionData materializationData, object entity);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Diagnostics.INavigationBaseEventData {
    public INavigationBase NavigationBase { get; }
    public abstract virtual INavigationBase get_NavigationBase();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Diagnostics.InstantiationBindingInterceptionData : ValueType {
    [CompilerGeneratedAttribute]
private IEntityType <EntityType>k__BackingField;
    public IEntityType EntityType { get; }
    public InstantiationBindingInterceptionData(IEntityType entityType);
    [CompilerGeneratedAttribute]
public IEntityType get_EntityType();
}
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsSuppressed>k__BackingField;
    public bool IsSuppressed { get; }
    private InterceptionResult(bool suppress);
    public static InterceptionResult Suppress();
    [CompilerGeneratedAttribute]
public bool get_IsSuppressed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1 : ValueType {
    private TResult _result;
    [CompilerGeneratedAttribute]
private bool <HasResult>k__BackingField;
    public TResult Result { get; }
    public bool HasResult { get; }
    private InterceptionResult`1(TResult result);
    public static InterceptionResult`1<TResult> SuppressWithResult(TResult result);
    public TResult get_Result();
    [CompilerGeneratedAttribute]
public bool get_HasResult();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Diagnostics.InterceptorAggregator`1 : object {
    private TInterceptor _interceptor;
    private bool _resolved;
    public Type InterceptorType { get; }
    public virtual Type get_InterceptorType();
    public virtual IInterceptor AggregateInterceptors(IReadOnlyList`1<IInterceptor> interceptors);
    protected abstract virtual TInterceptor CreateChain(IEnumerable`1<TInterceptor> interceptors);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.EntityFrameworkCore.Diagnostics.Internal.CoreResources : object {
    private static ResourceManager _resourceManager;
    private static CoreResources();
    public static EventDefinition`2<string, string> LogAmbiguousEndRequired(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, EntityState, string> LogCascadeDelete(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, EntityState, string> LogCascadeDeleteOrphan(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, string, EntityState, string> LogCascadeDeleteOrphanSensitive(IDiagnosticsLogger logger);
    public static EventDefinition`5<string, string, EntityState, string, string> LogCascadeDeleteSensitive(IDiagnosticsLogger logger);
    public static EventDefinition`4<int, int, string, string> LogCollectionChangeDetected(IDiagnosticsLogger logger);
    public static EventDefinition`5<int, int, string, string, string> LogCollectionChangeDetectedSensitive(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogCollectionWithoutComparer(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, string, string, string> LogConflictingForeignKeyAttributesOnNavigationAndProperty(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogConflictingKeylessAndKeyAttributes(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, string> LogConflictingShadowForeignKeys(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogContextDisposed(IDiagnosticsLogger logger);
    public static EventDefinition`5<string, string, string, string, string> LogContextInitialized(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogDetachedLazyLoading(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogDetectChangesCompleted(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogDetectChangesStarting(IDiagnosticsLogger logger);
    public static EventDefinition LogDistinctAfterOrderByWithoutRowLimitingOperatorWarning(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogDuplicateDependentEntityTypeInstance(IDiagnosticsLogger logger);
    public static EventDefinition`3<Type, string, Exception> LogExceptionDuringQueryIteration(IDiagnosticsLogger logger);
    public static EventDefinition`3<Type, string, Exception> LogExceptionDuringSaveChanges(IDiagnosticsLogger logger);
    public static EventDefinition`3<int, string, Exception> LogExecutionStrategyRetrying(IDiagnosticsLogger logger);
    public static EventDefinition LogFirstWithoutOrderByAndFilter(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, string, string, string> LogForeignKeyAttributesOnBothNavigations(IDiagnosticsLogger logger);
    public static EventDefinition`6<string, string, string, string, string, string> LogForeignKeyAttributesOnBothProperties(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogForeignKeyChangeDetected(IDiagnosticsLogger logger);
    public static EventDefinition`5<string, string, object, object, string> LogForeignKeyChangeDetectedSensitive(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, string, string, string> LogIncompatibleMatchingForeignKeyProperties(IDiagnosticsLogger logger);
    public static EventDefinition`2<object, object> LogInvalidIncludePath(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogLazyLoadOnDisposedContext(IDiagnosticsLogger logger);
    public static EventDefinition LogManyServiceProvidersCreated(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogMultipleInversePropertiesSameTarget(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, string, string, string> LogMultipleNavigationProperties(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, string> LogMultiplePrimaryKeyCandidates(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogNavigationBaseIncluded(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogNavigationBaseIncludeIgnored(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogNavigationLazyLoading(IDiagnosticsLogger logger);
    public static EventDefinition`5<string, string, string, string, string> LogNonOwnershipInverseNavigation(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogOldModelVersion(IDiagnosticsLogger logger);
    public static EventDefinition`1<Exception> LogOptimisticConcurrencyException(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogPossibleIncorrectRequiredNavigationWithQueryFilterInteraction(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogPossibleUnintendedCollectionNavigationNullComparison(IDiagnosticsLogger logger);
    public static EventDefinition`2<object, object> LogPossibleUnintendedReferenceComparison(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogPropertyChangeDetected(IDiagnosticsLogger logger);
    public static EventDefinition`5<string, string, object, object, string> LogPropertyChangeDetectedSensitive(IDiagnosticsLogger logger);
    public static EventDefinition`1<Type> LogQueryCanceled(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogQueryCompilationStarting(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogQueryExecutionPlanned(IDiagnosticsLogger logger);
    public static EventDefinition LogRedundantAddServicesCall(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogRedundantForeignKey(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, string> LogRedundantIndexRemoved(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogReferenceChangeDetected(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, string> LogReferenceChangeDetectedSensitive(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogRequiredAttributeOnCollection(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogRequiredAttributeOnSkipNavigation(IDiagnosticsLogger logger);
    public static EventDefinition LogRowLimitingOperationWithoutOrderBy(IDiagnosticsLogger logger);
    public static EventDefinition`1<Type> LogSaveChangesCanceled(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, int> LogSaveChangesCompleted(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogSaveChangesStarting(IDiagnosticsLogger logger);
    public static EventDefinition LogSensitiveDataLoggingEnabled(IDiagnosticsLogger logger);
    public static EventDefinition LogServiceProviderCreated(IDiagnosticsLogger logger);
    public static EventDefinition`1<string> LogServiceProviderDebugInfo(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, string> LogShadowForeignKeyPropertyCreated(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogShadowPropertyCreated(IDiagnosticsLogger logger);
    public static EventDefinition`4<int, int, string, string> LogSkipCollectionChangeDetected(IDiagnosticsLogger logger);
    public static EventDefinition`5<int, int, string, string, string> LogSkipCollectionChangeDetectedSensitive(IDiagnosticsLogger logger);
    public static EventDefinition`2<string, string> LogStartedTracking(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, string> LogStartedTrackingSensitive(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, string, EntityState, EntityState> LogStateChanged(IDiagnosticsLogger logger);
    public static EventDefinition`5<string, string, string, EntityState, EntityState> LogStateChangedSensitive(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, string> LogTempValueGenerated(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, object, string, string> LogTempValueGeneratedSensitive(IDiagnosticsLogger logger);
    public static EventDefinition`3<string, string, string> LogValueGenerated(IDiagnosticsLogger logger);
    public static EventDefinition`4<string, object, string, string> LogValueGeneratedSensitive(IDiagnosticsLogger logger);
}
public class Microsoft.EntityFrameworkCore.Diagnostics.Internal.DelegatingDbContextLogger : object {
    private Action`1<EventData> _logger;
    private Func`3<EventId, LogLevel, bool> _filter;
    [NullableContextAttribute("1")]
public DelegatingDbContextLogger(Action`1<EventData> logger, Func`3<EventId, LogLevel, bool> filter);
    [NullableContextAttribute("1")]
public virtual void Log(EventData eventData);
    public virtual bool ShouldLog(EventId eventId, LogLevel logLevel);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.Internal.DiagnosticsLogger`1 : object {
    [CompilerGeneratedAttribute]
private ILoggingOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IInterceptors <Interceptors>k__BackingField;
    [CompilerGeneratedAttribute]
private DiagnosticSource <DiagnosticSource>k__BackingField;
    [CompilerGeneratedAttribute]
private LoggingDefinitions <Definitions>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbContextLogger <DbContextLogger>k__BackingField;
    public ILoggingOptions Options { get; }
    public ILogger Logger { get; }
    [NullableAttribute("2")]
public IInterceptors Interceptors { get; }
    public DiagnosticSource DiagnosticSource { get; }
    public LoggingDefinitions Definitions { get; }
    public IDbContextLogger DbContextLogger { get; }
    public DiagnosticsLogger`1(ILoggerFactory loggerFactory, ILoggingOptions loggingOptions, DiagnosticSource diagnosticSource, LoggingDefinitions loggingDefinitions, IDbContextLogger contextLogger, IInterceptors interceptors);
    [CompilerGeneratedAttribute]
public virtual ILoggingOptions get_Options();
    [CompilerGeneratedAttribute]
public virtual ILogger get_Logger();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual IInterceptors get_Interceptors();
    [CompilerGeneratedAttribute]
public virtual DiagnosticSource get_DiagnosticSource();
    [CompilerGeneratedAttribute]
public virtual LoggingDefinitions get_Definitions();
    [CompilerGeneratedAttribute]
public virtual IDbContextLogger get_DbContextLogger();
    public virtual bool ShouldLogSensitiveData();
    protected void DispatchEventData(EventDefinitionBase definition, EventData eventData, bool diagnosticSourceEnabled, bool simpleLogEnabled);
    protected bool ShouldLog(EventDefinitionBase definition);
    protected bool NeedsEventData(EventDefinitionBase definition, TInterceptor& interceptor, Boolean& diagnosticSourceEnabled, Boolean& simpleLogEnabled);
}
public class Microsoft.EntityFrameworkCore.Diagnostics.Internal.FormattingDbContextLogger : object {
    private Action`1<string> _sink;
    private Func`3<EventId, LogLevel, bool> _filter;
    private DbContextLoggerOptions _options;
    [NullableContextAttribute("1")]
public FormattingDbContextLogger(Action`1<string> sink, Func`3<EventId, LogLevel, bool> filter, DbContextLoggerOptions options);
    [NullableContextAttribute("1")]
public virtual void Log(EventData eventData);
    public virtual bool ShouldLog(EventId eventId, LogLevel logLevel);
    private static string GetLogLevelString(LogLevel logLevel);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Diagnostics.Internal.IdentityResolutionInterceptorAggregator : InterceptorAggregator`1<IIdentityResolutionInterceptor> {
    protected virtual IIdentityResolutionInterceptor CreateChain(IEnumerable`1<IIdentityResolutionInterceptor> interceptors);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.Internal.Interceptors : object {
    private IServiceProvider _serviceProvider;
    private IEnumerable`1<IInterceptor> _injectedInterceptors;
    private Dictionary`2<Type, IInterceptorAggregator> _aggregators;
    private CoreOptionsExtension _coreOptionsExtension;
    private List`1<IInterceptor> _interceptors;
    private IReadOnlyList`1<IInterceptor> RegisteredInterceptors { get; }
    [NullableAttribute("2")]
private CoreOptionsExtension CoreOptionsExtension { get; }
    public Interceptors(IServiceProvider serviceProvider, IEnumerable`1<IInterceptor> injectedInterceptors, IEnumerable`1<IInterceptorAggregator> interceptorAggregators);
    private IReadOnlyList`1<IInterceptor> get_RegisteredInterceptors();
    public virtual TInterceptor Aggregate();
    private CoreOptionsExtension get_CoreOptionsExtension();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.Internal.LoggingOptions : object {
    [CompilerGeneratedAttribute]
private bool <IsSensitiveDataLoggingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSensitiveDataLoggingWarned>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DetailedErrorsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private WarningsConfiguration <WarningsConfiguration>k__BackingField;
    public bool IsSensitiveDataLoggingEnabled { get; private set; }
    public bool IsSensitiveDataLoggingWarned { get; public set; }
    public bool DetailedErrorsEnabled { get; public set; }
    public WarningsConfiguration WarningsConfiguration { get; private set; }
    public virtual void Initialize(IDbContextOptions options);
    public virtual void Validate(IDbContextOptions options);
    [CompilerGeneratedAttribute]
public virtual bool get_IsSensitiveDataLoggingEnabled();
    [CompilerGeneratedAttribute]
private void set_IsSensitiveDataLoggingEnabled(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsSensitiveDataLoggingWarned();
    [CompilerGeneratedAttribute]
public virtual void set_IsSensitiveDataLoggingWarned(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_DetailedErrorsEnabled();
    [CompilerGeneratedAttribute]
public virtual void set_DetailedErrorsEnabled(bool value);
    [CompilerGeneratedAttribute]
public virtual WarningsConfiguration get_WarningsConfiguration();
    [CompilerGeneratedAttribute]
private void set_WarningsConfiguration(WarningsConfiguration value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Diagnostics.Internal.MaterializationInterceptorAggregator : InterceptorAggregator`1<IMaterializationInterceptor> {
    protected virtual IMaterializationInterceptor CreateChain(IEnumerable`1<IMaterializationInterceptor> interceptors);
}
public class Microsoft.EntityFrameworkCore.Diagnostics.Internal.NullDbContextLogger : object {
    [NullableContextAttribute("1")]
public virtual void Log(EventData eventData);
    public virtual bool ShouldLog(EventId eventId, LogLevel logLevel);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Diagnostics.Internal.QueryExpressionInterceptorAggregator : InterceptorAggregator`1<IQueryExpressionInterceptor> {
    protected virtual IQueryExpressionInterceptor CreateChain(IEnumerable`1<IQueryExpressionInterceptor> interceptors);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Diagnostics.Internal.SaveChangesInterceptorAggregator : InterceptorAggregator`1<ISaveChangesInterceptor> {
    protected virtual ISaveChangesInterceptor CreateChain(IEnumerable`1<ISaveChangesInterceptor> interceptors);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.Internal.ScopedLoggerFactory : object {
    private ILoggerFactory _underlyingFactory;
    private bool _dispose;
    public ScopedLoggerFactory(ILoggerFactory loggerFactory, bool dispose);
    public static ScopedLoggerFactory Create(IServiceProvider internalServiceProvider, IDbContextOptions contextOptions);
    public virtual void Dispose();
    public virtual ILogger CreateLogger(string categoryName);
    public virtual void AddProvider(ILoggerProvider provider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.InvalidIncludePathEventData : EventData {
    [CompilerGeneratedAttribute]
private string <NavigationChain>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NavigationName>k__BackingField;
    public string NavigationChain { get; }
    public string NavigationName { get; }
    public InvalidIncludePathEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, string navigationChain, string navigationName);
    [CompilerGeneratedAttribute]
public virtual string get_NavigationChain();
    [CompilerGeneratedAttribute]
public virtual string get_NavigationName();
}
public interface Microsoft.EntityFrameworkCore.Diagnostics.IQueryExpressionInterceptor {
    [NullableContextAttribute("1")]
public virtual Expression QueryCompilationStarting(Expression queryExpression, QueryExpressionEventData eventData);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Diagnostics.ISaveChangesInterceptor {
    [NullableContextAttribute("0")]
public virtual InterceptionResult`1<int> SavingChanges(DbContextEventData eventData, InterceptionResult`1<int> result);
    public virtual int SavedChanges(SaveChangesCompletedEventData eventData, int result);
    public virtual void SaveChangesFailed(DbContextErrorEventData eventData);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<InterceptionResult`1<int>> SavingChangesAsync(DbContextEventData eventData, InterceptionResult`1<int> result, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<int> SavedChangesAsync(SaveChangesCompletedEventData eventData, int result, CancellationToken cancellationToken);
    public virtual Task SaveChangesFailedAsync(DbContextErrorEventData eventData, CancellationToken cancellationToken);
    public virtual void SaveChangesCanceled(DbContextEventData eventData);
    public virtual Task SaveChangesCanceledAsync(DbContextEventData eventData, CancellationToken cancellationToken);
    public virtual InterceptionResult ThrowingConcurrencyException(ConcurrencyExceptionEventData eventData, InterceptionResult result);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<InterceptionResult> ThrowingConcurrencyExceptionAsync(ConcurrencyExceptionEventData eventData, InterceptionResult result, CancellationToken cancellationToken);
}
public interface Microsoft.EntityFrameworkCore.Diagnostics.ISingletonInterceptor {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.KeyEventData : EventData {
    [CompilerGeneratedAttribute]
private IReadOnlyKey <Key>k__BackingField;
    public IReadOnlyKey Key { get; }
    public KeyEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IReadOnlyKey key);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyKey get_Key();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.LazyLoadingEventData : DbContextEventData {
    [CompilerGeneratedAttribute]
private object <Entity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NavigationPropertyName>k__BackingField;
    public object Entity { get; }
    public string NavigationPropertyName { get; }
    public LazyLoadingEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbContext context, object entity, string navigationPropertyName);
    [CompilerGeneratedAttribute]
public virtual object get_Entity();
    [CompilerGeneratedAttribute]
public virtual string get_NavigationPropertyName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Diagnostics.LoggerCategory`1 : object {
    [CompilerGeneratedAttribute]
private static string <Name>k__BackingField;
    public static string Name { get; }
    private static LoggerCategory`1();
    [CompilerGeneratedAttribute]
public static string get_Name();
    public virtual string ToString();
    public static string op_Implicit(LoggerCategory`1<T> loggerCategory);
    private static string ToName(Type loggerCategoryType);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Diagnostics.LoggingDefinitions : object {
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogServiceProviderCreated;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogManyServiceProvidersCreated;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogServiceProviderDebugInfo;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogContextInitialized;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogOldModelVersion;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogExceptionDuringQueryIteration;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogExceptionDuringSaveChanges;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogDetectChangesStarting;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogDetectChangesCompleted;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogPropertyChangeDetected;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogPropertyChangeDetectedSensitive;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogForeignKeyChangeDetected;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogForeignKeyChangeDetectedSensitive;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCollectionChangeDetected;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCollectionChangeDetectedSensitive;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogSaveChangesCanceled;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogSkipCollectionChangeDetected;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogSkipCollectionChangeDetectedSensitive;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogReferenceChangeDetected;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogReferenceChangeDetectedSensitive;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCascadeDelete;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCascadeDeleteSensitive;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCascadeDeleteOrphan;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCascadeDeleteOrphanSensitive;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogStartedTracking;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogStartedTrackingSensitive;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogStateChanged;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogStateChangedSensitive;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogValueGenerated;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogValueGeneratedSensitive;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogTempValueGenerated;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogTempValueGeneratedSensitive;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogSaveChangesStarting;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogSaveChangesCompleted;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogContextDisposed;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogIncludingNavigation;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogQueryCanceled;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogQueryExecutionPlanned;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogSensitiveDataLoggingEnabled;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogRowLimitingOperationWithoutOrderBy;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogPossibleUnintendedCollectionNavigationNullComparison;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogPossibleUnintendedReferenceComparison;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogInvalidIncludePath;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogDuplicateDependentEntityTypeInstance;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogShadowPropertyCreated;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogShadowForeignKeyPropertyCreated;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogCollectionWithoutComparer;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogExecutionStrategyRetrying;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogNavigationLazyLoading;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogLazyLoadOnDisposedContext;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogDetachedLazyLoading;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogRedundantAddServicesCall;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogRedundantIndexRemoved;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogIncompatibleMatchingForeignKeyProperties;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogAmbiguousEndRequired;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogForeignKeyAttributesOnBothNavigations;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogRequiredAttributeOnCollection;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogRequiredAttributeOnSkipNavigation;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogForeignKeyAttributesOnBothProperties;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogConflictingForeignKeyAttributesOnNavigationAndProperty;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogMultipleInversePropertiesSameTarget;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogConflictingShadowForeignKeys;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogMultipleNavigationProperties;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogMultiplePrimaryKeyCandidates;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogNonOwnershipInverseNavigation;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogFirstWithoutOrderByAndFilter;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogDistinctAfterOrderByWithoutRowLimitingOperatorWarning;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogNonDefiningInverseNavigation;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogOptimisticConcurrencyException;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogRedundantForeignKey;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogConflictingKeylessAndKeyAttributes;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogPossibleIncorrectRequiredNavigationWithQueryFilterInteraction;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogNavigationBaseIncluded;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogNavigationBaseIncludeIgnored;
    [EntityFrameworkInternalAttribute]
public EventDefinitionBase LogQueryCompilationStarting;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Diagnostics.MaterializationInterceptionData : ValueType {
    private MaterializationContext _materializationContext;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<IPropertyBase, ValueTuple`2<object, Func`2<MaterializationContext, object>>> _valueAccessor;
    [CompilerGeneratedAttribute]
private IEntityType <EntityType>k__BackingField;
    public DbContext Context { get; }
    public IEntityType EntityType { get; }
    [EntityFrameworkInternalAttribute]
[UsedImplicitlyAttribute]
public MaterializationInterceptionData(MaterializationContext materializationContext, IEntityType entityType, Dictionary`2<IPropertyBase, ValueTuple`2<object, Func`2<MaterializationContext, object>>> valueAccessor);
    public DbContext get_Context();
    [CompilerGeneratedAttribute]
public IEntityType get_EntityType();
    public T GetPropertyValue(string propertyName);
    public object GetPropertyValue(string propertyName);
    private IPropertyBase GetProperty(string propertyName);
    public T GetPropertyValue(IPropertyBase property);
    public object GetPropertyValue(IPropertyBase property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.NavigationBaseEventData : EventData {
    [CompilerGeneratedAttribute]
private IReadOnlyNavigationBase <NavigationBase>k__BackingField;
    public IReadOnlyNavigationBase NavigationBase { get; }
    private INavigationBase Microsoft.EntityFrameworkCore.Diagnostics.INavigationBaseEventData.NavigationBase { get; }
    public NavigationBaseEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IReadOnlyNavigationBase navigationBase);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyNavigationBase get_NavigationBase();
    private sealed virtual override INavigationBase Microsoft.EntityFrameworkCore.Diagnostics.INavigationBaseEventData.get_NavigationBase();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.NavigationEventData : EventData {
    [CompilerGeneratedAttribute]
private IReadOnlyNavigation <Navigation>k__BackingField;
    public IReadOnlyNavigation Navigation { get; }
    private INavigationBase Microsoft.EntityFrameworkCore.Diagnostics.INavigationBaseEventData.NavigationBase { get; }
    public NavigationEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IReadOnlyNavigation navigation);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyNavigation get_Navigation();
    private sealed virtual override INavigationBase Microsoft.EntityFrameworkCore.Diagnostics.INavigationBaseEventData.get_NavigationBase();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.PropertyChangedEventData : PropertyEventData {
    [CompilerGeneratedAttribute]
private EntityEntry <EntityEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OldValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <NewValue>k__BackingField;
    public EntityEntry EntityEntry { get; }
    public IProperty Property { get; }
    [NullableAttribute("2")]
public object OldValue { get; }
    [NullableAttribute("2")]
public object NewValue { get; }
    public PropertyChangedEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, EntityEntry entityEntry, IProperty property, object oldValue, object newValue);
    [CompilerGeneratedAttribute]
public virtual EntityEntry get_EntityEntry();
    public virtual IProperty get_Property();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual object get_OldValue();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual object get_NewValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.PropertyEventData : EventData {
    [CompilerGeneratedAttribute]
private IReadOnlyProperty <Property>k__BackingField;
    public IReadOnlyProperty Property { get; }
    public PropertyEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IReadOnlyProperty property);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyProperty get_Property();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.PropertyValueEventData : PropertyEventData {
    [CompilerGeneratedAttribute]
private EntityEntry <EntityEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public EntityEntry EntityEntry { get; }
    public IProperty Property { get; }
    [NullableAttribute("2")]
public object Value { get; }
    public PropertyValueEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, EntityEntry entityEntry, IProperty property, object value);
    [CompilerGeneratedAttribute]
public virtual EntityEntry get_EntityEntry();
    public virtual IProperty get_Property();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual object get_Value();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.QueryExpressionEventData : DbContextEventData {
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    [CompilerGeneratedAttribute]
private ExpressionPrinter <ExpressionPrinter>k__BackingField;
    public Expression Expression { get; }
    public ExpressionPrinter ExpressionPrinter { get; }
    public QueryExpressionEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbContext context, Expression queryExpression, ExpressionPrinter expressionPrinter);
    [CompilerGeneratedAttribute]
public virtual Expression get_Expression();
    [CompilerGeneratedAttribute]
public virtual ExpressionPrinter get_ExpressionPrinter();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.ReferenceChangedEventData : NavigationEventData {
    [CompilerGeneratedAttribute]
private EntityEntry <EntityEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OldReferencedEntity>k__BackingField;
    [CompilerGeneratedAttribute]
private object <NewReferencedEntity>k__BackingField;
    public EntityEntry EntityEntry { get; }
    public INavigation Navigation { get; }
    [NullableAttribute("2")]
public object OldReferencedEntity { get; }
    [NullableAttribute("2")]
public object NewReferencedEntity { get; }
    public ReferenceChangedEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, EntityEntry entityEntry, INavigation navigation, object oldReferencedEntity, object newReferencedEntity);
    [CompilerGeneratedAttribute]
public virtual EntityEntry get_EntityEntry();
    public virtual INavigation get_Navigation();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual object get_OldReferencedEntity();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual object get_NewReferencedEntity();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.SaveChangesCompletedEventData : DbContextEventData {
    [CompilerGeneratedAttribute]
private int <EntitiesSavedCount>k__BackingField;
    public int EntitiesSavedCount { get; }
    [NullableContextAttribute("1")]
public SaveChangesCompletedEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, DbContext context, int entitiesSavedCount);
    [CompilerGeneratedAttribute]
public virtual int get_EntitiesSavedCount();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.SaveChangesEventData : EventData {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IUpdateEntry> <Entries>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RowsAffected>k__BackingField;
    public IEnumerable`1<IUpdateEntry> Entries { get; }
    public int RowsAffected { get; }
    public SaveChangesEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IEnumerable`1<IUpdateEntry> entries, int rowsAffected);
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<IUpdateEntry> get_Entries();
    [CompilerGeneratedAttribute]
public virtual int get_RowsAffected();
}
public abstract class Microsoft.EntityFrameworkCore.Diagnostics.SaveChangesInterceptor : object {
    public virtual InterceptionResult`1<int> SavingChanges(DbContextEventData eventData, InterceptionResult`1<int> result);
    [NullableContextAttribute("1")]
public virtual int SavedChanges(SaveChangesCompletedEventData eventData, int result);
    [NullableContextAttribute("1")]
public virtual void SaveChangesFailed(DbContextErrorEventData eventData);
    public virtual ValueTask`1<InterceptionResult`1<int>> SavingChangesAsync(DbContextEventData eventData, InterceptionResult`1<int> result, CancellationToken cancellationToken);
    public virtual ValueTask`1<int> SavedChangesAsync(SaveChangesCompletedEventData eventData, int result, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public virtual Task SaveChangesFailedAsync(DbContextErrorEventData eventData, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public virtual void SaveChangesCanceled(DbContextEventData eventData);
    [NullableContextAttribute("1")]
public virtual Task SaveChangesCanceledAsync(DbContextEventData eventData, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
public virtual InterceptionResult ThrowingConcurrencyException(ConcurrencyExceptionEventData eventData, InterceptionResult result);
    public virtual ValueTask`1<InterceptionResult> ThrowingConcurrencyExceptionAsync(ConcurrencyExceptionEventData eventData, InterceptionResult result, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.ServiceProviderDebugInfoEventData : EventData {
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <NewDebugInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IDictionary`2<string, string>> <CachedDebugInfos>k__BackingField;
    public IDictionary`2<string, string> NewDebugInfo { get; }
    public IList`1<IDictionary`2<string, string>> CachedDebugInfos { get; }
    public ServiceProviderDebugInfoEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IDictionary`2<string, string> newDebugInfo, IList`1<IDictionary`2<string, string>> cachedDebugInfos);
    [CompilerGeneratedAttribute]
public virtual IDictionary`2<string, string> get_NewDebugInfo();
    [CompilerGeneratedAttribute]
public virtual IList`1<IDictionary`2<string, string>> get_CachedDebugInfos();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.ServiceProviderEventData : EventData {
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    public IServiceProvider ServiceProvider { get; }
    public ServiceProviderEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public virtual IServiceProvider get_ServiceProvider();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.ServiceProvidersEventData : EventData {
    [CompilerGeneratedAttribute]
private ICollection`1<IServiceProvider> <ServiceProviders>k__BackingField;
    public ICollection`1<IServiceProvider> ServiceProviders { get; }
    public ServiceProvidersEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, ICollection`1<IServiceProvider> serviceProviders);
    [CompilerGeneratedAttribute]
public virtual ICollection`1<IServiceProvider> get_ServiceProviders();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.SharedDependentEntityEventData : EventData {
    [CompilerGeneratedAttribute]
private IEntityType <FirstEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityType <SecondEntityType>k__BackingField;
    public IEntityType FirstEntityType { get; }
    public IEntityType SecondEntityType { get; }
    public SharedDependentEntityEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IEntityType firstEntityType, IEntityType secondEntityType);
    [CompilerGeneratedAttribute]
public virtual IEntityType get_FirstEntityType();
    [CompilerGeneratedAttribute]
public virtual IEntityType get_SecondEntityType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.SkipCollectionChangedEventData : SkipNavigationEventData {
    [CompilerGeneratedAttribute]
private EntityEntry <EntityEntry>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<object> <Added>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<object> <Removed>k__BackingField;
    public EntityEntry EntityEntry { get; }
    public ISkipNavigation Navigation { get; }
    public IEnumerable`1<object> Added { get; }
    public IEnumerable`1<object> Removed { get; }
    public SkipCollectionChangedEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, EntityEntry entityEntry, ISkipNavigation navigation, IEnumerable`1<object> added, IEnumerable`1<object> removed);
    [CompilerGeneratedAttribute]
public virtual EntityEntry get_EntityEntry();
    public virtual ISkipNavigation get_Navigation();
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<object> get_Added();
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<object> get_Removed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.SkipNavigationEventData : EventData {
    [CompilerGeneratedAttribute]
private IReadOnlySkipNavigation <Navigation>k__BackingField;
    public IReadOnlySkipNavigation Navigation { get; }
    private INavigationBase Microsoft.EntityFrameworkCore.Diagnostics.INavigationBaseEventData.NavigationBase { get; }
    public SkipNavigationEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IReadOnlySkipNavigation navigation);
    [CompilerGeneratedAttribute]
public virtual IReadOnlySkipNavigation get_Navigation();
    private sealed virtual override INavigationBase Microsoft.EntityFrameworkCore.Diagnostics.INavigationBaseEventData.get_NavigationBase();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.StateChangedEventData : EntityEntryEventData {
    [CompilerGeneratedAttribute]
private EntityState <OldState>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityState <NewState>k__BackingField;
    public EntityState OldState { get; }
    public EntityState NewState { get; }
    [NullableContextAttribute("1")]
public StateChangedEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, EntityEntry entityEntry, EntityState oldState, EntityState newState);
    [CompilerGeneratedAttribute]
public virtual EntityState get_OldState();
    [CompilerGeneratedAttribute]
public virtual EntityState get_NewState();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.StoredProcedurePropertyEventData : PropertyEventData {
    [CompilerGeneratedAttribute]
private IEntityType <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StoredProcedureName>k__BackingField;
    public IEntityType EntityType { get; }
    public string StoredProcedureName { get; }
    public StoredProcedurePropertyEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IEntityType entityType, IProperty property, string storedProcedureName);
    [CompilerGeneratedAttribute]
public virtual IEntityType get_EntityType();
    [CompilerGeneratedAttribute]
public virtual string get_StoredProcedureName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.TwoPropertyBaseCollectionsEventData : EventData {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IReadOnlyPropertyBase> <FirstPropertyCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IReadOnlyPropertyBase> <SecondPropertyCollection>k__BackingField;
    public IReadOnlyList`1<IReadOnlyPropertyBase> FirstPropertyCollection { get; }
    public IReadOnlyList`1<IReadOnlyPropertyBase> SecondPropertyCollection { get; }
    public TwoPropertyBaseCollectionsEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IReadOnlyList`1<IReadOnlyPropertyBase> firstPropertyCollection, IReadOnlyList`1<IReadOnlyPropertyBase> secondPropertyCollection);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<IReadOnlyPropertyBase> get_FirstPropertyCollection();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<IReadOnlyPropertyBase> get_SecondPropertyCollection();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.TwoUnmappedPropertyCollectionsEventData : EventData {
    [CompilerGeneratedAttribute]
private IEnumerable`1<Tuple`2<MemberInfo, Type>> <FirstPropertyCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Tuple`2<MemberInfo, Type>> <SecondPropertyCollection>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<Tuple`2<MemberInfo, Type>> FirstPropertyCollection { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<Tuple`2<MemberInfo, Type>> SecondPropertyCollection { get; }
    [NullableContextAttribute("1")]
public TwoUnmappedPropertyCollectionsEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IEnumerable`1<Tuple`2<MemberInfo, Type>> firstPropertyCollection, IEnumerable`1<Tuple`2<MemberInfo, Type>> secondPropertyCollection);
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<Tuple`2<MemberInfo, Type>> get_FirstPropertyCollection();
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<Tuple`2<MemberInfo, Type>> get_SecondPropertyCollection();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.UniquifiedPropertyEventData : PropertyEventData {
    [CompilerGeneratedAttribute]
private string <BasePropertyName>k__BackingField;
    public string BasePropertyName { get; }
    public UniquifiedPropertyEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IReadOnlyProperty property, string basePropertyName);
    [CompilerGeneratedAttribute]
public virtual string get_BasePropertyName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.UpdateEntryEventData : DbContextEventData {
    [CompilerGeneratedAttribute]
private IUpdateEntry <EntityEntry>k__BackingField;
    public IUpdateEntry EntityEntry { get; }
    public UpdateEntryEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, IUpdateEntry entityEntry);
    [CompilerGeneratedAttribute]
public virtual IUpdateEntry get_EntityEntry();
}
public class Microsoft.EntityFrameworkCore.Diagnostics.UpdatingIdentityResolutionInterceptor : object {
    private bool _preserveModifiedValues;
    private bool _updateOriginalValues;
    public UpdatingIdentityResolutionInterceptor(bool preserveModifiedValues, bool updateOriginalValues);
    [NullableContextAttribute("1")]
public virtual void UpdateTrackedInstance(IdentityResolutionInterceptionData interceptionData, EntityEntry existingEntry, object newEntity);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.ValueConverterEventData : EventData {
    [CompilerGeneratedAttribute]
private Type <MappingClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private ValueConverter <ValueConverter>k__BackingField;
    public Type MappingClrType { get; }
    public ValueConverter ValueConverter { get; }
    public ValueConverterEventData(EventDefinitionBase eventDefinition, Func`3<EventDefinitionBase, EventData, string> messageGenerator, Type mappingClrType, ValueConverter valueConverter);
    [CompilerGeneratedAttribute]
public virtual Type get_MappingClrType();
    [CompilerGeneratedAttribute]
public virtual ValueConverter get_ValueConverter();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfiguration : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ImmutableSortedDictionary`2<int, ValueTuple`2<Nullable`1<WarningBehavior>, Nullable`1<LogLevel>>> _explicitBehaviors;
    private WarningBehavior _defaultBehavior;
    private Nullable`1<int> _serviceProviderHash;
    public WarningBehavior DefaultBehavior { get; }
    protected WarningsConfiguration(WarningsConfiguration copyFrom);
    protected virtual WarningsConfiguration Clone();
    public virtual WarningBehavior get_DefaultBehavior();
    public virtual WarningsConfiguration WithDefaultBehavior(WarningBehavior warningBehavior);
    public virtual WarningsConfiguration WithExplicit(IEnumerable`1<EventId> eventIds, WarningBehavior warningBehavior);
    public virtual WarningsConfiguration WithExplicit(IEnumerable`1<ValueTuple`2<EventId, LogLevel>> eventsAndLevels);
    public virtual Nullable`1<WarningBehavior> GetBehavior(EventId eventId);
    public virtual Nullable`1<LogLevel> GetLevel(EventId eventId);
    public virtual WarningsConfiguration TryWithExplicit(EventId eventId, WarningBehavior warningBehavior);
    public virtual bool ShouldUseSameServiceProvider(WarningsConfiguration other);
    public virtual int GetServiceProviderHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder : object {
    private DbContextOptionsBuilder _optionsBuilder;
    public WarningsConfigurationBuilder(DbContextOptionsBuilder optionsBuilder);
    public virtual WarningsConfigurationBuilder Default(WarningBehavior warningBehavior);
    public virtual WarningsConfigurationBuilder Throw(EventId[] eventIds);
    public virtual WarningsConfigurationBuilder Log(EventId[] eventIds);
    public virtual WarningsConfigurationBuilder Log(ValueTuple`2[] eventsAndLevels);
    public virtual WarningsConfigurationBuilder Ignore(EventId[] eventIds);
    private WarningsConfigurationBuilder WithOption(Func`2<WarningsConfiguration, WarningsConfiguration> withFunc);
}
public static class Microsoft.EntityFrameworkCore.EF : object {
    [NullableAttribute("1")]
internal static MethodInfo PropertyMethod;
    [CompilerGeneratedAttribute]
private static bool <IsDesignTime>k__BackingField;
    public static bool IsDesignTime { get; public set; }
    [NullableAttribute("1")]
public static DbFunctions Functions { get; }
    private static EF();
    public static Func`2<TContext, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`2<TContext, DbSet`1<TResult>>> queryExpression);
    public static Func`2<TContext, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`2<TContext, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`2<TContext, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`2<TContext, IQueryable`1<TResult>>> queryExpression);
    public static Func`2<TContext, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`2<TContext, TResult>> queryExpression);
    public static Func`3<TContext, CancellationToken, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`3<TContext, CancellationToken, TResult>> queryExpression);
    public static Func`3<TContext, TParam1, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`3<TContext, TParam1, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`3<TContext, TParam1, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`3<TContext, TParam1, IQueryable`1<TResult>>> queryExpression);
    public static Func`3<TContext, TParam1, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`3<TContext, TParam1, TResult>> queryExpression);
    public static Func`4<TContext, TParam1, CancellationToken, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`4<TContext, TParam1, CancellationToken, TResult>> queryExpression);
    public static Func`4<TContext, TParam1, TParam2, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`4<TContext, TParam1, TParam2, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`4<TContext, TParam1, TParam2, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`4<TContext, TParam1, TParam2, IQueryable`1<TResult>>> queryExpression);
    public static Func`4<TContext, TParam1, TParam2, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`4<TContext, TParam1, TParam2, TResult>> queryExpression);
    public static Func`5<TContext, TParam1, TParam2, CancellationToken, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`5<TContext, TParam1, TParam2, CancellationToken, TResult>> queryExpression);
    public static Func`5<TContext, TParam1, TParam2, TParam3, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`5<TContext, TParam1, TParam2, TParam3, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`5<TContext, TParam1, TParam2, TParam3, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`5<TContext, TParam1, TParam2, TParam3, IQueryable`1<TResult>>> queryExpression);
    public static Func`5<TContext, TParam1, TParam2, TParam3, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`5<TContext, TParam1, TParam2, TParam3, TResult>> queryExpression);
    public static Func`6<TContext, TParam1, TParam2, TParam3, CancellationToken, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`6<TContext, TParam1, TParam2, TParam3, CancellationToken, TResult>> queryExpression);
    public static Func`6<TContext, TParam1, TParam2, TParam3, TParam4, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`6<TContext, TParam1, TParam2, TParam3, TParam4, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`6<TContext, TParam1, TParam2, TParam3, TParam4, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`6<TContext, TParam1, TParam2, TParam3, TParam4, IQueryable`1<TResult>>> queryExpression);
    public static Func`6<TContext, TParam1, TParam2, TParam3, TParam4, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`6<TContext, TParam1, TParam2, TParam3, TParam4, TResult>> queryExpression);
    public static Func`7<TContext, TParam1, TParam2, TParam3, TParam4, CancellationToken, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`7<TContext, TParam1, TParam2, TParam3, TParam4, CancellationToken, TResult>> queryExpression);
    public static Func`7<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`7<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`7<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`7<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, IQueryable`1<TResult>>> queryExpression);
    public static Func`7<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`7<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TResult>> queryExpression);
    public static Func`8<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, CancellationToken, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`8<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, CancellationToken, TResult>> queryExpression);
    public static Func`8<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`8<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`8<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`8<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IQueryable`1<TResult>>> queryExpression);
    public static Func`8<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`8<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TResult>> queryExpression);
    public static Func`9<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, CancellationToken, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`9<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, CancellationToken, TResult>> queryExpression);
    public static Func`9<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`9<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`9<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`9<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, IQueryable`1<TResult>>> queryExpression);
    public static Func`9<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`9<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TResult>> queryExpression);
    public static Func`10<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, CancellationToken, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`10<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, CancellationToken, TResult>> queryExpression);
    public static Func`10<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`10<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`10<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`10<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, IQueryable`1<TResult>>> queryExpression);
    public static Func`10<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`10<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TResult>> queryExpression);
    public static Func`11<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, CancellationToken, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`11<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, CancellationToken, TResult>> queryExpression);
    public static Func`11<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`11<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`11<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`11<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, IQueryable`1<TResult>>> queryExpression);
    public static Func`11<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`11<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TResult>> queryExpression);
    public static Func`12<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, CancellationToken, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`12<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, CancellationToken, TResult>> queryExpression);
    public static Func`12<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`12<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`12<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`12<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, IQueryable`1<TResult>>> queryExpression);
    public static Func`12<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`12<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TResult>> queryExpression);
    public static Func`13<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, CancellationToken, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`13<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, CancellationToken, TResult>> queryExpression);
    public static Func`13<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`13<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`13<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`13<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, IQueryable`1<TResult>>> queryExpression);
    public static Func`13<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`13<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TResult>> queryExpression);
    public static Func`14<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, CancellationToken, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`14<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, CancellationToken, TResult>> queryExpression);
    public static Func`14<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`14<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`14<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`14<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, IQueryable`1<TResult>>> queryExpression);
    public static Func`14<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`14<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TResult>> queryExpression);
    public static Func`15<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, CancellationToken, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`15<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, CancellationToken, TResult>> queryExpression);
    public static Func`15<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`15<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`15<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`15<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, IQueryable`1<TResult>>> queryExpression);
    public static Func`15<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`15<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TResult>> queryExpression);
    public static Func`16<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, CancellationToken, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`16<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, CancellationToken, TResult>> queryExpression);
    public static Func`16<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`16<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`16<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`16<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, IQueryable`1<TResult>>> queryExpression);
    public static Func`16<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`16<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TResult>> queryExpression);
    public static Func`17<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, CancellationToken, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`17<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, CancellationToken, TResult>> queryExpression);
    public static Func`17<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`17<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`17<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, IAsyncEnumerable`1<TResult>> CompileAsyncQuery(Expression`1<Func`17<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, IQueryable`1<TResult>>> queryExpression);
    public static Func`17<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, Task`1<TResult>> CompileAsyncQuery(Expression`1<Func`17<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TResult>> queryExpression);
    public static Func`2<TContext, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`2<TContext, DbSet`1<TResult>>> queryExpression);
    public static Func`2<TContext, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`2<TContext, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`2<TContext, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`2<TContext, IQueryable`1<TResult>>> queryExpression);
    public static Func`2<TContext, TResult> CompileQuery(Expression`1<Func`2<TContext, TResult>> queryExpression);
    public static Func`3<TContext, TParam1, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`3<TContext, TParam1, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`3<TContext, TParam1, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`3<TContext, TParam1, IQueryable`1<TResult>>> queryExpression);
    public static Func`3<TContext, TParam1, TResult> CompileQuery(Expression`1<Func`3<TContext, TParam1, TResult>> queryExpression);
    public static Func`4<TContext, TParam1, TParam2, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`4<TContext, TParam1, TParam2, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`4<TContext, TParam1, TParam2, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`4<TContext, TParam1, TParam2, IQueryable`1<TResult>>> queryExpression);
    public static Func`4<TContext, TParam1, TParam2, TResult> CompileQuery(Expression`1<Func`4<TContext, TParam1, TParam2, TResult>> queryExpression);
    public static Func`5<TContext, TParam1, TParam2, TParam3, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`5<TContext, TParam1, TParam2, TParam3, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`5<TContext, TParam1, TParam2, TParam3, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`5<TContext, TParam1, TParam2, TParam3, IQueryable`1<TResult>>> queryExpression);
    public static Func`5<TContext, TParam1, TParam2, TParam3, TResult> CompileQuery(Expression`1<Func`5<TContext, TParam1, TParam2, TParam3, TResult>> queryExpression);
    public static Func`6<TContext, TParam1, TParam2, TParam3, TParam4, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`6<TContext, TParam1, TParam2, TParam3, TParam4, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`6<TContext, TParam1, TParam2, TParam3, TParam4, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`6<TContext, TParam1, TParam2, TParam3, TParam4, IQueryable`1<TResult>>> queryExpression);
    public static Func`6<TContext, TParam1, TParam2, TParam3, TParam4, TResult> CompileQuery(Expression`1<Func`6<TContext, TParam1, TParam2, TParam3, TParam4, TResult>> queryExpression);
    public static Func`7<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`7<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`7<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`7<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, IQueryable`1<TResult>>> queryExpression);
    public static Func`7<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TResult> CompileQuery(Expression`1<Func`7<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TResult>> queryExpression);
    public static Func`8<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`8<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`8<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`8<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, IQueryable`1<TResult>>> queryExpression);
    public static Func`8<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TResult> CompileQuery(Expression`1<Func`8<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TResult>> queryExpression);
    public static Func`9<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`9<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`9<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`9<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, IQueryable`1<TResult>>> queryExpression);
    public static Func`9<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TResult> CompileQuery(Expression`1<Func`9<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TResult>> queryExpression);
    public static Func`10<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`10<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`10<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`10<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, IQueryable`1<TResult>>> queryExpression);
    public static Func`10<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TResult> CompileQuery(Expression`1<Func`10<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TResult>> queryExpression);
    public static Func`11<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`11<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`11<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`11<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, IQueryable`1<TResult>>> queryExpression);
    public static Func`11<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TResult> CompileQuery(Expression`1<Func`11<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TResult>> queryExpression);
    public static Func`12<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`12<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`12<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`12<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, IQueryable`1<TResult>>> queryExpression);
    public static Func`12<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TResult> CompileQuery(Expression`1<Func`12<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TResult>> queryExpression);
    public static Func`13<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`13<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`13<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`13<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, IQueryable`1<TResult>>> queryExpression);
    public static Func`13<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TResult> CompileQuery(Expression`1<Func`13<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TResult>> queryExpression);
    public static Func`14<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`14<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`14<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`14<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, IQueryable`1<TResult>>> queryExpression);
    public static Func`14<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TResult> CompileQuery(Expression`1<Func`14<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TResult>> queryExpression);
    public static Func`15<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`15<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`15<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`15<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, IQueryable`1<TResult>>> queryExpression);
    public static Func`15<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TResult> CompileQuery(Expression`1<Func`15<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TResult>> queryExpression);
    public static Func`16<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`16<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`16<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`16<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, IQueryable`1<TResult>>> queryExpression);
    public static Func`16<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TResult> CompileQuery(Expression`1<Func`16<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TResult>> queryExpression);
    public static Func`17<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`17<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, IIncludableQueryable`2<TResult, TProperty>>> queryExpression);
    public static Func`17<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, IEnumerable`1<TResult>> CompileQuery(Expression`1<Func`17<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, IQueryable`1<TResult>>> queryExpression);
    public static Func`17<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TResult> CompileQuery(Expression`1<Func`17<TContext, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TParam11, TParam12, TParam13, TParam14, TParam15, TResult>> queryExpression);
    [NullableContextAttribute("1")]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2060")]
internal static MethodInfo MakePropertyMethod(Type type);
    [CompilerGeneratedAttribute]
public static bool get_IsDesignTime();
    [CompilerGeneratedAttribute]
public static void set_IsDesignTime(bool value);
    [NullableContextAttribute("1")]
public static TProperty Property(object entity, string propertyName);
    [NullableContextAttribute("1")]
public static DbFunctions get_Functions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2060")]
public static class Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions : object {
    internal static MethodInfo IncludeMethodInfo;
    internal static MethodInfo NotQuiteIncludeMethodInfo;
    internal static MethodInfo ThenIncludeAfterEnumerableMethodInfo;
    internal static MethodInfo ThenIncludeAfterReferenceMethodInfo;
    internal static MethodInfo StringIncludeMethodInfo;
    internal static MethodInfo IgnoreAutoIncludesMethodInfo;
    internal static MethodInfo IgnoreQueryFiltersMethodInfo;
    internal static MethodInfo AsNoTrackingMethodInfo;
    internal static MethodInfo AsNoTrackingWithIdentityResolutionMethodInfo;
    internal static MethodInfo AsTrackingMethodInfo;
    internal static MethodInfo TagWithMethodInfo;
    internal static MethodInfo TagWithCallSiteMethodInfo;
    private static EntityFrameworkQueryableExtensions();
    [ExtensionAttribute]
public static string ToQueryString(IQueryable source);
    [ExtensionAttribute]
public static Task`1<bool> AnyAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<bool> AnyAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<bool> AllAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> CountAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> CountAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<long> LongCountAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<long> LongCountAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> FirstAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> FirstAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> FirstOrDefaultAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> FirstOrDefaultAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> LastAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> LastAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> LastOrDefaultAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> LastOrDefaultAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> SingleAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> SingleAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> SingleOrDefaultAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> SingleOrDefaultAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, bool>> predicate, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> MinAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> MinAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TSource> MaxAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> MaxAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, TResult>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<decimal> SumAsync(IQueryable`1<decimal> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> SumAsync(IQueryable`1<Nullable`1<decimal>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<decimal> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> SumAsync(IQueryable`1<int> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<int>> SumAsync(IQueryable`1<Nullable`1<int>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<int>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<long> SumAsync(IQueryable`1<long> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<long>> SumAsync(IQueryable`1<Nullable`1<long>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<long> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<long>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> SumAsync(IQueryable`1<double> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> SumAsync(IQueryable`1<Nullable`1<double>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<float> SumAsync(IQueryable`1<float> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> SumAsync(IQueryable`1<Nullable`1<float>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<float> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> SumAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<decimal> AverageAsync(IQueryable`1<decimal> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> AverageAsync(IQueryable`1<Nullable`1<decimal>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<decimal> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, decimal>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<decimal>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<decimal>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<int> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<int>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, int>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<int>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<long> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<long>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, long>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<long>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<double> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<Nullable`1<double>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<double> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, double>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<double>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<double>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<float> AverageAsync(IQueryable`1<float> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> AverageAsync(IQueryable`1<Nullable`1<float>> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<float> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, float>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Nullable`1<float>> AverageAsync(IQueryable`1<TSource> source, Expression`1<Func`2<TSource, Nullable`1<float>>> selector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<bool> ContainsAsync(IQueryable`1<TSource> source, TSource item, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions/<ToListAsync>d__65`1")]
[ExtensionAttribute]
public static Task`1<List`1<TSource>> ToListAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions/<ToArrayAsync>d__66`1")]
[ExtensionAttribute]
public static Task`1<TSource[]> ToArrayAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IIncludableQueryable`2<TEntity, TProperty> Include(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, TProperty>> navigationPropertyPath);
    [ExtensionAttribute]
internal static IIncludableQueryable`2<TEntity, TProperty> NotQuiteInclude(IQueryable`1<TEntity> source, Expression`1<Func`2<TEntity, TProperty>> navigationPropertyPath);
    [ExtensionAttribute]
public static IIncludableQueryable`2<TEntity, TProperty> ThenInclude(IIncludableQueryable`2<TEntity, IEnumerable`1<TPreviousProperty>> source, Expression`1<Func`2<TPreviousProperty, TProperty>> navigationPropertyPath);
    [ExtensionAttribute]
public static IIncludableQueryable`2<TEntity, TProperty> ThenInclude(IIncludableQueryable`2<TEntity, TPreviousProperty> source, Expression`1<Func`2<TPreviousProperty, TProperty>> navigationPropertyPath);
    [ExtensionAttribute]
public static IQueryable`1<TEntity> Include(IQueryable`1<TEntity> source, string navigationPropertyPath);
    [ExtensionAttribute]
public static IQueryable`1<TEntity> IgnoreAutoIncludes(IQueryable`1<TEntity> source);
    [ExtensionAttribute]
public static IQueryable`1<TEntity> IgnoreQueryFilters(IQueryable`1<TEntity> source);
    [ExtensionAttribute]
public static IQueryable`1<TEntity> AsNoTracking(IQueryable`1<TEntity> source);
    [ExtensionAttribute]
public static IQueryable`1<TEntity> AsNoTrackingWithIdentityResolution(IQueryable`1<TEntity> source);
    [ExtensionAttribute]
public static IQueryable`1<TEntity> AsTracking(IQueryable`1<TEntity> source);
    [ExtensionAttribute]
public static IQueryable`1<TEntity> AsTracking(IQueryable`1<TEntity> source, QueryTrackingBehavior track);
    [ExtensionAttribute]
public static IQueryable`1<T> TagWith(IQueryable`1<T> source, string tag);
    [ExtensionAttribute]
public static IQueryable`1<T> TagWithCallSite(IQueryable`1<T> source, string filePath, int lineNumber);
    [ExtensionAttribute]
public static void Load(IQueryable`1<TSource> source);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions/<LoadAsync>d__94`1")]
[ExtensionAttribute]
public static Task LoadAsync(IQueryable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, TSource>> ToDictionaryAsync(IQueryable`1<TSource> source, Func`2<TSource, TKey> keySelector, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, TSource>> ToDictionaryAsync(IQueryable`1<TSource> source, Func`2<TSource, TKey> keySelector, IEqualityComparer`1<TKey> comparer, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(IQueryable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions/<ToDictionaryAsync>d__98`3")]
[ExtensionAttribute]
public static Task`1<Dictionary`2<TKey, TElement>> ToDictionaryAsync(IQueryable`1<TSource> source, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector, IEqualityComparer`1<TKey> comparer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions/<ForEachAsync>d__99`1")]
[ExtensionAttribute]
public static Task ForEachAsync(IQueryable`1<T> source, Action`1<T> action, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<TSource> AsAsyncEnumerable(IQueryable`1<TSource> source);
    private static TResult ExecuteAsync(MethodInfo operatorMethodInfo, IQueryable`1<TSource> source, Expression expression, CancellationToken cancellationToken);
    private static TResult ExecuteAsync(MethodInfo operatorMethodInfo, IQueryable`1<TSource> source, LambdaExpression expression, CancellationToken cancellationToken);
    private static TResult ExecuteAsync(MethodInfo operatorMethodInfo, IQueryable`1<TSource> source, CancellationToken cancellationToken);
}
public enum Microsoft.EntityFrameworkCore.EntityState : Enum {
    public int value__;
    public static EntityState Detached;
    public static EntityState Unchanged;
    public static EntityState Deleted;
    public static EntityState Modified;
    public static EntityState Added;
}
[ExtensionAttribute]
[ObsoleteAttribute("Use IReadOnlyEntityType")]
public static class Microsoft.EntityFrameworkCore.EntityTypeExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("Use InMemoryEntityTypeExtensions.GetInMemoryQuery")]
public static LambdaExpression GetDefiningQuery(IEntityType entityType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.EntityFrameworkCore.EnumerableMethods : object {
    [CompilerGeneratedAttribute]
private static MethodInfo <All>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AnyWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AnyWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AsEnumerable>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Cast>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Concat>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Contains>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <CountWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <CountWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <DefaultIfEmptyWithoutArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <DefaultIfEmptyWithArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Distinct>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ElementAt>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ElementAtOrDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Except>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeySelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyElementSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyElementResultSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyResultSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupJoin>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Intersect>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Join>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LongCountWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LongCountWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MaxWithoutSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MaxWithSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MinWithoutSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MinWithSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OfType>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OrderByDescending>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Reverse>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Select>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectWithOrdinal>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectManyWithoutCollectionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectManyWithCollectionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SequenceEqual>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SkipWhile>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Take>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <TakeWhile>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ThenBy>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ThenByDescending>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ToArray>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ToList>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Union>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <SumWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <AverageWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MaxWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MaxWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MinWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <MinWithSelectorMethods>k__BackingField;
    public static MethodInfo All { get; }
    public static MethodInfo AnyWithoutPredicate { get; }
    public static MethodInfo AnyWithPredicate { get; }
    public static MethodInfo AsEnumerable { get; }
    public static MethodInfo Cast { get; }
    public static MethodInfo Concat { get; }
    public static MethodInfo Contains { get; }
    public static MethodInfo CountWithoutPredicate { get; }
    public static MethodInfo CountWithPredicate { get; }
    public static MethodInfo DefaultIfEmptyWithoutArgument { get; }
    public static MethodInfo DefaultIfEmptyWithArgument { get; }
    public static MethodInfo Distinct { get; }
    public static MethodInfo ElementAt { get; }
    public static MethodInfo ElementAtOrDefault { get; }
    public static MethodInfo Except { get; }
    public static MethodInfo FirstWithoutPredicate { get; }
    public static MethodInfo FirstWithPredicate { get; }
    public static MethodInfo FirstOrDefaultWithoutPredicate { get; }
    public static MethodInfo FirstOrDefaultWithPredicate { get; }
    public static MethodInfo GroupByWithKeySelector { get; }
    public static MethodInfo GroupByWithKeyElementSelector { get; }
    public static MethodInfo GroupByWithKeyElementResultSelector { get; }
    public static MethodInfo GroupByWithKeyResultSelector { get; }
    public static MethodInfo GroupJoin { get; }
    public static MethodInfo Intersect { get; }
    public static MethodInfo Join { get; }
    public static MethodInfo LastWithoutPredicate { get; }
    public static MethodInfo LastWithPredicate { get; }
    public static MethodInfo LastOrDefaultWithoutPredicate { get; }
    public static MethodInfo LastOrDefaultWithPredicate { get; }
    public static MethodInfo LongCountWithoutPredicate { get; }
    public static MethodInfo LongCountWithPredicate { get; }
    public static MethodInfo MaxWithoutSelector { get; }
    public static MethodInfo MaxWithSelector { get; }
    public static MethodInfo MinWithoutSelector { get; }
    public static MethodInfo MinWithSelector { get; }
    public static MethodInfo OfType { get; }
    public static MethodInfo OrderBy { get; }
    public static MethodInfo OrderByDescending { get; }
    public static MethodInfo Reverse { get; }
    public static MethodInfo Select { get; }
    public static MethodInfo SelectWithOrdinal { get; }
    public static MethodInfo SelectManyWithoutCollectionSelector { get; }
    public static MethodInfo SelectManyWithCollectionSelector { get; }
    public static MethodInfo SequenceEqual { get; }
    public static MethodInfo SingleWithoutPredicate { get; }
    public static MethodInfo SingleWithPredicate { get; }
    public static MethodInfo SingleOrDefaultWithoutPredicate { get; }
    public static MethodInfo SingleOrDefaultWithPredicate { get; }
    public static MethodInfo Skip { get; }
    public static MethodInfo SkipWhile { get; }
    public static MethodInfo Take { get; }
    public static MethodInfo TakeWhile { get; }
    public static MethodInfo ThenBy { get; }
    public static MethodInfo ThenByDescending { get; }
    public static MethodInfo ToArray { get; }
    public static MethodInfo ToList { get; }
    public static MethodInfo Union { get; }
    public static MethodInfo Where { get; }
    private static Dictionary`2<Type, MethodInfo> SumWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> AverageWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MaxWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MaxWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MinWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> MinWithSelectorMethods { get; }
    private static EnumerableMethods();
    [CompilerGeneratedAttribute]
public static MethodInfo get_All();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AnyWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AnyWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AsEnumerable();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Cast();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Concat();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Contains();
    [CompilerGeneratedAttribute]
public static MethodInfo get_CountWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_CountWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_DefaultIfEmptyWithoutArgument();
    [CompilerGeneratedAttribute]
public static MethodInfo get_DefaultIfEmptyWithArgument();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Distinct();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ElementAt();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ElementAtOrDefault();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Except();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeySelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyElementSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyElementResultSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyResultSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupJoin();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Intersect();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Join();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LongCountWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LongCountWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MaxWithoutSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MaxWithSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MinWithoutSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MinWithSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OfType();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OrderBy();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OrderByDescending();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Reverse();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Select();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectWithOrdinal();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectManyWithoutCollectionSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectManyWithCollectionSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SequenceEqual();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Skip();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SkipWhile();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Take();
    [CompilerGeneratedAttribute]
public static MethodInfo get_TakeWhile();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ThenBy();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ThenByDescending();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ToArray();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ToList();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Union();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Where();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_SumWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_AverageWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MaxWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MaxWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MinWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_MinWithSelectorMethods();
    public static MethodInfo GetSumWithSelector(Type type);
    public static MethodInfo GetAverageWithSelector(Type type);
    public static MethodInfo GetMaxWithoutSelector(Type type);
    public static MethodInfo GetMaxWithSelector(Type type);
    public static MethodInfo GetMinWithoutSelector(Type type);
    public static MethodInfo GetMinWithSelector(Type type);
    [CompilerGeneratedAttribute]
internal static MethodInfo <.cctor>g__GetMethod|201_62(string name, int genericParameterCount, Func`2<Type[], Type[]> parameterGenerator, <>c__DisplayClass201_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions : object {
    [ExtensionAttribute]
public static void Execute(IExecutionStrategy strategy, Action operation);
    [ExtensionAttribute]
public static TResult Execute(IExecutionStrategy strategy, Func`1<TResult> operation);
    [ExtensionAttribute]
public static void Execute(IExecutionStrategy strategy, TState state, Action`1<TState> operation);
    [ExtensionAttribute]
public static Task ExecuteAsync(IExecutionStrategy strategy, Func`1<Task> operation);
    [ExtensionAttribute]
public static Task ExecuteAsync(IExecutionStrategy strategy, Func`2<CancellationToken, Task> operation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> ExecuteAsync(IExecutionStrategy strategy, Func`1<Task`1<TResult>> operation);
    [ExtensionAttribute]
public static Task`1<TResult> ExecuteAsync(IExecutionStrategy strategy, Func`2<CancellationToken, Task`1<TResult>> operation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task ExecuteAsync(IExecutionStrategy strategy, TState state, Func`2<TState, Task> operation);
    [ExtensionAttribute]
public static Task ExecuteAsync(IExecutionStrategy strategy, TState state, Func`3<TState, CancellationToken, Task> operation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<TResult> ExecuteAsync(IExecutionStrategy strategy, TState state, Func`2<TState, Task`1<TResult>> operation);
    [ExtensionAttribute]
public static TResult Execute(IExecutionStrategy strategy, TState state, Func`2<TState, TResult> operation);
    [ExtensionAttribute]
public static Task`1<TResult> ExecuteAsync(IExecutionStrategy strategy, TState state, Func`3<TState, CancellationToken, Task`1<TResult>> operation, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TResult Execute(IExecutionStrategy strategy, TState state, Func`2<TState, TResult> operation, Func`2<TState, ExecutionResult`1<TResult>> verifySucceeded);
    [ExtensionAttribute]
public static Task`1<TResult> ExecuteAsync(IExecutionStrategy strategy, TState state, Func`3<TState, CancellationToken, Task`1<TResult>> operation, Func`3<TState, CancellationToken, Task`1<ExecutionResult`1<TResult>>> verifySucceeded, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void ExecuteInTransaction(IExecutionStrategy strategy, Action operation, Func`1<bool> verifySucceeded);
    [ExtensionAttribute]
public static Task ExecuteInTransactionAsync(IExecutionStrategy strategy, Func`1<Task> operation, Func`1<Task`1<bool>> verifySucceeded);
    [ExtensionAttribute]
public static Task ExecuteInTransactionAsync(IExecutionStrategy strategy, Func`2<CancellationToken, Task> operation, Func`2<CancellationToken, Task`1<bool>> verifySucceeded, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TResult ExecuteInTransaction(IExecutionStrategy strategy, Func`1<TResult> operation, Func`1<bool> verifySucceeded);
    [ExtensionAttribute]
public static Task`1<TResult> ExecuteInTransactionAsync(IExecutionStrategy strategy, Func`2<CancellationToken, Task`1<TResult>> operation, Func`2<CancellationToken, Task`1<bool>> verifySucceeded, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static void ExecuteInTransaction(IExecutionStrategy strategy, TState state, Action`1<TState> operation, Func`2<TState, bool> verifySucceeded);
    [ExtensionAttribute]
public static Task ExecuteInTransactionAsync(IExecutionStrategy strategy, TState state, Func`3<TState, CancellationToken, Task> operation, Func`3<TState, CancellationToken, Task`1<bool>> verifySucceeded, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static TResult ExecuteInTransaction(IExecutionStrategy strategy, TState state, Func`2<TState, TResult> operation, Func`2<TState, bool> verifySucceeded);
    [ExtensionAttribute]
public static Task`1<TResult> ExecuteInTransactionAsync(IExecutionStrategy strategy, TState state, Func`3<TState, CancellationToken, Task`1<TResult>> operation, Func`3<TState, CancellationToken, Task`1<bool>> verifySucceeded, CancellationToken cancellationToken);
    public static TResult ExecuteInTransaction(IExecutionStrategy strategy, TState state, Func`2<TState, TResult> operation, Func`2<TState, bool> verifySucceeded, Func`2<DbContext, IDbContextTransaction> beginTransaction);
    public static Task`1<TResult> ExecuteInTransactionAsync(IExecutionStrategy strategy, TState state, Func`3<TState, CancellationToken, Task`1<TResult>> operation, Func`3<TState, CancellationToken, Task`1<bool>> verifySucceeded, Func`3<DbContext, CancellationToken, Task`1<IDbContextTransaction>> beginTransaction, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.IDbContextFactory`1 {
    public abstract virtual TContext CreateDbContext();
    public virtual Task`1<TContext> CreateDbContextAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.IEntityTypeConfiguration`1 {
    public abstract virtual void Configure(EntityTypeBuilder`1<TEntity> builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Infrastructure.AccessorExtensions : object {
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static TService GetService(IInfrastructure`1<IServiceProvider> accessor);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static T GetInfrastructure(IInfrastructure`1<T> accessor);
}
public class Microsoft.EntityFrameworkCore.Infrastructure.Annotatable : AnnotatableBase {
    protected virtual void EnsureReadOnly();
    protected virtual void EnsureMutable();
    [DebuggerStepThroughAttribute]
private sealed virtual override IAnnotation Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable.AddAnnotation(string name, object value);
    [DebuggerStepThroughAttribute]
private sealed virtual override IAnnotation Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable.RemoveAnnotation(string name);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable.SetOrRemoveAnnotation(string name, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.Infrastructure.AnnotatableBase : object {
    private SortedDictionary`2<string, Annotation> _annotations;
    private ConcurrentDictionary`2<string, Annotation> _runtimeAnnotations;
    public bool IsReadOnly { get; }
    [NullableAttribute("2")]
public object Item { get; public set; }
    [NullableAttribute("2")]
private object Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable.Item { get; }
    public virtual bool get_IsReadOnly();
    protected virtual void EnsureReadOnly();
    protected virtual void EnsureMutable();
    public virtual IEnumerable`1<Annotation> GetAnnotations();
    public virtual Annotation AddAnnotation(string name, object value);
    protected virtual Annotation AddAnnotation(string name, Annotation annotation);
    public virtual void AddAnnotations(IEnumerable`1<IAnnotation> annotations);
    internal static void AddAnnotations(AnnotatableBase annotatable, IEnumerable`1<IAnnotation> annotations);
    public virtual void AddAnnotations(IReadOnlyDictionary`2<string, object> annotations);
    public virtual void SetAnnotation(string name, object value);
    protected virtual Annotation SetAnnotation(string name, Annotation annotation, Annotation oldAnnotation);
    [NullableContextAttribute("2")]
protected virtual Annotation OnAnnotationSet(string name, Annotation annotation, Annotation oldAnnotation);
    public virtual Annotation FindAnnotation(string name);
    public virtual Annotation GetAnnotation(string annotationName);
    internal static IAnnotation GetAnnotation(IReadOnlyAnnotatable annotatable, string annotationName);
    public virtual Annotation RemoveAnnotation(string name);
    public virtual object get_Item(string name);
    public virtual void set_Item(string name, object value);
    protected virtual Annotation CreateAnnotation(string name, object value);
    public virtual IEnumerable`1<Annotation> GetRuntimeAnnotations();
    public virtual Annotation AddRuntimeAnnotation(string name, object value);
    protected virtual Annotation AddRuntimeAnnotation(string name, Annotation annotation);
    public virtual void AddRuntimeAnnotations(IEnumerable`1<Annotation> annotations);
    public virtual void AddRuntimeAnnotations(IReadOnlyDictionary`2<string, object> annotations);
    public virtual Annotation SetRuntimeAnnotation(string name, object value);
    protected virtual Annotation SetRuntimeAnnotation(string name, Annotation annotation, Annotation oldAnnotation);
    [NullableContextAttribute("2")]
public virtual TValue GetOrAddRuntimeAnnotationValue(string name, Func`2<TArg, TValue> valueFactory, TArg factoryArgument);
    public virtual Annotation FindRuntimeAnnotation(string name);
    public virtual Annotation RemoveRuntimeAnnotation(string name);
    protected virtual Annotation CreateRuntimeAnnotation(string name, object value);
    private ConcurrentDictionary`2<string, Annotation> GetOrCreateRuntimeAnnotations();
    [DebuggerStepThroughAttribute]
private sealed virtual override object Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable.get_Item(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IAnnotation> Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable.GetAnnotations();
    [DebuggerStepThroughAttribute]
private sealed virtual override IAnnotation Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable.FindAnnotation(string name);
    private sealed virtual override IEnumerable`1<IAnnotation> Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable.GetRuntimeAnnotations();
    private sealed virtual override IAnnotation Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable.FindRuntimeAnnotation(string name);
    private sealed virtual override IAnnotation Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable.AddRuntimeAnnotation(string name, object value);
    private sealed virtual override IAnnotation Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable.RemoveRuntimeAnnotation(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IAnnotation Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable.SetRuntimeAnnotation(string name, object value);
    [CompilerGeneratedAttribute]
private Annotation <AddAnnotations>b__11_0(KeyValuePair`2<string, object> a);
    [CompilerGeneratedAttribute]
private Annotation <AddRuntimeAnnotations>b__27_0(KeyValuePair`2<string, object> a);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("Builder {Metadata,nq}")]
public abstract class Microsoft.EntityFrameworkCore.Infrastructure.AnnotatableBuilder`2 : object {
    [CompilerGeneratedAttribute]
private TMetadata <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private TModelBuilder <ModelBuilder>k__BackingField;
    public TMetadata Metadata { get; }
    public TModelBuilder ModelBuilder { get; }
    private IConventionModelBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder.ModelBuilder { get; }
    private IConventionAnnotatable Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder.Metadata { get; }
    protected AnnotatableBuilder`2(TMetadata metadata, TModelBuilder modelBuilder);
    [CompilerGeneratedAttribute]
public virtual TMetadata get_Metadata();
    [CompilerGeneratedAttribute]
public virtual TModelBuilder get_ModelBuilder();
    public virtual AnnotatableBuilder`2<TMetadata, TModelBuilder> HasAnnotation(string name, object value, ConfigurationSource configurationSource);
    private AnnotatableBuilder`2<TMetadata, TModelBuilder> HasAnnotation(string name, object value, ConfigurationSource configurationSource, bool canOverrideSameSource);
    public virtual AnnotatableBuilder`2<TMetadata, TModelBuilder> HasNonNullAnnotation(string name, object value, ConfigurationSource configurationSource);
    public virtual bool CanSetAnnotation(string name, object value, ConfigurationSource configurationSource);
    private static bool CanSetAnnotationValue(ConventionAnnotation annotation, object value, ConfigurationSource configurationSource, bool canOverrideSameSource);
    public virtual AnnotatableBuilder`2<TMetadata, TModelBuilder> RemoveAnnotation(string name, ConfigurationSource configurationSource);
    public virtual bool CanRemoveAnnotation(string name, ConfigurationSource configurationSource);
    public virtual AnnotatableBuilder`2<TMetadata, TModelBuilder> MergeAnnotationsFrom(TMetadata annotatable);
    public virtual AnnotatableBuilder`2<TMetadata, TModelBuilder> MergeAnnotationsFrom(TMetadata annotatable, ConfigurationSource minimalConfigurationSource);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionModelBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder.get_ModelBuilder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionAnnotatable Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder.get_Metadata();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder.HasAnnotation(string name, object value, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder.HasNonNullAnnotation(string name, object value, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder.CanSetAnnotation(string name, object value, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder.HasNoAnnotation(string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder.CanRemoveAnnotation(string name, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.Annotation : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string Name { get; }
    [NullableAttribute("2")]
public object Value { get; }
    public Annotation(string name, object value);
    [CompilerGeneratedAttribute]
public virtual string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual object get_Value();
}
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Infrastructure.ConcurrencyDetectorCriticalSectionDisposer : ValueType {
    private IConcurrencyDetector _concurrencyDetector;
    [NullableContextAttribute("1")]
public ConcurrencyDetectorCriticalSectionDisposer(IConcurrencyDetector concurrencyDetector);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Infrastructure.ConventionAnnotatable : Annotatable {
    private IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.Builder { get; }
    private bool Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.IsInModel { get; }
    [NullableAttribute("2")]
private object Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable.Item { get; private set; }
    public virtual IEnumerable`1<ConventionAnnotation> GetAnnotations();
    public virtual ConventionAnnotation AddAnnotation(string name, object value, ConfigurationSource configurationSource);
    public virtual void SetAnnotation(string name, object value);
    [NullableContextAttribute("2")]
public virtual ConventionAnnotation SetAnnotation(string name, object value, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual ConventionAnnotation SetOrRemoveAnnotation(string name, object value, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
protected virtual Annotation OnAnnotationSet(string name, Annotation annotation, Annotation oldAnnotation);
    [NullableContextAttribute("2")]
protected virtual IConventionAnnotation OnAnnotationSet(string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    public virtual ConventionAnnotation FindAnnotation(string name);
    protected virtual Annotation CreateAnnotation(string name, object value);
    private static ConventionAnnotation CreateAnnotation(string name, object value, ConfigurationSource configurationSource);
    private sealed virtual override IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.get_Builder();
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.get_IsInModel();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IConventionAnnotation> Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.GetAnnotations();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionAnnotation Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.SetAnnotation(string name, object value, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable.SetAnnotation(string name, object value);
    [DebuggerStepThroughAttribute]
private sealed virtual override object Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable.get_Item(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable.set_Item(string name, object value);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionAnnotation Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.AddAnnotation(string name, object value, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionAnnotation Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.FindAnnotation(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionAnnotation Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.RemoveAnnotation(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionAnnotation Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.SetOrRemoveAnnotation(string name, object value, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension : object {
    private IServiceProvider _internalServiceProvider;
    private IServiceProvider _applicationServiceProvider;
    private IModel _model;
    private ILoggerFactory _loggerFactory;
    private IDbContextLogger _contextLogger;
    private IMemoryCache _memoryCache;
    private bool _sensitiveDataLoggingEnabled;
    private bool _detailedErrorsEnabled;
    private bool _threadSafetyChecksEnabled;
    private QueryTrackingBehavior _queryTrackingBehavior;
    private Dictionary`2<ValueTuple`2<Type, Type>, Type> _replacedServices;
    private Nullable`1<int> _maxPoolSize;
    private TimeSpan _loggingCacheTime;
    private bool _serviceProviderCachingEnabled;
    private DbContextOptionsExtensionInfo _info;
    private IEnumerable`1<IInterceptor> _interceptors;
    private IEnumerable`1<ISingletonInterceptor> _singletonInterceptors;
    private static TimeSpan DefaultLoggingCacheTime;
    private WarningsConfiguration _warningsConfiguration;
    public DbContextOptionsExtensionInfo Info { get; }
    public bool IsSensitiveDataLoggingEnabled { get; }
    public bool DetailedErrorsEnabled { get; }
    public bool ThreadSafetyChecksEnabled { get; }
    [NullableAttribute("2")]
public IModel Model { get; }
    [NullableAttribute("2")]
public ILoggerFactory LoggerFactory { get; }
    [NullableAttribute("2")]
public IDbContextLogger DbContextLogger { get; }
    [NullableAttribute("2")]
public IMemoryCache MemoryCache { get; }
    [NullableAttribute("2")]
public IServiceProvider InternalServiceProvider { get; }
    [NullableAttribute("2")]
public IServiceProvider ApplicationServiceProvider { get; }
    public WarningsConfiguration WarningsConfiguration { get; }
    public QueryTrackingBehavior QueryTrackingBehavior { get; }
    public bool ServiceProviderCachingEnabled { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<ValueTuple`2<Type, Type>, Type> ReplacedServices { get; }
    public Nullable`1<int> MaxPoolSize { get; }
    public TimeSpan LoggingCacheTime { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<IInterceptor> Interceptors { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<ISingletonInterceptor> SingletonInterceptors { get; }
    protected CoreOptionsExtension(CoreOptionsExtension copyFrom);
    private static CoreOptionsExtension();
    public virtual DbContextOptionsExtensionInfo get_Info();
    protected virtual CoreOptionsExtension Clone();
    public virtual CoreOptionsExtension WithInternalServiceProvider(IServiceProvider internalServiceProvider);
    public virtual CoreOptionsExtension WithApplicationServiceProvider(IServiceProvider applicationServiceProvider);
    public virtual CoreOptionsExtension WithModel(IModel model);
    public virtual CoreOptionsExtension WithMemoryCache(IMemoryCache memoryCache);
    public virtual CoreOptionsExtension WithLoggerFactory(ILoggerFactory loggerFactory);
    public virtual CoreOptionsExtension WithDbContextLogger(IDbContextLogger contextLogger);
    public virtual CoreOptionsExtension WithSensitiveDataLoggingEnabled(bool sensitiveDataLoggingEnabled);
    public virtual CoreOptionsExtension WithDetailedErrorsEnabled(bool detailedErrorsEnabled);
    public virtual CoreOptionsExtension WithThreadSafetyChecksEnabled(bool checksEnabled);
    public virtual CoreOptionsExtension WithQueryTrackingBehavior(QueryTrackingBehavior queryTrackingBehavior);
    public virtual CoreOptionsExtension WithReplacedService(Type serviceType, Type newImplementationType, Type currentImplementationType);
    public virtual CoreOptionsExtension WithMaxPoolSize(Nullable`1<int> maxPoolSize);
    public virtual CoreOptionsExtension WithLoggingCacheTime(TimeSpan timeSpan);
    public virtual CoreOptionsExtension WithWarningsConfiguration(WarningsConfiguration warningsConfiguration);
    public virtual CoreOptionsExtension WithServiceProviderCachingEnabled(bool serviceProviderCachingEnabled);
    public virtual CoreOptionsExtension WithInterceptors(IEnumerable`1<IInterceptor> interceptors);
    public virtual CoreOptionsExtension WithSingletonInterceptors(IEnumerable`1<ISingletonInterceptor> interceptors);
    public virtual bool get_IsSensitiveDataLoggingEnabled();
    public virtual bool get_DetailedErrorsEnabled();
    public virtual bool get_ThreadSafetyChecksEnabled();
    [NullableContextAttribute("2")]
public virtual IModel get_Model();
    [NullableContextAttribute("2")]
public virtual ILoggerFactory get_LoggerFactory();
    [NullableContextAttribute("2")]
public virtual IDbContextLogger get_DbContextLogger();
    [NullableContextAttribute("2")]
public virtual IMemoryCache get_MemoryCache();
    [NullableContextAttribute("2")]
public virtual IServiceProvider get_InternalServiceProvider();
    [NullableContextAttribute("2")]
public virtual IServiceProvider get_ApplicationServiceProvider();
    public virtual WarningsConfiguration get_WarningsConfiguration();
    public virtual QueryTrackingBehavior get_QueryTrackingBehavior();
    public virtual bool get_ServiceProviderCachingEnabled();
    public virtual IReadOnlyDictionary`2<ValueTuple`2<Type, Type>, Type> get_ReplacedServices();
    public virtual Nullable`1<int> get_MaxPoolSize();
    public virtual TimeSpan get_LoggingCacheTime();
    public virtual IEnumerable`1<IInterceptor> get_Interceptors();
    public virtual IEnumerable`1<ISingletonInterceptor> get_SingletonInterceptors();
    public virtual void ApplyServices(IServiceCollection services);
    private IMemoryCache GetMemoryCache();
    public virtual void Validate(IDbContextOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade : object {
    private DbContext _context;
    private IDatabaseFacadeDependencies _dependencies;
    [CompilerGeneratedAttribute]
private AutoTransactionBehavior <AutoTransactionBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoSavepointsEnabled>k__BackingField;
    private IDatabaseFacadeDependencies Dependencies { get; }
    [NullableAttribute("2")]
public IDbContextTransaction CurrentTransaction { get; }
    [ObsoleteAttribute("Use AutoTransactionBehavior instead")]
public bool AutoTransactionsEnabled { get; public set; }
    public AutoTransactionBehavior AutoTransactionBehavior { get; public set; }
    public bool AutoSavepointsEnabled { get; public set; }
    [NullableAttribute("2")]
public string ProviderName { get; }
    private IServiceProvider Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.Instance { get; }
    [EntityFrameworkInternalAttribute]
private IDatabaseFacadeDependencies Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependenciesAccessor.Dependencies { get; }
    [EntityFrameworkInternalAttribute]
private DbContext Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependenciesAccessor.Context { get; }
    public DatabaseFacade(DbContext context);
    private IDatabaseFacadeDependencies get_Dependencies();
    public virtual bool EnsureCreated();
    public virtual Task`1<bool> EnsureCreatedAsync(CancellationToken cancellationToken);
    public virtual bool EnsureDeleted();
    public virtual Task`1<bool> EnsureDeletedAsync(CancellationToken cancellationToken);
    public virtual bool CanConnect();
    public virtual Task`1<bool> CanConnectAsync(CancellationToken cancellationToken);
    public virtual IDbContextTransaction BeginTransaction();
    public virtual Task`1<IDbContextTransaction> BeginTransactionAsync(CancellationToken cancellationToken);
    public virtual void CommitTransaction();
    public virtual Task CommitTransactionAsync(CancellationToken cancellationToken);
    public virtual void RollbackTransaction();
    public virtual Task RollbackTransactionAsync(CancellationToken cancellationToken);
    public virtual IExecutionStrategy CreateExecutionStrategy();
    [NullableContextAttribute("2")]
public virtual IDbContextTransaction get_CurrentTransaction();
    public virtual bool get_AutoTransactionsEnabled();
    public virtual void set_AutoTransactionsEnabled(bool value);
    [CompilerGeneratedAttribute]
public virtual AutoTransactionBehavior get_AutoTransactionBehavior();
    [CompilerGeneratedAttribute]
public virtual void set_AutoTransactionBehavior(AutoTransactionBehavior value);
    [CompilerGeneratedAttribute]
public virtual bool get_AutoSavepointsEnabled();
    [CompilerGeneratedAttribute]
public virtual void set_AutoSavepointsEnabled(bool value);
    [NullableContextAttribute("2")]
public virtual string get_ProviderName();
    private sealed virtual override IServiceProvider Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.get_Instance();
    private sealed virtual override IDatabaseFacadeDependencies Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependenciesAccessor.get_Dependencies();
    private sealed virtual override DbContext Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependenciesAccessor.get_Context();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetState();
    private sealed virtual override Task Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetStateAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Microsoft.EntityFrameworkCore.Infrastructure.DbContextAttribute : Attribute {
    [CompilerGeneratedAttribute]
private Type <ContextType>k__BackingField;
    public Type ContextType { get; }
    public DbContextAttribute(Type contextType);
    [CompilerGeneratedAttribute]
public Type get_ContextType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Infrastructure.DbContextOptionsExtensionInfo : object {
    [CompilerGeneratedAttribute]
private IDbContextOptionsExtension <Extension>k__BackingField;
    public IDbContextOptionsExtension Extension { get; }
    public bool IsDatabaseProvider { get; }
    public string LogFragment { get; }
    protected DbContextOptionsExtensionInfo(IDbContextOptionsExtension extension);
    [CompilerGeneratedAttribute]
public virtual IDbContextOptionsExtension get_Extension();
    public abstract virtual bool get_IsDatabaseProvider();
    public abstract virtual string get_LogFragment();
    public abstract virtual int GetServiceProviderHashCode();
    public abstract virtual bool ShouldUseSameServiceProvider(DbContextOptionsExtensionInfo other);
    public abstract virtual void PopulateDebugInfo(IDictionary`2<string, string> debugInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Infrastructure.DbSetProperty : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IClrPropertySetter <Setter>k__BackingField;
    public string Name { get; }
    [DynamicallyAccessedMembersAttribute("9831")]
public Type Type { get; }
    [NullableAttribute("2")]
public IClrPropertySetter Setter { get; }
    public DbSetProperty(string name, Type type, IClrPropertySetter setter);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public Type get_Type();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IClrPropertySetter get_Setter();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.DebugView : object {
    [DebuggerBrowsableAttribute("0")]
private Func`1<string> _toShortDebugString;
    [DebuggerBrowsableAttribute("0")]
private Func`1<string> _toLongDebugString;
    public string LongView { get; }
    public string ShortView { get; }
    public DebugView(Func`1<string> toShortDebugString, Func`1<string> toLongDebugString);
    public virtual string get_LongView();
    public virtual string get_ShortView();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkEventSource : EventSource {
    private long _activeDbContexts;
    private long _totalQueries;
    private long _totalSaveChanges;
    private long _totalExecutionStrategyOperationFailures;
    private long _totalOptimisticConcurrencyFailures;
    private CacheInfo _compiledQueryCacheInfo;
    private PollingCounter _activeDbContextsCounter;
    private PollingCounter _totalQueriesCounter;
    private IncrementingPollingCounter _queriesPerSecondCounter;
    private PollingCounter _totalSaveChangesCounter;
    private IncrementingPollingCounter _saveChangesPerSecondCounter;
    private PollingCounter _compiledQueryCacheHitRateCounter;
    private PollingCounter _totalExecutionStrategyOperationFailuresCounter;
    private IncrementingPollingCounter _executionStrategyOperationFailuresPerSecondCounter;
    private PollingCounter _totalOptimisticConcurrencyFailuresCounter;
    private IncrementingPollingCounter _optimisticConcurrencyFailuresPerSecondCounter;
    public static EntityFrameworkEventSource Log;
    private static EntityFrameworkEventSource();
    public void DbContextInitializing();
    public void DbContextDisposing();
    public void QueryExecuting();
    public void SavingChanges();
    public void CompiledQueryCacheHit();
    public void CompiledQueryCacheMiss();
    public void ExecutionStrategyOperationFailure();
    public void OptimisticConcurrencyFailure();
    protected virtual void OnEventCommand(EventCommandEventArgs command);
    [UsedImplicitlyAttribute]
private void ResetCacheInfo();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__26_0();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__26_1();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__26_2();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__26_3();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__26_4();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__26_5();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__26_6();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__26_7();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__26_8();
    [CompilerGeneratedAttribute]
private double <OnEventCommand>b__26_9();
}
[AttributeUsageAttribute("6140")]
public class Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkInternalAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkServicesBuilder : object {
    [EntityFrameworkInternalAttribute]
public static IDictionary`2<Type, ServiceCharacteristics> CoreServices;
    [CompilerGeneratedAttribute]
private ServiceCollectionMap <ServiceCollectionMap>k__BackingField;
    protected ServiceCollectionMap ServiceCollectionMap { get; }
    public EntityFrameworkServicesBuilder(IServiceCollection serviceCollection);
    private static EntityFrameworkServicesBuilder();
    [CompilerGeneratedAttribute]
protected virtual ServiceCollectionMap get_ServiceCollectionMap();
    protected virtual ServiceCharacteristics GetServiceCharacteristics(Type serviceType);
    protected virtual Nullable`1<ServiceCharacteristics> TryGetServiceCharacteristics(Type serviceType);
    public virtual EntityFrameworkServicesBuilder TryAddProviderSpecificServices(Action`1<ServiceCollectionMap> serviceMap);
    public virtual EntityFrameworkServicesBuilder TryAddCoreServices();
    private static IDbContextServices GetContextServices(IServiceProvider serviceProvider);
    public virtual EntityFrameworkServicesBuilder TryAdd();
    public virtual EntityFrameworkServicesBuilder TryAdd(Type serviceType, Type implementationType);
    public virtual EntityFrameworkServicesBuilder TryAdd(Func`2<IServiceProvider, TService> factory);
    public virtual EntityFrameworkServicesBuilder TryAdd(Func`2<IServiceProvider, TImplementation> factory);
    public virtual EntityFrameworkServicesBuilder TryAdd(Type serviceType, Type implementationType, Func`2<IServiceProvider, object> factory);
    public virtual EntityFrameworkServicesBuilder TryAdd(TService implementation);
    public virtual EntityFrameworkServicesBuilder TryAdd(Type serviceType, object implementation);
    [CompilerGeneratedAttribute]
private void <TryAddProviderSpecificServices>b__7_0(Type serviceType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Infrastructure.ExpressionExtensions : object {
    public static MethodInfo ValueBufferTryReadValueMethod;
    private static MethodInfo ObjectEqualsMethodInfo;
    private static ExpressionExtensions();
    [ExtensionAttribute]
public static string Print(Expression expression, Nullable`1<int> characterLimit);
    [ExtensionAttribute]
public static MemberExpression MakeMemberAccess(Expression expression, MemberInfo member);
    [ExtensionAttribute]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2077")]
[DynamicDependencyAttribute("-1", "System.Linq.Expressions.AssignBinaryExpression", "System.Linq.Expressions")]
public static Expression Assign(MemberExpression memberExpression, Expression valueExpression);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool TryGetEFPropertyArguments(MethodCallExpression methodCallExpression, Expression& entityExpression, String& propertyName);
    [ExtensionAttribute]
public static bool TryGetIndexerArguments(MethodCallExpression methodCallExpression, IModel model, Expression& entityExpression, String& propertyName);
    [ExtensionAttribute]
public static PropertyInfo GetPropertyAccess(LambdaExpression propertyAccessExpression);
    [ExtensionAttribute]
public static MemberInfo GetMemberAccess(LambdaExpression memberAccessExpression);
    [ExtensionAttribute]
private static TMemberInfo GetInternalMemberAccess(LambdaExpression memberAccessExpression);
    [ExtensionAttribute]
public static IReadOnlyList`1<PropertyInfo> GetPropertyAccessList(LambdaExpression propertyAccessExpression);
    [ExtensionAttribute]
public static IReadOnlyList`1<MemberInfo> GetMemberAccessList(LambdaExpression memberAccessExpression);
    [ExtensionAttribute]
public static Expression CreateValueBufferReadValueExpression(Expression valueBuffer, Type type, int index, IPropertyBase property);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2060")]
private static MethodInfo MakeValueBufferTryReadValueMethod(Type type);
    private static TValue ValueBufferTryReadValue(ValueBuffer& valueBuffer, int index, IPropertyBase property);
    [ExtensionAttribute]
public static Expression CreateKeyValuesExpression(Expression target, IReadOnlyList`1<IProperty> properties, bool makeNullable);
    [ExtensionAttribute]
public static Expression CreateEFPropertyExpression(Expression target, IPropertyBase property, bool makeNullable);
    private static Expression CreateEFPropertyExpression(Expression target, Type propertyDeclaringType, Type propertyType, string propertyName, bool makeNullable);
    public static Expression CreateEqualsExpression(Expression left, Expression right, bool negated);
    [CompilerGeneratedAttribute]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026")]
internal static Type <Assign>g__GetAssignBinaryExpressionType|2_0();
    [CompilerGeneratedAttribute]
internal static Expression <CreateEqualsExpression>g__AddConvertToObject|18_0(Expression expression);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Infrastructure.IAnnotatable {
    public abstract virtual IAnnotation FindRuntimeAnnotation(string name);
    public virtual object FindRuntimeAnnotationValue(string name);
    public abstract virtual IEnumerable`1<IAnnotation> GetRuntimeAnnotations();
    public abstract virtual IAnnotation AddRuntimeAnnotation(string name, object value);
    public abstract virtual IAnnotation SetRuntimeAnnotation(string name, object value);
    public abstract virtual IAnnotation RemoveRuntimeAnnotation(string name);
    [NullableContextAttribute("2")]
public abstract virtual TValue GetOrAddRuntimeAnnotationValue(string name, Func`2<TArg, TValue> valueFactory, TArg factoryArgument);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation {
    public string Name { get; }
    [NullableAttribute("2")]
public object Value { get; }
    public abstract virtual string get_Name();
    [NullableContextAttribute("2")]
public abstract virtual object get_Value();
}
public interface Microsoft.EntityFrameworkCore.Infrastructure.IConcurrencyDetector {
    public abstract virtual ConcurrencyDetectorCriticalSectionDisposer EnterCriticalSection();
    public abstract virtual void ExitCriticalSection();
}
public interface Microsoft.EntityFrameworkCore.Infrastructure.ICoreSingletonOptions {
    public bool AreDetailedErrorsEnabled { get; }
    public bool AreThreadSafetyChecksEnabled { get; }
    public abstract virtual bool get_AreDetailedErrorsEnabled();
    public abstract virtual bool get_AreThreadSafetyChecksEnabled();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Infrastructure.ICurrentDbContext {
    public DbContext Context { get; }
    public abstract virtual DbContext get_Context();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions {
    public IEnumerable`1<IDbContextOptionsExtension> Extensions { get; }
    public abstract virtual IEnumerable`1<IDbContextOptionsExtension> get_Extensions();
    public abstract virtual TExtension FindExtension();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsBuilderInfrastructure {
    public abstract virtual void AddOrUpdateExtension(TExtension extension);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension {
    public DbContextOptionsExtensionInfo Info { get; }
    public abstract virtual DbContextOptionsExtensionInfo get_Info();
    public abstract virtual void ApplyServices(IServiceCollection services);
    public abstract virtual void Validate(IDbContextOptions options);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Infrastructure.IDbSetFinder {
    public abstract virtual IReadOnlyList`1<DbSetProperty> FindSets(Type contextType);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1 {
    public T Instance { get; }
    public abstract virtual T get_Instance();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap {
    public abstract virtual IInternalServiceCollectionMap AddDependencySingleton();
    public abstract virtual IInternalServiceCollectionMap AddDependencyScoped();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Infrastructure.IModelCacheKeyFactory {
    public abstract virtual object Create(DbContext context, bool designTime);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Infrastructure.IModelCustomizer {
    public abstract virtual void Customize(ModelBuilder modelBuilder, DbContext context);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Infrastructure.IModelRuntimeInitializer {
    public abstract virtual IModel Initialize(IModel model, bool designTime, IDiagnosticsLogger`1<Validation> validationLogger);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Infrastructure.IModelSource {
    public abstract virtual IModel GetModel(DbContext context, ModelCreationDependencies modelCreationDependencies, bool designTime);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Infrastructure.IModelValidator {
    public abstract virtual void Validate(IModel model, IDiagnosticsLogger`1<Validation> logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.IndentedStringBuilder : object {
    private static byte IndentSize;
    private int _indent;
    private bool _indentPending;
    private StringBuilder _stringBuilder;
    public int IndentCount { get; }
    public int Length { get; }
    public virtual int get_IndentCount();
    public virtual int get_Length();
    public virtual IndentedStringBuilder Append(string value);
    public virtual IndentedStringBuilder Append(char value);
    public virtual IndentedStringBuilder Append(IEnumerable`1<string> value);
    public virtual IndentedStringBuilder Append(IEnumerable`1<char> value);
    public virtual IndentedStringBuilder AppendLine();
    public virtual IndentedStringBuilder AppendLine(string value);
    public virtual IndentedStringBuilder AppendLines(string value, bool skipFinalNewline);
    public virtual IndentedStringBuilder Clear();
    public virtual IndentedStringBuilder IncrementIndent();
    public virtual IndentedStringBuilder DecrementIndent();
    public virtual IDisposable Indent();
    public virtual IDisposable SuspendIndent();
    public virtual string ToString();
    private void DoIndent();
}
public class Microsoft.EntityFrameworkCore.Infrastructure.Internal.ConcurrencyDetector : object {
    private int _inCriticalSection;
    private static AsyncLocal`1<bool> ThreadHasLock;
    private int _refCount;
    private static ConcurrencyDetector();
    public virtual ConcurrencyDetectorCriticalSectionDisposer EnterCriticalSection();
    public virtual void ExitCriticalSection();
}
public class Microsoft.EntityFrameworkCore.Infrastructure.Internal.CoreSingletonOptions : object {
    [CompilerGeneratedAttribute]
private bool <AreDetailedErrorsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AreThreadSafetyChecksEnabled>k__BackingField;
    public bool AreDetailedErrorsEnabled { get; private set; }
    public bool AreThreadSafetyChecksEnabled { get; private set; }
    [NullableContextAttribute("1")]
public virtual void Initialize(IDbContextOptions options);
    [NullableContextAttribute("1")]
public virtual void Validate(IDbContextOptions options);
    [CompilerGeneratedAttribute]
public virtual bool get_AreDetailedErrorsEnabled();
    [CompilerGeneratedAttribute]
private void set_AreDetailedErrorsEnabled(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_AreThreadSafetyChecksEnabled();
    [CompilerGeneratedAttribute]
private void set_AreThreadSafetyChecksEnabled(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.Internal.CurrentDbContext : object {
    [CompilerGeneratedAttribute]
private DbContext <Context>k__BackingField;
    public DbContext Context { get; }
    public CurrentDbContext(DbContext context);
    [CompilerGeneratedAttribute]
public sealed virtual DbContext get_Context();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Infrastructure.Internal.DbContextOptionsExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string BuildOptionsFragment(IDbContextOptions contextOptions);
}
public class Microsoft.EntityFrameworkCore.Infrastructure.Internal.DbSetFinder : object {
    private ConcurrentDictionary`2<Type, IReadOnlyList`1<DbSetProperty>> _cache;
    [NullableContextAttribute("1")]
public virtual IReadOnlyList`1<DbSetProperty> FindSets(Type contextType);
    private static DbSetProperty[] FindSetsNonCached(Type contextType);
}
public static class Microsoft.EntityFrameworkCore.Infrastructure.Internal.InfrastructureExtensions : object {
    [NullableContextAttribute("1")]
public static TService GetService(IInfrastructure`1<IServiceProvider> accessor);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.Internal.InternalServiceCollectionMap : object {
    private IDictionary`2<Type, IList`1<int>> _serviceMap;
    [CompilerGeneratedAttribute]
private IServiceCollection <ServiceCollection>k__BackingField;
    public IServiceCollection ServiceCollection { get; }
    public InternalServiceCollectionMap(IServiceCollection serviceCollection);
    [CompilerGeneratedAttribute]
public virtual IServiceCollection get_ServiceCollection();
    public virtual IList`1<int> GetOrCreateDescriptorIndexes(Type serviceType);
    public virtual void AddNewDescriptor(IList`1<int> indexes, ServiceDescriptor newDescriptor);
    public virtual IInternalServiceCollectionMap AddDependencySingleton();
    public virtual IInternalServiceCollectionMap AddDependencyScoped();
    public virtual IInternalServiceCollectionMap AddDependency(Type serviceType, ServiceLifetime lifetime);
    public virtual InternalServiceCollectionMap DoPatchInjection();
    private static object InjectServices(IServiceProvider serviceProvider, Type concreteType);
    private static object InjectServices(IServiceProvider serviceProvider, object service);
    private static object InjectServices(IServiceProvider serviceProvider, Func`2<IServiceProvider, object> implementationFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.Internal.LazyLoader : object {
    private bool _disposed;
    private IDictionary`2<string, bool> _loadedStates;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Infrastructure> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private DbContext <Context>k__BackingField;
    protected IDiagnosticsLogger`1<Infrastructure> Logger { get; }
    protected DbContext Context { get; }
    public LazyLoader(ICurrentDbContext currentContext, IDiagnosticsLogger`1<Infrastructure> logger);
    public virtual void SetLoaded(object entity, string navigationName, bool loaded);
    [CompilerGeneratedAttribute]
protected virtual IDiagnosticsLogger`1<Infrastructure> get_Logger();
    [CompilerGeneratedAttribute]
protected virtual DbContext get_Context();
    public virtual void Load(object entity, string navigationName);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Infrastructure.Internal.LazyLoader/<LoadAsync>d__11")]
public virtual Task LoadAsync(object entity, CancellationToken cancellationToken, string navigationName);
    private bool ShouldLoad(object entity, string navigationName, NavigationEntry& navigationEntry);
    public virtual void Dispose();
}
public class Microsoft.EntityFrameworkCore.Infrastructure.Internal.MemberInfoNameComparer : object {
    [NullableAttribute("1")]
public static MemberInfoNameComparer Instance;
    private static MemberInfoNameComparer();
    [NullableContextAttribute("2")]
public sealed virtual int Compare(MemberInfo x, MemberInfo y);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface Microsoft.EntityFrameworkCore.Infrastructure.IReadOnlyAnnotatable {
    [NullableAttribute("2")]
public object Item { get; }
    public abstract virtual object get_Item(string name);
    public abstract virtual IAnnotation FindAnnotation(string name);
    public abstract virtual IEnumerable`1<IAnnotation> GetAnnotations();
    public virtual IAnnotation GetAnnotation(string annotationName);
    public virtual string AnnotationsToDebugString(int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Infrastructure.IResettableService {
    public abstract virtual void ResetState();
    public abstract virtual Task ResetStateAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Infrastructure.ISingletonOptions {
    public abstract virtual void Initialize(IDbContextOptions options);
    public abstract virtual void Validate(IDbContextOptions options);
}
[FlagsAttribute]
public enum Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions : Enum {
    public int value__;
    public static MetadataDebugStringOptions IncludeAnnotations;
    public static MetadataDebugStringOptions IncludePropertyIndexes;
    public static MetadataDebugStringOptions SingleLine;
    public static MetadataDebugStringOptions ShortDefault;
    public static MetadataDebugStringOptions LongDefault;
    public static MetadataDebugStringOptions SingleLineDefault;
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Infrastructure.MethodInfoExtensions : object {
    private static string EFTypeName;
    private static MethodInfoExtensions();
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsEFPropertyMethod(MethodInfo methodInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.ModelCacheKey : object {
    private Type _dbContextType;
    private bool _designTime;
    public ModelCacheKey(DbContext context);
    public ModelCacheKey(DbContext context, bool designTime);
    protected virtual bool Equals(ModelCacheKey other);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.ModelCacheKeyFactory : object {
    [CompilerGeneratedAttribute]
private ModelCacheKeyFactoryDependencies <Dependencies>k__BackingField;
    protected ModelCacheKeyFactoryDependencies Dependencies { get; }
    public ModelCacheKeyFactory(ModelCacheKeyFactoryDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ModelCacheKeyFactoryDependencies get_Dependencies();
    public virtual object Create(DbContext context);
    public virtual object Create(DbContext context, bool designTime);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.ModelCacheKeyFactoryDependencies : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
private ModelCacheKeyFactoryDependencies(ModelCacheKeyFactoryDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ModelCacheKeyFactoryDependencies left, ModelCacheKeyFactoryDependencies right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ModelCacheKeyFactoryDependencies left, ModelCacheKeyFactoryDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ModelCacheKeyFactoryDependencies other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public ModelCacheKeyFactoryDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.ModelCustomizer : object {
    [CompilerGeneratedAttribute]
private ModelCustomizerDependencies <Dependencies>k__BackingField;
    protected ModelCustomizerDependencies Dependencies { get; }
    public ModelCustomizer(ModelCustomizerDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ModelCustomizerDependencies get_Dependencies();
    public virtual void Customize(ModelBuilder modelBuilder, DbContext context);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.ModelCustomizerDependencies : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
private ModelCustomizerDependencies(ModelCustomizerDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ModelCustomizerDependencies left, ModelCustomizerDependencies right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ModelCustomizerDependencies left, ModelCustomizerDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ModelCustomizerDependencies other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public ModelCustomizerDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.ModelDependencies : object {
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Model> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IDiagnosticsLogger`1<Model> Logger { get; public set; }
    [EntityFrameworkInternalAttribute]
public ModelDependencies(IDiagnosticsLogger`1<Model> logger);
    [CompilerGeneratedAttribute]
private ModelDependencies(ModelDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Model> get_Logger();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Logger(IDiagnosticsLogger`1<Model> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ModelDependencies left, ModelDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ModelDependencies left, ModelDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ModelDependencies other);
    [CompilerGeneratedAttribute]
public ModelDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.ModelRuntimeInitializer : object {
    private static object SyncObject;
    [CompilerGeneratedAttribute]
private ModelRuntimeInitializerDependencies <Dependencies>k__BackingField;
    protected ModelRuntimeInitializerDependencies Dependencies { get; }
    public ModelRuntimeInitializer(ModelRuntimeInitializerDependencies dependencies);
    private static ModelRuntimeInitializer();
    [CompilerGeneratedAttribute]
protected virtual ModelRuntimeInitializerDependencies get_Dependencies();
    public virtual IModel Initialize(IModel model, bool designTime, IDiagnosticsLogger`1<Validation> validationLogger);
    protected virtual void InitializeModel(IModel model, bool designTime, bool prevalidation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.ModelRuntimeInitializerDependencies : object {
    [CompilerGeneratedAttribute]
private RuntimeModelDependencies <ModelDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private IModelValidator <ModelValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public RuntimeModelDependencies ModelDependencies { get; public set; }
    public IModelValidator ModelValidator { get; public set; }
    [EntityFrameworkInternalAttribute]
public ModelRuntimeInitializerDependencies(RuntimeModelDependencies runtimeModelDependencies, IModelValidator modelValidator);
    [CompilerGeneratedAttribute]
private ModelRuntimeInitializerDependencies(ModelRuntimeInitializerDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public RuntimeModelDependencies get_ModelDependencies();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModelDependencies(RuntimeModelDependencies value);
    [CompilerGeneratedAttribute]
public IModelValidator get_ModelValidator();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModelValidator(IModelValidator value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ModelRuntimeInitializerDependencies left, ModelRuntimeInitializerDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ModelRuntimeInitializerDependencies left, ModelRuntimeInitializerDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ModelRuntimeInitializerDependencies other);
    [CompilerGeneratedAttribute]
public ModelRuntimeInitializerDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.ModelSource : object {
    private object _syncObject;
    [CompilerGeneratedAttribute]
private ModelSourceDependencies <Dependencies>k__BackingField;
    protected ModelSourceDependencies Dependencies { get; }
    public ModelSource(ModelSourceDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ModelSourceDependencies get_Dependencies();
    public virtual IModel GetModel(DbContext context, ModelCreationDependencies modelCreationDependencies, bool designTime);
    protected virtual IModel CreateModel(DbContext context, IConventionSetBuilder conventionSetBuilder, ModelDependencies modelDependencies);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.ModelSourceDependencies : object {
    [CompilerGeneratedAttribute]
private IModelCustomizer <ModelCustomizer>k__BackingField;
    [CompilerGeneratedAttribute]
private IModelCacheKeyFactory <ModelCacheKeyFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IMemoryCache <MemoryCache>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IModelCustomizer ModelCustomizer { get; public set; }
    public IModelCacheKeyFactory ModelCacheKeyFactory { get; public set; }
    public IMemoryCache MemoryCache { get; public set; }
    [EntityFrameworkInternalAttribute]
public ModelSourceDependencies(IModelCustomizer modelCustomizer, IModelCacheKeyFactory modelCacheKeyFactory, IMemoryCache memoryCache);
    [CompilerGeneratedAttribute]
private ModelSourceDependencies(ModelSourceDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IModelCustomizer get_ModelCustomizer();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModelCustomizer(IModelCustomizer value);
    [CompilerGeneratedAttribute]
public IModelCacheKeyFactory get_ModelCacheKeyFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModelCacheKeyFactory(IModelCacheKeyFactory value);
    [CompilerGeneratedAttribute]
public IMemoryCache get_MemoryCache();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MemoryCache(IMemoryCache value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ModelSourceDependencies left, ModelSourceDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ModelSourceDependencies left, ModelSourceDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ModelSourceDependencies other);
    [CompilerGeneratedAttribute]
public ModelSourceDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator : object {
    private static IEnumerable`1<string> DictionaryProperties;
    [CompilerGeneratedAttribute]
private ModelValidatorDependencies <Dependencies>k__BackingField;
    protected ModelValidatorDependencies Dependencies { get; }
    public ModelValidator(ModelValidatorDependencies dependencies);
    private static ModelValidator();
    [CompilerGeneratedAttribute]
protected virtual ModelValidatorDependencies get_Dependencies();
    public virtual void Validate(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateRelationships(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidatePropertyMapping(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ThrowPropertyNotMappedException(string propertyType, IConventionEntityType entityType, IConventionProperty unmappedProperty);
    protected virtual bool IsOwned(Type targetType, IConventionModel conventionModel);
    protected virtual void ValidateIgnoredMembers(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateNoShadowKeys(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateNoMutableKeys(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateNoCycles(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateNonNullPrimaryKeys(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateClrInheritance(IModel model, IDiagnosticsLogger`1<Validation> logger);
    private static void ValidateClrInheritance(IModel model, IEntityType entityType, HashSet`1<IEntityType> validEntityTypes);
    protected virtual void ValidateInheritanceMapping(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateDiscriminatorValues(IEntityType rootEntityType);
    protected virtual void ValidateChangeTrackingStrategy(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateOwnership(IModel model, IDiagnosticsLogger`1<Validation> logger);
    private static bool Contains(IForeignKey inheritedFk, IForeignKey derivedFk);
    protected virtual void ValidateForeignKeys(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual bool IsRedundant(IForeignKey foreignKey);
    protected virtual void ValidateFieldMapping(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateTypeMappings(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateQueryFilters(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateData(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void ValidateTriggers(IModel model, IDiagnosticsLogger`1<Validation> logger);
    protected virtual void LogShadowProperties(IModel model, IDiagnosticsLogger`1<Validation> logger);
    [CompilerGeneratedAttribute]
internal static bool <ValidateForeignKeys>g__ContainedInForeignKeyForAllConcreteTypes|22_0(IEntityType entityType, IProperty property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.ModelValidatorDependencies : object {
    [CompilerGeneratedAttribute]
private IMemberClassifier <MemberClassifier>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [EntityFrameworkInternalAttribute]
public IMemberClassifier MemberClassifier { get; public set; }
    [EntityFrameworkInternalAttribute]
public ModelValidatorDependencies(IMemberClassifier memberClassifier);
    [CompilerGeneratedAttribute]
private ModelValidatorDependencies(ModelValidatorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IMemberClassifier get_MemberClassifier();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MemberClassifier(IMemberClassifier value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ModelValidatorDependencies left, ModelValidatorDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ModelValidatorDependencies left, ModelValidatorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ModelValidatorDependencies other);
    [CompilerGeneratedAttribute]
public ModelValidatorDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.PooledDbContextFactory`1 : object {
    private IDbContextPool`1<TContext> _pool;
    [EntityFrameworkInternalAttribute]
public PooledDbContextFactory`1(IDbContextPool`1<TContext> pool);
    public PooledDbContextFactory`1(DbContextOptions`1<TContext> options, int poolSize);
    public virtual TContext CreateDbContext();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Infrastructure.PooledDbContextFactory`1/<CreateDbContextAsync>d__4")]
public virtual Task`1<TContext> CreateDbContextAsync(CancellationToken cancellationToken);
}
public static class Microsoft.EntityFrameworkCore.Infrastructure.ProductInfo : object {
    [NullableContextAttribute("1")]
public static string GetVersion();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.RuntimeModelDependencies : object {
    [CompilerGeneratedAttribute]
private ITypeMappingSource <TypeMappingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IConstructorBindingFactory <ConstructorBindingFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IParameterBindingFactories <ParameterBindingFactories>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public ITypeMappingSource TypeMappingSource { get; public set; }
    public IConstructorBindingFactory ConstructorBindingFactory { get; public set; }
    public IParameterBindingFactories ParameterBindingFactories { get; public set; }
    [EntityFrameworkInternalAttribute]
public RuntimeModelDependencies(ITypeMappingSource typeMappingSource, IConstructorBindingFactory constructorBindingFactory, IParameterBindingFactories parameterBindingFactories);
    [CompilerGeneratedAttribute]
private RuntimeModelDependencies(RuntimeModelDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ITypeMappingSource get_TypeMappingSource();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TypeMappingSource(ITypeMappingSource value);
    [CompilerGeneratedAttribute]
public IConstructorBindingFactory get_ConstructorBindingFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ConstructorBindingFactory(IConstructorBindingFactory value);
    [CompilerGeneratedAttribute]
public IParameterBindingFactories get_ParameterBindingFactories();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ParameterBindingFactories(IParameterBindingFactories value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(RuntimeModelDependencies left, RuntimeModelDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(RuntimeModelDependencies left, RuntimeModelDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(RuntimeModelDependencies other);
    [CompilerGeneratedAttribute]
public RuntimeModelDependencies <Clone>$();
}
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCharacteristics : ValueType {
    [CompilerGeneratedAttribute]
private ServiceLifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MultipleRegistrations>k__BackingField;
    public ServiceLifetime Lifetime { get; }
    public bool MultipleRegistrations { get; }
    public ServiceCharacteristics(ServiceLifetime lifetime, bool multipleRegistrations);
    [CompilerGeneratedAttribute]
public ServiceLifetime get_Lifetime();
    [CompilerGeneratedAttribute]
public bool get_MultipleRegistrations();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Infrastructure.ServiceCollectionMap : object {
    private InternalServiceCollectionMap _map;
    [CompilerGeneratedAttribute]
private Action`1<Type> <Validate>k__BackingField;
    public IServiceCollection ServiceCollection { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal Action`1<Type> Validate { get; internal set; }
    private IInternalServiceCollectionMap Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap>.Instance { get; }
    public ServiceCollectionMap(IServiceCollection serviceCollection);
    public virtual IServiceCollection get_ServiceCollection();
    [CompilerGeneratedAttribute]
internal Action`1<Type> get_Validate();
    [CompilerGeneratedAttribute]
internal void set_Validate(Action`1<Type> value);
    public virtual ServiceCollectionMap TryAddTransient();
    public virtual ServiceCollectionMap TryAddScoped();
    public virtual ServiceCollectionMap TryAddSingleton();
    public virtual ServiceCollectionMap TryAddTransient(Type serviceType, Type implementationType);
    public virtual ServiceCollectionMap TryAddScoped(Type serviceType, Type implementationType);
    public virtual ServiceCollectionMap TryAddSingleton(Type serviceType, Type implementationType);
    public virtual ServiceCollectionMap TryAdd(Type serviceType, Type implementationType, ServiceLifetime lifetime);
    public virtual ServiceCollectionMap TryAddTransient(Func`2<IServiceProvider, TService> factory);
    public virtual ServiceCollectionMap TryAddScoped(Func`2<IServiceProvider, TService> factory);
    public virtual ServiceCollectionMap TryAddSingleton(Func`2<IServiceProvider, TService> factory);
    public virtual ServiceCollectionMap TryAddTransient(Func`2<IServiceProvider, TImplementation> factory);
    public virtual ServiceCollectionMap TryAddScoped(Func`2<IServiceProvider, TImplementation> factory);
    public virtual ServiceCollectionMap TryAddSingleton(Func`2<IServiceProvider, TImplementation> factory);
    public virtual ServiceCollectionMap TryAddTransient(Type serviceType, Func`2<IServiceProvider, object> factory);
    public virtual ServiceCollectionMap TryAddScoped(Type serviceType, Func`2<IServiceProvider, object> factory);
    public virtual ServiceCollectionMap TryAddSingleton(Type serviceType, Func`2<IServiceProvider, object> factory);
    public virtual ServiceCollectionMap TryAdd(Type serviceType, Func`2<IServiceProvider, object> factory, ServiceLifetime lifetime);
    public virtual ServiceCollectionMap TryAddSingleton(TService implementation);
    public virtual ServiceCollectionMap TryAddSingleton(Type serviceType, object implementation);
    public virtual ServiceCollectionMap TryAddTransientEnumerable();
    public virtual ServiceCollectionMap TryAddScopedEnumerable();
    public virtual ServiceCollectionMap TryAddSingletonEnumerable();
    public virtual ServiceCollectionMap TryAddTransientEnumerable(Type serviceType, Type implementationType);
    public virtual ServiceCollectionMap TryAddScopedEnumerable(Type serviceType, Type implementationType);
    public virtual ServiceCollectionMap TryAddSingletonEnumerable(Type serviceType, Type implementationType);
    public virtual ServiceCollectionMap TryAddEnumerable(Type serviceType, Type implementationType, ServiceLifetime lifetime);
    public virtual ServiceCollectionMap TryAddTransientEnumerable(Func`2<IServiceProvider, TImplementation> factory);
    public virtual ServiceCollectionMap TryAddScopedEnumerable(Func`2<IServiceProvider, TImplementation> factory);
    public virtual ServiceCollectionMap TryAddSingletonEnumerable(Func`2<IServiceProvider, TImplementation> factory);
    public virtual ServiceCollectionMap TryAddEnumerable(Type serviceType, Type implementationType, Func`2<IServiceProvider, object> factory, ServiceLifetime lifetime);
    public virtual ServiceCollectionMap TryAddSingletonEnumerable(TService implementation);
    public virtual ServiceCollectionMap TryAddSingletonEnumerable(Type serviceType, object implementation);
    private static Type TryGetImplementationType(ServiceDescriptor descriptor);
    private sealed virtual override IInternalServiceCollectionMap Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Infrastructure.IInternalServiceCollectionMap>.get_Instance();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Infrastructure.TypeExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string ShortDisplayName(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.EntityFrameworkCore.Infrastructure.Uniquifier : object {
    public static string Uniquify(string currentIdentifier, IReadOnlyDictionary`2<string, T> otherIdentifiers, int maxLength);
    public static string Uniquify(string currentIdentifier, IReadOnlyDictionary`2<TKey, TValue> otherIdentifiers, Func`2<string, TKey> keySelector, int maxLength);
    public static string Truncate(string identifier, int maxLength, Nullable`1<int> uniquifier);
    private static int GetLength(Nullable`1<int> number);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Internal.DbContextDependencies : object {
    [CompilerGeneratedAttribute]
private IDbSetSource <SetSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityFinderFactory <EntityFinderFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IAsyncQueryProvider <QueryProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private IStateManager <StateManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IChangeDetector <ChangeDetector>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityGraphAttacher <EntityGraphAttacher>k__BackingField;
    [CompilerGeneratedAttribute]
private IExceptionDetector <ExceptionDetector>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Update> <UpdateLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Infrastructure> <InfrastructureLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IDbSetSource SetSource { get; public set; }
    public IEntityFinderFactory EntityFinderFactory { get; public set; }
    public IAsyncQueryProvider QueryProvider { get; public set; }
    public IStateManager StateManager { get; public set; }
    public IChangeDetector ChangeDetector { get; public set; }
    public IEntityGraphAttacher EntityGraphAttacher { get; public set; }
    public IExceptionDetector ExceptionDetector { get; public set; }
    public IDiagnosticsLogger`1<Update> UpdateLogger { get; public set; }
    public IDiagnosticsLogger`1<Infrastructure> InfrastructureLogger { get; public set; }
    public DbContextDependencies(ICurrentDbContext currentContext, IChangeDetector changeDetector, IDbSetSource setSource, IEntityFinderSource entityFinderSource, IEntityGraphAttacher entityGraphAttacher, IAsyncQueryProvider queryProvider, IStateManager stateManager, IExceptionDetector exceptionDetector, IDiagnosticsLogger`1<Update> updateLogger, IDiagnosticsLogger`1<Infrastructure> infrastructureLogger);
    [CompilerGeneratedAttribute]
private DbContextDependencies(DbContextDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public sealed virtual IDbSetSource get_SetSource();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SetSource(IDbSetSource value);
    [CompilerGeneratedAttribute]
public sealed virtual IEntityFinderFactory get_EntityFinderFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_EntityFinderFactory(IEntityFinderFactory value);
    [CompilerGeneratedAttribute]
public sealed virtual IAsyncQueryProvider get_QueryProvider();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_QueryProvider(IAsyncQueryProvider value);
    [CompilerGeneratedAttribute]
public sealed virtual IStateManager get_StateManager();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_StateManager(IStateManager value);
    [CompilerGeneratedAttribute]
public sealed virtual IChangeDetector get_ChangeDetector();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ChangeDetector(IChangeDetector value);
    [CompilerGeneratedAttribute]
public sealed virtual IEntityGraphAttacher get_EntityGraphAttacher();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_EntityGraphAttacher(IEntityGraphAttacher value);
    [CompilerGeneratedAttribute]
public sealed virtual IExceptionDetector get_ExceptionDetector();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ExceptionDetector(IExceptionDetector value);
    [CompilerGeneratedAttribute]
public sealed virtual IDiagnosticsLogger`1<Update> get_UpdateLogger();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UpdateLogger(IDiagnosticsLogger`1<Update> value);
    [CompilerGeneratedAttribute]
public sealed virtual IDiagnosticsLogger`1<Infrastructure> get_InfrastructureLogger();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_InfrastructureLogger(IDiagnosticsLogger`1<Infrastructure> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(DbContextDependencies left, DbContextDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(DbContextDependencies left, DbContextDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(DbContextDependencies other);
    [CompilerGeneratedAttribute]
public DbContextDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Internal.DbContextDependenciesExtensions : object {
    [ExtensionAttribute]
public static IDbContextDependencies GetDependencies(IDbContextDependencies context);
    [ExtensionAttribute]
public static IDbContextDependencies GetDependencies(ICurrentDbContext currentContext);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Internal.DbContextExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void ConfigureConventions(DbContext context, ModelConfigurationBuilder configurationBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Internal.DbContextFactory`1 : object {
    private IServiceProvider _serviceProvider;
    private DbContextOptions`1<TContext> _options;
    private Func`3<IServiceProvider, DbContextOptions`1<TContext>, TContext> _factory;
    public DbContextFactory`1(IServiceProvider serviceProvider, DbContextOptions`1<TContext> options, IDbContextFactorySource`1<TContext> factorySource);
    public virtual TContext CreateDbContext();
    public virtual Task`1<TContext> CreateDbContextAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Internal.DbContextFactorySource`1 : object {
    [CompilerGeneratedAttribute]
private Func`3<IServiceProvider, DbContextOptions`1<TContext>, TContext> <Factory>k__BackingField;
    public Func`3<IServiceProvider, DbContextOptions`1<TContext>, TContext> Factory { get; }
    [CompilerGeneratedAttribute]
public virtual Func`3<IServiceProvider, DbContextOptions`1<TContext>, TContext> get_Factory();
    private static Func`3<IServiceProvider, DbContextOptions`1<TContext>, TContext> CreateActivator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Internal.DbContextLease : ValueType {
    private IDbContextPool _contextPool;
    [CompilerGeneratedAttribute]
private bool <IsStandalone>k__BackingField;
    [CompilerGeneratedAttribute]
private static DbContextLease <InactiveLease>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbContextPoolable <Context>k__BackingField;
    public bool IsStandalone { get; }
    public static DbContextLease InactiveLease { get; }
    public IDbContextPoolable Context { get; private set; }
    public bool IsActive { get; }
    public DbContextLease(IDbContextPool contextPool, bool standalone);
    private static DbContextLease();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public bool get_IsStandalone();
    [CompilerGeneratedAttribute]
public static DbContextLease get_InactiveLease();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public IDbContextPoolable get_Context();
    [CompilerGeneratedAttribute]
private void set_Context(IDbContextPoolable value);
    public bool get_IsActive();
    public void ContextDisposed();
    public ValueTask ContextDisposedAsync();
    public void Release();
    public ValueTask ReleaseAsync();
    private bool Release(IDbContextPool& pool, IDbContextPoolable& context);
}
public class Microsoft.EntityFrameworkCore.Internal.DbContextPool`1 : object {
    public static int DefaultPoolSize;
    private ConcurrentQueue`1<IDbContextPoolable> _pool;
    private Func`1<DbContext> _activator;
    private int _maxSize;
    private int _count;
    [NullableContextAttribute("1")]
public DbContextPool`1(DbContextOptions`1<TContext> options);
    private static Func`1<DbContext> CreateActivator(DbContextOptions`1<TContext> options);
    [NullableContextAttribute("1")]
public virtual IDbContextPoolable Rent();
    [NullableContextAttribute("1")]
public virtual void Return(IDbContextPoolable context);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Internal.DbContextPool`1/<ReturnAsync>d__9")]
public virtual ValueTask ReturnAsync(IDbContextPoolable context, CancellationToken cancellationToken);
    private void PooledReturn(IDbContextPoolable context);
    public virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Internal.DbContextPool`1/<DisposeAsync>d__12")]
public virtual ValueTask DisposeAsync();
}
public class Microsoft.EntityFrameworkCore.Internal.DbContextPoolConfigurationSnapshot : object {
    [CompilerGeneratedAttribute]
private bool <HasDatabaseConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasStateManagerConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasChangeTrackerConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasChangeDetectorConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoDetectChangesEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LazyLoadingEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private CascadeTiming <CascadeDeleteTiming>k__BackingField;
    [CompilerGeneratedAttribute]
private CascadeTiming <DeleteOrphansTiming>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<QueryTrackingBehavior> <QueryTrackingBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private AutoTransactionBehavior <AutoTransactionBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AutoSavepointsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<SavingChangesEventArgs> <SavingChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<SavedChangesEventArgs> <SavedChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<SaveChangesFailedEventArgs> <SaveChangesFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EntityTrackingEventArgs> <Tracking>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EntityTrackedEventArgs> <Tracked>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EntityStateChangingEventArgs> <StateChanging>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<EntityStateChangedEventArgs> <StateChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<DetectChangesEventArgs> <DetectingAllChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<DetectedChangesEventArgs> <DetectedAllChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<DetectEntityChangesEventArgs> <DetectingEntityChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private EventHandler`1<DetectedEntityChangesEventArgs> <DetectedEntityChanges>k__BackingField;
    public bool HasDatabaseConfiguration { get; }
    public bool HasStateManagerConfiguration { get; }
    public bool HasChangeTrackerConfiguration { get; }
    public bool HasChangeDetectorConfiguration { get; }
    public bool AutoDetectChangesEnabled { get; }
    public bool LazyLoadingEnabled { get; }
    public CascadeTiming CascadeDeleteTiming { get; }
    public CascadeTiming DeleteOrphansTiming { get; }
    public Nullable`1<QueryTrackingBehavior> QueryTrackingBehavior { get; }
    public AutoTransactionBehavior AutoTransactionBehavior { get; }
    public bool AutoSavepointsEnabled { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public EventHandler`1<SavingChangesEventArgs> SavingChanges { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public EventHandler`1<SavedChangesEventArgs> SavedChanges { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public EventHandler`1<SaveChangesFailedEventArgs> SaveChangesFailed { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public EventHandler`1<EntityTrackingEventArgs> Tracking { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public EventHandler`1<EntityTrackedEventArgs> Tracked { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public EventHandler`1<EntityStateChangingEventArgs> StateChanging { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public EventHandler`1<EntityStateChangedEventArgs> StateChanged { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public EventHandler`1<DetectChangesEventArgs> DetectingAllChanges { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public EventHandler`1<DetectedChangesEventArgs> DetectedAllChanges { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public EventHandler`1<DetectEntityChangesEventArgs> DetectingEntityChanges { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public EventHandler`1<DetectedEntityChangesEventArgs> DetectedEntityChanges { get; }
    public DbContextPoolConfigurationSnapshot(bool hasDatabaseConfiguration, bool hasStateManagerConfiguration, bool hasChangeTrackerConfiguration, bool hasChangeDetectorConfiguration, bool autoDetectChangesEnabled, Nullable`1<QueryTrackingBehavior> queryTrackingBehavior, AutoTransactionBehavior autoTransactionBehavior, bool autoSavepointsEnabled, bool lazyLoadingEnabled, CascadeTiming cascadeDeleteTiming, CascadeTiming deleteOrphansTiming, EventHandler`1<SavingChangesEventArgs> savingChanges, EventHandler`1<SavedChangesEventArgs> savedChanges, EventHandler`1<SaveChangesFailedEventArgs> saveChangesFailed, EventHandler`1<EntityTrackingEventArgs> tracking, EventHandler`1<EntityTrackedEventArgs> tracked, EventHandler`1<EntityStateChangingEventArgs> stateChanging, EventHandler`1<EntityStateChangedEventArgs> stateChanged, EventHandler`1<DetectChangesEventArgs> detectingAllChanges, EventHandler`1<DetectedChangesEventArgs> detectedAllChanges, EventHandler`1<DetectEntityChangesEventArgs> detectingEntityChanges, EventHandler`1<DetectedEntityChangesEventArgs> detectedEntityChanges);
    [CompilerGeneratedAttribute]
public bool get_HasDatabaseConfiguration();
    [CompilerGeneratedAttribute]
public bool get_HasStateManagerConfiguration();
    [CompilerGeneratedAttribute]
public bool get_HasChangeTrackerConfiguration();
    [CompilerGeneratedAttribute]
public bool get_HasChangeDetectorConfiguration();
    [CompilerGeneratedAttribute]
public bool get_AutoDetectChangesEnabled();
    [CompilerGeneratedAttribute]
public bool get_LazyLoadingEnabled();
    [CompilerGeneratedAttribute]
public CascadeTiming get_CascadeDeleteTiming();
    [CompilerGeneratedAttribute]
public CascadeTiming get_DeleteOrphansTiming();
    [CompilerGeneratedAttribute]
public Nullable`1<QueryTrackingBehavior> get_QueryTrackingBehavior();
    [CompilerGeneratedAttribute]
public AutoTransactionBehavior get_AutoTransactionBehavior();
    [CompilerGeneratedAttribute]
public bool get_AutoSavepointsEnabled();
    [CompilerGeneratedAttribute]
public EventHandler`1<SavingChangesEventArgs> get_SavingChanges();
    [CompilerGeneratedAttribute]
public EventHandler`1<SavedChangesEventArgs> get_SavedChanges();
    [CompilerGeneratedAttribute]
public EventHandler`1<SaveChangesFailedEventArgs> get_SaveChangesFailed();
    [CompilerGeneratedAttribute]
public EventHandler`1<EntityTrackingEventArgs> get_Tracking();
    [CompilerGeneratedAttribute]
public EventHandler`1<EntityTrackedEventArgs> get_Tracked();
    [CompilerGeneratedAttribute]
public EventHandler`1<EntityStateChangingEventArgs> get_StateChanging();
    [CompilerGeneratedAttribute]
public EventHandler`1<EntityStateChangedEventArgs> get_StateChanged();
    [CompilerGeneratedAttribute]
public EventHandler`1<DetectChangesEventArgs> get_DetectingAllChanges();
    [CompilerGeneratedAttribute]
public EventHandler`1<DetectedChangesEventArgs> get_DetectedAllChanges();
    [CompilerGeneratedAttribute]
public EventHandler`1<DetectEntityChangesEventArgs> get_DetectingEntityChanges();
    [CompilerGeneratedAttribute]
public EventHandler`1<DetectedEntityChangesEventArgs> get_DetectedEntityChanges();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Internal.DbContextServices : object {
    private IServiceProvider _scopedProvider;
    private DbContextOptions _contextOptions;
    private ICurrentDbContext _currentContext;
    private IModel _model;
    private IModel _designTimeModel;
    private bool _inOnModelCreating;
    public ICurrentDbContext CurrentContext { get; }
    public IModel Model { get; }
    public IModel DesignTimeModel { get; }
    [NullableAttribute("2")]
private CoreOptionsExtension CoreOptions { get; }
    public DbContextOptions ContextOptions { get; }
    public IServiceProvider InternalServiceProvider { get; }
    public virtual IDbContextServices Initialize(IServiceProvider scopedProvider, DbContextOptions contextOptions, DbContext context);
    private static string BuildDatabaseNamesString(IEnumerable`1<IDatabaseProvider> available);
    private IModel CreateModel(bool designTime);
    public virtual ICurrentDbContext get_CurrentContext();
    public virtual IModel get_Model();
    public virtual IModel get_DesignTimeModel();
    private CoreOptionsExtension get_CoreOptions();
    public virtual DbContextOptions get_ContextOptions();
    public virtual IServiceProvider get_InternalServiceProvider();
}
public class Microsoft.EntityFrameworkCore.Internal.DbSetInitializer : object {
    private IDbSetFinder _setFinder;
    private IDbSetSource _setSource;
    [NullableContextAttribute("1")]
public DbSetInitializer(IDbSetFinder setFinder, IDbSetSource setSource);
    [NullableContextAttribute("1")]
public virtual void InitializeSets(DbContext context);
}
public class Microsoft.EntityFrameworkCore.Internal.DbSetSource : object {
    private static MethodInfo GenericCreateSet;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<ValueTuple`2<Type, string>, Func`3<DbContext, string, object>> _cache;
    private static DbSetSource();
    [NullableContextAttribute("1")]
public virtual object Create(DbContext context, Type type);
    [NullableContextAttribute("1")]
public virtual object Create(DbContext context, string name, Type type);
    private object CreateCore(DbContext context, Type type, string name, MethodInfo createMethod);
    [UsedImplicitlyAttribute]
private static Func`3<DbContext, string, object> CreateSetFactory();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Internal.EntityFinder`1 : object {
    private IStateManager _stateManager;
    private IDbSetSource _setSource;
    private IDbSetCache _setCache;
    private IEntityType _entityType;
    private IQueryable`1<TEntity> _queryRoot;
    private static MethodInfo SelectMethod;
    private static MethodInfo SelectManyMethod;
    public EntityFinder`1(IStateManager stateManager, IDbSetSource setSource, IDbSetCache setCache, IEntityType entityType);
    private static EntityFinder`1();
    [NullableContextAttribute("2")]
public virtual TEntity Find(Object[] keyValues);
    private sealed virtual override object Microsoft.EntityFrameworkCore.Internal.IEntityFinder.Find(Object[] keyValues);
    [NullableContextAttribute("2")]
public virtual ValueTask`1<TEntity> FindAsync(Object[] keyValues, CancellationToken cancellationToken);
    private sealed virtual override ValueTask`1<object> Microsoft.EntityFrameworkCore.Internal.IEntityFinder.FindAsync(Object[] keyValues, CancellationToken cancellationToken);
    public virtual void Load(INavigation navigation, InternalEntityEntry entry);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Internal.EntityFinder`1/<LoadAsync>d__11")]
public virtual Task LoadAsync(INavigation navigation, InternalEntityEntry entry, CancellationToken cancellationToken);
    public virtual IQueryable`1<TEntity> Query(INavigation navigation, InternalEntityEntry entry);
    public virtual Object[] GetDatabaseValues(InternalEntityEntry entry);
    public virtual Task`1<Object[]> GetDatabaseValuesAsync(InternalEntityEntry entry, CancellationToken cancellationToken);
    private IQueryable`1<Object[]> GetDatabaseValuesQuery(InternalEntityEntry entry);
    private IQueryable`1<TEntity> Query(INavigation navigation, Object[] keyValues);
    private sealed virtual override IQueryable Microsoft.EntityFrameworkCore.Internal.IEntityFinder.Query(INavigation navigation, InternalEntityEntry entry);
    private static Object[] GetLoadValues(INavigation navigation, InternalEntityEntry entry);
    private static IReadOnlyList`1<IProperty> GetLoadProperties(INavigation navigation);
    private ValueTuple`3<IKey, Object[], CancellationToken> ValidateKeyPropertiesAndExtractCancellationToken(Object[] keyValues, bool async, CancellationToken cancellationToken);
    private TEntity FindTracked(IKey key, Object[] keyValues);
    private static Expression`1<Func`2<TEntity, bool>> BuildLambda(IReadOnlyList`1<IProperty> keyProperties, ValueBuffer keyValues);
    private static Expression`1<Func`2<object, bool>> BuildObjectLambda(IReadOnlyList`1<IProperty> keyProperties, ValueBuffer keyValues);
    private IQueryable BuildQueryRoot(IEntityType entityType);
    private IQueryable BuildQueryRoot(IEntityType ownerEntityType, IEntityType entityType, string navigationName);
    private static IQueryable`1<TResult> Select(IQueryable`1<TSource> source, string propertyName);
    private static IQueryable`1<TResult> SelectMany(IQueryable`1<TSource> source, string propertyName);
    private static Expression`1<Func`2<object, Object[]>> BuildProjection(IEntityType entityType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Internal.EntityFinderCollectionLoaderAdapter : object {
    private IEntityFinder _entityFinder;
    private INavigation _navigation;
    public EntityFinderCollectionLoaderAdapter(IEntityFinder entityFinder, INavigation navigation);
    public virtual void Load(InternalEntityEntry entry);
    public virtual Task LoadAsync(InternalEntityEntry entry, CancellationToken cancellationToken);
    public virtual IQueryable Query(InternalEntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.Internal.EntityFinderFactory : object {
    private IEntityFinderSource _entityFinderSource;
    private IStateManager _stateManager;
    private IDbSetSource _setSource;
    private IDbSetCache _setCache;
    [NullableContextAttribute("1")]
public EntityFinderFactory(IEntityFinderSource entityFinderSource, IStateManager stateManager, IDbSetSource setSource, IDbSetCache setCache);
    [NullableContextAttribute("1")]
public virtual IEntityFinder Create(IEntityType type);
}
public class Microsoft.EntityFrameworkCore.Internal.EntityFinderSource : object {
    private ConcurrentDictionary`2<Type, Func`5<IStateManager, IDbSetSource, IDbSetCache, IEntityType, IEntityFinder>> _cache;
    [NullableContextAttribute("1")]
public virtual IEntityFinder Create(IStateManager stateManager, IDbSetSource setSource, IDbSetCache setCache, IEntityType type);
    [UsedImplicitlyAttribute]
private static Func`5<IStateManager, IDbSetSource, IDbSetCache, IEntityType, IEntityFinder> CreateConstructor();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Internal.ExpressionExtensions : object {
    [ExtensionAttribute]
public static Expression MakeHasDefaultValue(Expression currentValueExpression, IReadOnlyPropertyBase propertyBase);
    [ExtensionAttribute]
public static IReadOnlyList`1<TMemberInfo> MatchMemberAccessList(LambdaExpression lambdaExpression, Func`3<Expression, Expression, TMemberInfo> memberMatcher);
    [ExtensionAttribute]
public static TMemberInfo MatchSimpleMemberAccess(Expression parameterExpression, Expression memberAccessExpression);
    [ExtensionAttribute]
private static IReadOnlyList`1<TMemberInfo> MatchMemberAccess(Expression parameterExpression, Expression memberAccessExpression);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Expression RemoveTypeAs(Expression expression);
    [ExtensionAttribute]
public static bool IsLogicalOperation(Expression expression);
    [ExtensionAttribute]
public static LambdaExpression GetLambdaOrNull(Expression expression);
    [ExtensionAttribute]
public static bool IsLogicalNot(UnaryExpression sqlUnaryExpression);
    private static Expression RemoveConvert(Expression expression);
    public static Expression BuildPredicate(IReadOnlyList`1<IReadOnlyProperty> keyProperties, ValueBuffer keyValues, ParameterExpression entityParameter);
    [CompilerGeneratedAttribute]
internal static Expression <BuildPredicate>g__GenerateEqualExpression|9_0(Expression entityParameterExpression, Expression keyValuesConstantExpression, IReadOnlyProperty property, int i);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Internal.ICollectionLoader {
    public abstract virtual void Load(InternalEntityEntry entry);
    public abstract virtual Task LoadAsync(InternalEntityEntry entry, CancellationToken cancellationToken);
    public abstract virtual IQueryable Query(InternalEntityEntry entry);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Internal.ICollectionLoader`1 {
    public abstract virtual IQueryable`1<TEntity> Query(InternalEntityEntry entry);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies {
    public IDbSetSource SetSource { get; }
    public IEntityFinderFactory EntityFinderFactory { get; }
    public IAsyncQueryProvider QueryProvider { get; }
    public IStateManager StateManager { get; }
    public IChangeDetector ChangeDetector { get; }
    public IEntityGraphAttacher EntityGraphAttacher { get; }
    public IExceptionDetector ExceptionDetector { get; }
    public IDiagnosticsLogger`1<Update> UpdateLogger { get; }
    public IDiagnosticsLogger`1<Infrastructure> InfrastructureLogger { get; }
    public abstract virtual IDbSetSource get_SetSource();
    public abstract virtual IEntityFinderFactory get_EntityFinderFactory();
    public abstract virtual IAsyncQueryProvider get_QueryProvider();
    public abstract virtual IStateManager get_StateManager();
    public abstract virtual IChangeDetector get_ChangeDetector();
    public abstract virtual IEntityGraphAttacher get_EntityGraphAttacher();
    public abstract virtual IExceptionDetector get_ExceptionDetector();
    public abstract virtual IDiagnosticsLogger`1<Update> get_UpdateLogger();
    public abstract virtual IDiagnosticsLogger`1<Infrastructure> get_InfrastructureLogger();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Internal.IDbContextFactorySource`1 {
    public Func`3<IServiceProvider, DbContextOptions`1<TContext>, TContext> Factory { get; }
    public abstract virtual Func`3<IServiceProvider, DbContextOptions`1<TContext>, TContext> get_Factory();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Internal.IDbContextPool {
    public abstract virtual IDbContextPoolable Rent();
    public abstract virtual void Return(IDbContextPoolable context);
    public abstract virtual ValueTask ReturnAsync(IDbContextPoolable context, CancellationToken cancellationToken);
}
public interface Microsoft.EntityFrameworkCore.Internal.IDbContextPool`1 {
}
public interface Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable {
    public abstract virtual void SetLease(DbContextLease lease);
    [NullableContextAttribute("1")]
public abstract virtual Task SetLeaseAsync(DbContextLease lease, CancellationToken cancellationToken);
    public abstract virtual void ClearLease();
    public abstract virtual void SnapshotConfiguration();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Internal.IDbContextServices {
    public ICurrentDbContext CurrentContext { get; }
    public IModel Model { get; }
    public IModel DesignTimeModel { get; }
    public DbContextOptions ContextOptions { get; }
    public IServiceProvider InternalServiceProvider { get; }
    public abstract virtual IDbContextServices Initialize(IServiceProvider scopedProvider, DbContextOptions contextOptions, DbContext context);
    public abstract virtual ICurrentDbContext get_CurrentContext();
    public abstract virtual IModel get_Model();
    public abstract virtual IModel get_DesignTimeModel();
    public abstract virtual DbContextOptions get_ContextOptions();
    public abstract virtual IServiceProvider get_InternalServiceProvider();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Internal.IDbSetCache {
    public abstract virtual object GetOrAddSet(IDbSetSource source, Type type);
    public abstract virtual object GetOrAddSet(IDbSetSource source, string entityTypeName, Type type);
    public abstract virtual IEnumerable`1<object> GetSets();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Internal.IDbSetInitializer {
    public abstract virtual void InitializeSets(DbContext context);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Internal.IDbSetSource {
    public abstract virtual object Create(DbContext context, Type type);
    public abstract virtual object Create(DbContext context, string name, Type type);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Internal.IEntityFinder {
    [NullableContextAttribute("2")]
public abstract virtual object Find(Object[] keyValues);
    [NullableContextAttribute("2")]
public abstract virtual ValueTask`1<object> FindAsync(Object[] keyValues, CancellationToken cancellationToken);
    public abstract virtual void Load(INavigation navigation, InternalEntityEntry entry);
    public abstract virtual Task LoadAsync(INavigation navigation, InternalEntityEntry entry, CancellationToken cancellationToken);
    public abstract virtual IQueryable Query(INavigation navigation, InternalEntityEntry entry);
    public abstract virtual Object[] GetDatabaseValues(InternalEntityEntry entry);
    public abstract virtual Task`1<Object[]> GetDatabaseValuesAsync(InternalEntityEntry entry, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Internal.IEntityFinder`1 {
    [NullableContextAttribute("2")]
public abstract virtual TEntity Find(Object[] keyValues);
    [NullableContextAttribute("2")]
public abstract virtual ValueTask`1<TEntity> FindAsync(Object[] keyValues, CancellationToken cancellationToken);
    public abstract virtual IQueryable`1<TEntity> Query(INavigation navigation, InternalEntityEntry entry);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Internal.IEntityFinderFactory {
    public abstract virtual IEntityFinder Create(IEntityType type);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Internal.IEntityFinderSource {
    public abstract virtual IEntityFinder Create(IStateManager stateManager, IDbSetSource setSource, IDbSetCache setCache, IEntityType type);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1 : DbSet`1<TEntity> {
    private DbContext _context;
    private string _entityTypeName;
    private IEntityType _entityType;
    private EntityQueryable`1<TEntity> _entityQueryable;
    private LocalView`1<TEntity> _localView;
    public IEntityType EntityType { get; }
    private EntityQueryable`1<TEntity> EntityQueryable { get; }
    public LocalView`1<TEntity> Local { get; }
    private IEntityFinder`1<TEntity> Finder { get; }
    private Type System.Linq.IQueryable.ElementType { get; }
    private Expression System.Linq.IQueryable.Expression { get; }
    private IQueryProvider System.Linq.IQueryable.Provider { get; }
    private IServiceProvider Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.Instance { get; }
    public InternalDbSet`1(DbContext context, string entityTypeName);
    public virtual IEntityType get_EntityType();
    private void CheckState();
    private void CheckKey();
    private EntityQueryable`1<TEntity> get_EntityQueryable();
    private EntityQueryable`1<TEntity> CreateEntityQueryable();
    public virtual LocalView`1<TEntity> get_Local();
    [NullableContextAttribute("2")]
public virtual TEntity Find(Object[] keyValues);
    [NullableContextAttribute("2")]
public virtual ValueTask`1<TEntity> FindAsync(Object[] keyValues);
    [NullableContextAttribute("2")]
public virtual ValueTask`1<TEntity> FindAsync(Object[] keyValues, CancellationToken cancellationToken);
    public virtual EntityEntry`1<TEntity> Add(TEntity entity);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1/<AddAsync>d__19")]
public virtual ValueTask`1<EntityEntry`1<TEntity>> AddAsync(TEntity entity, CancellationToken cancellationToken);
    public virtual EntityEntry`1<TEntity> Attach(TEntity entity);
    public virtual EntityEntry`1<TEntity> Remove(TEntity entity);
    public virtual EntityEntry`1<TEntity> Update(TEntity entity);
    public virtual void AddRange(TEntity[] entities);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1/<AddRangeAsync>d__24")]
public virtual Task AddRangeAsync(TEntity[] entities);
    public virtual void AttachRange(TEntity[] entities);
    public virtual void RemoveRange(TEntity[] entities);
    public virtual void UpdateRange(TEntity[] entities);
    public virtual void AddRange(IEnumerable`1<TEntity> entities);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Internal.InternalDbSet`1/<AddRangeAsync>d__29")]
public virtual Task AddRangeAsync(IEnumerable`1<TEntity> entities, CancellationToken cancellationToken);
    public virtual void AttachRange(IEnumerable`1<TEntity> entities);
    public virtual void RemoveRange(IEnumerable`1<TEntity> entities);
    public virtual void UpdateRange(IEnumerable`1<TEntity> entities);
    public virtual EntityEntry`1<TEntity> Entry(TEntity entity);
    private IEntityFinder`1<TEntity> get_Finder();
    private sealed virtual override IEnumerator`1<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IAsyncEnumerator`1<TEntity> System.Collections.Generic.IAsyncEnumerable<TEntity>.GetAsyncEnumerator(CancellationToken cancellationToken);
    private sealed virtual override Type System.Linq.IQueryable.get_ElementType();
    private sealed virtual override Expression System.Linq.IQueryable.get_Expression();
    private sealed virtual override IQueryProvider System.Linq.IQueryable.get_Provider();
    private sealed virtual override IServiceProvider Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<System.IServiceProvider>.get_Instance();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetState();
    private sealed virtual override Task Microsoft.EntityFrameworkCore.Infrastructure.IResettableService.ResetStateAsync(CancellationToken cancellationToken);
    private EntityEntry`1<TEntity> EntryWithoutDetectChanges(TEntity entity);
    private void SetEntityStates(IEnumerable`1<TEntity> entities, EntityState entityState);
    private void SetEntityState(InternalEntityEntry entry, EntityState entityState);
    private Task SetEntityStateAsync(InternalEntityEntry entry, EntityState entityState, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Internal.IPatchServiceInjectionSite {
    public abstract virtual void InjectServices(IServiceProvider serviceProvider);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Internal.IRegisteredServices {
    public ISet`1<Type> Services { get; }
    public abstract virtual ISet`1<Type> get_Services();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Internal.IScopedDbContextLease`1 {
    public TContext Context { get; }
    public abstract virtual TContext get_Context();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Internal.ISingletonOptionsInitializer {
    public abstract virtual void EnsureInitialized(IServiceProvider serviceProvider, IDbContextOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.EntityFrameworkCore.Internal.LegacyReferenceEqualityComparer : object {
    [CompilerGeneratedAttribute]
private static LegacyReferenceEqualityComparer <Instance>k__BackingField;
    public static LegacyReferenceEqualityComparer Instance { get; }
    private static LegacyReferenceEqualityComparer();
    [CompilerGeneratedAttribute]
public static LegacyReferenceEqualityComparer get_Instance();
    [NullableContextAttribute("2")]
public bool Equals(object x, object y);
    public int GetHashCode(object obj);
    private sealed virtual override bool System.Collections.Generic.IEqualityComparer<System.Object>.Equals(object x, object y);
    private sealed virtual override int System.Collections.IEqualityComparer.GetHashCode(object obj);
    private sealed virtual override bool System.Collections.IEqualityComparer.Equals(object x, object y);
    private sealed virtual override int System.Collections.Generic.IEqualityComparer<System.Object>.GetHashCode(object obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Internal.ManyToManyLoader`2 : object {
    private ISkipNavigation _skipNavigation;
    public ManyToManyLoader`2(ISkipNavigation skipNavigation);
    public virtual void Load(InternalEntityEntry entry);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Internal.ManyToManyLoader`2/<LoadAsync>d__3")]
public virtual Task LoadAsync(InternalEntityEntry entry, CancellationToken cancellationToken);
    public virtual IQueryable`1<TEntity> Query(InternalEntityEntry entry);
    private Object[] PrepareForLoad(InternalEntityEntry entry);
    private sealed virtual override IQueryable Microsoft.EntityFrameworkCore.Internal.ICollectionLoader.Query(InternalEntityEntry entry);
    private IQueryable`1<TEntity> Query(DbContext context, Object[] keyValues);
    private static Expression`1<Func`2<TEntity, IEnumerable`1<TSourceEntity>>> BuildIncludeLambda(ISkipNavigation skipNavigation, IReadOnlyList`1<IProperty> keyProperties, ValueBuffer keyValues);
    private static Expression`1<Func`2<TSourceEntity, bool>> BuildWhereLambda(IReadOnlyList`1<IProperty> keyProperties, ValueBuffer keyValues);
    private static Expression`1<Func`2<TSourceEntity, IEnumerable`1<TEntity>>> BuildSelectManyLambda(INavigationBase navigation);
}
public class Microsoft.EntityFrameworkCore.Internal.ManyToManyLoaderFactory : object {
    private static MethodInfo GenericCreate;
    private static ManyToManyLoaderFactory();
    [NullableContextAttribute("1")]
public virtual ICollectionLoader Create(ISkipNavigation skipNavigation);
    [UsedImplicitlyAttribute]
private static ICollectionLoader CreateManyToMany(ISkipNavigation skipNavigation);
}
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static class Microsoft.EntityFrameworkCore.Internal.MethodInfoExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool MethodIsClosedFormOf(MethodInfo methodInfo, MethodInfo genericMethod);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.EntityFrameworkCore.Internal.NonCapturingLazyInitializer : object {
    public static TValue EnsureInitialized(TValue& target, TParam param, Func`2<TParam, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TParam1 param1, TParam2 param2, Func`3<TParam1, TParam2, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TParam1 param1, TParam2 param2, TParam3 param3, Func`4<TParam1, TParam2, TParam3, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, Boolean& initialized, TParam param, Func`2<TParam, TValue> valueFactory);
    public static TValue EnsureInitialized(TValue& target, TValue value);
    public static TValue EnsureInitialized(TValue& target, TParam param, Action`1<TParam> valueFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Internal.NullableComparerAdapter`1 : object {
    private IEqualityComparer _comparer;
    private ValueConverter _valueConverter;
    private NullableComparerAdapter`1(IEqualityComparer comparer, ValueConverter valueConverter);
    public static IEqualityComparer`1<TNullableKey> Wrap(IEqualityComparer comparer, ValueConverter valueConverter);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(TNullableKey x, TNullableKey y);
    public sealed virtual int GetHashCode(TNullableKey obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Internal.QueryableExtensions : object {
    internal static MethodInfo LeftJoinMethodInfo;
    private static QueryableExtensions();
    [ExtensionAttribute]
public static IQueryable`1<TResult> LeftJoin(IQueryable`1<TOuter> outer, IEnumerable`1<TInner> inner, Expression`1<Func`2<TOuter, TKey>> outerKeySelector, Expression`1<Func`2<TInner, TKey>> innerKeySelector, Expression`1<Func`3<TOuter, TInner, TResult>> resultSelector);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Internal.RegisteredServices : object {
    [CompilerGeneratedAttribute]
private ISet`1<Type> <Services>k__BackingField;
    public ISet`1<Type> Services { get; }
    public RegisteredServices(IEnumerable`1<Type> services);
    [CompilerGeneratedAttribute]
public virtual ISet`1<Type> get_Services();
}
public class Microsoft.EntityFrameworkCore.Internal.ScopedDbContextLease`1 : object {
    private DbContextLease _lease;
    [NullableAttribute("1")]
public TContext Context { get; }
    [NullableContextAttribute("1")]
public ScopedDbContextLease`1(IDbContextPool`1<TContext> contextPool);
    [NullableContextAttribute("1")]
public sealed virtual TContext get_Context();
    private sealed virtual override void System.IDisposable.Dispose();
    private sealed virtual override ValueTask System.IAsyncDisposable.DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Internal.ServiceProviderCache : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<IDbContextOptions, ValueTuple`2<IServiceProvider, IDictionary`2<string, string>>> _configurations;
    [CompilerGeneratedAttribute]
private static ServiceProviderCache <Instance>k__BackingField;
    public static ServiceProviderCache Instance { get; }
    private static ServiceProviderCache();
    [CompilerGeneratedAttribute]
public static ServiceProviderCache get_Instance();
    public virtual IServiceProvider GetOrAdd(IDbContextOptions options, bool providerRequired);
    private static void ValidateOptions(IDbContextOptions options);
    private static bool ApplyServices(IDbContextOptions options, ServiceCollection services);
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<IServiceProvider, IDictionary`2<string, string>> <GetOrAdd>g__BuildServiceProvider|4_1(IDbContextOptions _, ValueTuple`2<ConcurrentDictionary`2<IDbContextOptions, ValueTuple`2<IServiceProvider, IDictionary`2<string, string>>>, IDbContextOptions> arguments);
}
public class Microsoft.EntityFrameworkCore.Internal.SingletonOptionsInitializer : object {
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _isInitialized;
    private object _lock;
    [NullableContextAttribute("1")]
public virtual void EnsureInitialized(IServiceProvider serviceProvider, IDbContextOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Internal.TypeExtensions : object {
    [ExtensionAttribute]
public static bool IsDefaultValue(Type type, object value);
    [ExtensionAttribute]
public static FieldInfo GetFieldInfo(Type type, string fieldName);
    [ExtensionAttribute]
public static string GenerateParameterName(Type type);
    [ExtensionAttribute]
public static PropertyInfo FindIndexerProperty(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Internal.TypeFullNameComparer : object {
    public static TypeFullNameComparer Instance;
    private static TypeFullNameComparer();
    [NullableContextAttribute("2")]
public sealed virtual int Compare(Type x, Type y);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(Type x, Type y);
    public sealed virtual int GetHashCode(Type obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionCollectionBuilder : object {
    [CompilerGeneratedAttribute]
private IMutableEntityType <LeftEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private IMutableEntityType <RightEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private IMutableSkipNavigation <LeftNavigation>k__BackingField;
    [CompilerGeneratedAttribute]
private IMutableSkipNavigation <RightNavigation>k__BackingField;
    [EntityFrameworkInternalAttribute]
protected IMutableEntityType LeftEntityType { get; }
    [EntityFrameworkInternalAttribute]
protected IMutableEntityType RightEntityType { get; }
    public IMutableSkipNavigation LeftNavigation { get; }
    public IMutableSkipNavigation RightNavigation { get; }
    [EntityFrameworkInternalAttribute]
protected InternalModelBuilder ModelBuilder { get; }
    [EntityFrameworkInternalAttribute]
public CollectionCollectionBuilder(IMutableEntityType leftEntityType, IMutableEntityType rightEntityType, IMutableSkipNavigation leftNavigation, IMutableSkipNavigation rightNavigation);
    [CompilerGeneratedAttribute]
protected virtual IMutableEntityType get_LeftEntityType();
    [CompilerGeneratedAttribute]
protected virtual IMutableEntityType get_RightEntityType();
    [CompilerGeneratedAttribute]
public virtual IMutableSkipNavigation get_LeftNavigation();
    [CompilerGeneratedAttribute]
public virtual IMutableSkipNavigation get_RightNavigation();
    protected virtual InternalModelBuilder get_ModelBuilder();
    public virtual EntityTypeBuilder UsingEntity(Type joinEntityType);
    public virtual EntityTypeBuilder UsingEntity(string joinEntityName);
    public virtual EntityTypeBuilder UsingEntity(string joinEntityName, Type joinEntityType);
    public virtual EntityTypeBuilder UsingEntity(Action`1<EntityTypeBuilder> configureJoinEntityType);
    public virtual EntityTypeBuilder UsingEntity(Type joinEntityType, Action`1<EntityTypeBuilder> configureJoinEntityType);
    public virtual EntityTypeBuilder UsingEntity(string joinEntityName, Action`1<EntityTypeBuilder> configureJoinEntityType);
    public virtual EntityTypeBuilder UsingEntity(string joinEntityName, Type joinEntityType, Action`1<EntityTypeBuilder> configureJoinEntityType);
    public virtual EntityTypeBuilder UsingEntity(Func`2<EntityTypeBuilder, ReferenceCollectionBuilder> configureRight, Func`2<EntityTypeBuilder, ReferenceCollectionBuilder> configureLeft);
    public virtual EntityTypeBuilder UsingEntity(Type joinEntityType, Func`2<EntityTypeBuilder, ReferenceCollectionBuilder> configureRight, Func`2<EntityTypeBuilder, ReferenceCollectionBuilder> configureLeft);
    public virtual EntityTypeBuilder UsingEntity(string joinEntityName, Func`2<EntityTypeBuilder, ReferenceCollectionBuilder> configureRight, Func`2<EntityTypeBuilder, ReferenceCollectionBuilder> configureLeft);
    public virtual EntityTypeBuilder UsingEntity(string joinEntityName, Type joinEntityType, Func`2<EntityTypeBuilder, ReferenceCollectionBuilder> configureRight, Func`2<EntityTypeBuilder, ReferenceCollectionBuilder> configureLeft);
    public virtual EntityTypeBuilder UsingEntity(Func`2<EntityTypeBuilder, ReferenceCollectionBuilder> configureRight, Func`2<EntityTypeBuilder, ReferenceCollectionBuilder> configureLeft, Action`1<EntityTypeBuilder> configureJoinEntityType);
    public virtual EntityTypeBuilder UsingEntity(Type joinEntityType, Func`2<EntityTypeBuilder, ReferenceCollectionBuilder> configureRight, Func`2<EntityTypeBuilder, ReferenceCollectionBuilder> configureLeft, Action`1<EntityTypeBuilder> configureJoinEntityType);
    public virtual EntityTypeBuilder UsingEntity(string joinEntityName, Func`2<EntityTypeBuilder, ReferenceCollectionBuilder> configureRight, Func`2<EntityTypeBuilder, ReferenceCollectionBuilder> configureLeft, Action`1<EntityTypeBuilder> configureJoinEntityType);
    public virtual EntityTypeBuilder UsingEntity(string joinEntityName, Type joinEntityType, Func`2<EntityTypeBuilder, ReferenceCollectionBuilder> configureRight, Func`2<EntityTypeBuilder, ReferenceCollectionBuilder> configureLeft, Action`1<EntityTypeBuilder> configureJoinEntityType);
    private EntityTypeBuilder Using(string joinEntityName, Type joinEntityType, Func`2<EntityTypeBuilder, ReferenceCollectionBuilder> configureRight, Func`2<EntityTypeBuilder, ReferenceCollectionBuilder> configureLeft);
    [NullableContextAttribute("2")]
[EntityFrameworkInternalAttribute]
protected virtual IMutableEntityType UsingEntity(string joinEntityName, Type joinEntityType, Func`2<IMutableEntityType, IMutableForeignKey> configureRight, Func`2<IMutableEntityType, IMutableForeignKey> configureLeft);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
internal static ForeignKey <UsingEntity>g__GetOrCreateSkipNavigationForeignKey|31_0(SkipNavigation skipNavigation, EntityType joinEntityType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionCollectionBuilder`2 : CollectionCollectionBuilder {
    [EntityFrameworkInternalAttribute]
public CollectionCollectionBuilder`2(IMutableEntityType leftEntityType, IMutableEntityType rightEntityType, IMutableSkipNavigation leftNavigation, IMutableSkipNavigation rightNavigation);
    public virtual EntityTypeBuilder`1<TJoinEntity> UsingEntity();
    public virtual EntityTypeBuilder`1<TJoinEntity> UsingEntity(string joinEntityName);
    public virtual EntityTypeBuilder`1<TRightEntity> UsingEntity(Action`1<EntityTypeBuilder> configureJoinEntityType);
    public virtual EntityTypeBuilder`1<TRightEntity> UsingEntity(Type joinEntityType, Action`1<EntityTypeBuilder> configureJoinEntityType);
    public virtual EntityTypeBuilder`1<TRightEntity> UsingEntity(string joinEntityName, Action`1<EntityTypeBuilder> configureJoinEntityType);
    public virtual EntityTypeBuilder`1<TRightEntity> UsingEntity(string joinEntityName, Type joinEntityType, Action`1<EntityTypeBuilder> configureJoinEntityType);
    public virtual EntityTypeBuilder`1<TRightEntity> UsingEntity(Action`1<EntityTypeBuilder`1<TJoinEntity>> configureJoinEntityType);
    public virtual EntityTypeBuilder`1<TRightEntity> UsingEntity(string joinEntityName, Action`1<EntityTypeBuilder`1<TJoinEntity>> configureJoinEntityType);
    public virtual EntityTypeBuilder`1<TJoinEntity> UsingEntity(Func`2<EntityTypeBuilder`1<TJoinEntity>, ReferenceCollectionBuilder`2<TLeftEntity, TJoinEntity>> configureRight, Func`2<EntityTypeBuilder`1<TJoinEntity>, ReferenceCollectionBuilder`2<TRightEntity, TJoinEntity>> configureLeft);
    public virtual EntityTypeBuilder`1<TJoinEntity> UsingEntity(string joinEntityName, Func`2<EntityTypeBuilder`1<TJoinEntity>, ReferenceCollectionBuilder`2<TLeftEntity, TJoinEntity>> configureRight, Func`2<EntityTypeBuilder`1<TJoinEntity>, ReferenceCollectionBuilder`2<TRightEntity, TJoinEntity>> configureLeft);
    public virtual EntityTypeBuilder`1<TRightEntity> UsingEntity(Func`2<EntityTypeBuilder, ReferenceCollectionBuilder> configureRight, Func`2<EntityTypeBuilder, ReferenceCollectionBuilder> configureLeft, Action`1<EntityTypeBuilder> configureJoinEntityType);
    public virtual EntityTypeBuilder`1<TRightEntity> UsingEntity(Type joinEntityType, Func`2<EntityTypeBuilder, ReferenceCollectionBuilder> configureRight, Func`2<EntityTypeBuilder, ReferenceCollectionBuilder> configureLeft, Action`1<EntityTypeBuilder> configureJoinEntityType);
    public virtual EntityTypeBuilder`1<TRightEntity> UsingEntity(string joinEntityName, Func`2<EntityTypeBuilder, ReferenceCollectionBuilder> configureRight, Func`2<EntityTypeBuilder, ReferenceCollectionBuilder> configureLeft, Action`1<EntityTypeBuilder> configureJoinEntityType);
    public virtual EntityTypeBuilder`1<TRightEntity> UsingEntity(string joinEntityName, Type joinEntityType, Func`2<EntityTypeBuilder, ReferenceCollectionBuilder> configureRight, Func`2<EntityTypeBuilder, ReferenceCollectionBuilder> configureLeft, Action`1<EntityTypeBuilder> configureJoinEntityType);
    public virtual EntityTypeBuilder`1<TRightEntity> UsingEntity(Func`2<EntityTypeBuilder`1<TJoinEntity>, ReferenceCollectionBuilder`2<TLeftEntity, TJoinEntity>> configureRight, Func`2<EntityTypeBuilder`1<TJoinEntity>, ReferenceCollectionBuilder`2<TRightEntity, TJoinEntity>> configureLeft, Action`1<EntityTypeBuilder`1<TJoinEntity>> configureJoinEntityType);
    public virtual EntityTypeBuilder`1<TRightEntity> UsingEntity(string joinEntityName, Func`2<EntityTypeBuilder`1<TJoinEntity>, ReferenceCollectionBuilder`2<TLeftEntity, TJoinEntity>> configureRight, Func`2<EntityTypeBuilder`1<TJoinEntity>, ReferenceCollectionBuilder`2<TRightEntity, TJoinEntity>> configureLeft, Action`1<EntityTypeBuilder`1<TJoinEntity>> configureJoinEntityType);
    private EntityTypeBuilder`1<TJoinEntity> Using(string joinEntityName, Func`2<EntityTypeBuilder`1<TJoinEntity>, ReferenceCollectionBuilder`2<TLeftEntity, TJoinEntity>> configureRight, Func`2<EntityTypeBuilder`1<TJoinEntity>, ReferenceCollectionBuilder`2<TRightEntity, TJoinEntity>> configureLeft);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder : object {
    [CompilerGeneratedAttribute]
private InternalForeignKeyBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private IMutableSkipNavigation <SkipNavigation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CollectionName>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfo <CollectionMember>k__BackingField;
    [CompilerGeneratedAttribute]
private IMutableEntityType <RelatedEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private IMutableEntityType <DeclaringEntityType>k__BackingField;
    [NullableAttribute("2")]
[EntityFrameworkInternalAttribute]
protected InternalForeignKeyBuilder Builder { get; private set; }
    [NullableAttribute("2")]
private IMutableSkipNavigation SkipNavigation { get; private set; }
    [NullableAttribute("2")]
[EntityFrameworkInternalAttribute]
protected string CollectionName { get; }
    [NullableAttribute("2")]
[EntityFrameworkInternalAttribute]
protected MemberInfo CollectionMember { get; }
    [EntityFrameworkInternalAttribute]
protected IMutableEntityType RelatedEntityType { get; }
    [EntityFrameworkInternalAttribute]
protected IMutableEntityType DeclaringEntityType { get; }
    [NullableAttribute("2")]
private IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public CollectionNavigationBuilder(IMutableEntityType declaringEntityType, IMutableEntityType relatedEntityType, MemberIdentity navigation, IMutableForeignKey foreignKey, IMutableSkipNavigation skipNavigation);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected virtual InternalForeignKeyBuilder get_Builder();
    [CompilerGeneratedAttribute]
private void set_Builder(InternalForeignKeyBuilder value);
    [CompilerGeneratedAttribute]
private IMutableSkipNavigation get_SkipNavigation();
    [CompilerGeneratedAttribute]
private void set_SkipNavigation(IMutableSkipNavigation value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected virtual string get_CollectionName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
protected virtual MemberInfo get_CollectionMember();
    [CompilerGeneratedAttribute]
protected virtual IMutableEntityType get_RelatedEntityType();
    [CompilerGeneratedAttribute]
protected virtual IMutableEntityType get_DeclaringEntityType();
    private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder>.get_Instance();
    public virtual ReferenceCollectionBuilder WithOne(string navigationName);
    [EntityFrameworkInternalAttribute]
protected virtual InternalForeignKeyBuilder WithOneBuilder(string navigationName);
    [EntityFrameworkInternalAttribute]
protected virtual InternalForeignKeyBuilder WithOneBuilder(MemberInfo navigationMemberInfo);
    private InternalForeignKeyBuilder WithOneBuilder(MemberIdentity reference);
    public virtual CollectionCollectionBuilder WithMany(string navigationName);
    [EntityFrameworkInternalAttribute]
protected virtual IMutableSkipNavigation WithLeftManyNavigation(MemberInfo inverseMemberInfo);
    [EntityFrameworkInternalAttribute]
protected virtual IMutableSkipNavigation WithLeftManyNavigation(string inverseName);
    [NullableContextAttribute("2")]
[EntityFrameworkInternalAttribute]
protected virtual IMutableSkipNavigation WithRightManyNavigation(string navigationName, string inverseName);
    [EntityFrameworkInternalAttribute]
protected virtual IMutableSkipNavigation WithRightManyNavigation(MemberInfo navigationMemberInfo, string inverseName);
    private IMutableSkipNavigation WithRightManyNavigation(MemberIdentity navigationMember, string inverseName);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.CollectionNavigationBuilder`2 : CollectionNavigationBuilder {
    [EntityFrameworkInternalAttribute]
public CollectionNavigationBuilder`2(IMutableEntityType declaringEntityType, IMutableEntityType relatedEntityType, MemberIdentity navigation, IMutableForeignKey foreignKey, IMutableSkipNavigation skipNavigation);
    public virtual ReferenceCollectionBuilder`2<TEntity, TRelatedEntity> WithOne(string navigationName);
    public virtual ReferenceCollectionBuilder`2<TEntity, TRelatedEntity> WithOne(Expression`1<Func`2<TRelatedEntity, TEntity>> navigationExpression);
    public virtual CollectionCollectionBuilder`2<TRelatedEntity, TEntity> WithMany(string navigationName);
    public virtual CollectionCollectionBuilder`2<TRelatedEntity, TEntity> WithMany(Expression`1<Func`2<TRelatedEntity, IEnumerable`1<TEntity>>> navigationExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.ConventionSetBuilder : object {
    private IServiceProvider _serviceProvider;
    private ConventionSet _conventionSet;
    [EntityFrameworkInternalAttribute]
public ConventionSetBuilder(ConventionSet conventionSet, IServiceProvider serviceProvider);
    public virtual void Replace(Func`2<IServiceProvider, TImplementation> conventionFactory);
    public virtual void Add(Func`2<IServiceProvider, IConvention> conventionFactory);
    public virtual void Remove(Type conventionType);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.DataBuilder : object {
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.DataBuilder`1 : DataBuilder {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder : object {
    [CompilerGeneratedAttribute]
private InternalEntityTypeBuilder <EntityTypeBuilder>k__BackingField;
    [EntityFrameworkInternalAttribute]
protected InternalEntityTypeBuilder EntityTypeBuilder { get; }
    private IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder.EntityType { get; }
    [EntityFrameworkInternalAttribute]
public DiscriminatorBuilder(IMutableEntityType entityType);
    [CompilerGeneratedAttribute]
protected virtual InternalEntityTypeBuilder get_EntityTypeBuilder();
    public virtual DiscriminatorBuilder IsComplete(bool complete);
    private DiscriminatorBuilder IsComplete(bool complete, ConfigurationSource configurationSource);
    public virtual DiscriminatorBuilder HasValue(object value);
    [NullableContextAttribute("2")]
public virtual DiscriminatorBuilder HasValue(object value);
    public virtual DiscriminatorBuilder HasValue(Type entityType, object value);
    public virtual DiscriminatorBuilder HasValue(string entityTypeName, object value);
    private DiscriminatorBuilder HasValue(InternalEntityTypeBuilder entityTypeBuilder, object value, ConfigurationSource configurationSource);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder.get_EntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionDiscriminatorBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder.IsComplete(bool complete, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder.CanSetIsComplete(bool complete, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionDiscriminatorBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder.HasValue(object value, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionDiscriminatorBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder.HasValue(IConventionEntityType entityType, object value, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder.CanSetValue(object value, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.DiscriminatorBuilder`1 : object {
    [CompilerGeneratedAttribute]
private DiscriminatorBuilder <Builder>k__BackingField;
    private DiscriminatorBuilder Builder { get; }
    [EntityFrameworkInternalAttribute]
public DiscriminatorBuilder`1(DiscriminatorBuilder builder);
    [CompilerGeneratedAttribute]
private DiscriminatorBuilder get_Builder();
    public virtual DiscriminatorBuilder`1<TDiscriminator> IsComplete(bool complete);
    public virtual DiscriminatorBuilder`1<TDiscriminator> HasValue(TDiscriminator value);
    public virtual DiscriminatorBuilder`1<TDiscriminator> HasValue(TDiscriminator value);
    public virtual DiscriminatorBuilder`1<TDiscriminator> HasValue(Type entityType, TDiscriminator value);
    public virtual DiscriminatorBuilder`1<TDiscriminator> HasValue(string entityTypeName, TDiscriminator value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder : object {
    [CompilerGeneratedAttribute]
private InternalEntityTypeBuilder <Builder>k__BackingField;
    private InternalEntityTypeBuilder Builder { get; }
    private IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder>.Instance { get; }
    public IMutableEntityType Metadata { get; }
    [EntityFrameworkInternalAttribute]
public EntityTypeBuilder(IMutableEntityType entityType);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
private InternalEntityTypeBuilder get_Builder();
    private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder>.get_Instance();
    public virtual IMutableEntityType get_Metadata();
    public virtual EntityTypeBuilder HasAnnotation(string annotation, object value);
    public virtual EntityTypeBuilder HasBaseType(string name);
    public virtual EntityTypeBuilder HasBaseType(Type entityType);
    public virtual KeyBuilder HasKey(String[] propertyNames);
    public virtual KeyBuilder HasAlternateKey(String[] propertyNames);
    public virtual EntityTypeBuilder HasNoKey();
    public virtual PropertyBuilder Property(string propertyName);
    public virtual PropertyBuilder`1<TProperty> Property(string propertyName);
    public virtual PropertyBuilder Property(Type propertyType, string propertyName);
    public virtual PropertyBuilder`1<TProperty> IndexerProperty(string propertyName);
    public virtual PropertyBuilder IndexerProperty(Type propertyType, string propertyName);
    public virtual NavigationBuilder Navigation(string navigationName);
    public virtual EntityTypeBuilder Ignore(string propertyName);
    public virtual EntityTypeBuilder HasQueryFilter(LambdaExpression filter);
    public virtual IndexBuilder HasIndex(String[] propertyNames);
    public virtual IndexBuilder HasIndex(String[] propertyNames, string name);
    public virtual OwnedNavigationBuilder OwnsOne(string ownedTypeName, string navigationName);
    public virtual OwnedNavigationBuilder OwnsOne(string ownedTypeName, Type ownedType, string navigationName);
    public virtual OwnedNavigationBuilder OwnsOne(Type ownedType, string navigationName);
    public virtual EntityTypeBuilder OwnsOne(string ownedTypeName, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    public virtual EntityTypeBuilder OwnsOne(string ownedTypeName, Type ownedType, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    public virtual EntityTypeBuilder OwnsOne(Type ownedType, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    private OwnedNavigationBuilder OwnsOneBuilder(TypeIdentity& ownedType, string navigationName);
    public virtual OwnedNavigationBuilder OwnsMany(string ownedTypeName, string navigationName);
    public virtual OwnedNavigationBuilder OwnsMany(string ownedTypeName, Type ownedType, string navigationName);
    public virtual OwnedNavigationBuilder OwnsMany(Type ownedType, string navigationName);
    public virtual EntityTypeBuilder OwnsMany(string ownedTypeName, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    public virtual EntityTypeBuilder OwnsMany(string ownedTypeName, Type ownedType, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    public virtual EntityTypeBuilder OwnsMany(Type ownedType, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    private OwnedNavigationBuilder OwnsManyBuilder(TypeIdentity& ownedType, string navigationName);
    public virtual ReferenceNavigationBuilder HasOne(string relatedTypeName, string navigationName);
    public virtual ReferenceNavigationBuilder HasOne(Type relatedType, string navigationName);
    [RequiresUnreferencedCodeAttribute("Use an overload that accepts a type")]
public virtual ReferenceNavigationBuilder HasOne(string navigationName);
    [EntityFrameworkInternalAttribute]
protected virtual ForeignKey HasOneBuilder(MemberIdentity navigationId, EntityType relatedEntityType);
    public virtual CollectionNavigationBuilder HasMany(string relatedTypeName, string navigationName);
    [RequiresUnreferencedCodeAttribute("Use the generic overload instead")]
public virtual CollectionNavigationBuilder HasMany(string navigationName);
    public virtual CollectionNavigationBuilder HasMany(Type relatedType, string navigationName);
    private CollectionNavigationBuilder HasMany(string navigationName, EntityType relatedEntityType);
    [EntityFrameworkInternalAttribute]
protected virtual EntityType FindRelatedEntityType(string relatedTypeName, string navigationName);
    [EntityFrameworkInternalAttribute]
protected virtual EntityType FindRelatedEntityType(Type relatedType, string navigationName);
    public virtual EntityTypeBuilder HasChangeTrackingStrategy(ChangeTrackingStrategy changeTrackingStrategy);
    public virtual EntityTypeBuilder UsePropertyAccessMode(PropertyAccessMode propertyAccessMode);
    public virtual DataBuilder HasData(Object[] data);
    public virtual DataBuilder HasData(IEnumerable`1<object> data);
    public virtual DiscriminatorBuilder HasDiscriminator();
    public virtual DiscriminatorBuilder HasDiscriminator(string name, Type type);
    public virtual DiscriminatorBuilder`1<TDiscriminator> HasDiscriminator(string name);
    public virtual EntityTypeBuilder HasNoDiscriminator();
    public static TriggerBuilder HasTrigger(IMutableEntityType entityType, string modelName);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1 : EntityTypeBuilder {
    private InternalEntityTypeBuilder Builder { get; }
    [EntityFrameworkInternalAttribute]
public EntityTypeBuilder`1(IMutableEntityType entityType);
    public virtual EntityTypeBuilder`1<TEntity> HasAnnotation(string annotation, object value);
    public virtual EntityTypeBuilder`1<TEntity> HasBaseType(string name);
    public virtual EntityTypeBuilder`1<TEntity> HasBaseType(Type entityType);
    public virtual EntityTypeBuilder`1<TEntity> HasBaseType();
    public virtual KeyBuilder HasKey(Expression`1<Func`2<TEntity, object>> keyExpression);
    public virtual KeyBuilder`1<TEntity> HasKey(String[] propertyNames);
    public virtual KeyBuilder`1<TEntity> HasAlternateKey(Expression`1<Func`2<TEntity, object>> keyExpression);
    public virtual KeyBuilder`1<TEntity> HasAlternateKey(String[] propertyNames);
    public virtual EntityTypeBuilder`1<TEntity> HasNoKey();
    public virtual PropertyBuilder`1<TProperty> Property(Expression`1<Func`2<TEntity, TProperty>> propertyExpression);
    public virtual NavigationBuilder`2<TEntity, TNavigation> Navigation(Expression`1<Func`2<TEntity, TNavigation>> navigationExpression);
    public virtual NavigationBuilder`2<TEntity, TNavigation> Navigation(Expression`1<Func`2<TEntity, IEnumerable`1<TNavigation>>> navigationExpression);
    public virtual EntityTypeBuilder`1<TEntity> Ignore(Expression`1<Func`2<TEntity, object>> propertyExpression);
    public virtual EntityTypeBuilder`1<TEntity> Ignore(string propertyName);
    public virtual EntityTypeBuilder`1<TEntity> HasQueryFilter(LambdaExpression filter);
    public virtual EntityTypeBuilder`1<TEntity> HasQueryFilter(Expression`1<Func`2<TEntity, bool>> filter);
    [ObsoleteAttribute("Use InMemoryEntityTypeBuilderExtensions.ToInMemoryQuery")]
public virtual EntityTypeBuilder`1<TEntity> ToQuery(Expression`1<Func`1<IQueryable`1<TEntity>>> query);
    public virtual IndexBuilder`1<TEntity> HasIndex(Expression`1<Func`2<TEntity, object>> indexExpression);
    public virtual IndexBuilder`1<TEntity> HasIndex(Expression`1<Func`2<TEntity, object>> indexExpression, string name);
    public virtual IndexBuilder`1<TEntity> HasIndex(String[] propertyNames);
    public virtual IndexBuilder`1<TEntity> HasIndex(String[] propertyNames, string name);
    public virtual OwnedNavigationBuilder`2<TEntity, TRelatedEntity> OwnsOne(string navigationName);
    public virtual OwnedNavigationBuilder`2<TEntity, TRelatedEntity> OwnsOne(string ownedTypeName, string navigationName);
    public virtual OwnedNavigationBuilder`2<TEntity, TRelatedEntity> OwnsOne(Expression`1<Func`2<TEntity, TRelatedEntity>> navigationExpression);
    public virtual OwnedNavigationBuilder`2<TEntity, TRelatedEntity> OwnsOne(string ownedTypeName, Expression`1<Func`2<TEntity, TRelatedEntity>> navigationExpression);
    public virtual EntityTypeBuilder`1<TEntity> OwnsOne(string navigationName, Action`1<OwnedNavigationBuilder`2<TEntity, TRelatedEntity>> buildAction);
    public virtual EntityTypeBuilder`1<TEntity> OwnsOne(string ownedTypeName, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    public virtual EntityTypeBuilder`1<TEntity> OwnsOne(Type ownedType, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    public virtual EntityTypeBuilder`1<TEntity> OwnsOne(string ownedTypeName, Type ownedType, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    public virtual EntityTypeBuilder`1<TEntity> OwnsOne(string ownedTypeName, string navigationName, Action`1<OwnedNavigationBuilder`2<TEntity, TRelatedEntity>> buildAction);
    public virtual EntityTypeBuilder`1<TEntity> OwnsOne(Expression`1<Func`2<TEntity, TRelatedEntity>> navigationExpression, Action`1<OwnedNavigationBuilder`2<TEntity, TRelatedEntity>> buildAction);
    public virtual EntityTypeBuilder`1<TEntity> OwnsOne(string ownedTypeName, Expression`1<Func`2<TEntity, TRelatedEntity>> navigationExpression, Action`1<OwnedNavigationBuilder`2<TEntity, TRelatedEntity>> buildAction);
    private OwnedNavigationBuilder`2<TEntity, TRelatedEntity> OwnsOneBuilder(TypeIdentity ownedType, MemberIdentity navigation);
    public virtual OwnedNavigationBuilder`2<TEntity, TRelatedEntity> OwnsMany(string navigationName);
    public virtual OwnedNavigationBuilder`2<TEntity, TRelatedEntity> OwnsMany(string ownedTypeName, string navigationName);
    public virtual OwnedNavigationBuilder`2<TEntity, TRelatedEntity> OwnsMany(Expression`1<Func`2<TEntity, IEnumerable`1<TRelatedEntity>>> navigationExpression);
    public virtual OwnedNavigationBuilder`2<TEntity, TRelatedEntity> OwnsMany(string ownedTypeName, Expression`1<Func`2<TEntity, IEnumerable`1<TRelatedEntity>>> navigationExpression);
    public virtual EntityTypeBuilder`1<TEntity> OwnsMany(string navigationName, Action`1<OwnedNavigationBuilder`2<TEntity, TRelatedEntity>> buildAction);
    public virtual EntityTypeBuilder`1<TEntity> OwnsMany(string ownedTypeName, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    public virtual EntityTypeBuilder`1<TEntity> OwnsMany(Type ownedType, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    public virtual EntityTypeBuilder`1<TEntity> OwnsMany(string ownedTypeName, Type ownedType, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    public virtual EntityTypeBuilder`1<TEntity> OwnsMany(string ownedTypeName, string navigationName, Action`1<OwnedNavigationBuilder`2<TEntity, TRelatedEntity>> buildAction);
    public virtual EntityTypeBuilder`1<TEntity> OwnsMany(Expression`1<Func`2<TEntity, IEnumerable`1<TRelatedEntity>>> navigationExpression, Action`1<OwnedNavigationBuilder`2<TEntity, TRelatedEntity>> buildAction);
    public virtual EntityTypeBuilder`1<TEntity> OwnsMany(string ownedTypeName, Expression`1<Func`2<TEntity, IEnumerable`1<TRelatedEntity>>> navigationExpression, Action`1<OwnedNavigationBuilder`2<TEntity, TRelatedEntity>> buildAction);
    private OwnedNavigationBuilder`2<TEntity, TRelatedEntity> OwnsManyBuilder(TypeIdentity ownedType, MemberIdentity navigation);
    public virtual ReferenceNavigationBuilder`2<TEntity, TRelatedEntity> HasOne(string navigationName);
    public virtual ReferenceNavigationBuilder`2<TEntity, TRelatedEntity> HasOne(Expression`1<Func`2<TEntity, TRelatedEntity>> navigationExpression);
    public virtual CollectionNavigationBuilder`2<TEntity, TRelatedEntity> HasMany(string navigationName);
    public virtual CollectionNavigationBuilder`2<TEntity, TRelatedEntity> HasMany(Expression`1<Func`2<TEntity, IEnumerable`1<TRelatedEntity>>> navigationExpression);
    public virtual EntityTypeBuilder`1<TEntity> HasChangeTrackingStrategy(ChangeTrackingStrategy changeTrackingStrategy);
    public virtual EntityTypeBuilder`1<TEntity> UsePropertyAccessMode(PropertyAccessMode propertyAccessMode);
    public virtual DataBuilder`1<TEntity> HasData(TEntity[] data);
    public virtual DataBuilder`1<TEntity> HasData(IEnumerable`1<TEntity> data);
    public virtual DataBuilder`1<TEntity> HasData(Object[] data);
    public virtual DataBuilder`1<TEntity> HasData(IEnumerable`1<object> data);
    public virtual DiscriminatorBuilder`1<TDiscriminator> HasDiscriminator(Expression`1<Func`2<TEntity, TDiscriminator>> propertyExpression);
    public virtual EntityTypeBuilder`1<TEntity> HasNoDiscriminator();
    private InternalEntityTypeBuilder get_Builder();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionAnnotatableBuilder {
    public IConventionAnnotatable Metadata { get; }
    public IConventionModelBuilder ModelBuilder { get; }
    public abstract virtual IConventionAnnotatable get_Metadata();
    public abstract virtual IConventionModelBuilder get_ModelBuilder();
    [NullableContextAttribute("2")]
public abstract virtual IConventionAnnotatableBuilder HasAnnotation(string name, object value, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual IConventionAnnotatableBuilder HasNonNullAnnotation(string name, object value, bool fromDataAnnotation);
    public abstract virtual bool CanSetAnnotation(string name, object value, bool fromDataAnnotation);
    public abstract virtual IConventionAnnotatableBuilder HasNoAnnotation(string name, bool fromDataAnnotation);
    public abstract virtual bool CanRemoveAnnotation(string name, bool fromDataAnnotation);
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDiscriminatorBuilder {
    [NullableAttribute("1")]
public IConventionEntityType EntityType { get; }
    [NullableContextAttribute("1")]
public abstract virtual IConventionEntityType get_EntityType();
    public abstract virtual IConventionDiscriminatorBuilder IsComplete(bool complete, bool fromDataAnnotation);
    public abstract virtual bool CanSetIsComplete(bool complete, bool fromDataAnnotation);
    public abstract virtual IConventionDiscriminatorBuilder HasValue(object value, bool fromDataAnnotation);
    public abstract virtual IConventionDiscriminatorBuilder HasValue(IConventionEntityType entityType, object value, bool fromDataAnnotation);
    public abstract virtual bool CanSetValue(object value, bool fromDataAnnotation);
    [NullableContextAttribute("1")]
public virtual bool CanSetValue(IConventionEntityType entityType, object value, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder {
    public IConventionEntityType Metadata { get; }
    public abstract virtual IConventionEntityType get_Metadata();
    [NullableContextAttribute("2")]
public abstract virtual IConventionEntityTypeBuilder HasBaseType(IConventionEntityType baseEntityType, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual bool CanSetBaseType(IConventionEntityType baseEntityType, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder Property(Type propertyType, string propertyName, bool setTypeConfigurationSource, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder Property(MemberInfo memberInfo, bool fromDataAnnotation);
    public abstract virtual bool CanHaveProperty(Type propertyType, string propertyName, bool fromDataAnnotation);
    public abstract virtual bool CanHaveProperty(MemberInfo memberInfo, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder IndexerProperty(Type propertyType, string propertyName, bool fromDataAnnotation);
    public abstract virtual bool CanHaveIndexerProperty(Type propertyType, string propertyName, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder CreateUniqueProperty(Type propertyType, string basePropertyName, bool required);
    public abstract virtual IReadOnlyList`1<IConventionProperty> GetOrCreateProperties(IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
    public abstract virtual IReadOnlyList`1<IConventionProperty> GetOrCreateProperties(IEnumerable`1<MemberInfo> memberInfos, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder RemoveUnusedImplicitProperties(IReadOnlyList`1<IConventionProperty> properties);
    public abstract virtual IConventionServicePropertyBuilder ServiceProperty(MemberInfo memberInfo, bool fromDataAnnotation);
    public abstract virtual bool CanHaveServiceProperty(MemberInfo memberInfo, bool fromDataAnnotation);
    public abstract virtual bool IsIgnored(string memberName, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder Ignore(string memberName, bool fromDataAnnotation);
    public abstract virtual bool CanIgnore(string memberName, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual IConventionKeyBuilder PrimaryKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual IConventionKeyBuilder PrimaryKey(IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
    public abstract virtual bool CanSetPrimaryKey(IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
    public abstract virtual bool CanSetPrimaryKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    public abstract virtual IConventionKeyBuilder HasKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder HasNoKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder HasNoKey(IConventionKey key, bool fromDataAnnotation);
    public abstract virtual bool CanRemoveKey(IConventionKey key, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual IConventionEntityTypeBuilder HasNoKey(bool fromDataAnnotation);
    public abstract virtual bool CanRemoveKey(bool fromDataAnnotation);
    public abstract virtual IConventionIndexBuilder HasIndex(IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
    public abstract virtual IConventionIndexBuilder HasIndex(IReadOnlyList`1<string> propertyNames, string name, bool fromDataAnnotation);
    public abstract virtual IConventionIndexBuilder HasIndex(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    public abstract virtual IConventionIndexBuilder HasIndex(IReadOnlyList`1<IConventionProperty> properties, string name, bool fromDataAnnotation);
    public abstract virtual bool CanHaveIndex(IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder HasNoIndex(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder HasNoIndex(IConventionIndex index, bool fromDataAnnotation);
    public abstract virtual bool CanRemoveIndex(IConventionIndex index, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder HasRelationship(IConventionEntityType targetEntityType, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder HasRelationship(IConventionEntityType principalEntityType, IReadOnlyList`1<IConventionProperty> dependentProperties, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder HasRelationship(IConventionEntityType principalEntityType, IConventionKey principalKey, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder HasRelationship(IConventionEntityType principalEntityType, IReadOnlyList`1<IConventionProperty> dependentProperties, IConventionKey principalKey, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder HasRelationship(IConventionEntityType targetEntityType, string navigationName, bool setTargetAsPrincipal, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder HasRelationship(IConventionEntityType targetEntityType, MemberInfo navigation, bool setTargetAsPrincipal, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder HasRelationship(IConventionEntityType targetEntityType, string navigationName, string inverseNavigationName, bool setTargetAsPrincipal, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder HasRelationship(IConventionEntityType targetEntityType, MemberInfo navigation, MemberInfo inverseNavigation, bool setTargetAsPrincipal, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder HasOwnership(Type targetEntityType, string navigationName, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder HasOwnership(IConventionEntityType targetEntityType, string navigationName, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder HasOwnership(Type targetEntityType, MemberInfo navigation, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder HasOwnership(IConventionEntityType targetEntityType, MemberInfo navigation, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder HasOwnership(Type targetEntityType, string navigationName, string inverseNavigationName, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder HasOwnership(IConventionEntityType targetEntityType, string navigationName, string inverseNavigationName, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder HasOwnership(Type targetEntityType, MemberInfo navigation, MemberInfo inverseNavigation, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder HasOwnership(IConventionEntityType targetEntityType, MemberInfo navigation, MemberInfo inverseNavigation, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder HasNoRelationship(IReadOnlyList`1<IConventionProperty> properties, IConventionKey principalKey, IConventionEntityType principalEntityType, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder HasNoRelationship(IConventionForeignKey foreignKey, bool fromDataAnnotation);
    public abstract virtual bool CanRemoveRelationship(IConventionForeignKey foreignKey, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder HasNoSkipNavigation(IConventionSkipNavigation skipNavigation, bool fromDataAnnotation);
    public abstract virtual bool CanRemoveSkipNavigation(IConventionSkipNavigation skipNavigation, bool fromDataAnnotation);
    public abstract virtual bool CanHaveNavigation(string navigationName, Type type, bool fromDataAnnotation);
    public virtual bool CanHaveNavigation(MemberInfo navigation, bool fromDataAnnotation);
    public abstract virtual bool CanHaveSkipNavigation(string skipNavigationName, Type type, bool fromDataAnnotation);
    public virtual bool CanHaveSkipNavigation(MemberInfo navigation, bool fromDataAnnotation);
    public abstract virtual IConventionSkipNavigationBuilder HasSkipNavigation(MemberInfo navigation, IConventionEntityType targetEntityType, MemberInfo inverseNavigation, Nullable`1<bool> collections, Nullable`1<bool> onDependent, bool fromDataAnnotation);
    public abstract virtual IConventionSkipNavigationBuilder HasSkipNavigation(MemberInfo navigation, IConventionEntityType targetEntityType, Nullable`1<bool> collection, Nullable`1<bool> onDependent, bool fromDataAnnotation);
    public abstract virtual IConventionSkipNavigationBuilder HasSkipNavigation(string navigationName, IConventionEntityType targetEntityType, Nullable`1<bool> collection, Nullable`1<bool> onDependent, bool fromDataAnnotation);
    public abstract virtual IConventionTriggerBuilder HasTrigger(string modelName, bool fromDataAnnotation);
    public abstract virtual bool CanHaveTrigger(string modelName, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual IConventionEntityTypeBuilder HasQueryFilter(LambdaExpression filter, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual bool CanSetQueryFilter(LambdaExpression filter, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("Use InMemoryEntityTypeBuilderExtensions.ToInMemoryQuery")]
public abstract virtual IConventionEntityTypeBuilder HasDefiningQuery(LambdaExpression query, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
[ObsoleteAttribute("Use InMemoryEntityTypeBuilderExtensions.CanSetInMemoryQuery")]
public abstract virtual bool CanSetDefiningQuery(LambdaExpression query, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual IConventionEntityTypeBuilder HasChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, bool fromDataAnnotation);
    public abstract virtual bool CanSetChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual IConventionEntityTypeBuilder UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    public abstract virtual bool CanSetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual IConventionDiscriminatorBuilder HasDiscriminator(bool fromDataAnnotation);
    public abstract virtual IConventionDiscriminatorBuilder HasDiscriminator(Type type, bool fromDataAnnotation);
    public abstract virtual IConventionDiscriminatorBuilder HasDiscriminator(string name, bool fromDataAnnotation);
    public abstract virtual IConventionDiscriminatorBuilder HasDiscriminator(string name, Type type, bool fromDataAnnotation);
    public abstract virtual IConventionDiscriminatorBuilder HasDiscriminator(MemberInfo memberInfo, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual IConventionEntityTypeBuilder HasNoDiscriminator(bool fromDataAnnotation);
    public abstract virtual bool CanSetDiscriminator(string name, bool fromDataAnnotation);
    public abstract virtual bool CanSetDiscriminator(Type type, bool fromDataAnnotation);
    public abstract virtual bool CanSetDiscriminator(string name, Type type, bool fromDataAnnotation);
    public abstract virtual bool CanSetDiscriminator(MemberInfo memberInfo, bool fromDataAnnotation);
    public abstract virtual bool CanRemoveDiscriminator(bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder GetTargetEntityTypeBuilder(Type targetClrType, MemberInfo navigationInfo, bool createIfMissing, Nullable`1<bool> targetShouldBeOwned, bool fromDataAnnotation);
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder {
    [NullableAttribute("1")]
public IConventionForeignKey Metadata { get; }
    [NullableContextAttribute("1")]
public abstract virtual IConventionForeignKey get_Metadata();
    [NullableContextAttribute("1")]
public abstract virtual IConventionForeignKeyBuilder HasEntityTypes(IConventionEntityType principalEntityType, IConventionEntityType dependentEntityType, bool fromDataAnnotation);
    [NullableContextAttribute("1")]
public abstract virtual bool CanSetEntityTypes(IConventionEntityType principalEntityType, IConventionEntityType dependentEntityType, bool fromDataAnnotation);
    public abstract virtual bool CanInvert(IReadOnlyList`1<IConventionProperty> newForeignKeyProperties, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder HasForeignKey(IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder HasForeignKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    public abstract virtual bool CanSetForeignKey(IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
    public abstract virtual bool CanSetForeignKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder HasPrincipalKey(IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder HasPrincipalKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    public abstract virtual bool CanSetPrincipalKey(IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
    public abstract virtual bool CanSetPrincipalKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder HasNavigation(string name, bool pointsToPrincipal, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder HasNavigation(MemberInfo property, bool pointsToPrincipal, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder HasNavigations(string navigationToPrincipalName, string navigationToDependentName, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder HasNavigations(MemberInfo navigationToPrincipal, MemberInfo navigationToDependent, bool fromDataAnnotation);
    public abstract virtual bool CanSetNavigation(string name, bool pointsToPrincipal, bool fromDataAnnotation);
    public abstract virtual bool CanSetNavigation(MemberInfo property, bool pointsToPrincipal, bool fromDataAnnotation);
    public abstract virtual bool CanSetNavigations(string navigationToPrincipalName, string navigationToDependentName, bool fromDataAnnotation);
    public abstract virtual bool CanSetNavigations(MemberInfo navigationToPrincipal, MemberInfo navigationToDependent, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder IsRequired(Nullable`1<bool> required, bool fromDataAnnotation);
    public abstract virtual bool CanSetIsRequired(Nullable`1<bool> required, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder IsRequiredDependent(Nullable`1<bool> required, bool fromDataAnnotation);
    public abstract virtual bool CanSetIsRequiredDependent(Nullable`1<bool> required, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder IsOwnership(Nullable`1<bool> ownership, bool fromDataAnnotation);
    public abstract virtual bool CanSetIsOwnership(Nullable`1<bool> ownership, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder IsUnique(Nullable`1<bool> unique, bool fromDataAnnotation);
    public abstract virtual bool CanSetIsUnique(Nullable`1<bool> unique, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKeyBuilder OnDelete(Nullable`1<DeleteBehavior> deleteBehavior, bool fromDataAnnotation);
    public abstract virtual bool CanSetOnDelete(Nullable`1<DeleteBehavior> deleteBehavior, bool fromDataAnnotation);
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder {
    [NullableAttribute("1")]
public IConventionIndex Metadata { get; }
    [NullableContextAttribute("1")]
public abstract virtual IConventionIndex get_Metadata();
    public abstract virtual IConventionIndexBuilder IsUnique(Nullable`1<bool> unique, bool fromDataAnnotation);
    public abstract virtual bool CanSetIsUnique(Nullable`1<bool> unique, bool fromDataAnnotation);
    public abstract virtual IConventionIndexBuilder IsDescending(IReadOnlyList`1<bool> descending, bool fromDataAnnotation);
    public abstract virtual bool CanSetIsDescending(IReadOnlyList`1<bool> descending, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder {
    public IConventionKey Metadata { get; }
    public abstract virtual IConventionKey get_Metadata();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder {
    public IConventionModel Metadata { get; }
    public abstract virtual IConventionModel get_Metadata();
    public abstract virtual IConventionEntityTypeBuilder Entity(string name, Nullable`1<bool> shouldBeOwned, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder SharedTypeEntity(string name, Type type, Nullable`1<bool> shouldBeOwned, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder Entity(Type type, Nullable`1<bool> shouldBeOwned, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder Entity(string name, string definingNavigationName, IConventionEntityType definingEntityType, bool fromDataAnnotation);
    public abstract virtual IConventionEntityTypeBuilder Entity(Type type, string definingNavigationName, IConventionEntityType definingEntityType, bool fromDataAnnotation);
    public abstract virtual IConventionOwnedEntityTypeBuilder Owned(Type type, bool fromDataAnnotation);
    public abstract virtual bool IsIgnored(Type type, bool fromDataAnnotation);
    public abstract virtual bool IsIgnored(string typeName, bool fromDataAnnotation);
    public abstract virtual IConventionModelBuilder Ignore(Type type, bool fromDataAnnotation);
    public abstract virtual IConventionModelBuilder Ignore(string typeName, bool fromDataAnnotation);
    public abstract virtual IConventionModelBuilder HasNoEntityType(IConventionEntityType entityType, bool fromDataAnnotation);
    public abstract virtual bool CanIgnore(Type type, bool fromDataAnnotation);
    public abstract virtual bool CanIgnore(string typeName, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual IConventionModelBuilder HasChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, bool fromDataAnnotation);
    public abstract virtual bool CanSetChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual IConventionModelBuilder UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    public abstract virtual bool CanSetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionNavigationBuilder {
    [NullableAttribute("1")]
public IConventionNavigation Metadata { get; }
    [NullableContextAttribute("1")]
public abstract virtual IConventionNavigation get_Metadata();
    public abstract virtual IConventionNavigationBuilder HasField(string fieldName, bool fromDataAnnotation);
    public abstract virtual IConventionNavigationBuilder HasField(FieldInfo fieldInfo, bool fromDataAnnotation);
    public abstract virtual IConventionNavigationBuilder UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    public abstract virtual bool CanSetAutoInclude(Nullable`1<bool> autoInclude, bool fromDataAnnotation);
    public abstract virtual IConventionNavigationBuilder AutoInclude(Nullable`1<bool> autoInclude, bool fromDataAnnotation);
    public abstract virtual bool CanSetIsRequired(Nullable`1<bool> required, bool fromDataAnnotation);
    public abstract virtual IConventionNavigationBuilder IsRequired(Nullable`1<bool> required, bool fromDataAnnotation);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionOwnedEntityTypeBuilder {
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder {
    [NullableAttribute("1")]
public IConventionPropertyBase Metadata { get; }
    [NullableContextAttribute("1")]
public abstract virtual IConventionPropertyBase get_Metadata();
    public abstract virtual IConventionPropertyBaseBuilder HasField(string fieldName, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBaseBuilder HasField(FieldInfo fieldInfo, bool fromDataAnnotation);
    public abstract virtual bool CanSetField(string fieldName, bool fromDataAnnotation);
    public abstract virtual bool CanSetField(FieldInfo fieldInfo, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBaseBuilder UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    public abstract virtual bool CanSetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder {
    [NullableAttribute("1")]
public IConventionProperty Metadata { get; }
    [NullableContextAttribute("1")]
public abstract virtual IConventionProperty get_Metadata();
    public abstract virtual IConventionPropertyBuilder IsRequired(Nullable`1<bool> required, bool fromDataAnnotation);
    public abstract virtual bool CanSetIsRequired(Nullable`1<bool> required, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder ValueGenerated(Nullable`1<ValueGenerated> valueGenerated, bool fromDataAnnotation);
    public abstract virtual bool CanSetValueGenerated(Nullable`1<ValueGenerated> valueGenerated, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder IsConcurrencyToken(Nullable`1<bool> concurrencyToken, bool fromDataAnnotation);
    public abstract virtual bool CanSetIsConcurrencyToken(Nullable`1<bool> concurrencyToken, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder HasField(string fieldName, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder HasField(FieldInfo fieldInfo, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder HasMaxLength(Nullable`1<int> maxLength, bool fromDataAnnotation);
    public abstract virtual bool CanSetMaxLength(Nullable`1<int> maxLength, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder IsUnicode(Nullable`1<bool> unicode, bool fromDataAnnotation);
    public abstract virtual bool CanSetIsUnicode(Nullable`1<bool> unicode, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder HasPrecision(Nullable`1<int> precision, bool fromDataAnnotation);
    public abstract virtual bool CanSetPrecision(Nullable`1<int> precision, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder HasScale(Nullable`1<int> scale, bool fromDataAnnotation);
    public abstract virtual bool CanSetScale(Nullable`1<int> scale, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder BeforeSave(Nullable`1<PropertySaveBehavior> behavior, bool fromDataAnnotation);
    public abstract virtual bool CanSetBeforeSave(Nullable`1<PropertySaveBehavior> behavior, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder AfterSave(Nullable`1<PropertySaveBehavior> behavior, bool fromDataAnnotation);
    public abstract virtual bool CanSetAfterSave(Nullable`1<PropertySaveBehavior> behavior, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder HasValueGenerator(Type valueGeneratorType, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder HasValueGenerator(Func`3<IProperty, IEntityType, ValueGenerator> factory, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder HasValueGeneratorFactory(Type valueGeneratorFactoryType, bool fromDataAnnotation);
    public abstract virtual bool CanSetValueGenerator(Func`3<IProperty, IEntityType, ValueGenerator> factory, bool fromDataAnnotation);
    public abstract virtual bool CanSetValueGeneratorFactory(Type valueGeneratorFactoryType, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder HasConversion(ValueConverter converter, bool fromDataAnnotation);
    public abstract virtual bool CanSetConversion(ValueConverter converter, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder HasConversion(Type providerClrType, bool fromDataAnnotation);
    public abstract virtual bool CanSetConversion(Type providerClrType, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder HasConverter(Type converterType, bool fromDataAnnotation);
    public abstract virtual bool CanSetConverter(Type converterType, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder HasTypeMapping(CoreTypeMapping typeMapping, bool fromDataAnnotation);
    [NullableContextAttribute("1")]
public abstract virtual bool CanSetTypeMapping(CoreTypeMapping typeMapping, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder HasValueComparer(ValueComparer comparer, bool fromDataAnnotation);
    public abstract virtual bool CanSetValueComparer(ValueComparer comparer, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder HasValueComparer(Type comparerType, bool fromDataAnnotation);
    public abstract virtual bool CanSetValueComparer(Type comparerType, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder HasProviderValueComparer(ValueComparer comparer, bool fromDataAnnotation);
    public abstract virtual bool CanSetProviderValueComparer(ValueComparer comparer, bool fromDataAnnotation);
    public abstract virtual IConventionPropertyBuilder HasProviderValueComparer(Type comparerType, bool fromDataAnnotation);
    public abstract virtual bool CanSetProviderValueComparer(Type comparerType, bool fromDataAnnotation);
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder {
    [NullableAttribute("1")]
public IConventionServiceProperty Metadata { get; }
    [NullableContextAttribute("1")]
public abstract virtual IConventionServiceProperty get_Metadata();
    public abstract virtual IConventionServicePropertyBuilder HasField(string fieldName, bool fromDataAnnotation);
    public abstract virtual IConventionServicePropertyBuilder HasField(FieldInfo fieldInfo, bool fromDataAnnotation);
    public abstract virtual IConventionServicePropertyBuilder UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    public abstract virtual IConventionServicePropertyBuilder HasParameterBinding(ServiceParameterBinding parameterBinding, bool fromDataAnnotation);
    public abstract virtual bool CanSetParameterBinding(ServiceParameterBinding parameterBinding, bool fromDataAnnotation);
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder {
    [NullableAttribute("1")]
public IConventionSkipNavigation Metadata { get; }
    [NullableContextAttribute("1")]
public abstract virtual IConventionSkipNavigation get_Metadata();
    public abstract virtual IConventionSkipNavigationBuilder HasField(string fieldName, bool fromDataAnnotation);
    public abstract virtual IConventionSkipNavigationBuilder HasField(FieldInfo fieldInfo, bool fromDataAnnotation);
    public abstract virtual IConventionSkipNavigationBuilder UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    public abstract virtual IConventionSkipNavigationBuilder HasForeignKey(IConventionForeignKey foreignKey, bool fromDataAnnotation);
    public abstract virtual bool CanSetForeignKey(IConventionForeignKey foreignKey, bool fromDataAnnotation);
    public abstract virtual IConventionSkipNavigationBuilder HasInverse(IConventionSkipNavigation inverse, bool fromDataAnnotation);
    public abstract virtual bool CanSetInverse(IConventionSkipNavigation inverse, bool fromDataAnnotation);
    public abstract virtual bool CanSetAutoInclude(Nullable`1<bool> autoInclude, bool fromDataAnnotation);
    public abstract virtual IConventionSkipNavigationBuilder AutoInclude(Nullable`1<bool> autoInclude, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder {
    public IConventionTrigger Metadata { get; }
    public abstract virtual IConventionTrigger get_Metadata();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder : object {
    [CompilerGeneratedAttribute]
private InternalIndexBuilder <Builder>k__BackingField;
    private IConventionIndexBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder>.Instance { get; }
    private InternalIndexBuilder Builder { get; }
    public IMutableIndex Metadata { get; }
    [EntityFrameworkInternalAttribute]
public IndexBuilder(IMutableIndex index);
    private sealed virtual override IConventionIndexBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder>.get_Instance();
    [CompilerGeneratedAttribute]
private InternalIndexBuilder get_Builder();
    public virtual IMutableIndex get_Metadata();
    public virtual IndexBuilder HasAnnotation(string annotation, object value);
    public virtual IndexBuilder IsUnique(bool unique);
    public virtual IndexBuilder IsDescending(Boolean[] descending);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder`1 : IndexBuilder {
    [EntityFrameworkInternalAttribute]
public IndexBuilder`1(IMutableIndex index);
    public virtual IndexBuilder`1<T> HasAnnotation(string annotation, object value);
    public virtual IndexBuilder`1<T> IsUnique(bool unique);
    public virtual IndexBuilder`1<T> IsDescending(Boolean[] descending);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Metadata.Builders.InvertibleRelationshipBuilderBase : object {
    private IReadOnlyList`1<Property> _foreignKeyProperties;
    private IReadOnlyList`1<Property> _principalKeyProperties;
    private Nullable`1<bool> _required;
    [CompilerGeneratedAttribute]
private IMutableEntityType <DeclaringEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private IMutableEntityType <RelatedEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalForeignKeyBuilder <Builder>k__BackingField;
    protected IMutableEntityType DeclaringEntityType { get; }
    protected IMutableEntityType RelatedEntityType { get; }
    [EntityFrameworkInternalAttribute]
protected InternalForeignKeyBuilder Builder { get; protected set; }
    private IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder>.Instance { get; }
    public IMutableForeignKey Metadata { get; }
    [EntityFrameworkInternalAttribute]
protected InvertibleRelationshipBuilderBase(IMutableEntityType declaringEntityType, IMutableEntityType relatedEntityType, IMutableForeignKey foreignKey);
    [EntityFrameworkInternalAttribute]
protected InvertibleRelationshipBuilderBase(InternalForeignKeyBuilder builder, InvertibleRelationshipBuilderBase oldBuilder, bool inverted, bool foreignKeySet, bool principalKeySet, bool requiredSet);
    [CompilerGeneratedAttribute]
protected virtual IMutableEntityType get_DeclaringEntityType();
    [CompilerGeneratedAttribute]
protected virtual IMutableEntityType get_RelatedEntityType();
    [CompilerGeneratedAttribute]
protected virtual InternalForeignKeyBuilder get_Builder();
    [CompilerGeneratedAttribute]
protected virtual void set_Builder(InternalForeignKeyBuilder value);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder>.get_Instance();
    public virtual IMutableForeignKey get_Metadata();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder : object {
    [CompilerGeneratedAttribute]
private InternalKeyBuilder <Builder>k__BackingField;
    private IConventionKeyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder>.Instance { get; }
    private InternalKeyBuilder Builder { get; }
    public IMutableKey Metadata { get; }
    [EntityFrameworkInternalAttribute]
public KeyBuilder(IMutableKey key);
    private sealed virtual override IConventionKeyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder>.get_Instance();
    [CompilerGeneratedAttribute]
private InternalKeyBuilder get_Builder();
    public virtual IMutableKey get_Metadata();
    public virtual KeyBuilder HasAnnotation(string annotation, object value);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder`1 : KeyBuilder {
    [EntityFrameworkInternalAttribute]
public KeyBuilder`1(IMutableKey key);
    public virtual KeyBuilder`1<T> HasAnnotation(string annotation, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.NavigationBuilder : object {
    [CompilerGeneratedAttribute]
private InternalNavigationBuilder <InternalNavigationBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalSkipNavigationBuilder <InternalSkipNavigationBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private IMutableNavigationBase <Metadata>k__BackingField;
    [NullableAttribute("2")]
private InternalNavigationBuilder InternalNavigationBuilder { get; private set; }
    [NullableAttribute("2")]
private InternalSkipNavigationBuilder InternalSkipNavigationBuilder { get; }
    public IMutableNavigationBase Metadata { get; }
    [NullableAttribute("2")]
private IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder>.Instance { get; }
    [NullableAttribute("2")]
private IConventionNavigationBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionNavigationBuilder>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public NavigationBuilder(IMutableNavigationBase navigationOrSkipNavigation);
    [CompilerGeneratedAttribute]
private InternalNavigationBuilder get_InternalNavigationBuilder();
    [CompilerGeneratedAttribute]
private void set_InternalNavigationBuilder(InternalNavigationBuilder value);
    [CompilerGeneratedAttribute]
private InternalSkipNavigationBuilder get_InternalSkipNavigationBuilder();
    [CompilerGeneratedAttribute]
public virtual IMutableNavigationBase get_Metadata();
    public virtual NavigationBuilder HasAnnotation(string annotation, object value);
    public virtual NavigationBuilder UsePropertyAccessMode(PropertyAccessMode propertyAccessMode);
    public virtual NavigationBuilder HasField(string fieldName);
    public virtual NavigationBuilder AutoInclude(bool autoInclude);
    public virtual NavigationBuilder IsRequired(bool required);
    private sealed virtual override IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder>.get_Instance();
    private sealed virtual override IConventionNavigationBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionNavigationBuilder>.get_Instance();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.NavigationBuilder`2 : NavigationBuilder {
    [EntityFrameworkInternalAttribute]
public NavigationBuilder`2(IMutableNavigationBase navigationOrSkipNavigation);
    public virtual NavigationBuilder`2<TSource, TTarget> HasAnnotation(string annotation, object value);
    public virtual NavigationBuilder`2<TSource, TTarget> UsePropertyAccessMode(PropertyAccessMode propertyAccessMode);
    public virtual NavigationBuilder`2<TSource, TTarget> HasField(string fieldName);
    public virtual NavigationBuilder`2<TSource, TTarget> AutoInclude(bool autoInclude);
    public virtual NavigationBuilder`2<TSource, TTarget> IsRequired(bool required);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedEntityTypeBuilder : object {
    [EditorBrowsableAttribute("1")]
public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
public class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedEntityTypeBuilder`1 : OwnedEntityTypeBuilder {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder : object {
    private InternalForeignKeyBuilder _builder;
    private EntityType _dependentEntityType;
    [CompilerGeneratedAttribute]
private EntityType <PrincipalEntityType>k__BackingField;
    [EntityFrameworkInternalAttribute]
protected EntityType PrincipalEntityType { get; }
    [EntityFrameworkInternalAttribute]
protected EntityType DependentEntityType { get; }
    [EntityFrameworkInternalAttribute]
protected InternalForeignKeyBuilder Builder { get; private set; }
    private IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder>.Instance { get; }
    public IMutableForeignKey Metadata { get; }
    public IMutableEntityType OwnedEntityType { get; }
    [EntityFrameworkInternalAttribute]
public OwnedNavigationBuilder(IMutableForeignKey ownership);
    [CompilerGeneratedAttribute]
protected virtual EntityType get_PrincipalEntityType();
    protected virtual EntityType get_DependentEntityType();
    protected virtual InternalForeignKeyBuilder get_Builder();
    private void set_Builder(InternalForeignKeyBuilder value);
    [EntityFrameworkInternalAttribute]
protected virtual T UpdateBuilder(Func`1<T> configure);
    private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder>.get_Instance();
    public virtual IMutableForeignKey get_Metadata();
    public virtual IMutableEntityType get_OwnedEntityType();
    public virtual OwnedNavigationBuilder HasAnnotation(string annotation, object value);
    public virtual KeyBuilder HasKey(String[] propertyNames);
    public virtual PropertyBuilder Property(string propertyName);
    public virtual PropertyBuilder`1<TProperty> Property(string propertyName);
    public virtual PropertyBuilder Property(Type propertyType, string propertyName);
    public virtual PropertyBuilder`1<TProperty> IndexerProperty(string propertyName);
    public virtual PropertyBuilder IndexerProperty(Type propertyType, string propertyName);
    public virtual NavigationBuilder Navigation(string navigationName);
    public virtual OwnedNavigationBuilder Ignore(string propertyName);
    public virtual IndexBuilder HasIndex(String[] propertyNames);
    public virtual OwnershipBuilder WithOwner(string ownerReference);
    public virtual OwnedNavigationBuilder OwnsOne(string ownedTypeName, string navigationName);
    public virtual OwnedNavigationBuilder OwnsOne(string ownedTypeName, Type ownedType, string navigationName);
    public virtual OwnedNavigationBuilder OwnsOne(Type ownedType, string navigationName);
    public virtual OwnedNavigationBuilder OwnsOne(string ownedTypeName, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    public virtual OwnedNavigationBuilder OwnsOne(string ownedTypeName, Type ownedType, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    public virtual OwnedNavigationBuilder OwnsOne(Type ownedType, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    private OwnedNavigationBuilder OwnsOneBuilder(TypeIdentity& ownedType, string navigationName);
    public virtual OwnedNavigationBuilder OwnsMany(string ownedTypeName, string navigationName);
    public virtual OwnedNavigationBuilder OwnsMany(string ownedTypeName, Type ownedType, string navigationName);
    public virtual OwnedNavigationBuilder OwnsMany(Type ownedType, string navigationName);
    public virtual OwnedNavigationBuilder OwnsMany(string ownedTypeName, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    public virtual OwnedNavigationBuilder OwnsMany(string ownedTypeName, Type ownedType, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    public virtual OwnedNavigationBuilder OwnsMany(Type ownedType, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    private OwnedNavigationBuilder OwnsManyBuilder(TypeIdentity& ownedType, string navigationName);
    public virtual ReferenceNavigationBuilder HasOne(string relatedTypeName, string navigationName);
    [RequiresUnreferencedCodeAttribute("Use an overload that accepts a type")]
public virtual ReferenceNavigationBuilder HasOne(string navigationName);
    public virtual ReferenceNavigationBuilder HasOne(Type relatedType, string navigationName);
    [EntityFrameworkInternalAttribute]
protected virtual EntityType FindRelatedEntityType(string relatedTypeName, string navigationName);
    [EntityFrameworkInternalAttribute]
protected virtual EntityType FindRelatedEntityType(Type relatedType, string navigationName);
    public virtual OwnedNavigationBuilder HasChangeTrackingStrategy(ChangeTrackingStrategy changeTrackingStrategy);
    public virtual OwnedNavigationBuilder UsePropertyAccessMode(PropertyAccessMode propertyAccessMode);
    public virtual DataBuilder HasData(Object[] data);
    public virtual DataBuilder HasData(IEnumerable`1<object> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder`2 : OwnedNavigationBuilder {
    [EntityFrameworkInternalAttribute]
public OwnedNavigationBuilder`2(IMutableForeignKey ownership);
    public virtual OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> HasAnnotation(string annotation, object value);
    public virtual KeyBuilder`1<TDependentEntity> HasKey(Expression`1<Func`2<TDependentEntity, object>> keyExpression);
    public virtual KeyBuilder`1<TDependentEntity> HasKey(String[] propertyNames);
    public virtual PropertyBuilder`1<TProperty> Property(Expression`1<Func`2<TDependentEntity, TProperty>> propertyExpression);
    public virtual NavigationBuilder`2<TDependentEntity, TNavigation> Navigation(Expression`1<Func`2<TDependentEntity, TNavigation>> navigationExpression);
    public virtual NavigationBuilder`2<TDependentEntity, TNavigation> Navigation(Expression`1<Func`2<TDependentEntity, IEnumerable`1<TNavigation>>> navigationExpression);
    public virtual OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> Ignore(string propertyName);
    public virtual OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> Ignore(Expression`1<Func`2<TDependentEntity, object>> propertyExpression);
    public virtual IndexBuilder`1<TDependentEntity> HasIndex(Expression`1<Func`2<TDependentEntity, object>> indexExpression);
    public virtual IndexBuilder`1<TDependentEntity> HasIndex(String[] propertyNames);
    public virtual OwnershipBuilder`2<TOwnerEntity, TDependentEntity> WithOwner(string ownerReference);
    public virtual OwnershipBuilder`2<TOwnerEntity, TDependentEntity> WithOwner(Expression`1<Func`2<TDependentEntity, TOwnerEntity>> referenceExpression);
    public virtual OwnedNavigationBuilder`2<TDependentEntity, TNewDependentEntity> OwnsOne(string navigationName);
    public virtual OwnedNavigationBuilder`2<TDependentEntity, TNewDependentEntity> OwnsOne(string ownedTypeName, string navigationName);
    public virtual OwnedNavigationBuilder`2<TDependentEntity, TNewDependentEntity> OwnsOne(Expression`1<Func`2<TDependentEntity, TNewDependentEntity>> navigationExpression);
    public virtual OwnedNavigationBuilder`2<TDependentEntity, TNewDependentEntity> OwnsOne(string ownedTypeName, Expression`1<Func`2<TDependentEntity, TNewDependentEntity>> navigationExpression);
    public virtual OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> OwnsOne(string navigationName, Action`1<OwnedNavigationBuilder`2<TDependentEntity, TNewDependentEntity>> buildAction);
    public virtual OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> OwnsOne(string ownedTypeName, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    public virtual OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> OwnsOne(string ownedTypeName, Type ownedType, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    public virtual OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> OwnsOne(Type ownedType, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    public virtual OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> OwnsOne(string ownedTypeName, string navigationName, Action`1<OwnedNavigationBuilder`2<TDependentEntity, TNewDependentEntity>> buildAction);
    public virtual OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> OwnsOne(Expression`1<Func`2<TDependentEntity, TNewDependentEntity>> navigationExpression, Action`1<OwnedNavigationBuilder`2<TDependentEntity, TNewDependentEntity>> buildAction);
    public virtual OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> OwnsOne(string ownedTypeName, Expression`1<Func`2<TDependentEntity, TNewDependentEntity>> navigationExpression, Action`1<OwnedNavigationBuilder`2<TDependentEntity, TNewDependentEntity>> buildAction);
    private OwnedNavigationBuilder`2<TDependentEntity, TNewDependentEntity> OwnsOneBuilder(TypeIdentity ownedType, MemberIdentity navigation);
    public virtual OwnedNavigationBuilder`2<TDependentEntity, TNewDependentEntity> OwnsMany(string navigationName);
    public virtual OwnedNavigationBuilder`2<TDependentEntity, TNewDependentEntity> OwnsMany(string ownedTypeName, string navigationName);
    public virtual OwnedNavigationBuilder`2<TDependentEntity, TNewDependentEntity> OwnsMany(Expression`1<Func`2<TDependentEntity, IEnumerable`1<TNewDependentEntity>>> navigationExpression);
    public virtual OwnedNavigationBuilder`2<TDependentEntity, TNewDependentEntity> OwnsMany(string ownedTypeName, Expression`1<Func`2<TDependentEntity, IEnumerable`1<TNewDependentEntity>>> navigationExpression);
    public virtual OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> OwnsMany(string navigationName, Action`1<OwnedNavigationBuilder`2<TDependentEntity, TNewDependentEntity>> buildAction);
    public virtual OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> OwnsMany(string ownedTypeName, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    public virtual OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> OwnsMany(Type ownedType, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    public virtual OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> OwnsMany(string ownedTypeName, Type ownedType, string navigationName, Action`1<OwnedNavigationBuilder> buildAction);
    public virtual OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> OwnsMany(string ownedTypeName, string navigationName, Action`1<OwnedNavigationBuilder`2<TDependentEntity, TNewDependentEntity>> buildAction);
    public virtual OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> OwnsMany(Expression`1<Func`2<TDependentEntity, IEnumerable`1<TNewDependentEntity>>> navigationExpression, Action`1<OwnedNavigationBuilder`2<TDependentEntity, TNewDependentEntity>> buildAction);
    public virtual OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> OwnsMany(string ownedTypeName, Expression`1<Func`2<TDependentEntity, IEnumerable`1<TNewDependentEntity>>> navigationExpression, Action`1<OwnedNavigationBuilder`2<TDependentEntity, TNewDependentEntity>> buildAction);
    private OwnedNavigationBuilder`2<TDependentEntity, TNewRelatedEntity> OwnsManyBuilder(TypeIdentity ownedType, MemberIdentity navigation);
    public virtual ReferenceNavigationBuilder`2<TDependentEntity, TNewRelatedEntity> HasOne(string navigationName);
    public virtual ReferenceNavigationBuilder`2<TDependentEntity, TNewRelatedEntity> HasOne(Expression`1<Func`2<TDependentEntity, TNewRelatedEntity>> navigationExpression);
    public virtual OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> HasChangeTrackingStrategy(ChangeTrackingStrategy changeTrackingStrategy);
    public virtual OwnedNavigationBuilder`2<TOwnerEntity, TDependentEntity> UsePropertyAccessMode(PropertyAccessMode propertyAccessMode);
    public virtual DataBuilder`1<TDependentEntity> HasData(TDependentEntity[] data);
    public virtual DataBuilder`1<TDependentEntity> HasData(IEnumerable`1<TDependentEntity> data);
    public virtual DataBuilder`1<TDependentEntity> HasData(Object[] data);
    public virtual DataBuilder`1<TDependentEntity> HasData(IEnumerable`1<object> data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder : RelationshipBuilderBase {
    [EntityFrameworkInternalAttribute]
public OwnershipBuilder(IMutableEntityType principalEntityType, IMutableEntityType dependentEntityType, IMutableForeignKey foreignKey);
    [EntityFrameworkInternalAttribute]
protected OwnershipBuilder(InternalForeignKeyBuilder builder, OwnershipBuilder oldBuilder, bool foreignKeySet, bool principalKeySet, bool requiredSet);
    public virtual OwnershipBuilder HasAnnotation(string annotation, object value);
    public virtual OwnershipBuilder HasForeignKey(String[] foreignKeyPropertyNames);
    public virtual OwnershipBuilder HasPrincipalKey(String[] keyPropertyNames);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder`2 : OwnershipBuilder {
    [EntityFrameworkInternalAttribute]
public OwnershipBuilder`2(IMutableEntityType principalEntityType, IMutableEntityType dependentEntityType, IMutableForeignKey foreignKey);
    [EntityFrameworkInternalAttribute]
protected OwnershipBuilder`2(InternalForeignKeyBuilder builder, OwnershipBuilder oldBuilder, bool foreignKeySet, bool principalKeySet, bool requiredSet);
    public virtual OwnershipBuilder`2<TEntity, TDependentEntity> HasAnnotation(string annotation, object value);
    public virtual OwnershipBuilder`2<TEntity, TDependentEntity> HasForeignKey(String[] foreignKeyPropertyNames);
    public virtual OwnershipBuilder`2<TEntity, TDependentEntity> HasForeignKey(Expression`1<Func`2<TDependentEntity, object>> foreignKeyExpression);
    public virtual OwnershipBuilder`2<TEntity, TDependentEntity> HasPrincipalKey(String[] keyPropertyNames);
    public virtual OwnershipBuilder`2<TEntity, TDependentEntity> HasPrincipalKey(Expression`1<Func`2<TEntity, object>> keyExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder : object {
    [CompilerGeneratedAttribute]
private PropertyConfiguration <Configuration>k__BackingField;
    [EntityFrameworkInternalAttribute]
protected PropertyConfiguration Configuration { get; }
    [EntityFrameworkInternalAttribute]
public PropertiesConfigurationBuilder(PropertyConfiguration property);
    [CompilerGeneratedAttribute]
protected virtual PropertyConfiguration get_Configuration();
    public virtual PropertiesConfigurationBuilder HaveAnnotation(string annotation, object value);
    public virtual PropertiesConfigurationBuilder HaveMaxLength(int maxLength);
    public virtual PropertiesConfigurationBuilder HavePrecision(int precision, int scale);
    public virtual PropertiesConfigurationBuilder HavePrecision(int precision);
    public virtual PropertiesConfigurationBuilder AreUnicode(bool unicode);
    public virtual PropertiesConfigurationBuilder HaveConversion();
    public virtual PropertiesConfigurationBuilder HaveConversion(Type conversionType);
    public virtual PropertiesConfigurationBuilder HaveConversion();
    public virtual PropertiesConfigurationBuilder HaveConversion();
    public virtual PropertiesConfigurationBuilder HaveConversion(Type conversionType, Type comparerType);
    public virtual PropertiesConfigurationBuilder HaveConversion(Type conversionType, Type comparerType, Type providerComparerType);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertiesConfigurationBuilder`1 : PropertiesConfigurationBuilder {
    [EntityFrameworkInternalAttribute]
public PropertiesConfigurationBuilder`1(PropertyConfiguration property);
    public virtual PropertiesConfigurationBuilder`1<TProperty> HaveAnnotation(string annotation, object value);
    public virtual PropertiesConfigurationBuilder`1<TProperty> HaveMaxLength(int maxLength);
    public virtual PropertiesConfigurationBuilder`1<TProperty> HavePrecision(int precision, int scale);
    public virtual PropertiesConfigurationBuilder`1<TProperty> HavePrecision(int precision);
    public virtual PropertiesConfigurationBuilder`1<TProperty> AreUnicode(bool unicode);
    public virtual PropertiesConfigurationBuilder`1<TProperty> HaveConversion();
    public virtual PropertiesConfigurationBuilder`1<TProperty> HaveConversion(Type conversionType);
    public virtual PropertiesConfigurationBuilder`1<TProperty> HaveConversion();
    public virtual PropertiesConfigurationBuilder`1<TProperty> HaveConversion(Type conversionType, Type comparerType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder : object {
    [CompilerGeneratedAttribute]
private InternalPropertyBuilder <Builder>k__BackingField;
    private IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder>.Instance { get; }
    private InternalPropertyBuilder Builder { get; }
    public IMutableProperty Metadata { get; }
    [EntityFrameworkInternalAttribute]
public PropertyBuilder(IMutableProperty property);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder>.get_Instance();
    [CompilerGeneratedAttribute]
private InternalPropertyBuilder get_Builder();
    public virtual IMutableProperty get_Metadata();
    public virtual PropertyBuilder HasAnnotation(string annotation, object value);
    public virtual PropertyBuilder IsRequired(bool required);
    public virtual PropertyBuilder HasMaxLength(int maxLength);
    public virtual PropertyBuilder HasPrecision(int precision, int scale);
    public virtual PropertyBuilder HasPrecision(int precision);
    public virtual PropertyBuilder IsUnicode(bool unicode);
    public virtual PropertyBuilder IsRowVersion();
    public virtual PropertyBuilder HasValueGenerator();
    public virtual PropertyBuilder HasValueGenerator(Type valueGeneratorType);
    public virtual PropertyBuilder HasValueGenerator(Func`3<IProperty, IEntityType, ValueGenerator> factory);
    public virtual PropertyBuilder HasValueGeneratorFactory();
    public virtual PropertyBuilder HasValueGeneratorFactory(Type valueGeneratorFactoryType);
    public virtual PropertyBuilder IsConcurrencyToken(bool concurrencyToken);
    public virtual PropertyBuilder ValueGeneratedNever();
    public virtual PropertyBuilder ValueGeneratedOnAdd();
    public virtual PropertyBuilder ValueGeneratedOnAddOrUpdate();
    public virtual PropertyBuilder ValueGeneratedOnUpdate();
    public virtual PropertyBuilder ValueGeneratedOnUpdateSometimes();
    public virtual PropertyBuilder HasField(string fieldName);
    public virtual PropertyBuilder UsePropertyAccessMode(PropertyAccessMode propertyAccessMode);
    public virtual PropertyBuilder HasConversion();
    public virtual PropertyBuilder HasConversion(Type conversionType);
    public virtual PropertyBuilder HasConversion(ValueConverter converter);
    [NullableContextAttribute("2")]
public virtual PropertyBuilder HasConversion(ValueComparer valueComparer);
    [NullableContextAttribute("2")]
public virtual PropertyBuilder HasConversion(ValueComparer valueComparer, ValueComparer providerComparer);
    public virtual PropertyBuilder HasConversion(Type conversionType, ValueComparer valueComparer);
    public virtual PropertyBuilder HasConversion(Type conversionType, ValueComparer valueComparer, ValueComparer providerComparer);
    [NullableContextAttribute("2")]
public virtual PropertyBuilder HasConversion(ValueConverter converter, ValueComparer valueComparer);
    [NullableContextAttribute("2")]
public virtual PropertyBuilder HasConversion(ValueConverter converter, ValueComparer valueComparer, ValueComparer providerComparer);
    public virtual PropertyBuilder HasConversion();
    public virtual PropertyBuilder HasConversion();
    public virtual PropertyBuilder HasConversion(Type conversionType, Type comparerType);
    public virtual PropertyBuilder HasConversion(Type conversionType, Type comparerType, Type providerComparerType);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1 : PropertyBuilder {
    [EntityFrameworkInternalAttribute]
public PropertyBuilder`1(IMutableProperty property);
    public virtual PropertyBuilder`1<TProperty> HasAnnotation(string annotation, object value);
    public virtual PropertyBuilder`1<TProperty> IsRequired(bool required);
    public virtual PropertyBuilder`1<TProperty> HasMaxLength(int maxLength);
    public virtual PropertyBuilder`1<TProperty> HasPrecision(int precision, int scale);
    public virtual PropertyBuilder`1<TProperty> HasPrecision(int precision);
    public virtual PropertyBuilder`1<TProperty> IsUnicode(bool unicode);
    public virtual PropertyBuilder`1<TProperty> IsRowVersion();
    public virtual PropertyBuilder`1<TProperty> HasValueGenerator();
    public virtual PropertyBuilder`1<TProperty> HasValueGenerator(Type valueGeneratorType);
    public virtual PropertyBuilder`1<TProperty> HasValueGenerator(Func`3<IProperty, IEntityType, ValueGenerator> factory);
    public virtual PropertyBuilder`1<TProperty> HasValueGeneratorFactory();
    public virtual PropertyBuilder`1<TProperty> HasValueGeneratorFactory(Type valueGeneratorFactoryType);
    public virtual PropertyBuilder`1<TProperty> IsConcurrencyToken(bool concurrencyToken);
    public virtual PropertyBuilder`1<TProperty> ValueGeneratedNever();
    public virtual PropertyBuilder`1<TProperty> ValueGeneratedOnAdd();
    public virtual PropertyBuilder`1<TProperty> ValueGeneratedOnAddOrUpdate();
    public virtual PropertyBuilder`1<TProperty> ValueGeneratedOnUpdate();
    public virtual PropertyBuilder`1<TProperty> ValueGeneratedOnUpdateSometimes();
    public virtual PropertyBuilder`1<TProperty> HasField(string fieldName);
    public virtual PropertyBuilder`1<TProperty> UsePropertyAccessMode(PropertyAccessMode propertyAccessMode);
    public virtual PropertyBuilder`1<TProperty> HasConversion();
    public virtual PropertyBuilder`1<TProperty> HasConversion(Type providerClrType);
    public virtual PropertyBuilder`1<TProperty> HasConversion(Expression`1<Func`2<TProperty, TProvider>> convertToProviderExpression, Expression`1<Func`2<TProvider, TProperty>> convertFromProviderExpression);
    public virtual PropertyBuilder`1<TProperty> HasConversion(ValueConverter`2<TProperty, TProvider> converter);
    public virtual PropertyBuilder`1<TProperty> HasConversion(ValueConverter converter);
    [NullableContextAttribute("2")]
public virtual PropertyBuilder`1<TProperty> HasConversion(ValueComparer valueComparer);
    [NullableContextAttribute("2")]
public virtual PropertyBuilder`1<TProperty> HasConversion(ValueComparer valueComparer, ValueComparer providerComparer);
    public virtual PropertyBuilder`1<TProperty> HasConversion(Type conversionType, ValueComparer valueComparer);
    public virtual PropertyBuilder`1<TProperty> HasConversion(Type conversionType, ValueComparer valueComparer, ValueComparer providerComparer);
    public virtual PropertyBuilder`1<TProperty> HasConversion(Expression`1<Func`2<TProperty, TProvider>> convertToProviderExpression, Expression`1<Func`2<TProvider, TProperty>> convertFromProviderExpression, ValueComparer valueComparer);
    public virtual PropertyBuilder`1<TProperty> HasConversion(Expression`1<Func`2<TProperty, TProvider>> convertToProviderExpression, Expression`1<Func`2<TProvider, TProperty>> convertFromProviderExpression, ValueComparer valueComparer, ValueComparer providerComparer);
    [NullableContextAttribute("2")]
public virtual PropertyBuilder`1<TProperty> HasConversion(ValueConverter`2<TProperty, TProvider> converter, ValueComparer valueComparer);
    [NullableContextAttribute("2")]
public virtual PropertyBuilder`1<TProperty> HasConversion(ValueConverter`2<TProperty, TProvider> converter, ValueComparer valueComparer, ValueComparer providerComparer);
    [NullableContextAttribute("2")]
public virtual PropertyBuilder`1<TProperty> HasConversion(ValueConverter converter, ValueComparer valueComparer);
    [NullableContextAttribute("2")]
public virtual PropertyBuilder`1<TProperty> HasConversion(ValueConverter converter, ValueComparer valueComparer, ValueComparer providerComparer);
    public virtual PropertyBuilder`1<TProperty> HasConversion();
    public virtual PropertyBuilder`1<TProperty> HasConversion();
    public virtual PropertyBuilder`1<TProperty> HasConversion(Type conversionType, Type comparerType);
    public virtual PropertyBuilder`1<TProperty> HasConversion(Type conversionType, Type comparerType, Type providerComparerType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder : RelationshipBuilderBase {
    [EntityFrameworkInternalAttribute]
public ReferenceCollectionBuilder(IMutableEntityType principalEntityType, IMutableEntityType dependentEntityType, IMutableForeignKey foreignKey);
    [EntityFrameworkInternalAttribute]
protected ReferenceCollectionBuilder(InternalForeignKeyBuilder builder, ReferenceCollectionBuilder oldBuilder, bool foreignKeySet, bool principalKeySet, bool requiredSet);
    public virtual ReferenceCollectionBuilder HasAnnotation(string annotation, object value);
    public virtual ReferenceCollectionBuilder HasForeignKey(String[] foreignKeyPropertyNames);
    [EntityFrameworkInternalAttribute]
protected virtual InternalForeignKeyBuilder HasForeignKeyBuilder(IReadOnlyList`1<string> foreignKeyPropertyNames);
    [EntityFrameworkInternalAttribute]
protected virtual InternalForeignKeyBuilder HasForeignKeyBuilder(IReadOnlyList`1<MemberInfo> foreignKeyMembers);
    public virtual ReferenceCollectionBuilder HasPrincipalKey(String[] keyPropertyNames);
    [EntityFrameworkInternalAttribute]
protected virtual InternalForeignKeyBuilder HasPrincipalKeyBuilder(IReadOnlyList`1<string> keyPropertyNames);
    [EntityFrameworkInternalAttribute]
protected virtual InternalForeignKeyBuilder HasPrincipalKeyBuilder(IReadOnlyList`1<MemberInfo> keyMembers);
    public virtual ReferenceCollectionBuilder IsRequired(bool required);
    public virtual ReferenceCollectionBuilder OnDelete(DeleteBehavior deleteBehavior);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder`2 : ReferenceCollectionBuilder {
    [EntityFrameworkInternalAttribute]
public ReferenceCollectionBuilder`2(IMutableEntityType principalEntityType, IMutableEntityType dependentEntityType, IMutableForeignKey foreignKey);
    [EntityFrameworkInternalAttribute]
protected ReferenceCollectionBuilder`2(InternalForeignKeyBuilder builder, ReferenceCollectionBuilder oldBuilder, bool foreignKeySet, bool principalKeySet, bool requiredSet);
    public virtual ReferenceCollectionBuilder`2<TPrincipalEntity, TDependentEntity> HasAnnotation(string annotation, object value);
    public virtual ReferenceCollectionBuilder`2<TPrincipalEntity, TDependentEntity> HasForeignKey(String[] foreignKeyPropertyNames);
    public virtual ReferenceCollectionBuilder`2<TPrincipalEntity, TDependentEntity> HasForeignKey(Expression`1<Func`2<TDependentEntity, object>> foreignKeyExpression);
    public virtual ReferenceCollectionBuilder`2<TPrincipalEntity, TDependentEntity> HasPrincipalKey(String[] keyPropertyNames);
    public virtual ReferenceCollectionBuilder`2<TPrincipalEntity, TDependentEntity> HasPrincipalKey(Expression`1<Func`2<TPrincipalEntity, object>> keyExpression);
    public virtual ReferenceCollectionBuilder`2<TPrincipalEntity, TDependentEntity> IsRequired(bool required);
    public virtual ReferenceCollectionBuilder`2<TPrincipalEntity, TDependentEntity> OnDelete(DeleteBehavior deleteBehavior);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder : object {
    [CompilerGeneratedAttribute]
private InternalForeignKeyBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReferenceName>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfo <ReferenceMember>k__BackingField;
    [CompilerGeneratedAttribute]
private IMutableEntityType <RelatedEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private IMutableEntityType <DeclaringEntityType>k__BackingField;
    [EntityFrameworkInternalAttribute]
protected InternalForeignKeyBuilder Builder { get; }
    [NullableAttribute("2")]
[EntityFrameworkInternalAttribute]
protected string ReferenceName { get; }
    [NullableAttribute("2")]
[EntityFrameworkInternalAttribute]
protected MemberInfo ReferenceMember { get; }
    [EntityFrameworkInternalAttribute]
protected IMutableEntityType RelatedEntityType { get; }
    [EntityFrameworkInternalAttribute]
protected IMutableEntityType DeclaringEntityType { get; }
    private IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder>.Instance { get; }
    [EntityFrameworkInternalAttribute]
public ReferenceNavigationBuilder(IMutableEntityType declaringEntityType, IMutableEntityType relatedEntityType, string navigationName, IMutableForeignKey foreignKey);
    [EntityFrameworkInternalAttribute]
public ReferenceNavigationBuilder(IMutableEntityType declaringEntityType, IMutableEntityType relatedEntityType, MemberInfo navigationMemberInfo, IMutableForeignKey foreignKey);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
protected virtual InternalForeignKeyBuilder get_Builder();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
protected virtual string get_ReferenceName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
protected virtual MemberInfo get_ReferenceMember();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
protected virtual IMutableEntityType get_RelatedEntityType();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
protected virtual IMutableEntityType get_DeclaringEntityType();
    private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder>.get_Instance();
    public virtual ReferenceCollectionBuilder WithMany(string collection);
    [EntityFrameworkInternalAttribute]
protected virtual InternalForeignKeyBuilder WithManyBuilder(string navigationName);
    [EntityFrameworkInternalAttribute]
protected virtual InternalForeignKeyBuilder WithManyBuilder(MemberInfo navigationMemberInfo);
    private InternalForeignKeyBuilder WithManyBuilder(MemberIdentity collection);
    public virtual ReferenceReferenceBuilder WithOne(string reference);
    [EntityFrameworkInternalAttribute]
protected virtual InternalForeignKeyBuilder WithOneBuilder(string navigationName);
    [EntityFrameworkInternalAttribute]
protected virtual InternalForeignKeyBuilder WithOneBuilder(MemberInfo navigationMemberInfo);
    private InternalForeignKeyBuilder WithOneBuilder(MemberIdentity reference);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceNavigationBuilder`2 : ReferenceNavigationBuilder {
    [EntityFrameworkInternalAttribute]
public ReferenceNavigationBuilder`2(IMutableEntityType declaringEntityType, IMutableEntityType relatedEntityType, string navigationName, IMutableForeignKey foreignKey);
    [EntityFrameworkInternalAttribute]
public ReferenceNavigationBuilder`2(IMutableEntityType declaringEntityType, IMutableEntityType relatedEntityType, MemberInfo navigationMemberInfo, IMutableForeignKey foreignKey);
    public virtual ReferenceCollectionBuilder`2<TRelatedEntity, TEntity> WithMany(string navigationName);
    public virtual ReferenceCollectionBuilder`2<TRelatedEntity, TEntity> WithMany(Expression`1<Func`2<TRelatedEntity, IEnumerable`1<TEntity>>> navigationExpression);
    public virtual ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> WithOne(string navigationName);
    public virtual ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> WithOne(Expression`1<Func`2<TRelatedEntity, TEntity>> navigationExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder : InvertibleRelationshipBuilderBase {
    [EntityFrameworkInternalAttribute]
public ReferenceReferenceBuilder(IMutableEntityType declaringEntityType, IMutableEntityType relatedEntityType, IMutableForeignKey foreignKey);
    [EntityFrameworkInternalAttribute]
protected ReferenceReferenceBuilder(InternalForeignKeyBuilder builder, ReferenceReferenceBuilder oldBuilder, bool inverted, bool foreignKeySet, bool principalKeySet, bool requiredSet);
    public virtual ReferenceReferenceBuilder HasAnnotation(string annotation, object value);
    public virtual ReferenceReferenceBuilder HasForeignKey(string dependentEntityTypeName, String[] foreignKeyPropertyNames);
    public virtual ReferenceReferenceBuilder HasForeignKey(Type dependentEntityType, String[] foreignKeyPropertyNames);
    [EntityFrameworkInternalAttribute]
protected virtual InternalForeignKeyBuilder HasForeignKeyBuilder(EntityType dependentEntityType, string dependentEntityTypeName, IReadOnlyList`1<string> foreignKeyPropertyNames);
    [EntityFrameworkInternalAttribute]
protected virtual InternalForeignKeyBuilder HasForeignKeyBuilder(EntityType dependentEntityType, string dependentEntityTypeName, IReadOnlyList`1<MemberInfo> foreignKeyMembers);
    private InternalForeignKeyBuilder HasForeignKeyBuilder(EntityType dependentEntityType, string dependentEntityTypeName, Func`3<InternalForeignKeyBuilder, EntityType, InternalForeignKeyBuilder> hasForeignKey);
    public virtual ReferenceReferenceBuilder HasPrincipalKey(string principalEntityTypeName, String[] keyPropertyNames);
    public virtual ReferenceReferenceBuilder HasPrincipalKey(Type principalEntityType, String[] keyPropertyNames);
    [EntityFrameworkInternalAttribute]
protected virtual InternalForeignKeyBuilder HasPrincipalKeyBuilder(EntityType principalEntityType, string principalEntityTypeName, IReadOnlyList`1<string> foreignKeyPropertyNames);
    [EntityFrameworkInternalAttribute]
protected virtual InternalForeignKeyBuilder HasPrincipalKeyBuilder(EntityType principalEntityType, string principalEntityTypeName, IReadOnlyList`1<MemberInfo> foreignKeyMembers);
    private InternalForeignKeyBuilder HasPrincipalKeyBuilder(EntityType principalEntityType, string principalEntityTypeName, Func`2<InternalForeignKeyBuilder, InternalForeignKeyBuilder> hasPrincipalKey);
    [EntityFrameworkInternalAttribute]
protected virtual EntityType ResolveEntityType(string entityTypeName);
    [EntityFrameworkInternalAttribute]
protected virtual EntityType ResolveEntityType(Type entityType);
    private EntityType GetOtherEntityType(EntityType entityType);
    public virtual ReferenceReferenceBuilder IsRequired(bool required);
    public virtual ReferenceReferenceBuilder OnDelete(DeleteBehavior deleteBehavior);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder`2 : ReferenceReferenceBuilder {
    [EntityFrameworkInternalAttribute]
public ReferenceReferenceBuilder`2(IMutableEntityType declaringEntityType, IMutableEntityType relatedEntityType, IMutableForeignKey foreignKey);
    [EntityFrameworkInternalAttribute]
protected ReferenceReferenceBuilder`2(InternalForeignKeyBuilder builder, ReferenceReferenceBuilder oldBuilder, bool inverted, bool foreignKeySet, bool principalKeySet, bool requiredSet);
    public virtual ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> HasAnnotation(string annotation, object value);
    public virtual ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> HasForeignKey(string dependentEntityTypeName, String[] foreignKeyPropertyNames);
    public virtual ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> HasForeignKey(Type dependentEntityType, String[] foreignKeyPropertyNames);
    public virtual ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> HasForeignKey(String[] foreignKeyPropertyNames);
    public virtual ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> HasForeignKey(Expression`1<Func`2<TDependentEntity, object>> foreignKeyExpression);
    public virtual ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> HasPrincipalKey(string principalEntityTypeName, String[] keyPropertyNames);
    public virtual ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> HasPrincipalKey(Type principalEntityType, String[] keyPropertyNames);
    public virtual ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> HasPrincipalKey(String[] keyPropertyNames);
    public virtual ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> HasPrincipalKey(Expression`1<Func`2<TPrincipalEntity, object>> keyExpression);
    public virtual ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> IsRequired(bool required);
    public virtual ReferenceReferenceBuilder`2<TEntity, TRelatedEntity> OnDelete(DeleteBehavior deleteBehavior);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Metadata.Builders.RelationshipBuilderBase : object {
    private IReadOnlyList`1<Property> _foreignKeyProperties;
    private IReadOnlyList`1<Property> _principalKeyProperties;
    private Nullable`1<bool> _required;
    [CompilerGeneratedAttribute]
private IMutableEntityType <PrincipalEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private IMutableEntityType <DependentEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private InternalForeignKeyBuilder <Builder>k__BackingField;
    [EntityFrameworkInternalAttribute]
protected IMutableEntityType PrincipalEntityType { get; }
    [EntityFrameworkInternalAttribute]
protected IMutableEntityType DependentEntityType { get; }
    [EntityFrameworkInternalAttribute]
protected InternalForeignKeyBuilder Builder { get; protected set; }
    public IMutableForeignKey Metadata { get; }
    private IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder>.Instance { get; }
    [EntityFrameworkInternalAttribute]
protected RelationshipBuilderBase(IMutableEntityType principalEntityType, IMutableEntityType dependentEntityType, IMutableForeignKey foreignKey);
    [EntityFrameworkInternalAttribute]
protected RelationshipBuilderBase(InternalForeignKeyBuilder builder, RelationshipBuilderBase oldBuilder, bool foreignKeySet, bool principalKeySet, bool requiredSet);
    [CompilerGeneratedAttribute]
protected virtual IMutableEntityType get_PrincipalEntityType();
    [CompilerGeneratedAttribute]
protected virtual IMutableEntityType get_DependentEntityType();
    [CompilerGeneratedAttribute]
protected virtual InternalForeignKeyBuilder get_Builder();
    [CompilerGeneratedAttribute]
protected virtual void set_Builder(InternalForeignKeyBuilder value);
    public virtual IMutableForeignKey get_Metadata();
    private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder>.get_Instance();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.TriggerBuilder : object {
    [CompilerGeneratedAttribute]
private InternalTriggerBuilder <InternalBuilder>k__BackingField;
    [EntityFrameworkInternalAttribute]
protected InternalTriggerBuilder InternalBuilder { get; }
    protected IConventionTriggerBuilder Builder { get; }
    private IConventionTriggerBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder>.Instance { get; }
    public IMutableTrigger Metadata { get; }
    public TriggerBuilder(IMutableTrigger trigger);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
protected virtual InternalTriggerBuilder get_InternalBuilder();
    protected virtual IConventionTriggerBuilder get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionTriggerBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder>.get_Instance();
    public virtual IMutableTrigger get_Metadata();
    public virtual TriggerBuilder HasAnnotation(string annotation, object value);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.TypeMappingConfigurationBuilder : object {
    [CompilerGeneratedAttribute]
private PropertyConfiguration <Configuration>k__BackingField;
    [EntityFrameworkInternalAttribute]
protected PropertyConfiguration Configuration { get; }
    [EntityFrameworkInternalAttribute]
public TypeMappingConfigurationBuilder(PropertyConfiguration scalar);
    [CompilerGeneratedAttribute]
protected virtual PropertyConfiguration get_Configuration();
    public virtual TypeMappingConfigurationBuilder HasAnnotation(string annotation, object value);
    public virtual TypeMappingConfigurationBuilder HasMaxLength(int maxLength);
    public virtual TypeMappingConfigurationBuilder HasPrecision(int precision, int scale);
    public virtual TypeMappingConfigurationBuilder HasPrecision(int precision);
    public virtual TypeMappingConfigurationBuilder IsUnicode(bool unicode);
    public virtual TypeMappingConfigurationBuilder HasConversion();
    public virtual TypeMappingConfigurationBuilder HasConversion(Type conversionType);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Builders.TypeMappingConfigurationBuilder`1 : TypeMappingConfigurationBuilder {
    [EntityFrameworkInternalAttribute]
public TypeMappingConfigurationBuilder`1(PropertyConfiguration scalar);
    public virtual TypeMappingConfigurationBuilder`1<TProperty> HasAnnotation(string annotation, object value);
    public virtual TypeMappingConfigurationBuilder`1<TProperty> HasMaxLength(int maxLength);
    public virtual TypeMappingConfigurationBuilder`1<TProperty> HasPrecision(int precision, int scale);
    public virtual TypeMappingConfigurationBuilder`1<TProperty> HasPrecision(int precision);
    public virtual TypeMappingConfigurationBuilder`1<TProperty> IsUnicode(bool unicode);
    public virtual TypeMappingConfigurationBuilder`1<TProperty> HasConversion();
    public virtual TypeMappingConfigurationBuilder`1<TProperty> HasConversion(Type conversionType);
}
public enum Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource : Enum {
    public int value__;
    public static ConfigurationSource Explicit;
    public static ConfigurationSource DataAnnotation;
    public static ConfigurationSource Convention;
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.ConfigurationSourceExtensions : object {
    [ExtensionAttribute]
[ContractAnnotationAttribute("oldConfigurationSource:null => true")]
public static bool Overrides(ConfigurationSource newConfigurationSource, Nullable`1<ConfigurationSource> oldConfigurationSource);
    [ExtensionAttribute]
public static bool Overrides(Nullable`1<ConfigurationSource> newConfigurationSource, Nullable`1<ConfigurationSource> oldConfigurationSource);
    [ExtensionAttribute]
public static bool OverridesStrictly(ConfigurationSource newConfigurationSource, Nullable`1<ConfigurationSource> oldConfigurationSource);
    [ExtensionAttribute]
public static bool OverridesStrictly(Nullable`1<ConfigurationSource> newConfigurationSource, Nullable`1<ConfigurationSource> oldConfigurationSource);
    [ExtensionAttribute]
[ContractAnnotationAttribute("left:notnull => notnull;right:notnull => notnull")]
public static Nullable`1<ConfigurationSource> Max(Nullable`1<ConfigurationSource> left, Nullable`1<ConfigurationSource> right);
    [ExtensionAttribute]
public static ConfigurationSource Max(ConfigurationSource left, Nullable`1<ConfigurationSource> right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.ConstructorBinding : InstantiationBinding {
    [CompilerGeneratedAttribute]
private ConstructorInfo <Constructor>k__BackingField;
    public ConstructorInfo Constructor { get; }
    public Type RuntimeType { get; }
    public ConstructorBinding(ConstructorInfo constructor, IReadOnlyList`1<ParameterBinding> parameterBindings);
    [CompilerGeneratedAttribute]
public virtual ConstructorInfo get_Constructor();
    public virtual Expression CreateConstructorExpression(ParameterBindingInfo bindingInfo);
    public virtual Type get_RuntimeType();
    public virtual InstantiationBinding With(IReadOnlyList`1<ParameterBinding> parameterBindings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.ContextParameterBinding : ServiceParameterBinding {
    public ContextParameterBinding(Type contextType, IPropertyBase[] serviceProperties);
    public virtual Expression BindToParameter(Expression materializationExpression, Expression entityTypeExpression);
    public virtual ParameterBinding With(IPropertyBase[] consumedProperties);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.BackingFieldAttributeConvention : PropertyAttributeConventionBase`1<BackingFieldAttribute> {
    public BackingFieldAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, BackingFieldAttribute attribute, MemberInfo clrMember, IConventionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.BackingFieldConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public BackingFieldConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, IConventionContext`1<IConventionPropertyBuilder> context);
    public virtual void ProcessNavigationAdded(IConventionNavigationBuilder navigationBuilder, IConventionContext`1<IConventionNavigationBuilder> context);
    public virtual void ProcessSkipNavigationAdded(IConventionSkipNavigationBuilder skipNavigationBuilder, IConventionContext`1<IConventionSkipNavigationBuilder> context);
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    private static void DiscoverField(IConventionPropertyBaseBuilder conventionPropertyBaseBuilder);
    private static FieldInfo GetFieldToSet(IConventionPropertyBase propertyBase);
    private static FieldInfo TryMatchFieldName(IConventionPropertyBase propertyBase, IConventionEntityType entityType, Type entityClrType);
    private static FieldInfo TryMatch(KeyValuePair`2[] array, string prefix, string middle, string suffix, IConventionPropertyBase propertyBase, FieldInfo existingMatch, Type entityClrType, string propertyName);
    private static int PrefixBinarySearch(KeyValuePair`2[] array, string prefix, int left, int right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.BaseTypeDiscoveryConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public BaseTypeDiscoveryConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
    private static void ProcessEntityType(IConventionEntityTypeBuilder entityTypeBuilder);
    public virtual void ProcessForeignKeyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionForeignKey foreignKey, IConventionContext`1<IConventionForeignKey> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.CascadeDeleteConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public CascadeDeleteConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessForeignKeyAdded(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<IConventionForeignKeyBuilder> context);
    public virtual void ProcessForeignKeyRequirednessChanged(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<Nullable`1<bool>> context);
    protected virtual DeleteBehavior GetTargetDeleteBehavior(IConventionForeignKey foreignKey);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.ChangeTrackingStrategyConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public ChangeTrackingStrategyConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.ConcurrencyCheckAttributeConvention : PropertyAttributeConventionBase`1<ConcurrencyCheckAttribute> {
    public ConcurrencyCheckAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, ConcurrencyCheckAttribute attribute, MemberInfo clrMember, IConventionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.ConstructorBindingConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public ConstructorBindingConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet : object {
    [CompilerGeneratedAttribute]
private List`1<IModelInitializedConvention> <ModelInitializedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IModelFinalizingConvention> <ModelFinalizingConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IModelFinalizedConvention> <ModelFinalizedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IModelAnnotationChangedConvention> <ModelAnnotationChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IEntityTypeAddedConvention> <EntityTypeAddedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IEntityTypeIgnoredConvention> <EntityTypeIgnoredConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IEntityTypeRemovedConvention> <EntityTypeRemovedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IEntityTypeMemberIgnoredConvention> <EntityTypeMemberIgnoredConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IEntityTypeBaseTypeChangedConvention> <EntityTypeBaseTypeChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IEntityTypePrimaryKeyChangedConvention> <EntityTypePrimaryKeyChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IEntityTypeAnnotationChangedConvention> <EntityTypeAnnotationChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IForeignKeyAddedConvention> <ForeignKeyAddedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IForeignKeyRemovedConvention> <ForeignKeyRemovedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IForeignKeyPrincipalEndChangedConvention> <ForeignKeyPrincipalEndChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IForeignKeyPropertiesChangedConvention> <ForeignKeyPropertiesChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IForeignKeyUniquenessChangedConvention> <ForeignKeyUniquenessChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IForeignKeyRequirednessChangedConvention> <ForeignKeyRequirednessChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IForeignKeyDependentRequirednessChangedConvention> <ForeignKeyDependentRequirednessChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IForeignKeyOwnershipChangedConvention> <ForeignKeyOwnershipChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IForeignKeyAnnotationChangedConvention> <ForeignKeyAnnotationChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IForeignKeyNullNavigationSetConvention> <ForeignKeyNullNavigationSetConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<INavigationAddedConvention> <NavigationAddedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<INavigationAnnotationChangedConvention> <NavigationAnnotationChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<INavigationRemovedConvention> <NavigationRemovedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ISkipNavigationAddedConvention> <SkipNavigationAddedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ISkipNavigationAnnotationChangedConvention> <SkipNavigationAnnotationChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ISkipNavigationForeignKeyChangedConvention> <SkipNavigationForeignKeyChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ISkipNavigationInverseChangedConvention> <SkipNavigationInverseChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ISkipNavigationRemovedConvention> <SkipNavigationRemovedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IKeyAddedConvention> <KeyAddedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IKeyRemovedConvention> <KeyRemovedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IKeyAnnotationChangedConvention> <KeyAnnotationChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IIndexAddedConvention> <IndexAddedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IIndexRemovedConvention> <IndexRemovedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IIndexUniquenessChangedConvention> <IndexUniquenessChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IIndexSortOrderChangedConvention> <IndexSortOrderChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IIndexAnnotationChangedConvention> <IndexAnnotationChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IPropertyAddedConvention> <PropertyAddedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IPropertyNullabilityChangedConvention> <PropertyNullabilityChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IPropertyFieldChangedConvention> <PropertyFieldChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IPropertyAnnotationChangedConvention> <PropertyAnnotationChangedConventions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IPropertyRemovedConvention> <PropertyRemovedConventions>k__BackingField;
    public List`1<IModelInitializedConvention> ModelInitializedConventions { get; }
    public List`1<IModelFinalizingConvention> ModelFinalizingConventions { get; }
    public List`1<IModelFinalizedConvention> ModelFinalizedConventions { get; }
    public List`1<IModelAnnotationChangedConvention> ModelAnnotationChangedConventions { get; }
    public List`1<IEntityTypeAddedConvention> EntityTypeAddedConventions { get; }
    public List`1<IEntityTypeIgnoredConvention> EntityTypeIgnoredConventions { get; }
    public List`1<IEntityTypeRemovedConvention> EntityTypeRemovedConventions { get; }
    public List`1<IEntityTypeMemberIgnoredConvention> EntityTypeMemberIgnoredConventions { get; }
    public List`1<IEntityTypeBaseTypeChangedConvention> EntityTypeBaseTypeChangedConventions { get; }
    public List`1<IEntityTypePrimaryKeyChangedConvention> EntityTypePrimaryKeyChangedConventions { get; }
    public List`1<IEntityTypeAnnotationChangedConvention> EntityTypeAnnotationChangedConventions { get; }
    public List`1<IForeignKeyAddedConvention> ForeignKeyAddedConventions { get; }
    public List`1<IForeignKeyRemovedConvention> ForeignKeyRemovedConventions { get; }
    public List`1<IForeignKeyPrincipalEndChangedConvention> ForeignKeyPrincipalEndChangedConventions { get; }
    public List`1<IForeignKeyPropertiesChangedConvention> ForeignKeyPropertiesChangedConventions { get; }
    public List`1<IForeignKeyUniquenessChangedConvention> ForeignKeyUniquenessChangedConventions { get; }
    public List`1<IForeignKeyRequirednessChangedConvention> ForeignKeyRequirednessChangedConventions { get; }
    public List`1<IForeignKeyDependentRequirednessChangedConvention> ForeignKeyDependentRequirednessChangedConventions { get; }
    public List`1<IForeignKeyOwnershipChangedConvention> ForeignKeyOwnershipChangedConventions { get; }
    public List`1<IForeignKeyAnnotationChangedConvention> ForeignKeyAnnotationChangedConventions { get; }
    public List`1<IForeignKeyNullNavigationSetConvention> ForeignKeyNullNavigationSetConventions { get; }
    public List`1<INavigationAddedConvention> NavigationAddedConventions { get; }
    public List`1<INavigationAnnotationChangedConvention> NavigationAnnotationChangedConventions { get; }
    public List`1<INavigationRemovedConvention> NavigationRemovedConventions { get; }
    public List`1<ISkipNavigationAddedConvention> SkipNavigationAddedConventions { get; }
    public List`1<ISkipNavigationAnnotationChangedConvention> SkipNavigationAnnotationChangedConventions { get; }
    public List`1<ISkipNavigationForeignKeyChangedConvention> SkipNavigationForeignKeyChangedConventions { get; }
    public List`1<ISkipNavigationInverseChangedConvention> SkipNavigationInverseChangedConventions { get; }
    public List`1<ISkipNavigationRemovedConvention> SkipNavigationRemovedConventions { get; }
    public List`1<IKeyAddedConvention> KeyAddedConventions { get; }
    public List`1<IKeyRemovedConvention> KeyRemovedConventions { get; }
    public List`1<IKeyAnnotationChangedConvention> KeyAnnotationChangedConventions { get; }
    public List`1<IIndexAddedConvention> IndexAddedConventions { get; }
    public List`1<IIndexRemovedConvention> IndexRemovedConventions { get; }
    public List`1<IIndexUniquenessChangedConvention> IndexUniquenessChangedConventions { get; }
    public List`1<IIndexSortOrderChangedConvention> IndexSortOrderChangedConventions { get; }
    public List`1<IIndexAnnotationChangedConvention> IndexAnnotationChangedConventions { get; }
    public List`1<IPropertyAddedConvention> PropertyAddedConventions { get; }
    public List`1<IPropertyNullabilityChangedConvention> PropertyNullabilityChangedConventions { get; }
    public List`1<IPropertyFieldChangedConvention> PropertyFieldChangedConventions { get; }
    public List`1<IPropertyAnnotationChangedConvention> PropertyAnnotationChangedConventions { get; }
    public List`1<IPropertyRemovedConvention> PropertyRemovedConventions { get; }
    [CompilerGeneratedAttribute]
public virtual List`1<IModelInitializedConvention> get_ModelInitializedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IModelFinalizingConvention> get_ModelFinalizingConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IModelFinalizedConvention> get_ModelFinalizedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IModelAnnotationChangedConvention> get_ModelAnnotationChangedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IEntityTypeAddedConvention> get_EntityTypeAddedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IEntityTypeIgnoredConvention> get_EntityTypeIgnoredConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IEntityTypeRemovedConvention> get_EntityTypeRemovedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IEntityTypeMemberIgnoredConvention> get_EntityTypeMemberIgnoredConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IEntityTypeBaseTypeChangedConvention> get_EntityTypeBaseTypeChangedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IEntityTypePrimaryKeyChangedConvention> get_EntityTypePrimaryKeyChangedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IEntityTypeAnnotationChangedConvention> get_EntityTypeAnnotationChangedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IForeignKeyAddedConvention> get_ForeignKeyAddedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IForeignKeyRemovedConvention> get_ForeignKeyRemovedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IForeignKeyPrincipalEndChangedConvention> get_ForeignKeyPrincipalEndChangedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IForeignKeyPropertiesChangedConvention> get_ForeignKeyPropertiesChangedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IForeignKeyUniquenessChangedConvention> get_ForeignKeyUniquenessChangedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IForeignKeyRequirednessChangedConvention> get_ForeignKeyRequirednessChangedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IForeignKeyDependentRequirednessChangedConvention> get_ForeignKeyDependentRequirednessChangedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IForeignKeyOwnershipChangedConvention> get_ForeignKeyOwnershipChangedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IForeignKeyAnnotationChangedConvention> get_ForeignKeyAnnotationChangedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IForeignKeyNullNavigationSetConvention> get_ForeignKeyNullNavigationSetConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<INavigationAddedConvention> get_NavigationAddedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<INavigationAnnotationChangedConvention> get_NavigationAnnotationChangedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<INavigationRemovedConvention> get_NavigationRemovedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<ISkipNavigationAddedConvention> get_SkipNavigationAddedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<ISkipNavigationAnnotationChangedConvention> get_SkipNavigationAnnotationChangedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<ISkipNavigationForeignKeyChangedConvention> get_SkipNavigationForeignKeyChangedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<ISkipNavigationInverseChangedConvention> get_SkipNavigationInverseChangedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<ISkipNavigationRemovedConvention> get_SkipNavigationRemovedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IKeyAddedConvention> get_KeyAddedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IKeyRemovedConvention> get_KeyRemovedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IKeyAnnotationChangedConvention> get_KeyAnnotationChangedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IIndexAddedConvention> get_IndexAddedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IIndexRemovedConvention> get_IndexRemovedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IIndexUniquenessChangedConvention> get_IndexUniquenessChangedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IIndexSortOrderChangedConvention> get_IndexSortOrderChangedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IIndexAnnotationChangedConvention> get_IndexAnnotationChangedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IPropertyAddedConvention> get_PropertyAddedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IPropertyNullabilityChangedConvention> get_PropertyNullabilityChangedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IPropertyFieldChangedConvention> get_PropertyFieldChangedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IPropertyAnnotationChangedConvention> get_PropertyAnnotationChangedConventions();
    [CompilerGeneratedAttribute]
public virtual List`1<IPropertyRemovedConvention> get_PropertyRemovedConventions();
    public virtual void Replace(TImplementation newConvention);
    public static bool Replace(List`1<TConvention> conventionsList, TImplementation newConvention);
    private static bool Replace(List`1<TConvention> conventionsList, TConvention newConvention, Type oldConventionType);
    public virtual void Add(IConvention convention);
    public static bool AddBefore(List`1<TConvention> conventionsList, TConvention newConvention, Type existingConventionType);
    public static bool AddAfter(List`1<TConvention> conventionsList, TConvention newConvention, Type existingConventionType);
    public virtual void Remove(Type conventionType);
    public static bool Remove(List`1<TConvention> conventionsList, Type existingConventionType);
    public static ConventionSet CreateConventionSet(DbContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.DatabaseGeneratedAttributeConvention : PropertyAttributeConventionBase`1<DatabaseGeneratedAttribute> {
    public DatabaseGeneratedAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, DatabaseGeneratedAttribute attribute, MemberInfo clrMember, IConventionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.DbSetFindingConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public DbSetFindingConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessModelInitialized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.DeleteBehaviorAttributeConvention : PropertyAttributeConventionBase`1<DeleteBehaviorAttribute> {
    public DeleteBehaviorAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    public virtual void ProcessNavigationAdded(IConventionNavigationBuilder navigationBuilder, IConventionContext`1<IConventionNavigationBuilder> context);
    public virtual void ProcessForeignKeyPrincipalEndChanged(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<IConventionForeignKeyBuilder> context);
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    protected virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, DeleteBehaviorAttribute attribute, MemberInfo clrMember, IConventionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.DiscriminatorConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public DiscriminatorConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    public virtual void ProcessEntityTypeRemoved(IConventionModelBuilder modelBuilder, IConventionEntityType entityType, IConventionContext`1<IConventionEntityType> context);
    protected virtual void SetDefaultDiscriminatorValues(IEnumerable`1<IConventionEntityType> entityTypes, IConventionDiscriminatorBuilder discriminatorBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Metadata.Conventions.EntityTypeAttributeConventionBase`1 : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected EntityTypeAttributeConventionBase`1(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
    protected abstract virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, TAttribute attribute, IConventionContext`1<IConventionEntityTypeBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.EntityTypeConfigurationEntityTypeAttributeConvention : EntityTypeAttributeConventionBase`1<EntityTypeConfigurationAttribute> {
    private static MethodInfo ConfigureMethod;
    public EntityTypeConfigurationEntityTypeAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    private static EntityTypeConfigurationEntityTypeAttributeConvention();
    protected virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, EntityTypeConfigurationAttribute attribute, IConventionContext`1<IConventionEntityTypeBuilder> context);
    private static void Configure(IConventionEntityType entityType, Type entityTypeConfigurationType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.ForeignKeyAttributeConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public ForeignKeyAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
    public virtual void ProcessForeignKeyAdded(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<IConventionForeignKeyBuilder> context);
    public virtual void ProcessNavigationAdded(IConventionNavigationBuilder navigationBuilder, IConventionContext`1<IConventionNavigationBuilder> context);
    private IConventionForeignKeyBuilder UpdateRelationshipBuilder(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext context);
    private static IConventionForeignKeyBuilder SplitNavigationsToSeparateRelationships(IConventionForeignKeyBuilder relationshipBuilder);
    private static ForeignKeyAttribute GetForeignKeyAttribute(IConventionNavigationBase navigation);
    private static InversePropertyAttribute GetInversePropertyAttribute(IConventionNavigation navigation);
    private static TAttribute GetAttribute(MemberInfo memberInfo);
    [ContractAnnotationAttribute("navigation:null => null")]
private MemberInfo FindForeignKeyAttributeOnProperty(IConventionEntityType entityType, MemberInfo navigation);
    private bool IsNavigationCandidate(PropertyInfo propertyInfo, IConventionEntityType entityType);
    private static IReadOnlyList`1<string> FindCandidateDependentPropertiesThroughNavigation(IConventionForeignKeyBuilder relationshipBuilder, bool pointsToPrincipal);
    public virtual void ProcessSkipNavigationForeignKeyChanged(IConventionSkipNavigationBuilder skipNavigationBuilder, IConventionForeignKey foreignKey, IConventionForeignKey oldForeignKey, IConventionContext`1<IConventionForeignKey> context);
    private static IReadOnlyList`1<string> FindCandidateDependentPropertiesThroughNavigation(IConventionSkipNavigation skipNavigation);
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.ForeignKeyIndexConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public ForeignKeyIndexConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessForeignKeyAdded(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<IConventionForeignKeyBuilder> context);
    public virtual void ProcessForeignKeyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionForeignKey foreignKey, IConventionContext`1<IConventionForeignKey> context);
    public virtual void ProcessForeignKeyPropertiesChanged(IConventionForeignKeyBuilder relationshipBuilder, IReadOnlyList`1<IConventionProperty> oldDependentProperties, IConventionKey oldPrincipalKey, IConventionContext`1<IReadOnlyList`1<IConventionProperty>> context);
    private static void OnForeignKeyRemoved(IConventionEntityType declaringType, IReadOnlyList`1<IConventionProperty> foreignKeyProperties);
    public virtual void ProcessKeyAdded(IConventionKeyBuilder keyBuilder, IConventionContext`1<IConventionKeyBuilder> context);
    public virtual void ProcessKeyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionKey key, IConventionContext`1<IConventionKey> context);
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    public virtual void ProcessIndexAdded(IConventionIndexBuilder indexBuilder, IConventionContext`1<IConventionIndexBuilder> context);
    public virtual void ProcessIndexRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionIndex index, IConventionContext`1<IConventionIndex> context);
    public virtual void ProcessForeignKeyUniquenessChanged(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<Nullable`1<bool>> context);
    public virtual void ProcessIndexUniquenessChanged(IConventionIndexBuilder indexBuilder, IConventionContext`1<Nullable`1<bool>> context);
    protected virtual IConventionIndex CreateIndex(IReadOnlyList`1<IConventionProperty> properties, bool unique, IConventionEntityTypeBuilder entityTypeBuilder);
    protected virtual bool AreIndexedBy(IReadOnlyList`1<IConventionProperty> properties, bool unique, IReadOnlyList`1<IConventionProperty> coveringIndexProperties, bool coveringIndexUnique);
    private static void RemoveIndex(IConventionIndex index);
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.ForeignKeyPropertyDiscoveryConvention : object {
    private static bool QuirkEnabled29826;
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public ForeignKeyPropertyDiscoveryConvention(ProviderConventionSetBuilderDependencies dependencies);
    private static ForeignKeyPropertyDiscoveryConvention();
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessForeignKeyAdded(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<IConventionForeignKeyBuilder> context);
    private IConventionForeignKeyBuilder ProcessForeignKey(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext context);
    private IConventionForeignKeyBuilder DiscoverProperties(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext context);
    private IReadOnlyList`1<IConventionProperty> FindCandidateForeignKeyProperties(IConventionForeignKey foreignKey, bool onDependent, bool matchPk);
    private static IReadOnlyList`1<IConventionProperty> GetCompatiblePrimaryKeyProperties(IConventionEntityType dependentEntityType, IConventionEntityType principalEntityType, IReadOnlyList`1<IConventionProperty> propertiesToReference);
    private bool TryFindMatchingProperties(IConventionForeignKey foreignKey, string baseName, bool onDependent, bool matchPk, IReadOnlyList`1& match);
    private static IConventionProperty TryGetProperty(IConventionEntityType entityType, string prefix, string suffix, bool matchImplicitProperties);
    public virtual void ProcessNavigationAdded(IConventionNavigationBuilder navigationBuilder, IConventionContext`1<IConventionNavigationBuilder> context);
    public virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, IConventionContext`1<IConventionPropertyBuilder> context);
    private void Process(IConventionPropertyBuilder propertyBuilder, IConventionContext context);
    public virtual void ProcessEntityTypeMemberIgnored(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionContext`1<string> context);
    private void Process(IConventionEntityType entityType, IConventionContext context);
    public virtual void ProcessPropertyFieldChanged(IConventionPropertyBuilder propertyBuilder, FieldInfo newFieldInfo, FieldInfo oldFieldInfo, IConventionContext`1<FieldInfo> context);
    public virtual void ProcessPropertyNullabilityChanged(IConventionPropertyBuilder propertyBuilder, IConventionContext`1<Nullable`1<bool>> context);
    public virtual void ProcessForeignKeyUniquenessChanged(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<Nullable`1<bool>> context);
    public virtual void ProcessForeignKeyRequirednessChanged(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<Nullable`1<bool>> context);
    public virtual void ProcessForeignKeyPropertiesChanged(IConventionForeignKeyBuilder relationshipBuilder, IReadOnlyList`1<IConventionProperty> oldDependentProperties, IConventionKey oldPrincipalKey, IConventionContext`1<IReadOnlyList`1<IConventionProperty>> context);
    public virtual void ProcessForeignKeyPrincipalEndChanged(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<IConventionForeignKeyBuilder> context);
    public virtual void ProcessKeyAdded(IConventionKeyBuilder keyBuilder, IConventionContext`1<IConventionKeyBuilder> context);
    public virtual void ProcessKeyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionKey key, IConventionContext`1<IConventionKey> context);
    public virtual void ProcessEntityTypePrimaryKeyChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionKey newPrimaryKey, IConventionKey previousPrimaryKey, IConventionContext`1<IConventionKey> context);
    public virtual void ProcessSkipNavigationForeignKeyChanged(IConventionSkipNavigationBuilder skipNavigationBuilder, IConventionForeignKey foreignKey, IConventionForeignKey oldForeignKey, IConventionContext`1<IConventionForeignKey> context);
    public virtual void ProcessSkipNavigationInverseChanged(IConventionSkipNavigationBuilder skipNavigationBuilder, IConventionSkipNavigation inverse, IConventionSkipNavigation oldInverse, IConventionContext`1<IConventionSkipNavigation> context);
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    public static string GetPropertyBaseName(IReadOnlyForeignKey foreignKey);
    private static bool HasUniquifiedProperties(IConventionForeignKey foreignKey);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IConvention {
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionBatch {
    public abstract virtual IConventionForeignKey Run(IConventionForeignKey foreignKey);
    public abstract virtual IMetadataReference`1<IConventionForeignKey> Track(IConventionForeignKey foreignKey);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext {
    public abstract virtual void StopProcessing();
    public abstract virtual IConventionBatch DelayConventions();
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext`1 {
    public abstract virtual void StopProcessing(TMetadata result);
    public abstract virtual void StopProcessingIfChanged(TMetadata result);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IEntityTypeAddedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IEntityTypeAnnotationChangedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessEntityTypeAnnotationChanged(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IEntityTypeBaseTypeChangedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IEntityTypeIgnoredConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessEntityTypeIgnored(IConventionModelBuilder modelBuilder, string name, Type type, IConventionContext`1<string> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IEntityTypeMemberIgnoredConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessEntityTypeMemberIgnored(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionContext`1<string> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IEntityTypePrimaryKeyChangedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessEntityTypePrimaryKeyChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionKey newPrimaryKey, IConventionKey previousPrimaryKey, IConventionContext`1<IConventionKey> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IEntityTypeRemovedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessEntityTypeRemoved(IConventionModelBuilder modelBuilder, IConventionEntityType entityType, IConventionContext`1<IConventionEntityType> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IForeignKeyAddedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessForeignKeyAdded(IConventionForeignKeyBuilder foreignKeyBuilder, IConventionContext`1<IConventionForeignKeyBuilder> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IForeignKeyAnnotationChangedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessForeignKeyAnnotationChanged(IConventionForeignKeyBuilder relationshipBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IForeignKeyDependentRequirednessChangedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessForeignKeyDependentRequirednessChanged(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<Nullable`1<bool>> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IForeignKeyNullNavigationSetConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessForeignKeyNullNavigationSet(IConventionForeignKeyBuilder relationshipBuilder, bool pointsToPrincipal, IConventionContext`1<IConventionNavigation> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IForeignKeyOwnershipChangedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessForeignKeyOwnershipChanged(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<Nullable`1<bool>> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IForeignKeyPrincipalEndChangedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessForeignKeyPrincipalEndChanged(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<IConventionForeignKeyBuilder> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IForeignKeyPropertiesChangedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessForeignKeyPropertiesChanged(IConventionForeignKeyBuilder relationshipBuilder, IReadOnlyList`1<IConventionProperty> oldDependentProperties, IConventionKey oldPrincipalKey, IConventionContext`1<IReadOnlyList`1<IConventionProperty>> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IForeignKeyRemovedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessForeignKeyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionForeignKey foreignKey, IConventionContext`1<IConventionForeignKey> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IForeignKeyRequirednessChangedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessForeignKeyRequirednessChanged(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<Nullable`1<bool>> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IForeignKeyUniquenessChangedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessForeignKeyUniquenessChanged(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<Nullable`1<bool>> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IIndexAddedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessIndexAdded(IConventionIndexBuilder indexBuilder, IConventionContext`1<IConventionIndexBuilder> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IIndexAnnotationChangedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessIndexAnnotationChanged(IConventionIndexBuilder indexBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IIndexRemovedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessIndexRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionIndex index, IConventionContext`1<IConventionIndex> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IIndexSortOrderChangedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessIndexSortOrderChanged(IConventionIndexBuilder indexBuilder, IConventionContext`1<IReadOnlyList`1<bool>> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IIndexUniquenessChangedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessIndexUniquenessChanged(IConventionIndexBuilder indexBuilder, IConventionContext`1<Nullable`1<bool>> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IKeyAddedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessKeyAdded(IConventionKeyBuilder keyBuilder, IConventionContext`1<IConventionKeyBuilder> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IKeyAnnotationChangedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessKeyAnnotationChanged(IConventionKeyBuilder keyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IKeyRemovedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessKeyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionKey key, IConventionContext`1<IConventionKey> context);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IModelAnnotationChangedConvention {
    public abstract virtual void ProcessModelAnnotationChanged(IConventionModelBuilder modelBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IModelFinalizedConvention {
    [NullableContextAttribute("1")]
public abstract virtual IModel ProcessModelFinalized(IModel model);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IModelFinalizingConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IModelInitializedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessModelInitialized(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.INavigationAddedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessNavigationAdded(IConventionNavigationBuilder navigationBuilder, IConventionContext`1<IConventionNavigationBuilder> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.INavigationAnnotationChangedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessNavigationAnnotationChanged(IConventionForeignKeyBuilder relationshipBuilder, IConventionNavigation navigation, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.INavigationRemovedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessNavigationRemoved(IConventionEntityTypeBuilder sourceEntityTypeBuilder, IConventionEntityTypeBuilder targetEntityTypeBuilder, string navigationName, MemberInfo memberInfo, IConventionContext`1<string> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.IndexAttributeConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public IndexAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    private static void CheckIndexAttributesAndEnsureIndex(IConventionEntityType entityType, bool shouldThrow);
    private static void CheckIgnoredProperties(IConventionEntityType entityType, IndexAttribute indexAttribute);
    private static void CheckMissingProperties(IConventionEntityType entityType, IndexAttribute indexAttribute, InvalidOperationException exception);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder {
    public abstract virtual ConventionSet CreateConventionSet();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetPlugin {
    public abstract virtual ConventionSet ModifyConventions(ConventionSet conventionSet);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IProviderConventionSetBuilder {
    public abstract virtual ConventionSet CreateConventionSet();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilder : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public ProviderConventionSetBuilder(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual ConventionSet CreateConventionSet();
    protected virtual bool ReplaceConvention(List`1<TConvention> conventionsList, TImplementation newConvention);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies : object {
    private ICurrentDbContext _currentContext;
    [CompilerGeneratedAttribute]
private ITypeMappingSource <TypeMappingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IParameterBindingFactories <ParameterBindingFactories>k__BackingField;
    [CompilerGeneratedAttribute]
private IMemberClassifier <MemberClassifier>k__BackingField;
    [CompilerGeneratedAttribute]
private IConstructorBindingFactory <ConstructorBindingFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Model> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Validation> <ValidationLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbSetFinder <SetFinder>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public ITypeMappingSource TypeMappingSource { get; public set; }
    public IParameterBindingFactories ParameterBindingFactories { get; public set; }
    [EntityFrameworkInternalAttribute]
public IMemberClassifier MemberClassifier { get; public set; }
    public IConstructorBindingFactory ConstructorBindingFactory { get; public set; }
    public IDiagnosticsLogger`1<Model> Logger { get; public set; }
    public IDiagnosticsLogger`1<Validation> ValidationLogger { get; public set; }
    public IDbSetFinder SetFinder { get; public set; }
    public Type ContextType { get; }
    [EntityFrameworkInternalAttribute]
public ProviderConventionSetBuilderDependencies(ITypeMappingSource typeMappingSource, IConstructorBindingFactory constructorBindingFactory, IParameterBindingFactories parameterBindingFactories, IMemberClassifier memberClassifier, IDiagnosticsLogger`1<Model> logger, IDiagnosticsLogger`1<Validation> validationLogger, IDbSetFinder setFinder, ICurrentDbContext currentContext);
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies(ProviderConventionSetBuilderDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ITypeMappingSource get_TypeMappingSource();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TypeMappingSource(ITypeMappingSource value);
    [CompilerGeneratedAttribute]
public IParameterBindingFactories get_ParameterBindingFactories();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ParameterBindingFactories(IParameterBindingFactories value);
    [CompilerGeneratedAttribute]
public IMemberClassifier get_MemberClassifier();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MemberClassifier(IMemberClassifier value);
    [CompilerGeneratedAttribute]
public IConstructorBindingFactory get_ConstructorBindingFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ConstructorBindingFactory(IConstructorBindingFactory value);
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Model> get_Logger();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Logger(IDiagnosticsLogger`1<Model> value);
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Validation> get_ValidationLogger();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ValidationLogger(IDiagnosticsLogger`1<Validation> value);
    [CompilerGeneratedAttribute]
public IDbSetFinder get_SetFinder();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SetFinder(IDbSetFinder value);
    public Type get_ContextType();
    public ProviderConventionSetBuilderDependencies With(ICurrentDbContext currentContext);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ProviderConventionSetBuilderDependencies left, ProviderConventionSetBuilderDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ProviderConventionSetBuilderDependencies left, ProviderConventionSetBuilderDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ProviderConventionSetBuilderDependencies other);
    [CompilerGeneratedAttribute]
public ProviderConventionSetBuilderDependencies <Clone>$();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionBatchExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static InternalForeignKeyBuilder Run(IConventionBatch batch, InternalForeignKeyBuilder relationshipBuilder);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionContext`1 : object {
    private bool _stopProcessing;
    private ConventionDispatcher _dispatcher;
    private TMetadata _result;
    public TMetadata Result { get; }
    [NullableContextAttribute("1")]
public ConventionContext`1(ConventionDispatcher dispatcher);
    public virtual TMetadata get_Result();
    public virtual void StopProcessing();
    public virtual void StopProcessing(TMetadata result);
    public virtual void StopProcessingIfChanged(TMetadata result);
    [NullableContextAttribute("1")]
public virtual IConventionBatch DelayConventions();
    public virtual bool ShouldStopProcessing();
    public virtual void ResetState(TMetadata input);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.ConventionDispatcher : object {
    private ConventionScope _scope;
    private ImmediateConventionScope _immediateConventionScope;
    [CompilerGeneratedAttribute]
private MetadataTracker <Tracker>k__BackingField;
    public MetadataTracker Tracker { get; }
    public ConventionDispatcher(ConventionSet conventionSet);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual MetadataTracker get_Tracker();
    public virtual IConventionModelBuilder OnModelInitialized(IConventionModelBuilder modelBuilder);
    public virtual IConventionModelBuilder OnModelFinalizing(IConventionModelBuilder modelBuilder);
    [NullableContextAttribute("2")]
public virtual IConventionAnnotation OnModelAnnotationChanged(IConventionModelBuilder modelBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    public virtual IConventionEntityTypeBuilder OnEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder);
    public virtual string OnEntityTypeIgnored(IConventionModelBuilder modelBuilder, string name, Type type);
    public virtual IConventionEntityType OnEntityTypeRemoved(IConventionModelBuilder modelBuilder, IConventionEntityType type);
    public virtual string OnEntityTypeMemberIgnored(IConventionEntityTypeBuilder entityTypeBuilder, string name);
    [NullableContextAttribute("2")]
public virtual IConventionEntityType OnEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType previousBaseType);
    [NullableContextAttribute("2")]
public virtual IConventionAnnotation OnEntityTypeAnnotationChanged(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    public virtual IConventionForeignKeyBuilder OnForeignKeyAdded(IConventionForeignKeyBuilder relationshipBuilder);
    public virtual IConventionForeignKey OnForeignKeyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionForeignKey foreignKey);
    public virtual IReadOnlyList`1<IConventionProperty> OnForeignKeyPropertiesChanged(IConventionForeignKeyBuilder relationshipBuilder, IReadOnlyList`1<IConventionProperty> oldDependentProperties, IConventionKey oldPrincipalKey);
    public virtual Nullable`1<bool> OnForeignKeyUniquenessChanged(IConventionForeignKeyBuilder relationshipBuilder);
    public virtual Nullable`1<bool> OnForeignKeyRequirednessChanged(IConventionForeignKeyBuilder relationshipBuilder);
    public virtual Nullable`1<bool> OnForeignKeyDependentRequirednessChanged(IConventionForeignKeyBuilder relationshipBuilder);
    public virtual Nullable`1<bool> OnForeignKeyOwnershipChanged(IConventionForeignKeyBuilder relationshipBuilder);
    public virtual IConventionForeignKeyBuilder OnForeignKeyPrincipalEndChanged(IConventionForeignKeyBuilder relationshipBuilder);
    [NullableContextAttribute("2")]
public virtual IConventionAnnotation OnForeignKeyAnnotationChanged(IConventionForeignKeyBuilder relationshipBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    public virtual IConventionNavigation OnForeignKeyNullNavigationSet(IConventionForeignKeyBuilder relationshipBuilder, bool pointsToPrincipal);
    public virtual IConventionNavigationBuilder OnNavigationAdded(IConventionNavigationBuilder navigationBuilder);
    public virtual string OnNavigationRemoved(IConventionEntityTypeBuilder sourceEntityTypeBuilder, IConventionEntityTypeBuilder targetEntityTypeBuilder, string navigationName, MemberInfo memberInfo);
    public virtual IConventionAnnotation OnNavigationAnnotationChanged(IConventionForeignKeyBuilder relationshipBuilder, IConventionNavigation navigation, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    public virtual IConventionSkipNavigationBuilder OnSkipNavigationAdded(IConventionSkipNavigationBuilder navigationBuilder);
    [NullableContextAttribute("2")]
public virtual IConventionForeignKey OnSkipNavigationForeignKeyChanged(IConventionSkipNavigationBuilder navigationBuilder, IConventionForeignKey foreignKey, IConventionForeignKey oldForeignKey);
    [NullableContextAttribute("2")]
public virtual IConventionSkipNavigation OnSkipNavigationInverseChanged(IConventionSkipNavigationBuilder navigationBuilder, IConventionSkipNavigation inverse, IConventionSkipNavigation oldInverse);
    public virtual IConventionSkipNavigation OnSkipNavigationRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionSkipNavigation navigation);
    [NullableContextAttribute("2")]
public virtual IConventionAnnotation OnSkipNavigationAnnotationChanged(IConventionSkipNavigationBuilder navigationBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    public virtual IConventionKeyBuilder OnKeyAdded(IConventionKeyBuilder keyBuilder);
    public virtual IConventionKey OnKeyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionKey key);
    [NullableContextAttribute("2")]
public virtual IConventionAnnotation OnKeyAnnotationChanged(IConventionKeyBuilder keyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    [NullableContextAttribute("2")]
public virtual IConventionKey OnPrimaryKeyChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionKey newPrimaryKey, IConventionKey previousPrimaryKey);
    public virtual IConventionIndexBuilder OnIndexAdded(IConventionIndexBuilder indexBuilder);
    public virtual IConventionIndex OnIndexRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionIndex index);
    public virtual Nullable`1<bool> OnIndexUniquenessChanged(IConventionIndexBuilder indexBuilder);
    public virtual IReadOnlyList`1<bool> OnIndexSortOrderChanged(IConventionIndexBuilder indexBuilder);
    [NullableContextAttribute("2")]
public virtual IConventionAnnotation OnIndexAnnotationChanged(IConventionIndexBuilder indexBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    public virtual IConventionPropertyBuilder OnPropertyAdded(IConventionPropertyBuilder propertyBuilder);
    public virtual IConventionProperty OnPropertyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionProperty property);
    public virtual Nullable`1<bool> OnPropertyNullableChanged(IConventionPropertyBuilder propertyBuilder);
    [NullableContextAttribute("2")]
public virtual FieldInfo OnPropertyFieldChanged(IConventionPropertyBuilder propertyBuilder, FieldInfo newFieldInfo, FieldInfo oldFieldInfo);
    [NullableContextAttribute("2")]
public virtual IConventionAnnotation OnPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    public virtual IConventionBatch DelayConventions();
    public virtual T Track(Func`1<T> func, IConventionForeignKey& foreignKey);
    [ConditionalAttribute("DEBUG")]
public virtual void AssertNoScope();
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.IReadableConventionContext {
    public abstract virtual bool ShouldStopProcessing();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.MetadataTracker : object {
    private Dictionary`2<IConventionForeignKey, Reference`1<IConventionForeignKey>> _trackedForeignKeys;
    public virtual void Update(IConventionForeignKey oldForeignKey, IConventionForeignKey newForeignKey);
    public virtual Reference`1<IConventionForeignKey> Track(IConventionForeignKey foreignKey);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.Internal.IReferenceRoot<Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey>.Release(Reference`1<IConventionForeignKey> foreignKeyReference);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.Internal.RuntimeConventionSetBuilder : object {
    private IProviderConventionSetBuilder _conventionSetBuilder;
    private IList`1<IConventionSetPlugin> _plugins;
    [NullableContextAttribute("1")]
public RuntimeConventionSetBuilder(IProviderConventionSetBuilder providerConventionSetBuilder, IEnumerable`1<IConventionSetPlugin> plugins);
    [NullableContextAttribute("1")]
public virtual ConventionSet CreateConventionSet();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.InversePropertyAttributeConvention : NavigationAttributeConventionBase`1<InversePropertyAttribute> {
    public InversePropertyAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, MemberInfo navigationMemberInfo, Type targetClrType, InversePropertyAttribute attribute, IConventionContext`1<IConventionEntityTypeBuilder> context);
    private void Process(IConventionEntityTypeBuilder entityTypeBuilder, MemberInfo navigationMemberInfo, Type targetClrType, InversePropertyAttribute attribute);
    private IConventionForeignKeyBuilder ConfigureInverseNavigation(IConventionEntityTypeBuilder entityTypeBuilder, MemberInfo navigationMemberInfo, IConventionEntityTypeBuilder targetEntityTypeBuilder, InversePropertyAttribute attribute);
    private static bool TryRemoveIfAmbiguous(IConventionEntityType entityType, MemberInfo navigationMemberInfo, IConventionEntityType targetEntityType, IConventionEntityType targetBaseType, MemberInfo inverseNavigationMemberInfo, List`1<ValueTuple`2<MemberInfo, IConventionEntityType>> referencingNavigationsWithAttribute, IConventionForeignKeyBuilder& remainingInverseNavigation);
    private static void Remove(IConventionNavigation navigation);
    public virtual void ProcessEntityTypeRemoved(IConventionModelBuilder modelBuilder, IConventionEntityType entityType, MemberInfo navigationMemberInfo, Type targetClrType, InversePropertyAttribute attribute, IConventionContext`1<IConventionEntityType> context);
    public virtual void ProcessNavigationAdded(IConventionNavigationBuilder navigationBuilder, InversePropertyAttribute attribute, IConventionContext`1<IConventionNavigationBuilder> context);
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, MemberInfo navigationMemberInfo, Type targetClrType, InversePropertyAttribute attribute, IConventionContext`1<IConventionEntityType> context);
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    public virtual void ProcessEntityTypeMemberIgnored(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionContext`1<string> context);
    public virtual void ProcessEntityTypeMemberIgnored(IConventionEntityTypeBuilder entityTypeBuilder, MemberInfo navigationMemberInfo, Type targetClrType, InversePropertyAttribute attribute, IConventionContext`1<string> context);
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    public static bool IsAmbiguous(IConventionEntityType entityType, MemberInfo navigation, IConventionEntityType targetEntityType);
    private static bool IsAmbiguousInverse(MemberInfo navigation, IConventionEntityType entityType, List`1<ValueTuple`2<MemberInfo, IConventionEntityType>> referencingNavigationsWithAttribute);
    private static Nullable`1<ValueTuple`2<MemberInfo, IConventionEntityType>> FindAmbiguousInverse(MemberInfo navigation, IConventionEntityType entityType, List`1<ValueTuple`2<MemberInfo, IConventionEntityType>> referencingNavigationsWithAttribute);
    private static List`1<ValueTuple`2<MemberInfo, IConventionEntityType>> AddInverseNavigation(IConventionEntityType entityType, MemberInfo navigation, IConventionEntityType targetEntityType, MemberInfo inverseNavigation);
    private static void RemoveInverseNavigation(IConventionEntityType declaringEntityType, MemberInfo navigation, IConventionEntityType targetEntityType, string inverseNavigationName);
    private static IConventionEntityType FindActualEntityType(IConventionEntityType entityType);
    protected virtual IConventionEntityTypeBuilder TryGetTargetEntityTypeBuilder(IConventionEntityTypeBuilder entityTypeBuilder, Type targetClrType, MemberInfo navigationMemberInfo, bool shouldCreate);
    private static Dictionary`2<string, ValueTuple`2<MemberInfo, List`1<ValueTuple`2<MemberInfo, IConventionEntityType>>>> GetInverseNavigations(IConventionAnnotatable entityType);
    private static void SetInverseNavigations(IConventionAnnotatableBuilder entityTypeBuilder, Dictionary`2<string, ValueTuple`2<MemberInfo, List`1<ValueTuple`2<MemberInfo, IConventionEntityType>>>> inverseNavigations);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IPropertyAddedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, IConventionContext`1<IConventionPropertyBuilder> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IPropertyAnnotationChangedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessPropertyAnnotationChanged(IConventionPropertyBuilder propertyBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IPropertyFieldChangedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessPropertyFieldChanged(IConventionPropertyBuilder propertyBuilder, FieldInfo newFieldInfo, FieldInfo oldFieldInfo, IConventionContext`1<FieldInfo> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IPropertyNullabilityChangedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessPropertyNullabilityChanged(IConventionPropertyBuilder propertyBuilder, IConventionContext`1<Nullable`1<bool>> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.IPropertyRemovedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessPropertyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionProperty property, IConventionContext`1<IConventionProperty> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.ISkipNavigationAddedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessSkipNavigationAdded(IConventionSkipNavigationBuilder skipNavigationBuilder, IConventionContext`1<IConventionSkipNavigationBuilder> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.ISkipNavigationAnnotationChangedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessSkipNavigationAnnotationChanged(IConventionSkipNavigationBuilder skipNavigationBuilder, string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation, IConventionContext`1<IConventionAnnotation> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.ISkipNavigationForeignKeyChangedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessSkipNavigationForeignKeyChanged(IConventionSkipNavigationBuilder skipNavigationBuilder, IConventionForeignKey foreignKey, IConventionForeignKey oldForeignKey, IConventionContext`1<IConventionForeignKey> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.ISkipNavigationInverseChangedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessSkipNavigationInverseChanged(IConventionSkipNavigationBuilder skipNavigationBuilder, IConventionSkipNavigation inverse, IConventionSkipNavigation oldInverse, IConventionContext`1<IConventionSkipNavigation> context);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Conventions.ISkipNavigationRemovedConvention {
    [NullableContextAttribute("1")]
public abstract virtual void ProcessSkipNavigationRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionSkipNavigation navigation, IConventionContext`1<IConventionSkipNavigation> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.KeyAttributeConvention : PropertyAttributeConventionBase`1<KeyAttribute> {
    public KeyAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    protected virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, KeyAttribute attribute, MemberInfo clrMember, IConventionContext context);
    private bool CheckAttributesAndEnsurePrimaryKey(EntityType entityType, IConventionPropertyBuilder propertyBuilder, bool shouldThrow);
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    private static bool CheckPrimaryKeyAttributeAndEnsurePrimaryKey(IConventionEntityType entityType, bool shouldThrow);
    private static void CheckIgnoredProperties(IConventionEntityType entityType, PrimaryKeyAttribute primaryKeyAttribute);
    private static void CheckMissingProperties(IConventionEntityType entityType, PrimaryKeyAttribute primaryKeyAttribute, InvalidOperationException exception);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.KeyDiscoveryConvention : object {
    private static string KeySuffix;
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public KeyDiscoveryConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    protected virtual void TryConfigurePrimaryKey(IConventionEntityTypeBuilder entityTypeBuilder);
    protected virtual void ProcessKeyProperties(IList`1<IConventionProperty> keyProperties, IConventionEntityType entityType);
    public static IEnumerable`1<IConventionProperty> DiscoverKeyProperties(IConventionEntityType entityType, IEnumerable`1<IConventionProperty> candidateProperties);
    public virtual void ProcessEntityTypeMemberIgnored(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionContext`1<string> context);
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    public virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, IConventionContext`1<IConventionPropertyBuilder> context);
    public virtual void ProcessKeyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionKey key, IConventionContext`1<IConventionKey> context);
    public virtual void ProcessForeignKeyAdded(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<IConventionForeignKeyBuilder> context);
    public virtual void ProcessForeignKeyPropertiesChanged(IConventionForeignKeyBuilder relationshipBuilder, IReadOnlyList`1<IConventionProperty> oldDependentProperties, IConventionKey oldPrincipalKey, IConventionContext`1<IReadOnlyList`1<IConventionProperty>> context);
    public virtual void ProcessForeignKeyOwnershipChanged(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<Nullable`1<bool>> context);
    public virtual void ProcessForeignKeyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionForeignKey foreignKey, IConventionContext`1<IConventionForeignKey> context);
    public virtual void ProcessForeignKeyUniquenessChanged(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<Nullable`1<bool>> context);
    public virtual void ProcessSkipNavigationForeignKeyChanged(IConventionSkipNavigationBuilder skipNavigationBuilder, IConventionForeignKey foreignKey, IConventionForeignKey oldForeignKey, IConventionContext`1<IConventionForeignKey> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.KeylessEntityTypeAttributeConvention : EntityTypeAttributeConventionBase`1<KeylessAttribute> {
    public KeylessEntityTypeAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, KeylessAttribute attribute, IConventionContext`1<IConventionEntityTypeBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.ManyToManyJoinEntityTypeConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public ManyToManyJoinEntityTypeConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessSkipNavigationAdded(IConventionSkipNavigationBuilder skipNavigationBuilder, IConventionContext`1<IConventionSkipNavigationBuilder> context);
    public virtual void ProcessSkipNavigationInverseChanged(IConventionSkipNavigationBuilder skipNavigationBuilder, IConventionSkipNavigation inverse, IConventionSkipNavigation oldInverse, IConventionContext`1<IConventionSkipNavigation> context);
    public virtual void ProcessSkipNavigationForeignKeyChanged(IConventionSkipNavigationBuilder skipNavigationBuilder, IConventionForeignKey foreignKey, IConventionForeignKey oldForeignKey, IConventionContext`1<IConventionForeignKey> context);
    public virtual void ProcessSkipNavigationRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionSkipNavigation navigation, IConventionContext`1<IConventionSkipNavigation> context);
    private void TryCreateJoinEntityType(IConventionSkipNavigationBuilder skipNavigationBuilder);
    protected virtual bool ShouldCreateJoinType(IConventionSkipNavigation skipNavigation);
    protected virtual string GenerateJoinTypeName(IConventionSkipNavigation skipNavigation);
    protected virtual void CreateJoinEntityType(string joinEntityTypeName, IConventionSkipNavigation skipNavigation);
    protected virtual IConventionForeignKey CreateSkipNavigationForeignKey(IConventionSkipNavigation skipNavigation, IConventionEntityTypeBuilder joinEntityTypeBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.MaxLengthAttributeConvention : PropertyAttributeConventionBase`1<MaxLengthAttribute> {
    public MaxLengthAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, MaxLengthAttribute attribute, MemberInfo clrMember, IConventionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.ModelCleanupConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public ModelCleanupConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessForeignKeyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionForeignKey foreignKey, IConventionContext`1<IConventionForeignKey> context);
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
    private static void RemoveEntityTypesUnreachableByNavigations(IConventionModelBuilder modelBuilder);
    private static IReadOnlyList`1<IConventionEntityType> GetRoots(IConventionModel model, ConfigurationSource configurationSource);
    private static void RemoveNavigationlessForeignKeys(IConventionModelBuilder modelBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Metadata.Conventions.NavigationAttributeConventionBase`1 : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected NavigationAttributeConventionBase`1(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
    public virtual void ProcessEntityTypeIgnored(IConventionModelBuilder modelBuilder, string name, Type type, IConventionContext`1<string> context);
    public virtual void ProcessEntityTypeRemoved(IConventionModelBuilder modelBuilder, IConventionEntityType entityType, IConventionContext`1<IConventionEntityType> context);
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    private List`1<ValueTuple`2<PropertyInfo, Type>> GetNavigationsWithAttribute(IConventionEntityType entityType);
    private static void Sort(List`1<ValueTuple`2<PropertyInfo, Type>> navigations);
    public virtual void ProcessNavigationAdded(IConventionNavigationBuilder navigationBuilder, IConventionContext`1<IConventionNavigationBuilder> context);
    public virtual void ProcessSkipNavigationAdded(IConventionSkipNavigationBuilder skipNavigationBuilder, IConventionContext`1<IConventionSkipNavigationBuilder> context);
    public virtual void ProcessForeignKeyPrincipalEndChanged(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<IConventionForeignKeyBuilder> context);
    public virtual void ProcessEntityTypeMemberIgnored(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionContext`1<string> context);
    private Type FindCandidateNavigationWithAttributePropertyType(PropertyInfo propertyInfo, IConventionModel model);
    private Type FindCandidateNavigationWithAttributePropertyType(PropertyInfo propertyInfo, IConventionEntityType entityType);
    protected static IEnumerable`1<TCustomAttribute> GetAttributes(IConventionEntityType entityType, IConventionNavigation navigation);
    protected static IEnumerable`1<TCustomAttribute> GetAttributes(IConventionEntityType entityType, IConventionSkipNavigation skipNavigation);
    private static IEnumerable`1<TCustomAttribute> GetAttributes(MemberInfo memberInfo);
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, MemberInfo navigationMemberInfo, Type targetClrType, TAttribute attribute, IConventionContext`1<IConventionEntityTypeBuilder> context);
    public virtual void ProcessEntityTypeIgnored(IConventionModelBuilder modelBuilder, Type type, MemberInfo navigationMemberInfo, Type targetClrType, TAttribute attribute, IConventionContext`1<string> context);
    public virtual void ProcessEntityTypeRemoved(IConventionModelBuilder modelBuilder, IConventionEntityType entityType, MemberInfo navigationMemberInfo, Type targetClrType, TAttribute attribute, IConventionContext`1<IConventionEntityType> context);
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, MemberInfo navigationMemberInfo, Type targetClrType, TAttribute attribute, IConventionContext`1<IConventionEntityType> context);
    public virtual void ProcessNavigationAdded(IConventionNavigationBuilder navigationBuilder, TAttribute attribute, IConventionContext`1<IConventionNavigationBuilder> context);
    public virtual void ProcessSkipNavigationAdded(IConventionSkipNavigationBuilder skipNavigationBuilder, TAttribute attribute, IConventionContext`1<IConventionSkipNavigationBuilder> context);
    public virtual void ProcessEntityTypeMemberIgnored(IConventionEntityTypeBuilder entityTypeBuilder, MemberInfo navigationMemberInfo, Type targetClrType, TAttribute attribute, IConventionContext`1<string> context);
    public virtual void ProcessForeignKeyPrincipalEndChanged(IConventionForeignKeyBuilder relationshipBuilder, IEnumerable`1<TAttribute> dependentToPrincipalAttributes, IEnumerable`1<TAttribute> principalToDependentAttributes, IConventionContext`1<IConventionForeignKeyBuilder> context);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.NavigationBackingFieldAttributeConvention : NavigationAttributeConventionBase`1<BackingFieldAttribute> {
    [NullableContextAttribute("1")]
public NavigationBackingFieldAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    [NullableContextAttribute("1")]
public virtual void ProcessNavigationAdded(IConventionNavigationBuilder navigationBuilder, BackingFieldAttribute attribute, IConventionContext`1<IConventionNavigationBuilder> context);
    [NullableContextAttribute("1")]
public virtual void ProcessSkipNavigationAdded(IConventionSkipNavigationBuilder skipNavigationBuilder, BackingFieldAttribute attribute, IConventionContext`1<IConventionSkipNavigationBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.NavigationEagerLoadingConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public NavigationEagerLoadingConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessForeignKeyOwnershipChanged(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<Nullable`1<bool>> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Metadata.Conventions.NonNullableConventionBase : object {
    private static string StateAnnotationName;
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected NonNullableConventionBase(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    protected virtual bool IsNonNullableReferenceType(IConventionModelBuilder modelBuilder, MemberInfo memberInfo);
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.NonNullableNavigationConvention : NonNullableConventionBase {
    [NullableContextAttribute("1")]
public NonNullableNavigationConvention(ProviderConventionSetBuilderDependencies dependencies);
    [NullableContextAttribute("1")]
public virtual void ProcessNavigationAdded(IConventionNavigationBuilder navigationBuilder, IConventionContext`1<IConventionNavigationBuilder> context);
    [NullableContextAttribute("1")]
public virtual void ProcessForeignKeyPrincipalEndChanged(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<IConventionForeignKeyBuilder> context);
    private void ProcessNavigation(IConventionNavigationBuilder navigationBuilder);
    private bool IsNonNullable(IConventionModelBuilder modelBuilder, IConventionNavigation navigation);
}
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.NonNullableReferencePropertyConvention : NonNullableConventionBase {
    [NullableContextAttribute("1")]
public NonNullableReferencePropertyConvention(ProviderConventionSetBuilderDependencies dependencies);
    private void Process(IConventionPropertyBuilder propertyBuilder);
    [NullableContextAttribute("1")]
public virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, IConventionContext`1<IConventionPropertyBuilder> context);
    [NullableContextAttribute("1")]
public virtual void ProcessPropertyFieldChanged(IConventionPropertyBuilder propertyBuilder, FieldInfo newFieldInfo, FieldInfo oldFieldInfo, IConventionContext`1<FieldInfo> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.NotMappedEntityTypeAttributeConvention : EntityTypeAttributeConventionBase`1<NotMappedAttribute> {
    public NotMappedEntityTypeAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, NotMappedAttribute attribute, IConventionContext`1<IConventionEntityTypeBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.NotMappedMemberAttributeConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public NotMappedMemberAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
    protected virtual bool ShouldIgnore(MemberInfo memberInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.OwnedEntityTypeAttributeConvention : EntityTypeAttributeConventionBase`1<OwnedAttribute> {
    public OwnedEntityTypeAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, OwnedAttribute attribute, IConventionContext`1<IConventionEntityTypeBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.PrecisionAttributeConvention : PropertyAttributeConventionBase`1<PrecisionAttribute> {
    public PrecisionAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, PrecisionAttribute attribute, MemberInfo clrMember, IConventionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Metadata.Conventions.PropertyAttributeConventionBase`1 : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected PropertyAttributeConventionBase`1(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, IConventionContext`1<IConventionPropertyBuilder> context);
    public virtual void ProcessPropertyFieldChanged(IConventionPropertyBuilder propertyBuilder, FieldInfo newFieldInfo, FieldInfo oldFieldInfo, IConventionContext`1<FieldInfo> context);
    private void Process(IConventionPropertyBuilder propertyBuilder, MemberInfo memberInfo, IReadableConventionContext context);
    protected abstract virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, TAttribute attribute, MemberInfo clrMember, IConventionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.PropertyDiscoveryConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public PropertyDiscoveryConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    private void Process(IConventionEntityTypeBuilder entityTypeBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.QueryFilterRewritingConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private DbSetAccessRewritingExpressionVisitor <DbSetAccessRewriter>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    protected DbSetAccessRewritingExpressionVisitor DbSetAccessRewriter { get; protected set; }
    public QueryFilterRewritingConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual DbSetAccessRewritingExpressionVisitor get_DbSetAccessRewriter();
    [CompilerGeneratedAttribute]
protected virtual void set_DbSetAccessRewriter(DbSetAccessRewritingExpressionVisitor value);
    public virtual void ProcessModelFinalizing(IConventionModelBuilder modelBuilder, IConventionContext`1<IConventionModelBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationshipDiscoveryConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public RelationshipDiscoveryConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    private void DiscoverRelationships(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext context, HashSet`1<Type> otherInverseCandidateTypes);
    private IReadOnlyList`1<RelationshipCandidate> FindRelationshipCandidates(IConventionEntityTypeBuilder entityTypeBuilder, HashSet`1<Type> otherInverseCandidateTypes);
    private List`1<RelationshipCandidate> UpdateTargetEntityTypes(IConventionEntityTypeBuilder entityTypeBuilder, Dictionary`2<IConventionEntityType, RelationshipCandidate> relationshipCandidates);
    protected virtual IConventionEntityTypeBuilder TryGetTargetEntityTypeBuilder(IConventionEntityTypeBuilder entityTypeBuilder, Type targetClrType, MemberInfo navigationMemberInfo, Nullable`1<bool> shouldBeOwned, bool shouldCreate);
    private static IReadOnlyList`1<RelationshipCandidate> RemoveIncompatibleWithExistingRelationships(IReadOnlyList`1<RelationshipCandidate> relationshipCandidates, IConventionEntityTypeBuilder entityTypeBuilder);
    private static bool AreCompatible(PropertyInfo navigationProperty, PropertyInfo inversePropertyInfo, IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityTypeBuilder targetEntityTypeBuilder);
    private static bool CanSetInverse(IConventionNavigation existingNavigation, MemberInfo inverse, IConventionEntityTypeBuilder inverseEntityTypeBuilder);
    private static IReadOnlyList`1<RelationshipCandidate> RemoveInheritedInverseNavigations(IReadOnlyList`1<RelationshipCandidate> relationshipCandidates);
    private static void RemoveInheritedInverseNavigations(RelationshipCandidate relationshipCandidate, List`1<RelationshipCandidate> relationshipCandidatesHierarchy, HashSet`1<RelationshipCandidate> filteredRelationshipCandidates);
    private static IReadOnlyList`1<RelationshipCandidate> RemoveSingleSidedBaseNavigations(IReadOnlyList`1<RelationshipCandidate> relationshipCandidates, IConventionEntityTypeBuilder entityTypeBuilder);
    private void CreateRelationships(IEnumerable`1<RelationshipCandidate> relationshipCandidates, IConventionEntityTypeBuilder entityTypeBuilder);
    private void DiscoverUnidirectionalInverses(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext context, HashSet`1<Type> otherInverseCandidateTypes);
    private static void RemoveExtraOwnershipInverse(IConventionEntityType entityType, RelationshipCandidate relationshipCandidate);
    protected virtual Nullable`1<bool> ShouldBeOwned(Type targetType, IConventionModel model);
    private bool RemoveIfAmbiguous(IConventionEntityType entityType, RelationshipCandidate relationshipCandidate);
    private static void RemoveNavigation(PropertyInfo navigationProperty, IConventionEntityType declaringEntityType, List`1<PropertyInfo> toRemoveFrom);
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    private void ApplyOnRelatedEntityTypes(IConventionEntityType entityType, IConventionContext context);
    public virtual void ProcessForeignKeyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionForeignKey foreignKey, IConventionContext`1<IConventionForeignKey> context);
    public virtual void ProcessNavigationRemoved(IConventionEntityTypeBuilder sourceEntityTypeBuilder, IConventionEntityTypeBuilder targetEntityTypeBuilder, string navigationName, MemberInfo memberInfo, IConventionContext`1<string> context);
    private void Process(IConventionEntityType entityType, string navigationName, MemberInfo memberInfo, IConventionContext context);
    private static bool IsCandidateNavigationProperty(IConventionEntityType sourceEntityType, string navigationName, MemberInfo memberInfo);
    public virtual void ProcessEntityTypeIgnored(IConventionModelBuilder modelBuilder, string name, Type type, IConventionContext`1<string> context);
    public virtual void ProcessEntityTypeMemberIgnored(IConventionEntityTypeBuilder entityTypeBuilder, string name, IConventionContext`1<string> context);
    private bool ProcessEntityTypeMemberIgnoredOnBase(IConventionEntityType entityType, string name, PropertyInfo property);
    public virtual void ProcessForeignKeyNullNavigationSet(IConventionForeignKeyBuilder relationshipBuilder, bool pointsToPrincipal, IConventionContext`1<IConventionNavigation> context);
    public virtual void ProcessNavigationAdded(IConventionNavigationBuilder navigationBuilder, IConventionContext`1<IConventionNavigationBuilder> context);
    public virtual void ProcessForeignKeyOwnershipChanged(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<Nullable`1<bool>> context);
    private static bool IsImplicitlyCreatedUnusedType(IConventionEntityType entityType);
    private static bool IsAmbiguous(IConventionEntityType entityType, MemberInfo navigationProperty);
    private static bool HasAmbiguousNavigationsTo(IConventionEntityType sourceEntityType, Type targetClrType);
    private static bool HasDeclaredAmbiguousNavigationsTo(IConventionEntityType sourceEntityType, Type targetClrType);
    private static ImmutableSortedDictionary`2<MemberInfo, Type> GetAmbiguousNavigations(IConventionEntityType entityType);
    private static void AddAmbiguous(IConventionEntityTypeBuilder entityTypeBuilder, IReadOnlyList`1<PropertyInfo> navigationProperties, Type targetType);
    private static bool RemoveAmbiguous(IConventionEntityType entityType, Type targetType);
    private static void SetAmbiguousNavigations(IConventionEntityTypeBuilder entityTypeBuilder, ImmutableSortedDictionary`2<MemberInfo, Type> ambiguousNavigations);
    [CompilerGeneratedAttribute]
private bool <FindRelationshipCandidates>g__IsNewSharedType|5_0(Type targetClrType, IConventionEntityType entityType);
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.RequiredNavigationAttributeConvention : NavigationAttributeConventionBase`1<RequiredAttribute> {
    [NullableContextAttribute("1")]
public RequiredNavigationAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    [NullableContextAttribute("1")]
public virtual void ProcessNavigationAdded(IConventionNavigationBuilder navigationBuilder, RequiredAttribute attribute, IConventionContext`1<IConventionNavigationBuilder> context);
    [NullableContextAttribute("1")]
public virtual void ProcessForeignKeyPrincipalEndChanged(IConventionForeignKeyBuilder relationshipBuilder, IEnumerable`1<RequiredAttribute> dependentToPrincipalAttributes, IEnumerable`1<RequiredAttribute> principalToDependentAttributes, IConventionContext`1<IConventionForeignKeyBuilder> context);
    private void ProcessNavigation(IConventionNavigationBuilder navigationBuilder);
    [NullableContextAttribute("1")]
public virtual void ProcessSkipNavigationAdded(IConventionSkipNavigationBuilder skipNavigationBuilder, RequiredAttribute attribute, IConventionContext`1<IConventionSkipNavigationBuilder> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.RequiredPropertyAttributeConvention : PropertyAttributeConventionBase`1<RequiredAttribute> {
    public RequiredPropertyAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, RequiredAttribute attribute, MemberInfo clrMember, IConventionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.RuntimeModelConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public RuntimeModelConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual IModel ProcessModelFinalized(IModel model);
    protected virtual RuntimeModel Create(IModel model);
    private void CreateAnnotations(TSource source, TTarget target, Action`5<RuntimeModelConvention, Dictionary`2<string, object>, TSource, TTarget, bool> process);
    protected virtual void ProcessModelAnnotations(Dictionary`2<string, object> annotations, IModel model, RuntimeModel runtimeModel, bool runtime);
    private static RuntimeEntityType Create(IEntityType entityType, RuntimeModel model);
    private static ParameterBinding Create(ParameterBinding parameterBinding, RuntimeEntityType entityType);
    private static InstantiationBinding Create(InstantiationBinding instantiationBinding, RuntimeEntityType entityType);
    protected virtual void ProcessEntityTypeAnnotations(Dictionary`2<string, object> annotations, IEntityType entityType, RuntimeEntityType runtimeEntityType, bool runtime);
    private static RuntimeTypeMappingConfiguration Create(ITypeMappingConfiguration typeConfiguration, RuntimeModel model);
    protected virtual void ProcessTypeMappingConfigurationAnnotations(Dictionary`2<string, object> annotations, ITypeMappingConfiguration typeConfiguration, RuntimeTypeMappingConfiguration runtimeTypeConfiguration, bool runtime);
    private static RuntimeProperty Create(IProperty property, RuntimeEntityType runtimeEntityType);
    protected virtual void ProcessPropertyAnnotations(Dictionary`2<string, object> annotations, IProperty property, RuntimeProperty runtimeProperty, bool runtime);
    private static RuntimeServiceProperty Create(IServiceProperty property, RuntimeEntityType runtimeEntityType);
    protected virtual void ProcessServicePropertyAnnotations(Dictionary`2<string, object> annotations, IServiceProperty property, RuntimeServiceProperty runtimeProperty, bool runtime);
    private static RuntimeKey Create(IKey key, RuntimeEntityType runtimeEntityType);
    protected virtual void ProcessKeyAnnotations(Dictionary`2<string, object> annotations, IKey key, RuntimeKey runtimeKey, bool runtime);
    private static RuntimeIndex Create(IIndex index, RuntimeEntityType runtimeEntityType);
    protected virtual void ProcessIndexAnnotations(Dictionary`2<string, object> annotations, IIndex index, RuntimeIndex runtimeIndex, bool runtime);
    private RuntimeForeignKey Create(IForeignKey foreignKey, RuntimeEntityType runtimeEntityType);
    private static RuntimeTrigger Create(ITrigger trigger, RuntimeEntityType runtimeEntityType);
    protected virtual void ProcessTriggerAnnotations(Dictionary`2<string, object> annotations, ITrigger trigger, RuntimeTrigger runtimeTrigger, bool runtime);
    protected virtual void ProcessForeignKeyAnnotations(Dictionary`2<string, object> annotations, IForeignKey foreignKey, RuntimeForeignKey runtimeForeignKey, bool runtime);
    private static RuntimeNavigation Create(INavigation navigation, RuntimeForeignKey runtimeForeignKey);
    protected virtual void ProcessNavigationAnnotations(Dictionary`2<string, object> annotations, INavigation navigation, RuntimeNavigation runtimeNavigation, bool runtime);
    private RuntimeSkipNavigation Create(ISkipNavigation navigation, RuntimeEntityType runtimeEntityType);
    protected virtual RuntimeForeignKey GetForeignKey(IForeignKey foreignKey, RuntimeEntityType entityType);
    protected virtual RuntimeKey GetKey(IKey key, RuntimeEntityType entityType);
    protected virtual RuntimeIndex GetIndex(IIndex index, RuntimeEntityType entityType);
    protected virtual void ProcessSkipNavigationAnnotations(Dictionary`2<string, object> annotations, ISkipNavigation skipNavigation, RuntimeSkipNavigation runtimeSkipNavigation, bool runtime);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.ServicePropertyDiscoveryConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public ServicePropertyDiscoveryConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessEntityTypeAdded(IConventionEntityTypeBuilder entityTypeBuilder, IConventionContext`1<IConventionEntityTypeBuilder> context);
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    private void Process(IConventionEntityTypeBuilder entityTypeBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.StringLengthAttributeConvention : PropertyAttributeConventionBase`1<StringLengthAttribute> {
    public StringLengthAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, StringLengthAttribute attribute, MemberInfo clrMember, IConventionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.TimestampAttributeConvention : PropertyAttributeConventionBase`1<TimestampAttribute> {
    public TimestampAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, TimestampAttribute attribute, MemberInfo clrMember, IConventionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.UnicodeAttributeConvention : PropertyAttributeConventionBase`1<UnicodeAttribute> {
    public UnicodeAttributeConvention(ProviderConventionSetBuilderDependencies dependencies);
    protected virtual void ProcessPropertyAdded(IConventionPropertyBuilder propertyBuilder, UnicodeAttribute attribute, MemberInfo clrMember, IConventionContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Conventions.ValueGenerationConvention : object {
    [CompilerGeneratedAttribute]
private ProviderConventionSetBuilderDependencies <Dependencies>k__BackingField;
    protected ProviderConventionSetBuilderDependencies Dependencies { get; }
    public ValueGenerationConvention(ProviderConventionSetBuilderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ProviderConventionSetBuilderDependencies get_Dependencies();
    public virtual void ProcessForeignKeyAdded(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<IConventionForeignKeyBuilder> context);
    public virtual void ProcessForeignKeyRemoved(IConventionEntityTypeBuilder entityTypeBuilder, IConventionForeignKey foreignKey, IConventionContext`1<IConventionForeignKey> context);
    public virtual void ProcessForeignKeyPropertiesChanged(IConventionForeignKeyBuilder relationshipBuilder, IReadOnlyList`1<IConventionProperty> oldDependentProperties, IConventionKey oldPrincipalKey, IConventionContext`1<IReadOnlyList`1<IConventionProperty>> context);
    private void OnForeignKeyRemoved(IReadOnlyList`1<IConventionProperty> foreignKeyProperties);
    public virtual void ProcessEntityTypePrimaryKeyChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionKey newPrimaryKey, IConventionKey previousPrimaryKey, IConventionContext`1<IConventionKey> context);
    public virtual void ProcessEntityTypeBaseTypeChanged(IConventionEntityTypeBuilder entityTypeBuilder, IConventionEntityType newBaseType, IConventionEntityType oldBaseType, IConventionContext`1<IConventionEntityType> context);
    protected virtual Nullable`1<ValueGenerated> GetValueGenerated(IConventionProperty property);
    public static Nullable`1<ValueGenerated> GetValueGenerated(IReadOnlyProperty property);
    private static bool ShouldHaveGeneratedProperty(IReadOnlyKey key);
    private static bool CanBeGenerated(IReadOnlyProperty property);
    public virtual void ProcessForeignKeyOwnershipChanged(IConventionForeignKeyBuilder relationshipBuilder, IConventionContext`1<Nullable`1<bool>> context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.DependencyInjectionMethodParameterBinding : DependencyInjectionParameterBinding {
    [CompilerGeneratedAttribute]
private MethodInfo <Method>k__BackingField;
    public MethodInfo Method { get; }
    public DependencyInjectionMethodParameterBinding(Type parameterType, Type serviceType, MethodInfo method, IPropertyBase[] serviceProperties);
    [CompilerGeneratedAttribute]
public virtual MethodInfo get_Method();
    public virtual Expression BindToParameter(Expression materializationExpression, Expression entityTypeExpression);
    public virtual ParameterBinding With(IPropertyBase[] consumedProperties);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.DependencyInjectionParameterBinding : ServiceParameterBinding {
    private static MethodInfo GetServiceMethod;
    public DependencyInjectionParameterBinding(Type parameterType, Type serviceType, IPropertyBase[] serviceProperties);
    private static DependencyInjectionParameterBinding();
    public virtual Expression BindToParameter(Expression materializationExpression, Expression entityTypeExpression);
    public virtual ParameterBinding With(IPropertyBase[] consumedProperties);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.EntityTypeFullNameComparer : object {
    public static EntityTypeFullNameComparer Instance;
    private static EntityTypeFullNameComparer();
    [NullableContextAttribute("2")]
public sealed virtual int Compare(IReadOnlyEntityType x, IReadOnlyEntityType y);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IReadOnlyEntityType x, IReadOnlyEntityType y);
    public sealed virtual int GetHashCode(IReadOnlyEntityType obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.EntityTypeParameterBinding : ServiceParameterBinding {
    public EntityTypeParameterBinding(IPropertyBase[] serviceProperties);
    public virtual Expression BindToParameter(Expression materializationExpression, Expression entityTypeExpression);
    public virtual ParameterBinding With(IPropertyBase[] consumedProperties);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.FactoryMethodBinding : InstantiationBinding {
    private object _factoryInstance;
    private MethodInfo _factoryMethod;
    [CompilerGeneratedAttribute]
private Type <RuntimeType>k__BackingField;
    public Type RuntimeType { get; }
    public FactoryMethodBinding(MethodInfo factoryMethod, IReadOnlyList`1<ParameterBinding> parameterBindings, Type runtimeType);
    public FactoryMethodBinding(object factoryInstance, MethodInfo factoryMethod, IReadOnlyList`1<ParameterBinding> parameterBindings, Type runtimeType);
    public virtual Expression CreateConstructorExpression(ParameterBindingInfo bindingInfo);
    [CompilerGeneratedAttribute]
public virtual Type get_RuntimeType();
    public virtual InstantiationBinding With(IReadOnlyList`1<ParameterBinding> parameterBindings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.ForeignKeyComparer : object {
    public static ForeignKeyComparer Instance;
    private static ForeignKeyComparer();
    [NullableContextAttribute("2")]
public sealed virtual int Compare(IReadOnlyForeignKey x, IReadOnlyForeignKey y);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IReadOnlyForeignKey x, IReadOnlyForeignKey y);
    public sealed virtual int GetHashCode(IReadOnlyForeignKey obj);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IClrCollectionAccessor {
    public Type CollectionType { get; }
    public abstract virtual bool Add(object entity, object value, bool forMaterialization);
    public abstract virtual bool Contains(object entity, object value);
    public abstract virtual bool Remove(object entity, object value);
    public abstract virtual bool AddStandalone(object collection, object value);
    public abstract virtual bool ContainsStandalone(object collection, object value);
    public abstract virtual bool RemoveStandalone(object collection, object value);
    public abstract virtual object Create();
    public abstract virtual object GetOrCreate(object entity, bool forMaterialization);
    public abstract virtual Type get_CollectionType();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IClrPropertyGetter {
    public abstract virtual object GetClrValue(object entity);
    public abstract virtual bool HasDefaultValue(object entity);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IClrPropertySetter {
    public abstract virtual void SetClrValue(object instance, object value);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IConstructorBindingFactory {
    public abstract virtual void GetBindings(IConventionEntityType entityType, InstantiationBinding& constructorBinding, InstantiationBinding& serviceOnlyBinding);
    public abstract virtual void GetBindings(IMutableEntityType entityType, InstantiationBinding& constructorBinding, InstantiationBinding& serviceOnlyBinding);
    public abstract virtual void GetBindings(IReadOnlyEntityType entityType, InstantiationBinding& constructorBinding, InstantiationBinding& serviceOnlyBinding);
    public abstract virtual bool TryBindConstructor(IConventionEntityType entityType, ConstructorInfo constructor, InstantiationBinding& binding, IEnumerable`1& unboundParameters);
    public abstract virtual bool TryBindConstructor(IMutableEntityType entityType, ConstructorInfo constructor, InstantiationBinding& binding, IEnumerable`1& unboundParameters);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable {
    public IConventionAnnotatableBuilder Builder { get; }
    public bool IsInModel { get; }
    public abstract virtual IConventionAnnotatableBuilder get_Builder();
    public abstract virtual bool get_IsInModel();
    public abstract virtual IEnumerable`1<IConventionAnnotation> GetAnnotations();
    public abstract virtual IConventionAnnotation AddAnnotation(string name, object value, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual IConventionAnnotation SetAnnotation(string name, object value, bool fromDataAnnotation);
    public abstract virtual IConventionAnnotation FindAnnotation(string name);
    public abstract virtual IConventionAnnotation RemoveAnnotation(string name);
    public virtual IConventionAnnotation GetAnnotation(string annotationName);
    public virtual void AddAnnotations(IEnumerable`1<IConventionAnnotation> annotations, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual IConventionAnnotation SetOrRemoveAnnotation(string name, object value, bool fromDataAnnotation);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation {
    public abstract virtual ConfigurationSource GetConfigurationSource();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType {
    public IConventionModel Model { get; }
    public IConventionEntityTypeBuilder Builder { get; }
    [NullableAttribute("2")]
public IConventionEntityType BaseType { get; }
    public bool IsKeyless { get; }
    public abstract virtual ConfigurationSource GetConfigurationSource();
    public abstract virtual IConventionModel get_Model();
    public abstract virtual IConventionEntityTypeBuilder get_Builder();
    [NullableContextAttribute("2")]
public abstract virtual IConventionEntityType get_BaseType();
    public abstract virtual bool get_IsKeyless();
    public abstract virtual Nullable`1<ChangeTrackingStrategy> SetChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetChangeTrackingStrategyConfigurationSource();
    [NullableContextAttribute("2")]
public abstract virtual LambdaExpression SetQueryFilter(LambdaExpression queryFilter, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetQueryFilterConfigurationSource();
    [NullableContextAttribute("2")]
public virtual IConventionProperty FindDiscriminatorProperty();
    [NullableContextAttribute("2")]
public abstract virtual IConventionProperty SetDiscriminatorProperty(IReadOnlyProperty property, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetDiscriminatorPropertyConfigurationSource();
    public virtual Nullable`1<bool> SetDiscriminatorMappingComplete(Nullable`1<bool> complete, bool fromDataAnnotation);
    public virtual Nullable`1<ConfigurationSource> GetDiscriminatorMappingCompleteConfigurationSource();
    [NullableContextAttribute("2")]
public virtual object SetDiscriminatorValue(object value, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public virtual object RemoveDiscriminatorValue();
    public virtual Nullable`1<ConfigurationSource> GetDiscriminatorValueConfigurationSource();
    [NullableContextAttribute("2")]
public abstract virtual IConventionEntityType SetBaseType(IConventionEntityType entityType, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetBaseTypeConfigurationSource();
    public virtual IEnumerable`1<IConventionEntityType> GetAllBaseTypes();
    public virtual IEnumerable`1<IConventionEntityType> GetAllBaseTypesAscending();
    public virtual IEnumerable`1<IConventionEntityType> GetAllBaseTypesInclusive();
    public virtual IEnumerable`1<IConventionEntityType> GetAllBaseTypesInclusiveAscending();
    public virtual IEnumerable`1<IConventionEntityType> GetDerivedTypes();
    public virtual IEnumerable`1<IConventionEntityType> GetDerivedTypesInclusive();
    public virtual IEnumerable`1<IConventionEntityType> GetDirectlyDerivedTypes();
    public virtual IConventionEntityType GetRootType();
    public virtual IConventionEntityType FindClosestCommonParent(IReadOnlyEntityType otherEntityType);
    public virtual IConventionEntityType LeastDerivedType(IReadOnlyEntityType otherEntityType);
    public abstract virtual Nullable`1<bool> SetIsKeyless(Nullable`1<bool> keyless, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetIsKeylessConfigurationSource();
    [NullableContextAttribute("2")]
public abstract virtual IConventionKey SetPrimaryKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public virtual IConventionKey SetPrimaryKey(IConventionProperty property, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual IConventionKey FindPrimaryKey();
    public abstract virtual Nullable`1<ConfigurationSource> GetPrimaryKeyConfigurationSource();
    public virtual IConventionKey AddKey(IConventionProperty property, bool fromDataAnnotation);
    public abstract virtual IConventionKey AddKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    public abstract virtual IConventionKey FindKey(IReadOnlyList`1<IReadOnlyProperty> properties);
    public virtual IConventionKey FindKey(IReadOnlyProperty property);
    public virtual IEnumerable`1<IConventionKey> GetDeclaredKeys();
    public abstract virtual IEnumerable`1<IConventionKey> GetKeys();
    public abstract virtual IConventionKey RemoveKey(IReadOnlyList`1<IReadOnlyProperty> properties);
    public abstract virtual IConventionKey RemoveKey(IReadOnlyKey key);
    public virtual IConventionForeignKey AddForeignKey(IConventionProperty property, IConventionKey principalKey, IConventionEntityType principalEntityType, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKey AddForeignKey(IReadOnlyList`1<IConventionProperty> properties, IConventionKey principalKey, IConventionEntityType principalEntityType, bool setComponentConfigurationSource, bool fromDataAnnotation);
    public abstract virtual IConventionForeignKey FindForeignKey(IReadOnlyList`1<IReadOnlyProperty> properties, IReadOnlyKey principalKey, IReadOnlyEntityType principalEntityType);
    public virtual IEnumerable`1<IConventionForeignKey> FindForeignKeys(IReadOnlyProperty property);
    public virtual IEnumerable`1<IConventionForeignKey> FindForeignKeys(IReadOnlyList`1<IReadOnlyProperty> properties);
    public virtual IConventionForeignKey FindForeignKey(IReadOnlyProperty property, IReadOnlyKey principalKey, IReadOnlyEntityType principalEntityType);
    public virtual IEnumerable`1<IConventionForeignKey> FindDeclaredForeignKeys(IReadOnlyList`1<IReadOnlyProperty> properties);
    public virtual IEnumerable`1<IConventionForeignKey> GetDeclaredForeignKeys();
    public virtual IEnumerable`1<IConventionForeignKey> GetDerivedForeignKeys();
    public abstract virtual IEnumerable`1<IConventionForeignKey> GetForeignKeys();
    public virtual IEnumerable`1<IConventionForeignKey> GetDeclaredReferencingForeignKeys();
    public virtual IEnumerable`1<IConventionForeignKey> GetReferencingForeignKeys();
    [NullableContextAttribute("2")]
public virtual IConventionForeignKey FindOwnership();
    public abstract virtual IConventionForeignKey RemoveForeignKey(IReadOnlyList`1<IReadOnlyProperty> properties, IConventionKey principalKey, IConventionEntityType principalEntityType);
    public abstract virtual IConventionForeignKey RemoveForeignKey(IReadOnlyForeignKey foreignKey);
    public virtual IConventionNavigation FindNavigation(MemberInfo memberInfo);
    public virtual IConventionNavigation FindNavigation(string name);
    public virtual IConventionNavigation FindDeclaredNavigation(string name);
    public virtual IEnumerable`1<IConventionNavigation> GetDeclaredNavigations();
    public virtual IEnumerable`1<IConventionNavigation> GetDerivedNavigations();
    public virtual IEnumerable`1<IConventionNavigation> GetNavigations();
    public abstract virtual IConventionSkipNavigation AddSkipNavigation(string name, MemberInfo memberInfo, IConventionEntityType targetEntityType, bool collection, bool onDependent, bool fromDataAnnotation);
    public virtual IConventionSkipNavigation FindSkipNavigation(MemberInfo memberInfo);
    public abstract virtual IConventionSkipNavigation FindSkipNavigation(string name);
    public virtual IConventionSkipNavigation FindDeclaredSkipNavigation(string name);
    public virtual IEnumerable`1<IConventionSkipNavigation> GetDeclaredSkipNavigations();
    public virtual IEnumerable`1<IConventionSkipNavigation> GetDerivedSkipNavigations();
    public abstract virtual IEnumerable`1<IConventionSkipNavigation> GetSkipNavigations();
    public abstract virtual IConventionSkipNavigation RemoveSkipNavigation(IReadOnlySkipNavigation navigation);
    public virtual IConventionIndex AddIndex(IConventionProperty property, bool fromDataAnnotation);
    public abstract virtual IConventionIndex AddIndex(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    public virtual IConventionIndex AddIndex(IConventionProperty property, string name, bool fromDataAnnotation);
    public abstract virtual IConventionIndex AddIndex(IReadOnlyList`1<IConventionProperty> properties, string name, bool fromDataAnnotation);
    public virtual IConventionIndex FindIndex(IReadOnlyProperty property);
    public abstract virtual IConventionIndex FindIndex(IReadOnlyList`1<IReadOnlyProperty> properties);
    public abstract virtual IConventionIndex FindIndex(string name);
    public virtual IEnumerable`1<IConventionIndex> GetDeclaredIndexes();
    public virtual IEnumerable`1<IConventionIndex> GetDerivedIndexes();
    public abstract virtual IEnumerable`1<IConventionIndex> GetIndexes();
    public abstract virtual IConventionIndex RemoveIndex(IReadOnlyList`1<IReadOnlyProperty> properties);
    public abstract virtual IConventionIndex RemoveIndex(IReadOnlyIndex index);
    [RequiresUnreferencedCodeAttribute("Currently used only in tests")]
public virtual IConventionProperty AddProperty(MemberInfo memberInfo, bool fromDataAnnotation);
    public abstract virtual IConventionProperty AddProperty(string name, bool fromDataAnnotation);
    public abstract virtual IConventionProperty AddProperty(string name, Type propertyType, bool setTypeConfigurationSource, bool fromDataAnnotation);
    public abstract virtual IConventionProperty AddProperty(string name, Type propertyType, MemberInfo memberInfo, bool setTypeConfigurationSource, bool fromDataAnnotation);
    public virtual IConventionProperty AddIndexerProperty(string name, Type propertyType, bool setTypeConfigurationSource, bool fromDataAnnotation);
    public abstract virtual IConventionProperty FindProperty(string name);
    public abstract virtual IEnumerable`1<IConventionProperty> GetProperties();
    public virtual IConventionProperty FindProperty(MemberInfo memberInfo);
    public virtual IReadOnlyList`1<IConventionProperty> FindProperties(IReadOnlyList`1<string> propertyNames);
    public virtual IConventionProperty GetProperty(string name);
    public virtual IConventionProperty FindDeclaredProperty(string name);
    public virtual IEnumerable`1<IConventionProperty> GetDeclaredProperties();
    public virtual IEnumerable`1<IConventionProperty> GetDerivedProperties();
    public abstract virtual IConventionProperty RemoveProperty(string name);
    public abstract virtual IConventionProperty RemoveProperty(IReadOnlyProperty property);
    public abstract virtual IConventionServiceProperty AddServiceProperty(MemberInfo memberInfo, bool fromDataAnnotation);
    public abstract virtual IConventionServiceProperty FindServiceProperty(string name);
    public virtual IEnumerable`1<IConventionServiceProperty> GetDeclaredServiceProperties();
    public virtual IEnumerable`1<IConventionServiceProperty> GetDerivedServiceProperties();
    public abstract virtual IEnumerable`1<IConventionServiceProperty> GetServiceProperties();
    public abstract virtual IConventionServiceProperty RemoveServiceProperty(string name);
    public abstract virtual IConventionServiceProperty RemoveServiceProperty(IReadOnlyServiceProperty property);
    public abstract virtual IConventionTrigger FindDeclaredTrigger(string name);
    public abstract virtual IEnumerable`1<IConventionTrigger> GetDeclaredTriggers();
    public abstract virtual IConventionTrigger AddTrigger(string name, bool fromDataAnnotation);
    public abstract virtual IConventionTrigger RemoveTrigger(string name);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey {
    public IConventionForeignKeyBuilder Builder { get; }
    public IReadOnlyList`1<IConventionProperty> Properties { get; }
    public IConventionKey PrincipalKey { get; }
    public IConventionEntityType DeclaringEntityType { get; }
    public IConventionEntityType PrincipalEntityType { get; }
    [NullableAttribute("2")]
public IConventionNavigation DependentToPrincipal { get; }
    [NullableAttribute("2")]
public IConventionNavigation PrincipalToDependent { get; }
    public abstract virtual IConventionForeignKeyBuilder get_Builder();
    public abstract virtual IReadOnlyList`1<IConventionProperty> get_Properties();
    public abstract virtual IConventionKey get_PrincipalKey();
    public abstract virtual IConventionEntityType get_DeclaringEntityType();
    public abstract virtual IConventionEntityType get_PrincipalEntityType();
    [NullableContextAttribute("2")]
public abstract virtual IConventionNavigation get_DependentToPrincipal();
    [NullableContextAttribute("2")]
public abstract virtual IConventionNavigation get_PrincipalToDependent();
    public abstract virtual ConfigurationSource GetConfigurationSource();
    public abstract virtual IReadOnlyList`1<IConventionProperty> SetProperties(IReadOnlyList`1<IConventionProperty> properties, IConventionKey principalKey, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetPropertiesConfigurationSource();
    public abstract virtual Nullable`1<ConfigurationSource> GetPrincipalKeyConfigurationSource();
    public abstract virtual Nullable`1<ConfigurationSource> GetPrincipalEndConfigurationSource();
    public abstract virtual Nullable`1<bool> SetIsUnique(Nullable`1<bool> unique, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetIsUniqueConfigurationSource();
    public abstract virtual Nullable`1<bool> SetIsRequired(Nullable`1<bool> required, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetIsRequiredConfigurationSource();
    public abstract virtual Nullable`1<bool> SetIsRequiredDependent(Nullable`1<bool> required, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetIsRequiredDependentConfigurationSource();
    public abstract virtual Nullable`1<bool> SetIsOwnership(Nullable`1<bool> ownership, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetIsOwnershipConfigurationSource();
    public abstract virtual Nullable`1<DeleteBehavior> SetDeleteBehavior(Nullable`1<DeleteBehavior> deleteBehavior, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetDeleteBehaviorConfigurationSource();
    [NullableContextAttribute("2")]
public abstract virtual IConventionNavigation SetDependentToPrincipal(string name, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual IConventionNavigation SetDependentToPrincipal(MemberInfo property, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetDependentToPrincipalConfigurationSource();
    [NullableContextAttribute("2")]
public abstract virtual IConventionNavigation SetPrincipalToDependent(string name, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual IConventionNavigation SetPrincipalToDependent(MemberInfo property, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetPrincipalToDependentConfigurationSource();
    public virtual IEnumerable`1<IConventionSkipNavigation> GetReferencingSkipNavigations();
    public virtual IConventionEntityType GetRelatedEntityType(IReadOnlyEntityType entityType);
    [NullableContextAttribute("2")]
public virtual IConventionNavigation GetNavigation(bool pointsToPrincipal);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionIndex {
    public IConventionIndexBuilder Builder { get; }
    public IReadOnlyList`1<IConventionProperty> Properties { get; }
    public IConventionEntityType DeclaringEntityType { get; }
    public abstract virtual IConventionIndexBuilder get_Builder();
    public abstract virtual IReadOnlyList`1<IConventionProperty> get_Properties();
    public abstract virtual IConventionEntityType get_DeclaringEntityType();
    public abstract virtual ConfigurationSource GetConfigurationSource();
    public abstract virtual Nullable`1<bool> SetIsUnique(Nullable`1<bool> unique, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetIsUniqueConfigurationSource();
    [NullableContextAttribute("2")]
public abstract virtual IReadOnlyList`1<bool> SetIsDescending(IReadOnlyList`1<bool> descending, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetIsDescendingConfigurationSource();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionKey {
    public IConventionKeyBuilder Builder { get; }
    public IReadOnlyList`1<IConventionProperty> Properties { get; }
    public IConventionEntityType DeclaringEntityType { get; }
    public abstract virtual IConventionKeyBuilder get_Builder();
    public abstract virtual IReadOnlyList`1<IConventionProperty> get_Properties();
    public abstract virtual IConventionEntityType get_DeclaringEntityType();
    public abstract virtual ConfigurationSource GetConfigurationSource();
    public virtual IEnumerable`1<IConventionForeignKey> GetReferencingForeignKeys();
}
[NullableContextAttribute("1")]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2072")]
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionModel {
    public IConventionModelBuilder Builder { get; }
    public abstract virtual IConventionModelBuilder get_Builder();
    public abstract virtual IConventionBatch DelayConventions();
    public abstract virtual Nullable`1<PropertyAccessMode> SetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetPropertyAccessModeConfigurationSource();
    public abstract virtual Nullable`1<ChangeTrackingStrategy> SetChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetChangeTrackingStrategyConfigurationSource();
    public abstract virtual IConventionEntityType AddEntityType(string name, bool fromDataAnnotation);
    public abstract virtual IConventionEntityType AddEntityType(Type type, bool fromDataAnnotation);
    public abstract virtual IConventionEntityType AddEntityType(string name, Type clrType, bool fromDataAnnotation);
    public abstract virtual IConventionEntityType AddEntityType(string name, string definingNavigationName, IConventionEntityType definingEntityType, bool fromDataAnnotation);
    public abstract virtual IConventionEntityType AddEntityType(Type type, string definingNavigationName, IConventionEntityType definingEntityType, bool fromDataAnnotation);
    public abstract virtual IConventionEntityType AddOwnedEntityType(string name, bool fromDataAnnotation);
    public abstract virtual IConventionEntityType AddOwnedEntityType(Type type, bool fromDataAnnotation);
    public abstract virtual IConventionEntityType AddOwnedEntityType(string name, Type clrType, bool fromDataAnnotation);
    public abstract virtual IConventionEntityType FindEntityType(string name);
    public abstract virtual IConventionEntityType FindEntityType(string name, string definingNavigationName, IConventionEntityType definingEntityType);
    public virtual IConventionEntityType FindEntityType(Type type);
    public virtual IConventionEntityType FindEntityType(Type type, string definingNavigationName, IConventionEntityType definingEntityType);
    public abstract virtual IConventionEntityType RemoveEntityType(IConventionEntityType entityType);
    public abstract virtual IConventionEntityType RemoveEntityType(string name);
    public abstract virtual IConventionEntityType RemoveEntityType(string name, string definingNavigationName, IConventionEntityType definingEntityType);
    public abstract virtual IConventionEntityType RemoveEntityType(Type type);
    public abstract virtual IConventionEntityType RemoveEntityType(Type type, string definingNavigationName, IConventionEntityType definingEntityType);
    public abstract virtual IEnumerable`1<IConventionEntityType> GetEntityTypes();
    public virtual IEnumerable`1<IConventionEntityType> FindEntityTypes(Type type);
    public virtual IEnumerable`1<IConventionEntityType> FindLeastDerivedEntityTypes(Type type, Func`2<IReadOnlyEntityType, bool> condition);
    public abstract virtual void AddShared(Type type, bool fromDataAnnotation);
    public abstract virtual Type RemoveShared(Type type);
    public abstract virtual Nullable`1<ConfigurationSource> FindIsSharedConfigurationSource(Type type);
    public abstract virtual void AddOwned(Type type, bool fromDataAnnotation);
    public abstract virtual string RemoveOwned(Type type);
    public virtual bool IsOwned(Type type);
    public abstract virtual Nullable`1<ConfigurationSource> FindIsOwnedConfigurationSource(Type type);
    public abstract virtual string AddIgnored(string typeName, bool fromDataAnnotation);
    public abstract virtual string AddIgnored(Type type, bool fromDataAnnotation);
    public abstract virtual string RemoveIgnored(string typeName);
    public abstract virtual bool IsIgnored(string typeName);
    public abstract virtual bool IsIgnored(Type type);
    public abstract virtual bool IsIgnoredType(Type type);
    public abstract virtual Nullable`1<ConfigurationSource> FindIgnoredConfigurationSource(string typeName);
    public abstract virtual Nullable`1<ConfigurationSource> FindIgnoredConfigurationSource(Type type);
    public abstract virtual IModel FinalizeModel();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation {
    public IConventionNavigationBuilder Builder { get; }
    public IConventionEntityType DeclaringEntityType { get; }
    public IConventionEntityType TargetEntityType { get; }
    public IConventionForeignKey ForeignKey { get; }
    [NullableAttribute("2")]
public IConventionNavigation Inverse { get; }
    public abstract virtual IConventionNavigationBuilder get_Builder();
    [DebuggerStepThroughAttribute]
public virtual IConventionEntityType get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
public virtual IConventionEntityType get_TargetEntityType();
    private sealed virtual override ConfigurationSource Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase.GetConfigurationSource();
    [DebuggerStepThroughAttribute]
public virtual IConventionForeignKey get_ForeignKey();
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public virtual IConventionNavigation get_Inverse();
    [NullableContextAttribute("2")]
public abstract virtual IConventionNavigation SetInverse(string inverseName, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual IConventionNavigation SetInverse(MemberInfo inverse, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetInverseConfigurationSource();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionNavigationBase {
    public virtual Nullable`1<bool> SetIsEagerLoaded(Nullable`1<bool> eagerLoaded, bool fromDataAnnotation);
    public virtual Nullable`1<ConfigurationSource> GetIsEagerLoadedConfigurationSource();
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionProperty {
    [NullableAttribute("1")]
public IConventionPropertyBuilder Builder { get; }
    [NullableAttribute("1")]
public IConventionEntityType DeclaringEntityType { get; }
    [NullableContextAttribute("1")]
public abstract virtual IConventionPropertyBuilder get_Builder();
    [NullableContextAttribute("1")]
public abstract virtual IConventionEntityType get_DeclaringEntityType();
    public abstract virtual Nullable`1<ConfigurationSource> GetTypeConfigurationSource();
    public abstract virtual Nullable`1<bool> SetIsNullable(Nullable`1<bool> nullable, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetIsNullableConfigurationSource();
    public abstract virtual Nullable`1<ValueGenerated> SetValueGenerated(Nullable`1<ValueGenerated> valueGenerated, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetValueGeneratedConfigurationSource();
    public abstract virtual Nullable`1<bool> SetIsConcurrencyToken(Nullable`1<bool> concurrencyToken, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetIsConcurrencyTokenConfigurationSource();
    public virtual bool IsImplicitlyCreated();
    public virtual IConventionProperty FindFirstPrincipal();
    [NullableContextAttribute("1")]
public virtual IReadOnlyList`1<IConventionProperty> GetPrincipals();
    [NullableContextAttribute("1")]
public abstract virtual IEnumerable`1<IConventionForeignKey> GetContainingForeignKeys();
    [NullableContextAttribute("1")]
public abstract virtual IEnumerable`1<IConventionIndex> GetContainingIndexes();
    public virtual IConventionKey FindContainingPrimaryKey();
    [NullableContextAttribute("1")]
public abstract virtual IEnumerable`1<IConventionKey> GetContainingKeys();
    [NullableContextAttribute("1")]
public abstract virtual CoreTypeMapping SetTypeMapping(CoreTypeMapping typeMapping, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetTypeMappingConfigurationSource();
    public abstract virtual Nullable`1<int> SetMaxLength(Nullable`1<int> maxLength, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetMaxLengthConfigurationSource();
    public abstract virtual Nullable`1<int> SetPrecision(Nullable`1<int> precision, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetPrecisionConfigurationSource();
    public abstract virtual Nullable`1<int> SetScale(Nullable`1<int> scale, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetScaleConfigurationSource();
    public abstract virtual Nullable`1<bool> SetIsUnicode(Nullable`1<bool> unicode, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetIsUnicodeConfigurationSource();
    public abstract virtual Nullable`1<PropertySaveBehavior> SetBeforeSaveBehavior(Nullable`1<PropertySaveBehavior> beforeSaveBehavior, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetBeforeSaveBehaviorConfigurationSource();
    public abstract virtual Nullable`1<PropertySaveBehavior> SetAfterSaveBehavior(Nullable`1<PropertySaveBehavior> afterSaveBehavior, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetAfterSaveBehaviorConfigurationSource();
    public abstract virtual Func`3<IProperty, IEntityType, ValueGenerator> SetValueGeneratorFactory(Func`3<IProperty, IEntityType, ValueGenerator> valueGeneratorFactory, bool fromDataAnnotation);
    public abstract virtual Type SetValueGeneratorFactory(Type valueGeneratorFactory, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetValueGeneratorFactoryConfigurationSource();
    public abstract virtual ValueConverter SetValueConverter(ValueConverter converter, bool fromDataAnnotation);
    public abstract virtual Type SetValueConverter(Type converterType, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetValueConverterConfigurationSource();
    public abstract virtual Type SetProviderClrType(Type providerClrType, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetProviderClrTypeConfigurationSource();
    public abstract virtual ValueComparer SetValueComparer(ValueComparer comparer, bool fromDataAnnotation);
    public abstract virtual Type SetValueComparer(Type comparerType, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetValueComparerConfigurationSource();
    public abstract virtual ValueComparer SetProviderValueComparer(ValueComparer comparer, bool fromDataAnnotation);
    public abstract virtual Type SetProviderValueComparer(Type comparerType, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetProviderValueComparerConfigurationSource();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase {
    [NullableAttribute("1")]
public IConventionTypeBase DeclaringType { get; }
    [NullableContextAttribute("1")]
public abstract virtual IConventionTypeBase get_DeclaringType();
    public abstract virtual ConfigurationSource GetConfigurationSource();
    [NullableContextAttribute("2")]
public abstract virtual FieldInfo SetFieldInfo(FieldInfo fieldInfo, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public abstract virtual FieldInfo SetField(string fieldName, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetFieldInfoConfigurationSource();
    public abstract virtual Nullable`1<PropertyAccessMode> SetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetPropertyAccessModeConfigurationSource();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty {
    [NullableAttribute("1")]
public IConventionServicePropertyBuilder Builder { get; }
    [NullableAttribute("1")]
public IConventionEntityType DeclaringEntityType { get; }
    [NullableContextAttribute("1")]
public abstract virtual IConventionServicePropertyBuilder get_Builder();
    [NullableContextAttribute("1")]
public abstract virtual IConventionEntityType get_DeclaringEntityType();
    [NullableContextAttribute("2")]
public abstract virtual ServiceParameterBinding SetParameterBinding(ServiceParameterBinding parameterBinding, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetParameterBindingConfigurationSource();
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation {
    [NullableAttribute("1")]
public IConventionSkipNavigationBuilder Builder { get; }
    [NullableAttribute("1")]
public IConventionEntityType DeclaringEntityType { get; }
    [NullableAttribute("1")]
public IConventionEntityType TargetEntityType { get; }
    public IConventionEntityType JoinEntityType { get; }
    public IConventionForeignKey ForeignKey { get; }
    public IConventionSkipNavigation Inverse { get; }
    [NullableContextAttribute("1")]
public abstract virtual IConventionSkipNavigationBuilder get_Builder();
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
public virtual IConventionEntityType get_DeclaringEntityType();
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
public virtual IConventionEntityType get_TargetEntityType();
    [DebuggerStepThroughAttribute]
public virtual IConventionEntityType get_JoinEntityType();
    [DebuggerStepThroughAttribute]
public virtual IConventionForeignKey get_ForeignKey();
    public abstract virtual IConventionForeignKey SetForeignKey(IConventionForeignKey foreignKey, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetForeignKeyConfigurationSource();
    [DebuggerStepThroughAttribute]
public virtual IConventionSkipNavigation get_Inverse();
    [DebuggerStepThroughAttribute]
public abstract virtual IConventionSkipNavigation SetInverse(IConventionSkipNavigation inverse, bool fromDataAnnotation);
    public abstract virtual Nullable`1<ConfigurationSource> GetInverseConfigurationSource();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger {
    public IConventionTriggerBuilder Builder { get; }
    public IConventionEntityType EntityType { get; }
    public abstract virtual IConventionTriggerBuilder get_Builder();
    public abstract virtual IConventionEntityType get_EntityType();
    public abstract virtual ConfigurationSource GetConfigurationSource();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IConventionTypeBase {
    public IConventionModel Model { get; }
    public abstract virtual IConventionModel get_Model();
    public abstract virtual string AddIgnored(string memberName, bool fromDataAnnotation);
    public abstract virtual string RemoveIgnored(string memberName);
    public abstract virtual Nullable`1<ConfigurationSource> FindIgnoredConfigurationSource(string memberName);
    public abstract virtual IEnumerable`1<string> GetIgnoredMembers();
    public virtual bool IsIgnored(string memberName);
    public virtual Nullable`1<PropertyAccessMode> SetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    public virtual Nullable`1<ConfigurationSource> GetPropertyAccessModeConfigurationSource();
    public virtual Nullable`1<PropertyAccessMode> SetNavigationAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    public virtual Nullable`1<ConfigurationSource> GetNavigationAccessModeConfigurationSource();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IDesignTimeModel {
    public IModel Model { get; }
    public abstract virtual IModel get_Model();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IEntityType {
    internal static DynamicallyAccessedMemberTypes DynamicallyAccessedMemberTypes;
    [NullableAttribute("2")]
public IEntityType BaseType { get; }
    [NullableAttribute("2")]
public InstantiationBinding ConstructorBinding { get; }
    [NullableAttribute("2")]
public InstantiationBinding ServiceOnlyConstructorBinding { get; }
    [NullableContextAttribute("2")]
public abstract virtual IEntityType get_BaseType();
    [NullableContextAttribute("2")]
public abstract virtual InstantiationBinding get_ConstructorBinding();
    [NullableContextAttribute("2")]
public abstract virtual InstantiationBinding get_ServiceOnlyConstructorBinding();
    [NullableContextAttribute("2")]
public virtual IProperty FindDiscriminatorProperty();
    public virtual IEntityType GetRootType();
    public virtual IEnumerable`1<IEntityType> GetAllBaseTypes();
    public virtual IEnumerable`1<IEntityType> GetAllBaseTypesInclusive();
    public virtual IEnumerable`1<IEntityType> GetAllBaseTypesAscending();
    public virtual IEnumerable`1<IEntityType> GetAllBaseTypesInclusiveAscending();
    public virtual IEnumerable`1<IEntityType> GetDerivedTypes();
    public virtual IEnumerable`1<IEntityType> GetDerivedTypesInclusive();
    public abstract virtual IEnumerable`1<IEntityType> GetDirectlyDerivedTypes();
    public virtual IEnumerable`1<IEntityType> GetConcreteDerivedTypesInclusive();
    public virtual IKey FindKey(IReadOnlyProperty property);
    public virtual IEntityType FindClosestCommonParent(IEntityType otherEntityType);
    public virtual IEntityType LeastDerivedType(IEntityType otherEntityType);
    [NullableContextAttribute("2")]
public abstract virtual IKey FindPrimaryKey();
    public abstract virtual IKey FindKey(IReadOnlyList`1<IReadOnlyProperty> properties);
    public abstract virtual IEnumerable`1<IKey> GetDeclaredKeys();
    public abstract virtual IEnumerable`1<IKey> GetKeys();
    public abstract virtual IForeignKey FindForeignKey(IReadOnlyList`1<IReadOnlyProperty> properties, IReadOnlyKey principalKey, IReadOnlyEntityType principalEntityType);
    public virtual IEnumerable`1<IForeignKey> FindForeignKeys(IReadOnlyProperty property);
    public abstract virtual IEnumerable`1<IForeignKey> FindForeignKeys(IReadOnlyList`1<IReadOnlyProperty> properties);
    public virtual IForeignKey FindForeignKey(IReadOnlyProperty property, IReadOnlyKey principalKey, IReadOnlyEntityType principalEntityType);
    public abstract virtual IEnumerable`1<IForeignKey> FindDeclaredForeignKeys(IReadOnlyList`1<IReadOnlyProperty> properties);
    public abstract virtual IEnumerable`1<IForeignKey> GetDeclaredForeignKeys();
    public abstract virtual IEnumerable`1<IForeignKey> GetDerivedForeignKeys();
    public abstract virtual IEnumerable`1<IForeignKey> GetForeignKeys();
    public abstract virtual IEnumerable`1<IForeignKey> GetReferencingForeignKeys();
    public abstract virtual IEnumerable`1<IForeignKey> GetDeclaredReferencingForeignKeys();
    [NullableContextAttribute("2")]
public virtual IForeignKey FindOwnership();
    public virtual INavigation FindNavigation(MemberInfo memberInfo);
    public virtual INavigation FindNavigation(string name);
    public abstract virtual INavigation FindDeclaredNavigation(string name);
    public abstract virtual IEnumerable`1<INavigation> GetDeclaredNavigations();
    public virtual IEnumerable`1<INavigation> GetDerivedNavigations();
    public abstract virtual IEnumerable`1<INavigation> GetNavigations();
    public virtual ISkipNavigation FindSkipNavigation(MemberInfo memberInfo);
    public abstract virtual ISkipNavigation FindSkipNavigation(string name);
    public virtual ISkipNavigation FindDeclaredSkipNavigation(string name);
    public virtual IEnumerable`1<ISkipNavigation> GetDeclaredSkipNavigations();
    public virtual IEnumerable`1<ISkipNavigation> GetDerivedSkipNavigations();
    public abstract virtual IEnumerable`1<ISkipNavigation> GetSkipNavigations();
    public abstract virtual IIndex FindIndex(IReadOnlyList`1<IReadOnlyProperty> properties);
    public abstract virtual IIndex FindIndex(string name);
    public virtual IIndex FindIndex(IReadOnlyProperty property);
    public abstract virtual IEnumerable`1<IIndex> GetDeclaredIndexes();
    public abstract virtual IEnumerable`1<IIndex> GetDerivedIndexes();
    public abstract virtual IEnumerable`1<IIndex> GetIndexes();
    public virtual IProperty FindProperty(MemberInfo memberInfo);
    public abstract virtual IProperty FindProperty(string name);
    public virtual IReadOnlyList`1<IProperty> FindProperties(IReadOnlyList`1<string> propertyNames);
    public virtual IProperty GetProperty(string name);
    public abstract virtual IProperty FindDeclaredProperty(string name);
    public abstract virtual IEnumerable`1<IProperty> GetDeclaredProperties();
    public virtual IEnumerable`1<IProperty> GetDerivedProperties();
    public abstract virtual IEnumerable`1<IProperty> GetProperties();
    public abstract virtual IEnumerable`1<IProperty> GetForeignKeyProperties();
    public abstract virtual IEnumerable`1<IProperty> GetValueGeneratingProperties();
    public abstract virtual IServiceProperty FindServiceProperty(string name);
    public abstract virtual IEnumerable`1<IServiceProperty> GetDeclaredServiceProperties();
    public virtual IEnumerable`1<IServiceProperty> GetDerivedServiceProperties();
    public abstract virtual IEnumerable`1<IServiceProperty> GetServiceProperties();
    public abstract virtual ITrigger FindDeclaredTrigger(string name);
    public abstract virtual IEnumerable`1<ITrigger> GetDeclaredTriggers();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IForeignKey {
    public IReadOnlyList`1<IProperty> Properties { get; }
    public IKey PrincipalKey { get; }
    public IEntityType DeclaringEntityType { get; }
    public IEntityType PrincipalEntityType { get; }
    [NullableAttribute("2")]
public INavigation DependentToPrincipal { get; }
    [NullableAttribute("2")]
public INavigation PrincipalToDependent { get; }
    public abstract virtual IReadOnlyList`1<IProperty> get_Properties();
    public abstract virtual IKey get_PrincipalKey();
    public abstract virtual IEntityType get_DeclaringEntityType();
    public abstract virtual IEntityType get_PrincipalEntityType();
    [NullableContextAttribute("2")]
public abstract virtual INavigation get_DependentToPrincipal();
    [NullableContextAttribute("2")]
public abstract virtual INavigation get_PrincipalToDependent();
    public virtual IEnumerable`1<ISkipNavigation> GetReferencingSkipNavigations();
    public virtual IEntityType GetRelatedEntityType(IReadOnlyEntityType entityType);
    [NullableContextAttribute("2")]
public virtual INavigation GetNavigation(bool pointsToPrincipal);
    public abstract virtual IDependentKeyValueFactory`1<TKey> GetDependentKeyValueFactory();
    public abstract virtual IDependentKeyValueFactory GetDependentKeyValueFactory();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IIndex {
    public IReadOnlyList`1<IProperty> Properties { get; }
    public IEntityType DeclaringEntityType { get; }
    public abstract virtual IReadOnlyList`1<IProperty> get_Properties();
    public abstract virtual IEntityType get_DeclaringEntityType();
    public abstract virtual IDependentKeyValueFactory`1<TKey> GetNullableValueFactory();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IKey {
    public IReadOnlyList`1<IProperty> Properties { get; }
    public IEntityType DeclaringEntityType { get; }
    public abstract virtual IReadOnlyList`1<IProperty> get_Properties();
    public abstract virtual IEntityType get_DeclaringEntityType();
    public virtual Type GetKeyType();
    public virtual IEnumerable`1<IForeignKey> GetReferencingForeignKeys();
    public abstract virtual IPrincipalKeyValueFactory`1<TKey> GetPrincipalKeyValueFactory();
    public abstract virtual IPrincipalKeyValueFactory GetPrincipalKeyValueFactory();
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Metadata.IMetadataReference`1 {
    public T Object { get; }
    public abstract virtual T get_Object();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IModel {
    [NullableAttribute("2")]
public RuntimeModelDependencies ModelDependencies { get; public set; }
    public abstract virtual IEntityType FindEntityType(string name);
    public abstract virtual IEntityType FindEntityType(string name, string definingNavigationName, IEntityType definingEntityType);
    [NullableContextAttribute("2")]
public virtual IEntityType FindRuntimeEntityType(Type type);
    public abstract virtual IEnumerable`1<IEntityType> GetEntityTypes();
    [NullableContextAttribute("2")]
public virtual RuntimeModelDependencies get_ModelDependencies();
    [NullableContextAttribute("2")]
public virtual void set_ModelDependencies(RuntimeModelDependencies value);
    public virtual RuntimeModelDependencies GetModelDependencies();
    public abstract virtual IEntityType FindEntityType(Type type);
    public virtual IEntityType FindEntityType(Type type, string definingNavigationName, IEntityType definingEntityType);
    [DebuggerStepThroughAttribute]
public abstract virtual IEnumerable`1<IEntityType> FindEntityTypes(Type type);
    public virtual IEnumerable`1<IEntityType> FindLeastDerivedEntityTypes(Type type, Func`2<IReadOnlyEntityType, bool> condition);
    public abstract virtual bool IsIndexerMethod(MethodInfo methodInfo);
    public abstract virtual IEnumerable`1<ITypeMappingConfiguration> GetTypeMappingConfigurations();
    public abstract virtual ITypeMappingConfiguration FindTypeMappingConfiguration(Type scalarType);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableAnnotatable {
    [NullableAttribute("2")]
public object Item { get; public set; }
    public abstract virtual object get_Item(string name);
    public abstract virtual void set_Item(string name, object value);
    public abstract virtual IAnnotation AddAnnotation(string name, object value);
    public abstract virtual void SetAnnotation(string name, object value);
    public abstract virtual IAnnotation RemoveAnnotation(string name);
    public virtual void AddAnnotations(IEnumerable`1<IAnnotation> annotations);
    public abstract virtual void SetOrRemoveAnnotation(string name, object value);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType {
    public IMutableModel Model { get; }
    [NullableAttribute("2")]
public IMutableEntityType BaseType { get; public set; }
    public bool IsKeyless { get; public set; }
    public abstract virtual IMutableModel get_Model();
    [NullableContextAttribute("2")]
public abstract virtual IMutableEntityType get_BaseType();
    [NullableContextAttribute("2")]
public abstract virtual void set_BaseType(IMutableEntityType value);
    public abstract virtual void AddData(IEnumerable`1<object> data);
    public abstract virtual bool get_IsKeyless();
    public abstract virtual void set_IsKeyless(bool value);
    public abstract virtual void SetChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy);
    [NullableContextAttribute("2")]
public abstract virtual void SetQueryFilter(LambdaExpression queryFilter);
    [NullableContextAttribute("2")]
public virtual IMutableProperty FindDiscriminatorProperty();
    [NullableContextAttribute("2")]
public abstract virtual void SetDiscriminatorProperty(IReadOnlyProperty property);
    public virtual void SetDiscriminatorMappingComplete(Nullable`1<bool> complete);
    [NullableContextAttribute("2")]
public virtual void SetDiscriminatorValue(object value);
    public virtual void RemoveDiscriminatorValue();
    public virtual IEnumerable`1<IMutableEntityType> GetAllBaseTypes();
    public virtual IEnumerable`1<IMutableEntityType> GetAllBaseTypesAscending();
    public virtual IEnumerable`1<IMutableEntityType> GetAllBaseTypesInclusive();
    public virtual IEnumerable`1<IMutableEntityType> GetAllBaseTypesInclusiveAscending();
    public virtual IEnumerable`1<IMutableEntityType> GetDerivedTypes();
    public virtual IEnumerable`1<IMutableEntityType> GetDerivedTypesInclusive();
    public virtual IEnumerable`1<IMutableEntityType> GetDirectlyDerivedTypes();
    public virtual IMutableEntityType GetRootType();
    public virtual IMutableEntityType FindClosestCommonParent(IReadOnlyEntityType otherEntityType);
    public virtual IMutableEntityType LeastDerivedType(IReadOnlyEntityType otherEntityType);
    [NullableContextAttribute("2")]
public abstract virtual IMutableKey SetPrimaryKey(IReadOnlyList`1<IMutableProperty> properties);
    [NullableContextAttribute("2")]
public virtual IMutableKey SetPrimaryKey(IMutableProperty property);
    [NullableContextAttribute("2")]
public abstract virtual IMutableKey FindPrimaryKey();
    public virtual IMutableKey AddKey(IMutableProperty property);
    public abstract virtual IMutableKey AddKey(IReadOnlyList`1<IMutableProperty> properties);
    public virtual IMutableKey FindKey(IReadOnlyProperty property);
    public abstract virtual IMutableKey FindKey(IReadOnlyList`1<IReadOnlyProperty> properties);
    public virtual IEnumerable`1<IMutableKey> GetDeclaredKeys();
    public abstract virtual IEnumerable`1<IMutableKey> GetKeys();
    public abstract virtual IMutableKey RemoveKey(IReadOnlyList`1<IReadOnlyProperty> properties);
    public abstract virtual IMutableKey RemoveKey(IReadOnlyKey key);
    public virtual IMutableForeignKey AddForeignKey(IMutableProperty property, IMutableKey principalKey, IMutableEntityType principalEntityType);
    public abstract virtual IMutableForeignKey AddForeignKey(IReadOnlyList`1<IMutableProperty> properties, IMutableKey principalKey, IMutableEntityType principalEntityType);
    public virtual IEnumerable`1<IMutableForeignKey> FindForeignKeys(IReadOnlyProperty property);
    public virtual IEnumerable`1<IMutableForeignKey> FindForeignKeys(IReadOnlyList`1<IReadOnlyProperty> properties);
    public virtual IMutableForeignKey FindForeignKey(IReadOnlyProperty property, IReadOnlyKey principalKey, IReadOnlyEntityType principalEntityType);
    public abstract virtual IMutableForeignKey FindForeignKey(IReadOnlyList`1<IReadOnlyProperty> properties, IReadOnlyKey principalKey, IReadOnlyEntityType principalEntityType);
    public virtual IEnumerable`1<IMutableForeignKey> FindDeclaredForeignKeys(IReadOnlyList`1<IReadOnlyProperty> properties);
    public virtual IEnumerable`1<IMutableForeignKey> GetDeclaredForeignKeys();
    public virtual IEnumerable`1<IMutableForeignKey> GetDerivedForeignKeys();
    public abstract virtual IEnumerable`1<IMutableForeignKey> GetForeignKeys();
    public virtual IEnumerable`1<IMutableForeignKey> GetDeclaredReferencingForeignKeys();
    public virtual IEnumerable`1<IMutableForeignKey> GetReferencingForeignKeys();
    [NullableContextAttribute("2")]
public virtual IMutableForeignKey FindOwnership();
    public abstract virtual IMutableForeignKey RemoveForeignKey(IReadOnlyList`1<IReadOnlyProperty> properties, IMutableKey principalKey, IMutableEntityType principalEntityType);
    public abstract virtual IMutableForeignKey RemoveForeignKey(IReadOnlyForeignKey foreignKey);
    public virtual IMutableNavigation FindNavigation(MemberInfo memberInfo);
    public virtual IMutableNavigation FindNavigation(string name);
    public virtual IMutableNavigation FindDeclaredNavigation(string name);
    public virtual IEnumerable`1<IMutableNavigation> GetDeclaredNavigations();
    public virtual IEnumerable`1<IMutableNavigation> GetDerivedNavigations();
    public virtual IEnumerable`1<IMutableNavigation> GetNavigations();
    public abstract virtual IMutableSkipNavigation AddSkipNavigation(string name, MemberInfo memberInfo, IMutableEntityType targetEntityType, bool collection, bool onDependent);
    public virtual IMutableSkipNavigation FindSkipNavigation(MemberInfo memberInfo);
    public abstract virtual IMutableSkipNavigation FindSkipNavigation(string name);
    public virtual IMutableSkipNavigation FindDeclaredSkipNavigation(string name);
    public virtual IEnumerable`1<IMutableSkipNavigation> GetDeclaredSkipNavigations();
    public virtual IEnumerable`1<IMutableSkipNavigation> GetDerivedSkipNavigations();
    public abstract virtual IEnumerable`1<IMutableSkipNavigation> GetSkipNavigations();
    public abstract virtual IMutableSkipNavigation RemoveSkipNavigation(IReadOnlySkipNavigation navigation);
    public virtual IMutableIndex AddIndex(IMutableProperty property);
    public abstract virtual IMutableIndex AddIndex(IReadOnlyList`1<IMutableProperty> properties);
    public virtual IMutableIndex AddIndex(IMutableProperty property, string name);
    public abstract virtual IMutableIndex AddIndex(IReadOnlyList`1<IMutableProperty> properties, string name);
    public virtual IMutableIndex FindIndex(IReadOnlyProperty property);
    public abstract virtual IMutableIndex FindIndex(IReadOnlyList`1<IReadOnlyProperty> properties);
    public abstract virtual IMutableIndex FindIndex(string name);
    public virtual IEnumerable`1<IMutableIndex> GetDeclaredIndexes();
    public virtual IEnumerable`1<IMutableIndex> GetDerivedIndexes();
    public abstract virtual IEnumerable`1<IMutableIndex> GetIndexes();
    public abstract virtual IMutableIndex RemoveIndex(IReadOnlyList`1<IReadOnlyProperty> properties);
    public abstract virtual IMutableIndex RemoveIndex(IReadOnlyIndex index);
    public abstract virtual IMutableProperty AddProperty(string name, Type propertyType, MemberInfo memberInfo);
    public virtual IMutableProperty FindProperty(MemberInfo memberInfo);
    public abstract virtual IMutableProperty FindProperty(string name);
    public virtual IReadOnlyList`1<IMutableProperty> FindProperties(IReadOnlyList`1<string> propertyNames);
    public virtual IMutableProperty FindDeclaredProperty(string name);
    public virtual IMutableProperty GetProperty(string name);
    [RequiresUnreferencedCodeAttribute("Currently used only in tests")]
public virtual IMutableProperty AddProperty(MemberInfo memberInfo);
    public abstract virtual IMutableProperty AddProperty(string name);
    public abstract virtual IMutableProperty AddProperty(string name, Type propertyType);
    public virtual IMutableProperty AddIndexerProperty(string name, Type propertyType);
    public virtual IEnumerable`1<IMutableProperty> GetDeclaredProperties();
    public virtual IEnumerable`1<IMutableProperty> GetDerivedProperties();
    public abstract virtual IEnumerable`1<IMutableProperty> GetProperties();
    public abstract virtual IMutableProperty RemoveProperty(string name);
    public abstract virtual IMutableProperty RemoveProperty(IReadOnlyProperty property);
    public abstract virtual IMutableServiceProperty AddServiceProperty(MemberInfo memberInfo);
    public abstract virtual IMutableServiceProperty FindServiceProperty(string name);
    public virtual IEnumerable`1<IMutableServiceProperty> GetDeclaredServiceProperties();
    public virtual IEnumerable`1<IMutableServiceProperty> GetDerivedServiceProperties();
    public abstract virtual IEnumerable`1<IMutableServiceProperty> GetServiceProperties();
    public abstract virtual IMutableServiceProperty RemoveServiceProperty(string name);
    public abstract virtual IMutableServiceProperty RemoveServiceProperty(IReadOnlyServiceProperty property);
    public abstract virtual IMutableTrigger FindDeclaredTrigger(string name);
    public abstract virtual IEnumerable`1<IMutableTrigger> GetDeclaredTriggers();
    public abstract virtual IMutableTrigger AddTrigger(string name);
    public abstract virtual IMutableTrigger RemoveTrigger(string name);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey {
    public IReadOnlyList`1<IMutableProperty> Properties { get; }
    public IMutableKey PrincipalKey { get; }
    public IMutableEntityType DeclaringEntityType { get; }
    public IMutableEntityType PrincipalEntityType { get; }
    public bool IsUnique { get; public set; }
    public bool IsRequired { get; public set; }
    public bool IsRequiredDependent { get; public set; }
    public bool IsOwnership { get; public set; }
    public DeleteBehavior DeleteBehavior { get; public set; }
    [NullableAttribute("2")]
public IMutableNavigation DependentToPrincipal { get; }
    [NullableAttribute("2")]
public IMutableNavigation PrincipalToDependent { get; }
    public abstract virtual IReadOnlyList`1<IMutableProperty> get_Properties();
    public abstract virtual IMutableKey get_PrincipalKey();
    public abstract virtual IMutableEntityType get_DeclaringEntityType();
    public abstract virtual IMutableEntityType get_PrincipalEntityType();
    public abstract virtual bool get_IsUnique();
    public abstract virtual void set_IsUnique(bool value);
    public abstract virtual bool get_IsRequired();
    public abstract virtual void set_IsRequired(bool value);
    public abstract virtual bool get_IsRequiredDependent();
    public abstract virtual void set_IsRequiredDependent(bool value);
    public abstract virtual bool get_IsOwnership();
    public abstract virtual void set_IsOwnership(bool value);
    public abstract virtual DeleteBehavior get_DeleteBehavior();
    public abstract virtual void set_DeleteBehavior(DeleteBehavior value);
    [NullableContextAttribute("2")]
public abstract virtual IMutableNavigation get_DependentToPrincipal();
    [NullableContextAttribute("2")]
public abstract virtual IMutableNavigation get_PrincipalToDependent();
    public abstract virtual void SetProperties(IReadOnlyList`1<IMutableProperty> properties, IMutableKey principalKey);
    [NullableContextAttribute("2")]
public abstract virtual IMutableNavigation SetDependentToPrincipal(string name);
    [NullableContextAttribute("2")]
public abstract virtual IMutableNavigation SetDependentToPrincipal(MemberInfo property);
    [NullableContextAttribute("2")]
public abstract virtual IMutableNavigation SetPrincipalToDependent(string name);
    [NullableContextAttribute("2")]
public abstract virtual IMutableNavigation SetPrincipalToDependent(MemberInfo property);
    public virtual IEnumerable`1<IMutableSkipNavigation> GetReferencingSkipNavigations();
    public virtual IMutableEntityType GetRelatedEntityType(IReadOnlyEntityType entityType);
    [NullableContextAttribute("2")]
public virtual IMutableNavigation GetNavigation(bool pointsToPrincipal);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableIndex {
    public bool IsUnique { get; public set; }
    [NullableAttribute("2")]
public IReadOnlyList`1<bool> IsDescending { get; public set; }
    public IReadOnlyList`1<IMutableProperty> Properties { get; }
    public IMutableEntityType DeclaringEntityType { get; }
    public abstract virtual bool get_IsUnique();
    public abstract virtual void set_IsUnique(bool value);
    [NullableContextAttribute("2")]
public abstract virtual IReadOnlyList`1<bool> get_IsDescending();
    [NullableContextAttribute("2")]
public abstract virtual void set_IsDescending(IReadOnlyList`1<bool> value);
    public abstract virtual IReadOnlyList`1<IMutableProperty> get_Properties();
    public abstract virtual IMutableEntityType get_DeclaringEntityType();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableKey {
    public IReadOnlyList`1<IMutableProperty> Properties { get; }
    public IMutableEntityType DeclaringEntityType { get; }
    public abstract virtual IReadOnlyList`1<IMutableProperty> get_Properties();
    public abstract virtual IMutableEntityType get_DeclaringEntityType();
    public virtual IEnumerable`1<IMutableForeignKey> GetReferencingForeignKeys();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableModel {
    public abstract virtual IConventionBatch DelayConventions();
    public abstract virtual void SetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode);
    public abstract virtual void SetChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy);
    public abstract virtual IMutableEntityType AddEntityType(string name);
    public abstract virtual IMutableEntityType AddEntityType(Type type);
    public abstract virtual IMutableEntityType AddEntityType(string name, Type type);
    public abstract virtual IMutableEntityType AddEntityType(string name, string definingNavigationName, IMutableEntityType definingEntityType);
    public abstract virtual IMutableEntityType AddEntityType(Type type, string definingNavigationName, IMutableEntityType definingEntityType);
    public abstract virtual IMutableEntityType AddOwnedEntityType(string name);
    public abstract virtual IMutableEntityType AddOwnedEntityType(Type type);
    public abstract virtual IMutableEntityType AddOwnedEntityType(string name, Type type);
    public abstract virtual IMutableEntityType FindEntityType(string name);
    public abstract virtual IMutableEntityType FindEntityType(string name, string definingNavigationName, IMutableEntityType definingEntityType);
    public virtual IMutableEntityType FindEntityType(Type type);
    public virtual IMutableEntityType FindEntityType(Type type, string definingNavigationName, IMutableEntityType definingEntityType);
    public abstract virtual IMutableEntityType RemoveEntityType(IMutableEntityType entityType);
    public abstract virtual IMutableEntityType RemoveEntityType(Type type);
    public abstract virtual IMutableEntityType RemoveEntityType(Type type, string definingNavigationName, IMutableEntityType definingEntityType);
    public abstract virtual IMutableEntityType RemoveEntityType(string name);
    public abstract virtual IMutableEntityType RemoveEntityType(string name, string definingNavigationName, IMutableEntityType definingEntityType);
    public abstract virtual IEnumerable`1<IMutableEntityType> GetEntityTypes();
    public virtual IEnumerable`1<IMutableEntityType> FindEntityTypes(Type type);
    public virtual IEnumerable`1<IMutableEntityType> FindLeastDerivedEntityTypes(Type type, Func`2<IReadOnlyEntityType, bool> condition);
    public abstract virtual void AddShared(Type type);
    public abstract virtual Type RemoveShared(Type type);
    public abstract virtual void AddOwned(Type type);
    public abstract virtual string RemoveOwned(Type type);
    public abstract virtual bool IsOwned(Type type);
    public abstract virtual string AddIgnored(string typeName);
    public abstract virtual string AddIgnored(Type type);
    public abstract virtual string RemoveIgnored(string typeName);
    public abstract virtual string RemoveIgnored(Type type);
    public abstract virtual bool IsIgnored(string typeName);
    public abstract virtual bool IsIgnored(Type type);
    public abstract virtual IModel FinalizeModel();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation {
    [NullableAttribute("1")]
public IMutableEntityType DeclaringEntityType { get; }
    [NullableAttribute("1")]
public IMutableEntityType TargetEntityType { get; }
    [NullableAttribute("1")]
public IMutableForeignKey ForeignKey { get; }
    [NullableAttribute("2")]
public IMutableNavigation Inverse { get; }
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
public virtual IMutableEntityType get_DeclaringEntityType();
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
public virtual IMutableEntityType get_TargetEntityType();
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
public virtual IMutableForeignKey get_ForeignKey();
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public virtual IMutableNavigation get_Inverse();
    [NullableContextAttribute("2")]
public abstract virtual IMutableNavigation SetInverse(string inverseName);
    [NullableContextAttribute("2")]
public abstract virtual IMutableNavigation SetInverse(MemberInfo inverse);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableNavigationBase {
    public virtual void SetIsEagerLoaded(Nullable`1<bool> eagerLoaded);
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableProperty {
    [NullableAttribute("1")]
public IMutableEntityType DeclaringEntityType { get; }
    public bool IsNullable { get; public set; }
    public ValueGenerated ValueGenerated { get; public set; }
    public bool IsConcurrencyToken { get; public set; }
    [NullableContextAttribute("1")]
public abstract virtual IMutableEntityType get_DeclaringEntityType();
    public abstract virtual bool get_IsNullable();
    public abstract virtual void set_IsNullable(bool value);
    public abstract virtual ValueGenerated get_ValueGenerated();
    public abstract virtual void set_ValueGenerated(ValueGenerated value);
    public abstract virtual bool get_IsConcurrencyToken();
    public abstract virtual void set_IsConcurrencyToken(bool value);
    public virtual IMutableProperty FindFirstPrincipal();
    [NullableContextAttribute("1")]
public virtual IReadOnlyList`1<IMutableProperty> GetPrincipals();
    [NullableContextAttribute("1")]
public abstract virtual IEnumerable`1<IMutableForeignKey> GetContainingForeignKeys();
    [NullableContextAttribute("1")]
public abstract virtual IEnumerable`1<IMutableIndex> GetContainingIndexes();
    public virtual IMutableKey FindContainingPrimaryKey();
    [NullableContextAttribute("1")]
public abstract virtual IEnumerable`1<IMutableKey> GetContainingKeys();
    public abstract virtual void SetMaxLength(Nullable`1<int> maxLength);
    public abstract virtual void SetPrecision(Nullable`1<int> precision);
    public abstract virtual void SetScale(Nullable`1<int> scale);
    public abstract virtual void SetIsUnicode(Nullable`1<bool> unicode);
    public abstract virtual void SetBeforeSaveBehavior(Nullable`1<PropertySaveBehavior> beforeSaveBehavior);
    public abstract virtual void SetAfterSaveBehavior(Nullable`1<PropertySaveBehavior> afterSaveBehavior);
    public abstract virtual void SetValueGeneratorFactory(Func`3<IProperty, IEntityType, ValueGenerator> valueGeneratorFactory);
    public abstract virtual void SetValueGeneratorFactory(Type valueGeneratorFactory);
    public abstract virtual void SetValueConverter(ValueConverter converter);
    public abstract virtual void SetValueConverter(Type converterType);
    public abstract virtual void SetProviderClrType(Type providerClrType);
    [NullableContextAttribute("1")]
public abstract virtual void SetTypeMapping(CoreTypeMapping typeMapping);
    public abstract virtual void SetValueComparer(ValueComparer comparer);
    public abstract virtual void SetValueComparer(Type comparerType);
    public abstract virtual void SetProviderValueComparer(ValueComparer comparer);
    public abstract virtual void SetProviderValueComparer(Type comparerType);
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase {
    [NullableAttribute("1")]
public IMutableTypeBase DeclaringType { get; }
    public FieldInfo FieldInfo { get; public set; }
    [NullableContextAttribute("1")]
public abstract virtual IMutableTypeBase get_DeclaringType();
    public abstract virtual FieldInfo get_FieldInfo();
    public abstract virtual void set_FieldInfo(FieldInfo value);
    public abstract virtual void SetField(string fieldName);
    public abstract virtual void SetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty {
    [NullableAttribute("1")]
public IMutableEntityType DeclaringEntityType { get; }
    [NullableAttribute("2")]
public ServiceParameterBinding ParameterBinding { get; public set; }
    [NullableContextAttribute("1")]
public abstract virtual IMutableEntityType get_DeclaringEntityType();
    [NullableContextAttribute("2")]
public abstract virtual ServiceParameterBinding get_ParameterBinding();
    [NullableContextAttribute("2")]
public abstract virtual void set_ParameterBinding(ServiceParameterBinding value);
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableSkipNavigation {
    [NullableAttribute("1")]
public IMutableEntityType DeclaringEntityType { get; }
    [NullableAttribute("1")]
public IMutableEntityType TargetEntityType { get; }
    public IMutableEntityType JoinEntityType { get; }
    public IMutableForeignKey ForeignKey { get; }
    public IMutableSkipNavigation Inverse { get; }
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
public virtual IMutableEntityType get_DeclaringEntityType();
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
public virtual IMutableEntityType get_TargetEntityType();
    [DebuggerStepThroughAttribute]
public virtual IMutableEntityType get_JoinEntityType();
    [DebuggerStepThroughAttribute]
public virtual IMutableForeignKey get_ForeignKey();
    public abstract virtual void SetForeignKey(IMutableForeignKey foreignKey);
    [DebuggerStepThroughAttribute]
public virtual IMutableSkipNavigation get_Inverse();
    [DebuggerStepThroughAttribute]
public abstract virtual IMutableSkipNavigation SetInverse(IMutableSkipNavigation inverse);
}
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableTrigger {
    [NullableAttribute("1")]
public IMutableEntityType EntityType { get; }
    [NullableContextAttribute("1")]
public abstract virtual IMutableEntityType get_EntityType();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IMutableTypeBase {
    public IMutableModel Model { get; }
    public abstract virtual IMutableModel get_Model();
    public abstract virtual string AddIgnored(string memberName);
    public abstract virtual string RemoveIgnored(string memberName);
    public abstract virtual bool IsIgnored(string memberName);
    public abstract virtual IEnumerable`1<string> GetIgnoredMembers();
    public virtual void SetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode);
    public virtual void SetNavigationAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode);
}
public interface Microsoft.EntityFrameworkCore.Metadata.INavigation {
    [NullableAttribute("1")]
public IEntityType DeclaringEntityType { get; }
    [NullableAttribute("1")]
public IEntityType TargetEntityType { get; }
    [NullableAttribute("1")]
public IForeignKey ForeignKey { get; }
    [NullableAttribute("2")]
public INavigation Inverse { get; }
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
public virtual IEntityType get_DeclaringEntityType();
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
public virtual IEntityType get_TargetEntityType();
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
public virtual IForeignKey get_ForeignKey();
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public virtual INavigation get_Inverse();
}
public interface Microsoft.EntityFrameworkCore.Metadata.INavigationBase {
    [NullableAttribute("1")]
public IEntityType DeclaringEntityType { get; }
    [NullableAttribute("1")]
public IEntityType TargetEntityType { get; }
    [NullableAttribute("2")]
public INavigationBase Inverse { get; }
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
public virtual IEntityType get_DeclaringEntityType();
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
public virtual IEntityType get_TargetEntityType();
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public virtual INavigationBase get_Inverse();
    [NullableContextAttribute("2")]
public abstract virtual IClrCollectionAccessor GetCollectionAccessor();
    [NullableContextAttribute("1")]
public virtual void SetIsLoadedWhenNoTracking(object entity);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.IndexComparer : object {
    public static IndexComparer Instance;
    private static IndexComparer();
    [NullableContextAttribute("2")]
public sealed virtual int Compare(IReadOnlyIndex x, IReadOnlyIndex y);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IReadOnlyIndex x, IReadOnlyIndex y);
    public sealed virtual int GetHashCode(IReadOnlyIndex obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Metadata.InstantiationBinding : object {
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<ParameterBinding> <ParameterBindings>k__BackingField;
    public IReadOnlyList`1<ParameterBinding> ParameterBindings { get; }
    public Type RuntimeType { get; }
    protected InstantiationBinding(IReadOnlyList`1<ParameterBinding> parameterBindings);
    public abstract virtual Expression CreateConstructorExpression(ParameterBindingInfo bindingInfo);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<ParameterBinding> get_ParameterBindings();
    public abstract virtual Type get_RuntimeType();
    public abstract virtual InstantiationBinding With(IReadOnlyList`1<ParameterBinding> parameterBindings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Metadata.Internal.ClrAccessorFactory`1 : object {
    private static MethodInfo GenericCreate;
    private static ClrAccessorFactory`1();
    public abstract virtual TAccessor Create(IPropertyBase property);
    public virtual TAccessor Create(MemberInfo memberInfo);
    protected virtual TAccessor Create(MemberInfo memberInfo, IPropertyBase propertyBase);
    protected abstract virtual TAccessor CreateGeneric(MemberInfo memberInfo, IPropertyBase propertyBase);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ClrCollectionAccessorFactory : object {
    private static MethodInfo GenericCreate;
    private static MethodInfo CreateAndSetMethod;
    private static MethodInfo CreateMethod;
    private static MethodInfo CreateAndSetHashSetMethod;
    private static MethodInfo CreateHashSetMethod;
    private static MethodInfo CreateAndSetObservableHashSetMethod;
    private static MethodInfo CreateObservableHashSetMethod;
    private static ClrCollectionAccessorFactory();
    [NullableContextAttribute("1")]
public virtual IClrCollectionAccessor Create(INavigationBase navigation);
    private static IClrCollectionAccessor Create(IPropertyBase navigation, IEntityType targetType);
    [UsedImplicitlyAttribute]
private static IClrCollectionAccessor CreateGeneric(INavigationBase navigation);
    private static bool IsObservableHashSet(Type type);
    [UsedImplicitlyAttribute]
private static TCollection CreateAndSet(TEntity entity, Action`2<TEntity, TCollection> setterDelegate);
    [UsedImplicitlyAttribute]
private static TCollection CreateCollection();
    [UsedImplicitlyAttribute]
private static TCollection CreateAndSetHashSet(TEntity entity, Action`2<TEntity, TCollection> setterDelegate);
    [UsedImplicitlyAttribute]
private static TCollection CreateHashSet();
    [UsedImplicitlyAttribute]
private static TCollection CreateAndSetObservableHashSet(TEntity entity, Action`2<TEntity, TCollection> setterDelegate);
    [UsedImplicitlyAttribute]
private static TCollection CreateObservableHashSet();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static MemberInfo <Create>g__GetMostDerivedMemberInfo|8_0(<>c__DisplayClass8_0& );
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static Action`2<TEntity, TCollection> <CreateGeneric>g__CreateSetterDelegate|9_0(ParameterExpression parameterExpression, MemberInfo memberInfo, ParameterExpression valueParameter1);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ClrICollectionAccessor`3 : object {
    private string _propertyName;
    private Func`2<TEntity, TCollection> _getCollection;
    private Action`2<TEntity, TCollection> _setCollection;
    private Action`2<TEntity, TCollection> _setCollectionForMaterialization;
    private Func`3<TEntity, Action`2<TEntity, TCollection>, TCollection> _createAndSetCollection;
    private Func`1<TCollection> _createCollection;
    public Type CollectionType { get; }
    public ClrICollectionAccessor`3(string propertyName, Func`2<TEntity, TCollection> getCollection, Action`2<TEntity, TCollection> setCollection, Action`2<TEntity, TCollection> setCollectionForMaterialization, Func`3<TEntity, Action`2<TEntity, TCollection>, TCollection> createAndSetCollection, Func`1<TCollection> createCollection);
    public virtual Type get_CollectionType();
    public virtual bool Add(object entity, object value, bool forMaterialization);
    public virtual bool AddStandalone(object collection, object value);
    public virtual object Create();
    public virtual object GetOrCreate(object entity, bool forMaterialization);
    private ICollection`1<TElement> GetOrCreateCollection(object instance, bool forMaterialization);
    private ICollection`1<TElement> GetCollection(object instance);
    public virtual bool Contains(object entity, object value);
    public virtual bool ContainsStandalone(object collection, object value);
    public virtual bool Remove(object entity, object value);
    public virtual bool RemoveStandalone(object collection, object value);
    private static bool Contains(ICollection`1<TElement> collection, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ClrPropertyGetter`2 : object {
    private Func`2<TEntity, TValue> _getter;
    private Func`2<TEntity, bool> _hasDefaultValue;
    public ClrPropertyGetter`2(Func`2<TEntity, TValue> getter, Func`2<TEntity, bool> hasDefaultValue);
    public sealed virtual object GetClrValue(object entity);
    public sealed virtual bool HasDefaultValue(object entity);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ClrPropertyGetterFactory : ClrAccessorFactory`1<IClrPropertyGetter> {
    public virtual IClrPropertyGetter Create(IPropertyBase property);
    protected virtual IClrPropertyGetter CreateGeneric(MemberInfo memberInfo, IPropertyBase propertyBase);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ClrPropertyMaterializationSetterFactory : ClrPropertySetterFactory {
    [NullableContextAttribute("1")]
public virtual IClrPropertySetter Create(IPropertyBase property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ClrPropertySetter`2 : object {
    private Action`2<TEntity, TValue> _setter;
    public ClrPropertySetter`2(Action`2<TEntity, TValue> setter);
    public sealed virtual void SetClrValue(object instance, object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ClrPropertySetterFactory : ClrAccessorFactory`1<IClrPropertySetter> {
    public virtual IClrPropertySetter Create(IPropertyBase property);
    protected virtual IClrPropertySetter CreateGeneric(MemberInfo memberInfo, IPropertyBase propertyBase);
    [CompilerGeneratedAttribute]
internal static Expression <CreateGeneric>g__CreateMemberAssignment|1_0(Expression parameter, <>c__DisplayClass1_0`3& );
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.CollectionTypeFactory : object {
    [NullableContextAttribute("1")]
public virtual Type TryFindTypeToInstantiate(Type entityType, Type collectionType, bool requireFullNotifications);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ConstructorBindingFactory : object {
    private IPropertyParameterBindingFactory _propertyFactory;
    private IParameterBindingFactories _factories;
    public ConstructorBindingFactory(IPropertyParameterBindingFactory propertyFactory, IParameterBindingFactories factories);
    public virtual void GetBindings(IConventionEntityType entityType, InstantiationBinding& constructorBinding, InstantiationBinding& serviceOnlyBinding);
    public virtual void GetBindings(IMutableEntityType entityType, InstantiationBinding& constructorBinding, InstantiationBinding& serviceOnlyBinding);
    public virtual void GetBindings(IReadOnlyEntityType entityType, InstantiationBinding& constructorBinding, InstantiationBinding& serviceOnlyBinding);
    private void GetBindings(IReadOnlyEntityType entityType, Func`5<IParameterBindingFactory, IReadOnlyEntityType, Type, string, ParameterBinding> bind, InstantiationBinding& constructorBinding, InstantiationBinding& serviceOnlyBinding);
    public virtual bool TryBindConstructor(IMutableEntityType entityType, ConstructorInfo constructor, InstantiationBinding& binding, IEnumerable`1& unboundParameters);
    public virtual bool TryBindConstructor(IConventionEntityType entityType, ConstructorInfo constructor, InstantiationBinding& binding, IEnumerable`1& unboundParameters);
    private bool TryBindConstructor(IReadOnlyEntityType entityType, ConstructorInfo constructor, Func`5<IParameterBindingFactory, IReadOnlyEntityType, Type, string, ParameterBinding> bind, InstantiationBinding& binding, IEnumerable`1& unboundParameters);
    private static string FormatConstructorString(IReadOnlyEntityType entityType, InstantiationBinding binding);
    [CompilerGeneratedAttribute]
internal static IEnumerable`1<string> <GetBindings>g__ConstructConstructor|6_4(IGrouping`2<ConstructorInfo, ParameterInfo> parameters);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ContextParameterBindingFactory : object {
    public virtual bool CanBind(Type parameterType, string parameterName);
    public virtual ParameterBinding Bind(IMutableEntityType entityType, Type parameterType, string parameterName);
    public virtual ParameterBinding Bind(IConventionEntityType entityType, Type parameterType, string parameterName);
    public virtual ParameterBinding Bind(IReadOnlyEntityType entityType, Type parameterType, string parameterName);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ConventionAnnotation : Annotation {
    private ConfigurationSource _configurationSource;
    [NullableContextAttribute("1")]
public ConventionAnnotation(string name, object value, ConfigurationSource configurationSource);
    public virtual ConfigurationSource GetConfigurationSource();
    public virtual ConfigurationSource UpdateConfigurationSource(ConfigurationSource configurationSource);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.CoreAnnotationNames : object {
    public static string MaxLength;
    public static string Precision;
    public static string Scale;
    public static string Unicode;
    public static string ProductVersion;
    public static string ValueGeneratorFactory;
    public static string ValueGeneratorFactoryType;
    public static string PropertyAccessMode;
    public static string NavigationAccessMode;
    public static string DiscriminatorProperty;
    public static string DiscriminatorMappingComplete;
    public static string DiscriminatorValue;
    public static string ValueConverter;
    public static string ValueConverterType;
    public static string ValueComparer;
    public static string ValueComparerType;
    public static string ProviderValueComparer;
    public static string ProviderValueComparerType;
    public static string AfterSaveBehavior;
    public static string BeforeSaveBehavior;
    public static string QueryFilter;
    [ObsoleteAttribute]
public static string DefiningQuery;
    public static string EagerLoaded;
    public static string ProviderClrType;
    public static string ModelDependencies;
    public static string ReadOnlyModel;
    public static string PreUniquificationName;
    public static string InverseNavigations;
    public static string InverseNavigationCandidates;
    public static string NavigationCandidates;
    public static string DerivedTypes;
    public static string AmbiguousNavigations;
    public static string AmbiguousField;
    public static string DuplicateServiceProperties;
    public static string FullChangeTrackingNotificationsRequired;
    public static ISet`1<string> AllNames;
    private static CoreAnnotationNames();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.DesignTimeModel : object {
    private IDbContextServices _contextServices;
    public IModel Model { get; }
    public DesignTimeModel(IDbContextServices contextServices);
    public virtual IModel get_Model();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityType : TypeBase {
    private static string DynamicProxyGenAssemblyName;
    private SortedSet`1<ForeignKey> _foreignKeys;
    private SortedDictionary`2<string, Navigation> _navigations;
    private SortedDictionary`2<string, SkipNavigation> _skipNavigations;
    private SortedDictionary`2<string, ServiceProperty> _serviceProperties;
    private SortedDictionary`2<string, Property> _properties;
    private SortedDictionary`2<IReadOnlyList`1<IReadOnlyProperty>, Index> _unnamedIndexes;
    private SortedDictionary`2<string, Index> _namedIndexes;
    private SortedDictionary`2<IReadOnlyList`1<IReadOnlyProperty>, Key> _keys;
    private SortedDictionary`2<string, Trigger> _triggers;
    private List`1<object> _data;
    private Key _primaryKey;
    private Nullable`1<bool> _isKeyless;
    private bool _isOwned;
    private EntityType _baseType;
    private Nullable`1<ChangeTrackingStrategy> _changeTrackingStrategy;
    private InternalEntityTypeBuilder _builder;
    private Nullable`1<ConfigurationSource> _primaryKeyConfigurationSource;
    private Nullable`1<ConfigurationSource> _isKeylessConfigurationSource;
    private Nullable`1<ConfigurationSource> _baseTypeConfigurationSource;
    private Nullable`1<ConfigurationSource> _changeTrackingStrategyConfigurationSource;
    private Nullable`1<ConfigurationSource> _constructorBindingConfigurationSource;
    private Nullable`1<ConfigurationSource> _serviceOnlyConstructorBindingConfigurationSource;
    private PropertyCounts _counts;
    private InstantiationBinding _constructorBinding;
    private InstantiationBinding _serviceOnlyConstructorBinding;
    private Func`2<InternalEntityEntry, ISnapshot> _relationshipSnapshotFactory;
    private Func`2<InternalEntityEntry, ISnapshot> _originalValuesFactory;
    private Func`2<InternalEntityEntry, ISnapshot> _temporaryValuesFactory;
    private Func`1<ISnapshot> _storeGeneratedValuesFactory;
    private Func`2<ValueBuffer, ISnapshot> _shadowValuesFactory;
    private Func`1<ISnapshot> _emptyShadowValuesFactory;
    private IProperty[] _foreignKeyProperties;
    private IProperty[] _valueGeneratingProperties;
    private SortedSet`1<EntityType> _directlyDerivedTypes;
    [CompilerGeneratedAttribute]
private SortedSet`1<ForeignKey> <DeclaredReferencingForeignKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedSet`1<SkipNavigation> <DeclaredReferencingSkipNavigations>k__BackingField;
    public InternalEntityTypeBuilder Builder { get; }
    public bool IsInModel { get; }
    [NullableAttribute("2")]
public EntityType BaseType { get; }
    public bool IsKeyless { get; public set; }
    [NullableAttribute("2")]
public EntityType Owner { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private SortedSet`1<ForeignKey> DeclaredReferencingForeignKeys { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private SortedSet`1<SkipNavigation> DeclaredReferencingSkipNavigations { get; private set; }
    public PropertyCounts Counts { get; }
    public Func`2<InternalEntityEntry, ISnapshot> RelationshipSnapshotFactory { get; }
    public Func`2<InternalEntityEntry, ISnapshot> OriginalValuesFactory { get; }
    public Func`1<ISnapshot> StoreGeneratedValuesFactory { get; }
    public Func`2<InternalEntityEntry, ISnapshot> TemporaryValuesFactory { get; }
    public Func`2<ValueBuffer, ISnapshot> ShadowValuesFactory { get; }
    public Func`1<ISnapshot> EmptyShadowValuesFactory { get; }
    public IReadOnlyList`1<IProperty> ForeignKeyProperties { get; }
    public IReadOnlyList`1<IProperty> ValueGeneratingProperties { get; }
    public bool IsImplicitlyCreatedJoinEntityType { get; }
    [NullableAttribute("2")]
public InstantiationBinding ConstructorBinding { get; public set; }
    [NullableAttribute("2")]
public InstantiationBinding ServiceOnlyConstructorBinding { get; public set; }
    private IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.Builder { get; }
    private IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.Builder { get; }
    private IReadOnlyModel Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase.Model { get; }
    private IMutableModel Microsoft.EntityFrameworkCore.Metadata.IMutableTypeBase.Model { get; }
    private IMutableModel Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.Model { get; }
    private IConventionModel Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.Model { get; }
    private IModel Microsoft.EntityFrameworkCore.Metadata.ITypeBase.Model { get; }
    [NullableAttribute("2")]
private IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.BaseType { get; }
    [NullableAttribute("2")]
private IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.BaseType { get; private set; }
    [NullableAttribute("2")]
private IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.BaseType { get; }
    [NullableAttribute("2")]
private IEntityType Microsoft.EntityFrameworkCore.Metadata.IEntityType.BaseType { get; }
    public DebugView DebugView { get; }
    public EntityType(string name, Model model, bool owned, ConfigurationSource configurationSource);
    public EntityType(Type type, Model model, bool owned, ConfigurationSource configurationSource);
    public EntityType(string name, Type type, Model model, bool owned, ConfigurationSource configurationSource);
    [DebuggerStepThroughAttribute]
public virtual InternalEntityTypeBuilder get_Builder();
    public virtual bool get_IsInModel();
    public virtual void SetRemovedFromModel();
    [NullableContextAttribute("2")]
public virtual EntityType get_BaseType();
    public virtual bool get_IsKeyless();
    public virtual void set_IsKeyless(bool value);
    public virtual bool IsOwned();
    public virtual void SetIsOwned(bool value);
    [NullableContextAttribute("2")]
public virtual EntityType get_Owner();
    private string DisplayName();
    public virtual Nullable`1<bool> SetIsKeyless(Nullable`1<bool> keyless, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetIsKeylessConfigurationSource();
    private void UpdateIsKeylessConfigurationSource(ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual EntityType SetBaseType(EntityType newBaseType, ConfigurationSource configurationSource);
    public virtual void OnTypeRemoved();
    [DebuggerStepThroughAttribute]
public virtual Nullable`1<ConfigurationSource> GetBaseTypeConfigurationSource();
    [DebuggerStepThroughAttribute]
private void UpdateBaseTypeConfigurationSource(ConfigurationSource configurationSource);
    [DebuggerStepThroughAttribute]
public virtual IReadOnlySet`1<EntityType> GetDirectlyDerivedTypes();
    public virtual IEnumerable`1<EntityType> GetDerivedTypes();
    [DebuggerStepThroughAttribute]
public virtual IEnumerable`1<EntityType> GetDerivedTypesInclusive();
    [DebuggerStepThroughAttribute]
public virtual IEnumerable`1<ForeignKey> GetForeignKeysInHierarchy();
    private bool InheritsFrom(EntityType entityType);
    [DebuggerStepThroughAttribute]
public virtual EntityType RootType();
    public virtual string ToString();
    [NullableContextAttribute("2")]
protected virtual IConventionAnnotation OnAnnotationSet(string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    public virtual IEnumerable`1<PropertyBase> GetMembers();
    public virtual IEnumerable`1<PropertyBase> GetDeclaredMembers();
    public virtual IEnumerable`1<PropertyBase> FindMembersInHierarchy(string name);
    [NullableContextAttribute("2")]
public virtual Key SetPrimaryKey(Property property, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual Key SetPrimaryKey(IReadOnlyList`1<Property> properties, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual Key FindPrimaryKey();
    [NullableContextAttribute("2")]
public virtual Key FindPrimaryKey(IReadOnlyList`1<Property> properties);
    public virtual Nullable`1<ConfigurationSource> GetPrimaryKeyConfigurationSource();
    private void SetPrimaryKeyConfigurationSource(Nullable`1<ConfigurationSource> configurationSource);
    private void UpdatePrimaryKeyConfigurationSource(ConfigurationSource configurationSource);
    public virtual Key AddKey(Property property, ConfigurationSource configurationSource);
    public virtual Key AddKey(IReadOnlyList`1<Property> properties, ConfigurationSource configurationSource);
    public virtual Key FindKey(IReadOnlyProperty property);
    public virtual Key FindKey(IReadOnlyList`1<IReadOnlyProperty> properties);
    public virtual IEnumerable`1<Key> GetDeclaredKeys();
    public virtual Key FindDeclaredKey(IReadOnlyList`1<IReadOnlyProperty> properties);
    public virtual Key RemoveKey(IReadOnlyList`1<IReadOnlyProperty> properties);
    public virtual Key RemoveKey(Key key);
    private void CheckKeyNotInUse(Key key);
    public virtual IEnumerable`1<Key> GetKeys();
    public virtual ForeignKey AddForeignKey(Property property, Key principalKey, EntityType principalEntityType, Nullable`1<ConfigurationSource> componentConfigurationSource, ConfigurationSource configurationSource);
    public virtual ForeignKey AddForeignKey(IReadOnlyList`1<Property> properties, Key principalKey, EntityType principalEntityType, Nullable`1<ConfigurationSource> componentConfigurationSource, ConfigurationSource configurationSource);
    public virtual void OnForeignKeyUpdating(ForeignKey foreignKey);
    public virtual void OnForeignKeyUpdated(ForeignKey foreignKey);
    public virtual IEnumerable`1<ForeignKey> FindForeignKeys(IReadOnlyProperty property);
    public virtual IEnumerable`1<ForeignKey> FindForeignKeys(IReadOnlyList`1<IReadOnlyProperty> properties);
    public virtual ForeignKey FindForeignKey(IReadOnlyProperty property, IReadOnlyKey principalKey, IReadOnlyEntityType principalEntityType);
    public virtual ForeignKey FindForeignKey(IReadOnlyList`1<IReadOnlyProperty> properties, IReadOnlyKey principalKey, IReadOnlyEntityType principalEntityType);
    [NullableContextAttribute("2")]
public virtual ForeignKey FindOwnership();
    [NullableContextAttribute("2")]
public virtual ForeignKey FindDeclaredOwnership();
    public virtual IEnumerable`1<ForeignKey> GetDeclaredForeignKeys();
    public virtual IEnumerable`1<ForeignKey> GetDerivedForeignKeys();
    public virtual IEnumerable`1<ForeignKey> GetForeignKeys();
    public virtual IEnumerable`1<ForeignKey> FindDeclaredForeignKeys(IReadOnlyList`1<IReadOnlyProperty> properties);
    public virtual ForeignKey FindDeclaredForeignKey(IReadOnlyList`1<IReadOnlyProperty> properties, IReadOnlyKey principalKey, IReadOnlyEntityType principalEntityType);
    public virtual IEnumerable`1<ForeignKey> FindDerivedForeignKeys(IReadOnlyList`1<IReadOnlyProperty> properties);
    public virtual IEnumerable`1<ForeignKey> FindDerivedForeignKeys(IReadOnlyList`1<IReadOnlyProperty> properties, IReadOnlyKey principalKey, IReadOnlyEntityType principalEntityType);
    public virtual IEnumerable`1<ForeignKey> FindForeignKeysInHierarchy(IReadOnlyList`1<IReadOnlyProperty> properties);
    public virtual IEnumerable`1<ForeignKey> FindForeignKeysInHierarchy(IReadOnlyList`1<IReadOnlyProperty> properties, IReadOnlyKey principalKey, IReadOnlyEntityType principalEntityType);
    public virtual ForeignKey RemoveForeignKey(IReadOnlyList`1<IReadOnlyProperty> properties, IReadOnlyKey principalKey, IReadOnlyEntityType principalEntityType);
    public virtual ForeignKey RemoveForeignKey(ForeignKey foreignKey);
    public virtual IEnumerable`1<ForeignKey> GetReferencingForeignKeys();
    public virtual IEnumerable`1<ForeignKey> GetDeclaredReferencingForeignKeys();
    [CompilerGeneratedAttribute]
private SortedSet`1<ForeignKey> get_DeclaredReferencingForeignKeys();
    [CompilerGeneratedAttribute]
private void set_DeclaredReferencingForeignKeys(SortedSet`1<ForeignKey> value);
    public virtual Navigation AddNavigation(string name, ForeignKey foreignKey, bool pointsToPrincipal);
    public virtual Navigation AddNavigation(MemberInfo navigationMember, ForeignKey foreignKey, bool pointsToPrincipal);
    public virtual Navigation AddNavigation(MemberIdentity navigationMember, ForeignKey foreignKey, bool pointsToPrincipal);
    public virtual Navigation FindNavigation(string name);
    public virtual Navigation FindNavigation(MemberInfo memberInfo);
    public virtual Navigation FindDeclaredNavigation(string name);
    public virtual IEnumerable`1<Navigation> GetDeclaredNavigations();
    public virtual IEnumerable`1<Navigation> GetDerivedNavigations();
    public virtual IEnumerable`1<Navigation> FindDerivedNavigations(string name);
    public virtual IEnumerable`1<Navigation> FindNavigationsInHierarchy(string name);
    public virtual Navigation RemoveNavigation(string name);
    public virtual IEnumerable`1<Navigation> GetNavigations();
    public virtual SkipNavigation AddSkipNavigation(string name, MemberInfo memberInfo, EntityType targetEntityType, bool collection, bool onDependent, ConfigurationSource configurationSource);
    private Type ValidateClrMember(string name, MemberInfo memberInfo, bool throwOnNameMismatch);
    public virtual SkipNavigation FindSkipNavigation(string name);
    public virtual SkipNavigation FindSkipNavigation(MemberInfo memberInfo);
    public virtual SkipNavigation FindDeclaredSkipNavigation(string name);
    public virtual IEnumerable`1<SkipNavigation> GetDeclaredSkipNavigations();
    public virtual IEnumerable`1<SkipNavigation> GetDerivedSkipNavigations();
    public virtual IEnumerable`1<SkipNavigation> FindDerivedSkipNavigations(string name);
    public virtual IEnumerable`1<SkipNavigation> FindDerivedSkipNavigationsInclusive(string name);
    public virtual IEnumerable`1<SkipNavigation> FindSkipNavigationsInHierarchy(string name);
    public virtual SkipNavigation RemoveSkipNavigation(string name);
    public virtual SkipNavigation RemoveSkipNavigation(SkipNavigation navigation);
    public virtual IEnumerable`1<SkipNavigation> GetSkipNavigations();
    public virtual IEnumerable`1<SkipNavigation> GetReferencingSkipNavigations();
    public virtual IEnumerable`1<SkipNavigation> GetDeclaredReferencingSkipNavigations();
    public virtual IEnumerable`1<SkipNavigation> GetDerivedReferencingSkipNavigations();
    [CompilerGeneratedAttribute]
private SortedSet`1<SkipNavigation> get_DeclaredReferencingSkipNavigations();
    [CompilerGeneratedAttribute]
private void set_DeclaredReferencingSkipNavigations(SortedSet`1<SkipNavigation> value);
    public virtual Index AddIndex(Property property, ConfigurationSource configurationSource);
    public virtual Index AddIndex(Property property, string name, ConfigurationSource configurationSource);
    public virtual Index AddIndex(IReadOnlyList`1<Property> properties, ConfigurationSource configurationSource);
    public virtual Index AddIndex(IReadOnlyList`1<Property> properties, string name, ConfigurationSource configurationSource);
    private void CheckIndexProperties(IReadOnlyList`1<Property> properties);
    private static void UpdatePropertyIndexes(IReadOnlyList`1<Property> properties, Index index);
    public virtual Index FindIndex(IReadOnlyProperty property);
    public virtual Index FindIndex(IReadOnlyList`1<IReadOnlyProperty> properties);
    public virtual Index FindIndex(string name);
    public virtual IEnumerable`1<Index> GetDeclaredIndexes();
    public virtual IEnumerable`1<Index> GetDerivedIndexes();
    public virtual Index FindDeclaredIndex(IReadOnlyList`1<IReadOnlyProperty> properties);
    public virtual Index FindDeclaredIndex(string name);
    public virtual IEnumerable`1<Index> FindDerivedIndexes(IReadOnlyList`1<IReadOnlyProperty> properties);
    public virtual IEnumerable`1<Index> FindDerivedIndexes(string name);
    public virtual IEnumerable`1<Index> FindIndexesInHierarchy(IReadOnlyList`1<IReadOnlyProperty> properties);
    public virtual IEnumerable`1<Index> FindIndexesInHierarchy(string name);
    public virtual Index RemoveIndex(IReadOnlyList`1<IReadOnlyProperty> properties);
    public virtual Index RemoveIndex(string name);
    public virtual Index RemoveIndex(Index index);
    public virtual IEnumerable`1<Index> GetIndexes();
    public virtual Property AddProperty(string name, Type propertyType, Nullable`1<ConfigurationSource> typeConfigurationSource, ConfigurationSource configurationSource);
    [RequiresUnreferencedCodeAttribute("Use an overload that accepts a type")]
public virtual Property AddProperty(MemberInfo memberInfo, ConfigurationSource configurationSource);
    [RequiresUnreferencedCodeAttribute("Use an overload that accepts a type")]
public virtual Property AddProperty(string name, ConfigurationSource configurationSource);
    public virtual Property AddProperty(string name, Type propertyType, MemberInfo memberInfo, Nullable`1<ConfigurationSource> typeConfigurationSource, ConfigurationSource configurationSource);
    public virtual Property FindProperty(string name);
    public virtual Property FindDeclaredProperty(string name);
    public virtual IEnumerable`1<Property> GetDeclaredProperties();
    public virtual IEnumerable`1<Property> GetDerivedProperties();
    public virtual IEnumerable`1<Property> FindDerivedProperties(string propertyName);
    public virtual IEnumerable`1<Property> FindDerivedPropertiesInclusive(string propertyName);
    public virtual IEnumerable`1<Property> FindPropertiesInHierarchy(string propertyName);
    public virtual IReadOnlyList`1<Property> FindProperties(IReadOnlyList`1<string> propertyNames);
    public virtual Property RemoveProperty(string name);
    public virtual Property RemoveProperty(Property property);
    private void CheckPropertyNotInUse(Property property);
    public virtual IEnumerable`1<Property> GetProperties();
    public virtual PropertyCounts get_Counts();
    public virtual Func`2<InternalEntityEntry, ISnapshot> get_RelationshipSnapshotFactory();
    public virtual Func`2<InternalEntityEntry, ISnapshot> get_OriginalValuesFactory();
    public virtual Func`1<ISnapshot> get_StoreGeneratedValuesFactory();
    public virtual Func`2<InternalEntityEntry, ISnapshot> get_TemporaryValuesFactory();
    public virtual Func`2<ValueBuffer, ISnapshot> get_ShadowValuesFactory();
    public virtual Func`1<ISnapshot> get_EmptyShadowValuesFactory();
    public virtual IReadOnlyList`1<IProperty> get_ForeignKeyProperties();
    public virtual IReadOnlyList`1<IProperty> get_ValueGeneratingProperties();
    public virtual ServiceProperty AddServiceProperty(MemberInfo memberInfo, ConfigurationSource configurationSource);
    public virtual ServiceProperty FindServiceProperty(string name);
    public virtual Property FindServiceProperty(MemberInfo memberInfo);
    public virtual ServiceProperty FindDeclaredServiceProperty(string name);
    public virtual IEnumerable`1<ServiceProperty> FindDerivedServiceProperties(string propertyName);
    public virtual IEnumerable`1<ServiceProperty> FindDerivedServicePropertiesInclusive(string propertyName);
    public virtual IEnumerable`1<ServiceProperty> FindServicePropertiesInHierarchy(string propertyName);
    public virtual ServiceProperty RemoveServiceProperty(string name);
    public virtual ServiceProperty RemoveServiceProperty(ServiceProperty property);
    public virtual IEnumerable`1<ServiceProperty> GetServiceProperties();
    public virtual IEnumerable`1<ServiceProperty> GetDeclaredServiceProperties();
    public virtual IEnumerable`1<ServiceProperty> GetDerivedServiceProperties();
    public virtual Trigger AddTrigger(string modelName, ConfigurationSource configurationSource);
    public virtual Trigger FindDeclaredTrigger(string modelName);
    public virtual IEnumerable`1<Trigger> GetDeclaredTriggers();
    public virtual Trigger RemoveTrigger(string modelName);
    public virtual Nullable`1<ConfigurationSource> FindIgnoredConfigurationSource(string name);
    public virtual string OnTypeMemberIgnored(string name);
    public virtual IEnumerable`1<IDictionary`2<string, object>> GetSeedData(bool providerValues);
    public virtual IEnumerable`1<object> GetRawSeedData();
    public virtual void AddData(IEnumerable`1<object> data);
    [DebuggerStepThroughAttribute]
public virtual ChangeTrackingStrategy GetChangeTrackingStrategy();
    public virtual Nullable`1<ChangeTrackingStrategy> SetChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, ConfigurationSource configurationSource);
    public static string CheckChangeTrackingStrategy(IReadOnlyEntityType entityType, ChangeTrackingStrategy value, bool requireFullNotifications);
    public virtual Nullable`1<ConfigurationSource> GetChangeTrackingStrategyConfigurationSource();
    [NullableContextAttribute("2")]
public virtual LambdaExpression SetQueryFilter(LambdaExpression queryFilter, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual string CheckQueryFilter(LambdaExpression queryFilter);
    [NullableContextAttribute("2")]
public virtual LambdaExpression GetQueryFilter();
    public virtual Nullable`1<ConfigurationSource> GetQueryFilterConfigurationSource();
    [NullableContextAttribute("2")]
[ObsoleteAttribute]
public virtual LambdaExpression SetDefiningQuery(LambdaExpression definingQuery, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual Property SetDiscriminatorProperty(Property property, ConfigurationSource configurationSource);
    private void CheckDiscriminatorProperty(Property property);
    [NullableContextAttribute("2")]
public virtual string GetDiscriminatorPropertyName();
    [DebuggerStepThroughAttribute]
public virtual Nullable`1<ConfigurationSource> GetDiscriminatorPropertyConfigurationSource();
    public virtual bool get_IsImplicitlyCreatedJoinEntityType();
    [NullableContextAttribute("2")]
public virtual InstantiationBinding get_ConstructorBinding();
    [NullableContextAttribute("2")]
public virtual void set_ConstructorBinding(InstantiationBinding value);
    [NullableContextAttribute("2")]
public virtual InstantiationBinding SetConstructorBinding(InstantiationBinding constructorBinding, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetConstructorBindingConfigurationSource();
    private void UpdateConstructorBindingConfigurationSource(ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual InstantiationBinding get_ServiceOnlyConstructorBinding();
    [NullableContextAttribute("2")]
public virtual void set_ServiceOnlyConstructorBinding(InstantiationBinding value);
    [NullableContextAttribute("2")]
public virtual InstantiationBinding SetServiceOnlyConstructorBinding(InstantiationBinding constructorBinding, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetServiceOnlyConstructorBindingConfigurationSource();
    private void UpdateServiceOnlyConstructorBindingConfigurationSource(ConfigurationSource configurationSource);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyModel Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableModel Microsoft.EntityFrameworkCore.Metadata.IMutableTypeBase.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableModel Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionModel Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override IModel Microsoft.EntityFrameworkCore.Metadata.ITypeBase.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.get_BaseType();
    private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.get_BaseType();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.set_BaseType(IMutableEntityType value);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.get_BaseType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IEntityType.get_BaseType();
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.SetDiscriminatorProperty(IReadOnlyProperty property);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionProperty Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.SetDiscriminatorProperty(IReadOnlyProperty property, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.SetChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy);
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<ChangeTrackingStrategy> Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.SetChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.SetQueryFilter(LambdaExpression queryFilter);
    [DebuggerStepThroughAttribute]
private sealed virtual override LambdaExpression Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.SetQueryFilter(LambdaExpression queryFilter, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyEntityType> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDerivedTypes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyEntityType> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDirectlyDerivedTypes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IEntityType> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetDirectlyDerivedTypes();
    private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.SetBaseType(IConventionEntityType entityType, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<bool> Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.SetIsKeyless(Nullable`1<bool> keyless, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableKey Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.SetPrimaryKey(IReadOnlyList`1<IMutableProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionKey Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.SetPrimaryKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyKey Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindPrimaryKey();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableKey Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.FindPrimaryKey();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionKey Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindPrimaryKey();
    [DebuggerStepThroughAttribute]
private sealed virtual override IKey Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindPrimaryKey();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableKey Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.AddKey(IReadOnlyList`1<IMutableProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionKey Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyKey Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindKey(IReadOnlyList`1<IReadOnlyProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableKey Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.FindKey(IReadOnlyList`1<IReadOnlyProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionKey Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindKey(IReadOnlyList`1<IReadOnlyProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IKey Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindKey(IReadOnlyList`1<IReadOnlyProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyKey> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDeclaredKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IKey> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetDeclaredKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyKey> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IMutableKey> Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.GetKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IConventionKey> Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IKey> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableKey Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.RemoveKey(IReadOnlyList`1<IReadOnlyProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionKey Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveKey(IReadOnlyList`1<IReadOnlyProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableKey Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.RemoveKey(IReadOnlyKey key);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionKey Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveKey(IReadOnlyKey key);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableForeignKey Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.AddForeignKey(IReadOnlyList`1<IMutableProperty> properties, IMutableKey principalKey, IMutableEntityType principalEntityType);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKey Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddForeignKey(IReadOnlyList`1<IConventionProperty> properties, IConventionKey principalKey, IConventionEntityType principalEntityType, bool setComponentConfigurationSource, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyForeignKey Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindForeignKey(IReadOnlyList`1<IReadOnlyProperty> properties, IReadOnlyKey principalKey, IReadOnlyEntityType principalEntityType);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableForeignKey Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.FindForeignKey(IReadOnlyList`1<IReadOnlyProperty> properties, IReadOnlyKey principalKey, IReadOnlyEntityType principalEntityType);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKey Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindForeignKey(IReadOnlyList`1<IReadOnlyProperty> properties, IReadOnlyKey principalKey, IReadOnlyEntityType principalEntityType);
    [DebuggerStepThroughAttribute]
private sealed virtual override IForeignKey Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindForeignKey(IReadOnlyList`1<IReadOnlyProperty> properties, IReadOnlyKey principalKey, IReadOnlyEntityType principalEntityType);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyForeignKey> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindForeignKeys(IReadOnlyList`1<IReadOnlyProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IForeignKey> Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindForeignKeys(IReadOnlyList`1<IReadOnlyProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyForeignKey> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindDeclaredForeignKeys(IReadOnlyList`1<IReadOnlyProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IForeignKey> Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindDeclaredForeignKeys(IReadOnlyList`1<IReadOnlyProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyForeignKey> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IMutableForeignKey> Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.GetForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IConventionForeignKey> Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IForeignKey> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyForeignKey> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDeclaredForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IForeignKey> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetDeclaredForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyForeignKey> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDerivedForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IForeignKey> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetDerivedForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyForeignKey> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDeclaredReferencingForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IForeignKey> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetDeclaredReferencingForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyForeignKey> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetReferencingForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IForeignKey> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetReferencingForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKey Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveForeignKey(IReadOnlyList`1<IReadOnlyProperty> properties, IConventionKey principalKey, IConventionEntityType principalEntityType);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableForeignKey Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.RemoveForeignKey(IReadOnlyList`1<IReadOnlyProperty> properties, IMutableKey principalKey, IMutableEntityType principalEntityType);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableForeignKey Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.RemoveForeignKey(IReadOnlyForeignKey foreignKey);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKey Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveForeignKey(IReadOnlyForeignKey foreignKey);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyNavigation> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDeclaredNavigations();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<INavigation> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetDeclaredNavigations();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyNavigation Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindDeclaredNavigation(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override INavigation Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindDeclaredNavigation(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyNavigation> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDerivedNavigations();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyNavigation> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetNavigations();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<INavigation> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetNavigations();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableSkipNavigation Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.AddSkipNavigation(string name, MemberInfo memberInfo, IMutableEntityType targetEntityType, bool collection, bool onDependent);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionSkipNavigation Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddSkipNavigation(string name, MemberInfo memberInfo, IConventionEntityType targetEntityType, bool collection, bool onDependent, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlySkipNavigation Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindSkipNavigation(MemberInfo memberInfo);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlySkipNavigation Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindSkipNavigation(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableSkipNavigation Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.FindSkipNavigation(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionSkipNavigation Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindSkipNavigation(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override ISkipNavigation Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindSkipNavigation(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlySkipNavigation Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindDeclaredSkipNavigation(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlySkipNavigation> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDeclaredSkipNavigations();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlySkipNavigation> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDerivedSkipNavigations();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlySkipNavigation> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetSkipNavigations();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IMutableSkipNavigation> Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.GetSkipNavigations();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IConventionSkipNavigation> Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetSkipNavigations();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<ISkipNavigation> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetSkipNavigations();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableSkipNavigation Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.RemoveSkipNavigation(IReadOnlySkipNavigation navigation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionSkipNavigation Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveSkipNavigation(IReadOnlySkipNavigation navigation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableIndex Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.AddIndex(IReadOnlyList`1<IMutableProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableIndex Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.AddIndex(IReadOnlyList`1<IMutableProperty> properties, string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionIndex Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddIndex(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionIndex Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddIndex(IReadOnlyList`1<IConventionProperty> properties, string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyIndex Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindIndex(IReadOnlyList`1<IReadOnlyProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableIndex Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.FindIndex(IReadOnlyList`1<IReadOnlyProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionIndex Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindIndex(IReadOnlyList`1<IReadOnlyProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IIndex Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindIndex(IReadOnlyList`1<IReadOnlyProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyIndex Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindIndex(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableIndex Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.FindIndex(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionIndex Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindIndex(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IIndex Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindIndex(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyIndex> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDeclaredIndexes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IIndex> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetDeclaredIndexes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyIndex> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDerivedIndexes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IIndex> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetDerivedIndexes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyIndex> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetIndexes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IMutableIndex> Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.GetIndexes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IConventionIndex> Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetIndexes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IIndex> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetIndexes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionIndex Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveIndex(IReadOnlyList`1<IReadOnlyProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableIndex Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.RemoveIndex(IReadOnlyList`1<IReadOnlyProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableIndex Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.RemoveIndex(IReadOnlyIndex index);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionIndex Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveIndex(IReadOnlyIndex index);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableProperty Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.AddProperty(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionProperty Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddProperty(string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableProperty Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.AddProperty(string name, Type propertyType);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionProperty Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddProperty(string name, Type propertyType, bool setTypeConfigurationSource, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableProperty Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.AddProperty(string name, Type propertyType, MemberInfo memberInfo);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionProperty Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddProperty(string name, Type propertyType, MemberInfo memberInfo, bool setTypeConfigurationSource, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyProperty Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindDeclaredProperty(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IProperty Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindDeclaredProperty(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IReadOnlyProperty> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindProperties(IReadOnlyList`1<string> propertyNames);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyProperty Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindProperty(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableProperty Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.FindProperty(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionProperty Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindProperty(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IProperty Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindProperty(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyProperty> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDeclaredProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IProperty> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetDeclaredProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyProperty> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDerivedProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyProperty> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IMutableProperty> Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.GetProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IConventionProperty> Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IProperty> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IProperty> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetForeignKeyProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IProperty> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetValueGeneratingProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableProperty Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.RemoveProperty(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionProperty Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveProperty(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableProperty Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.RemoveProperty(IReadOnlyProperty property);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionProperty Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveProperty(IReadOnlyProperty property);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableServiceProperty Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.AddServiceProperty(MemberInfo memberInfo);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionServiceProperty Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddServiceProperty(MemberInfo memberInfo, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyServiceProperty Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindServiceProperty(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableServiceProperty Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.FindServiceProperty(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionServiceProperty Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindServiceProperty(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IServiceProperty Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindServiceProperty(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyServiceProperty> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDeclaredServiceProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IServiceProperty> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetDeclaredServiceProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyServiceProperty> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDerivedServiceProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyServiceProperty> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetServiceProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IMutableServiceProperty> Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.GetServiceProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IConventionServiceProperty> Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetServiceProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IServiceProperty> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetServiceProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableServiceProperty Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.RemoveServiceProperty(IReadOnlyServiceProperty property);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionServiceProperty Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveServiceProperty(IReadOnlyServiceProperty property);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableServiceProperty Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.RemoveServiceProperty(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionServiceProperty Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveServiceProperty(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyTrigger Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindDeclaredTrigger(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionTrigger Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.FindDeclaredTrigger(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableTrigger Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.FindDeclaredTrigger(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override ITrigger Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindDeclaredTrigger(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyTrigger> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDeclaredTriggers();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IConventionTrigger> Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.GetDeclaredTriggers();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IMutableTrigger> Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.GetDeclaredTriggers();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<ITrigger> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetDeclaredTriggers();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableTrigger Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.AddTrigger(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionTrigger Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.AddTrigger(string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableTrigger Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType.RemoveTrigger(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionTrigger Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType.RemoveTrigger(string name);
    private static IEnumerable`1<T> ToEnumerable(T element);
    public virtual DebugView get_DebugView();
    [CompilerGeneratedAttribute]
private bool <RemoveKey>b__84_0(IReadOnlyProperty p);
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__437_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__437_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeExtensions : object {
    [ExtensionAttribute]
public static string DisplayName(TypeBase entityType);
    [ExtensionAttribute]
public static string ShortName(TypeBase entityType);
    [ExtensionAttribute]
public static MemberInfo GetNavigationMemberInfo(IReadOnlyEntityType entityType, string navigationName);
    [ExtensionAttribute]
public static bool IsOwned(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static IReadOnlyForeignKey FindDeclaredOwnership(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static IConventionForeignKey FindDeclaredOwnership(IConventionEntityType entityType);
    [ExtensionAttribute]
public static IReadOnlyEntityType FindInOwnershipPath(IReadOnlyEntityType entityType, Type targetType);
    [ExtensionAttribute]
public static bool IsInOwnershipPath(IReadOnlyEntityType entityType, Type targetType);
    [ExtensionAttribute]
public static bool IsInOwnershipPath(IReadOnlyEntityType entityType, IReadOnlyEntityType targetType);
    [ExtensionAttribute]
[DebuggerStepThroughAttribute]
public static string GetOwnedName(IReadOnlyTypeBase type, string simpleName, string ownershipNavigation);
    [ExtensionAttribute]
public static bool UseEagerSnapshots(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static int StoreGeneratedCount(IEntityType entityType);
    [ExtensionAttribute]
public static int RelationshipPropertyCount(IEntityType entityType);
    [ExtensionAttribute]
public static int OriginalValueCount(IEntityType entityType);
    [ExtensionAttribute]
public static int ShadowPropertyCount(IEntityType entityType);
    [ExtensionAttribute]
public static int NavigationCount(IEntityType entityType);
    [ExtensionAttribute]
public static int PropertyCount(IEntityType entityType);
    [ExtensionAttribute]
public static PropertyCounts GetCounts(IEntityType entityType);
    [ExtensionAttribute]
public static PropertyCounts CalculateCounts(IRuntimeEntityType entityType);
    [ExtensionAttribute]
public static Func`1<ISnapshot> GetEmptyShadowValuesFactory(IEntityType entityType);
    [ExtensionAttribute]
public static EntityType LeastDerivedType(EntityType entityType, EntityType otherEntityType);
    [ExtensionAttribute]
public static bool IsAssignableFrom(EntityType entityType, IReadOnlyEntityType otherEntityType);
    [ExtensionAttribute]
public static bool IsStrictlyDerivedFrom(EntityType entityType, IReadOnlyEntityType otherEntityType);
    [ExtensionAttribute]
public static object GetDiscriminatorValue(EntityType entityType);
    [ExtensionAttribute]
public static IReadOnlyKey FindDeclaredPrimaryKey(IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IReadOnlyNavigation> FindDerivedNavigations(IReadOnlyEntityType entityType, string navigationName);
    [ExtensionAttribute]
public static IEnumerable`1<IPropertyBase> GetPropertiesAndNavigations(IEntityType entityType);
    [ExtensionAttribute]
public static IProperty CheckPropertyBelongsToType(IEntityType entityType, IProperty property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.EntityTypeParameterBindingFactory : object {
    public virtual bool CanBind(Type parameterType, string parameterName);
    public virtual ParameterBinding Bind(IMutableEntityType entityType, Type parameterType, string parameterName);
    public virtual ParameterBinding Bind(IConventionEntityType entityType, Type parameterType, string parameterName);
    public virtual ParameterBinding Bind(IReadOnlyEntityType entityType, Type parameterType, string parameterName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKey : ConventionAnnotatable {
    private Nullable`1<DeleteBehavior> _deleteBehavior;
    private Nullable`1<bool> _isUnique;
    private bool _isRequired;
    private Nullable`1<bool> _isRequiredDependent;
    private Nullable`1<bool> _isOwnership;
    private InternalForeignKeyBuilder _builder;
    private ConfigurationSource _configurationSource;
    private Nullable`1<ConfigurationSource> _propertiesConfigurationSource;
    private Nullable`1<ConfigurationSource> _principalKeyConfigurationSource;
    private Nullable`1<ConfigurationSource> _isUniqueConfigurationSource;
    private Nullable`1<ConfigurationSource> _isRequiredConfigurationSource;
    private Nullable`1<ConfigurationSource> _isRequiredDependentConfigurationSource;
    private Nullable`1<ConfigurationSource> _deleteBehaviorConfigurationSource;
    private Nullable`1<ConfigurationSource> _principalEndConfigurationSource;
    private Nullable`1<ConfigurationSource> _isOwnershipConfigurationSource;
    private Nullable`1<ConfigurationSource> _dependentToPrincipalConfigurationSource;
    private Nullable`1<ConfigurationSource> _principalToDependentConfigurationSource;
    private IDependentKeyValueFactory _dependentKeyValueFactory;
    private Func`1<IDependentsMap> _dependentsMapFactory;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Property> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private Key <PrincipalKey>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityType <DeclaringEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityType <PrincipalEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<SkipNavigation> <ReferencingSkipNavigations>k__BackingField;
    [CompilerGeneratedAttribute]
private Navigation <DependentToPrincipal>k__BackingField;
    [CompilerGeneratedAttribute]
private Navigation <PrincipalToDependent>k__BackingField;
    private static bool DefaultIsUnique;
    private static bool DefaultIsRequiredDependent;
    public static DeleteBehavior DefaultDeleteBehavior;
    private static bool DefaultIsOwnership;
    public IReadOnlyList`1<Property> Properties { get; private set; }
    public Key PrincipalKey { get; private set; }
    public EntityType DeclaringEntityType { get; }
    public EntityType PrincipalEntityType { get; }
    public InternalForeignKeyBuilder Builder { get; }
    public bool IsInModel { get; }
    public bool IsReadOnly { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ISet`1<SkipNavigation> ReferencingSkipNavigations { get; public set; }
    [NullableAttribute("2")]
public Navigation DependentToPrincipal { get; private set; }
    [NullableAttribute("2")]
public Navigation PrincipalToDependent { get; private set; }
    public bool IsUnique { get; public set; }
    public bool IsRequired { get; public set; }
    private bool DefaultIsRequired { get; }
    public bool IsRequiredDependent { get; public set; }
    public DeleteBehavior DeleteBehavior { get; public set; }
    public bool IsOwnership { get; public set; }
    public IDependentKeyValueFactory DependentKeyValueFactory { get; public set; }
    public Func`1<IDependentsMap> DependentsMapFactory { get; public set; }
    public DebugView DebugView { get; }
    private IReadOnlyList`1<IReadOnlyProperty> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.Properties { get; }
    private IReadOnlyKey Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.PrincipalKey { get; }
    private IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.DeclaringEntityType { get; }
    private IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.PrincipalEntityType { get; }
    [NullableAttribute("2")]
private IReadOnlyNavigation Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.DependentToPrincipal { get; }
    [NullableAttribute("2")]
private IReadOnlyNavigation Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.PrincipalToDependent { get; }
    private IReadOnlyList`1<IMutableProperty> Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.Properties { get; }
    private IMutableKey Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.PrincipalKey { get; }
    private IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.DeclaringEntityType { get; }
    private IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.PrincipalEntityType { get; }
    [NullableAttribute("2")]
private IMutableNavigation Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.DependentToPrincipal { get; }
    [NullableAttribute("2")]
private IMutableNavigation Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.PrincipalToDependent { get; }
    private IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.DeclaringEntityType { get; }
    private IEntityType Microsoft.EntityFrameworkCore.Metadata.IForeignKey.DeclaringEntityType { get; }
    private IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.PrincipalEntityType { get; }
    private IEntityType Microsoft.EntityFrameworkCore.Metadata.IForeignKey.PrincipalEntityType { get; }
    private IConventionKey Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.PrincipalKey { get; }
    private IKey Microsoft.EntityFrameworkCore.Metadata.IForeignKey.PrincipalKey { get; }
    private IReadOnlyList`1<IConventionProperty> Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.Properties { get; }
    private IReadOnlyList`1<IProperty> Microsoft.EntityFrameworkCore.Metadata.IForeignKey.Properties { get; }
    [NullableAttribute("2")]
private IConventionNavigation Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.DependentToPrincipal { get; }
    [NullableAttribute("2")]
private INavigation Microsoft.EntityFrameworkCore.Metadata.IForeignKey.DependentToPrincipal { get; }
    [NullableAttribute("2")]
private IConventionNavigation Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.PrincipalToDependent { get; }
    [NullableAttribute("2")]
private INavigation Microsoft.EntityFrameworkCore.Metadata.IForeignKey.PrincipalToDependent { get; }
    private IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.Builder { get; }
    private IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.Builder { get; }
    public ForeignKey(IReadOnlyList`1<Property> dependentProperties, Key principalKey, EntityType dependentEntityType, EntityType principalEntityType, ConfigurationSource configurationSource);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<Property> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(IReadOnlyList`1<Property> value);
    [CompilerGeneratedAttribute]
public virtual Key get_PrincipalKey();
    [CompilerGeneratedAttribute]
private void set_PrincipalKey(Key value);
    [CompilerGeneratedAttribute]
public virtual EntityType get_DeclaringEntityType();
    [CompilerGeneratedAttribute]
public virtual EntityType get_PrincipalEntityType();
    [DebuggerStepThroughAttribute]
public virtual InternalForeignKeyBuilder get_Builder();
    public virtual bool get_IsInModel();
    public virtual void SetRemovedFromModel();
    public virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public virtual ISet`1<SkipNavigation> get_ReferencingSkipNavigations();
    [CompilerGeneratedAttribute]
public virtual void set_ReferencingSkipNavigations(ISet`1<SkipNavigation> value);
    public virtual IEnumerable`1<SkipNavigation> GetReferencingSkipNavigations();
    [DebuggerStepThroughAttribute]
public virtual ConfigurationSource GetConfigurationSource();
    public virtual void UpdateConfigurationSource(ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
protected virtual IConventionAnnotation OnAnnotationSet(string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    public virtual IReadOnlyList`1<Property> SetProperties(IReadOnlyList`1<Property> properties, Key principalKey, Nullable`1<ConfigurationSource> configurationSource);
    [DebuggerStepThroughAttribute]
public virtual Nullable`1<ConfigurationSource> GetPropertiesConfigurationSource();
    public virtual void UpdatePropertiesConfigurationSource(ConfigurationSource configurationSource);
    [DebuggerStepThroughAttribute]
public virtual Nullable`1<ConfigurationSource> GetPrincipalKeyConfigurationSource();
    public virtual void UpdatePrincipalKeyConfigurationSource(ConfigurationSource configurationSource);
    [DebuggerStepThroughAttribute]
public virtual Nullable`1<ConfigurationSource> GetPrincipalEndConfigurationSource();
    public virtual void SetPrincipalEndConfigurationSource(Nullable`1<ConfigurationSource> configurationSource);
    public virtual void UpdatePrincipalEndConfigurationSource(ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual Navigation get_DependentToPrincipal();
    [CompilerGeneratedAttribute]
private void set_DependentToPrincipal(Navigation value);
    [NullableContextAttribute("2")]
public virtual Navigation SetDependentToPrincipal(string name, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual Navigation SetDependentToPrincipal(MemberInfo property, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual Navigation SetDependentToPrincipal(Nullable`1<MemberIdentity> property, ConfigurationSource configurationSource);
    [DebuggerStepThroughAttribute]
public virtual Nullable`1<ConfigurationSource> GetDependentToPrincipalConfigurationSource();
    public virtual void UpdateDependentToPrincipalConfigurationSource(Nullable`1<ConfigurationSource> configurationSource);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual Navigation get_PrincipalToDependent();
    [CompilerGeneratedAttribute]
private void set_PrincipalToDependent(Navigation value);
    [NullableContextAttribute("2")]
public virtual Navigation SetPrincipalToDependent(string name, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual Navigation SetPrincipalToDependent(MemberInfo property, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual Navigation SetPrincipalToDependent(Nullable`1<MemberIdentity> property, ConfigurationSource configurationSource);
    [DebuggerStepThroughAttribute]
public virtual Nullable`1<ConfigurationSource> GetPrincipalToDependentConfigurationSource();
    public virtual void UpdatePrincipalToDependentConfigurationSource(Nullable`1<ConfigurationSource> configurationSource);
    private Navigation Navigation(Nullable`1<MemberIdentity> propertyIdentity, ConfigurationSource configurationSource, bool pointsToPrincipal);
    public virtual bool get_IsUnique();
    public virtual void set_IsUnique(bool value);
    public virtual Nullable`1<bool> SetIsUnique(Nullable`1<bool> unique, ConfigurationSource configurationSource);
    [DebuggerStepThroughAttribute]
public virtual Nullable`1<ConfigurationSource> GetIsUniqueConfigurationSource();
    public virtual bool get_IsRequired();
    public virtual void set_IsRequired(bool value);
    public virtual Nullable`1<bool> SetIsRequired(Nullable`1<bool> required, ConfigurationSource configurationSource);
    private bool get_DefaultIsRequired();
    [DebuggerStepThroughAttribute]
public virtual Nullable`1<ConfigurationSource> GetIsRequiredConfigurationSource();
    public virtual void SetIsRequiredConfigurationSource(Nullable`1<ConfigurationSource> configurationSource);
    public virtual bool get_IsRequiredDependent();
    public virtual void set_IsRequiredDependent(bool value);
    public virtual Nullable`1<bool> SetIsRequiredDependent(Nullable`1<bool> required, ConfigurationSource configurationSource);
    [DebuggerStepThroughAttribute]
public virtual Nullable`1<ConfigurationSource> GetIsRequiredDependentConfigurationSource();
    public virtual void SetIsRequiredDependentConfigurationSource(Nullable`1<ConfigurationSource> configurationSource);
    public virtual DeleteBehavior get_DeleteBehavior();
    public virtual void set_DeleteBehavior(DeleteBehavior value);
    public virtual Nullable`1<DeleteBehavior> SetDeleteBehavior(Nullable`1<DeleteBehavior> deleteBehavior, ConfigurationSource configurationSource);
    [DebuggerStepThroughAttribute]
public virtual Nullable`1<ConfigurationSource> GetDeleteBehaviorConfigurationSource();
    public virtual void UpdateDeleteBehaviorConfigurationSource(ConfigurationSource configurationSource);
    public virtual bool get_IsOwnership();
    public virtual void set_IsOwnership(bool value);
    public virtual Nullable`1<bool> SetIsOwnership(Nullable`1<bool> ownership, ConfigurationSource configurationSource);
    [DebuggerStepThroughAttribute]
public virtual Nullable`1<ConfigurationSource> GetIsOwnershipConfigurationSource();
    public virtual void UpdateIsOwnershipConfigurationSource(ConfigurationSource configurationSource);
    public virtual IEnumerable`1<Navigation> FindNavigationsFromInHierarchy(EntityType entityType);
    public virtual IEnumerable`1<Navigation> FindNavigationsTo(EntityType entityType);
    public virtual EntityType ResolveOtherEntityType(EntityType entityType);
    public virtual IDependentKeyValueFactory get_DependentKeyValueFactory();
    public virtual void set_DependentKeyValueFactory(IDependentKeyValueFactory value);
    public virtual Func`1<IDependentsMap> get_DependentsMapFactory();
    public virtual void set_DependentsMapFactory(Func`1<IDependentsMap> value);
    public virtual DebugView get_DebugView();
    public virtual string ToString();
    private static void Validate(IReadOnlyList`1<Property> properties, Key principalKey, EntityType declaringEntityType, EntityType principalEntityType);
    public static bool AreCompatible(EntityType principalEntityType, EntityType dependentEntityType, MemberInfo navigationToPrincipal, MemberInfo navigationToDependent, IReadOnlyList`1<IReadOnlyProperty> dependentProperties, IReadOnlyList`1<IReadOnlyProperty> principalProperties, Nullable`1<bool> unique, bool shouldThrow);
    public static bool AreCompatible(IReadOnlyList`1<IReadOnlyProperty> principalProperties, IReadOnlyList`1<IReadOnlyProperty> dependentProperties, IReadOnlyEntityType principalEntityType, IReadOnlyEntityType dependentEntityType, bool shouldThrow);
    private static bool ArePropertyCountsEqual(IReadOnlyList`1<IReadOnlyProperty> principalProperties, IReadOnlyList`1<IReadOnlyProperty> dependentProperties);
    private static bool ArePropertyTypesCompatible(IReadOnlyList`1<IReadOnlyProperty> principalProperties, IReadOnlyList`1<IReadOnlyProperty> dependentProperties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IReadOnlyProperty> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.get_Properties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyKey Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.get_PrincipalKey();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.get_PrincipalEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyNavigation Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.get_DependentToPrincipal();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyNavigation Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.get_PrincipalToDependent();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IMutableProperty> Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.get_Properties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableKey Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.get_PrincipalKey();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.get_PrincipalEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableNavigation Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.get_DependentToPrincipal();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableNavigation Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.get_PrincipalToDependent();
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.SetProperties(IReadOnlyList`1<IMutableProperty> properties, IMutableKey principalKey);
    private sealed virtual override IMutableNavigation Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.SetDependentToPrincipal(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableNavigation Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.SetDependentToPrincipal(MemberInfo property);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableNavigation Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.SetPrincipalToDependent(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableNavigation Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey.SetPrincipalToDependent(MemberInfo property);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IForeignKey.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.get_PrincipalEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IForeignKey.get_PrincipalEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionKey Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.get_PrincipalKey();
    [DebuggerStepThroughAttribute]
private sealed virtual override IKey Microsoft.EntityFrameworkCore.Metadata.IForeignKey.get_PrincipalKey();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IConventionProperty> Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.get_Properties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IProperty> Microsoft.EntityFrameworkCore.Metadata.IForeignKey.get_Properties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionNavigation Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.get_DependentToPrincipal();
    [DebuggerStepThroughAttribute]
private sealed virtual override INavigation Microsoft.EntityFrameworkCore.Metadata.IForeignKey.get_DependentToPrincipal();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionNavigation Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.get_PrincipalToDependent();
    [DebuggerStepThroughAttribute]
private sealed virtual override INavigation Microsoft.EntityFrameworkCore.Metadata.IForeignKey.get_PrincipalToDependent();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IConventionProperty> Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.SetProperties(IReadOnlyList`1<IConventionProperty> properties, IConventionKey principalKey, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionNavigation Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.SetDependentToPrincipal(string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionNavigation Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.SetDependentToPrincipal(MemberInfo property, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionNavigation Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.SetPrincipalToDependent(string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionNavigation Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.SetPrincipalToDependent(MemberInfo property, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlySkipNavigation> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.GetReferencingSkipNavigations();
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<bool> Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.SetIsUnique(Nullable`1<bool> unique, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<bool> Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.SetIsRequired(Nullable`1<bool> required, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<bool> Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.SetIsRequiredDependent(Nullable`1<bool> required, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<bool> Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.SetIsOwnership(Nullable`1<bool> ownership, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<DeleteBehavior> Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey.SetDeleteBehavior(Nullable`1<DeleteBehavior> deleteBehavior, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IDependentKeyValueFactory`1<TKey> Microsoft.EntityFrameworkCore.Metadata.IForeignKey.GetDependentKeyValueFactory();
    [DebuggerStepThroughAttribute]
private sealed virtual override IDependentKeyValueFactory Microsoft.EntityFrameworkCore.Metadata.IForeignKey.GetDependentKeyValueFactory();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__121_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__121_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions : object {
    [ExtensionAttribute]
public static bool IsSelfReferencing(IReadOnlyForeignKey foreignKey);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions/<GetNavigations>d__1")]
[ExtensionAttribute]
public static IEnumerable`1<IReadOnlyNavigation> GetNavigations(IReadOnlyForeignKey foreignKey);
    [ExtensionAttribute]
public static IEnumerable`1<IReadOnlyNavigation> FindNavigationsFrom(IReadOnlyForeignKey foreignKey, IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IReadOnlyNavigation> FindNavigationsFromInHierarchy(IReadOnlyForeignKey foreignKey, IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IReadOnlyNavigation> FindNavigationsTo(IReadOnlyForeignKey foreignKey, IReadOnlyEntityType entityType);
    [ExtensionAttribute]
public static IEnumerable`1<IReadOnlyNavigation> FindNavigationsToInHierarchy(IReadOnlyForeignKey foreignKey, IReadOnlyEntityType entityType);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyExtensions/<FindNavigations>d__6")]
[ExtensionAttribute]
private static IEnumerable`1<IReadOnlyNavigation> FindNavigations(IReadOnlyForeignKey foreignKey, bool toPrincipal);
    [ExtensionAttribute]
public static void GetPropertiesWithMinimalOverlapIfPossible(IForeignKey foreignKey, IReadOnlyList`1& foreignKeyProperties, IReadOnlyList`1& principalKeyProperties);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.Internal.IMemberClassifier {
    public abstract virtual ImmutableSortedDictionary`2<PropertyInfo, ValueTuple`2<Type, Nullable`1<bool>>> GetNavigationCandidates(IConventionEntityType entityType);
    public abstract virtual Type FindCandidateNavigationPropertyType(MemberInfo memberInfo, IConventionModel model, Nullable`1& shouldBeOwned);
    public abstract virtual bool IsCandidatePrimitiveProperty(PropertyInfo propertyInfo, IConventionModel model);
    public abstract virtual IReadOnlyCollection`1<Type> GetInverseCandidateTypes(IConventionEntityType entityType);
    public abstract virtual IParameterBindingFactory FindServicePropertyCandidateBindingFactory(PropertyInfo propertyInfo, IConventionModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.Index : ConventionAnnotatable {
    private Nullable`1<bool> _isUnique;
    private IReadOnlyList`1<bool> _isDescending;
    private InternalIndexBuilder _builder;
    private ConfigurationSource _configurationSource;
    private Nullable`1<ConfigurationSource> _isUniqueConfigurationSource;
    private Nullable`1<ConfigurationSource> _isDescendingConfigurationSource;
    private object _nullableValueFactory;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Property> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityType <DeclaringEntityType>k__BackingField;
    private static bool DefaultIsUnique;
    private static Boolean[] DefaultIsDescending;
    public IReadOnlyList`1<Property> Properties { get; }
    [NullableAttribute("2")]
public string Name { get; }
    public EntityType DeclaringEntityType { get; }
    public InternalIndexBuilder Builder { get; }
    public bool IsInModel { get; }
    public bool IsReadOnly { get; }
    public bool IsUnique { get; public set; }
    [NullableAttribute("2")]
public IReadOnlyList`1<bool> IsDescending { get; public set; }
    public DebugView DebugView { get; }
    private IReadOnlyList`1<IReadOnlyProperty> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex.Properties { get; }
    private IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex.DeclaringEntityType { get; }
    private IReadOnlyList`1<IMutableProperty> Microsoft.EntityFrameworkCore.Metadata.IMutableIndex.Properties { get; }
    private IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableIndex.DeclaringEntityType { get; }
    private IConventionIndexBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionIndex.Builder { get; }
    private IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.Builder { get; }
    private IReadOnlyList`1<IConventionProperty> Microsoft.EntityFrameworkCore.Metadata.IConventionIndex.Properties { get; }
    private IReadOnlyList`1<IProperty> Microsoft.EntityFrameworkCore.Metadata.IIndex.Properties { get; }
    private IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionIndex.DeclaringEntityType { get; }
    private IEntityType Microsoft.EntityFrameworkCore.Metadata.IIndex.DeclaringEntityType { get; }
    public Index(IReadOnlyList`1<Property> properties, EntityType declaringEntityType, ConfigurationSource configurationSource);
    public Index(IReadOnlyList`1<Property> properties, string name, EntityType declaringEntityType, ConfigurationSource configurationSource);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual IReadOnlyList`1<Property> get_Properties();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual EntityType get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
public virtual InternalIndexBuilder get_Builder();
    public virtual bool get_IsInModel();
    public virtual void SetRemovedFromModel();
    public virtual bool get_IsReadOnly();
    public virtual ConfigurationSource GetConfigurationSource();
    public virtual void UpdateConfigurationSource(ConfigurationSource configurationSource);
    public virtual bool get_IsUnique();
    public virtual void set_IsUnique(bool value);
    public virtual Nullable`1<bool> SetIsUnique(Nullable`1<bool> unique, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetIsUniqueConfigurationSource();
    private void UpdateIsUniqueConfigurationSource(ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual IReadOnlyList`1<bool> get_IsDescending();
    [NullableContextAttribute("2")]
public virtual void set_IsDescending(IReadOnlyList`1<bool> value);
    [NullableContextAttribute("2")]
public virtual IReadOnlyList`1<bool> SetIsDescending(IReadOnlyList`1<bool> descending, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetIsDescendingConfigurationSource();
    private void UpdateIsDescendingConfigurationSource(ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
protected virtual IConventionAnnotation OnAnnotationSet(string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    public virtual IDependentKeyValueFactory`1<TKey> GetNullableValueFactory();
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
public virtual string DisplayName();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IReadOnlyProperty> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex.get_Properties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IMutableProperty> Microsoft.EntityFrameworkCore.Metadata.IMutableIndex.get_Properties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableIndex.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionIndexBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionIndex.get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IConventionProperty> Microsoft.EntityFrameworkCore.Metadata.IConventionIndex.get_Properties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IProperty> Microsoft.EntityFrameworkCore.Metadata.IIndex.get_Properties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionIndex.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IIndex.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<bool> Microsoft.EntityFrameworkCore.Metadata.IConventionIndex.SetIsUnique(Nullable`1<bool> unique, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<bool> Microsoft.EntityFrameworkCore.Metadata.IConventionIndex.SetIsDescending(IReadOnlyList`1<bool> descending, bool fromDataAnnotation);
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__45_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__45_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalEntityTypeBuilder : AnnotatableBuilder`2<EntityType, InternalModelBuilder> {
    private static string DefaultDiscriminatorName;
    private static Type DefaultDiscriminatorType;
    private IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Metadata { get; }
    public InternalEntityTypeBuilder(EntityType metadata, InternalModelBuilder modelBuilder);
    private static InternalEntityTypeBuilder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.PrimaryKey(IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
    [NullableContextAttribute("2")]
public virtual InternalKeyBuilder PrimaryKey(IReadOnlyList`1<string> propertyNames, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalKeyBuilder PrimaryKey(IReadOnlyList`1<MemberInfo> clrMembers, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalKeyBuilder PrimaryKey(IReadOnlyList`1<Property> properties, ConfigurationSource configurationSource);
    public virtual bool CanSetPrimaryKey(IReadOnlyList`1<string> propertyNames, ConfigurationSource configurationSource);
    public virtual bool CanSetPrimaryKey(IReadOnlyList`1<IConventionProperty> properties, ConfigurationSource configurationSource);
    public virtual InternalKeyBuilder HasKey(IReadOnlyList`1<string> propertyNames, ConfigurationSource configurationSource);
    public virtual InternalKeyBuilder HasKey(IReadOnlyList`1<MemberInfo> clrMembers, ConfigurationSource configurationSource);
    public virtual InternalKeyBuilder HasKey(IReadOnlyList`1<Property> properties, Nullable`1<ConfigurationSource> configurationSource);
    private InternalKeyBuilder HasKeyInternal(IReadOnlyList`1<Property> properties, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalEntityTypeBuilder HasNoKey(Key key, ConfigurationSource configurationSource);
    public virtual bool CanRemoveKey(Key key, ConfigurationSource configurationSource);
    public static List`1<ValueTuple`2<InternalKeyBuilder, Nullable`1<ConfigurationSource>>> DetachKeys(IEnumerable`1<Key> keysToDetach);
    private static ValueTuple`2<InternalKeyBuilder, Nullable`1<ConfigurationSource>> DetachKey(Key keyToDetach);
    [NullableContextAttribute("2")]
public virtual InternalEntityTypeBuilder HasNoKey(ConfigurationSource configurationSource);
    public virtual bool CanRemoveKey(ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalPropertyBuilder Property(Type propertyType, string propertyName, Nullable`1<ConfigurationSource> configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalPropertyBuilder Property(Type propertyType, string propertyName, Nullable`1<ConfigurationSource> typeConfigurationSource, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder Property(string propertyName, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder Property(MemberInfo memberInfo, Nullable`1<ConfigurationSource> configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalPropertyBuilder IndexerProperty(Type propertyType, string propertyName, Nullable`1<ConfigurationSource> configurationSource);
    private InternalPropertyBuilder Property(Type propertyType, string propertyName, MemberInfo memberInfo, Nullable`1<ConfigurationSource> typeConfigurationSource, Nullable`1<ConfigurationSource> configurationSource);
    [NullableContextAttribute("2")]
public virtual bool CanHaveProperty(Type propertyType, string propertyName, MemberInfo memberInfo, Nullable`1<ConfigurationSource> typeConfigurationSource, Nullable`1<ConfigurationSource> configurationSource, bool checkClrProperty);
    private bool CanAddProperty(Type propertyType, string propertyName, ConfigurationSource configurationSource, bool checkClrProperty);
    private static bool IsCompatible(MemberInfo newMemberInfo, Property existingProperty);
    private bool CanRemoveProperty(Property property, ConfigurationSource configurationSource, bool canOverrideSameSource);
    private Nullable`1<ConfigurationSource> RemoveProperty(Property property, ConfigurationSource configurationSource, bool canOverrideSameSource);
    public virtual IMutableNavigationBase Navigation(MemberInfo memberInfo);
    public virtual IMutableNavigationBase Navigation(string navigationName);
    public virtual InternalServicePropertyBuilder ServiceProperty(MemberInfo memberInfo, Nullable`1<ConfigurationSource> configurationSource);
    public virtual bool CanHaveServiceProperty(MemberInfo memberInfo, Nullable`1<ConfigurationSource> configurationSource);
    private bool CanAddServiceProperty(MemberInfo memberInfo, ConfigurationSource configurationSource);
    private static InternalServicePropertyBuilder DetachServiceProperty(ServiceProperty serviceProperty);
    public virtual bool CanHaveNavigation(string navigationName, Type type, Nullable`1<ConfigurationSource> configurationSource);
    public virtual bool CanAddNavigation(string navigationName, Type type, ConfigurationSource configurationSource);
    private bool CanBeNavigation(Type type, ConfigurationSource configurationSource);
    public virtual bool CanHaveSkipNavigation(string skipNavigationName, Type type, Nullable`1<ConfigurationSource> configurationSource);
    private bool CanAddSkipNavigation(string skipNavigationName, Type type, ConfigurationSource configurationSource);
    public virtual bool IsIgnored(string name, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalEntityTypeBuilder Ignore(string name, ConfigurationSource configurationSource);
    public virtual bool CanIgnore(string name, ConfigurationSource configurationSource);
    private bool CanIgnore(string name, ConfigurationSource configurationSource, bool shouldThrow);
    public virtual InternalTriggerBuilder HasTrigger(string modelName, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalEntityTypeBuilder HasQueryFilter(LambdaExpression filter, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual bool CanSetQueryFilter(LambdaExpression filter, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
[ObsoleteAttribute]
public virtual InternalEntityTypeBuilder HasDefiningQuery(LambdaExpression query, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
[ObsoleteAttribute]
public virtual bool CanSetDefiningQuery(LambdaExpression query, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalEntityTypeBuilder HasBaseType(Type baseEntityType, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalEntityTypeBuilder HasBaseType(string baseEntityTypeName, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalEntityTypeBuilder HasBaseType(EntityType baseEntityType, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual bool CanSetBaseType(EntityType baseEntityType, ConfigurationSource configurationSource);
    public static PropertiesSnapshot DetachProperties(IReadOnlyList`1<Property> propertiesToDetach);
    public virtual bool CanRemoveForeignKey(ForeignKey foreignKey, ConfigurationSource configurationSource);
    public virtual bool CanRemoveSkipNavigation(SkipNavigation skipNavigation, Nullable`1<ConfigurationSource> configurationSource);
    public static RelationshipSnapshot DetachRelationship(ForeignKey foreignKey);
    public static RelationshipSnapshot DetachRelationship(ForeignKey foreignKey, bool includeOwnedSharedType);
    public virtual InternalEntityTypeBuilder HasNoRelationship(ForeignKey foreignKey, ConfigurationSource configurationSource);
    public static Snapshot DetachAllMembers(EntityType entityType);
    private void RemoveKeyIfUnused(Key key, ConfigurationSource configurationSource);
    public virtual InternalEntityTypeBuilder RemoveUnusedImplicitProperties(IReadOnlyList`1<T> properties);
    private static void RemovePropertyIfUnused(Property property, ConfigurationSource configurationSource);
    public virtual InternalIndexBuilder HasIndex(IReadOnlyList`1<string> propertyNames, ConfigurationSource configurationSource);
    public virtual InternalIndexBuilder HasIndex(IReadOnlyList`1<string> propertyNames, string name, ConfigurationSource configurationSource);
    public virtual InternalIndexBuilder HasIndex(IReadOnlyList`1<MemberInfo> clrMembers, ConfigurationSource configurationSource);
    public virtual InternalIndexBuilder HasIndex(IReadOnlyList`1<MemberInfo> clrMembers, string name, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalIndexBuilder HasIndex(IReadOnlyList`1<Property> properties, ConfigurationSource configurationSource);
    public virtual InternalIndexBuilder HasIndex(IReadOnlyList`1<Property> properties, string name, ConfigurationSource configurationSource);
    private InternalIndexBuilder HasIndex(Index index, IReadOnlyList`1<Property> properties, string name, ConfigurationSource configurationSource);
    public virtual bool CanHaveIndex(IReadOnlyList`1<string> propertyNames, ConfigurationSource configurationSource);
    public virtual InternalEntityTypeBuilder HasNoIndex(Index index, ConfigurationSource configurationSource);
    public virtual bool CanRemoveIndex(Index index, ConfigurationSource configurationSource);
    public static List`1<InternalIndexBuilder> DetachIndexes(IEnumerable`1<Index> indexesToDetach);
    private static InternalIndexBuilder DetachIndex(Index indexToDetach);
    public virtual InternalForeignKeyBuilder HasRelationship(string principalEntityTypeName, IReadOnlyList`1<string> propertyNames, ConfigurationSource configurationSource);
    public virtual InternalForeignKeyBuilder HasRelationship(string principalEntityTypeName, IReadOnlyList`1<string> propertyNames, Key principalKey, ConfigurationSource configurationSource);
    public virtual InternalForeignKeyBuilder HasRelationship(Type principalClrType, IReadOnlyList`1<MemberInfo> clrMembers, ConfigurationSource configurationSource);
    public virtual InternalForeignKeyBuilder HasRelationship(Type principalClrType, IReadOnlyList`1<MemberInfo> clrMembers, Key principalKey, ConfigurationSource configurationSource);
    public virtual InternalForeignKeyBuilder HasRelationship(EntityType principalEntityType, IReadOnlyList`1<Property> dependentProperties, ConfigurationSource configurationSource);
    public virtual InternalForeignKeyBuilder HasRelationship(EntityType principalEntityType, IReadOnlyList`1<Property> dependentProperties, Key principalKey, ConfigurationSource configurationSource);
    private InternalForeignKeyBuilder HasForeignKey(EntityType principalEntityType, IReadOnlyList`1<Property> dependentProperties, Key principalKey, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalForeignKeyBuilder HasRelationship(EntityType targetEntityType, string navigationName, ConfigurationSource configurationSource, Nullable`1<bool> targetIsPrincipal);
    [NullableContextAttribute("2")]
public virtual InternalForeignKeyBuilder HasRelationship(EntityType targetEntityType, MemberInfo navigationMember, ConfigurationSource configurationSource, Nullable`1<bool> targetIsPrincipal);
    [NullableContextAttribute("2")]
public virtual InternalForeignKeyBuilder HasRelationship(EntityType targetEntityType, string navigationName, string inverseNavigationName, ConfigurationSource configurationSource, bool setTargetAsPrincipal);
    [NullableContextAttribute("2")]
public virtual InternalForeignKeyBuilder HasRelationship(EntityType targetEntityType, MemberInfo navigation, MemberInfo inverseNavigation, ConfigurationSource configurationSource, bool setTargetAsPrincipal);
    private InternalForeignKeyBuilder HasRelationship(EntityType targetEntityType, Nullable`1<MemberIdentity> navigationToTarget, Nullable`1<MemberIdentity> inverseNavigation, Nullable`1<bool> setTargetAsPrincipal, ConfigurationSource configurationSource, Nullable`1<bool> required);
    [NullableContextAttribute("2")]
public virtual InternalForeignKeyBuilder HasRelationship(EntityType principalEntityType, ConfigurationSource configurationSource, Nullable`1<bool> required, string propertyBaseName);
    public virtual InternalForeignKeyBuilder HasRelationship(EntityType principalEntityType, Key principalKey, ConfigurationSource configurationSource, Nullable`1<bool> required, string propertyBaseName);
    private InternalForeignKeyBuilder HasRelationshipInternal(EntityType targetEntityType, Key principalKey, ConfigurationSource configurationSource, Nullable`1<bool> required, string propertyBaseName);
    public virtual InternalForeignKeyBuilder HasOwnership(string targetEntityTypeName, string navigationName, ConfigurationSource configurationSource);
    public virtual InternalForeignKeyBuilder HasOwnership(Type targetEntityType, string navigationName, ConfigurationSource configurationSource);
    public virtual InternalForeignKeyBuilder HasOwnership(Type targetEntityType, MemberInfo navigationMember, ConfigurationSource configurationSource);
    public virtual InternalForeignKeyBuilder HasOwnership(Type targetEntityType, MemberIdentity navigation, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalForeignKeyBuilder HasOwnership(TypeIdentity& modreq(System.Runtime.InteropServices.InAttribute) typeIdentity, MemberIdentity navigation, ConfigurationSource configurationSource);
    public virtual InternalForeignKeyBuilder HasOwnership(Type targetEntityType, string navigationPropertyName, string inversePropertyName, ConfigurationSource configurationSource);
    public virtual InternalForeignKeyBuilder HasOwnership(Type targetEntityType, MemberInfo navigationMember, MemberInfo inverseMember, ConfigurationSource configurationSource);
    private InternalForeignKeyBuilder HasOwnership(TypeIdentity& targetEntityType, MemberIdentity& navigation, Nullable`1<MemberIdentity> inverse, ConfigurationSource configurationSource);
    private InternalForeignKeyBuilder HasOwnership(EntityType targetEntityType, MemberIdentity& navigation, Nullable`1<MemberIdentity> inverse, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalEntityTypeBuilder IsOwned(bool owned, ConfigurationSource configurationSource, ForeignKey futureOwnership);
    public virtual bool CanSetIsOwned(bool owned, ConfigurationSource configurationSource);
    private bool RemoveNonOwnershipRelationships(ForeignKey futureOwnership, ConfigurationSource configurationSource);
    private static bool Contains(IReadOnlyForeignKey inheritedFk, IReadOnlyForeignKey derivedFk);
    public virtual InternalEntityTypeBuilder GetTargetEntityTypeBuilder(Type targetClrType, MemberInfo navigationInfo, Nullable`1<ConfigurationSource> configurationSource, Nullable`1<bool> targetShouldBeOwned);
    [NullableContextAttribute("2")]
public virtual InternalEntityTypeBuilder GetTargetEntityTypeBuilder(TypeIdentity targetEntityType, MemberIdentity navigation, Nullable`1<ConfigurationSource> configurationSource, Nullable`1<bool> targetShouldBeOwned);
    [NullableContextAttribute("2")]
public virtual InternalForeignKeyBuilder CreateForeignKey(InternalEntityTypeBuilder principalEntityTypeBuilder, IReadOnlyList`1<Property> dependentProperties, Key principalKey, string propertyBaseName, Nullable`1<bool> required, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalForeignKeyBuilder UpdateForeignKey(ForeignKey foreignKey, IReadOnlyList`1<Property> dependentProperties, Key principalKey, string propertyBaseName, Nullable`1<bool> isRequired, Nullable`1<ConfigurationSource> configurationSource);
    private ForeignKey SetOrAddForeignKey(ForeignKey foreignKey, InternalEntityTypeBuilder principalEntityTypeBuilder, IReadOnlyList`1<Property> dependentProperties, Key principalKey, string propertyBaseName, Nullable`1<bool> isRequired, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalSkipNavigationBuilder HasSkipNavigation(MemberIdentity navigation, EntityType targetEntityType, MemberIdentity inverseNavigation, ConfigurationSource configurationSource, Nullable`1<bool> collections, Nullable`1<bool> onDependent);
    public virtual InternalSkipNavigationBuilder HasSkipNavigation(MemberIdentity navigationProperty, EntityType targetEntityType, Nullable`1<ConfigurationSource> configurationSource, Nullable`1<bool> collection, Nullable`1<bool> onDependent);
    public virtual InternalEntityTypeBuilder HasNoSkipNavigation(SkipNavigation skipNavigation, ConfigurationSource configurationSource);
    public virtual bool CanRemoveSkipNavigation(SkipNavigation skipNavigation, ConfigurationSource configurationSource);
    private static InternalSkipNavigationBuilder DetachSkipNavigation(SkipNavigation skipNavigationToDetach);
    public virtual bool ShouldReuniquifyTemporaryProperties(ForeignKey foreignKey);
    public virtual InternalPropertyBuilder CreateUniqueProperty(Type propertyType, string propertyName, bool required);
    public virtual IReadOnlyList`1<Property> CreateUniqueProperties(IReadOnlyList`1<Type> propertyTypes, IReadOnlyList`1<string> propertyNames, bool isRequired);
    private IReadOnlyList`1<Property> CreateUniqueProperties(IReadOnlyList`1<Property> principalProperties, bool isRequired, string baseName);
    private ValueTuple`2<bool, IReadOnlyList`1<Property>> TryCreateUniqueProperties(int propertyCount, IReadOnlyList`1<Property> currentProperties, IEnumerable`1<Type> principalPropertyTypes, IEnumerable`1<string> principalPropertyNames, bool isRequired, string baseName);
    public virtual IReadOnlyList`1<Property> GetOrCreateProperties(IReadOnlyList`1<string> propertyNames, Nullable`1<ConfigurationSource> configurationSource, IReadOnlyList`1<Property> referencedProperties, bool required, bool useDefaultType);
    public virtual IReadOnlyList`1<Property> GetOrCreateProperties(IEnumerable`1<MemberInfo> clrMembers, Nullable`1<ConfigurationSource> configurationSource);
    public virtual IReadOnlyList`1<Property> GetActualProperties(IReadOnlyList`1<Property> properties, Nullable`1<ConfigurationSource> configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalEntityTypeBuilder HasChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, ConfigurationSource configurationSource);
    public virtual bool CanSetChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalEntityTypeBuilder UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, ConfigurationSource configurationSource);
    public virtual bool CanSetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, ConfigurationSource configurationSource);
    public virtual InternalEntityTypeBuilder HasData(IEnumerable`1<object> data, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual IConventionEntityTypeBuilder HasConstructorBinding(InstantiationBinding constructorBinding, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual bool CanSetConstructorBinding(InstantiationBinding constructorBinding, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual IConventionEntityTypeBuilder HasServiceOnlyConstructorBinding(InstantiationBinding constructorBinding, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual bool CanSetServiceOnlyConstructorBinding(InstantiationBinding constructorBinding, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual DiscriminatorBuilder HasDiscriminator(ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual DiscriminatorBuilder HasDiscriminator(string name, Type type, ConfigurationSource configurationSource);
    public virtual DiscriminatorBuilder HasDiscriminator(MemberInfo memberInfo, ConfigurationSource configurationSource);
    private InternalPropertyBuilder GetOrCreateDiscriminatorProperty(Type type, string name, ConfigurationSource configurationSource);
    private DiscriminatorBuilder DiscriminatorBuilder(InternalPropertyBuilder discriminatorPropertyBuilder, ConfigurationSource configurationSource);
    private void RemoveIncompatibleDiscriminatorValues(EntityType entityType, Property newDiscriminatorProperty, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalEntityTypeBuilder HasNoDiscriminator(ConfigurationSource configurationSource);
    private void RemoveUnusedDiscriminatorProperty(Property newDiscriminatorProperty, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual bool CanSetDiscriminator(string name, Type type, ConfigurationSource configurationSource);
    private bool CanSetDiscriminator(IReadOnlyProperty discriminatorProperty, string name, Type discriminatorType, ConfigurationSource configurationSource);
    private bool CanRemoveDiscriminator(ConfigurationSource configurationSource);
    private bool CanAddDiscriminatorProperty(Type propertyType, string name, Nullable`1<ConfigurationSource> typeConfigurationSource);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.get_Metadata();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasBaseType(IConventionEntityType baseEntityType, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetBaseType(IConventionEntityType baseEntityType, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Property(Type propertyType, string propertyName, bool setTypeConfigurationSource, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Property(MemberInfo memberInfo, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveProperty(Type propertyType, string propertyName, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveProperty(MemberInfo memberInfo, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.IndexerProperty(Type propertyType, string propertyName, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveIndexerProperty(Type propertyType, string propertyName, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IConventionProperty> Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.GetOrCreateProperties(IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IConventionProperty> Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.GetOrCreateProperties(IEnumerable`1<MemberInfo> memberInfos, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.RemoveUnusedImplicitProperties(IReadOnlyList`1<IConventionProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionServicePropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.ServiceProperty(MemberInfo memberInfo, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveServiceProperty(MemberInfo memberInfo, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.IsIgnored(string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.Ignore(string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanIgnore(string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.PrimaryKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetPrimaryKey(IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetPrimaryKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoKey(bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveKey(IConventionKey key, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoKey(IConventionKey key, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveKey(bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionIndexBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex(IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionIndexBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex(IReadOnlyList`1<string> propertyNames, string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveIndex(IReadOnlyList`1<string> propertyNames, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionIndexBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    private sealed virtual override IConventionIndexBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasIndex(IReadOnlyList`1<IConventionProperty> properties, string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoIndex(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoIndex(IConventionIndex index, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveIndex(IConventionIndex index, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(IConventionEntityType targetEntityType, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(IConventionEntityType principalEntityType, IReadOnlyList`1<IConventionProperty> dependentProperties, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(IConventionEntityType principalEntityType, IConventionKey principalKey, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(IConventionEntityType principalEntityType, IReadOnlyList`1<IConventionProperty> dependentProperties, IConventionKey principalKey, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(IConventionEntityType targetEntityType, string navigationName, bool setTargetAsPrincipal, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(IConventionEntityType targetEntityType, MemberInfo navigation, bool setTargetAsPrincipal, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(IConventionEntityType targetEntityType, string navigationName, string inverseNavigationName, bool setTargetAsPrincipal, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasRelationship(IConventionEntityType targetEntityType, MemberInfo navigation, MemberInfo inverseNavigation, bool setTargetAsPrincipal, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasSkipNavigation(MemberInfo navigation, IConventionEntityType targetEntityType, MemberInfo inverseNavigation, Nullable`1<bool> collections, Nullable`1<bool> onDependent, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(Type targetEntityType, string navigationName, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(IConventionEntityType targetEntityType, string navigationName, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(Type targetEntityType, MemberInfo navigation, bool fromDataAnnotation);
    private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(IConventionEntityType targetEntityType, MemberInfo navigation, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(Type targetEntityType, string navigationName, string inversePropertyName, bool fromDataAnnotation);
    private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(IConventionEntityType targetEntityType, string navigationName, string inverseNavigationName, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(Type targetEntityType, MemberInfo navigation, MemberInfo inverseProperty, bool fromDataAnnotation);
    private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasOwnership(IConventionEntityType targetEntityType, MemberInfo navigation, MemberInfo inverseNavigation, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoRelationship(IReadOnlyList`1<IConventionProperty> properties, IConventionKey principalKey, IConventionEntityType principalEntityType, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoRelationship(IConventionForeignKey foreignKey, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveRelationship(IConventionForeignKey foreignKey, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveNavigation(string navigationName, Type type, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveSkipNavigation(string skipNavigationName, Type type, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasSkipNavigation(MemberInfo navigation, IConventionEntityType targetEntityType, Nullable`1<bool> collection, Nullable`1<bool> onDependent, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasSkipNavigation(string navigationName, IConventionEntityType targetEntityType, Nullable`1<bool> collection, Nullable`1<bool> onDependent, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoSkipNavigation(IConventionSkipNavigation skipNavigation, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveSkipNavigation(IConventionSkipNavigation skipNavigation, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionTriggerBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasTrigger(string modelName, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanHaveTrigger(string modelName, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasQueryFilter(LambdaExpression filter, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetQueryFilter(LambdaExpression filter, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
[ObsoleteAttribute]
private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDefiningQuery(LambdaExpression query, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
[ObsoleteAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDefiningQuery(LambdaExpression query, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionDiscriminatorBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator(bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionDiscriminatorBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator(Type type, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionDiscriminatorBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator(string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionDiscriminatorBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator(string name, Type type, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionDiscriminatorBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasDiscriminator(MemberInfo memberInfo, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.HasNoDiscriminator(bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator(string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator(Type type, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator(string name, Type type, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanSetDiscriminator(MemberInfo memberInfo, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CanRemoveDiscriminator(bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.CreateUniqueProperty(Type propertyType, string basePropertyName, bool required);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder.GetTargetEntityTypeBuilder(Type targetClrType, MemberInfo navigationInfo, bool createIfMissing, Nullable`1<bool> targetShouldBeOwned, bool fromDataAnnotation);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalForeignKeyBuilder : AnnotatableBuilder`2<ForeignKey, InternalModelBuilder> {
    [NullableAttribute("1")]
private IConventionForeignKey Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.Metadata { get; }
    [NullableContextAttribute("1")]
public InternalForeignKeyBuilder(ForeignKey foreignKey, InternalModelBuilder modelBuilder);
    public virtual InternalForeignKeyBuilder HasNavigation(string name, bool pointsToPrincipal, ConfigurationSource configurationSource);
    public virtual InternalForeignKeyBuilder HasNavigation(MemberInfo property, bool pointsToPrincipal, ConfigurationSource configurationSource);
    public virtual InternalForeignKeyBuilder HasNavigations(string navigationToPrincipalName, string navigationToDependentName, ConfigurationSource configurationSource);
    public virtual InternalForeignKeyBuilder HasNavigations(MemberInfo navigationToPrincipal, MemberInfo navigationToDependent, ConfigurationSource configurationSource);
    public virtual InternalForeignKeyBuilder HasNavigations(Nullable`1<MemberIdentity> navigationToPrincipal, Nullable`1<MemberIdentity> navigationToDependent, ConfigurationSource configurationSource);
    public virtual InternalForeignKeyBuilder HasNavigations(string navigationToPrincipalName, string navigationToDependentName, EntityType principalEntityType, EntityType dependentEntityType, ConfigurationSource configurationSource);
    public virtual InternalForeignKeyBuilder HasNavigations(MemberInfo navigationToPrincipal, MemberInfo navigationToDependent, EntityType principalEntityType, EntityType dependentEntityType, ConfigurationSource configurationSource);
    private InternalForeignKeyBuilder HasNavigations(Nullable`1<MemberIdentity> navigationToPrincipal, Nullable`1<MemberIdentity> navigationToDependent, EntityType principalEntityType, EntityType dependentEntityType, ConfigurationSource configurationSource);
    [NullableContextAttribute("1")]
public static MemberInfo FindCompatibleClrMember(string navigationName, EntityType sourceType, EntityType targetType, bool shouldThrow);
    public virtual bool CanSetNavigation(MemberInfo property, bool pointsToPrincipal, Nullable`1<ConfigurationSource> configurationSource);
    public virtual bool CanSetNavigation(string name, bool pointsToPrincipal, Nullable`1<ConfigurationSource> configurationSource);
    private bool CanSetNavigation(MemberIdentity navigation, bool pointsToPrincipal, Nullable`1<ConfigurationSource> configurationSource, bool shouldThrow, Nullable`1& shouldBeUnique);
    public virtual bool CanSetNavigations(MemberInfo navigationToPrincipal, MemberInfo navigationToDependent, Nullable`1<ConfigurationSource> configurationSource);
    public virtual bool CanSetNavigations(string navigationToPrincipalName, string navigationToDependentName, Nullable`1<ConfigurationSource> configurationSource);
    private bool CanSetNavigations(Nullable`1<MemberIdentity> navigationToPrincipal, Nullable`1<MemberIdentity> navigationToDependent, Nullable`1<ConfigurationSource> configurationSource);
    private bool CanSetNavigations(Nullable`1<MemberIdentity> navigationToPrincipal, Nullable`1<MemberIdentity> navigationToDependent, Nullable`1<ConfigurationSource> configurationSource, bool shouldThrow, Nullable`1& shouldBeUnique);
    private bool CanSetNavigations(Nullable`1<MemberIdentity> navigationToPrincipal, Nullable`1<MemberIdentity> navigationToDependent, EntityType principalEntityType, EntityType dependentEntityType, Nullable`1<ConfigurationSource> configurationSource, bool shouldThrow, Nullable`1& shouldInvert, Nullable`1& shouldBeUnique, Boolean& removeOppositeNavigation, Boolean& conflictingNavigationsFound, Boolean& changeRelatedTypes);
    private bool CanRemoveNavigation(bool pointsToPrincipal, Nullable`1<ConfigurationSource> configurationSource, bool overrideSameSource);
    [NullableContextAttribute("1")]
public static bool AreCompatible(MemberInfo navigationToPrincipalProperty, MemberInfo navigationToDependentProperty, EntityType principalEntityType, EntityType dependentEntityType, bool shouldThrow, Nullable`1& shouldInvert, Nullable`1& shouldBeUnique);
    private static bool IsCompatible(MemberInfo navigationMember, bool pointsToPrincipal, EntityType dependentType, EntityType principalType, bool shouldThrow, Nullable`1& shouldBeUnique);
    public virtual InternalForeignKeyBuilder IsRequired(Nullable`1<bool> required, ConfigurationSource configurationSource);
    public virtual bool CanSetIsRequired(Nullable`1<bool> required, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalForeignKeyBuilder IsRequiredDependent(Nullable`1<bool> required, ConfigurationSource configurationSource);
    public virtual bool CanSetIsRequiredDependent(Nullable`1<bool> required, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalForeignKeyBuilder IsOwnership(Nullable`1<bool> ownership, ConfigurationSource configurationSource);
    public virtual bool CanSetIsOwnership(Nullable`1<bool> ownership, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalForeignKeyBuilder MakeDeclaringTypeShared(Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalForeignKeyBuilder OnDelete(Nullable`1<DeleteBehavior> deleteBehavior, ConfigurationSource configurationSource);
    public virtual bool CanSetDeleteBehavior(Nullable`1<DeleteBehavior> deleteBehavior, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalForeignKeyBuilder IsUnique(Nullable`1<bool> unique, ConfigurationSource configurationSource);
    public virtual bool CanSetIsUnique(Nullable`1<bool> unique, Nullable`1<ConfigurationSource> configurationSource);
    private bool CanSetIsUnique(Nullable`1<bool> unique, Nullable`1<ConfigurationSource> configurationSource, Boolean& resetToDependent);
    [NullableContextAttribute("1")]
public virtual InternalForeignKeyBuilder DependentEntityType(EntityType dependentEntityType, ConfigurationSource configurationSource);
    [NullableContextAttribute("1")]
public virtual InternalForeignKeyBuilder PrincipalEntityType(EntityType principalEntityType, ConfigurationSource configurationSource);
    [NullableContextAttribute("1")]
public virtual InternalForeignKeyBuilder HasEntityTypes(EntityType principalEntityType, EntityType dependentEntityType, ConfigurationSource configurationSource);
    private InternalForeignKeyBuilder HasEntityTypes(EntityType principalEntityType, EntityType dependentEntityType, Nullable`1<ConfigurationSource> principalEndConfigurationSource, ConfigurationSource configurationSource);
    [NullableContextAttribute("1")]
public virtual bool CanSetEntityTypes(EntityType principalEntityType, EntityType dependentEntityType, Nullable`1<ConfigurationSource> configurationSource);
    public virtual bool CanInvert(IReadOnlyList`1<Property> newForeignKeyProperties, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalForeignKeyBuilder ReuniquifyImplicitProperties(bool force);
    public virtual InternalForeignKeyBuilder HasForeignKey(IReadOnlyList`1<MemberInfo> properties, ConfigurationSource configurationSource);
    public virtual InternalForeignKeyBuilder HasForeignKey(IReadOnlyList`1<string> propertyNames, ConfigurationSource configurationSource);
    [NullableContextAttribute("1")]
public virtual InternalForeignKeyBuilder HasForeignKey(IReadOnlyList`1<MemberInfo> properties, EntityType dependentEntityType, ConfigurationSource configurationSource);
    [NullableContextAttribute("1")]
public virtual InternalForeignKeyBuilder HasForeignKey(IReadOnlyList`1<string> propertyNames, EntityType dependentEntityType, ConfigurationSource configurationSource);
    public virtual InternalForeignKeyBuilder HasForeignKey(IReadOnlyList`1<Property> properties, ConfigurationSource configurationSource);
    [NullableContextAttribute("1")]
public virtual InternalForeignKeyBuilder HasForeignKey(IReadOnlyList`1<Property> properties, EntityType dependentEntityType, ConfigurationSource configurationSource);
    public virtual bool CanSetForeignKey(IReadOnlyList`1<string> propertyNames, Nullable`1<ConfigurationSource> configurationSource);
    public virtual bool CanSetForeignKey(IReadOnlyList`1<Property> properties, Nullable`1<ConfigurationSource> configurationSource);
    private bool CanSetForeignKey(IReadOnlyList`1<IReadOnlyProperty> properties, EntityType dependentEntityType, Nullable`1<ConfigurationSource> configurationSource, bool overrideSameSource);
    private bool CanSetForeignKey(IReadOnlyList`1<IReadOnlyProperty> properties, EntityType dependentEntityType, Nullable`1<ConfigurationSource> configurationSource, Boolean& resetPrincipalKey, bool overrideSameSource);
    private bool CanSetForeignKey(IReadOnlyList`1<IReadOnlyProperty> properties, EntityType dependentEntityType, IReadOnlyList`1<Property> principalKeyProperties, EntityType principalEntityType, Nullable`1<ConfigurationSource> configurationSource, Boolean& resetPrincipalKey, bool overrideSameSource);
    public virtual InternalForeignKeyBuilder HasPrincipalKey(IReadOnlyList`1<MemberInfo> members, ConfigurationSource configurationSource);
    public virtual InternalForeignKeyBuilder HasPrincipalKey(IReadOnlyList`1<string> propertyNames, ConfigurationSource configurationSource);
    public virtual InternalForeignKeyBuilder HasPrincipalKey(IReadOnlyList`1<Property> properties, ConfigurationSource configurationSource);
    public virtual bool CanSetPrincipalKey(IReadOnlyList`1<string> propertyNames, Nullable`1<ConfigurationSource> configurationSource);
    public virtual bool CanSetPrincipalKey(IReadOnlyList`1<Property> properties, Nullable`1<ConfigurationSource> configurationSource);
    private bool CanSetPrincipalKey(IReadOnlyList`1<IReadOnlyProperty> properties, Nullable`1<ConfigurationSource> configurationSource, Boolean& resetDependent, IReadOnlyList`1& oldNameDependentProperties);
    private InternalForeignKeyBuilder ReplaceForeignKey(ConfigurationSource configurationSource, InternalEntityTypeBuilder principalEntityTypeBuilder, InternalEntityTypeBuilder dependentEntityTypeBuilder, Nullable`1<MemberIdentity> navigationToPrincipal, Nullable`1<MemberIdentity> navigationToDependent, IReadOnlyList`1<Property> dependentProperties, IReadOnlyList`1<Property> oldNameDependentProperties, IReadOnlyList`1<Property> principalProperties, Nullable`1<bool> isUnique, Nullable`1<bool> isRequired, Nullable`1<bool> isRequiredDependent, Nullable`1<bool> isOwnership, Nullable`1<DeleteBehavior> deleteBehavior, bool removeCurrent, Nullable`1<ConfigurationSource> principalEndConfigurationSource, bool oldRelationshipInverted);
    private InternalForeignKeyBuilder ReplaceForeignKey(InternalEntityTypeBuilder principalEntityTypeBuilder, InternalEntityTypeBuilder dependentEntityTypeBuilder, Nullable`1<MemberIdentity> navigationToPrincipal, Nullable`1<MemberIdentity> navigationToDependent, IReadOnlyList`1<Property> dependentProperties, IReadOnlyList`1<Property> oldNameDependentProperties, IReadOnlyList`1<Property> principalProperties, Nullable`1<bool> isUnique, Nullable`1<bool> isRequired, Nullable`1<bool> isRequiredDependent, Nullable`1<bool> isOwnership, Nullable`1<DeleteBehavior> deleteBehavior, bool removeCurrent, bool oldRelationshipInverted, Nullable`1<ConfigurationSource> principalEndConfigurationSource, ConfigurationSource configurationSource);
    private static InternalForeignKeyBuilder MergeFacetsFrom(Navigation newNavigation, Navigation oldNavigation);
    private InternalForeignKeyBuilder GetOrCreateRelationshipBuilder(EntityType principalEntityType, EntityType dependentEntityType, Nullable`1<MemberIdentity> navigationToPrincipal, Nullable`1<MemberIdentity> navigationToDependent, IReadOnlyList`1<Property> dependentProperties, IReadOnlyList`1<Property> oldNameDependentProperties, IReadOnlyList`1<Property> principalProperties, Nullable`1<bool> isRequired, bool removeCurrent, Nullable`1<ConfigurationSource> principalEndConfigurationSource, Nullable`1<ConfigurationSource> configurationSource, Nullable`1& existingRelationshipInverted);
    private InternalForeignKeyBuilder FindCompatibleRelationship(EntityType principalEntityType, EntityType dependentEntityType, Nullable`1<MemberIdentity> navigationToPrincipal, Nullable`1<MemberIdentity> navigationToDependent, IReadOnlyList`1<Property> dependentProperties, IReadOnlyList`1<Property> principalProperties, Nullable`1<ConfigurationSource> principalEndConfigurationSource, Nullable`1<ConfigurationSource> configurationSource, Nullable`1& existingRelationshipInverted, Boolean& conflictingRelationshipsFound, List`1& resolvableRelationships);
    [NullableContextAttribute("1")]
public static void ThrowForConflictingNavigation(IReadOnlyForeignKey foreignKey, string newInverseName, bool newToPrincipal);
    [NullableContextAttribute("1")]
public static void ThrowForConflictingNavigation(IReadOnlyForeignKey foreignKey, IReadOnlyEntityType principalEntityType, IReadOnlyEntityType dependentEntityType, string navigationToDependent, string navigationToPrincipal);
    private static IReadOnlyList`1<InternalForeignKeyBuilder> FindRelationships(EntityType principalEntityType, EntityType dependentEntityType, Nullable`1<MemberIdentity> navigationToPrincipal, Nullable`1<MemberIdentity> navigationToDependent, IReadOnlyList`1<Property> dependentProperties, IReadOnlyList`1<Property> principalProperties);
    [NullableContextAttribute("1")]
public static InternalForeignKeyBuilder FindCurrentForeignKeyBuilder(EntityType principalEntityType, EntityType dependentEntityType, Nullable`1<MemberIdentity> navigationToPrincipal, Nullable`1<MemberIdentity> navigationToDependent, IReadOnlyList`1<Property> dependentProperties, IReadOnlyList`1<Property> principalProperties);
    [NullableContextAttribute("1")]
public virtual InternalForeignKeyBuilder Attach(InternalEntityTypeBuilder entityTypeBuilder);
    [NullableContextAttribute("1")]
public static bool AreCompatible(EntityType principalEntityType, EntityType dependentEntityType, MemberInfo navigationToPrincipal, MemberInfo navigationToDependent, IReadOnlyList`1<Property> dependentProperties, IReadOnlyList`1<Property> principalProperties, Nullable`1<bool> isUnique, Nullable`1<ConfigurationSource> configurationSource);
    private bool CanSetRelatedTypes(EntityType principalEntityType, EntityType dependentEntityType, bool strictPrincipal, Nullable`1<MemberIdentity> navigationToPrincipal, Nullable`1<MemberIdentity> navigationToDependent, Nullable`1<ConfigurationSource> configurationSource, bool shouldThrow, Boolean& shouldInvert, Boolean& shouldResetToPrincipal, Boolean& shouldResetToDependent, Boolean& shouldResetPrincipalProperties, Boolean& shouldResetDependentProperties, Nullable`1& shouldBeUnique);
    private bool CanSetRelatedTypes(EntityType principalEntityType, EntityType dependentEntityType, Nullable`1<MemberIdentity> navigationToPrincipal, Nullable`1<MemberIdentity> navigationToDependent, Nullable`1<ConfigurationSource> configurationSource, bool inverted, bool shouldThrow, Boolean& shouldResetToPrincipal, Boolean& shouldResetToDependent, Boolean& shouldResetPrincipalProperties, Boolean& shouldResetDependentProperties, Nullable`1& shouldBeUnique);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKey Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.get_Metadata();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.HasEntityTypes(IConventionEntityType principalEntityType, IConventionEntityType dependentEntityType, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.CanSetEntityTypes(IConventionEntityType principalEntityType, IConventionEntityType dependentEntityType, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.CanInvert(IReadOnlyList`1<IConventionProperty> newForeignKeyProperties, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.HasForeignKey(IReadOnlyList`1<string> properties, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.HasForeignKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.CanSetForeignKey(IReadOnlyList`1<string> properties, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.CanSetForeignKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.HasPrincipalKey(IReadOnlyList`1<string> properties, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.HasPrincipalKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.CanSetPrincipalKey(IReadOnlyList`1<string> properties, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.CanSetPrincipalKey(IReadOnlyList`1<IConventionProperty> properties, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.HasNavigation(string name, bool pointsToPrincipal, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.HasNavigation(MemberInfo property, bool pointsToPrincipal, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.HasNavigations(string navigationToPrincipalName, string navigationToDependentName, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.HasNavigations(MemberInfo navigationToPrincipal, MemberInfo navigationToDependent, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.CanSetNavigation(MemberInfo property, bool pointsToPrincipal, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.CanSetNavigation(string name, bool pointsToPrincipal, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.CanSetNavigations(MemberInfo navigationToPrincipal, MemberInfo navigationToDependent, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.CanSetNavigations(string navigationToPrincipalName, string navigationToDependentName, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.IsRequired(Nullable`1<bool> required, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.CanSetIsRequired(Nullable`1<bool> required, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.IsRequiredDependent(Nullable`1<bool> required, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.CanSetIsRequiredDependent(Nullable`1<bool> required, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.IsOwnership(Nullable`1<bool> ownership, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.CanSetIsOwnership(Nullable`1<bool> ownership, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.OnDelete(Nullable`1<DeleteBehavior> deleteBehavior, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.CanSetOnDelete(Nullable`1<DeleteBehavior> deleteBehavior, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKeyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.IsUnique(Nullable`1<bool> unique, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder.CanSetIsUnique(Nullable`1<bool> unique, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalIndexBuilder : AnnotatableBuilder`2<Index, InternalModelBuilder> {
    private IConventionIndex Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder.Metadata { get; }
    public InternalIndexBuilder(Index index, InternalModelBuilder modelBuilder);
    [NullableContextAttribute("2")]
public virtual InternalIndexBuilder IsUnique(Nullable`1<bool> unique, ConfigurationSource configurationSource);
    public virtual bool CanSetIsUnique(Nullable`1<bool> unique, Nullable`1<ConfigurationSource> configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalIndexBuilder IsDescending(IReadOnlyList`1<bool> descending, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual bool CanSetIsDescending(IReadOnlyList`1<bool> descending, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalIndexBuilder Attach(InternalEntityTypeBuilder entityTypeBuilder);
    private sealed virtual override IConventionIndex Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder.get_Metadata();
    private sealed virtual override IConventionIndexBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder.IsUnique(Nullable`1<bool> unique, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder.CanSetIsUnique(Nullable`1<bool> unique, bool fromDataAnnotation);
    private sealed virtual override IConventionIndexBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder.IsDescending(IReadOnlyList`1<bool> descending, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder.CanSetIsDescending(IReadOnlyList`1<bool> descending, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalKeyBuilder : AnnotatableBuilder`2<Key, InternalModelBuilder> {
    private IConventionKey Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder.Metadata { get; }
    public InternalKeyBuilder(Key key, InternalModelBuilder modelBuilder);
    public virtual InternalKeyBuilder Attach(InternalEntityTypeBuilder entityTypeBuilder, Nullable`1<ConfigurationSource> primaryKeyConfigurationSource);
    private sealed virtual override IConventionKey Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder.get_Metadata();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalModelBuilder : AnnotatableBuilder`2<Model, InternalModelBuilder> {
    public InternalModelBuilder ModelBuilder { get; }
    private IConventionModel Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.Metadata { get; }
    public InternalModelBuilder(Model metadata);
    public virtual InternalModelBuilder get_ModelBuilder();
    public virtual InternalEntityTypeBuilder Entity(string name, ConfigurationSource configurationSource, Nullable`1<bool> shouldBeOwned);
    [NullableContextAttribute("2")]
public virtual InternalEntityTypeBuilder SharedTypeEntity(string name, Type type, ConfigurationSource configurationSource, Nullable`1<bool> shouldBeOwned);
    public virtual InternalEntityTypeBuilder Entity(Type type, ConfigurationSource configurationSource, Nullable`1<bool> shouldBeOwned);
    private InternalEntityTypeBuilder Entity(TypeIdentity& type, ConfigurationSource configurationSource, Nullable`1<bool> shouldBeOwned);
    public virtual InternalEntityTypeBuilder Entity(string name, string definingNavigationName, EntityType definingEntityType, ConfigurationSource configurationSource);
    public virtual InternalEntityTypeBuilder Entity(Type type, string definingNavigationName, EntityType definingEntityType, ConfigurationSource configurationSource);
    private InternalEntityTypeBuilder Entity(TypeIdentity& type, string definingNavigationName, EntityType definingEntityType, ConfigurationSource configurationSource);
    public virtual InternalModelBuilder RemoveImplicitJoinEntity(EntityType joinEntityType);
    public virtual IConventionOwnedEntityTypeBuilder Owned(Type type, ConfigurationSource configurationSource);
    private bool IsOwned(TypeIdentity& type);
    public virtual bool IsIgnored(Type type, Nullable`1<ConfigurationSource> configurationSource);
    public virtual bool IsIgnored(string name, Nullable`1<ConfigurationSource> configurationSource);
    private bool IsIgnored(TypeIdentity& type, Nullable`1<ConfigurationSource> configurationSource);
    public virtual bool CanBeConfigured(Type type, TypeConfigurationType configurationType, ConfigurationSource configurationSource);
    public virtual InternalModelBuilder Ignore(Type type, ConfigurationSource configurationSource);
    public virtual InternalModelBuilder Ignore(string name, ConfigurationSource configurationSource);
    private InternalModelBuilder Ignore(TypeIdentity& type, ConfigurationSource configurationSource);
    public virtual bool CanIgnore(Type type, ConfigurationSource configurationSource);
    public virtual bool CanIgnore(string name, ConfigurationSource configurationSource);
    private bool CanIgnore(TypeIdentity& type, ConfigurationSource configurationSource);
    public virtual InternalModelBuilder HasNoEntityType(EntityType entityType, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalModelBuilder HasChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, ConfigurationSource configurationSource);
    public virtual bool CanSetChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual InternalModelBuilder UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, ConfigurationSource configurationSource);
    public virtual bool CanSetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, ConfigurationSource configurationSource);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionModel Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.get_Metadata();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.Entity(string name, Nullable`1<bool> shouldBeOwned, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.SharedTypeEntity(string name, Type type, Nullable`1<bool> shouldBeOwned, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.Entity(Type type, Nullable`1<bool> shouldBeOwned, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.Entity(string name, string definingNavigationName, IConventionEntityType definingEntityType, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.Entity(Type type, string definingNavigationName, IConventionEntityType definingEntityType, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionOwnedEntityTypeBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.Owned(Type type, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.IsIgnored(Type type, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.IsIgnored(string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionModelBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.Ignore(Type type, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionModelBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.Ignore(string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionModelBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.HasNoEntityType(IConventionEntityType entityType, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.CanIgnore(Type type, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.CanIgnore(string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionModelBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.HasChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.CanSetChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionModelBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder.CanSetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalNavigationBuilder : InternalPropertyBaseBuilder`1<Navigation> {
    [NullableAttribute("1")]
private IConventionPropertyBase Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.Metadata { get; }
    [NullableAttribute("1")]
private IConventionNavigation Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionNavigationBuilder.Metadata { get; }
    [NullableContextAttribute("1")]
public InternalNavigationBuilder(Navigation metadata, InternalModelBuilder modelBuilder);
    public virtual InternalNavigationBuilder HasField(string fieldName, ConfigurationSource configurationSource);
    public virtual InternalNavigationBuilder HasField(FieldInfo fieldInfo, ConfigurationSource configurationSource);
    public virtual InternalNavigationBuilder UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, ConfigurationSource configurationSource);
    public virtual bool CanSetAutoInclude(Nullable`1<bool> autoInclude, ConfigurationSource configurationSource);
    public virtual InternalNavigationBuilder AutoInclude(Nullable`1<bool> autoInclude, ConfigurationSource configurationSource);
    public virtual bool CanSetIsRequired(Nullable`1<bool> required, ConfigurationSource configurationSource);
    public virtual InternalNavigationBuilder IsRequired(Nullable`1<bool> required, ConfigurationSource configurationSource);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionPropertyBase Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.get_Metadata();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionNavigation Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionNavigationBuilder.get_Metadata();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionPropertyBaseBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionNavigationBuilder.UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField(string fieldName, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionPropertyBaseBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField(string fieldName, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionNavigationBuilder.HasField(string fieldName, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField(FieldInfo fieldInfo, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionPropertyBaseBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField(FieldInfo fieldInfo, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionNavigationBuilder.HasField(FieldInfo fieldInfo, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionNavigationBuilder.CanSetAutoInclude(Nullable`1<bool> autoInclude, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionNavigationBuilder.AutoInclude(Nullable`1<bool> autoInclude, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionNavigationBuilder.CanSetIsRequired(Nullable`1<bool> required, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionNavigationBuilder.IsRequired(Nullable`1<bool> required, bool fromDataAnnotation);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalOwnedEntityTypeBuilder : object {
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBaseBuilder`1 : AnnotatableBuilder`2<TPropertyBase, InternalModelBuilder> {
    [NullableContextAttribute("1")]
public InternalPropertyBaseBuilder`1(TPropertyBase metadata, InternalModelBuilder modelBuilder);
    public virtual InternalPropertyBaseBuilder`1<TPropertyBase> HasField(string fieldName, ConfigurationSource configurationSource);
    public virtual bool CanSetField(string fieldName, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBaseBuilder`1<TPropertyBase> HasField(FieldInfo fieldInfo, ConfigurationSource configurationSource);
    public virtual bool CanSetField(FieldInfo fieldInfo, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBaseBuilder`1<TPropertyBase> UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, ConfigurationSource configurationSource);
    public virtual bool CanSetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, Nullable`1<ConfigurationSource> configurationSource);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalPropertyBuilder : InternalPropertyBaseBuilder`1<Property> {
    [NullableAttribute("1")]
private IConventionPropertyBase Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.Metadata { get; }
    [NullableAttribute("1")]
private IConventionProperty Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.Metadata { get; }
    [NullableContextAttribute("1")]
public InternalPropertyBuilder(Property property, InternalModelBuilder modelBuilder);
    public virtual InternalPropertyBuilder IsRequired(Nullable`1<bool> required, ConfigurationSource configurationSource);
    public virtual bool CanSetIsRequired(Nullable`1<bool> required, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder ValueGenerated(Nullable`1<ValueGenerated> valueGenerated, ConfigurationSource configurationSource);
    public virtual bool CanSetValueGenerated(Nullable`1<ValueGenerated> valueGenerated, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder IsConcurrencyToken(Nullable`1<bool> concurrencyToken, ConfigurationSource configurationSource);
    public virtual bool CanSetIsConcurrencyToken(Nullable`1<bool> concurrencyToken, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder HasField(string fieldName, ConfigurationSource configurationSource);
    public virtual InternalPropertyBuilder HasField(FieldInfo fieldInfo, ConfigurationSource configurationSource);
    public virtual InternalPropertyBuilder UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, ConfigurationSource configurationSource);
    public virtual InternalPropertyBuilder HasMaxLength(Nullable`1<int> maxLength, ConfigurationSource configurationSource);
    public virtual bool CanSetMaxLength(Nullable`1<int> maxLength, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder HasPrecision(Nullable`1<int> precision, ConfigurationSource configurationSource);
    public virtual bool CanSetPrecision(Nullable`1<int> precision, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder HasScale(Nullable`1<int> scale, ConfigurationSource configurationSource);
    public virtual bool CanSetScale(Nullable`1<int> scale, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder IsUnicode(Nullable`1<bool> unicode, ConfigurationSource configurationSource);
    public virtual bool CanSetIsUnicode(Nullable`1<bool> unicode, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder BeforeSave(Nullable`1<PropertySaveBehavior> behavior, ConfigurationSource configurationSource);
    public virtual bool CanSetBeforeSave(Nullable`1<PropertySaveBehavior> behavior, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder AfterSave(Nullable`1<PropertySaveBehavior> behavior, ConfigurationSource configurationSource);
    public virtual bool CanSetAfterSave(Nullable`1<PropertySaveBehavior> behavior, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder HasValueGenerator(Type valueGeneratorType, ConfigurationSource configurationSource);
    public virtual InternalPropertyBuilder HasValueGenerator(Func`3<IProperty, IEntityType, ValueGenerator> factory, ConfigurationSource configurationSource);
    public virtual InternalPropertyBuilder HasValueGeneratorFactory(Type factory, ConfigurationSource configurationSource);
    public virtual bool CanSetValueGenerator(Func`3<IProperty, IEntityType, ValueGenerator> factory, Nullable`1<ConfigurationSource> configurationSource);
    public virtual bool CanSetValueGeneratorFactory(Type factory, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder HasConversion(ValueConverter converter, ConfigurationSource configurationSource);
    public virtual bool CanSetConversion(ValueConverter converter, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder HasConversion(Type providerClrType, ConfigurationSource configurationSource);
    public virtual bool CanSetConversion(Type providerClrType, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder HasConverter(Type converterType, ConfigurationSource configurationSource);
    public virtual bool CanSetConverter(Type converterType, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder HasTypeMapping(CoreTypeMapping typeMapping, ConfigurationSource configurationSource);
    public virtual bool CanSetTypeMapping(CoreTypeMapping typeMapping, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder HasValueComparer(ValueComparer comparer, ConfigurationSource configurationSource);
    public virtual bool CanSetValueComparer(ValueComparer comparer, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder HasValueComparer(Type comparerType, ConfigurationSource configurationSource);
    public virtual bool CanSetValueComparer(Type comparerType, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder HasProviderValueComparer(ValueComparer comparer, ConfigurationSource configurationSource);
    public virtual bool CanSetProviderValueComparer(ValueComparer comparer, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalPropertyBuilder HasProviderValueComparer(Type comparerType, ConfigurationSource configurationSource);
    public virtual bool CanSetProviderValueComparer(Type comparerType, Nullable`1<ConfigurationSource> configurationSource);
    [NullableContextAttribute("1")]
public virtual InternalPropertyBuilder Attach(InternalEntityTypeBuilder entityTypeBuilder);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionPropertyBase Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.get_Metadata();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionProperty Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.get_Metadata();
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.IsRequired(Nullable`1<bool> required, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetIsRequired(Nullable`1<bool> required, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.ValueGenerated(Nullable`1<ValueGenerated> valueGenerated, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetValueGenerated(Nullable`1<ValueGenerated> valueGenerated, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.IsConcurrencyToken(Nullable`1<bool> concurrencyToken, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetIsConcurrencyToken(Nullable`1<bool> concurrencyToken, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBaseBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField(string fieldName, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasField(string fieldName, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBaseBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField(FieldInfo fieldInfo, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasField(FieldInfo fieldInfo, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField(string fieldName, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField(FieldInfo fieldInfo, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBaseBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasMaxLength(Nullable`1<int> maxLength, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetMaxLength(Nullable`1<int> maxLength, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.IsUnicode(Nullable`1<bool> unicode, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetIsUnicode(Nullable`1<bool> unicode, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasPrecision(Nullable`1<int> precision, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetPrecision(Nullable`1<int> precision, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasScale(Nullable`1<int> scale, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetScale(Nullable`1<int> scale, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.BeforeSave(Nullable`1<PropertySaveBehavior> behavior, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetBeforeSave(Nullable`1<PropertySaveBehavior> behavior, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.AfterSave(Nullable`1<PropertySaveBehavior> behavior, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetAfterSave(Nullable`1<PropertySaveBehavior> behavior, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasValueGenerator(Type valueGeneratorType, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasValueGenerator(Func`3<IProperty, IEntityType, ValueGenerator> factory, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetValueGenerator(Func`3<IProperty, IEntityType, ValueGenerator> factory, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasValueGeneratorFactory(Type valueGeneratorFactoryType, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetValueGeneratorFactory(Type valueGeneratorFactoryType, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasConversion(ValueConverter converter, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetConversion(ValueConverter converter, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasConverter(Type converterType, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetConverter(Type converterType, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasConversion(Type providerClrType, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetConversion(Type providerClrType, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasTypeMapping(CoreTypeMapping typeMapping, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetTypeMapping(CoreTypeMapping typeMapping, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasValueComparer(ValueComparer comparer, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetValueComparer(ValueComparer comparer, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasValueComparer(Type comparerType, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetValueComparer(Type comparerType, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasProviderValueComparer(ValueComparer comparer, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetProviderValueComparer(ValueComparer comparer, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.HasProviderValueComparer(Type comparerType, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder.CanSetProviderValueComparer(Type comparerType, bool fromDataAnnotation);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalServicePropertyBuilder : InternalPropertyBaseBuilder`1<ServiceProperty> {
    [NullableAttribute("1")]
private IConventionPropertyBase Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.Metadata { get; }
    [NullableAttribute("1")]
private IConventionServiceProperty Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.Metadata { get; }
    [NullableContextAttribute("1")]
public InternalServicePropertyBuilder(ServiceProperty property, InternalModelBuilder modelBuilder);
    public virtual InternalServicePropertyBuilder HasField(string fieldName, ConfigurationSource configurationSource);
    public virtual InternalServicePropertyBuilder HasField(FieldInfo fieldInfo, ConfigurationSource configurationSource);
    public virtual InternalServicePropertyBuilder UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, ConfigurationSource configurationSource);
    public virtual InternalServicePropertyBuilder HasParameterBinding(ServiceParameterBinding parameterBinding, ConfigurationSource configurationSource);
    public virtual bool CanSetParameterBinding(ServiceParameterBinding parameterBinding, Nullable`1<ConfigurationSource> configurationSource);
    [NullableContextAttribute("1")]
public virtual InternalServicePropertyBuilder Attach(InternalEntityTypeBuilder entityTypeBuilder);
    private sealed virtual override IConventionPropertyBase Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.get_Metadata();
    private sealed virtual override IConventionServiceProperty Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.get_Metadata();
    private sealed virtual override IConventionPropertyBaseBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField(string fieldName, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBaseBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField(FieldInfo fieldInfo, bool fromDataAnnotation);
    private sealed virtual override IConventionServicePropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.HasField(string fieldName, bool fromDataAnnotation);
    private sealed virtual override IConventionServicePropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.HasField(FieldInfo fieldInfo, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField(string fieldName, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField(FieldInfo fieldInfo, bool fromDataAnnotation);
    private sealed virtual override IConventionPropertyBaseBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    private sealed virtual override IConventionServicePropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    private sealed virtual override IConventionServicePropertyBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.HasParameterBinding(ServiceParameterBinding parameterBinding, bool fromDataAnnotation);
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionServicePropertyBuilder.CanSetParameterBinding(ServiceParameterBinding parameterBinding, bool fromDataAnnotation);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalSkipNavigationBuilder : InternalPropertyBaseBuilder`1<SkipNavigation> {
    [NullableAttribute("1")]
private IConventionPropertyBase Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.Metadata { get; }
    [NullableAttribute("1")]
private IConventionSkipNavigation Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.Metadata { get; }
    [NullableContextAttribute("1")]
public InternalSkipNavigationBuilder(SkipNavigation metadata, InternalModelBuilder modelBuilder);
    public virtual InternalSkipNavigationBuilder HasField(string fieldName, ConfigurationSource configurationSource);
    public virtual InternalSkipNavigationBuilder HasField(FieldInfo fieldInfo, ConfigurationSource configurationSource);
    public virtual InternalSkipNavigationBuilder UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, ConfigurationSource configurationSource);
    public virtual InternalSkipNavigationBuilder HasForeignKey(ForeignKey foreignKey, ConfigurationSource configurationSource);
    public virtual bool CanSetForeignKey(ForeignKey foreignKey, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalSkipNavigationBuilder HasInverse(SkipNavigation inverse, ConfigurationSource configurationSource);
    public virtual bool CanSetInverse(SkipNavigation inverse, Nullable`1<ConfigurationSource> configurationSource);
    public virtual InternalSkipNavigationBuilder Attach(InternalEntityTypeBuilder entityTypeBuilder, EntityType targetEntityType, InternalSkipNavigationBuilder inverseBuilder);
    public virtual bool CanSetAutoInclude(Nullable`1<bool> autoInclude, ConfigurationSource configurationSource);
    public virtual InternalSkipNavigationBuilder AutoInclude(Nullable`1<bool> autoInclude, ConfigurationSource configurationSource);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionPropertyBase Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.get_Metadata();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionSkipNavigation Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.get_Metadata();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionPropertyBaseBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField(string fieldName, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionPropertyBaseBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.HasField(FieldInfo fieldInfo, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasField(string fieldName, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasField(FieldInfo fieldInfo, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField(string fieldName, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetField(FieldInfo fieldInfo, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionPropertyBaseBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.UsePropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBaseBuilder.CanSetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasForeignKey(IConventionForeignKey foreignKey, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.CanSetForeignKey(IConventionForeignKey foreignKey, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.HasInverse(IConventionSkipNavigation inverse, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.CanSetInverse(IConventionSkipNavigation inverse, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.CanSetAutoInclude(Nullable`1<bool> autoInclude, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSkipNavigationBuilder.AutoInclude(Nullable`1<bool> autoInclude, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.InternalTriggerBuilder : AnnotatableBuilder`2<Trigger, IConventionModelBuilder> {
    private IConventionTrigger Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder.Metadata { get; }
    public InternalTriggerBuilder(Trigger trigger, IConventionModelBuilder modelBuilder);
    public virtual InternalTriggerBuilder Attach(InternalEntityTypeBuilder entityTypeBuilder);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionTrigger Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionTriggerBuilder.get_Metadata();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.Internal.IReferenceRoot`1 {
    public abstract virtual Reference`1<T> Track(T object);
    public abstract virtual void Release(Reference`1<T> reference);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType {
    public PropertyCounts Counts { get; }
    public Func`2<InternalEntityEntry, ISnapshot> RelationshipSnapshotFactory { get; }
    public Func`2<InternalEntityEntry, ISnapshot> OriginalValuesFactory { get; }
    public Func`1<ISnapshot> StoreGeneratedValuesFactory { get; }
    public Func`2<InternalEntityEntry, ISnapshot> TemporaryValuesFactory { get; }
    public Func`2<ValueBuffer, ISnapshot> ShadowValuesFactory { get; }
    public Func`1<ISnapshot> EmptyShadowValuesFactory { get; }
    public abstract virtual PropertyCounts get_Counts();
    public abstract virtual Func`2<InternalEntityEntry, ISnapshot> get_RelationshipSnapshotFactory();
    public abstract virtual Func`2<InternalEntityEntry, ISnapshot> get_OriginalValuesFactory();
    public abstract virtual Func`1<ISnapshot> get_StoreGeneratedValuesFactory();
    public abstract virtual Func`2<InternalEntityEntry, ISnapshot> get_TemporaryValuesFactory();
    public abstract virtual Func`2<ValueBuffer, ISnapshot> get_ShadowValuesFactory();
    public abstract virtual Func`1<ISnapshot> get_EmptyShadowValuesFactory();
    public abstract virtual Nullable`1<ConfigurationSource> GetConstructorBindingConfigurationSource();
    public abstract virtual Nullable`1<ConfigurationSource> GetServiceOnlyConstructorBindingConfigurationSource();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeForeignKey {
    public IDependentKeyValueFactory DependentKeyValueFactory { get; public set; }
    public Func`1<IDependentsMap> DependentsMapFactory { get; public set; }
    public abstract virtual IDependentKeyValueFactory get_DependentKeyValueFactory();
    public abstract virtual void set_DependentKeyValueFactory(IDependentKeyValueFactory value);
    public abstract virtual Func`1<IDependentsMap> get_DependentsMapFactory();
    public abstract virtual void set_DependentsMapFactory(Func`1<IDependentsMap> value);
}
public interface Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeKey {
    [NullableContextAttribute("1")]
public abstract virtual Func`2<bool, IIdentityMap> GetIdentityMapFactory();
}
public interface Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeModel {
    public bool SkipDetectChanges { get; }
    [NullableAttribute("2")]
public object RelationalModel { get; }
    public abstract virtual bool get_SkipDetectChanges();
    [NullableContextAttribute("2")]
public abstract virtual object get_RelationalModel();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimePropertyBase {
    public IClrPropertySetter Setter { get; }
    public IClrPropertySetter MaterializationSetter { get; }
    public PropertyAccessors Accessors { get; }
    public PropertyIndexes PropertyIndexes { get; public set; }
    public abstract virtual IClrPropertySetter get_Setter();
    public abstract virtual IClrPropertySetter get_MaterializationSetter();
    public abstract virtual PropertyAccessors get_Accessors();
    public abstract virtual PropertyIndexes get_PropertyIndexes();
    public abstract virtual void set_PropertyIndexes(PropertyIndexes value);
    public virtual int GetShadowIndex();
    public virtual int GetStoreGeneratedIndex();
    public virtual int GetRelationshipIndex();
    public virtual int GetOriginalValueIndex();
}
public interface Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeSkipNavigation {
    [NullableContextAttribute("1")]
public abstract virtual ICollectionLoader GetManyToManyLoader();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.Key : ConventionAnnotatable {
    private InternalKeyBuilder _builder;
    private ConfigurationSource _configurationSource;
    private Func`2<bool, IIdentityMap> _identityMapFactory;
    private object _principalKeyValueFactory;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<Property> <Properties>k__BackingField;
    private static MethodInfo _createPrincipalKeyValueFactoryMethod;
    [CompilerGeneratedAttribute]
private ISet`1<ForeignKey> <ReferencingForeignKeys>k__BackingField;
    public IReadOnlyList`1<Property> Properties { get; }
    public EntityType DeclaringEntityType { get; }
    public InternalKeyBuilder Builder { get; }
    public bool IsInModel { get; }
    public bool IsReadOnly { get; }
    public Func`2<bool, IIdentityMap> IdentityMapFactory { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ISet`1<ForeignKey> ReferencingForeignKeys { get; public set; }
    public DebugView DebugView { get; }
    private IReadOnlyList`1<IReadOnlyProperty> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey.Properties { get; }
    private IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey.DeclaringEntityType { get; }
    private IReadOnlyList`1<IMutableProperty> Microsoft.EntityFrameworkCore.Metadata.IMutableKey.Properties { get; }
    private IReadOnlyList`1<IConventionProperty> Microsoft.EntityFrameworkCore.Metadata.IConventionKey.Properties { get; }
    private IReadOnlyList`1<IProperty> Microsoft.EntityFrameworkCore.Metadata.IKey.Properties { get; }
    private IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableKey.DeclaringEntityType { get; }
    private IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionKey.DeclaringEntityType { get; }
    private IEntityType Microsoft.EntityFrameworkCore.Metadata.IKey.DeclaringEntityType { get; }
    private IConventionKeyBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionKey.Builder { get; }
    private IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.Builder { get; }
    public Key(IReadOnlyList`1<Property> properties, ConfigurationSource configurationSource);
    private static Key();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual IReadOnlyList`1<Property> get_Properties();
    [DebuggerStepThroughAttribute]
public virtual EntityType get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
public virtual InternalKeyBuilder get_Builder();
    public virtual bool get_IsInModel();
    public virtual void SetRemovedFromModel();
    public virtual bool get_IsReadOnly();
    [DebuggerStepThroughAttribute]
public virtual ConfigurationSource GetConfigurationSource();
    public virtual void UpdateConfigurationSource(ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
protected virtual IConventionAnnotation OnAnnotationSet(string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    public virtual IEnumerable`1<ForeignKey> GetReferencingForeignKeys();
    public virtual Func`2<bool, IIdentityMap> get_IdentityMapFactory();
    [UsedImplicitlyAttribute]
private IPrincipalKeyValueFactory`1<TKey> CreatePrincipalKeyValueFactory();
    [CompilerGeneratedAttribute]
public virtual ISet`1<ForeignKey> get_ReferencingForeignKeys();
    [CompilerGeneratedAttribute]
public virtual void set_ReferencingForeignKeys(ISet`1<ForeignKey> value);
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IReadOnlyProperty> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey.get_Properties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IMutableProperty> Microsoft.EntityFrameworkCore.Metadata.IMutableKey.get_Properties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IConventionProperty> Microsoft.EntityFrameworkCore.Metadata.IConventionKey.get_Properties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IProperty> Microsoft.EntityFrameworkCore.Metadata.IKey.get_Properties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableKey.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionKey.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IKey.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionKeyBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionKey.get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyForeignKey> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey.GetReferencingForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override Func`2<bool, IIdentityMap> Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeKey.GetIdentityMapFactory();
    private sealed virtual override IPrincipalKeyValueFactory`1<TKey> Microsoft.EntityFrameworkCore.Metadata.IKey.GetPrincipalKeyValueFactory();
    private sealed virtual override IPrincipalKeyValueFactory Microsoft.EntityFrameworkCore.Metadata.IKey.GetPrincipalKeyValueFactory();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__31_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__31_1();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.KeyExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static int IndexOf(IReadOnlyKey key, IReadOnlyProperty property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.MemberClassifier : object {
    private ITypeMappingSource _typeMappingSource;
    private IParameterBindingFactories _parameterBindingFactories;
    public MemberClassifier(ITypeMappingSource typeMappingSource, IParameterBindingFactories parameterBindingFactories);
    public virtual ImmutableSortedDictionary`2<PropertyInfo, ValueTuple`2<Type, Nullable`1<bool>>> GetNavigationCandidates(IConventionEntityType entityType);
    public virtual IReadOnlyCollection`1<Type> GetInverseCandidateTypes(IConventionEntityType entityType);
    public virtual Type FindCandidateNavigationPropertyType(MemberInfo memberInfo, IConventionModel model, Nullable`1& shouldBeOwned);
    private bool IsCandidateNavigationPropertyType(Type targetType, MemberInfo memberInfo, Model model, Nullable`1& shouldBeOwned);
    public virtual bool IsCandidatePrimitiveProperty(PropertyInfo propertyInfo, IConventionModel model);
    public virtual IParameterBindingFactory FindServicePropertyCandidateBindingFactory(PropertyInfo propertyInfo, IConventionModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.Model : ConventionAnnotatable {
    [DynamicallyAccessedMembersAttribute("9831")]
public static Type DefaultPropertyBagType;
    private SortedDictionary`2<string, EntityType> _entityTypes;
    private ConcurrentDictionary`2<Type, PropertyInfo> _indexerPropertyInfoMap;
    private ConcurrentDictionary`2<Type, string> _clrTypeNameMap;
    private Dictionary`2<string, ConfigurationSource> _ignoredTypeNames;
    private Dictionary`2<string, ConfigurationSource> _ownedTypes;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Dictionary`2<Type, ValueTuple`2<ConfigurationSource, SortedSet`1<EntityType>>> _sharedTypes;
    private ConventionDispatcher _conventionDispatcher;
    private IList`1<IModelFinalizedConvention> _modelFinalizedConventions;
    private ModelDependencies _scopedModelDependencies;
    private Nullable`1<bool> _skipDetectChanges;
    private Nullable`1<ChangeTrackingStrategy> _changeTrackingStrategy;
    private Nullable`1<ConfigurationSource> _changeTrackingStrategyConfigurationSource;
    [CompilerGeneratedAttribute]
private InternalModelBuilder <Builder>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelConfiguration <Configuration>k__BackingField;
    public static PropertyAccessMode DefaultPropertyAccessMode;
    public ConventionDispatcher ConventionDispatcher { get; }
    [NullableAttribute("2")]
public ModelDependencies ScopedModelDependencies { get; public set; }
    public bool IsReadOnly { get; }
    public InternalModelBuilder Builder { get; }
    [NullableAttribute("2")]
public ModelConfiguration Configuration { get; }
    public bool SkipDetectChanges { get; public set; }
    [NullableAttribute("2")]
public object RelationalModel { get; }
    public DebugView DebugView { get; }
    private IConventionModelBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionModel.Builder { get; }
    private IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.Builder { get; }
    [NullableContextAttribute("2")]
public Model(ConventionSet conventions, ModelDependencies modelDependencies, ModelConfiguration modelConfiguration);
    private static Model();
    [DebuggerStepThroughAttribute]
public virtual ConventionDispatcher get_ConventionDispatcher();
    [NullableContextAttribute("2")]
public virtual ModelDependencies get_ScopedModelDependencies();
    [NullableContextAttribute("2")]
public virtual void set_ScopedModelDependencies(ModelDependencies value);
    public virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual InternalModelBuilder get_Builder();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual ModelConfiguration get_Configuration();
    public virtual IEnumerable`1<EntityType> GetEntityTypes();
    public virtual EntityType AddEntityType(string name, bool owned, ConfigurationSource configurationSource);
    public virtual EntityType AddEntityType(Type type, bool owned, ConfigurationSource configurationSource);
    public virtual EntityType AddEntityType(string name, Type type, bool owned, ConfigurationSource configurationSource);
    private EntityType AddEntityType(EntityType entityType);
    public virtual EntityType FindEntityType(Type type);
    public virtual EntityType FindEntityType(string name);
    public virtual EntityType RemoveEntityType(Type type);
    public virtual EntityType RemoveEntityType(string name);
    private static void AssertCanRemove(EntityType entityType);
    [NullableContextAttribute("2")]
public virtual EntityType RemoveEntityType(EntityType entityType);
    public virtual EntityType AddEntityType(string name, string definingNavigationName, EntityType definingEntityType, ConfigurationSource configurationSource);
    public virtual EntityType AddEntityType(Type type, string definingNavigationName, EntityType definingEntityType, ConfigurationSource configurationSource);
    [DebuggerStepThroughAttribute]
public virtual string GetDisplayName(Type type);
    public virtual EntityType FindEntityType(Type type, string definingNavigationName, EntityType definingEntityType);
    public virtual EntityType FindEntityType(string name, string definingNavigationName, EntityType definingEntityType);
    public virtual EntityType FindActualEntityType(EntityType entityType);
    public virtual Type FindClrType(string name);
    public virtual IEnumerable`1<EntityType> FindEntityTypes(Type type);
    public virtual IEnumerable`1<EntityType> GetEntityTypes(string name);
    public virtual EntityType RemoveEntityType(Type type, string definingNavigationName, EntityType definingEntityType);
    public virtual EntityType RemoveEntityType(string name, string definingNavigationName, EntityType definingEntityType);
    public virtual bool IsShared(Type type);
    public virtual string AddIgnored(Type type, ConfigurationSource configurationSource);
    public virtual string AddIgnored(string name, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual string AddIgnored(string name, Type type, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> FindIgnoredConfigurationSource(Type type);
    public virtual Nullable`1<ConfigurationSource> FindIgnoredConfigurationSource(string name);
    public virtual bool IsIgnored(string name);
    public virtual bool IsIgnored(Type type);
    public virtual bool IsIgnoredType(Type type);
    public virtual string RemoveIgnored(Type type);
    public virtual string RemoveIgnored(string name);
    public virtual IEnumerable`1<ITypeMappingConfiguration> GetTypeMappingConfigurations();
    public virtual ITypeMappingConfiguration FindTypeMappingConfiguration(Type propertyType);
    public virtual bool IsOwned(Type type);
    public virtual Nullable`1<ConfigurationSource> FindIsOwnedConfigurationSource(Type type);
    public virtual void AddOwned(Type type, ConfigurationSource configurationSource);
    public virtual string RemoveOwned(Type type);
    public virtual Nullable`1<ConfigurationSource> FindIsSharedConfigurationSource(Type type);
    public virtual void AddShared(Type type, ConfigurationSource configurationSource);
    public virtual Type RemoveShared(Type type);
    public virtual PropertyAccessMode GetPropertyAccessMode();
    public virtual Nullable`1<PropertyAccessMode> SetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetPropertyAccessModeConfigurationSource();
    [DebuggerStepThroughAttribute]
public virtual ChangeTrackingStrategy GetChangeTrackingStrategy();
    public virtual Nullable`1<ChangeTrackingStrategy> SetChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetChangeTrackingStrategyConfigurationSource();
    [NullableContextAttribute("2")]
protected virtual IConventionAnnotation OnAnnotationSet(string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    public virtual IConventionBatch DelayConventions();
    public virtual T Track(Func`1<T> func, IConventionForeignKey& foreignKey);
    public virtual IModel FinalizeModel();
    public virtual IModel OnModelFinalized();
    private Model MakeReadonly();
    public virtual PropertyInfo FindIndexerPropertyInfo(Type type);
    public virtual bool IsIndexerMethod(MethodInfo methodInfo);
    public virtual bool get_SkipDetectChanges();
    public virtual void set_SkipDetectChanges(bool value);
    public virtual Nullable`1<bool> SetSkipDetectChanges(Nullable`1<bool> skipDetectChanges);
    [NullableContextAttribute("2")]
public virtual object get_RelationalModel();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionModelBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionModel.get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableModel.SetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode);
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<PropertyAccessMode> Microsoft.EntityFrameworkCore.Metadata.IConventionModel.SetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableModel.SetChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy);
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<ChangeTrackingStrategy> Microsoft.EntityFrameworkCore.Metadata.IConventionModel.SetChangeTrackingStrategy(Nullable`1<ChangeTrackingStrategy> changeTrackingStrategy, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.FindEntityType(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionModel.FindEntityType(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType(Type type);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(Type type);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType(string name, string definingNavigationName, IReadOnlyEntityType definingEntityType);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.FindEntityType(string name, string definingNavigationName, IMutableEntityType definingEntityType);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionModel.FindEntityType(string name, string definingNavigationName, IConventionEntityType definingEntityType);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(string name, string definingNavigationName, IEntityType definingEntityType);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType(Type type, string definingNavigationName, IReadOnlyEntityType definingEntityType);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyEntityType> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.GetEntityTypes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IMutableEntityType> Microsoft.EntityFrameworkCore.Metadata.IMutableModel.GetEntityTypes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IConventionEntityType> Microsoft.EntityFrameworkCore.Metadata.IConventionModel.GetEntityTypes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IEntityType> Microsoft.EntityFrameworkCore.Metadata.IModel.GetEntityTypes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyEntityType> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityTypes(Type type);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IEntityType> Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityTypes(Type type);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionModel.AddEntityType(string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(Type type);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionModel.AddEntityType(Type type, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(string name, Type type);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionModel.AddEntityType(string name, Type type, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(string name, string definingNavigationName, IMutableEntityType definingEntityType);
    [ObsoleteAttribute]
[DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionModel.AddEntityType(string name, string definingNavigationName, IConventionEntityType definingEntityType, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddEntityType(Type type, string definingNavigationName, IMutableEntityType definingEntityType);
    [ObsoleteAttribute]
[DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionModel.AddEntityType(Type type, string definingNavigationName, IConventionEntityType definingEntityType, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddOwnedEntityType(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionModel.AddOwnedEntityType(string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddOwnedEntityType(Type type);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionModel.AddOwnedEntityType(Type type, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddOwnedEntityType(string name, Type type);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionModel.AddOwnedEntityType(string name, Type type, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.RemoveEntityType(IMutableEntityType entityType);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionModel.RemoveEntityType(IConventionEntityType entityType);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.RemoveEntityType(Type type);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionModel.RemoveEntityType(Type type);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.RemoveEntityType(Type type, string definingNavigationName, IMutableEntityType definingEntityType);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionModel.RemoveEntityType(Type type, string definingNavigationName, IConventionEntityType definingEntityType);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.RemoveEntityType(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionModel.RemoveEntityType(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableModel.RemoveEntityType(string name, string definingNavigationName, IMutableEntityType definingEntityType);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionModel.RemoveEntityType(string name, string definingNavigationName, IConventionEntityType definingEntityType);
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddShared(Type type);
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionModel.AddShared(Type type, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddOwned(Type type);
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IConventionModel.AddOwned(Type type, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddIgnored(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IConventionModel.AddIgnored(string name, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IMutableModel.AddIgnored(Type type);
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IConventionModel.AddIgnored(Type type, bool fromDataAnnotation);
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__92_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__92_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ModelConfiguration : object {
    private Dictionary`2<Type, PropertyConfiguration> _properties;
    private Dictionary`2<Type, PropertyConfiguration> _typeMappings;
    private HashSet`1<Type> _ignoredTypes;
    private Dictionary`2<Type, Nullable`1<TypeConfigurationType>> _configurationTypes;
    public virtual bool IsEmpty();
    public virtual ModelConfiguration Validate();
    public virtual Nullable`1<TypeConfigurationType> GetConfigurationType(Type type);
    private Nullable`1<TypeConfigurationType> GetConfigurationType(Type type, Nullable`1<TypeConfigurationType> previousConfiguration, Type& previousType, bool getBaseTypes);
    private static void EnsureCompatible(TypeConfigurationType configurationType, Type type, Nullable`1<TypeConfigurationType> previousConfiguration, Type previousType);
    public virtual IEnumerable`1<ITypeMappingConfiguration> GetTypeMappingConfigurations();
    public virtual ITypeMappingConfiguration FindTypeMappingConfiguration(Type scalarType);
    public virtual void ConfigureProperty(IMutableProperty property);
    public virtual PropertyConfiguration GetOrAddProperty(Type type);
    public virtual PropertyConfiguration FindProperty(Type type);
    public virtual bool RemoveProperty(Type type);
    public virtual PropertyConfiguration GetOrAddTypeMapping(Type type);
    public virtual PropertyConfiguration FindTypeMapping(Type type);
    public virtual void AddIgnored(Type type);
    public virtual bool IsIgnored(Type type);
    public virtual bool RemoveIgnored(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions : object {
    [ExtensionAttribute]
public static void SetProductVersion(IMutableModel model, string value);
    [ExtensionAttribute]
public static IEnumerable`1<IEntityType> GetRootEntityTypes(IModel model);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Metadata.Internal.ModelExtensions/<GetEntityTypesInHierarchicalOrder>d__2")]
[ExtensionAttribute]
public static IEnumerable`1<IEntityType> GetEntityTypesInHierarchicalOrder(IModel model);
    [ExtensionAttribute]
public static string FindSameTypeNameWithDifferentNamespace(IModel model, Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.Navigation : PropertyBase {
    private InternalNavigationBuilder _builder;
    private IClrCollectionAccessor _collectionAccessor;
    private bool _collectionAccessorInitialized;
    [CompilerGeneratedAttribute]
private ForeignKey <ForeignKey>k__BackingField;
    [DynamicallyAccessedMembersAttribute("9831")]
public Type ClrType { get; }
    public ForeignKey ForeignKey { get; }
    public InternalNavigationBuilder Builder { get; }
    public bool IsInModel { get; }
    public EntityType DeclaringEntityType { get; }
    public TypeBase DeclaringType { get; }
    public EntityType TargetEntityType { get; }
    public bool IsOnDependent { get; }
    [NullableAttribute("2")]
public Navigation Inverse { get; }
    [NullableAttribute("2")]
public IClrCollectionAccessor CollectionAccessor { get; }
    public DebugView DebugView { get; }
    private IReadOnlyForeignKey Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigation.ForeignKey { get; }
    private IConventionNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.Builder { get; }
    private IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.Builder { get; }
    public Navigation(string name, PropertyInfo propertyInfo, FieldInfo fieldInfo, ForeignKey foreignKey);
    public virtual Type get_ClrType();
    [CompilerGeneratedAttribute]
public virtual ForeignKey get_ForeignKey();
    [DebuggerStepThroughAttribute]
public virtual InternalNavigationBuilder get_Builder();
    public virtual bool get_IsInModel();
    public virtual void SetRemovedFromModel();
    [DebuggerStepThroughAttribute]
public virtual EntityType get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
public virtual TypeBase get_DeclaringType();
    [DebuggerStepThroughAttribute]
public virtual EntityType get_TargetEntityType();
    [DebuggerStepThroughAttribute]
public virtual bool get_IsOnDependent();
    public virtual ConfigurationSource GetConfigurationSource();
    public virtual void UpdateConfigurationSource(ConfigurationSource configurationSource);
    public virtual PropertyAccessMode GetPropertyAccessMode();
    public static bool IsCompatible(string navigationName, MemberInfo navigationProperty, EntityType sourceType, EntityType targetType, Nullable`1<bool> shouldBeCollection, bool shouldThrow);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public virtual Navigation get_Inverse();
    [NullableContextAttribute("2")]
public virtual Navigation SetInverse(string inverseName, ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual Navigation SetInverse(MemberInfo inverse, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetInverseConfigurationSource();
    [NullableContextAttribute("2")]
public virtual IClrCollectionAccessor get_CollectionAccessor();
    [NullableContextAttribute("2")]
protected virtual IConventionAnnotation OnAnnotationSet(string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyForeignKey Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigation.get_ForeignKey();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableNavigation Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.SetInverse(string inverseName);
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableNavigation Microsoft.EntityFrameworkCore.Metadata.IMutableNavigation.SetInverse(MemberInfo inverse);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionNavigation Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.SetInverse(string inverseName, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionNavigation Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.SetInverse(MemberInfo inverse, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionNavigation.get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.get_Builder();
    private sealed virtual override IClrCollectionAccessor Microsoft.EntityFrameworkCore.Metadata.INavigationBase.GetCollectionAccessor();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__36_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__36_1();
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.NavigationExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static MemberIdentity CreateMemberIdentity(IReadOnlyNavigation navigation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.NullableEnumClrPropertySetter`3 : object {
    private Action`2<TEntity, TValue> _setter;
    public NullableEnumClrPropertySetter`3(Action`2<TEntity, TValue> setter);
    public virtual void SetClrValue(object instance, object value);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ParameterBindingFactories : object {
    private IRegisteredServices _registeredServices;
    private List`1<IParameterBindingFactory> _parameterBindingFactories;
    [NullableContextAttribute("1")]
public ParameterBindingFactories(IEnumerable`1<IParameterBindingFactory> registeredFactories, IRegisteredServices registeredServices);
    [NullableContextAttribute("1")]
public virtual IParameterBindingFactory FindFactory(Type parameterType, string parameterName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertiesSnapshot : object {
    [CompilerGeneratedAttribute]
private List`1<InternalPropertyBuilder> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RelationshipSnapshot> <Relationships>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<InternalIndexBuilder> <Indexes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ValueTuple`2<InternalKeyBuilder, Nullable`1<ConfigurationSource>>> <Keys>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<InternalPropertyBuilder> Properties { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<RelationshipSnapshot> Relationships { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<InternalIndexBuilder> Indexes { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<InternalKeyBuilder, Nullable`1<ConfigurationSource>>> Keys { get; private set; }
    public PropertiesSnapshot(List`1<InternalPropertyBuilder> properties, List`1<InternalIndexBuilder> indexes, List`1<ValueTuple`2<InternalKeyBuilder, Nullable`1<ConfigurationSource>>> keys, List`1<RelationshipSnapshot> relationships);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
private List`1<InternalPropertyBuilder> get_Properties();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
private List`1<RelationshipSnapshot> get_Relationships();
    [CompilerGeneratedAttribute]
private void set_Relationships(List`1<RelationshipSnapshot> value);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
private List`1<InternalIndexBuilder> get_Indexes();
    [CompilerGeneratedAttribute]
private void set_Indexes(List`1<InternalIndexBuilder> value);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
private List`1<ValueTuple`2<InternalKeyBuilder, Nullable`1<ConfigurationSource>>> get_Keys();
    [CompilerGeneratedAttribute]
private void set_Keys(List`1<ValueTuple`2<InternalKeyBuilder, Nullable`1<ConfigurationSource>>> value);
    public virtual void Add(List`1<RelationshipSnapshot> relationships);
    public virtual void Add(List`1<InternalIndexBuilder> indexes);
    public virtual void Add(List`1<ValueTuple`2<InternalKeyBuilder, Nullable`1<ConfigurationSource>>> keys);
    public virtual void Attach(InternalEntityTypeBuilder entityTypeBuilder);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.Property : PropertyBase {
    private Nullable`1<bool> _isConcurrencyToken;
    private Nullable`1<bool> _isNullable;
    private Nullable`1<ValueGenerated> _valueGenerated;
    private CoreTypeMapping _typeMapping;
    private InternalPropertyBuilder _builder;
    private Nullable`1<ConfigurationSource> _typeConfigurationSource;
    private Nullable`1<ConfigurationSource> _isNullableConfigurationSource;
    private Nullable`1<ConfigurationSource> _isConcurrencyTokenConfigurationSource;
    private Nullable`1<ConfigurationSource> _valueGeneratedConfigurationSource;
    private Nullable`1<ConfigurationSource> _typeMappingConfigurationSource;
    private static bool QuirkEnabled29642;
    private static bool QuirkEnabled29985;
    [CompilerGeneratedAttribute]
private EntityType <DeclaringEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyKey <PrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Key> <Keys>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ForeignKey> <ForeignKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Index> <Indexes>k__BackingField;
    [NullableAttribute("1")]
public EntityType DeclaringEntityType { get; }
    [NullableAttribute("1")]
public TypeBase DeclaringType { get; }
    [NullableAttribute("1")]
[DynamicallyAccessedMembersAttribute("9831")]
public Type ClrType { get; }
    [NullableAttribute("1")]
public InternalPropertyBuilder Builder { get; }
    public bool IsInModel { get; }
    public bool IsNullable { get; public set; }
    private bool DefaultIsNullable { get; }
    public ValueGenerated ValueGenerated { get; public set; }
    private static ValueGenerated DefaultValueGenerated { get; }
    public bool IsConcurrencyToken { get; public set; }
    private static bool DefaultIsConcurrencyToken { get; }
    public CoreTypeMapping TypeMapping { get; public set; }
    public IReadOnlyKey PrimaryKey { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<Key> Keys { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ForeignKey> ForeignKeys { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<Index> Indexes { get; public set; }
    [NullableAttribute("1")]
public DebugView DebugView { get; }
    [NullableAttribute("1")]
private IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.Builder { get; }
    [NullableAttribute("1")]
private IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.Builder { get; }
    [NullableAttribute("1")]
private IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.DeclaringEntityType { get; }
    [NullableAttribute("1")]
private IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.DeclaringEntityType { get; }
    [NullableAttribute("1")]
private IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.DeclaringEntityType { get; }
    [NullableAttribute("1")]
private IEntityType Microsoft.EntityFrameworkCore.Metadata.IProperty.DeclaringEntityType { get; }
    [NullableContextAttribute("1")]
public Property(string name, Type clrType, PropertyInfo propertyInfo, FieldInfo fieldInfo, EntityType declaringEntityType, ConfigurationSource configurationSource, Nullable`1<ConfigurationSource> typeConfigurationSource);
    private static Property();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual EntityType get_DeclaringEntityType();
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
public virtual TypeBase get_DeclaringType();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual Type get_ClrType();
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
public virtual InternalPropertyBuilder get_Builder();
    public virtual bool get_IsInModel();
    public virtual void SetRemovedFromModel();
    public virtual Nullable`1<ConfigurationSource> GetTypeConfigurationSource();
    public virtual void UpdateTypeConfigurationSource(ConfigurationSource configurationSource);
    public virtual bool get_IsNullable();
    public virtual void set_IsNullable(bool value);
    public virtual Nullable`1<bool> SetIsNullable(Nullable`1<bool> nullable, ConfigurationSource configurationSource);
    private bool get_DefaultIsNullable();
    public virtual Nullable`1<ConfigurationSource> GetIsNullableConfigurationSource();
    protected virtual FieldInfo OnFieldInfoSet(FieldInfo newFieldInfo, FieldInfo oldFieldInfo);
    public virtual ValueGenerated get_ValueGenerated();
    public virtual void set_ValueGenerated(ValueGenerated value);
    public virtual Nullable`1<ValueGenerated> SetValueGenerated(Nullable`1<ValueGenerated> valueGenerated, ConfigurationSource configurationSource);
    private static ValueGenerated get_DefaultValueGenerated();
    public virtual Nullable`1<ConfigurationSource> GetValueGeneratedConfigurationSource();
    public virtual bool get_IsConcurrencyToken();
    public virtual void set_IsConcurrencyToken(bool value);
    public virtual Nullable`1<bool> SetIsConcurrencyToken(Nullable`1<bool> concurrencyToken, ConfigurationSource configurationSource);
    private static bool get_DefaultIsConcurrencyToken();
    public virtual Nullable`1<ConfigurationSource> GetIsConcurrencyTokenConfigurationSource();
    public virtual Nullable`1<int> SetMaxLength(Nullable`1<int> maxLength, ConfigurationSource configurationSource);
    public virtual Nullable`1<int> GetMaxLength();
    public virtual Nullable`1<ConfigurationSource> GetMaxLengthConfigurationSource();
    public virtual Nullable`1<bool> SetIsUnicode(Nullable`1<bool> unicode, ConfigurationSource configurationSource);
    public virtual Nullable`1<bool> IsUnicode();
    public virtual Nullable`1<ConfigurationSource> GetIsUnicodeConfigurationSource();
    public virtual Nullable`1<int> SetPrecision(Nullable`1<int> precision, ConfigurationSource configurationSource);
    public virtual Nullable`1<int> GetPrecision();
    public virtual Nullable`1<ConfigurationSource> GetPrecisionConfigurationSource();
    public virtual Nullable`1<int> SetScale(Nullable`1<int> scale, ConfigurationSource configurationSource);
    public virtual Nullable`1<int> GetScale();
    public virtual Nullable`1<ConfigurationSource> GetScaleConfigurationSource();
    public virtual Nullable`1<PropertySaveBehavior> SetBeforeSaveBehavior(Nullable`1<PropertySaveBehavior> beforeSaveBehavior, ConfigurationSource configurationSource);
    public virtual PropertySaveBehavior GetBeforeSaveBehavior();
    public virtual Nullable`1<ConfigurationSource> GetBeforeSaveBehaviorConfigurationSource();
    public virtual Nullable`1<PropertySaveBehavior> SetAfterSaveBehavior(Nullable`1<PropertySaveBehavior> afterSaveBehavior, ConfigurationSource configurationSource);
    public virtual PropertySaveBehavior GetAfterSaveBehavior();
    public virtual Nullable`1<ConfigurationSource> GetAfterSaveBehaviorConfigurationSource();
    public virtual string CheckAfterSaveBehavior(PropertySaveBehavior behavior);
    public virtual Func`3<IProperty, IEntityType, ValueGenerator> SetValueGeneratorFactory(Func`3<IProperty, IEntityType, ValueGenerator> factory, ConfigurationSource configurationSource);
    public virtual Type SetValueGeneratorFactory(Type factoryType, ConfigurationSource configurationSource);
    public virtual Func`3<IProperty, IEntityType, ValueGenerator> GetValueGeneratorFactory();
    public virtual Nullable`1<ConfigurationSource> GetValueGeneratorFactoryConfigurationSource();
    public virtual ValueConverter SetValueConverter(ValueConverter converter, ConfigurationSource configurationSource);
    public virtual Type SetValueConverter(Type converterType, ConfigurationSource configurationSource);
    public virtual ValueConverter GetValueConverter();
    public virtual Nullable`1<ConfigurationSource> GetValueConverterConfigurationSource();
    public virtual string CheckValueConverter(ValueConverter converter);
    public virtual Type SetProviderClrType(Type providerClrType, ConfigurationSource configurationSource);
    public virtual Type GetProviderClrType();
    public virtual Nullable`1<ConfigurationSource> GetProviderClrTypeConfigurationSource();
    private Type GetEffectiveProviderClrType();
    public virtual CoreTypeMapping get_TypeMapping();
    public virtual void set_TypeMapping(CoreTypeMapping value);
    public virtual CoreTypeMapping SetTypeMapping(CoreTypeMapping typeMapping, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetTypeMappingConfigurationSource();
    public virtual ValueComparer SetValueComparer(ValueComparer comparer, ConfigurationSource configurationSource);
    public virtual Type SetValueComparer(Type comparerType, ConfigurationSource configurationSource);
    public virtual ValueComparer GetValueComparer();
    private ValueComparer GetValueComparer(HashSet`1<IProperty> checkedProperties);
    public virtual Nullable`1<ConfigurationSource> GetValueComparerConfigurationSource();
    public virtual ValueComparer GetKeyValueComparer();
    public virtual ValueComparer SetProviderValueComparer(ValueComparer comparer, ConfigurationSource configurationSource);
    public virtual Type SetProviderValueComparer(Type comparerType, ConfigurationSource configurationSource);
    public virtual ValueComparer GetProviderValueComparer();
    private ValueComparer GetProviderValueComparer(HashSet`1<IProperty> checkedProperties);
    public virtual Nullable`1<ConfigurationSource> GetProviderValueComparerConfigurationSource();
    public virtual string CheckValueComparer(ValueComparer comparer);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyKey get_PrimaryKey();
    [CompilerGeneratedAttribute]
public virtual void set_PrimaryKey(IReadOnlyKey value);
    [CompilerGeneratedAttribute]
public virtual List`1<Key> get_Keys();
    [CompilerGeneratedAttribute]
public virtual void set_Keys(List`1<Key> value);
    public virtual bool IsKey();
    [NullableContextAttribute("1")]
public virtual IEnumerable`1<Key> GetContainingKeys();
    [CompilerGeneratedAttribute]
public virtual List`1<ForeignKey> get_ForeignKeys();
    [CompilerGeneratedAttribute]
public virtual void set_ForeignKeys(List`1<ForeignKey> value);
    public virtual bool IsForeignKey();
    [NullableContextAttribute("1")]
public virtual IEnumerable`1<ForeignKey> GetContainingForeignKeys();
    [CompilerGeneratedAttribute]
public virtual List`1<Index> get_Indexes();
    [CompilerGeneratedAttribute]
public virtual void set_Indexes(List`1<Index> value);
    public virtual bool IsIndex();
    [NullableContextAttribute("1")]
public virtual IEnumerable`1<Index> GetContainingIndexes();
    protected virtual IConventionAnnotation OnAnnotationSet(string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    [NullableContextAttribute("1")]
public static string Format(IEnumerable`1<string> properties);
    [NullableContextAttribute("1")]
public static bool AreCompatible(IReadOnlyList`1<Property> properties, EntityType entityType);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionPropertyBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IProperty.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override CoreTypeMapping Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.FindTypeMapping();
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.SetTypeMapping(CoreTypeMapping typeMapping);
    [DebuggerStepThroughAttribute]
private sealed virtual override CoreTypeMapping Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.SetTypeMapping(CoreTypeMapping typeMapping, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyForeignKey> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetContainingForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IMutableForeignKey> Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.GetContainingForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IConventionForeignKey> Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.GetContainingForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IForeignKey> Microsoft.EntityFrameworkCore.Metadata.IProperty.GetContainingForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyIndex> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetContainingIndexes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IMutableIndex> Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.GetContainingIndexes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IConventionIndex> Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.GetContainingIndexes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IIndex> Microsoft.EntityFrameworkCore.Metadata.IProperty.GetContainingIndexes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyKey> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetContainingKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IMutableKey> Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.GetContainingKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IConventionKey> Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.GetContainingKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IKey> Microsoft.EntityFrameworkCore.Metadata.IProperty.GetContainingKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyKey Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.FindContainingPrimaryKey();
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<bool> Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.SetIsNullable(Nullable`1<bool> nullable, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<ValueGenerated> Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.SetValueGenerated(Nullable`1<ValueGenerated> valueGenerated, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<bool> Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.SetIsConcurrencyToken(Nullable`1<bool> concurrencyToken, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.SetMaxLength(Nullable`1<int> maxLength);
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<int> Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.SetMaxLength(Nullable`1<int> maxLength, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.SetPrecision(Nullable`1<int> precision);
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<int> Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.SetPrecision(Nullable`1<int> precision, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.SetScale(Nullable`1<int> scale);
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<int> Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.SetScale(Nullable`1<int> scale, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.SetIsUnicode(Nullable`1<bool> unicode);
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<bool> Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.SetIsUnicode(Nullable`1<bool> unicode, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.SetBeforeSaveBehavior(Nullable`1<PropertySaveBehavior> beforeSaveBehavior);
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<PropertySaveBehavior> Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.SetBeforeSaveBehavior(Nullable`1<PropertySaveBehavior> beforeSaveBehavior, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.SetAfterSaveBehavior(Nullable`1<PropertySaveBehavior> afterSaveBehavior);
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<PropertySaveBehavior> Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.SetAfterSaveBehavior(Nullable`1<PropertySaveBehavior> afterSaveBehavior, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.SetValueGeneratorFactory(Func`3<IProperty, IEntityType, ValueGenerator> valueGeneratorFactory);
    [DebuggerStepThroughAttribute]
private sealed virtual override Func`3<IProperty, IEntityType, ValueGenerator> Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.SetValueGeneratorFactory(Func`3<IProperty, IEntityType, ValueGenerator> valueGeneratorFactory, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.SetValueGeneratorFactory(Type valueGeneratorFactory);
    [DebuggerStepThroughAttribute]
private sealed virtual override Type Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.SetValueGeneratorFactory(Type valueGeneratorFactory, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.SetValueConverter(ValueConverter converter);
    [DebuggerStepThroughAttribute]
private sealed virtual override ValueConverter Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.SetValueConverter(ValueConverter converter, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.SetValueConverter(Type converterType);
    [DebuggerStepThroughAttribute]
private sealed virtual override Type Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.SetValueConverter(Type converterType, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.SetProviderClrType(Type providerClrType);
    [DebuggerStepThroughAttribute]
private sealed virtual override Type Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.SetProviderClrType(Type providerClrType, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.SetValueComparer(ValueComparer comparer);
    [DebuggerStepThroughAttribute]
private sealed virtual override ValueComparer Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.SetValueComparer(ValueComparer comparer, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.SetValueComparer(Type comparerType);
    [DebuggerStepThroughAttribute]
private sealed virtual override Type Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.SetValueComparer(Type comparerType, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override ValueComparer Microsoft.EntityFrameworkCore.Metadata.IProperty.GetValueComparer();
    private sealed virtual override ValueComparer Microsoft.EntityFrameworkCore.Metadata.IProperty.GetKeyValueComparer();
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.SetProviderValueComparer(ValueComparer comparer);
    [DebuggerStepThroughAttribute]
private sealed virtual override ValueComparer Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.SetProviderValueComparer(ValueComparer comparer, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableProperty.SetProviderValueComparer(Type comparerType);
    [DebuggerStepThroughAttribute]
private sealed virtual override Type Microsoft.EntityFrameworkCore.Metadata.IConventionProperty.SetProviderValueComparer(Type comparerType, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override ValueComparer Microsoft.EntityFrameworkCore.Metadata.IProperty.GetProviderValueComparer();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__126_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__126_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessors : object {
    [CompilerGeneratedAttribute]
private Delegate <CurrentValueGetter>k__BackingField;
    [CompilerGeneratedAttribute]
private Delegate <PreStoreGeneratedCurrentValueGetter>k__BackingField;
    [CompilerGeneratedAttribute]
private Delegate <OriginalValueGetter>k__BackingField;
    [CompilerGeneratedAttribute]
private Delegate <RelationshipSnapshotGetter>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<ValueBuffer, object> <ValueBufferGetter>k__BackingField;
    public Delegate CurrentValueGetter { get; }
    public Delegate PreStoreGeneratedCurrentValueGetter { get; }
    [NullableAttribute("2")]
public Delegate OriginalValueGetter { get; }
    public Delegate RelationshipSnapshotGetter { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<ValueBuffer, object> ValueBufferGetter { get; }
    public PropertyAccessors(Delegate currentValueGetter, Delegate preStoreGeneratedCurrentValueGetter, Delegate originalValueGetter, Delegate relationshipSnapshotGetter, Func`2<ValueBuffer, object> valueBufferGetter);
    [CompilerGeneratedAttribute]
public Delegate get_CurrentValueGetter();
    [CompilerGeneratedAttribute]
public Delegate get_PreStoreGeneratedCurrentValueGetter();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Delegate get_OriginalValueGetter();
    [CompilerGeneratedAttribute]
public Delegate get_RelationshipSnapshotGetter();
    [CompilerGeneratedAttribute]
public Func`2<ValueBuffer, object> get_ValueBufferGetter();
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyAccessorsFactory : object {
    private static MethodInfo GenericCreate;
    private static PropertyAccessorsFactory();
    [NullableContextAttribute("1")]
public virtual PropertyAccessors Create(IPropertyBase propertyBase);
    [UsedImplicitlyAttribute]
private static PropertyAccessors CreateGeneric(IPropertyBase propertyBase);
    private static Func`2<IUpdateEntry, TProperty> CreateCurrentValueGetter(IPropertyBase propertyBase, bool useStoreGeneratedValues);
    private static Func`2<IUpdateEntry, TProperty> CreateOriginalValueGetter(IProperty property);
    private static Func`2<IUpdateEntry, TProperty> CreateRelationshipSnapshotGetter(IPropertyBase propertyBase);
    private static Func`2<ValueBuffer, object> CreateValueBufferGetter(IProperty property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBase : ConventionAnnotatable {
    private FieldInfo _fieldInfo;
    private ConfigurationSource _configurationSource;
    private Nullable`1<ConfigurationSource> _fieldInfoConfigurationSource;
    private IClrPropertyGetter _getter;
    private IClrPropertySetter _setter;
    private IClrPropertySetter _materializationSetter;
    private PropertyAccessors _accessors;
    private PropertyIndexes _indexes;
    private IComparer`1<IUpdateEntry> _currentValueComparer;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyInfo <PropertyInfo>k__BackingField;
    private static MethodInfo ContainsKeyMethod;
    public string Name { get; }
    public bool IsReadOnly { get; }
    public TypeBase DeclaringType { get; }
    [NullableAttribute("2")]
public PropertyInfo PropertyInfo { get; }
    [NullableAttribute("2")]
public FieldInfo FieldInfo { get; public set; }
    public PropertyIndexes PropertyIndexes { get; public set; }
    [DynamicallyAccessedMembersAttribute("9831")]
public Type ClrType { get; }
    public IClrPropertyGetter Getter { get; }
    public IClrPropertySetter Setter { get; }
    public IClrPropertySetter MaterializationSetter { get; }
    public PropertyAccessors Accessors { get; }
    public IComparer`1<IUpdateEntry> CurrentValueComparer { get; }
    private IReadOnlyTypeBase Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase.DeclaringType { get; }
    private IMutableTypeBase Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase.DeclaringType { get; }
    private IConventionTypeBase Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase.DeclaringType { get; }
    [NullableContextAttribute("2")]
protected PropertyBase(string name, PropertyInfo propertyInfo, FieldInfo fieldInfo, ConfigurationSource configurationSource);
    private static PropertyBase();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual string get_Name();
    public virtual bool get_IsReadOnly();
    public abstract virtual TypeBase get_DeclaringType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual PropertyInfo get_PropertyInfo();
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public virtual FieldInfo get_FieldInfo();
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public virtual void set_FieldInfo(FieldInfo value);
    public virtual ConfigurationSource GetConfigurationSource();
    public virtual void UpdateConfigurationSource(ConfigurationSource configurationSource);
    public virtual void SetConfigurationSource(ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual FieldInfo SetField(string fieldName, ConfigurationSource configurationSource);
    public static FieldInfo GetFieldInfo(string fieldName, TypeBase type, string propertyName, bool shouldThrow);
    [NullableContextAttribute("2")]
public virtual FieldInfo SetFieldInfo(FieldInfo fieldInfo, ConfigurationSource configurationSource);
    public virtual Nullable`1<PropertyAccessMode> SetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, ConfigurationSource configurationSource);
    public virtual PropertyAccessMode GetPropertyAccessMode();
    public virtual Nullable`1<ConfigurationSource> GetPropertyAccessModeConfigurationSource();
    [NullableContextAttribute("2")]
public static bool IsCompatible(FieldInfo fieldInfo, Type propertyType, Type entityType, string propertyName, bool shouldThrow);
    public virtual PropertyIndexes get_PropertyIndexes();
    public virtual void set_PropertyIndexes(PropertyIndexes value);
    [NullableContextAttribute("2")]
protected virtual FieldInfo OnFieldInfoSet(FieldInfo newFieldInfo, FieldInfo oldFieldInfo);
    public virtual Nullable`1<ConfigurationSource> GetFieldInfoConfigurationSource();
    private void UpdateFieldInfoConfigurationSource(ConfigurationSource configurationSource);
    public abstract virtual Type get_ClrType();
    public virtual IClrPropertyGetter get_Getter();
    public virtual IClrPropertySetter get_Setter();
    public virtual IClrPropertySetter get_MaterializationSetter();
    public virtual PropertyAccessors get_Accessors();
    public virtual IComparer`1<IUpdateEntry> get_CurrentValueComparer();
    public static Expression CreateMemberAccess(IPropertyBase property, Expression instanceExpression, MemberInfo memberInfo);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyTypeBase Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase.get_DeclaringType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableTypeBase Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase.get_DeclaringType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionTypeBase Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase.get_DeclaringType();
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase.SetField(string fieldName);
    [DebuggerStepThroughAttribute]
private sealed virtual override FieldInfo Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase.SetField(string fieldName, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override FieldInfo Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase.SetFieldInfo(FieldInfo fieldInfo, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutablePropertyBase.SetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode);
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<PropertyAccessMode> Microsoft.EntityFrameworkCore.Metadata.IConventionPropertyBase.SetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IClrPropertyGetter Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.GetGetter();
    [DebuggerStepThroughAttribute]
private sealed virtual override IComparer`1<IUpdateEntry> Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.GetCurrentValueComparer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyBaseExtensions : object {
    [ExtensionAttribute]
public static int GetShadowIndex(IPropertyBase propertyBase);
    [ExtensionAttribute]
public static int GetStoreGeneratedIndex(IPropertyBase propertyBase);
    [ExtensionAttribute]
public static int GetRelationshipIndex(IPropertyBase propertyBase);
    [ExtensionAttribute]
public static int GetOriginalValueIndex(IPropertyBase propertyBase);
    [ExtensionAttribute]
public static PropertyIndexes GetPropertyIndexes(IPropertyBase propertyBase);
    [ExtensionAttribute]
public static PropertyAccessors GetPropertyAccessors(IPropertyBase propertyBase);
    [ExtensionAttribute]
public static bool IsShadowProperty(PropertyBase propertyBase);
    [ExtensionAttribute]
public static bool IsIndexerProperty(PropertyBase propertyBase);
    [ExtensionAttribute]
public static MemberInfo GetIdentifyingMemberInfo(IReadOnlyPropertyBase propertyBase);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool TryGetMemberInfo(IPropertyBase propertyBase, bool forMaterialization, bool forSet, MemberInfo& memberInfo, String& errorMessage);
    private static string GetNoFieldErrorMessage(IPropertyBase propertyBase);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyConfiguration : AnnotatableBase {
    private ValueConverter _valueConverter;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [NullableAttribute("1")]
public Type ClrType { get; }
    [NullableContextAttribute("1")]
public PropertyConfiguration(Type clrType);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual Type get_ClrType();
    [NullableContextAttribute("1")]
public virtual void Apply(IMutableProperty property);
    public virtual Nullable`1<int> GetMaxLength();
    public virtual void SetMaxLength(Nullable`1<int> maxLength);
    public virtual Nullable`1<bool> IsUnicode();
    public virtual void SetIsUnicode(Nullable`1<bool> unicode);
    public virtual Nullable`1<int> GetPrecision();
    public virtual void SetPrecision(Nullable`1<int> precision);
    public virtual Nullable`1<int> GetScale();
    public virtual void SetScale(Nullable`1<int> scale);
    public virtual Type GetProviderClrType();
    public virtual void SetProviderClrType(Type providerClrType);
    public virtual ValueConverter GetValueConverter();
    public virtual void SetValueConverter(Type converterType);
    public virtual void SetValueComparer(Type comparerType);
    public virtual void SetProviderValueComparer(Type comparerType);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyCounts : object {
    [CompilerGeneratedAttribute]
private int <PropertyCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NavigationCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OriginalValueCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ShadowCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RelationshipCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StoreGeneratedCount>k__BackingField;
    public int PropertyCount { get; }
    public int NavigationCount { get; }
    public int OriginalValueCount { get; }
    public int ShadowCount { get; }
    public int RelationshipCount { get; }
    public int StoreGeneratedCount { get; }
    public PropertyCounts(int propertyCount, int navigationCount, int originalValueCount, int shadowCount, int relationshipCount, int storeGeneratedCount);
    [CompilerGeneratedAttribute]
public virtual int get_PropertyCount();
    [CompilerGeneratedAttribute]
public virtual int get_NavigationCount();
    [CompilerGeneratedAttribute]
public virtual int get_OriginalValueCount();
    [CompilerGeneratedAttribute]
public virtual int get_ShadowCount();
    [CompilerGeneratedAttribute]
public virtual int get_RelationshipCount();
    [CompilerGeneratedAttribute]
public virtual int get_StoreGeneratedCount();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyExtensions : object {
    [ExtensionAttribute]
public static bool ForAdd(ValueGenerated valueGenerated);
    [ExtensionAttribute]
public static bool ForUpdate(ValueGenerated valueGenerated);
    [ExtensionAttribute]
public static IReadOnlyProperty FindFirstDifferentPrincipal(IReadOnlyProperty property);
    [ExtensionAttribute]
public static IProperty FindGenerationProperty(IProperty property);
    [ExtensionAttribute]
public static bool RequiresValueGenerator(IReadOnlyProperty property);
    [ExtensionAttribute]
public static bool IsForeignKeyToSelf(IReadOnlyProperty property);
    [ExtensionAttribute]
public static bool IsKey(Property property);
    [ExtensionAttribute]
public static bool MayBeStoreGenerated(IProperty property);
    [ExtensionAttribute]
public static bool RequiresOriginalValue(IReadOnlyProperty property);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyIndexes : object {
    [CompilerGeneratedAttribute]
private int <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OriginalValueIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ShadowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RelationshipIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StoreGenerationIndex>k__BackingField;
    public int Index { get; }
    public int OriginalValueIndex { get; }
    public int ShadowIndex { get; }
    public int RelationshipIndex { get; }
    public int StoreGenerationIndex { get; }
    public PropertyIndexes(int index, int originalValueIndex, int shadowIndex, int relationshipIndex, int storeGenerationIndex);
    [CompilerGeneratedAttribute]
public virtual int get_Index();
    [CompilerGeneratedAttribute]
public virtual int get_OriginalValueIndex();
    [CompilerGeneratedAttribute]
public virtual int get_ShadowIndex();
    [CompilerGeneratedAttribute]
public virtual int get_RelationshipIndex();
    [CompilerGeneratedAttribute]
public virtual int get_StoreGenerationIndex();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyListComparer : object {
    public static PropertyListComparer Instance;
    private static PropertyListComparer();
    public sealed virtual int Compare(IReadOnlyList`1<IReadOnlyProperty> x, IReadOnlyList`1<IReadOnlyProperty> y);
    public sealed virtual bool Equals(IReadOnlyList`1<IReadOnlyProperty> x, IReadOnlyList`1<IReadOnlyProperty> y);
    public sealed virtual int GetHashCode(IReadOnlyList`1<IReadOnlyProperty> obj);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyNameComparer : object {
    private IReadOnlyEntityType _entityType;
    [NullableContextAttribute("1")]
public PropertyNameComparer(IReadOnlyEntityType entityType);
    [NullableContextAttribute("2")]
public sealed virtual int Compare(string x, string y);
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.PropertyParameterBindingFactory : object {
    [NullableContextAttribute("1")]
public virtual ParameterBinding FindParameter(IEntityType entityType, Type parameterType, string parameterName);
    private static IList`1<string> GetCandidatePropertyNames(string parameterName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.Reference`1 : object {
    private T _object;
    private IReferenceRoot`1<T> _root;
    private int _referenceCount;
    public T Object { get; public set; }
    public Reference`1(T object);
    public Reference`1(T object, IReferenceRoot`1<T> root);
    public virtual T get_Object();
    public virtual void set_Object(T value);
    public virtual void Dispose();
    public virtual void IncreaseReferenceCount();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.RelationshipSnapshot : object {
    [CompilerGeneratedAttribute]
private InternalForeignKeyBuilder <Relationship>k__BackingField;
    [CompilerGeneratedAttribute]
private Snapshot <OwnedEntityTypeSnapshot>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ValueTuple`2<SkipNavigation, ConfigurationSource>> <ReferencingSkipNavigations>k__BackingField;
    public InternalForeignKeyBuilder Relationship { get; }
    [NullableAttribute("2")]
public Snapshot OwnedEntityTypeSnapshot { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ValueTuple`2<SkipNavigation, ConfigurationSource>> ReferencingSkipNavigations { get; }
    public RelationshipSnapshot(InternalForeignKeyBuilder relationship, Snapshot ownedEntityTypeSnapshot, List`1<ValueTuple`2<SkipNavigation, ConfigurationSource>> referencingSkipNavigations);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual InternalForeignKeyBuilder get_Relationship();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual Snapshot get_OwnedEntityTypeSnapshot();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual List`1<ValueTuple`2<SkipNavigation, ConfigurationSource>> get_ReferencingSkipNavigations();
    [NullableContextAttribute("2")]
public virtual InternalForeignKeyBuilder Attach(InternalEntityTypeBuilder entityTypeBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.ServiceProperty : PropertyBase {
    private ServiceParameterBinding _parameterBinding;
    private InternalServicePropertyBuilder _builder;
    private Nullable`1<ConfigurationSource> _parameterBindingConfigurationSource;
    [CompilerGeneratedAttribute]
private EntityType <DeclaringEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    public EntityType DeclaringEntityType { get; }
    public TypeBase DeclaringType { get; }
    [DynamicallyAccessedMembersAttribute("9831")]
public Type ClrType { get; }
    public InternalServicePropertyBuilder Builder { get; }
    public bool IsInModel { get; }
    [NullableAttribute("2")]
public ServiceParameterBinding ParameterBinding { get; public set; }
    public DebugView DebugView { get; }
    private IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyServiceProperty.DeclaringEntityType { get; }
    private IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty.DeclaringEntityType { get; }
    private IConventionServicePropertyBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty.Builder { get; }
    private IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.Builder { get; }
    private IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty.DeclaringEntityType { get; }
    private IEntityType Microsoft.EntityFrameworkCore.Metadata.IServiceProperty.DeclaringEntityType { get; }
    public ServiceProperty(string name, PropertyInfo propertyInfo, FieldInfo fieldInfo, EntityType declaringEntityType, ConfigurationSource configurationSource);
    [CompilerGeneratedAttribute]
public virtual EntityType get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
public virtual TypeBase get_DeclaringType();
    [CompilerGeneratedAttribute]
public virtual Type get_ClrType();
    [DebuggerStepThroughAttribute]
public virtual InternalServicePropertyBuilder get_Builder();
    public virtual bool get_IsInModel();
    public virtual void SetRemovedFromModel();
    [NullableContextAttribute("2")]
public virtual ServiceParameterBinding get_ParameterBinding();
    [NullableContextAttribute("2")]
public virtual void set_ParameterBinding(ServiceParameterBinding value);
    [NullableContextAttribute("2")]
public virtual ServiceParameterBinding SetParameterBinding(ServiceParameterBinding parameterBinding, ConfigurationSource configurationSource);
    private sealed virtual override ServiceParameterBinding Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty.SetParameterBinding(ServiceParameterBinding parameterBinding, bool fromDataAnnotation);
    public virtual Nullable`1<ConfigurationSource> GetParameterBindingConfigurationSource();
    private void UpdateParameterBindingConfigurationSource(ConfigurationSource configurationSource);
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyServiceProperty.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableServiceProperty.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionServicePropertyBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty.get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionServiceProperty.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IServiceProperty.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override PropertyAccessMode Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase.GetPropertyAccessMode();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__26_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__26_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigation : PropertyBase {
    private Nullable`1<ConfigurationSource> _foreignKeyConfigurationSource;
    private Nullable`1<ConfigurationSource> _inverseConfigurationSource;
    private InternalSkipNavigationBuilder _builder;
    private IClrCollectionAccessor _collectionAccessor;
    private bool _collectionAccessorInitialized;
    private ICollectionLoader _manyToManyLoader;
    [CompilerGeneratedAttribute]
private EntityType <DeclaringEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private EntityType <TargetEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private ForeignKey <ForeignKey>k__BackingField;
    [CompilerGeneratedAttribute]
private SkipNavigation <Inverse>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsCollection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsOnDependent>k__BackingField;
    public Type ClrType { get; }
    public InternalSkipNavigationBuilder Builder { get; }
    public bool IsInModel { get; }
    public EntityType DeclaringEntityType { get; }
    public EntityType TargetEntityType { get; }
    public TypeBase DeclaringType { get; }
    [NullableAttribute("2")]
public EntityType JoinEntityType { get; }
    [NullableAttribute("2")]
public ForeignKey ForeignKey { get; private set; }
    [NullableAttribute("2")]
public SkipNavigation Inverse { get; private set; }
    public bool IsCollection { get; }
    public bool IsOnDependent { get; }
    [NullableAttribute("2")]
public IClrCollectionAccessor CollectionAccessor { get; }
    public ICollectionLoader ManyToManyLoader { get; }
    public DebugView DebugView { get; }
    private IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation.Builder { get; }
    private IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.Builder { get; }
    private IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigationBase.DeclaringEntityType { get; }
    private IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigationBase.TargetEntityType { get; }
    private IReadOnlyForeignKey Microsoft.EntityFrameworkCore.Metadata.IReadOnlySkipNavigation.ForeignKey { get; }
    private IReadOnlySkipNavigation Microsoft.EntityFrameworkCore.Metadata.IReadOnlySkipNavigation.Inverse { get; }
    public SkipNavigation(string name, PropertyInfo propertyInfo, FieldInfo fieldInfo, EntityType declaringEntityType, EntityType targetEntityType, bool collection, bool onDependent, ConfigurationSource configurationSource);
    private void ProcessForeignKey(ForeignKey foreignKey);
    public virtual Type get_ClrType();
    [DebuggerStepThroughAttribute]
public virtual InternalSkipNavigationBuilder get_Builder();
    public virtual bool get_IsInModel();
    public virtual void SetRemovedFromModel();
    [CompilerGeneratedAttribute]
public virtual EntityType get_DeclaringEntityType();
    [CompilerGeneratedAttribute]
public virtual EntityType get_TargetEntityType();
    public virtual TypeBase get_DeclaringType();
    [NullableContextAttribute("2")]
public virtual EntityType get_JoinEntityType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual ForeignKey get_ForeignKey();
    [CompilerGeneratedAttribute]
private void set_ForeignKey(ForeignKey value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual SkipNavigation get_Inverse();
    [CompilerGeneratedAttribute]
private void set_Inverse(SkipNavigation value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsCollection();
    [CompilerGeneratedAttribute]
public virtual bool get_IsOnDependent();
    [NullableContextAttribute("2")]
public virtual ForeignKey SetForeignKey(ForeignKey foreignKey, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetForeignKeyConfigurationSource();
    public virtual void UpdateForeignKeyConfigurationSource(ConfigurationSource configurationSource);
    [NullableContextAttribute("2")]
public virtual SkipNavigation SetInverse(SkipNavigation inverse, ConfigurationSource configurationSource);
    public virtual Nullable`1<ConfigurationSource> GetInverseConfigurationSource();
    public virtual void UpdateInverseConfigurationSource(ConfigurationSource configurationSource);
    public virtual PropertyAccessMode GetPropertyAccessMode();
    [NullableContextAttribute("2")]
protected virtual IConventionAnnotation OnAnnotationSet(string name, IConventionAnnotation annotation, IConventionAnnotation oldAnnotation);
    [NullableContextAttribute("2")]
public virtual IClrCollectionAccessor get_CollectionAccessor();
    public virtual ICollectionLoader get_ManyToManyLoader();
    [DebuggerStepThroughAttribute]
public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionSkipNavigationBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation.get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionAnnotatableBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotatable.get_Builder();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigationBase.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigationBase.get_TargetEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyForeignKey Microsoft.EntityFrameworkCore.Metadata.IReadOnlySkipNavigation.get_ForeignKey();
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.IMutableSkipNavigation.SetForeignKey(IMutableForeignKey foreignKey);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionForeignKey Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation.SetForeignKey(IConventionForeignKey foreignKey, bool fromDataAnnotation);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlySkipNavigation Microsoft.EntityFrameworkCore.Metadata.IReadOnlySkipNavigation.get_Inverse();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableSkipNavigation Microsoft.EntityFrameworkCore.Metadata.IMutableSkipNavigation.SetInverse(IMutableSkipNavigation inverse);
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionSkipNavigation Microsoft.EntityFrameworkCore.Metadata.IConventionSkipNavigation.SetInverse(IConventionSkipNavigation inverse, bool fromDataAnnotation);
    private sealed virtual override IClrCollectionAccessor Microsoft.EntityFrameworkCore.Metadata.INavigationBase.GetCollectionAccessor();
    private sealed virtual override ICollectionLoader Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeSkipNavigation.GetManyToManyLoader();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__53_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__53_1();
}
public class Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigationComparer : object {
    [NullableAttribute("1")]
public static SkipNavigationComparer Instance;
    private static SkipNavigationComparer();
    [NullableContextAttribute("2")]
public sealed virtual int Compare(IReadOnlySkipNavigation x, IReadOnlySkipNavigation y);
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.SkipNavigationExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static MemberIdentity CreateMemberIdentity(IReadOnlySkipNavigation navigation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.Trigger : ConventionAnnotatable {
    private InternalTriggerBuilder _builder;
    private ConfigurationSource _configurationSource;
    [CompilerGeneratedAttribute]
private EntityType <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModelName>k__BackingField;
    public InternalTriggerBuilder Builder { get; }
    public bool IsInModel { get; }
    public EntityType EntityType { get; }
    public string ModelName { get; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTrigger.EntityType { get; }
    private IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger.EntityType { get; }
    private IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableTrigger.EntityType { get; }
    private IEntityType Microsoft.EntityFrameworkCore.Metadata.ITrigger.EntityType { get; }
    private IConventionTriggerBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger.Builder { get; }
    public Trigger(string modelName, EntityType entityType, ConfigurationSource configurationSource);
    [DebuggerStepThroughAttribute]
public virtual InternalTriggerBuilder get_Builder();
    public virtual bool get_IsInModel();
    public virtual void SetRemovedFromModel();
    [CompilerGeneratedAttribute]
public virtual EntityType get_EntityType();
    [CompilerGeneratedAttribute]
public virtual string get_ModelName();
    public virtual ConfigurationSource GetConfigurationSource();
    public virtual void UpdateConfigurationSource(ConfigurationSource configurationSource);
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTrigger.get_EntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionEntityType Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger.get_EntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableEntityType Microsoft.EntityFrameworkCore.Metadata.IMutableTrigger.get_EntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.ITrigger.get_EntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionTriggerBuilder Microsoft.EntityFrameworkCore.Metadata.IConventionTrigger.get_Builder();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__18_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__18_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBase : ConventionAnnotatable {
    private ConfigurationSource _configurationSource;
    private Dictionary`2<string, ConfigurationSource> _ignoredMembers;
    private bool _indexerPropertyInitialized;
    private PropertyInfo _indexerPropertyInfo;
    private SortedDictionary`2<string, PropertyInfo> _runtimeProperties;
    private SortedDictionary`2<string, FieldInfo> _runtimeFields;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private Model <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasSharedClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPropertyBag>k__BackingField;
    [DynamicallyAccessedMembersAttribute("9831")]
public Type ClrType { get; }
    public Model Model { get; }
    public bool IsReadOnly { get; }
    public string Name { get; }
    public bool HasSharedClrType { get; }
    public bool IsPropertyBag { get; }
    private IReadOnlyModel Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase.Model { get; }
    private IMutableModel Microsoft.EntityFrameworkCore.Metadata.IMutableTypeBase.Model { get; }
    private IConventionModel Microsoft.EntityFrameworkCore.Metadata.IConventionTypeBase.Model { get; }
    private IModel Microsoft.EntityFrameworkCore.Metadata.ITypeBase.Model { get; }
    [DynamicallyAccessedMembersAttribute("9831")]
private Type Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase.ClrType { get; }
    protected TypeBase(Type type, Model model, ConfigurationSource configurationSource);
    protected TypeBase(string name, Type type, Model model, ConfigurationSource configurationSource);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual Type get_ClrType();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual Model get_Model();
    public virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual bool get_HasSharedClrType();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual bool get_IsPropertyBag();
    [DebuggerStepThroughAttribute]
public virtual ConfigurationSource GetConfigurationSource();
    public virtual void UpdateConfigurationSource(ConfigurationSource configurationSource);
    public virtual IReadOnlyDictionary`2<string, PropertyInfo> GetRuntimeProperties();
    public virtual IReadOnlyDictionary`2<string, FieldInfo> GetRuntimeFields();
    [NullableContextAttribute("2")]
public virtual PropertyInfo FindIndexerPropertyInfo();
    public virtual PropertyAccessMode GetPropertyAccessMode();
    public virtual Nullable`1<PropertyAccessMode> SetPropertyAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, ConfigurationSource configurationSource);
    public virtual PropertyAccessMode GetNavigationAccessMode();
    public virtual Nullable`1<PropertyAccessMode> SetNavigationAccessMode(Nullable`1<PropertyAccessMode> propertyAccessMode, ConfigurationSource configurationSource);
    public virtual string AddIgnored(string name, ConfigurationSource configurationSource);
    public abstract virtual string OnTypeMemberIgnored(string name);
    public virtual IEnumerable`1<string> GetIgnoredMembers();
    public virtual Nullable`1<ConfigurationSource> FindDeclaredIgnoredConfigurationSource(string name);
    public virtual Nullable`1<ConfigurationSource> FindIgnoredConfigurationSource(string name);
    public virtual bool IsIgnored(string name);
    public virtual string RemoveIgnored(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyModel Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override IMutableModel Microsoft.EntityFrameworkCore.Metadata.IMutableTypeBase.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override IConventionModel Microsoft.EntityFrameworkCore.Metadata.IConventionTypeBase.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override IModel Microsoft.EntityFrameworkCore.Metadata.ITypeBase.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override Type Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase.get_ClrType();
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IMutableTypeBase.AddIgnored(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IConventionTypeBase.AddIgnored(string name, bool fromDataAnnotation);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.TypeBaseExtensions : object {
    [ExtensionAttribute]
public static IReadOnlyDictionary`2<string, PropertyInfo> GetRuntimeProperties(IReadOnlyTypeBase type);
    [ExtensionAttribute]
public static IReadOnlyDictionary`2<string, FieldInfo> GetRuntimeFields(IReadOnlyTypeBase type);
}
public enum Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationType : Enum {
    public int value__;
    public static TypeConfigurationType Ignored;
    public static TypeConfigurationType EntityType;
    public static TypeConfigurationType SharedTypeEntityType;
    public static TypeConfigurationType OwnedEntityType;
    public static TypeConfigurationType Property;
    public static TypeConfigurationType ServiceProperty;
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Metadata.Internal.TypeConfigurationTypeExtensions : object {
    [ExtensionAttribute]
public static Nullable`1<bool> IsEntityType(Nullable`1<TypeConfigurationType> configurationType);
    [ExtensionAttribute]
public static bool IsEntityType(TypeConfigurationType configurationType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{DebuggerDisplay(),nq}")]
public class Microsoft.EntityFrameworkCore.Metadata.Internal.TypeIdentity : ValueType {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNamed>k__BackingField;
    public string Name { get; }
    [NullableAttribute("2")]
[DynamicallyAccessedMembersAttribute("9831")]
public Type Type { get; }
    public bool IsNamed { get; }
    [DebuggerStepThroughAttribute]
public TypeIdentity(string name);
    [DebuggerStepThroughAttribute]
public TypeIdentity(string name, Type type);
    [DebuggerStepThroughAttribute]
public TypeIdentity(Type type, Model model);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public bool get_IsNamed();
    private string DebuggerDisplay();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(TypeIdentity other);
    public virtual int GetHashCode();
    public static bool op_Equality(TypeIdentity left, TypeIdentity right);
    public static bool op_Inequality(TypeIdentity left, TypeIdentity right);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IParameterBindingFactories {
    public abstract virtual IParameterBindingFactory FindFactory(Type parameterType, string parameterName);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IParameterBindingFactory {
    public abstract virtual bool CanBind(Type parameterType, string parameterName);
    public abstract virtual ParameterBinding Bind(IReadOnlyEntityType entityType, Type parameterType, string parameterName);
    public abstract virtual ParameterBinding Bind(IMutableEntityType entityType, Type parameterType, string parameterName);
    public abstract virtual ParameterBinding Bind(IConventionEntityType entityType, Type parameterType, string parameterName);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IProperty {
    internal static DynamicallyAccessedMemberTypes DynamicallyAccessedMemberTypes;
    public IEntityType DeclaringEntityType { get; }
    public abstract virtual IEntityType get_DeclaringEntityType();
    public virtual IEqualityComparer`1<TProperty> CreateKeyEqualityComparer();
    [NullableContextAttribute("2")]
public virtual IProperty FindFirstPrincipal();
    public virtual IReadOnlyList`1<IProperty> GetPrincipals();
    public abstract virtual IEnumerable`1<IForeignKey> GetContainingForeignKeys();
    public abstract virtual IEnumerable`1<IIndex> GetContainingIndexes();
    [NullableContextAttribute("2")]
public virtual IKey FindContainingPrimaryKey();
    public abstract virtual IEnumerable`1<IKey> GetContainingKeys();
    public abstract virtual ValueComparer GetValueComparer();
    public abstract virtual ValueComparer GetKeyValueComparer();
    public abstract virtual ValueComparer GetProviderValueComparer();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IPropertyBase {
    public ITypeBase DeclaringType { get; }
    [DebuggerStepThroughAttribute]
public virtual ITypeBase get_DeclaringType();
    public abstract virtual IClrPropertyGetter GetGetter();
    public abstract virtual IComparer`1<IUpdateEntry> GetCurrentValueComparer();
    public virtual MemberInfo GetMemberInfo(bool forMaterialization, bool forSet);
    public virtual int GetIndex();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IPropertyParameterBindingFactory {
    public abstract virtual ParameterBinding FindParameter(IEntityType entityType, Type parameterType, string parameterName);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType {
    [NullableAttribute("2")]
public IReadOnlyEntityType BaseType { get; }
    [NullableContextAttribute("2")]
public abstract virtual IReadOnlyEntityType get_BaseType();
    public abstract virtual ChangeTrackingStrategy GetChangeTrackingStrategy();
    public abstract virtual IEnumerable`1<IDictionary`2<string, object>> GetSeedData(bool providerValues);
    [NullableContextAttribute("2")]
public abstract virtual LambdaExpression GetQueryFilter();
    [NullableContextAttribute("2")]
public virtual IReadOnlyProperty FindDiscriminatorProperty();
    [NullableContextAttribute("2")]
public abstract virtual string GetDiscriminatorPropertyName();
    public virtual bool GetIsDiscriminatorMappingComplete();
    [NullableContextAttribute("2")]
public virtual object GetDiscriminatorValue();
    public virtual string GetDefaultDiscriminatorValue();
    public virtual IEnumerable`1<IReadOnlyEntityType> GetAllBaseTypes();
    public virtual IEnumerable`1<IReadOnlyEntityType> GetAllBaseTypesAscending();
    public virtual IEnumerable`1<IReadOnlyEntityType> GetAllBaseTypesInclusive();
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType/<GetAllBaseTypesInclusiveAscending>d__13")]
public virtual IEnumerable`1<IReadOnlyEntityType> GetAllBaseTypesInclusiveAscending();
    public abstract virtual IEnumerable`1<IReadOnlyEntityType> GetDerivedTypes();
    public virtual IEnumerable`1<IReadOnlyEntityType> GetDerivedTypesInclusive();
    public abstract virtual IEnumerable`1<IReadOnlyEntityType> GetDirectlyDerivedTypes();
    public virtual IEnumerable`1<IReadOnlyEntityType> GetConcreteDerivedTypesInclusive();
    public virtual IReadOnlyEntityType GetRootType();
    public virtual bool IsAssignableFrom(IReadOnlyEntityType derivedType);
    public virtual bool IsStrictlyDerivedFrom(IReadOnlyEntityType baseType);
    public virtual IReadOnlyEntityType FindClosestCommonParent(IReadOnlyEntityType otherEntityType);
    public virtual IReadOnlyEntityType LeastDerivedType(IReadOnlyEntityType otherEntityType);
    [NullableContextAttribute("2")]
public abstract virtual IReadOnlyKey FindPrimaryKey();
    public abstract virtual IReadOnlyKey FindKey(IReadOnlyList`1<IReadOnlyProperty> properties);
    public virtual IReadOnlyKey FindKey(IReadOnlyProperty property);
    public abstract virtual IEnumerable`1<IReadOnlyKey> GetKeys();
    public abstract virtual IEnumerable`1<IReadOnlyKey> GetDeclaredKeys();
    public abstract virtual IReadOnlyForeignKey FindForeignKey(IReadOnlyList`1<IReadOnlyProperty> properties, IReadOnlyKey principalKey, IReadOnlyEntityType principalEntityType);
    public virtual IEnumerable`1<IReadOnlyForeignKey> FindForeignKeys(IReadOnlyProperty property);
    public abstract virtual IEnumerable`1<IReadOnlyForeignKey> FindForeignKeys(IReadOnlyList`1<IReadOnlyProperty> properties);
    public virtual IReadOnlyForeignKey FindForeignKey(IReadOnlyProperty property, IReadOnlyKey principalKey, IReadOnlyEntityType principalEntityType);
    public abstract virtual IEnumerable`1<IReadOnlyForeignKey> FindDeclaredForeignKeys(IReadOnlyList`1<IReadOnlyProperty> properties);
    public abstract virtual IEnumerable`1<IReadOnlyForeignKey> GetDeclaredForeignKeys();
    public abstract virtual IEnumerable`1<IReadOnlyForeignKey> GetDerivedForeignKeys();
    public abstract virtual IEnumerable`1<IReadOnlyForeignKey> GetForeignKeys();
    public abstract virtual IEnumerable`1<IReadOnlyForeignKey> GetReferencingForeignKeys();
    public abstract virtual IEnumerable`1<IReadOnlyForeignKey> GetDeclaredReferencingForeignKeys();
    [NullableContextAttribute("2")]
public virtual IReadOnlyForeignKey FindOwnership();
    [DebuggerStepThroughAttribute]
public virtual bool IsOwned();
    public virtual bool IsInOwnershipPath(IReadOnlyEntityType targetType);
    public virtual IReadOnlyNavigation FindNavigation(MemberInfo memberInfo);
    public virtual IReadOnlyNavigation FindNavigation(string name);
    public abstract virtual IReadOnlyNavigation FindDeclaredNavigation(string name);
    public abstract virtual IEnumerable`1<IReadOnlyNavigation> GetDeclaredNavigations();
    public abstract virtual IEnumerable`1<IReadOnlyNavigation> GetDerivedNavigations();
    public abstract virtual IEnumerable`1<IReadOnlyNavigation> GetNavigations();
    public virtual IReadOnlySkipNavigation FindSkipNavigation(MemberInfo memberInfo);
    public abstract virtual IReadOnlySkipNavigation FindSkipNavigation(string name);
    public virtual IReadOnlySkipNavigation FindDeclaredSkipNavigation(string name);
    public abstract virtual IEnumerable`1<IReadOnlySkipNavigation> GetDeclaredSkipNavigations();
    public abstract virtual IEnumerable`1<IReadOnlySkipNavigation> GetDerivedSkipNavigations();
    public abstract virtual IEnumerable`1<IReadOnlySkipNavigation> GetSkipNavigations();
    public abstract virtual IReadOnlyIndex FindIndex(IReadOnlyList`1<IReadOnlyProperty> properties);
    public abstract virtual IReadOnlyIndex FindIndex(string name);
    public virtual IReadOnlyIndex FindIndex(IReadOnlyProperty property);
    public abstract virtual IEnumerable`1<IReadOnlyIndex> GetDeclaredIndexes();
    public abstract virtual IEnumerable`1<IReadOnlyIndex> GetDerivedIndexes();
    public abstract virtual IEnumerable`1<IReadOnlyIndex> GetIndexes();
    public abstract virtual IReadOnlyProperty FindProperty(string name);
    public virtual IReadOnlyProperty FindProperty(MemberInfo memberInfo);
    public abstract virtual IReadOnlyList`1<IReadOnlyProperty> FindProperties(IReadOnlyList`1<string> propertyNames);
    public abstract virtual IReadOnlyProperty FindDeclaredProperty(string name);
    public virtual IReadOnlyProperty GetProperty(string name);
    public abstract virtual IEnumerable`1<IReadOnlyProperty> GetDeclaredProperties();
    public abstract virtual IEnumerable`1<IReadOnlyProperty> GetDerivedProperties();
    public abstract virtual IEnumerable`1<IReadOnlyProperty> GetProperties();
    public abstract virtual IReadOnlyServiceProperty FindServiceProperty(string name);
    public abstract virtual IEnumerable`1<IReadOnlyServiceProperty> GetDeclaredServiceProperties();
    public abstract virtual IEnumerable`1<IReadOnlyServiceProperty> GetDerivedServiceProperties();
    public abstract virtual IEnumerable`1<IReadOnlyServiceProperty> GetServiceProperties();
    public abstract virtual IReadOnlyTrigger FindDeclaredTrigger(string name);
    public abstract virtual IEnumerable`1<IReadOnlyTrigger> GetDeclaredTriggers();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey {
    public IReadOnlyEntityType DeclaringEntityType { get; }
    public IReadOnlyList`1<IReadOnlyProperty> Properties { get; }
    public IReadOnlyEntityType PrincipalEntityType { get; }
    public IReadOnlyKey PrincipalKey { get; }
    [NullableAttribute("2")]
public IReadOnlyNavigation DependentToPrincipal { get; }
    [NullableAttribute("2")]
public IReadOnlyNavigation PrincipalToDependent { get; }
    public bool IsUnique { get; }
    public bool IsRequired { get; }
    public bool IsRequiredDependent { get; }
    public bool IsOwnership { get; }
    public DeleteBehavior DeleteBehavior { get; }
    public abstract virtual IReadOnlyEntityType get_DeclaringEntityType();
    public abstract virtual IReadOnlyList`1<IReadOnlyProperty> get_Properties();
    public abstract virtual IReadOnlyEntityType get_PrincipalEntityType();
    public abstract virtual IReadOnlyKey get_PrincipalKey();
    [NullableContextAttribute("2")]
public abstract virtual IReadOnlyNavigation get_DependentToPrincipal();
    [NullableContextAttribute("2")]
public abstract virtual IReadOnlyNavigation get_PrincipalToDependent();
    public abstract virtual bool get_IsUnique();
    public abstract virtual bool get_IsRequired();
    public abstract virtual bool get_IsRequiredDependent();
    public abstract virtual bool get_IsOwnership();
    public abstract virtual DeleteBehavior get_DeleteBehavior();
    public virtual IEnumerable`1<IReadOnlySkipNavigation> GetReferencingSkipNavigations();
    public virtual IReadOnlyEntityType GetRelatedEntityType(IReadOnlyEntityType entityType);
    [NullableContextAttribute("2")]
public virtual IReadOnlyNavigation GetNavigation(bool pointsToPrincipal);
    public virtual bool IsBaseLinking();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
    [CompilerGeneratedAttribute]
private bool <GetReferencingSkipNavigations>b__22_0(IReadOnlySkipNavigation n);
    [CompilerGeneratedAttribute]
private bool <GetReferencingSkipNavigations>b__22_1(IReadOnlySkipNavigation n);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex {
    public IReadOnlyList`1<IReadOnlyProperty> Properties { get; }
    [NullableAttribute("2")]
public string Name { get; }
    public bool IsUnique { get; }
    [NullableAttribute("2")]
public IReadOnlyList`1<bool> IsDescending { get; }
    public IReadOnlyEntityType DeclaringEntityType { get; }
    public abstract virtual IReadOnlyList`1<IReadOnlyProperty> get_Properties();
    [NullableContextAttribute("2")]
public abstract virtual string get_Name();
    public abstract virtual bool get_IsUnique();
    [NullableContextAttribute("2")]
public abstract virtual IReadOnlyList`1<bool> get_IsDescending();
    public abstract virtual IReadOnlyEntityType get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
public virtual string DisplayName();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey {
    public IReadOnlyList`1<IReadOnlyProperty> Properties { get; }
    public IReadOnlyEntityType DeclaringEntityType { get; }
    public abstract virtual IReadOnlyList`1<IReadOnlyProperty> get_Properties();
    public abstract virtual IReadOnlyEntityType get_DeclaringEntityType();
    public abstract virtual IEnumerable`1<IReadOnlyForeignKey> GetReferencingForeignKeys();
    public virtual bool IsPrimaryKey();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel {
    public abstract virtual ChangeTrackingStrategy GetChangeTrackingStrategy();
    [DebuggerStepThroughAttribute]
public abstract virtual PropertyAccessMode GetPropertyAccessMode();
    [NullableContextAttribute("2")]
public virtual string GetProductVersion();
    public abstract virtual bool IsShared(Type type);
    public abstract virtual IEnumerable`1<IReadOnlyEntityType> GetEntityTypes();
    public abstract virtual IReadOnlyEntityType FindEntityType(string name);
    public abstract virtual IReadOnlyEntityType FindEntityType(string name, string definingNavigationName, IReadOnlyEntityType definingEntityType);
    public abstract virtual IReadOnlyEntityType FindEntityType(Type type);
    public abstract virtual IReadOnlyEntityType FindEntityType(Type type, string definingNavigationName, IReadOnlyEntityType definingEntityType);
    public abstract virtual IEnumerable`1<IReadOnlyEntityType> FindEntityTypes(Type type);
    public virtual IEnumerable`1<IReadOnlyEntityType> FindLeastDerivedEntityTypes(Type type, Func`2<IReadOnlyEntityType, bool> condition);
    private static int GetDerivedLevel(Type derivedType, Dictionary`2<Type, int> derivedLevels);
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigation {
    public IReadOnlyEntityType DeclaringEntityType { get; }
    public IReadOnlyEntityType TargetEntityType { get; }
    [NullableAttribute("2")]
public IReadOnlyNavigation Inverse { get; }
    public bool IsCollection { get; }
    public IReadOnlyForeignKey ForeignKey { get; }
    public bool IsOnDependent { get; }
    private IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigationBase.DeclaringEntityType { get; }
    private IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigationBase.TargetEntityType { get; }
    [NullableAttribute("2")]
private IReadOnlyNavigationBase Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigationBase.Inverse { get; }
    private bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigationBase.IsCollection { get; }
    [DebuggerStepThroughAttribute]
public virtual IReadOnlyEntityType get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
public virtual IReadOnlyEntityType get_TargetEntityType();
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public virtual IReadOnlyNavigation get_Inverse();
    [DebuggerStepThroughAttribute]
public virtual bool get_IsCollection();
    public abstract virtual IReadOnlyForeignKey get_ForeignKey();
    [DebuggerStepThroughAttribute]
public virtual bool get_IsOnDependent();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigationBase.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigationBase.get_TargetEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyNavigationBase Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigationBase.get_Inverse();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigationBase.get_IsCollection();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigationBase {
    public IReadOnlyEntityType DeclaringEntityType { get; }
    public IReadOnlyEntityType TargetEntityType { get; }
    [NullableAttribute("2")]
public IReadOnlyNavigationBase Inverse { get; }
    public bool IsCollection { get; }
    public bool IsEagerLoaded { get; }
    public abstract virtual IReadOnlyEntityType get_DeclaringEntityType();
    public abstract virtual IReadOnlyEntityType get_TargetEntityType();
    [NullableContextAttribute("2")]
public abstract virtual IReadOnlyNavigationBase get_Inverse();
    public abstract virtual bool get_IsCollection();
    public virtual bool get_IsEagerLoaded();
    private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase.IsShadowProperty();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty {
    public IReadOnlyEntityType DeclaringEntityType { get; }
    public bool IsNullable { get; }
    public ValueGenerated ValueGenerated { get; }
    public bool IsConcurrencyToken { get; }
    public abstract virtual IReadOnlyEntityType get_DeclaringEntityType();
    public abstract virtual bool get_IsNullable();
    public abstract virtual ValueGenerated get_ValueGenerated();
    public abstract virtual bool get_IsConcurrencyToken();
    public virtual CoreTypeMapping GetTypeMapping();
    [NullableContextAttribute("2")]
public abstract virtual CoreTypeMapping FindTypeMapping();
    public abstract virtual Nullable`1<int> GetMaxLength();
    public abstract virtual Nullable`1<int> GetPrecision();
    public abstract virtual Nullable`1<int> GetScale();
    public abstract virtual Nullable`1<bool> IsUnicode();
    public abstract virtual PropertySaveBehavior GetBeforeSaveBehavior();
    public abstract virtual PropertySaveBehavior GetAfterSaveBehavior();
    public abstract virtual Func`3<IProperty, IEntityType, ValueGenerator> GetValueGeneratorFactory();
    [NullableContextAttribute("2")]
public abstract virtual ValueConverter GetValueConverter();
    [NullableContextAttribute("2")]
public abstract virtual Type GetProviderClrType();
    [NullableContextAttribute("2")]
public abstract virtual ValueComparer GetValueComparer();
    [NullableContextAttribute("2")]
public abstract virtual ValueComparer GetKeyValueComparer();
    [NullableContextAttribute("2")]
public abstract virtual ValueComparer GetProviderValueComparer();
    [NullableContextAttribute("2")]
public virtual IReadOnlyProperty FindFirstPrincipal();
    public virtual IReadOnlyList`1<IReadOnlyProperty> GetPrincipals();
    private static void AddPrincipals(IReadOnlyProperty property, List`1<IReadOnlyProperty> visited);
    public abstract virtual bool IsForeignKey();
    public abstract virtual IEnumerable`1<IReadOnlyForeignKey> GetContainingForeignKeys();
    public abstract virtual bool IsIndex();
    public virtual bool IsUniqueIndex();
    public abstract virtual IEnumerable`1<IReadOnlyIndex> GetContainingIndexes();
    public virtual bool IsPrimaryKey();
    [NullableContextAttribute("2")]
public abstract virtual IReadOnlyKey FindContainingPrimaryKey();
    public abstract virtual bool IsKey();
    public abstract virtual IEnumerable`1<IReadOnlyKey> GetContainingKeys();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase {
    public string Name { get; }
    public IReadOnlyTypeBase DeclaringType { get; }
    [DynamicallyAccessedMembersAttribute("9831")]
public Type ClrType { get; }
    [NullableAttribute("2")]
public PropertyInfo PropertyInfo { get; }
    [NullableAttribute("2")]
public FieldInfo FieldInfo { get; }
    public abstract virtual string get_Name();
    public abstract virtual IReadOnlyTypeBase get_DeclaringType();
    public abstract virtual Type get_ClrType();
    [NullableContextAttribute("2")]
public abstract virtual PropertyInfo get_PropertyInfo();
    [NullableContextAttribute("2")]
public abstract virtual FieldInfo get_FieldInfo();
    [NullableContextAttribute("2")]
public virtual string GetFieldName();
    public virtual bool IsShadowProperty();
    public virtual bool IsIndexerProperty();
    public abstract virtual PropertyAccessMode GetPropertyAccessMode();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IReadOnlyServiceProperty {
    public IReadOnlyEntityType DeclaringEntityType { get; }
    [NullableAttribute("2")]
public ServiceParameterBinding ParameterBinding { get; }
    public abstract virtual IReadOnlyEntityType get_DeclaringEntityType();
    [NullableContextAttribute("2")]
public abstract virtual ServiceParameterBinding get_ParameterBinding();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IReadOnlySkipNavigation {
    [NullableAttribute("2")]
public IReadOnlyEntityType JoinEntityType { get; }
    public IReadOnlySkipNavigation Inverse { get; }
    private IReadOnlyNavigationBase Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigationBase.Inverse { get; }
    [NullableAttribute("2")]
public IReadOnlyForeignKey ForeignKey { get; }
    public bool IsOnDependent { get; }
    [NullableContextAttribute("2")]
public virtual IReadOnlyEntityType get_JoinEntityType();
    public abstract virtual IReadOnlySkipNavigation get_Inverse();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyNavigationBase Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigationBase.get_Inverse();
    [NullableContextAttribute("2")]
public abstract virtual IReadOnlyForeignKey get_ForeignKey();
    public abstract virtual bool get_IsOnDependent();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTrigger {
    public string ModelName { get; }
    public IReadOnlyEntityType EntityType { get; }
    public abstract virtual string get_ModelName();
    public abstract virtual IReadOnlyEntityType get_EntityType();
    public virtual string ToDebugString(MetadataDebugStringOptions options, int indent);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase {
    private static bool UseOldBehavior30115;
    public IReadOnlyModel Model { get; }
    public string Name { get; }
    [DynamicallyAccessedMembersAttribute("9831")]
public Type ClrType { get; }
    public bool HasSharedClrType { get; }
    public bool IsPropertyBag { get; }
    private static IReadOnlyTypeBase();
    public abstract virtual IReadOnlyModel get_Model();
    public abstract virtual string get_Name();
    public abstract virtual Type get_ClrType();
    public abstract virtual bool get_HasSharedClrType();
    public abstract virtual bool get_IsPropertyBag();
    [DebuggerStepThroughAttribute]
public virtual bool IsAbstract();
    [DebuggerStepThroughAttribute]
public virtual string DisplayName();
    [DebuggerStepThroughAttribute]
public virtual string DisplayName(bool omitSharedType);
    [DebuggerStepThroughAttribute]
public virtual string ShortName();
    public abstract virtual PropertyAccessMode GetPropertyAccessMode();
    public abstract virtual PropertyAccessMode GetNavigationAccessMode();
    [NullableContextAttribute("2")]
public abstract virtual PropertyInfo FindIndexerPropertyInfo();
}
public interface Microsoft.EntityFrameworkCore.Metadata.IServiceProperty {
    [NullableAttribute("1")]
public IEntityType DeclaringEntityType { get; }
    [NullableAttribute("1")]
public ServiceParameterBinding ParameterBinding { get; }
    [NullableContextAttribute("1")]
public abstract virtual IEntityType get_DeclaringEntityType();
    [NullableContextAttribute("1")]
public abstract virtual ServiceParameterBinding get_ParameterBinding();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation {
    public IEntityType DeclaringEntityType { get; }
    public IEntityType TargetEntityType { get; }
    public IEntityType JoinEntityType { get; }
    public IForeignKey ForeignKey { get; }
    public ISkipNavigation Inverse { get; }
    [DebuggerStepThroughAttribute]
public virtual IEntityType get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
public virtual IEntityType get_TargetEntityType();
    [DebuggerStepThroughAttribute]
public virtual IEntityType get_JoinEntityType();
    [DebuggerStepThroughAttribute]
public virtual IForeignKey get_ForeignKey();
    [DebuggerStepThroughAttribute]
public virtual ISkipNavigation get_Inverse();
}
public interface Microsoft.EntityFrameworkCore.Metadata.ITrigger {
    [NullableAttribute("1")]
public IEntityType EntityType { get; }
    [NullableContextAttribute("1")]
public abstract virtual IEntityType get_EntityType();
}
public interface Microsoft.EntityFrameworkCore.Metadata.ITypeBase {
    [NullableAttribute("1")]
public IModel Model { get; }
    [NullableContextAttribute("1")]
public abstract virtual IModel get_Model();
}
public interface Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration {
    [NullableAttribute("1")]
public Type ClrType { get; }
    [NullableContextAttribute("1")]
public abstract virtual Type get_ClrType();
    public abstract virtual Nullable`1<int> GetMaxLength();
    public abstract virtual Nullable`1<int> GetPrecision();
    public abstract virtual Nullable`1<int> GetScale();
    public abstract virtual Nullable`1<bool> IsUnicode();
    [NullableContextAttribute("2")]
public abstract virtual ValueConverter GetValueConverter();
    [NullableContextAttribute("2")]
public abstract virtual Type GetProviderClrType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.KeyComparer : object {
    public static KeyComparer Instance;
    private static KeyComparer();
    [NullableContextAttribute("2")]
public sealed virtual int Compare(IReadOnlyKey x, IReadOnlyKey y);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(IReadOnlyKey x, IReadOnlyKey y);
    public sealed virtual int GetHashCode(IReadOnlyKey obj);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.LazyLoaderParameterBindingFactory : ServiceParameterBindingFactory {
    private static MethodInfo LoadMethod;
    private static MethodInfo LoadAsyncMethod;
    [CompilerGeneratedAttribute]
private LazyLoaderParameterBindingFactoryDependencies <Dependencies>k__BackingField;
    protected LazyLoaderParameterBindingFactoryDependencies Dependencies { get; }
    public LazyLoaderParameterBindingFactory(LazyLoaderParameterBindingFactoryDependencies dependencies);
    private static LazyLoaderParameterBindingFactory();
    [CompilerGeneratedAttribute]
protected virtual LazyLoaderParameterBindingFactoryDependencies get_Dependencies();
    public virtual bool CanBind(Type parameterType, string parameterName);
    public virtual ParameterBinding Bind(IMutableEntityType entityType, Type parameterType, string parameterName);
    public virtual ParameterBinding Bind(IConventionEntityType entityType, Type parameterType, string parameterName);
    public virtual ParameterBinding Bind(IReadOnlyEntityType entityType, Type parameterType, string parameterName);
    private static ParameterBinding Bind(IEntityType entityType, Type parameterType);
    private static bool IsLazyLoader(Type type);
    private static bool IsLazyLoaderMethod(Type type, string name);
    private static bool IsLazyLoaderAsyncMethod(Type type, string name);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.LazyLoaderParameterBindingFactoryDependencies : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
private LazyLoaderParameterBindingFactoryDependencies(LazyLoaderParameterBindingFactoryDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(LazyLoaderParameterBindingFactoryDependencies left, LazyLoaderParameterBindingFactoryDependencies right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(LazyLoaderParameterBindingFactoryDependencies left, LazyLoaderParameterBindingFactoryDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(LazyLoaderParameterBindingFactoryDependencies other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public LazyLoaderParameterBindingFactoryDependencies <Clone>$();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{DebuggerDisplay(),nq}")]
public class Microsoft.EntityFrameworkCore.Metadata.MemberIdentity : ValueType {
    private object _nameOrMember;
    public static MemberIdentity None;
    public string Name { get; }
    public MemberInfo MemberInfo { get; }
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
public MemberIdentity(string name);
    [NullableContextAttribute("1")]
[DebuggerStepThroughAttribute]
public MemberIdentity(MemberInfo memberInfo);
    [DebuggerStepThroughAttribute]
private MemberIdentity(object nameOrMember);
    private static MemberIdentity();
    [DebuggerStepThroughAttribute]
public static MemberIdentity Create(string name);
    [DebuggerStepThroughAttribute]
public static MemberIdentity Create(MemberInfo memberInfo);
    [DebuggerStepThroughAttribute]
public string get_Name();
    [DebuggerStepThroughAttribute]
public MemberInfo get_MemberInfo();
    private string DebuggerDisplay();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(MemberIdentity other);
    public virtual int GetHashCode();
    public static bool op_Equality(MemberIdentity left, MemberIdentity right);
    public static bool op_Inequality(MemberIdentity left, MemberIdentity right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.ObjectArrayParameterBinding : ParameterBinding {
    private IReadOnlyList`1<ParameterBinding> _bindings;
    public ObjectArrayParameterBinding(IReadOnlyList`1<ParameterBinding> bindings);
    public virtual Expression BindToParameter(ParameterBindingInfo bindingInfo);
    public virtual ParameterBinding With(IPropertyBase[] consumedProperties);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Metadata.ParameterBinding : object {
    [CompilerGeneratedAttribute]
private Type <ParameterType>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<IPropertyBase> <ConsumedProperties>k__BackingField;
    public Type ParameterType { get; }
    public IReadOnlyList`1<IPropertyBase> ConsumedProperties { get; }
    protected ParameterBinding(Type parameterType, IPropertyBase[] consumedProperties);
    [CompilerGeneratedAttribute]
public virtual Type get_ParameterType();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<IPropertyBase> get_ConsumedProperties();
    public abstract virtual Expression BindToParameter(ParameterBindingInfo bindingInfo);
    public abstract virtual ParameterBinding With(IPropertyBase[] consumedProperties);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Metadata.ParameterBindingInfo : ValueType {
    [CompilerGeneratedAttribute]
private IEntityType <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <MaterializationContextExpression>k__BackingField;
    public IEntityType EntityType { get; }
    public Expression MaterializationContextExpression { get; }
    public ParameterBindingInfo(IEntityType entityType, Expression materializationContextExpression);
    [CompilerGeneratedAttribute]
public IEntityType get_EntityType();
    [CompilerGeneratedAttribute]
public Expression get_MaterializationContextExpression();
    public int GetValueBufferIndex(IPropertyBase property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.PropertyParameterBinding : ParameterBinding {
    public PropertyParameterBinding(IProperty property);
    public virtual Expression BindToParameter(ParameterBindingInfo bindingInfo);
    public virtual ParameterBinding With(IPropertyBase[] consumedProperties);
}
public enum Microsoft.EntityFrameworkCore.Metadata.PropertySaveBehavior : Enum {
    public int value__;
    public static PropertySaveBehavior Save;
    public static PropertySaveBehavior Ignore;
    public static PropertySaveBehavior Throw;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.RuntimeEntityType : AnnotatableBase {
    private List`1<RuntimeForeignKey> _foreignKeys;
    private SortedDictionary`2<string, RuntimeNavigation> _navigations;
    private SortedDictionary`2<string, RuntimeSkipNavigation> _skipNavigations;
    private SortedDictionary`2<string, RuntimeServiceProperty> _serviceProperties;
    private SortedDictionary`2<string, RuntimeProperty> _properties;
    private SortedDictionary`2<IReadOnlyList`1<IReadOnlyProperty>, RuntimeIndex> _unnamedIndexes;
    private SortedDictionary`2<string, RuntimeIndex> _namedIndexes;
    private SortedDictionary`2<IReadOnlyList`1<IReadOnlyProperty>, RuntimeKey> _keys;
    private SortedDictionary`2<string, RuntimeTrigger> _triggers;
    private RuntimeKey _primaryKey;
    private bool _hasSharedClrType;
    [DynamicallyAccessedMembersAttribute("9831")]
private Type _clrType;
    private RuntimeEntityType _baseType;
    private SortedSet`1<RuntimeEntityType> _directlyDerivedTypes;
    private ChangeTrackingStrategy _changeTrackingStrategy;
    private InstantiationBinding _constructorBinding;
    private InstantiationBinding _serviceOnlyConstructorBinding;
    private PropertyInfo _indexerPropertyInfo;
    private bool _isPropertyBag;
    private object _discriminatorValue;
    private PropertyCounts _counts;
    private Func`2<InternalEntityEntry, ISnapshot> _relationshipSnapshotFactory;
    private Func`2<InternalEntityEntry, ISnapshot> _originalValuesFactory;
    private Func`2<InternalEntityEntry, ISnapshot> _temporaryValuesFactory;
    private Func`1<ISnapshot> _storeGeneratedValuesFactory;
    private Func`2<ValueBuffer, ISnapshot> _shadowValuesFactory;
    private Func`1<ISnapshot> _emptyShadowValuesFactory;
    private IProperty[] _foreignKeyProperties;
    private IProperty[] _valueGeneratingProperties;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimeModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private SortedSet`1<RuntimeForeignKey> <DeclaredReferencingForeignKeys>k__BackingField;
    public string Name { get; }
    public RuntimeModel Model { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private SortedSet`1<RuntimeForeignKey> DeclaredReferencingForeignKeys { get; private set; }
    [NullableAttribute("2")]
public InstantiationBinding ConstructorBinding { get; public set; }
    [NullableAttribute("2")]
[EntityFrameworkInternalAttribute]
public InstantiationBinding ServiceOnlyConstructorBinding { get; public set; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    [DynamicallyAccessedMembersAttribute("9831")]
private Type Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase.ClrType { get; }
    private bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase.HasSharedClrType { get; }
    private bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase.IsPropertyBag { get; }
    private IReadOnlyModel Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase.Model { get; }
    private IModel Microsoft.EntityFrameworkCore.Metadata.ITypeBase.Model { get; }
    [NullableAttribute("2")]
private IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.BaseType { get; }
    [NullableAttribute("2")]
private IEntityType Microsoft.EntityFrameworkCore.Metadata.IEntityType.BaseType { get; }
    private PropertyCounts Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType.Counts { get; }
    private Func`2<InternalEntityEntry, ISnapshot> Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType.RelationshipSnapshotFactory { get; }
    private Func`2<InternalEntityEntry, ISnapshot> Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType.OriginalValuesFactory { get; }
    private Func`1<ISnapshot> Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType.StoreGeneratedValuesFactory { get; }
    private Func`2<InternalEntityEntry, ISnapshot> Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType.TemporaryValuesFactory { get; }
    private Func`2<ValueBuffer, ISnapshot> Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType.ShadowValuesFactory { get; }
    private Func`1<ISnapshot> Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType.EmptyShadowValuesFactory { get; }
    [NullableContextAttribute("2")]
[EntityFrameworkInternalAttribute]
public RuntimeEntityType(string name, Type type, bool sharedClrType, RuntimeModel model, RuntimeEntityType baseType, string discriminatorProperty, ChangeTrackingStrategy changeTrackingStrategy, PropertyInfo indexerPropertyInfo, bool propertyBag, object discriminatorValue);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual RuntimeModel get_Model();
    private IEnumerable`1<RuntimeEntityType> GetDerivedTypes();
    private RuntimeKey FindPrimaryKey();
    public virtual void SetPrimaryKey(RuntimeKey key);
    public virtual RuntimeKey AddKey(IReadOnlyList`1<RuntimeProperty> properties);
    public virtual RuntimeKey FindKey(IReadOnlyList`1<IReadOnlyProperty> properties);
    private IEnumerable`1<RuntimeKey> GetDeclaredKeys();
    private IEnumerable`1<RuntimeKey> GetKeys();
    public virtual RuntimeForeignKey AddForeignKey(IReadOnlyList`1<RuntimeProperty> properties, RuntimeKey principalKey, RuntimeEntityType principalEntityType, DeleteBehavior deleteBehavior, bool unique, bool required, bool requiredDependent, bool ownership);
    private IEnumerable`1<RuntimeForeignKey> FindForeignKeys(IReadOnlyList`1<IReadOnlyProperty> properties);
    public virtual RuntimeForeignKey FindForeignKey(IReadOnlyList`1<IReadOnlyProperty> properties, IReadOnlyKey principalKey, IReadOnlyEntityType principalEntityType);
    private IEnumerable`1<RuntimeForeignKey> GetDerivedForeignKeys();
    private IEnumerable`1<RuntimeForeignKey> GetForeignKeys();
    public virtual IEnumerable`1<RuntimeForeignKey> FindDeclaredForeignKeys(IReadOnlyList`1<IReadOnlyProperty> properties);
    private RuntimeForeignKey FindDeclaredForeignKey(IReadOnlyList`1<IReadOnlyProperty> properties, IReadOnlyKey principalKey, IReadOnlyEntityType principalEntityType);
    private IEnumerable`1<RuntimeForeignKey> GetReferencingForeignKeys();
    private IEnumerable`1<RuntimeForeignKey> GetDeclaredReferencingForeignKeys();
    [CompilerGeneratedAttribute]
private SortedSet`1<RuntimeForeignKey> get_DeclaredReferencingForeignKeys();
    [CompilerGeneratedAttribute]
private void set_DeclaredReferencingForeignKeys(SortedSet`1<RuntimeForeignKey> value);
    public virtual RuntimeNavigation AddNavigation(string name, RuntimeForeignKey foreignKey, bool onDependent, Type clrType, PropertyInfo propertyInfo, FieldInfo fieldInfo, PropertyAccessMode propertyAccessMode, bool eagerLoaded);
    public virtual RuntimeNavigation FindNavigation(string name);
    private RuntimeNavigation FindDeclaredNavigation(string name);
    private IEnumerable`1<RuntimeNavigation> GetDeclaredNavigations();
    private IEnumerable`1<RuntimeNavigation> GetNavigations();
    public virtual RuntimeSkipNavigation AddSkipNavigation(string name, RuntimeEntityType targetEntityType, RuntimeForeignKey foreignKey, bool collection, bool onDependent, Type clrType, PropertyInfo propertyInfo, FieldInfo fieldInfo, PropertyAccessMode propertyAccessMode, bool eagerLoaded);
    public virtual RuntimeSkipNavigation FindSkipNavigation(string name);
    private RuntimeSkipNavigation FindSkipNavigation(MemberInfo memberInfo);
    private RuntimeSkipNavigation FindDeclaredSkipNavigation(string name);
    private IEnumerable`1<RuntimeSkipNavigation> GetDeclaredSkipNavigations();
    private IEnumerable`1<RuntimeSkipNavigation> GetDerivedSkipNavigations();
    private IEnumerable`1<RuntimeSkipNavigation> GetSkipNavigations();
    public virtual RuntimeIndex AddIndex(IReadOnlyList`1<RuntimeProperty> properties, string name, bool unique);
    public virtual RuntimeIndex FindIndex(IReadOnlyList`1<IReadOnlyProperty> properties);
    public virtual RuntimeIndex FindIndex(string name);
    private IEnumerable`1<RuntimeIndex> GetDeclaredIndexes();
    private IEnumerable`1<RuntimeIndex> GetDerivedIndexes();
    private IEnumerable`1<RuntimeIndex> GetIndexes();
    [NullableContextAttribute("2")]
public virtual RuntimeProperty AddProperty(string name, Type clrType, PropertyInfo propertyInfo, FieldInfo fieldInfo, PropertyAccessMode propertyAccessMode, bool nullable, bool concurrencyToken, ValueGenerated valueGenerated, PropertySaveBehavior beforeSaveBehavior, PropertySaveBehavior afterSaveBehavior, Nullable`1<int> maxLength, Nullable`1<bool> unicode, Nullable`1<int> precision, Nullable`1<int> scale, Type providerPropertyType, Func`3<IProperty, IEntityType, ValueGenerator> valueGeneratorFactory, ValueConverter valueConverter, ValueComparer valueComparer, ValueComparer keyValueComparer, ValueComparer providerValueComparer, CoreTypeMapping typeMapping);
    public virtual RuntimeProperty FindProperty(string name);
    private RuntimeProperty FindDeclaredProperty(string name);
    private IEnumerable`1<RuntimeProperty> GetDeclaredProperties();
    private IEnumerable`1<RuntimeProperty> GetDerivedProperties();
    public virtual IReadOnlyList`1<RuntimeProperty> FindProperties(IEnumerable`1<string> propertyNames);
    private IEnumerable`1<RuntimeProperty> GetProperties();
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public virtual PropertyInfo FindIndexerPropertyInfo();
    public virtual RuntimeServiceProperty AddServiceProperty(string name, PropertyInfo propertyInfo, FieldInfo fieldInfo, PropertyAccessMode propertyAccessMode);
    public virtual RuntimeServiceProperty FindServiceProperty(string name);
    private RuntimeServiceProperty FindDeclaredServiceProperty(string name);
    private IEnumerable`1<RuntimeServiceProperty> GetServiceProperties();
    private IEnumerable`1<RuntimeServiceProperty> GetDeclaredServiceProperties();
    private IEnumerable`1<RuntimeServiceProperty> GetDerivedServiceProperties();
    public virtual RuntimeTrigger AddTrigger(string modelName);
    public virtual RuntimeTrigger FindDeclaredTrigger(string modelName);
    private IEnumerable`1<RuntimeTrigger> GetDeclaredTriggers();
    private IEnumerable`1<RuntimeTrigger> GetTriggers();
    [NullableContextAttribute("2")]
public virtual InstantiationBinding get_ConstructorBinding();
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public virtual void set_ConstructorBinding(InstantiationBinding value);
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public virtual InstantiationBinding get_ServiceOnlyConstructorBinding();
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public virtual void set_ServiceOnlyConstructorBinding(InstantiationBinding value);
    public static PropertyInfo FindIndexerProperty(Type type);
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override Type Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase.get_ClrType();
    [DebuggerStepThroughAttribute]
private sealed virtual override ChangeTrackingStrategy Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetChangeTrackingStrategy();
    [DebuggerStepThroughAttribute]
private sealed virtual override LambdaExpression Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetQueryFilter();
    [DebuggerStepThroughAttribute]
private sealed virtual override string Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDiscriminatorPropertyName();
    [DebuggerStepThroughAttribute]
private sealed virtual override object Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDiscriminatorValue();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase.get_HasSharedClrType();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase.get_IsPropertyBag();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyModel Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override IModel Microsoft.EntityFrameworkCore.Metadata.ITypeBase.get_Model();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.get_BaseType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IEntityType.get_BaseType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyEntityType> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDerivedTypes();
    private sealed virtual override IEnumerable`1<IReadOnlyEntityType> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDerivedTypesInclusive();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyEntityType> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDirectlyDerivedTypes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IEntityType> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetDirectlyDerivedTypes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyKey Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindPrimaryKey();
    [DebuggerStepThroughAttribute]
private sealed virtual override IKey Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindPrimaryKey();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyKey Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindKey(IReadOnlyList`1<IReadOnlyProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IKey Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindKey(IReadOnlyList`1<IReadOnlyProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyKey> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDeclaredKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IKey> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetDeclaredKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyKey> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IKey> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyForeignKey Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindForeignKey(IReadOnlyList`1<IReadOnlyProperty> properties, IReadOnlyKey principalKey, IReadOnlyEntityType principalEntityType);
    [DebuggerStepThroughAttribute]
private sealed virtual override IForeignKey Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindForeignKey(IReadOnlyList`1<IReadOnlyProperty> properties, IReadOnlyKey principalKey, IReadOnlyEntityType principalEntityType);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyForeignKey> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindForeignKeys(IReadOnlyList`1<IReadOnlyProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IForeignKey> Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindForeignKeys(IReadOnlyList`1<IReadOnlyProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyForeignKey> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindDeclaredForeignKeys(IReadOnlyList`1<IReadOnlyProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IForeignKey> Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindDeclaredForeignKeys(IReadOnlyList`1<IReadOnlyProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyForeignKey> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IForeignKey> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyForeignKey> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDeclaredForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IForeignKey> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetDeclaredForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyForeignKey> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDerivedForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IForeignKey> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetDerivedForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyForeignKey> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDeclaredReferencingForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IForeignKey> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetDeclaredReferencingForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyForeignKey> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetReferencingForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IForeignKey> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetReferencingForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyNavigation> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDeclaredNavigations();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<INavigation> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetDeclaredNavigations();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyNavigation Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindDeclaredNavigation(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override INavigation Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindDeclaredNavigation(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyNavigation> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDerivedNavigations();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyNavigation> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetNavigations();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<INavigation> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetNavigations();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlySkipNavigation Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindSkipNavigation(MemberInfo memberInfo);
    [DebuggerStepThroughAttribute]
private sealed virtual override ISkipNavigation Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindSkipNavigation(MemberInfo memberInfo);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlySkipNavigation Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindSkipNavigation(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override ISkipNavigation Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindSkipNavigation(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlySkipNavigation Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindDeclaredSkipNavigation(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlySkipNavigation> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDeclaredSkipNavigations();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<ISkipNavigation> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetDeclaredSkipNavigations();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlySkipNavigation> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDerivedSkipNavigations();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<ISkipNavigation> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetDerivedSkipNavigations();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlySkipNavigation> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetSkipNavigations();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<ISkipNavigation> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetSkipNavigations();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyIndex Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindIndex(IReadOnlyList`1<IReadOnlyProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IIndex Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindIndex(IReadOnlyList`1<IReadOnlyProperty> properties);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyIndex Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindIndex(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IIndex Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindIndex(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyIndex> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDeclaredIndexes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IIndex> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetDeclaredIndexes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyIndex> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDerivedIndexes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IIndex> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetDerivedIndexes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyIndex> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetIndexes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IIndex> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetIndexes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyProperty Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindDeclaredProperty(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IProperty Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindDeclaredProperty(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IReadOnlyProperty> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindProperties(IReadOnlyList`1<string> propertyNames);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyProperty Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindProperty(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IProperty Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindProperty(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyProperty> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDeclaredProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IProperty> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetDeclaredProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyProperty> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDerivedProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyProperty> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IProperty> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyTrigger Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindDeclaredTrigger(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override ITrigger Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindDeclaredTrigger(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyTrigger> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDeclaredTriggers();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<ITrigger> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetDeclaredTriggers();
    private sealed virtual override PropertyCounts Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType.get_Counts();
    private sealed virtual override Func`2<InternalEntityEntry, ISnapshot> Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType.get_RelationshipSnapshotFactory();
    private sealed virtual override Func`2<InternalEntityEntry, ISnapshot> Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType.get_OriginalValuesFactory();
    private sealed virtual override Func`1<ISnapshot> Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType.get_StoreGeneratedValuesFactory();
    private sealed virtual override Func`2<InternalEntityEntry, ISnapshot> Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType.get_TemporaryValuesFactory();
    private sealed virtual override Func`2<ValueBuffer, ISnapshot> Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType.get_ShadowValuesFactory();
    private sealed virtual override Func`1<ISnapshot> Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType.get_EmptyShadowValuesFactory();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IProperty> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetForeignKeyProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IProperty> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetValueGeneratingProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyServiceProperty Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.FindServiceProperty(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IServiceProperty Microsoft.EntityFrameworkCore.Metadata.IEntityType.FindServiceProperty(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyServiceProperty> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDeclaredServiceProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IServiceProperty> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetDeclaredServiceProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyServiceProperty> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetDerivedServiceProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyServiceProperty> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetServiceProperties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IServiceProperty> Microsoft.EntityFrameworkCore.Metadata.IEntityType.GetServiceProperties();
    private sealed virtual override IEnumerable`1<IDictionary`2<string, object>> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyEntityType.GetSeedData(bool providerValues);
    private sealed virtual override PropertyAccessMode Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase.GetPropertyAccessMode();
    private sealed virtual override PropertyAccessMode Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTypeBase.GetNavigationAccessMode();
    private sealed virtual override Nullable`1<ConfigurationSource> Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType.GetConstructorBindingConfigurationSource();
    private sealed virtual override Nullable`1<ConfigurationSource> Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeEntityType.GetServiceOnlyConstructorBindingConfigurationSource();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__101_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__101_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.RuntimeForeignKey : AnnotatableBase {
    private DeleteBehavior _deleteBehavior;
    private bool _isUnique;
    private bool _isRequired;
    private bool _isRequiredDependent;
    private bool _isOwnership;
    private IDependentKeyValueFactory _dependentKeyValueFactory;
    private Func`1<IDependentsMap> _dependentsMapFactory;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RuntimeProperty> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimeKey <PrincipalKey>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimeEntityType <DeclaringEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimeEntityType <PrincipalEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimeNavigation <DependentToPrincipal>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimeNavigation <PrincipalToDependent>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<RuntimeSkipNavigation> <ReferencingSkipNavigations>k__BackingField;
    public IReadOnlyList`1<RuntimeProperty> Properties { get; }
    public RuntimeKey PrincipalKey { get; }
    public RuntimeEntityType DeclaringEntityType { get; }
    public RuntimeEntityType PrincipalEntityType { get; }
    [NullableAttribute("2")]
private RuntimeNavigation DependentToPrincipal { get; private set; }
    [NullableAttribute("2")]
private RuntimeNavigation PrincipalToDependent { get; private set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[EntityFrameworkInternalAttribute]
public ISet`1<RuntimeSkipNavigation> ReferencingSkipNavigations { get; public set; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IReadOnlyList`1<IReadOnlyProperty> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.Properties { get; }
    private IReadOnlyList`1<IProperty> Microsoft.EntityFrameworkCore.Metadata.IForeignKey.Properties { get; }
    private IReadOnlyKey Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.PrincipalKey { get; }
    private IKey Microsoft.EntityFrameworkCore.Metadata.IForeignKey.PrincipalKey { get; }
    private IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.DeclaringEntityType { get; }
    private IEntityType Microsoft.EntityFrameworkCore.Metadata.IForeignKey.DeclaringEntityType { get; }
    private IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.PrincipalEntityType { get; }
    private IEntityType Microsoft.EntityFrameworkCore.Metadata.IForeignKey.PrincipalEntityType { get; }
    [NullableAttribute("2")]
private IReadOnlyNavigation Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.DependentToPrincipal { get; }
    [NullableAttribute("2")]
private INavigation Microsoft.EntityFrameworkCore.Metadata.IForeignKey.DependentToPrincipal { get; }
    [NullableAttribute("2")]
private IReadOnlyNavigation Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.PrincipalToDependent { get; }
    [NullableAttribute("2")]
private INavigation Microsoft.EntityFrameworkCore.Metadata.IForeignKey.PrincipalToDependent { get; }
    private bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.IsUnique { get; }
    private bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.IsRequired { get; }
    private bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.IsRequiredDependent { get; }
    private DeleteBehavior Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.DeleteBehavior { get; }
    private bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.IsOwnership { get; }
    private IDependentKeyValueFactory Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeForeignKey.DependentKeyValueFactory { get; private set; }
    private Func`1<IDependentsMap> Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeForeignKey.DependentsMapFactory { get; private set; }
    [EntityFrameworkInternalAttribute]
public RuntimeForeignKey(IReadOnlyList`1<RuntimeProperty> dependentProperties, RuntimeKey principalKey, RuntimeEntityType dependentEntityType, RuntimeEntityType principalEntityType, DeleteBehavior deleteBehavior, bool unique, bool required, bool requiredDependent, bool ownership);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<RuntimeProperty> get_Properties();
    [CompilerGeneratedAttribute]
public virtual RuntimeKey get_PrincipalKey();
    [CompilerGeneratedAttribute]
public virtual RuntimeEntityType get_DeclaringEntityType();
    [CompilerGeneratedAttribute]
public virtual RuntimeEntityType get_PrincipalEntityType();
    [CompilerGeneratedAttribute]
private RuntimeNavigation get_DependentToPrincipal();
    [CompilerGeneratedAttribute]
private void set_DependentToPrincipal(RuntimeNavigation value);
    [CompilerGeneratedAttribute]
private RuntimeNavigation get_PrincipalToDependent();
    [CompilerGeneratedAttribute]
private void set_PrincipalToDependent(RuntimeNavigation value);
    [EntityFrameworkInternalAttribute]
public virtual void AddNavigation(RuntimeNavigation navigation, bool onDependent);
    [CompilerGeneratedAttribute]
public virtual ISet`1<RuntimeSkipNavigation> get_ReferencingSkipNavigations();
    [CompilerGeneratedAttribute]
public virtual void set_ReferencingSkipNavigations(ISet`1<RuntimeSkipNavigation> value);
    public virtual DebugView get_DebugView();
    public virtual string ToString();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IReadOnlyProperty> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.get_Properties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IProperty> Microsoft.EntityFrameworkCore.Metadata.IForeignKey.get_Properties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyKey Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.get_PrincipalKey();
    [DebuggerStepThroughAttribute]
private sealed virtual override IKey Microsoft.EntityFrameworkCore.Metadata.IForeignKey.get_PrincipalKey();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IForeignKey.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.get_PrincipalEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IForeignKey.get_PrincipalEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyNavigation Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.get_DependentToPrincipal();
    [DebuggerStepThroughAttribute]
private sealed virtual override INavigation Microsoft.EntityFrameworkCore.Metadata.IForeignKey.get_DependentToPrincipal();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyNavigation Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.get_PrincipalToDependent();
    [DebuggerStepThroughAttribute]
private sealed virtual override INavigation Microsoft.EntityFrameworkCore.Metadata.IForeignKey.get_PrincipalToDependent();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.get_IsUnique();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.get_IsRequired();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.get_IsRequiredDependent();
    [DebuggerStepThroughAttribute]
private sealed virtual override DeleteBehavior Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.get_DeleteBehavior();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.get_IsOwnership();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlySkipNavigation> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyForeignKey.GetReferencingSkipNavigations();
    [DebuggerStepThroughAttribute]
private sealed virtual override IDependentKeyValueFactory`1<TKey> Microsoft.EntityFrameworkCore.Metadata.IForeignKey.GetDependentKeyValueFactory();
    [DebuggerStepThroughAttribute]
private sealed virtual override IDependentKeyValueFactory Microsoft.EntityFrameworkCore.Metadata.IForeignKey.GetDependentKeyValueFactory();
    [DebuggerStepThroughAttribute]
private sealed virtual override IDependentKeyValueFactory Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeForeignKey.get_DependentKeyValueFactory();
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeForeignKey.set_DependentKeyValueFactory(IDependentKeyValueFactory value);
    [DebuggerStepThroughAttribute]
private sealed virtual override Func`1<IDependentsMap> Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeForeignKey.get_DependentsMapFactory();
    [DebuggerStepThroughAttribute]
private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeForeignKey.set_DependentsMapFactory(Func`1<IDependentsMap> value);
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__34_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__34_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.RuntimeIndex : AnnotatableBase {
    private bool _isUnique;
    private object _nullableValueFactory;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RuntimeProperty> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimeEntityType <DeclaringEntityType>k__BackingField;
    public IReadOnlyList`1<RuntimeProperty> Properties { get; }
    [NullableAttribute("2")]
public string Name { get; }
    public RuntimeEntityType DeclaringEntityType { get; }
    private IReadOnlyList`1<bool> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex.IsDescending { get; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IReadOnlyList`1<IReadOnlyProperty> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex.Properties { get; }
    private IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex.DeclaringEntityType { get; }
    private IReadOnlyList`1<IProperty> Microsoft.EntityFrameworkCore.Metadata.IIndex.Properties { get; }
    private IEntityType Microsoft.EntityFrameworkCore.Metadata.IIndex.DeclaringEntityType { get; }
    private bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex.IsUnique { get; }
    [EntityFrameworkInternalAttribute]
public RuntimeIndex(IReadOnlyList`1<RuntimeProperty> properties, RuntimeEntityType declaringEntityType, string name, bool unique);
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<RuntimeProperty> get_Properties();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_Name();
    [CompilerGeneratedAttribute]
public virtual RuntimeEntityType get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<bool> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex.get_IsDescending();
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IReadOnlyProperty> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex.get_Properties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IProperty> Microsoft.EntityFrameworkCore.Metadata.IIndex.get_Properties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IIndex.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyIndex.get_IsUnique();
    [DebuggerStepThroughAttribute]
private sealed virtual override IDependentKeyValueFactory`1<TKey> Microsoft.EntityFrameworkCore.Metadata.IIndex.GetNullableValueFactory();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__16_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__16_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.RuntimeKey : AnnotatableBase {
    private Func`2<bool, IIdentityMap> _identityMapFactory;
    private object _principalKeyValueFactory;
    [CompilerGeneratedAttribute]
private IReadOnlyList`1<RuntimeProperty> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<RuntimeForeignKey> <ReferencingForeignKeys>k__BackingField;
    private static MethodInfo _createPrincipalKeyValueFactoryMethod;
    public IReadOnlyList`1<RuntimeProperty> Properties { get; }
    public RuntimeEntityType DeclaringEntityType { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[EntityFrameworkInternalAttribute]
public ISet`1<RuntimeForeignKey> ReferencingForeignKeys { get; public set; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IReadOnlyList`1<IReadOnlyProperty> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey.Properties { get; }
    private IReadOnlyList`1<IProperty> Microsoft.EntityFrameworkCore.Metadata.IKey.Properties { get; }
    private IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey.DeclaringEntityType { get; }
    private IEntityType Microsoft.EntityFrameworkCore.Metadata.IKey.DeclaringEntityType { get; }
    public Func`2<bool, IIdentityMap> IdentityMapFactory { get; }
    [EntityFrameworkInternalAttribute]
public RuntimeKey(IReadOnlyList`1<RuntimeProperty> properties);
    private static RuntimeKey();
    [CompilerGeneratedAttribute]
public virtual IReadOnlyList`1<RuntimeProperty> get_Properties();
    [DebuggerStepThroughAttribute]
public virtual RuntimeEntityType get_DeclaringEntityType();
    [CompilerGeneratedAttribute]
public virtual ISet`1<RuntimeForeignKey> get_ReferencingForeignKeys();
    [CompilerGeneratedAttribute]
public virtual void set_ReferencingForeignKeys(ISet`1<RuntimeForeignKey> value);
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IReadOnlyProperty> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey.get_Properties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyList`1<IProperty> Microsoft.EntityFrameworkCore.Metadata.IKey.get_Properties();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IKey.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyForeignKey> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyKey.GetReferencingForeignKeys();
    public virtual Func`2<bool, IIdentityMap> get_IdentityMapFactory();
    private sealed virtual override IPrincipalKeyValueFactory`1<TKey> Microsoft.EntityFrameworkCore.Metadata.IKey.GetPrincipalKeyValueFactory();
    private sealed virtual override IPrincipalKeyValueFactory Microsoft.EntityFrameworkCore.Metadata.IKey.GetPrincipalKeyValueFactory();
    private IPrincipalKeyValueFactory`1<TKey> CreatePrincipalKeyValueFactory();
    private sealed virtual override Func`2<bool, IIdentityMap> Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeKey.GetIdentityMapFactory();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__14_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__14_1();
}
public class Microsoft.EntityFrameworkCore.Metadata.RuntimeModel : AnnotatableBase {
    private SortedDictionary`2<string, RuntimeEntityType> _entityTypes;
    private Dictionary`2<Type, SortedSet`1<RuntimeEntityType>> _sharedTypes;
    private Dictionary`2<Type, RuntimeTypeMappingConfiguration> _typeConfigurations;
    private bool _skipDetectChanges;
    private ConcurrentDictionary`2<Type, PropertyInfo> _indexerPropertyInfoMap;
    private ConcurrentDictionary`2<Type, string> _clrTypeNameMap;
    [NullableAttribute("2")]
private object Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeModel.RelationalModel { get; }
    [NullableAttribute("1")]
[EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private bool Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeModel.SkipDetectChanges { get; }
    public virtual void SetSkipDetectChanges(bool skipDetectChanges);
    [NullableContextAttribute("2")]
public virtual RuntimeEntityType AddEntityType(string name, Type type, RuntimeEntityType baseType, bool sharedClrType, string discriminatorProperty, ChangeTrackingStrategy changeTrackingStrategy, PropertyInfo indexerPropertyInfo, bool propertyBag, object discriminatorValue);
    [NullableContextAttribute("1")]
public virtual RuntimeEntityType FindEntityType(string name);
    private RuntimeEntityType FindEntityType(Type type);
    private RuntimeEntityType FindEntityType(string name, string definingNavigationName, IReadOnlyEntityType definingEntityType);
    private IEnumerable`1<RuntimeEntityType> FindEntityTypes(Type type);
    [NullableContextAttribute("1")]
public virtual RuntimeTypeMappingConfiguration AddTypeMappingConfiguration(Type clrType, Nullable`1<int> maxLength, Nullable`1<bool> unicode, Nullable`1<int> precision, Nullable`1<int> scale, Type providerPropertyType, ValueConverter valueConverter);
    private string GetDisplayName(Type type);
    private PropertyInfo FindIndexerPropertyInfo(Type type);
    private sealed virtual override object Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeModel.get_RelationalModel();
    [NullableContextAttribute("1")]
public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeModel.get_SkipDetectChanges();
    [DebuggerStepThroughAttribute]
private sealed virtual override PropertyAccessMode Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.GetPropertyAccessMode();
    [DebuggerStepThroughAttribute]
private sealed virtual override ChangeTrackingStrategy Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.GetChangeTrackingStrategy();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IModel.IsIndexerMethod(MethodInfo methodInfo);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(string name);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType(Type type);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(Type type);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType(string name, string definingNavigationName, IReadOnlyEntityType definingEntityType);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityType(string name, string definingNavigationName, IEntityType definingEntityType);
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityType(Type type, string definingNavigationName, IReadOnlyEntityType definingEntityType);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyEntityType> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.GetEntityTypes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IEntityType> Microsoft.EntityFrameworkCore.Metadata.IModel.GetEntityTypes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyEntityType> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.FindEntityTypes(Type type);
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IEntityType> Microsoft.EntityFrameworkCore.Metadata.IModel.FindEntityTypes(Type type);
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyModel.IsShared(Type type);
    private sealed virtual override IEnumerable`1<ITypeMappingConfiguration> Microsoft.EntityFrameworkCore.Metadata.IModel.GetTypeMappingConfigurations();
    private sealed virtual override ITypeMappingConfiguration Microsoft.EntityFrameworkCore.Metadata.IModel.FindTypeMappingConfiguration(Type propertyType);
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__18_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__18_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.RuntimeNavigation : RuntimePropertyBase {
    private IClrCollectionAccessor _collectionAccessor;
    private bool _collectionAccessorInitialized;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimeForeignKey <ForeignKey>k__BackingField;
    [DynamicallyAccessedMembersAttribute("9831")]
protected Type ClrType { get; }
    public RuntimeForeignKey ForeignKey { get; }
    public RuntimeEntityType DeclaringEntityType { get; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IReadOnlyForeignKey Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigation.ForeignKey { get; }
    [EntityFrameworkInternalAttribute]
public RuntimeNavigation(string name, Type clrType, PropertyInfo propertyInfo, FieldInfo fieldInfo, RuntimeForeignKey foreignKey, PropertyAccessMode propertyAccessMode, bool eagerLoaded);
    [CompilerGeneratedAttribute]
protected virtual Type get_ClrType();
    [CompilerGeneratedAttribute]
public virtual RuntimeForeignKey get_ForeignKey();
    [DebuggerStepThroughAttribute]
public virtual RuntimeEntityType get_DeclaringEntityType();
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyForeignKey Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigation.get_ForeignKey();
    [DebuggerStepThroughAttribute]
private sealed virtual override IClrCollectionAccessor Microsoft.EntityFrameworkCore.Metadata.INavigationBase.GetCollectionAccessor();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__13_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__13_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.RuntimeProperty : RuntimePropertyBase {
    private bool _isNullable;
    private ValueGenerated _valueGenerated;
    private bool _isConcurrencyToken;
    private PropertySaveBehavior _beforeSaveBehavior;
    private PropertySaveBehavior _afterSaveBehavior;
    private Func`3<IProperty, IEntityType, ValueGenerator> _valueGeneratorFactory;
    private ValueConverter _valueConverter;
    private bool _explicitValueComparer;
    private ValueComparer _valueComparer;
    private bool _explicitKeyValueComparer;
    private ValueComparer _keyValueComparer;
    private ValueComparer _providerValueComparer;
    private CoreTypeMapping _typeMapping;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimeEntityType <DeclaringEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimeKey <PrimaryKey>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RuntimeKey> <Keys>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RuntimeForeignKey> <ForeignKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<RuntimeIndex> <Indexes>k__BackingField;
    [DynamicallyAccessedMembersAttribute("9831")]
protected Type ClrType { get; }
    public RuntimeEntityType DeclaringEntityType { get; }
    [NullableAttribute("2")]
[EntityFrameworkInternalAttribute]
public RuntimeKey PrimaryKey { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[EntityFrameworkInternalAttribute]
public List`1<RuntimeKey> Keys { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[EntityFrameworkInternalAttribute]
public List`1<RuntimeForeignKey> ForeignKeys { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[EntityFrameworkInternalAttribute]
public List`1<RuntimeIndex> Indexes { get; public set; }
    public CoreTypeMapping TypeMapping { get; public set; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsNullable { get; }
    private ValueGenerated Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.ValueGenerated { get; }
    private bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsConcurrencyToken { get; }
    private IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.DeclaringEntityType { get; }
    private IEntityType Microsoft.EntityFrameworkCore.Metadata.IProperty.DeclaringEntityType { get; }
    [NullableContextAttribute("2")]
[EntityFrameworkInternalAttribute]
public RuntimeProperty(string name, Type clrType, PropertyInfo propertyInfo, FieldInfo fieldInfo, RuntimeEntityType declaringEntityType, PropertyAccessMode propertyAccessMode, bool nullable, bool concurrencyToken, ValueGenerated valueGenerated, PropertySaveBehavior beforeSaveBehavior, PropertySaveBehavior afterSaveBehavior, Nullable`1<int> maxLength, Nullable`1<bool> unicode, Nullable`1<int> precision, Nullable`1<int> scale, Type providerClrType, Func`3<IProperty, IEntityType, ValueGenerator> valueGeneratorFactory, ValueConverter valueConverter, ValueComparer valueComparer, ValueComparer keyValueComparer, ValueComparer providerValueComparer, CoreTypeMapping typeMapping);
    [CompilerGeneratedAttribute]
protected virtual Type get_ClrType();
    [CompilerGeneratedAttribute]
public virtual RuntimeEntityType get_DeclaringEntityType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual RuntimeKey get_PrimaryKey();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_PrimaryKey(RuntimeKey value);
    [CompilerGeneratedAttribute]
public virtual List`1<RuntimeKey> get_Keys();
    [CompilerGeneratedAttribute]
public virtual void set_Keys(List`1<RuntimeKey> value);
    private IEnumerable`1<RuntimeKey> GetContainingKeys();
    [CompilerGeneratedAttribute]
public virtual List`1<RuntimeForeignKey> get_ForeignKeys();
    [CompilerGeneratedAttribute]
public virtual void set_ForeignKeys(List`1<RuntimeForeignKey> value);
    private IEnumerable`1<RuntimeForeignKey> GetContainingForeignKeys();
    [CompilerGeneratedAttribute]
public virtual List`1<RuntimeIndex> get_Indexes();
    [CompilerGeneratedAttribute]
public virtual void set_Indexes(List`1<RuntimeIndex> value);
    private IEnumerable`1<RuntimeIndex> GetContainingIndexes();
    public virtual CoreTypeMapping get_TypeMapping();
    public virtual void set_TypeMapping(CoreTypeMapping value);
    private ValueComparer GetValueComparer();
    private ValueComparer GetKeyValueComparer();
    private ValueComparer GetValueComparer(HashSet`1<IReadOnlyProperty> checkedProperties);
    private ValueComparer GetKeyValueComparer(HashSet`1<IReadOnlyProperty> checkedProperties);
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.get_IsNullable();
    [DebuggerStepThroughAttribute]
private sealed virtual override ValueGenerated Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.get_ValueGenerated();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.get_IsConcurrencyToken();
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<int> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetMaxLength();
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<bool> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsUnicode();
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<int> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetPrecision();
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<int> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetScale();
    [DebuggerStepThroughAttribute]
private sealed virtual override PropertySaveBehavior Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetBeforeSaveBehavior();
    [DebuggerStepThroughAttribute]
private sealed virtual override PropertySaveBehavior Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetAfterSaveBehavior();
    [DebuggerStepThroughAttribute]
private sealed virtual override Func`3<IProperty, IEntityType, ValueGenerator> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueGeneratorFactory();
    [DebuggerStepThroughAttribute]
private sealed virtual override ValueConverter Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueConverter();
    [DebuggerStepThroughAttribute]
private sealed virtual override Type Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetProviderClrType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IProperty.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override CoreTypeMapping Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.FindTypeMapping();
    [DebuggerStepThroughAttribute]
private sealed virtual override ValueComparer Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetValueComparer();
    [DebuggerStepThroughAttribute]
private sealed virtual override ValueComparer Microsoft.EntityFrameworkCore.Metadata.IProperty.GetValueComparer();
    [DebuggerStepThroughAttribute]
private sealed virtual override ValueComparer Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetKeyValueComparer();
    [DebuggerStepThroughAttribute]
private sealed virtual override ValueComparer Microsoft.EntityFrameworkCore.Metadata.IProperty.GetKeyValueComparer();
    [DebuggerStepThroughAttribute]
private sealed virtual override ValueComparer Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetProviderValueComparer();
    [DebuggerStepThroughAttribute]
private sealed virtual override ValueComparer Microsoft.EntityFrameworkCore.Metadata.IProperty.GetProviderValueComparer();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsForeignKey();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyForeignKey> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetContainingForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IForeignKey> Microsoft.EntityFrameworkCore.Metadata.IProperty.GetContainingForeignKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsIndex();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyIndex> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetContainingIndexes();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IIndex> Microsoft.EntityFrameworkCore.Metadata.IProperty.GetContainingIndexes();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.IsKey();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IReadOnlyKey> Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.GetContainingKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEnumerable`1<IKey> Microsoft.EntityFrameworkCore.Metadata.IProperty.GetContainingKeys();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyKey Microsoft.EntityFrameworkCore.Metadata.IReadOnlyProperty.FindContainingPrimaryKey();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__48_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__48_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Metadata.RuntimePropertyBase : AnnotatableBase {
    private PropertyInfo _propertyInfo;
    private FieldInfo _fieldInfo;
    private PropertyAccessMode _propertyAccessMode;
    private IClrPropertyGetter _getter;
    private IClrPropertySetter _setter;
    private IClrPropertySetter _materializationSetter;
    private PropertyAccessors _accessors;
    private PropertyIndexes _indexes;
    private IComparer`1<IUpdateEntry> _currentValueComparer;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    public RuntimeEntityType DeclaringEntityType { get; }
    [DynamicallyAccessedMembersAttribute("9831")]
protected Type ClrType { get; }
    [NullableAttribute("2")]
private PropertyInfo Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase.PropertyInfo { get; }
    [NullableAttribute("2")]
private FieldInfo Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase.FieldInfo { get; }
    private IReadOnlyTypeBase Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase.DeclaringType { get; }
    private IClrPropertySetter Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimePropertyBase.Setter { get; }
    private IClrPropertySetter Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimePropertyBase.MaterializationSetter { get; }
    private PropertyAccessors Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimePropertyBase.Accessors { get; }
    private PropertyIndexes Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimePropertyBase.PropertyIndexes { get; private set; }
    [DynamicallyAccessedMembersAttribute("9831")]
private Type Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase.ClrType { get; }
    [NullableContextAttribute("2")]
[EntityFrameworkInternalAttribute]
protected RuntimePropertyBase(string name, PropertyInfo propertyInfo, FieldInfo fieldInfo, PropertyAccessMode propertyAccessMode);
    [CompilerGeneratedAttribute]
[DebuggerStepThroughAttribute]
public virtual string get_Name();
    public abstract virtual RuntimeEntityType get_DeclaringEntityType();
    protected abstract virtual Type get_ClrType();
    [DebuggerStepThroughAttribute]
private sealed virtual override PropertyInfo Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase.get_PropertyInfo();
    [DebuggerStepThroughAttribute]
private sealed virtual override FieldInfo Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase.get_FieldInfo();
    [DebuggerStepThroughAttribute]
private sealed virtual override PropertyAccessMode Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase.GetPropertyAccessMode();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyTypeBase Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase.get_DeclaringType();
    private sealed virtual override IClrPropertySetter Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimePropertyBase.get_Setter();
    private sealed virtual override IClrPropertySetter Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimePropertyBase.get_MaterializationSetter();
    private sealed virtual override PropertyAccessors Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimePropertyBase.get_Accessors();
    private sealed virtual override PropertyIndexes Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimePropertyBase.get_PropertyIndexes();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimePropertyBase.set_PropertyIndexes(PropertyIndexes value);
    [DebuggerStepThroughAttribute]
private sealed virtual override Type Microsoft.EntityFrameworkCore.Metadata.IReadOnlyPropertyBase.get_ClrType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IClrPropertyGetter Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.GetGetter();
    [DebuggerStepThroughAttribute]
private sealed virtual override IComparer`1<IUpdateEntry> Microsoft.EntityFrameworkCore.Metadata.IPropertyBase.GetCurrentValueComparer();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.RuntimeServiceProperty : RuntimePropertyBase {
    private ServiceParameterBinding _parameterBinding;
    [CompilerGeneratedAttribute]
private RuntimeEntityType <DeclaringEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    public RuntimeEntityType DeclaringEntityType { get; }
    [DynamicallyAccessedMembersAttribute("9831")]
protected Type ClrType { get; }
    public ServiceParameterBinding ParameterBinding { get; public set; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyServiceProperty.DeclaringEntityType { get; }
    private IEntityType Microsoft.EntityFrameworkCore.Metadata.IServiceProperty.DeclaringEntityType { get; }
    [EntityFrameworkInternalAttribute]
public RuntimeServiceProperty(string name, PropertyInfo propertyInfo, FieldInfo fieldInfo, RuntimeEntityType declaringEntityType, PropertyAccessMode propertyAccessMode);
    [CompilerGeneratedAttribute]
public virtual RuntimeEntityType get_DeclaringEntityType();
    [CompilerGeneratedAttribute]
protected virtual Type get_ClrType();
    public virtual ServiceParameterBinding get_ParameterBinding();
    [DebuggerStepThroughAttribute]
public virtual void set_ParameterBinding(ServiceParameterBinding value);
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyServiceProperty.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IEntityType Microsoft.EntityFrameworkCore.Metadata.IServiceProperty.get_DeclaringEntityType();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__13_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__13_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.RuntimeSkipNavigation : RuntimePropertyBase {
    private RuntimeForeignKey _foreignKey;
    private bool _isOnDependent;
    private bool _isCollection;
    private IClrCollectionAccessor _collectionAccessor;
    private bool _collectionAccessorInitialized;
    private ICollectionLoader _manyToManyLoader;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimeEntityType <DeclaringEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimeEntityType <TargetEntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimeSkipNavigation <Inverse>k__BackingField;
    [DynamicallyAccessedMembersAttribute("9831")]
protected Type ClrType { get; }
    public RuntimeEntityType DeclaringEntityType { get; }
    public RuntimeEntityType TargetEntityType { get; }
    [NullableAttribute("2")]
public RuntimeSkipNavigation Inverse { get; public set; }
    public DebugView DebugView { get; }
    private IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigationBase.DeclaringEntityType { get; }
    private IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigationBase.TargetEntityType { get; }
    private IReadOnlyForeignKey Microsoft.EntityFrameworkCore.Metadata.IReadOnlySkipNavigation.ForeignKey { get; }
    private IReadOnlySkipNavigation Microsoft.EntityFrameworkCore.Metadata.IReadOnlySkipNavigation.Inverse { get; }
    private bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlySkipNavigation.IsOnDependent { get; }
    private bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigationBase.IsCollection { get; }
    [EntityFrameworkInternalAttribute]
public RuntimeSkipNavigation(string name, Type clrType, PropertyInfo propertyInfo, FieldInfo fieldInfo, RuntimeEntityType declaringEntityType, RuntimeEntityType targetEntityType, RuntimeForeignKey foreignKey, bool collection, bool onDependent, PropertyAccessMode propertyAccessMode, bool eagerLoaded);
    [CompilerGeneratedAttribute]
protected virtual Type get_ClrType();
    [CompilerGeneratedAttribute]
public virtual RuntimeEntityType get_DeclaringEntityType();
    [CompilerGeneratedAttribute]
public virtual RuntimeEntityType get_TargetEntityType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual RuntimeSkipNavigation get_Inverse();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual void set_Inverse(RuntimeSkipNavigation value);
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigationBase.get_DeclaringEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigationBase.get_TargetEntityType();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlyForeignKey Microsoft.EntityFrameworkCore.Metadata.IReadOnlySkipNavigation.get_ForeignKey();
    [DebuggerStepThroughAttribute]
private sealed virtual override IReadOnlySkipNavigation Microsoft.EntityFrameworkCore.Metadata.IReadOnlySkipNavigation.get_Inverse();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlySkipNavigation.get_IsOnDependent();
    [DebuggerStepThroughAttribute]
private sealed virtual override bool Microsoft.EntityFrameworkCore.Metadata.IReadOnlyNavigationBase.get_IsCollection();
    private sealed virtual override IClrCollectionAccessor Microsoft.EntityFrameworkCore.Metadata.INavigationBase.GetCollectionAccessor();
    private sealed virtual override ICollectionLoader Microsoft.EntityFrameworkCore.Metadata.Internal.IRuntimeSkipNavigation.GetManyToManyLoader();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__22_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__22_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.RuntimeTrigger : AnnotatableBase {
    [CompilerGeneratedAttribute]
private string <ModelName>k__BackingField;
    [CompilerGeneratedAttribute]
private IEntityType <EntityType>k__BackingField;
    public string ModelName { get; }
    public IEntityType EntityType { get; }
    [EntityFrameworkInternalAttribute]
public DebugView DebugView { get; }
    private IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTrigger.EntityType { get; }
    public RuntimeTrigger(RuntimeEntityType entityType, string modelName);
    [CompilerGeneratedAttribute]
public virtual string get_ModelName();
    [CompilerGeneratedAttribute]
public virtual IEntityType get_EntityType();
    public virtual string ToString();
    public virtual DebugView get_DebugView();
    private sealed virtual override IReadOnlyEntityType Microsoft.EntityFrameworkCore.Metadata.IReadOnlyTrigger.get_EntityType();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__9_0();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__9_1();
}
public class Microsoft.EntityFrameworkCore.Metadata.RuntimeTypeMappingConfiguration : AnnotatableBase {
    private ValueConverter _valueConverter;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [NullableAttribute("1")]
public Type ClrType { get; }
    [NullableContextAttribute("2")]
[EntityFrameworkInternalAttribute]
public RuntimeTypeMappingConfiguration(Type clrType, Nullable`1<int> maxLength, Nullable`1<bool> unicode, Nullable`1<int> precision, Nullable`1<int> scale, Type providerClrType, ValueConverter valueConverter);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public sealed virtual Type get_ClrType();
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<int> Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration.GetMaxLength();
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<bool> Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration.IsUnicode();
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<int> Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration.GetPrecision();
    [DebuggerStepThroughAttribute]
private sealed virtual override Nullable`1<int> Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration.GetScale();
    [DebuggerStepThroughAttribute]
private sealed virtual override ValueConverter Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration.GetValueConverter();
    [DebuggerStepThroughAttribute]
private sealed virtual override Type Microsoft.EntityFrameworkCore.Metadata.ITypeMappingConfiguration.GetProviderClrType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBinding : ParameterBinding {
    private Func`4<MaterializationContext, IEntityType, object, object> _serviceDelegate;
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    public Type ServiceType { get; }
    public Func`4<MaterializationContext, IEntityType, object, object> ServiceDelegate { get; }
    protected ServiceParameterBinding(Type parameterType, Type serviceType, IPropertyBase[] serviceProperties);
    [CompilerGeneratedAttribute]
public virtual Type get_ServiceType();
    public virtual Expression BindToParameter(ParameterBindingInfo bindingInfo);
    public abstract virtual Expression BindToParameter(Expression materializationExpression, Expression entityTypeExpression);
    public virtual Func`4<MaterializationContext, IEntityType, object, object> get_ServiceDelegate();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Metadata.ServiceParameterBindingFactory : object {
    private Type _serviceType;
    public ServiceParameterBindingFactory(Type serviceType);
    public virtual bool CanBind(Type parameterType, string parameterName);
    public virtual ParameterBinding Bind(IMutableEntityType entityType, Type parameterType, string parameterName);
    public virtual ParameterBinding Bind(IConventionEntityType entityType, Type parameterType, string parameterName);
    public virtual ParameterBinding Bind(IReadOnlyEntityType entityType, Type parameterType, string parameterName);
    [CompilerGeneratedAttribute]
private bool <Bind>b__5_0(IPropertyBase p);
}
public class Microsoft.EntityFrameworkCore.Metadata.SimpleModelFactory : object {
    [NullableContextAttribute("1")]
public virtual IMutableModel Create();
}
[FlagsAttribute]
public enum Microsoft.EntityFrameworkCore.Metadata.ValueGenerated : Enum {
    public int value__;
    public static ValueGenerated Never;
    public static ValueGenerated OnAdd;
    public static ValueGenerated OnUpdate;
    public static ValueGenerated OnUpdateSometimes;
    public static ValueGenerated OnAddOrUpdate;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ModelBuilder : object {
    private InternalModelBuilder _builder;
    public IMutableModel Model { get; }
    private IConventionModelBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder>.Instance { get; }
    private InternalModelBuilder Builder { get; }
    public ModelBuilder(ConventionSet conventions);
    public ModelBuilder(ConventionSet conventions, ModelDependencies modelDependencies);
    [NullableContextAttribute("2")]
[EntityFrameworkInternalAttribute]
public ModelBuilder(ConventionSet conventions, ModelDependencies modelDependencies, ModelConfiguration modelConfiguration);
    [EntityFrameworkInternalAttribute]
public ModelBuilder(IMutableModel model);
    public virtual IMutableModel get_Model();
    public virtual ModelBuilder HasAnnotation(string annotation, object value);
    private sealed virtual override IConventionModelBuilder Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure<Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder>.get_Instance();
    public virtual EntityTypeBuilder`1<TEntity> Entity();
    public virtual EntityTypeBuilder`1<TEntity> SharedTypeEntity(string name);
    public virtual EntityTypeBuilder Entity(Type type);
    public virtual EntityTypeBuilder Entity(string name);
    public virtual EntityTypeBuilder SharedTypeEntity(string name, Type type);
    public virtual ModelBuilder Entity(Action`1<EntityTypeBuilder`1<TEntity>> buildAction);
    public virtual ModelBuilder SharedTypeEntity(string name, Action`1<EntityTypeBuilder`1<TEntity>> buildAction);
    public virtual ModelBuilder Entity(Type type, Action`1<EntityTypeBuilder> buildAction);
    public virtual ModelBuilder Entity(string name, Action`1<EntityTypeBuilder> buildAction);
    public virtual ModelBuilder SharedTypeEntity(string name, Type type, Action`1<EntityTypeBuilder> buildAction);
    public virtual ModelBuilder Ignore();
    public virtual ModelBuilder Ignore(Type type);
    public virtual ModelBuilder Ignore(string typeName);
    public virtual ModelBuilder ApplyConfiguration(IEntityTypeConfiguration`1<TEntity> configuration);
    [RequiresUnreferencedCodeAttribute("This API isn't safe for trimming, since it searches for types in an arbitrary assembly.")]
public virtual ModelBuilder ApplyConfigurationsFromAssembly(Assembly assembly, Func`2<Type, bool> predicate);
    public virtual OwnedEntityTypeBuilder`1<T> Owned();
    public virtual OwnedEntityTypeBuilder Owned(Type type);
    public virtual ModelBuilder HasChangeTrackingStrategy(ChangeTrackingStrategy changeTrackingStrategy);
    public virtual ModelBuilder UsePropertyAccessMode(PropertyAccessMode propertyAccessMode);
    public virtual IModel FinalizeModel();
    private InternalModelBuilder get_Builder();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ModelConfigurationBuilder : object {
    private ModelConfiguration _modelConfiguration;
    private ConventionSet _conventions;
    private ConventionSetBuilder _conventionSetBuilder;
    [EntityFrameworkInternalAttribute]
protected ModelConfiguration ModelConfiguration { get; }
    public ConventionSetBuilder Conventions { get; }
    [EntityFrameworkInternalAttribute]
public ModelConfigurationBuilder(ConventionSet conventions, IServiceProvider serviceProvider);
    protected virtual ModelConfiguration get_ModelConfiguration();
    public virtual ConventionSetBuilder get_Conventions();
    public virtual ModelConfigurationBuilder IgnoreAny();
    public virtual ModelConfigurationBuilder IgnoreAny(Type type);
    public virtual PropertiesConfigurationBuilder`1<TProperty> Properties();
    public virtual ModelConfigurationBuilder Properties(Action`1<PropertiesConfigurationBuilder`1<TProperty>> buildAction);
    public virtual PropertiesConfigurationBuilder Properties(Type propertyType);
    public virtual ModelConfigurationBuilder Properties(Type propertyType, Action`1<PropertiesConfigurationBuilder> buildAction);
    public virtual TypeMappingConfigurationBuilder`1<TScalar> DefaultTypeMapping();
    public virtual ModelConfigurationBuilder DefaultTypeMapping(Action`1<TypeMappingConfigurationBuilder`1<TScalar>> buildAction);
    public virtual TypeMappingConfigurationBuilder DefaultTypeMapping(Type scalarType);
    public virtual ModelConfigurationBuilder DefaultTypeMapping(Type scalarType, Action`1<TypeMappingConfigurationBuilder> buildAction);
    public virtual ModelBuilder CreateModelBuilder(ModelDependencies modelDependencies);
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("2")]
[EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ModelCreationDependencies : object {
    [CompilerGeneratedAttribute]
private IModelSource <ModelSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IConventionSetBuilder <ConventionSetBuilder>k__BackingField;
    [CompilerGeneratedAttribute]
private ModelDependencies <ModelDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private IModelRuntimeInitializer <ModelRuntimeInitializer>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Validation> <ValidationLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IModelSource ModelSource { get; public set; }
    public IConventionSetBuilder ConventionSetBuilder { get; public set; }
    public ModelDependencies ModelDependencies { get; public set; }
    public IModelRuntimeInitializer ModelRuntimeInitializer { get; public set; }
    public IDiagnosticsLogger`1<Validation> ValidationLogger { get; public set; }
    [EntityFrameworkInternalAttribute]
public ModelCreationDependencies(IModelSource modelSource, IConventionSetBuilder conventionSetBuilder, ModelDependencies modelDependencies, IModelRuntimeInitializer modelRuntimeInitializer, IDiagnosticsLogger`1<Validation> validationLogger);
    [CompilerGeneratedAttribute]
private ModelCreationDependencies(ModelCreationDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IModelSource get_ModelSource();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModelSource(IModelSource value);
    [CompilerGeneratedAttribute]
public IConventionSetBuilder get_ConventionSetBuilder();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ConventionSetBuilder(IConventionSetBuilder value);
    [CompilerGeneratedAttribute]
public ModelDependencies get_ModelDependencies();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModelDependencies(ModelDependencies value);
    [CompilerGeneratedAttribute]
public IModelRuntimeInitializer get_ModelRuntimeInitializer();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ModelRuntimeInitializer(IModelRuntimeInitializer value);
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Validation> get_ValidationLogger();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ValidationLogger(IDiagnosticsLogger`1<Validation> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ModelCreationDependencies left, ModelCreationDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ModelCreationDependencies left, ModelCreationDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ModelCreationDependencies other);
    [CompilerGeneratedAttribute]
public ModelCreationDependencies <Clone>$();
}
[ExtensionAttribute]
[ObsoleteAttribute("Use IMutableEntityType")]
public static class Microsoft.EntityFrameworkCore.MutableEntityTypeExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
[ObsoleteAttribute("Use InMemoryEntityTypeExtensions.SetInMemoryQuery")]
public static void SetDefiningQuery(IMutableEntityType entityType, LambdaExpression definingQuery);
}
public enum Microsoft.EntityFrameworkCore.PropertyAccessMode : Enum {
    public int value__;
    public static PropertyAccessMode Field;
    public static PropertyAccessMode FieldDuringConstruction;
    public static PropertyAccessMode Property;
    public static PropertyAccessMode PreferField;
    public static PropertyAccessMode PreferFieldDuringConstruction;
    public static PropertyAccessMode PreferProperty;
}
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.PropertyBaseExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string Format(IEnumerable`1<IReadOnlyPropertyBase> properties, bool includeTypes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGenerator : object {
    [CompilerGeneratedAttribute]
private CompiledQueryCacheKeyGeneratorDependencies <Dependencies>k__BackingField;
    protected CompiledQueryCacheKeyGeneratorDependencies Dependencies { get; }
    public CompiledQueryCacheKeyGenerator(CompiledQueryCacheKeyGeneratorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual CompiledQueryCacheKeyGeneratorDependencies get_Dependencies();
    public virtual object GenerateCacheKey(Expression query, bool async);
    protected CompiledQueryCacheKey GenerateCacheKeyCore(Expression query, bool async);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGeneratorDependencies : object {
    [CompilerGeneratedAttribute]
private IModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRetryingExecutionStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IModel Model { get; public set; }
    public ICurrentDbContext CurrentContext { get; public set; }
    public bool IsRetryingExecutionStrategy { get; public set; }
    [EntityFrameworkInternalAttribute]
public CompiledQueryCacheKeyGeneratorDependencies(IModel model, ICurrentDbContext currentContext, IExecutionStrategy executionStrategy);
    [CompilerGeneratedAttribute]
private CompiledQueryCacheKeyGeneratorDependencies(CompiledQueryCacheKeyGeneratorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IModel get_Model();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Model(IModel value);
    [CompilerGeneratedAttribute]
public ICurrentDbContext get_CurrentContext();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CurrentContext(ICurrentDbContext value);
    [CompilerGeneratedAttribute]
public bool get_IsRetryingExecutionStrategy();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsRetryingExecutionStrategy(bool value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(CompiledQueryCacheKeyGeneratorDependencies left, CompiledQueryCacheKeyGeneratorDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(CompiledQueryCacheKeyGeneratorDependencies left, CompiledQueryCacheKeyGeneratorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(CompiledQueryCacheKeyGeneratorDependencies other);
    [CompilerGeneratedAttribute]
public CompiledQueryCacheKeyGeneratorDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.EntityQueryRootExpression : QueryRootExpression {
    [CompilerGeneratedAttribute]
private IEntityType <EntityType>k__BackingField;
    public IEntityType EntityType { get; }
    public ExpressionType NodeType { get; }
    public bool CanReduce { get; }
    public EntityQueryRootExpression(IAsyncQueryProvider asyncQueryProvider, IEntityType entityType);
    public EntityQueryRootExpression(IEntityType entityType);
    [CompilerGeneratedAttribute]
public virtual IEntityType get_EntityType();
    public virtual Expression DetachQueryProvider();
    public virtual EntityQueryRootExpression UpdateEntityType(IEntityType entityType);
    public virtual ExpressionType get_NodeType();
    public virtual bool get_CanReduce();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    protected virtual void Print(ExpressionPrinter expressionPrinter);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.EntityShaperExpression : Expression {
    private static MethodInfo CreateUnableToDiscriminateExceptionMethod;
    [CompilerGeneratedAttribute]
private IEntityType <EntityType>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <ValueBufferExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private LambdaExpression <MaterializationCondition>k__BackingField;
    public IEntityType EntityType { get; }
    public Expression ValueBufferExpression { get; }
    public bool IsNullable { get; }
    public LambdaExpression MaterializationCondition { get; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public EntityShaperExpression(IEntityType entityType, Expression valueBufferExpression, bool nullable);
    protected EntityShaperExpression(IEntityType entityType, Expression valueBufferExpression, bool nullable, LambdaExpression materializationCondition);
    private static EntityShaperExpression();
    [UsedImplicitlyAttribute]
private static Exception CreateUnableToDiscriminateException(IEntityType entityType, object discriminator);
    protected static Expression CreateUnableToDiscriminateExceptionExpression(IEntityType entityType, Expression discriminatorValue);
    protected virtual LambdaExpression GenerateMaterializationCondition(IEntityType entityType, bool nullable);
    [CompilerGeneratedAttribute]
public virtual IEntityType get_EntityType();
    [CompilerGeneratedAttribute]
public virtual Expression get_ValueBufferExpression();
    [CompilerGeneratedAttribute]
public virtual bool get_IsNullable();
    [CompilerGeneratedAttribute]
public virtual LambdaExpression get_MaterializationCondition();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual EntityShaperExpression WithEntityType(IEntityType entityType);
    public virtual EntityShaperExpression MakeNullable(bool nullable);
    public virtual EntityShaperExpression Update(Expression valueBufferExpression);
    public virtual Type get_Type();
    public sealed virtual ExpressionType get_NodeType();
    private sealed virtual override void Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(ExpressionPrinter expressionPrinter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.EvaluatableExpressionFilter : object {
    private static PropertyInfo DateTimeNow;
    private static PropertyInfo DateTimeUtcNow;
    private static PropertyInfo DateTimeToday;
    private static PropertyInfo DateTimeOffsetNow;
    private static PropertyInfo DateTimeOffsetUtcNow;
    private static MethodInfo GuidNewGuid;
    private static MethodInfo RandomNextNoArgs;
    private static MethodInfo RandomNextOneArg;
    private static MethodInfo RandomNextTwoArgs;
    [CompilerGeneratedAttribute]
private EvaluatableExpressionFilterDependencies <Dependencies>k__BackingField;
    protected EvaluatableExpressionFilterDependencies Dependencies { get; }
    public EvaluatableExpressionFilter(EvaluatableExpressionFilterDependencies dependencies);
    private static EvaluatableExpressionFilter();
    [CompilerGeneratedAttribute]
protected virtual EvaluatableExpressionFilterDependencies get_Dependencies();
    public virtual bool IsEvaluatableExpression(Expression expression, IModel model);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.EvaluatableExpressionFilterDependencies : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<IEvaluatableExpressionFilterPlugin> <Plugins>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IEnumerable`1<IEvaluatableExpressionFilterPlugin> Plugins { get; public set; }
    [EntityFrameworkInternalAttribute]
public EvaluatableExpressionFilterDependencies(IEnumerable`1<IEvaluatableExpressionFilterPlugin> plugins);
    [CompilerGeneratedAttribute]
private EvaluatableExpressionFilterDependencies(EvaluatableExpressionFilterDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IEnumerable`1<IEvaluatableExpressionFilterPlugin> get_Plugins();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Plugins(IEnumerable`1<IEvaluatableExpressionFilterPlugin> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(EvaluatableExpressionFilterDependencies left, EvaluatableExpressionFilterDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(EvaluatableExpressionFilterDependencies left, EvaluatableExpressionFilterDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(EvaluatableExpressionFilterDependencies other);
    [CompilerGeneratedAttribute]
public EvaluatableExpressionFilterDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.ExpressionEqualityComparer : object {
    [CompilerGeneratedAttribute]
private static ExpressionEqualityComparer <Instance>k__BackingField;
    public static ExpressionEqualityComparer Instance { get; }
    private static ExpressionEqualityComparer();
    [CompilerGeneratedAttribute]
public static ExpressionEqualityComparer get_Instance();
    public sealed virtual int GetHashCode(Expression obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(Expression x, Expression y);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static void <GetHashCode>g__AddToHashIfNotNull|4_0(object t, <>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
private void <GetHashCode>g__AddExpressionToHashIfNotNull|4_1(Expression t, <>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
private void <GetHashCode>g__AddListToHash|4_2(IReadOnlyList`1<T> expressions, <>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
private void <GetHashCode>g__AddInitializersToHash|4_3(IReadOnlyList`1<ElementInit> initializers, <>c__DisplayClass4_0& );
    [CompilerGeneratedAttribute]
private void <GetHashCode>g__AddMemberBindingsToHash|4_4(IReadOnlyList`1<MemberBinding> memberBindings, <>c__DisplayClass4_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.ExpressionPrinter : ExpressionVisitor {
    private static List`1<string> SimpleMethods;
    private IndentedStringBuilder _stringBuilder;
    private Dictionary`2<ParameterExpression, string> _parametersInScope;
    private List`1<ParameterExpression> _namelessParameters;
    private List`1<ParameterExpression> _encounteredParameters;
    private Dictionary`2<ExpressionType, string> _binaryOperandMap;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CharacterLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Verbose>k__BackingField;
    private Nullable`1<int> CharacterLimit { get; private set; }
    private bool Verbose { get; private set; }
    private static ExpressionPrinter();
    [CompilerGeneratedAttribute]
private Nullable`1<int> get_CharacterLimit();
    [CompilerGeneratedAttribute]
private void set_CharacterLimit(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
private bool get_Verbose();
    [CompilerGeneratedAttribute]
private void set_Verbose(bool value);
    public virtual void VisitCollection(IReadOnlyCollection`1<T> items, Action`1<ExpressionPrinter> joinAction);
    public virtual ExpressionPrinter AppendLine();
    public virtual ExpressionVisitor AppendLine(string value);
    public virtual ExpressionPrinter AppendLines(string value, bool skipFinalNewline);
    public virtual IDisposable Indent();
    public virtual ExpressionPrinter Append(string value);
    public virtual string Print(Expression expression, Nullable`1<int> characterLimit);
    public virtual string PrintDebug(Expression expression);
    private string PrintCore(Expression expression, Nullable`1<int> characterLimit, bool verbose);
    public virtual string GenerateBinaryOperator(ExpressionType expressionType);
    [NullableContextAttribute("2")]
public virtual Expression Visit(Expression expression);
    protected virtual Expression VisitBinary(BinaryExpression binaryExpression);
    protected virtual Expression VisitBlock(BlockExpression blockExpression);
    protected virtual Expression VisitConditional(ConditionalExpression conditionalExpression);
    protected virtual Expression VisitConstant(ConstantExpression constantExpression);
    private void Print(object value);
    protected virtual Expression VisitGoto(GotoExpression gotoExpression);
    protected virtual Expression VisitLabel(LabelExpression labelExpression);
    protected virtual Expression VisitLambda(Expression`1<T> lambdaExpression);
    protected virtual Expression VisitMember(MemberExpression memberExpression);
    protected virtual Expression VisitMemberInit(MemberInitExpression memberInitExpression);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    protected virtual Expression VisitNew(NewExpression newExpression);
    protected virtual Expression VisitNewArray(NewArrayExpression newArrayExpression);
    protected virtual Expression VisitParameter(ParameterExpression parameterExpression);
    protected virtual Expression VisitUnary(UnaryExpression unaryExpression);
    protected virtual Expression VisitDefault(DefaultExpression defaultExpression);
    protected virtual Expression VisitTry(TryExpression tryExpression);
    protected virtual Expression VisitIndex(IndexExpression indexExpression);
    protected virtual Expression VisitTypeBinary(TypeBinaryExpression typeBinaryExpression);
    protected virtual Expression VisitSwitch(SwitchExpression switchExpression);
    protected virtual Expression VisitInvocation(InvocationExpression invocationExpression);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    private void VisitArguments(IReadOnlyList`1<Expression> arguments, Action`1<string> appendAction, string lastSeparator, bool areConnected);
    private static string PostProcess(string printedExpression);
    private void UnhandledExpressionType(Expression expression);
    [CompilerGeneratedAttribute]
internal static void <VisitMethodCall>g__PrintGenericArguments|36_0(MethodInfo method, IndentedStringBuilder stringBuilder);
    [CompilerGeneratedAttribute]
private void <VisitNewArray>b__38_0(string s);
    [CompilerGeneratedAttribute]
private void <VisitNewArray>b__38_1(string s);
    [CompilerGeneratedAttribute]
private void <VisitIndex>b__43_0(string s);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.GroupByShaperExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <KeySelector>k__BackingField;
    [CompilerGeneratedAttribute]
private ShapedQueryExpression <GroupingEnumerable>k__BackingField;
    public Expression KeySelector { get; }
    public ShapedQueryExpression GroupingEnumerable { get; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public GroupByShaperExpression(Expression keySelector, ShapedQueryExpression groupingEnumerable);
    [CompilerGeneratedAttribute]
public virtual Expression get_KeySelector();
    [CompilerGeneratedAttribute]
public virtual ShapedQueryExpression get_GroupingEnumerable();
    public virtual Type get_Type();
    public sealed virtual ExpressionType get_NodeType();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual GroupByShaperExpression Update(Expression keySelector, ShapedQueryExpression groupingEnumerable);
    public virtual void Print(ExpressionPrinter expressionPrinter);
}
public interface Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider {
    [NullableContextAttribute("1")]
public abstract virtual TResult ExecuteAsync(Expression expression, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.ICompiledQueryCacheKeyGenerator {
    public abstract virtual object GenerateCacheKey(Expression query, bool async);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.IEntityMaterializerSource {
    public abstract virtual Expression CreateMaterializeExpression(IEntityType entityType, string entityInstanceName, Expression materializationExpression);
    public abstract virtual Func`2<MaterializationContext, object> GetMaterializer(IEntityType entityType);
    public abstract virtual Func`2<MaterializationContext, object> GetEmptyMaterializer(IEntityType entityType);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.IEvaluatableExpressionFilter {
    public abstract virtual bool IsEvaluatableExpression(Expression expression, IModel model);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.IEvaluatableExpressionFilterPlugin {
    public abstract virtual bool IsEvaluatableExpression(Expression expression);
}
public interface Microsoft.EntityFrameworkCore.Query.IIncludableQueryable`2 {
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.INavigationExpansionExtensibilityHelper {
    public abstract virtual EntityQueryRootExpression CreateQueryRoot(IEntityType entityType, EntityQueryRootExpression source);
    public abstract virtual void ValidateQueryRootCreation(IEntityType entityType, EntityQueryRootExpression source);
    [NullableContextAttribute("2")]
public abstract virtual bool AreQueryRootsCompatible(EntityQueryRootExpression first, EntityQueryRootExpression second);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.IncludeExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <EntityExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <NavigationExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private INavigationBase <Navigation>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetLoaded>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Expression EntityExpression { get; }
    public Expression NavigationExpression { get; }
    public INavigationBase Navigation { get; }
    [EntityFrameworkInternalAttribute]
public bool SetLoaded { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public IncludeExpression(Expression entityExpression, Expression navigationExpression, INavigationBase navigation);
    [EntityFrameworkInternalAttribute]
public IncludeExpression(Expression entityExpression, Expression navigationExpression, INavigationBase navigation, bool setLoaded);
    [CompilerGeneratedAttribute]
public virtual Expression get_EntityExpression();
    [CompilerGeneratedAttribute]
public virtual Expression get_NavigationExpression();
    [CompilerGeneratedAttribute]
public virtual INavigationBase get_Navigation();
    [CompilerGeneratedAttribute]
public virtual bool get_SetLoaded();
    public sealed virtual ExpressionType get_NodeType();
    [CompilerGeneratedAttribute]
public virtual Type get_Type();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual IncludeExpression Update(Expression entityExpression, Expression navigationExpression);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(ExpressionPrinter expressionPrinter);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncEnumerableQuery`2 : CompiledQueryBase`2<TContext, IAsyncEnumerable`1<TResult>> {
    public CompiledAsyncEnumerableQuery`2(LambdaExpression queryExpression);
    public virtual IAsyncEnumerable`1<TResult> Execute(TContext context);
    public virtual IAsyncEnumerable`1<TResult> Execute(TContext context, TParam1 param1);
    public virtual IAsyncEnumerable`1<TResult> Execute(TContext context, TParam1 param1, TParam2 param2);
    public virtual IAsyncEnumerable`1<TResult> Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3);
    public virtual IAsyncEnumerable`1<TResult> Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4);
    public virtual IAsyncEnumerable`1<TResult> Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5);
    public virtual IAsyncEnumerable`1<TResult> Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6);
    public virtual IAsyncEnumerable`1<TResult> Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7);
    public virtual IAsyncEnumerable`1<TResult> Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8);
    public virtual IAsyncEnumerable`1<TResult> Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9);
    public virtual IAsyncEnumerable`1<TResult> Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10);
    public virtual IAsyncEnumerable`1<TResult> Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11);
    public virtual IAsyncEnumerable`1<TResult> Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12);
    public virtual IAsyncEnumerable`1<TResult> Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13);
    public virtual IAsyncEnumerable`1<TResult> Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14);
    public virtual IAsyncEnumerable`1<TResult> Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15);
    protected virtual Func`2<QueryContext, IAsyncEnumerable`1<TResult>> CreateCompiledQuery(IQueryCompiler queryCompiler, Expression expression);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.CompiledAsyncTaskQuery`2 : CompiledQueryBase`2<TContext, Task`1<TResult>> {
    public CompiledAsyncTaskQuery`2(LambdaExpression queryExpression);
    public virtual Task`1<TResult> ExecuteAsync(TContext context);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, CancellationToken cancellationToken);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, CancellationToken cancellationToken);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, CancellationToken cancellationToken);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, CancellationToken cancellationToken);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, CancellationToken cancellationToken);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, CancellationToken cancellationToken);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, CancellationToken cancellationToken);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, CancellationToken cancellationToken);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, CancellationToken cancellationToken);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, CancellationToken cancellationToken);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, CancellationToken cancellationToken);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, CancellationToken cancellationToken);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, CancellationToken cancellationToken);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, CancellationToken cancellationToken);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, CancellationToken cancellationToken);
    public virtual Task`1<TResult> ExecuteAsync(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15);
    protected virtual Func`2<QueryContext, Task`1<TResult>> CreateCompiledQuery(IQueryCompiler queryCompiler, Expression expression);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.CompiledQuery`2 : CompiledQueryBase`2<TContext, TResult> {
    public CompiledQuery`2(LambdaExpression queryExpression);
    public virtual TResult Execute(TContext context);
    public virtual TResult Execute(TContext context, TParam1 param1);
    public virtual TResult Execute(TContext context, TParam1 param1, TParam2 param2);
    public virtual TResult Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3);
    public virtual TResult Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4);
    public virtual TResult Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5);
    public virtual TResult Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6);
    public virtual TResult Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7);
    public virtual TResult Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8);
    public virtual TResult Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9);
    public virtual TResult Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10);
    public virtual TResult Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11);
    public virtual TResult Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12);
    public virtual TResult Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13);
    public virtual TResult Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14);
    public virtual TResult Execute(TContext context, TParam1 param1, TParam2 param2, TParam3 param3, TParam4 param4, TParam5 param5, TParam6 param6, TParam7 param7, TParam8 param8, TParam9 param9, TParam10 param10, TParam11 param11, TParam12 param12, TParam13 param13, TParam14 param14, TParam15 param15);
    protected virtual Func`2<QueryContext, TResult> CreateCompiledQuery(IQueryCompiler queryCompiler, Expression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryBase`2 : object {
    private LambdaExpression _queryExpression;
    private Func`2<QueryContext, TResult> _executor;
    protected CompiledQueryBase`2(LambdaExpression queryExpression);
    protected virtual TResult ExecuteCore(TContext context, Object[] parameters);
    protected virtual TResult ExecuteCore(TContext context, CancellationToken cancellationToken, Object[] parameters);
    protected abstract virtual Func`2<QueryContext, TResult> CreateCompiledQuery(IQueryCompiler queryCompiler, Expression expression);
    private Func`2<QueryContext, TResult> EnsureExecutor(TContext context);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.CompiledQueryCache : object {
    private static ConcurrentDictionary`2<object, object> Locks;
    private IMemoryCache _memoryCache;
    [NullableContextAttribute("1")]
public CompiledQueryCache(IMemoryCache memoryCache);
    private static CompiledQueryCache();
    [NullableContextAttribute("1")]
public virtual Func`2<QueryContext, TResult> GetOrAddQuery(object cacheKey, Func`1<Func`2<QueryContext, TResult>> compiler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.EntityMaterializerSource : object {
    private ConcurrentDictionary`2<IEntityType, Func`2<MaterializationContext, object>> _materializers;
    private ConcurrentDictionary`2<IEntityType, Func`2<MaterializationContext, object>> _emptyMaterializers;
    private List`1<IInstantiationBindingInterceptor> _bindingInterceptors;
    private IMaterializationInterceptor _materializationInterceptor;
    [CompilerGeneratedAttribute]
private EntityMaterializerSourceDependencies <Dependencies>k__BackingField;
    private static ConstructorInfo MaterializationInterceptionDataConstructor;
    private static MethodInfo CreatingInstanceMethod;
    private static MethodInfo CreatedInstanceMethod;
    private static MethodInfo InitializingInstanceMethod;
    private static MethodInfo InitializedInstanceMethod;
    private static PropertyInfo HasResultMethod;
    private static PropertyInfo ResultProperty;
    private static PropertyInfo IsSuppressedProperty;
    private static MethodInfo DictionaryAddMethod;
    private static ConstructorInfo DictionaryConstructor;
    protected EntityMaterializerSourceDependencies Dependencies { get; }
    private ConcurrentDictionary`2<IEntityType, Func`2<MaterializationContext, object>> Materializers { get; }
    private ConcurrentDictionary`2<IEntityType, Func`2<MaterializationContext, object>> EmptyMaterializers { get; }
    public EntityMaterializerSource(EntityMaterializerSourceDependencies dependencies);
    private static EntityMaterializerSource();
    [CompilerGeneratedAttribute]
protected virtual EntityMaterializerSourceDependencies get_Dependencies();
    public virtual Expression CreateMaterializeExpression(IEntityType entityType, string entityInstanceName, Expression materializationContextExpression);
    private static void AddInitializeExpressions(HashSet`1<IPropertyBase> properties, ParameterBindingInfo bindingInfo, Expression materializationContextExpression, Expression instanceVariable, List`1<Expression> blockExpressions);
    private static Expression CreateInterceptionMaterializeExpression(IEntityType entityType, string entityInstanceName, HashSet`1<IPropertyBase> properties, IMaterializationInterceptor materializationInterceptor, InstantiationBinding constructorBinding, ParameterBindingInfo bindingInfo, Expression constructorExpression, Expression materializationContextExpression);
    private ConcurrentDictionary`2<IEntityType, Func`2<MaterializationContext, object>> get_Materializers();
    public virtual Func`2<MaterializationContext, object> GetMaterializer(IEntityType entityType);
    private ConcurrentDictionary`2<IEntityType, Func`2<MaterializationContext, object>> get_EmptyMaterializers();
    public virtual Func`2<MaterializationContext, object> GetEmptyMaterializer(IEntityType entityType);
    private InstantiationBinding ModifyBindings(IEntityType entityType, InstantiationBinding binding);
    [CompilerGeneratedAttribute]
internal static Expression <AddInitializeExpressions>g__CreateMemberAssignment|9_0(Expression parameter, MemberInfo memberInfo, IPropertyBase property, Expression value);
    [CompilerGeneratedAttribute]
internal static BlockExpression <CreateInterceptionMaterializeExpression>g__CreateAccessorDictionaryExpression|20_0(<>c__DisplayClass20_0& );
    [CompilerGeneratedAttribute]
internal static Expression <CreateInterceptionMaterializeExpression>g__CreateAccessorReadExpression|20_2(<>c__DisplayClass20_0& , <>c__DisplayClass20_1& , <>c__DisplayClass20_2& );
    [CompilerGeneratedAttribute]
internal static BlockExpression <CreateInterceptionMaterializeExpression>g__CreateInitializeExpression|20_1(<>c__DisplayClass20_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.EntityMaterializerSourceDependencies : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<ISingletonInterceptor> <SingletonInterceptors>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IEnumerable`1<ISingletonInterceptor> SingletonInterceptors { get; public set; }
    [EntityFrameworkInternalAttribute]
public EntityMaterializerSourceDependencies(IEnumerable`1<ISingletonInterceptor> singletonInterceptors);
    [CompilerGeneratedAttribute]
private EntityMaterializerSourceDependencies(EntityMaterializerSourceDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IEnumerable`1<ISingletonInterceptor> get_SingletonInterceptors();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_SingletonInterceptors(IEnumerable`1<ISingletonInterceptor> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(EntityMaterializerSourceDependencies left, EntityMaterializerSourceDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(EntityMaterializerSourceDependencies left, EntityMaterializerSourceDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(EntityMaterializerSourceDependencies other);
    [CompilerGeneratedAttribute]
public EntityMaterializerSourceDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1 : object {
    private IAsyncQueryProvider _queryProvider;
    [CompilerGeneratedAttribute]
private Expression <Expression>k__BackingField;
    public Type ElementType { get; }
    public Expression Expression { get; }
    public IQueryProvider Provider { get; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    public QueryDebugView DebugView { get; }
    public EntityQueryable`1(IAsyncQueryProvider queryProvider, IEntityType entityType);
    public EntityQueryable`1(IAsyncQueryProvider queryProvider, Expression expression);
    public virtual Type get_ElementType();
    [CompilerGeneratedAttribute]
public virtual Expression get_Expression();
    public virtual IQueryProvider get_Provider();
    public virtual IEnumerator`1<TResult> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual IAsyncEnumerator`1<TResult> GetAsyncEnumerator(CancellationToken cancellationToken);
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    public virtual QueryDebugView get_DebugView();
    [CompilerGeneratedAttribute]
private string <get_DebugView>b__17_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryProvider : object {
    private static MethodInfo GenericCreateQueryMethod;
    private MethodInfo _genericExecuteMethod;
    private IQueryCompiler _queryCompiler;
    public EntityQueryProvider(IQueryCompiler queryCompiler);
    private static EntityQueryProvider();
    public virtual IQueryable`1<TElement> CreateQuery(Expression expression);
    public virtual IQueryable CreateQuery(Expression expression);
    public virtual TResult Execute(Expression expression);
    public virtual object Execute(Expression expression);
    public virtual TResult ExecuteAsync(Expression expression, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.Internal.ICompiledQueryCache {
    public abstract virtual Func`2<QueryContext, TResult> GetOrAddQuery(object cacheKey, Func`1<Func`2<QueryContext, TResult>> compiler);
}
public class Microsoft.EntityFrameworkCore.Query.Internal.InvocationExpressionRemovingExpressionVisitor : ExpressionVisitor {
    [NullableContextAttribute("1")]
protected virtual Expression VisitInvocation(InvocationExpression invocationExpression);
    private static Expression StripTrivialConversions(Expression expression);
    private static Expression InlineLambdaExpression(LambdaExpression lambdaExpression, ReadOnlyCollection`1<Expression> arguments);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.Internal.IParameterValues {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> ParameterValues { get; }
    public abstract virtual IReadOnlyDictionary`2<string, object> get_ParameterValues();
    public abstract virtual void AddParameter(string name, object value);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.Internal.IQueryCompiler {
    public abstract virtual TResult Execute(Expression query);
    public abstract virtual TResult ExecuteAsync(Expression query, CancellationToken cancellationToken);
    public abstract virtual Func`2<QueryContext, TResult> CreateCompiledQuery(Expression query);
    public abstract virtual Func`2<QueryContext, TResult> CreateCompiledAsyncQuery(Expression query);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.NavigationExpandingExpressionVisitor : ExpressionVisitor {
    private static PropertyInfo QueryContextContextPropertyInfo;
    private static Dictionary`2<MethodInfo, MethodInfo> PredicateLessMethodInfo;
    private static List`1<MethodInfo> SupportedFilteredIncludeOperations;
    private QueryTranslationPreprocessor _queryTranslationPreprocessor;
    private QueryCompilationContext _queryCompilationContext;
    private PendingSelectorExpandingExpressionVisitor _pendingSelectorExpandingExpressionVisitor;
    private SubqueryMemberPushdownExpressionVisitor _subqueryMemberPushdownExpressionVisitor;
    private NullCheckRemovingExpressionVisitor _nullCheckRemovingExpressionVisitor;
    private ReducingExpressionVisitor _reducingExpressionVisitor;
    private EntityReferenceOptionalMarkingExpressionVisitor _entityReferenceOptionalMarkingExpressionVisitor;
    private RemoveRedundantNavigationComparisonExpressionVisitor _removeRedundantNavigationComparisonExpressionVisitor;
    private HashSet`1<string> _parameterNames;
    private ParameterExtractingExpressionVisitor _parameterExtractingExpressionVisitor;
    private INavigationExpansionExtensibilityHelper _extensibilityHelper;
    private HashSet`1<IEntityType> _nonCyclicAutoIncludeEntityTypes;
    private Dictionary`2<IEntityType, LambdaExpression> _parameterizedQueryFilterPredicateCache;
    private Parameters _parameters;
    public NavigationExpandingExpressionVisitor(QueryTranslationPreprocessor queryTranslationPreprocessor, QueryCompilationContext queryCompilationContext, IEvaluatableExpressionFilter evaluatableExpressionFilter, INavigationExpansionExtensibilityHelper extensibilityHelper);
    private static NavigationExpandingExpressionVisitor();
    public virtual Expression Expand(Expression query);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    protected virtual Expression VisitMember(MemberExpression memberExpression);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    protected virtual Expression VisitUnary(UnaryExpression unaryExpression);
    private Expression ProcessAllAnyCountLongCount(NavigationExpansionExpression source, MethodInfo genericMethod, LambdaExpression predicate);
    private Expression ProcessAverageMaxMinSum(NavigationExpansionExpression source, MethodInfo method, LambdaExpression selector);
    private NavigationExpansionExpression ProcessCastOfType(NavigationExpansionExpression source, MethodInfo genericMethod, Type castType);
    private Expression ProcessContains(NavigationExpansionExpression source, Expression item);
    private NavigationExpansionExpression ProcessDefaultIfEmpty(NavigationExpansionExpression source);
    private NavigationExpansionExpression ProcessDistinct(NavigationExpansionExpression source, MethodInfo genericMethod);
    private static NavigationExpansionExpression ProcessSkipTake(NavigationExpansionExpression source, MethodInfo genericMethod, Expression count);
    private NavigationExpansionExpression ProcessFirstSingleLastOrDefault(NavigationExpansionExpression source, MethodInfo genericMethod, LambdaExpression predicate, Type returnType);
    private Expression ProcessGroupBy(NavigationExpansionExpression source, LambdaExpression keySelector, LambdaExpression elementSelector, LambdaExpression resultSelector);
    private NavigationExpansionExpression ProcessInclude(NavigationExpansionExpression source, Expression expression, bool thenInclude, bool setLoaded);
    private NavigationExpansionExpression ProcessJoin(NavigationExpansionExpression outerSource, NavigationExpansionExpression innerSource, LambdaExpression outerKeySelector, LambdaExpression innerKeySelector, LambdaExpression resultSelector);
    private NavigationExpansionExpression ProcessLeftJoin(NavigationExpansionExpression outerSource, NavigationExpansionExpression innerSource, LambdaExpression outerKeySelector, LambdaExpression innerKeySelector, LambdaExpression resultSelector);
    private NavigationExpansionExpression ProcessOrderByThenBy(NavigationExpansionExpression source, MethodInfo genericMethod, LambdaExpression keySelector, bool thenBy);
    private static Expression ProcessReverse(NavigationExpansionExpression source);
    private static NavigationExpansionExpression ProcessSelect(NavigationExpansionExpression source, LambdaExpression selector);
    private NavigationExpansionExpression ProcessSelectMany(NavigationExpansionExpression source, LambdaExpression collectionSelector, LambdaExpression resultSelector);
    private NavigationExpansionExpression ProcessSetOperation(NavigationExpansionExpression outerSource, MethodInfo genericMethod, NavigationExpansionExpression innerSource);
    private Expression ProcessUnknownMethod(MethodCallExpression methodCallExpression);
    private NavigationExpansionExpression ProcessWhere(NavigationExpansionExpression source, LambdaExpression predicate);
    private Expression ProcessAllAnyCountLongCount(GroupByNavigationExpansionExpression groupBySource, MethodInfo genericMethod, LambdaExpression predicate);
    private GroupByNavigationExpansionExpression ProcessOrderByThenBy(GroupByNavigationExpansionExpression groupBySource, MethodInfo genericMethod, LambdaExpression keySelector);
    private NavigationExpansionExpression ProcessSelect(GroupByNavigationExpansionExpression groupBySource, LambdaExpression selector);
    private static GroupByNavigationExpansionExpression ProcessSkipTake(GroupByNavigationExpansionExpression groupBySource, MethodInfo genericMethod, Expression count);
    private GroupByNavigationExpansionExpression ProcessWhere(GroupByNavigationExpansionExpression groupBySource, LambdaExpression predicate);
    private void ApplyPendingOrderings(NavigationExpansionExpression source);
    private ValueTuple`2<LambdaExpression, LambdaExpression> ProcessJoinConditions(NavigationExpansionExpression outerSource, NavigationExpansionExpression innerSource, LambdaExpression outerKeySelector, LambdaExpression innerKeySelector);
    private Expression ApplyQueryFilter(IEntityType entityType, NavigationExpansionExpression navigationExpansionExpression);
    private void ValidateExpressionCompatibility(Expression outer, Expression inner);
    private static MethodCallExpression ConvertToEnumerable(MethodInfo queryableMethod, IEnumerable`1<Expression> arguments);
    private NavigationExpansionExpression CreateNavigationExpansionExpression(Expression sourceExpression, IEntityType entityType);
    private NavigationExpansionExpression CreateNavigationExpansionExpression(Expression sourceExpression, OwnedNavigationReference ownedNavigationReference);
    private Expression ExpandNavigationsForSource(NavigationExpansionExpression source, Expression expression);
    private static Expression RemapLambdaExpression(NavigationExpansionExpression source, LambdaExpression lambdaExpression);
    private LambdaExpression ProcessLambdaExpression(NavigationExpansionExpression source, LambdaExpression lambdaExpression);
    private LambdaExpression ProcessLambdaExpression(GroupByNavigationExpansionExpression groupBySource, LambdaExpression lambdaExpression);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Query.Internal.NavigationExpandingExpressionVisitor/<FindNavigations>d__58")]
private static IEnumerable`1<INavigationBase> FindNavigations(IEntityType entityType, string navigationName);
    private LambdaExpression GenerateLambda(Expression body, ParameterExpression currentParameter);
    private Expression UnwrapCollectionMaterialization(Expression expression);
    private string GetParameterName(string prefix);
    private void PopulateEagerLoadedNavigations(IncludeTreeNode includeTreeNode);
    private void VerifyNoAutoIncludeCycles(IEntityType entityType, HashSet`1<IEntityType> visitedEntityTypes, List`1<INavigationBase> navigationChain);
    private static IEnumerable`1<INavigationBase> GetOutgoingEagerLoadedNavigations(IEntityType entityType);
    private IncludeTreeNode PopulateIncludeTree(IncludeTreeNode includeTreeNode, Expression expression, bool setLoaded);
    private Expression Reduce(Expression source);
    private static Expression SnapshotExpression(Expression selector);
    private static EntityReference UnwrapEntityReference(Expression expression);
    [CompilerGeneratedAttribute]
private Expression <VisitMethodCall>b__21_0(Expression e);
    [CompilerGeneratedAttribute]
internal static ValueTuple`2<Expression, LambdaExpression> <ProcessInclude>g__ExtractIncludeFilter|32_0(Expression currentExpression, Expression includeExpression);
    [CompilerGeneratedAttribute]
internal static Expression <ProcessInclude>g__FormatFilter|32_1(Expression expression);
    [CompilerGeneratedAttribute]
private Expression <ProcessUnknownMethod>b__40_2(Expression e);
    [CompilerGeneratedAttribute]
internal static MethodInfo <ApplyPendingOrderings>g__GetThenByMethod|47_0(MethodInfo currentGenericMethod);
    [CompilerGeneratedAttribute]
internal static LambdaExpression <ProcessJoinConditions>g__ChangeReturnType|48_0(LambdaExpression lambdaExpression, Type type);
    [CompilerGeneratedAttribute]
internal static bool <ConvertToEnumerable>g__IsNumericType|51_1(Type type);
    [CompilerGeneratedAttribute]
private bool <PopulateIncludeTree>g__TryExtractIncludeTreeNode|65_0(Expression innerExpression, string propertyName, IncludeTreeNode& addedNode, <>c__DisplayClass65_0& );
}
public class Microsoft.EntityFrameworkCore.Query.Internal.NullAsyncQueryProvider : object {
    [NullableAttribute("1")]
public static IAsyncQueryProvider Instance;
    private static NullAsyncQueryProvider();
    private sealed virtual override IQueryable System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override IQueryable`1<TElement> System.Linq.IQueryProvider.CreateQuery(Expression expression);
    private sealed virtual override object System.Linq.IQueryProvider.Execute(Expression expression);
    private sealed virtual override TResult System.Linq.IQueryProvider.Execute(Expression expression);
    private sealed virtual override TResult Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider.ExecuteAsync(Expression expression, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.NullCheckRemovingExpressionVisitor : ExpressionVisitor {
    private NullSafeAccessVerifyingExpressionVisitor _nullSafeAccessVerifyingExpressionVisitor;
    protected virtual Expression VisitBinary(BinaryExpression binaryExpression);
    protected virtual Expression VisitConditional(ConditionalExpression conditionalExpression);
    private static Expression TryOptimizeConditionalEquality(Expression expression);
    private static bool IsNullConstant(Expression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.ParameterExtractingExpressionVisitor : ExpressionVisitor {
    private static string QueryFilterPrefix;
    private IParameterValues _parameterValues;
    private IDiagnosticsLogger`1<Query> _logger;
    private bool _parameterize;
    private bool _generateContextAccessors;
    private EvaluatableExpressionFindingExpressionVisitor _evaluatableExpressionFindingExpressionVisitor;
    private ContextParameterReplacingExpressionVisitor _contextParameterReplacingExpressionVisitor;
    private Dictionary`2<Expression, EvaluatedValues> _evaluatedValues;
    private IDictionary`2<Expression, bool> _evaluatableExpressions;
    private IQueryProvider _currentQueryProvider;
    public ParameterExtractingExpressionVisitor(IEvaluatableExpressionFilter evaluatableExpressionFilter, IParameterValues parameterValues, Type contextType, IModel model, IDiagnosticsLogger`1<Query> logger, bool parameterize, bool generateContextAccessors);
    public virtual Expression ExtractParameters(Expression expression);
    private Expression ExtractParameters(Expression expression, bool clearEvaluatedValues);
    [NullableContextAttribute("2")]
public virtual Expression Visit(Expression expression);
    private static bool PreserveInitializationConstant(Expression expression, bool generateParameter);
    private bool PreserveConvertNode(Expression expression);
    protected virtual Expression VisitConditional(ConditionalExpression conditionalExpression);
    protected virtual Expression VisitBinary(BinaryExpression binaryExpression);
    private Expression TryGetConstantValue(Expression expression);
    private static bool ShortCircuitLogicalExpression(Expression expression, ExpressionType nodeType);
    protected virtual Expression VisitExtension(Expression extensionExpression);
    private static Expression GenerateConstantExpression(object value, Type returnType);
    private Expression Evaluate(Expression expression, bool generateParameter);
    private static Expression RemoveConvert(Expression expression);
    private object GetValue(Expression expression, String& parameterName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.QueryableMethodNormalizingExpressionVisitor : ExpressionVisitor {
    private QueryCompilationContext _queryCompilationContext;
    private SelectManyVerifyingExpressionVisitor _selectManyVerifyingExpressionVisitor;
    private GroupJoinConvertingExpressionVisitor _groupJoinConvertingExpressionVisitor;
    public QueryableMethodNormalizingExpressionVisitor(QueryCompilationContext queryCompilationContext);
    public virtual Expression Normalize(Expression expression);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    private static void VerifyReturnType(Expression expression, ParameterExpression lambdaParameter);
    private Expression ExtractQueryMetadata(MethodCallExpression methodCallExpression);
    private Expression TryConvertEnumerableToQueryable(MethodCallExpression methodCallExpression);
    private Expression TryConvertListContainsToQueryableContains(MethodCallExpression methodCallExpression);
    private static bool ClientSource(Expression expression);
    private static bool CanConvertEnumerableToQueryable(Type enumerableType, Type queryableType);
    private MethodCallExpression TryFlattenGroupJoinSelectMany(MethodCallExpression methodCallExpression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.QueryCompilationContextFactory : object {
    [CompilerGeneratedAttribute]
private QueryCompilationContextDependencies <Dependencies>k__BackingField;
    protected QueryCompilationContextDependencies Dependencies { get; }
    public QueryCompilationContextFactory(QueryCompilationContextDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual QueryCompilationContextDependencies get_Dependencies();
    public virtual QueryCompilationContext Create(bool async);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.QueryCompiler : object {
    private IQueryContextFactory _queryContextFactory;
    private ICompiledQueryCache _compiledQueryCache;
    private ICompiledQueryCacheKeyGenerator _compiledQueryCacheKeyGenerator;
    private IDatabase _database;
    private IDiagnosticsLogger`1<Query> _logger;
    private Type _contextType;
    private IEvaluatableExpressionFilter _evaluatableExpressionFilter;
    private IModel _model;
    public QueryCompiler(IQueryContextFactory queryContextFactory, ICompiledQueryCache compiledQueryCache, ICompiledQueryCacheKeyGenerator compiledQueryCacheKeyGenerator, IDatabase database, IDiagnosticsLogger`1<Query> logger, ICurrentDbContext currentContext, IEvaluatableExpressionFilter evaluatableExpressionFilter, IModel model);
    public virtual TResult Execute(Expression query);
    public virtual Func`2<QueryContext, TResult> CompileQueryCore(IDatabase database, Expression query, IModel model, bool async);
    public virtual Func`2<QueryContext, TResult> CreateCompiledQuery(Expression query);
    public virtual TResult ExecuteAsync(Expression query, CancellationToken cancellationToken);
    public virtual Func`2<QueryContext, TResult> CreateCompiledAsyncQuery(Expression query);
    public virtual Expression ExtractParameters(Expression query, IParameterValues parameterValues, IDiagnosticsLogger`1<Query> logger, bool parameterize, bool generateContextAccessors);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.QueryDebugView : object {
    [DebuggerBrowsableAttribute("0")]
private Func`1<string> _toExpressionString;
    [DebuggerBrowsableAttribute("0")]
private Func`1<string> _toQueryString;
    public string Expression { get; }
    public string Query { get; }
    public QueryDebugView(Func`1<string> toExpressionString, Func`1<string> toQueryString);
    public virtual string get_Expression();
    public virtual string get_Query();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.QueryOptimizingExpressionVisitor : ExpressionVisitor {
    private static List`1<MethodInfo> SingleResultMethodInfos;
    private static MethodInfo StringCompareWithComparisonMethod;
    private static MethodInfo StringCompareWithoutComparisonMethod;
    private static MethodInfo StartsWithMethodInfo;
    private static MethodInfo EndsWithMethodInfo;
    private static Expression ConstantNullString;
    private static QueryOptimizingExpressionVisitor();
    protected virtual Expression VisitBinary(BinaryExpression binaryExpression);
    protected virtual Expression VisitConditional(ConditionalExpression conditionalExpression);
    protected virtual ElementInit VisitElementInit(ElementInit elementInit);
    protected virtual Expression VisitLambda(Expression`1<T> lambdaExpression);
    protected virtual Expression VisitMember(MemberExpression memberExpression);
    protected virtual MemberAssignment VisitMemberAssignment(MemberAssignment memberAssignment);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    protected virtual Expression VisitNew(NewExpression newExpression);
    protected virtual Expression VisitNewArray(NewArrayExpression newArrayExpression);
    protected virtual Expression VisitUnary(UnaryExpression unaryExpression);
    private static Expression MatchExpressionType(Expression expression, Type typeToMatch);
    private static bool TryExtractEqualityOperands(Expression expression, Expression& left, Expression& right, Boolean& negated);
    private static Expression TryOptimizeMemberAccessOverConditional(Expression expression);
    private static bool IsNullConstant(Expression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.QueryTranslationPostprocessorFactory : object {
    [CompilerGeneratedAttribute]
private QueryTranslationPostprocessorDependencies <Dependencies>k__BackingField;
    protected QueryTranslationPostprocessorDependencies Dependencies { get; }
    public QueryTranslationPostprocessorFactory(QueryTranslationPostprocessorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual QueryTranslationPostprocessorDependencies get_Dependencies();
    public virtual QueryTranslationPostprocessor Create(QueryCompilationContext queryCompilationContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.QueryTranslationPreprocessorFactory : object {
    [CompilerGeneratedAttribute]
private QueryTranslationPreprocessorDependencies <Dependencies>k__BackingField;
    protected QueryTranslationPreprocessorDependencies Dependencies { get; }
    public QueryTranslationPreprocessorFactory(QueryTranslationPreprocessorDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual QueryTranslationPreprocessorDependencies get_Dependencies();
    public virtual QueryTranslationPreprocessor Create(QueryCompilationContext queryCompilationContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.Internal.SubqueryMemberPushdownExpressionVisitor : ExpressionVisitor {
    private static List`1<MethodInfo> SupportedMethods;
    private static IDictionary`2<MethodInfo, MethodInfo> PredicateLessMethodInfo;
    private IModel _model;
    public SubqueryMemberPushdownExpressionVisitor(IModel model);
    private static SubqueryMemberPushdownExpressionVisitor();
    protected virtual Expression VisitMember(MemberExpression memberExpression);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    private Expression PushdownMember(MethodCallExpression methodCallExpression, Func`3<Expression, bool, Expression> createSelector, Type returnType);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.IPrintableExpression {
    public abstract virtual void Print(ExpressionPrinter expressionPrinter);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.IQueryableMethodTranslatingExpressionVisitorFactory {
    public abstract virtual QueryableMethodTranslatingExpressionVisitor Create(QueryCompilationContext queryCompilationContext);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.IQueryCompilationContextFactory {
    public abstract virtual QueryCompilationContext Create(bool async);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.IQueryContextFactory {
    public abstract virtual QueryContext Create();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.IQueryingEnumerable {
    public abstract virtual string ToQueryString();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.IQueryTranslationPostprocessorFactory {
    public abstract virtual QueryTranslationPostprocessor Create(QueryCompilationContext queryCompilationContext);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.IQueryTranslationPreprocessorFactory {
    public abstract virtual QueryTranslationPreprocessor Create(QueryCompilationContext queryCompilationContext);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Query.IShapedQueryCompilingExpressionVisitorFactory {
    public abstract virtual ShapedQueryCompilingExpressionVisitor Create(QueryCompilationContext queryCompilationContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.MaterializeCollectionNavigationExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <Subquery>k__BackingField;
    [CompilerGeneratedAttribute]
private INavigationBase <Navigation>k__BackingField;
    public Expression Subquery { get; }
    public INavigationBase Navigation { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public MaterializeCollectionNavigationExpression(Expression subquery, INavigationBase navigation);
    [CompilerGeneratedAttribute]
public virtual Expression get_Subquery();
    [CompilerGeneratedAttribute]
public virtual INavigationBase get_Navigation();
    public sealed virtual ExpressionType get_NodeType();
    public virtual Type get_Type();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual MaterializeCollectionNavigationExpression Update(Expression subquery);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(ExpressionPrinter expressionPrinter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.NavigationExpansionExtensibilityHelper : object {
    [CompilerGeneratedAttribute]
private NavigationExpansionExtensibilityHelperDependencies <Dependencies>k__BackingField;
    protected NavigationExpansionExtensibilityHelperDependencies Dependencies { get; }
    public NavigationExpansionExtensibilityHelper(NavigationExpansionExtensibilityHelperDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual NavigationExpansionExtensibilityHelperDependencies get_Dependencies();
    public virtual EntityQueryRootExpression CreateQueryRoot(IEntityType entityType, EntityQueryRootExpression source);
    public virtual void ValidateQueryRootCreation(IEntityType entityType, EntityQueryRootExpression source);
    [NullableContextAttribute("2")]
public virtual bool AreQueryRootsCompatible(EntityQueryRootExpression first, EntityQueryRootExpression second);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.NavigationExpansionExtensibilityHelperDependencies : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
private NavigationExpansionExtensibilityHelperDependencies(NavigationExpansionExtensibilityHelperDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(NavigationExpansionExtensibilityHelperDependencies left, NavigationExpansionExtensibilityHelperDependencies right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(NavigationExpansionExtensibilityHelperDependencies left, NavigationExpansionExtensibilityHelperDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(NavigationExpansionExtensibilityHelperDependencies other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public NavigationExpansionExtensibilityHelperDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.ProjectionBindingExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <QueryExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private ProjectionMember <ProjectionMember>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    public Expression QueryExpression { get; }
    [NullableAttribute("2")]
public ProjectionMember ProjectionMember { get; }
    public Nullable`1<int> Index { get; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public ProjectionBindingExpression(Expression queryExpression, ProjectionMember projectionMember, Type type);
    public ProjectionBindingExpression(Expression queryExpression, int index, Type type);
    [CompilerGeneratedAttribute]
public virtual Expression get_QueryExpression();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual ProjectionMember get_ProjectionMember();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_Index();
    [CompilerGeneratedAttribute]
public virtual Type get_Type();
    public sealed virtual ExpressionType get_NodeType();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    private bool Equals(ProjectionBindingExpression projectionBindingExpression);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{ToString(), nq}")]
public class Microsoft.EntityFrameworkCore.Query.ProjectionMember : object {
    private IList`1<MemberInfo> _memberChain;
    [NullableAttribute("2")]
public MemberInfo Last { get; }
    private ProjectionMember(IList`1<MemberInfo> memberChain);
    public ProjectionMember Append(MemberInfo member);
    public ProjectionMember Prepend(MemberInfo member);
    [NullableContextAttribute("2")]
public MemberInfo get_Last();
    [DebuggerStepThroughAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[DebuggerStepThroughAttribute]
public virtual bool Equals(object obj);
    private bool Equals(ProjectionMember other);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.EntityFrameworkCore.Query.QueryableMethods : object {
    [CompilerGeneratedAttribute]
private static MethodInfo <All>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AnyWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AnyWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <AsQueryable>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Cast>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Concat>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Contains>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <CountWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <CountWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <DefaultIfEmptyWithoutArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <DefaultIfEmptyWithArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Distinct>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ElementAt>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ElementAtOrDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Except>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <FirstOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeySelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyElementSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyElementResultSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupByWithKeyResultSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <GroupJoin>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Intersect>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Join>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LastOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LongCountWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <LongCountWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MaxWithoutSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MaxWithSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MinWithoutSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <MinWithSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OfType>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OrderBy>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <OrderByDescending>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Reverse>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Select>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectManyWithoutCollectionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SelectManyWithCollectionSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleOrDefaultWithoutPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SingleOrDefaultWithPredicate>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <SkipWhile>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Take>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <TakeWhile>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ThenBy>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <ThenByDescending>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Union>k__BackingField;
    [CompilerGeneratedAttribute]
private static MethodInfo <Where>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <AverageWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <AverageWithSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <SumWithoutSelectorMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> <SumWithSelectorMethods>k__BackingField;
    public static MethodInfo All { get; }
    public static MethodInfo AnyWithoutPredicate { get; }
    public static MethodInfo AnyWithPredicate { get; }
    public static MethodInfo AsQueryable { get; }
    public static MethodInfo Cast { get; }
    public static MethodInfo Concat { get; }
    public static MethodInfo Contains { get; }
    public static MethodInfo CountWithoutPredicate { get; }
    public static MethodInfo CountWithPredicate { get; }
    public static MethodInfo DefaultIfEmptyWithoutArgument { get; }
    public static MethodInfo DefaultIfEmptyWithArgument { get; }
    public static MethodInfo Distinct { get; }
    public static MethodInfo ElementAt { get; }
    public static MethodInfo ElementAtOrDefault { get; }
    public static MethodInfo Except { get; }
    public static MethodInfo FirstWithoutPredicate { get; }
    public static MethodInfo FirstWithPredicate { get; }
    public static MethodInfo FirstOrDefaultWithoutPredicate { get; }
    public static MethodInfo FirstOrDefaultWithPredicate { get; }
    public static MethodInfo GroupByWithKeySelector { get; }
    public static MethodInfo GroupByWithKeyElementSelector { get; }
    public static MethodInfo GroupByWithKeyElementResultSelector { get; }
    public static MethodInfo GroupByWithKeyResultSelector { get; }
    public static MethodInfo GroupJoin { get; }
    public static MethodInfo Intersect { get; }
    public static MethodInfo Join { get; }
    public static MethodInfo LastWithoutPredicate { get; }
    public static MethodInfo LastWithPredicate { get; }
    public static MethodInfo LastOrDefaultWithoutPredicate { get; }
    public static MethodInfo LastOrDefaultWithPredicate { get; }
    public static MethodInfo LongCountWithoutPredicate { get; }
    public static MethodInfo LongCountWithPredicate { get; }
    public static MethodInfo MaxWithoutSelector { get; }
    public static MethodInfo MaxWithSelector { get; }
    public static MethodInfo MinWithoutSelector { get; }
    public static MethodInfo MinWithSelector { get; }
    public static MethodInfo OfType { get; }
    public static MethodInfo OrderBy { get; }
    public static MethodInfo OrderByDescending { get; }
    public static MethodInfo Reverse { get; }
    public static MethodInfo Select { get; }
    public static MethodInfo SelectManyWithoutCollectionSelector { get; }
    public static MethodInfo SelectManyWithCollectionSelector { get; }
    public static MethodInfo SingleWithoutPredicate { get; }
    public static MethodInfo SingleWithPredicate { get; }
    public static MethodInfo SingleOrDefaultWithoutPredicate { get; }
    public static MethodInfo SingleOrDefaultWithPredicate { get; }
    public static MethodInfo Skip { get; }
    public static MethodInfo SkipWhile { get; }
    public static MethodInfo Take { get; }
    public static MethodInfo TakeWhile { get; }
    public static MethodInfo ThenBy { get; }
    public static MethodInfo ThenByDescending { get; }
    public static MethodInfo Union { get; }
    public static MethodInfo Where { get; }
    private static Dictionary`2<Type, MethodInfo> AverageWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> AverageWithSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> SumWithoutSelectorMethods { get; }
    private static Dictionary`2<Type, MethodInfo> SumWithSelectorMethods { get; }
    private static QueryableMethods();
    [CompilerGeneratedAttribute]
public static MethodInfo get_All();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AnyWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AnyWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_AsQueryable();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Cast();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Concat();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Contains();
    [CompilerGeneratedAttribute]
public static MethodInfo get_CountWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_CountWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_DefaultIfEmptyWithoutArgument();
    [CompilerGeneratedAttribute]
public static MethodInfo get_DefaultIfEmptyWithArgument();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Distinct();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ElementAt();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ElementAtOrDefault();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Except();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_FirstOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeySelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyElementSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyElementResultSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupByWithKeyResultSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_GroupJoin();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Intersect();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Join();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LastOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LongCountWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_LongCountWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MaxWithoutSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MaxWithSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MinWithoutSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_MinWithSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OfType();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OrderBy();
    [CompilerGeneratedAttribute]
public static MethodInfo get_OrderByDescending();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Reverse();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Select();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectManyWithoutCollectionSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SelectManyWithCollectionSelector();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleOrDefaultWithoutPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SingleOrDefaultWithPredicate();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Skip();
    [CompilerGeneratedAttribute]
public static MethodInfo get_SkipWhile();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Take();
    [CompilerGeneratedAttribute]
public static MethodInfo get_TakeWhile();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ThenBy();
    [CompilerGeneratedAttribute]
public static MethodInfo get_ThenByDescending();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Union();
    [CompilerGeneratedAttribute]
public static MethodInfo get_Where();
    public static bool IsAverageWithoutSelector(MethodInfo methodInfo);
    public static bool IsAverageWithSelector(MethodInfo methodInfo);
    public static bool IsSumWithoutSelector(MethodInfo methodInfo);
    public static bool IsSumWithSelector(MethodInfo methodInfo);
    public static MethodInfo GetAverageWithoutSelector(Type type);
    public static MethodInfo GetAverageWithSelector(Type type);
    public static MethodInfo GetSumWithoutSelector(Type type);
    public static MethodInfo GetSumWithSelector(Type type);
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_AverageWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_AverageWithSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_SumWithoutSelectorMethods();
    [CompilerGeneratedAttribute]
private static Dictionary`2<Type, MethodInfo> get_SumWithSelectorMethods();
    [CompilerGeneratedAttribute]
internal static MethodInfo <.cctor>g__GetMethod|185_58(string name, int genericParameterCount, Func`2<Type[], Type[]> parameterGenerator, <>c__DisplayClass185_0& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor : ExpressionVisitor {
    private bool _subquery;
    private EntityShaperNullableMarkingExpressionVisitor _entityShaperNullableMarkingExpressionVisitor;
    [CompilerGeneratedAttribute]
private QueryableMethodTranslatingExpressionVisitorDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TranslationErrorDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryCompilationContext <QueryCompilationContext>k__BackingField;
    protected QueryableMethodTranslatingExpressionVisitorDependencies Dependencies { get; }
    [NullableAttribute("2")]
public string TranslationErrorDetails { get; private set; }
    protected QueryCompilationContext QueryCompilationContext { get; }
    protected QueryableMethodTranslatingExpressionVisitor(QueryableMethodTranslatingExpressionVisitorDependencies dependencies, QueryCompilationContext queryCompilationContext, bool subquery);
    [CompilerGeneratedAttribute]
protected virtual QueryableMethodTranslatingExpressionVisitorDependencies get_Dependencies();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual string get_TranslationErrorDetails();
    [CompilerGeneratedAttribute]
private void set_TranslationErrorDetails(string value);
    protected virtual void AddTranslationErrorDetails(string details);
    [CompilerGeneratedAttribute]
protected virtual QueryCompilationContext get_QueryCompilationContext();
    protected virtual Expression VisitExtension(Expression extensionExpression);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
    protected virtual Expression MarkShaperNullable(Expression shaperExpression);
    public virtual ShapedQueryExpression TranslateSubquery(Expression expression);
    protected abstract virtual QueryableMethodTranslatingExpressionVisitor CreateSubqueryVisitor();
    protected abstract virtual ShapedQueryExpression CreateShapedQueryExpression(IEntityType entityType);
    protected abstract virtual ShapedQueryExpression TranslateAll(ShapedQueryExpression source, LambdaExpression predicate);
    [NullableContextAttribute("2")]
protected abstract virtual ShapedQueryExpression TranslateAny(ShapedQueryExpression source, LambdaExpression predicate);
    protected abstract virtual ShapedQueryExpression TranslateAverage(ShapedQueryExpression source, LambdaExpression selector, Type resultType);
    protected abstract virtual ShapedQueryExpression TranslateCast(ShapedQueryExpression source, Type castType);
    protected abstract virtual ShapedQueryExpression TranslateConcat(ShapedQueryExpression source1, ShapedQueryExpression source2);
    protected abstract virtual ShapedQueryExpression TranslateContains(ShapedQueryExpression source, Expression item);
    [NullableContextAttribute("2")]
protected abstract virtual ShapedQueryExpression TranslateCount(ShapedQueryExpression source, LambdaExpression predicate);
    [NullableContextAttribute("2")]
protected abstract virtual ShapedQueryExpression TranslateDefaultIfEmpty(ShapedQueryExpression source, Expression defaultValue);
    protected abstract virtual ShapedQueryExpression TranslateDistinct(ShapedQueryExpression source);
    protected abstract virtual ShapedQueryExpression TranslateElementAtOrDefault(ShapedQueryExpression source, Expression index, bool returnDefault);
    protected abstract virtual ShapedQueryExpression TranslateExcept(ShapedQueryExpression source1, ShapedQueryExpression source2);
    protected abstract virtual ShapedQueryExpression TranslateFirstOrDefault(ShapedQueryExpression source, LambdaExpression predicate, Type returnType, bool returnDefault);
    [NullableContextAttribute("2")]
protected abstract virtual ShapedQueryExpression TranslateGroupBy(ShapedQueryExpression source, LambdaExpression keySelector, LambdaExpression elementSelector, LambdaExpression resultSelector);
    protected abstract virtual ShapedQueryExpression TranslateGroupJoin(ShapedQueryExpression outer, ShapedQueryExpression inner, LambdaExpression outerKeySelector, LambdaExpression innerKeySelector, LambdaExpression resultSelector);
    protected abstract virtual ShapedQueryExpression TranslateIntersect(ShapedQueryExpression source1, ShapedQueryExpression source2);
    protected abstract virtual ShapedQueryExpression TranslateJoin(ShapedQueryExpression outer, ShapedQueryExpression inner, LambdaExpression outerKeySelector, LambdaExpression innerKeySelector, LambdaExpression resultSelector);
    protected abstract virtual ShapedQueryExpression TranslateLeftJoin(ShapedQueryExpression outer, ShapedQueryExpression inner, LambdaExpression outerKeySelector, LambdaExpression innerKeySelector, LambdaExpression resultSelector);
    protected abstract virtual ShapedQueryExpression TranslateLastOrDefault(ShapedQueryExpression source, LambdaExpression predicate, Type returnType, bool returnDefault);
    [NullableContextAttribute("2")]
protected abstract virtual ShapedQueryExpression TranslateLongCount(ShapedQueryExpression source, LambdaExpression predicate);
    protected abstract virtual ShapedQueryExpression TranslateMax(ShapedQueryExpression source, LambdaExpression selector, Type resultType);
    protected abstract virtual ShapedQueryExpression TranslateMin(ShapedQueryExpression source, LambdaExpression selector, Type resultType);
    protected abstract virtual ShapedQueryExpression TranslateOfType(ShapedQueryExpression source, Type resultType);
    protected abstract virtual ShapedQueryExpression TranslateOrderBy(ShapedQueryExpression source, LambdaExpression keySelector, bool ascending);
    protected abstract virtual ShapedQueryExpression TranslateReverse(ShapedQueryExpression source);
    protected abstract virtual ShapedQueryExpression TranslateSelect(ShapedQueryExpression source, LambdaExpression selector);
    protected abstract virtual ShapedQueryExpression TranslateSelectMany(ShapedQueryExpression source, LambdaExpression collectionSelector, LambdaExpression resultSelector);
    protected abstract virtual ShapedQueryExpression TranslateSelectMany(ShapedQueryExpression source, LambdaExpression selector);
    protected abstract virtual ShapedQueryExpression TranslateSingleOrDefault(ShapedQueryExpression source, LambdaExpression predicate, Type returnType, bool returnDefault);
    protected abstract virtual ShapedQueryExpression TranslateSkip(ShapedQueryExpression source, Expression count);
    protected abstract virtual ShapedQueryExpression TranslateSkipWhile(ShapedQueryExpression source, LambdaExpression predicate);
    protected abstract virtual ShapedQueryExpression TranslateSum(ShapedQueryExpression source, LambdaExpression selector, Type resultType);
    protected abstract virtual ShapedQueryExpression TranslateTake(ShapedQueryExpression source, Expression count);
    protected abstract virtual ShapedQueryExpression TranslateTakeWhile(ShapedQueryExpression source, LambdaExpression predicate);
    protected abstract virtual ShapedQueryExpression TranslateThenBy(ShapedQueryExpression source, LambdaExpression keySelector, bool ascending);
    protected abstract virtual ShapedQueryExpression TranslateUnion(ShapedQueryExpression source1, ShapedQueryExpression source2);
    protected abstract virtual ShapedQueryExpression TranslateWhere(ShapedQueryExpression source, LambdaExpression predicate);
    [CompilerGeneratedAttribute]
private ShapedQueryExpression <VisitMethodCall>g__CheckTranslated|15_0(ShapedQueryExpression translated, <>c__DisplayClass15_0& );
    [CompilerGeneratedAttribute]
private LambdaExpression <VisitMethodCall>g__GetLambdaExpressionFromArgument|15_1(int argumentIndex, <>c__DisplayClass15_0& );
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
private QueryableMethodTranslatingExpressionVisitorDependencies(QueryableMethodTranslatingExpressionVisitorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(QueryableMethodTranslatingExpressionVisitorDependencies left, QueryableMethodTranslatingExpressionVisitorDependencies right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(QueryableMethodTranslatingExpressionVisitorDependencies left, QueryableMethodTranslatingExpressionVisitorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(QueryableMethodTranslatingExpressionVisitorDependencies other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public QueryableMethodTranslatingExpressionVisitorDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.QueryCompilationContext : object {
    public static string QueryParameterPrefix;
    public static ParameterExpression QueryContextParameter;
    public static Expression NotTranslatedExpression;
    private IQueryTranslationPreprocessorFactory _queryTranslationPreprocessorFactory;
    private IQueryableMethodTranslatingExpressionVisitorFactory _queryableMethodTranslatingExpressionVisitorFactory;
    private IQueryTranslationPostprocessorFactory _queryTranslationPostprocessorFactory;
    private IShapedQueryCompilingExpressionVisitorFactory _shapedQueryCompilingExpressionVisitorFactory;
    private IQueryExpressionInterceptor _queryExpressionInterceptor;
    private ExpressionPrinter _expressionPrinter;
    private Dictionary`2<string, LambdaExpression> _runtimeParameters;
    [CompilerGeneratedAttribute]
private QueryCompilationContextDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAsync>k__BackingField;
    [CompilerGeneratedAttribute]
private IModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbContextOptions <ContextOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryTrackingBehavior <QueryTrackingBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBuffering>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreQueryFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreAutoIncludes>k__BackingField;
    [CompilerGeneratedAttribute]
private ISet`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Query> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ContextType>k__BackingField;
    private static MethodInfo QueryContextAddParameterMethodInfo;
    protected QueryCompilationContextDependencies Dependencies { get; }
    public bool IsAsync { get; }
    public IModel Model { get; }
    public IDbContextOptions ContextOptions { get; }
    public QueryTrackingBehavior QueryTrackingBehavior { get; internal set; }
    public bool IsBuffering { get; }
    public bool IgnoreQueryFilters { get; internal set; }
    public bool IgnoreAutoIncludes { get; internal set; }
    public ISet`1<string> Tags { get; }
    public IDiagnosticsLogger`1<Query> Logger { get; }
    public Type ContextType { get; }
    public QueryCompilationContext(QueryCompilationContextDependencies dependencies, bool async);
    private static QueryCompilationContext();
    [CompilerGeneratedAttribute]
protected virtual QueryCompilationContextDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
public virtual bool get_IsAsync();
    [CompilerGeneratedAttribute]
public virtual IModel get_Model();
    [CompilerGeneratedAttribute]
public virtual IDbContextOptions get_ContextOptions();
    [CompilerGeneratedAttribute]
public virtual QueryTrackingBehavior get_QueryTrackingBehavior();
    [CompilerGeneratedAttribute]
internal virtual void set_QueryTrackingBehavior(QueryTrackingBehavior value);
    [CompilerGeneratedAttribute]
public virtual bool get_IsBuffering();
    [CompilerGeneratedAttribute]
public virtual bool get_IgnoreQueryFilters();
    [CompilerGeneratedAttribute]
internal virtual void set_IgnoreQueryFilters(bool value);
    [CompilerGeneratedAttribute]
public virtual bool get_IgnoreAutoIncludes();
    [CompilerGeneratedAttribute]
internal virtual void set_IgnoreAutoIncludes(bool value);
    [CompilerGeneratedAttribute]
public virtual ISet`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public virtual IDiagnosticsLogger`1<Query> get_Logger();
    [CompilerGeneratedAttribute]
public virtual Type get_ContextType();
    public virtual void AddTag(string tag);
    public virtual Func`2<QueryContext, TResult> CreateQueryExecutor(Expression query);
    public virtual ParameterExpression RegisterRuntimeParameter(string name, LambdaExpression valueExtractor);
    private Expression InsertRuntimeParameters(Expression query);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.QueryCompilationContextDependencies : object {
    private ICurrentDbContext _currentContext;
    [CompilerGeneratedAttribute]
private IModel <Model>k__BackingField;
    [CompilerGeneratedAttribute]
private IQueryTranslationPreprocessorFactory <QueryTranslationPreprocessorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IQueryableMethodTranslatingExpressionVisitorFactory <QueryableMethodTranslatingExpressionVisitorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IQueryTranslationPostprocessorFactory <QueryTranslationPostprocessorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IShapedQueryCompilingExpressionVisitorFactory <ShapedQueryCompilingExpressionVisitorFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRetryingExecutionStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private IDbContextOptions <ContextOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Query> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IInterceptors <Interceptors>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public DbContext Context { get; }
    public Type ContextType { get; }
    public QueryTrackingBehavior QueryTrackingBehavior { get; }
    public IModel Model { get; public set; }
    public IQueryTranslationPreprocessorFactory QueryTranslationPreprocessorFactory { get; public set; }
    public IQueryableMethodTranslatingExpressionVisitorFactory QueryableMethodTranslatingExpressionVisitorFactory { get; public set; }
    public IQueryTranslationPostprocessorFactory QueryTranslationPostprocessorFactory { get; public set; }
    public IShapedQueryCompilingExpressionVisitorFactory ShapedQueryCompilingExpressionVisitorFactory { get; public set; }
    public bool IsRetryingExecutionStrategy { get; public set; }
    public IDbContextOptions ContextOptions { get; public set; }
    public IDiagnosticsLogger`1<Query> Logger { get; public set; }
    public IInterceptors Interceptors { get; }
    [EntityFrameworkInternalAttribute]
public QueryCompilationContextDependencies(IModel model, IQueryTranslationPreprocessorFactory queryTranslationPreprocessorFactory, IQueryableMethodTranslatingExpressionVisitorFactory queryableMethodTranslatingExpressionVisitorFactory, IQueryTranslationPostprocessorFactory queryTranslationPostprocessorFactory, IShapedQueryCompilingExpressionVisitorFactory shapedQueryCompilingExpressionVisitorFactory, IExecutionStrategy executionStrategy, ICurrentDbContext currentContext, IDbContextOptions contextOptions, IDiagnosticsLogger`1<Query> logger, IInterceptors interceptors);
    [CompilerGeneratedAttribute]
private QueryCompilationContextDependencies(QueryCompilationContextDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    public DbContext get_Context();
    public Type get_ContextType();
    public QueryTrackingBehavior get_QueryTrackingBehavior();
    [CompilerGeneratedAttribute]
public IModel get_Model();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Model(IModel value);
    [CompilerGeneratedAttribute]
public IQueryTranslationPreprocessorFactory get_QueryTranslationPreprocessorFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_QueryTranslationPreprocessorFactory(IQueryTranslationPreprocessorFactory value);
    [CompilerGeneratedAttribute]
public IQueryableMethodTranslatingExpressionVisitorFactory get_QueryableMethodTranslatingExpressionVisitorFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_QueryableMethodTranslatingExpressionVisitorFactory(IQueryableMethodTranslatingExpressionVisitorFactory value);
    [CompilerGeneratedAttribute]
public IQueryTranslationPostprocessorFactory get_QueryTranslationPostprocessorFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_QueryTranslationPostprocessorFactory(IQueryTranslationPostprocessorFactory value);
    [CompilerGeneratedAttribute]
public IShapedQueryCompilingExpressionVisitorFactory get_ShapedQueryCompilingExpressionVisitorFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ShapedQueryCompilingExpressionVisitorFactory(IShapedQueryCompilingExpressionVisitorFactory value);
    [CompilerGeneratedAttribute]
public bool get_IsRetryingExecutionStrategy();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsRetryingExecutionStrategy(bool value);
    [CompilerGeneratedAttribute]
public IDbContextOptions get_ContextOptions();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ContextOptions(IDbContextOptions value);
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Query> get_Logger();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Logger(IDiagnosticsLogger`1<Query> value);
    [CompilerGeneratedAttribute]
public IInterceptors get_Interceptors();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(QueryCompilationContextDependencies left, QueryCompilationContextDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(QueryCompilationContextDependencies left, QueryCompilationContextDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(QueryCompilationContextDependencies other);
    [CompilerGeneratedAttribute]
public QueryCompilationContextDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Query.QueryContext : object {
    private IDictionary`2<string, object> _parameterValues;
    private IStateManager _stateManager;
    [CompilerGeneratedAttribute]
private DbContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryContextDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationToken <CancellationToken>k__BackingField;
    public DbContext Context { get; }
    protected QueryContextDependencies Dependencies { get; }
    public IExecutionStrategy ExecutionStrategy { get; }
    public IConcurrencyDetector ConcurrencyDetector { get; }
    public IExceptionDetector ExceptionDetector { get; }
    public CancellationToken CancellationToken { get; public set; }
    public IDiagnosticsLogger`1<Command> CommandLogger { get; }
    public IDiagnosticsLogger`1<Query> QueryLogger { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IReadOnlyDictionary`2<string, object> ParameterValues { get; }
    protected QueryContext(QueryContextDependencies dependencies);
    [CompilerGeneratedAttribute]
public virtual DbContext get_Context();
    [CompilerGeneratedAttribute]
protected virtual QueryContextDependencies get_Dependencies();
    public virtual void SetNavigationIsLoaded(object entity, INavigationBase navigation);
    public virtual IExecutionStrategy get_ExecutionStrategy();
    public virtual IConcurrencyDetector get_ConcurrencyDetector();
    public virtual IExceptionDetector get_ExceptionDetector();
    [CompilerGeneratedAttribute]
public virtual CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
public virtual void set_CancellationToken(CancellationToken value);
    public virtual IDiagnosticsLogger`1<Command> get_CommandLogger();
    public virtual IDiagnosticsLogger`1<Query> get_QueryLogger();
    public virtual IReadOnlyDictionary`2<string, object> get_ParameterValues();
    public virtual void AddParameter(string name, object value);
    public virtual void InitializeStateManager(bool standAlone);
    [EntityFrameworkInternalAttribute]
public virtual InternalEntityEntry TryGetEntry(IKey key, Object[] keyValues, bool throwOnNullKey, Boolean& hasNullKey);
    [EntityFrameworkInternalAttribute]
public virtual InternalEntityEntry StartTracking(IEntityType entityType, object entity, ValueBuffer valueBuffer);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.QueryContextDependencies : object {
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IExecutionStrategy <ExecutionStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private IConcurrencyDetector <ConcurrencyDetector>k__BackingField;
    [CompilerGeneratedAttribute]
private IExceptionDetector <ExceptionDetector>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Command> <CommandLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Query> <QueryLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public ICurrentDbContext CurrentContext { get; public set; }
    [EntityFrameworkInternalAttribute]
public IStateManager StateManager { get; }
    public IExecutionStrategy ExecutionStrategy { get; public set; }
    public IConcurrencyDetector ConcurrencyDetector { get; public set; }
    public IExceptionDetector ExceptionDetector { get; public set; }
    public IDiagnosticsLogger`1<Command> CommandLogger { get; public set; }
    public IDiagnosticsLogger`1<Query> QueryLogger { get; public set; }
    [EntityFrameworkInternalAttribute]
public QueryContextDependencies(ICurrentDbContext currentContext, IExecutionStrategy executionStrategy, IConcurrencyDetector concurrencyDetector, IExceptionDetector exceptionDetector, IDiagnosticsLogger`1<Command> commandLogger, IDiagnosticsLogger`1<Query> queryLogger);
    [CompilerGeneratedAttribute]
private QueryContextDependencies(QueryContextDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public ICurrentDbContext get_CurrentContext();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CurrentContext(ICurrentDbContext value);
    public IStateManager get_StateManager();
    [CompilerGeneratedAttribute]
public IExecutionStrategy get_ExecutionStrategy();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ExecutionStrategy(IExecutionStrategy value);
    [CompilerGeneratedAttribute]
public IConcurrencyDetector get_ConcurrencyDetector();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ConcurrencyDetector(IConcurrencyDetector value);
    [CompilerGeneratedAttribute]
public IExceptionDetector get_ExceptionDetector();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ExceptionDetector(IExceptionDetector value);
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Command> get_CommandLogger();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CommandLogger(IDiagnosticsLogger`1<Command> value);
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Query> get_QueryLogger();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_QueryLogger(IDiagnosticsLogger`1<Query> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(QueryContextDependencies left, QueryContextDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(QueryContextDependencies left, QueryContextDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(QueryContextDependencies other);
    [CompilerGeneratedAttribute]
public QueryContextDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Query.QueryRootExpression : Expression {
    [CompilerGeneratedAttribute]
private IAsyncQueryProvider <QueryProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ElementType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [NullableAttribute("2")]
public IAsyncQueryProvider QueryProvider { get; }
    public Type ElementType { get; }
    public ExpressionType NodeType { get; }
    public Type Type { get; }
    public bool CanReduce { get; }
    protected QueryRootExpression(IAsyncQueryProvider asyncQueryProvider, Type elementType);
    protected QueryRootExpression(Type elementType);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual IAsyncQueryProvider get_QueryProvider();
    [CompilerGeneratedAttribute]
public virtual Type get_ElementType();
    public abstract virtual Expression DetachQueryProvider();
    public virtual ExpressionType get_NodeType();
    [CompilerGeneratedAttribute]
public virtual Type get_Type();
    public virtual bool get_CanReduce();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    protected abstract virtual void Print(ExpressionPrinter expressionPrinter);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(ExpressionPrinter expressionPrinter);
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.QueryTranslationPostprocessor : object {
    [CompilerGeneratedAttribute]
private QueryTranslationPostprocessorDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryCompilationContext <QueryCompilationContext>k__BackingField;
    protected QueryTranslationPostprocessorDependencies Dependencies { get; }
    protected QueryCompilationContext QueryCompilationContext { get; }
    public QueryTranslationPostprocessor(QueryTranslationPostprocessorDependencies dependencies, QueryCompilationContext queryCompilationContext);
    [CompilerGeneratedAttribute]
protected virtual QueryTranslationPostprocessorDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual QueryCompilationContext get_QueryCompilationContext();
    public virtual Expression Process(Expression query);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.QueryTranslationPostprocessorDependencies : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
private QueryTranslationPostprocessorDependencies(QueryTranslationPostprocessorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(QueryTranslationPostprocessorDependencies left, QueryTranslationPostprocessorDependencies right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(QueryTranslationPostprocessorDependencies left, QueryTranslationPostprocessorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(QueryTranslationPostprocessorDependencies other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public QueryTranslationPostprocessorDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.QueryTranslationPreprocessor : object {
    [CompilerGeneratedAttribute]
private QueryTranslationPreprocessorDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryCompilationContext <QueryCompilationContext>k__BackingField;
    protected QueryTranslationPreprocessorDependencies Dependencies { get; }
    protected QueryCompilationContext QueryCompilationContext { get; }
    public QueryTranslationPreprocessor(QueryTranslationPreprocessorDependencies dependencies, QueryCompilationContext queryCompilationContext);
    [CompilerGeneratedAttribute]
protected virtual QueryTranslationPreprocessorDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual QueryCompilationContext get_QueryCompilationContext();
    public virtual Expression Process(Expression query);
    public virtual Expression NormalizeQueryableMethod(Expression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.QueryTranslationPreprocessorDependencies : object {
    [CompilerGeneratedAttribute]
private IEvaluatableExpressionFilter <EvaluatableExpressionFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private INavigationExpansionExtensibilityHelper <NavigationExpansionExtensibilityHelper>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IEvaluatableExpressionFilter EvaluatableExpressionFilter { get; public set; }
    public INavigationExpansionExtensibilityHelper NavigationExpansionExtensibilityHelper { get; public set; }
    [EntityFrameworkInternalAttribute]
public QueryTranslationPreprocessorDependencies(IEvaluatableExpressionFilter evaluatableExpressionFilter, INavigationExpansionExtensibilityHelper navigationExpansionExtensibilityHelper);
    [CompilerGeneratedAttribute]
private QueryTranslationPreprocessorDependencies(QueryTranslationPreprocessorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IEvaluatableExpressionFilter get_EvaluatableExpressionFilter();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_EvaluatableExpressionFilter(IEvaluatableExpressionFilter value);
    [CompilerGeneratedAttribute]
public INavigationExpansionExtensibilityHelper get_NavigationExpansionExtensibilityHelper();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_NavigationExpansionExtensibilityHelper(INavigationExpansionExtensibilityHelper value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(QueryTranslationPreprocessorDependencies left, QueryTranslationPreprocessorDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(QueryTranslationPreprocessorDependencies left, QueryTranslationPreprocessorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(QueryTranslationPreprocessorDependencies other);
    [CompilerGeneratedAttribute]
public QueryTranslationPreprocessorDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.ReplacingExpressionVisitor : ExpressionVisitor {
    private IReadOnlyList`1<Expression> _originals;
    private IReadOnlyList`1<Expression> _replacements;
    public ReplacingExpressionVisitor(IReadOnlyList`1<Expression> originals, IReadOnlyList`1<Expression> replacements);
    public static Expression Replace(Expression original, Expression replacement, Expression tree);
    [NullableContextAttribute("2")]
public virtual Expression Visit(Expression expression);
    protected virtual Expression VisitMember(MemberExpression memberExpression);
    protected virtual Expression VisitMethodCall(MethodCallExpression methodCallExpression);
}
public enum Microsoft.EntityFrameworkCore.Query.ResultCardinality : Enum {
    public int value__;
    public static ResultCardinality Enumerable;
    public static ResultCardinality Single;
    public static ResultCardinality SingleOrDefault;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor : ExpressionVisitor {
    private static PropertyInfo CancellationTokenMemberInfo;
    private Expression _cancellationTokenParameter;
    private EntityMaterializerInjectingExpressionVisitor _entityMaterializerInjectingExpressionVisitor;
    private ConstantVerifyingExpressionVisitor _constantVerifyingExpressionVisitor;
    [CompilerGeneratedAttribute]
private ShapedQueryCompilingExpressionVisitorDependencies <Dependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private QueryCompilationContext <QueryCompilationContext>k__BackingField;
    private static MethodInfo SingleAsyncMethodInfo;
    private static MethodInfo SingleOrDefaultAsyncMethodInfo;
    protected ShapedQueryCompilingExpressionVisitorDependencies Dependencies { get; }
    protected QueryCompilationContext QueryCompilationContext { get; }
    protected ShapedQueryCompilingExpressionVisitor(ShapedQueryCompilingExpressionVisitorDependencies dependencies, QueryCompilationContext queryCompilationContext);
    private static ShapedQueryCompilingExpressionVisitor();
    [CompilerGeneratedAttribute]
protected virtual ShapedQueryCompilingExpressionVisitorDependencies get_Dependencies();
    [CompilerGeneratedAttribute]
protected virtual QueryCompilationContext get_QueryCompilationContext();
    protected virtual Expression VisitExtension(Expression extensionExpression);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor/<SingleAsync>d__14`1")]
private static Task`1<TSource> SingleAsync(IAsyncEnumerable`1<TSource> asyncEnumerable, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor/<SingleOrDefaultAsync>d__15`1")]
private static Task`1<TSource> SingleOrDefaultAsync(IAsyncEnumerable`1<TSource> asyncEnumerable, CancellationToken cancellationToken);
    protected abstract virtual Expression VisitShapedQuery(ShapedQueryExpression shapedQueryExpression);
    protected virtual Expression InjectEntityMaterializers(Expression expression);
    protected virtual void VerifyNoClientConstant(Expression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitorDependencies : object {
    [CompilerGeneratedAttribute]
private IEntityMaterializerSource <EntityMaterializerSource>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeMappingSource <TypeMappingSource>k__BackingField;
    [CompilerGeneratedAttribute]
private IMemoryCache <MemoryCache>k__BackingField;
    [CompilerGeneratedAttribute]
private ICoreSingletonOptions <CoreSingletonOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IEntityMaterializerSource EntityMaterializerSource { get; public set; }
    public ITypeMappingSource TypeMappingSource { get; public set; }
    public IMemoryCache MemoryCache { get; public set; }
    public ICoreSingletonOptions CoreSingletonOptions { get; public set; }
    [EntityFrameworkInternalAttribute]
public ShapedQueryCompilingExpressionVisitorDependencies(IEntityMaterializerSource entityMaterializerSource, ITypeMappingSource typeMappingSource, IMemoryCache memoryCache, ICoreSingletonOptions coreSingletonOptions);
    [CompilerGeneratedAttribute]
private ShapedQueryCompilingExpressionVisitorDependencies(ShapedQueryCompilingExpressionVisitorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IEntityMaterializerSource get_EntityMaterializerSource();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_EntityMaterializerSource(IEntityMaterializerSource value);
    [CompilerGeneratedAttribute]
public ITypeMappingSource get_TypeMappingSource();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TypeMappingSource(ITypeMappingSource value);
    [CompilerGeneratedAttribute]
public IMemoryCache get_MemoryCache();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_MemoryCache(IMemoryCache value);
    [CompilerGeneratedAttribute]
public ICoreSingletonOptions get_CoreSingletonOptions();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CoreSingletonOptions(ICoreSingletonOptions value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ShapedQueryCompilingExpressionVisitorDependencies left, ShapedQueryCompilingExpressionVisitorDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ShapedQueryCompilingExpressionVisitorDependencies left, ShapedQueryCompilingExpressionVisitorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ShapedQueryCompilingExpressionVisitorDependencies other);
    [CompilerGeneratedAttribute]
public ShapedQueryCompilingExpressionVisitorDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression : Expression {
    [CompilerGeneratedAttribute]
private Expression <QueryExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private ResultCardinality <ResultCardinality>k__BackingField;
    [CompilerGeneratedAttribute]
private Expression <ShaperExpression>k__BackingField;
    public Expression QueryExpression { get; }
    public ResultCardinality ResultCardinality { get; }
    public Expression ShaperExpression { get; }
    public Type Type { get; }
    public ExpressionType NodeType { get; }
    public ShapedQueryExpression(Expression queryExpression, Expression shaperExpression);
    private ShapedQueryExpression(Expression queryExpression, Expression shaperExpression, ResultCardinality resultCardinality);
    [CompilerGeneratedAttribute]
public virtual Expression get_QueryExpression();
    [CompilerGeneratedAttribute]
public virtual ResultCardinality get_ResultCardinality();
    [CompilerGeneratedAttribute]
public virtual Expression get_ShaperExpression();
    public virtual Type get_Type();
    public sealed virtual ExpressionType get_NodeType();
    protected virtual Expression VisitChildren(ExpressionVisitor visitor);
    public virtual ShapedQueryExpression Update(Expression queryExpression, Expression shaperExpression);
    public virtual ShapedQueryExpression UpdateQueryExpression(Expression queryExpression);
    public virtual ShapedQueryExpression UpdateShaperExpression(Expression shaperExpression);
    public virtual ShapedQueryExpression UpdateResultCardinality(ResultCardinality resultCardinality);
    private sealed virtual override void Microsoft.EntityFrameworkCore.Query.IPrintableExpression.Print(ExpressionPrinter expressionPrinter);
}
public static class Microsoft.EntityFrameworkCore.Query.TransparentIdentifierFactory : object {
    [NullableContextAttribute("1")]
[DynamicDependencyAttribute("-1", "Microsoft.EntityFrameworkCore.Query.TransparentIdentifierFactory/TransparentIdentifier`2")]
public static Type Create(Type outerType, Type innerType);
}
public enum Microsoft.EntityFrameworkCore.QueryTrackingBehavior : Enum {
    public int value__;
    public static QueryTrackingBehavior TrackAll;
    public static QueryTrackingBehavior NoTracking;
    public static QueryTrackingBehavior NoTrackingWithIdentityResolution;
}
public abstract class Microsoft.EntityFrameworkCore.SaveChangesEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <AcceptAllChangesOnSuccess>k__BackingField;
    public bool AcceptAllChangesOnSuccess { get; }
    protected SaveChangesEventArgs(bool acceptAllChangesOnSuccess);
    [CompilerGeneratedAttribute]
public virtual bool get_AcceptAllChangesOnSuccess();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.SaveChangesFailedEventArgs : SaveChangesEventArgs {
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public Exception Exception { get; }
    public SaveChangesFailedEventArgs(bool acceptAllChangesOnSuccess, Exception exception);
    [CompilerGeneratedAttribute]
public virtual Exception get_Exception();
}
public class Microsoft.EntityFrameworkCore.SavedChangesEventArgs : SaveChangesEventArgs {
    [CompilerGeneratedAttribute]
private int <EntitiesSavedCount>k__BackingField;
    public int EntitiesSavedCount { get; }
    public SavedChangesEventArgs(bool acceptAllChangesOnSuccess, int entitiesSavedCount);
    [CompilerGeneratedAttribute]
public virtual int get_EntitiesSavedCount();
}
public class Microsoft.EntityFrameworkCore.SavingChangesEventArgs : SaveChangesEventArgs {
    public SavingChangesEventArgs(bool acceptAllChangesOnSuccess);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping : object {
    private ValueComparer _comparer;
    private ValueComparer _keyComparer;
    private ValueComparer _providerValueComparer;
    [CompilerGeneratedAttribute]
private CoreTypeMappingParameters <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<IProperty, IEntityType, ValueGenerator> <ValueGeneratorFactory>k__BackingField;
    protected CoreTypeMappingParameters Parameters { get; }
    [DynamicallyAccessedMembersAttribute("536")]
public Type ClrType { get; }
    [NullableAttribute("2")]
public ValueConverter Converter { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<IProperty, IEntityType, ValueGenerator> ValueGeneratorFactory { get; }
    public ValueComparer Comparer { get; }
    public ValueComparer KeyComparer { get; }
    public ValueComparer ProviderValueComparer { get; }
    protected CoreTypeMapping(CoreTypeMappingParameters parameters);
    [CompilerGeneratedAttribute]
protected virtual CoreTypeMappingParameters get_Parameters();
    [CompilerGeneratedAttribute]
public virtual Type get_ClrType();
    [NullableContextAttribute("2")]
public virtual ValueConverter get_Converter();
    [CompilerGeneratedAttribute]
public virtual Func`3<IProperty, IEntityType, ValueGenerator> get_ValueGeneratorFactory();
    public virtual ValueComparer get_Comparer();
    public virtual ValueComparer get_KeyComparer();
    public virtual ValueComparer get_ProviderValueComparer();
    public abstract virtual CoreTypeMapping Clone(ValueConverter converter);
    public virtual Expression GenerateCodeLiteral(object value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Storage.Database : object {
    [CompilerGeneratedAttribute]
private DatabaseDependencies <Dependencies>k__BackingField;
    protected DatabaseDependencies Dependencies { get; }
    protected Database(DatabaseDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual DatabaseDependencies get_Dependencies();
    public abstract virtual int SaveChanges(IList`1<IUpdateEntry> entries);
    public abstract virtual Task`1<int> SaveChangesAsync(IList`1<IUpdateEntry> entries, CancellationToken cancellationToken);
    public virtual Func`2<QueryContext, TResult> CompileQuery(Expression query, bool async);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.DatabaseDependencies : object {
    [CompilerGeneratedAttribute]
private IQueryCompilationContextFactory <QueryCompilationContextFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IUpdateAdapterFactory <UpdateAdapterFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Update> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IQueryCompilationContextFactory QueryCompilationContextFactory { get; public set; }
    public IUpdateAdapterFactory UpdateAdapterFactory { get; public set; }
    public IDiagnosticsLogger`1<Update> Logger { get; }
    [EntityFrameworkInternalAttribute]
public DatabaseDependencies(IQueryCompilationContextFactory queryCompilationContextFactory, IUpdateAdapterFactory updateAdapterFactory, IDiagnosticsLogger`1<Update> logger);
    [CompilerGeneratedAttribute]
private DatabaseDependencies(DatabaseDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IQueryCompilationContextFactory get_QueryCompilationContextFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_QueryCompilationContextFactory(IQueryCompilationContextFactory value);
    [CompilerGeneratedAttribute]
public IUpdateAdapterFactory get_UpdateAdapterFactory();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_UpdateAdapterFactory(IUpdateAdapterFactory value);
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Update> get_Logger();
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(DatabaseDependencies left, DatabaseDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(DatabaseDependencies left, DatabaseDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(DatabaseDependencies other);
    [CompilerGeneratedAttribute]
public DatabaseDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.DatabaseProvider`1 : object {
    [CompilerGeneratedAttribute]
private DatabaseProviderDependencies <Dependencies>k__BackingField;
    protected DatabaseProviderDependencies Dependencies { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public string Version { get; }
    public DatabaseProvider`1(DatabaseProviderDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual DatabaseProviderDependencies get_Dependencies();
    public virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual string get_Version();
    public virtual bool IsConfigured(IDbContextOptions options);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.DatabaseProviderDependencies : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
private DatabaseProviderDependencies(DatabaseProviderDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(DatabaseProviderDependencies left, DatabaseProviderDependencies right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(DatabaseProviderDependencies left, DatabaseProviderDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(DatabaseProviderDependencies other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public DatabaseProviderDependencies <Clone>$();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.ExecutionResult`1 : object {
    [CompilerGeneratedAttribute]
private bool <IsSuccessful>k__BackingField;
    [CompilerGeneratedAttribute]
private TResult <Result>k__BackingField;
    public bool IsSuccessful { get; }
    public TResult Result { get; }
    public ExecutionResult`1(bool successful, TResult result);
    [CompilerGeneratedAttribute]
public virtual bool get_IsSuccessful();
    [CompilerGeneratedAttribute]
public virtual TResult get_Result();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy : object {
    protected static int DefaultMaxRetryCount;
    protected static TimeSpan DefaultMaxDelay;
    private static double DefaultRandomFactor;
    private static double DefaultExponentialBase;
    private static TimeSpan DefaultCoefficient;
    [CompilerGeneratedAttribute]
private List`1<Exception> <ExceptionsEncountered>k__BackingField;
    [CompilerGeneratedAttribute]
private Random <Random>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxRetryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxRetryDelay>k__BackingField;
    [CompilerGeneratedAttribute]
private ExecutionStrategyDependencies <Dependencies>k__BackingField;
    private static AsyncLocal`1<ExecutionStrategy> CurrentExecutionStrategy;
    protected List`1<Exception> ExceptionsEncountered { get; }
    protected Random Random { get; }
    protected int MaxRetryCount { get; }
    protected TimeSpan MaxRetryDelay { get; }
    protected ExecutionStrategyDependencies Dependencies { get; }
    [NullableAttribute("2")]
public static ExecutionStrategy Current { get; protected set; }
    public bool RetriesOnFailure { get; }
    protected ExecutionStrategy(DbContext context, int maxRetryCount, TimeSpan maxRetryDelay);
    protected ExecutionStrategy(ExecutionStrategyDependencies dependencies, int maxRetryCount, TimeSpan maxRetryDelay);
    private static ExecutionStrategy();
    [CompilerGeneratedAttribute]
protected virtual List`1<Exception> get_ExceptionsEncountered();
    [CompilerGeneratedAttribute]
protected virtual Random get_Random();
    [CompilerGeneratedAttribute]
protected virtual int get_MaxRetryCount();
    [CompilerGeneratedAttribute]
protected virtual TimeSpan get_MaxRetryDelay();
    [CompilerGeneratedAttribute]
protected virtual ExecutionStrategyDependencies get_Dependencies();
    [NullableContextAttribute("2")]
public static ExecutionStrategy get_Current();
    [NullableContextAttribute("2")]
protected static void set_Current(ExecutionStrategy value);
    public virtual bool get_RetriesOnFailure();
    public virtual TResult Execute(TState state, Func`3<DbContext, TState, TResult> operation, Func`3<DbContext, TState, ExecutionResult`1<TResult>> verifySucceeded);
    private ExecutionResult`1<TResult> ExecuteImplementation(Func`3<DbContext, TState, ExecutionResult`1<TResult>> operation, Func`3<DbContext, TState, ExecutionResult`1<TResult>> verifySucceeded, TState state);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy/<ExecuteAsync>d__30`2")]
public virtual Task`1<TResult> ExecuteAsync(TState state, Func`4<DbContext, TState, CancellationToken, Task`1<TResult>> operation, Func`4<DbContext, TState, CancellationToken, Task`1<ExecutionResult`1<TResult>>> verifySucceeded, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy/<ExecuteImplementationAsync>d__31`2")]
private Task`1<ExecutionResult`1<TResult>> ExecuteImplementationAsync(Func`4<DbContext, TState, CancellationToken, Task`1<ExecutionResult`1<TResult>>> operation, Func`4<DbContext, TState, CancellationToken, Task`1<ExecutionResult`1<TResult>>> verifySucceeded, TState state, CancellationToken cancellationToken);
    protected virtual void OnFirstExecution();
    protected virtual void OnRetry();
    protected virtual Nullable`1<TimeSpan> GetNextDelay(Exception lastException);
    protected internal virtual bool ShouldVerifySuccessOn(Exception exception);
    protected internal abstract virtual bool ShouldRetryOn(Exception exception);
    public static TResult CallOnWrappedException(Exception exception, Func`2<Exception, TResult> exceptionHandler);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies : object {
    [CompilerGeneratedAttribute]
private IDbContextOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private ICurrentDbContext <CurrentContext>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Infrastructure> <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IDbContextOptions Options { get; public set; }
    public ICurrentDbContext CurrentContext { get; public set; }
    public IDiagnosticsLogger`1<Infrastructure> Logger { get; public set; }
    [EntityFrameworkInternalAttribute]
public ExecutionStrategyDependencies(ICurrentDbContext currentContext, IDbContextOptions options, IDiagnosticsLogger`1<Infrastructure> logger);
    [CompilerGeneratedAttribute]
private ExecutionStrategyDependencies(ExecutionStrategyDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IDbContextOptions get_Options();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Options(IDbContextOptions value);
    [CompilerGeneratedAttribute]
public ICurrentDbContext get_CurrentContext();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CurrentContext(ICurrentDbContext value);
    [CompilerGeneratedAttribute]
public IDiagnosticsLogger`1<Infrastructure> get_Logger();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Logger(IDiagnosticsLogger`1<Infrastructure> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ExecutionStrategyDependencies left, ExecutionStrategyDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ExecutionStrategyDependencies left, ExecutionStrategyDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ExecutionStrategyDependencies other);
    [CompilerGeneratedAttribute]
public ExecutionStrategyDependencies <Clone>$();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Storage.IDatabase {
    public abstract virtual int SaveChanges(IList`1<IUpdateEntry> entries);
    public abstract virtual Task`1<int> SaveChangesAsync(IList`1<IUpdateEntry> entries, CancellationToken cancellationToken);
    public abstract virtual Func`2<QueryContext, TResult> CompileQuery(Expression query, bool async);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator {
    public abstract virtual bool EnsureDeleted();
    public abstract virtual Task`1<bool> EnsureDeletedAsync(CancellationToken cancellationToken);
    public abstract virtual bool EnsureCreated();
    public abstract virtual Task`1<bool> EnsureCreatedAsync(CancellationToken cancellationToken);
    public abstract virtual bool CanConnect();
    public abstract virtual Task`1<bool> CanConnectAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependencies {
    public IDbContextTransactionManager TransactionManager { get; }
    public IDatabaseCreator DatabaseCreator { get; }
    public IExecutionStrategy ExecutionStrategy { get; }
    public IExecutionStrategyFactory ExecutionStrategyFactory { get; }
    public IEnumerable`1<IDatabaseProvider> DatabaseProviders { get; }
    public IDiagnosticsLogger`1<Command> CommandLogger { get; }
    public IConcurrencyDetector ConcurrencyDetector { get; }
    public ICoreSingletonOptions CoreOptions { get; }
    public IAsyncQueryProvider QueryProvider { get; }
    public abstract virtual IDbContextTransactionManager get_TransactionManager();
    public abstract virtual IDatabaseCreator get_DatabaseCreator();
    public abstract virtual IExecutionStrategy get_ExecutionStrategy();
    public abstract virtual IExecutionStrategyFactory get_ExecutionStrategyFactory();
    public abstract virtual IEnumerable`1<IDatabaseProvider> get_DatabaseProviders();
    public abstract virtual IDiagnosticsLogger`1<Command> get_CommandLogger();
    public abstract virtual IConcurrencyDetector get_ConcurrencyDetector();
    public abstract virtual ICoreSingletonOptions get_CoreOptions();
    public abstract virtual IAsyncQueryProvider get_QueryProvider();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Storage.IDatabaseFacadeDependenciesAccessor {
    public IDatabaseFacadeDependencies Dependencies { get; }
    public DbContext Context { get; }
    public abstract virtual IDatabaseFacadeDependencies get_Dependencies();
    public abstract virtual DbContext get_Context();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Storage.IDatabaseProvider {
    public string Name { get; }
    [NullableAttribute("2")]
public string Version { get; }
    public abstract virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual string get_Version();
    public abstract virtual bool IsConfigured(IDbContextOptions options);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction {
    public Guid TransactionId { get; }
    public bool SupportsSavepoints { get; }
    public abstract virtual Guid get_TransactionId();
    public abstract virtual void Commit();
    public abstract virtual Task CommitAsync(CancellationToken cancellationToken);
    public abstract virtual void Rollback();
    public abstract virtual Task RollbackAsync(CancellationToken cancellationToken);
    public virtual void CreateSavepoint(string name);
    public virtual Task CreateSavepointAsync(string name, CancellationToken cancellationToken);
    public virtual void RollbackToSavepoint(string name);
    public virtual Task RollbackToSavepointAsync(string name, CancellationToken cancellationToken);
    public virtual void ReleaseSavepoint(string name);
    public virtual Task ReleaseSavepointAsync(string name, CancellationToken cancellationToken);
    public virtual bool get_SupportsSavepoints();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager {
    [NullableAttribute("2")]
public IDbContextTransaction CurrentTransaction { get; }
    public abstract virtual IDbContextTransaction BeginTransaction();
    public abstract virtual Task`1<IDbContextTransaction> BeginTransactionAsync(CancellationToken cancellationToken);
    public abstract virtual void CommitTransaction();
    public abstract virtual Task CommitTransactionAsync(CancellationToken cancellationToken);
    public abstract virtual void RollbackTransaction();
    public abstract virtual Task RollbackTransactionAsync(CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public abstract virtual IDbContextTransaction get_CurrentTransaction();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Storage.IExceptionDetector {
    public abstract virtual bool IsCancellation(Exception exception, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy {
    public bool RetriesOnFailure { get; }
    public abstract virtual bool get_RetriesOnFailure();
    public abstract virtual TResult Execute(TState state, Func`3<DbContext, TState, TResult> operation, Func`3<DbContext, TState, ExecutionResult`1<TResult>> verifySucceeded);
    public abstract virtual Task`1<TResult> ExecuteAsync(TState state, Func`4<DbContext, TState, CancellationToken, Task`1<TResult>> operation, Func`4<DbContext, TState, CancellationToken, Task`1<ExecutionResult`1<TResult>>> verifySucceeded, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory {
    public abstract virtual IExecutionStrategy Create();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.Internal.DatabaseFacadeDependencies : object {
    [CompilerGeneratedAttribute]
private IDbContextTransactionManager <TransactionManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IDatabaseCreator <DatabaseCreator>k__BackingField;
    [CompilerGeneratedAttribute]
private IExecutionStrategy <ExecutionStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private IExecutionStrategyFactory <ExecutionStrategyFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IDatabaseProvider> <DatabaseProviders>k__BackingField;
    [CompilerGeneratedAttribute]
private IDiagnosticsLogger`1<Command> <CommandLogger>k__BackingField;
    [CompilerGeneratedAttribute]
private IConcurrencyDetector <ConcurrencyDetector>k__BackingField;
    [CompilerGeneratedAttribute]
private ICoreSingletonOptions <CoreOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IAsyncQueryProvider <QueryProvider>k__BackingField;
    [CompilerGeneratedAttribute]
protected Type EqualityContract { get; }
    public IDbContextTransactionManager TransactionManager { get; public set; }
    public IDatabaseCreator DatabaseCreator { get; public set; }
    public IExecutionStrategy ExecutionStrategy { get; public set; }
    public IExecutionStrategyFactory ExecutionStrategyFactory { get; public set; }
    public IEnumerable`1<IDatabaseProvider> DatabaseProviders { get; public set; }
    public IDiagnosticsLogger`1<Command> CommandLogger { get; public set; }
    public IConcurrencyDetector ConcurrencyDetector { get; public set; }
    public ICoreSingletonOptions CoreOptions { get; public set; }
    public IAsyncQueryProvider QueryProvider { get; public set; }
    public DatabaseFacadeDependencies(IDbContextTransactionManager transactionManager, IDatabaseCreator databaseCreator, IExecutionStrategy executionStrategy, IExecutionStrategyFactory executionStrategyFactory, IEnumerable`1<IDatabaseProvider> databaseProviders, IDiagnosticsLogger`1<Command> commandLogger, IConcurrencyDetector concurrencyDetector, ICoreSingletonOptions coreOptions, IAsyncQueryProvider queryProvider);
    [CompilerGeneratedAttribute]
protected DatabaseFacadeDependencies(DatabaseFacadeDependencies original);
    [CompilerGeneratedAttribute]
protected virtual Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public virtual IDbContextTransactionManager get_TransactionManager();
    [CompilerGeneratedAttribute]
public virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TransactionManager(IDbContextTransactionManager value);
    [CompilerGeneratedAttribute]
public virtual IDatabaseCreator get_DatabaseCreator();
    [CompilerGeneratedAttribute]
public virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DatabaseCreator(IDatabaseCreator value);
    [CompilerGeneratedAttribute]
public virtual IExecutionStrategy get_ExecutionStrategy();
    [CompilerGeneratedAttribute]
public virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ExecutionStrategy(IExecutionStrategy value);
    [CompilerGeneratedAttribute]
public virtual IExecutionStrategyFactory get_ExecutionStrategyFactory();
    [CompilerGeneratedAttribute]
public virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ExecutionStrategyFactory(IExecutionStrategyFactory value);
    [CompilerGeneratedAttribute]
public virtual IEnumerable`1<IDatabaseProvider> get_DatabaseProviders();
    [CompilerGeneratedAttribute]
public virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_DatabaseProviders(IEnumerable`1<IDatabaseProvider> value);
    [CompilerGeneratedAttribute]
public virtual IDiagnosticsLogger`1<Command> get_CommandLogger();
    [CompilerGeneratedAttribute]
public virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CommandLogger(IDiagnosticsLogger`1<Command> value);
    [CompilerGeneratedAttribute]
public virtual IConcurrencyDetector get_ConcurrencyDetector();
    [CompilerGeneratedAttribute]
public virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ConcurrencyDetector(IConcurrencyDetector value);
    [CompilerGeneratedAttribute]
public virtual ICoreSingletonOptions get_CoreOptions();
    [CompilerGeneratedAttribute]
public virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CoreOptions(ICoreSingletonOptions value);
    [CompilerGeneratedAttribute]
public virtual IAsyncQueryProvider get_QueryProvider();
    [CompilerGeneratedAttribute]
public virtual Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_QueryProvider(IAsyncQueryProvider value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
protected virtual bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(DatabaseFacadeDependencies left, DatabaseFacadeDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(DatabaseFacadeDependencies left, DatabaseFacadeDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(DatabaseFacadeDependencies other);
    [CompilerGeneratedAttribute]
public virtual DatabaseFacadeDependencies <Clone>$();
}
public class Microsoft.EntityFrameworkCore.Storage.Internal.ExceptionDetector : object {
    [NullableContextAttribute("1")]
public virtual bool IsCancellation(Exception exception, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.Internal.ExecutionStrategyFactory : object {
    private NonRetryingExecutionStrategy _instance;
    [CompilerGeneratedAttribute]
private ExecutionStrategyDependencies <Dependencies>k__BackingField;
    protected ExecutionStrategyDependencies Dependencies { get; }
    public ExecutionStrategyFactory(ExecutionStrategyDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ExecutionStrategyDependencies get_Dependencies();
    public virtual IExecutionStrategy Create();
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Storage.ITransactionEnlistmentManager {
    public Transaction CurrentAmbientTransaction { get; }
    public Transaction EnlistedTransaction { get; }
    public virtual Transaction get_CurrentAmbientTransaction();
    public abstract virtual Transaction get_EnlistedTransaction();
    public abstract virtual void EnlistTransaction(Transaction transaction);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Storage.ITypeMappingSource {
    public abstract virtual CoreTypeMapping FindMapping(IProperty property);
    public abstract virtual CoreTypeMapping FindMapping(MemberInfo member);
    public abstract virtual CoreTypeMapping FindMapping(Type type);
    public abstract virtual CoreTypeMapping FindMapping(Type type, IModel model);
}
[NullableContextAttribute("2")]
public interface Microsoft.EntityFrameworkCore.Storage.ITypeMappingSourcePlugin {
    public abstract virtual CoreTypeMapping FindMapping(TypeMappingInfo& modreq(System.Runtime.InteropServices.InAttribute) mappingInfo);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Storage.MaterializationContext : ValueType {
    public static MethodInfo GetValueBufferMethod;
    internal static PropertyInfo ContextProperty;
    [CompilerGeneratedAttribute]
private ValueBuffer <ValueBuffer>k__BackingField;
    [CompilerGeneratedAttribute]
private DbContext <Context>k__BackingField;
    public ValueBuffer ValueBuffer { get; }
    public DbContext Context { get; }
    public MaterializationContext(ValueBuffer& valueBuffer, DbContext context);
    private static MaterializationContext();
    [CompilerGeneratedAttribute]
public ValueBuffer get_ValueBuffer();
    [CompilerGeneratedAttribute]
public DbContext get_Context();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.NonRetryingExecutionStrategy : object {
    [CompilerGeneratedAttribute]
private ExecutionStrategyDependencies <Dependencies>k__BackingField;
    private ExecutionStrategyDependencies Dependencies { get; }
    public bool RetriesOnFailure { get; }
    public NonRetryingExecutionStrategy(ExecutionStrategyDependencies dependencies);
    public NonRetryingExecutionStrategy(DbContext context);
    [CompilerGeneratedAttribute]
private ExecutionStrategyDependencies get_Dependencies();
    public sealed virtual bool get_RetriesOnFailure();
    public sealed virtual TResult Execute(TState state, Func`3<DbContext, TState, TResult> operation, Func`3<DbContext, TState, ExecutionResult`1<TResult>> verifySucceeded);
    public sealed virtual Task`1<TResult> ExecuteAsync(TState state, Func`4<DbContext, TState, CancellationToken, Task`1<TResult>> operation, Func`4<DbContext, TState, CancellationToken, Task`1<ExecutionResult`1<TResult>>> verifySucceeded, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException : Exception {
    public RetryLimitExceededException(string message);
    public RetryLimitExceededException(string message, Exception innerException);
    public RetryLimitExceededException(SerializationInfo info, StreamingContext context);
}
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo : ValueType {
    [CompilerGeneratedAttribute]
private bool <IsKeyOrIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsUnicode>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsRowVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ClrType>k__BackingField;
    public bool IsKeyOrIndex { get; public set; }
    public Nullable`1<int> Size { get; public set; }
    public Nullable`1<bool> IsUnicode { get; public set; }
    public Nullable`1<bool> IsRowVersion { get; public set; }
    public Nullable`1<int> Precision { get; public set; }
    public Nullable`1<int> Scale { get; public set; }
    [NullableAttribute("2")]
public Type ClrType { get; public set; }
    [NullableContextAttribute("1")]
public TypeMappingInfo(IProperty property);
    [NullableContextAttribute("1")]
public TypeMappingInfo(IReadOnlyList`1<IProperty> principals, Nullable`1<bool> fallbackUnicode, Nullable`1<int> fallbackSize, Nullable`1<int> fallbackPrecision, Nullable`1<int> fallbackScale);
    [NullableContextAttribute("1")]
public TypeMappingInfo(MemberInfo member, Nullable`1<bool> unicode, Nullable`1<int> size, Nullable`1<int> precision, Nullable`1<int> scale);
    [NullableContextAttribute("2")]
public TypeMappingInfo(Type type, bool keyOrIndex, Nullable`1<bool> unicode, Nullable`1<int> size, Nullable`1<bool> rowVersion, Nullable`1<int> precision, Nullable`1<int> scale);
    public TypeMappingInfo(TypeMappingInfo source, ValueConverterInfo converter, Nullable`1<bool> unicode, Nullable`1<int> size, Nullable`1<int> precision, Nullable`1<int> scale);
    public TypeMappingInfo WithConverter(ValueConverterInfo& converterInfo);
    [CompilerGeneratedAttribute]
public bool get_IsKeyOrIndex();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsKeyOrIndex(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Size();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Size(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsUnicode();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsUnicode(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsRowVersion();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_IsRowVersion(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Precision();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Precision(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Scale();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Scale(Nullable`1<int> value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_ClrType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ClrType(Type value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(TypeMappingInfo left, TypeMappingInfo right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(TypeMappingInfo left, TypeMappingInfo right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(TypeMappingInfo other);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Storage.TypeMappingSource : TypeMappingSourceBase {
    private ConcurrentDictionary`2<ValueTuple`3<TypeMappingInfo, Type, ValueConverter>, CoreTypeMapping> _explicitMappings;
    protected TypeMappingSource(TypeMappingSourceDependencies dependencies);
    private CoreTypeMapping FindMappingWithConversion(TypeMappingInfo& mappingInfo, IReadOnlyList`1<IProperty> principals);
    private CoreTypeMapping FindMappingWithConversion(TypeMappingInfo mappingInfo, Type providerClrType, ValueConverter customConverter);
    public virtual CoreTypeMapping FindMapping(IProperty property);
    public virtual CoreTypeMapping FindMapping(Type type);
    public virtual CoreTypeMapping FindMapping(Type type, IModel model);
    public virtual CoreTypeMapping FindMapping(MemberInfo member);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceBase : object {
    [CompilerGeneratedAttribute]
private TypeMappingSourceDependencies <Dependencies>k__BackingField;
    protected TypeMappingSourceDependencies Dependencies { get; }
    protected TypeMappingSourceBase(TypeMappingSourceDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual TypeMappingSourceDependencies get_Dependencies();
    [NullableContextAttribute("2")]
protected virtual CoreTypeMapping FindMapping(TypeMappingInfo& modreq(System.Runtime.InteropServices.InAttribute) mappingInfo);
    [NullableContextAttribute("2")]
protected virtual void ValidateMapping(CoreTypeMapping mapping, IProperty property);
    public abstract virtual CoreTypeMapping FindMapping(IProperty property);
    public abstract virtual CoreTypeMapping FindMapping(Type type);
    public abstract virtual CoreTypeMapping FindMapping(Type type, IModel model);
    public abstract virtual CoreTypeMapping FindMapping(MemberInfo member);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies : object {
    [CompilerGeneratedAttribute]
private IValueConverterSelector <ValueConverterSelector>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<ITypeMappingSourcePlugin> <Plugins>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IValueConverterSelector ValueConverterSelector { get; public set; }
    public IEnumerable`1<ITypeMappingSourcePlugin> Plugins { get; public set; }
    [EntityFrameworkInternalAttribute]
public TypeMappingSourceDependencies(IValueConverterSelector valueConverterSelector, IEnumerable`1<ITypeMappingSourcePlugin> plugins);
    [CompilerGeneratedAttribute]
private TypeMappingSourceDependencies(TypeMappingSourceDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IValueConverterSelector get_ValueConverterSelector();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_ValueConverterSelector(IValueConverterSelector value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<ITypeMappingSourcePlugin> get_Plugins();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Plugins(IEnumerable`1<ITypeMappingSourcePlugin> value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(TypeMappingSourceDependencies left, TypeMappingSourceDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(TypeMappingSourceDependencies left, TypeMappingSourceDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(TypeMappingSourceDependencies other);
    [CompilerGeneratedAttribute]
public TypeMappingSourceDependencies <Clone>$();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
public class Microsoft.EntityFrameworkCore.Storage.ValueBuffer : ValueType {
    public static ValueBuffer Empty;
    private Object[] _values;
    [NullableAttribute("1")]
internal static MethodInfo GetValueMethod;
    public object Item { get; public set; }
    public int Count { get; }
    public bool IsEmpty { get; }
    public ValueBuffer(Object[] values);
    private static ValueBuffer();
    public object get_Item(int index);
    public void set_Item(int index, object value);
    public int get_Count();
    public bool get_IsEmpty();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ValueBuffer other);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.BoolToStringConverter : BoolToTwoValuesConverter`1<string> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public BoolToStringConverter(string falseValue, string trueValue, ConverterMappingHints mappingHints);
    private static BoolToStringConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
    private static Expression`1<Func`2<string, bool>> FromProvider(string trueValue);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.BoolToTwoValuesConverter`1 : ValueConverter`2<bool, TProvider> {
    public BoolToTwoValuesConverter`1(TProvider falseValue, TProvider trueValue, Expression`1<Func`2<TProvider, bool>> fromProvider, ConverterMappingHints mappingHints);
    private static Expression`1<Func`2<bool, TProvider>> ToProvider(TProvider falseValue, TProvider trueValue);
    private static Expression`1<Func`2<TProvider, bool>> ToBool(TProvider trueValue);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.BoolToZeroOneConverter`1 : BoolToTwoValuesConverter`1<TProvider> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public BoolToZeroOneConverter`1(ConverterMappingHints mappingHints);
    private static BoolToZeroOneConverter`1();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
    private static TProvider Zero();
    private static TProvider One();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.BytesToStringConverter : ValueConverter`2<Byte[], string> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public BytesToStringConverter(ConverterMappingHints mappingHints);
    private static BytesToStringConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.CastingConverter`2 : ValueConverter`2<TModel, TProvider> {
    private static ConverterMappingHints DefaultHints;
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public CastingConverter`2(ConverterMappingHints mappingHints);
    private static CastingConverter`2();
    private static ConverterMappingHints CreateDefaultHints();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
    private static Expression`1<Func`2<TIn, TOut>> Convert();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.CharToStringConverter : StringCharConverter`2<char, string> {
    private static ConverterMappingHints DefaultHints;
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public CharToStringConverter(ConverterMappingHints mappingHints);
    private static CharToStringConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Precision>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Scale>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsUnicode>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<IProperty, IEntityType, ValueGenerator> <ValueGeneratorFactory>k__BackingField;
    public Nullable`1<int> Size { get; }
    public Nullable`1<int> Precision { get; }
    public Nullable`1<int> Scale { get; }
    public Nullable`1<bool> IsUnicode { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<IProperty, IEntityType, ValueGenerator> ValueGeneratorFactory { get; }
    public ConverterMappingHints(Nullable`1<int> size, Nullable`1<int> precision, Nullable`1<int> scale, Nullable`1<bool> unicode, Func`3<IProperty, IEntityType, ValueGenerator> valueGeneratorFactory);
    [NullableContextAttribute("1")]
public virtual ConverterMappingHints With(ConverterMappingHints hints);
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_Size();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_Precision();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<int> get_Scale();
    [CompilerGeneratedAttribute]
public virtual Nullable`1<bool> get_IsUnicode();
    [CompilerGeneratedAttribute]
public virtual Func`3<IProperty, IEntityType, ValueGenerator> get_ValueGeneratorFactory();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeOffsetToBinaryConverter : ValueConverter`2<DateTimeOffset, long> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    [NullableContextAttribute("2")]
public DateTimeOffsetToBinaryConverter(ConverterMappingHints mappingHints);
    private static DateTimeOffsetToBinaryConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeOffsetToBytesConverter : ValueConverter`2<DateTimeOffset, Byte[]> {
    private static ConverterMappingHints DefaultHints;
    private static NumberToBytesConverter`1<long> LongToBytes;
    private static NumberToBytesConverter`1<short> ShortToBytes;
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public DateTimeOffsetToBytesConverter(ConverterMappingHints mappingHints);
    private static DateTimeOffsetToBytesConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
    private static Byte[] ToBytes(DateTimeOffset value);
    private static DateTimeOffset FromBytes(Byte[] bytes);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeOffsetToStringConverter : StringDateTimeOffsetConverter`2<DateTimeOffset, string> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public DateTimeOffsetToStringConverter(ConverterMappingHints mappingHints);
    private static DateTimeOffsetToStringConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeToBinaryConverter : ValueConverter`2<DateTime, long> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    [NullableContextAttribute("2")]
public DateTimeToBinaryConverter(ConverterMappingHints mappingHints);
    private static DateTimeToBinaryConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeToStringConverter : StringDateTimeConverter`2<DateTime, string> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public DateTimeToStringConverter(ConverterMappingHints mappingHints);
    private static DateTimeToStringConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.DateTimeToTicksConverter : ValueConverter`2<DateTime, long> {
    [NullableContextAttribute("2")]
public DateTimeToTicksConverter(ConverterMappingHints mappingHints);
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.EnumToNumberConverter`2 : ValueConverter`2<TEnum, TNumber> {
    private static ConverterMappingHints DefaultHints;
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    [NullableContextAttribute("2")]
public EnumToNumberConverter`2(ConverterMappingHints mappingHints);
    private static EnumToNumberConverter`2();
    private static ConverterMappingHints CreateDefaultHints();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
    private static Expression`1<Func`2<TEnum, TNumber>> ToNumber();
    private static Expression`1<Func`2<TNumber, TEnum>> ToEnum();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.EnumToStringConverter`1 : StringEnumConverter`3<TEnum, string, TEnum> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    [NullableContextAttribute("2")]
public EnumToStringConverter`1(ConverterMappingHints mappingHints);
    private static EnumToStringConverter`1();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.GuidToBytesConverter : ValueConverter`2<Guid, Byte[]> {
    private static ConverterMappingHints DefaultHints;
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public GuidToBytesConverter(ConverterMappingHints mappingHints);
    private static GuidToBytesConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.GuidToStringConverter : StringGuidConverter`2<Guid, string> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public GuidToStringConverter(ConverterMappingHints mappingHints);
    private static GuidToStringConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal.CompositeValueConverter`3 : ValueConverter`2<TModel, TProvider> {
    [NullableContextAttribute("1")]
public CompositeValueConverter`3(ValueConverter converter1, ValueConverter converter2, ConverterMappingHints mappingHints);
    private static Expression`1<Func`2<TIn, TOut>> Compose(Expression`1<Func`2<TIn, TMiddle>> upper, Expression`1<Func`2<TMiddle, TOut>> lower);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal.StringCharConverter`2 : ValueConverter`2<TModel, TProvider> {
    public StringCharConverter`2(Expression`1<Func`2<TModel, TProvider>> convertToProviderExpression, Expression`1<Func`2<TProvider, TModel>> convertFromProviderExpression, ConverterMappingHints mappingHints);
    protected static Expression`1<Func`2<char, string>> ToString();
    protected static Expression`1<Func`2<string, char>> ToChar();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal.StringDateTimeConverter`2 : ValueConverter`2<TModel, TProvider> {
    protected static ConverterMappingHints DefaultHints;
    public StringDateTimeConverter`2(Expression`1<Func`2<TModel, TProvider>> convertToProviderExpression, Expression`1<Func`2<TProvider, TModel>> convertFromProviderExpression, ConverterMappingHints mappingHints);
    private static StringDateTimeConverter`2();
    protected static Expression`1<Func`2<DateTime, string>> ToString();
    protected static Expression`1<Func`2<string, DateTime>> ToDateTime();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal.StringDateTimeOffsetConverter`2 : ValueConverter`2<TModel, TProvider> {
    protected static ConverterMappingHints DefaultHints;
    public StringDateTimeOffsetConverter`2(Expression`1<Func`2<TModel, TProvider>> convertToProviderExpression, Expression`1<Func`2<TProvider, TModel>> convertFromProviderExpression, ConverterMappingHints mappingHints);
    private static StringDateTimeOffsetConverter`2();
    protected static Expression`1<Func`2<DateTimeOffset, string>> ToString();
    protected static Expression`1<Func`2<string, DateTimeOffset>> ToDateTimeOffset();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal.StringEnumConverter`3 : ValueConverter`2<TModel, TProvider> {
    [NullableContextAttribute("1")]
public StringEnumConverter`3(Expression`1<Func`2<TModel, TProvider>> convertToProviderExpression, Expression`1<Func`2<TProvider, TModel>> convertFromProviderExpression, ConverterMappingHints mappingHints);
    protected static Expression`1<Func`2<TEnum, string>> ToString();
    protected static Expression`1<Func`2<string, TEnum>> ToEnum();
    private static TEnum ConvertToEnum(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal.StringGuidConverter`2 : ValueConverter`2<TModel, TProvider> {
    protected static ConverterMappingHints DefaultHints;
    public StringGuidConverter`2(Expression`1<Func`2<TModel, TProvider>> convertToProviderExpression, Expression`1<Func`2<TProvider, TModel>> convertFromProviderExpression, ConverterMappingHints mappingHints);
    private static StringGuidConverter`2();
    protected static Expression`1<Func`2<Guid, string>> ToString();
    protected static Expression`1<Func`2<string, Guid>> ToGuid();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal.StringNumberConverter`3 : ValueConverter`2<TModel, TProvider> {
    protected static ConverterMappingHints DefaultHints;
    public StringNumberConverter`3(Expression`1<Func`2<TModel, TProvider>> convertToProviderExpression, Expression`1<Func`2<TProvider, TModel>> convertFromProviderExpression, ConverterMappingHints mappingHints);
    private static StringNumberConverter`3();
    protected static Expression`1<Func`2<string, TNumber>> ToNumber();
    protected static Expression`1<Func`2<TNumber, string>> ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal.StringTimeSpanConverter`2 : ValueConverter`2<TModel, TProvider> {
    protected static ConverterMappingHints DefaultHints;
    public StringTimeSpanConverter`2(Expression`1<Func`2<TModel, TProvider>> convertToProviderExpression, Expression`1<Func`2<TProvider, TModel>> convertFromProviderExpression, ConverterMappingHints mappingHints);
    private static StringTimeSpanConverter`2();
    protected static Expression`1<Func`2<TimeSpan, string>> ToString();
    protected static Expression`1<Func`2<string, TimeSpan>> ToTimeSpan();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal.StringUriConverter`2 : ValueConverter`2<TModel, TProvider> {
    [NullableContextAttribute("1")]
public StringUriConverter`2(Expression`1<Func`2<TModel, TProvider>> convertToProviderExpression, Expression`1<Func`2<TProvider, TModel>> convertFromProviderExpression, ConverterMappingHints mappingHints);
    protected static Expression`1<Func`2<Uri, string>> ToString();
    protected static Expression`1<Func`2<string, Uri>> ToUri();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.IPAddressToBytesConverter : ValueConverter`2<IPAddress, Byte[]> {
    private static ConverterMappingHints DefaultHints;
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public IPAddressToBytesConverter(ConverterMappingHints mappingHints);
    private static IPAddressToBytesConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.IPAddressToStringConverter : ValueConverter`2<IPAddress, string> {
    private static ConverterMappingHints DefaultHints;
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public IPAddressToStringConverter(ConverterMappingHints mappingHints);
    private static IPAddressToStringConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
    private static Expression`1<Func`2<IPAddress, string>> ToString();
    private static Expression`1<Func`2<string, IPAddress>> ToIPAddress();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Storage.ValueConversion.IValueConverterSelector {
    public abstract virtual IEnumerable`1<ValueConverterInfo> Select(Type modelClrType, Type providerClrType);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.NumberToBytesConverter`1 : ValueConverter`2<TNumber, Byte[]> {
    private static ConverterMappingHints DefaultHints;
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    private static MethodInfo ReverseLongMethod;
    private static MethodInfo ReverseIntMethod;
    private static MethodInfo ReverseShortMethod;
    private static MethodInfo ToBytesMethod;
    private static MethodInfo ToDecimalMethod;
    public static ValueConverterInfo DefaultInfo { get; }
    public NumberToBytesConverter`1(ConverterMappingHints mappingHints);
    private static NumberToBytesConverter`1();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
    private static Expression`1<Func`2<TNumber, Byte[]>> ToBytes();
    private static Expression`1<Func`2<Byte[], TNumber>> ToNumber();
    private static Expression HandleEmptyArray(Expression expression);
    private static Expression EnsureEndian(Expression expression);
    private static Byte[] ReverseLong(Byte[] bytes);
    private static Byte[] ReverseInt(Byte[] bytes);
    private static Byte[] ReverseShort(Byte[] bytes);
    private static int GetByteCount();
    private static Byte[] EnsureEndianInt(Byte[] bytes);
    private static Byte[] DecimalToBytes(decimal value);
    private static decimal BytesToDecimal(Byte[] bytes);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.NumberToStringConverter`1 : StringNumberConverter`3<TNumber, string, TNumber> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public NumberToStringConverter`1(ConverterMappingHints mappingHints);
    private static NumberToStringConverter`1();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.PhysicalAddressToBytesConverter : ValueConverter`2<PhysicalAddress, Byte[]> {
    private static ConverterMappingHints DefaultHints;
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public PhysicalAddressToBytesConverter(ConverterMappingHints mappingHints);
    private static PhysicalAddressToBytesConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.PhysicalAddressToStringConverter : ValueConverter`2<PhysicalAddress, string> {
    private static ConverterMappingHints DefaultHints;
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public PhysicalAddressToStringConverter(ConverterMappingHints mappingHints);
    private static PhysicalAddressToStringConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
    private static Expression`1<Func`2<PhysicalAddress, string>> ToString();
    private static Expression`1<Func`2<string, PhysicalAddress>> ToPhysicalAddress();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.StringToBoolConverter : ValueConverter`2<string, bool> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public StringToBoolConverter(ConverterMappingHints mappingHints);
    private static StringToBoolConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.StringToBytesConverter : ValueConverter`2<string, Byte[]> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public StringToBytesConverter(Encoding encoding, ConverterMappingHints mappingHints);
    private static StringToBytesConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.StringToCharConverter : StringCharConverter`2<string, char> {
    private static ConverterMappingHints DefaultHints;
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public StringToCharConverter(ConverterMappingHints mappingHints);
    private static StringToCharConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.StringToDateTimeConverter : StringDateTimeConverter`2<string, DateTime> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public StringToDateTimeConverter(ConverterMappingHints mappingHints);
    private static StringToDateTimeConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.StringToDateTimeOffsetConverter : StringDateTimeOffsetConverter`2<string, DateTimeOffset> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public StringToDateTimeOffsetConverter(ConverterMappingHints mappingHints);
    private static StringToDateTimeOffsetConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.StringToEnumConverter`1 : StringEnumConverter`3<string, TEnum, TEnum> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    [NullableContextAttribute("2")]
public StringToEnumConverter`1(ConverterMappingHints mappingHints);
    private static StringToEnumConverter`1();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.StringToGuidConverter : StringGuidConverter`2<string, Guid> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public StringToGuidConverter(ConverterMappingHints mappingHints);
    private static StringToGuidConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.StringToNumberConverter`1 : StringNumberConverter`3<string, TNumber, TNumber> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public StringToNumberConverter`1(ConverterMappingHints mappingHints);
    private static StringToNumberConverter`1();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.StringToTimeSpanConverter : StringTimeSpanConverter`2<string, TimeSpan> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public StringToTimeSpanConverter(ConverterMappingHints mappingHints);
    private static StringToTimeSpanConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.StringToUriConverter : StringUriConverter`2<string, Uri> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public StringToUriConverter(ConverterMappingHints mappingHints);
    private static StringToUriConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.TimeSpanToStringConverter : StringTimeSpanConverter`2<TimeSpan, string> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public TimeSpanToStringConverter(ConverterMappingHints mappingHints);
    private static TimeSpanToStringConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.TimeSpanToTicksConverter : ValueConverter`2<TimeSpan, long> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    [NullableContextAttribute("2")]
public TimeSpanToTicksConverter(ConverterMappingHints mappingHints);
    private static TimeSpanToTicksConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.UriToStringConverter : StringUriConverter`2<Uri, string> {
    [CompilerGeneratedAttribute]
private static ValueConverterInfo <DefaultInfo>k__BackingField;
    public static ValueConverterInfo DefaultInfo { get; }
    public UriToStringConverter(ConverterMappingHints mappingHints);
    private static UriToStringConverter();
    [CompilerGeneratedAttribute]
public static ValueConverterInfo get_DefaultInfo();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter : object {
    [CompilerGeneratedAttribute]
private LambdaExpression <ConvertToProviderExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private LambdaExpression <ConvertFromProviderExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private ConverterMappingHints <MappingHints>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConvertsNulls>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<object, object> ConvertToProvider { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<object, object> ConvertFromProvider { get; }
    public LambdaExpression ConvertToProviderExpression { get; }
    public LambdaExpression ConvertFromProviderExpression { get; }
    public Type ModelClrType { get; }
    public Type ProviderClrType { get; }
    [NullableAttribute("2")]
public ConverterMappingHints MappingHints { get; }
    public bool ConvertsNulls { get; }
    protected ValueConverter(LambdaExpression convertToProviderExpression, LambdaExpression convertFromProviderExpression, ConverterMappingHints mappingHints);
    [EntityFrameworkInternalAttribute]
protected ValueConverter(LambdaExpression convertToProviderExpression, LambdaExpression convertFromProviderExpression, bool convertsNulls, ConverterMappingHints mappingHints);
    public abstract virtual Func`2<object, object> get_ConvertToProvider();
    public abstract virtual Func`2<object, object> get_ConvertFromProvider();
    [CompilerGeneratedAttribute]
public virtual LambdaExpression get_ConvertToProviderExpression();
    [CompilerGeneratedAttribute]
public virtual LambdaExpression get_ConvertFromProviderExpression();
    public abstract virtual Type get_ModelClrType();
    public abstract virtual Type get_ProviderClrType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual ConverterMappingHints get_MappingHints();
    [CompilerGeneratedAttribute]
public virtual bool get_ConvertsNulls();
    protected static Type CheckTypeSupported(Type type, Type converterType, Type[] supportedTypes);
    public virtual ValueConverter ComposeWith(ValueConverter secondConverter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter`2 : ValueConverter {
    private Func`2<object, object> _convertToProvider;
    private Func`2<object, object> _convertFromProvider;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<object, object> ConvertToProvider { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<object, object> ConvertFromProvider { get; }
    public Expression`1<Func`2<TModel, TProvider>> ConvertToProviderExpression { get; }
    public Expression`1<Func`2<TProvider, TModel>> ConvertFromProviderExpression { get; }
    public Type ModelClrType { get; }
    public Type ProviderClrType { get; }
    public ValueConverter`2(Expression`1<Func`2<TModel, TProvider>> convertToProviderExpression, Expression`1<Func`2<TProvider, TModel>> convertFromProviderExpression, ConverterMappingHints mappingHints);
    [EntityFrameworkInternalAttribute]
public ValueConverter`2(Expression`1<Func`2<TModel, TProvider>> convertToProviderExpression, Expression`1<Func`2<TProvider, TModel>> convertFromProviderExpression, bool convertsNulls, ConverterMappingHints mappingHints);
    private static Func`2<object, object> SanitizeConverter(Expression`1<Func`2<TIn, TOut>> convertExpression, bool convertsNulls);
    private static T Sanitize(object value);
    public virtual Func`2<object, object> get_ConvertToProvider();
    public virtual Func`2<object, object> get_ConvertFromProvider();
    public virtual Expression`1<Func`2<TModel, TProvider>> get_ConvertToProviderExpression();
    public virtual Expression`1<Func`2<TProvider, TModel>> get_ConvertFromProviderExpression();
    public virtual Type get_ModelClrType();
    public virtual Type get_ProviderClrType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo : ValueType {
    private Func`2<ValueConverterInfo, ValueConverter> _factory;
    [CompilerGeneratedAttribute]
private Type <ModelClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ProviderClrType>k__BackingField;
    [CompilerGeneratedAttribute]
private ConverterMappingHints <MappingHints>k__BackingField;
    public Type ModelClrType { get; }
    public Type ProviderClrType { get; }
    [NullableAttribute("2")]
public ConverterMappingHints MappingHints { get; }
    public ValueConverterInfo(Type modelClrType, Type providerClrType, Func`2<ValueConverterInfo, ValueConverter> factory, ConverterMappingHints mappingHints);
    [CompilerGeneratedAttribute]
public Type get_ModelClrType();
    [CompilerGeneratedAttribute]
public Type get_ProviderClrType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public ConverterMappingHints get_MappingHints();
    public ValueConverter Create();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelector : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<ValueTuple`2<Type, Type>, ValueConverterInfo> _converters;
    private static Type[] SignedPreferred;
    private static Type[] UnsignedPreferred;
    private static Type[] FloatingPreferred;
    private static Type[] CharPreferred;
    private static Type[] Numerics;
    private static Type _readOnlyIPAddressType;
    [CompilerGeneratedAttribute]
private ValueConverterSelectorDependencies <Dependencies>k__BackingField;
    protected ValueConverterSelectorDependencies Dependencies { get; }
    public ValueConverterSelector(ValueConverterSelectorDependencies dependencies);
    private static ValueConverterSelector();
    [CompilerGeneratedAttribute]
protected virtual ValueConverterSelectorDependencies get_Dependencies();
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelector/<Select>d__11")]
public virtual IEnumerable`1<ValueConverterInfo> Select(Type modelClrType, Type providerClrType);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelector/<ForChar>d__12")]
private IEnumerable`1<ValueConverterInfo> ForChar(Type underlyingModelType, Type underlyingProviderType);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelector/<CharToBytes>d__13")]
private IEnumerable`1<ValueConverterInfo> CharToBytes(Type underlyingModelType, Type underlyingProviderType);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelector/<EnumToStringOrBytes>d__14")]
private IEnumerable`1<ValueConverterInfo> EnumToStringOrBytes(Type underlyingModelType, Type underlyingProviderType);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelector/<NumberToStringOrBytes>d__15")]
private IEnumerable`1<ValueConverterInfo> NumberToStringOrBytes(Type underlyingModelType, Type underlyingProviderType);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelector/<FindNumericConventions>d__16")]
private IEnumerable`1<ValueConverterInfo> FindNumericConventions(Type modelType, Type providerType, Type converterType, Func`3<Type, Type, IEnumerable`1<ValueConverterInfo>> afterPreferred);
    [IteratorStateMachineAttribute("Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelector/<FindPreferredConversions>d__17")]
private IEnumerable`1<ValueConverterInfo> FindPreferredConversions(Type[] candidateTypes, Type modelType, Type providerType, Type converterType);
    private static ValueConverterInfo GetDefaultValueConverterInfo(Type converterTypeInfo);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterSelectorDependencies : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
private ValueConverterSelectorDependencies(ValueConverterSelectorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ValueConverterSelectorDependencies left, ValueConverterSelectorDependencies right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ValueConverterSelectorDependencies left, ValueConverterSelectorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ValueConverterSelectorDependencies other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public ValueConverterSelectorDependencies <Clone>$();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Update.EquatableKeyValue`1 : object {
    private IAnnotatable _metadata;
    private TKey _keyValue;
    private IEqualityComparer`1<TKey> _keyComparer;
    [NullableContextAttribute("1")]
public EquatableKeyValue`1(IAnnotatable metadata, TKey keyValue, IEqualityComparer`1<TKey> keyComparer);
    private bool Equals(EquatableKeyValue`1<TKey> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Update.Internal.UpdateAdapter : object {
    private IStateManager _stateManager;
    private IChangeDetector _changeDetector;
    public CascadeTiming DeleteOrphansTiming { get; public set; }
    public CascadeTiming CascadeDeleteTiming { get; public set; }
    public IEnumerable`1<IUpdateEntry> Entries { get; }
    public IModel Model { get; }
    public UpdateAdapter(IStateManager stateManager);
    public virtual CascadeTiming get_DeleteOrphansTiming();
    public virtual void set_DeleteOrphansTiming(CascadeTiming value);
    public virtual CascadeTiming get_CascadeDeleteTiming();
    public virtual void set_CascadeDeleteTiming(CascadeTiming value);
    public virtual IUpdateEntry FindPrincipal(IUpdateEntry dependentEntry, IForeignKey foreignKey);
    public virtual IEnumerable`1<IUpdateEntry> GetDependents(IUpdateEntry principalEntry, IForeignKey foreignKey);
    public virtual IUpdateEntry TryGetEntry(IKey key, Object[] keyValues);
    public virtual IEnumerable`1<IUpdateEntry> get_Entries();
    public virtual void DetectChanges();
    public virtual void CascadeChanges();
    public virtual void CascadeDelete(IUpdateEntry entry, IEnumerable`1<IForeignKey> foreignKeys);
    public virtual IList`1<IUpdateEntry> GetEntriesToSave();
    public virtual IUpdateEntry CreateEntry(IDictionary`2<string, object> values, IEntityType entityType);
    public virtual IModel get_Model();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.Update.Internal.UpdateAdapterFactory : object {
    private ICurrentDbContext _currentContext;
    public UpdateAdapterFactory(ICurrentDbContext currentContext);
    public virtual IUpdateAdapter Create();
    public virtual IUpdateAdapter CreateStandalone(IModel model);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Update.IUpdateAdapter {
    public CascadeTiming DeleteOrphansTiming { get; public set; }
    public CascadeTiming CascadeDeleteTiming { get; public set; }
    public IEnumerable`1<IUpdateEntry> Entries { get; }
    public IModel Model { get; }
    public abstract virtual CascadeTiming get_DeleteOrphansTiming();
    public abstract virtual void set_DeleteOrphansTiming(CascadeTiming value);
    public abstract virtual CascadeTiming get_CascadeDeleteTiming();
    public abstract virtual void set_CascadeDeleteTiming(CascadeTiming value);
    public abstract virtual IUpdateEntry FindPrincipal(IUpdateEntry dependentEntry, IForeignKey foreignKey);
    public abstract virtual IEnumerable`1<IUpdateEntry> GetDependents(IUpdateEntry principalEntry, IForeignKey foreignKey);
    public abstract virtual IUpdateEntry TryGetEntry(IKey key, Object[] keyValues);
    public abstract virtual IEnumerable`1<IUpdateEntry> get_Entries();
    public abstract virtual void DetectChanges();
    public abstract virtual void CascadeChanges();
    public abstract virtual void CascadeDelete(IUpdateEntry entry, IEnumerable`1<IForeignKey> foreignKeys);
    public abstract virtual IList`1<IUpdateEntry> GetEntriesToSave();
    public abstract virtual IUpdateEntry CreateEntry(IDictionary`2<string, object> values, IEntityType entityType);
    public abstract virtual IModel get_Model();
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Update.IUpdateAdapterFactory {
    public abstract virtual IUpdateAdapter Create();
    public abstract virtual IUpdateAdapter CreateStandalone(IModel model);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.Update.IUpdateEntry {
    public DbContext Context { get; }
    public IEntityType EntityType { get; }
    public EntityState EntityState { get; public set; }
    [NullableAttribute("2")]
public IUpdateEntry SharedIdentityEntry { get; }
    public abstract virtual DbContext get_Context();
    public abstract virtual void SetOriginalValue(IProperty property, object value);
    public abstract virtual void SetPropertyModified(IProperty property);
    public abstract virtual IEntityType get_EntityType();
    public abstract virtual EntityState get_EntityState();
    public abstract virtual void set_EntityState(EntityState value);
    [NullableContextAttribute("2")]
public abstract virtual IUpdateEntry get_SharedIdentityEntry();
    public abstract virtual bool IsModified(IProperty property);
    public abstract virtual bool HasTemporaryValue(IProperty property);
    public abstract virtual bool IsStoreGenerated(IProperty property);
    public abstract virtual object GetCurrentValue(IPropertyBase propertyBase);
    public abstract virtual object GetOriginalValue(IPropertyBase propertyBase);
    public abstract virtual TProperty GetCurrentValue(IPropertyBase propertyBase);
    public abstract virtual TProperty GetOriginalValue(IProperty property);
    public abstract virtual void SetStoreGeneratedValue(IProperty property, object value, bool setModified);
    public abstract virtual EntityEntry ToEntityEntry();
    public abstract virtual object GetRelationshipSnapshotValue(IPropertyBase propertyBase);
    public abstract virtual object GetPreStoreGeneratedCurrentValue(IPropertyBase propertyBase);
    public abstract virtual bool IsConceptualNull(IProperty property);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.EntityFrameworkCore.Update.UpdateEntryExtensions : object {
    [ExtensionAttribute]
public static object GetCurrentProviderValue(IUpdateEntry updateEntry, IProperty property);
    [ExtensionAttribute]
public static object GetOriginalProviderValue(IUpdateEntry updateEntry, IProperty property);
    [ExtensionAttribute]
public static string ToDebugString(IUpdateEntry updateEntry, ChangeTrackerDebugStringOptions options, int indent);
    [ExtensionAttribute]
public static string BuildCurrentValuesString(IUpdateEntry entry, IEnumerable`1<IPropertyBase> properties);
    [ExtensionAttribute]
public static string BuildOriginalValuesString(IUpdateEntry entry, IEnumerable`1<IPropertyBase> properties);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
internal static void <ToDebugString>g__AppendValue|2_0(object value, <>c__DisplayClass2_0& );
    [CompilerGeneratedAttribute]
internal static void <ToDebugString>g__AppendRelatedKey|2_1(IEntityType targetType, object value, <>c__DisplayClass2_0& , <>c__DisplayClass2_1& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.Check : object {
    [ContractAnnotationAttribute("value:null => halt")]
public static T NotNull(T value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static IReadOnlyList`1<T> NotEmpty(IReadOnlyList`1<T> value, string parameterName);
    [ContractAnnotationAttribute("value:null => halt")]
public static string NotEmpty(string value, string parameterName);
    [NullableContextAttribute("2")]
public static string NullButNotEmpty(string value, string parameterName);
    public static IReadOnlyList`1<T> HasNoNulls(IReadOnlyList`1<T> value, string parameterName);
    public static IReadOnlyList`1<string> HasNoEmptyElements(IReadOnlyList`1<string> value, string parameterName);
    [ConditionalAttribute("DEBUG")]
public static void DebugAssert(bool condition, string message);
    [ConditionalAttribute("DEBUG")]
[DoesNotReturnAttribute]
public static void DebugFail(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.DictionaryExtensions : object {
    [ExtensionAttribute]
public static TValue GetOrAddNew(IDictionary`2<TKey, TValue> source, TKey key);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static TValue Find(IReadOnlyDictionary`2<TKey, TValue> source, TKey key);
    [ExtensionAttribute]
public static bool TryGetAndRemove(IDictionary`2<TKey, TValue> source, TKey key, TReturn& value);
    [ExtensionAttribute]
public static void Remove(IDictionary`2<TKey, TValue> source, Func`3<TKey, TValue, bool> predicate);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static void Remove(IDictionary`2<TKey, TValue> source, Func`4<TKey, TValue, TState, bool> predicate, TState state);
}
[ExtensionAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.DisposableExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ValueTask DisposeAsyncIfAvailable(IDisposable disposable);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class Microsoft.EntityFrameworkCore.Utilities.EnumerableExtensions : object {
    [ExtensionAttribute]
public static IOrderedEnumerable`1<TSource> OrderByOrdinal(IEnumerable`1<TSource> source, Func`2<TSource, string> keySelector);
    [ExtensionAttribute]
public static IEnumerable`1<T> Distinct(IEnumerable`1<T> source, Func`3<T, T, bool> comparer);
    [ExtensionAttribute]
public static string Join(IEnumerable`1<object> source, string separator);
    [ExtensionAttribute]
public static bool StructuralSequenceEqual(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second);
    [ExtensionAttribute]
public static bool StartsWith(IEnumerable`1<TSource> first, IEnumerable`1<TSource> second);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> source, T item);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> source, T item, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static T FirstOr(IEnumerable`1<T> source, T alternate);
    [ExtensionAttribute]
public static T FirstOr(IEnumerable`1<T> source, Func`2<T, bool> predicate, T alternate);
    [ExtensionAttribute]
public static bool Any(IEnumerable source);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.Utilities.EnumerableExtensions/<ToListAsync>d__11`1")]
[ExtensionAttribute]
public static Task`1<List`1<TSource>> ToListAsync(IAsyncEnumerable`1<TSource> source, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static List`1<TSource> ToList(IEnumerable source);
    [ExtensionAttribute]
public static string Format(IEnumerable`1<string> strings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.EntityFrameworkCore.Utilities.Graph`1 : object {
    public IEnumerable`1<TVertex> Vertices { get; }
    public abstract virtual IEnumerable`1<TVertex> get_Vertices();
    public abstract virtual void Clear();
    public abstract virtual IEnumerable`1<TVertex> GetOutgoingNeighbors(TVertex from);
    public abstract virtual IEnumerable`1<TVertex> GetIncomingNeighbors(TVertex to);
    public ISet`1<TVertex> GetUnreachableVertices(IReadOnlyList`1<TVertex> roots);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal class Microsoft.EntityFrameworkCore.Utilities.Multigraph`2 : Graph`1<TVertex> {
    private IComparer`1<TVertex> _secondarySortComparer;
    private HashSet`1<TVertex> _vertices;
    private Dictionary`2<TVertex, Dictionary`2<TVertex, object>> _successorMap;
    private Dictionary`2<TVertex, Dictionary`2<TVertex, object>> _predecessorMap;
    public IEnumerable`1<TVertex> Vertices { get; }
    public Multigraph`2(IComparer`1<TVertex> secondarySortComparer);
    public Multigraph`2(Comparison`1<TVertex> secondarySortComparer);
    public IEnumerable`1<TEdge> GetEdges(TVertex from, TVertex to);
    public void AddVertex(TVertex vertex);
    public void AddVertices(IEnumerable`1<TVertex> vertices);
    public void AddEdge(TVertex from, TVertex to, TEdge payload, bool requiresBatchingBoundary);
    public virtual void Clear();
    public IReadOnlyList`1<TVertex> TopologicalSort();
    public IReadOnlyList`1<TVertex> TopologicalSort(Func`4<TVertex, TVertex, IEnumerable`1<TEdge>, bool> tryBreakEdge);
    public IReadOnlyList`1<TVertex> TopologicalSort(Func`2<IEnumerable`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle);
    public IReadOnlyList`1<TVertex> TopologicalSort(Func`4<TVertex, TVertex, IEnumerable`1<TEdge>, bool> tryBreakEdge, Func`2<IReadOnlyList`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle, Func`2<string, string> formatException);
    protected virtual string ToString(TVertex vertex);
    public IReadOnlyList`1<List`1<TVertex>> BatchingTopologicalSort();
    public IReadOnlyList`1<List`1<TVertex>> BatchingTopologicalSort(Func`4<TVertex, TVertex, IEnumerable`1<TEdge>, bool> tryBreakEdge, Func`2<IReadOnlyList`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle, Func`2<string, string> formatException);
    private IReadOnlyList`1<List`1<TVertex>> TopologicalSortCore(bool withBatching, Func`4<TVertex, TVertex, IEnumerable`1<TEdge>, bool> tryBreakEdge, Func`2<IReadOnlyList`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle, Func`2<string, string> formatException);
    private void ThrowCycle(List`1<TVertex> cycle, Func`2<IReadOnlyList`1<Tuple`3<TVertex, TVertex, IEnumerable`1<TEdge>>>, string> formatCycle, Func`2<string, string> formatException);
    public virtual IEnumerable`1<TVertex> get_Vertices();
    public virtual IEnumerable`1<TVertex> GetOutgoingNeighbors(TVertex from);
    public virtual IEnumerable`1<TVertex> GetIncomingNeighbors(TVertex to);
    [CompilerGeneratedAttribute]
private string <ThrowCycle>b__20_0(TVertex e);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.ValueGeneration.BinaryValueGenerator : ValueGenerator`1<Byte[]> {
    public bool GeneratesTemporaryValues { get; }
    public virtual bool get_GeneratesTemporaryValues();
    public virtual Byte[] Next(EntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.DiscriminatorValueGeneratorFactory : ValueGeneratorFactory {
    [NullableContextAttribute("1")]
public virtual ValueGenerator Create(IProperty property, IEntityType entityType);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.GuidValueGenerator : ValueGenerator`1<Guid> {
    public bool GeneratesTemporaryValues { get; }
    [NullableContextAttribute("1")]
public virtual Guid Next(EntityEntry entry);
    public virtual bool get_GeneratesTemporaryValues();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGenerator`1 : ValueGenerator`1<TValue> {
    private HiLoValueGeneratorState _generatorState;
    protected HiLoValueGenerator`1(HiLoValueGeneratorState generatorState);
    public virtual TValue Next(EntityEntry entry);
    public virtual ValueTask`1<TValue> NextAsync(EntityEntry entry, CancellationToken cancellationToken);
    protected abstract virtual long GetNewLowValue();
    protected virtual Task`1<long> GetNewLowValueAsync(CancellationToken cancellationToken);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState : object {
    private SemaphoreSlim _semaphoreSlim;
    private HiLoValue _currentValue;
    private int _blockSize;
    public HiLoValueGeneratorState(int blockSize);
    [NullableContextAttribute("1")]
public virtual TValue Next(Func`1<long> getNewLowValue);
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.ValueGeneration.HiLoValueGeneratorState/<NextAsync>d__5`1")]
public virtual ValueTask`1<TValue> NextAsync(Func`2<CancellationToken, Task`1<long>> getNewLowValue, CancellationToken cancellationToken);
    private static TValue ConvertResult(HiLoValue newValue);
    private HiLoValue GetNextValue();
    public virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.ConvertedValueGenerator : ValueGenerator {
    private ValueGenerator _providerGenerator;
    private ValueConverter _converter;
    public bool GeneratesTemporaryValues { get; }
    public bool GeneratesStableValues { get; }
    public ConvertedValueGenerator(ValueGenerator providerGenerator, ValueConverter converter);
    protected virtual object NextValue(EntityEntry entry);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.ValueGeneration.Internal.ConvertedValueGenerator/<NextAsync>d__4")]
public virtual ValueTask`1<object> NextAsync(EntityEntry entry, CancellationToken cancellationToken);
    public virtual bool get_GeneratesTemporaryValues();
    public virtual bool get_GeneratesStableValues();
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.DiscriminatorValueGenerator : ValueGenerator {
    public bool GeneratesTemporaryValues { get; }
    public bool GeneratesStableValues { get; }
    [NullableContextAttribute("1")]
protected virtual object NextValue(EntityEntry entry);
    public virtual bool get_GeneratesTemporaryValues();
    public virtual bool get_GeneratesStableValues();
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryByteValueGenerator : TemporaryNumberValueGenerator`1<byte> {
    private int _current;
    [NullableContextAttribute("1")]
public virtual byte Next(EntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryCharValueGenerator : TemporaryNumberValueGenerator`1<char> {
    private int _current;
    [NullableContextAttribute("1")]
public virtual char Next(EntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryDecimalValueGenerator : TemporaryNumberValueGenerator`1<decimal> {
    private int _current;
    [NullableContextAttribute("1")]
public virtual decimal Next(EntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryDoubleValueGenerator : TemporaryNumberValueGenerator`1<double> {
    private int _current;
    [NullableContextAttribute("1")]
public virtual double Next(EntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryFloatValueGenerator : TemporaryNumberValueGenerator`1<float> {
    private int _current;
    [NullableContextAttribute("1")]
public virtual float Next(EntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryIntValueGenerator : TemporaryNumberValueGenerator`1<int> {
    private int _current;
    [NullableContextAttribute("1")]
public virtual int Next(EntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryLongValueGenerator : TemporaryNumberValueGenerator`1<long> {
    private long _current;
    [NullableContextAttribute("1")]
public virtual long Next(EntityEntry entry);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public abstract class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryNumberValueGenerator`1 : ValueGenerator`1<TValue> {
    public bool GeneratesTemporaryValues { get; }
    public virtual bool get_GeneratesTemporaryValues();
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporarySByteValueGenerator : TemporaryNumberValueGenerator`1<sbyte> {
    private int _current;
    [NullableContextAttribute("1")]
public virtual sbyte Next(EntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryShortValueGenerator : TemporaryNumberValueGenerator`1<short> {
    private int _current;
    [NullableContextAttribute("1")]
public virtual short Next(EntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryUIntValueGenerator : TemporaryNumberValueGenerator`1<UInt32> {
    private int _current;
    [NullableContextAttribute("1")]
public virtual UInt32 Next(EntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryULongValueGenerator : TemporaryNumberValueGenerator`1<ulong> {
    private long _current;
    [NullableContextAttribute("1")]
public virtual ulong Next(EntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryUShortValueGenerator : TemporaryNumberValueGenerator`1<ushort> {
    private int _current;
    [NullableContextAttribute("1")]
public virtual ushort Next(EntityEntry entry);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.ValueGeneration.IValueGeneratorCache {
    public abstract virtual ValueGenerator GetOrAdd(IProperty property, IEntityType entityType, Func`3<IProperty, IEntityType, ValueGenerator> factory);
}
[NullableContextAttribute("1")]
public interface Microsoft.EntityFrameworkCore.ValueGeneration.IValueGeneratorSelector {
    public abstract virtual ValueGenerator Select(IProperty property, IEntityType entityType);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.SequentialGuidValueGenerator : ValueGenerator`1<Guid> {
    private long _counter;
    public bool GeneratesTemporaryValues { get; }
    [NullableContextAttribute("1")]
public virtual Guid Next(EntityEntry entry);
    public virtual bool get_GeneratesTemporaryValues();
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.EntityFrameworkCore.ValueGeneration.StringValueGenerator : ValueGenerator`1<string> {
    public bool GeneratesTemporaryValues { get; }
    public virtual bool get_GeneratesTemporaryValues();
    public virtual string Next(EntityEntry entry);
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.TemporaryGuidValueGenerator : GuidValueGenerator {
    public bool GeneratesTemporaryValues { get; }
    public virtual bool get_GeneratesTemporaryValues();
}
public class Microsoft.EntityFrameworkCore.ValueGeneration.TemporaryNumberValueGeneratorFactory : ValueGeneratorFactory {
    [NullableContextAttribute("1")]
public virtual ValueGenerator Create(IProperty property, IEntityType entityType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator : object {
    public bool GeneratesTemporaryValues { get; }
    public bool GeneratesStableValues { get; }
    public virtual object Next(EntityEntry entry);
    protected abstract virtual object NextValue(EntityEntry entry);
    public virtual ValueTask`1<object> NextAsync(EntityEntry entry, CancellationToken cancellationToken);
    protected virtual ValueTask`1<object> NextValueAsync(EntityEntry entry, CancellationToken cancellationToken);
    public abstract virtual bool get_GeneratesTemporaryValues();
    public virtual bool get_GeneratesStableValues();
    public virtual ValueGenerator WithConverter(ValueConverter converter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator`1 : ValueGenerator {
    public abstract virtual TValue Next(EntityEntry entry);
    public virtual ValueTask`1<TValue> NextAsync(EntityEntry entry, CancellationToken cancellationToken);
    protected virtual object NextValue(EntityEntry entry);
    [AsyncStateMachineAttribute("Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator`1/<NextValueAsync>d__3")]
protected virtual ValueTask`1<object> NextValueAsync(EntityEntry entry, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorCache : object {
    [CompilerGeneratedAttribute]
private ValueGeneratorCacheDependencies <Dependencies>k__BackingField;
    private ConcurrentDictionary`2<CacheKey, ValueGenerator> _cache;
    protected ValueGeneratorCacheDependencies Dependencies { get; }
    public ValueGeneratorCache(ValueGeneratorCacheDependencies dependencies);
    [CompilerGeneratedAttribute]
protected virtual ValueGeneratorCacheDependencies get_Dependencies();
    public virtual ValueGenerator GetOrAdd(IProperty property, IEntityType entityType, Func`3<IProperty, IEntityType, ValueGenerator> factory);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorCacheDependencies : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    [CompilerGeneratedAttribute]
private ValueGeneratorCacheDependencies(ValueGeneratorCacheDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [CompilerGeneratedAttribute]
public static bool op_Inequality(ValueGeneratorCacheDependencies left, ValueGeneratorCacheDependencies right);
    [CompilerGeneratedAttribute]
public static bool op_Equality(ValueGeneratorCacheDependencies left, ValueGeneratorCacheDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [CompilerGeneratedAttribute]
public sealed virtual bool Equals(ValueGeneratorCacheDependencies other);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public ValueGeneratorCacheDependencies <Clone>$();
}
public abstract class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorFactory : object {
    internal static DynamicallyAccessedMemberTypes DynamicallyAccessedMemberTypes;
    [NullableContextAttribute("1")]
public abstract virtual ValueGenerator Create(IProperty property, IEntityType entityType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorSelector : object {
    [CompilerGeneratedAttribute]
private ValueGeneratorSelectorDependencies <Dependencies>k__BackingField;
    public IValueGeneratorCache Cache { get; }
    protected ValueGeneratorSelectorDependencies Dependencies { get; }
    public ValueGeneratorSelector(ValueGeneratorSelectorDependencies dependencies);
    public virtual IValueGeneratorCache get_Cache();
    [CompilerGeneratedAttribute]
protected virtual ValueGeneratorSelectorDependencies get_Dependencies();
    public virtual ValueGenerator Select(IProperty property, IEntityType entityType);
    private static ValueGenerator CreateFromFactory(IProperty property, IEntityType entityType);
    public virtual ValueGenerator Create(IProperty property, IEntityType entityType);
    protected virtual ValueGenerator FindForType(IProperty property, IEntityType entityType, Type clrType);
    [CompilerGeneratedAttribute]
private ValueGenerator <Select>b__6_0(IProperty p, IEntityType t);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorSelectorDependencies : object {
    [CompilerGeneratedAttribute]
private IValueGeneratorCache <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private Type EqualityContract { get; }
    public IValueGeneratorCache Cache { get; public set; }
    [EntityFrameworkInternalAttribute]
public ValueGeneratorSelectorDependencies(IValueGeneratorCache cache);
    [CompilerGeneratedAttribute]
private ValueGeneratorSelectorDependencies(ValueGeneratorSelectorDependencies original);
    [CompilerGeneratedAttribute]
private Type get_EqualityContract();
    [CompilerGeneratedAttribute]
public IValueGeneratorCache get_Cache();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_Cache(IValueGeneratorCache value);
    [CompilerGeneratedAttribute]
public virtual string ToString();
    [CompilerGeneratedAttribute]
private bool PrintMembers(StringBuilder builder);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Inequality(ValueGeneratorSelectorDependencies left, ValueGeneratorSelectorDependencies right);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public static bool op_Equality(ValueGeneratorSelectorDependencies left, ValueGeneratorSelectorDependencies right);
    [CompilerGeneratedAttribute]
public virtual int GetHashCode();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public sealed virtual bool Equals(ValueGeneratorSelectorDependencies other);
    [CompilerGeneratedAttribute]
public ValueGeneratorSelectorDependencies <Clone>$();
}
public enum Microsoft.EntityFrameworkCore.WarningBehavior : Enum {
    public int value__;
    public static WarningBehavior Log;
    public static WarningBehavior Ignore;
    public static WarningBehavior Throw;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.EntityFrameworkServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddDbContext(IServiceCollection serviceCollection, Action`1<DbContextOptionsBuilder> optionsAction, ServiceLifetime contextLifetime, ServiceLifetime optionsLifetime);
    [ExtensionAttribute]
public static IServiceCollection AddDbContext(IServiceCollection serviceCollection, Action`1<DbContextOptionsBuilder> optionsAction, ServiceLifetime contextLifetime, ServiceLifetime optionsLifetime);
    [ExtensionAttribute]
public static IServiceCollection AddDbContextPool(IServiceCollection serviceCollection, Action`1<DbContextOptionsBuilder> optionsAction, int poolSize);
    [ExtensionAttribute]
public static IServiceCollection AddDbContextPool(IServiceCollection serviceCollection, Action`1<DbContextOptionsBuilder> optionsAction, int poolSize);
    [ExtensionAttribute]
public static IServiceCollection AddDbContextPool(IServiceCollection serviceCollection, Action`2<IServiceProvider, DbContextOptionsBuilder> optionsAction, int poolSize);
    [ExtensionAttribute]
public static IServiceCollection AddDbContextPool(IServiceCollection serviceCollection, Action`2<IServiceProvider, DbContextOptionsBuilder> optionsAction, int poolSize);
    private static void AddPoolingOptions(IServiceCollection serviceCollection, Action`2<IServiceProvider, DbContextOptionsBuilder> optionsAction, int poolSize);
    [ExtensionAttribute]
public static IServiceCollection AddDbContext(IServiceCollection serviceCollection, ServiceLifetime contextLifetime, ServiceLifetime optionsLifetime);
    [ExtensionAttribute]
public static IServiceCollection AddDbContext(IServiceCollection serviceCollection, ServiceLifetime contextLifetime, ServiceLifetime optionsLifetime);
    [ExtensionAttribute]
public static IServiceCollection AddDbContext(IServiceCollection serviceCollection, Action`2<IServiceProvider, DbContextOptionsBuilder> optionsAction, ServiceLifetime contextLifetime, ServiceLifetime optionsLifetime);
    [ExtensionAttribute]
public static IServiceCollection AddDbContext(IServiceCollection serviceCollection, Action`2<IServiceProvider, DbContextOptionsBuilder> optionsAction, ServiceLifetime contextLifetime, ServiceLifetime optionsLifetime);
    [ExtensionAttribute]
public static IServiceCollection AddDbContextFactory(IServiceCollection serviceCollection, Action`1<DbContextOptionsBuilder> optionsAction, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddDbContextFactory(IServiceCollection serviceCollection, Action`1<DbContextOptionsBuilder> optionsAction, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddDbContextFactory(IServiceCollection serviceCollection, Action`2<IServiceProvider, DbContextOptionsBuilder> optionsAction, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddDbContextFactory(IServiceCollection serviceCollection, Action`2<IServiceProvider, DbContextOptionsBuilder> optionsAction, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddPooledDbContextFactory(IServiceCollection serviceCollection, Action`1<DbContextOptionsBuilder> optionsAction, int poolSize);
    [ExtensionAttribute]
public static IServiceCollection AddPooledDbContextFactory(IServiceCollection serviceCollection, Action`2<IServiceProvider, DbContextOptionsBuilder> optionsAction, int poolSize);
    private static void AddCoreServices(IServiceCollection serviceCollection, Action`2<IServiceProvider, DbContextOptionsBuilder> optionsAction, ServiceLifetime optionsLifetime);
    private static DbContextOptions`1<TContext> CreateDbContextOptions(IServiceProvider applicationServiceProvider, Action`2<IServiceProvider, DbContextOptionsBuilder> optionsAction);
    private static void CheckContextConstructors();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Linq.Expressions.ExpressionExtensions : object {
    [ExtensionAttribute]
public static bool IsNullConstantExpression(Expression expression);
    [ExtensionAttribute]
public static LambdaExpression UnwrapLambdaFromQuote(Expression expression);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Expression UnwrapTypeConversion(Expression expression, Type& convertedType);
    private static Expression RemoveConvert(Expression expression);
    [ExtensionAttribute]
public static T GetConstantValue(Expression expression);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Reflection.EntityFrameworkMemberInfoExtensions : object {
    [ExtensionAttribute]
public static Type GetMemberType(MemberInfo memberInfo);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsSameAs(MemberInfo propertyInfo, MemberInfo otherPropertyInfo);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static bool IsOverriddenBy(MemberInfo propertyInfo, MemberInfo otherPropertyInfo);
    [ExtensionAttribute]
public static string GetSimpleMemberName(MemberInfo member);
    [ExtensionAttribute]
public static bool IsReallyVirtual(MethodInfo method);
}
[ExtensionAttribute]
internal static class System.Reflection.MethodInfoExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static bool IsContainsMethod(MethodInfo method);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.Reflection.PropertyInfoExtensions : object {
    [ExtensionAttribute]
public static bool IsStatic(PropertyInfo property);
    [ExtensionAttribute]
public static bool IsCandidateProperty(PropertyInfo propertyInfo, bool needsWrite, bool publicOnly);
    [ExtensionAttribute]
public static bool IsIndexerProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static PropertyInfo FindGetterProperty(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static PropertyInfo FindSetterProperty(PropertyInfo propertyInfo);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[DebuggerStepThroughAttribute]
internal static class System.SharedTypeExtensions : object {
    private static Dictionary`2<Type, string> BuiltInTypeNames;
    private static Dictionary`2<Type, object> CommonTypeDictionary;
    private static MethodInfo GenerateDefaultValueConstantMethod;
    private static SharedTypeExtensions();
    [ExtensionAttribute]
public static Type UnwrapNullableType(Type type);
    [ExtensionAttribute]
public static bool IsNullableValueType(Type type);
    [ExtensionAttribute]
public static bool IsNullableType(Type type);
    [ExtensionAttribute]
public static bool IsValidEntityType(Type type);
    [ExtensionAttribute]
public static bool IsPropertyBagType(Type type);
    [ExtensionAttribute]
public static Type MakeNullable(Type type, bool nullable);
    [ExtensionAttribute]
public static bool IsNumeric(Type type);
    [ExtensionAttribute]
public static bool IsInteger(Type type);
    [ExtensionAttribute]
public static bool IsSignedInteger(Type type);
    [ExtensionAttribute]
public static bool IsAnonymousType(Type type);
    [ExtensionAttribute]
public static PropertyInfo GetAnyProperty(Type type, string name);
    [ExtensionAttribute]
public static bool IsInstantiable(Type type);
    [ExtensionAttribute]
public static Type UnwrapEnumType(Type type);
    [ExtensionAttribute]
public static Type GetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetSequenceType(Type type);
    [ExtensionAttribute]
public static Type TryGetElementType(Type type, Type interfaceOrBaseType);
    [ExtensionAttribute]
public static bool IsCompatibleWith(Type propertyType, Type fieldType);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetGenericTypeImplementations>d__18")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetGenericTypeImplementations(Type type, Type interfaceOrBaseType);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetBaseTypes>d__19")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetBaseTypes(Type type);
    [ExtensionAttribute]
public static List`1<Type> GetBaseTypesAndInterfacesInclusive(Type type);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetTypesInHierarchy>d__21")]
[ExtensionAttribute]
public static IEnumerable`1<Type> GetTypesInHierarchy(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<Type> GetDeclaredInterfaces(Type type);
    [ExtensionAttribute]
public static ConstructorInfo GetDeclaredConstructor(Type type, Type[] types);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetPropertiesInHierarchy>d__24")]
[ExtensionAttribute]
public static IEnumerable`1<PropertyInfo> GetPropertiesInHierarchy(Type type, string name);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetMembersInHierarchy>d__25")]
[ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMembersInHierarchy(Type type);
    [ExtensionAttribute]
public static IEnumerable`1<MemberInfo> GetMembersInHierarchy(Type type, string name);
    [ExtensionAttribute]
public static object GetDefaultValue(Type type);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("Gets all types from the given assembly - unsafe for trimming")]
public static IEnumerable`1<TypeInfo> GetConstructibleTypes(Assembly assembly);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("Gets all types from the given assembly - unsafe for trimming")]
public static IEnumerable`1<TypeInfo> GetLoadableDefinedTypes(Assembly assembly);
    [ExtensionAttribute]
public static string DisplayName(Type type, bool fullName, bool compilable);
    private static void ProcessType(StringBuilder builder, Type type, bool fullName, bool compilable);
    private static void ProcessArrayType(StringBuilder builder, Type type, bool fullName, bool compilable);
    private static void ProcessGenericType(StringBuilder builder, Type type, Type[] genericArguments, int length, bool fullName, bool compilable);
    [IteratorStateMachineAttribute("System.SharedTypeExtensions/<GetNamespaces>d__35")]
[ExtensionAttribute]
public static IEnumerable`1<string> GetNamespaces(Type type);
    [ExtensionAttribute]
public static ConstantExpression GetDefaultValueConstant(Type type);
    private static ConstantExpression GenerateDefaultValueConstant();
    [CompilerGeneratedAttribute]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2070")]
internal static IEnumerable`1<Type> <GetDeclaredInterfaces>g__GetInterfacesSuppressed|22_0(Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class System.Text.StringBuilderExtensions : object {
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<string> values, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, string separator, String[] values);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, Action`2<StringBuilder, T> joinAction, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, Func`3<StringBuilder, T, bool> joinFunc, string separator);
    [ExtensionAttribute]
public static StringBuilder AppendJoin(StringBuilder stringBuilder, IEnumerable`1<T> values, TParam param, Action`3<StringBuilder, T, TParam> joinAction, string separator);
    [ExtensionAttribute]
public static void AppendBytes(StringBuilder builder, Byte[] bytes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Transactions.TransactionsDatabaseFacadeExtensions : object {
    [ExtensionAttribute]
public static void EnlistTransaction(DatabaseFacade databaseFacade, Transaction transaction);
    [ExtensionAttribute]
public static Transaction GetEnlistedTransaction(DatabaseFacade databaseFacade);
}
