public class Microsoft.Exchange.WebServices.Autodiscover.AlternateMailbox : object {
    private string type;
    private string displayName;
    private string legacyDN;
    private string server;
    private string smtpAddress;
    private string ownerSmtpAddress;
    public string Type { get; internal set; }
    public string DisplayName { get; internal set; }
    public string LegacyDN { get; internal set; }
    public string Server { get; internal set; }
    public string SmtpAddress { get; internal set; }
    public string OwnerSmtpAddress { get; internal set; }
    internal static AlternateMailbox LoadFromXml(EwsXmlReader reader);
    public string get_Type();
    internal void set_Type(string value);
    public string get_DisplayName();
    internal void set_DisplayName(string value);
    public string get_LegacyDN();
    internal void set_LegacyDN(string value);
    public string get_Server();
    internal void set_Server(string value);
    public string get_SmtpAddress();
    internal void set_SmtpAddress(string value);
    public string get_OwnerSmtpAddress();
    internal void set_OwnerSmtpAddress(string value);
}
public class Microsoft.Exchange.WebServices.Autodiscover.AlternateMailboxCollection : object {
    [CompilerGeneratedAttribute]
private List`1<AlternateMailbox> <Entries>k__BackingField;
    public List`1<AlternateMailbox> Entries { get; private set; }
    internal static AlternateMailboxCollection LoadFromXml(EwsXmlReader reader);
    [CompilerGeneratedAttribute]
public List`1<AlternateMailbox> get_Entries();
    [CompilerGeneratedAttribute]
private void set_Entries(List`1<AlternateMailbox> value);
}
internal class Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverDnsClient : object {
    private static string AutoDiscoverSrvPrefix;
    private static int SslPort;
    private static Random randomTieBreakerSelector;
    private AutodiscoverService service;
    internal AutodiscoverDnsClient(AutodiscoverService service);
    private static AutodiscoverDnsClient();
    internal string FindAutodiscoverHostFromSrv(string domain);
    private DnsSrvRecord FindBestMatchingSrvRecord(string domain);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverError : object {
    private string time;
    private string id;
    private int errorCode;
    private string message;
    private string debugData;
    public string Time { get; }
    public string Id { get; }
    public int ErrorCode { get; }
    public string Message { get; }
    public string DebugData { get; }
    internal static AutodiscoverError Parse(EwsXmlReader reader);
    public string get_Time();
    public string get_Id();
    public int get_ErrorCode();
    public string get_Message();
    public string get_DebugData();
}
public enum Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverErrorCode : Enum {
    public int value__;
    public static AutodiscoverErrorCode NoError;
    public static AutodiscoverErrorCode RedirectAddress;
    public static AutodiscoverErrorCode RedirectUrl;
    public static AutodiscoverErrorCode InvalidUser;
    public static AutodiscoverErrorCode InvalidRequest;
    public static AutodiscoverErrorCode InvalidSetting;
    public static AutodiscoverErrorCode SettingIsNotAvailable;
    public static AutodiscoverErrorCode ServerBusy;
    public static AutodiscoverErrorCode InvalidDomain;
    public static AutodiscoverErrorCode NotFederated;
    public static AutodiscoverErrorCode InternalServerError;
}
public class Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverRedirectionUrlValidationCallback : MulticastDelegate {
    public AutodiscoverRedirectionUrlValidationCallback(object object, IntPtr method);
    public virtual bool Invoke(string redirectionUrl);
    public virtual IAsyncResult BeginInvoke(string redirectionUrl, AsyncCallback callback, object object);
    public virtual bool EndInvoke(IAsyncResult result);
}
public class Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverRemoteException : ServiceRemoteException {
    private AutodiscoverError error;
    public AutodiscoverError Error { get; }
    public AutodiscoverRemoteException(AutodiscoverError error);
    public AutodiscoverRemoteException(string message, AutodiscoverError error);
    public AutodiscoverRemoteException(string message, AutodiscoverError error, Exception innerException);
    protected AutodiscoverRemoteException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public AutodiscoverError get_Error();
}
internal abstract class Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverRequest : object {
    private AutodiscoverService service;
    private Uri url;
    internal AutodiscoverService Service { get; }
    internal Uri Url { get; }
    internal AutodiscoverRequest(AutodiscoverService service, Uri url);
    internal static bool IsRedirectionResponse(IEwsHttpWebResponse httpWebResponse);
    internal virtual void Validate();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverRequest/<InternalExecute>d__5")]
internal Task`1<AutodiscoverResponse> InternalExecute();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverRequest/<ProcessEwsHttpClientException>d__6")]
private Task ProcessEwsHttpClientException(EwsHttpClientException webException);
    private AutodiscoverResponse CreateRedirectionResponse(IEwsHttpWebResponse httpWebResponse);
    private SoapFaultDetails ReadSoapFault(EwsXmlReader reader);
    internal void WriteSoapRequest(Uri requestUrl, EwsServiceXmlWriter writer);
    internal virtual void WriteExtraCustomSoapHeadersToXml(EwsServiceXmlWriter writer);
    internal void WriteBodyToXml(EwsServiceXmlWriter writer);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverRequest/<GetResponseStream>d__12")]
protected static Task`1<Stream> GetResponseStream(IEwsHttpWebResponse response);
    internal void ReadSoapHeaders(EwsXmlReader reader);
    internal virtual void ReadSoapHeader(EwsXmlReader reader);
    private ExchangeServerInfo ReadServerVersionInfo(EwsXmlReader reader);
    internal AutodiscoverResponse ReadSoapBody(EwsXmlReader reader);
    internal AutodiscoverResponse LoadFromXml(EwsXmlReader reader);
    internal abstract virtual string GetRequestXmlElementName();
    internal abstract virtual string GetResponseXmlElementName();
    internal abstract virtual string GetWsAddressingActionName();
    internal abstract virtual AutodiscoverResponse CreateServiceResponse();
    internal abstract virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal abstract virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal AutodiscoverService get_Service();
    internal Uri get_Url();
}
public abstract class Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverResponse : object {
    private AutodiscoverErrorCode errorCode;
    private string errorMessage;
    private Uri redirectionUrl;
    public AutodiscoverErrorCode ErrorCode { get; internal set; }
    public string ErrorMessage { get; internal set; }
    internal Uri RedirectionUrl { get; internal set; }
    internal virtual void LoadFromXml(EwsXmlReader reader, string endElementName);
    public AutodiscoverErrorCode get_ErrorCode();
    internal void set_ErrorCode(AutodiscoverErrorCode value);
    public string get_ErrorMessage();
    internal void set_ErrorMessage(string value);
    internal Uri get_RedirectionUrl();
    internal void set_RedirectionUrl(Uri value);
}
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverResponseCollection`1 : AutodiscoverResponse {
    private List`1<TResponse> responses;
    public int Count { get; }
    public TResponse Item { get; }
    internal List`1<TResponse> Responses { get; }
    public int get_Count();
    public TResponse get_Item(int index);
    internal List`1<TResponse> get_Responses();
    internal virtual void LoadFromXml(EwsXmlReader reader, string endElementName);
    private void LoadResponseCollectionFromXml(EwsXmlReader reader);
    internal abstract virtual string GetResponseCollectionXmlElementName();
    internal abstract virtual string GetResponseInstanceXmlElementName();
    internal abstract virtual TResponse CreateResponseInstance();
    public sealed virtual IEnumerator`1<TResponse> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverResponseException : ServiceRemoteException {
    private AutodiscoverErrorCode errorCode;
    public AutodiscoverErrorCode ErrorCode { get; }
    internal AutodiscoverResponseException(AutodiscoverErrorCode errorCode, string message);
    protected AutodiscoverResponseException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public AutodiscoverErrorCode get_ErrorCode();
}
internal enum Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverResponseType : Enum {
    public int value__;
    public static AutodiscoverResponseType Error;
    public static AutodiscoverResponseType RedirectUrl;
    public static AutodiscoverResponseType RedirectAddress;
    public static AutodiscoverResponseType Success;
}
public class Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverService : ExchangeServiceBase {
    private static TimeSpan AutodiscoverTimeout;
    private static string AutodiscoverLegacyPath;
    private static string AutodiscoverLegacyUrl;
    private static string AutodiscoverLegacyHttpsUrl;
    private static string AutodiscoverLegacyHttpUrl;
    private static string AutodiscoverSoapHttpsUrl;
    private static string AutodiscoverSoapWsSecurityHttpsUrl;
    private static string AutodiscoverSoapWsSecuritySymmetricKeyHttpsUrl;
    private static string AutodiscoverSoapWsSecurityX509CertHttpsUrl;
    private static string AutodiscoverRequestNamespace;
    private static Regex LegacyPathRegex;
    internal static int AutodiscoverMaxRedirections;
    private static string AutodiscoverSoapEnabledHeaderName;
    private static string AutodiscoverWsSecurityEnabledHeaderName;
    private static string AutodiscoverWsSecuritySymmetricKeyEnabledHeaderName;
    private static string AutodiscoverWsSecurityX509CertEnabledHeaderName;
    private static string AutodiscoverOAuthEnabledHeaderName;
    private static ExchangeVersion MinimumRequestVersionForAutoDiscoverSoapService;
    private string domain;
    private Nullable`1<bool> isExternal;
    private Uri url;
    private AutodiscoverRedirectionUrlValidationCallback redirectionUrlValidationCallback;
    private AutodiscoverDnsClient dnsClient;
    private IPAddress dnsServerAddress;
    private bool enableScpLookup;
    [CompilerGeneratedAttribute]
private Func`2<string, ICollection`1<string>> <GetScpUrlsForDomainCallback>k__BackingField;
    public string Domain { get; public set; }
    public Uri Url { get; public set; }
    public Nullable`1<bool> IsExternal { get; internal set; }
    public AutodiscoverRedirectionUrlValidationCallback RedirectionUrlValidationCallback { get; public set; }
    internal IPAddress DnsServerAddress { get; internal set; }
    public bool EnableScpLookup { get; public set; }
    public Func`2<string, ICollection`1<string>> GetScpUrlsForDomainCallback { get; public set; }
    public AutodiscoverService(ExchangeVersion requestedServerVersion);
    public AutodiscoverService(string domain);
    public AutodiscoverService(string domain, ExchangeVersion requestedServerVersion);
    public AutodiscoverService(Uri url);
    public AutodiscoverService(Uri url, ExchangeVersion requestedServerVersion);
    internal AutodiscoverService(Uri url, string domain);
    internal AutodiscoverService(Uri url, string domain, ExchangeVersion requestedServerVersion);
    internal AutodiscoverService(ExchangeServiceBase service, ExchangeVersion requestedServerVersion);
    internal AutodiscoverService(ExchangeServiceBase service);
    private static AutodiscoverService();
    private bool DefaultAutodiscoverRedirectionUrlValidationCallback(string redirectionUrl);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverService/<GetLegacyUserSettingsAtUrl>d__27`1")]
private Task`1<TSettings> GetLegacyUserSettingsAtUrl(string emailAddress, Uri url);
    private void WriteLegacyAutodiscoverRequest(string emailAddress, ConfigurationSettingsBase settings, StreamWriter writer);
    private Uri GetRedirectUrl(string domainName);
    private bool TryGetRedirectionResponse(IEwsHttpWebResponse response, Uri& redirectUrl);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverService/<GetLegacyUserSettings>d__31`1")]
internal Task`1<TSettings> GetLegacyUserSettings(string emailAddress);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverService/<InternalGetLegacyUserSettings>d__32`1")]
private Task`1<Tuple`2<TSettings, int>> InternalGetLegacyUserSettings(string emailAddress, List`1<string> redirectionEmailAddresses, int currentHop);
    internal Uri GetRedirectionUrlFromDnsSrvRecord(string domainName);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverService/<TryLastChanceHostRedirection>d__34`1")]
private Task`1<Tuple`2<bool, TSettings>> TryLastChanceHostRedirection(string emailAddress, Uri redirectionUrl);
    private void DisableScpLookupIfDuplicateRedirection(string emailAddress, List`1<string> redirectionEmailAddresses);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverService/<InternalGetLegacyUserSettings>d__36")]
internal Task`1<GetUserSettingsResponse> InternalGetLegacyUserSettings(string emailAddress, List`1<UserSettingName> requestedSettings);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverService/<InternalGetSoapUserSettings>d__37")]
internal Task`1<GetUserSettingsResponse> InternalGetSoapUserSettings(string smtpAddress, List`1<UserSettingName> requestedSettings);
    internal Task`1<GetUserSettingsResponseCollection> GetUserSettings(List`1<string> smtpAddresses, List`1<UserSettingName> settings);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverService/<GetSettings>d__39`2")]
private Task`1<TGetSettingsResponseCollection> GetSettings(List`1<string> identities, List`1<TSettingName> settings, Nullable`1<ExchangeVersion> requestedVersion, GetSettingsMethod`2<TGetSettingsResponseCollection, TSettingName> getSettingsMethod, Func`1<string> getDomainMethod);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverService/<InternalGetUserSettings>d__40")]
private Task`1<Tuple`2<GetUserSettingsResponseCollection, Uri>> InternalGetUserSettings(List`1<string> smtpAddresses, List`1<UserSettingName> settings, Nullable`1<ExchangeVersion> requestedVersion, Uri autodiscoverUrl);
    internal Task`1<GetDomainSettingsResponseCollection> GetDomainSettings(List`1<string> domains, List`1<DomainSettingName> settings, Nullable`1<ExchangeVersion> requestedVersion);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverService/<InternalGetDomainSettings>d__42")]
private Task`1<Tuple`2<GetDomainSettingsResponseCollection, Uri>> InternalGetDomainSettings(List`1<string> domains, List`1<DomainSettingName> settings, Nullable`1<ExchangeVersion> requestedVersion, Uri autodiscoverUrl);
    private Uri GetAutodiscoverEndpointUrl(string host);
    private bool TryGetAutodiscoverEndpointUrl(string host, Uri& url);
    private ICollection`1<string> DefaultGetScpUrlsForDomain(string domainName);
    internal List`1<Uri> GetAutodiscoverServiceUrls(string domainName, Int32& scpHostCount);
    internal List`1<string> GetAutodiscoverServiceHosts(string domainName, Int32& scpHostCount);
    private bool TryGetEnabledEndpointsForHost(String& host, AutodiscoverEndpoints& endpoints);
    private AutodiscoverEndpoints GetEndpointsFromHttpWebResponse(IEwsHttpWebResponse response);
    internal void TraceResponse(IEwsHttpWebResponse response, MemoryStream memoryStream);
    internal HttpRequestMessage PrepareHttpRequestMessageForUrl(Uri url);
    internal HttpClient PrepareHttpClient();
    private bool CallRedirectionUrlValidationCallback(string redirectionUrl);
    internal virtual void ProcessHttpErrorResponse(IEwsHttpWebResponse httpWebResponse, EwsHttpClientException webException);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverService/<GetUserSettings>d__65")]
public Task`1<GetUserSettingsResponse> GetUserSettings(string userSmtpAddress, UserSettingName[] userSettingNames);
    public Task`1<GetUserSettingsResponseCollection> GetUsersSettings(IEnumerable`1<string> userSmtpAddresses, UserSettingName[] userSettingNames);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverService/<GetDomainSettings>d__67")]
public Task`1<GetDomainSettingsResponse> GetDomainSettings(string domain, Nullable`1<ExchangeVersion> requestedVersion, DomainSettingName[] domainSettingNames);
    public Task`1<GetDomainSettingsResponseCollection> GetDomainSettings(IEnumerable`1<string> domains, Nullable`1<ExchangeVersion> requestedVersion, DomainSettingName[] domainSettingNames);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Autodiscover.AutodiscoverService/<TryGetPartnerAccess>d__69")]
public Task`1<Tuple`3<bool, ExchangeCredentials, Uri>> TryGetPartnerAccess(string targetTenantDomain);
    public string get_Domain();
    public void set_Domain(string value);
    public Uri get_Url();
    public void set_Url(Uri value);
    public Nullable`1<bool> get_IsExternal();
    internal void set_IsExternal(Nullable`1<bool> value);
    public AutodiscoverRedirectionUrlValidationCallback get_RedirectionUrlValidationCallback();
    public void set_RedirectionUrlValidationCallback(AutodiscoverRedirectionUrlValidationCallback value);
    internal IPAddress get_DnsServerAddress();
    internal void set_DnsServerAddress(IPAddress value);
    public bool get_EnableScpLookup();
    public void set_EnableScpLookup(bool value);
    [CompilerGeneratedAttribute]
public Func`2<string, ICollection`1<string>> get_GetScpUrlsForDomainCallback();
    [CompilerGeneratedAttribute]
public void set_GetScpUrlsForDomainCallback(Func`2<string, ICollection`1<string>> value);
}
[ExtensionAttribute]
internal static class Microsoft.Exchange.WebServices.Autodiscover.ComparisonHelpers : object {
    [ExtensionAttribute]
internal static bool CaseInsensitiveContains(ICollection collection, string match);
}
[EditorBrowsableAttribute("1")]
internal abstract class Microsoft.Exchange.WebServices.Autodiscover.ConfigurationSettingsBase : object {
    private AutodiscoverError error;
    internal AutodiscoverResponseType ResponseType { get; }
    internal string RedirectTarget { get; }
    internal AutodiscoverError Error { get; }
    internal virtual bool TryReadCurrentXmlElement(EwsXmlReader reader);
    internal void LoadFromXml(EwsXmlReader reader);
    internal abstract virtual string GetNamespace();
    internal abstract virtual void MakeRedirectionResponse(Uri redirectUrl);
    internal abstract virtual AutodiscoverResponseType get_ResponseType();
    internal abstract virtual string get_RedirectTarget();
    internal abstract virtual GetUserSettingsResponse ConvertSettings(string smtpAddress, List`1<UserSettingName> requestedSettings);
    internal AutodiscoverError get_Error();
}
internal class Microsoft.Exchange.WebServices.Autodiscover.DirectoryHelper : object {
    private static int AutodiscoverMaxScpHops;
    private static string ScpUrlGuidString;
    private static string ScpPtrGuidString;
    private static string ScpFilterString;
    private ExchangeServiceBase service;
    internal ExchangeServiceBase Service { get; }
    public DirectoryHelper(ExchangeServiceBase service);
    public List`1<string> GetAutodiscoverScpUrlsForDomain(string domainName);
    private List`1<string> GetScpUrlList(string domainName, string ldapPath, Int32& maxHops);
    private string GetSiteName();
    private void TraceMessage(string message);
    internal ExchangeServiceBase get_Service();
}
public class Microsoft.Exchange.WebServices.Autodiscover.DocumentSharingLocation : object {
    private string serviceUrl;
    private string locationUrl;
    private string displayName;
    private IEnumerable`1<string> supportedFileExtensions;
    private bool externalAccessAllowed;
    private bool anonymousAccessAllowed;
    private bool canModifyPermissions;
    private bool isDefault;
    public string ServiceUrl { get; private set; }
    public string LocationUrl { get; private set; }
    public string DisplayName { get; private set; }
    public IEnumerable`1<string> SupportedFileExtensions { get; private set; }
    public bool ExternalAccessAllowed { get; private set; }
    public bool AnonymousAccessAllowed { get; private set; }
    public bool CanModifyPermissions { get; private set; }
    public bool IsDefault { get; private set; }
    public string get_ServiceUrl();
    private void set_ServiceUrl(string value);
    public string get_LocationUrl();
    private void set_LocationUrl(string value);
    public string get_DisplayName();
    private void set_DisplayName(string value);
    public IEnumerable`1<string> get_SupportedFileExtensions();
    private void set_SupportedFileExtensions(IEnumerable`1<string> value);
    public bool get_ExternalAccessAllowed();
    private void set_ExternalAccessAllowed(bool value);
    public bool get_AnonymousAccessAllowed();
    private void set_AnonymousAccessAllowed(bool value);
    public bool get_CanModifyPermissions();
    private void set_CanModifyPermissions(bool value);
    public bool get_IsDefault();
    private void set_IsDefault(bool value);
    internal static DocumentSharingLocation LoadFromXml(EwsXmlReader reader);
}
public class Microsoft.Exchange.WebServices.Autodiscover.DocumentSharingLocationCollection : object {
    [CompilerGeneratedAttribute]
private List`1<DocumentSharingLocation> <Entries>k__BackingField;
    public List`1<DocumentSharingLocation> Entries { get; private set; }
    internal static DocumentSharingLocationCollection LoadFromXml(EwsXmlReader reader);
    [CompilerGeneratedAttribute]
public List`1<DocumentSharingLocation> get_Entries();
    [CompilerGeneratedAttribute]
private void set_Entries(List`1<DocumentSharingLocation> value);
}
public class Microsoft.Exchange.WebServices.Autodiscover.DomainSettingError : object {
    private AutodiscoverErrorCode errorCode;
    private string errorMessage;
    private string settingName;
    public AutodiscoverErrorCode ErrorCode { get; }
    public string ErrorMessage { get; }
    public string SettingName { get; }
    internal void LoadFromXml(EwsXmlReader reader);
    public AutodiscoverErrorCode get_ErrorCode();
    public string get_ErrorMessage();
    public string get_SettingName();
}
public enum Microsoft.Exchange.WebServices.Autodiscover.DomainSettingName : Enum {
    public int value__;
    public static DomainSettingName ExternalEwsUrl;
    public static DomainSettingName ExternalEwsVersion;
}
internal class Microsoft.Exchange.WebServices.Autodiscover.GetDomainSettingsRequest : AutodiscoverRequest {
    private static string GetDomainSettingsActionUri;
    private List`1<string> domains;
    private List`1<DomainSettingName> settings;
    private Nullable`1<ExchangeVersion> requestedVersion;
    internal List`1<string> Domains { get; internal set; }
    internal List`1<DomainSettingName> Settings { get; internal set; }
    internal Nullable`1<ExchangeVersion> RequestedVersion { get; internal set; }
    internal GetDomainSettingsRequest(AutodiscoverService service, Uri url);
    internal virtual void Validate();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Autodiscover.GetDomainSettingsRequest/<Execute>d__6")]
internal Task`1<GetDomainSettingsResponseCollection> Execute();
    private void PostProcessResponses(GetDomainSettingsResponseCollection responses);
    internal virtual string GetRequestXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetWsAddressingActionName();
    internal virtual AutodiscoverResponse CreateServiceResponse();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal List`1<string> get_Domains();
    internal void set_Domains(List`1<string> value);
    internal List`1<DomainSettingName> get_Settings();
    internal void set_Settings(List`1<DomainSettingName> value);
    internal Nullable`1<ExchangeVersion> get_RequestedVersion();
    internal void set_RequestedVersion(Nullable`1<ExchangeVersion> value);
}
public class Microsoft.Exchange.WebServices.Autodiscover.GetDomainSettingsResponse : AutodiscoverResponse {
    private string domain;
    private string redirectTarget;
    private Dictionary`2<DomainSettingName, object> settings;
    private Collection`1<DomainSettingError> domainSettingErrors;
    public string Domain { get; internal set; }
    public string RedirectTarget { get; }
    public IDictionary`2<DomainSettingName, object> Settings { get; }
    public Collection`1<DomainSettingError> DomainSettingErrors { get; }
    public string get_Domain();
    internal void set_Domain(string value);
    public string get_RedirectTarget();
    public IDictionary`2<DomainSettingName, object> get_Settings();
    public Collection`1<DomainSettingError> get_DomainSettingErrors();
    internal virtual void LoadFromXml(EwsXmlReader reader, string endElementName);
    internal void LoadDomainSettingsFromXml(EwsXmlReader reader);
    private void ReadSettingFromXml(EwsXmlReader reader);
    private void LoadDomainSettingErrorsFromXml(EwsXmlReader reader);
}
public class Microsoft.Exchange.WebServices.Autodiscover.GetDomainSettingsResponseCollection : AutodiscoverResponseCollection`1<GetDomainSettingsResponse> {
    internal virtual GetDomainSettingsResponse CreateResponseInstance();
    internal virtual string GetResponseCollectionXmlElementName();
    internal virtual string GetResponseInstanceXmlElementName();
}
internal class Microsoft.Exchange.WebServices.Autodiscover.GetUserSettingsRequest : AutodiscoverRequest {
    private static string GetUserSettingsActionUri;
    private bool expectPartnerToken;
    [CompilerGeneratedAttribute]
private List`1<string> <SmtpAddresses>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<UserSettingName> <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PartnerToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PartnerTokenReference>k__BackingField;
    internal List`1<string> SmtpAddresses { get; internal set; }
    internal List`1<UserSettingName> Settings { get; internal set; }
    internal string PartnerToken { get; private set; }
    internal string PartnerTokenReference { get; private set; }
    internal GetUserSettingsRequest(AutodiscoverService service, Uri url);
    internal GetUserSettingsRequest(AutodiscoverService service, Uri url, bool expectPartnerToken);
    internal virtual void Validate();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Autodiscover.GetUserSettingsRequest/<Execute>d__5")]
internal Task`1<GetUserSettingsResponseCollection> Execute();
    private void PostProcessResponses(GetUserSettingsResponseCollection responses);
    internal virtual string GetRequestXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetWsAddressingActionName();
    internal virtual AutodiscoverResponse CreateServiceResponse();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteExtraCustomSoapHeadersToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual void ReadSoapHeader(EwsXmlReader reader);
    [CompilerGeneratedAttribute]
internal List`1<string> get_SmtpAddresses();
    [CompilerGeneratedAttribute]
internal void set_SmtpAddresses(List`1<string> value);
    [CompilerGeneratedAttribute]
internal List`1<UserSettingName> get_Settings();
    [CompilerGeneratedAttribute]
internal void set_Settings(List`1<UserSettingName> value);
    [CompilerGeneratedAttribute]
internal string get_PartnerToken();
    [CompilerGeneratedAttribute]
private void set_PartnerToken(string value);
    [CompilerGeneratedAttribute]
internal string get_PartnerTokenReference();
    [CompilerGeneratedAttribute]
private void set_PartnerTokenReference(string value);
}
public class Microsoft.Exchange.WebServices.Autodiscover.GetUserSettingsResponse : AutodiscoverResponse {
    [CompilerGeneratedAttribute]
private string <SmtpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedirectTarget>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<UserSettingName, object> <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<UserSettingError> <UserSettingErrors>k__BackingField;
    public string SmtpAddress { get; internal set; }
    public string RedirectTarget { get; internal set; }
    public IDictionary`2<UserSettingName, object> Settings { get; internal set; }
    public Collection`1<UserSettingError> UserSettingErrors { get; internal set; }
    public bool TryGetSettingValue(UserSettingName setting, T& value);
    [CompilerGeneratedAttribute]
public string get_SmtpAddress();
    [CompilerGeneratedAttribute]
internal void set_SmtpAddress(string value);
    [CompilerGeneratedAttribute]
public string get_RedirectTarget();
    [CompilerGeneratedAttribute]
internal void set_RedirectTarget(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<UserSettingName, object> get_Settings();
    [CompilerGeneratedAttribute]
internal void set_Settings(IDictionary`2<UserSettingName, object> value);
    [CompilerGeneratedAttribute]
public Collection`1<UserSettingError> get_UserSettingErrors();
    [CompilerGeneratedAttribute]
internal void set_UserSettingErrors(Collection`1<UserSettingError> value);
    internal virtual void LoadFromXml(EwsXmlReader reader, string endElementName);
    internal void LoadUserSettingsFromXml(EwsXmlReader reader);
    private void ReadSettingFromXml(EwsXmlReader reader);
    private void LoadUserSettingErrorsFromXml(EwsXmlReader reader);
}
public class Microsoft.Exchange.WebServices.Autodiscover.GetUserSettingsResponseCollection : AutodiscoverResponseCollection`1<GetUserSettingsResponse> {
    internal virtual GetUserSettingsResponse CreateResponseInstance();
    internal virtual string GetResponseCollectionXmlElementName();
    internal virtual string GetResponseInstanceXmlElementName();
}
[EditorBrowsableAttribute("1")]
internal class Microsoft.Exchange.WebServices.Autodiscover.OutlookAccount : object {
    private static string Settings;
    private static string RedirectAddr;
    private static string RedirectUrl;
    private Dictionary`2<OutlookProtocolType, OutlookProtocol> protocols;
    private AlternateMailboxCollection alternateMailboxes;
    [CompilerGeneratedAttribute]
private string <AccountType>k__BackingField;
    [CompilerGeneratedAttribute]
private AutodiscoverResponseType <ResponseType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RedirectTarget>k__BackingField;
    internal string AccountType { get; internal set; }
    internal AutodiscoverResponseType ResponseType { get; internal set; }
    internal string RedirectTarget { get; internal set; }
    internal void LoadFromXml(EwsXmlReader reader);
    internal void ConvertToUserSettings(List`1<UserSettingName> requestedSettings, GetUserSettingsResponse response);
    [CompilerGeneratedAttribute]
internal string get_AccountType();
    [CompilerGeneratedAttribute]
internal void set_AccountType(string value);
    [CompilerGeneratedAttribute]
internal AutodiscoverResponseType get_ResponseType();
    [CompilerGeneratedAttribute]
internal void set_ResponseType(AutodiscoverResponseType value);
    [CompilerGeneratedAttribute]
internal string get_RedirectTarget();
    [CompilerGeneratedAttribute]
internal void set_RedirectTarget(string value);
}
internal class Microsoft.Exchange.WebServices.Autodiscover.OutlookConfigurationSettings : ConfigurationSettingsBase {
    private static LazyMember`1<List`1<UserSettingName>> allOutlookProviderSettings;
    private OutlookUser user;
    private OutlookAccount account;
    internal AutodiscoverResponseType ResponseType { get; }
    internal string RedirectTarget { get; }
    private static OutlookConfigurationSettings();
    internal static bool IsAvailableUserSetting(UserSettingName setting);
    internal virtual string GetNamespace();
    internal virtual void MakeRedirectionResponse(Uri redirectUrl);
    internal virtual bool TryReadCurrentXmlElement(EwsXmlReader reader);
    internal virtual GetUserSettingsResponse ConvertSettings(string smtpAddress, List`1<UserSettingName> requestedSettings);
    private void ReportUnsupportedSettings(List`1<UserSettingName> requestedSettings, GetUserSettingsResponse response);
    internal virtual AutodiscoverResponseType get_ResponseType();
    internal virtual string get_RedirectTarget();
}
[EditorBrowsableAttribute("1")]
internal class Microsoft.Exchange.WebServices.Autodiscover.OutlookProtocol : object {
    private static string EXCH;
    private static string EXPR;
    private static string WEB;
    private static LazyMember`1<Dictionary`2<UserSettingName, Func`2<OutlookProtocol, object>>> commonProtocolSettings;
    private static LazyMember`1<Dictionary`2<UserSettingName, Func`2<OutlookProtocol, object>>> internalProtocolSettings;
    private static LazyMember`1<Dictionary`2<UserSettingName, Func`2<OutlookProtocol, object>>> externalProtocolSettings;
    private static LazyMember`1<Dictionary`2<UserSettingName, Func`2<OutlookProtocol, object>>> internalProtocolConverterDictionary;
    private static LazyMember`1<Dictionary`2<UserSettingName, Func`2<OutlookProtocol, object>>> externalProtocolConverterDictionary;
    private static LazyMember`1<Dictionary`2<UserSettingName, Func`2<OutlookProtocol, object>>> webProtocolConverterDictionary;
    private static LazyMember`1<List`1<UserSettingName>> availableUserSettings;
    private static LazyMember`1<Dictionary`2<string, OutlookProtocolType>> protocolNameToTypeMap;
    private string activeDirectoryServer;
    private string authPackage;
    private string availabilityServiceUrl;
    private string ecpUrl;
    private string ecpUrlAggr;
    private string ecpUrlMt;
    private string ecpUrlPublish;
    private string ecpUrlPhoto;
    private string ecpUrlConnect;
    private string ecpUrlRet;
    private string ecpUrlSms;
    private string ecpUrlUm;
    private string ecpUrlTm;
    private string ecpUrlTmCreating;
    private string ecpUrlTmEditing;
    private string ecpUrlTmHiding;
    private string siteMailboxCreationURL;
    private string ecpUrlExtInstall;
    private string exchangeWebServicesUrl;
    private string exchangeManagementWebServicesUrl;
    private string mailboxDN;
    private string offlineAddressBookUrl;
    private string exchangeRpcUrl;
    private string exchangeWebServicesPartnerUrl;
    private string publicFolderServer;
    private string server;
    private string serverDN;
    private string unifiedMessagingUrl;
    private bool sharingEnabled;
    private bool sslEnabled;
    private bool serverExclusiveConnect;
    private string certPrincipalName;
    private string groupingInformation;
    private WebClientUrlCollection externalOutlookWebAccessUrls;
    private WebClientUrlCollection internalOutlookWebAccessUrls;
    [CompilerGeneratedAttribute]
private OutlookProtocolType <ProtocolType>k__BackingField;
    internal OutlookProtocolType ProtocolType { get; internal set; }
    private Dictionary`2<UserSettingName, Func`2<OutlookProtocol, object>> ConverterDictionary { get; }
    internal static List`1<UserSettingName> AvailableUserSettings { get; }
    private static OutlookProtocol();
    internal void LoadFromXml(EwsXmlReader reader);
    private static OutlookProtocolType ProtocolNameToType(string protocolName);
    private static void LoadWebClientUrlsFromXml(EwsXmlReader reader, WebClientUrlCollection webClientUrls, string elementName);
    private string ConvertEcpFragmentToUrl(string fragment);
    internal void ConvertToUserSettings(List`1<UserSettingName> requestedSettings, GetUserSettingsResponse response);
    [CompilerGeneratedAttribute]
internal OutlookProtocolType get_ProtocolType();
    [CompilerGeneratedAttribute]
internal void set_ProtocolType(OutlookProtocolType value);
    private Dictionary`2<UserSettingName, Func`2<OutlookProtocol, object>> get_ConverterDictionary();
    internal static List`1<UserSettingName> get_AvailableUserSettings();
}
internal enum Microsoft.Exchange.WebServices.Autodiscover.OutlookProtocolType : Enum {
    public int value__;
    public static OutlookProtocolType Rpc;
    public static OutlookProtocolType RpcOverHttp;
    public static OutlookProtocolType Web;
    public static OutlookProtocolType Unknown;
}
[EditorBrowsableAttribute("1")]
internal class Microsoft.Exchange.WebServices.Autodiscover.OutlookUser : object {
    private static LazyMember`1<Dictionary`2<UserSettingName, Func`2<OutlookUser, string>>> converterDictionary;
    private string displayName;
    private string legacyDN;
    private string deploymentId;
    private string autodiscoverAMTPAddress;
    internal static IEnumerable`1<UserSettingName> AvailableUserSettings { get; }
    private static OutlookUser();
    internal void LoadFromXml(EwsXmlReader reader);
    internal void ConvertToUserSettings(List`1<UserSettingName> requestedSettings, GetUserSettingsResponse response);
    internal static IEnumerable`1<UserSettingName> get_AvailableUserSettings();
}
public class Microsoft.Exchange.WebServices.Autodiscover.ProtocolConnection : object {
    private string encryptionMethod;
    private string hostname;
    private int port;
    public string EncryptionMethod { get; public set; }
    public string Hostname { get; public set; }
    public int Port { get; public set; }
    internal ProtocolConnection(string encryptionMethod, string hostname, int port);
    internal static ProtocolConnection LoadFromXml(EwsXmlReader reader);
    public string get_EncryptionMethod();
    public void set_EncryptionMethod(string value);
    public string get_Hostname();
    public void set_Hostname(string value);
    public int get_Port();
    public void set_Port(int value);
}
public class Microsoft.Exchange.WebServices.Autodiscover.ProtocolConnectionCollection : object {
    private List`1<ProtocolConnection> connections;
    public List`1<ProtocolConnection> Connections { get; internal set; }
    internal static ProtocolConnectionCollection LoadFromXml(EwsXmlReader reader);
    public List`1<ProtocolConnection> get_Connections();
    internal void set_Connections(List`1<ProtocolConnection> value);
}
public class Microsoft.Exchange.WebServices.Autodiscover.UserSettingError : object {
    [CompilerGeneratedAttribute]
private AutodiscoverErrorCode <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SettingName>k__BackingField;
    public AutodiscoverErrorCode ErrorCode { get; internal set; }
    public string ErrorMessage { get; internal set; }
    public string SettingName { get; internal set; }
    internal UserSettingError(AutodiscoverErrorCode errorCode, string errorMessage, string settingName);
    internal void LoadFromXml(EwsXmlReader reader);
    [CompilerGeneratedAttribute]
public AutodiscoverErrorCode get_ErrorCode();
    [CompilerGeneratedAttribute]
internal void set_ErrorCode(AutodiscoverErrorCode value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
internal void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public string get_SettingName();
    [CompilerGeneratedAttribute]
internal void set_SettingName(string value);
}
public enum Microsoft.Exchange.WebServices.Autodiscover.UserSettingName : Enum {
    public int value__;
    public static UserSettingName UserDisplayName;
    public static UserSettingName UserDN;
    public static UserSettingName UserDeploymentId;
    public static UserSettingName InternalMailboxServer;
    public static UserSettingName InternalRpcClientServer;
    public static UserSettingName InternalMailboxServerDN;
    public static UserSettingName InternalEcpUrl;
    public static UserSettingName InternalEcpVoicemailUrl;
    public static UserSettingName InternalEcpEmailSubscriptionsUrl;
    public static UserSettingName InternalEcpTextMessagingUrl;
    public static UserSettingName InternalEcpDeliveryReportUrl;
    public static UserSettingName InternalEcpRetentionPolicyTagsUrl;
    public static UserSettingName InternalEcpPublishingUrl;
    public static UserSettingName InternalEcpPhotoUrl;
    public static UserSettingName InternalEcpConnectUrl;
    public static UserSettingName InternalEcpTeamMailboxUrl;
    public static UserSettingName InternalEcpTeamMailboxCreatingUrl;
    public static UserSettingName InternalEcpTeamMailboxEditingUrl;
    public static UserSettingName InternalEcpTeamMailboxHidingUrl;
    public static UserSettingName InternalEcpExtensionInstallationUrl;
    public static UserSettingName InternalEwsUrl;
    public static UserSettingName InternalEmwsUrl;
    public static UserSettingName InternalOABUrl;
    public static UserSettingName InternalPhotosUrl;
    public static UserSettingName InternalUMUrl;
    public static UserSettingName InternalWebClientUrls;
    public static UserSettingName MailboxDN;
    public static UserSettingName PublicFolderServer;
    public static UserSettingName ActiveDirectoryServer;
    public static UserSettingName ExternalMailboxServer;
    public static UserSettingName ExternalMailboxServerRequiresSSL;
    public static UserSettingName ExternalMailboxServerAuthenticationMethods;
    public static UserSettingName EcpVoicemailUrlFragment;
    public static UserSettingName EcpEmailSubscriptionsUrlFragment;
    public static UserSettingName EcpTextMessagingUrlFragment;
    public static UserSettingName EcpDeliveryReportUrlFragment;
    public static UserSettingName EcpRetentionPolicyTagsUrlFragment;
    public static UserSettingName EcpPublishingUrlFragment;
    public static UserSettingName EcpPhotoUrlFragment;
    public static UserSettingName EcpConnectUrlFragment;
    public static UserSettingName EcpTeamMailboxUrlFragment;
    public static UserSettingName EcpTeamMailboxCreatingUrlFragment;
    public static UserSettingName EcpTeamMailboxEditingUrlFragment;
    public static UserSettingName EcpExtensionInstallationUrlFragment;
    public static UserSettingName ExternalEcpUrl;
    public static UserSettingName ExternalEcpVoicemailUrl;
    public static UserSettingName ExternalEcpEmailSubscriptionsUrl;
    public static UserSettingName ExternalEcpTextMessagingUrl;
    public static UserSettingName ExternalEcpDeliveryReportUrl;
    public static UserSettingName ExternalEcpRetentionPolicyTagsUrl;
    public static UserSettingName ExternalEcpPublishingUrl;
    public static UserSettingName ExternalEcpPhotoUrl;
    public static UserSettingName ExternalEcpConnectUrl;
    public static UserSettingName ExternalEcpTeamMailboxUrl;
    public static UserSettingName ExternalEcpTeamMailboxCreatingUrl;
    public static UserSettingName ExternalEcpTeamMailboxEditingUrl;
    public static UserSettingName ExternalEcpTeamMailboxHidingUrl;
    public static UserSettingName ExternalEcpExtensionInstallationUrl;
    public static UserSettingName ExternalEwsUrl;
    public static UserSettingName ExternalEmwsUrl;
    public static UserSettingName ExternalOABUrl;
    public static UserSettingName ExternalPhotosUrl;
    public static UserSettingName ExternalUMUrl;
    public static UserSettingName ExternalWebClientUrls;
    public static UserSettingName CrossOrganizationSharingEnabled;
    public static UserSettingName AlternateMailboxes;
    public static UserSettingName CasVersion;
    public static UserSettingName EwsSupportedSchemas;
    public static UserSettingName InternalPop3Connections;
    public static UserSettingName ExternalPop3Connections;
    public static UserSettingName InternalImap4Connections;
    public static UserSettingName ExternalImap4Connections;
    public static UserSettingName InternalSmtpConnections;
    public static UserSettingName ExternalSmtpConnections;
    public static UserSettingName InternalServerExclusiveConnect;
    public static UserSettingName ExternalEwsVersion;
    public static UserSettingName MobileMailboxPolicy;
    public static UserSettingName DocumentSharingLocations;
    public static UserSettingName UserMSOnline;
    public static UserSettingName InternalMailboxServerAuthenticationMethods;
    public static UserSettingName MailboxVersion;
    public static UserSettingName SPMySiteHostURL;
    public static UserSettingName SiteMailboxCreationURL;
    public static UserSettingName InternalRpcHttpServer;
    public static UserSettingName InternalRpcHttpConnectivityRequiresSsl;
    public static UserSettingName InternalRpcHttpAuthenticationMethod;
    public static UserSettingName ExternalServerExclusiveConnect;
    public static UserSettingName ExchangeRpcUrl;
    public static UserSettingName ShowGalAsDefaultView;
    public static UserSettingName AutoDiscoverSMTPAddress;
    public static UserSettingName InteropExternalEwsUrl;
    public static UserSettingName InteropExternalEwsVersion;
    public static UserSettingName PublicFolderInformation;
    public static UserSettingName RedirectUrl;
    public static UserSettingName EwsPartnerUrl;
    public static UserSettingName CertPrincipalName;
    public static UserSettingName GroupingInformation;
    public static UserSettingName InternalOutlookServiceUrl;
    public static UserSettingName ExternalOutlookServiceUrl;
}
public class Microsoft.Exchange.WebServices.Autodiscover.WebClientUrl : object {
    private string authenticationMethods;
    private string url;
    public string AuthenticationMethods { get; internal set; }
    public string Url { get; internal set; }
    internal WebClientUrl(string authenticationMethods, string url);
    internal static WebClientUrl LoadFromXml(EwsXmlReader reader);
    public string get_AuthenticationMethods();
    internal void set_AuthenticationMethods(string value);
    public string get_Url();
    internal void set_Url(string value);
}
public class Microsoft.Exchange.WebServices.Autodiscover.WebClientUrlCollection : object {
    private List`1<WebClientUrl> urls;
    public List`1<WebClientUrl> Urls { get; }
    internal static WebClientUrlCollection LoadFromXml(EwsXmlReader reader);
    public List`1<WebClientUrl> get_Urls();
}
internal class Microsoft.Exchange.WebServices.Data.AbsoluteDateTransition : TimeZoneTransition {
    private DateTime dateTime;
    internal DateTime DateTime { get; internal set; }
    internal AbsoluteDateTransition(TimeZoneDefinition timeZoneDefinition);
    internal AbsoluteDateTransition(TimeZoneDefinition timeZoneDefinition, TimeZoneTransitionGroup targetGroup);
    internal virtual void InitializeFromTransitionTime(TransitionTime transitionTime);
    internal virtual string GetXmlElementName();
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal DateTime get_DateTime();
    internal void set_DateTime(DateTime value);
}
internal class Microsoft.Exchange.WebServices.Data.AbsoluteDayOfMonthTransition : AbsoluteMonthTransition {
    private int dayOfMonth;
    internal int DayOfMonth { get; }
    internal AbsoluteDayOfMonthTransition(TimeZoneDefinition timeZoneDefinition);
    internal AbsoluteDayOfMonthTransition(TimeZoneDefinition timeZoneDefinition, TimeZonePeriod targetPeriod);
    internal virtual string GetXmlElementName();
    internal virtual TransitionTime CreateTransitionTime();
    internal virtual void InitializeFromTransitionTime(TransitionTime transitionTime);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal int get_DayOfMonth();
}
internal abstract class Microsoft.Exchange.WebServices.Data.AbsoluteMonthTransition : TimeZoneTransition {
    private TimeSpan timeOffset;
    private int month;
    internal TimeSpan TimeOffset { get; }
    internal int Month { get; }
    internal AbsoluteMonthTransition(TimeZoneDefinition timeZoneDefinition);
    internal AbsoluteMonthTransition(TimeZoneDefinition timeZoneDefinition, TimeZonePeriod targetPeriod);
    internal virtual void InitializeFromTransitionTime(TransitionTime transitionTime);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal TimeSpan get_TimeOffset();
    internal int get_Month();
}
internal abstract class Microsoft.Exchange.WebServices.Data.AbstractFolderIdWrapper : object {
    public virtual Folder GetFolder();
    internal abstract virtual void WriteToXml(EwsServiceXmlWriter writer);
    internal virtual void Validate(ExchangeVersion version);
}
internal abstract class Microsoft.Exchange.WebServices.Data.AbstractItemIdWrapper : object {
    public virtual Item GetItem();
    internal abstract virtual void WriteToXml(EwsServiceXmlWriter writer);
}
public class Microsoft.Exchange.WebServices.Data.AcceptMeetingInvitationMessage : CalendarResponseMessage`1<MeetingResponse> {
    private bool tentative;
    public bool Tentative { get; }
    internal AcceptMeetingInvitationMessage(Item referenceItem, bool tentative);
    internal virtual string GetXmlElementNameOverride();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public bool get_Tentative();
}
public class Microsoft.Exchange.WebServices.Data.AccountIsLockedException : ServiceRemoteException {
    [CompilerGeneratedAttribute]
private Uri <AccountUnlockUrl>k__BackingField;
    public Uri AccountUnlockUrl { get; private set; }
    public AccountIsLockedException(string message, Uri accountUnlockUrl, Exception innerException);
    protected AccountIsLockedException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public Uri get_AccountUnlockUrl();
    [CompilerGeneratedAttribute]
private void set_AccountUnlockUrl(Uri value);
}
internal class Microsoft.Exchange.WebServices.Data.AddDelegateRequest : DelegateManagementRequestBase`1<DelegateManagementResponse> {
    private List`1<DelegateUser> delegateUsers;
    private Nullable`1<MeetingRequestsDeliveryScope> meetingRequestsDeliveryScope;
    public Nullable`1<MeetingRequestsDeliveryScope> MeetingRequestsDeliveryScope { get; public set; }
    public List`1<DelegateUser> DelegateUsers { get; }
    internal AddDelegateRequest(ExchangeService service);
    internal virtual void Validate();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual DelegateManagementResponse CreateResponse();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public Nullable`1<MeetingRequestsDeliveryScope> get_MeetingRequestsDeliveryScope();
    public void set_MeetingRequestsDeliveryScope(Nullable`1<MeetingRequestsDeliveryScope> value);
    public List`1<DelegateUser> get_DelegateUsers();
}
public class Microsoft.Exchange.WebServices.Data.AddressEntity : ExtractedEntity {
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    public string Address { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
internal void set_Address(string value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.AddressEntityCollection : ComplexPropertyCollection`1<AddressEntity> {
    internal AddressEntityCollection(IEnumerable`1<AddressEntity> collection);
    internal virtual AddressEntity CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(AddressEntity complexProperty);
}
public enum Microsoft.Exchange.WebServices.Data.AffectedTaskOccurrence : Enum {
    public int value__;
    public static AffectedTaskOccurrence AllOccurrences;
    public static AffectedTaskOccurrence SpecifiedOccurrenceOnly;
}
public enum Microsoft.Exchange.WebServices.Data.AggregateType : Enum {
    public int value__;
    public static AggregateType Minimum;
    public static AggregateType Maximum;
}
public class Microsoft.Exchange.WebServices.Data.AlternateId : AlternateIdBase {
    internal static string SchemaTypeName;
    [CompilerGeneratedAttribute]
private string <UniqueId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mailbox>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsArchive>k__BackingField;
    public string UniqueId { get; public set; }
    public string Mailbox { get; public set; }
    public bool IsArchive { get; public set; }
    public AlternateId(IdFormat format, string id, string mailbox);
    public AlternateId(IdFormat format, string id, string mailbox, bool isArchive);
    [CompilerGeneratedAttribute]
public string get_UniqueId();
    [CompilerGeneratedAttribute]
public void set_UniqueId(string value);
    [CompilerGeneratedAttribute]
public string get_Mailbox();
    [CompilerGeneratedAttribute]
public void set_Mailbox(string value);
    [CompilerGeneratedAttribute]
public bool get_IsArchive();
    [CompilerGeneratedAttribute]
public void set_IsArchive(bool value);
    internal virtual string GetXmlElementName();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void LoadAttributesFromXml(EwsServiceXmlReader reader);
    internal virtual void InternalValidate();
}
public abstract class Microsoft.Exchange.WebServices.Data.AlternateIdBase : object {
    [CompilerGeneratedAttribute]
private IdFormat <Format>k__BackingField;
    public IdFormat Format { get; public set; }
    internal AlternateIdBase(IdFormat format);
    [CompilerGeneratedAttribute]
public IdFormat get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(IdFormat value);
    internal abstract virtual string GetXmlElementName();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void LoadAttributesFromXml(EwsServiceXmlReader reader);
    internal void WriteToXml(EwsServiceXmlWriter writer);
    internal virtual void InternalValidate();
    private sealed virtual override void Microsoft.Exchange.WebServices.Data.ISelfValidate.Validate();
}
public class Microsoft.Exchange.WebServices.Data.AlternatePublicFolderId : AlternateIdBase {
    internal static string SchemaTypeName;
    [CompilerGeneratedAttribute]
private string <FolderId>k__BackingField;
    public string FolderId { get; public set; }
    public AlternatePublicFolderId(IdFormat format, string folderId);
    [CompilerGeneratedAttribute]
public string get_FolderId();
    [CompilerGeneratedAttribute]
public void set_FolderId(string value);
    internal virtual string GetXmlElementName();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void LoadAttributesFromXml(EwsServiceXmlReader reader);
}
public class Microsoft.Exchange.WebServices.Data.AlternatePublicFolderItemId : AlternatePublicFolderId {
    internal static string SchemaTypeName;
    private string itemId;
    public string ItemId { get; public set; }
    public AlternatePublicFolderItemId(IdFormat format, string folderId, string itemId);
    public string get_ItemId();
    public void set_ItemId(string value);
    internal virtual string GetXmlElementName();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void LoadAttributesFromXml(EwsServiceXmlReader reader);
}
internal class Microsoft.Exchange.WebServices.Data.ApplyConversationActionRequest : MultiResponseServiceRequest`1<ServiceResponse> {
    private List`1<ConversationAction> conversationActions;
    public List`1<ConversationAction> ConversationActions { get; }
    internal ApplyConversationActionRequest(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    public List`1<ConversationAction> get_ConversationActions();
    internal virtual ServiceResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual void Validate();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
}
[AttachableAttribute]
[ServiceObjectDefinitionAttribute("CalendarItem")]
public class Microsoft.Exchange.WebServices.Data.Appointment : Item {
    internal Nullable`1<SendCancellationsMode> DefaultSendCancellationsMode { get; }
    internal Nullable`1<SendInvitationsMode> DefaultSendInvitationsMode { get; }
    internal Nullable`1<SendInvitationsOrCancellationsMode> DefaultSendInvitationsOrCancellationsMode { get; }
    public DateTime Start { get; public set; }
    public DateTime End { get; public set; }
    public DateTime OriginalStart { get; }
    public bool IsAllDayEvent { get; public set; }
    public LegacyFreeBusyStatus LegacyFreeBusyStatus { get; public set; }
    public string Location { get; public set; }
    public string When { get; }
    public bool IsMeeting { get; }
    public bool IsCancelled { get; }
    public bool IsRecurring { get; }
    public bool MeetingRequestWasSent { get; }
    public bool IsResponseRequested { get; public set; }
    public AppointmentType AppointmentType { get; }
    public MeetingResponseType MyResponseType { get; }
    public EmailAddress Organizer { get; }
    public AttendeeCollection RequiredAttendees { get; }
    public AttendeeCollection OptionalAttendees { get; }
    public AttendeeCollection Resources { get; }
    public int ConflictingMeetingCount { get; }
    public int AdjacentMeetingCount { get; }
    public ItemCollection`1<Appointment> ConflictingMeetings { get; }
    public ItemCollection`1<Appointment> AdjacentMeetings { get; }
    public TimeSpan Duration { get; }
    public string TimeZone { get; }
    public DateTime AppointmentReplyTime { get; }
    public int AppointmentSequenceNumber { get; }
    public int AppointmentState { get; }
    public Recurrence Recurrence { get; public set; }
    public OccurrenceInfo FirstOccurrence { get; }
    public OccurrenceInfo LastOccurrence { get; }
    public OccurrenceInfoCollection ModifiedOccurrences { get; }
    public DeletedOccurrenceInfoCollection DeletedOccurrences { get; }
    public TimeZoneInfo StartTimeZone { get; public set; }
    public TimeZoneInfo EndTimeZone { get; public set; }
    public int ConferenceType { get; public set; }
    public bool AllowNewTimeProposal { get; public set; }
    public bool IsOnlineMeeting { get; public set; }
    public string MeetingWorkspaceUrl { get; public set; }
    public string NetShowUrl { get; public set; }
    public string ICalUid { get; public set; }
    public Nullable`1<DateTime> ICalRecurrenceId { get; }
    public Nullable`1<DateTime> ICalDateTimeStamp { get; }
    public EnhancedLocation EnhancedLocation { get; public set; }
    public string JoinOnlineMeetingUrl { get; }
    public OnlineMeetingSettings OnlineMeetingSettings { get; }
    public Appointment(ExchangeService service);
    internal Appointment(ItemAttachment parentAttachment, bool isNew);
    public static Task`1<Appointment> Bind(ExchangeService service, ItemId id, PropertySet propertySet, CancellationToken token);
    public static Task`1<Appointment> Bind(ExchangeService service, ItemId id);
    public static Task`1<Appointment> BindToOccurrence(ExchangeService service, ItemId recurringMasterId, int occurenceIndex);
    public static Task`1<Appointment> BindToOccurrence(ExchangeService service, ItemId recurringMasterId, int occurenceIndex, PropertySet propertySet);
    public static Task`1<Appointment> BindToRecurringMaster(ExchangeService service, ItemId occurrenceId);
    public static Task`1<Appointment> BindToRecurringMaster(ExchangeService service, ItemId occurrenceId, PropertySet propertySet);
    internal virtual ServiceObjectSchema GetSchema();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal virtual bool GetIsTimeZoneHeaderRequired(bool isUpdateOperation);
    internal virtual bool GetIsCustomDateTimeScopingRequired();
    internal virtual void Validate();
    public ResponseMessage CreateReply(bool replyAll);
    public Task Reply(MessageBody bodyPrefix, bool replyAll);
    public ResponseMessage CreateForward();
    public Task Forward(MessageBody bodyPrefix, EmailAddress[] toRecipients);
    public Task Forward(MessageBody bodyPrefix, IEnumerable`1<EmailAddress> toRecipients);
    public Task Save(WellKnownFolderName destinationFolderName, SendInvitationsMode sendInvitationsMode, CancellationToken token);
    public Task Save(FolderId destinationFolderId, SendInvitationsMode sendInvitationsMode, CancellationToken token);
    public Task Save(SendInvitationsMode sendInvitationsMode, CancellationToken token);
    public Task`1<Item> Update(ConflictResolutionMode conflictResolutionMode, SendInvitationsOrCancellationsMode sendInvitationsOrCancellationsMode, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<ServiceResponse>> Delete(DeleteMode deleteMode, SendCancellationsMode sendCancellationsMode, CancellationToken token);
    public sealed virtual AcceptMeetingInvitationMessage CreateAcceptMessage(bool tentative);
    public CancelMeetingMessage CreateCancelMeetingMessage();
    public sealed virtual DeclineMeetingInvitationMessage CreateDeclineMessage();
    public sealed virtual Task`1<CalendarActionResults> Accept(bool sendResponse);
    public sealed virtual Task`1<CalendarActionResults> AcceptTentatively(bool sendResponse);
    internal Task`1<CalendarActionResults> InternalAccept(bool tentative, bool sendResponse);
    public Task`1<CalendarActionResults> CancelMeeting();
    public Task`1<CalendarActionResults> CancelMeeting(string cancellationMessageText);
    public sealed virtual Task`1<CalendarActionResults> Decline(bool sendResponse);
    internal virtual Nullable`1<SendCancellationsMode> get_DefaultSendCancellationsMode();
    internal virtual Nullable`1<SendInvitationsMode> get_DefaultSendInvitationsMode();
    internal virtual Nullable`1<SendInvitationsOrCancellationsMode> get_DefaultSendInvitationsOrCancellationsMode();
    public DateTime get_Start();
    public void set_Start(DateTime value);
    public DateTime get_End();
    public void set_End(DateTime value);
    public DateTime get_OriginalStart();
    public bool get_IsAllDayEvent();
    public void set_IsAllDayEvent(bool value);
    public LegacyFreeBusyStatus get_LegacyFreeBusyStatus();
    public void set_LegacyFreeBusyStatus(LegacyFreeBusyStatus value);
    public string get_Location();
    public void set_Location(string value);
    public string get_When();
    public bool get_IsMeeting();
    public bool get_IsCancelled();
    public bool get_IsRecurring();
    public bool get_MeetingRequestWasSent();
    public bool get_IsResponseRequested();
    public void set_IsResponseRequested(bool value);
    public AppointmentType get_AppointmentType();
    public MeetingResponseType get_MyResponseType();
    public EmailAddress get_Organizer();
    public AttendeeCollection get_RequiredAttendees();
    public AttendeeCollection get_OptionalAttendees();
    public AttendeeCollection get_Resources();
    public int get_ConflictingMeetingCount();
    public int get_AdjacentMeetingCount();
    public ItemCollection`1<Appointment> get_ConflictingMeetings();
    public ItemCollection`1<Appointment> get_AdjacentMeetings();
    public TimeSpan get_Duration();
    public string get_TimeZone();
    public DateTime get_AppointmentReplyTime();
    public int get_AppointmentSequenceNumber();
    public int get_AppointmentState();
    public Recurrence get_Recurrence();
    public void set_Recurrence(Recurrence value);
    public OccurrenceInfo get_FirstOccurrence();
    public OccurrenceInfo get_LastOccurrence();
    public OccurrenceInfoCollection get_ModifiedOccurrences();
    public DeletedOccurrenceInfoCollection get_DeletedOccurrences();
    public TimeZoneInfo get_StartTimeZone();
    public void set_StartTimeZone(TimeZoneInfo value);
    public TimeZoneInfo get_EndTimeZone();
    public void set_EndTimeZone(TimeZoneInfo value);
    public int get_ConferenceType();
    public void set_ConferenceType(int value);
    public bool get_AllowNewTimeProposal();
    public void set_AllowNewTimeProposal(bool value);
    public bool get_IsOnlineMeeting();
    public void set_IsOnlineMeeting(bool value);
    public string get_MeetingWorkspaceUrl();
    public void set_MeetingWorkspaceUrl(string value);
    public string get_NetShowUrl();
    public void set_NetShowUrl(string value);
    public string get_ICalUid();
    public void set_ICalUid(string value);
    public Nullable`1<DateTime> get_ICalRecurrenceId();
    public Nullable`1<DateTime> get_ICalDateTimeStamp();
    public EnhancedLocation get_EnhancedLocation();
    public void set_EnhancedLocation(EnhancedLocation value);
    public string get_JoinOnlineMeetingUrl();
    public OnlineMeetingSettings get_OnlineMeetingSettings();
}
public class Microsoft.Exchange.WebServices.Data.AppointmentOccurrenceId : ItemId {
    private int occurrenceIndex;
    public int OccurrenceIndex { get; public set; }
    public AppointmentOccurrenceId(string recurringMasterUniqueId, int occurrenceIndex);
    public int get_OccurrenceIndex();
    public void set_OccurrenceIndex(int value);
    internal virtual string GetXmlElementName();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
}
[SchemaAttribute]
public class Microsoft.Exchange.WebServices.Data.AppointmentSchema : ItemSchema {
    public static PropertyDefinition StartTimeZone;
    public static PropertyDefinition EndTimeZone;
    public static PropertyDefinition Start;
    public static PropertyDefinition End;
    public static PropertyDefinition OriginalStart;
    public static PropertyDefinition IsAllDayEvent;
    public static PropertyDefinition LegacyFreeBusyStatus;
    public static PropertyDefinition Location;
    public static PropertyDefinition When;
    public static PropertyDefinition IsMeeting;
    public static PropertyDefinition IsCancelled;
    public static PropertyDefinition IsRecurring;
    public static PropertyDefinition MeetingRequestWasSent;
    public static PropertyDefinition IsResponseRequested;
    public static PropertyDefinition AppointmentType;
    public static PropertyDefinition MyResponseType;
    public static PropertyDefinition Organizer;
    public static PropertyDefinition RequiredAttendees;
    public static PropertyDefinition OptionalAttendees;
    public static PropertyDefinition Resources;
    public static PropertyDefinition ConflictingMeetingCount;
    public static PropertyDefinition AdjacentMeetingCount;
    public static PropertyDefinition ConflictingMeetings;
    public static PropertyDefinition AdjacentMeetings;
    public static PropertyDefinition Duration;
    public static PropertyDefinition TimeZone;
    public static PropertyDefinition AppointmentReplyTime;
    public static PropertyDefinition AppointmentSequenceNumber;
    public static PropertyDefinition AppointmentState;
    public static PropertyDefinition Recurrence;
    public static PropertyDefinition FirstOccurrence;
    public static PropertyDefinition LastOccurrence;
    public static PropertyDefinition ModifiedOccurrences;
    public static PropertyDefinition DeletedOccurrences;
    internal static PropertyDefinition MeetingTimeZone;
    public static PropertyDefinition ConferenceType;
    public static PropertyDefinition AllowNewTimeProposal;
    public static PropertyDefinition IsOnlineMeeting;
    public static PropertyDefinition MeetingWorkspaceUrl;
    public static PropertyDefinition NetShowUrl;
    public static PropertyDefinition ICalUid;
    public static PropertyDefinition ICalRecurrenceId;
    public static PropertyDefinition ICalDateTimeStamp;
    public static PropertyDefinition EnhancedLocation;
    public static PropertyDefinition JoinOnlineMeetingUrl;
    public static PropertyDefinition OnlineMeetingSettings;
    internal static AppointmentSchema Instance;
    private static AppointmentSchema();
    internal virtual void RegisterProperties();
}
public enum Microsoft.Exchange.WebServices.Data.AppointmentType : Enum {
    public int value__;
    public static AppointmentType Single;
    public static AppointmentType Occurrence;
    public static AppointmentType Exception;
    public static AppointmentType RecurringMaster;
}
public class Microsoft.Exchange.WebServices.Data.ApprovalRequestData : ComplexProperty {
    private bool isUndecidedApprovalRequest;
    private int approvalDecision;
    private string approvalDecisionMaker;
    private DateTime approvalDecisionTime;
    public bool IsUndecidedApprovalRequest { get; }
    public int ApprovalDecision { get; }
    public string ApprovalDecisionMaker { get; }
    public DateTime ApprovalDecisionTime { get; }
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    public bool get_IsUndecidedApprovalRequest();
    public int get_ApprovalDecision();
    public string get_ApprovalDecisionMaker();
    public DateTime get_ApprovalDecisionTime();
}
internal class Microsoft.Exchange.WebServices.Data.ArchiveItemRequest : MultiResponseServiceRequest`1<ArchiveItemResponse> {
    private FolderId sourceFolderId;
    private ItemIdWrapperList ids;
    public FolderId SourceFolderId { get; public set; }
    internal ItemIdWrapperList Ids { get; }
    internal ArchiveItemRequest(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual void Validate();
    internal virtual ArchiveItemResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    public FolderId get_SourceFolderId();
    public void set_SourceFolderId(FolderId value);
    internal ItemIdWrapperList get_Ids();
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal void WriteIdsToXml(EwsServiceXmlWriter writer);
}
public class Microsoft.Exchange.WebServices.Data.ArchiveItemResponse : ServiceResponse {
    private Item item;
    public Item Item { get; }
    private Item GetObjectInstance(ExchangeService service, string xmlElementName);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    public Item get_Item();
}
public class Microsoft.Exchange.WebServices.Data.ArchiveTag : RetentionTagBase {
    public ArchiveTag(bool isExplicit, Guid retentionId);
}
internal class Microsoft.Exchange.WebServices.Data.AsyncRequestResult : object {
    [CompilerGeneratedAttribute]
private ServiceRequestBase <ServiceRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private IEwsHttpWebRequest <WebRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private IAsyncResult <WebAsyncResult>k__BackingField;
    [CompilerGeneratedAttribute]
private object <AsyncState>k__BackingField;
    public ServiceRequestBase ServiceRequest { get; private set; }
    public IEwsHttpWebRequest WebRequest { get; private set; }
    public IAsyncResult WebAsyncResult { get; private set; }
    public object AsyncState { get; private set; }
    public WaitHandle AsyncWaitHandle { get; }
    public bool CompletedSynchronously { get; }
    public bool IsCompleted { get; }
    public AsyncRequestResult(ServiceRequestBase serviceRequest, IEwsHttpWebRequest webRequest, IAsyncResult webAsyncResult, object asyncState);
    [CompilerGeneratedAttribute]
public ServiceRequestBase get_ServiceRequest();
    [CompilerGeneratedAttribute]
private void set_ServiceRequest(ServiceRequestBase value);
    [CompilerGeneratedAttribute]
public IEwsHttpWebRequest get_WebRequest();
    [CompilerGeneratedAttribute]
private void set_WebRequest(IEwsHttpWebRequest value);
    [CompilerGeneratedAttribute]
public IAsyncResult get_WebAsyncResult();
    [CompilerGeneratedAttribute]
private void set_WebAsyncResult(IAsyncResult value);
    [CompilerGeneratedAttribute]
public sealed virtual object get_AsyncState();
    [CompilerGeneratedAttribute]
private void set_AsyncState(object value);
    public sealed virtual WaitHandle get_AsyncWaitHandle();
    public sealed virtual bool get_CompletedSynchronously();
    public sealed virtual bool get_IsCompleted();
    public static T ExtractServiceRequest(ExchangeService exchangeService, IAsyncResult asyncResult);
}
[AttributeUsageAttribute("4")]
internal class Microsoft.Exchange.WebServices.Data.AttachableAttribute : Attribute {
}
public abstract class Microsoft.Exchange.WebServices.Data.Attachment : ComplexProperty {
    private Item owner;
    private string id;
    private string name;
    private string contentType;
    private string contentId;
    private string contentLocation;
    private int size;
    private DateTime lastModifiedTime;
    private bool isInline;
    private ExchangeService service;
    public string Id { get; internal set; }
    public string Name { get; public set; }
    public string ContentType { get; public set; }
    public string ContentId { get; public set; }
    public string ContentLocation { get; public set; }
    public int Size { get; internal set; }
    public DateTime LastModifiedTime { get; internal set; }
    public bool IsInline { get; public set; }
    internal bool IsNew { get; }
    internal Item Owner { get; }
    internal ExchangeService Service { get; }
    internal Attachment(Item owner);
    internal Attachment(ExchangeService service);
    internal void ThrowIfThisIsNotNew();
    internal virtual void SetFieldValue(T& field, T value);
    public string get_Id();
    internal void set_Id(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_ContentType();
    public void set_ContentType(string value);
    public string get_ContentId();
    public void set_ContentId(string value);
    public string get_ContentLocation();
    public void set_ContentLocation(string value);
    public int get_Size();
    internal void set_Size(int value);
    public DateTime get_LastModifiedTime();
    internal void set_LastModifiedTime(DateTime value);
    public bool get_IsInline();
    public void set_IsInline(bool value);
    internal bool get_IsNew();
    internal Item get_Owner();
    internal ExchangeService get_Service();
    internal abstract virtual string GetXmlElementName();
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal Task`1<ServiceResponseCollection`1<GetAttachmentResponse>> InternalLoad(Nullable`1<BodyType> bodyType, IEnumerable`1<PropertyDefinitionBase> additionalProperties, CancellationToken token);
    internal virtual void Validate(int attachmentIndex);
    public Task`1<ServiceResponseCollection`1<GetAttachmentResponse>> Load(CancellationToken token);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.AttachmentCollection : ComplexPropertyCollection`1<Attachment> {
    private Item owner;
    private ServiceObject Microsoft.Exchange.WebServices.Data.IOwnedProperty.Owner { get; private set; }
    private sealed virtual override ServiceObject Microsoft.Exchange.WebServices.Data.IOwnedProperty.get_Owner();
    private sealed virtual override void Microsoft.Exchange.WebServices.Data.IOwnedProperty.set_Owner(ServiceObject value);
    public FileAttachment AddFileAttachment(string fileName);
    public FileAttachment AddFileAttachment(string name, string fileName);
    public FileAttachment AddFileAttachment(string name, Stream contentStream);
    public FileAttachment AddFileAttachment(string name, Byte[] content);
    public ReferenceAttachment AddReferenceAttachment(string name, string attachLongPathName);
    public ItemAttachment`1<TItem> AddItemAttachment();
    public void Clear();
    public void RemoveAt(int index);
    public bool Remove(Attachment attachment);
    internal virtual Attachment CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(Attachment complexProperty);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.AttachmentCollection/<Save>d__16")]
internal Task Save(CancellationToken token);
    internal bool HasUnprocessedChanges();
    internal virtual void ClearChangeLog();
    internal void Validate();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.AttachmentCollection/<InternalDeleteAttachments>d__20")]
private Task InternalDeleteAttachments(IEnumerable`1<Attachment> attachments, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.AttachmentCollection/<InternalCreateAttachments>d__21")]
private Task InternalCreateAttachments(string parentItemId, IEnumerable`1<Attachment> attachments, CancellationToken token);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private void <>n__0();
}
internal class Microsoft.Exchange.WebServices.Data.AttachmentsPropertyDefinition : ComplexPropertyDefinition`1<AttachmentCollection> {
    private static PropertyDefinitionFlags Exchange2010SP2PropertyDefinitionFlags;
    private static AttachmentsPropertyDefinition();
    internal virtual bool HasFlag(PropertyDefinitionFlags flag, Nullable`1<ExchangeVersion> version);
}
public class Microsoft.Exchange.WebServices.Data.Attendee : EmailAddress {
    private Nullable`1<MeetingResponseType> responseType;
    private Nullable`1<DateTime> lastResponseTime;
    public Nullable`1<MeetingResponseType> ResponseType { get; }
    public Nullable`1<DateTime> LastResponseTime { get; }
    public Attendee(string smtpAddress);
    public Attendee(string name, string smtpAddress);
    public Attendee(string name, string smtpAddress, string routingType);
    public Attendee(EmailAddress mailbox);
    public Nullable`1<MeetingResponseType> get_ResponseType();
    public Nullable`1<DateTime> get_LastResponseTime();
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
}
public class Microsoft.Exchange.WebServices.Data.AttendeeAvailability : ServiceResponse {
    private Collection`1<CalendarEvent> calendarEvents;
    private Collection`1<LegacyFreeBusyStatus> mergedFreeBusyStatus;
    private FreeBusyViewType viewType;
    private WorkingHours workingHours;
    public Collection`1<CalendarEvent> CalendarEvents { get; }
    public FreeBusyViewType ViewType { get; }
    public Collection`1<LegacyFreeBusyStatus> MergedFreeBusyStatus { get; }
    public WorkingHours WorkingHours { get; }
    internal void LoadFreeBusyViewFromXml(EwsServiceXmlReader reader, FreeBusyViewType viewType);
    public Collection`1<CalendarEvent> get_CalendarEvents();
    public FreeBusyViewType get_ViewType();
    public Collection`1<LegacyFreeBusyStatus> get_MergedFreeBusyStatus();
    public WorkingHours get_WorkingHours();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.AttendeeCollection : ComplexPropertyCollection`1<Attendee> {
    public void Add(Attendee attendee);
    public Attendee Add(string smtpAddress);
    public Attendee Add(string name, string smtpAddress);
    public void Clear();
    public void RemoveAt(int index);
    public bool Remove(Attendee attendee);
    internal virtual Attendee CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(Attendee attendee);
}
public class Microsoft.Exchange.WebServices.Data.AttendeeInfo : object {
    private string smtpAddress;
    private MeetingAttendeeType attendeeType;
    private bool excludeConflicts;
    public string SmtpAddress { get; public set; }
    public MeetingAttendeeType AttendeeType { get; public set; }
    public bool ExcludeConflicts { get; public set; }
    public AttendeeInfo(string smtpAddress, MeetingAttendeeType attendeeType, bool excludeConflicts);
    public AttendeeInfo(string smtpAddress);
    public static AttendeeInfo op_Implicit(string smtpAddress);
    internal void WriteToXml(EwsServiceXmlWriter writer);
    public string get_SmtpAddress();
    public void set_SmtpAddress(string value);
    public MeetingAttendeeType get_AttendeeType();
    public void set_AttendeeType(MeetingAttendeeType value);
    public bool get_ExcludeConflicts();
    public void set_ExcludeConflicts(bool value);
    private sealed virtual override void Microsoft.Exchange.WebServices.Data.ISelfValidate.Validate();
}
public class Microsoft.Exchange.WebServices.Data.AttributedString : ComplexProperty {
    private List`1<string> attributionList;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<string> <Attributions>k__BackingField;
    public string Value { get; public set; }
    public IList`1<string> Attributions { get; public set; }
    public AttributedString(string value);
    public AttributedString(string value, IList`1<string> attributions);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Attributions();
    [CompilerGeneratedAttribute]
public void set_Attributions(IList`1<string> value);
    public static AttributedString op_Implicit(string value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal bool LoadAttributionsFromXml(EwsServiceXmlReader reader);
}
public class Microsoft.Exchange.WebServices.Data.AttributedStringCollection : ComplexPropertyCollection`1<AttributedString> {
    private string collectionItemXmlElementName;
    internal AttributedStringCollection(string collectionItemXmlElementName);
    public void Add(AttributedString attributedString);
    public void AddRange(IEnumerable`1<AttributedString> attributedStrings);
    public AttributedString Add(string stringValue);
    public AttributedString Add(string stringValue, IList`1<string> attributions);
    public void Clear();
    public bool Remove(AttributedString attributedString);
    internal virtual AttributedString CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(AttributedString attributedString);
    internal virtual bool ShouldWriteToRequest();
}
public class Microsoft.Exchange.WebServices.Data.Attribution : ComplexProperty {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemId <SourceId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsWritable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsQuickContact>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private FolderId <FolderId>k__BackingField;
    public string Id { get; public set; }
    public ItemId SourceId { get; public set; }
    public string DisplayName { get; public set; }
    public bool IsWritable { get; public set; }
    public bool IsQuickContact { get; public set; }
    public bool IsHidden { get; public set; }
    public FolderId FolderId { get; public set; }
    public Attribution(string id, ItemId sourceId, string displayName);
    public Attribution(string id, ItemId sourceId, string displayName, bool isWritable, bool isQuickContact, bool isHidden, FolderId folderId);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public ItemId get_SourceId();
    [CompilerGeneratedAttribute]
public void set_SourceId(ItemId value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsWritable();
    [CompilerGeneratedAttribute]
public void set_IsWritable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsQuickContact();
    [CompilerGeneratedAttribute]
public void set_IsQuickContact(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsHidden();
    [CompilerGeneratedAttribute]
public void set_IsHidden(bool value);
    [CompilerGeneratedAttribute]
public FolderId get_FolderId();
    [CompilerGeneratedAttribute]
public void set_FolderId(FolderId value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
public class Microsoft.Exchange.WebServices.Data.AttributionCollection : ComplexPropertyCollection`1<Attribution> {
    private string collectionItemXmlElementName;
    internal AttributionCollection(string collectionItemXmlElementName);
    public void Add(Attribution attribution);
    public void AddRange(IEnumerable`1<Attribution> attributions);
    public void Clear();
    internal virtual Attribution CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(Attribution attribution);
    internal virtual bool ShouldWriteToRequest();
}
[FlagsAttribute]
internal enum Microsoft.Exchange.WebServices.Data.AutodiscoverEndpoints : Enum {
    public int value__;
    public static AutodiscoverEndpoints None;
    public static AutodiscoverEndpoints Legacy;
    public static AutodiscoverEndpoints Soap;
    public static AutodiscoverEndpoints WsSecurity;
    public static AutodiscoverEndpoints WSSecuritySymmetricKey;
    public static AutodiscoverEndpoints WSSecurityX509Cert;
    public static AutodiscoverEndpoints OAuth;
}
public class Microsoft.Exchange.WebServices.Data.AutodiscoverLocalException : ServiceLocalException {
    public AutodiscoverLocalException(string message);
    public AutodiscoverLocalException(string message, Exception innerException);
    protected AutodiscoverLocalException(SerializationInfo info, StreamingContext context);
}
public enum Microsoft.Exchange.WebServices.Data.AvailabilityData : Enum {
    public int value__;
    public static AvailabilityData FreeBusy;
    public static AvailabilityData Suggestions;
    public static AvailabilityData FreeBusyAndSuggestions;
}
public class Microsoft.Exchange.WebServices.Data.AvailabilityOptions : object {
    private int mergedFreeBusyInterval;
    private FreeBusyViewType requestedFreeBusyView;
    private int goodSuggestionThreshold;
    private int maximumSuggestionsPerDay;
    private int maximumNonWorkHoursSuggestionsPerDay;
    private int meetingDuration;
    private SuggestionQuality minimumSuggestionQuality;
    private TimeWindow detailedSuggestionsWindow;
    private Nullable`1<DateTime> currentMeetingTime;
    private string globalObjectId;
    public int MergedFreeBusyInterval { get; public set; }
    public FreeBusyViewType RequestedFreeBusyView { get; public set; }
    public int GoodSuggestionThreshold { get; public set; }
    public int MaximumSuggestionsPerDay { get; public set; }
    public int MaximumNonWorkHoursSuggestionsPerDay { get; public set; }
    public int MeetingDuration { get; public set; }
    public SuggestionQuality MinimumSuggestionQuality { get; public set; }
    public TimeWindow DetailedSuggestionsWindow { get; public set; }
    public Nullable`1<DateTime> CurrentMeetingTime { get; public set; }
    public string GlobalObjectId { get; public set; }
    internal void Validate(TimeSpan timeWindow);
    internal void WriteToXml(EwsServiceXmlWriter writer, GetUserAvailabilityRequest request);
    public int get_MergedFreeBusyInterval();
    public void set_MergedFreeBusyInterval(int value);
    public FreeBusyViewType get_RequestedFreeBusyView();
    public void set_RequestedFreeBusyView(FreeBusyViewType value);
    public int get_GoodSuggestionThreshold();
    public void set_GoodSuggestionThreshold(int value);
    public int get_MaximumSuggestionsPerDay();
    public void set_MaximumSuggestionsPerDay(int value);
    public int get_MaximumNonWorkHoursSuggestionsPerDay();
    public void set_MaximumNonWorkHoursSuggestionsPerDay(int value);
    public int get_MeetingDuration();
    public void set_MeetingDuration(int value);
    public SuggestionQuality get_MinimumSuggestionQuality();
    public void set_MinimumSuggestionQuality(SuggestionQuality value);
    public TimeWindow get_DetailedSuggestionsWindow();
    public void set_DetailedSuggestionsWindow(TimeWindow value);
    public Nullable`1<DateTime> get_CurrentMeetingTime();
    public void set_CurrentMeetingTime(Nullable`1<DateTime> value);
    public string get_GlobalObjectId();
    public void set_GlobalObjectId(string value);
}
public enum Microsoft.Exchange.WebServices.Data.BasePropertySet : Enum {
    public int value__;
    public static BasePropertySet IdOnly;
    public static BasePropertySet FirstClassProperties;
}
public abstract class Microsoft.Exchange.WebServices.Data.BatchServiceResponseException`1 : ServiceRemoteException {
    private ServiceResponseCollection`1<TResponse> responses;
    public ServiceResponseCollection`1<TResponse> ServiceResponses { get; }
    internal BatchServiceResponseException`1(ServiceResponseCollection`1<TResponse> serviceResponses, string message);
    internal BatchServiceResponseException`1(ServiceResponseCollection`1<TResponse> serviceResponses, string message, Exception innerException);
    protected BatchServiceResponseException`1(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public ServiceResponseCollection`1<TResponse> get_ServiceResponses();
}
public enum Microsoft.Exchange.WebServices.Data.BodyType : Enum {
    public int value__;
    public static BodyType HTML;
    public static BodyType Text;
}
internal class Microsoft.Exchange.WebServices.Data.BoolPropertyDefinition : GenericPropertyDefinition`1<bool> {
    internal BoolPropertyDefinition(string xmlElementName, string uri, ExchangeVersion version);
    internal BoolPropertyDefinition(string xmlElementName, string uri, PropertyDefinitionFlags flags, ExchangeVersion version);
    internal BoolPropertyDefinition(string xmlElementName, string uri, PropertyDefinitionFlags flags, ExchangeVersion version, bool isNullable);
    internal virtual string ToString(object value);
}
public class Microsoft.Exchange.WebServices.Data.ByteArrayArray : ComplexProperty {
    private static string ItemXmlElementName;
    private List`1<Byte[]> content;
    public Byte[][] Content { get; }
    public Byte[][] get_Content();
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
}
internal class Microsoft.Exchange.WebServices.Data.ByteArrayPropertyDefinition : TypedPropertyDefinition {
    internal bool IsNullable { get; }
    public Type Type { get; }
    internal ByteArrayPropertyDefinition(string xmlElementName, string uri, PropertyDefinitionFlags flags, ExchangeVersion version);
    internal virtual object Parse(string value);
    internal virtual string ToString(object value);
    internal virtual bool get_IsNullable();
    public virtual Type get_Type();
}
public class Microsoft.Exchange.WebServices.Data.CalendarActionResults : object {
    private Appointment appointment;
    private MeetingRequest meetingRequest;
    private MeetingResponse meetingResponse;
    private MeetingCancellation meetingCancellation;
    public Appointment Appointment { get; }
    public MeetingRequest MeetingRequest { get; }
    public MeetingResponse MeetingResponse { get; }
    public MeetingCancellation MeetingCancellation { get; }
    internal CalendarActionResults(IEnumerable`1<Item> items);
    public Appointment get_Appointment();
    public MeetingRequest get_MeetingRequest();
    public MeetingResponse get_MeetingResponse();
    public MeetingCancellation get_MeetingCancellation();
}
public class Microsoft.Exchange.WebServices.Data.CalendarEvent : ComplexProperty {
    private DateTime startTime;
    private DateTime endTime;
    private LegacyFreeBusyStatus freeBusyStatus;
    private CalendarEventDetails details;
    public DateTime StartTime { get; }
    public DateTime EndTime { get; }
    public LegacyFreeBusyStatus FreeBusyStatus { get; }
    public CalendarEventDetails Details { get; }
    public DateTime get_StartTime();
    public DateTime get_EndTime();
    public LegacyFreeBusyStatus get_FreeBusyStatus();
    public CalendarEventDetails get_Details();
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
public class Microsoft.Exchange.WebServices.Data.CalendarEventDetails : ComplexProperty {
    private string storeId;
    private string subject;
    private string location;
    private bool isMeeting;
    private bool isRecurring;
    private bool isException;
    private bool isReminderSet;
    private bool isPrivate;
    public string StoreId { get; }
    public string Subject { get; }
    public string Location { get; }
    public bool IsMeeting { get; }
    public bool IsRecurring { get; }
    public bool IsException { get; }
    public bool IsReminderSet { get; }
    public bool IsPrivate { get; }
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    public string get_StoreId();
    public string get_Subject();
    public string get_Location();
    public bool get_IsMeeting();
    public bool get_IsRecurring();
    public bool get_IsException();
    public bool get_IsReminderSet();
    public bool get_IsPrivate();
}
[ServiceObjectDefinitionAttribute("CalendarFolder")]
public class Microsoft.Exchange.WebServices.Data.CalendarFolder : Folder {
    public CalendarFolder(ExchangeService service);
    public static Task`1<CalendarFolder> Bind(ExchangeService service, FolderId id, PropertySet propertySet, CancellationToken token);
    public static Task`1<CalendarFolder> Bind(ExchangeService service, FolderId id, CancellationToken token);
    public static Task`1<CalendarFolder> Bind(ExchangeService service, WellKnownFolderName name, PropertySet propertySet, CancellationToken token);
    public static Task`1<CalendarFolder> Bind(ExchangeService service, WellKnownFolderName name, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.CalendarFolder/<FindAppointments>d__5")]
public Task`1<FindItemsResults`1<Appointment>> FindAppointments(CalendarView view, CancellationToken token);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.Exchange.WebServices.Data.CalendarResponseMessage`1 : CalendarResponseMessageBase`1<TMessage> {
    public MessageBody Body { get; public set; }
    public EmailAddressCollection ToRecipients { get; }
    public EmailAddressCollection CcRecipients { get; }
    public EmailAddressCollection BccRecipients { get; }
    internal string ItemClass { get; internal set; }
    public Sensitivity Sensitivity { get; public set; }
    public AttachmentCollection Attachments { get; }
    internal InternetMessageHeaderCollection InternetMessageHeaders { get; }
    public EmailAddress Sender { get; public set; }
    internal CalendarResponseMessage`1(Item referenceItem);
    internal virtual ServiceObjectSchema GetSchema();
    public MessageBody get_Body();
    public void set_Body(MessageBody value);
    public EmailAddressCollection get_ToRecipients();
    public EmailAddressCollection get_CcRecipients();
    public EmailAddressCollection get_BccRecipients();
    internal string get_ItemClass();
    internal void set_ItemClass(string value);
    public Sensitivity get_Sensitivity();
    public void set_Sensitivity(Sensitivity value);
    public AttachmentCollection get_Attachments();
    internal InternetMessageHeaderCollection get_InternetMessageHeaders();
    public EmailAddress get_Sender();
    public void set_Sender(EmailAddress value);
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.Exchange.WebServices.Data.CalendarResponseMessageBase`1 : ResponseObject`1<TMessage> {
    internal CalendarResponseMessageBase`1(Item referenceItem);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.CalendarResponseMessageBase`1/<Save>d__1")]
public Task`1<CalendarActionResults> Save(FolderId destinationFolderId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.CalendarResponseMessageBase`1/<Save>d__2")]
public Task`1<CalendarActionResults> Save(WellKnownFolderName destinationFolderName, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.CalendarResponseMessageBase`1/<Save>d__3")]
public Task`1<CalendarActionResults> Save(CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.CalendarResponseMessageBase`1/<Send>d__4")]
public Task`1<CalendarActionResults> Send(CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.CalendarResponseMessageBase`1/<SendAndSaveCopy>d__5")]
public Task`1<CalendarActionResults> SendAndSaveCopy(FolderId destinationFolderId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.CalendarResponseMessageBase`1/<SendAndSaveCopy>d__6")]
public Task`1<CalendarActionResults> SendAndSaveCopy(WellKnownFolderName destinationFolderName, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.CalendarResponseMessageBase`1/<SendAndSaveCopy>d__7")]
public Task`1<CalendarActionResults> SendAndSaveCopy(CancellationToken token);
}
internal class Microsoft.Exchange.WebServices.Data.CalendarResponseObjectSchema : ServiceObjectSchema {
    internal static CalendarResponseObjectSchema Instance;
    private static CalendarResponseObjectSchema();
    internal virtual void RegisterProperties();
}
public class Microsoft.Exchange.WebServices.Data.CalendarView : ViewBase {
    private ItemTraversal traversal;
    private Nullable`1<int> maxItemsReturned;
    private DateTime startDate;
    private DateTime endDate;
    public DateTime StartDate { get; public set; }
    public DateTime EndDate { get; public set; }
    public Nullable`1<int> MaxItemsReturned { get; public set; }
    public ItemTraversal Traversal { get; public set; }
    public CalendarView(DateTime startDate, DateTime endDate);
    public CalendarView(DateTime startDate, DateTime endDate, int maxItemsReturned);
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void InternalWriteSearchSettingsToXml(EwsServiceXmlWriter writer, Grouping groupBy);
    internal virtual void WriteOrderByToXml(EwsServiceXmlWriter writer);
    internal virtual ServiceObjectType GetServiceObjectType();
    internal virtual void InternalValidate(ServiceRequestBase request);
    internal virtual void InternalWriteViewToXml(EwsServiceXmlWriter writer);
    internal virtual string GetViewXmlElementName();
    internal virtual Nullable`1<int> GetMaxEntriesReturned();
    public DateTime get_StartDate();
    public void set_StartDate(DateTime value);
    public DateTime get_EndDate();
    public void set_EndDate(DateTime value);
    public Nullable`1<int> get_MaxItemsReturned();
    public void set_MaxItemsReturned(Nullable`1<int> value);
    public ItemTraversal get_Traversal();
    public void set_Traversal(ItemTraversal value);
}
[ServiceObjectDefinitionAttribute("CancelCalendarItem")]
public class Microsoft.Exchange.WebServices.Data.CancelMeetingMessage : CalendarResponseMessageBase`1<MeetingCancellation> {
    public MessageBody Body { get; public set; }
    internal CancelMeetingMessage(Item referenceItem);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal virtual ServiceObjectSchema GetSchema();
    public MessageBody get_Body();
    public void set_Body(MessageBody value);
}
internal class Microsoft.Exchange.WebServices.Data.CancelMeetingMessageSchema : ServiceObjectSchema {
    public static PropertyDefinition Body;
    internal static CancelMeetingMessageSchema Instance;
    private static CancelMeetingMessageSchema();
    internal virtual void RegisterProperties();
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.Exchange.WebServices.Data.Change : object {
    private ChangeType changeType;
    private ServiceObject serviceObject;
    private ServiceId id;
    public ChangeType ChangeType { get; internal set; }
    internal ServiceObject ServiceObject { get; internal set; }
    internal ServiceId Id { get; internal set; }
    internal abstract virtual ServiceId CreateId();
    public ChangeType get_ChangeType();
    internal void set_ChangeType(ChangeType value);
    internal ServiceObject get_ServiceObject();
    internal void set_ServiceObject(ServiceObject value);
    internal ServiceId get_Id();
    internal void set_Id(ServiceId value);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Exchange.WebServices.Data.ChangeCollection`1 : object {
    private List`1<TChange> changes;
    private string syncState;
    private bool moreChangesAvailable;
    public int Count { get; }
    public TChange Item { get; }
    public string SyncState { get; internal set; }
    public bool MoreChangesAvailable { get; internal set; }
    internal void Add(TChange change);
    public int get_Count();
    public TChange get_Item(int index);
    public string get_SyncState();
    internal void set_SyncState(string value);
    public bool get_MoreChangesAvailable();
    internal void set_MoreChangesAvailable(bool value);
    public sealed virtual IEnumerator`1<TChange> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.Exchange.WebServices.Data.ChangeHighlights : ComplexProperty {
    private bool hasLocationChanged;
    private string location;
    private bool hasStartTimeChanged;
    private DateTime start;
    private bool hasEndTimeChanged;
    private DateTime end;
    public bool HasLocationChanged { get; }
    public string Location { get; }
    public bool HasStartTimeChanged { get; }
    public DateTime Start { get; }
    public bool HasEndTimeChanged { get; }
    public DateTime End { get; }
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    public bool get_HasLocationChanged();
    public string get_Location();
    public bool get_HasStartTimeChanged();
    public DateTime get_Start();
    public bool get_HasEndTimeChanged();
    public DateTime get_End();
}
public enum Microsoft.Exchange.WebServices.Data.ChangeType : Enum {
    public int value__;
    public static ChangeType Create;
    public static ChangeType Update;
    public static ChangeType Delete;
    public static ChangeType ReadFlagChange;
}
public class Microsoft.Exchange.WebServices.Data.ClientAccessTokenRequest : ComplexProperty {
    private string id;
    private ClientAccessTokenType tokenType;
    private string scope;
    public string Id { get; }
    public ClientAccessTokenType TokenType { get; }
    public string Scope { get; }
    public ClientAccessTokenRequest(string id, ClientAccessTokenType tokenType);
    public ClientAccessTokenRequest(string id, ClientAccessTokenType tokenType, string scope);
    public string get_Id();
    public ClientAccessTokenType get_TokenType();
    public string get_Scope();
}
public enum Microsoft.Exchange.WebServices.Data.ClientAccessTokenType : Enum {
    public int value__;
    public static ClientAccessTokenType CallerIdentity;
    public static ClientAccessTokenType ExtensionCallback;
    public static ClientAccessTokenType ScopedToken;
}
public class Microsoft.Exchange.WebServices.Data.ClientApp : ComplexProperty {
    [CompilerGeneratedAttribute]
private XmlDocument <Manifest>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientAppMetadata <Metadata>k__BackingField;
    public XmlDocument Manifest { get; internal set; }
    public ClientAppMetadata Metadata { get; internal set; }
    [CompilerGeneratedAttribute]
public XmlDocument get_Manifest();
    [CompilerGeneratedAttribute]
internal void set_Manifest(XmlDocument value);
    [CompilerGeneratedAttribute]
public ClientAppMetadata get_Metadata();
    [CompilerGeneratedAttribute]
internal void set_Metadata(ClientAppMetadata value);
    internal static SafeXmlDocument ReadToXmlDocument(EwsServiceXmlReader reader);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
public class Microsoft.Exchange.WebServices.Data.ClientAppMetadata : ComplexProperty {
    [CompilerGeneratedAttribute]
private string <EndNodeUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ActionUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppStatus>k__BackingField;
    public string EndNodeUrl { get; private set; }
    public string ActionUrl { get; private set; }
    public string AppStatus { get; private set; }
    [CompilerGeneratedAttribute]
public string get_EndNodeUrl();
    [CompilerGeneratedAttribute]
private void set_EndNodeUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ActionUrl();
    [CompilerGeneratedAttribute]
private void set_ActionUrl(string value);
    [CompilerGeneratedAttribute]
public string get_AppStatus();
    [CompilerGeneratedAttribute]
private void set_AppStatus(string value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
public class Microsoft.Exchange.WebServices.Data.ClientCertificateCredentials : ExchangeCredentials {
    private X509CertificateCollection clientCertificates;
    public X509CertificateCollection ClientCertificates { get; }
    public ClientCertificateCredentials(X509CertificateCollection clientCertificates);
    internal virtual void PrepareWebRequest(IEwsHttpWebRequest request);
    public X509CertificateCollection get_ClientCertificates();
}
public class Microsoft.Exchange.WebServices.Data.ClientExtension : ComplexProperty {
    [CompilerGeneratedAttribute]
private ExtensionType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtensionInstallScope <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private Stream <ManifestStream>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MarketplaceAssetID>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MarketplaceContentMarket>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AppStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Etoken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InstalledDateTime>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMandatory>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabledByDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientExtensionProvidedTo <ProvidedTo>k__BackingField;
    [CompilerGeneratedAttribute]
private StringList <SpecificUsers>k__BackingField;
    public ExtensionType Type { get; public set; }
    public ExtensionInstallScope Scope { get; public set; }
    public Stream ManifestStream { get; public set; }
    public string MarketplaceAssetID { get; public set; }
    public string MarketplaceContentMarket { get; public set; }
    public string AppStatus { get; public set; }
    public string Etoken { get; public set; }
    public string InstalledDateTime { get; public set; }
    public bool IsAvailable { get; public set; }
    public bool IsMandatory { get; public set; }
    public bool IsEnabledByDefault { get; public set; }
    public ClientExtensionProvidedTo ProvidedTo { get; public set; }
    public StringList SpecificUsers { get; public set; }
    public ClientExtension(ExtensionType type, ExtensionInstallScope scope, Stream manifestStream, string marketplaceAssetID, string marketplaceContentMarket, bool isAvailable, bool isMandatory, bool isEnabledByDefault, ClientExtensionProvidedTo providedTo, StringList specificUsers, string appStatus, string etoken);
    [CompilerGeneratedAttribute]
public ExtensionType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ExtensionType value);
    [CompilerGeneratedAttribute]
public ExtensionInstallScope get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(ExtensionInstallScope value);
    [CompilerGeneratedAttribute]
public Stream get_ManifestStream();
    [CompilerGeneratedAttribute]
public void set_ManifestStream(Stream value);
    [CompilerGeneratedAttribute]
public string get_MarketplaceAssetID();
    [CompilerGeneratedAttribute]
public void set_MarketplaceAssetID(string value);
    [CompilerGeneratedAttribute]
public string get_MarketplaceContentMarket();
    [CompilerGeneratedAttribute]
public void set_MarketplaceContentMarket(string value);
    [CompilerGeneratedAttribute]
public string get_AppStatus();
    [CompilerGeneratedAttribute]
public void set_AppStatus(string value);
    [CompilerGeneratedAttribute]
public string get_Etoken();
    [CompilerGeneratedAttribute]
public void set_Etoken(string value);
    [CompilerGeneratedAttribute]
public string get_InstalledDateTime();
    [CompilerGeneratedAttribute]
public void set_InstalledDateTime(string value);
    [CompilerGeneratedAttribute]
public bool get_IsAvailable();
    [CompilerGeneratedAttribute]
public void set_IsAvailable(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsMandatory();
    [CompilerGeneratedAttribute]
public void set_IsMandatory(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsEnabledByDefault();
    [CompilerGeneratedAttribute]
public void set_IsEnabledByDefault(bool value);
    [CompilerGeneratedAttribute]
public ClientExtensionProvidedTo get_ProvidedTo();
    [CompilerGeneratedAttribute]
public void set_ProvidedTo(ClientExtensionProvidedTo value);
    [CompilerGeneratedAttribute]
public StringList get_SpecificUsers();
    [CompilerGeneratedAttribute]
public void set_SpecificUsers(StringList value);
    internal virtual void ReadAttributesFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
}
public enum Microsoft.Exchange.WebServices.Data.ClientExtensionProvidedTo : Enum {
    public int value__;
    public static ClientExtensionProvidedTo Everyone;
    public static ClientExtensionProvidedTo SpecificUsers;
}
public class Microsoft.Exchange.WebServices.Data.CompanyInsightValue : InsightValue {
    private string name;
    private string satoriId;
    private string description;
    private string descriptionAttribution;
    private string imageUrl;
    private string imageUrlAttribution;
    private string yearFound;
    private string financeSymbol;
    private string websiteUrl;
    public string Name { get; public set; }
    public string SatoriId { get; public set; }
    public string Description { get; public set; }
    public string DescriptionAttribution { get; public set; }
    public string ImageUrl { get; public set; }
    public string ImageUrlAttribution { get; public set; }
    public string YearFound { get; public set; }
    public string FinanceSymbol { get; public set; }
    public string WebsiteUrl { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_SatoriId();
    public void set_SatoriId(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_DescriptionAttribution();
    public void set_DescriptionAttribution(string value);
    public string get_ImageUrl();
    public void set_ImageUrl(string value);
    public string get_ImageUrlAttribution();
    public void set_ImageUrlAttribution(string value);
    public string get_YearFound();
    public void set_YearFound(string value);
    public string get_FinanceSymbol();
    public void set_FinanceSymbol(string value);
    public string get_WebsiteUrl();
    public void set_WebsiteUrl(string value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
public class Microsoft.Exchange.WebServices.Data.CompanyInsightValueCollection : ComplexPropertyCollection`1<CompanyInsightValue> {
    private string collectionItemXmlElementName;
    internal CompanyInsightValueCollection(string collectionItemXmlElementName);
    internal virtual CompanyInsightValue CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(CompanyInsightValue insight);
    internal virtual bool ShouldWriteToRequest();
}
public enum Microsoft.Exchange.WebServices.Data.ComparisonMode : Enum {
    public int value__;
    public static ComparisonMode Exact;
    public static ComparisonMode IgnoreCase;
    public static ComparisonMode IgnoreNonSpacingCharacters;
    public static ComparisonMode IgnoreCaseAndNonSpacingCharacters;
}
public class Microsoft.Exchange.WebServices.Data.CompleteName : ComplexProperty {
    private string title;
    private string givenName;
    private string middleName;
    private string surname;
    private string suffix;
    private string initials;
    private string fullName;
    private string nickname;
    private string yomiGivenName;
    private string yomiSurname;
    public string Title { get; }
    public string GivenName { get; }
    public string MiddleName { get; }
    public string Surname { get; }
    public string Suffix { get; }
    public string Initials { get; }
    public string FullName { get; }
    public string NickName { get; }
    public string YomiGivenName { get; }
    public string YomiSurname { get; }
    public string get_Title();
    public string get_GivenName();
    public string get_MiddleName();
    public string get_Surname();
    public string get_Suffix();
    public string get_Initials();
    public string get_FullName();
    public string get_NickName();
    public string get_YomiGivenName();
    public string get_YomiSurname();
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.Exchange.WebServices.Data.ComplexProperty : object {
    private XmlNamespace xmlNamespace;
    [CompilerGeneratedAttribute]
private ComplexPropertyChangedDelegate OnChange;
    internal XmlNamespace Namespace { get; internal set; }
    internal XmlNamespace get_Namespace();
    internal void set_Namespace(XmlNamespace value);
    internal virtual void Changed();
    internal virtual void SetFieldValue(T& field, T value);
    internal virtual void ClearChangeLog();
    internal virtual void ReadAttributesFromXml(EwsServiceXmlReader reader);
    internal virtual void ReadTextValueFromXml(EwsServiceXmlReader reader);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual bool TryReadElementFromXmlToPatch(EwsServiceXmlReader reader);
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual void LoadFromXml(EwsServiceXmlReader reader, XmlNamespace xmlNamespace, string xmlElementName);
    internal virtual void UpdateFromXml(EwsServiceXmlReader reader, XmlNamespace xmlNamespace, string xmlElementName);
    private void InternalLoadFromXml(EwsServiceXmlReader reader, XmlNamespace xmlNamespace, string xmlElementName, Func`2<EwsServiceXmlReader, bool> readAction);
    internal virtual void LoadFromXml(EwsServiceXmlReader reader, string xmlElementName);
    internal virtual void UpdateFromXml(EwsServiceXmlReader reader, string xmlElementName);
    internal virtual void WriteToXml(EwsServiceXmlWriter writer, XmlNamespace xmlNamespace, string xmlElementName);
    internal virtual void WriteToXml(EwsServiceXmlWriter writer, string xmlElementName);
    [CompilerGeneratedAttribute]
internal void add_OnChange(ComplexPropertyChangedDelegate value);
    [CompilerGeneratedAttribute]
internal void remove_OnChange(ComplexPropertyChangedDelegate value);
    private sealed virtual override void Microsoft.Exchange.WebServices.Data.ISelfValidate.Validate();
    internal virtual void InternalValidate();
}
internal class Microsoft.Exchange.WebServices.Data.ComplexPropertyChangedDelegate : MulticastDelegate {
    public ComplexPropertyChangedDelegate(object object, IntPtr method);
    public virtual void Invoke(ComplexProperty complexProperty);
    public virtual IAsyncResult BeginInvoke(ComplexProperty complexProperty, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.Exchange.WebServices.Data.ComplexPropertyCollection`1 : ComplexProperty {
    private List`1<TComplexProperty> items;
    private List`1<TComplexProperty> addedItems;
    private List`1<TComplexProperty> modifiedItems;
    private List`1<TComplexProperty> removedItems;
    internal List`1<TComplexProperty> Items { get; }
    internal List`1<TComplexProperty> AddedItems { get; }
    internal List`1<TComplexProperty> ModifiedItems { get; }
    internal List`1<TComplexProperty> RemovedItems { get; }
    public int Count { get; }
    public TComplexProperty Item { get; }
    internal abstract virtual TComplexProperty CreateComplexProperty(string xmlElementName);
    internal abstract virtual string GetCollectionItemXmlElementName(TComplexProperty complexProperty);
    internal void ItemChanged(ComplexProperty complexProperty);
    internal virtual void LoadFromXml(EwsServiceXmlReader reader, string localElementName);
    internal virtual void LoadFromXml(EwsServiceXmlReader reader, XmlNamespace xmlNamespace, string localElementName);
    internal virtual void UpdateFromXml(EwsServiceXmlReader reader, XmlNamespace xmlNamespace, string xmlElementName);
    internal virtual void WriteToXml(EwsServiceXmlWriter writer, XmlNamespace xmlNamespace, string xmlElementName);
    internal virtual bool ShouldWriteToRequest();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual void ClearChangeLog();
    internal void RemoveFromChangeLog(TComplexProperty complexProperty);
    internal List`1<TComplexProperty> get_Items();
    internal List`1<TComplexProperty> get_AddedItems();
    internal List`1<TComplexProperty> get_ModifiedItems();
    internal List`1<TComplexProperty> get_RemovedItems();
    internal void InternalAdd(TComplexProperty complexProperty);
    private void InternalAdd(TComplexProperty complexProperty, bool loading);
    internal void InternalClear();
    internal void InternalRemoveAt(int index);
    internal bool InternalRemove(TComplexProperty complexProperty);
    public bool Contains(TComplexProperty complexProperty);
    public int IndexOf(TComplexProperty complexProperty);
    public int get_Count();
    public TComplexProperty get_Item(int index);
    public sealed virtual IEnumerator`1<TComplexProperty> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override bool Microsoft.Exchange.WebServices.Data.ICustomUpdateSerializer.WriteSetUpdateToXml(EwsServiceXmlWriter writer, ServiceObject ewsObject, PropertyDefinition propertyDefinition);
    private sealed virtual override bool Microsoft.Exchange.WebServices.Data.ICustomUpdateSerializer.WriteDeleteUpdateToXml(EwsServiceXmlWriter writer, ServiceObject ewsObject);
}
internal class Microsoft.Exchange.WebServices.Data.ComplexPropertyDefinition`1 : ComplexPropertyDefinitionBase {
    private CreateComplexPropertyDelegate`1<TComplexProperty> propertyCreationDelegate;
    public Type Type { get; }
    internal ComplexPropertyDefinition`1(string xmlElementName, PropertyDefinitionFlags flags, ExchangeVersion version, CreateComplexPropertyDelegate`1<TComplexProperty> propertyCreationDelegate);
    internal ComplexPropertyDefinition`1(string xmlElementName, string uri, ExchangeVersion version, CreateComplexPropertyDelegate`1<TComplexProperty> propertyCreationDelegate);
    internal ComplexPropertyDefinition`1(string xmlElementName, string uri, PropertyDefinitionFlags flags, ExchangeVersion version, CreateComplexPropertyDelegate`1<TComplexProperty> propertyCreationDelegate);
    internal virtual ComplexProperty CreatePropertyInstance(ServiceObject owner);
    public virtual Type get_Type();
}
internal abstract class Microsoft.Exchange.WebServices.Data.ComplexPropertyDefinitionBase : PropertyDefinition {
    internal ComplexPropertyDefinitionBase(string xmlElementName, PropertyDefinitionFlags flags, ExchangeVersion version);
    internal ComplexPropertyDefinitionBase(string xmlElementName, string uri, ExchangeVersion version);
    internal ComplexPropertyDefinitionBase(string xmlElementName, string uri, PropertyDefinitionFlags flags, ExchangeVersion version);
    internal abstract virtual ComplexProperty CreatePropertyInstance(ServiceObject owner);
    internal virtual void InternalLoadFromXml(EwsServiceXmlReader reader, PropertyBag propertyBag);
    private bool GetPropertyInstance(PropertyBag propertyBag, Object& complexProperty);
    internal sealed virtual void LoadPropertyValueFromXml(EwsServiceXmlReader reader, PropertyBag propertyBag);
    internal virtual void WritePropertyValueToXml(EwsServiceXmlWriter writer, PropertyBag propertyBag, bool isUpdateOperation);
}
public class Microsoft.Exchange.WebServices.Data.ComputedInsightValue : InsightValue {
    [CompilerGeneratedAttribute]
private ComputedInsightValuePropertyCollection <Properties>k__BackingField;
    public ComputedInsightValuePropertyCollection Properties { get; internal set; }
    [CompilerGeneratedAttribute]
public ComputedInsightValuePropertyCollection get_Properties();
    [CompilerGeneratedAttribute]
internal void set_Properties(ComputedInsightValuePropertyCollection value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
public class Microsoft.Exchange.WebServices.Data.ComputedInsightValueProperty : ComplexProperty {
    private string key;
    private string value;
    public string Key { get; public set; }
    public string Value { get; public set; }
    public string get_Key();
    public void set_Key(string value);
    public string get_Value();
    public void set_Value(string value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
public class Microsoft.Exchange.WebServices.Data.ComputedInsightValuePropertyCollection : ComplexPropertyCollection`1<ComputedInsightValueProperty> {
    internal ComputedInsightValuePropertyCollection(IEnumerable`1<ComputedInsightValueProperty> collection);
    internal virtual ComputedInsightValueProperty CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(ComputedInsightValueProperty complexProperty);
}
public class Microsoft.Exchange.WebServices.Data.Conflict : ComplexProperty {
    private ConflictType conflictType;
    private int numberOfMembers;
    private int numberOfMembersAvailable;
    private int numberOfMembersWithConflict;
    private int numberOfMembersWithNoData;
    private LegacyFreeBusyStatus freeBusyStatus;
    public ConflictType ConflictType { get; }
    public int NumberOfMembers { get; }
    public int NumberOfMembersAvailable { get; }
    public int NumberOfMembersWithConflict { get; }
    public int NumberOfMembersWithNoData { get; }
    public LegacyFreeBusyStatus FreeBusyStatus { get; }
    internal Conflict(ConflictType conflictType);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    public ConflictType get_ConflictType();
    public int get_NumberOfMembers();
    public int get_NumberOfMembersAvailable();
    public int get_NumberOfMembersWithConflict();
    public int get_NumberOfMembersWithNoData();
    public LegacyFreeBusyStatus get_FreeBusyStatus();
}
public enum Microsoft.Exchange.WebServices.Data.ConflictResolutionMode : Enum {
    public int value__;
    public static ConflictResolutionMode NeverOverwrite;
    public static ConflictResolutionMode AutoResolve;
    public static ConflictResolutionMode AlwaysOverwrite;
}
public enum Microsoft.Exchange.WebServices.Data.ConflictType : Enum {
    public int value__;
    public static ConflictType IndividualAttendeeConflict;
    public static ConflictType GroupConflict;
    public static ConflictType GroupTooBigConflict;
    public static ConflictType UnknownAttendeeConflict;
}
public enum Microsoft.Exchange.WebServices.Data.ConnectingIdType : Enum {
    public int value__;
    public static ConnectingIdType PrincipalName;
    public static ConnectingIdType SID;
    public static ConnectingIdType SmtpAddress;
}
public enum Microsoft.Exchange.WebServices.Data.ConnectionFailureCause : Enum {
    public int value__;
    public static ConnectionFailureCause None;
    public static ConnectionFailureCause UserBusy;
    public static ConnectionFailureCause NoAnswer;
    public static ConnectionFailureCause Unavailable;
    public static ConnectionFailureCause Other;
}
[AttachableAttribute]
[ServiceObjectDefinitionAttribute("Contact")]
public class Microsoft.Exchange.WebServices.Data.Contact : Item {
    private static string ContactPictureName;
    public string FileAs { get; public set; }
    public FileAsMapping FileAsMapping { get; public set; }
    public string DisplayName { get; public set; }
    public string GivenName { get; public set; }
    public string Initials { get; public set; }
    public string MiddleName { get; public set; }
    public string NickName { get; public set; }
    public CompleteName CompleteName { get; }
    public string CompanyName { get; public set; }
    public EmailAddressDictionary EmailAddresses { get; }
    public PhysicalAddressDictionary PhysicalAddresses { get; }
    public PhoneNumberDictionary PhoneNumbers { get; }
    public string AssistantName { get; public set; }
    public Nullable`1<DateTime> Birthday { get; public set; }
    public string BusinessHomePage { get; public set; }
    public StringList Children { get; public set; }
    public StringList Companies { get; public set; }
    public Nullable`1<ContactSource> ContactSource { get; }
    public string Department { get; public set; }
    public string Generation { get; public set; }
    public ImAddressDictionary ImAddresses { get; }
    public string JobTitle { get; public set; }
    public string Manager { get; public set; }
    public string Mileage { get; public set; }
    public string OfficeLocation { get; public set; }
    public Nullable`1<PhysicalAddressIndex> PostalAddressIndex { get; public set; }
    public string Profession { get; public set; }
    public string SpouseName { get; public set; }
    public string Surname { get; public set; }
    public Nullable`1<DateTime> WeddingAnniversary { get; public set; }
    public bool HasPicture { get; }
    public string PhoneticFullName { get; }
    public string PhoneticFirstName { get; }
    public string PhoneticLastName { get; }
    public string Alias { get; }
    public string Notes { get; }
    public Byte[] DirectoryPhoto { get; }
    public Byte[][] UserSMIMECertificate { get; }
    public Byte[][] MSExchangeCertificate { get; }
    public string DirectoryId { get; }
    public EmailAddress ManagerMailbox { get; }
    public EmailAddressCollection DirectReports { get; }
    public Contact(ExchangeService service);
    internal Contact(ItemAttachment parentAttachment);
    public static Task`1<Contact> Bind(ExchangeService service, ItemId id, PropertySet propertySet, CancellationToken token);
    public static Task`1<Contact> Bind(ExchangeService service, ItemId id);
    internal virtual ServiceObjectSchema GetSchema();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public void SetContactPicture(Byte[] content);
    public void SetContactPicture(Stream contentStream);
    public void SetContactPicture(string fileName);
    public FileAttachment GetContactPictureAttachment();
    private void InternalRemoveContactPicture();
    public void RemoveContactPicture();
    internal virtual void Validate();
    public string get_FileAs();
    public void set_FileAs(string value);
    public FileAsMapping get_FileAsMapping();
    public void set_FileAsMapping(FileAsMapping value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_GivenName();
    public void set_GivenName(string value);
    public string get_Initials();
    public void set_Initials(string value);
    public string get_MiddleName();
    public void set_MiddleName(string value);
    public string get_NickName();
    public void set_NickName(string value);
    public CompleteName get_CompleteName();
    public string get_CompanyName();
    public void set_CompanyName(string value);
    public EmailAddressDictionary get_EmailAddresses();
    public PhysicalAddressDictionary get_PhysicalAddresses();
    public PhoneNumberDictionary get_PhoneNumbers();
    public string get_AssistantName();
    public void set_AssistantName(string value);
    public Nullable`1<DateTime> get_Birthday();
    public void set_Birthday(Nullable`1<DateTime> value);
    public string get_BusinessHomePage();
    public void set_BusinessHomePage(string value);
    public StringList get_Children();
    public void set_Children(StringList value);
    public StringList get_Companies();
    public void set_Companies(StringList value);
    public Nullable`1<ContactSource> get_ContactSource();
    public string get_Department();
    public void set_Department(string value);
    public string get_Generation();
    public void set_Generation(string value);
    public ImAddressDictionary get_ImAddresses();
    public string get_JobTitle();
    public void set_JobTitle(string value);
    public string get_Manager();
    public void set_Manager(string value);
    public string get_Mileage();
    public void set_Mileage(string value);
    public string get_OfficeLocation();
    public void set_OfficeLocation(string value);
    public Nullable`1<PhysicalAddressIndex> get_PostalAddressIndex();
    public void set_PostalAddressIndex(Nullable`1<PhysicalAddressIndex> value);
    public string get_Profession();
    public void set_Profession(string value);
    public string get_SpouseName();
    public void set_SpouseName(string value);
    public string get_Surname();
    public void set_Surname(string value);
    public Nullable`1<DateTime> get_WeddingAnniversary();
    public void set_WeddingAnniversary(Nullable`1<DateTime> value);
    public bool get_HasPicture();
    public string get_PhoneticFullName();
    public string get_PhoneticFirstName();
    public string get_PhoneticLastName();
    public string get_Alias();
    public string get_Notes();
    public Byte[] get_DirectoryPhoto();
    public Byte[][] get_UserSMIMECertificate();
    public Byte[][] get_MSExchangeCertificate();
    public string get_DirectoryId();
    public EmailAddress get_ManagerMailbox();
    public EmailAddressCollection get_DirectReports();
}
public class Microsoft.Exchange.WebServices.Data.ContactEntity : ExtractedEntity {
    [CompilerGeneratedAttribute]
private string <PersonName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BusinessName>k__BackingField;
    [CompilerGeneratedAttribute]
private ContactPhoneEntityCollection <PhoneNumbers>k__BackingField;
    [CompilerGeneratedAttribute]
private StringList <Urls>k__BackingField;
    [CompilerGeneratedAttribute]
private StringList <EmailAddresses>k__BackingField;
    [CompilerGeneratedAttribute]
private StringList <Addresses>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContactString>k__BackingField;
    public string PersonName { get; internal set; }
    public string BusinessName { get; internal set; }
    public ContactPhoneEntityCollection PhoneNumbers { get; internal set; }
    public StringList Urls { get; internal set; }
    public StringList EmailAddresses { get; internal set; }
    public StringList Addresses { get; internal set; }
    public string ContactString { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_PersonName();
    [CompilerGeneratedAttribute]
internal void set_PersonName(string value);
    [CompilerGeneratedAttribute]
public string get_BusinessName();
    [CompilerGeneratedAttribute]
internal void set_BusinessName(string value);
    [CompilerGeneratedAttribute]
public ContactPhoneEntityCollection get_PhoneNumbers();
    [CompilerGeneratedAttribute]
internal void set_PhoneNumbers(ContactPhoneEntityCollection value);
    [CompilerGeneratedAttribute]
public StringList get_Urls();
    [CompilerGeneratedAttribute]
internal void set_Urls(StringList value);
    [CompilerGeneratedAttribute]
public StringList get_EmailAddresses();
    [CompilerGeneratedAttribute]
internal void set_EmailAddresses(StringList value);
    [CompilerGeneratedAttribute]
public StringList get_Addresses();
    [CompilerGeneratedAttribute]
internal void set_Addresses(StringList value);
    [CompilerGeneratedAttribute]
public string get_ContactString();
    [CompilerGeneratedAttribute]
internal void set_ContactString(string value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.ContactEntityCollection : ComplexPropertyCollection`1<ContactEntity> {
    internal ContactEntityCollection(IEnumerable`1<ContactEntity> collection);
    internal virtual ContactEntity CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(ContactEntity complexProperty);
}
[ServiceObjectDefinitionAttribute("DistributionList")]
public class Microsoft.Exchange.WebServices.Data.ContactGroup : Item {
    [RequiredServerVersionAttribute("1")]
public string FileAs { get; }
    public string DisplayName { get; public set; }
    [RequiredServerVersionAttribute("1")]
public GroupMemberCollection Members { get; }
    public ContactGroup(ExchangeService service);
    internal ContactGroup(ItemAttachment parentAttachment);
    public string get_FileAs();
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public GroupMemberCollection get_Members();
    public static Task`1<ContactGroup> Bind(ExchangeService service, ItemId id, PropertySet propertySet, CancellationToken token);
    public static Task`1<ContactGroup> Bind(ExchangeService service, ItemId id);
    internal virtual ServiceObjectSchema GetSchema();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal virtual void SetSubject(string subject);
}
[SchemaAttribute]
public class Microsoft.Exchange.WebServices.Data.ContactGroupSchema : ItemSchema {
    public static PropertyDefinition DisplayName;
    public static PropertyDefinition FileAs;
    public static PropertyDefinition Members;
    internal static ContactGroupSchema Instance;
    private static ContactGroupSchema();
    internal virtual void RegisterProperties();
}
public class Microsoft.Exchange.WebServices.Data.ContactPhoneEntity : ComplexProperty {
    [CompilerGeneratedAttribute]
private string <OriginalPhoneString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PhoneString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string OriginalPhoneString { get; internal set; }
    public string PhoneString { get; internal set; }
    public string Type { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_OriginalPhoneString();
    [CompilerGeneratedAttribute]
internal void set_OriginalPhoneString(string value);
    [CompilerGeneratedAttribute]
public string get_PhoneString();
    [CompilerGeneratedAttribute]
internal void set_PhoneString(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(string value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.ContactPhoneEntityCollection : ComplexPropertyCollection`1<ContactPhoneEntity> {
    internal ContactPhoneEntityCollection(IEnumerable`1<ContactPhoneEntity> collection);
    internal virtual ContactPhoneEntity CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(ContactPhoneEntity complexProperty);
}
[SchemaAttribute]
public class Microsoft.Exchange.WebServices.Data.ContactSchema : ItemSchema {
    public static PropertyDefinition FileAs;
    public static PropertyDefinition FileAsMapping;
    public static PropertyDefinition DisplayName;
    public static PropertyDefinition GivenName;
    public static PropertyDefinition Initials;
    public static PropertyDefinition MiddleName;
    public static PropertyDefinition NickName;
    public static PropertyDefinition CompleteName;
    public static PropertyDefinition CompanyName;
    public static PropertyDefinition EmailAddresses;
    public static PropertyDefinition PhysicalAddresses;
    public static PropertyDefinition PhoneNumbers;
    public static PropertyDefinition AssistantName;
    public static PropertyDefinition Birthday;
    public static PropertyDefinition BusinessHomePage;
    public static PropertyDefinition Children;
    public static PropertyDefinition Companies;
    public static PropertyDefinition ContactSource;
    public static PropertyDefinition Department;
    public static PropertyDefinition Generation;
    public static PropertyDefinition ImAddresses;
    public static PropertyDefinition JobTitle;
    public static PropertyDefinition Manager;
    public static PropertyDefinition Mileage;
    public static PropertyDefinition OfficeLocation;
    public static PropertyDefinition PostalAddressIndex;
    public static PropertyDefinition Profession;
    public static PropertyDefinition SpouseName;
    public static PropertyDefinition Surname;
    public static PropertyDefinition WeddingAnniversary;
    public static PropertyDefinition HasPicture;
    public static PropertyDefinition PhoneticFullName;
    public static PropertyDefinition PhoneticFirstName;
    public static PropertyDefinition PhoneticLastName;
    public static PropertyDefinition Alias;
    public static PropertyDefinition Notes;
    public static PropertyDefinition Photo;
    public static PropertyDefinition UserSMIMECertificate;
    public static PropertyDefinition MSExchangeCertificate;
    public static PropertyDefinition DirectoryId;
    public static PropertyDefinition ManagerMailbox;
    public static PropertyDefinition DirectReports;
    public static IndexedPropertyDefinition EmailAddress1;
    public static IndexedPropertyDefinition EmailAddress2;
    public static IndexedPropertyDefinition EmailAddress3;
    public static IndexedPropertyDefinition ImAddress1;
    public static IndexedPropertyDefinition ImAddress2;
    public static IndexedPropertyDefinition ImAddress3;
    public static IndexedPropertyDefinition AssistantPhone;
    public static IndexedPropertyDefinition BusinessFax;
    public static IndexedPropertyDefinition BusinessPhone;
    public static IndexedPropertyDefinition BusinessPhone2;
    public static IndexedPropertyDefinition Callback;
    public static IndexedPropertyDefinition CarPhone;
    public static IndexedPropertyDefinition CompanyMainPhone;
    public static IndexedPropertyDefinition HomeFax;
    public static IndexedPropertyDefinition HomePhone;
    public static IndexedPropertyDefinition HomePhone2;
    public static IndexedPropertyDefinition Isdn;
    public static IndexedPropertyDefinition MobilePhone;
    public static IndexedPropertyDefinition OtherFax;
    public static IndexedPropertyDefinition OtherTelephone;
    public static IndexedPropertyDefinition Pager;
    public static IndexedPropertyDefinition PrimaryPhone;
    public static IndexedPropertyDefinition RadioPhone;
    public static IndexedPropertyDefinition Telex;
    public static IndexedPropertyDefinition TtyTddPhone;
    public static IndexedPropertyDefinition BusinessAddressStreet;
    public static IndexedPropertyDefinition BusinessAddressCity;
    public static IndexedPropertyDefinition BusinessAddressState;
    public static IndexedPropertyDefinition BusinessAddressCountryOrRegion;
    public static IndexedPropertyDefinition BusinessAddressPostalCode;
    public static IndexedPropertyDefinition HomeAddressStreet;
    public static IndexedPropertyDefinition HomeAddressCity;
    public static IndexedPropertyDefinition HomeAddressState;
    public static IndexedPropertyDefinition HomeAddressCountryOrRegion;
    public static IndexedPropertyDefinition HomeAddressPostalCode;
    public static IndexedPropertyDefinition OtherAddressStreet;
    public static IndexedPropertyDefinition OtherAddressCity;
    public static IndexedPropertyDefinition OtherAddressState;
    public static IndexedPropertyDefinition OtherAddressCountryOrRegion;
    public static IndexedPropertyDefinition OtherAddressPostalCode;
    internal static ContactSchema Instance;
    private static ContactSchema();
    internal virtual void RegisterProperties();
}
[ServiceObjectDefinitionAttribute("ContactsFolder")]
public class Microsoft.Exchange.WebServices.Data.ContactsFolder : Folder {
    public ContactsFolder(ExchangeService service);
    public static Task`1<ContactsFolder> Bind(ExchangeService service, FolderId id, PropertySet propertySet, CancellationToken token);
    public static Task`1<ContactsFolder> Bind(ExchangeService service, FolderId id, CancellationToken token);
    public static Task`1<ContactsFolder> Bind(ExchangeService service, WellKnownFolderName name, PropertySet propertySet, CancellationToken token);
    public static Task`1<ContactsFolder> Bind(ExchangeService service, WellKnownFolderName name, CancellationToken token);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
}
public enum Microsoft.Exchange.WebServices.Data.ContactSource : Enum {
    public int value__;
    public static ContactSource ActiveDirectory;
    public static ContactSource Store;
}
internal class Microsoft.Exchange.WebServices.Data.ContainedPropertyDefinition`1 : ComplexPropertyDefinition`1<TComplexProperty> {
    private string containedXmlElementName;
    internal ContainedPropertyDefinition`1(string xmlElementName, string uri, string containedXmlElementName, PropertyDefinitionFlags flags, ExchangeVersion version, CreateComplexPropertyDelegate`1<TComplexProperty> propertyCreationDelegate);
    internal virtual void InternalLoadFromXml(EwsServiceXmlReader reader, PropertyBag propertyBag);
    internal virtual void WritePropertyValueToXml(EwsServiceXmlWriter writer, PropertyBag propertyBag, bool isUpdateOperation);
}
public enum Microsoft.Exchange.WebServices.Data.ContainmentMode : Enum {
    public int value__;
    public static ContainmentMode FullString;
    public static ContainmentMode Prefixed;
    public static ContainmentMode Substring;
    public static ContainmentMode PrefixOnWords;
    public static ContainmentMode ExactPhrase;
}
[ServiceObjectDefinitionAttribute("Conversation")]
public class Microsoft.Exchange.WebServices.Data.Conversation : ServiceObject {
    public ConversationId Id { get; }
    public string Topic { get; }
    public StringList UniqueRecipients { get; }
    public StringList GlobalUniqueRecipients { get; }
    public StringList UniqueUnreadSenders { get; }
    public StringList GlobalUniqueUnreadSenders { get; }
    public StringList UniqueSenders { get; }
    public StringList GlobalUniqueSenders { get; }
    public DateTime LastDeliveryTime { get; }
    public DateTime GlobalLastDeliveryTime { get; }
    public StringList Categories { get; }
    public StringList GlobalCategories { get; }
    public ConversationFlagStatus FlagStatus { get; }
    public ConversationFlagStatus GlobalFlagStatus { get; }
    public bool HasAttachments { get; }
    public bool GlobalHasAttachments { get; }
    public int MessageCount { get; }
    public int GlobalMessageCount { get; }
    public int UnreadCount { get; }
    public int GlobalUnreadCount { get; }
    public int Size { get; }
    public int GlobalSize { get; }
    public StringList ItemClasses { get; }
    public StringList GlobalItemClasses { get; }
    public Importance Importance { get; }
    public Importance GlobalImportance { get; }
    public ItemIdCollection ItemIds { get; }
    public ItemIdCollection GlobalItemIds { get; }
    public DateTime LastModifiedTime { get; }
    public Byte[] InstanceKey { get; }
    public string Preview { get; }
    public IconIndex IconIndex { get; }
    public IconIndex GlobalIconIndex { get; }
    public ItemIdCollection DraftItemIds { get; }
    public bool HasIrm { get; }
    public bool GlobalHasIrm { get; }
    internal Conversation(ExchangeService service);
    internal virtual ServiceObjectSchema GetSchema();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal virtual PropertyDefinition GetIdPropertyDefinition();
    internal virtual Task`1<ServiceResponseCollection`1<ServiceResponse>> InternalLoad(PropertySet propertySet, CancellationToken token);
    internal virtual Task`1<ServiceResponseCollection`1<ServiceResponse>> InternalDelete(DeleteMode deleteMode, Nullable`1<SendCancellationsMode> sendCancellationsMode, Nullable`1<AffectedTaskOccurrence> affectedTaskOccurrences, CancellationToken token);
    internal virtual string GetChangeXmlElementName();
    internal virtual string GetDeleteFieldXmlElementName();
    internal virtual string GetSetFieldXmlElementName();
    internal virtual bool GetIsTimeZoneHeaderRequired(bool isUpdateOperation);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Conversation/<EnableAlwaysCategorizeItems>d__10")]
public Task EnableAlwaysCategorizeItems(IEnumerable`1<string> categories, bool processSynchronously);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Conversation/<DisableAlwaysCategorizeItems>d__11")]
public Task DisableAlwaysCategorizeItems(bool processSynchronously);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Conversation/<EnableAlwaysDeleteItems>d__12")]
public Task EnableAlwaysDeleteItems(bool processSynchronously);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Conversation/<DisableAlwaysDeleteItems>d__13")]
public Task DisableAlwaysDeleteItems(bool processSynchronously);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Conversation/<EnableAlwaysMoveItems>d__14")]
public Task EnableAlwaysMoveItems(FolderId destinationFolderId, bool processSynchronously);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Conversation/<DisableAlwaysMoveItemsInConversation>d__15")]
public Task DisableAlwaysMoveItemsInConversation(bool processSynchronously);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Conversation/<DeleteItems>d__16")]
public Task DeleteItems(FolderId contextFolderId, DeleteMode deleteMode);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Conversation/<MoveItemsInConversation>d__17")]
public Task MoveItemsInConversation(FolderId contextFolderId, FolderId destinationFolderId);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Conversation/<CopyItemsInConversation>d__18")]
public Task CopyItemsInConversation(FolderId contextFolderId, FolderId destinationFolderId);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Conversation/<SetReadStateForItemsInConversation>d__19")]
public Task SetReadStateForItemsInConversation(FolderId contextFolderId, bool isRead);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Conversation/<SetReadStateForItemsInConversation>d__20")]
public Task SetReadStateForItemsInConversation(FolderId contextFolderId, bool isRead, bool suppressReadReceipts);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Conversation/<SetRetentionPolicyForItemsInConversation>d__21")]
public Task SetRetentionPolicyForItemsInConversation(FolderId contextFolderId, RetentionType retentionPolicyType, Nullable`1<Guid> retentionPolicyTagId);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Conversation/<FlagItemsComplete>d__22")]
public Task FlagItemsComplete(FolderId contextFolderId, Nullable`1<DateTime> completeDate);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Conversation/<ClearItemFlags>d__23")]
public Task ClearItemFlags(FolderId contextFolderId);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Conversation/<FlagItems>d__24")]
public Task FlagItems(FolderId contextFolderId, Nullable`1<DateTime> startDate, Nullable`1<DateTime> dueDate);
    public ConversationId get_Id();
    public string get_Topic();
    public StringList get_UniqueRecipients();
    public StringList get_GlobalUniqueRecipients();
    public StringList get_UniqueUnreadSenders();
    public StringList get_GlobalUniqueUnreadSenders();
    public StringList get_UniqueSenders();
    public StringList get_GlobalUniqueSenders();
    public DateTime get_LastDeliveryTime();
    public DateTime get_GlobalLastDeliveryTime();
    public StringList get_Categories();
    public StringList get_GlobalCategories();
    public ConversationFlagStatus get_FlagStatus();
    public ConversationFlagStatus get_GlobalFlagStatus();
    public bool get_HasAttachments();
    public bool get_GlobalHasAttachments();
    public int get_MessageCount();
    public int get_GlobalMessageCount();
    public int get_UnreadCount();
    public int get_GlobalUnreadCount();
    public int get_Size();
    public int get_GlobalSize();
    public StringList get_ItemClasses();
    public StringList get_GlobalItemClasses();
    public Importance get_Importance();
    public Importance get_GlobalImportance();
    public ItemIdCollection get_ItemIds();
    public ItemIdCollection get_GlobalItemIds();
    public DateTime get_LastModifiedTime();
    public Byte[] get_InstanceKey();
    public string get_Preview();
    public IconIndex get_IconIndex();
    public IconIndex get_GlobalIconIndex();
    public ItemIdCollection get_DraftItemIds();
    public bool get_HasIrm();
    public bool get_GlobalHasIrm();
}
internal class Microsoft.Exchange.WebServices.Data.ConversationAction : object {
    [CompilerGeneratedAttribute]
private ConversationActionType <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private ConversationId <ConversationId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProcessRightAway>k__BackingField;
    [CompilerGeneratedAttribute]
private StringList <Categories>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EnableAlwaysDelete>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsRead>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <SuppressReadReceipts>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DeleteMode> <DeleteType>k__BackingField;
    [CompilerGeneratedAttribute]
private Flag <Flag>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ConversationLastSyncTime>k__BackingField;
    [CompilerGeneratedAttribute]
private FolderIdWrapper <ContextFolderId>k__BackingField;
    [CompilerGeneratedAttribute]
private FolderIdWrapper <DestinationFolderId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<RetentionType> <RetentionPolicyType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <RetentionPolicyTagId>k__BackingField;
    internal ConversationActionType Action { get; internal set; }
    internal ConversationId ConversationId { get; internal set; }
    internal bool ProcessRightAway { get; internal set; }
    internal StringList Categories { get; internal set; }
    internal bool EnableAlwaysDelete { get; internal set; }
    internal Nullable`1<bool> IsRead { get; internal set; }
    internal Nullable`1<bool> SuppressReadReceipts { get; internal set; }
    internal Nullable`1<DeleteMode> DeleteType { get; internal set; }
    internal Flag Flag { get; internal set; }
    internal Nullable`1<DateTime> ConversationLastSyncTime { get; internal set; }
    internal FolderIdWrapper ContextFolderId { get; internal set; }
    internal FolderIdWrapper DestinationFolderId { get; internal set; }
    internal Nullable`1<RetentionType> RetentionPolicyType { get; internal set; }
    internal Nullable`1<Guid> RetentionPolicyTagId { get; internal set; }
    [CompilerGeneratedAttribute]
internal ConversationActionType get_Action();
    [CompilerGeneratedAttribute]
internal void set_Action(ConversationActionType value);
    [CompilerGeneratedAttribute]
internal ConversationId get_ConversationId();
    [CompilerGeneratedAttribute]
internal void set_ConversationId(ConversationId value);
    [CompilerGeneratedAttribute]
internal bool get_ProcessRightAway();
    [CompilerGeneratedAttribute]
internal void set_ProcessRightAway(bool value);
    [CompilerGeneratedAttribute]
internal StringList get_Categories();
    [CompilerGeneratedAttribute]
internal void set_Categories(StringList value);
    [CompilerGeneratedAttribute]
internal bool get_EnableAlwaysDelete();
    [CompilerGeneratedAttribute]
internal void set_EnableAlwaysDelete(bool value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_IsRead();
    [CompilerGeneratedAttribute]
internal void set_IsRead(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_SuppressReadReceipts();
    [CompilerGeneratedAttribute]
internal void set_SuppressReadReceipts(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<DeleteMode> get_DeleteType();
    [CompilerGeneratedAttribute]
internal void set_DeleteType(Nullable`1<DeleteMode> value);
    [CompilerGeneratedAttribute]
internal Flag get_Flag();
    [CompilerGeneratedAttribute]
internal void set_Flag(Flag value);
    [CompilerGeneratedAttribute]
internal Nullable`1<DateTime> get_ConversationLastSyncTime();
    [CompilerGeneratedAttribute]
internal void set_ConversationLastSyncTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
internal FolderIdWrapper get_ContextFolderId();
    [CompilerGeneratedAttribute]
internal void set_ContextFolderId(FolderIdWrapper value);
    [CompilerGeneratedAttribute]
internal FolderIdWrapper get_DestinationFolderId();
    [CompilerGeneratedAttribute]
internal void set_DestinationFolderId(FolderIdWrapper value);
    [CompilerGeneratedAttribute]
internal Nullable`1<RetentionType> get_RetentionPolicyType();
    [CompilerGeneratedAttribute]
internal void set_RetentionPolicyType(Nullable`1<RetentionType> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<Guid> get_RetentionPolicyTagId();
    [CompilerGeneratedAttribute]
internal void set_RetentionPolicyTagId(Nullable`1<Guid> value);
    internal string GetXmlElementName();
    internal void Validate();
    internal void WriteElementsToXml(EwsServiceXmlWriter writer);
}
internal enum Microsoft.Exchange.WebServices.Data.ConversationActionType : Enum {
    public int value__;
    public static ConversationActionType AlwaysCategorize;
    public static ConversationActionType AlwaysDelete;
    public static ConversationActionType AlwaysMove;
    public static ConversationActionType Delete;
    public static ConversationActionType Move;
    public static ConversationActionType Copy;
    public static ConversationActionType SetReadState;
    public static ConversationActionType SetRetentionPolicy;
    public static ConversationActionType Flag;
}
public enum Microsoft.Exchange.WebServices.Data.ConversationFlagStatus : Enum {
    public int value__;
    public static ConversationFlagStatus NotFlagged;
    public static ConversationFlagStatus Flagged;
    public static ConversationFlagStatus Complete;
}
public class Microsoft.Exchange.WebServices.Data.ConversationId : ServiceId {
    public ConversationId(string uniqueId);
    public static ConversationId op_Implicit(string uniqueId);
    public static string op_Implicit(ConversationId conversationId);
    internal virtual string GetXmlElementName();
    public virtual string ToString();
}
public class Microsoft.Exchange.WebServices.Data.ConversationIndexedItemView : PagedView {
    private OrderByCollection orderBy;
    private Nullable`1<ConversationQueryTraversal> traversal;
    private Nullable`1<ViewFilter> viewFilter;
    public OrderByCollection OrderBy { get; }
    public Nullable`1<ConversationQueryTraversal> Traversal { get; public set; }
    public Nullable`1<ViewFilter> ViewFilter { get; public set; }
    public ConversationIndexedItemView(int pageSize);
    public ConversationIndexedItemView(int pageSize, int offset);
    public ConversationIndexedItemView(int pageSize, int offset, OffsetBasePoint offsetBasePoint);
    internal virtual ServiceObjectType GetServiceObjectType();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual string GetViewXmlElementName();
    internal virtual void InternalValidate(ServiceRequestBase request);
    internal virtual void InternalWriteSearchSettingsToXml(EwsServiceXmlWriter writer, Grouping groupBy);
    internal virtual void WriteOrderByToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteToXml(EwsServiceXmlWriter writer, Grouping groupBy);
    public OrderByCollection get_OrderBy();
    public Nullable`1<ConversationQueryTraversal> get_Traversal();
    public void set_Traversal(Nullable`1<ConversationQueryTraversal> value);
    public Nullable`1<ViewFilter> get_ViewFilter();
    public void set_ViewFilter(Nullable`1<ViewFilter> value);
}
public class Microsoft.Exchange.WebServices.Data.ConversationNode : ComplexProperty {
    private PropertySet propertySet;
    [CompilerGeneratedAttribute]
private string <InternetMessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ParentInternetMessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Item> <Items>k__BackingField;
    public string InternetMessageId { get; public set; }
    public string ParentInternetMessageId { get; public set; }
    public List`1<Item> Items { get; public set; }
    internal ConversationNode(PropertySet propertySet);
    [CompilerGeneratedAttribute]
public string get_InternetMessageId();
    [CompilerGeneratedAttribute]
public void set_InternetMessageId(string value);
    [CompilerGeneratedAttribute]
public string get_ParentInternetMessageId();
    [CompilerGeneratedAttribute]
public void set_ParentInternetMessageId(string value);
    [CompilerGeneratedAttribute]
public List`1<Item> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(List`1<Item> value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    private Item GetObjectInstance(ExchangeService service, string xmlElementName);
    internal string GetXmlElementName();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.ConversationNodeCollection : ComplexPropertyCollection`1<ConversationNode> {
    private PropertySet propertySet;
    internal ConversationNodeCollection(PropertySet propertySet);
    internal virtual ConversationNode CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(ConversationNode complexProperty);
}
public enum Microsoft.Exchange.WebServices.Data.ConversationQueryTraversal : Enum {
    public int value__;
    [RequiredServerVersionAttribute("4")]
public static ConversationQueryTraversal Shallow;
    [RequiredServerVersionAttribute("4")]
public static ConversationQueryTraversal Deep;
}
public class Microsoft.Exchange.WebServices.Data.ConversationRequest : ComplexProperty {
    [CompilerGeneratedAttribute]
private ConversationId <ConversationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SyncState>k__BackingField;
    public ConversationId ConversationId { get; public set; }
    public string SyncState { get; public set; }
    public ConversationRequest(ConversationId conversationId, string syncState);
    [CompilerGeneratedAttribute]
public ConversationId get_ConversationId();
    [CompilerGeneratedAttribute]
public void set_ConversationId(ConversationId value);
    [CompilerGeneratedAttribute]
public string get_SyncState();
    [CompilerGeneratedAttribute]
public void set_SyncState(string value);
    internal virtual void WriteToXml(EwsServiceXmlWriter writer, string xmlElementName);
    internal virtual void InternalValidate();
}
public class Microsoft.Exchange.WebServices.Data.ConversationResponse : ComplexProperty {
    private PropertySet propertySet;
    [CompilerGeneratedAttribute]
private ConversationId <ConversationId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SyncState>k__BackingField;
    [CompilerGeneratedAttribute]
private ConversationNodeCollection <ConversationNodes>k__BackingField;
    public ConversationId ConversationId { get; internal set; }
    public string SyncState { get; internal set; }
    public ConversationNodeCollection ConversationNodes { get; internal set; }
    internal ConversationResponse(PropertySet propertySet);
    [CompilerGeneratedAttribute]
public ConversationId get_ConversationId();
    [CompilerGeneratedAttribute]
internal void set_ConversationId(ConversationId value);
    [CompilerGeneratedAttribute]
public string get_SyncState();
    [CompilerGeneratedAttribute]
internal void set_SyncState(string value);
    [CompilerGeneratedAttribute]
public ConversationNodeCollection get_ConversationNodes();
    [CompilerGeneratedAttribute]
internal void set_ConversationNodes(ConversationNodeCollection value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
[SchemaAttribute]
public class Microsoft.Exchange.WebServices.Data.ConversationSchema : ServiceObjectSchema {
    public static PropertyDefinition Id;
    public static PropertyDefinition Topic;
    public static PropertyDefinition UniqueRecipients;
    public static PropertyDefinition GlobalUniqueRecipients;
    public static PropertyDefinition UniqueUnreadSenders;
    public static PropertyDefinition GlobalUniqueUnreadSenders;
    public static PropertyDefinition UniqueSenders;
    public static PropertyDefinition GlobalUniqueSenders;
    public static PropertyDefinition LastDeliveryTime;
    public static PropertyDefinition GlobalLastDeliveryTime;
    public static PropertyDefinition Categories;
    public static PropertyDefinition GlobalCategories;
    public static PropertyDefinition FlagStatus;
    public static PropertyDefinition GlobalFlagStatus;
    public static PropertyDefinition HasAttachments;
    public static PropertyDefinition GlobalHasAttachments;
    public static PropertyDefinition MessageCount;
    public static PropertyDefinition GlobalMessageCount;
    public static PropertyDefinition UnreadCount;
    public static PropertyDefinition GlobalUnreadCount;
    public static PropertyDefinition Size;
    public static PropertyDefinition GlobalSize;
    public static PropertyDefinition ItemClasses;
    public static PropertyDefinition GlobalItemClasses;
    public static PropertyDefinition Importance;
    public static PropertyDefinition GlobalImportance;
    public static PropertyDefinition ItemIds;
    public static PropertyDefinition GlobalItemIds;
    public static PropertyDefinition LastModifiedTime;
    public static PropertyDefinition InstanceKey;
    public static PropertyDefinition Preview;
    public static PropertyDefinition IconIndex;
    public static PropertyDefinition GlobalIconIndex;
    public static PropertyDefinition DraftItemIds;
    public static PropertyDefinition HasIrm;
    public static PropertyDefinition GlobalHasIrm;
    internal static ConversationSchema Instance;
    private static ConversationSchema();
    internal virtual void RegisterProperties();
}
public enum Microsoft.Exchange.WebServices.Data.ConversationSortOrder : Enum {
    public int value__;
    public static ConversationSortOrder TreeOrderAscending;
    public static ConversationSortOrder TreeOrderDescending;
    public static ConversationSortOrder DateOrderAscending;
    public static ConversationSortOrder DateOrderDescending;
}
internal class Microsoft.Exchange.WebServices.Data.ConvertIdRequest : MultiResponseServiceRequest`1<ConvertIdResponse> {
    private IdFormat destinationFormat;
    private List`1<AlternateIdBase> ids;
    public IdFormat DestinationFormat { get; public set; }
    public List`1<AlternateIdBase> Ids { get; }
    internal ConvertIdRequest(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual ConvertIdResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual string GetXmlElementName();
    internal virtual void Validate();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public IdFormat get_DestinationFormat();
    public void set_DestinationFormat(IdFormat value);
    public List`1<AlternateIdBase> get_Ids();
}
public class Microsoft.Exchange.WebServices.Data.ConvertIdResponse : ServiceResponse {
    private AlternateIdBase convertedId;
    public AlternateIdBase ConvertedId { get; }
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    public AlternateIdBase get_ConvertedId();
}
internal class Microsoft.Exchange.WebServices.Data.CopyFolderRequest : MoveCopyFolderRequest`1<MoveCopyFolderResponse> {
    internal CopyFolderRequest(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual MoveCopyFolderResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
}
internal class Microsoft.Exchange.WebServices.Data.CopyItemRequest : MoveCopyItemRequest`1<MoveCopyItemResponse> {
    internal CopyItemRequest(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual MoveCopyItemResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
}
public class Microsoft.Exchange.WebServices.Data.CreateAttachmentException : BatchServiceResponseException`1<CreateAttachmentResponse> {
    internal CreateAttachmentException(ServiceResponseCollection`1<CreateAttachmentResponse> serviceResponses, string message);
    internal CreateAttachmentException(ServiceResponseCollection`1<CreateAttachmentResponse> serviceResponses, string message, Exception innerException);
    private CreateAttachmentException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Exchange.WebServices.Data.CreateAttachmentRequest : MultiResponseServiceRequest`1<CreateAttachmentResponse> {
    private string parentItemId;
    private List`1<Attachment> attachments;
    internal bool EmitTimeZoneHeader { get; }
    public List`1<Attachment> Attachments { get; }
    public string ParentItemId { get; public set; }
    internal CreateAttachmentRequest(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual void Validate();
    internal virtual CreateAttachmentResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal virtual bool get_EmitTimeZoneHeader();
    public List`1<Attachment> get_Attachments();
    public string get_ParentItemId();
    public void set_ParentItemId(string value);
}
public class Microsoft.Exchange.WebServices.Data.CreateAttachmentResponse : ServiceResponse {
    private Attachment attachment;
    internal Attachment Attachment { get; }
    internal CreateAttachmentResponse(Attachment attachment);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    internal Attachment get_Attachment();
}
internal class Microsoft.Exchange.WebServices.Data.CreateComplexPropertyDelegate`1 : MulticastDelegate {
    public CreateComplexPropertyDelegate`1(object object, IntPtr method);
    public virtual TComplexProperty Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual TComplexProperty EndInvoke(IAsyncResult result);
}
internal class Microsoft.Exchange.WebServices.Data.CreateFolderRequest : CreateRequest`2<Folder, ServiceResponse> {
    public IEnumerable`1<Folder> Folders { get; public set; }
    internal CreateFolderRequest(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual void Validate();
    internal virtual ServiceResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual string GetParentFolderXmlElementName();
    internal virtual string GetObjectCollectionXmlElementName();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public IEnumerable`1<Folder> get_Folders();
    public void set_Folders(IEnumerable`1<Folder> value);
}
internal class Microsoft.Exchange.WebServices.Data.CreateFolderResponse : ServiceResponse {
    private Folder folder;
    internal CreateFolderResponse(Folder folder);
    private Folder GetObjectInstance(ExchangeService service, string xmlElementName);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    internal virtual void Loaded();
}
internal class Microsoft.Exchange.WebServices.Data.CreateItemRequest : CreateItemRequestBase`2<Item, ServiceResponse> {
    internal CreateItemRequest(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual ServiceResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual void Validate();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
}
internal abstract class Microsoft.Exchange.WebServices.Data.CreateItemRequestBase`2 : CreateRequest`2<TServiceObject, TResponse> {
    private Nullable`1<MessageDisposition> messageDisposition;
    private Nullable`1<SendInvitationsMode> sendInvitationsMode;
    internal bool EmitTimeZoneHeader { get; }
    public Nullable`1<MessageDisposition> MessageDisposition { get; public set; }
    public Nullable`1<SendInvitationsMode> SendInvitationsMode { get; public set; }
    public IEnumerable`1<TServiceObject> Items { get; public set; }
    protected CreateItemRequestBase`2(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual bool get_EmitTimeZoneHeader();
    internal virtual void Validate();
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual string GetParentFolderXmlElementName();
    internal virtual string GetObjectCollectionXmlElementName();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    public Nullable`1<MessageDisposition> get_MessageDisposition();
    public void set_MessageDisposition(Nullable`1<MessageDisposition> value);
    public Nullable`1<SendInvitationsMode> get_SendInvitationsMode();
    public void set_SendInvitationsMode(Nullable`1<SendInvitationsMode> value);
    public IEnumerable`1<TServiceObject> get_Items();
    public void set_Items(IEnumerable`1<TServiceObject> value);
}
internal class Microsoft.Exchange.WebServices.Data.CreateItemResponse : CreateItemResponseBase {
    private Item item;
    internal CreateItemResponse(Item item);
    internal virtual Item GetObjectInstance(ExchangeService service, string xmlElementName);
    internal virtual void Loaded();
}
[EditorBrowsableAttribute("1")]
internal abstract class Microsoft.Exchange.WebServices.Data.CreateItemResponseBase : ServiceResponse {
    private List`1<Item> items;
    public List`1<Item> Items { get; }
    internal abstract virtual Item GetObjectInstance(ExchangeService service, string xmlElementName);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    public List`1<Item> get_Items();
}
internal abstract class Microsoft.Exchange.WebServices.Data.CreateRequest`2 : MultiResponseServiceRequest`1<TResponse> {
    private FolderId parentFolderId;
    private IEnumerable`1<TServiceObject> objects;
    internal IEnumerable`1<TServiceObject> Objects { get; internal set; }
    public FolderId ParentFolderId { get; public set; }
    protected CreateRequest`2(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual void Validate();
    internal virtual int GetExpectedResponseMessageCount();
    internal abstract virtual string GetParentFolderXmlElementName();
    internal abstract virtual string GetObjectCollectionXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal IEnumerable`1<TServiceObject> get_Objects();
    internal void set_Objects(IEnumerable`1<TServiceObject> value);
    public FolderId get_ParentFolderId();
    public void set_ParentFolderId(FolderId value);
}
internal class Microsoft.Exchange.WebServices.Data.CreateResponseObjectRequest : CreateItemRequestBase`2<ServiceObject, CreateResponseObjectResponse> {
    internal CreateResponseObjectRequest(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual CreateResponseObjectResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
}
[EditorBrowsableAttribute("1")]
internal class Microsoft.Exchange.WebServices.Data.CreateResponseObjectResponse : CreateItemResponseBase {
    internal virtual Item GetObjectInstance(ExchangeService service, string xmlElementName);
}
public class Microsoft.Exchange.WebServices.Data.CreateRuleOperation : RuleOperation {
    private Rule rule;
    public Rule Rule { get; public set; }
    internal string XmlElementName { get; }
    public CreateRuleOperation(Rule rule);
    public Rule get_Rule();
    public void set_Rule(Rule value);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual void InternalValidate();
    internal virtual string get_XmlElementName();
}
internal class Microsoft.Exchange.WebServices.Data.CreateServiceObjectWithAttachmentParam : MulticastDelegate {
    public CreateServiceObjectWithAttachmentParam(object object, IntPtr method);
    public virtual object Invoke(ItemAttachment itemAttachment, bool isNew);
    public virtual IAsyncResult BeginInvoke(ItemAttachment itemAttachment, bool isNew, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Exchange.WebServices.Data.CreateServiceObjectWithServiceParam : MulticastDelegate {
    public CreateServiceObjectWithServiceParam(object object, IntPtr method);
    public virtual object Invoke(ExchangeService srv);
    public virtual IAsyncResult BeginInvoke(ExchangeService srv, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
internal class Microsoft.Exchange.WebServices.Data.CreateUserConfigurationRequest : MultiResponseServiceRequest`1<ServiceResponse> {
    protected UserConfiguration userConfiguration;
    public UserConfiguration UserConfiguration { get; public set; }
    internal CreateUserConfigurationRequest(ExchangeService service);
    internal virtual void Validate();
    internal virtual ServiceResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    public UserConfiguration get_UserConfiguration();
    public void set_UserConfiguration(UserConfiguration value);
}
public class Microsoft.Exchange.WebServices.Data.Credentials.DualAuthCredentials : ExchangeCredentials {
    private X509CertificateCollection clientCertificates;
    private ICredentials credentials;
    public X509CertificateCollection ClientCertificates { get; }
    public DualAuthCredentials(X509CertificateCollection clientCertificates, string userName, string password);
    internal virtual void PrepareWebRequest(IEwsHttpWebRequest request);
    public X509CertificateCollection get_ClientCertificates();
}
public class Microsoft.Exchange.WebServices.Data.CustomXmlSerializationDelegate : MulticastDelegate {
    public CustomXmlSerializationDelegate(object object, IntPtr method);
    public virtual void Invoke(XmlWriter writer);
    public virtual IAsyncResult BeginInvoke(XmlWriter writer, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum Microsoft.Exchange.WebServices.Data.DateTimePrecision : Enum {
    public int value__;
    public static DateTimePrecision Default;
    public static DateTimePrecision Seconds;
    public static DateTimePrecision Milliseconds;
}
internal class Microsoft.Exchange.WebServices.Data.DateTimePropertyDefinition : PropertyDefinition {
    private bool isNullable;
    internal bool IsNullable { get; }
    public Type Type { get; }
    internal DateTimePropertyDefinition(string xmlElementName, string uri, ExchangeVersion version);
    internal DateTimePropertyDefinition(string xmlElementName, string uri, PropertyDefinitionFlags flags, ExchangeVersion version);
    internal DateTimePropertyDefinition(string xmlElementName, string uri, PropertyDefinitionFlags flags, ExchangeVersion version, bool isNullable);
    internal virtual void LoadPropertyValueFromXml(EwsServiceXmlReader reader, PropertyBag propertyBag);
    internal virtual DateTime ScopeToTimeZone(ExchangeServiceBase service, DateTime dateTime, PropertyBag propertyBag, bool isUpdateOperation);
    internal virtual void WritePropertyValueToXml(EwsServiceXmlWriter writer, PropertyBag propertyBag, bool isUpdateOperation);
    private DateTime GetConvertedDateTime(ExchangeServiceBase service, PropertyBag propertyBag, bool isUpdateOperation, object value);
    internal virtual bool get_IsNullable();
    public virtual Type get_Type();
}
public enum Microsoft.Exchange.WebServices.Data.DayOfTheWeek : Enum {
    public int value__;
    public static DayOfTheWeek Sunday;
    public static DayOfTheWeek Monday;
    public static DayOfTheWeek Tuesday;
    public static DayOfTheWeek Wednesday;
    public static DayOfTheWeek Thursday;
    public static DayOfTheWeek Friday;
    public static DayOfTheWeek Saturday;
    public static DayOfTheWeek Day;
    public static DayOfTheWeek Weekday;
    public static DayOfTheWeek WeekendDay;
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Exchange.WebServices.Data.DayOfTheWeekCollection : ComplexProperty {
    private List`1<DayOfTheWeek> items;
    public DayOfTheWeek Item { get; }
    public int Count { get; }
    internal string ToString(string separator);
    internal virtual void LoadFromXml(EwsServiceXmlReader reader, string xmlElementName);
    internal virtual void WriteToXml(EwsServiceXmlWriter writer, string xmlElementName);
    public virtual string ToString();
    public void Add(DayOfTheWeek dayOfTheWeek);
    public void AddRange(IEnumerable`1<DayOfTheWeek> daysOfTheWeek);
    public void Clear();
    public bool Remove(DayOfTheWeek dayOfTheWeek);
    public void RemoveAt(int index);
    public DayOfTheWeek get_Item(int index);
    public int get_Count();
    public sealed virtual IEnumerator`1<DayOfTheWeek> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum Microsoft.Exchange.WebServices.Data.DayOfTheWeekIndex : Enum {
    public int value__;
    public static DayOfTheWeekIndex First;
    public static DayOfTheWeekIndex Second;
    public static DayOfTheWeekIndex Third;
    public static DayOfTheWeekIndex Fourth;
    public static DayOfTheWeekIndex Last;
}
[ServiceObjectDefinitionAttribute("DeclineItem")]
public class Microsoft.Exchange.WebServices.Data.DeclineMeetingInvitationMessage : CalendarResponseMessage`1<MeetingResponse> {
    internal DeclineMeetingInvitationMessage(Item referenceItem);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
}
public enum Microsoft.Exchange.WebServices.Data.DefaultExtendedPropertySet : Enum {
    public int value__;
    public static DefaultExtendedPropertySet Meeting;
    public static DefaultExtendedPropertySet Appointment;
    public static DefaultExtendedPropertySet Common;
    public static DefaultExtendedPropertySet PublicStrings;
    public static DefaultExtendedPropertySet Address;
    public static DefaultExtendedPropertySet InternetHeaders;
    public static DefaultExtendedPropertySet CalendarAssistant;
    public static DefaultExtendedPropertySet UnifiedMessaging;
    public static DefaultExtendedPropertySet Task;
}
public enum Microsoft.Exchange.WebServices.Data.DelegateFolderPermissionLevel : Enum {
    public int value__;
    public static DelegateFolderPermissionLevel None;
    public static DelegateFolderPermissionLevel Editor;
    public static DelegateFolderPermissionLevel Reviewer;
    public static DelegateFolderPermissionLevel Author;
    public static DelegateFolderPermissionLevel Custom;
}
public class Microsoft.Exchange.WebServices.Data.DelegateInformation : object {
    private Collection`1<DelegateUserResponse> delegateUserResponses;
    private MeetingRequestsDeliveryScope meetingReqestsDeliveryScope;
    public Collection`1<DelegateUserResponse> DelegateUserResponses { get; }
    public MeetingRequestsDeliveryScope MeetingRequestsDeliveryScope { get; }
    internal DelegateInformation(IList`1<DelegateUserResponse> delegateUserResponses, MeetingRequestsDeliveryScope meetingReqestsDeliveryScope);
    public Collection`1<DelegateUserResponse> get_DelegateUserResponses();
    public MeetingRequestsDeliveryScope get_MeetingRequestsDeliveryScope();
}
internal abstract class Microsoft.Exchange.WebServices.Data.DelegateManagementRequestBase`1 : SimpleServiceRequestBase {
    private Mailbox mailbox;
    public Mailbox Mailbox { get; public set; }
    internal DelegateManagementRequestBase`1(ExchangeService service);
    internal virtual void Validate();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal abstract virtual TResponse CreateResponse();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.DelegateManagementRequestBase`1/<Execute>d__6")]
internal Task`1<TResponse> Execute(CancellationToken token);
    public Mailbox get_Mailbox();
    public void set_Mailbox(Mailbox value);
}
internal class Microsoft.Exchange.WebServices.Data.DelegateManagementResponse : ServiceResponse {
    private bool readDelegateUsers;
    private List`1<DelegateUser> delegateUsers;
    private Collection`1<DelegateUserResponse> delegateUserResponses;
    internal Collection`1<DelegateUserResponse> DelegateUserResponses { get; }
    internal DelegateManagementResponse(bool readDelegateUsers, List`1<DelegateUser> delegateUsers);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    internal Collection`1<DelegateUserResponse> get_DelegateUserResponses();
}
public class Microsoft.Exchange.WebServices.Data.DelegatePermissions : ComplexProperty {
    private Dictionary`2<string, DelegateFolderPermission> delegateFolderPermissions;
    public DelegateFolderPermissionLevel CalendarFolderPermissionLevel { get; public set; }
    public DelegateFolderPermissionLevel TasksFolderPermissionLevel { get; public set; }
    public DelegateFolderPermissionLevel InboxFolderPermissionLevel { get; public set; }
    public DelegateFolderPermissionLevel ContactsFolderPermissionLevel { get; public set; }
    public DelegateFolderPermissionLevel NotesFolderPermissionLevel { get; public set; }
    public DelegateFolderPermissionLevel JournalFolderPermissionLevel { get; public set; }
    public DelegateFolderPermissionLevel get_CalendarFolderPermissionLevel();
    public void set_CalendarFolderPermissionLevel(DelegateFolderPermissionLevel value);
    public DelegateFolderPermissionLevel get_TasksFolderPermissionLevel();
    public void set_TasksFolderPermissionLevel(DelegateFolderPermissionLevel value);
    public DelegateFolderPermissionLevel get_InboxFolderPermissionLevel();
    public void set_InboxFolderPermissionLevel(DelegateFolderPermissionLevel value);
    public DelegateFolderPermissionLevel get_ContactsFolderPermissionLevel();
    public void set_ContactsFolderPermissionLevel(DelegateFolderPermissionLevel value);
    public DelegateFolderPermissionLevel get_NotesFolderPermissionLevel();
    public void set_NotesFolderPermissionLevel(DelegateFolderPermissionLevel value);
    public DelegateFolderPermissionLevel get_JournalFolderPermissionLevel();
    public void set_JournalFolderPermissionLevel(DelegateFolderPermissionLevel value);
    internal void Reset();
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    private void WritePermissionToXml(EwsServiceXmlWriter writer, string xmlElementName);
    internal void ValidateAddDelegate();
    internal void ValidateUpdateDelegate();
}
public class Microsoft.Exchange.WebServices.Data.DelegateUser : ComplexProperty {
    private UserId userId;
    private DelegatePermissions permissions;
    private bool receiveCopiesOfMeetingMessages;
    private bool viewPrivateItems;
    public UserId UserId { get; }
    public DelegatePermissions Permissions { get; }
    public bool ReceiveCopiesOfMeetingMessages { get; public set; }
    public bool ViewPrivateItems { get; public set; }
    public DelegateUser(string primarySmtpAddress);
    public DelegateUser(StandardUser standardUser);
    public UserId get_UserId();
    public DelegatePermissions get_Permissions();
    public bool get_ReceiveCopiesOfMeetingMessages();
    public void set_ReceiveCopiesOfMeetingMessages(bool value);
    public bool get_ViewPrivateItems();
    public void set_ViewPrivateItems(bool value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual void InternalValidate();
    internal void ValidateAddDelegate();
    internal void ValidateUpdateDelegate();
}
public class Microsoft.Exchange.WebServices.Data.DelegateUserResponse : ServiceResponse {
    private bool readDelegateUser;
    private DelegateUser delegateUser;
    public DelegateUser DelegateUser { get; }
    internal DelegateUserResponse(bool readDelegateUser, DelegateUser delegateUser);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    public DelegateUser get_DelegateUser();
}
public class Microsoft.Exchange.WebServices.Data.DeleteAttachmentException : BatchServiceResponseException`1<DeleteAttachmentResponse> {
    internal DeleteAttachmentException(ServiceResponseCollection`1<DeleteAttachmentResponse> serviceResponses, string message);
    internal DeleteAttachmentException(ServiceResponseCollection`1<DeleteAttachmentResponse> serviceResponses, string message, Exception innerException);
    private DeleteAttachmentException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Exchange.WebServices.Data.DeleteAttachmentRequest : MultiResponseServiceRequest`1<DeleteAttachmentResponse> {
    private List`1<Attachment> attachments;
    public List`1<Attachment> Attachments { get; }
    internal DeleteAttachmentRequest(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual void Validate();
    internal virtual DeleteAttachmentResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public List`1<Attachment> get_Attachments();
}
public class Microsoft.Exchange.WebServices.Data.DeleteAttachmentResponse : ServiceResponse {
    private Attachment attachment;
    internal Attachment Attachment { get; }
    internal DeleteAttachmentResponse(Attachment attachment);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    internal Attachment get_Attachment();
}
public class Microsoft.Exchange.WebServices.Data.DeletedOccurrenceInfo : ComplexProperty {
    private DateTime originalStart;
    public DateTime OriginalStart { get; }
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    public DateTime get_OriginalStart();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.DeletedOccurrenceInfoCollection : ComplexPropertyCollection`1<DeletedOccurrenceInfo> {
    internal virtual DeletedOccurrenceInfo CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(DeletedOccurrenceInfo complexProperty);
}
internal class Microsoft.Exchange.WebServices.Data.DeleteFolderRequest : DeleteRequest`1<ServiceResponse> {
    private FolderIdWrapperList folderIds;
    internal FolderIdWrapperList FolderIds { get; }
    internal DeleteFolderRequest(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual void Validate();
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual ServiceResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal FolderIdWrapperList get_FolderIds();
}
internal class Microsoft.Exchange.WebServices.Data.DeleteItemRequest : DeleteRequest`1<ServiceResponse> {
    private ItemIdWrapperList itemIds;
    private Nullable`1<AffectedTaskOccurrence> affectedTaskOccurrences;
    private Nullable`1<SendCancellationsMode> sendCancellationsMode;
    [CompilerGeneratedAttribute]
private bool <SuppressReadReceipts>k__BackingField;
    internal ItemIdWrapperList ItemIds { get; }
    internal Nullable`1<AffectedTaskOccurrence> AffectedTaskOccurrences { get; internal set; }
    internal Nullable`1<SendCancellationsMode> SendCancellationsMode { get; internal set; }
    public bool SuppressReadReceipts { get; public set; }
    internal DeleteItemRequest(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual void Validate();
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual ServiceResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal ItemIdWrapperList get_ItemIds();
    internal Nullable`1<AffectedTaskOccurrence> get_AffectedTaskOccurrences();
    internal void set_AffectedTaskOccurrences(Nullable`1<AffectedTaskOccurrence> value);
    internal Nullable`1<SendCancellationsMode> get_SendCancellationsMode();
    internal void set_SendCancellationsMode(Nullable`1<SendCancellationsMode> value);
    [CompilerGeneratedAttribute]
public bool get_SuppressReadReceipts();
    [CompilerGeneratedAttribute]
public void set_SuppressReadReceipts(bool value);
}
public enum Microsoft.Exchange.WebServices.Data.DeleteMode : Enum {
    public int value__;
    public static DeleteMode HardDelete;
    public static DeleteMode SoftDelete;
    public static DeleteMode MoveToDeletedItems;
}
internal abstract class Microsoft.Exchange.WebServices.Data.DeleteRequest`1 : MultiResponseServiceRequest`1<TResponse> {
    private DeleteMode deleteMode;
    public DeleteMode DeleteMode { get; public set; }
    internal DeleteRequest`1(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    public DeleteMode get_DeleteMode();
    public void set_DeleteMode(DeleteMode value);
}
public class Microsoft.Exchange.WebServices.Data.DeleteRuleOperation : RuleOperation {
    private string ruleId;
    public string RuleId { get; public set; }
    internal string XmlElementName { get; }
    public DeleteRuleOperation(string ruleId);
    public string get_RuleId();
    public void set_RuleId(string value);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual void InternalValidate();
    internal virtual string get_XmlElementName();
}
internal class Microsoft.Exchange.WebServices.Data.DeleteUserConfigurationRequest : MultiResponseServiceRequest`1<ServiceResponse> {
    private string name;
    private FolderId parentFolderId;
    internal string Name { get; internal set; }
    internal FolderId ParentFolderId { get; internal set; }
    internal DeleteUserConfigurationRequest(ExchangeService service);
    internal virtual void Validate();
    internal virtual ServiceResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal string get_Name();
    internal void set_Name(string value);
    internal FolderId get_ParentFolderId();
    internal void set_ParentFolderId(FolderId value);
}
public class Microsoft.Exchange.WebServices.Data.DelveDocument : InsightValue {
    private double rank;
    private string author;
    private string created;
    private string lastModifiedTime;
    private string defaultEncodingURL;
    private string fileType;
    private string title;
    private string lastEditor;
    private string documentId;
    private string previewURL;
    public double Rank { get; public set; }
    public string Author { get; public set; }
    public string Created { get; public set; }
    public string LastModifiedTime { get; public set; }
    public string DefaultEncodingURL { get; public set; }
    public string FileType { get; public set; }
    public string Title { get; public set; }
    public string DocumentId { get; public set; }
    public string PreviewURL { get; public set; }
    public string LastEditor { get; public set; }
    public double get_Rank();
    public void set_Rank(double value);
    public string get_Author();
    public void set_Author(string value);
    public string get_Created();
    public void set_Created(string value);
    public string get_LastModifiedTime();
    public void set_LastModifiedTime(string value);
    public string get_DefaultEncodingURL();
    public void set_DefaultEncodingURL(string value);
    public string get_FileType();
    public void set_FileType(string value);
    public string get_Title();
    public void set_Title(string value);
    public string get_DocumentId();
    public void set_DocumentId(string value);
    public string get_PreviewURL();
    public void set_PreviewURL(string value);
    public string get_LastEditor();
    public void set_LastEditor(string value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.Exchange.WebServices.Data.DictionaryEntryProperty`1 : ComplexProperty {
    private TKey key;
    internal TKey Key { get; internal set; }
    internal DictionaryEntryProperty`1(TKey key);
    internal TKey get_Key();
    internal void set_Key(TKey value);
    internal virtual void ReadAttributesFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual bool WriteSetUpdateToXml(EwsServiceXmlWriter writer, ServiceObject ewsObject, string ownerDictionaryXmlElementName);
    internal virtual bool WriteDeleteUpdateToXml(EwsServiceXmlWriter writer, ServiceObject ewsObject);
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.Exchange.WebServices.Data.DictionaryProperty`2 : ComplexProperty {
    private Dictionary`2<TKey, TEntry> entries;
    private Dictionary`2<TKey, TEntry> removedEntries;
    private List`1<TKey> addedEntries;
    private List`1<TKey> modifiedEntries;
    internal Dictionary`2<TKey, TEntry> Entries { get; }
    private void EntryChanged(ComplexProperty complexProperty);
    private void WriteUriToXml(EwsServiceXmlWriter writer, TKey key);
    internal virtual string GetFieldIndex(TKey key);
    internal virtual string GetFieldURI();
    internal virtual TEntry CreateEntry(EwsServiceXmlReader reader);
    internal abstract virtual TEntry CreateEntryInstance();
    internal virtual string GetEntryXmlElementName(TEntry entry);
    internal virtual void ClearChangeLog();
    internal void InternalAdd(TEntry entry);
    internal void InternalAddOrReplace(TEntry entry);
    internal void InternalRemove(TKey key);
    internal virtual void LoadFromXml(EwsServiceXmlReader reader, string localElementName);
    internal virtual void WriteToXml(EwsServiceXmlWriter writer, XmlNamespace xmlNamespace, string xmlElementName);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal Dictionary`2<TKey, TEntry> get_Entries();
    public bool Contains(TKey key);
    private sealed virtual override bool Microsoft.Exchange.WebServices.Data.ICustomUpdateSerializer.WriteSetUpdateToXml(EwsServiceXmlWriter writer, ServiceObject ewsObject, PropertyDefinition propertyDefinition);
    private sealed virtual override bool Microsoft.Exchange.WebServices.Data.ICustomUpdateSerializer.WriteDeleteUpdateToXml(EwsServiceXmlWriter writer, ServiceObject ewsObject);
}
internal class Microsoft.Exchange.WebServices.Data.DisableAppRequest : SimpleServiceRequestBase {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private DisableReasonType <DisableReason>k__BackingField;
    private string Id { get; private set; }
    private DisableReasonType DisableReason { get; private set; }
    internal DisableAppRequest(ExchangeService service, string id, DisableReasonType disableReason);
    internal virtual string GetXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetResponseXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.DisableAppRequest/<Execute>d__6")]
internal Task`1<DisableAppResponse> Execute(CancellationToken token);
    [CompilerGeneratedAttribute]
private string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
private DisableReasonType get_DisableReason();
    [CompilerGeneratedAttribute]
private void set_DisableReason(DisableReasonType value);
}
internal class Microsoft.Exchange.WebServices.Data.DisableAppResponse : ServiceResponse {
}
public enum Microsoft.Exchange.WebServices.Data.DisableReasonType : Enum {
    public int value__;
    public static DisableReasonType NoReason;
    public static DisableReasonType OutlookClientPerformance;
    public static DisableReasonType OWAClientPerformance;
    public static DisableReasonType MobileClientPerformance;
}
internal class Microsoft.Exchange.WebServices.Data.DisconnectPhoneCallRequest : SimpleServiceRequestBase {
    private PhoneCallId id;
    internal PhoneCallId Id { get; internal set; }
    internal DisconnectPhoneCallRequest(ExchangeService service);
    internal virtual string GetXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetResponseXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.DisconnectPhoneCallRequest/<Execute>d__7")]
internal Task`1<ServiceResponse> Execute(CancellationToken token);
    internal PhoneCallId get_Id();
    internal void set_Id(PhoneCallId value);
}
internal static class Microsoft.Exchange.WebServices.Data.DiscoverySchemaChanges : object {
    [CompilerGeneratedAttribute]
private static SchemaChange <SearchMailboxesExtendedData>k__BackingField;
    [CompilerGeneratedAttribute]
private static SchemaChange <SearchMailboxesAdditionalSearchScopes>k__BackingField;
    internal static SchemaChange SearchMailboxesExtendedData { get; private set; }
    internal static SchemaChange SearchMailboxesAdditionalSearchScopes { get; private set; }
    private static DiscoverySchemaChanges();
    [CompilerGeneratedAttribute]
internal static SchemaChange get_SearchMailboxesExtendedData();
    [CompilerGeneratedAttribute]
private static void set_SearchMailboxesExtendedData(SchemaChange value);
    [CompilerGeneratedAttribute]
internal static SchemaChange get_SearchMailboxesAdditionalSearchScopes();
    [CompilerGeneratedAttribute]
private static void set_SearchMailboxesAdditionalSearchScopes(SchemaChange value);
}
public class Microsoft.Exchange.WebServices.Data.DiscoverySearchConfiguration : object {
    [CompilerGeneratedAttribute]
private string <SearchId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SearchQuery>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchableMailbox[] <SearchableMailboxes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InPlaceHoldIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManagedByOrganization>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    public string SearchId { get; public set; }
    public string SearchQuery { get; public set; }
    public SearchableMailbox[] SearchableMailboxes { get; public set; }
    public string InPlaceHoldIdentity { get; public set; }
    public string ManagedByOrganization { get; public set; }
    public string Language { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SearchId();
    [CompilerGeneratedAttribute]
public void set_SearchId(string value);
    [CompilerGeneratedAttribute]
public string get_SearchQuery();
    [CompilerGeneratedAttribute]
public void set_SearchQuery(string value);
    [CompilerGeneratedAttribute]
public SearchableMailbox[] get_SearchableMailboxes();
    [CompilerGeneratedAttribute]
public void set_SearchableMailboxes(SearchableMailbox[] value);
    [CompilerGeneratedAttribute]
public string get_InPlaceHoldIdentity();
    [CompilerGeneratedAttribute]
public void set_InPlaceHoldIdentity(string value);
    [CompilerGeneratedAttribute]
public string get_ManagedByOrganization();
    [CompilerGeneratedAttribute]
public void set_ManagedByOrganization(string value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    internal static DiscoverySearchConfiguration LoadFromXml(EwsServiceXmlReader reader);
}
internal class Microsoft.Exchange.WebServices.Data.DoublePropertyDefinition : GenericPropertyDefinition`1<double> {
    internal DoublePropertyDefinition(string xmlElementName, string uri, PropertyDefinitionFlags flags, ExchangeVersion version);
}
public class Microsoft.Exchange.WebServices.Data.EducationInsightValue : InsightValue {
    private string institute;
    private string degree;
    private long startUtcTicks;
    private long endUtcTicks;
    public string Institute { get; public set; }
    public string Degree { get; public set; }
    public long StartUtcTicks { get; public set; }
    public long EndUtcTicks { get; public set; }
    public string get_Institute();
    public void set_Institute(string value);
    public string get_Degree();
    public void set_Degree(string value);
    public long get_StartUtcTicks();
    public void set_StartUtcTicks(long value);
    public long get_EndUtcTicks();
    public void set_EndUtcTicks(long value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
[FlagsAttribute]
public enum Microsoft.Exchange.WebServices.Data.EffectiveRights : Enum {
    public int value__;
    public static EffectiveRights None;
    public static EffectiveRights CreateAssociated;
    public static EffectiveRights CreateContents;
    public static EffectiveRights CreateHierarchy;
    public static EffectiveRights Delete;
    public static EffectiveRights Modify;
    public static EffectiveRights Read;
    public static EffectiveRights ViewPrivateItems;
}
internal class Microsoft.Exchange.WebServices.Data.EffectiveRightsPropertyDefinition : PropertyDefinition {
    public Type Type { get; }
    internal EffectiveRightsPropertyDefinition(string xmlElementName, string uri, PropertyDefinitionFlags flags, ExchangeVersion version);
    internal sealed virtual void LoadPropertyValueFromXml(EwsServiceXmlReader reader, PropertyBag propertyBag);
    internal virtual void WritePropertyValueToXml(EwsServiceXmlWriter writer, PropertyBag propertyBag, bool isUpdateOperation);
    public virtual Type get_Type();
}
public enum Microsoft.Exchange.WebServices.Data.ElcFolderType : Enum {
    public int value__;
    public static ElcFolderType Calendar;
    public static ElcFolderType Contacts;
    public static ElcFolderType DeletedItems;
    public static ElcFolderType Drafts;
    public static ElcFolderType Inbox;
    public static ElcFolderType JunkEmail;
    public static ElcFolderType Journal;
    public static ElcFolderType Notes;
    public static ElcFolderType Outbox;
    public static ElcFolderType SentItems;
    public static ElcFolderType Tasks;
    public static ElcFolderType All;
    public static ElcFolderType ManagedCustomFolder;
    public static ElcFolderType RssSubscriptions;
    public static ElcFolderType SyncIssues;
    public static ElcFolderType ConversationHistory;
    public static ElcFolderType Personal;
    public static ElcFolderType RecoverableItems;
    public static ElcFolderType NonIpmRoot;
}
public class Microsoft.Exchange.WebServices.Data.EmailAddress : ComplexProperty {
    internal static string SmtpRoutingType;
    private string name;
    private string address;
    private string routingType;
    private Nullable`1<MailboxType> mailboxType;
    private ItemId id;
    public string Name { get; public set; }
    public string Address { get; public set; }
    public string RoutingType { get; public set; }
    public Nullable`1<MailboxType> MailboxType { get; public set; }
    public ItemId Id { get; public set; }
    public EmailAddress(string smtpAddress);
    public EmailAddress(string name, string smtpAddress);
    public EmailAddress(string name, string address, string routingType);
    internal EmailAddress(string name, string address, string routingType, MailboxType mailboxType);
    internal EmailAddress(string name, string address, string routingType, MailboxType mailboxType, ItemId itemId);
    internal EmailAddress(EmailAddress mailbox);
    public string get_Name();
    public void set_Name(string value);
    public string get_Address();
    public void set_Address(string value);
    public string get_RoutingType();
    public void set_RoutingType(string value);
    public Nullable`1<MailboxType> get_MailboxType();
    public void set_MailboxType(Nullable`1<MailboxType> value);
    public ItemId get_Id();
    public void set_Id(ItemId value);
    public static EmailAddress op_Implicit(string smtpAddress);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    private sealed virtual override string Microsoft.Exchange.WebServices.Data.ISearchStringProvider.GetSearchString();
    public virtual string ToString();
}
public class Microsoft.Exchange.WebServices.Data.EmailAddressCollection : ComplexPropertyCollection`1<EmailAddress> {
    private string collectionItemXmlElementName;
    internal EmailAddressCollection(string collectionItemXmlElementName);
    public void Add(EmailAddress emailAddress);
    public void AddRange(IEnumerable`1<EmailAddress> emailAddresses);
    public EmailAddress Add(string smtpAddress);
    public void AddRange(IEnumerable`1<string> smtpAddresses);
    public EmailAddress Add(string name, string smtpAddress);
    public void Clear();
    public void RemoveAt(int index);
    public bool Remove(EmailAddress emailAddress);
    internal virtual EmailAddress CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(EmailAddress emailAddress);
    internal virtual bool ShouldWriteToRequest();
}
[DefaultMemberAttribute("Item")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.EmailAddressDictionary : DictionaryProperty`2<EmailAddressKey, EmailAddressEntry> {
    public EmailAddress Item { get; public set; }
    internal virtual string GetFieldURI();
    internal virtual EmailAddressEntry CreateEntryInstance();
    public EmailAddress get_Item(EmailAddressKey key);
    public void set_Item(EmailAddressKey key, EmailAddress value);
    public bool TryGetValue(EmailAddressKey key, EmailAddress& emailAddress);
}
public class Microsoft.Exchange.WebServices.Data.EmailAddressEntity : ExtractedEntity {
    [CompilerGeneratedAttribute]
private string <EmailAddress>k__BackingField;
    public string EmailAddress { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_EmailAddress();
    [CompilerGeneratedAttribute]
internal void set_EmailAddress(string value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.EmailAddressEntityCollection : ComplexPropertyCollection`1<EmailAddressEntity> {
    internal EmailAddressEntityCollection(IEnumerable`1<EmailAddressEntity> collection);
    internal virtual EmailAddressEntity CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(EmailAddressEntity complexProperty);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.EmailAddressEntry : DictionaryEntryProperty`1<EmailAddressKey> {
    private EmailAddress emailAddress;
    public EmailAddress EmailAddress { get; public set; }
    internal EmailAddressEntry(EmailAddressKey key, EmailAddress emailAddress);
    internal virtual void ReadAttributesFromXml(EwsServiceXmlReader reader);
    internal virtual void ReadTextValueFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    public EmailAddress get_EmailAddress();
    public void set_EmailAddress(EmailAddress value);
    private void EmailAddressChanged(ComplexProperty complexProperty);
}
public enum Microsoft.Exchange.WebServices.Data.EmailAddressKey : Enum {
    public int value__;
    public static EmailAddressKey EmailAddress1;
    public static EmailAddressKey EmailAddress2;
    public static EmailAddressKey EmailAddress3;
}
public class Microsoft.Exchange.WebServices.Data.EmailInsightValue : InsightValue {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private long <LastEmailDateUtcTicks>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Body>k__BackingField;
    [CompilerGeneratedAttribute]
private ProfileInsightValue <LastEmailSender>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EmailsCount>k__BackingField;
    public string Id { get; internal set; }
    public string ThreadId { get; internal set; }
    public string Subject { get; internal set; }
    public long LastEmailDateUtcTicks { get; internal set; }
    public string Body { get; internal set; }
    public ProfileInsightValue LastEmailSender { get; internal set; }
    public int EmailsCount { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_ThreadId();
    [CompilerGeneratedAttribute]
internal void set_ThreadId(string value);
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
internal void set_Subject(string value);
    [CompilerGeneratedAttribute]
public long get_LastEmailDateUtcTicks();
    [CompilerGeneratedAttribute]
internal void set_LastEmailDateUtcTicks(long value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
internal void set_Body(string value);
    [CompilerGeneratedAttribute]
public ProfileInsightValue get_LastEmailSender();
    [CompilerGeneratedAttribute]
internal void set_LastEmailSender(ProfileInsightValue value);
    [CompilerGeneratedAttribute]
public int get_EmailsCount();
    [CompilerGeneratedAttribute]
internal void set_EmailsCount(int value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
[AttachableAttribute]
[ServiceObjectDefinitionAttribute("Message")]
public class Microsoft.Exchange.WebServices.Data.EmailMessage : Item {
    public EmailAddressCollection ToRecipients { get; }
    public EmailAddressCollection BccRecipients { get; }
    public EmailAddressCollection Likers { get; }
    public EmailAddressCollection CcRecipients { get; }
    public string ConversationTopic { get; }
    public Byte[] ConversationIndex { get; }
    public EmailAddress From { get; public set; }
    public bool IsAssociated { get; public set; }
    public bool IsDeliveryReceiptRequested { get; public set; }
    public bool IsRead { get; public set; }
    public bool IsReadReceiptRequested { get; public set; }
    public Nullable`1<bool> IsResponseRequested { get; public set; }
    public string InternetMessageId { get; }
    public string References { get; public set; }
    public EmailAddressCollection ReplyTo { get; }
    public EmailAddress Sender { get; public set; }
    public EmailAddress ReceivedBy { get; }
    public EmailAddress ReceivedRepresenting { get; }
    public ApprovalRequestData ApprovalRequestData { get; }
    public VotingInformation VotingInformation { get; }
    public EmailMessage(ExchangeService service);
    internal EmailMessage(ItemAttachment parentAttachment);
    public static Task`1<EmailMessage> Bind(ExchangeService service, ItemId id, PropertySet propertySet, CancellationToken token);
    public static Task`1<EmailMessage> Bind(ExchangeService service, ItemId id);
    internal virtual ServiceObjectSchema GetSchema();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.EmailMessage/<InternalSend>d__6")]
private Task InternalSend(FolderId parentFolderId, MessageDisposition messageDisposition, CancellationToken token);
    public ResponseMessage CreateReply(bool replyAll);
    public ResponseMessage CreateForward();
    public Task Reply(MessageBody bodyPrefix, bool replyAll);
    public Task Forward(MessageBody bodyPrefix, EmailAddress[] toRecipients);
    public Task Forward(MessageBody bodyPrefix, IEnumerable`1<EmailAddress> toRecipients);
    public Task Send(CancellationToken token);
    public Task SendAndSaveCopy(FolderId destinationFolderId, CancellationToken token);
    public Task SendAndSaveCopy(WellKnownFolderName destinationFolderName, CancellationToken token);
    public Task SendAndSaveCopy(CancellationToken token);
    public Task SuppressReadReceipt(CancellationToken token);
    public EmailAddressCollection get_ToRecipients();
    public EmailAddressCollection get_BccRecipients();
    public EmailAddressCollection get_Likers();
    public EmailAddressCollection get_CcRecipients();
    public string get_ConversationTopic();
    public Byte[] get_ConversationIndex();
    public EmailAddress get_From();
    public void set_From(EmailAddress value);
    public bool get_IsAssociated();
    public void set_IsAssociated(bool value);
    public bool get_IsDeliveryReceiptRequested();
    public void set_IsDeliveryReceiptRequested(bool value);
    public bool get_IsRead();
    public void set_IsRead(bool value);
    public bool get_IsReadReceiptRequested();
    public void set_IsReadReceiptRequested(bool value);
    public Nullable`1<bool> get_IsResponseRequested();
    public void set_IsResponseRequested(Nullable`1<bool> value);
    public string get_InternetMessageId();
    public string get_References();
    public void set_References(string value);
    public EmailAddressCollection get_ReplyTo();
    public EmailAddress get_Sender();
    public void set_Sender(EmailAddress value);
    public EmailAddress get_ReceivedBy();
    public EmailAddress get_ReceivedRepresenting();
    public ApprovalRequestData get_ApprovalRequestData();
    public VotingInformation get_VotingInformation();
}
[SchemaAttribute]
public class Microsoft.Exchange.WebServices.Data.EmailMessageSchema : ItemSchema {
    public static PropertyDefinition ToRecipients;
    public static PropertyDefinition BccRecipients;
    public static PropertyDefinition CcRecipients;
    public static PropertyDefinition ConversationIndex;
    public static PropertyDefinition ConversationTopic;
    public static PropertyDefinition From;
    public static PropertyDefinition IsDeliveryReceiptRequested;
    public static PropertyDefinition IsRead;
    public static PropertyDefinition IsReadReceiptRequested;
    public static PropertyDefinition IsResponseRequested;
    public static PropertyDefinition InternetMessageId;
    public static PropertyDefinition References;
    public static PropertyDefinition ReplyTo;
    public static PropertyDefinition Sender;
    public static PropertyDefinition ReceivedBy;
    public static PropertyDefinition ReceivedRepresenting;
    public static PropertyDefinition ApprovalRequestData;
    public static PropertyDefinition VotingInformation;
    public static PropertyDefinition Likers;
    internal static EmailMessageSchema Instance;
    private static EmailMessageSchema();
    internal virtual void RegisterProperties();
}
public enum Microsoft.Exchange.WebServices.Data.EmailPosition : Enum {
    public int value__;
    public static EmailPosition LatestReply;
    public static EmailPosition Other;
    public static EmailPosition Subject;
    public static EmailPosition Signature;
}
public class Microsoft.Exchange.WebServices.Data.EmailUserEntity : ComplexProperty {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserId>k__BackingField;
    public string Name { get; internal set; }
    public string UserId { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_UserId();
    [CompilerGeneratedAttribute]
internal void set_UserId(string value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.EmailUserEntityCollection : ComplexPropertyCollection`1<EmailUserEntity> {
    internal EmailUserEntityCollection(IEnumerable`1<EmailUserEntity> collection);
    internal virtual EmailUserEntity CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(EmailUserEntity complexProperty);
}
internal class Microsoft.Exchange.WebServices.Data.EmptyFolderRequest : DeleteRequest`1<ServiceResponse> {
    private FolderIdWrapperList folderIds;
    [CompilerGeneratedAttribute]
private bool <DeleteSubFolders>k__BackingField;
    internal FolderIdWrapperList FolderIds { get; }
    internal bool DeleteSubFolders { get; internal set; }
    internal EmptyFolderRequest(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual void Validate();
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual ServiceResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal FolderIdWrapperList get_FolderIds();
    [CompilerGeneratedAttribute]
internal bool get_DeleteSubFolders();
    [CompilerGeneratedAttribute]
internal void set_DeleteSubFolders(bool value);
}
internal class Microsoft.Exchange.WebServices.Data.EndDateRecurrenceRange : RecurrenceRange {
    private DateTime endDate;
    internal string XmlElementName { get; }
    public DateTime EndDate { get; public set; }
    public EndDateRecurrenceRange(DateTime startDate, DateTime endDate);
    internal virtual string get_XmlElementName();
    internal virtual void SetupRecurrence(Recurrence recurrence);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    public DateTime get_EndDate();
    public void set_EndDate(DateTime value);
}
public class Microsoft.Exchange.WebServices.Data.EnhancedLocation : ComplexProperty {
    private string displayName;
    private string annotation;
    private PersonaPostalAddress personaPostalAddress;
    public string DisplayName { get; public set; }
    public string Annotation { get; public set; }
    public PersonaPostalAddress PersonaPostalAddress { get; public set; }
    public EnhancedLocation(string displayName);
    public EnhancedLocation(string displayName, string annotation);
    public EnhancedLocation(string displayName, string annotation, PersonaPostalAddress personaPostalAddress);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_Annotation();
    public void set_Annotation(string value);
    public PersonaPostalAddress get_PersonaPostalAddress();
    public void set_PersonaPostalAddress(PersonaPostalAddress value);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual void InternalValidate();
    private void PersonaPostalAddress_OnChange(ComplexProperty complexProperty);
}
public class Microsoft.Exchange.WebServices.Data.EntityExtractionResult : ComplexProperty {
    [CompilerGeneratedAttribute]
private AddressEntityCollection <Addresses>k__BackingField;
    [CompilerGeneratedAttribute]
private MeetingSuggestionCollection <MeetingSuggestions>k__BackingField;
    [CompilerGeneratedAttribute]
private TaskSuggestionCollection <TaskSuggestions>k__BackingField;
    [CompilerGeneratedAttribute]
private EmailAddressEntityCollection <EmailAddresses>k__BackingField;
    [CompilerGeneratedAttribute]
private ContactEntityCollection <Contacts>k__BackingField;
    [CompilerGeneratedAttribute]
private UrlEntityCollection <Urls>k__BackingField;
    [CompilerGeneratedAttribute]
private PhoneEntityCollection <PhoneNumbers>k__BackingField;
    public AddressEntityCollection Addresses { get; internal set; }
    public MeetingSuggestionCollection MeetingSuggestions { get; internal set; }
    public TaskSuggestionCollection TaskSuggestions { get; internal set; }
    public EmailAddressEntityCollection EmailAddresses { get; internal set; }
    public ContactEntityCollection Contacts { get; internal set; }
    public UrlEntityCollection Urls { get; internal set; }
    public PhoneEntityCollection PhoneNumbers { get; internal set; }
    [CompilerGeneratedAttribute]
public AddressEntityCollection get_Addresses();
    [CompilerGeneratedAttribute]
internal void set_Addresses(AddressEntityCollection value);
    [CompilerGeneratedAttribute]
public MeetingSuggestionCollection get_MeetingSuggestions();
    [CompilerGeneratedAttribute]
internal void set_MeetingSuggestions(MeetingSuggestionCollection value);
    [CompilerGeneratedAttribute]
public TaskSuggestionCollection get_TaskSuggestions();
    [CompilerGeneratedAttribute]
internal void set_TaskSuggestions(TaskSuggestionCollection value);
    [CompilerGeneratedAttribute]
public EmailAddressEntityCollection get_EmailAddresses();
    [CompilerGeneratedAttribute]
internal void set_EmailAddresses(EmailAddressEntityCollection value);
    [CompilerGeneratedAttribute]
public ContactEntityCollection get_Contacts();
    [CompilerGeneratedAttribute]
internal void set_Contacts(ContactEntityCollection value);
    [CompilerGeneratedAttribute]
public UrlEntityCollection get_Urls();
    [CompilerGeneratedAttribute]
internal void set_Urls(UrlEntityCollection value);
    [CompilerGeneratedAttribute]
public PhoneEntityCollection get_PhoneNumbers();
    [CompilerGeneratedAttribute]
internal void set_PhoneNumbers(PhoneEntityCollection value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
public enum Microsoft.Exchange.WebServices.Data.Enumerations.ConsentState : Enum {
    public int value__;
    public static ConsentState NotResponded;
    public static ConsentState NotConsented;
    public static ConsentState Consented;
}
public enum Microsoft.Exchange.WebServices.Data.EventType : Enum {
    public int value__;
    [EwsEnumAttribute("StatusEvent")]
public static EventType Status;
    [EwsEnumAttribute("NewMailEvent")]
public static EventType NewMail;
    [EwsEnumAttribute("DeletedEvent")]
public static EventType Deleted;
    [EwsEnumAttribute("ModifiedEvent")]
public static EventType Modified;
    [EwsEnumAttribute("MovedEvent")]
public static EventType Moved;
    [EwsEnumAttribute("CopiedEvent")]
public static EventType Copied;
    [EwsEnumAttribute("CreatedEvent")]
public static EventType Created;
    [RequiredServerVersionAttribute("2")]
[EwsEnumAttribute("FreeBusyChangedEvent")]
public static EventType FreeBusyChanged;
}
[AttributeUsageAttribute("384")]
internal class Microsoft.Exchange.WebServices.Data.EwsEnumAttribute : Attribute {
    private string schemaName;
    internal string SchemaName { get; }
    internal EwsEnumAttribute(string schemaName);
    internal string get_SchemaName();
}
internal class Microsoft.Exchange.WebServices.Data.EwsHttpClientException : Exception {
    [CompilerGeneratedAttribute]
private bool <IsProtocolError>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpResponseMessage <Response>k__BackingField;
    public bool IsProtocolError { get; }
    public HttpResponseMessage Response { get; }
    public EwsHttpClientException(Exception e);
    public EwsHttpClientException(HttpResponseMessage response);
    [CompilerGeneratedAttribute]
public bool get_IsProtocolError();
    [CompilerGeneratedAttribute]
public HttpResponseMessage get_Response();
}
internal class Microsoft.Exchange.WebServices.Data.EwsHttpWebRequest : object {
    private HttpClient _httpClient;
    private HttpClientHandler _httpClientHandler;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Accept>k__BackingField;
    [CompilerGeneratedAttribute]
private X509CertificateCollection <ClientCertificates>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <RequestUri>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserAgent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConnectionGroupName>k__BackingField;
    public string Content { get; public set; }
    public string Accept { get; public set; }
    private bool Microsoft.Exchange.WebServices.Data.IEwsHttpWebRequest.AllowAutoRedirect { get; private set; }
    public X509CertificateCollection ClientCertificates { get; public set; }
    public string ContentType { get; public set; }
    public CookieContainer CookieContainer { get; public set; }
    public ICredentials Credentials { get; public set; }
    private HttpRequestHeaders Microsoft.Exchange.WebServices.Data.IEwsHttpWebRequest.Headers { get; }
    public string Method { get; public set; }
    public IWebProxy Proxy { get; public set; }
    public bool PreAuthenticate { get; public set; }
    public Uri RequestUri { get; }
    public int Timeout { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    public string UserAgent { get; public set; }
    public bool KeepAlive { get; public set; }
    public string ConnectionGroupName { get; public set; }
    internal EwsHttpWebRequest(Uri uri);
    public sealed virtual void Abort();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Content();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Content(string value);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.EwsHttpWebRequest/<GetResponse>d__8")]
public sealed virtual Task`1<IEwsHttpWebResponse> GetResponse(CancellationToken token);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Accept();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Accept(string value);
    private sealed virtual override bool Microsoft.Exchange.WebServices.Data.IEwsHttpWebRequest.get_AllowAutoRedirect();
    private sealed virtual override void Microsoft.Exchange.WebServices.Data.IEwsHttpWebRequest.set_AllowAutoRedirect(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual X509CertificateCollection get_ClientCertificates();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ClientCertificates(X509CertificateCollection value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentType();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentType(string value);
    public sealed virtual CookieContainer get_CookieContainer();
    public sealed virtual void set_CookieContainer(CookieContainer value);
    public sealed virtual ICredentials get_Credentials();
    public sealed virtual void set_Credentials(ICredentials value);
    private sealed virtual override HttpRequestHeaders Microsoft.Exchange.WebServices.Data.IEwsHttpWebRequest.get_Headers();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Method();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Method(string value);
    public sealed virtual IWebProxy get_Proxy();
    public sealed virtual void set_Proxy(IWebProxy value);
    public sealed virtual bool get_PreAuthenticate();
    public sealed virtual void set_PreAuthenticate(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual Uri get_RequestUri();
    public sealed virtual int get_Timeout();
    public sealed virtual void set_Timeout(int value);
    public sealed virtual bool get_UseDefaultCredentials();
    public sealed virtual void set_UseDefaultCredentials(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_UserAgent();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserAgent(string value);
    public sealed virtual bool get_KeepAlive();
    public sealed virtual void set_KeepAlive(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ConnectionGroupName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ConnectionGroupName(string value);
}
internal class Microsoft.Exchange.WebServices.Data.EwsHttpWebRequestFactory : object {
    private sealed virtual override IEwsHttpWebRequest Microsoft.Exchange.WebServices.Data.IEwsHttpWebRequestFactory.CreateRequest(Uri uri);
    private sealed virtual override IEwsHttpWebResponse Microsoft.Exchange.WebServices.Data.IEwsHttpWebRequestFactory.CreateExceptionResponse(EwsHttpClientException exception);
}
internal class Microsoft.Exchange.WebServices.Data.EwsHttpWebResponse : object {
    private HttpResponseMessage response;
    private string Microsoft.Exchange.WebServices.Data.IEwsHttpWebResponse.ContentEncoding { get; }
    private string Microsoft.Exchange.WebServices.Data.IEwsHttpWebResponse.ContentType { get; }
    private HttpResponseHeaders Microsoft.Exchange.WebServices.Data.IEwsHttpWebResponse.Headers { get; }
    private Uri Microsoft.Exchange.WebServices.Data.IEwsHttpWebResponse.ResponseUri { get; }
    private HttpStatusCode Microsoft.Exchange.WebServices.Data.IEwsHttpWebResponse.StatusCode { get; }
    private string Microsoft.Exchange.WebServices.Data.IEwsHttpWebResponse.StatusDescription { get; }
    private Version Microsoft.Exchange.WebServices.Data.IEwsHttpWebResponse.ProtocolVersion { get; }
    internal EwsHttpWebResponse(HttpResponseMessage response);
    private sealed virtual override void Microsoft.Exchange.WebServices.Data.IEwsHttpWebResponse.Close();
    private sealed virtual override Task`1<Stream> Microsoft.Exchange.WebServices.Data.IEwsHttpWebResponse.GetResponseStream();
    private sealed virtual override string Microsoft.Exchange.WebServices.Data.IEwsHttpWebResponse.get_ContentEncoding();
    private sealed virtual override string Microsoft.Exchange.WebServices.Data.IEwsHttpWebResponse.get_ContentType();
    private sealed virtual override HttpResponseHeaders Microsoft.Exchange.WebServices.Data.IEwsHttpWebResponse.get_Headers();
    private sealed virtual override Uri Microsoft.Exchange.WebServices.Data.IEwsHttpWebResponse.get_ResponseUri();
    private sealed virtual override HttpStatusCode Microsoft.Exchange.WebServices.Data.IEwsHttpWebResponse.get_StatusCode();
    private sealed virtual override string Microsoft.Exchange.WebServices.Data.IEwsHttpWebResponse.get_StatusDescription();
    private sealed virtual override Version Microsoft.Exchange.WebServices.Data.IEwsHttpWebResponse.get_ProtocolVersion();
    private sealed virtual override void System.IDisposable.Dispose();
}
internal class Microsoft.Exchange.WebServices.Data.EwsServiceMultiResponseXmlReader : EwsServiceXmlReader {
    private EwsServiceMultiResponseXmlReader(Stream stream, ExchangeService service);
    internal static EwsServiceMultiResponseXmlReader Create(Stream stream, ExchangeService service);
    private static XmlReader CreateXmlReader(Stream stream);
    protected virtual XmlReader InitializeXmlReader(Stream stream);
}
internal class Microsoft.Exchange.WebServices.Data.EwsServiceXmlReader : EwsXmlReader {
    private ExchangeService service;
    public ExchangeService Service { get; }
    internal EwsServiceXmlReader(Stream stream, ExchangeService service);
    private Nullable`1<DateTime> ConvertStringToDateTime(string dateTimeString);
    private Nullable`1<DateTime> ConvertStringToUnspecifiedDate(string dateTimeString);
    public Nullable`1<DateTime> ReadElementValueAsDateTime();
    public Nullable`1<DateTime> ReadElementValueAsUnspecifiedDate();
    public DateTime ReadElementValueAsUnbiasedDateTimeScopedToServiceTimeZone();
    public Nullable`1<DateTime> ReadElementValueAsDateTime(XmlNamespace xmlNamespace, string localName);
    public List`1<TServiceObject> ReadServiceObjectsCollectionFromXml(XmlNamespace collectionXmlNamespace, string collectionXmlElementName, GetObjectInstanceDelegate`1<TServiceObject> getObjectInstanceDelegate, bool clearPropertyBag, PropertySet requestedPropertySet, bool summaryPropertiesOnly);
    public List`1<TServiceObject> ReadServiceObjectsCollectionFromXml(string collectionXmlElementName, GetObjectInstanceDelegate`1<TServiceObject> getObjectInstanceDelegate, bool clearPropertyBag, PropertySet requestedPropertySet, bool summaryPropertiesOnly);
    public ExchangeService get_Service();
}
internal class Microsoft.Exchange.WebServices.Data.EwsServiceXmlWriter : object {
    private static int BufferSize;
    private static Encoding utf8Encoding;
    private bool isDisposed;
    private ExchangeServiceBase service;
    private XmlWriter xmlWriter;
    private bool isTimeZoneHeaderEmitted;
    private bool requireWSSecurityUtilityNamespace;
    public XmlWriter InternalWriter { get; }
    public ExchangeServiceBase Service { get; }
    public bool IsTimeZoneHeaderEmitted { get; public set; }
    public bool RequireWSSecurityUtilityNamespace { get; public set; }
    internal EwsServiceXmlWriter(ExchangeServiceBase service, Stream stream);
    private static EwsServiceXmlWriter();
    internal bool TryConvertObjectToString(object value, String& strValue);
    public sealed virtual void Dispose();
    public void Flush();
    public void WriteStartElement(XmlNamespace xmlNamespace, string localName);
    public void WriteEndElement();
    public void WriteAttributeValue(string localName, object value);
    public void WriteAttributeValue(string localName, bool alwaysWriteEmptyString, object value);
    public void WriteAttributeValue(string namespacePrefix, string localName, object value);
    internal void WriteAttributeString(string localName, string stringValue);
    internal void WriteAttributeString(string namespacePrefix, string localName, string stringValue);
    public void WriteValue(string value, string name);
    internal void WriteElementValue(XmlNamespace xmlNamespace, string localName, string displayName, object value);
    public void WriteNode(XmlNode xmlNode);
    public void WriteElementValue(XmlNamespace xmlNamespace, string localName, object value);
    public void WriteBase64ElementValue(Byte[] buffer);
    public void WriteBase64ElementValue(Stream stream);
    public XmlWriter get_InternalWriter();
    public ExchangeServiceBase get_Service();
    public bool get_IsTimeZoneHeaderEmitted();
    public void set_IsTimeZoneHeaderEmitted(bool value);
    public bool get_RequireWSSecurityUtilityNamespace();
    public void set_RequireWSSecurityUtilityNamespace(bool value);
}
internal class Microsoft.Exchange.WebServices.Data.EwsTraceListener : object {
    private TextWriter writer;
    internal EwsTraceListener(TextWriter writer);
    public sealed virtual void Trace(string traceType, string traceMessage);
}
[ExtensionAttribute]
internal static class Microsoft.Exchange.WebServices.Data.EwsUtilities : object {
    private static LazyMember`1<ServiceObjectInfo> serviceObjectInfo;
    private static LazyMember`1<string> buildVersion;
    private static LazyMember`1<Dictionary`2<Type, Dictionary`2<Enum, ExchangeVersion>>> enumVersionDictionaries;
    private static LazyMember`1<Dictionary`2<Type, Dictionary`2<string, Enum>>> schemaToEnumDictionaries;
    private static LazyMember`1<Dictionary`2<Type, Dictionary`2<Enum, string>>> enumToSchemaDictionaries;
    private static LazyMember`1<Dictionary`2<string, string>> typeNameToShortNameMap;
    internal static string XSFalse;
    internal static string XSTrue;
    internal static string EwsTypesNamespacePrefix;
    internal static string EwsMessagesNamespacePrefix;
    internal static string EwsErrorsNamespacePrefix;
    internal static string EwsSoapNamespacePrefix;
    internal static string EwsXmlSchemaInstanceNamespacePrefix;
    internal static string PassportSoapFaultNamespacePrefix;
    internal static string WSTrustFebruary2005NamespacePrefix;
    internal static string WSAddressingNamespacePrefix;
    internal static string AutodiscoverSoapNamespacePrefix;
    internal static string WSSecurityUtilityNamespacePrefix;
    internal static string WSSecuritySecExtNamespacePrefix;
    internal static string EwsTypesNamespace;
    internal static string EwsMessagesNamespace;
    internal static string EwsErrorsNamespace;
    internal static string EwsSoapNamespace;
    internal static string EwsSoap12Namespace;
    internal static string EwsXmlSchemaInstanceNamespace;
    internal static string PassportSoapFaultNamespace;
    internal static string WSTrustFebruary2005Namespace;
    internal static string WSAddressingNamespace;
    internal static string AutodiscoverSoapNamespace;
    internal static string WSSecurityUtilityNamespace;
    internal static string WSSecuritySecExtNamespace;
    internal static string DomainRegex;
    internal static string BuildVersion { get; }
    private static EwsUtilities();
    internal static void Assert(bool condition, string caller, string message);
    internal static string GetNamespacePrefix(XmlNamespace xmlNamespace);
    internal static string GetNamespaceUri(XmlNamespace xmlNamespace);
    internal static XmlNamespace GetNamespaceFromUri(string namespaceUri);
    internal static TServiceObject CreateEwsObjectFromXmlElementName(ExchangeService service, string xmlElementName);
    internal static Item CreateItemFromItemClass(ItemAttachment itemAttachment, Type itemClass, bool isNew);
    internal static Item CreateItemFromXmlElementName(ItemAttachment itemAttachment, string xmlElementName);
    internal static Type GetItemTypeFromXmlElementName(string xmlElementName);
    internal static TItem FindFirstItemOfType(IEnumerable`1<Item> items);
    private static void WriteTraceStartElement(XmlWriter writer, string traceTag, bool includeVersion);
    internal static string FormatLogMessage(string entryKind, string logEntry);
    private static void FormatHttpHeaders(StringBuilder sb, HttpHeaders headers);
    internal static string FormatHttpRequestHeaders(IEwsHttpWebRequest request);
    internal static string FormatHttpResponseHeaders(IEwsHttpWebResponse response);
    private static string FormatHttpHeaders(HttpHeaders headers);
    internal static string FormatLogMessageWithXmlContent(string entryKind, MemoryStream memoryStream);
    internal static void CopyStream(Stream source, Stream target);
    internal static string get_BuildVersion();
    internal static string BoolToXSBool(bool value);
    internal static void ParseEnumValueList(IList`1<T> list, string value, Char[] separators);
    internal static string SerializeEnum(Enum value);
    internal static T Parse(string value);
    internal static bool TryParse(string value, T& result);
    internal static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone);
    internal static DateTime ParseAsUnbiasedDatetimescopedToServicetimeZone(string dateString, ExchangeService service);
    internal static bool IsLocalTimeZone(TimeZoneInfo timeZone);
    internal static string DateTimeToXSDate(DateTime date);
    internal static string DateTimeToXSDateTime(DateTime dateTime);
    internal static DayOfWeek EwsToSystemDayOfWeek(DayOfTheWeek dayOfTheWeek);
    internal static DayOfTheWeek SystemToEwsDayOfTheWeek(DayOfWeek dayOfWeek);
    internal static string TimeSpanToXSDuration(TimeSpan timeSpan);
    internal static TimeSpan XSDurationToTimeSpan(string xsDuration);
    public static string TimeSpanToXSTime(TimeSpan timeSpan);
    public static string GetPrintableTypeName(Type type);
    private static string GetSimplifiedTypeName(string typeName);
    internal static string DomainFromEmailAddress(string emailAddress);
    internal static void ValidateParamAllowNull(object param, string paramName);
    internal static void ValidateParam(object param, string paramName);
    internal static void ValidateParamCollection(IEnumerable collection, string paramName);
    internal static void ValidateNonBlankStringParamAllowNull(string param, string paramName);
    internal static void ValidateNonBlankStringParam(string param, string paramName);
    internal static void ValidateEnumVersionValue(Enum enumValue, ExchangeVersion requestVersion);
    internal static void ValidateServiceObjectVersion(ServiceObject serviceObject, ExchangeVersion requestVersion);
    internal static void ValidatePropertyVersion(ExchangeService service, ExchangeVersion minimumServerVersion, string propertyName);
    internal static void ValidateMethodVersion(ExchangeService service, ExchangeVersion minimumServerVersion, string methodName);
    internal static void ValidateClassVersion(ExchangeService service, ExchangeVersion minimumServerVersion, string className);
    internal static void ValidateDomainNameAllowNull(string domainName, string paramName);
    private static ExchangeVersion GetEnumVersion(Type enumType, string enumName);
    private static Dictionary`2<Enum, ExchangeVersion> BuildEnumDict(Type enumType);
    private static string GetEnumSchemaName(Type enumType, string enumName);
    private static Dictionary`2<string, Enum> BuildSchemaToEnumDict(Type enumType);
    private static Dictionary`2<Enum, string> BuildEnumToSchemaDict(Type enumType);
    internal static int GetEnumeratedObjectCount(IEnumerable objects);
    internal static object GetEnumeratedObjectAt(IEnumerable objects, int index);
    [ExtensionAttribute]
internal static int CountMatchingChars(string str, Predicate`1<char> charPredicate);
    [ExtensionAttribute]
internal static bool TrueForAll(IEnumerable`1<T> collection, Predicate`1<T> predicate);
    [ExtensionAttribute]
internal static void ForEach(IEnumerable`1<T> collection, Action`1<T> action);
}
internal class Microsoft.Exchange.WebServices.Data.EwsXmlReader : object {
    private static int ReadWriteBufferSize;
    private XmlNodeType prevNodeType;
    private XmlReader xmlReader;
    public bool HasAttributes { get; }
    public bool IsEmptyElement { get; }
    public string LocalName { get; }
    public string NamespacePrefix { get; }
    public string NamespaceUri { get; }
    public XmlNodeType NodeType { get; }
    public XmlNodeType PrevNodeType { get; }
    public EwsXmlReader(Stream stream);
    protected virtual XmlReader InitializeXmlReader(Stream stream);
    private static string FormatElementName(string namespacePrefix, string localElementName);
    private void InternalReadElement(XmlNamespace xmlNamespace, string localName, XmlNodeType nodeType);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.EwsXmlReader/<InternalReadElementAsync>d__7")]
private Task InternalReadElementAsync(XmlNamespace xmlNamespace, string localName, XmlNodeType nodeType, CancellationToken token);
    private void InternalReadElement(string namespacePrefix, string localName, XmlNodeType nodeType);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.EwsXmlReader/<InternalReadElementAsync>d__9")]
private Task InternalReadElementAsync(string namespacePrefix, string localName, XmlNodeType nodeType, CancellationToken token);
    public void Read();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.EwsXmlReader/<ReadAsync>d__11")]
public Task ReadAsync(CancellationToken token);
    public void Read(XmlNodeType nodeType);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.EwsXmlReader/<ReadAsync>d__13")]
public Task ReadAsync(XmlNodeType nodeType, CancellationToken token);
    public string ReadAttributeValue(XmlNamespace xmlNamespace, string attributeName);
    public string ReadAttributeValue(string attributeName);
    public T ReadAttributeValue(string attributeName);
    public Nullable`1<T> ReadNullableAttributeValue(string attributeName);
    public string ReadElementValue(string namespacePrefix, string localName);
    public string ReadElementValue(XmlNamespace xmlNamespace, string localName);
    public string ReadElementValue();
    public T ReadElementValue(XmlNamespace xmlNamespace, string localName);
    public T ReadElementValue();
    private static bool IsTextualNode(XmlNodeType nodeType);
    public string ReadValue();
    public bool TryReadValue(String& value);
    public T ReadValue();
    public Byte[] ReadBase64ElementValue();
    public void ReadBase64ElementValue(Stream outputStream);
    public void ReadStartElement(string namespacePrefix, string localName);
    public void ReadStartElement(XmlNamespace xmlNamespace, string localName);
    public Task ReadStartElementAsync(string namespacePrefix, string localName, CancellationToken token);
    public Task ReadStartElementAsync(XmlNamespace xmlNamespace, string localName, CancellationToken token);
    public void ReadEndElement(string namespacePrefix, string elementName);
    public void ReadEndElement(XmlNamespace xmlNamespace, string localName);
    public Task ReadEndElementAsync(string namespacePrefix, string elementName, CancellationToken token);
    public Task ReadEndElementAsync(XmlNamespace xmlNamespace, string localName, CancellationToken token);
    public void ReadEndElementIfNecessary(XmlNamespace xmlNamespace, string localName);
    public bool IsStartElement(string namespacePrefix, string localName);
    public bool IsStartElement(XmlNamespace xmlNamespace, string localName);
    public bool IsStartElement();
    public bool IsEndElement(string namespacePrefix, string localName);
    public bool IsEndElement(XmlNamespace xmlNamespace, string localName);
    public void SkipElement(string namespacePrefix, string localName);
    public void SkipElement(XmlNamespace xmlNamespace, string localName);
    public void SkipCurrentElement();
    public void EnsureCurrentNodeIsStartElement(XmlNamespace xmlNamespace, string localName);
    public void EnsureCurrentNodeIsStartElement();
    public void EnsureCurrentNodeIsEndElement(XmlNamespace xmlNamespace, string localName);
    public string ReadOuterXml();
    public string ReadInnerXml();
    internal XmlReader GetXmlReaderForNode();
    public void ReadToDescendant(XmlNamespace xmlNamespace, string localName);
    public bool get_HasAttributes();
    public bool get_IsEmptyElement();
    public string get_LocalName();
    public string get_NamespacePrefix();
    public string get_NamespaceUri();
    public XmlNodeType get_NodeType();
    public XmlNodeType get_PrevNodeType();
}
public abstract class Microsoft.Exchange.WebServices.Data.ExchangeCredentials : object {
    internal bool NeedSignature { get; }
    public static ExchangeCredentials op_Implicit(NetworkCredential credentials);
    public static ExchangeCredentials op_Implicit(CredentialCache credentials);
    internal static string GetUriWithoutSuffix(Uri url);
    internal virtual void PreAuthenticate();
    internal virtual void PrepareWebRequest(IEwsHttpWebRequest request);
    internal virtual void EmitExtraSoapHeaderNamespaceAliases(XmlWriter writer);
    internal virtual void SerializeExtraSoapHeaders(XmlWriter writer, string webMethodName);
    internal virtual void SerializeWSSecurityHeaders(XmlWriter writer);
    internal virtual Uri AdjustUrl(Uri url);
    internal virtual bool get_NeedSignature();
    internal virtual void Sign(MemoryStream memoryStream);
}
public class Microsoft.Exchange.WebServices.Data.ExchangeServerInfo : object {
    private int majorVersion;
    private int minorVersion;
    private int majorBuildNumber;
    private int minorBuildNumber;
    private string versionString;
    public int MajorVersion { get; internal set; }
    public int MinorVersion { get; internal set; }
    public int MajorBuildNumber { get; internal set; }
    public int MinorBuildNumber { get; internal set; }
    public string VersionString { get; internal set; }
    internal static ExchangeServerInfo Parse(EwsServiceXmlReader reader);
    public int get_MajorVersion();
    internal void set_MajorVersion(int value);
    public int get_MinorVersion();
    internal void set_MinorVersion(int value);
    public int get_MajorBuildNumber();
    internal void set_MajorBuildNumber(int value);
    public int get_MinorBuildNumber();
    internal void set_MinorBuildNumber(int value);
    public string get_VersionString();
    internal void set_VersionString(string value);
    public virtual string ToString();
}
public class Microsoft.Exchange.WebServices.Data.ExchangeService : ExchangeServiceBase {
    private static string TargetServerVersionHeaderName;
    private Uri url;
    private CultureInfo preferredCulture;
    private DateTimePrecision dateTimePrecision;
    private ImpersonatedUserId impersonatedUserId;
    private PrivilegedUserId privilegedUserId;
    private ManagementRoles managementRoles;
    private IFileAttachmentContentHandler fileAttachmentContentHandler;
    private UnifiedMessaging unifiedMessaging;
    private bool enableScpLookup;
    private bool traceEnablePrettyPrinting;
    private string targetServerVersion;
    private bool exchange2007CompatibilityMode;
    public Uri Url { get; public set; }
    public ImpersonatedUserId ImpersonatedUserId { get; public set; }
    internal PrivilegedUserId PrivilegedUserId { get; internal set; }
    public ManagementRoles ManagementRoles { get; public set; }
    public CultureInfo PreferredCulture { get; public set; }
    public DateTimePrecision DateTimePrecision { get; public set; }
    public IFileAttachmentContentHandler FileAttachmentContentHandler { get; public set; }
    public TimeZoneInfo TimeZone { get; }
    public UnifiedMessaging UnifiedMessaging { get; }
    public bool EnableScpLookup { get; public set; }
    internal bool Exchange2007CompatibilityMode { get; internal set; }
    public bool TraceEnablePrettyPrinting { get; public set; }
    internal string TargetServerVersion { get; internal set; }
    public ExchangeService(TimeZoneInfo timeZone);
    public ExchangeService(ExchangeVersion requestedServerVersion);
    public ExchangeService(ExchangeVersion requestedServerVersion, TimeZoneInfo timeZone);
    internal ExchangeService(string targetServerVersion);
    internal ExchangeService(string targetServerVersion, TimeZoneInfo timeZone);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<InternalCreateResponseObject>d__12")]
internal Task`1<List`1<Item>> InternalCreateResponseObject(ServiceObject responseObject, FolderId parentFolderId, Nullable`1<MessageDisposition> messageDisposition, CancellationToken token);
    internal Task CreateFolder(Folder folder, FolderId parentFolderId, CancellationToken token);
    internal Task UpdateFolder(Folder folder, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<CopyFolder>d__15")]
internal Task`1<Folder> CopyFolder(FolderId folderId, FolderId destinationFolderId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<MoveFolder>d__16")]
internal Task`1<Folder> MoveFolder(FolderId folderId, FolderId destinationFolderId, CancellationToken token);
    private Task`1<ServiceResponseCollection`1<FindFolderResponse>> InternalFindFolders(IEnumerable`1<FolderId> parentFolderIds, SearchFilter searchFilter, FolderView view, ServiceErrorHandling errorHandlingMode, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<FindFolders>d__18")]
public Task`1<FindFoldersResults> FindFolders(FolderId parentFolderId, SearchFilter searchFilter, FolderView view, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<FindFolderResponse>> FindFolders(IEnumerable`1<FolderId> parentFolderIds, SearchFilter searchFilter, FolderView view, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<FindFolders>d__20")]
public Task`1<FindFoldersResults> FindFolders(FolderId parentFolderId, FolderView view, CancellationToken token);
    public Task`1<FindFoldersResults> FindFolders(WellKnownFolderName parentFolderName, SearchFilter searchFilter, FolderView view);
    public Task`1<FindFoldersResults> FindFolders(WellKnownFolderName parentFolderName, FolderView view);
    internal Task`1<ServiceResponseCollection`1<ServiceResponse>> LoadPropertiesForFolder(Folder folder, PropertySet propertySet, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<BindToFolder>d__24")]
internal Task`1<Folder> BindToFolder(FolderId folderId, PropertySet propertySet, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<BindToFolder>d__25`1")]
internal Task`1<TFolder> BindToFolder(FolderId folderId, PropertySet propertySet, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<GetFolderResponse>> BindToFolders(IEnumerable`1<FolderId> folderIds, PropertySet propertySet, CancellationToken token);
    private Task`1<ServiceResponseCollection`1<GetFolderResponse>> InternalBindToFolders(IEnumerable`1<FolderId> folderIds, PropertySet propertySet, ServiceErrorHandling errorHandling, CancellationToken token);
    internal Task`1<ServiceResponseCollection`1<ServiceResponse>> DeleteFolder(FolderId folderId, DeleteMode deleteMode, CancellationToken token);
    internal Task`1<ServiceResponseCollection`1<ServiceResponse>> EmptyFolder(FolderId folderId, DeleteMode deleteMode, bool deleteSubFolders, CancellationToken token);
    internal Task`1<ServiceResponseCollection`1<ServiceResponse>> MarkAllItemsAsRead(FolderId folderId, bool readFlag, bool suppressReadReceipts, CancellationToken token);
    private Task`1<ServiceResponseCollection`1<ServiceResponse>> InternalCreateItems(IEnumerable`1<Item> items, FolderId parentFolderId, Nullable`1<MessageDisposition> messageDisposition, Nullable`1<SendInvitationsMode> sendInvitationsMode, ServiceErrorHandling errorHandling, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<ServiceResponse>> CreateItems(IEnumerable`1<Item> items, FolderId parentFolderId, Nullable`1<MessageDisposition> messageDisposition, Nullable`1<SendInvitationsMode> sendInvitationsMode, CancellationToken token);
    internal Task CreateItem(Item item, FolderId parentFolderId, Nullable`1<MessageDisposition> messageDisposition, Nullable`1<SendInvitationsMode> sendInvitationsMode, CancellationToken token);
    private Task`1<ServiceResponseCollection`1<UpdateItemResponse>> InternalUpdateItems(IEnumerable`1<Item> items, FolderId savedItemsDestinationFolderId, ConflictResolutionMode conflictResolution, Nullable`1<MessageDisposition> messageDisposition, Nullable`1<SendInvitationsOrCancellationsMode> sendInvitationsOrCancellationsMode, ServiceErrorHandling errorHandling, bool suppressReadReceipt, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<UpdateItemResponse>> UpdateItems(IEnumerable`1<Item> items, FolderId savedItemsDestinationFolderId, ConflictResolutionMode conflictResolution, Nullable`1<MessageDisposition> messageDisposition, Nullable`1<SendInvitationsOrCancellationsMode> sendInvitationsOrCancellationsMode);
    public Task`1<ServiceResponseCollection`1<UpdateItemResponse>> UpdateItems(IEnumerable`1<Item> items, FolderId savedItemsDestinationFolderId, ConflictResolutionMode conflictResolution, Nullable`1<MessageDisposition> messageDisposition, Nullable`1<SendInvitationsOrCancellationsMode> sendInvitationsOrCancellationsMode, bool suppressReadReceipts, CancellationToken token);
    internal Task`1<Item> UpdateItem(Item item, FolderId savedItemsDestinationFolderId, ConflictResolutionMode conflictResolution, Nullable`1<MessageDisposition> messageDisposition, Nullable`1<SendInvitationsOrCancellationsMode> sendInvitationsOrCancellationsMode, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<UpdateItem>d__38")]
internal Task`1<Item> UpdateItem(Item item, FolderId savedItemsDestinationFolderId, ConflictResolutionMode conflictResolution, Nullable`1<MessageDisposition> messageDisposition, Nullable`1<SendInvitationsOrCancellationsMode> sendInvitationsOrCancellationsMode, bool suppressReadReceipts, CancellationToken token);
    internal Task SendItem(Item item, FolderId savedCopyDestinationFolderId, CancellationToken token);
    private Task`1<ServiceResponseCollection`1<MoveCopyItemResponse>> InternalCopyItems(IEnumerable`1<ItemId> itemIds, FolderId destinationFolderId, Nullable`1<bool> returnNewItemIds, ServiceErrorHandling errorHandling, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<MoveCopyItemResponse>> CopyItems(IEnumerable`1<ItemId> itemIds, FolderId destinationFolderId, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<MoveCopyItemResponse>> CopyItems(IEnumerable`1<ItemId> itemIds, FolderId destinationFolderId, bool returnNewItemIds, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<CopyItem>d__43")]
internal Task`1<Item> CopyItem(ItemId itemId, FolderId destinationFolderId, CancellationToken token);
    private Task`1<ServiceResponseCollection`1<MoveCopyItemResponse>> InternalMoveItems(IEnumerable`1<ItemId> itemIds, FolderId destinationFolderId, Nullable`1<bool> returnNewItemIds, ServiceErrorHandling errorHandling, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<MoveCopyItemResponse>> MoveItems(IEnumerable`1<ItemId> itemIds, FolderId destinationFolderId, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<MoveCopyItemResponse>> MoveItems(IEnumerable`1<ItemId> itemIds, FolderId destinationFolderId, bool returnNewItemIds, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<MoveItem>d__47")]
internal Task`1<Item> MoveItem(ItemId itemId, FolderId destinationFolderId, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<ArchiveItemResponse>> ArchiveItems(IEnumerable`1<ItemId> itemIds, FolderId sourceFolderId, CancellationToken token);
    internal Task`1<ServiceResponseCollection`1<FindItemResponse`1<TItem>>> FindItems(IEnumerable`1<FolderId> parentFolderIds, SearchFilter searchFilter, string queryString, ViewBase view, Grouping groupBy, ServiceErrorHandling errorHandlingMode, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<FindItems>d__50")]
public Task`1<FindItemsResults`1<Item>> FindItems(FolderId parentFolderId, string queryString, ViewBase view, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<FindItems>d__51")]
public Task`1<FindItemsResults`1<Item>> FindItems(FolderId parentFolderId, string queryString, bool returnHighlightTerms, ViewBase view, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<FindItems>d__52")]
public Task`1<GroupedFindItemsResults`1<Item>> FindItems(FolderId parentFolderId, string queryString, bool returnHighlightTerms, ViewBase view, Grouping groupBy, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<FindItems>d__53")]
public Task`1<FindItemsResults`1<Item>> FindItems(FolderId parentFolderId, SearchFilter searchFilter, ViewBase view, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<FindItems>d__54")]
public Task`1<FindItemsResults`1<Item>> FindItems(FolderId parentFolderId, ViewBase view, CancellationToken token);
    public Task`1<FindItemsResults`1<Item>> FindItems(WellKnownFolderName parentFolderName, string queryString, ViewBase view);
    public Task`1<FindItemsResults`1<Item>> FindItems(WellKnownFolderName parentFolderName, SearchFilter searchFilter, ViewBase view);
    public Task`1<FindItemsResults`1<Item>> FindItems(WellKnownFolderName parentFolderName, ViewBase view, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<FindItems>d__58")]
public Task`1<GroupedFindItemsResults`1<Item>> FindItems(FolderId parentFolderId, string queryString, ViewBase view, Grouping groupBy, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<FindItems>d__59")]
public Task`1<GroupedFindItemsResults`1<Item>> FindItems(FolderId parentFolderId, SearchFilter searchFilter, ViewBase view, Grouping groupBy, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<FindItems>d__60")]
public Task`1<GroupedFindItemsResults`1<Item>> FindItems(FolderId parentFolderId, ViewBase view, Grouping groupBy, CancellationToken token);
    internal Task`1<ServiceResponseCollection`1<FindItemResponse`1<TItem>>> FindItems(FolderId parentFolderId, SearchFilter searchFilter, ViewBase view, Grouping groupBy, CancellationToken token);
    public Task`1<GroupedFindItemsResults`1<Item>> FindItems(WellKnownFolderName parentFolderName, string queryString, ViewBase view, Grouping groupBy, CancellationToken token);
    public Task`1<GroupedFindItemsResults`1<Item>> FindItems(WellKnownFolderName parentFolderName, SearchFilter searchFilter, ViewBase view, Grouping groupBy, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<FindAppointments>d__64")]
public Task`1<FindItemsResults`1<Appointment>> FindAppointments(FolderId parentFolderId, CalendarView calendarView, CancellationToken token);
    public Task`1<FindItemsResults`1<Appointment>> FindAppointments(WellKnownFolderName parentFolderName, CalendarView calendarView, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<ServiceResponse>> LoadPropertiesForItems(IEnumerable`1<Item> items, PropertySet propertySet, CancellationToken token);
    internal Task`1<ServiceResponseCollection`1<ServiceResponse>> InternalLoadPropertiesForItems(IEnumerable`1<Item> items, PropertySet propertySet, ServiceErrorHandling errorHandling, CancellationToken token);
    private Task`1<ServiceResponseCollection`1<GetItemResponse>> InternalBindToItems(IEnumerable`1<ItemId> itemIds, PropertySet propertySet, string anchorMailbox, ServiceErrorHandling errorHandling, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<GetItemResponse>> BindToItems(IEnumerable`1<ItemId> itemIds, PropertySet propertySet, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<GetItemResponse>> BindToGroupItems(IEnumerable`1<ItemId> itemIds, PropertySet propertySet, string anchorMailbox, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<BindToItem>d__71")]
internal Task`1<Item> BindToItem(ItemId itemId, PropertySet propertySet, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<BindToItem>d__72`1")]
internal Task`1<TItem> BindToItem(ItemId itemId, PropertySet propertySet, CancellationToken token);
    private Task`1<ServiceResponseCollection`1<ServiceResponse>> InternalDeleteItems(IEnumerable`1<ItemId> itemIds, DeleteMode deleteMode, Nullable`1<SendCancellationsMode> sendCancellationsMode, Nullable`1<AffectedTaskOccurrence> affectedTaskOccurrences, ServiceErrorHandling errorHandling, bool suppressReadReceipts, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<ServiceResponse>> DeleteItems(IEnumerable`1<ItemId> itemIds, DeleteMode deleteMode, Nullable`1<SendCancellationsMode> sendCancellationsMode, Nullable`1<AffectedTaskOccurrence> affectedTaskOccurrences);
    public Task`1<ServiceResponseCollection`1<ServiceResponse>> DeleteItems(IEnumerable`1<ItemId> itemIds, DeleteMode deleteMode, Nullable`1<SendCancellationsMode> sendCancellationsMode, Nullable`1<AffectedTaskOccurrence> affectedTaskOccurrences, bool suppressReadReceipt, CancellationToken token);
    internal Task`1<ServiceResponseCollection`1<ServiceResponse>> DeleteItem(ItemId itemId, DeleteMode deleteMode, Nullable`1<SendCancellationsMode> sendCancellationsMode, Nullable`1<AffectedTaskOccurrence> affectedTaskOccurrences, CancellationToken token);
    internal Task`1<ServiceResponseCollection`1<ServiceResponse>> DeleteItem(ItemId itemId, DeleteMode deleteMode, Nullable`1<SendCancellationsMode> sendCancellationsMode, Nullable`1<AffectedTaskOccurrence> affectedTaskOccurrences, bool suppressReadReceipts, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<MarkAsJunkResponse>> MarkAsJunk(IEnumerable`1<ItemId> itemIds, bool isJunk, bool moveItem, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<FindPeople>d__79")]
public Task`1<ICollection`1<Persona>> FindPeople(FolderId folderId, SearchFilter searchFilter, ViewBase view, string queryString, CancellationToken token);
    public Task`1<ICollection`1<Persona>> FindPeople(WellKnownFolderName folderName, SearchFilter searchFilter, ViewBase view, string queryString);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<FindPeople>d__81")]
public Task`1<FindPeopleResults> FindPeople(FolderId folderId, SearchFilter searchFilter, ViewBase view, CancellationToken token);
    public Task`1<FindPeopleResults> FindPeople(WellKnownFolderName folderName, SearchFilter searchFilter, ViewBase view);
    public Task`1<IPeopleQueryResults> BrowsePeople(ViewBase view);
    public Task`1<IPeopleQueryResults> BrowsePeople(ViewBase view, Dictionary`2<string, string> context, CancellationToken token);
    public Task`1<IPeopleQueryResults> SearchPeople(ViewBase view, string queryString);
    public Task`1<IPeopleQueryResults> SearchPeople(ViewBase view, string queryString, Dictionary`2<string, string> context, PeopleQueryMode queryMode, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<PerformPeopleQuery>d__87")]
private Task`1<IPeopleQueryResults> PerformPeopleQuery(ViewBase view, string queryString, Dictionary`2<string, string> context, PeopleQueryMode queryMode, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<GetUserPhoto>d__88")]
public Task`1<GetUserPhotoResults> GetUserPhoto(string emailAddress, string userPhotoSize, string entityTag, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<GetPeopleInsights>d__89")]
public Task`1<Collection`1<Person>> GetPeopleInsights(IEnumerable`1<string> emailAddresses, CancellationToken token);
    private Task`1<ServiceResponseCollection`1<GetAttachmentResponse>> InternalGetAttachments(IEnumerable`1<Attachment> attachments, Nullable`1<BodyType> bodyType, IEnumerable`1<PropertyDefinitionBase> additionalProperties, ServiceErrorHandling errorHandling, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<GetAttachmentResponse>> GetAttachments(Attachment[] attachments, Nullable`1<BodyType> bodyType, IEnumerable`1<PropertyDefinitionBase> additionalProperties, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<GetAttachmentResponse>> GetAttachments(String[] attachmentIds, Nullable`1<BodyType> bodyType, IEnumerable`1<PropertyDefinitionBase> additionalProperties, CancellationToken token);
    internal Task`1<ServiceResponseCollection`1<GetAttachmentResponse>> GetAttachment(Attachment attachment, Nullable`1<BodyType> bodyType, IEnumerable`1<PropertyDefinitionBase> additionalProperties, CancellationToken token);
    internal Task`1<ServiceResponseCollection`1<CreateAttachmentResponse>> CreateAttachments(string parentItemId, IEnumerable`1<Attachment> attachments, CancellationToken token);
    internal Task`1<ServiceResponseCollection`1<DeleteAttachmentResponse>> DeleteAttachments(IEnumerable`1<Attachment> attachments, CancellationToken token);
    public Task`1<NameResolutionCollection> ResolveName(string nameToResolve);
    public Task`1<NameResolutionCollection> ResolveName(string nameToResolve, IEnumerable`1<FolderId> parentFolderIds, ResolveNameSearchLocation searchScope, bool returnContactDetails);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<ResolveName>d__98")]
public Task`1<NameResolutionCollection> ResolveName(string nameToResolve, IEnumerable`1<FolderId> parentFolderIds, ResolveNameSearchLocation searchScope, bool returnContactDetails, PropertySet contactDataPropertySet, CancellationToken token);
    public Task`1<NameResolutionCollection> ResolveName(string nameToResolve, ResolveNameSearchLocation searchScope, bool returnContactDetails, PropertySet contactDataPropertySet);
    public Task`1<NameResolutionCollection> ResolveName(string nameToResolve, ResolveNameSearchLocation searchScope, bool returnContactDetails);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<ExpandGroup>d__101")]
public Task`1<ExpandGroupResults> ExpandGroup(EmailAddress emailAddress, CancellationToken token);
    public Task`1<ExpandGroupResults> ExpandGroup(ItemId groupId);
    public Task`1<ExpandGroupResults> ExpandGroup(string smtpAddress);
    public Task`1<ExpandGroupResults> ExpandGroup(string address, string routingType);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<GetPasswordExpirationDate>d__105")]
public Task`1<Nullable`1<DateTime>> GetPasswordExpirationDate(string mailboxSmtpAddress, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<SubscribeToPullNotifications>d__106")]
public Task`1<PullSubscription> SubscribeToPullNotifications(IEnumerable`1<FolderId> folderIds, int timeout, string watermark, CancellationToken token, EventType[] eventTypes);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<SubscribeToPullNotificationsOnAllFolders>d__107")]
public Task`1<PullSubscription> SubscribeToPullNotificationsOnAllFolders(int timeout, string watermark, CancellationToken token, EventType[] eventTypes);
    private SubscribeToPullNotificationsRequest BuildSubscribeToPullNotificationsRequest(IEnumerable`1<FolderId> folderIds, int timeout, string watermark, EventType[] eventTypes);
    internal Task Unsubscribe(string subscriptionId, CancellationToken token);
    private UnsubscribeRequest BuildUnsubscribeRequest(string subscriptionId);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<GetEvents>d__111")]
internal Task`1<GetEventsResults> GetEvents(string subscriptionId, string watermark, CancellationToken token);
    private GetEventsRequest BuildGetEventsRequest(string subscriptionId, string watermark);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<SubscribeToPushNotifications>d__113")]
public Task`1<PushSubscription> SubscribeToPushNotifications(IEnumerable`1<FolderId> folderIds, Uri url, int frequency, string watermark, CancellationToken token, EventType[] eventTypes);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<SubscribeToPushNotificationsOnAllFolders>d__114")]
public Task`1<PushSubscription> SubscribeToPushNotificationsOnAllFolders(Uri url, int frequency, string watermark, CancellationToken token, EventType[] eventTypes);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<SubscribeToPushNotifications>d__115")]
public Task`1<PushSubscription> SubscribeToPushNotifications(IEnumerable`1<FolderId> folderIds, Uri url, int frequency, string watermark, string callerData, CancellationToken token, EventType[] eventTypes);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<SubscribeToGroupPushNotifications>d__116")]
public Task`1<PushSubscription> SubscribeToGroupPushNotifications(string groupMailboxSmtp, Uri url, int frequency, string watermark, string callerData, CancellationToken token, EventType[] eventTypes);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<SubscribeToPushNotificationsOnAllFolders>d__117")]
public Task`1<PushSubscription> SubscribeToPushNotificationsOnAllFolders(Uri url, int frequency, string watermark, string callerData, CancellationToken token, EventType[] eventTypes);
    public Task SetTeamMailbox(EmailAddress emailAddress, Uri sharePointSiteUrl, TeamMailboxLifecycleState state, CancellationToken token);
    public Task UnpinTeamMailbox(EmailAddress emailAddress, CancellationToken token);
    private SubscribeToPushNotificationsRequest BuildSubscribeToPushNotificationsRequest(IEnumerable`1<FolderId> folderIds, Uri url, int frequency, string watermark, string callerData, string anchorMailbox, EventType[] eventTypes);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<SubscribeToStreamingNotifications>d__121")]
public Task`1<StreamingSubscription> SubscribeToStreamingNotifications(IEnumerable`1<FolderId> folderIds, CancellationToken token, EventType[] eventTypes);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<SubscribeToStreamingNotificationsOnAllFolders>d__122")]
public Task`1<StreamingSubscription> SubscribeToStreamingNotificationsOnAllFolders(CancellationToken token, EventType[] eventTypes);
    private SubscribeToStreamingNotificationsRequest BuildSubscribeToStreamingNotificationsRequest(IEnumerable`1<FolderId> folderIds, EventType[] eventTypes);
    public Task`1<ChangeCollection`1<ItemChange>> SyncFolderItems(FolderId syncFolderId, PropertySet propertySet, IEnumerable`1<ItemId> ignoredItemIds, int maxChangesReturned, SyncFolderItemsScope syncScope, string syncState);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<SyncFolderItems>d__125")]
public Task`1<ChangeCollection`1<ItemChange>> SyncFolderItems(FolderId syncFolderId, PropertySet propertySet, IEnumerable`1<ItemId> ignoredItemIds, int maxChangesReturned, int numberOfDays, SyncFolderItemsScope syncScope, string syncState, CancellationToken token);
    private SyncFolderItemsRequest BuildSyncFolderItemsRequest(FolderId syncFolderId, PropertySet propertySet, IEnumerable`1<ItemId> ignoredItemIds, int maxChangesReturned, int numberOfDays, SyncFolderItemsScope syncScope, string syncState);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<SyncFolderHierarchy>d__127")]
public Task`1<ChangeCollection`1<FolderChange>> SyncFolderHierarchy(FolderId syncFolderId, PropertySet propertySet, string syncState, CancellationToken token);
    public Task`1<ChangeCollection`1<FolderChange>> SyncFolderHierarchy(PropertySet propertySet, string syncState);
    private SyncFolderHierarchyRequest BuildSyncFolderHierarchyRequest(FolderId syncFolderId, PropertySet propertySet, string syncState);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<GetUserOofSettings>d__130")]
public Task`1<OofSettings> GetUserOofSettings(string smtpAddress, CancellationToken token);
    public Task SetUserOofSettings(string smtpAddress, OofSettings oofSettings, CancellationToken token);
    public Task`1<GetUserAvailabilityResults> GetUserAvailability(IEnumerable`1<AttendeeInfo> attendees, TimeWindow timeWindow, AvailabilityData requestedData, AvailabilityOptions options, CancellationToken token);
    public Task`1<GetUserAvailabilityResults> GetUserAvailability(IEnumerable`1<AttendeeInfo> attendees, TimeWindow timeWindow, AvailabilityData requestedData);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<GetRoomLists>d__134")]
public Task`1<EmailAddressCollection> GetRoomLists(CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<GetRooms>d__135")]
public Task`1<Collection`1<EmailAddress>> GetRooms(EmailAddress emailAddress, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<FindConversation>d__136")]
public Task`1<ICollection`1<Conversation>> FindConversation(ViewBase view, FolderId folderId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<FindGroupConversation>d__137")]
public Task`1<Collection`1<Conversation>> FindGroupConversation(ViewBase view, FolderId folderId, string anchorMailbox, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<FindConversation>d__138")]
public Task`1<ICollection`1<Conversation>> FindConversation(ViewBase view, FolderId folderId, string queryString, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<FindConversation>d__139")]
public Task`1<FindConversationResults> FindConversation(ViewBase view, FolderId folderId, string queryString, bool returnHighlightTerms, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<FindConversation>d__140")]
public Task`1<FindConversationResults> FindConversation(ViewBase view, FolderId folderId, string queryString, bool returnHighlightTerms, Nullable`1<MailboxSearchLocation> mailboxScope, CancellationToken token);
    internal Task`1<ServiceResponseCollection`1<GetConversationItemsResponse>> InternalGetConversationItems(IEnumerable`1<ConversationRequest> conversations, PropertySet propertySet, IEnumerable`1<FolderId> foldersToIgnore, Nullable`1<ConversationSortOrder> sortOrder, Nullable`1<MailboxSearchLocation> mailboxScope, Nullable`1<int> maxItemsToReturn, string anchorMailbox, ServiceErrorHandling errorHandling, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<GetConversationItemsResponse>> GetConversationItems(IEnumerable`1<ConversationRequest> conversations, PropertySet propertySet, IEnumerable`1<FolderId> foldersToIgnore, Nullable`1<ConversationSortOrder> sortOrder, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<GetConversationItems>d__143")]
public Task`1<ConversationResponse> GetConversationItems(ConversationId conversationId, PropertySet propertySet, string syncState, IEnumerable`1<FolderId> foldersToIgnore, Nullable`1<ConversationSortOrder> sortOrder, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<GetGroupConversationItems>d__144")]
public Task`1<ConversationResponse> GetGroupConversationItems(ConversationId conversationId, PropertySet propertySet, string syncState, IEnumerable`1<FolderId> foldersToIgnore, Nullable`1<ConversationSortOrder> sortOrder, string anchorMailbox, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<GetConversationItemsResponse>> GetConversationItems(IEnumerable`1<ConversationRequest> conversations, PropertySet propertySet, IEnumerable`1<FolderId> foldersToIgnore, Nullable`1<ConversationSortOrder> sortOrder, Nullable`1<MailboxSearchLocation> mailboxScope, CancellationToken token);
    private Task`1<ServiceResponseCollection`1<ServiceResponse>> ApplyConversationAction(ConversationActionType actionType, IEnumerable`1<ConversationId> conversationIds, bool processRightAway, StringList categories, bool enableAlwaysDelete, FolderId destinationFolderId, ServiceErrorHandling errorHandlingMode, CancellationToken token);
    private Task`1<ServiceResponseCollection`1<ServiceResponse>> ApplyConversationOneTimeAction(ConversationActionType actionType, IEnumerable`1<KeyValuePair`2<ConversationId, Nullable`1<DateTime>>> idTimePairs, FolderId contextFolderId, FolderId destinationFolderId, Nullable`1<DeleteMode> deleteType, Nullable`1<bool> isRead, Nullable`1<RetentionType> retentionPolicyType, Nullable`1<Guid> retentionPolicyTagId, Flag flag, Nullable`1<bool> suppressReadReceipts, ServiceErrorHandling errorHandlingMode, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<ServiceResponse>> EnableAlwaysCategorizeItemsInConversations(IEnumerable`1<ConversationId> conversationId, IEnumerable`1<string> categories, bool processSynchronously, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<ServiceResponse>> DisableAlwaysCategorizeItemsInConversations(IEnumerable`1<ConversationId> conversationId, bool processSynchronously, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<ServiceResponse>> EnableAlwaysDeleteItemsInConversations(IEnumerable`1<ConversationId> conversationId, bool processSynchronously, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<ServiceResponse>> DisableAlwaysDeleteItemsInConversations(IEnumerable`1<ConversationId> conversationId, bool processSynchronously, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<ServiceResponse>> EnableAlwaysMoveItemsInConversations(IEnumerable`1<ConversationId> conversationId, FolderId destinationFolderId, bool processSynchronously, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<ServiceResponse>> DisableAlwaysMoveItemsInConversations(IEnumerable`1<ConversationId> conversationIds, bool processSynchronously, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<ServiceResponse>> MoveItemsInConversations(IEnumerable`1<KeyValuePair`2<ConversationId, Nullable`1<DateTime>>> idLastSyncTimePairs, FolderId contextFolderId, FolderId destinationFolderId, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<ServiceResponse>> CopyItemsInConversations(IEnumerable`1<KeyValuePair`2<ConversationId, Nullable`1<DateTime>>> idLastSyncTimePairs, FolderId contextFolderId, FolderId destinationFolderId, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<ServiceResponse>> DeleteItemsInConversations(IEnumerable`1<KeyValuePair`2<ConversationId, Nullable`1<DateTime>>> idLastSyncTimePairs, FolderId contextFolderId, DeleteMode deleteMode, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<ServiceResponse>> SetReadStateForItemsInConversations(IEnumerable`1<KeyValuePair`2<ConversationId, Nullable`1<DateTime>>> idLastSyncTimePairs, FolderId contextFolderId, bool isRead, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<ServiceResponse>> SetReadStateForItemsInConversations(IEnumerable`1<KeyValuePair`2<ConversationId, Nullable`1<DateTime>>> idLastSyncTimePairs, FolderId contextFolderId, bool isRead, bool suppressReadReceipts, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<ServiceResponse>> SetRetentionPolicyForItemsInConversations(IEnumerable`1<KeyValuePair`2<ConversationId, Nullable`1<DateTime>>> idLastSyncTimePairs, FolderId contextFolderId, RetentionType retentionPolicyType, Nullable`1<Guid> retentionPolicyTagId, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<ServiceResponse>> SetFlagStatusForItemsInConversations(IEnumerable`1<KeyValuePair`2<ConversationId, Nullable`1<DateTime>>> idLastSyncTimePairs, FolderId contextFolderId, Flag flagStatus, CancellationToken token);
    private Task`1<ServiceResponseCollection`1<ConvertIdResponse>> InternalConvertIds(IEnumerable`1<AlternateIdBase> ids, IdFormat destinationFormat, ServiceErrorHandling errorHandling, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<ConvertIdResponse>> ConvertIds(IEnumerable`1<AlternateIdBase> ids, IdFormat destinationFormat, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<ConvertId>d__163")]
public Task`1<AlternateIdBase> ConvertId(AlternateIdBase id, IdFormat destinationFormat, CancellationToken token);
    public Task`1<Collection`1<DelegateUserResponse>> AddDelegates(Mailbox mailbox, Nullable`1<MeetingRequestsDeliveryScope> meetingRequestsDeliveryScope, DelegateUser[] delegateUsers);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<AddDelegates>d__165")]
public Task`1<Collection`1<DelegateUserResponse>> AddDelegates(Mailbox mailbox, Nullable`1<MeetingRequestsDeliveryScope> meetingRequestsDeliveryScope, IEnumerable`1<DelegateUser> delegateUsers, CancellationToken token);
    public Task`1<Collection`1<DelegateUserResponse>> UpdateDelegates(Mailbox mailbox, Nullable`1<MeetingRequestsDeliveryScope> meetingRequestsDeliveryScope, CancellationToken token, DelegateUser[] delegateUsers);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<UpdateDelegates>d__167")]
public Task`1<Collection`1<DelegateUserResponse>> UpdateDelegates(Mailbox mailbox, Nullable`1<MeetingRequestsDeliveryScope> meetingRequestsDeliveryScope, IEnumerable`1<DelegateUser> delegateUsers, CancellationToken token);
    public Task`1<Collection`1<DelegateUserResponse>> RemoveDelegates(Mailbox mailbox, CancellationToken token, UserId[] userIds);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<RemoveDelegates>d__169")]
public Task`1<Collection`1<DelegateUserResponse>> RemoveDelegates(Mailbox mailbox, IEnumerable`1<UserId> userIds, CancellationToken token);
    public Task`1<DelegateInformation> GetDelegates(Mailbox mailbox, bool includePermissions, CancellationToken token, UserId[] userIds);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<GetDelegates>d__171")]
public Task`1<DelegateInformation> GetDelegates(Mailbox mailbox, bool includePermissions, IEnumerable`1<UserId> userIds, CancellationToken token);
    internal Task CreateUserConfiguration(UserConfiguration userConfiguration, CancellationToken token);
    internal Task DeleteUserConfiguration(string name, FolderId parentFolderId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<GetUserConfiguration>d__174")]
internal Task`1<UserConfiguration> GetUserConfiguration(string name, FolderId parentFolderId, UserConfigurationProperties properties, CancellationToken token);
    internal Task LoadPropertiesForUserConfiguration(UserConfiguration userConfiguration, UserConfigurationProperties properties, CancellationToken token);
    internal Task UpdateUserConfiguration(UserConfiguration userConfiguration, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<GetInboxRules>d__177")]
public Task`1<RuleCollection> GetInboxRules(CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<GetInboxRules>d__178")]
public Task`1<RuleCollection> GetInboxRules(string mailboxSmtpAddress, CancellationToken token);
    public Task UpdateInboxRules(IEnumerable`1<RuleOperation> operations, bool removeOutlookRuleBlob, CancellationToken token);
    public Task UpdateInboxRules(IEnumerable`1<RuleOperation> operations, bool removeOutlookRuleBlob, string mailboxSmtpAddress, CancellationToken token);
    public Task`1<GetDiscoverySearchConfigurationResponse> GetDiscoverySearchConfiguration(string searchId, bool expandGroupMembership, bool inPlaceHoldConfigurationOnly, CancellationToken token);
    public Task`1<GetSearchableMailboxesResponse> GetSearchableMailboxes(string searchFilter, bool expandGroupMembership, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<SearchMailboxesResponse>> SearchMailboxes(IEnumerable`1<MailboxQuery> mailboxQueries, SearchResultType resultType, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<SearchMailboxesResponse>> SearchMailboxes(IEnumerable`1<MailboxQuery> mailboxQueries, SearchResultType resultType, string sortByProperty, SortDirection sortOrder, int pageSize, SearchPageDirection pageDirection, string pageItemReference, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<SearchMailboxesResponse>> SearchMailboxes(SearchMailboxesParameters searchParameters, CancellationToken token);
    public Task`1<SetHoldOnMailboxesResponse> SetHoldOnMailboxes(string holdId, HoldAction actionType, string query, String[] mailboxes, CancellationToken token);
    public Task`1<SetHoldOnMailboxesResponse> SetHoldOnMailboxes(string holdId, HoldAction actionType, string query, string inPlaceHoldIdentity);
    public Task`1<SetHoldOnMailboxesResponse> SetHoldOnMailboxes(string holdId, HoldAction actionType, string query, string inPlaceHoldIdentity, string itemHoldPeriod, CancellationToken token);
    public Task`1<SetHoldOnMailboxesResponse> SetHoldOnMailboxes(SetHoldOnMailboxesParameters parameters, CancellationToken token);
    public Task`1<GetHoldOnMailboxesResponse> GetHoldOnMailboxes(string holdId, CancellationToken token);
    public Task`1<GetNonIndexableItemDetailsResponse> GetNonIndexableItemDetails(String[] mailboxes);
    public Task`1<GetNonIndexableItemDetailsResponse> GetNonIndexableItemDetails(String[] mailboxes, Nullable`1<int> pageSize, string pageItemReference, Nullable`1<SearchPageDirection> pageDirection);
    public Task`1<GetNonIndexableItemDetailsResponse> GetNonIndexableItemDetails(GetNonIndexableItemDetailsParameters parameters, CancellationToken token);
    public Task`1<GetNonIndexableItemStatisticsResponse> GetNonIndexableItemStatistics(String[] mailboxes);
    public Task`1<GetNonIndexableItemStatisticsResponse> GetNonIndexableItemStatistics(GetNonIndexableItemStatisticsParameters parameters, CancellationToken token);
    private GetNonIndexableItemDetailsRequest CreateGetNonIndexableItemDetailsRequest(GetNonIndexableItemDetailsParameters parameters);
    private GetNonIndexableItemStatisticsRequest CreateGetNonIndexableItemStatisticsRequest(GetNonIndexableItemStatisticsParameters parameters);
    private SearchMailboxesRequest CreateSearchMailboxesRequest(SearchMailboxesParameters searchParameters);
    public Task`1<GetUserRetentionPolicyTagsResponse> GetUserRetentionPolicyTags(CancellationToken token);
    private bool DefaultAutodiscoverRedirectionUrlValidationCallback(string redirectionUrl);
    public Task AutodiscoverUrl(string emailAddress);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<AutodiscoverUrl>d__202")]
public Task AutodiscoverUrl(string emailAddress, AutodiscoverRedirectionUrlValidationCallback validateRedirectionUrlCallback);
    private Uri AdjustServiceUriFromCredentials(Uri uri);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<GetAutodiscoverUrl>d__204")]
private Task`1<Uri> GetAutodiscoverUrl(string emailAddress, ExchangeVersion requestedServerVersion, AutodiscoverRedirectionUrlValidationCallback validateRedirectionUrlCallback);
    private Uri GetEwsUrlFromResponse(GetUserSettingsResponse response, bool isExternal);
    public Task`1<ServiceResponseCollection`1<GetClientAccessTokenResponse>> GetClientAccessToken(IEnumerable`1<KeyValuePair`2<string, ClientAccessTokenType>> idAndTypes);
    public Task`1<ServiceResponseCollection`1<GetClientAccessTokenResponse>> GetClientAccessToken(ClientAccessTokenRequest[] tokenRequests, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<GetAppManifests>d__208")]
public Task`1<Collection`1<XmlDocument>> GetAppManifests(CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<GetAppManifests>d__209")]
public Task`1<Collection`1<ClientApp>> GetAppManifests(string apiVersionSupported, string schemaVersionSupported, CancellationToken token);
    public Task InstallApp(Stream manifestStream, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<InternalInstallApp>d__211")]
internal Task`1<Nullable`1<bool>> InternalInstallApp(Stream manifestStream, string marketplaceAssetId, string marketplaceContentMarket, bool sendWelcomeEmail, CancellationToken token);
    public Task UninstallApp(string id, CancellationToken token);
    public Task DisableApp(string id, DisableReasonType disableReason, CancellationToken token);
    public Task RegisterConsent(string id, ConsentState state, CancellationToken token);
    public Task`1<string> GetAppMarketplaceUrl();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<GetAppMarketplaceUrl>d__216")]
public Task`1<string> GetAppMarketplaceUrl(string apiVersionSupported, string schemaVersionSupported, CancellationToken token);
    public Task`1<GetClientExtensionResponse> GetClientExtension(StringList requestedExtensionIds, bool shouldReturnEnabledOnly, bool isUserScope, string userId, StringList userEnabledExtensionIds, StringList userDisabledExtensionIds, bool isDebug, CancellationToken token);
    public Task`1<GetOMEConfigurationResponse> GetOMEConfiguration(CancellationToken token);
    public Task SetOMEConfiguration(string xml, CancellationToken token);
    public Task SetClientExtension(List`1<SetClientExtensionAction> actions, CancellationToken token);
    public Task`1<Collection`1<UnifiedGroupsSet>> GetUserUnifiedGroups(IEnumerable`1<RequestedUnifiedGroupsSet> requestedUnifiedGroupsSets, string userSmtpAddress, CancellationToken token);
    public Task`1<Collection`1<UnifiedGroupsSet>> GetUserUnifiedGroups(IEnumerable`1<RequestedUnifiedGroupsSet> requestedUnifiedGroupsSets, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<GetUserUnifiedGroupsInternal>d__223")]
private Task`1<Collection`1<UnifiedGroupsSet>> GetUserUnifiedGroupsInternal(IEnumerable`1<RequestedUnifiedGroupsSet> requestedUnifiedGroupsSets, string userSmtpAddress, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<GetUnifiedGroupUnseenCount>d__224")]
public Task`1<int> GetUnifiedGroupUnseenCount(string groupMailboxSmtpAddress, DateTime lastVisitedTimeUtc, CancellationToken token);
    public Task SetUnifiedGroupLastVisitedTime(string groupMailboxSmtpAddress, DateTime lastVisitedTimeUtc, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ExchangeService/<ExecuteDiagnosticMethod>d__226")]
internal Task`1<XmlDocument> ExecuteDiagnosticMethod(string verb, XmlNode parameter, CancellationToken token);
    internal virtual void Validate();
    internal static void ValidateTargetVersion(string version);
    private static bool IsMajorMinor(string versionPart);
    internal IEwsHttpWebRequest PrepareHttpWebRequest(string methodName);
    internal virtual void SetContentType(IEwsHttpWebRequest request);
    internal virtual void ProcessHttpErrorResponse(IEwsHttpWebResponse httpWebResponse, EwsHttpClientException webException);
    public Uri get_Url();
    public void set_Url(Uri value);
    public ImpersonatedUserId get_ImpersonatedUserId();
    public void set_ImpersonatedUserId(ImpersonatedUserId value);
    internal PrivilegedUserId get_PrivilegedUserId();
    internal void set_PrivilegedUserId(PrivilegedUserId value);
    public ManagementRoles get_ManagementRoles();
    public void set_ManagementRoles(ManagementRoles value);
    public CultureInfo get_PreferredCulture();
    public void set_PreferredCulture(CultureInfo value);
    public DateTimePrecision get_DateTimePrecision();
    public void set_DateTimePrecision(DateTimePrecision value);
    public IFileAttachmentContentHandler get_FileAttachmentContentHandler();
    public void set_FileAttachmentContentHandler(IFileAttachmentContentHandler value);
    public TimeZoneInfo get_TimeZone();
    public UnifiedMessaging get_UnifiedMessaging();
    public bool get_EnableScpLookup();
    public void set_EnableScpLookup(bool value);
    internal bool get_Exchange2007CompatibilityMode();
    internal void set_Exchange2007CompatibilityMode(bool value);
    public bool get_TraceEnablePrettyPrinting();
    public void set_TraceEnablePrettyPrinting(bool value);
    internal string get_TargetServerVersion();
    internal void set_TargetServerVersion(string value);
}
public abstract class Microsoft.Exchange.WebServices.Data.ExchangeServiceBase : object {
    private static object lockObj;
    private ExchangeVersion requestedServerVersion;
    internal static HttpStatusCode AccountIsLocked;
    private static Byte[] binarySecret;
    private static string defaultUserAgent;
    [CompilerGeneratedAttribute]
private ResponseHeadersCapturedHandler OnResponseHeadersCaptured;
    private ExchangeCredentials credentials;
    private bool useDefaultCredentials;
    private int timeout;
    private bool traceEnabled;
    private bool sendClientLatencies;
    private TraceFlags traceFlags;
    private ITraceListener traceListener;
    private bool preAuthenticate;
    private string userAgent;
    private bool acceptGzipEncoding;
    private bool keepAlive;
    private string connectionGroupName;
    private string clientRequestId;
    private bool returnClientRequestId;
    private CookieContainer cookieContainer;
    private TimeZoneInfo timeZone;
    private TimeZoneDefinition timeZoneDefinition;
    private ExchangeServerInfo serverInfo;
    private IWebProxy webProxy;
    private IDictionary`2<string, string> httpHeaders;
    private IDictionary`2<string, string> httpResponseHeaders;
    private IEwsHttpWebRequestFactory ewsHttpWebRequestFactory;
    [CompilerGeneratedAttribute]
private bool <SuppressXmlVersionHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private CustomXmlSerializationDelegate OnSerializeCustomSoapHeaders;
    public CookieContainer CookieContainer { get; public set; }
    internal TimeZoneInfo TimeZone { get; }
    public TimeZoneDefinition TimeZoneDefinition { get; }
    public bool SendClientLatencies { get; public set; }
    public bool TraceEnabled { get; public set; }
    public TraceFlags TraceFlags { get; public set; }
    public ITraceListener TraceListener { get; public set; }
    public ExchangeCredentials Credentials { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    public int Timeout { get; public set; }
    public bool PreAuthenticate { get; public set; }
    public bool AcceptGzipEncoding { get; public set; }
    public ExchangeVersion RequestedServerVersion { get; }
    public string UserAgent { get; public set; }
    public ExchangeServerInfo ServerInfo { get; internal set; }
    public IWebProxy WebProxy { get; public set; }
    public bool KeepAlive { get; public set; }
    public string ConnectionGroupName { get; public set; }
    public string ClientRequestId { get; public set; }
    public bool ReturnClientRequestId { get; public set; }
    public IDictionary`2<string, string> HttpHeaders { get; }
    public IDictionary`2<string, string> HttpResponseHeaders { get; }
    internal static Byte[] SessionKey { get; }
    internal IEwsHttpWebRequestFactory HttpWebRequestFactory { get; internal set; }
    internal bool SuppressXmlVersionHeader { get; internal set; }
    internal ExchangeServiceBase(TimeZoneInfo timeZone);
    internal ExchangeServiceBase(ExchangeVersion requestedServerVersion);
    internal ExchangeServiceBase(ExchangeVersion requestedServerVersion, TimeZoneInfo timeZone);
    internal ExchangeServiceBase(ExchangeServiceBase service, ExchangeVersion requestedServerVersion);
    internal ExchangeServiceBase(ExchangeServiceBase service);
    private static ExchangeServiceBase();
    [CompilerGeneratedAttribute]
public void add_OnResponseHeadersCaptured(ResponseHeadersCapturedHandler value);
    [CompilerGeneratedAttribute]
public void remove_OnResponseHeadersCaptured(ResponseHeadersCapturedHandler value);
    internal void DoOnSerializeCustomSoapHeaders(XmlWriter writer);
    internal IEwsHttpWebRequest PrepareHttpWebRequestForUrl(Uri url, bool acceptGzipEncoding, bool allowAutoRedirect);
    internal ExchangeCredentials AdjustLinuxAuthentication(Uri url, ExchangeCredentials serviceCredentials);
    internal virtual void SetContentType(IEwsHttpWebRequest request);
    internal void InternalProcessHttpErrorResponse(IEwsHttpWebResponse httpWebResponse, EwsHttpClientException webException, TraceFlags responseHeadersTraceFlag, TraceFlags responseTraceFlag);
    internal abstract virtual void ProcessHttpErrorResponse(IEwsHttpWebResponse httpWebResponse, EwsHttpClientException webException);
    internal bool IsTraceEnabledFor(TraceFlags traceFlags);
    internal void TraceMessage(TraceFlags traceType, string logEntry);
    internal void TraceXml(TraceFlags traceType, MemoryStream stream);
    internal void TraceHttpRequestHeaders(TraceFlags traceType, IEwsHttpWebRequest request);
    internal void ProcessHttpResponseHeaders(TraceFlags traceType, IEwsHttpWebResponse response);
    private void TraceHttpResponseHeaders(TraceFlags traceType, IEwsHttpWebResponse response);
    private void SaveHttpResponseHeaders(HttpResponseHeaders headers);
    internal Nullable`1<DateTime> ConvertUniversalDateTimeStringToLocalDateTime(string value);
    internal Nullable`1<DateTime> ConvertStartDateToUnspecifiedDateTime(string value);
    internal string ConvertDateTimeToUniversalDateTimeString(DateTime value);
    internal void RegisterCustomBasicAuthModule();
    internal void SetCustomUserAgent(string userAgent);
    internal virtual void Validate();
    public CookieContainer get_CookieContainer();
    public void set_CookieContainer(CookieContainer value);
    internal TimeZoneInfo get_TimeZone();
    public TimeZoneDefinition get_TimeZoneDefinition();
    public bool get_SendClientLatencies();
    public void set_SendClientLatencies(bool value);
    public bool get_TraceEnabled();
    public void set_TraceEnabled(bool value);
    public TraceFlags get_TraceFlags();
    public void set_TraceFlags(TraceFlags value);
    public ITraceListener get_TraceListener();
    public void set_TraceListener(ITraceListener value);
    public ExchangeCredentials get_Credentials();
    public void set_Credentials(ExchangeCredentials value);
    public bool get_UseDefaultCredentials();
    public void set_UseDefaultCredentials(bool value);
    public int get_Timeout();
    public void set_Timeout(int value);
    public bool get_PreAuthenticate();
    public void set_PreAuthenticate(bool value);
    public bool get_AcceptGzipEncoding();
    public void set_AcceptGzipEncoding(bool value);
    public ExchangeVersion get_RequestedServerVersion();
    public string get_UserAgent();
    public void set_UserAgent(string value);
    public ExchangeServerInfo get_ServerInfo();
    internal void set_ServerInfo(ExchangeServerInfo value);
    public IWebProxy get_WebProxy();
    public void set_WebProxy(IWebProxy value);
    public bool get_KeepAlive();
    public void set_KeepAlive(bool value);
    public string get_ConnectionGroupName();
    public void set_ConnectionGroupName(string value);
    public string get_ClientRequestId();
    public void set_ClientRequestId(string value);
    public bool get_ReturnClientRequestId();
    public void set_ReturnClientRequestId(bool value);
    public IDictionary`2<string, string> get_HttpHeaders();
    public IDictionary`2<string, string> get_HttpResponseHeaders();
    internal static Byte[] get_SessionKey();
    internal IEwsHttpWebRequestFactory get_HttpWebRequestFactory();
    internal void set_HttpWebRequestFactory(IEwsHttpWebRequestFactory value);
    [CompilerGeneratedAttribute]
internal bool get_SuppressXmlVersionHeader();
    [CompilerGeneratedAttribute]
internal void set_SuppressXmlVersionHeader(bool value);
    [CompilerGeneratedAttribute]
public void add_OnSerializeCustomSoapHeaders(CustomXmlSerializationDelegate value);
    [CompilerGeneratedAttribute]
public void remove_OnSerializeCustomSoapHeaders(CustomXmlSerializationDelegate value);
}
public enum Microsoft.Exchange.WebServices.Data.ExchangeVersion : Enum {
    public int value__;
    public static ExchangeVersion Exchange2007_SP1;
    public static ExchangeVersion Exchange2010;
    public static ExchangeVersion Exchange2010_SP1;
    public static ExchangeVersion Exchange2010_SP2;
    public static ExchangeVersion Exchange2013;
    public static ExchangeVersion Exchange2013_SP1;
    public static ExchangeVersion Exchange2015;
    public static ExchangeVersion Exchange2016;
    public static ExchangeVersion V2015_10_05;
}
internal class Microsoft.Exchange.WebServices.Data.ExecuteDiagnosticMethodRequest : MultiResponseServiceRequest`1<ExecuteDiagnosticMethodResponse> {
    [CompilerGeneratedAttribute]
private string <Verb>k__BackingField;
    [CompilerGeneratedAttribute]
private XmlNode <Parameter>k__BackingField;
    internal string Verb { get; internal set; }
    internal XmlNode Parameter { get; internal set; }
    internal ExecuteDiagnosticMethodRequest(ExchangeService service);
    internal virtual string GetXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetResponseXmlElementName();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [CompilerGeneratedAttribute]
internal string get_Verb();
    [CompilerGeneratedAttribute]
internal void set_Verb(string value);
    [CompilerGeneratedAttribute]
internal XmlNode get_Parameter();
    [CompilerGeneratedAttribute]
internal void set_Parameter(XmlNode value);
    internal virtual ExecuteDiagnosticMethodResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual int GetExpectedResponseMessageCount();
}
internal class Microsoft.Exchange.WebServices.Data.ExecuteDiagnosticMethodResponse : ServiceResponse {
    [CompilerGeneratedAttribute]
private XmlDocument <ReturnValue>k__BackingField;
    internal XmlDocument ReturnValue { get; private set; }
    internal ExecuteDiagnosticMethodResponse(ExchangeService service);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    [CompilerGeneratedAttribute]
internal XmlDocument get_ReturnValue();
    [CompilerGeneratedAttribute]
private void set_ReturnValue(XmlDocument value);
}
internal class Microsoft.Exchange.WebServices.Data.ExpandGroupRequest : MultiResponseServiceRequest`1<ExpandGroupResponse> {
    private EmailAddress emailAddress;
    public EmailAddress EmailAddress { get; public set; }
    internal ExpandGroupRequest(ExchangeService service);
    internal virtual void Validate();
    internal virtual ExpandGroupResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public EmailAddress get_EmailAddress();
    public void set_EmailAddress(EmailAddress value);
}
internal class Microsoft.Exchange.WebServices.Data.ExpandGroupResponse : ServiceResponse {
    private ExpandGroupResults members;
    public ExpandGroupResults Members { get; }
    public ExpandGroupResults get_Members();
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
}
public class Microsoft.Exchange.WebServices.Data.ExpandGroupResults : object {
    private bool includesAllMembers;
    private Collection`1<EmailAddress> members;
    public int Count { get; }
    public bool IncludesAllMembers { get; }
    public Collection`1<EmailAddress> Members { get; }
    public int get_Count();
    public bool get_IncludesAllMembers();
    public Collection`1<EmailAddress> get_Members();
    public sealed virtual IEnumerator`1<EmailAddress> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    internal void LoadFromXml(EwsServiceXmlReader reader);
}
public class Microsoft.Exchange.WebServices.Data.ExtendedAttribute : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public string Name { get; public set; }
    public string Value { get; public set; }
    public ExtendedAttribute(string name, string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
}
public class Microsoft.Exchange.WebServices.Data.ExtendedAttributes : List`1<ExtendedAttribute> {
}
public class Microsoft.Exchange.WebServices.Data.ExtendedProperty : ComplexProperty {
    private ExtendedPropertyDefinition propertyDefinition;
    private object value;
    public ExtendedPropertyDefinition PropertyDefinition { get; }
    public object Value { get; public set; }
    internal ExtendedProperty(ExtendedPropertyDefinition propertyDefinition);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    public ExtendedPropertyDefinition get_PropertyDefinition();
    public object get_Value();
    public void set_Value(object value);
    private string GetStringValue();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.ExtendedPropertyCollection : ComplexPropertyCollection`1<ExtendedProperty> {
    internal virtual ExtendedProperty CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(ExtendedProperty complexProperty);
    internal virtual void LoadFromXml(EwsServiceXmlReader reader, string localElementName);
    internal virtual void WriteToXml(EwsServiceXmlWriter writer, string xmlElementName);
    private ExtendedProperty GetOrAddExtendedProperty(ExtendedPropertyDefinition propertyDefinition);
    internal void SetExtendedProperty(ExtendedPropertyDefinition propertyDefinition, object value);
    internal bool RemoveExtendedProperty(ExtendedPropertyDefinition propertyDefinition);
    private bool TryGetProperty(ExtendedPropertyDefinition propertyDefinition, ExtendedProperty& extendedProperty);
    internal bool TryGetValue(ExtendedPropertyDefinition propertyDefinition, T& propertyValue);
    private sealed virtual override bool Microsoft.Exchange.WebServices.Data.ICustomUpdateSerializer.WriteSetUpdateToXml(EwsServiceXmlWriter writer, ServiceObject ewsObject, PropertyDefinition propertyDefinition);
    private sealed virtual override bool Microsoft.Exchange.WebServices.Data.ICustomUpdateSerializer.WriteDeleteUpdateToXml(EwsServiceXmlWriter writer, ServiceObject ewsObject);
}
public class Microsoft.Exchange.WebServices.Data.ExtendedPropertyDefinition : PropertyDefinitionBase {
    private static string FieldFormat;
    private static string PropertySetFieldName;
    private static string PropertySetIdFieldName;
    private static string TagFieldName;
    private static string NameFieldName;
    private static string IdFieldName;
    private static string MapiTypeFieldName;
    private Nullable`1<DefaultExtendedPropertySet> propertySet;
    private Nullable`1<Guid> propertySetId;
    private Nullable`1<int> tag;
    private string name;
    private Nullable`1<int> id;
    private MapiPropertyType mapiType;
    public ExchangeVersion Version { get; }
    public Nullable`1<DefaultExtendedPropertySet> PropertySet { get; }
    public Nullable`1<Guid> PropertySetId { get; }
    public Nullable`1<int> Tag { get; }
    public string Name { get; }
    public Nullable`1<int> Id { get; }
    public MapiPropertyType MapiType { get; }
    public Type Type { get; }
    internal ExtendedPropertyDefinition(MapiPropertyType mapiType);
    public ExtendedPropertyDefinition(int tag, MapiPropertyType mapiType);
    public ExtendedPropertyDefinition(DefaultExtendedPropertySet propertySet, string name, MapiPropertyType mapiType);
    public ExtendedPropertyDefinition(DefaultExtendedPropertySet propertySet, int id, MapiPropertyType mapiType);
    public ExtendedPropertyDefinition(Guid propertySetId, string name, MapiPropertyType mapiType);
    public ExtendedPropertyDefinition(Guid propertySetId, int id, MapiPropertyType mapiType);
    internal static bool IsEqualTo(ExtendedPropertyDefinition extPropDef1, ExtendedPropertyDefinition extPropDef2);
    internal virtual string GetXmlElementName();
    public virtual ExchangeVersion get_Version();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal void LoadFromXml(EwsServiceXmlReader reader);
    public static bool op_Equality(ExtendedPropertyDefinition extPropDef1, ExtendedPropertyDefinition extPropDef2);
    public static bool op_Inequality(ExtendedPropertyDefinition extPropDef1, ExtendedPropertyDefinition extPropDef2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    internal virtual string GetPrintableName();
    internal string FormatField(string name, T fieldValue);
    public Nullable`1<DefaultExtendedPropertySet> get_PropertySet();
    public Nullable`1<Guid> get_PropertySetId();
    public Nullable`1<int> get_Tag();
    public string get_Name();
    public Nullable`1<int> get_Id();
    public MapiPropertyType get_MapiType();
    public virtual Type get_Type();
}
public enum Microsoft.Exchange.WebServices.Data.ExtensionInstallScope : Enum {
    public int value__;
    public static ExtensionInstallScope None;
    public static ExtensionInstallScope User;
    public static ExtensionInstallScope Organization;
    public static ExtensionInstallScope Default;
}
public enum Microsoft.Exchange.WebServices.Data.ExtensionType : Enum {
    public int value__;
    public static ExtensionType Default;
    public static ExtensionType Private;
    public static ExtensionType MarketPlace;
}
public abstract class Microsoft.Exchange.WebServices.Data.ExtractedEntity : ComplexProperty {
    [CompilerGeneratedAttribute]
private EmailPosition <Position>k__BackingField;
    public EmailPosition Position { get; internal set; }
    [CompilerGeneratedAttribute]
public EmailPosition get_Position();
    [CompilerGeneratedAttribute]
internal void set_Position(EmailPosition value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
public class Microsoft.Exchange.WebServices.Data.FailedSearchMailbox : object {
    [CompilerGeneratedAttribute]
private string <Mailbox>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsArchive>k__BackingField;
    public string Mailbox { get; public set; }
    public int ErrorCode { get; public set; }
    public string ErrorMessage { get; public set; }
    public bool IsArchive { get; public set; }
    public FailedSearchMailbox(string mailbox, int errorCode, string errorMessage);
    public FailedSearchMailbox(string mailbox, int errorCode, string errorMessage, bool isArchive);
    [CompilerGeneratedAttribute]
public string get_Mailbox();
    [CompilerGeneratedAttribute]
public void set_Mailbox(string value);
    [CompilerGeneratedAttribute]
public int get_ErrorCode();
    [CompilerGeneratedAttribute]
public void set_ErrorCode(int value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
    [CompilerGeneratedAttribute]
public bool get_IsArchive();
    [CompilerGeneratedAttribute]
public void set_IsArchive(bool value);
    internal static FailedSearchMailbox[] LoadFailedMailboxesXml(XmlNamespace rootXmlNamespace, EwsServiceXmlReader reader);
}
public enum Microsoft.Exchange.WebServices.Data.FileAsMapping : Enum {
    public int value__;
    public static FileAsMapping None;
    [EwsEnumAttribute("LastCommaFirst")]
public static FileAsMapping SurnameCommaGivenName;
    [EwsEnumAttribute("FirstSpaceLast")]
public static FileAsMapping GivenNameSpaceSurname;
    public static FileAsMapping Company;
    [EwsEnumAttribute("LastCommaFirstCompany")]
public static FileAsMapping SurnameCommaGivenNameCompany;
    [EwsEnumAttribute("CompanyLastFirst")]
public static FileAsMapping CompanySurnameGivenName;
    [EwsEnumAttribute("LastFirst")]
public static FileAsMapping SurnameGivenName;
    [EwsEnumAttribute("LastFirstCompany")]
public static FileAsMapping SurnameGivenNameCompany;
    [EwsEnumAttribute("CompanyLastCommaFirst")]
public static FileAsMapping CompanySurnameCommaGivenName;
    [EwsEnumAttribute("LastFirstSuffix")]
public static FileAsMapping SurnameGivenNameSuffix;
    [EwsEnumAttribute("LastSpaceFirstCompany")]
public static FileAsMapping SurnameSpaceGivenNameCompany;
    [EwsEnumAttribute("CompanyLastSpaceFirst")]
public static FileAsMapping CompanySurnameSpaceGivenName;
    [EwsEnumAttribute("LastSpaceFirst")]
public static FileAsMapping SurnameSpaceGivenName;
    [RequiredServerVersionAttribute("1")]
public static FileAsMapping DisplayName;
    [RequiredServerVersionAttribute("1")]
[EwsEnumAttribute("FirstName")]
public static FileAsMapping GivenName;
    [RequiredServerVersionAttribute("1")]
[EwsEnumAttribute("LastFirstMiddleSuffix")]
public static FileAsMapping SurnameGivenNameMiddleSuffix;
    [RequiredServerVersionAttribute("1")]
[EwsEnumAttribute("LastName")]
public static FileAsMapping Surname;
    [RequiredServerVersionAttribute("1")]
public static FileAsMapping Empty;
}
public class Microsoft.Exchange.WebServices.Data.FileAttachment : Attachment {
    private string fileName;
    private Stream contentStream;
    private Byte[] content;
    private Stream loadToStream;
    private bool isContactPhoto;
    public string FileName { get; internal set; }
    internal Stream ContentStream { get; internal set; }
    public Byte[] Content { get; internal set; }
    public bool IsContactPhoto { get; public set; }
    internal FileAttachment(Item owner);
    internal FileAttachment(ExchangeService service);
    internal virtual string GetXmlElementName();
    internal virtual void Validate(int attachmentIndex);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual bool TryReadElementFromXmlToPatch(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.FileAttachment/<Load>d__12")]
public Task Load(Stream stream);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.FileAttachment/<Load>d__13")]
public Task Load(string fileName);
    public string get_FileName();
    internal void set_FileName(string value);
    internal Stream get_ContentStream();
    internal void set_ContentStream(Stream value);
    public Byte[] get_Content();
    internal void set_Content(Byte[] value);
    public bool get_IsContactPhoto();
    public void set_IsContactPhoto(bool value);
}
internal class Microsoft.Exchange.WebServices.Data.FindConversationRequest : SimpleServiceRequestBase {
    private ViewBase view;
    private FolderIdWrapper folderId;
    private string queryString;
    private bool returnHighlightTerms;
    private Nullable`1<MailboxSearchLocation> mailboxScope;
    public ViewBase View { get; public set; }
    internal FolderIdWrapper FolderId { get; internal set; }
    internal string QueryString { get; internal set; }
    internal bool ReturnHighlightTerms { get; internal set; }
    internal Nullable`1<MailboxSearchLocation> MailboxScope { get; internal set; }
    internal FindConversationRequest(ExchangeService service);
    public ViewBase get_View();
    public void set_View(ViewBase value);
    internal FolderIdWrapper get_FolderId();
    internal void set_FolderId(FolderIdWrapper value);
    internal string get_QueryString();
    internal void set_QueryString(string value);
    internal bool get_ReturnHighlightTerms();
    internal void set_ReturnHighlightTerms(bool value);
    internal Nullable`1<MailboxSearchLocation> get_MailboxScope();
    internal void set_MailboxScope(Nullable`1<MailboxSearchLocation> value);
    internal virtual void Validate();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.FindConversationRequest/<Execute>d__28")]
internal Task`1<FindConversationResponse> Execute(CancellationToken token);
}
internal class Microsoft.Exchange.WebServices.Data.FindConversationResponse : ServiceResponse {
    [CompilerGeneratedAttribute]
private FindConversationResults <Results>k__BackingField;
    internal Collection`1<Conversation> Conversations { get; }
    internal FindConversationResults Results { get; private set; }
    internal Collection`1<Conversation> get_Conversations();
    [CompilerGeneratedAttribute]
internal FindConversationResults get_Results();
    [CompilerGeneratedAttribute]
private void set_Results(FindConversationResults value);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
}
public class Microsoft.Exchange.WebServices.Data.FindConversationResults : object {
    [CompilerGeneratedAttribute]
private Collection`1<Conversation> <Conversations>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<HighlightTerm> <HighlightTerms>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <IndexedOffset>k__BackingField;
    public Collection`1<Conversation> Conversations { get; internal set; }
    public Collection`1<HighlightTerm> HighlightTerms { get; internal set; }
    public Nullable`1<int> TotalCount { get; internal set; }
    public Nullable`1<int> IndexedOffset { get; internal set; }
    [CompilerGeneratedAttribute]
public Collection`1<Conversation> get_Conversations();
    [CompilerGeneratedAttribute]
internal void set_Conversations(Collection`1<Conversation> value);
    [CompilerGeneratedAttribute]
public Collection`1<HighlightTerm> get_HighlightTerms();
    [CompilerGeneratedAttribute]
internal void set_HighlightTerms(Collection`1<HighlightTerm> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TotalCount();
    [CompilerGeneratedAttribute]
internal void set_TotalCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_IndexedOffset();
    [CompilerGeneratedAttribute]
internal void set_IndexedOffset(Nullable`1<int> value);
}
internal class Microsoft.Exchange.WebServices.Data.FindFolderRequest : FindRequest`1<FindFolderResponse> {
    internal FindFolderRequest(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual FindFolderResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
}
public class Microsoft.Exchange.WebServices.Data.FindFolderResponse : ServiceResponse {
    private FindFoldersResults results;
    private PropertySet propertySet;
    public FindFoldersResults Results { get; }
    internal FindFolderResponse(PropertySet propertySet);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    private Folder CreateFolderInstance(ExchangeService service, string xmlElementName);
    public FindFoldersResults get_Results();
}
public class Microsoft.Exchange.WebServices.Data.FindFoldersResults : object {
    private int totalCount;
    private Nullable`1<int> nextPageOffset;
    private bool moreAvailable;
    private Collection`1<Folder> folders;
    public int TotalCount { get; internal set; }
    public Nullable`1<int> NextPageOffset { get; internal set; }
    public bool MoreAvailable { get; internal set; }
    public Collection`1<Folder> Folders { get; }
    public int get_TotalCount();
    internal void set_TotalCount(int value);
    public Nullable`1<int> get_NextPageOffset();
    internal void set_NextPageOffset(Nullable`1<int> value);
    public bool get_MoreAvailable();
    internal void set_MoreAvailable(bool value);
    public Collection`1<Folder> get_Folders();
    public sealed virtual IEnumerator`1<Folder> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.Exchange.WebServices.Data.FindItemRequest`1 : FindRequest`1<FindItemResponse`1<TItem>> {
    private Grouping groupBy;
    public Grouping GroupBy { get; public set; }
    internal FindItemRequest`1(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual Grouping GetGroupBy();
    internal virtual FindItemResponse`1<TItem> CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public Grouping get_GroupBy();
    public void set_GroupBy(Grouping value);
}
internal class Microsoft.Exchange.WebServices.Data.FindItemResponse`1 : ServiceResponse {
    private FindItemsResults`1<TItem> results;
    private bool isGrouped;
    private GroupedFindItemsResults`1<TItem> groupedFindResults;
    private PropertySet propertySet;
    public GroupedFindItemsResults`1<TItem> GroupedFindResults { get; }
    public FindItemsResults`1<TItem> Results { get; }
    internal FindItemResponse`1(bool isGrouped, PropertySet propertySet);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    private static void InternalReadItemsFromXml(EwsServiceXmlReader reader, PropertySet propertySet, IList`1<TItem> destinationList);
    private TItem CreateItemInstance(ExchangeService service, string xmlElementName);
    public GroupedFindItemsResults`1<TItem> get_GroupedFindResults();
    public FindItemsResults`1<TItem> get_Results();
}
public class Microsoft.Exchange.WebServices.Data.FindItemsResults`1 : object {
    private int totalCount;
    private Nullable`1<int> nextPageOffset;
    private bool moreAvailable;
    private Collection`1<TItem> items;
    private Collection`1<HighlightTerm> highlightTerms;
    public int TotalCount { get; internal set; }
    public Nullable`1<int> NextPageOffset { get; internal set; }
    public bool MoreAvailable { get; internal set; }
    public Collection`1<TItem> Items { get; }
    public Collection`1<HighlightTerm> HighlightTerms { get; }
    public int get_TotalCount();
    internal void set_TotalCount(int value);
    public Nullable`1<int> get_NextPageOffset();
    internal void set_NextPageOffset(Nullable`1<int> value);
    public bool get_MoreAvailable();
    internal void set_MoreAvailable(bool value);
    public Collection`1<TItem> get_Items();
    public Collection`1<HighlightTerm> get_HighlightTerms();
    public sealed virtual IEnumerator`1<TItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.Exchange.WebServices.Data.FindPeopleRequest : SimpleServiceRequestBase {
    [CompilerGeneratedAttribute]
private ViewBase <View>k__BackingField;
    [CompilerGeneratedAttribute]
private FolderId <FolderId>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchFilter <SearchFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private string <QueryString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SearchPeopleSuggestionIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, string> <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private PeopleQueryMode <QueryMode>k__BackingField;
    internal ViewBase View { get; internal set; }
    internal FolderId FolderId { get; internal set; }
    internal SearchFilter SearchFilter { get; internal set; }
    internal string QueryString { get; internal set; }
    internal bool SearchPeopleSuggestionIndex { get; internal set; }
    internal Dictionary`2<string, string> Context { get; internal set; }
    internal PeopleQueryMode QueryMode { get; internal set; }
    internal FindPeopleRequest(ExchangeService service);
    [CompilerGeneratedAttribute]
internal ViewBase get_View();
    [CompilerGeneratedAttribute]
internal void set_View(ViewBase value);
    [CompilerGeneratedAttribute]
internal FolderId get_FolderId();
    [CompilerGeneratedAttribute]
internal void set_FolderId(FolderId value);
    [CompilerGeneratedAttribute]
internal SearchFilter get_SearchFilter();
    [CompilerGeneratedAttribute]
internal void set_SearchFilter(SearchFilter value);
    [CompilerGeneratedAttribute]
internal string get_QueryString();
    [CompilerGeneratedAttribute]
internal void set_QueryString(string value);
    [CompilerGeneratedAttribute]
internal bool get_SearchPeopleSuggestionIndex();
    [CompilerGeneratedAttribute]
internal void set_SearchPeopleSuggestionIndex(bool value);
    [CompilerGeneratedAttribute]
internal Dictionary`2<string, string> get_Context();
    [CompilerGeneratedAttribute]
internal void set_Context(Dictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal PeopleQueryMode get_QueryMode();
    [CompilerGeneratedAttribute]
internal void set_QueryMode(PeopleQueryMode value);
    internal virtual void Validate();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.FindPeopleRequest/<Execute>d__36")]
internal Task`1<FindPeopleResponse> Execute(CancellationToken token);
}
internal class Microsoft.Exchange.WebServices.Data.FindPeopleResponse : ServiceResponse {
    [CompilerGeneratedAttribute]
private FindPeopleResults <Results>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TransactionId>k__BackingField;
    [CompilerGeneratedAttribute]
private ICollection`1<string> <Sources>k__BackingField;
    internal ICollection`1<Persona> Personas { get; }
    internal FindPeopleResults Results { get; private set; }
    internal string TransactionId { get; private set; }
    internal ICollection`1<string> Sources { get; private set; }
    internal ICollection`1<Persona> get_Personas();
    [CompilerGeneratedAttribute]
internal FindPeopleResults get_Results();
    [CompilerGeneratedAttribute]
private void set_Results(FindPeopleResults value);
    [CompilerGeneratedAttribute]
internal string get_TransactionId();
    [CompilerGeneratedAttribute]
private void set_TransactionId(string value);
    [CompilerGeneratedAttribute]
internal ICollection`1<string> get_Sources();
    [CompilerGeneratedAttribute]
private void set_Sources(ICollection`1<string> value);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
}
public class Microsoft.Exchange.WebServices.Data.FindPeopleResults : object {
    [CompilerGeneratedAttribute]
private Collection`1<Persona> <Personas>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <TotalCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <FirstMatchingRowIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <FirstLoadedRowIndex>k__BackingField;
    public Collection`1<Persona> Personas { get; internal set; }
    public Nullable`1<int> TotalCount { get; internal set; }
    public Nullable`1<int> FirstMatchingRowIndex { get; internal set; }
    public Nullable`1<int> FirstLoadedRowIndex { get; internal set; }
    [CompilerGeneratedAttribute]
public Collection`1<Persona> get_Personas();
    [CompilerGeneratedAttribute]
internal void set_Personas(Collection`1<Persona> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_TotalCount();
    [CompilerGeneratedAttribute]
internal void set_TotalCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_FirstMatchingRowIndex();
    [CompilerGeneratedAttribute]
internal void set_FirstMatchingRowIndex(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_FirstLoadedRowIndex();
    [CompilerGeneratedAttribute]
internal void set_FirstLoadedRowIndex(Nullable`1<int> value);
}
internal abstract class Microsoft.Exchange.WebServices.Data.FindRequest`1 : MultiResponseServiceRequest`1<TResponse> {
    private FolderIdWrapperList parentFolderIds;
    private SearchFilter searchFilter;
    private string queryString;
    private bool returnHighlightTerms;
    private ViewBase view;
    public FolderIdWrapperList ParentFolderIds { get; }
    public SearchFilter SearchFilter { get; public set; }
    public string QueryString { get; public set; }
    internal bool ReturnHighlightTerms { get; internal set; }
    public ViewBase View { get; public set; }
    internal FindRequest`1(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual void Validate();
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual Grouping GetGroupBy();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    public FolderIdWrapperList get_ParentFolderIds();
    public SearchFilter get_SearchFilter();
    public void set_SearchFilter(SearchFilter value);
    public string get_QueryString();
    public void set_QueryString(string value);
    internal bool get_ReturnHighlightTerms();
    internal void set_ReturnHighlightTerms(bool value);
    public ViewBase get_View();
    public void set_View(ViewBase value);
}
public class Microsoft.Exchange.WebServices.Data.Flag : ComplexProperty {
    private ItemFlagStatus flagStatus;
    private DateTime startDate;
    private DateTime dueDate;
    private DateTime completeDate;
    public ItemFlagStatus FlagStatus { get; public set; }
    public DateTime StartDate { get; public set; }
    public DateTime DueDate { get; public set; }
    public DateTime CompleteDate { get; public set; }
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal void Validate();
    public ItemFlagStatus get_FlagStatus();
    public void set_FlagStatus(ItemFlagStatus value);
    public DateTime get_StartDate();
    public void set_StartDate(DateTime value);
    public DateTime get_DueDate();
    public void set_DueDate(DateTime value);
    public DateTime get_CompleteDate();
    public void set_CompleteDate(DateTime value);
}
public enum Microsoft.Exchange.WebServices.Data.FlaggedForAction : Enum {
    public int value__;
    public static FlaggedForAction Any;
    public static FlaggedForAction Call;
    public static FlaggedForAction DoNotForward;
    public static FlaggedForAction FollowUp;
    public static FlaggedForAction FYI;
    public static FlaggedForAction Forward;
    public static FlaggedForAction NoResponseNecessary;
    public static FlaggedForAction Read;
    public static FlaggedForAction Reply;
    public static FlaggedForAction ReplyToAll;
    public static FlaggedForAction Review;
}
[ServiceObjectDefinitionAttribute("Folder")]
public class Microsoft.Exchange.WebServices.Data.Folder : ServiceObject {
    public FolderId Id { get; }
    public FolderId ParentFolderId { get; }
    public int ChildFolderCount { get; }
    public string DisplayName { get; public set; }
    public string FolderClass { get; public set; }
    public int TotalCount { get; }
    public ExtendedPropertyCollection ExtendedProperties { get; }
    public ManagedFolderInformation ManagedFolderInformation { get; }
    public EffectiveRights EffectiveRights { get; }
    public FolderPermissionCollection Permissions { get; }
    public int UnreadCount { get; }
    public PolicyTag PolicyTag { get; public set; }
    public ArchiveTag ArchiveTag { get; public set; }
    public string WellKnownFolderNameAsString { get; }
    public Nullable`1<WellKnownFolderName> WellKnownFolderName { get; }
    public Folder(ExchangeService service);
    public static Task`1<Folder> Bind(ExchangeService service, FolderId id, PropertySet propertySet, CancellationToken token);
    public static Task`1<Folder> Bind(ExchangeService service, FolderId id, CancellationToken token);
    public static Task`1<Folder> Bind(ExchangeService service, WellKnownFolderName name, PropertySet propertySet, CancellationToken token);
    public static Task`1<Folder> Bind(ExchangeService service, WellKnownFolderName name, CancellationToken token);
    internal virtual void Validate();
    internal virtual ServiceObjectSchema GetSchema();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal virtual string GetChangeXmlElementName();
    internal virtual string GetSetFieldXmlElementName();
    internal virtual string GetDeleteFieldXmlElementName();
    internal virtual Task`1<ServiceResponseCollection`1<ServiceResponse>> InternalLoad(PropertySet propertySet, CancellationToken token);
    internal virtual Task`1<ServiceResponseCollection`1<ServiceResponse>> InternalDelete(DeleteMode deleteMode, Nullable`1<SendCancellationsMode> sendCancellationsMode, Nullable`1<AffectedTaskOccurrence> affectedTaskOccurrences, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<ServiceResponse>> Delete(DeleteMode deleteMode, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<ServiceResponse>> Empty(DeleteMode deleteMode, bool deleteSubFolders, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<ServiceResponse>> MarkAllItemsAsRead(bool suppressReadReceipts, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<ServiceResponse>> MarkAllItemsAsUnread(bool suppressReadReceipts, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Folder/<Save>d__17")]
public Task Save(FolderId parentFolderId, CancellationToken token);
    public Task Save(WellKnownFolderName parentFolderName);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Folder/<Update>d__19")]
public Task Update(CancellationToken token);
    public Task`1<Folder> Copy(FolderId destinationFolderId, CancellationToken token);
    public Task`1<Folder> Copy(WellKnownFolderName destinationFolderName);
    public Task`1<Folder> Move(FolderId destinationFolderId, CancellationToken token);
    public Task`1<Folder> Move(WellKnownFolderName destinationFolderName);
    internal Task`1<ServiceResponseCollection`1<FindItemResponse`1<TItem>>> InternalFindItems(string queryString, ViewBase view, Grouping groupBy, CancellationToken token);
    internal Task`1<ServiceResponseCollection`1<FindItemResponse`1<TItem>>> InternalFindItems(SearchFilter searchFilter, ViewBase view, Grouping groupBy, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Folder/<FindItems>d__26")]
public Task`1<FindItemsResults`1<Item>> FindItems(SearchFilter searchFilter, ItemView view, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Folder/<FindItems>d__27")]
public Task`1<FindItemsResults`1<Item>> FindItems(string queryString, ItemView view, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Folder/<FindItems>d__28")]
public Task`1<FindItemsResults`1<Item>> FindItems(ItemView view, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Folder/<FindItems>d__29")]
public Task`1<GroupedFindItemsResults`1<Item>> FindItems(SearchFilter searchFilter, ItemView view, Grouping groupBy, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Folder/<FindItems>d__30")]
public Task`1<GroupedFindItemsResults`1<Item>> FindItems(string queryString, ItemView view, Grouping groupBy, CancellationToken token);
    public Task`1<FindFoldersResults> FindFolders(FolderView view);
    public Task`1<FindFoldersResults> FindFolders(SearchFilter searchFilter, FolderView view);
    public Task`1<GroupedFindItemsResults`1<Item>> FindItems(ItemView view, Grouping groupBy);
    internal virtual PropertyDefinition GetIdPropertyDefinition();
    public void SetExtendedProperty(ExtendedPropertyDefinition extendedPropertyDefinition, object value);
    public bool RemoveExtendedProperty(ExtendedPropertyDefinition extendedPropertyDefinition);
    internal virtual ExtendedPropertyCollection GetExtendedProperties();
    public FolderId get_Id();
    public FolderId get_ParentFolderId();
    public int get_ChildFolderCount();
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_FolderClass();
    public void set_FolderClass(string value);
    public int get_TotalCount();
    public ExtendedPropertyCollection get_ExtendedProperties();
    public ManagedFolderInformation get_ManagedFolderInformation();
    public EffectiveRights get_EffectiveRights();
    public FolderPermissionCollection get_Permissions();
    public int get_UnreadCount();
    public PolicyTag get_PolicyTag();
    public void set_PolicyTag(PolicyTag value);
    public ArchiveTag get_ArchiveTag();
    public void set_ArchiveTag(ArchiveTag value);
    public string get_WellKnownFolderNameAsString();
    public Nullable`1<WellKnownFolderName> get_WellKnownFolderName();
}
public class Microsoft.Exchange.WebServices.Data.FolderChange : Change {
    public Folder Folder { get; }
    public FolderId FolderId { get; }
    internal virtual ServiceId CreateId();
    public Folder get_Folder();
    public FolderId get_FolderId();
}
public class Microsoft.Exchange.WebServices.Data.FolderEvent : NotificationEvent {
    private FolderId folderId;
    private FolderId oldFolderId;
    private Nullable`1<int> unreadCount;
    public FolderId FolderId { get; }
    public FolderId OldFolderId { get; }
    public Nullable`1<int> UnreadCount { get; }
    internal FolderEvent(EventType eventType, DateTime timestamp);
    internal virtual void InternalLoadFromXml(EwsServiceXmlReader reader);
    public FolderId get_FolderId();
    public FolderId get_OldFolderId();
    public Nullable`1<int> get_UnreadCount();
}
public class Microsoft.Exchange.WebServices.Data.FolderId : ServiceId {
    private Nullable`1<WellKnownFolderName> folderName;
    private Mailbox mailbox;
    public Nullable`1<WellKnownFolderName> FolderName { get; }
    public Mailbox Mailbox { get; }
    internal bool IsValid { get; }
    public FolderId(string uniqueId);
    public FolderId(WellKnownFolderName folderName);
    public FolderId(WellKnownFolderName folderName, Mailbox mailbox);
    internal virtual string GetXmlElementName();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal void Validate(ExchangeVersion version);
    public Nullable`1<WellKnownFolderName> get_FolderName();
    public Mailbox get_Mailbox();
    public static FolderId op_Implicit(string uniqueId);
    public static FolderId op_Implicit(WellKnownFolderName folderName);
    internal virtual bool get_IsValid();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.FolderIdCollection : ComplexPropertyCollection`1<FolderId> {
    internal FolderIdCollection(IEnumerable`1<FolderId> folderIds);
    internal virtual FolderId CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(FolderId complexProperty);
    public void Add(FolderId folderId);
    public FolderId Add(WellKnownFolderName folderName);
    public void Clear();
    public void RemoveAt(int index);
    public bool Remove(FolderId folderId);
    public bool Remove(WellKnownFolderName folderName);
    [CompilerGeneratedAttribute]
private void <.ctor>b__1_0(FolderId folderId);
}
internal class Microsoft.Exchange.WebServices.Data.FolderIdWrapper : AbstractFolderIdWrapper {
    private FolderId folderId;
    internal FolderIdWrapper(FolderId folderId);
    internal virtual void WriteToXml(EwsServiceXmlWriter writer);
    internal virtual void Validate(ExchangeVersion version);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Exchange.WebServices.Data.FolderIdWrapperList : object {
    private List`1<AbstractFolderIdWrapper> ids;
    internal int Count { get; }
    internal AbstractFolderIdWrapper Item { get; }
    internal void Add(Folder folder);
    internal void AddRange(IEnumerable`1<Folder> folders);
    internal void Add(FolderId folderId);
    internal void AddRange(IEnumerable`1<FolderId> folderIds);
    internal void WriteToXml(EwsServiceXmlWriter writer, XmlNamespace ewsNamesapce, string xmlElementName);
    internal int get_Count();
    internal AbstractFolderIdWrapper get_Item(int index);
    internal void Validate(ExchangeVersion version);
    public sealed virtual IEnumerator`1<AbstractFolderIdWrapper> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.Exchange.WebServices.Data.FolderPermission : ComplexProperty {
    private static LazyMember`1<Dictionary`2<FolderPermissionLevel, FolderPermission>> defaultPermissions;
    private static LazyMember`1<List`1<FolderPermission>> levelVariants;
    private UserId userId;
    private bool canCreateItems;
    private bool canCreateSubFolders;
    private bool isFolderOwner;
    private bool isFolderVisible;
    private bool isFolderContact;
    private PermissionScope editItems;
    private PermissionScope deleteItems;
    private FolderPermissionReadAccess readItems;
    private FolderPermissionLevel permissionLevel;
    public UserId UserId { get; public set; }
    public bool CanCreateItems { get; public set; }
    public bool CanCreateSubFolders { get; public set; }
    public bool IsFolderOwner { get; public set; }
    public bool IsFolderVisible { get; public set; }
    public bool IsFolderContact { get; public set; }
    public PermissionScope EditItems { get; public set; }
    public PermissionScope DeleteItems { get; public set; }
    public FolderPermissionReadAccess ReadItems { get; public set; }
    public FolderPermissionLevel PermissionLevel { get; public set; }
    public FolderPermissionLevel DisplayPermissionLevel { get; }
    public FolderPermission(UserId userId, FolderPermissionLevel permissionLevel);
    public FolderPermission(string primarySmtpAddress, FolderPermissionLevel permissionLevel);
    public FolderPermission(StandardUser standardUser, FolderPermissionLevel permissionLevel);
    private static FolderPermission();
    private bool IsEqualTo(FolderPermission permission);
    private FolderPermission Clone();
    private void AdjustPermissionLevel();
    private void AssignIndividualPermissions(FolderPermission permission);
    internal void Validate(bool isCalendarFolder, int permissionIndex);
    public UserId get_UserId();
    public void set_UserId(UserId value);
    public bool get_CanCreateItems();
    public void set_CanCreateItems(bool value);
    public bool get_CanCreateSubFolders();
    public void set_CanCreateSubFolders(bool value);
    public bool get_IsFolderOwner();
    public void set_IsFolderOwner(bool value);
    public bool get_IsFolderVisible();
    public void set_IsFolderVisible(bool value);
    public bool get_IsFolderContact();
    public void set_IsFolderContact(bool value);
    public PermissionScope get_EditItems();
    public void set_EditItems(PermissionScope value);
    public PermissionScope get_DeleteItems();
    public void set_DeleteItems(PermissionScope value);
    public FolderPermissionReadAccess get_ReadItems();
    public void set_ReadItems(FolderPermissionReadAccess value);
    public FolderPermissionLevel get_PermissionLevel();
    public void set_PermissionLevel(FolderPermissionLevel value);
    public FolderPermissionLevel get_DisplayPermissionLevel();
    private void PropertyChanged(ComplexProperty complexProperty);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void LoadFromXml(EwsServiceXmlReader reader, XmlNamespace xmlNamespace, string xmlElementName);
    internal void WriteElementsToXml(EwsServiceXmlWriter writer, bool isCalendarFolder);
    internal void WriteToXml(EwsServiceXmlWriter writer, string xmlElementName, bool isCalendarFolder);
}
public class Microsoft.Exchange.WebServices.Data.FolderPermissionCollection : ComplexPropertyCollection`1<FolderPermission> {
    private bool isCalendarFolder;
    private Collection`1<string> unknownEntries;
    private string InnerCollectionXmlElementName { get; }
    private string CollectionItemXmlElementName { get; }
    public Collection`1<string> UnknownEntries { get; }
    internal FolderPermissionCollection(Folder owner);
    private string get_InnerCollectionXmlElementName();
    private string get_CollectionItemXmlElementName();
    internal virtual string GetCollectionItemXmlElementName(FolderPermission complexProperty);
    internal virtual void LoadFromXml(EwsServiceXmlReader reader, string localElementName);
    internal void Validate();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual FolderPermission CreateComplexProperty(string xmlElementName);
    public void Add(FolderPermission permission);
    public void AddRange(IEnumerable`1<FolderPermission> permissions);
    public void Clear();
    public bool Remove(FolderPermission permission);
    public void RemoveAt(int index);
    public Collection`1<string> get_UnknownEntries();
}
public enum Microsoft.Exchange.WebServices.Data.FolderPermissionLevel : Enum {
    public int value__;
    public static FolderPermissionLevel None;
    public static FolderPermissionLevel Owner;
    public static FolderPermissionLevel PublishingEditor;
    public static FolderPermissionLevel Editor;
    public static FolderPermissionLevel PublishingAuthor;
    public static FolderPermissionLevel Author;
    public static FolderPermissionLevel NoneditingAuthor;
    public static FolderPermissionLevel Reviewer;
    public static FolderPermissionLevel Contributor;
    public static FolderPermissionLevel FreeBusyTimeOnly;
    public static FolderPermissionLevel FreeBusyTimeAndSubjectAndLocation;
    public static FolderPermissionLevel Custom;
}
public enum Microsoft.Exchange.WebServices.Data.FolderPermissionReadAccess : Enum {
    public int value__;
    public static FolderPermissionReadAccess None;
    public static FolderPermissionReadAccess TimeOnly;
    public static FolderPermissionReadAccess TimeAndSubjectAndLocation;
    public static FolderPermissionReadAccess FullDetails;
}
[SchemaAttribute]
public class Microsoft.Exchange.WebServices.Data.FolderSchema : ServiceObjectSchema {
    public static PropertyDefinition Id;
    public static PropertyDefinition FolderClass;
    public static PropertyDefinition ParentFolderId;
    public static PropertyDefinition ChildFolderCount;
    public static PropertyDefinition DisplayName;
    public static PropertyDefinition UnreadCount;
    public static PropertyDefinition TotalCount;
    public static PropertyDefinition ManagedFolderInformation;
    public static PropertyDefinition EffectiveRights;
    public static PropertyDefinition Permissions;
    public static PropertyDefinition WellKnownFolderName;
    public static PropertyDefinition PolicyTag;
    public static PropertyDefinition ArchiveTag;
    internal static FolderSchema Instance;
    private static FolderSchema();
    internal virtual void RegisterProperties();
}
public enum Microsoft.Exchange.WebServices.Data.FolderTraversal : Enum {
    public int value__;
    public static FolderTraversal Shallow;
    public static FolderTraversal Deep;
    public static FolderTraversal SoftDeleted;
}
public class Microsoft.Exchange.WebServices.Data.FolderView : PagedView {
    private FolderTraversal traversal;
    public FolderTraversal Traversal { get; public set; }
    public FolderView(int pageSize);
    public FolderView(int pageSize, int offset);
    public FolderView(int pageSize, int offset, OffsetBasePoint offsetBasePoint);
    internal virtual string GetViewXmlElementName();
    internal virtual ServiceObjectType GetServiceObjectType();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    public FolderTraversal get_Traversal();
    public void set_Traversal(FolderTraversal value);
}
internal class Microsoft.Exchange.WebServices.Data.FolderWrapper : AbstractFolderIdWrapper {
    private Folder folder;
    internal FolderWrapper(Folder folder);
    public virtual Folder GetFolder();
    internal virtual void WriteToXml(EwsServiceXmlWriter writer);
}
public enum Microsoft.Exchange.WebServices.Data.FreeBusyViewType : Enum {
    public int value__;
    public static FreeBusyViewType None;
    public static FreeBusyViewType MergedOnly;
    public static FreeBusyViewType FreeBusy;
    public static FreeBusyViewType FreeBusyMerged;
    public static FreeBusyViewType Detailed;
    public static FreeBusyViewType DetailedMerged;
}
internal class Microsoft.Exchange.WebServices.Data.GenericPropertyDefinition`1 : TypedPropertyDefinition {
    public Type Type { get; }
    internal GenericPropertyDefinition`1(string xmlElementName, string uri, ExchangeVersion version);
    internal GenericPropertyDefinition`1(string xmlElementName, string uri, PropertyDefinitionFlags flags, ExchangeVersion version);
    internal GenericPropertyDefinition`1(string xmlElementName, string uri, PropertyDefinitionFlags flags, ExchangeVersion version, bool isNullable);
    internal virtual object Parse(string value);
    public virtual Type get_Type();
}
internal class Microsoft.Exchange.WebServices.Data.GetAppManifestsRequest : SimpleServiceRequestBase {
    [CompilerGeneratedAttribute]
private string <ApiVersionSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaVersionSupported>k__BackingField;
    internal string ApiVersionSupported { get; internal set; }
    internal string SchemaVersionSupported { get; internal set; }
    internal GetAppManifestsRequest(ExchangeService service);
    [CompilerGeneratedAttribute]
internal string get_ApiVersionSupported();
    [CompilerGeneratedAttribute]
internal void set_ApiVersionSupported(string value);
    [CompilerGeneratedAttribute]
internal string get_SchemaVersionSupported();
    [CompilerGeneratedAttribute]
internal void set_SchemaVersionSupported(string value);
    internal virtual void Validate();
    internal virtual string GetXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetResponseXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.GetAppManifestsRequest/<Execute>d__15")]
internal Task`1<GetAppManifestsResponse> Execute(CancellationToken token);
}
internal class Microsoft.Exchange.WebServices.Data.GetAppManifestsResponse : ServiceResponse {
    private Collection`1<XmlDocument> manifests;
    private Collection`1<ClientApp> apps;
    public Collection`1<XmlDocument> Manifests { get; }
    public Collection`1<ClientApp> Apps { get; }
    public Collection`1<XmlDocument> get_Manifests();
    public Collection`1<ClientApp> get_Apps();
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    private void ReadFromExchange2013(EwsServiceXmlReader reader);
    private void ReadFromExchange2013Sp1(EwsServiceXmlReader reader);
}
internal class Microsoft.Exchange.WebServices.Data.GetAppMarketplaceUrlRequest : SimpleServiceRequestBase {
    [CompilerGeneratedAttribute]
private string <ApiVersionSupported>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SchemaVersionSupported>k__BackingField;
    internal string ApiVersionSupported { get; internal set; }
    internal string SchemaVersionSupported { get; internal set; }
    internal GetAppMarketplaceUrlRequest(ExchangeService service);
    [CompilerGeneratedAttribute]
internal string get_ApiVersionSupported();
    [CompilerGeneratedAttribute]
internal void set_ApiVersionSupported(string value);
    [CompilerGeneratedAttribute]
internal string get_SchemaVersionSupported();
    [CompilerGeneratedAttribute]
internal void set_SchemaVersionSupported(string value);
    internal virtual string GetXmlElementName();
    internal virtual void Validate();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetResponseXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.GetAppMarketplaceUrlRequest/<Execute>d__15")]
internal Task`1<GetAppMarketplaceUrlResponse> Execute(CancellationToken token);
}
internal class Microsoft.Exchange.WebServices.Data.GetAppMarketplaceUrlResponse : ServiceResponse {
    private string appMarketplaceUrl;
    public string AppMarketplaceUrl { get; }
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    public string get_AppMarketplaceUrl();
}
internal class Microsoft.Exchange.WebServices.Data.GetAttachmentRequest : MultiResponseServiceRequest`1<GetAttachmentResponse> {
    private List`1<Attachment> attachments;
    private List`1<string> attachmentIds;
    private List`1<PropertyDefinitionBase> additionalProperties;
    private Nullable`1<BodyType> bodyType;
    public List`1<Attachment> Attachments { get; }
    public List`1<string> AttachmentIds { get; }
    public List`1<PropertyDefinitionBase> AdditionalProperties { get; }
    public Nullable`1<BodyType> BodyType { get; public set; }
    internal bool EmitTimeZoneHeader { get; }
    internal GetAttachmentRequest(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual void Validate();
    internal virtual GetAttachmentResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public List`1<Attachment> get_Attachments();
    public List`1<string> get_AttachmentIds();
    public List`1<PropertyDefinitionBase> get_AdditionalProperties();
    public Nullable`1<BodyType> get_BodyType();
    public void set_BodyType(Nullable`1<BodyType> value);
    internal virtual bool get_EmitTimeZoneHeader();
    private void WriteAttachmentIdXml(EwsServiceXmlWriter writer, string attachmentId);
}
public class Microsoft.Exchange.WebServices.Data.GetAttachmentResponse : ServiceResponse {
    private Attachment attachment;
    public Attachment Attachment { get; }
    internal GetAttachmentResponse(Attachment attachment);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    public Attachment get_Attachment();
}
internal class Microsoft.Exchange.WebServices.Data.GetClientAccessTokenRequest : MultiResponseServiceRequest`1<GetClientAccessTokenResponse> {
    [CompilerGeneratedAttribute]
private ClientAccessTokenRequest[] <TokenRequests>k__BackingField;
    internal ClientAccessTokenRequest[] TokenRequests { get; internal set; }
    internal GetClientAccessTokenRequest(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual GetClientAccessTokenResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual void Validate();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [CompilerGeneratedAttribute]
internal ClientAccessTokenRequest[] get_TokenRequests();
    [CompilerGeneratedAttribute]
internal void set_TokenRequests(ClientAccessTokenRequest[] value);
}
public class Microsoft.Exchange.WebServices.Data.GetClientAccessTokenResponse : ServiceResponse {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ClientAccessTokenType <TokenType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TokenValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TTL>k__BackingField;
    public string Id { get; private set; }
    public ClientAccessTokenType TokenType { get; private set; }
    public string TokenValue { get; private set; }
    public int TTL { get; private set; }
    internal GetClientAccessTokenResponse(string id, ClientAccessTokenType tokenType);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
public ClientAccessTokenType get_TokenType();
    [CompilerGeneratedAttribute]
private void set_TokenType(ClientAccessTokenType value);
    [CompilerGeneratedAttribute]
public string get_TokenValue();
    [CompilerGeneratedAttribute]
private void set_TokenValue(string value);
    [CompilerGeneratedAttribute]
public int get_TTL();
    [CompilerGeneratedAttribute]
private void set_TTL(int value);
}
internal class Microsoft.Exchange.WebServices.Data.GetClientExtensionRequest : SimpleServiceRequestBase {
    private StringList requestedExtensionIds;
    private bool shouldReturnEnabledOnly;
    private bool isUserScope;
    private string userId;
    private StringList userEnabledExtensionIds;
    private StringList userDisabledExtensionIds;
    private bool isDebug;
    internal GetClientExtensionRequest(ExchangeService service, StringList requestedExtensionIds, bool shouldReturnEnabledOnly, bool isUserScope, string userId, StringList userEnabledExtensionIds, StringList userDisabledExtensionIds, bool isDebug);
    internal virtual string GetXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetResponseXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.GetClientExtensionRequest/<Execute>d__13")]
internal Task`1<GetClientExtensionResponse> Execute(CancellationToken token);
}
public class Microsoft.Exchange.WebServices.Data.GetClientExtensionResponse : ServiceResponse {
    private Collection`1<ClientExtension> clientExtension;
    private string rawMasterTableXml;
    public Collection`1<ClientExtension> ClientExtensions { get; }
    public string RawMasterTableXml { get; }
    public Collection`1<ClientExtension> get_ClientExtensions();
    public string get_RawMasterTableXml();
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
}
internal class Microsoft.Exchange.WebServices.Data.GetConversationItemsRequest : MultiResponseServiceRequest`1<GetConversationItemsResponse> {
    [CompilerGeneratedAttribute]
private List`1<ConversationRequest> <Conversations>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertySet <ItemProperties>k__BackingField;
    [CompilerGeneratedAttribute]
private FolderIdCollection <FoldersToIgnore>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxItemsToReturn>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<ConversationSortOrder> <SortOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<MailboxSearchLocation> <MailboxScope>k__BackingField;
    internal List`1<ConversationRequest> Conversations { get; internal set; }
    internal PropertySet ItemProperties { get; internal set; }
    internal FolderIdCollection FoldersToIgnore { get; internal set; }
    internal Nullable`1<int> MaxItemsToReturn { get; internal set; }
    internal Nullable`1<ConversationSortOrder> SortOrder { get; internal set; }
    internal Nullable`1<MailboxSearchLocation> MailboxScope { get; internal set; }
    internal GetConversationItemsRequest(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    [CompilerGeneratedAttribute]
internal List`1<ConversationRequest> get_Conversations();
    [CompilerGeneratedAttribute]
internal void set_Conversations(List`1<ConversationRequest> value);
    [CompilerGeneratedAttribute]
internal PropertySet get_ItemProperties();
    [CompilerGeneratedAttribute]
internal void set_ItemProperties(PropertySet value);
    [CompilerGeneratedAttribute]
internal FolderIdCollection get_FoldersToIgnore();
    [CompilerGeneratedAttribute]
internal void set_FoldersToIgnore(FolderIdCollection value);
    [CompilerGeneratedAttribute]
internal Nullable`1<int> get_MaxItemsToReturn();
    [CompilerGeneratedAttribute]
internal void set_MaxItemsToReturn(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<ConversationSortOrder> get_SortOrder();
    [CompilerGeneratedAttribute]
internal void set_SortOrder(Nullable`1<ConversationSortOrder> value);
    [CompilerGeneratedAttribute]
internal Nullable`1<MailboxSearchLocation> get_MailboxScope();
    [CompilerGeneratedAttribute]
internal void set_MailboxScope(Nullable`1<MailboxSearchLocation> value);
    internal virtual void Validate();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual GetConversationItemsResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal virtual int GetExpectedResponseMessageCount();
}
public class Microsoft.Exchange.WebServices.Data.GetConversationItemsResponse : ServiceResponse {
    private PropertySet propertySet;
    [CompilerGeneratedAttribute]
private ConversationResponse <Conversation>k__BackingField;
    public ConversationResponse Conversation { get; public set; }
    internal GetConversationItemsResponse(PropertySet propertySet);
    [CompilerGeneratedAttribute]
public ConversationResponse get_Conversation();
    [CompilerGeneratedAttribute]
public void set_Conversation(ConversationResponse value);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
}
internal class Microsoft.Exchange.WebServices.Data.GetDelegateRequest : DelegateManagementRequestBase`1<GetDelegateResponse> {
    private List`1<UserId> userIds;
    private bool includePermissions;
    public List`1<UserId> UserIds { get; }
    public bool IncludePermissions { get; public set; }
    internal GetDelegateRequest(ExchangeService service);
    internal virtual GetDelegateResponse CreateResponse();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetXmlElementName();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public List`1<UserId> get_UserIds();
    public bool get_IncludePermissions();
    public void set_IncludePermissions(bool value);
}
internal class Microsoft.Exchange.WebServices.Data.GetDelegateResponse : DelegateManagementResponse {
    private MeetingRequestsDeliveryScope meetingRequestsDeliveryScope;
    internal MeetingRequestsDeliveryScope MeetingRequestsDeliveryScope { get; }
    internal GetDelegateResponse(bool readDelegateUsers);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    internal MeetingRequestsDeliveryScope get_MeetingRequestsDeliveryScope();
}
internal class Microsoft.Exchange.WebServices.Data.GetDiscoverySearchConfigurationRequest : SimpleServiceRequestBase {
    [CompilerGeneratedAttribute]
private string <SearchId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExpandGroupMembership>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <InPlaceHoldConfigurationOnly>k__BackingField;
    public string SearchId { get; public set; }
    public bool ExpandGroupMembership { get; public set; }
    public bool InPlaceHoldConfigurationOnly { get; public set; }
    internal GetDiscoverySearchConfigurationRequest(ExchangeService service);
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.GetDiscoverySearchConfigurationRequest/<Execute>d__6")]
internal Task`1<GetDiscoverySearchConfigurationResponse> Execute(CancellationToken token);
    [CompilerGeneratedAttribute]
public string get_SearchId();
    [CompilerGeneratedAttribute]
public void set_SearchId(string value);
    [CompilerGeneratedAttribute]
public bool get_ExpandGroupMembership();
    [CompilerGeneratedAttribute]
public void set_ExpandGroupMembership(bool value);
    [CompilerGeneratedAttribute]
public bool get_InPlaceHoldConfigurationOnly();
    [CompilerGeneratedAttribute]
public void set_InPlaceHoldConfigurationOnly(bool value);
}
public class Microsoft.Exchange.WebServices.Data.GetDiscoverySearchConfigurationResponse : ServiceResponse {
    private List`1<DiscoverySearchConfiguration> configurations;
    public DiscoverySearchConfiguration[] DiscoverySearchConfigurations { get; }
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    public DiscoverySearchConfiguration[] get_DiscoverySearchConfigurations();
}
internal class Microsoft.Exchange.WebServices.Data.GetEventsRequest : MultiResponseServiceRequest`1<GetEventsResponse> {
    private string subscriptionId;
    private string watermark;
    public string SubscriptionId { get; public set; }
    public string Watermark { get; public set; }
    internal GetEventsRequest(ExchangeService service);
    internal virtual GetEventsResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual void Validate();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public string get_SubscriptionId();
    public void set_SubscriptionId(string value);
    public string get_Watermark();
    public void set_Watermark(string value);
}
internal class Microsoft.Exchange.WebServices.Data.GetEventsResponse : ServiceResponse {
    private GetEventsResults results;
    internal GetEventsResults Results { get; }
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    internal GetEventsResults get_Results();
}
public class Microsoft.Exchange.WebServices.Data.GetEventsResults : object {
    private static LazyMember`1<Dictionary`2<string, EventType>> xmlElementNameToEventTypeMap;
    private string newWatermark;
    private string subscriptionId;
    private string previousWatermark;
    private bool moreEventsAvailable;
    private Collection`1<NotificationEvent> events;
    internal static Dictionary`2<string, EventType> XmlElementNameToEventTypeMap { get; }
    internal string SubscriptionId { get; }
    internal string PreviousWatermark { get; }
    internal string NewWatermark { get; }
    internal bool MoreEventsAvailable { get; }
    public IEnumerable`1<FolderEvent> FolderEvents { get; }
    public IEnumerable`1<ItemEvent> ItemEvents { get; }
    public Collection`1<NotificationEvent> AllEvents { get; }
    private static GetEventsResults();
    internal static Dictionary`2<string, EventType> get_XmlElementNameToEventTypeMap();
    internal void LoadFromXml(EwsServiceXmlReader reader);
    private void LoadNotificationEventFromXml(EwsServiceXmlReader reader, string eventElementName, EventType eventType);
    internal string get_SubscriptionId();
    internal string get_PreviousWatermark();
    internal string get_NewWatermark();
    internal bool get_MoreEventsAvailable();
    public IEnumerable`1<FolderEvent> get_FolderEvents();
    public IEnumerable`1<ItemEvent> get_ItemEvents();
    public Collection`1<NotificationEvent> get_AllEvents();
}
internal class Microsoft.Exchange.WebServices.Data.GetFolderRequest : GetFolderRequestBase`1<GetFolderResponse> {
    internal GetFolderRequest(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual GetFolderResponse CreateServiceResponse(ExchangeService service, int responseIndex);
}
internal abstract class Microsoft.Exchange.WebServices.Data.GetFolderRequestBase`1 : GetRequest`2<Folder, TResponse> {
    private FolderIdWrapperList folderIds;
    public FolderIdWrapperList FolderIds { get; }
    protected GetFolderRequestBase`1(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual void Validate();
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual ServiceObjectType GetServiceObjectType();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public FolderIdWrapperList get_FolderIds();
}
internal class Microsoft.Exchange.WebServices.Data.GetFolderRequestForLoad : GetFolderRequestBase`1<ServiceResponse> {
    internal GetFolderRequestForLoad(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual ServiceResponse CreateServiceResponse(ExchangeService service, int responseIndex);
}
public class Microsoft.Exchange.WebServices.Data.GetFolderResponse : ServiceResponse {
    private Folder folder;
    private PropertySet propertySet;
    public Folder Folder { get; }
    internal GetFolderResponse(Folder folder, PropertySet propertySet);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    private Folder GetObjectInstance(ExchangeService service, string xmlElementName);
    public Folder get_Folder();
}
internal class Microsoft.Exchange.WebServices.Data.GetHoldOnMailboxesRequest : SimpleServiceRequestBase {
    [CompilerGeneratedAttribute]
private string <HoldId>k__BackingField;
    public string HoldId { get; public set; }
    internal GetHoldOnMailboxesRequest(ExchangeService service);
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetXmlElementName();
    internal virtual void Validate();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.GetHoldOnMailboxesRequest/<Execute>d__7")]
internal Task`1<GetHoldOnMailboxesResponse> Execute(CancellationToken token);
    [CompilerGeneratedAttribute]
public string get_HoldId();
    [CompilerGeneratedAttribute]
public void set_HoldId(string value);
}
public class Microsoft.Exchange.WebServices.Data.GetHoldOnMailboxesResponse : ServiceResponse {
    private MailboxHoldResult holdResult;
    public MailboxHoldResult HoldResult { get; }
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    public MailboxHoldResult get_HoldResult();
}
internal class Microsoft.Exchange.WebServices.Data.GetInboxRulesRequest : SimpleServiceRequestBase {
    private string mailboxSmtpAddress;
    internal string MailboxSmtpAddress { get; internal set; }
    internal GetInboxRulesRequest(ExchangeService service);
    internal string get_MailboxSmtpAddress();
    internal void set_MailboxSmtpAddress(string value);
    internal virtual string GetXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetResponseXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.GetInboxRulesRequest/<Execute>d__10")]
internal Task`1<GetInboxRulesResponse> Execute(CancellationToken token);
}
internal class Microsoft.Exchange.WebServices.Data.GetInboxRulesResponse : ServiceResponse {
    private RuleCollection ruleCollection;
    internal RuleCollection Rules { get; }
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    internal RuleCollection get_Rules();
}
internal class Microsoft.Exchange.WebServices.Data.GetItemRequest : GetItemRequestBase`1<GetItemResponse> {
    internal GetItemRequest(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual GetItemResponse CreateServiceResponse(ExchangeService service, int responseIndex);
}
internal abstract class Microsoft.Exchange.WebServices.Data.GetItemRequestBase`1 : GetRequest`2<Item, TResponse> {
    private ItemIdWrapperList itemIds;
    public ItemIdWrapperList ItemIds { get; }
    internal bool EmitTimeZoneHeader { get; }
    protected GetItemRequestBase`1(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual void Validate();
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual ServiceObjectType GetServiceObjectType();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public ItemIdWrapperList get_ItemIds();
    internal virtual bool get_EmitTimeZoneHeader();
}
internal class Microsoft.Exchange.WebServices.Data.GetItemRequestForLoad : GetItemRequestBase`1<ServiceResponse> {
    internal GetItemRequestForLoad(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual ServiceResponse CreateServiceResponse(ExchangeService service, int responseIndex);
}
public class Microsoft.Exchange.WebServices.Data.GetItemResponse : ServiceResponse {
    private Item item;
    private PropertySet propertySet;
    public Item Item { get; }
    internal GetItemResponse(Item item, PropertySet propertySet);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    private Item GetObjectInstance(ExchangeService service, string xmlElementName);
    public Item get_Item();
}
public class Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsParameters : NonIndexableItemParameters {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageItemReference>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SearchPageDirection> <PageDirection>k__BackingField;
    public Nullable`1<int> PageSize { get; public set; }
    public string PageItemReference { get; public set; }
    public Nullable`1<SearchPageDirection> PageDirection { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_PageItemReference();
    [CompilerGeneratedAttribute]
public void set_PageItemReference(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<SearchPageDirection> get_PageDirection();
    [CompilerGeneratedAttribute]
public void set_PageDirection(Nullable`1<SearchPageDirection> value);
}
internal class Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsRequest : SimpleServiceRequestBase {
    [CompilerGeneratedAttribute]
private String[] <Mailboxes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageItemReference>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<SearchPageDirection> <PageDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SearchArchiveOnly>k__BackingField;
    public String[] Mailboxes { get; public set; }
    public Nullable`1<int> PageSize { get; public set; }
    public string PageItemReference { get; public set; }
    public Nullable`1<SearchPageDirection> PageDirection { get; public set; }
    public bool SearchArchiveOnly { get; public set; }
    internal GetNonIndexableItemDetailsRequest(ExchangeService service);
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetXmlElementName();
    internal virtual void Validate();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsRequest/<Execute>d__7")]
internal Task`1<GetNonIndexableItemDetailsResponse> Execute(CancellationToken token);
    [CompilerGeneratedAttribute]
public String[] get_Mailboxes();
    [CompilerGeneratedAttribute]
public void set_Mailboxes(String[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_PageItemReference();
    [CompilerGeneratedAttribute]
public void set_PageItemReference(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<SearchPageDirection> get_PageDirection();
    [CompilerGeneratedAttribute]
public void set_PageDirection(Nullable`1<SearchPageDirection> value);
    [CompilerGeneratedAttribute]
public bool get_SearchArchiveOnly();
    [CompilerGeneratedAttribute]
public void set_SearchArchiveOnly(bool value);
}
public class Microsoft.Exchange.WebServices.Data.GetNonIndexableItemDetailsResponse : ServiceResponse {
    [CompilerGeneratedAttribute]
private NonIndexableItemDetailsResult <NonIndexableItemsResult>k__BackingField;
    public NonIndexableItemDetailsResult NonIndexableItemsResult { get; internal set; }
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    [CompilerGeneratedAttribute]
public NonIndexableItemDetailsResult get_NonIndexableItemsResult();
    [CompilerGeneratedAttribute]
internal void set_NonIndexableItemsResult(NonIndexableItemDetailsResult value);
}
public class Microsoft.Exchange.WebServices.Data.GetNonIndexableItemStatisticsParameters : NonIndexableItemParameters {
}
internal class Microsoft.Exchange.WebServices.Data.GetNonIndexableItemStatisticsRequest : SimpleServiceRequestBase {
    [CompilerGeneratedAttribute]
private String[] <Mailboxes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SearchArchiveOnly>k__BackingField;
    public String[] Mailboxes { get; public set; }
    public bool SearchArchiveOnly { get; public set; }
    internal GetNonIndexableItemStatisticsRequest(ExchangeService service);
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetXmlElementName();
    internal virtual void Validate();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.GetNonIndexableItemStatisticsRequest/<Execute>d__7")]
internal Task`1<GetNonIndexableItemStatisticsResponse> Execute(CancellationToken token);
    [CompilerGeneratedAttribute]
public String[] get_Mailboxes();
    [CompilerGeneratedAttribute]
public void set_Mailboxes(String[] value);
    [CompilerGeneratedAttribute]
public bool get_SearchArchiveOnly();
    [CompilerGeneratedAttribute]
public void set_SearchArchiveOnly(bool value);
}
public class Microsoft.Exchange.WebServices.Data.GetNonIndexableItemStatisticsResponse : ServiceResponse {
    [CompilerGeneratedAttribute]
private List`1<NonIndexableItemStatistic> <NonIndexableStatistics>k__BackingField;
    public List`1<NonIndexableItemStatistic> NonIndexableStatistics { get; internal set; }
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    [CompilerGeneratedAttribute]
public List`1<NonIndexableItemStatistic> get_NonIndexableStatistics();
    [CompilerGeneratedAttribute]
internal void set_NonIndexableStatistics(List`1<NonIndexableItemStatistic> value);
}
internal class Microsoft.Exchange.WebServices.Data.GetObjectInstanceDelegate`1 : MulticastDelegate {
    public GetObjectInstanceDelegate`1(object object, IntPtr method);
    public virtual T Invoke(ExchangeService service, string xmlElementName);
    public virtual IAsyncResult BeginInvoke(ExchangeService service, string xmlElementName, AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
internal class Microsoft.Exchange.WebServices.Data.GetOMEConfigurationRequest : SimpleServiceRequestBase {
    internal GetOMEConfigurationRequest(ExchangeService service);
    internal virtual string GetXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetResponseXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.GetOMEConfigurationRequest/<Execute>d__6")]
internal Task`1<GetOMEConfigurationResponse> Execute(CancellationToken token);
}
public class Microsoft.Exchange.WebServices.Data.GetOMEConfigurationResponse : ServiceResponse {
    private string xml;
    public string Xml { get; }
    public string get_Xml();
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
}
internal class Microsoft.Exchange.WebServices.Data.GetPasswordExpirationDateRequest : SimpleServiceRequestBase {
    private string mailboxSmtpAddress;
    internal string MailboxSmtpAddress { get; internal set; }
    internal GetPasswordExpirationDateRequest(ExchangeService service);
    internal virtual string GetXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetResponseXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.GetPasswordExpirationDateRequest/<Execute>d__6")]
internal Task`1<GetPasswordExpirationDateResponse> Execute(CancellationToken token);
    internal string get_MailboxSmtpAddress();
    internal void set_MailboxSmtpAddress(string value);
}
internal class Microsoft.Exchange.WebServices.Data.GetPasswordExpirationDateResponse : ServiceResponse {
    private Nullable`1<DateTime> passwordExpirationDate;
    public Nullable`1<DateTime> PasswordExpirationDate { get; }
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    public Nullable`1<DateTime> get_PasswordExpirationDate();
}
internal class Microsoft.Exchange.WebServices.Data.GetPeopleInsightsRequest : SimpleServiceRequestBase {
    [CompilerGeneratedAttribute]
private List`1<string> <Emailaddresses>k__BackingField;
    internal List`1<string> Emailaddresses { get; internal set; }
    internal GetPeopleInsightsRequest(ExchangeService service);
    [CompilerGeneratedAttribute]
internal List`1<string> get_Emailaddresses();
    [CompilerGeneratedAttribute]
internal void set_Emailaddresses(List`1<string> value);
    internal virtual void Validate();
    internal virtual string GetXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetResponseXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.GetPeopleInsightsRequest/<Execute>d__11")]
internal Task`1<GetPeopleInsightsResponse> Execute(CancellationToken token);
}
internal class Microsoft.Exchange.WebServices.Data.GetPeopleInsightsResponse : ServiceResponse {
    [CompilerGeneratedAttribute]
private Collection`1<Person> <People>k__BackingField;
    internal Collection`1<Person> People { get; private set; }
    [CompilerGeneratedAttribute]
internal Collection`1<Person> get_People();
    [CompilerGeneratedAttribute]
private void set_People(Collection`1<Person> value);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
}
internal class Microsoft.Exchange.WebServices.Data.GetPhoneCallRequest : SimpleServiceRequestBase {
    private PhoneCallId id;
    internal PhoneCallId Id { get; internal set; }
    internal GetPhoneCallRequest(ExchangeService service);
    internal virtual string GetXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetResponseXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.GetPhoneCallRequest/<Execute>d__7")]
internal Task`1<GetPhoneCallResponse> Execute(CancellationToken token);
    internal PhoneCallId get_Id();
    internal void set_Id(PhoneCallId value);
}
internal class Microsoft.Exchange.WebServices.Data.GetPhoneCallResponse : ServiceResponse {
    private PhoneCall phoneCall;
    internal PhoneCall PhoneCall { get; }
    internal GetPhoneCallResponse(ExchangeService service);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    internal PhoneCall get_PhoneCall();
}
internal class Microsoft.Exchange.WebServices.Data.GetPropertyDefinitionCallback : MulticastDelegate {
    public GetPropertyDefinitionCallback(object object, IntPtr method);
    public virtual PropertyDefinition Invoke(ExchangeVersion version);
    public virtual IAsyncResult BeginInvoke(ExchangeVersion version, AsyncCallback callback, object object);
    public virtual PropertyDefinition EndInvoke(IAsyncResult result);
}
internal abstract class Microsoft.Exchange.WebServices.Data.GetRequest`2 : MultiResponseServiceRequest`1<TResponse> {
    private PropertySet propertySet;
    public PropertySet PropertySet { get; public set; }
    internal GetRequest`2(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual void Validate();
    internal abstract virtual ServiceObjectType GetServiceObjectType();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    public PropertySet get_PropertySet();
    public void set_PropertySet(PropertySet value);
}
internal class Microsoft.Exchange.WebServices.Data.GetRoomListsRequest : SimpleServiceRequestBase {
    internal GetRoomListsRequest(ExchangeService service);
    internal virtual string GetXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetResponseXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.GetRoomListsRequest/<Execute>d__6")]
internal Task`1<GetRoomListsResponse> Execute(CancellationToken token);
}
internal class Microsoft.Exchange.WebServices.Data.GetRoomListsResponse : ServiceResponse {
    private EmailAddressCollection roomLists;
    public EmailAddressCollection RoomLists { get; }
    public EmailAddressCollection get_RoomLists();
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
}
internal class Microsoft.Exchange.WebServices.Data.GetRoomsRequest : SimpleServiceRequestBase {
    private EmailAddress roomList;
    internal EmailAddress RoomList { get; internal set; }
    internal GetRoomsRequest(ExchangeService service);
    internal virtual string GetXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetResponseXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.GetRoomsRequest/<Execute>d__6")]
internal Task`1<GetRoomsResponse> Execute(CancellationToken token);
    internal EmailAddress get_RoomList();
    internal void set_RoomList(EmailAddress value);
}
internal class Microsoft.Exchange.WebServices.Data.GetRoomsResponse : ServiceResponse {
    private Collection`1<EmailAddress> rooms;
    public Collection`1<EmailAddress> Rooms { get; }
    public Collection`1<EmailAddress> get_Rooms();
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
}
internal class Microsoft.Exchange.WebServices.Data.GetSearchableMailboxesRequest : SimpleServiceRequestBase {
    [CompilerGeneratedAttribute]
private string <SearchFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExpandGroupMembership>k__BackingField;
    public string SearchFilter { get; public set; }
    public bool ExpandGroupMembership { get; public set; }
    internal GetSearchableMailboxesRequest(ExchangeService service);
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.GetSearchableMailboxesRequest/<Execute>d__6")]
internal Task`1<GetSearchableMailboxesResponse> Execute(CancellationToken token);
    [CompilerGeneratedAttribute]
public string get_SearchFilter();
    [CompilerGeneratedAttribute]
public void set_SearchFilter(string value);
    [CompilerGeneratedAttribute]
public bool get_ExpandGroupMembership();
    [CompilerGeneratedAttribute]
public void set_ExpandGroupMembership(bool value);
}
public class Microsoft.Exchange.WebServices.Data.GetSearchableMailboxesResponse : ServiceResponse {
    private List`1<SearchableMailbox> searchableMailboxes;
    [CompilerGeneratedAttribute]
private FailedSearchMailbox[] <FailedMailboxes>k__BackingField;
    public SearchableMailbox[] SearchableMailboxes { get; }
    public FailedSearchMailbox[] FailedMailboxes { get; public set; }
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    public SearchableMailbox[] get_SearchableMailboxes();
    [CompilerGeneratedAttribute]
public FailedSearchMailbox[] get_FailedMailboxes();
    [CompilerGeneratedAttribute]
public void set_FailedMailboxes(FailedSearchMailbox[] value);
}
internal class Microsoft.Exchange.WebServices.Data.GetServerTimeZonesRequest : MultiResponseServiceRequest`1<GetServerTimeZonesResponse> {
    private IEnumerable`1<string> ids;
    internal IEnumerable`1<string> Ids { get; internal set; }
    internal GetServerTimeZonesRequest(ExchangeService service);
    internal virtual void Validate();
    internal virtual GetServerTimeZonesResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal IEnumerable`1<string> get_Ids();
    internal void set_Ids(IEnumerable`1<string> value);
}
internal class Microsoft.Exchange.WebServices.Data.GetServerTimeZonesResponse : ServiceResponse {
    private Collection`1<TimeZoneInfo> timeZones;
    public Collection`1<TimeZoneInfo> TimeZones { get; }
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    public Collection`1<TimeZoneInfo> get_TimeZones();
}
internal class Microsoft.Exchange.WebServices.Data.GetStreamingEventsRequest : HangingServiceRequestBase {
    internal static int HeartbeatFrequencyDefault;
    private static int heartbeatFrequency;
    private IEnumerable`1<string> subscriptionIds;
    private int connectionTimeout;
    unknown static int HeartbeatFrequency {internal set; }
    internal GetStreamingEventsRequest(ExchangeService service, HandleResponseObject serviceObjectHandler, IEnumerable`1<string> subscriptionIds, int connectionTimeout);
    private static GetStreamingEventsRequest();
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal static void set_HeartbeatFrequency(int value);
}
internal class Microsoft.Exchange.WebServices.Data.GetStreamingEventsResponse : ServiceResponse {
    private GetStreamingEventsResults results;
    private HangingServiceRequestBase request;
    [CompilerGeneratedAttribute]
private List`1<string> <ErrorSubscriptionIds>k__BackingField;
    internal GetStreamingEventsResults Results { get; }
    internal List`1<string> ErrorSubscriptionIds { get; private set; }
    internal GetStreamingEventsResponse(HangingServiceRequestBase request);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    internal virtual bool LoadExtraErrorDetailsFromXml(EwsServiceXmlReader reader, string xmlElementName);
    internal GetStreamingEventsResults get_Results();
    [CompilerGeneratedAttribute]
internal List`1<string> get_ErrorSubscriptionIds();
    [CompilerGeneratedAttribute]
private void set_ErrorSubscriptionIds(List`1<string> value);
}
internal class Microsoft.Exchange.WebServices.Data.GetStreamingEventsResults : object {
    private Collection`1<NotificationGroup> events;
    internal Collection`1<NotificationGroup> Notifications { get; }
    internal void LoadFromXml(EwsServiceXmlReader reader);
    private void LoadNotificationEventFromXml(EwsServiceXmlReader reader, string eventElementName, EventType eventType, NotificationGroup notifications);
    internal Collection`1<NotificationGroup> get_Notifications();
}
internal class Microsoft.Exchange.WebServices.Data.GetUserAvailabilityRequest : SimpleServiceRequestBase {
    private IEnumerable`1<AttendeeInfo> attendees;
    private TimeWindow timeWindow;
    private AvailabilityData requestedData;
    private AvailabilityOptions options;
    internal bool EmitTimeZoneHeader { get; }
    internal bool IsFreeBusyViewRequested { get; }
    internal bool IsSuggestionsViewRequested { get; }
    public IEnumerable`1<AttendeeInfo> Attendees { get; public set; }
    public TimeWindow TimeWindow { get; public set; }
    public AvailabilityData RequestedData { get; public set; }
    public AvailabilityOptions Options { get; public set; }
    internal GetUserAvailabilityRequest(ExchangeService service);
    internal virtual string GetXmlElementName();
    internal virtual bool get_EmitTimeZoneHeader();
    internal bool get_IsFreeBusyViewRequested();
    internal bool get_IsSuggestionsViewRequested();
    internal virtual void Validate();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetResponseXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.GetUserAvailabilityRequest/<Execute>d__17")]
internal Task`1<GetUserAvailabilityResults> Execute(CancellationToken token);
    public IEnumerable`1<AttendeeInfo> get_Attendees();
    public void set_Attendees(IEnumerable`1<AttendeeInfo> value);
    public TimeWindow get_TimeWindow();
    public void set_TimeWindow(TimeWindow value);
    public AvailabilityData get_RequestedData();
    public void set_RequestedData(AvailabilityData value);
    public AvailabilityOptions get_Options();
    public void set_Options(AvailabilityOptions value);
}
public class Microsoft.Exchange.WebServices.Data.GetUserAvailabilityResults : object {
    private ServiceResponseCollection`1<AttendeeAvailability> attendeesAvailability;
    private SuggestionsResponse suggestionsResponse;
    internal SuggestionsResponse SuggestionsResponse { get; internal set; }
    public ServiceResponseCollection`1<AttendeeAvailability> AttendeesAvailability { get; internal set; }
    public Collection`1<Suggestion> Suggestions { get; }
    internal SuggestionsResponse get_SuggestionsResponse();
    internal void set_SuggestionsResponse(SuggestionsResponse value);
    public ServiceResponseCollection`1<AttendeeAvailability> get_AttendeesAvailability();
    internal void set_AttendeesAvailability(ServiceResponseCollection`1<AttendeeAvailability> value);
    public Collection`1<Suggestion> get_Suggestions();
}
internal class Microsoft.Exchange.WebServices.Data.GetUserConfigurationRequest : MultiResponseServiceRequest`1<GetUserConfigurationResponse> {
    private static string EnumDelimiter;
    private string name;
    private FolderId parentFolderId;
    private UserConfigurationProperties properties;
    private UserConfiguration userConfiguration;
    internal string Name { get; internal set; }
    internal FolderId ParentFolderId { get; internal set; }
    internal UserConfiguration UserConfiguration { get; internal set; }
    internal UserConfigurationProperties Properties { get; internal set; }
    internal GetUserConfigurationRequest(ExchangeService service);
    internal virtual void Validate();
    internal virtual GetUserConfigurationResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal string get_Name();
    internal void set_Name(string value);
    internal FolderId get_ParentFolderId();
    internal void set_ParentFolderId(FolderId value);
    internal UserConfiguration get_UserConfiguration();
    internal void set_UserConfiguration(UserConfiguration value);
    internal UserConfigurationProperties get_Properties();
    internal void set_Properties(UserConfigurationProperties value);
}
internal class Microsoft.Exchange.WebServices.Data.GetUserConfigurationResponse : ServiceResponse {
    private UserConfiguration userConfiguration;
    public UserConfiguration UserConfiguration { get; }
    internal GetUserConfigurationResponse(UserConfiguration userConfiguration);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    public UserConfiguration get_UserConfiguration();
}
internal class Microsoft.Exchange.WebServices.Data.GetUserOofSettingsRequest : SimpleServiceRequestBase {
    private string smtpAddress;
    internal string SmtpAddress { get; internal set; }
    internal GetUserOofSettingsRequest(ExchangeService service);
    internal virtual string GetXmlElementName();
    internal virtual void Validate();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetResponseXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.GetUserOofSettingsRequest/<Execute>d__8")]
internal Task`1<GetUserOofSettingsResponse> Execute(CancellationToken token);
    internal string get_SmtpAddress();
    internal void set_SmtpAddress(string value);
}
internal class Microsoft.Exchange.WebServices.Data.GetUserOofSettingsResponse : ServiceResponse {
    private OofSettings oofSettings;
    public OofSettings OofSettings { get; internal set; }
    public OofSettings get_OofSettings();
    internal void set_OofSettings(OofSettings value);
}
internal class Microsoft.Exchange.WebServices.Data.GetUserPhotoRequest : SimpleServiceRequestBase {
    [CompilerGeneratedAttribute]
private string <EmailAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserPhotoSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityTag>k__BackingField;
    internal string EmailAddress { get; internal set; }
    internal string UserPhotoSize { get; internal set; }
    internal string EntityTag { get; internal set; }
    internal GetUserPhotoRequest(ExchangeService service);
    [CompilerGeneratedAttribute]
internal string get_EmailAddress();
    [CompilerGeneratedAttribute]
internal void set_EmailAddress(string value);
    [CompilerGeneratedAttribute]
internal string get_UserPhotoSize();
    [CompilerGeneratedAttribute]
internal void set_UserPhotoSize(string value);
    [CompilerGeneratedAttribute]
internal string get_EntityTag();
    [CompilerGeneratedAttribute]
internal void set_EntityTag(string value);
    internal static GetUserPhotoResponse GetNotFoundResponse();
    internal virtual void Validate();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual void AddHeaders(HttpRequestHeaders webHeaderCollection);
    internal virtual object ParseResponse(EwsServiceXmlReader reader, HttpResponseHeaders responseHeaders);
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal Task`1<GetUserPhotoResponse> Execute(CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.GetUserPhotoRequest/<GetResultOrDefault>d__23")]
private static Task`1<GetUserPhotoResponse> GetResultOrDefault(Func`1<Task`1<object>> serviceResponseFactory);
}
internal class Microsoft.Exchange.WebServices.Data.GetUserPhotoResponse : ServiceResponse {
    [CompilerGeneratedAttribute]
private GetUserPhotoResults <Results>k__BackingField;
    internal GetUserPhotoResults Results { get; private set; }
    [CompilerGeneratedAttribute]
internal GetUserPhotoResults get_Results();
    [CompilerGeneratedAttribute]
private void set_Results(GetUserPhotoResults value);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    internal virtual void ReadHeader(HttpResponseHeaders responseHeaders);
}
public class Microsoft.Exchange.WebServices.Data.GetUserPhotoResults : object {
    [CompilerGeneratedAttribute]
private Byte[] <Photo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntityTag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Expires>k__BackingField;
    [CompilerGeneratedAttribute]
private GetUserPhotoStatus <Status>k__BackingField;
    public Byte[] Photo { get; internal set; }
    public string EntityTag { get; internal set; }
    public string ContentType { get; internal set; }
    public DateTime Expires { get; internal set; }
    public GetUserPhotoStatus Status { get; internal set; }
    [CompilerGeneratedAttribute]
public Byte[] get_Photo();
    [CompilerGeneratedAttribute]
internal void set_Photo(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_EntityTag();
    [CompilerGeneratedAttribute]
internal void set_EntityTag(string value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
internal void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public DateTime get_Expires();
    [CompilerGeneratedAttribute]
internal void set_Expires(DateTime value);
    [CompilerGeneratedAttribute]
public GetUserPhotoStatus get_Status();
    [CompilerGeneratedAttribute]
internal void set_Status(GetUserPhotoStatus value);
}
public enum Microsoft.Exchange.WebServices.Data.GetUserPhotoStatus : Enum {
    public int value__;
    public static GetUserPhotoStatus PhotoReturned;
    public static GetUserPhotoStatus PhotoUnchanged;
    public static GetUserPhotoStatus PhotoOrUserNotFound;
}
internal class Microsoft.Exchange.WebServices.Data.GetUserRetentionPolicyTagsRequest : SimpleServiceRequestBase {
    internal GetUserRetentionPolicyTagsRequest(ExchangeService service);
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.GetUserRetentionPolicyTagsRequest/<Execute>d__6")]
internal Task`1<GetUserRetentionPolicyTagsResponse> Execute(CancellationToken token);
}
public class Microsoft.Exchange.WebServices.Data.GetUserRetentionPolicyTagsResponse : ServiceResponse {
    private List`1<RetentionPolicyTag> retentionPolicyTags;
    public RetentionPolicyTag[] RetentionPolicyTags { get; }
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    public RetentionPolicyTag[] get_RetentionPolicyTags();
}
public class Microsoft.Exchange.WebServices.Data.GroupedFindItemsResults`1 : object {
    private int totalCount;
    private Nullable`1<int> nextPageOffset;
    private bool moreAvailable;
    private Collection`1<ItemGroup`1<TItem>> itemGroups;
    public int TotalCount { get; internal set; }
    public Nullable`1<int> NextPageOffset { get; internal set; }
    public bool MoreAvailable { get; internal set; }
    public Collection`1<ItemGroup`1<TItem>> ItemGroups { get; }
    public int get_TotalCount();
    internal void set_TotalCount(int value);
    public Nullable`1<int> get_NextPageOffset();
    internal void set_NextPageOffset(Nullable`1<int> value);
    public bool get_MoreAvailable();
    internal void set_MoreAvailable(bool value);
    public Collection`1<ItemGroup`1<TItem>> get_ItemGroups();
    public sealed virtual IEnumerator`1<ItemGroup`1<TItem>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.Exchange.WebServices.Data.Grouping : object {
    private SortDirection sortDirection;
    private PropertyDefinitionBase groupOn;
    private PropertyDefinitionBase aggregateOn;
    private AggregateType aggregateType;
    public SortDirection SortDirection { get; public set; }
    public PropertyDefinitionBase GroupOn { get; public set; }
    public PropertyDefinitionBase AggregateOn { get; public set; }
    public AggregateType AggregateType { get; public set; }
    public Grouping(PropertyDefinitionBase groupOn, SortDirection sortDirection, PropertyDefinitionBase aggregateOn, AggregateType aggregateType);
    private void InternalValidate();
    internal void WriteToXml(EwsServiceXmlWriter writer);
    public SortDirection get_SortDirection();
    public void set_SortDirection(SortDirection value);
    public PropertyDefinitionBase get_GroupOn();
    public void set_GroupOn(PropertyDefinitionBase value);
    public PropertyDefinitionBase get_AggregateOn();
    public void set_AggregateOn(PropertyDefinitionBase value);
    public AggregateType get_AggregateType();
    public void set_AggregateType(AggregateType value);
    private sealed virtual override void Microsoft.Exchange.WebServices.Data.ISelfValidate.Validate();
}
[RequiredServerVersionAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.GroupMember : ComplexProperty {
    private EmailAddress addressInformation;
    private MemberStatus status;
    private string key;
    public string Key { get; }
    public EmailAddress AddressInformation { get; internal set; }
    public MemberStatus Status { get; }
    public GroupMember(string smtpAddress);
    public GroupMember(string address, string routingType, MailboxType mailboxType);
    public GroupMember(string smtpAddress, MailboxType mailboxType);
    public GroupMember(string name, string address, string routingType);
    public GroupMember(string name, string smtpAddress);
    public GroupMember(ItemId contactGroupId);
    public GroupMember(ItemId contactId, string addressToLink);
    public GroupMember(EmailAddress addressInformation);
    internal GroupMember(GroupMember member);
    public GroupMember(Contact contact, EmailAddressKey emailAddressKey);
    public string get_Key();
    public EmailAddress get_AddressInformation();
    internal void set_AddressInformation(EmailAddress value);
    public MemberStatus get_Status();
    internal virtual void ReadAttributesFromXml(EwsServiceXmlReader reader);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    private void AddressInformationChanged(ComplexProperty complexProperty);
}
public class Microsoft.Exchange.WebServices.Data.GroupMemberCollection : ComplexPropertyCollection`1<GroupMember> {
    private bool collectionIsCleared;
    public GroupMember Find(string key);
    public void Clear();
    public void Add(GroupMember member);
    public void AddRange(IEnumerable`1<GroupMember> members);
    public void AddContactGroup(ItemId contactGroupId);
    public void AddPersonalContact(ItemId contactId, string addressToLink);
    public void AddPersonalContact(ItemId contactId);
    public void AddDirectoryUser(string smtpAddress);
    public void AddDirectoryUser(string address, string routingType);
    public void AddDirectoryContact(string smtpAddress);
    public void AddDirectoryContact(string address, string routingType);
    public void AddPublicGroup(string smtpAddress);
    public void AddDirectoryPublicFolder(string smtpAddress);
    public void AddOneOff(string displayName, string address, string routingType);
    public void AddOneOff(string displayName, string smtpAddress);
    public void AddContactEmailAddress(Contact contact, EmailAddressKey emailAddressKey);
    public void RemoveAt(int index);
    public bool Remove(GroupMember member);
    private sealed virtual override bool Microsoft.Exchange.WebServices.Data.ICustomUpdateSerializer.WriteSetUpdateToXml(EwsServiceXmlWriter writer, ServiceObject ownerObject, PropertyDefinition propertyDefinition);
    private sealed virtual override bool Microsoft.Exchange.WebServices.Data.ICustomUpdateSerializer.WriteDeleteUpdateToXml(EwsServiceXmlWriter writer, ServiceObject ewsObject);
    internal virtual GroupMember CreateComplexProperty(string xmlElementName);
    internal virtual void ClearChangeLog();
    internal virtual string GetCollectionItemXmlElementName(GroupMember member);
    private void WriteDeleteMembersCollectionToXml(EwsServiceXmlWriter writer);
    private void WriteDeleteMembersToXml(EwsServiceXmlWriter writer, List`1<GroupMember> members);
    private void WriteSetOrAppendMembersToXml(EwsServiceXmlWriter writer, List`1<GroupMember> members, bool setMode);
    internal virtual void InternalValidate();
}
internal class Microsoft.Exchange.WebServices.Data.GroupMemberPropertyDefinition : ServiceObjectPropertyDefinition {
    private static string FieldUri;
    private string key;
    public string Key { get; public set; }
    public Type Type { get; }
    public GroupMemberPropertyDefinition(string key);
    public string get_Key();
    public void set_Key(string value);
    internal virtual string GetXmlElementName();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual string GetPrintableName();
    public virtual Type get_Type();
}
internal class Microsoft.Exchange.WebServices.Data.Groups.GetUnifiedGroupUnseenCountRequest : SimpleServiceRequestBase {
    private DateTime lastVisitedTimeUtc;
    private UnifiedGroupIdentityType identityType;
    private string identityValue;
    internal GetUnifiedGroupUnseenCountRequest(ExchangeService service, DateTime lastVisitedTimeUtc, UnifiedGroupIdentityType identityType, string value);
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Groups.GetUnifiedGroupUnseenCountRequest/<Execute>d__9")]
internal Task`1<GetUnifiedGroupUnseenCountResponse> Execute(CancellationToken token);
}
internal class Microsoft.Exchange.WebServices.Data.Groups.GetUnifiedGroupUnseenCountResponse : ServiceResponse {
    [CompilerGeneratedAttribute]
private int <UnseenCount>k__BackingField;
    public int UnseenCount { get; public set; }
    [CompilerGeneratedAttribute]
public int get_UnseenCount();
    [CompilerGeneratedAttribute]
public void set_UnseenCount(int value);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
}
internal class Microsoft.Exchange.WebServices.Data.Groups.GetUserUnifiedGroupsRequest : SimpleServiceRequestBase {
    [CompilerGeneratedAttribute]
private IEnumerable`1<RequestedUnifiedGroupsSet> <RequestedUnifiedGroupsSets>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserSmtpAddress>k__BackingField;
    public IEnumerable`1<RequestedUnifiedGroupsSet> RequestedUnifiedGroupsSets { get; public set; }
    public string UserSmtpAddress { get; public set; }
    internal GetUserUnifiedGroupsRequest(ExchangeService service);
    [CompilerGeneratedAttribute]
public IEnumerable`1<RequestedUnifiedGroupsSet> get_RequestedUnifiedGroupsSets();
    [CompilerGeneratedAttribute]
public void set_RequestedUnifiedGroupsSets(IEnumerable`1<RequestedUnifiedGroupsSet> value);
    [CompilerGeneratedAttribute]
public string get_UserSmtpAddress();
    [CompilerGeneratedAttribute]
public void set_UserSmtpAddress(string value);
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Groups.GetUserUnifiedGroupsRequest/<Execute>d__14")]
internal Task`1<GetUserUnifiedGroupsResponse> Execute(CancellationToken token);
}
internal class Microsoft.Exchange.WebServices.Data.Groups.GetUserUnifiedGroupsResponse : ServiceResponse {
    private Collection`1<UnifiedGroupsSet> groupsSets;
    public Collection`1<UnifiedGroupsSet> GroupsSets { get; }
    public Collection`1<UnifiedGroupsSet> get_GroupsSets();
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
}
public class Microsoft.Exchange.WebServices.Data.Groups.RequestedUnifiedGroupsSet : ComplexProperty {
    [CompilerGeneratedAttribute]
private UnifiedGroupsSortType <SortType>k__BackingField;
    [CompilerGeneratedAttribute]
private UnifiedGroupsFilterType <FilterType>k__BackingField;
    [CompilerGeneratedAttribute]
private SortDirection <SortDirection>k__BackingField;
    public UnifiedGroupsSortType SortType { get; public set; }
    public UnifiedGroupsFilterType FilterType { get; public set; }
    public SortDirection SortDirection { get; public set; }
    public RequestedUnifiedGroupsSet(UnifiedGroupsFilterType filterType, UnifiedGroupsSortType sortType, SortDirection sortDirection);
    [CompilerGeneratedAttribute]
public UnifiedGroupsSortType get_SortType();
    [CompilerGeneratedAttribute]
public void set_SortType(UnifiedGroupsSortType value);
    [CompilerGeneratedAttribute]
public UnifiedGroupsFilterType get_FilterType();
    [CompilerGeneratedAttribute]
public void set_FilterType(UnifiedGroupsFilterType value);
    [CompilerGeneratedAttribute]
public SortDirection get_SortDirection();
    [CompilerGeneratedAttribute]
public void set_SortDirection(SortDirection value);
    internal virtual void WriteToXml(EwsServiceXmlWriter writer, string xmlElementName);
}
internal class Microsoft.Exchange.WebServices.Data.Groups.SetUnifiedGroupLastVisitedTimeRequest : SimpleServiceRequestBase {
    private DateTime lastVisitedTimeUtc;
    private UnifiedGroupIdentityType identityType;
    private string identityValue;
    internal SetUnifiedGroupLastVisitedTimeRequest(ExchangeService service, DateTime lastVisitedTimeUtc, UnifiedGroupIdentityType identityType, string value);
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Groups.SetUnifiedGroupLastVisitedTimeRequest/<Execute>d__9")]
internal Task`1<ServiceResponse> Execute(CancellationToken token);
}
public class Microsoft.Exchange.WebServices.Data.Groups.UnifiedGroup : ComplexProperty {
    [CompilerGeneratedAttribute]
private bool <IsFavorite>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExternalDirectoryObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LastVisitedTimeUtc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SmtpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LegacyDN>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MailboxGuid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private UnifiedGroupAccessType <AccessType>k__BackingField;
    public bool IsFavorite { get; public set; }
    public string ExternalDirectoryObjectId { get; public set; }
    public string LastVisitedTimeUtc { get; public set; }
    public string SmtpAddress { get; public set; }
    public string LegacyDN { get; public set; }
    public string MailboxGuid { get; public set; }
    public string DisplayName { get; public set; }
    public UnifiedGroupAccessType AccessType { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IsFavorite();
    [CompilerGeneratedAttribute]
public void set_IsFavorite(bool value);
    [CompilerGeneratedAttribute]
public string get_ExternalDirectoryObjectId();
    [CompilerGeneratedAttribute]
public void set_ExternalDirectoryObjectId(string value);
    [CompilerGeneratedAttribute]
public string get_LastVisitedTimeUtc();
    [CompilerGeneratedAttribute]
public void set_LastVisitedTimeUtc(string value);
    [CompilerGeneratedAttribute]
public string get_SmtpAddress();
    [CompilerGeneratedAttribute]
public void set_SmtpAddress(string value);
    [CompilerGeneratedAttribute]
public string get_LegacyDN();
    [CompilerGeneratedAttribute]
public void set_LegacyDN(string value);
    [CompilerGeneratedAttribute]
public string get_MailboxGuid();
    [CompilerGeneratedAttribute]
public void set_MailboxGuid(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public UnifiedGroupAccessType get_AccessType();
    [CompilerGeneratedAttribute]
public void set_AccessType(UnifiedGroupAccessType value);
    internal virtual void LoadFromXml(EwsServiceXmlReader reader, string xmlElementName);
}
public enum Microsoft.Exchange.WebServices.Data.Groups.UnifiedGroupAccessType : Enum {
    public int value__;
    public static UnifiedGroupAccessType None;
    public static UnifiedGroupAccessType Private;
    public static UnifiedGroupAccessType Secret;
    public static UnifiedGroupAccessType Public;
}
internal class Microsoft.Exchange.WebServices.Data.Groups.UnifiedGroupIdentity : ComplexProperty {
    [CompilerGeneratedAttribute]
private UnifiedGroupIdentityType <IdentityType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    public UnifiedGroupIdentityType IdentityType { get; public set; }
    public string Value { get; public set; }
    public UnifiedGroupIdentity(UnifiedGroupIdentityType identityType, string value);
    [CompilerGeneratedAttribute]
public UnifiedGroupIdentityType get_IdentityType();
    [CompilerGeneratedAttribute]
public void set_IdentityType(UnifiedGroupIdentityType value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    internal virtual void WriteToXml(EwsServiceXmlWriter writer, string xmlElementName);
}
public enum Microsoft.Exchange.WebServices.Data.Groups.UnifiedGroupIdentityType : Enum {
    public int value__;
    public static UnifiedGroupIdentityType SmtpAddress;
    public static UnifiedGroupIdentityType LegacyDn;
    public static UnifiedGroupIdentityType ExternalDirectoryObjectId;
}
public enum Microsoft.Exchange.WebServices.Data.Groups.UnifiedGroupsFilterType : Enum {
    public int value__;
    public static UnifiedGroupsFilterType All;
    public static UnifiedGroupsFilterType Favorites;
    public static UnifiedGroupsFilterType ExcludeFavorites;
}
public class Microsoft.Exchange.WebServices.Data.Groups.UnifiedGroupsSet : ComplexProperty {
    private List`1<UnifiedGroup> unifiedGroups;
    [CompilerGeneratedAttribute]
private UnifiedGroupsFilterType <FilterType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <TotalGroups>k__BackingField;
    public UnifiedGroupsFilterType FilterType { get; public set; }
    public int TotalGroups { get; public set; }
    public List`1<UnifiedGroup> Groups { get; }
    [CompilerGeneratedAttribute]
public UnifiedGroupsFilterType get_FilterType();
    [CompilerGeneratedAttribute]
public void set_FilterType(UnifiedGroupsFilterType value);
    [CompilerGeneratedAttribute]
public int get_TotalGroups();
    [CompilerGeneratedAttribute]
public void set_TotalGroups(int value);
    public List`1<UnifiedGroup> get_Groups();
    internal virtual void LoadFromXml(EwsServiceXmlReader reader, string xmlElementName);
}
public enum Microsoft.Exchange.WebServices.Data.Groups.UnifiedGroupsSortType : Enum {
    public int value__;
    public static UnifiedGroupsSortType None;
    public static UnifiedGroupsSortType DisplayName;
    public static UnifiedGroupsSortType JoinDate;
    public static UnifiedGroupsSortType FavoriteDate;
    public static UnifiedGroupsSortType Relevance;
}
internal class Microsoft.Exchange.WebServices.Data.HangingRequestDisconnectEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private HangingRequestDisconnectReason <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public HangingRequestDisconnectReason Reason { get; internal set; }
    public Exception Exception { get; internal set; }
    internal HangingRequestDisconnectEventArgs(HangingRequestDisconnectReason reason, Exception exception);
    [CompilerGeneratedAttribute]
public HangingRequestDisconnectReason get_Reason();
    [CompilerGeneratedAttribute]
internal void set_Reason(HangingRequestDisconnectReason value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
internal void set_Exception(Exception value);
}
internal enum Microsoft.Exchange.WebServices.Data.HangingRequestDisconnectReason : Enum {
    public int value__;
    public static HangingRequestDisconnectReason Clean;
    public static HangingRequestDisconnectReason UserInitiated;
    public static HangingRequestDisconnectReason Timeout;
    public static HangingRequestDisconnectReason Exception;
}
internal abstract class Microsoft.Exchange.WebServices.Data.HangingServiceRequestBase : ServiceRequestBase {
    private static int BufferSize;
    internal static bool LogAllWireBytes;
    private HandleResponseObject responseHandler;
    private IEwsHttpWebResponse response;
    private IEwsHttpWebRequest request;
    protected int heartbeatFrequencyMilliseconds;
    private object lockObject;
    [CompilerGeneratedAttribute]
private HangingRequestDisconnectHandler OnDisconnect;
    [CompilerGeneratedAttribute]
private bool <IsConnected>k__BackingField;
    internal bool IsConnected { get; private set; }
    internal HangingServiceRequestBase(ExchangeService service, HandleResponseObject handler, int heartbeatFrequency);
    [CompilerGeneratedAttribute]
internal void add_OnDisconnect(HangingRequestDisconnectHandler value);
    [CompilerGeneratedAttribute]
internal void remove_OnDisconnect(HangingRequestDisconnectHandler value);
    internal void InternalExecute(CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.HangingServiceRequestBase/<ParseResponses>d__14")]
private void ParseResponses(object state);
    [CompilerGeneratedAttribute]
internal bool get_IsConnected();
    [CompilerGeneratedAttribute]
private void set_IsConnected(bool value);
    internal void Disconnect();
    internal void Disconnect(HangingRequestDisconnectReason reason, Exception exception);
    private void InternalOnConnect();
    private void InternalOnDisconnect(HangingRequestDisconnectReason reason, Exception exception);
    protected virtual void ReadPreamble(EwsServiceXmlReader ewsXmlReader);
    protected virtual Task ReadPreambleAsync(EwsServiceXmlReader ewsXmlReader, CancellationToken token);
    [CompilerGeneratedAttribute]
private void <InternalOnConnect>b__21_0();
}
internal class Microsoft.Exchange.WebServices.Data.HangingTraceStream : Stream {
    private Stream underlyingStream;
    private ExchangeService service;
    private MemoryStream responseCopy;
    [CompilerGeneratedAttribute]
private int <ReadTimeout>k__BackingField;
    public int ReadTimeout { get; public set; }
    public bool CanTimeout { get; }
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal HangingTraceStream(Stream stream, ExchangeService service);
    [CompilerGeneratedAttribute]
public virtual int get_ReadTimeout();
    [CompilerGeneratedAttribute]
public virtual void set_ReadTimeout(int value);
    public virtual bool get_CanTimeout();
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual void Flush();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual int Read(Byte[] buffer, int offset, int count);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.HangingTraceStream/<ReadAsync>d__23")]
public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    private int PostRead(Byte[] buffer, int offset, int count, int retVal);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    internal void SetResponseCopy(MemoryStream responseCopy);
}
public class Microsoft.Exchange.WebServices.Data.HighlightTerm : ComplexProperty {
    private string scope;
    private string value;
    public string Scope { get; }
    public string Value { get; }
    public string get_Scope();
    public string get_Value();
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
public enum Microsoft.Exchange.WebServices.Data.HoldAction : Enum {
    public int value__;
    public static HoldAction Create;
    public static HoldAction Update;
    public static HoldAction Remove;
}
public enum Microsoft.Exchange.WebServices.Data.HoldStatus : Enum {
    public int value__;
    public static HoldStatus NotOnHold;
    public static HoldStatus Pending;
    public static HoldStatus OnHold;
    public static HoldStatus PartialHold;
    public static HoldStatus Failed;
}
internal interface Microsoft.Exchange.WebServices.Data.ICalendarActionProvider {
    public abstract virtual Task`1<CalendarActionResults> Accept(bool sendResponse);
    public abstract virtual Task`1<CalendarActionResults> AcceptTentatively(bool sendResponse);
    public abstract virtual Task`1<CalendarActionResults> Decline(bool sendResponse);
    public abstract virtual AcceptMeetingInvitationMessage CreateAcceptMessage(bool tentative);
    public abstract virtual DeclineMeetingInvitationMessage CreateDeclineMessage();
}
public enum Microsoft.Exchange.WebServices.Data.IconIndex : Enum {
    public int value__;
    public static IconIndex Default;
    public static IconIndex PostItem;
    public static IconIndex MailRead;
    public static IconIndex MailUnread;
    public static IconIndex MailReplied;
    public static IconIndex MailForwarded;
    public static IconIndex MailEncrypted;
    public static IconIndex MailSmimeSigned;
    public static IconIndex MailEncryptedReplied;
    public static IconIndex MailSmimeSignedReplied;
    public static IconIndex MailEncryptedForwarded;
    public static IconIndex MailSmimeSignedForwarded;
    public static IconIndex MailEncryptedRead;
    public static IconIndex MailSmimeSignedRead;
    public static IconIndex MailIrm;
    public static IconIndex MailIrmForwarded;
    public static IconIndex MailIrmReplied;
    public static IconIndex SmsSubmitted;
    public static IconIndex SmsRoutedToDeliveryPoint;
    public static IconIndex SmsRoutedToExternalMessagingSystem;
    public static IconIndex SmsDelivered;
    public static IconIndex OutlookDefaultForContacts;
    public static IconIndex AppointmentItem;
    public static IconIndex AppointmentRecur;
    public static IconIndex AppointmentMeet;
    public static IconIndex AppointmentMeetRecur;
    public static IconIndex AppointmentMeetNY;
    public static IconIndex AppointmentMeetYes;
    public static IconIndex AppointmentMeetNo;
    public static IconIndex AppointmentMeetMaybe;
    public static IconIndex AppointmentMeetCancel;
    public static IconIndex AppointmentMeetInfo;
    public static IconIndex TaskItem;
    public static IconIndex TaskRecur;
    public static IconIndex TaskOwned;
    public static IconIndex TaskDelegated;
}
internal interface Microsoft.Exchange.WebServices.Data.ICustomUpdateSerializer {
    public abstract virtual bool WriteSetUpdateToXml(EwsServiceXmlWriter writer, ServiceObject ewsObject, PropertyDefinition propertyDefinition);
    public abstract virtual bool WriteDeleteUpdateToXml(EwsServiceXmlWriter writer, ServiceObject ewsObject);
}
public enum Microsoft.Exchange.WebServices.Data.IdFormat : Enum {
    public int value__;
    public static IdFormat EwsLegacyId;
    public static IdFormat EwsId;
    public static IdFormat EntryId;
    public static IdFormat HexEntryId;
    public static IdFormat StoreId;
    public static IdFormat OwaId;
}
internal interface Microsoft.Exchange.WebServices.Data.IDiscoveryVersionable {
    public long ServerVersion { get; public set; }
    public abstract virtual long get_ServerVersion();
    public abstract virtual void set_ServerVersion(long value);
}
internal interface Microsoft.Exchange.WebServices.Data.IEwsHttpWebRequest {
    public string Content { get; public set; }
    public string Accept { get; public set; }
    public bool AllowAutoRedirect { get; public set; }
    public X509CertificateCollection ClientCertificates { get; public set; }
    public string ContentType { get; public set; }
    public CookieContainer CookieContainer { get; public set; }
    public ICredentials Credentials { get; public set; }
    public HttpRequestHeaders Headers { get; }
    public string Method { get; public set; }
    public bool PreAuthenticate { get; public set; }
    public IWebProxy Proxy { get; public set; }
    public Uri RequestUri { get; }
    public int Timeout { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    public string UserAgent { get; public set; }
    public bool KeepAlive { get; public set; }
    public string ConnectionGroupName { get; public set; }
    public abstract virtual void Abort();
    public abstract virtual string get_Content();
    public abstract virtual void set_Content(string value);
    public abstract virtual Task`1<IEwsHttpWebResponse> GetResponse(CancellationToken token);
    public abstract virtual string get_Accept();
    public abstract virtual void set_Accept(string value);
    public abstract virtual bool get_AllowAutoRedirect();
    public abstract virtual void set_AllowAutoRedirect(bool value);
    public abstract virtual X509CertificateCollection get_ClientCertificates();
    public abstract virtual void set_ClientCertificates(X509CertificateCollection value);
    public abstract virtual string get_ContentType();
    public abstract virtual void set_ContentType(string value);
    public abstract virtual CookieContainer get_CookieContainer();
    public abstract virtual void set_CookieContainer(CookieContainer value);
    public abstract virtual ICredentials get_Credentials();
    public abstract virtual void set_Credentials(ICredentials value);
    public abstract virtual HttpRequestHeaders get_Headers();
    public abstract virtual string get_Method();
    public abstract virtual void set_Method(string value);
    public abstract virtual bool get_PreAuthenticate();
    public abstract virtual void set_PreAuthenticate(bool value);
    public abstract virtual IWebProxy get_Proxy();
    public abstract virtual void set_Proxy(IWebProxy value);
    public abstract virtual Uri get_RequestUri();
    public abstract virtual int get_Timeout();
    public abstract virtual void set_Timeout(int value);
    public abstract virtual bool get_UseDefaultCredentials();
    public abstract virtual void set_UseDefaultCredentials(bool value);
    public abstract virtual string get_UserAgent();
    public abstract virtual void set_UserAgent(string value);
    public abstract virtual bool get_KeepAlive();
    public abstract virtual void set_KeepAlive(bool value);
    public abstract virtual string get_ConnectionGroupName();
    public abstract virtual void set_ConnectionGroupName(string value);
}
internal interface Microsoft.Exchange.WebServices.Data.IEwsHttpWebRequestFactory {
    public abstract virtual IEwsHttpWebRequest CreateRequest(Uri uri);
    public abstract virtual IEwsHttpWebResponse CreateExceptionResponse(EwsHttpClientException exception);
}
internal interface Microsoft.Exchange.WebServices.Data.IEwsHttpWebResponse {
    public string ContentEncoding { get; }
    public string ContentType { get; }
    public HttpResponseHeaders Headers { get; }
    public Uri ResponseUri { get; }
    public HttpStatusCode StatusCode { get; }
    public string StatusDescription { get; }
    public Version ProtocolVersion { get; }
    public abstract virtual void Close();
    public abstract virtual Task`1<Stream> GetResponseStream();
    public abstract virtual string get_ContentEncoding();
    public abstract virtual string get_ContentType();
    public abstract virtual HttpResponseHeaders get_Headers();
    public abstract virtual Uri get_ResponseUri();
    public abstract virtual HttpStatusCode get_StatusCode();
    public abstract virtual string get_StatusDescription();
    public abstract virtual Version get_ProtocolVersion();
}
public interface Microsoft.Exchange.WebServices.Data.IFileAttachmentContentHandler {
    public abstract virtual Stream GetOutputStream(string attachmentId);
}
[DefaultMemberAttribute("Item")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.ImAddressDictionary : DictionaryProperty`2<ImAddressKey, ImAddressEntry> {
    public string Item { get; public set; }
    internal virtual string GetFieldURI();
    internal virtual ImAddressEntry CreateEntryInstance();
    public string get_Item(ImAddressKey key);
    public void set_Item(ImAddressKey key, string value);
    public bool TryGetValue(ImAddressKey key, String& imAddress);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.ImAddressEntry : DictionaryEntryProperty`1<ImAddressKey> {
    private string imAddress;
    public string ImAddress { get; public set; }
    internal ImAddressEntry(ImAddressKey key, string imAddress);
    public string get_ImAddress();
    public void set_ImAddress(string value);
    internal virtual void ReadTextValueFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
}
public enum Microsoft.Exchange.WebServices.Data.ImAddressKey : Enum {
    public int value__;
    public static ImAddressKey ImAddress1;
    public static ImAddressKey ImAddress2;
    public static ImAddressKey ImAddress3;
}
public class Microsoft.Exchange.WebServices.Data.ImpersonatedUserId : object {
    private ConnectingIdType idType;
    private string id;
    public ConnectingIdType IdType { get; public set; }
    public string Id { get; public set; }
    public ImpersonatedUserId(ConnectingIdType idType, string id);
    internal void WriteToXml(EwsServiceXmlWriter writer);
    public ConnectingIdType get_IdType();
    public void set_IdType(ConnectingIdType value);
    public string get_Id();
    public void set_Id(string value);
}
public enum Microsoft.Exchange.WebServices.Data.Importance : Enum {
    public int value__;
    public static Importance Low;
    public static Importance Normal;
    public static Importance High;
}
public class Microsoft.Exchange.WebServices.Data.IndexedPropertyDefinition : ServiceObjectPropertyDefinition {
    private string index;
    public string Index { get; }
    public Type Type { get; }
    internal IndexedPropertyDefinition(string uri, string index);
    internal static bool IsEqualTo(IndexedPropertyDefinition idxPropDef1, IndexedPropertyDefinition idxPropDef2);
    public string get_Index();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual string GetXmlElementName();
    internal virtual string GetPrintableName();
    public static bool op_Equality(IndexedPropertyDefinition idxPropDef1, IndexedPropertyDefinition idxPropDef2);
    public static bool op_Inequality(IndexedPropertyDefinition idxPropDef1, IndexedPropertyDefinition idxPropDef2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual Type get_Type();
}
internal class Microsoft.Exchange.WebServices.Data.InitializeLazyMember`1 : MulticastDelegate {
    public InitializeLazyMember`1(object object, IntPtr method);
    public virtual T Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
public class Microsoft.Exchange.WebServices.Data.InsightValue : ComplexProperty {
    private long updatedUtcTicks;
    [CompilerGeneratedAttribute]
private string <InsightSource>k__BackingField;
    public string InsightSource { get; public set; }
    public long UpdatedUtcTicks { get; public set; }
    [CompilerGeneratedAttribute]
public string get_InsightSource();
    [CompilerGeneratedAttribute]
public void set_InsightSource(string value);
    public long get_UpdatedUtcTicks();
    public void set_UpdatedUtcTicks(long value);
}
public class Microsoft.Exchange.WebServices.Data.InsightValueCollection : ComplexPropertyCollection`1<InsightValue> {
    internal InsightValueCollection(IEnumerable`1<InsightValue> collection);
    internal virtual InsightValue CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(InsightValue complexProperty);
}
internal class Microsoft.Exchange.WebServices.Data.InstallAppRequest : SimpleServiceRequestBase {
    private Stream manifestStream;
    private string marketplaceAssetId;
    private string marketplaceContentMarket;
    private bool sendWelcomeEmail;
    internal InstallAppRequest(ExchangeService service, Stream manifestStream, string marketplaceAssetId, string marketplaceContentMarket, bool sendWelcomeEmail);
    internal virtual string GetXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetResponseXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.InstallAppRequest/<Execute>d__6")]
internal Task`1<InstallAppResponse> Execute(CancellationToken token);
}
internal class Microsoft.Exchange.WebServices.Data.InstallAppResponse : ServiceResponse {
    private Nullable`1<bool> wasFirstInstall;
    public Nullable`1<bool> WasFirstInstall { get; }
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    public Nullable`1<bool> get_WasFirstInstall();
}
public class Microsoft.Exchange.WebServices.Data.InternetMessageHeader : ComplexProperty {
    private string name;
    private string value;
    public string Name { get; public set; }
    public string Value { get; public set; }
    internal virtual void ReadAttributesFromXml(EwsServiceXmlReader reader);
    internal virtual void ReadTextValueFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    public virtual string ToString();
    public string get_Name();
    public void set_Name(string value);
    public string get_Value();
    public void set_Value(string value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.InternetMessageHeaderCollection : ComplexPropertyCollection`1<InternetMessageHeader> {
    internal virtual InternetMessageHeader CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(InternetMessageHeader complexProperty);
    public InternetMessageHeader Find(string name);
}
internal class Microsoft.Exchange.WebServices.Data.IntPropertyDefinition : GenericPropertyDefinition`1<int> {
    internal IntPropertyDefinition(string xmlElementName, string uri, ExchangeVersion version);
    internal IntPropertyDefinition(string xmlElementName, string uri, PropertyDefinitionFlags flags, ExchangeVersion version);
    internal IntPropertyDefinition(string xmlElementName, string uri, PropertyDefinitionFlags flags, ExchangeVersion version, bool isNullable);
}
internal interface Microsoft.Exchange.WebServices.Data.IOwnedProperty {
    public ServiceObject Owner { get; public set; }
    public abstract virtual ServiceObject get_Owner();
    public abstract virtual void set_Owner(ServiceObject value);
}
public interface Microsoft.Exchange.WebServices.Data.IPeopleQueryResults {
    public IList`1<Persona> Personas { get; }
    public string TransactionId { get; }
    public abstract virtual IList`1<Persona> get_Personas();
    public abstract virtual string get_TransactionId();
}
public interface Microsoft.Exchange.WebServices.Data.ISearchStringProvider {
    public abstract virtual string GetSearchString();
}
internal interface Microsoft.Exchange.WebServices.Data.ISelfValidate {
    public abstract virtual void Validate();
}
[AttachableAttribute]
[ServiceObjectDefinitionAttribute("Item")]
public class Microsoft.Exchange.WebServices.Data.Item : ServiceObject {
    private ItemAttachment parentAttachment;
    internal ItemAttachment ParentAttachment { get; }
    internal ItemId RootItemId { get; }
    public bool IsAttachment { get; }
    public bool IsNew { get; }
    public ItemId Id { get; }
    public MimeContent MimeContent { get; public set; }
    public MimeContentUTF8 MimeContentUTF8 { get; public set; }
    public FolderId ParentFolderId { get; }
    public Sensitivity Sensitivity { get; public set; }
    public AttachmentCollection Attachments { get; }
    public DateTime DateTimeReceived { get; }
    public int Size { get; }
    public StringList Categories { get; public set; }
    public string Culture { get; public set; }
    public Importance Importance { get; public set; }
    public string InReplyTo { get; public set; }
    public bool IsSubmitted { get; }
    public bool IsAssociated { get; }
    public bool IsDraft { get; }
    public bool IsFromMe { get; }
    public bool IsResend { get; }
    public bool IsUnmodified { get; }
    public InternetMessageHeaderCollection InternetMessageHeaders { get; }
    public DateTime DateTimeSent { get; }
    public DateTime DateTimeCreated { get; }
    public ResponseActions AllowedResponseActions { get; }
    public DateTime ReminderDueBy { get; public set; }
    public bool IsReminderSet { get; public set; }
    public int ReminderMinutesBeforeStart { get; public set; }
    public string DisplayCc { get; }
    public string DisplayTo { get; }
    public bool HasAttachments { get; }
    public MessageBody Body { get; public set; }
    public string ItemClass { get; public set; }
    public string Subject { get; public set; }
    public string WebClientReadFormQueryString { get; }
    public string WebClientEditFormQueryString { get; }
    public ExtendedPropertyCollection ExtendedProperties { get; }
    public EffectiveRights EffectiveRights { get; }
    public string LastModifiedName { get; }
    public DateTime LastModifiedTime { get; }
    public ConversationId ConversationId { get; }
    public UniqueBody UniqueBody { get; }
    public Byte[] StoreEntryId { get; }
    public Byte[] InstanceKey { get; }
    public Flag Flag { get; public set; }
    public NormalizedBody NormalizedBody { get; }
    public EntityExtractionResult EntityExtractionResult { get; }
    public PolicyTag PolicyTag { get; public set; }
    public ArchiveTag ArchiveTag { get; public set; }
    public Nullable`1<DateTime> RetentionDate { get; }
    public string Preview { get; }
    public TextBody TextBody { get; }
    public IconIndex IconIndex { get; }
    public StringList Hashtags { get; public set; }
    public EmailAddressCollection Mentions { get; public set; }
    public Nullable`1<bool> MentionedMe { get; }
    internal Nullable`1<AffectedTaskOccurrence> DefaultAffectedTaskOccurrences { get; }
    internal Nullable`1<SendCancellationsMode> DefaultSendCancellationsMode { get; }
    internal Nullable`1<SendInvitationsMode> DefaultSendInvitationsMode { get; }
    internal Nullable`1<SendInvitationsOrCancellationsMode> DefaultSendInvitationsOrCancellationsMode { get; }
    internal Item(ExchangeService service);
    internal Item(ItemAttachment parentAttachment);
    public static Task`1<Item> Bind(ExchangeService service, ItemId id, PropertySet propertySet, CancellationToken token);
    public static Task`1<Item> Bind(ExchangeService service, ItemId id);
    internal virtual ServiceObjectSchema GetSchema();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal void ThrowIfThisIsAttachment();
    internal virtual PropertyDefinition GetIdPropertyDefinition();
    internal virtual Task`1<ServiceResponseCollection`1<ServiceResponse>> InternalLoad(PropertySet propertySet, CancellationToken token);
    internal virtual Task`1<ServiceResponseCollection`1<ServiceResponse>> InternalDelete(DeleteMode deleteMode, Nullable`1<SendCancellationsMode> sendCancellationsMode, Nullable`1<AffectedTaskOccurrence> affectedTaskOccurrences, CancellationToken token);
    internal Task`1<ServiceResponseCollection`1<ServiceResponse>> InternalDelete(DeleteMode deleteMode, Nullable`1<SendCancellationsMode> sendCancellationsMode, Nullable`1<AffectedTaskOccurrence> affectedTaskOccurrences, bool suppressReadReceipts, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Item/<InternalCreate>d__12")]
internal Task InternalCreate(FolderId parentFolderId, Nullable`1<MessageDisposition> messageDisposition, Nullable`1<SendInvitationsMode> sendInvitationsMode, CancellationToken token);
    internal Task`1<Item> InternalUpdate(FolderId parentFolderId, ConflictResolutionMode conflictResolutionMode, Nullable`1<MessageDisposition> messageDisposition, Nullable`1<SendInvitationsOrCancellationsMode> sendInvitationsOrCancellationsMode, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Item/<InternalUpdate>d__14")]
internal Task`1<Item> InternalUpdate(FolderId parentFolderId, ConflictResolutionMode conflictResolutionMode, Nullable`1<MessageDisposition> messageDisposition, Nullable`1<SendInvitationsOrCancellationsMode> sendInvitationsOrCancellationsMode, bool suppressReadReceipts, CancellationToken token);
    internal bool HasUnprocessedAttachmentChanges();
    internal ItemAttachment get_ParentAttachment();
    internal ItemId get_RootItemId();
    public Task`1<ServiceResponseCollection`1<ServiceResponse>> Delete(DeleteMode deleteMode);
    public Task`1<ServiceResponseCollection`1<ServiceResponse>> Delete(DeleteMode deleteMode, bool suppressReadReceipts, CancellationToken token);
    public Task Save(FolderId parentFolderId, CancellationToken token);
    public Task Save(WellKnownFolderName parentFolderName, CancellationToken token);
    public Task Save(CancellationToken token);
    public Task`1<Item> Update(ConflictResolutionMode conflictResolutionMode, CancellationToken token);
    public Task`1<Item> Update(ConflictResolutionMode conflictResolutionMode, bool suppressReadReceipts, CancellationToken token);
    public Task`1<Item> Copy(FolderId destinationFolderId, CancellationToken token);
    public Task`1<Item> Copy(WellKnownFolderName destinationFolderName);
    public Task`1<Item> Move(FolderId destinationFolderId, CancellationToken token);
    public Task`1<Item> Move(WellKnownFolderName destinationFolderName);
    public void SetExtendedProperty(ExtendedPropertyDefinition extendedPropertyDefinition, object value);
    public bool RemoveExtendedProperty(ExtendedPropertyDefinition extendedPropertyDefinition);
    internal virtual ExtendedPropertyCollection GetExtendedProperties();
    internal virtual void Validate();
    internal virtual bool GetIsTimeZoneHeaderRequired(bool isUpdateOperation);
    public bool get_IsAttachment();
    public virtual bool get_IsNew();
    public ItemId get_Id();
    public MimeContent get_MimeContent();
    public void set_MimeContent(MimeContent value);
    public MimeContentUTF8 get_MimeContentUTF8();
    public void set_MimeContentUTF8(MimeContentUTF8 value);
    public FolderId get_ParentFolderId();
    public Sensitivity get_Sensitivity();
    public void set_Sensitivity(Sensitivity value);
    public AttachmentCollection get_Attachments();
    public DateTime get_DateTimeReceived();
    public int get_Size();
    public StringList get_Categories();
    public void set_Categories(StringList value);
    public string get_Culture();
    public void set_Culture(string value);
    public Importance get_Importance();
    public void set_Importance(Importance value);
    public string get_InReplyTo();
    public void set_InReplyTo(string value);
    public bool get_IsSubmitted();
    public bool get_IsAssociated();
    public bool get_IsDraft();
    public bool get_IsFromMe();
    public bool get_IsResend();
    public bool get_IsUnmodified();
    public InternetMessageHeaderCollection get_InternetMessageHeaders();
    public DateTime get_DateTimeSent();
    public DateTime get_DateTimeCreated();
    public ResponseActions get_AllowedResponseActions();
    public DateTime get_ReminderDueBy();
    public void set_ReminderDueBy(DateTime value);
    public bool get_IsReminderSet();
    public void set_IsReminderSet(bool value);
    public int get_ReminderMinutesBeforeStart();
    public void set_ReminderMinutesBeforeStart(int value);
    public string get_DisplayCc();
    public string get_DisplayTo();
    public bool get_HasAttachments();
    public MessageBody get_Body();
    public void set_Body(MessageBody value);
    public string get_ItemClass();
    public void set_ItemClass(string value);
    public string get_Subject();
    public void set_Subject(string value);
    public string get_WebClientReadFormQueryString();
    public string get_WebClientEditFormQueryString();
    public ExtendedPropertyCollection get_ExtendedProperties();
    public EffectiveRights get_EffectiveRights();
    public string get_LastModifiedName();
    public DateTime get_LastModifiedTime();
    public ConversationId get_ConversationId();
    public UniqueBody get_UniqueBody();
    public Byte[] get_StoreEntryId();
    public Byte[] get_InstanceKey();
    public Flag get_Flag();
    public void set_Flag(Flag value);
    public NormalizedBody get_NormalizedBody();
    public EntityExtractionResult get_EntityExtractionResult();
    public PolicyTag get_PolicyTag();
    public void set_PolicyTag(PolicyTag value);
    public ArchiveTag get_ArchiveTag();
    public void set_ArchiveTag(ArchiveTag value);
    public Nullable`1<DateTime> get_RetentionDate();
    public string get_Preview();
    public TextBody get_TextBody();
    public IconIndex get_IconIndex();
    public StringList get_Hashtags();
    public void set_Hashtags(StringList value);
    public EmailAddressCollection get_Mentions();
    public void set_Mentions(EmailAddressCollection value);
    public Nullable`1<bool> get_MentionedMe();
    internal virtual Nullable`1<AffectedTaskOccurrence> get_DefaultAffectedTaskOccurrences();
    internal virtual Nullable`1<SendCancellationsMode> get_DefaultSendCancellationsMode();
    internal virtual Nullable`1<SendInvitationsMode> get_DefaultSendInvitationsMode();
    internal virtual Nullable`1<SendInvitationsOrCancellationsMode> get_DefaultSendInvitationsOrCancellationsMode();
    internal virtual void SetSubject(string subject);
}
public class Microsoft.Exchange.WebServices.Data.ItemAttachment : Attachment {
    private Item item;
    public Item Item { get; internal set; }
    internal ItemAttachment(Item owner);
    internal ItemAttachment(ExchangeService service);
    public Item get_Item();
    internal void set_Item(Item value);
    private void ItemChanged(ServiceObject serviceObject);
    internal virtual string GetXmlElementName();
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual bool TryReadElementFromXmlToPatch(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual void Validate(int attachmentIndex);
    public Task`1<ServiceResponseCollection`1<GetAttachmentResponse>> Load(CancellationToken token, PropertyDefinitionBase[] additionalProperties);
    public Task`1<ServiceResponseCollection`1<GetAttachmentResponse>> Load(IEnumerable`1<PropertyDefinitionBase> additionalProperties, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<GetAttachmentResponse>> Load(BodyType bodyType, CancellationToken token, PropertyDefinitionBase[] additionalProperties);
    public Task`1<ServiceResponseCollection`1<GetAttachmentResponse>> Load(BodyType bodyType, IEnumerable`1<PropertyDefinitionBase> additionalProperties, CancellationToken token);
}
public class Microsoft.Exchange.WebServices.Data.ItemAttachment`1 : ItemAttachment {
    public TItem Item { get; internal set; }
    internal ItemAttachment`1(Item owner);
    public TItem get_Item();
    internal void set_Item(TItem value);
}
public class Microsoft.Exchange.WebServices.Data.ItemChange : Change {
    private bool isRead;
    public Item Item { get; }
    public bool IsRead { get; internal set; }
    public ItemId ItemId { get; }
    internal virtual ServiceId CreateId();
    public Item get_Item();
    public bool get_IsRead();
    internal void set_IsRead(bool value);
    public ItemId get_ItemId();
}
[DefaultMemberAttribute("Item")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.ItemCollection`1 : ComplexProperty {
    private List`1<TItem> items;
    public int Count { get; }
    public TItem Item { get; }
    internal virtual void LoadFromXml(EwsServiceXmlReader reader, string localElementName);
    public int get_Count();
    public TItem get_Item(int index);
    public sealed virtual IEnumerator`1<TItem> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.Exchange.WebServices.Data.ItemEvent : NotificationEvent {
    private ItemId itemId;
    private ItemId oldItemId;
    public ItemId ItemId { get; }
    public ItemId OldItemId { get; }
    internal ItemEvent(EventType eventType, DateTime timestamp);
    internal virtual void InternalLoadFromXml(EwsServiceXmlReader reader);
    public ItemId get_ItemId();
    public ItemId get_OldItemId();
}
public enum Microsoft.Exchange.WebServices.Data.ItemFlagStatus : Enum {
    public int value__;
    public static ItemFlagStatus NotFlagged;
    public static ItemFlagStatus Flagged;
    public static ItemFlagStatus Complete;
}
public class Microsoft.Exchange.WebServices.Data.ItemGroup`1 : object {
    [CompilerGeneratedAttribute]
private string <GroupIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private Collection`1<TItem> <Items>k__BackingField;
    public string GroupIndex { get; private set; }
    public Collection`1<TItem> Items { get; private set; }
    internal ItemGroup`1(string groupIndex, IList`1<TItem> items);
    [CompilerGeneratedAttribute]
public string get_GroupIndex();
    [CompilerGeneratedAttribute]
private void set_GroupIndex(string value);
    [CompilerGeneratedAttribute]
public Collection`1<TItem> get_Items();
    [CompilerGeneratedAttribute]
private void set_Items(Collection`1<TItem> value);
}
public class Microsoft.Exchange.WebServices.Data.ItemId : ServiceId {
    public ItemId(string uniqueId);
    public static ItemId op_Implicit(string uniqueId);
    internal virtual string GetXmlElementName();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.ItemIdCollection : ComplexPropertyCollection`1<ItemId> {
    internal virtual ItemId CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(ItemId complexProperty);
}
internal class Microsoft.Exchange.WebServices.Data.ItemIdWrapper : AbstractItemIdWrapper {
    private ItemId itemId;
    internal ItemIdWrapper(ItemId itemId);
    internal virtual void WriteToXml(EwsServiceXmlWriter writer);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Exchange.WebServices.Data.ItemIdWrapperList : object {
    private List`1<AbstractItemIdWrapper> itemIds;
    internal int Count { get; }
    internal Item Item { get; }
    internal void Add(Item item);
    internal void AddRange(IEnumerable`1<Item> items);
    internal void Add(ItemId itemId);
    internal void AddRange(IEnumerable`1<ItemId> itemIds);
    internal void WriteToXml(EwsServiceXmlWriter writer, XmlNamespace ewsNamesapce, string xmlElementName);
    internal int get_Count();
    internal Item get_Item(int index);
    public sealed virtual IEnumerator`1<AbstractItemIdWrapper> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum Microsoft.Exchange.WebServices.Data.ItemIndexError : Enum {
    public int value__;
    public static ItemIndexError None;
    public static ItemIndexError GenericError;
    public static ItemIndexError Timeout;
    public static ItemIndexError StaleEvent;
    public static ItemIndexError MailboxOffline;
    public static ItemIndexError AttachmentLimitReached;
    public static ItemIndexError MarsWriterTruncation;
}
[SchemaAttribute]
public class Microsoft.Exchange.WebServices.Data.ItemSchema : ServiceObjectSchema {
    public static PropertyDefinition Id;
    public static PropertyDefinition Body;
    public static PropertyDefinition ItemClass;
    public static PropertyDefinition Subject;
    public static PropertyDefinition MimeContent;
    public static PropertyDefinition MimeContentUTF8;
    public static PropertyDefinition ParentFolderId;
    public static PropertyDefinition Sensitivity;
    public static PropertyDefinition Attachments;
    public static PropertyDefinition DateTimeReceived;
    public static PropertyDefinition Size;
    public static PropertyDefinition Categories;
    public static PropertyDefinition Importance;
    public static PropertyDefinition InReplyTo;
    public static PropertyDefinition IsSubmitted;
    public static PropertyDefinition IsAssociated;
    public static PropertyDefinition IsDraft;
    public static PropertyDefinition IsFromMe;
    public static PropertyDefinition IsResend;
    public static PropertyDefinition IsUnmodified;
    public static PropertyDefinition InternetMessageHeaders;
    public static PropertyDefinition DateTimeSent;
    public static PropertyDefinition DateTimeCreated;
    public static PropertyDefinition AllowedResponseActions;
    public static PropertyDefinition ReminderDueBy;
    public static PropertyDefinition IsReminderSet;
    public static PropertyDefinition ReminderMinutesBeforeStart;
    public static PropertyDefinition DisplayCc;
    public static PropertyDefinition DisplayTo;
    public static PropertyDefinition HasAttachments;
    public static PropertyDefinition Culture;
    public static PropertyDefinition EffectiveRights;
    public static PropertyDefinition LastModifiedName;
    public static PropertyDefinition LastModifiedTime;
    public static PropertyDefinition WebClientReadFormQueryString;
    public static PropertyDefinition WebClientEditFormQueryString;
    public static PropertyDefinition ConversationId;
    public static PropertyDefinition UniqueBody;
    public static PropertyDefinition StoreEntryId;
    public static PropertyDefinition InstanceKey;
    public static PropertyDefinition NormalizedBody;
    public static PropertyDefinition EntityExtractionResult;
    public static PropertyDefinition Flag;
    public static PropertyDefinition PolicyTag;
    public static PropertyDefinition ArchiveTag;
    public static PropertyDefinition RetentionDate;
    public static PropertyDefinition Preview;
    public static PropertyDefinition TextBody;
    public static PropertyDefinition IconIndex;
    public static PropertyDefinition Hashtags;
    public static PropertyDefinition Mentions;
    public static PropertyDefinition MentionedMe;
    internal static ItemSchema Instance;
    private static ItemSchema();
    internal virtual void RegisterProperties();
}
public enum Microsoft.Exchange.WebServices.Data.ItemTraversal : Enum {
    public int value__;
    public static ItemTraversal Shallow;
    public static ItemTraversal SoftDeleted;
    [RequiredServerVersionAttribute("1")]
public static ItemTraversal Associated;
}
public class Microsoft.Exchange.WebServices.Data.ItemView : PagedView {
    private ItemTraversal traversal;
    private OrderByCollection orderBy;
    public ItemTraversal Traversal { get; public set; }
    public OrderByCollection OrderBy { get; }
    public ItemView(int pageSize);
    public ItemView(int pageSize, int offset);
    public ItemView(int pageSize, int offset, OffsetBasePoint offsetBasePoint);
    internal virtual string GetViewXmlElementName();
    internal virtual ServiceObjectType GetServiceObjectType();
    internal virtual void InternalValidate(ServiceRequestBase request);
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void InternalWriteSearchSettingsToXml(EwsServiceXmlWriter writer, Grouping groupBy);
    internal virtual void WriteOrderByToXml(EwsServiceXmlWriter writer);
    public ItemTraversal get_Traversal();
    public void set_Traversal(ItemTraversal value);
    public OrderByCollection get_OrderBy();
}
internal class Microsoft.Exchange.WebServices.Data.ItemWrapper : AbstractItemIdWrapper {
    private Item item;
    internal ItemWrapper(Item item);
    public virtual Item GetItem();
    internal virtual void WriteToXml(EwsServiceXmlWriter writer);
}
public interface Microsoft.Exchange.WebServices.Data.ITraceListener {
    public abstract virtual void Trace(string traceType, string traceMessage);
}
public class Microsoft.Exchange.WebServices.Data.JobInsightValue : InsightValue {
    private string company;
    private string companyDescription;
    private string companyTicker;
    private string companyLogoUrl;
    private string companyWebsiteUrl;
    private string companyLinkedInUrl;
    private string title;
    private long startUtcTicks;
    private long endUtcTicks;
    public string Company { get; public set; }
    public string CompanyDescription { get; public set; }
    public string CompanyTicker { get; public set; }
    public string CompanyLogoUrl { get; public set; }
    public string CompanyWebsiteUrl { get; public set; }
    public string CompanyLinkedInUrl { get; public set; }
    public string Title { get; public set; }
    public long StartUtcTicks { get; public set; }
    public long EndUtcTicks { get; public set; }
    public string get_Company();
    public void set_Company(string value);
    public string get_CompanyDescription();
    public void set_CompanyDescription(string value);
    public string get_CompanyTicker();
    public void set_CompanyTicker(string value);
    public string get_CompanyLogoUrl();
    public void set_CompanyLogoUrl(string value);
    public string get_CompanyWebsiteUrl();
    public void set_CompanyWebsiteUrl(string value);
    public string get_CompanyLinkedInUrl();
    public void set_CompanyLinkedInUrl(string value);
    public string get_Title();
    public void set_Title(string value);
    public long get_StartUtcTicks();
    public void set_StartUtcTicks(long value);
    public long get_EndUtcTicks();
    public void set_EndUtcTicks(long value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
public class Microsoft.Exchange.WebServices.Data.JobInsightValueCollection : ComplexPropertyCollection`1<JobInsightValue> {
    private string collectionItemXmlElementName;
    internal JobInsightValueCollection(string collectionItemXmlElementName);
    internal virtual JobInsightValue CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(JobInsightValue insight);
    internal virtual bool ShouldWriteToRequest();
}
public class Microsoft.Exchange.WebServices.Data.KeywordStatisticsSearchResult : object {
    [CompilerGeneratedAttribute]
private string <Keyword>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ItemHits>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Size>k__BackingField;
    public string Keyword { get; public set; }
    public int ItemHits { get; public set; }
    [CLSCompliantAttribute("False")]
public ulong Size { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Keyword();
    [CompilerGeneratedAttribute]
public void set_Keyword(string value);
    [CompilerGeneratedAttribute]
public int get_ItemHits();
    [CompilerGeneratedAttribute]
public void set_ItemHits(int value);
    [CompilerGeneratedAttribute]
public ulong get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(ulong value);
}
internal class Microsoft.Exchange.WebServices.Data.LazyMember`1 : object {
    private T lazyMember;
    private InitializeLazyMember`1<T> initializationDelegate;
    private object lockObject;
    private bool initialized;
    public T Member { get; }
    public LazyMember`1(InitializeLazyMember`1<T> initializationDelegate);
    public T get_Member();
}
internal class Microsoft.Exchange.WebServices.Data.LegacyAvailabilityTimeZone : ComplexProperty {
    private TimeSpan bias;
    private LegacyAvailabilityTimeZoneTime standardTime;
    private LegacyAvailabilityTimeZoneTime daylightTime;
    internal LegacyAvailabilityTimeZone(TimeZoneInfo timeZoneInfo);
    internal TimeZoneInfo ToTimeZoneInfo();
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
}
internal class Microsoft.Exchange.WebServices.Data.LegacyAvailabilityTimeZoneTime : ComplexProperty {
    private TimeSpan delta;
    private int year;
    private int month;
    private int dayOrder;
    private DayOfTheWeek dayOfTheWeek;
    private TimeSpan timeOfDay;
    internal bool HasTransitionTime { get; }
    internal TimeSpan Delta { get; internal set; }
    internal TimeSpan TimeOfDay { get; internal set; }
    internal int DayOrder { get; internal set; }
    internal int Month { get; internal set; }
    internal DayOfTheWeek DayOfTheWeek { get; internal set; }
    internal int Year { get; internal set; }
    internal LegacyAvailabilityTimeZoneTime(TransitionTime transitionTime, TimeSpan delta);
    internal TransitionTime ToTransitionTime();
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal bool get_HasTransitionTime();
    internal TimeSpan get_Delta();
    internal void set_Delta(TimeSpan value);
    internal TimeSpan get_TimeOfDay();
    internal void set_TimeOfDay(TimeSpan value);
    internal int get_DayOrder();
    internal void set_DayOrder(int value);
    internal int get_Month();
    internal void set_Month(int value);
    internal DayOfTheWeek get_DayOfTheWeek();
    internal void set_DayOfTheWeek(DayOfTheWeek value);
    internal int get_Year();
    internal void set_Year(int value);
}
public enum Microsoft.Exchange.WebServices.Data.LegacyFreeBusyStatus : Enum {
    public int value__;
    public static LegacyFreeBusyStatus Free;
    public static LegacyFreeBusyStatus Tentative;
    public static LegacyFreeBusyStatus Busy;
    public static LegacyFreeBusyStatus OOF;
    public static LegacyFreeBusyStatus WorkingElsewhere;
    public static LegacyFreeBusyStatus NoData;
}
internal class Microsoft.Exchange.WebServices.Data.ListValuePropertyDefinition`1 : GenericPropertyDefinition`1<TPropertyValue> {
    internal ListValuePropertyDefinition`1(string xmlElementName, string uri, PropertyDefinitionFlags flags, ExchangeVersion version);
    internal virtual object Parse(string value);
}
public enum Microsoft.Exchange.WebServices.Data.LobbyBypass : Enum {
    public int value__;
    public static LobbyBypass Disabled;
    public static LobbyBypass EnabledForGatewayParticipants;
}
public enum Microsoft.Exchange.WebServices.Data.LocationSource : Enum {
    public int value__;
    public static LocationSource None;
    public static LocationSource LocationServices;
    public static LocationSource PhonebookServices;
    public static LocationSource Device;
    public static LocationSource Contact;
    public static LocationSource Resource;
}
public enum Microsoft.Exchange.WebServices.Data.LogicalOperator : Enum {
    public int value__;
    public static LogicalOperator And;
    public static LogicalOperator Or;
}
public class Microsoft.Exchange.WebServices.Data.Mailbox : ComplexProperty {
    [CompilerGeneratedAttribute]
private string <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoutingType>k__BackingField;
    public bool IsValid { get; }
    public string Address { get; public set; }
    public string RoutingType { get; public set; }
    public Mailbox(string smtpAddress);
    public Mailbox(string address, string routingType);
    public bool get_IsValid();
    [CompilerGeneratedAttribute]
public string get_Address();
    [CompilerGeneratedAttribute]
public void set_Address(string value);
    [CompilerGeneratedAttribute]
public string get_RoutingType();
    [CompilerGeneratedAttribute]
public void set_RoutingType(string value);
    public static Mailbox op_Implicit(string smtpAddress);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    private sealed virtual override string Microsoft.Exchange.WebServices.Data.ISearchStringProvider.GetSearchString();
    internal virtual void InternalValidate();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Microsoft.Exchange.WebServices.Data.MailboxHoldResult : object {
    [CompilerGeneratedAttribute]
private string <HoldId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private MailboxHoldStatus[] <Statuses>k__BackingField;
    public string HoldId { get; public set; }
    public string Query { get; public set; }
    public MailboxHoldStatus[] Statuses { get; public set; }
    internal static MailboxHoldResult LoadFromXml(EwsServiceXmlReader reader);
    [CompilerGeneratedAttribute]
public string get_HoldId();
    [CompilerGeneratedAttribute]
public void set_HoldId(string value);
    [CompilerGeneratedAttribute]
public string get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(string value);
    [CompilerGeneratedAttribute]
public MailboxHoldStatus[] get_Statuses();
    [CompilerGeneratedAttribute]
public void set_Statuses(MailboxHoldStatus[] value);
}
public class Microsoft.Exchange.WebServices.Data.MailboxHoldStatus : object {
    [CompilerGeneratedAttribute]
private string <Mailbox>k__BackingField;
    [CompilerGeneratedAttribute]
private HoldStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdditionalInfo>k__BackingField;
    public string Mailbox { get; public set; }
    public HoldStatus Status { get; public set; }
    public string AdditionalInfo { get; public set; }
    public MailboxHoldStatus(string mailbox, HoldStatus status, string additionalInfo);
    [CompilerGeneratedAttribute]
public string get_Mailbox();
    [CompilerGeneratedAttribute]
public void set_Mailbox(string value);
    [CompilerGeneratedAttribute]
public HoldStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(HoldStatus value);
    [CompilerGeneratedAttribute]
public string get_AdditionalInfo();
    [CompilerGeneratedAttribute]
public void set_AdditionalInfo(string value);
}
public class Microsoft.Exchange.WebServices.Data.MailboxQuery : object {
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private MailboxSearchScope[] <MailboxSearchScopes>k__BackingField;
    public string Query { get; public set; }
    public MailboxSearchScope[] MailboxSearchScopes { get; public set; }
    public MailboxQuery(string query, MailboxSearchScope[] searchScopes);
    [CompilerGeneratedAttribute]
public string get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(string value);
    [CompilerGeneratedAttribute]
public MailboxSearchScope[] get_MailboxSearchScopes();
    [CompilerGeneratedAttribute]
public void set_MailboxSearchScopes(MailboxSearchScope[] value);
}
public enum Microsoft.Exchange.WebServices.Data.MailboxSearchLocation : Enum {
    public int value__;
    [RequiredServerVersionAttribute("4")]
public static MailboxSearchLocation PrimaryOnly;
    [RequiredServerVersionAttribute("4")]
public static MailboxSearchLocation ArchiveOnly;
    [RequiredServerVersionAttribute("4")]
public static MailboxSearchLocation All;
}
public class Microsoft.Exchange.WebServices.Data.MailboxSearchScope : object {
    private MailboxSearchLocation searchScope;
    private MailboxSearchScopeType scopeType;
    [CompilerGeneratedAttribute]
private string <Mailbox>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtendedAttributes <ExtendedAttributes>k__BackingField;
    public string Mailbox { get; public set; }
    public MailboxSearchLocation SearchScope { get; public set; }
    internal MailboxSearchScopeType SearchScopeType { get; internal set; }
    public ExtendedAttributes ExtendedAttributes { get; private set; }
    public MailboxSearchScope(string mailbox, MailboxSearchLocation searchScope);
    [CompilerGeneratedAttribute]
public string get_Mailbox();
    [CompilerGeneratedAttribute]
public void set_Mailbox(string value);
    public MailboxSearchLocation get_SearchScope();
    public void set_SearchScope(MailboxSearchLocation value);
    internal MailboxSearchScopeType get_SearchScopeType();
    internal void set_SearchScopeType(MailboxSearchScopeType value);
    [CompilerGeneratedAttribute]
public ExtendedAttributes get_ExtendedAttributes();
    [CompilerGeneratedAttribute]
private void set_ExtendedAttributes(ExtendedAttributes value);
}
internal enum Microsoft.Exchange.WebServices.Data.MailboxSearchScopeType : Enum {
    public int value__;
    public static MailboxSearchScopeType LegacyExchangeDN;
    public static MailboxSearchScopeType PublicFolder;
    public static MailboxSearchScopeType Recipient;
    public static MailboxSearchScopeType MailboxGuid;
    public static MailboxSearchScopeType AllPublicFolders;
    public static MailboxSearchScopeType AllMailboxes;
    public static MailboxSearchScopeType SavedSearchId;
    public static MailboxSearchScopeType AutoDetect;
}
public class Microsoft.Exchange.WebServices.Data.MailboxStatisticsItem : object {
    [CompilerGeneratedAttribute]
private string <MailboxId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ItemCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Size>k__BackingField;
    public string MailboxId { get; public set; }
    public string DisplayName { get; public set; }
    public long ItemCount { get; public set; }
    [CLSCompliantAttribute("False")]
public ulong Size { get; public set; }
    [CompilerGeneratedAttribute]
public string get_MailboxId();
    [CompilerGeneratedAttribute]
public void set_MailboxId(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public long get_ItemCount();
    [CompilerGeneratedAttribute]
public void set_ItemCount(long value);
    [CompilerGeneratedAttribute]
public ulong get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(ulong value);
    internal static MailboxStatisticsItem LoadFromXml(EwsServiceXmlReader reader);
}
public enum Microsoft.Exchange.WebServices.Data.MailboxType : Enum {
    public int value__;
    [RequiredServerVersionAttribute("1")]
public static MailboxType Unknown;
    [RequiredServerVersionAttribute("1")]
public static MailboxType OneOff;
    public static MailboxType Mailbox;
    [RequiredServerVersionAttribute("0")]
public static MailboxType PublicFolder;
    [EwsEnumAttribute("PublicDL")]
public static MailboxType PublicGroup;
    [EwsEnumAttribute("PrivateDL")]
public static MailboxType ContactGroup;
    public static MailboxType Contact;
    [RequiredServerVersionAttribute("6")]
public static MailboxType GroupMailbox;
}
public class Microsoft.Exchange.WebServices.Data.ManagedFolderInformation : ComplexProperty {
    private Nullable`1<bool> canDelete;
    private Nullable`1<bool> canRenameOrMove;
    private Nullable`1<bool> mustDisplayComment;
    private Nullable`1<bool> hasQuota;
    private Nullable`1<bool> isManagedFoldersRoot;
    private string managedFolderId;
    private string comment;
    private Nullable`1<int> storageQuota;
    private Nullable`1<int> folderSize;
    private string homePage;
    public Nullable`1<bool> CanDelete { get; }
    public Nullable`1<bool> CanRenameOrMove { get; }
    public Nullable`1<bool> MustDisplayComment { get; }
    public Nullable`1<bool> HasQuota { get; }
    public Nullable`1<bool> IsManagedFoldersRoot { get; }
    public string ManagedFolderId { get; }
    public string Comment { get; }
    public Nullable`1<int> StorageQuota { get; }
    public Nullable`1<int> FolderSize { get; }
    public string HomePage { get; }
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    public Nullable`1<bool> get_CanDelete();
    public Nullable`1<bool> get_CanRenameOrMove();
    public Nullable`1<bool> get_MustDisplayComment();
    public Nullable`1<bool> get_HasQuota();
    public Nullable`1<bool> get_IsManagedFoldersRoot();
    public string get_ManagedFolderId();
    public string get_Comment();
    public Nullable`1<int> get_StorageQuota();
    public Nullable`1<int> get_FolderSize();
    public string get_HomePage();
}
public class Microsoft.Exchange.WebServices.Data.ManagementRoles : object {
    private String[] userRoles;
    private String[] applicationRoles;
    public ManagementRoles(string userRole);
    public ManagementRoles(string userRole, string applicationRole);
    public ManagementRoles(String[] userRoles, String[] applicationRoles);
    internal void WriteToXml(EwsServiceXmlWriter writer);
    private void WriteRolesToXml(EwsServiceXmlWriter writer, String[] roles, string elementName);
}
public enum Microsoft.Exchange.WebServices.Data.MapiPropertyType : Enum {
    public int value__;
    public static MapiPropertyType ApplicationTime;
    public static MapiPropertyType ApplicationTimeArray;
    public static MapiPropertyType Binary;
    public static MapiPropertyType BinaryArray;
    public static MapiPropertyType Boolean;
    public static MapiPropertyType CLSID;
    public static MapiPropertyType CLSIDArray;
    public static MapiPropertyType Currency;
    public static MapiPropertyType CurrencyArray;
    public static MapiPropertyType Double;
    public static MapiPropertyType DoubleArray;
    public static MapiPropertyType Error;
    public static MapiPropertyType Float;
    public static MapiPropertyType FloatArray;
    public static MapiPropertyType Integer;
    public static MapiPropertyType IntegerArray;
    public static MapiPropertyType Long;
    public static MapiPropertyType LongArray;
    public static MapiPropertyType Null;
    public static MapiPropertyType Object;
    public static MapiPropertyType ObjectArray;
    public static MapiPropertyType Short;
    public static MapiPropertyType ShortArray;
    public static MapiPropertyType SystemTime;
    public static MapiPropertyType SystemTimeArray;
    public static MapiPropertyType String;
    public static MapiPropertyType StringArray;
}
internal class Microsoft.Exchange.WebServices.Data.MapiTypeConverter : object {
    private static DateTimeStyles UtcDataTimeStyles;
    private static LazyMember`1<Dictionary`2<MapiPropertyType, MapiTypeConverterMapEntry>> mapiTypeConverterMap;
    internal static Dictionary`2<MapiPropertyType, MapiTypeConverterMapEntry> MapiTypeConverterMap { get; }
    private static MapiTypeConverter();
    internal static Array ConvertToValue(MapiPropertyType mapiPropType, IEnumerable`1<string> strings);
    internal static object ConvertToValue(MapiPropertyType mapiPropType, string stringValue);
    internal static string ConvertToString(MapiPropertyType mapiPropType, object value);
    internal static object ChangeType(MapiPropertyType mapiType, object value);
    internal static object ParseMapiIntegerValue(string s);
    internal static bool IsArrayType(MapiPropertyType mapiType);
    internal static Dictionary`2<MapiPropertyType, MapiTypeConverterMapEntry> get_MapiTypeConverterMap();
}
internal class Microsoft.Exchange.WebServices.Data.MapiTypeConverterMapEntry : object {
    private static LazyMember`1<Dictionary`2<Type, object>> defaultValueMap;
    [CompilerGeneratedAttribute]
private Func`2<string, object> <Parse>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<object, string> <ConvertToString>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsArray>k__BackingField;
    internal Func`2<string, object> Parse { get; internal set; }
    internal Func`2<object, string> ConvertToString { get; internal set; }
    internal Type Type { get; internal set; }
    internal bool IsArray { get; internal set; }
    internal object DefaultValue { get; }
    internal MapiTypeConverterMapEntry(Type type);
    private static MapiTypeConverterMapEntry();
    internal object ChangeType(object value);
    internal object ConvertToValue(string stringValue);
    internal object ConvertToValueOrDefault(string stringValue);
    private void ValidateValueAsArray(object value);
    [CompilerGeneratedAttribute]
internal Func`2<string, object> get_Parse();
    [CompilerGeneratedAttribute]
internal void set_Parse(Func`2<string, object> value);
    [CompilerGeneratedAttribute]
internal Func`2<object, string> get_ConvertToString();
    [CompilerGeneratedAttribute]
internal void set_ConvertToString(Func`2<object, string> value);
    [CompilerGeneratedAttribute]
internal Type get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(Type value);
    [CompilerGeneratedAttribute]
internal bool get_IsArray();
    [CompilerGeneratedAttribute]
internal void set_IsArray(bool value);
    internal object get_DefaultValue();
}
internal class Microsoft.Exchange.WebServices.Data.MarkAllItemsAsReadRequest : MultiResponseServiceRequest`1<ServiceResponse> {
    private FolderIdWrapperList folderIds;
    [CompilerGeneratedAttribute]
private bool <ReadFlag>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressReadReceipts>k__BackingField;
    internal FolderIdWrapperList FolderIds { get; }
    internal bool ReadFlag { get; internal set; }
    internal bool SuppressReadReceipts { get; internal set; }
    internal MarkAllItemsAsReadRequest(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual void Validate();
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual ServiceResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal FolderIdWrapperList get_FolderIds();
    [CompilerGeneratedAttribute]
internal bool get_ReadFlag();
    [CompilerGeneratedAttribute]
internal void set_ReadFlag(bool value);
    [CompilerGeneratedAttribute]
internal bool get_SuppressReadReceipts();
    [CompilerGeneratedAttribute]
internal void set_SuppressReadReceipts(bool value);
}
internal class Microsoft.Exchange.WebServices.Data.MarkAsJunkRequest : MultiResponseServiceRequest`1<MarkAsJunkResponse> {
    private ItemIdWrapperList itemIds;
    [CompilerGeneratedAttribute]
private bool <IsJunk>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MoveItem>k__BackingField;
    internal ItemIdWrapperList ItemIds { get; }
    internal bool IsJunk { get; internal set; }
    internal bool MoveItem { get; internal set; }
    internal MarkAsJunkRequest(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual void Validate();
    internal virtual MarkAsJunkResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal ItemIdWrapperList get_ItemIds();
    [CompilerGeneratedAttribute]
internal bool get_IsJunk();
    [CompilerGeneratedAttribute]
internal void set_IsJunk(bool value);
    [CompilerGeneratedAttribute]
internal bool get_MoveItem();
    [CompilerGeneratedAttribute]
internal void set_MoveItem(bool value);
}
public class Microsoft.Exchange.WebServices.Data.MarkAsJunkResponse : ServiceResponse {
    [CompilerGeneratedAttribute]
private ItemId <MovedItemId>k__BackingField;
    public ItemId MovedItemId { get; private set; }
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    [CompilerGeneratedAttribute]
public ItemId get_MovedItemId();
    [CompilerGeneratedAttribute]
private void set_MovedItemId(ItemId value);
}
public enum Microsoft.Exchange.WebServices.Data.MeetingAttendeeType : Enum {
    public int value__;
    public static MeetingAttendeeType Organizer;
    public static MeetingAttendeeType Required;
    public static MeetingAttendeeType Optional;
    public static MeetingAttendeeType Room;
    public static MeetingAttendeeType Resource;
}
[ServiceObjectDefinitionAttribute("MeetingCancellation")]
public class Microsoft.Exchange.WebServices.Data.MeetingCancellation : MeetingMessage {
    public DateTime Start { get; }
    public DateTime End { get; }
    public string Location { get; }
    public Recurrence Recurrence { get; }
    public EnhancedLocation EnhancedLocation { get; }
    internal MeetingCancellation(ItemAttachment parentAttachment);
    internal MeetingCancellation(ExchangeService service);
    public static Task`1<MeetingCancellation> Bind(ExchangeService service, ItemId id, PropertySet propertySet, CancellationToken token);
    public static Task`1<MeetingCancellation> Bind(ExchangeService service, ItemId id);
    internal virtual ServiceObjectSchema GetSchema();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.MeetingCancellation/<RemoveMeetingFromCalendar>d__5")]
public Task`1<CalendarActionResults> RemoveMeetingFromCalendar(CancellationToken token);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public DateTime get_Start();
    public DateTime get_End();
    public string get_Location();
    public Recurrence get_Recurrence();
    public EnhancedLocation get_EnhancedLocation();
}
[SchemaAttribute]
public class Microsoft.Exchange.WebServices.Data.MeetingCancellationSchema : MeetingMessageSchema {
    public static PropertyDefinition Start;
    public static PropertyDefinition End;
    public static PropertyDefinition Location;
    public static PropertyDefinition AppointmentType;
    public static PropertyDefinition Recurrence;
    public static PropertyDefinition EnhancedLocation;
    internal static MeetingCancellationSchema Instance;
    private static MeetingCancellationSchema();
    internal virtual void RegisterProperties();
}
public class Microsoft.Exchange.WebServices.Data.MeetingInsightValue : InsightValue {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private long <StartUtcTicks>k__BackingField;
    [CompilerGeneratedAttribute]
private long <EndUtcTicks>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private ProfileInsightValue <Organizer>k__BackingField;
    [CompilerGeneratedAttribute]
private ProfileInsightValueCollection <Attendees>k__BackingField;
    public string Id { get; internal set; }
    public string Subject { get; internal set; }
    public long StartUtcTicks { get; internal set; }
    public long EndUtcTicks { get; internal set; }
    public string Location { get; internal set; }
    public ProfileInsightValue Organizer { get; internal set; }
    public ProfileInsightValueCollection Attendees { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
internal void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
internal void set_Subject(string value);
    [CompilerGeneratedAttribute]
public long get_StartUtcTicks();
    [CompilerGeneratedAttribute]
internal void set_StartUtcTicks(long value);
    [CompilerGeneratedAttribute]
public long get_EndUtcTicks();
    [CompilerGeneratedAttribute]
internal void set_EndUtcTicks(long value);
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
internal void set_Location(string value);
    [CompilerGeneratedAttribute]
public ProfileInsightValue get_Organizer();
    [CompilerGeneratedAttribute]
internal void set_Organizer(ProfileInsightValue value);
    [CompilerGeneratedAttribute]
public ProfileInsightValueCollection get_Attendees();
    [CompilerGeneratedAttribute]
internal void set_Attendees(ProfileInsightValueCollection value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
[ServiceObjectDefinitionAttribute("MeetingMessage")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.MeetingMessage : EmailMessage {
    public ItemId AssociatedAppointmentId { get; }
    public bool IsDelegated { get; }
    public bool IsOutOfDate { get; }
    public bool HasBeenProcessed { get; }
    public Nullable`1<bool> IsOrganizer { get; }
    public MeetingResponseType ResponseType { get; }
    public string ICalUid { get; }
    public Nullable`1<DateTime> ICalRecurrenceId { get; }
    public Nullable`1<DateTime> ICalDateTimeStamp { get; }
    internal MeetingMessage(ItemAttachment parentAttachment);
    internal MeetingMessage(ExchangeService service);
    public static Task`1<MeetingMessage> Bind(ExchangeService service, ItemId id, PropertySet propertySet, CancellationToken token);
    public static Task`1<MeetingMessage> Bind(ExchangeService service, ItemId id);
    internal virtual ServiceObjectSchema GetSchema();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public ItemId get_AssociatedAppointmentId();
    public bool get_IsDelegated();
    public bool get_IsOutOfDate();
    public bool get_HasBeenProcessed();
    public Nullable`1<bool> get_IsOrganizer();
    public MeetingResponseType get_ResponseType();
    public string get_ICalUid();
    public Nullable`1<DateTime> get_ICalRecurrenceId();
    public Nullable`1<DateTime> get_ICalDateTimeStamp();
}
[SchemaAttribute]
public class Microsoft.Exchange.WebServices.Data.MeetingMessageSchema : EmailMessageSchema {
    public static PropertyDefinition AssociatedAppointmentId;
    public static PropertyDefinition IsDelegated;
    public static PropertyDefinition IsOutOfDate;
    public static PropertyDefinition HasBeenProcessed;
    public static PropertyDefinition ResponseType;
    public static PropertyDefinition ICalUid;
    public static PropertyDefinition ICalRecurrenceId;
    public static PropertyDefinition ICalDateTimeStamp;
    public static PropertyDefinition IsOrganizer;
    internal static MeetingMessageSchema Instance;
    private static MeetingMessageSchema();
    internal virtual void RegisterProperties();
}
[ServiceObjectDefinitionAttribute("MeetingRequest")]
public class Microsoft.Exchange.WebServices.Data.MeetingRequest : MeetingMessage {
    public MeetingRequestType MeetingRequestType { get; }
    public LegacyFreeBusyStatus IntendedFreeBusyStatus { get; }
    public ChangeHighlights ChangeHighlights { get; }
    public EnhancedLocation EnhancedLocation { get; }
    public DateTime Start { get; }
    public DateTime End { get; }
    public DateTime OriginalStart { get; }
    public bool IsAllDayEvent { get; }
    public LegacyFreeBusyStatus LegacyFreeBusyStatus { get; }
    public string Location { get; }
    public string When { get; }
    public bool IsMeeting { get; }
    public bool IsCancelled { get; }
    public bool IsRecurring { get; }
    public bool MeetingRequestWasSent { get; }
    public AppointmentType AppointmentType { get; }
    public MeetingResponseType MyResponseType { get; }
    public EmailAddress Organizer { get; }
    public AttendeeCollection RequiredAttendees { get; }
    public AttendeeCollection OptionalAttendees { get; }
    public AttendeeCollection Resources { get; }
    public int ConflictingMeetingCount { get; }
    public int AdjacentMeetingCount { get; }
    public ItemCollection`1<Appointment> ConflictingMeetings { get; }
    public ItemCollection`1<Appointment> AdjacentMeetings { get; }
    public TimeSpan Duration { get; }
    public string TimeZone { get; }
    public DateTime AppointmentReplyTime { get; }
    public int AppointmentSequenceNumber { get; }
    public int AppointmentState { get; }
    public Recurrence Recurrence { get; }
    public OccurrenceInfo FirstOccurrence { get; }
    public OccurrenceInfo LastOccurrence { get; }
    public OccurrenceInfoCollection ModifiedOccurrences { get; }
    public DeletedOccurrenceInfoCollection DeletedOccurrences { get; }
    public TimeZoneInfo StartTimeZone { get; }
    public TimeZoneInfo EndTimeZone { get; }
    public int ConferenceType { get; }
    public bool AllowNewTimeProposal { get; }
    public bool IsOnlineMeeting { get; }
    public string MeetingWorkspaceUrl { get; }
    public string NetShowUrl { get; }
    internal MeetingRequest(ItemAttachment parentAttachment);
    internal MeetingRequest(ExchangeService service);
    public static Task`1<MeetingRequest> Bind(ExchangeService service, ItemId id, PropertySet propertySet, CancellationToken token);
    public static Task`1<MeetingRequest> Bind(ExchangeService service, ItemId id);
    internal virtual ServiceObjectSchema GetSchema();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public sealed virtual AcceptMeetingInvitationMessage CreateAcceptMessage(bool tentative);
    public sealed virtual DeclineMeetingInvitationMessage CreateDeclineMessage();
    public sealed virtual Task`1<CalendarActionResults> Accept(bool sendResponse);
    public sealed virtual Task`1<CalendarActionResults> AcceptTentatively(bool sendResponse);
    internal Task`1<CalendarActionResults> InternalAccept(bool tentative, bool sendResponse);
    public sealed virtual Task`1<CalendarActionResults> Decline(bool sendResponse);
    public MeetingRequestType get_MeetingRequestType();
    public LegacyFreeBusyStatus get_IntendedFreeBusyStatus();
    public ChangeHighlights get_ChangeHighlights();
    public EnhancedLocation get_EnhancedLocation();
    public DateTime get_Start();
    public DateTime get_End();
    public DateTime get_OriginalStart();
    public bool get_IsAllDayEvent();
    public LegacyFreeBusyStatus get_LegacyFreeBusyStatus();
    public string get_Location();
    public string get_When();
    public bool get_IsMeeting();
    public bool get_IsCancelled();
    public bool get_IsRecurring();
    public bool get_MeetingRequestWasSent();
    public AppointmentType get_AppointmentType();
    public MeetingResponseType get_MyResponseType();
    public EmailAddress get_Organizer();
    public AttendeeCollection get_RequiredAttendees();
    public AttendeeCollection get_OptionalAttendees();
    public AttendeeCollection get_Resources();
    public int get_ConflictingMeetingCount();
    public int get_AdjacentMeetingCount();
    public ItemCollection`1<Appointment> get_ConflictingMeetings();
    public ItemCollection`1<Appointment> get_AdjacentMeetings();
    public TimeSpan get_Duration();
    public string get_TimeZone();
    public DateTime get_AppointmentReplyTime();
    public int get_AppointmentSequenceNumber();
    public int get_AppointmentState();
    public Recurrence get_Recurrence();
    public OccurrenceInfo get_FirstOccurrence();
    public OccurrenceInfo get_LastOccurrence();
    public OccurrenceInfoCollection get_ModifiedOccurrences();
    public DeletedOccurrenceInfoCollection get_DeletedOccurrences();
    public TimeZoneInfo get_StartTimeZone();
    public TimeZoneInfo get_EndTimeZone();
    public int get_ConferenceType();
    public bool get_AllowNewTimeProposal();
    public bool get_IsOnlineMeeting();
    public string get_MeetingWorkspaceUrl();
    public string get_NetShowUrl();
}
[SchemaAttribute]
public class Microsoft.Exchange.WebServices.Data.MeetingRequestSchema : MeetingMessageSchema {
    public static PropertyDefinition MeetingRequestType;
    public static PropertyDefinition IntendedFreeBusyStatus;
    public static PropertyDefinition ChangeHighlights;
    public static PropertyDefinition EnhancedLocation;
    public static PropertyDefinition Start;
    public static PropertyDefinition End;
    public static PropertyDefinition OriginalStart;
    public static PropertyDefinition IsAllDayEvent;
    public static PropertyDefinition LegacyFreeBusyStatus;
    public static PropertyDefinition Location;
    public static PropertyDefinition When;
    public static PropertyDefinition IsMeeting;
    public static PropertyDefinition IsCancelled;
    public static PropertyDefinition IsRecurring;
    public static PropertyDefinition MeetingRequestWasSent;
    public static PropertyDefinition AppointmentType;
    public static PropertyDefinition MyResponseType;
    public static PropertyDefinition Organizer;
    public static PropertyDefinition RequiredAttendees;
    public static PropertyDefinition OptionalAttendees;
    public static PropertyDefinition Resources;
    public static PropertyDefinition ConflictingMeetingCount;
    public static PropertyDefinition AdjacentMeetingCount;
    public static PropertyDefinition ConflictingMeetings;
    public static PropertyDefinition AdjacentMeetings;
    public static PropertyDefinition Duration;
    public static PropertyDefinition TimeZone;
    public static PropertyDefinition AppointmentReplyTime;
    public static PropertyDefinition AppointmentSequenceNumber;
    public static PropertyDefinition AppointmentState;
    public static PropertyDefinition Recurrence;
    public static PropertyDefinition FirstOccurrence;
    public static PropertyDefinition LastOccurrence;
    public static PropertyDefinition ModifiedOccurrences;
    public static PropertyDefinition DeletedOccurrences;
    internal static PropertyDefinition MeetingTimeZone;
    public static PropertyDefinition StartTimeZone;
    public static PropertyDefinition EndTimeZone;
    public static PropertyDefinition ConferenceType;
    public static PropertyDefinition AllowNewTimeProposal;
    public static PropertyDefinition IsOnlineMeeting;
    public static PropertyDefinition MeetingWorkspaceUrl;
    public static PropertyDefinition NetShowUrl;
    internal static MeetingRequestSchema Instance;
    private static MeetingRequestSchema();
    internal virtual void RegisterProperties();
}
public enum Microsoft.Exchange.WebServices.Data.MeetingRequestsDeliveryScope : Enum {
    public int value__;
    public static MeetingRequestsDeliveryScope DelegatesOnly;
    public static MeetingRequestsDeliveryScope DelegatesAndMe;
    public static MeetingRequestsDeliveryScope DelegatesAndSendInformationToMe;
    [RequiredServerVersionAttribute("2")]
public static MeetingRequestsDeliveryScope NoForward;
}
public enum Microsoft.Exchange.WebServices.Data.MeetingRequestType : Enum {
    public int value__;
    public static MeetingRequestType None;
    public static MeetingRequestType FullUpdate;
    public static MeetingRequestType InformationalUpdate;
    public static MeetingRequestType NewMeetingRequest;
    public static MeetingRequestType Outdated;
    public static MeetingRequestType SilentUpdate;
    public static MeetingRequestType PrincipalWantsCopy;
}
[ServiceObjectDefinitionAttribute("MeetingResponse")]
public class Microsoft.Exchange.WebServices.Data.MeetingResponse : MeetingMessage {
    public DateTime Start { get; }
    public DateTime End { get; }
    public string Location { get; }
    public Recurrence Recurrence { get; }
    public DateTime ProposedStart { get; }
    public DateTime ProposedEnd { get; }
    public EnhancedLocation EnhancedLocation { get; }
    internal MeetingResponse(ItemAttachment parentAttachment);
    internal MeetingResponse(ExchangeService service);
    public static Task`1<MeetingResponse> Bind(ExchangeService service, ItemId id, PropertySet propertySet, CancellationToken token);
    public static Task`1<MeetingResponse> Bind(ExchangeService service, ItemId id);
    internal virtual ServiceObjectSchema GetSchema();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public DateTime get_Start();
    public DateTime get_End();
    public string get_Location();
    public Recurrence get_Recurrence();
    public DateTime get_ProposedStart();
    public DateTime get_ProposedEnd();
    public EnhancedLocation get_EnhancedLocation();
}
[SchemaAttribute]
public class Microsoft.Exchange.WebServices.Data.MeetingResponseSchema : MeetingMessageSchema {
    public static PropertyDefinition Start;
    public static PropertyDefinition End;
    public static PropertyDefinition Location;
    public static PropertyDefinition AppointmentType;
    public static PropertyDefinition Recurrence;
    public static PropertyDefinition ProposedStart;
    public static PropertyDefinition ProposedEnd;
    public static PropertyDefinition EnhancedLocation;
    internal static MeetingResponseSchema Instance;
    private static MeetingResponseSchema();
    internal virtual void RegisterProperties();
}
public enum Microsoft.Exchange.WebServices.Data.MeetingResponseType : Enum {
    public int value__;
    public static MeetingResponseType Unknown;
    public static MeetingResponseType Organizer;
    public static MeetingResponseType Tentative;
    public static MeetingResponseType Accept;
    public static MeetingResponseType Decline;
    public static MeetingResponseType NoResponseReceived;
}
public class Microsoft.Exchange.WebServices.Data.MeetingSuggestion : ExtractedEntity {
    [CompilerGeneratedAttribute]
private EmailUserEntityCollection <Attendees>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MeetingString>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <StartTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <EndTime>k__BackingField;
    public EmailUserEntityCollection Attendees { get; internal set; }
    public string Location { get; internal set; }
    public string Subject { get; internal set; }
    public string MeetingString { get; internal set; }
    public Nullable`1<DateTime> StartTime { get; internal set; }
    public Nullable`1<DateTime> EndTime { get; internal set; }
    [CompilerGeneratedAttribute]
public EmailUserEntityCollection get_Attendees();
    [CompilerGeneratedAttribute]
internal void set_Attendees(EmailUserEntityCollection value);
    [CompilerGeneratedAttribute]
public string get_Location();
    [CompilerGeneratedAttribute]
internal void set_Location(string value);
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
internal void set_Subject(string value);
    [CompilerGeneratedAttribute]
public string get_MeetingString();
    [CompilerGeneratedAttribute]
internal void set_MeetingString(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_StartTime();
    [CompilerGeneratedAttribute]
internal void set_StartTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_EndTime();
    [CompilerGeneratedAttribute]
internal void set_EndTime(Nullable`1<DateTime> value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.MeetingSuggestionCollection : ComplexPropertyCollection`1<MeetingSuggestion> {
    internal MeetingSuggestionCollection(IEnumerable`1<MeetingSuggestion> collection);
    internal virtual MeetingSuggestion CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(MeetingSuggestion complexProperty);
}
internal class Microsoft.Exchange.WebServices.Data.MeetingTimeZone : ComplexProperty {
    private string name;
    private Nullable`1<TimeSpan> baseOffset;
    private TimeChange standard;
    private TimeChange daylight;
    public string Name { get; public set; }
    public Nullable`1<TimeSpan> BaseOffset { get; public set; }
    public TimeChange Standard { get; public set; }
    public TimeChange Daylight { get; public set; }
    internal MeetingTimeZone(TimeZoneInfo timeZone);
    public MeetingTimeZone(string name);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void ReadAttributesFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal TimeZoneInfo ToTimeZoneInfo();
    public string get_Name();
    public void set_Name(string value);
    public Nullable`1<TimeSpan> get_BaseOffset();
    public void set_BaseOffset(Nullable`1<TimeSpan> value);
    public TimeChange get_Standard();
    public void set_Standard(TimeChange value);
    public TimeChange get_Daylight();
    public void set_Daylight(TimeChange value);
}
internal class Microsoft.Exchange.WebServices.Data.MeetingTimeZonePropertyDefinition : PropertyDefinition {
    public Type Type { get; }
    internal MeetingTimeZonePropertyDefinition(string xmlElementName, string uri, PropertyDefinitionFlags flags, ExchangeVersion version);
    internal sealed virtual void LoadPropertyValueFromXml(EwsServiceXmlReader reader, PropertyBag propertyBag);
    internal virtual void WritePropertyValueToXml(EwsServiceXmlWriter writer, PropertyBag propertyBag, bool isUpdateOperation);
    public virtual Type get_Type();
}
public enum Microsoft.Exchange.WebServices.Data.MemberStatus : Enum {
    public int value__;
    public static MemberStatus Unrecognized;
    public static MemberStatus Normal;
    public static MemberStatus Demoted;
}
public class Microsoft.Exchange.WebServices.Data.MessageBody : ComplexProperty {
    private BodyType bodyType;
    private string text;
    public BodyType BodyType { get; public set; }
    public string Text { get; public set; }
    public MessageBody(BodyType bodyType, string text);
    public MessageBody(string text);
    public static MessageBody op_Implicit(string textBody);
    public static string op_Implicit(MessageBody messageBody);
    internal virtual void ReadAttributesFromXml(EwsServiceXmlReader reader);
    internal virtual void ReadTextValueFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    public BodyType get_BodyType();
    public void set_BodyType(BodyType value);
    public string get_Text();
    public void set_Text(string value);
    public virtual string ToString();
}
public enum Microsoft.Exchange.WebServices.Data.MessageDisposition : Enum {
    public int value__;
    public static MessageDisposition SaveOnly;
    public static MessageDisposition SendAndSaveCopy;
    public static MessageDisposition SendOnly;
}
public class Microsoft.Exchange.WebServices.Data.MimeContent : MimeContentBase {
    public MimeContent(string characterSet, Byte[] content);
    public virtual string ToString();
}
public abstract class Microsoft.Exchange.WebServices.Data.MimeContentBase : ComplexProperty {
    private string characterSet;
    private Byte[] content;
    public string CharacterSet { get; public set; }
    public Byte[] Content { get; public set; }
    internal virtual void ReadAttributesFromXml(EwsServiceXmlReader reader);
    internal virtual void ReadTextValueFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    public string get_CharacterSet();
    public void set_CharacterSet(string value);
    public Byte[] get_Content();
    public void set_Content(Byte[] value);
}
public class Microsoft.Exchange.WebServices.Data.MimeContentUTF8 : MimeContentBase {
    public MimeContentUTF8(Byte[] content);
    public virtual string ToString();
}
public class Microsoft.Exchange.WebServices.Data.Misc.AdjustmentRule : object {
    [CompilerGeneratedAttribute]
private DateTime <DateStart>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <DateEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private TransitionTime <DaylightTransitionStart>k__BackingField;
    [CompilerGeneratedAttribute]
private TransitionTime <DaylightTransitionEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DaylightDelta>k__BackingField;
    [CompilerGeneratedAttribute]
private AdjustmentRule <Origin>k__BackingField;
    public DateTime DateStart { get; }
    public DateTime DateEnd { get; }
    public TransitionTime DaylightTransitionStart { get; }
    public TransitionTime DaylightTransitionEnd { get; }
    public TimeSpan DaylightDelta { get; }
    public AdjustmentRule Origin { get; }
    public AdjustmentRule(AdjustmentRule rule);
    [CompilerGeneratedAttribute]
public DateTime get_DateStart();
    [CompilerGeneratedAttribute]
public DateTime get_DateEnd();
    [CompilerGeneratedAttribute]
public TransitionTime get_DaylightTransitionStart();
    [CompilerGeneratedAttribute]
public TransitionTime get_DaylightTransitionEnd();
    [CompilerGeneratedAttribute]
public TimeSpan get_DaylightDelta();
    [CompilerGeneratedAttribute]
public AdjustmentRule get_Origin();
    internal static AdjustmentRule CreateAdjustmentRule(DateTime date1, DateTime date2, TimeSpan timeSpan, TransitionTime transitionTime1, TransitionTime transitionTime2);
}
[ExtensionAttribute]
public static class Microsoft.Exchange.WebServices.Data.Misc.TimeZoneExtensions : object {
    public static TimeZoneInfo CreateCustomTimeZone(string id, TimeSpan baseOffsetToUtc, string name, string standardDisplayName);
    public static TimeZoneInfo CreateCustomTimeZone(string id, TimeSpan baseOffsetToUtc, string name, string standardDisplayName, string daylightDisplayName, AdjustmentRule[] adjustmentRule);
    [ExtensionAttribute]
public static AdjustmentRule[] GetAdjustmentRulesEx(TimeZoneInfo tz);
}
public class Microsoft.Exchange.WebServices.Data.Misc.TransitionTime : ValueType {
    [CompilerGeneratedAttribute]
private int <Day>k__BackingField;
    [CompilerGeneratedAttribute]
private DayOfWeek <DayOfWeek>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFixedDateRule>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Month>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <TimeOfDay>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Week>k__BackingField;
    [CompilerGeneratedAttribute]
private TransitionTime <Origin>k__BackingField;
    public int Day { get; }
    public DayOfWeek DayOfWeek { get; }
    public bool IsFixedDateRule { get; }
    public int Month { get; }
    public DateTime TimeOfDay { get; }
    public int Week { get; }
    public TransitionTime Origin { get; }
    public TransitionTime(TransitionTime time);
    [CompilerGeneratedAttribute]
public int get_Day();
    [CompilerGeneratedAttribute]
public DayOfWeek get_DayOfWeek();
    [CompilerGeneratedAttribute]
public bool get_IsFixedDateRule();
    [CompilerGeneratedAttribute]
public int get_Month();
    [CompilerGeneratedAttribute]
public DateTime get_TimeOfDay();
    [CompilerGeneratedAttribute]
public int get_Week();
    [CompilerGeneratedAttribute]
public TransitionTime get_Origin();
    internal static TransitionTime CreateFixedDateRule(DateTime dateTime, int month, int dayOrder);
    internal static TransitionTime CreateFloatingDateRule(DateTime dateTime, int month, int dayOrder, DayOfWeek dayOfWeek);
}
public class Microsoft.Exchange.WebServices.Data.MobilePhone : object {
    private string name;
    private string phoneNumber;
    public string Name { get; public set; }
    public string PhoneNumber { get; public set; }
    public MobilePhone(string name, string phoneNumber);
    public string get_Name();
    public void set_Name(string value);
    public string get_PhoneNumber();
    public void set_PhoneNumber(string value);
    private sealed virtual override void Microsoft.Exchange.WebServices.Data.ISelfValidate.Validate();
}
public enum Microsoft.Exchange.WebServices.Data.Month : Enum {
    public int value__;
    public static Month January;
    public static Month February;
    public static Month March;
    public static Month April;
    public static Month May;
    public static Month June;
    public static Month July;
    public static Month August;
    public static Month September;
    public static Month October;
    public static Month November;
    public static Month December;
}
internal abstract class Microsoft.Exchange.WebServices.Data.MoveCopyFolderRequest`1 : MoveCopyRequest`2<Folder, TResponse> {
    private FolderIdWrapperList folderIds;
    internal FolderIdWrapperList FolderIds { get; }
    internal MoveCopyFolderRequest`1(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual void Validate();
    internal virtual void WriteIdsToXml(EwsServiceXmlWriter writer);
    internal virtual int GetExpectedResponseMessageCount();
    internal FolderIdWrapperList get_FolderIds();
}
public class Microsoft.Exchange.WebServices.Data.MoveCopyFolderResponse : ServiceResponse {
    private Folder folder;
    public Folder Folder { get; }
    private Folder GetObjectInstance(ExchangeService service, string xmlElementName);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    public Folder get_Folder();
}
internal abstract class Microsoft.Exchange.WebServices.Data.MoveCopyItemRequest`1 : MoveCopyRequest`2<Item, TResponse> {
    private ItemIdWrapperList itemIds;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ReturnNewItemIds>k__BackingField;
    internal ItemIdWrapperList ItemIds { get; }
    internal Nullable`1<bool> ReturnNewItemIds { get; internal set; }
    internal MoveCopyItemRequest`1(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual void Validate();
    internal virtual void WriteIdsToXml(EwsServiceXmlWriter writer);
    internal virtual int GetExpectedResponseMessageCount();
    internal ItemIdWrapperList get_ItemIds();
    [CompilerGeneratedAttribute]
internal Nullable`1<bool> get_ReturnNewItemIds();
    [CompilerGeneratedAttribute]
internal void set_ReturnNewItemIds(Nullable`1<bool> value);
}
public class Microsoft.Exchange.WebServices.Data.MoveCopyItemResponse : ServiceResponse {
    private Item item;
    public Item Item { get; }
    private Item GetObjectInstance(ExchangeService service, string xmlElementName);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    public Item get_Item();
}
internal abstract class Microsoft.Exchange.WebServices.Data.MoveCopyRequest`2 : MultiResponseServiceRequest`1<TResponse> {
    private FolderId destinationFolderId;
    public FolderId DestinationFolderId { get; public set; }
    internal MoveCopyRequest`2(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual void Validate();
    internal abstract virtual void WriteIdsToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    public FolderId get_DestinationFolderId();
    public void set_DestinationFolderId(FolderId value);
}
internal class Microsoft.Exchange.WebServices.Data.MoveFolderRequest : MoveCopyFolderRequest`1<MoveCopyFolderResponse> {
    internal MoveFolderRequest(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual MoveCopyFolderResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
}
internal class Microsoft.Exchange.WebServices.Data.MoveItemRequest : MoveCopyItemRequest`1<MoveCopyItemResponse> {
    internal MoveItemRequest(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual MoveCopyItemResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
}
internal abstract class Microsoft.Exchange.WebServices.Data.MultiResponseServiceRequest`1 : SimpleServiceRequestBase {
    private ServiceErrorHandling errorHandlingMode;
    internal ServiceErrorHandling ErrorHandlingMode { get; }
    internal MultiResponseServiceRequest`1(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal abstract virtual TResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal abstract virtual string GetResponseMessageXmlElementName();
    internal abstract virtual int GetExpectedResponseMessageCount();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.MultiResponseServiceRequest`1/<ExecuteAsync>d__6")]
internal Task`1<ServiceResponseCollection`1<TResponse>> ExecuteAsync(CancellationToken token);
    internal ServiceErrorHandling get_ErrorHandlingMode();
}
public class Microsoft.Exchange.WebServices.Data.MultiValueInsightContent : ComplexProperty {
    [CompilerGeneratedAttribute]
private InsightValueCollection <ItemList>k__BackingField;
    public InsightValueCollection ItemList { get; internal set; }
    [CompilerGeneratedAttribute]
public InsightValueCollection get_ItemList();
    [CompilerGeneratedAttribute]
internal void set_ItemList(InsightValueCollection value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
public class Microsoft.Exchange.WebServices.Data.NameResolution : object {
    private NameResolutionCollection owner;
    private EmailAddress mailbox;
    private Contact contact;
    public EmailAddress Mailbox { get; }
    public Contact Contact { get; }
    internal NameResolution(NameResolutionCollection owner);
    internal void LoadFromXml(EwsServiceXmlReader reader);
    public EmailAddress get_Mailbox();
    public Contact get_Contact();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Exchange.WebServices.Data.NameResolutionCollection : object {
    private ExchangeService service;
    private bool includesAllResolutions;
    private List`1<NameResolution> items;
    internal ExchangeService Session { get; }
    public int Count { get; }
    public bool IncludesAllResolutions { get; }
    public NameResolution Item { get; }
    internal NameResolutionCollection(ExchangeService service);
    internal void LoadFromXml(EwsServiceXmlReader reader);
    internal ExchangeService get_Session();
    public int get_Count();
    public bool get_IncludesAllResolutions();
    public NameResolution get_Item(int index);
    public sealed virtual IEnumerator`1<NameResolution> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.Exchange.WebServices.Data.NoEndRecurrenceRange : RecurrenceRange {
    internal string XmlElementName { get; }
    public NoEndRecurrenceRange(DateTime startDate);
    internal virtual string get_XmlElementName();
    internal virtual void SetupRecurrence(Recurrence recurrence);
}
public class Microsoft.Exchange.WebServices.Data.NonIndexableItem : object {
    [CompilerGeneratedAttribute]
private ItemId <ItemId>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemIndexError <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPartiallyIndexed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPermanentFailure>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AttemptCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastAttemptTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AdditionalInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SortValue>k__BackingField;
    public ItemId ItemId { get; public set; }
    public ItemIndexError ErrorCode { get; public set; }
    public string ErrorDescription { get; public set; }
    public bool IsPartiallyIndexed { get; public set; }
    public bool IsPermanentFailure { get; public set; }
    public int AttemptCount { get; public set; }
    public Nullable`1<DateTime> LastAttemptTime { get; public set; }
    public string AdditionalInfo { get; public set; }
    public string SortValue { get; public set; }
    [CompilerGeneratedAttribute]
public ItemId get_ItemId();
    [CompilerGeneratedAttribute]
public void set_ItemId(ItemId value);
    [CompilerGeneratedAttribute]
public ItemIndexError get_ErrorCode();
    [CompilerGeneratedAttribute]
public void set_ErrorCode(ItemIndexError value);
    [CompilerGeneratedAttribute]
public string get_ErrorDescription();
    [CompilerGeneratedAttribute]
public void set_ErrorDescription(string value);
    [CompilerGeneratedAttribute]
public bool get_IsPartiallyIndexed();
    [CompilerGeneratedAttribute]
public void set_IsPartiallyIndexed(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPermanentFailure();
    [CompilerGeneratedAttribute]
public void set_IsPermanentFailure(bool value);
    [CompilerGeneratedAttribute]
public int get_AttemptCount();
    [CompilerGeneratedAttribute]
public void set_AttemptCount(int value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_LastAttemptTime();
    [CompilerGeneratedAttribute]
public void set_LastAttemptTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_AdditionalInfo();
    [CompilerGeneratedAttribute]
public void set_AdditionalInfo(string value);
    [CompilerGeneratedAttribute]
public string get_SortValue();
    [CompilerGeneratedAttribute]
public void set_SortValue(string value);
    internal static NonIndexableItem LoadFromXml(EwsServiceXmlReader reader);
}
public class Microsoft.Exchange.WebServices.Data.NonIndexableItemDetailsResult : object {
    [CompilerGeneratedAttribute]
private NonIndexableItem[] <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private FailedSearchMailbox[] <FailedMailboxes>k__BackingField;
    public NonIndexableItem[] Items { get; public set; }
    public FailedSearchMailbox[] FailedMailboxes { get; public set; }
    internal static NonIndexableItemDetailsResult LoadFromXml(EwsServiceXmlReader reader);
    [CompilerGeneratedAttribute]
public NonIndexableItem[] get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(NonIndexableItem[] value);
    [CompilerGeneratedAttribute]
public FailedSearchMailbox[] get_FailedMailboxes();
    [CompilerGeneratedAttribute]
public void set_FailedMailboxes(FailedSearchMailbox[] value);
}
public abstract class Microsoft.Exchange.WebServices.Data.NonIndexableItemParameters : object {
    [CompilerGeneratedAttribute]
private String[] <Mailboxes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SearchArchiveOnly>k__BackingField;
    public String[] Mailboxes { get; public set; }
    public bool SearchArchiveOnly { get; public set; }
    [CompilerGeneratedAttribute]
public String[] get_Mailboxes();
    [CompilerGeneratedAttribute]
public void set_Mailboxes(String[] value);
    [CompilerGeneratedAttribute]
public bool get_SearchArchiveOnly();
    [CompilerGeneratedAttribute]
public void set_SearchArchiveOnly(bool value);
}
public class Microsoft.Exchange.WebServices.Data.NonIndexableItemStatistic : object {
    [CompilerGeneratedAttribute]
private string <Mailbox>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ItemCount>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    public string Mailbox { get; public set; }
    public long ItemCount { get; public set; }
    public string ErrorMessage { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Mailbox();
    [CompilerGeneratedAttribute]
public void set_Mailbox(string value);
    [CompilerGeneratedAttribute]
public long get_ItemCount();
    [CompilerGeneratedAttribute]
public void set_ItemCount(long value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
    internal static List`1<NonIndexableItemStatistic> LoadFromXml(EwsServiceXmlReader reader);
}
public class Microsoft.Exchange.WebServices.Data.NormalizedBody : ComplexProperty {
    private BodyType bodyType;
    private string text;
    private bool isTruncated;
    public BodyType BodyType { get; internal set; }
    public string Text { get; internal set; }
    public bool IsTruncated { get; internal set; }
    public static string op_Implicit(NormalizedBody messageBody);
    internal virtual void ReadAttributesFromXml(EwsServiceXmlReader reader);
    internal virtual void ReadTextValueFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    public BodyType get_BodyType();
    internal void set_BodyType(BodyType value);
    public string get_Text();
    internal void set_Text(string value);
    public bool get_IsTruncated();
    internal void set_IsTruncated(bool value);
    public virtual string ToString();
}
public abstract class Microsoft.Exchange.WebServices.Data.NotificationEvent : object {
    private EventType eventType;
    private DateTime timestamp;
    private FolderId parentFolderId;
    private FolderId oldParentFolderId;
    public EventType EventType { get; }
    public DateTime TimeStamp { get; }
    public FolderId ParentFolderId { get; internal set; }
    public FolderId OldParentFolderId { get; internal set; }
    internal NotificationEvent(EventType eventType, DateTime timestamp);
    internal virtual void InternalLoadFromXml(EwsServiceXmlReader reader);
    internal void LoadFromXml(EwsServiceXmlReader reader, string xmlElementName);
    public EventType get_EventType();
    public DateTime get_TimeStamp();
    public FolderId get_ParentFolderId();
    internal void set_ParentFolderId(FolderId value);
    public FolderId get_OldParentFolderId();
    internal void set_OldParentFolderId(FolderId value);
}
public class Microsoft.Exchange.WebServices.Data.NotificationEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private StreamingSubscription <Subscription>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<NotificationEvent> <Events>k__BackingField;
    public StreamingSubscription Subscription { get; internal set; }
    public IEnumerable`1<NotificationEvent> Events { get; internal set; }
    internal NotificationEventArgs(StreamingSubscription subscription, IEnumerable`1<NotificationEvent> events);
    [CompilerGeneratedAttribute]
public StreamingSubscription get_Subscription();
    [CompilerGeneratedAttribute]
internal void set_Subscription(StreamingSubscription value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<NotificationEvent> get_Events();
    [CompilerGeneratedAttribute]
internal void set_Events(IEnumerable`1<NotificationEvent> value);
}
internal class Microsoft.Exchange.WebServices.Data.NumberedRecurrenceRange : RecurrenceRange {
    private Nullable`1<int> numberOfOccurrences;
    internal string XmlElementName { get; }
    public Nullable`1<int> NumberOfOccurrences { get; public set; }
    public NumberedRecurrenceRange(DateTime startDate, Nullable`1<int> numberOfOccurrences);
    internal virtual string get_XmlElementName();
    internal virtual void SetupRecurrence(Recurrence recurrence);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    public Nullable`1<int> get_NumberOfOccurrences();
    public void set_NumberOfOccurrences(Nullable`1<int> value);
}
public class Microsoft.Exchange.WebServices.Data.OAuthCredentials : ExchangeCredentials {
    private static string BearerAuthenticationType;
    private static Regex validTokenPattern;
    private string token;
    private ICredentials credentials;
    public OAuthCredentials(string token);
    internal OAuthCredentials(string token, bool verbatim);
    public OAuthCredentials(ICredentials credentials);
    private static OAuthCredentials();
    internal virtual void PrepareWebRequest(IEwsHttpWebRequest request);
}
public class Microsoft.Exchange.WebServices.Data.OccurrenceInfo : ComplexProperty {
    private ItemId itemId;
    private DateTime start;
    private DateTime end;
    private DateTime originalStart;
    public ItemId ItemId { get; }
    public DateTime Start { get; }
    public DateTime End { get; }
    public DateTime OriginalStart { get; }
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    public ItemId get_ItemId();
    public DateTime get_Start();
    public DateTime get_End();
    public DateTime get_OriginalStart();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.OccurrenceInfoCollection : ComplexPropertyCollection`1<OccurrenceInfo> {
    internal virtual OccurrenceInfo CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(OccurrenceInfo complexProperty);
}
public enum Microsoft.Exchange.WebServices.Data.OffsetBasePoint : Enum {
    public int value__;
    public static OffsetBasePoint Beginning;
    public static OffsetBasePoint End;
}
public enum Microsoft.Exchange.WebServices.Data.OnlineMeetingAccessLevel : Enum {
    public int value__;
    public static OnlineMeetingAccessLevel Locked;
    public static OnlineMeetingAccessLevel Invited;
    public static OnlineMeetingAccessLevel Internal;
    public static OnlineMeetingAccessLevel Everyone;
}
public class Microsoft.Exchange.WebServices.Data.OnlineMeetingSettings : ComplexProperty {
    private LobbyBypass lobbyBypass;
    private OnlineMeetingAccessLevel accessLevel;
    private Presenters presenters;
    public LobbyBypass LobbyBypass { get; public set; }
    public OnlineMeetingAccessLevel AccessLevel { get; public set; }
    public Presenters Presenters { get; public set; }
    internal OnlineMeetingSettings(LobbyBypass lobbyBypass, OnlineMeetingAccessLevel accessLevel, Presenters presenters);
    internal OnlineMeetingSettings(OnlineMeetingSettings onlineMeetingSettings);
    public LobbyBypass get_LobbyBypass();
    public void set_LobbyBypass(LobbyBypass value);
    public OnlineMeetingAccessLevel get_AccessLevel();
    public void set_AccessLevel(OnlineMeetingAccessLevel value);
    public Presenters get_Presenters();
    public void set_Presenters(Presenters value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
}
public enum Microsoft.Exchange.WebServices.Data.OofExternalAudience : Enum {
    public int value__;
    public static OofExternalAudience None;
    public static OofExternalAudience Known;
    public static OofExternalAudience All;
}
public class Microsoft.Exchange.WebServices.Data.OofReply : object {
    private string culture;
    private string message;
    public string Culture { get; public set; }
    public string Message { get; public set; }
    public OofReply(string message);
    internal static void WriteEmptyReplyToXml(EwsServiceXmlWriter writer, string xmlElementName);
    public static OofReply op_Implicit(string message);
    public static string op_Implicit(OofReply oofReply);
    internal void LoadFromXml(EwsServiceXmlReader reader, string xmlElementName);
    internal void WriteToXml(EwsServiceXmlWriter writer, string xmlElementName);
    public virtual string ToString();
    public string get_Culture();
    public void set_Culture(string value);
    public string get_Message();
    public void set_Message(string value);
}
public class Microsoft.Exchange.WebServices.Data.OofSettings : ComplexProperty {
    private OofState state;
    private OofExternalAudience externalAudience;
    private OofExternalAudience allowExternalOof;
    private TimeWindow duration;
    private OofReply internalReply;
    private OofReply externalReply;
    public OofState State { get; public set; }
    public OofExternalAudience ExternalAudience { get; public set; }
    public TimeWindow Duration { get; public set; }
    public OofReply InternalReply { get; public set; }
    public OofReply ExternalReply { get; public set; }
    public OofExternalAudience AllowExternalOof { get; internal set; }
    private void SerializeOofReply(OofReply oofReply, EwsServiceXmlWriter writer, string xmlElementName);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    public OofState get_State();
    public void set_State(OofState value);
    public OofExternalAudience get_ExternalAudience();
    public void set_ExternalAudience(OofExternalAudience value);
    public TimeWindow get_Duration();
    public void set_Duration(TimeWindow value);
    public OofReply get_InternalReply();
    public void set_InternalReply(OofReply value);
    public OofReply get_ExternalReply();
    public void set_ExternalReply(OofReply value);
    public OofExternalAudience get_AllowExternalOof();
    internal void set_AllowExternalOof(OofExternalAudience value);
    private sealed virtual override void Microsoft.Exchange.WebServices.Data.ISelfValidate.Validate();
}
public enum Microsoft.Exchange.WebServices.Data.OofState : Enum {
    public int value__;
    public static OofState Disabled;
    public static OofState Enabled;
    public static OofState Scheduled;
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Exchange.WebServices.Data.OrderByCollection : object {
    private List`1<KeyValuePair`2<PropertyDefinitionBase, SortDirection>> propDefSortOrderPairList;
    public int Count { get; }
    public KeyValuePair`2<PropertyDefinitionBase, SortDirection> Item { get; }
    public void Add(PropertyDefinitionBase propertyDefinition, SortDirection sortDirection);
    public void Clear();
    internal bool Contains(PropertyDefinitionBase propertyDefinition);
    public int get_Count();
    public bool Remove(PropertyDefinitionBase propertyDefinition);
    public void RemoveAt(int index);
    public bool TryGetValue(PropertyDefinitionBase propertyDefinition, SortDirection& sortDirection);
    internal void WriteToXml(EwsServiceXmlWriter writer, string xmlElementName);
    public KeyValuePair`2<PropertyDefinitionBase, SortDirection> get_Item(int index);
    public sealed virtual IEnumerator`1<KeyValuePair`2<PropertyDefinitionBase, SortDirection>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.Exchange.WebServices.Data.OutOfOfficeInsightValue : InsightValue {
    private DateTime startTime;
    private DateTime endTime;
    private string culture;
    private string message;
    public DateTime StartTime { get; }
    public DateTime EndTime { get; }
    public string Culture { get; }
    public string Message { get; }
    public DateTime get_StartTime();
    public DateTime get_EndTime();
    public string get_Culture();
    public string get_Message();
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.Exchange.WebServices.Data.PagedView : ViewBase {
    private int pageSize;
    private OffsetBasePoint offsetBasePoint;
    private int offset;
    public int PageSize { get; public set; }
    public OffsetBasePoint OffsetBasePoint { get; public set; }
    public int Offset { get; public set; }
    internal PagedView(int pageSize);
    internal PagedView(int pageSize, int offset);
    internal PagedView(int pageSize, int offset, OffsetBasePoint offsetBasePoint);
    internal virtual void InternalWriteViewToXml(EwsServiceXmlWriter writer);
    internal virtual Nullable`1<int> GetMaxEntriesReturned();
    internal virtual void InternalWriteSearchSettingsToXml(EwsServiceXmlWriter writer, Grouping groupBy);
    internal virtual void WriteOrderByToXml(EwsServiceXmlWriter writer);
    internal virtual void InternalValidate(ServiceRequestBase request);
    public int get_PageSize();
    public void set_PageSize(int value);
    public OffsetBasePoint get_OffsetBasePoint();
    public void set_OffsetBasePoint(OffsetBasePoint value);
    public int get_Offset();
    public void set_Offset(int value);
}
internal class Microsoft.Exchange.WebServices.Data.PartnerTokenCredentials : WSSecurityBasedCredentials {
    private static string WsSecuritySymmetricKeyPathSuffix;
    private KeyInfoNode keyInfoNode;
    internal bool NeedSignature { get; }
    internal PartnerTokenCredentials(string securityToken, string securityTokenReference);
    internal virtual void PrepareWebRequest(IEwsHttpWebRequest request);
    internal virtual Uri AdjustUrl(Uri url);
    internal virtual bool get_NeedSignature();
    internal virtual void Sign(MemoryStream memoryStream);
}
public class Microsoft.Exchange.WebServices.Data.PeopleIndexedItemView : PagedView {
    private OrderByCollection orderBy;
    private Nullable`1<ViewFilter> viewFilter;
    public OrderByCollection OrderBy { get; }
    public Nullable`1<ViewFilter> ViewFilter { get; public set; }
    public PeopleIndexedItemView(int pageSize, int offset, OffsetBasePoint offsetBasePoint);
    public PeopleIndexedItemView(int pageSize);
    public PeopleIndexedItemView(int pageSize, int offset);
    internal virtual ServiceObjectType GetServiceObjectType();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual string GetViewXmlElementName();
    internal virtual void InternalValidate(ServiceRequestBase request);
    internal virtual void InternalWriteSearchSettingsToXml(EwsServiceXmlWriter writer, Grouping groupBy);
    internal virtual void WriteOrderByToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteToXml(EwsServiceXmlWriter writer, Grouping groupBy);
    public OrderByCollection get_OrderBy();
    public Nullable`1<ViewFilter> get_ViewFilter();
    public void set_ViewFilter(Nullable`1<ViewFilter> value);
}
public class Microsoft.Exchange.WebServices.Data.PeopleQueryContextKeys : object {
    public static string TopicQuery;
    public static string ClientSessionId;
    public static string ClientFlightNumber;
    public static string UserAgent;
    public static string AppName;
    public static string AppScenario;
    private static PeopleQueryContextKeys();
}
public class Microsoft.Exchange.WebServices.Data.PeopleQueryMode : object {
    private static string AutoSourceString;
    private static PeopleQueryMode autoInstance;
    internal HashSet`1<string> Sources;
    public static PeopleQueryMode Auto { get; }
    public PeopleQueryMode(IEnumerable`1<string> sources);
    private static PeopleQueryMode();
    public static PeopleQueryMode get_Auto();
}
public class Microsoft.Exchange.WebServices.Data.PeopleQueryResults : object {
    [CompilerGeneratedAttribute]
private IList`1<Persona> <Personas>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TransactionId>k__BackingField;
    public IList`1<Persona> Personas { get; internal set; }
    public string TransactionId { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual IList`1<Persona> get_Personas();
    [CompilerGeneratedAttribute]
internal void set_Personas(IList`1<Persona> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TransactionId();
    [CompilerGeneratedAttribute]
internal void set_TransactionId(string value);
}
public class Microsoft.Exchange.WebServices.Data.PeopleQuerySource : object {
    public static string Mailbox;
    public static string Directory;
    private static PeopleQuerySource();
}
public enum Microsoft.Exchange.WebServices.Data.PermissionScope : Enum {
    public int value__;
    public static PermissionScope None;
    public static PermissionScope Owned;
    public static PermissionScope All;
}
internal class Microsoft.Exchange.WebServices.Data.PermissionSetPropertyDefinition : ComplexPropertyDefinitionBase {
    public Type Type { get; }
    internal PermissionSetPropertyDefinition(string xmlElementName, string uri, PropertyDefinitionFlags flags, ExchangeVersion version);
    internal virtual ComplexProperty CreatePropertyInstance(ServiceObject owner);
    public virtual Type get_Type();
}
public class Microsoft.Exchange.WebServices.Data.Person : ComplexProperty {
    [CompilerGeneratedAttribute]
private string <EmailAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private PersonInsightCollection <Insights>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FullName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GivenName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Surname>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PhoneNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SMSNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FacebookProfileLink>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LinkedInProfileLink>k__BackingField;
    [CompilerGeneratedAttribute]
private SkillInsightValueCollection <Skills>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProfessionalBiography>k__BackingField;
    [CompilerGeneratedAttribute]
private ProfileInsightValueCollection <ManagementChain>k__BackingField;
    [CompilerGeneratedAttribute]
private ProfileInsightValueCollection <DirectReports>k__BackingField;
    [CompilerGeneratedAttribute]
private ProfileInsightValueCollection <Peers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TeamSize>k__BackingField;
    [CompilerGeneratedAttribute]
private JobInsightValueCollection <CurrentJob>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Birthday>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Hometown>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CurrentLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private CompanyInsightValueCollection <CompanyProfile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Office>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Headline>k__BackingField;
    [CompilerGeneratedAttribute]
private ProfileInsightValueCollection <MutualConnections>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private ProfileInsightValue <MutualManager>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Department>k__BackingField;
    [CompilerGeneratedAttribute]
private UserProfilePicture <UserProfilePicture>k__BackingField;
    public string EmailAddress { get; internal set; }
    public PersonInsightCollection Insights { get; internal set; }
    public string FullName { get; internal set; }
    public string DisplayName { get; internal set; }
    public string GivenName { get; internal set; }
    public string Surname { get; internal set; }
    public string PhoneNumber { get; internal set; }
    public string SMSNumber { get; internal set; }
    public string FacebookProfileLink { get; internal set; }
    public string LinkedInProfileLink { get; internal set; }
    public SkillInsightValueCollection Skills { get; internal set; }
    public string ProfessionalBiography { get; internal set; }
    public ProfileInsightValueCollection ManagementChain { get; internal set; }
    public ProfileInsightValueCollection DirectReports { get; internal set; }
    public ProfileInsightValueCollection Peers { get; internal set; }
    public string TeamSize { get; internal set; }
    public JobInsightValueCollection CurrentJob { get; internal set; }
    public string Birthday { get; internal set; }
    public string Hometown { get; internal set; }
    public string CurrentLocation { get; internal set; }
    public CompanyInsightValueCollection CompanyProfile { get; internal set; }
    public string Office { get; internal set; }
    public string Headline { get; internal set; }
    public ProfileInsightValueCollection MutualConnections { get; internal set; }
    public string Title { get; internal set; }
    public ProfileInsightValue MutualManager { get; internal set; }
    public string Alias { get; internal set; }
    public string Department { get; internal set; }
    public UserProfilePicture UserProfilePicture { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_EmailAddress();
    [CompilerGeneratedAttribute]
internal void set_EmailAddress(string value);
    [CompilerGeneratedAttribute]
public PersonInsightCollection get_Insights();
    [CompilerGeneratedAttribute]
internal void set_Insights(PersonInsightCollection value);
    [CompilerGeneratedAttribute]
public string get_FullName();
    [CompilerGeneratedAttribute]
internal void set_FullName(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
internal void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_GivenName();
    [CompilerGeneratedAttribute]
internal void set_GivenName(string value);
    [CompilerGeneratedAttribute]
public string get_Surname();
    [CompilerGeneratedAttribute]
internal void set_Surname(string value);
    [CompilerGeneratedAttribute]
public string get_PhoneNumber();
    [CompilerGeneratedAttribute]
internal void set_PhoneNumber(string value);
    [CompilerGeneratedAttribute]
public string get_SMSNumber();
    [CompilerGeneratedAttribute]
internal void set_SMSNumber(string value);
    [CompilerGeneratedAttribute]
public string get_FacebookProfileLink();
    [CompilerGeneratedAttribute]
internal void set_FacebookProfileLink(string value);
    [CompilerGeneratedAttribute]
public string get_LinkedInProfileLink();
    [CompilerGeneratedAttribute]
internal void set_LinkedInProfileLink(string value);
    [CompilerGeneratedAttribute]
public SkillInsightValueCollection get_Skills();
    [CompilerGeneratedAttribute]
internal void set_Skills(SkillInsightValueCollection value);
    [CompilerGeneratedAttribute]
public string get_ProfessionalBiography();
    [CompilerGeneratedAttribute]
internal void set_ProfessionalBiography(string value);
    [CompilerGeneratedAttribute]
public ProfileInsightValueCollection get_ManagementChain();
    [CompilerGeneratedAttribute]
internal void set_ManagementChain(ProfileInsightValueCollection value);
    [CompilerGeneratedAttribute]
public ProfileInsightValueCollection get_DirectReports();
    [CompilerGeneratedAttribute]
internal void set_DirectReports(ProfileInsightValueCollection value);
    [CompilerGeneratedAttribute]
public ProfileInsightValueCollection get_Peers();
    [CompilerGeneratedAttribute]
internal void set_Peers(ProfileInsightValueCollection value);
    [CompilerGeneratedAttribute]
public string get_TeamSize();
    [CompilerGeneratedAttribute]
internal void set_TeamSize(string value);
    [CompilerGeneratedAttribute]
public JobInsightValueCollection get_CurrentJob();
    [CompilerGeneratedAttribute]
internal void set_CurrentJob(JobInsightValueCollection value);
    [CompilerGeneratedAttribute]
public string get_Birthday();
    [CompilerGeneratedAttribute]
internal void set_Birthday(string value);
    [CompilerGeneratedAttribute]
public string get_Hometown();
    [CompilerGeneratedAttribute]
internal void set_Hometown(string value);
    [CompilerGeneratedAttribute]
public string get_CurrentLocation();
    [CompilerGeneratedAttribute]
internal void set_CurrentLocation(string value);
    [CompilerGeneratedAttribute]
public CompanyInsightValueCollection get_CompanyProfile();
    [CompilerGeneratedAttribute]
internal void set_CompanyProfile(CompanyInsightValueCollection value);
    [CompilerGeneratedAttribute]
public string get_Office();
    [CompilerGeneratedAttribute]
internal void set_Office(string value);
    [CompilerGeneratedAttribute]
public string get_Headline();
    [CompilerGeneratedAttribute]
internal void set_Headline(string value);
    [CompilerGeneratedAttribute]
public ProfileInsightValueCollection get_MutualConnections();
    [CompilerGeneratedAttribute]
internal void set_MutualConnections(ProfileInsightValueCollection value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
internal void set_Title(string value);
    [CompilerGeneratedAttribute]
public ProfileInsightValue get_MutualManager();
    [CompilerGeneratedAttribute]
internal void set_MutualManager(ProfileInsightValue value);
    [CompilerGeneratedAttribute]
public string get_Alias();
    [CompilerGeneratedAttribute]
internal void set_Alias(string value);
    [CompilerGeneratedAttribute]
public string get_Department();
    [CompilerGeneratedAttribute]
internal void set_Department(string value);
    [CompilerGeneratedAttribute]
public UserProfilePicture get_UserProfilePicture();
    [CompilerGeneratedAttribute]
internal void set_UserProfilePicture(UserProfilePicture value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
[AttachableAttribute]
[ServiceObjectDefinitionAttribute("Persona")]
public class Microsoft.Exchange.WebServices.Data.Persona : Item {
    public ItemId PersonaId { get; public set; }
    public string PersonaType { get; public set; }
    public Nullable`1<DateTime> CreationTime { get; public set; }
    public string DisplayNameFirstLastHeader { get; public set; }
    public string DisplayNameLastFirstHeader { get; public set; }
    public string DisplayName { get; public set; }
    public string DisplayNameFirstLast { get; public set; }
    public string DisplayNameLastFirst { get; public set; }
    public string FileAs { get; public set; }
    public string Generation { get; public set; }
    public string DisplayNamePrefix { get; public set; }
    public string GivenName { get; public set; }
    public string Surname { get; public set; }
    public string Title { get; public set; }
    public string CompanyName { get; public set; }
    public PersonaEmailAddress EmailAddress { get; public set; }
    public PersonaEmailAddressCollection EmailAddresses { get; public set; }
    public string ImAddress { get; public set; }
    public string HomeCity { get; public set; }
    public string WorkCity { get; public set; }
    public string Alias { get; public set; }
    public int RelevanceScore { get; public set; }
    public AttributionCollection Attributions { get; public set; }
    public AttributedStringCollection OfficeLocations { get; public set; }
    public AttributedStringCollection ImAddresses { get; public set; }
    public AttributedStringCollection Departments { get; public set; }
    public AttributedStringCollection ThirdPartyPhotoUrls { get; public set; }
    public Persona(ExchangeService service);
    public static Task`1<Persona> Bind(ExchangeService service, ItemId id, PropertySet propertySet, CancellationToken token);
    public static Task`1<Persona> Bind(ExchangeService service, ItemId id);
    internal virtual ServiceObjectSchema GetSchema();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal virtual PropertyDefinition GetIdPropertyDefinition();
    internal virtual void Validate();
    public ItemId get_PersonaId();
    public void set_PersonaId(ItemId value);
    public string get_PersonaType();
    public void set_PersonaType(string value);
    public Nullable`1<DateTime> get_CreationTime();
    public void set_CreationTime(Nullable`1<DateTime> value);
    public string get_DisplayNameFirstLastHeader();
    public void set_DisplayNameFirstLastHeader(string value);
    public string get_DisplayNameLastFirstHeader();
    public void set_DisplayNameLastFirstHeader(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public string get_DisplayNameFirstLast();
    public void set_DisplayNameFirstLast(string value);
    public string get_DisplayNameLastFirst();
    public void set_DisplayNameLastFirst(string value);
    public string get_FileAs();
    public void set_FileAs(string value);
    public string get_Generation();
    public void set_Generation(string value);
    public string get_DisplayNamePrefix();
    public void set_DisplayNamePrefix(string value);
    public string get_GivenName();
    public void set_GivenName(string value);
    public string get_Surname();
    public void set_Surname(string value);
    public string get_Title();
    public void set_Title(string value);
    public string get_CompanyName();
    public void set_CompanyName(string value);
    public PersonaEmailAddress get_EmailAddress();
    public void set_EmailAddress(PersonaEmailAddress value);
    public PersonaEmailAddressCollection get_EmailAddresses();
    public void set_EmailAddresses(PersonaEmailAddressCollection value);
    public string get_ImAddress();
    public void set_ImAddress(string value);
    public string get_HomeCity();
    public void set_HomeCity(string value);
    public string get_WorkCity();
    public void set_WorkCity(string value);
    public string get_Alias();
    public void set_Alias(string value);
    public int get_RelevanceScore();
    public void set_RelevanceScore(int value);
    public AttributionCollection get_Attributions();
    public void set_Attributions(AttributionCollection value);
    public AttributedStringCollection get_OfficeLocations();
    public void set_OfficeLocations(AttributedStringCollection value);
    public AttributedStringCollection get_ImAddresses();
    public void set_ImAddresses(AttributedStringCollection value);
    public AttributedStringCollection get_Departments();
    public void set_Departments(AttributedStringCollection value);
    public AttributedStringCollection get_ThirdPartyPhotoUrls();
    public void set_ThirdPartyPhotoUrls(AttributedStringCollection value);
}
public class Microsoft.Exchange.WebServices.Data.PersonaEmailAddress : ComplexProperty {
    [CompilerGeneratedAttribute]
private string <OriginalDisplayName>k__BackingField;
    private EmailAddress _emailAddress;
    public string Name { get; public set; }
    public string Address { get; public set; }
    public string RoutingType { get; public set; }
    public Nullable`1<MailboxType> MailboxType { get; public set; }
    public ItemId Id { get; public set; }
    public string OriginalDisplayName { get; public set; }
    public PersonaEmailAddress(string smtpAddress);
    public PersonaEmailAddress(string name, string smtpAddress);
    public string get_Name();
    public void set_Name(string value);
    public string get_Address();
    public void set_Address(string value);
    public string get_RoutingType();
    public void set_RoutingType(string value);
    public Nullable`1<MailboxType> get_MailboxType();
    public void set_MailboxType(Nullable`1<MailboxType> value);
    public ItemId get_Id();
    public void set_Id(ItemId value);
    [CompilerGeneratedAttribute]
public string get_OriginalDisplayName();
    [CompilerGeneratedAttribute]
public void set_OriginalDisplayName(string value);
    public static PersonaEmailAddress op_Implicit(string smtpAddress);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    private sealed virtual override string Microsoft.Exchange.WebServices.Data.ISearchStringProvider.GetSearchString();
    public virtual string ToString();
}
public class Microsoft.Exchange.WebServices.Data.PersonaEmailAddressCollection : ComplexPropertyCollection`1<PersonaEmailAddress> {
    private string collectionItemXmlElementName;
    internal PersonaEmailAddressCollection(string collectionItemXmlElementName);
    public void Add(PersonaEmailAddress emailAddress);
    public void AddRange(IEnumerable`1<PersonaEmailAddress> emailAddresses);
    public PersonaEmailAddress Add(string smtpAddress);
    public void AddRange(IEnumerable`1<string> smtpAddresses);
    public PersonaEmailAddress Add(string name, string smtpAddress);
    public void Clear();
    public void RemoveAt(int index);
    public bool Remove(PersonaEmailAddress personaEmailAddress);
    internal virtual PersonaEmailAddress CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(PersonaEmailAddress personaEmailAddress);
    internal virtual bool ShouldWriteToRequest();
}
public class Microsoft.Exchange.WebServices.Data.PersonaId : ServiceId {
    public PersonaId(string uniqueId);
    public static PersonaId op_Implicit(string uniqueId);
    public static string op_Implicit(PersonaId PersonaId);
    internal virtual string GetXmlElementName();
    public virtual string ToString();
}
public class Microsoft.Exchange.WebServices.Data.PersonaPostalAddress : ComplexProperty {
    private string street;
    private string city;
    private string state;
    private string country;
    private string postalCode;
    private string postOfficeBox;
    private string type;
    private Nullable`1<double> latitude;
    private Nullable`1<double> longitude;
    private Nullable`1<double> accuracy;
    private Nullable`1<double> altitude;
    private Nullable`1<double> altitudeAccuracy;
    private string formattedAddress;
    private string uri;
    private LocationSource source;
    public string Street { get; public set; }
    public string City { get; public set; }
    public string State { get; public set; }
    public string Country { get; public set; }
    public string PostalCode { get; public set; }
    public string PostOfficeBox { get; public set; }
    public string Type { get; public set; }
    public LocationSource Source { get; public set; }
    public string Uri { get; public set; }
    public Nullable`1<double> Latitude { get; public set; }
    public Nullable`1<double> Longitude { get; public set; }
    public Nullable`1<double> Accuracy { get; public set; }
    public Nullable`1<double> Altitude { get; public set; }
    public Nullable`1<double> AltitudeAccuracy { get; public set; }
    public string FormattedAddress { get; public set; }
    public PersonaPostalAddress(string street, string city, string state, string country, string postalCode, string postOfficeBox, LocationSource locationSource, string locationUri, string formattedAddress, double latitude, double longitude, double accuracy, double altitude, double altitudeAccuracy);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal void LoadFromXml(EwsServiceXmlReader reader);
    public string get_Street();
    public void set_Street(string value);
    public string get_City();
    public void set_City(string value);
    public string get_State();
    public void set_State(string value);
    public string get_Country();
    public void set_Country(string value);
    public string get_PostalCode();
    public void set_PostalCode(string value);
    public string get_PostOfficeBox();
    public void set_PostOfficeBox(string value);
    public string get_Type();
    public void set_Type(string value);
    public LocationSource get_Source();
    public void set_Source(LocationSource value);
    public string get_Uri();
    public void set_Uri(string value);
    public Nullable`1<double> get_Latitude();
    public void set_Latitude(Nullable`1<double> value);
    public Nullable`1<double> get_Longitude();
    public void set_Longitude(Nullable`1<double> value);
    public Nullable`1<double> get_Accuracy();
    public void set_Accuracy(Nullable`1<double> value);
    public Nullable`1<double> get_Altitude();
    public void set_Altitude(Nullable`1<double> value);
    public Nullable`1<double> get_AltitudeAccuracy();
    public void set_AltitudeAccuracy(Nullable`1<double> value);
    public string get_FormattedAddress();
    public void set_FormattedAddress(string value);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal void WriteToXml(EwsServiceXmlWriter writer);
}
[SchemaAttribute]
public class Microsoft.Exchange.WebServices.Data.PersonaSchema : ItemSchema {
    public static PropertyDefinition PersonaId;
    public static PropertyDefinition PersonaType;
    public static PropertyDefinition CreationTime;
    public static PropertyDefinition DisplayNameFirstLastHeader;
    public static PropertyDefinition DisplayNameLastFirstHeader;
    public static PropertyDefinition DisplayName;
    public static PropertyDefinition DisplayNameFirstLast;
    public static PropertyDefinition DisplayNameLastFirst;
    public static PropertyDefinition FileAs;
    public static PropertyDefinition Generation;
    public static PropertyDefinition DisplayNamePrefix;
    public static PropertyDefinition GivenName;
    public static PropertyDefinition Surname;
    public static PropertyDefinition Title;
    public static PropertyDefinition CompanyName;
    public static PropertyDefinition EmailAddress;
    public static PropertyDefinition EmailAddresses;
    public static PropertyDefinition ImAddress;
    public static PropertyDefinition HomeCity;
    public static PropertyDefinition WorkCity;
    public static PropertyDefinition Alias;
    public static PropertyDefinition RelevanceScore;
    public static PropertyDefinition Attributions;
    public static PropertyDefinition OfficeLocations;
    public static PropertyDefinition ImAddresses;
    public static PropertyDefinition Departments;
    public static PropertyDefinition ThirdPartyPhotoUrls;
    internal static PersonaSchema Instance;
    private static PersonaSchema();
    internal virtual void RegisterProperties();
}
public class Microsoft.Exchange.WebServices.Data.PersonInsight : ComplexProperty {
    [CompilerGeneratedAttribute]
private string <InsightType>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Rank>k__BackingField;
    [CompilerGeneratedAttribute]
private ComplexProperty <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private InsightValueCollection <ItemList>k__BackingField;
    public string InsightType { get; internal set; }
    public double Rank { get; internal set; }
    public ComplexProperty Content { get; internal set; }
    public InsightValueCollection ItemList { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_InsightType();
    [CompilerGeneratedAttribute]
internal void set_InsightType(string value);
    [CompilerGeneratedAttribute]
public double get_Rank();
    [CompilerGeneratedAttribute]
internal void set_Rank(double value);
    [CompilerGeneratedAttribute]
public ComplexProperty get_Content();
    [CompilerGeneratedAttribute]
internal void set_Content(ComplexProperty value);
    [CompilerGeneratedAttribute]
public InsightValueCollection get_ItemList();
    [CompilerGeneratedAttribute]
internal void set_ItemList(InsightValueCollection value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    private void ReadItemList(EwsServiceXmlReader reader);
}
public class Microsoft.Exchange.WebServices.Data.PersonInsightCollection : ComplexPropertyCollection`1<PersonInsight> {
    private string collectionItemXmlElementName;
    internal PersonInsightCollection(string collectionItemXmlElementName);
    public void Add(PersonInsight insight);
    public void AddRange(IEnumerable`1<PersonInsight> insights);
    public void Clear();
    public void RemoveAt(int index);
    public bool Remove(PersonInsight insight);
    internal virtual PersonInsight CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(PersonInsight insight);
    internal virtual bool ShouldWriteToRequest();
}
public class Microsoft.Exchange.WebServices.Data.PhoneCall : ComplexProperty {
    private static string SuccessfulResponseText;
    private static int SuccessfulResponseCode;
    private ExchangeService service;
    private PhoneCallState state;
    private ConnectionFailureCause connectionFailureCause;
    private string sipResponseText;
    private int sipResponseCode;
    private PhoneCallId id;
    public PhoneCallState State { get; }
    public ConnectionFailureCause ConnectionFailureCause { get; }
    public string SIPResponseText { get; }
    public int SIPResponseCode { get; }
    internal PhoneCall(ExchangeService service);
    internal PhoneCall(ExchangeService service, PhoneCallId id);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.PhoneCall/<Refresh>d__10")]
public Task Refresh(CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.PhoneCall/<Disconnect>d__11")]
public Task Disconnect(CancellationToken token);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    public PhoneCallState get_State();
    public ConnectionFailureCause get_ConnectionFailureCause();
    public string get_SIPResponseText();
    public int get_SIPResponseCode();
}
internal class Microsoft.Exchange.WebServices.Data.PhoneCallId : ComplexProperty {
    private string id;
    internal string Id { get; internal set; }
    internal PhoneCallId(string id);
    internal virtual void ReadAttributesFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal void WriteToXml(EwsServiceXmlWriter writer);
    internal string get_Id();
    internal void set_Id(string value);
}
public enum Microsoft.Exchange.WebServices.Data.PhoneCallState : Enum {
    public int value__;
    public static PhoneCallState Idle;
    public static PhoneCallState Connecting;
    public static PhoneCallState Alerted;
    public static PhoneCallState Connected;
    public static PhoneCallState Disconnected;
    public static PhoneCallState Incoming;
    public static PhoneCallState Transferring;
    public static PhoneCallState Forwarding;
}
public class Microsoft.Exchange.WebServices.Data.PhoneEntity : ExtractedEntity {
    [CompilerGeneratedAttribute]
private string <OriginalPhoneString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PhoneString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    public string OriginalPhoneString { get; internal set; }
    public string PhoneString { get; internal set; }
    public string Type { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_OriginalPhoneString();
    [CompilerGeneratedAttribute]
internal void set_OriginalPhoneString(string value);
    [CompilerGeneratedAttribute]
public string get_PhoneString();
    [CompilerGeneratedAttribute]
internal void set_PhoneString(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
internal void set_Type(string value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.PhoneEntityCollection : ComplexPropertyCollection`1<PhoneEntity> {
    internal PhoneEntityCollection(IEnumerable`1<PhoneEntity> collection);
    internal virtual PhoneEntity CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(PhoneEntity complexProperty);
}
[DefaultMemberAttribute("Item")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.PhoneNumberDictionary : DictionaryProperty`2<PhoneNumberKey, PhoneNumberEntry> {
    public string Item { get; public set; }
    internal virtual string GetFieldURI();
    internal virtual PhoneNumberEntry CreateEntryInstance();
    public string get_Item(PhoneNumberKey key);
    public void set_Item(PhoneNumberKey key, string value);
    public bool TryGetValue(PhoneNumberKey key, String& phoneNumber);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.PhoneNumberEntry : DictionaryEntryProperty`1<PhoneNumberKey> {
    private string phoneNumber;
    public string PhoneNumber { get; public set; }
    internal PhoneNumberEntry(PhoneNumberKey key, string phoneNumber);
    internal virtual void ReadTextValueFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    public string get_PhoneNumber();
    public void set_PhoneNumber(string value);
}
public enum Microsoft.Exchange.WebServices.Data.PhoneNumberKey : Enum {
    public int value__;
    public static PhoneNumberKey AssistantPhone;
    public static PhoneNumberKey BusinessFax;
    public static PhoneNumberKey BusinessPhone;
    public static PhoneNumberKey BusinessPhone2;
    public static PhoneNumberKey Callback;
    public static PhoneNumberKey CarPhone;
    public static PhoneNumberKey CompanyMainPhone;
    public static PhoneNumberKey HomeFax;
    public static PhoneNumberKey HomePhone;
    public static PhoneNumberKey HomePhone2;
    public static PhoneNumberKey Isdn;
    public static PhoneNumberKey MobilePhone;
    public static PhoneNumberKey OtherFax;
    public static PhoneNumberKey OtherTelephone;
    public static PhoneNumberKey Pager;
    public static PhoneNumberKey PrimaryPhone;
    public static PhoneNumberKey RadioPhone;
    public static PhoneNumberKey Telex;
    public static PhoneNumberKey TtyTddPhone;
    public static PhoneNumberKey BusinessMobile;
    public static PhoneNumberKey IPPhone;
    public static PhoneNumberKey Mms;
    public static PhoneNumberKey Msn;
}
[DefaultMemberAttribute("Item")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.PhysicalAddressDictionary : DictionaryProperty`2<PhysicalAddressKey, PhysicalAddressEntry> {
    public PhysicalAddressEntry Item { get; public set; }
    internal virtual PhysicalAddressEntry CreateEntryInstance();
    public PhysicalAddressEntry get_Item(PhysicalAddressKey key);
    public void set_Item(PhysicalAddressKey key, PhysicalAddressEntry value);
    public bool TryGetValue(PhysicalAddressKey key, PhysicalAddressEntry& physicalAddress);
}
public class Microsoft.Exchange.WebServices.Data.PhysicalAddressEntry : DictionaryEntryProperty`1<PhysicalAddressKey> {
    private SimplePropertyBag`1<string> propertyBag;
    public string Street { get; public set; }
    public string City { get; public set; }
    public string State { get; public set; }
    public string CountryOrRegion { get; public set; }
    public string PostalCode { get; public set; }
    public string get_Street();
    public void set_Street(string value);
    public string get_City();
    public void set_City(string value);
    public string get_State();
    public void set_State(string value);
    public string get_CountryOrRegion();
    public void set_CountryOrRegion(string value);
    public string get_PostalCode();
    public void set_PostalCode(string value);
    internal virtual void ClearChangeLog();
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual bool WriteSetUpdateToXml(EwsServiceXmlWriter writer, ServiceObject ewsObject, string ownerDictionaryXmlElementName);
    internal virtual bool WriteDeleteUpdateToXml(EwsServiceXmlWriter writer, ServiceObject ewsObject);
    private static string GetFieldUri(string xmlElementName);
    private void PropertyBagChanged();
    private void InternalWriteDeleteFieldToXml(EwsServiceXmlWriter writer, ServiceObject ewsObject, string fieldXmlElementName);
}
public enum Microsoft.Exchange.WebServices.Data.PhysicalAddressIndex : Enum {
    public int value__;
    public static PhysicalAddressIndex None;
    public static PhysicalAddressIndex Business;
    public static PhysicalAddressIndex Home;
    public static PhysicalAddressIndex Other;
}
public enum Microsoft.Exchange.WebServices.Data.PhysicalAddressKey : Enum {
    public int value__;
    public static PhysicalAddressKey Business;
    public static PhysicalAddressKey Home;
    public static PhysicalAddressKey Other;
}
internal class Microsoft.Exchange.WebServices.Data.PlayOnPhoneRequest : SimpleServiceRequestBase {
    private ItemId itemId;
    private string dialString;
    internal ItemId ItemId { get; internal set; }
    internal string DialString { get; internal set; }
    internal PlayOnPhoneRequest(ExchangeService service);
    internal virtual string GetXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetResponseXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.PlayOnPhoneRequest/<Execute>d__8")]
internal Task`1<PlayOnPhoneResponse> Execute(CancellationToken token);
    internal ItemId get_ItemId();
    internal void set_ItemId(ItemId value);
    internal string get_DialString();
    internal void set_DialString(string value);
}
internal class Microsoft.Exchange.WebServices.Data.PlayOnPhoneResponse : ServiceResponse {
    private PhoneCallId phoneCallId;
    internal PhoneCallId PhoneCallId { get; }
    internal PlayOnPhoneResponse(ExchangeService service);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    internal PhoneCallId get_PhoneCallId();
}
public class Microsoft.Exchange.WebServices.Data.PolicyTag : RetentionTagBase {
    public PolicyTag(bool isExplicit, Guid retentionId);
}
[AttachableAttribute]
[ServiceObjectDefinitionAttribute("PostItem")]
public class Microsoft.Exchange.WebServices.Data.PostItem : Item {
    public Byte[] ConversationIndex { get; }
    public string ConversationTopic { get; }
    public EmailAddress From { get; public set; }
    public string InternetMessageId { get; }
    public bool IsRead { get; public set; }
    public DateTime PostedTime { get; }
    public string References { get; public set; }
    public EmailAddress Sender { get; public set; }
    public PostItem(ExchangeService service);
    internal PostItem(ItemAttachment parentAttachment);
    public static Task`1<PostItem> Bind(ExchangeService service, ItemId id, PropertySet propertySet, CancellationToken token);
    public static Task`1<PostItem> Bind(ExchangeService service, ItemId id);
    internal virtual ServiceObjectSchema GetSchema();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public PostReply CreatePostReply();
    public Task PostReply(MessageBody bodyPrefix);
    public ResponseMessage CreateReply(bool replyAll);
    public Task Reply(MessageBody bodyPrefix, bool replyAll);
    public ResponseMessage CreateForward();
    public Task Forward(MessageBody bodyPrefix, EmailAddress[] toRecipients);
    public Task Forward(MessageBody bodyPrefix, IEnumerable`1<EmailAddress> toRecipients);
    public Byte[] get_ConversationIndex();
    public string get_ConversationTopic();
    public EmailAddress get_From();
    public void set_From(EmailAddress value);
    public string get_InternetMessageId();
    public bool get_IsRead();
    public void set_IsRead(bool value);
    public DateTime get_PostedTime();
    public string get_References();
    public void set_References(string value);
    public EmailAddress get_Sender();
    public void set_Sender(EmailAddress value);
}
[SchemaAttribute]
public class Microsoft.Exchange.WebServices.Data.PostItemSchema : ItemSchema {
    public static PropertyDefinition ConversationIndex;
    public static PropertyDefinition ConversationTopic;
    public static PropertyDefinition From;
    public static PropertyDefinition InternetMessageId;
    public static PropertyDefinition IsRead;
    public static PropertyDefinition PostedTime;
    public static PropertyDefinition References;
    public static PropertyDefinition Sender;
    internal static PostItemSchema Instance;
    private static PostItemSchema();
    internal virtual void RegisterProperties();
}
[ServiceObjectDefinitionAttribute("PostReplyItem")]
public class Microsoft.Exchange.WebServices.Data.PostReply : ServiceObject {
    private Item referenceItem;
    public string Subject { get; public set; }
    public MessageBody Body { get; public set; }
    public MessageBody BodyPrefix { get; public set; }
    internal PostReply(Item referenceItem);
    internal virtual ServiceObjectSchema GetSchema();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.PostReply/<InternalCreate>d__4")]
internal Task`1<PostItem> InternalCreate(FolderId parentFolderId, Nullable`1<MessageDisposition> messageDisposition, CancellationToken token);
    internal virtual Task`1<ServiceResponseCollection`1<ServiceResponse>> InternalLoad(PropertySet propertySet, CancellationToken token);
    internal virtual Task`1<ServiceResponseCollection`1<ServiceResponse>> InternalDelete(DeleteMode deleteMode, Nullable`1<SendCancellationsMode> sendCancellationsMode, Nullable`1<AffectedTaskOccurrence> affectedTaskOccurrences, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.PostReply/<Save>d__7")]
public Task`1<PostItem> Save(CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.PostReply/<Save>d__8")]
public Task`1<PostItem> Save(FolderId destinationFolderId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.PostReply/<Save>d__9")]
public Task`1<PostItem> Save(WellKnownFolderName destinationFolderName, CancellationToken token);
    public string get_Subject();
    public void set_Subject(string value);
    public MessageBody get_Body();
    public void set_Body(MessageBody value);
    public MessageBody get_BodyPrefix();
    public void set_BodyPrefix(MessageBody value);
}
internal class Microsoft.Exchange.WebServices.Data.PostReplySchema : ServiceObjectSchema {
    internal static PostReplySchema Instance;
    private static PostReplySchema();
    internal virtual void RegisterProperties();
}
public enum Microsoft.Exchange.WebServices.Data.Presenters : Enum {
    public int value__;
    public static Presenters Disabled;
    public static Presenters Internal;
    public static Presenters Everyone;
}
public enum Microsoft.Exchange.WebServices.Data.PreviewItemBaseShape : Enum {
    public int value__;
    public static PreviewItemBaseShape Default;
    public static PreviewItemBaseShape Compact;
}
public class Microsoft.Exchange.WebServices.Data.PreviewItemMailbox : object {
    [CompilerGeneratedAttribute]
private string <MailboxId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PrimarySmtpAddress>k__BackingField;
    public string MailboxId { get; public set; }
    public string PrimarySmtpAddress { get; public set; }
    public PreviewItemMailbox(string mailboxId, string primarySmtpAddress);
    [CompilerGeneratedAttribute]
public string get_MailboxId();
    [CompilerGeneratedAttribute]
public void set_MailboxId(string value);
    [CompilerGeneratedAttribute]
public string get_PrimarySmtpAddress();
    [CompilerGeneratedAttribute]
public void set_PrimarySmtpAddress(string value);
}
public class Microsoft.Exchange.WebServices.Data.PreviewItemResponseShape : object {
    [CompilerGeneratedAttribute]
private PreviewItemBaseShape <BaseShape>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtendedPropertyDefinition[] <AdditionalProperties>k__BackingField;
    public PreviewItemBaseShape BaseShape { get; public set; }
    public ExtendedPropertyDefinition[] AdditionalProperties { get; public set; }
    public PreviewItemResponseShape(PreviewItemBaseShape baseShape, ExtendedPropertyDefinition[] additionalProperties);
    [CompilerGeneratedAttribute]
public PreviewItemBaseShape get_BaseShape();
    [CompilerGeneratedAttribute]
public void set_BaseShape(PreviewItemBaseShape value);
    [CompilerGeneratedAttribute]
public ExtendedPropertyDefinition[] get_AdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AdditionalProperties(ExtendedPropertyDefinition[] value);
}
internal enum Microsoft.Exchange.WebServices.Data.PrivilegedLogonType : Enum {
    public int value__;
    public static PrivilegedLogonType Admin;
    public static PrivilegedLogonType SystemService;
}
internal class Microsoft.Exchange.WebServices.Data.PrivilegedUserId : object {
    private PrivilegedLogonType logonType;
    private ConnectingIdType idType;
    private string id;
    private Nullable`1<PrivilegedUserIdBudgetType> budgetType;
    public ConnectingIdType IdType { get; public set; }
    public string Id { get; public set; }
    public PrivilegedLogonType LogonType { get; public set; }
    public Nullable`1<PrivilegedUserIdBudgetType> BudgetType { get; public set; }
    public PrivilegedUserId(PrivilegedLogonType openType, ConnectingIdType idType, string id);
    internal void WriteToXml(EwsServiceXmlWriter writer, ExchangeVersion requestedServerVersion);
    public ConnectingIdType get_IdType();
    public void set_IdType(ConnectingIdType value);
    public string get_Id();
    public void set_Id(string value);
    public PrivilegedLogonType get_LogonType();
    public void set_LogonType(PrivilegedLogonType value);
    public Nullable`1<PrivilegedUserIdBudgetType> get_BudgetType();
    public void set_BudgetType(Nullable`1<PrivilegedUserIdBudgetType> value);
}
internal enum Microsoft.Exchange.WebServices.Data.PrivilegedUserIdBudgetType : Enum {
    public int value__;
    public static PrivilegedUserIdBudgetType Default;
    public static PrivilegedUserIdBudgetType RunningAsBackgroundLoad;
    public static PrivilegedUserIdBudgetType Unthrottled;
}
public class Microsoft.Exchange.WebServices.Data.ProfileInsightValue : InsightValue {
    private string fullName;
    private string firstName;
    private string lastName;
    private string emailAddress;
    private string avatar;
    private long joinedUtcTicks;
    private UserProfilePicture profilePicture;
    private string title;
    public string FullName { get; }
    public string FirstName { get; }
    public string LastName { get; }
    public string EmailAddress { get; }
    public string Avatar { get; }
    public long JoinedUtcTicks { get; }
    public UserProfilePicture ProfilePicture { get; }
    public string Title { get; }
    public string get_FullName();
    public string get_FirstName();
    public string get_LastName();
    public string get_EmailAddress();
    public string get_Avatar();
    public long get_JoinedUtcTicks();
    public UserProfilePicture get_ProfilePicture();
    public string get_Title();
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
public class Microsoft.Exchange.WebServices.Data.ProfileInsightValueCollection : ComplexPropertyCollection`1<ProfileInsightValue> {
    private string collectionItemXmlElementName;
    internal ProfileInsightValueCollection(string collectionItemXmlElementName);
    internal virtual ProfileInsightValue CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(ProfileInsightValue insight);
    internal virtual bool ShouldWriteToRequest();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Exchange.WebServices.Data.PropertyBag : object {
    private ServiceObject owner;
    private bool isDirty;
    private bool loading;
    private bool onlySummaryPropertiesRequested;
    private List`1<PropertyDefinition> loadedProperties;
    private Dictionary`2<PropertyDefinition, object> properties;
    private Dictionary`2<PropertyDefinition, object> deletedProperties;
    private List`1<PropertyDefinition> modifiedProperties;
    private List`1<PropertyDefinition> addedProperties;
    private PropertySet requestedPropertySet;
    internal Dictionary`2<PropertyDefinition, object> Properties { get; }
    internal ServiceObject Owner { get; }
    internal bool IsDirty { get; }
    internal object Item { get; internal set; }
    internal PropertyBag(ServiceObject owner);
    internal Dictionary`2<PropertyDefinition, object> get_Properties();
    internal ServiceObject get_Owner();
    internal bool get_IsDirty();
    internal static void AddToChangeList(PropertyDefinition propertyDefinition, List`1<PropertyDefinition> changeList);
    internal static string GetPropertyUpdateItemName(ServiceObject serviceObject);
    internal bool IsPropertyLoaded(PropertyDefinition propertyDefinition);
    private bool IsRequestedProperty(PropertyDefinition propertyDefinition);
    internal bool IsPropertyUpdated(PropertyDefinition propertyDefinition);
    internal bool TryGetProperty(PropertyDefinition propertyDefinition, Object& propertyValue);
    internal bool TryGetProperty(PropertyDefinition propertyDefinition, T& propertyValue);
    private object GetPropertyValueOrException(PropertyDefinition propertyDefinition, ServiceLocalException& exception);
    internal object get_Item(PropertyDefinition propertyDefinition);
    internal void set_Item(PropertyDefinition propertyDefinition, object value);
    internal void Changed();
    internal bool Contains(PropertyDefinition propertyDefinition);
    internal bool TryGetValue(PropertyDefinition propertyDefinition, Object& propertyValue);
    internal void PropertyChanged(ComplexProperty complexProperty);
    internal void DeleteProperty(PropertyDefinition propertyDefinition);
    internal void Clear();
    internal void ClearChangeLog();
    internal void LoadFromXml(EwsServiceXmlReader reader, bool clear, PropertySet requestedPropertySet, bool onlySummaryPropertiesRequested);
    internal void WriteToXml(EwsServiceXmlWriter writer);
    internal void WriteToXmlForUpdate(EwsServiceXmlWriter writer);
    internal bool GetIsUpdateCallNecessary();
    private void InitComplexProperty(ComplexProperty complexProperty);
    private void WriteSetUpdateToXml(EwsServiceXmlWriter writer, PropertyDefinition propertyDefinition);
    private void WriteDeleteUpdateToXml(EwsServiceXmlWriter writer, PropertyDefinition propertyDefinition, object propertyValue);
    internal void Validate();
    private void ValidatePropertyValue(PropertyDefinition propertyDefinition);
}
internal class Microsoft.Exchange.WebServices.Data.PropertyBagChangedDelegate : MulticastDelegate {
    public PropertyBagChangedDelegate(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class Microsoft.Exchange.WebServices.Data.PropertyDefinition : ServiceObjectPropertyDefinition {
    private string xmlElementName;
    private PropertyDefinitionFlags flags;
    private string name;
    private ExchangeVersion version;
    public ExchangeVersion Version { get; }
    internal bool IsNullable { get; }
    internal string XmlElementName { get; }
    public string Name { get; internal set; }
    internal PropertyDefinition(string xmlElementName, string uri, ExchangeVersion version);
    internal PropertyDefinition(string xmlElementName, PropertyDefinitionFlags flags, ExchangeVersion version);
    internal PropertyDefinition(string xmlElementName, string uri, PropertyDefinitionFlags flags, ExchangeVersion version);
    internal bool HasFlag(PropertyDefinitionFlags flag);
    internal virtual bool HasFlag(PropertyDefinitionFlags flag, Nullable`1<ExchangeVersion> version);
    internal virtual void RegisterAssociatedInternalProperties(List`1<PropertyDefinition> properties);
    internal List`1<PropertyDefinition> GetAssociatedInternalProperties();
    public virtual ExchangeVersion get_Version();
    internal virtual bool get_IsNullable();
    internal abstract virtual void LoadPropertyValueFromXml(EwsServiceXmlReader reader, PropertyBag propertyBag);
    internal abstract virtual void WritePropertyValueToXml(EwsServiceXmlWriter writer, PropertyBag propertyBag, bool isUpdateOperation);
    internal string get_XmlElementName();
    public string get_Name();
    internal void set_Name(string value);
    internal virtual string GetPrintableName();
}
public abstract class Microsoft.Exchange.WebServices.Data.PropertyDefinitionBase : object {
    public ExchangeVersion Version { get; }
    public Type Type { get; }
    internal static bool TryLoadFromXml(EwsServiceXmlReader reader, PropertyDefinitionBase& propertyDefinition);
    internal abstract virtual string GetXmlElementName();
    internal abstract virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    public abstract virtual ExchangeVersion get_Version();
    internal abstract virtual string GetPrintableName();
    public abstract virtual Type get_Type();
    internal virtual void WriteToXml(EwsServiceXmlWriter writer);
    public virtual string ToString();
}
[FlagsAttribute]
internal enum Microsoft.Exchange.WebServices.Data.PropertyDefinitionFlags : Enum {
    public int value__;
    public static PropertyDefinitionFlags None;
    public static PropertyDefinitionFlags AutoInstantiateOnRead;
    public static PropertyDefinitionFlags ReuseInstance;
    public static PropertyDefinitionFlags CanSet;
    public static PropertyDefinitionFlags CanUpdate;
    public static PropertyDefinitionFlags CanDelete;
    public static PropertyDefinitionFlags CanFind;
    public static PropertyDefinitionFlags MustBeExplicitlyLoaded;
    public static PropertyDefinitionFlags UpdateCollectionItems;
}
public class Microsoft.Exchange.WebServices.Data.PropertyException : ServiceLocalException {
    private string name;
    public string Name { get; }
    public PropertyException(string name);
    public PropertyException(string message, string name);
    public PropertyException(string message, string name, Exception innerException);
    protected PropertyException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_Name();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Exchange.WebServices.Data.PropertySet : object {
    public static PropertySet IdOnly;
    public static PropertySet FirstClassProperties;
    private static LazyMember`1<Dictionary`2<BasePropertySet, string>> defaultPropertySetMap;
    private BasePropertySet basePropertySet;
    private List`1<PropertyDefinitionBase> additionalProperties;
    private Nullable`1<BodyType> requestedBodyType;
    private Nullable`1<BodyType> requestedUniqueBodyType;
    private Nullable`1<BodyType> requestedNormalizedBodyType;
    private Nullable`1<bool> filterHtml;
    private Nullable`1<bool> convertHtmlCodePageToUTF8;
    private string inlineImageUrlTemplate;
    private Nullable`1<bool> blockExternalImages;
    private Nullable`1<bool> addTargetToLinks;
    private bool isReadOnly;
    private Nullable`1<int> maximumBodySize;
    public BasePropertySet BasePropertySet { get; public set; }
    public Nullable`1<BodyType> RequestedBodyType { get; public set; }
    public Nullable`1<BodyType> RequestedUniqueBodyType { get; public set; }
    public Nullable`1<BodyType> RequestedNormalizedBodyType { get; public set; }
    public int Count { get; }
    public Nullable`1<bool> FilterHtmlContent { get; public set; }
    public Nullable`1<bool> ConvertHtmlCodePageToUTF8 { get; public set; }
    public string InlineImageUrlTemplate { get; public set; }
    public Nullable`1<bool> BlockExternalImages { get; public set; }
    public Nullable`1<bool> AddBlankTargetToLinks { get; public set; }
    public Nullable`1<int> MaximumBodySize { get; public set; }
    public PropertyDefinitionBase Item { get; }
    internal static LazyMember`1<Dictionary`2<BasePropertySet, string>> DefaultPropertySetMap { get; }
    public PropertySet(BasePropertySet basePropertySet, PropertyDefinitionBase[] additionalProperties);
    public PropertySet(BasePropertySet basePropertySet, IEnumerable`1<PropertyDefinitionBase> additionalProperties);
    public PropertySet(BasePropertySet basePropertySet);
    public PropertySet(PropertyDefinitionBase[] additionalProperties);
    public PropertySet(IEnumerable`1<PropertyDefinitionBase> additionalProperties);
    private static PropertySet();
    public static PropertySet op_Implicit(BasePropertySet basePropertySet);
    public void Add(PropertyDefinitionBase property);
    public void AddRange(IEnumerable`1<PropertyDefinitionBase> properties);
    public void Clear();
    private static PropertySet CreateReadonlyPropertySet(BasePropertySet basePropertySet);
    private static string GetShapeName(ServiceObjectType serviceObjectType);
    private void ThrowIfReadonly();
    public bool Contains(PropertyDefinitionBase property);
    public bool Remove(PropertyDefinitionBase property);
    public BasePropertySet get_BasePropertySet();
    public void set_BasePropertySet(BasePropertySet value);
    public Nullable`1<BodyType> get_RequestedBodyType();
    public void set_RequestedBodyType(Nullable`1<BodyType> value);
    public Nullable`1<BodyType> get_RequestedUniqueBodyType();
    public void set_RequestedUniqueBodyType(Nullable`1<BodyType> value);
    public Nullable`1<BodyType> get_RequestedNormalizedBodyType();
    public void set_RequestedNormalizedBodyType(Nullable`1<BodyType> value);
    public int get_Count();
    public Nullable`1<bool> get_FilterHtmlContent();
    public void set_FilterHtmlContent(Nullable`1<bool> value);
    public Nullable`1<bool> get_ConvertHtmlCodePageToUTF8();
    public void set_ConvertHtmlCodePageToUTF8(Nullable`1<bool> value);
    public string get_InlineImageUrlTemplate();
    public void set_InlineImageUrlTemplate(string value);
    public Nullable`1<bool> get_BlockExternalImages();
    public void set_BlockExternalImages(Nullable`1<bool> value);
    public Nullable`1<bool> get_AddBlankTargetToLinks();
    public void set_AddBlankTargetToLinks(Nullable`1<bool> value);
    public Nullable`1<int> get_MaximumBodySize();
    public void set_MaximumBodySize(Nullable`1<int> value);
    public PropertyDefinitionBase get_Item(int index);
    private sealed virtual override void Microsoft.Exchange.WebServices.Data.ISelfValidate.Validate();
    internal static LazyMember`1<Dictionary`2<BasePropertySet, string>> get_DefaultPropertySetMap();
    internal static void WriteAdditionalPropertiesToXml(EwsServiceXmlWriter writer, IEnumerable`1<PropertyDefinitionBase> propertyDefinitions);
    internal void InternalValidate();
    internal void ValidateForRequest(ServiceRequestBase request, bool summaryPropertiesOnly);
    internal void WriteToXml(EwsServiceXmlWriter writer, ServiceObjectType serviceObjectType);
    public sealed virtual IEnumerator`1<PropertyDefinitionBase> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.Exchange.WebServices.Data.PullSubscription : SubscriptionBase {
    private Nullable`1<bool> moreEventsAvailable;
    public Nullable`1<bool> MoreEventsAvailable { get; }
    internal PullSubscription(ExchangeService service);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.PullSubscription/<GetEvents>d__2")]
public Task`1<GetEventsResults> GetEvents(CancellationToken token);
    public Task Unsubscribe(CancellationToken token);
    public Nullable`1<bool> get_MoreEventsAvailable();
}
public class Microsoft.Exchange.WebServices.Data.PushSubscription : SubscriptionBase {
    internal PushSubscription(ExchangeService service);
}
public abstract class Microsoft.Exchange.WebServices.Data.Recurrence : ComplexProperty {
    private Nullable`1<DateTime> startDate;
    private Nullable`1<int> numberOfOccurrences;
    private Nullable`1<DateTime> endDate;
    internal string XmlElementName { get; }
    internal bool IsRegenerationPattern { get; }
    public DateTime StartDate { get; public set; }
    public bool HasEnd { get; }
    public Nullable`1<int> NumberOfOccurrences { get; public set; }
    public Nullable`1<DateTime> EndDate { get; public set; }
    internal Recurrence(DateTime startDate);
    internal abstract virtual string get_XmlElementName();
    internal virtual bool get_IsRegenerationPattern();
    internal virtual void InternalWritePropertiesToXml(EwsServiceXmlWriter writer);
    internal sealed virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal T GetFieldValueOrThrowIfNull(Nullable`1<T> value, string name);
    public DateTime get_StartDate();
    public void set_StartDate(DateTime value);
    public bool get_HasEnd();
    public void NeverEnds();
    internal virtual void InternalValidate();
    public Nullable`1<int> get_NumberOfOccurrences();
    public void set_NumberOfOccurrences(Nullable`1<int> value);
    public Nullable`1<DateTime> get_EndDate();
    public void set_EndDate(Nullable`1<DateTime> value);
    public virtual bool IsSame(Recurrence otherRecurrence);
}
internal class Microsoft.Exchange.WebServices.Data.RecurrencePropertyDefinition : PropertyDefinition {
    public Type Type { get; }
    internal RecurrencePropertyDefinition(string xmlElementName, string uri, PropertyDefinitionFlags flags, ExchangeVersion version);
    internal virtual void LoadPropertyValueFromXml(EwsServiceXmlReader reader, PropertyBag propertyBag);
    private static RecurrenceRange GetRecurrenceRange(string recurrenceRangeString);
    private static Recurrence GetRecurrenceFromString(string recurranceString);
    internal virtual void WritePropertyValueToXml(EwsServiceXmlWriter writer, PropertyBag propertyBag, bool isUpdateOperation);
    public virtual Type get_Type();
}
internal abstract class Microsoft.Exchange.WebServices.Data.RecurrenceRange : ComplexProperty {
    private DateTime startDate;
    private Recurrence recurrence;
    internal string XmlElementName { get; }
    internal Recurrence Recurrence { get; internal set; }
    internal DateTime StartDate { get; internal set; }
    internal RecurrenceRange(DateTime startDate);
    internal virtual void Changed();
    internal virtual void SetupRecurrence(Recurrence recurrence);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal abstract virtual string get_XmlElementName();
    internal Recurrence get_Recurrence();
    internal void set_Recurrence(Recurrence value);
    internal DateTime get_StartDate();
    internal void set_StartDate(DateTime value);
}
public class Microsoft.Exchange.WebServices.Data.RecurringAppointmentMasterId : ItemId {
    public RecurringAppointmentMasterId(string occurrenceId);
    internal virtual string GetXmlElementName();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
}
public class Microsoft.Exchange.WebServices.Data.ReferenceAttachment : Attachment {
    private string attachLongPathName;
    private string providerType;
    private string providerEndpointUrl;
    private string attachmentThumbnailUrl;
    private string attachmentPreviewUrl;
    private int permissionType;
    private bool attachmentIsFolder;
    public string AttachLongPathName { get; public set; }
    public string ProviderType { get; public set; }
    public string ProviderEndpointUrl { get; public set; }
    public string AttachmentThumbnailUrl { get; public set; }
    public string AttachmentPreviewUrl { get; public set; }
    public int PermissionType { get; public set; }
    public bool AttachmentIsFolder { get; public set; }
    internal ReferenceAttachment(Item owner);
    internal virtual string GetXmlElementName();
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual bool TryReadElementFromXmlToPatch(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    public string get_AttachLongPathName();
    public void set_AttachLongPathName(string value);
    public string get_ProviderType();
    public void set_ProviderType(string value);
    public string get_ProviderEndpointUrl();
    public void set_ProviderEndpointUrl(string value);
    public string get_AttachmentThumbnailUrl();
    public void set_AttachmentThumbnailUrl(string value);
    public string get_AttachmentPreviewUrl();
    public void set_AttachmentPreviewUrl(string value);
    public int get_PermissionType();
    public void set_PermissionType(int value);
    public bool get_AttachmentIsFolder();
    public void set_AttachmentIsFolder(bool value);
}
internal class Microsoft.Exchange.WebServices.Data.RegisterConsentRequest : SimpleServiceRequestBase {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsentState <ConsentState>k__BackingField;
    private string Id { get; private set; }
    private ConsentState ConsentState { get; private set; }
    internal RegisterConsentRequest(ExchangeService service, string id, ConsentState state);
    [CompilerGeneratedAttribute]
private string get_Id();
    [CompilerGeneratedAttribute]
private void set_Id(string value);
    [CompilerGeneratedAttribute]
private ConsentState get_ConsentState();
    [CompilerGeneratedAttribute]
private void set_ConsentState(ConsentState value);
    internal virtual string GetXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetResponseXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.RegisterConsentRequest/<Execute>d__14")]
internal Task`1<RegisterConsentResponse> Execute(CancellationToken token);
}
internal class Microsoft.Exchange.WebServices.Data.RegisterConsentResponse : ServiceResponse {
}
internal class Microsoft.Exchange.WebServices.Data.RelativeDayOfMonthTransition : AbsoluteMonthTransition {
    private DayOfTheWeek dayOfTheWeek;
    private int weekIndex;
    internal DayOfTheWeek DayOfTheWeek { get; }
    internal int WeekIndex { get; }
    internal RelativeDayOfMonthTransition(TimeZoneDefinition timeZoneDefinition);
    internal RelativeDayOfMonthTransition(TimeZoneDefinition timeZoneDefinition, TimeZonePeriod targetPeriod);
    internal virtual string GetXmlElementName();
    internal virtual TransitionTime CreateTransitionTime();
    internal virtual void InitializeFromTransitionTime(TransitionTime transitionTime);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal DayOfTheWeek get_DayOfTheWeek();
    internal int get_WeekIndex();
}
internal class Microsoft.Exchange.WebServices.Data.RemoveDelegateRequest : DelegateManagementRequestBase`1<DelegateManagementResponse> {
    private List`1<UserId> userIds;
    public List`1<UserId> UserIds { get; }
    internal RemoveDelegateRequest(ExchangeService service);
    internal virtual void Validate();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetXmlElementName();
    internal virtual DelegateManagementResponse CreateResponse();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public List`1<UserId> get_UserIds();
}
[ServiceObjectDefinitionAttribute("RemoveItem")]
internal class Microsoft.Exchange.WebServices.Data.RemoveFromCalendar : ServiceObject {
    private Item referenceItem;
    internal RemoveFromCalendar(Item referenceItem);
    internal virtual ServiceObjectSchema GetSchema();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal virtual Task`1<ServiceResponseCollection`1<ServiceResponse>> InternalLoad(PropertySet propertySet, CancellationToken token);
    internal virtual Task`1<ServiceResponseCollection`1<ServiceResponse>> InternalDelete(DeleteMode deleteMode, Nullable`1<SendCancellationsMode> sendCancellationsMode, Nullable`1<AffectedTaskOccurrence> affectedTaskOccurrences, CancellationToken token);
    internal Task`1<List`1<Item>> InternalCreate(FolderId parentFolderId, Nullable`1<MessageDisposition> messageDisposition, CancellationToken token);
}
[AttributeUsageAttribute("388")]
internal class Microsoft.Exchange.WebServices.Data.RequiredServerVersionAttribute : Attribute {
    private ExchangeVersion version;
    internal ExchangeVersion Version { get; }
    internal RequiredServerVersionAttribute(ExchangeVersion version);
    internal ExchangeVersion get_Version();
}
public enum Microsoft.Exchange.WebServices.Data.ResolveNameSearchLocation : Enum {
    public int value__;
    public static ResolveNameSearchLocation DirectoryOnly;
    public static ResolveNameSearchLocation DirectoryThenContacts;
    public static ResolveNameSearchLocation ContactsOnly;
    public static ResolveNameSearchLocation ContactsThenDirectory;
}
internal class Microsoft.Exchange.WebServices.Data.ResolveNamesRequest : MultiResponseServiceRequest`1<ResolveNamesResponse> {
    private static LazyMember`1<Dictionary`2<ResolveNameSearchLocation, string>> searchScopeMap;
    private string nameToResolve;
    private bool returnFullContactData;
    private ResolveNameSearchLocation searchLocation;
    private PropertySet contactDataPropertySet;
    private FolderIdWrapperList parentFolderIds;
    public string NameToResolve { get; public set; }
    public bool ReturnFullContactData { get; public set; }
    public ResolveNameSearchLocation SearchLocation { get; public set; }
    public PropertySet ContactDataPropertySet { get; public set; }
    public FolderIdWrapperList ParentFolderIds { get; }
    internal ResolveNamesRequest(ExchangeService service);
    private static ResolveNamesRequest();
    internal virtual void Validate();
    internal virtual ResolveNamesResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public string get_NameToResolve();
    public void set_NameToResolve(string value);
    public bool get_ReturnFullContactData();
    public void set_ReturnFullContactData(bool value);
    public ResolveNameSearchLocation get_SearchLocation();
    public void set_SearchLocation(ResolveNameSearchLocation value);
    public PropertySet get_ContactDataPropertySet();
    public void set_ContactDataPropertySet(PropertySet value);
    public FolderIdWrapperList get_ParentFolderIds();
}
internal class Microsoft.Exchange.WebServices.Data.ResolveNamesResponse : ServiceResponse {
    private NameResolutionCollection resolutions;
    public NameResolutionCollection Resolutions { get; }
    internal ResolveNamesResponse(ExchangeService service);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    internal virtual void InternalThrowIfNecessary();
    public NameResolutionCollection get_Resolutions();
}
[FlagsAttribute]
public enum Microsoft.Exchange.WebServices.Data.ResponseActions : Enum {
    public int value__;
    public static ResponseActions None;
    public static ResponseActions Accept;
    public static ResponseActions TentativelyAccept;
    public static ResponseActions Decline;
    public static ResponseActions Reply;
    public static ResponseActions ReplyAll;
    public static ResponseActions Forward;
    public static ResponseActions Cancel;
    public static ResponseActions RemoveFromCalendar;
    public static ResponseActions SuppressReadReceipt;
    public static ResponseActions PostReply;
}
public class Microsoft.Exchange.WebServices.Data.ResponseHeadersCapturedHandler : MulticastDelegate {
    public ResponseHeadersCapturedHandler(object object, IntPtr method);
    public virtual void Invoke(HttpResponseHeaders responseHeaders);
    public virtual IAsyncResult BeginInvoke(HttpResponseHeaders responseHeaders, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Exchange.WebServices.Data.ResponseMessage : ResponseObject`1<EmailMessage> {
    private ResponseMessageType responseType;
    public ResponseMessageType ResponseType { get; }
    public MessageBody Body { get; public set; }
    public EmailAddressCollection ToRecipients { get; }
    public EmailAddressCollection CcRecipients { get; }
    public EmailAddressCollection BccRecipients { get; }
    public string Subject { get; public set; }
    public MessageBody BodyPrefix { get; public set; }
    internal ResponseMessage(Item referenceItem, ResponseMessageType responseType);
    internal virtual ServiceObjectSchema GetSchema();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal virtual string GetXmlElementNameOverride();
    public ResponseMessageType get_ResponseType();
    public MessageBody get_Body();
    public void set_Body(MessageBody value);
    public EmailAddressCollection get_ToRecipients();
    public EmailAddressCollection get_CcRecipients();
    public EmailAddressCollection get_BccRecipients();
    public string get_Subject();
    public void set_Subject(string value);
    public MessageBody get_BodyPrefix();
    public void set_BodyPrefix(MessageBody value);
}
internal class Microsoft.Exchange.WebServices.Data.ResponseMessageSchema : ServiceObjectSchema {
    internal static ResponseMessageSchema Instance;
    private static ResponseMessageSchema();
    internal virtual void RegisterProperties();
}
public enum Microsoft.Exchange.WebServices.Data.ResponseMessageType : Enum {
    public int value__;
    public static ResponseMessageType Reply;
    public static ResponseMessageType ReplyAll;
    public static ResponseMessageType Forward;
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.Exchange.WebServices.Data.ResponseObject`1 : ServiceObject {
    private Item referenceItem;
    public bool IsReadReceiptRequested { get; public set; }
    public bool IsDeliveryReceiptRequested { get; public set; }
    internal ResponseObject`1(Item referenceItem);
    internal virtual ServiceObjectSchema GetSchema();
    internal virtual Task`1<ServiceResponseCollection`1<ServiceResponse>> InternalLoad(PropertySet propertySet, CancellationToken token);
    internal virtual Task`1<ServiceResponseCollection`1<ServiceResponse>> InternalDelete(DeleteMode deleteMode, Nullable`1<SendCancellationsMode> sendCancellationsMode, Nullable`1<AffectedTaskOccurrence> affectedTaskOccurrences, CancellationToken token);
    internal Task`1<List`1<Item>> InternalCreate(FolderId destinationFolderId, MessageDisposition messageDisposition, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ResponseObject`1/<Save>d__6")]
public Task`1<TMessage> Save(FolderId destinationFolderId, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ResponseObject`1/<Save>d__7")]
public Task`1<TMessage> Save(WellKnownFolderName destinationFolderName, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ResponseObject`1/<Save>d__8")]
public Task`1<TMessage> Save(CancellationToken token);
    public Task Send(CancellationToken token);
    public Task SendAndSaveCopy(FolderId destinationFolderId, CancellationToken token);
    public Task SendAndSaveCopy(WellKnownFolderName destinationFolderName, CancellationToken token);
    public Task SendAndSaveCopy(CancellationToken token);
    public bool get_IsReadReceiptRequested();
    public void set_IsReadReceiptRequested(bool value);
    public bool get_IsDeliveryReceiptRequested();
    public void set_IsDeliveryReceiptRequested(bool value);
}
internal class Microsoft.Exchange.WebServices.Data.ResponseObjectSchema : ServiceObjectSchema {
    public static PropertyDefinition ReferenceItemId;
    public static PropertyDefinition BodyPrefix;
    internal static ResponseObjectSchema Instance;
    private static ResponseObjectSchema();
    internal virtual void RegisterProperties();
}
internal class Microsoft.Exchange.WebServices.Data.ResponseObjectsPropertyDefinition : PropertyDefinition {
    internal bool IsNullable { get; }
    public Type Type { get; }
    internal ResponseObjectsPropertyDefinition(string xmlElementName, string uri, ExchangeVersion version);
    internal sealed virtual void LoadPropertyValueFromXml(EwsServiceXmlReader reader, PropertyBag propertyBag);
    private static ResponseActions GetResponseAction(string responseActionString);
    internal virtual void WritePropertyValueToXml(EwsServiceXmlWriter writer, PropertyBag propertyBag, bool isUpdateOperation);
    internal virtual bool get_IsNullable();
    public virtual Type get_Type();
}
public enum Microsoft.Exchange.WebServices.Data.RetentionActionType : Enum {
    public int value__;
    public static RetentionActionType None;
    public static RetentionActionType MoveToDeletedItems;
    public static RetentionActionType MoveToFolder;
    public static RetentionActionType DeleteAndAllowRecovery;
    public static RetentionActionType PermanentlyDelete;
    public static RetentionActionType MarkAsPastRetentionLimit;
    public static RetentionActionType MoveToArchive;
}
public class Microsoft.Exchange.WebServices.Data.RetentionPolicyTag : object {
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RetentionId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RetentionPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private ElcFolderType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private RetentionActionType <RetentionAction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVisible>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OptedInto>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsArchive>k__BackingField;
    public string DisplayName { get; public set; }
    public Guid RetentionId { get; public set; }
    public int RetentionPeriod { get; public set; }
    public ElcFolderType Type { get; public set; }
    public RetentionActionType RetentionAction { get; public set; }
    public string Description { get; public set; }
    public bool IsVisible { get; public set; }
    public bool OptedInto { get; public set; }
    public bool IsArchive { get; public set; }
    internal RetentionPolicyTag(string displayName, Guid retentionId, int retentionPeriod, ElcFolderType type, RetentionActionType retentionAction, bool isVisible, bool optedInto, bool isArchive);
    internal static RetentionPolicyTag LoadFromXml(EwsServiceXmlReader reader);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public Guid get_RetentionId();
    [CompilerGeneratedAttribute]
public void set_RetentionId(Guid value);
    [CompilerGeneratedAttribute]
public int get_RetentionPeriod();
    [CompilerGeneratedAttribute]
public void set_RetentionPeriod(int value);
    [CompilerGeneratedAttribute]
public ElcFolderType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(ElcFolderType value);
    [CompilerGeneratedAttribute]
public RetentionActionType get_RetentionAction();
    [CompilerGeneratedAttribute]
public void set_RetentionAction(RetentionActionType value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_IsVisible();
    [CompilerGeneratedAttribute]
public void set_IsVisible(bool value);
    [CompilerGeneratedAttribute]
public bool get_OptedInto();
    [CompilerGeneratedAttribute]
public void set_OptedInto(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsArchive();
    [CompilerGeneratedAttribute]
public void set_IsArchive(bool value);
}
public class Microsoft.Exchange.WebServices.Data.RetentionTagBase : ComplexProperty {
    private string xmlElementName;
    private bool isExplicit;
    private Guid retentionId;
    public bool IsExplicit { get; public set; }
    public Guid RetentionId { get; public set; }
    public RetentionTagBase(string xmlElementName);
    public bool get_IsExplicit();
    public void set_IsExplicit(bool value);
    public Guid get_RetentionId();
    public void set_RetentionId(Guid value);
    internal virtual void ReadAttributesFromXml(EwsServiceXmlReader reader);
    internal virtual void ReadTextValueFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    public virtual string ToString();
}
public enum Microsoft.Exchange.WebServices.Data.RetentionType : Enum {
    public int value__;
    public static RetentionType Delete;
    public static RetentionType Archive;
}
public class Microsoft.Exchange.WebServices.Data.Rule : ComplexProperty {
    private string ruleId;
    private string displayName;
    private int priority;
    private bool isEnabled;
    private bool isNotSupported;
    private bool isInError;
    private RulePredicates conditions;
    private RuleActions actions;
    private RulePredicates exceptions;
    public string Id { get; public set; }
    public string DisplayName { get; public set; }
    public int Priority { get; public set; }
    public bool IsEnabled { get; public set; }
    public bool IsNotSupported { get; }
    public bool IsInError { get; public set; }
    public RulePredicates Conditions { get; }
    public RuleActions Actions { get; }
    public RulePredicates Exceptions { get; }
    public string get_Id();
    public void set_Id(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public int get_Priority();
    public void set_Priority(int value);
    public bool get_IsEnabled();
    public void set_IsEnabled(bool value);
    public bool get_IsNotSupported();
    public bool get_IsInError();
    public void set_IsInError(bool value);
    public RulePredicates get_Conditions();
    public RuleActions get_Actions();
    public RulePredicates get_Exceptions();
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual void InternalValidate();
}
public class Microsoft.Exchange.WebServices.Data.RuleActions : ComplexProperty {
    private static string MobileType;
    private StringList assignCategories;
    private FolderId copyToFolder;
    private bool delete;
    private EmailAddressCollection forwardAsAttachmentToRecipients;
    private EmailAddressCollection forwardToRecipients;
    private Nullable`1<Importance> markImportance;
    private bool markAsRead;
    private FolderId moveToFolder;
    private bool permanentDelete;
    private EmailAddressCollection redirectToRecipients;
    private Collection`1<MobilePhone> sendSMSAlertToRecipients;
    private ItemId serverReplyWithMessage;
    private bool stopProcessingRules;
    public StringList AssignCategories { get; }
    public FolderId CopyToFolder { get; public set; }
    public bool Delete { get; public set; }
    public EmailAddressCollection ForwardAsAttachmentToRecipients { get; }
    public EmailAddressCollection ForwardToRecipients { get; }
    public Nullable`1<Importance> MarkImportance { get; public set; }
    public bool MarkAsRead { get; public set; }
    public FolderId MoveToFolder { get; public set; }
    public bool PermanentDelete { get; public set; }
    public EmailAddressCollection RedirectToRecipients { get; }
    public Collection`1<MobilePhone> SendSMSAlertToRecipients { get; }
    public ItemId ServerReplyWithMessage { get; public set; }
    public bool StopProcessingRules { get; public set; }
    public StringList get_AssignCategories();
    public FolderId get_CopyToFolder();
    public void set_CopyToFolder(FolderId value);
    public bool get_Delete();
    public void set_Delete(bool value);
    public EmailAddressCollection get_ForwardAsAttachmentToRecipients();
    public EmailAddressCollection get_ForwardToRecipients();
    public Nullable`1<Importance> get_MarkImportance();
    public void set_MarkImportance(Nullable`1<Importance> value);
    public bool get_MarkAsRead();
    public void set_MarkAsRead(bool value);
    public FolderId get_MoveToFolder();
    public void set_MoveToFolder(FolderId value);
    public bool get_PermanentDelete();
    public void set_PermanentDelete(bool value);
    public EmailAddressCollection get_RedirectToRecipients();
    public Collection`1<MobilePhone> get_SendSMSAlertToRecipients();
    public ItemId get_ServerReplyWithMessage();
    public void set_ServerReplyWithMessage(ItemId value);
    public bool get_StopProcessingRules();
    public void set_StopProcessingRules(bool value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual void InternalValidate();
    private static Collection`1<MobilePhone> ConvertSMSRecipientsFromEmailAddressCollectionToMobilePhoneCollection(EmailAddressCollection emailCollection);
    private static EmailAddressCollection ConvertSMSRecipientsFromMobilePhoneCollectionToEmailAddressCollection(Collection`1<MobilePhone> recipientCollection);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Exchange.WebServices.Data.RuleCollection : ComplexProperty {
    private bool outlookRuleBlobExists;
    private List`1<Rule> rules;
    public bool OutlookRuleBlobExists { get; internal set; }
    public int Count { get; }
    public Rule Item { get; }
    public bool get_OutlookRuleBlobExists();
    internal void set_OutlookRuleBlobExists(bool value);
    public int get_Count();
    public Rule get_Item(int index);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<Rule> GetEnumerator();
}
public class Microsoft.Exchange.WebServices.Data.RuleError : ComplexProperty {
    private RuleProperty ruleProperty;
    private RuleErrorCode errorCode;
    private string errorMessage;
    private string value;
    public RuleProperty RuleProperty { get; }
    public RuleErrorCode ErrorCode { get; }
    public string ErrorMessage { get; }
    public string Value { get; }
    public RuleProperty get_RuleProperty();
    public RuleErrorCode get_ErrorCode();
    public string get_ErrorMessage();
    public string get_Value();
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
public enum Microsoft.Exchange.WebServices.Data.RuleErrorCode : Enum {
    public int value__;
    public static RuleErrorCode ADOperationFailure;
    public static RuleErrorCode ConnectedAccountNotFound;
    public static RuleErrorCode CreateWithRuleId;
    public static RuleErrorCode EmptyValueFound;
    public static RuleErrorCode DuplicatedPriority;
    public static RuleErrorCode DuplicatedOperationOnTheSameRule;
    public static RuleErrorCode FolderDoesNotExist;
    public static RuleErrorCode InvalidAddress;
    public static RuleErrorCode InvalidDateRange;
    public static RuleErrorCode InvalidFolderId;
    public static RuleErrorCode InvalidSizeRange;
    public static RuleErrorCode InvalidValue;
    public static RuleErrorCode MessageClassificationNotFound;
    public static RuleErrorCode MissingAction;
    public static RuleErrorCode MissingParameter;
    public static RuleErrorCode MissingRangeValue;
    public static RuleErrorCode NotSettable;
    public static RuleErrorCode RecipientDoesNotExist;
    public static RuleErrorCode RuleNotFound;
    public static RuleErrorCode SizeLessThanZero;
    public static RuleErrorCode StringValueTooBig;
    public static RuleErrorCode UnsupportedAddress;
    public static RuleErrorCode UnexpectedError;
    public static RuleErrorCode UnsupportedRule;
}
internal class Microsoft.Exchange.WebServices.Data.RuleErrorCollection : ComplexPropertyCollection`1<RuleError> {
    internal virtual RuleError CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(RuleError ruleValidationError);
}
public abstract class Microsoft.Exchange.WebServices.Data.RuleOperation : ComplexProperty {
    internal string XmlElementName { get; }
    internal abstract virtual string get_XmlElementName();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Exchange.WebServices.Data.RuleOperationError : ComplexProperty {
    private int operationIndex;
    private RuleOperation operation;
    private RuleErrorCollection ruleErrors;
    public RuleOperation Operation { get; }
    public int Count { get; }
    public RuleError Item { get; }
    public RuleOperation get_Operation();
    public int get_Count();
    public RuleError get_Item(int index);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal void SetOperationByIndex(IEnumerator`1<RuleOperation> operations);
    public sealed virtual IEnumerator`1<RuleError> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.Exchange.WebServices.Data.RuleOperationErrorCollection : ComplexPropertyCollection`1<RuleOperationError> {
    internal virtual RuleOperationError CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(RuleOperationError operationError);
}
public class Microsoft.Exchange.WebServices.Data.RulePredicateDateRange : ComplexProperty {
    private Nullable`1<DateTime> start;
    private Nullable`1<DateTime> end;
    public Nullable`1<DateTime> Start { get; public set; }
    public Nullable`1<DateTime> End { get; public set; }
    public Nullable`1<DateTime> get_Start();
    public void set_Start(Nullable`1<DateTime> value);
    public Nullable`1<DateTime> get_End();
    public void set_End(Nullable`1<DateTime> value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual void InternalValidate();
}
public class Microsoft.Exchange.WebServices.Data.RulePredicates : ComplexProperty {
    private StringList categories;
    private StringList containsBodyStrings;
    private StringList containsHeaderStrings;
    private StringList containsRecipientStrings;
    private StringList containsSenderStrings;
    private StringList containsSubjectOrBodyStrings;
    private StringList containsSubjectStrings;
    private Nullable`1<FlaggedForAction> flaggedForAction;
    private EmailAddressCollection fromAddresses;
    private StringList fromConnectedAccounts;
    private bool hasAttachments;
    private Nullable`1<Importance> importance;
    private bool isApprovalRequest;
    private bool isAutomaticForward;
    private bool isAutomaticReply;
    private bool isEncrypted;
    private bool isMeetingRequest;
    private bool isMeetingResponse;
    private bool isNonDeliveryReport;
    private bool isPermissionControlled;
    private bool isSigned;
    private bool isVoicemail;
    private bool isReadReceipt;
    private StringList itemClasses;
    private StringList messageClassifications;
    private bool notSentToMe;
    private bool sentCcMe;
    private bool sentOnlyToMe;
    private EmailAddressCollection sentToAddresses;
    private bool sentToMe;
    private bool sentToOrCcMe;
    private Nullable`1<Sensitivity> sensitivity;
    private RulePredicateDateRange withinDateRange;
    private RulePredicateSizeRange withinSizeRange;
    public StringList Categories { get; }
    public StringList ContainsBodyStrings { get; }
    public StringList ContainsHeaderStrings { get; }
    public StringList ContainsRecipientStrings { get; }
    public StringList ContainsSenderStrings { get; }
    public StringList ContainsSubjectOrBodyStrings { get; }
    public StringList ContainsSubjectStrings { get; }
    public Nullable`1<FlaggedForAction> FlaggedForAction { get; public set; }
    public EmailAddressCollection FromAddresses { get; }
    public bool HasAttachments { get; public set; }
    public Nullable`1<Importance> Importance { get; public set; }
    public bool IsApprovalRequest { get; public set; }
    public bool IsAutomaticForward { get; public set; }
    public bool IsAutomaticReply { get; public set; }
    public bool IsEncrypted { get; public set; }
    public bool IsMeetingRequest { get; public set; }
    public bool IsMeetingResponse { get; public set; }
    public bool IsNonDeliveryReport { get; public set; }
    public bool IsPermissionControlled { get; public set; }
    public bool IsSigned { get; public set; }
    public bool IsVoicemail { get; public set; }
    public bool IsReadReceipt { get; public set; }
    public StringList FromConnectedAccounts { get; }
    public StringList ItemClasses { get; }
    public StringList MessageClassifications { get; }
    public bool NotSentToMe { get; public set; }
    public bool SentCcMe { get; public set; }
    public bool SentOnlyToMe { get; public set; }
    public EmailAddressCollection SentToAddresses { get; }
    public bool SentToMe { get; public set; }
    public bool SentToOrCcMe { get; public set; }
    public Nullable`1<Sensitivity> Sensitivity { get; public set; }
    public RulePredicateDateRange WithinDateRange { get; }
    public RulePredicateSizeRange WithinSizeRange { get; }
    public StringList get_Categories();
    public StringList get_ContainsBodyStrings();
    public StringList get_ContainsHeaderStrings();
    public StringList get_ContainsRecipientStrings();
    public StringList get_ContainsSenderStrings();
    public StringList get_ContainsSubjectOrBodyStrings();
    public StringList get_ContainsSubjectStrings();
    public Nullable`1<FlaggedForAction> get_FlaggedForAction();
    public void set_FlaggedForAction(Nullable`1<FlaggedForAction> value);
    public EmailAddressCollection get_FromAddresses();
    public bool get_HasAttachments();
    public void set_HasAttachments(bool value);
    public Nullable`1<Importance> get_Importance();
    public void set_Importance(Nullable`1<Importance> value);
    public bool get_IsApprovalRequest();
    public void set_IsApprovalRequest(bool value);
    public bool get_IsAutomaticForward();
    public void set_IsAutomaticForward(bool value);
    public bool get_IsAutomaticReply();
    public void set_IsAutomaticReply(bool value);
    public bool get_IsEncrypted();
    public void set_IsEncrypted(bool value);
    public bool get_IsMeetingRequest();
    public void set_IsMeetingRequest(bool value);
    public bool get_IsMeetingResponse();
    public void set_IsMeetingResponse(bool value);
    public bool get_IsNonDeliveryReport();
    public void set_IsNonDeliveryReport(bool value);
    public bool get_IsPermissionControlled();
    public void set_IsPermissionControlled(bool value);
    public bool get_IsSigned();
    public void set_IsSigned(bool value);
    public bool get_IsVoicemail();
    public void set_IsVoicemail(bool value);
    public bool get_IsReadReceipt();
    public void set_IsReadReceipt(bool value);
    public StringList get_FromConnectedAccounts();
    public StringList get_ItemClasses();
    public StringList get_MessageClassifications();
    public bool get_NotSentToMe();
    public void set_NotSentToMe(bool value);
    public bool get_SentCcMe();
    public void set_SentCcMe(bool value);
    public bool get_SentOnlyToMe();
    public void set_SentOnlyToMe(bool value);
    public EmailAddressCollection get_SentToAddresses();
    public bool get_SentToMe();
    public void set_SentToMe(bool value);
    public bool get_SentToOrCcMe();
    public void set_SentToOrCcMe(bool value);
    public Nullable`1<Sensitivity> get_Sensitivity();
    public void set_Sensitivity(Nullable`1<Sensitivity> value);
    public RulePredicateDateRange get_WithinDateRange();
    public RulePredicateSizeRange get_WithinSizeRange();
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual void InternalValidate();
}
public class Microsoft.Exchange.WebServices.Data.RulePredicateSizeRange : ComplexProperty {
    private Nullable`1<int> minimumSize;
    private Nullable`1<int> maximumSize;
    public Nullable`1<int> MinimumSize { get; public set; }
    public Nullable`1<int> MaximumSize { get; public set; }
    public Nullable`1<int> get_MinimumSize();
    public void set_MinimumSize(Nullable`1<int> value);
    public Nullable`1<int> get_MaximumSize();
    public void set_MaximumSize(Nullable`1<int> value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual void InternalValidate();
}
public enum Microsoft.Exchange.WebServices.Data.RuleProperty : Enum {
    public int value__;
    [EwsEnumAttribute("RuleId")]
public static RuleProperty RuleId;
    [EwsEnumAttribute("DisplayName")]
public static RuleProperty DisplayName;
    [EwsEnumAttribute("Priority")]
public static RuleProperty Priority;
    [EwsEnumAttribute("IsNotSupported")]
public static RuleProperty IsNotSupported;
    [EwsEnumAttribute("Actions")]
public static RuleProperty Actions;
    [EwsEnumAttribute("Condition:Categories")]
public static RuleProperty ConditionCategories;
    [EwsEnumAttribute("Condition:ContainsBodyStrings")]
public static RuleProperty ConditionContainsBodyStrings;
    [EwsEnumAttribute("Condition:ContainsHeaderStrings")]
public static RuleProperty ConditionContainsHeaderStrings;
    [EwsEnumAttribute("Condition:ContainsRecipientStrings")]
public static RuleProperty ConditionContainsRecipientStrings;
    [EwsEnumAttribute("Condition:ContainsSenderStrings")]
public static RuleProperty ConditionContainsSenderStrings;
    [EwsEnumAttribute("Condition:ContainsSubjectOrBodyStrings")]
public static RuleProperty ConditionContainsSubjectOrBodyStrings;
    [EwsEnumAttribute("Condition:ContainsSubjectStrings")]
public static RuleProperty ConditionContainsSubjectStrings;
    [EwsEnumAttribute("Condition:FlaggedForAction")]
public static RuleProperty ConditionFlaggedForAction;
    [EwsEnumAttribute("Condition:FromAddresses")]
public static RuleProperty ConditionFromAddresses;
    [EwsEnumAttribute("Condition:FromConnectedAccounts")]
public static RuleProperty ConditionFromConnectedAccounts;
    [EwsEnumAttribute("Condition:HasAttachments")]
public static RuleProperty ConditionHasAttachments;
    [EwsEnumAttribute("Condition:Importance")]
public static RuleProperty ConditionImportance;
    [EwsEnumAttribute("Condition:IsApprovalRequest")]
public static RuleProperty ConditionIsApprovalRequest;
    [EwsEnumAttribute("Condition:IsAutomaticForward")]
public static RuleProperty ConditionIsAutomaticForward;
    [EwsEnumAttribute("Condition:IsAutomaticReply")]
public static RuleProperty ConditionIsAutomaticReply;
    [EwsEnumAttribute("Condition:IsEncrypted")]
public static RuleProperty ConditionIsEncrypted;
    [EwsEnumAttribute("Condition:IsMeetingRequest")]
public static RuleProperty ConditionIsMeetingRequest;
    [EwsEnumAttribute("Condition:IsMeetingResponse")]
public static RuleProperty ConditionIsMeetingResponse;
    [EwsEnumAttribute("Condition:IsNDR")]
public static RuleProperty ConditionIsNonDeliveryReport;
    [EwsEnumAttribute("Condition:IsPermissionControlled")]
public static RuleProperty ConditionIsPermissionControlled;
    [EwsEnumAttribute("Condition:IsRead")]
public static RuleProperty ConditionIsRead;
    [EwsEnumAttribute("Condition:IsSigned")]
public static RuleProperty ConditionIsSigned;
    [EwsEnumAttribute("Condition:IsVoicemail")]
public static RuleProperty ConditionIsVoicemail;
    [EwsEnumAttribute("Condition:IsReadReceipt")]
public static RuleProperty ConditionIsReadReceipt;
    [EwsEnumAttribute("Condition:ItemClasses")]
public static RuleProperty ConditionItemClasses;
    [EwsEnumAttribute("Condition:MessageClassifications")]
public static RuleProperty ConditionMessageClassifications;
    [EwsEnumAttribute("Condition:NotSentToMe")]
public static RuleProperty ConditionNotSentToMe;
    [EwsEnumAttribute("Condition:SentCcMe")]
public static RuleProperty ConditionSentCcMe;
    [EwsEnumAttribute("Condition:SentOnlyToMe")]
public static RuleProperty ConditionSentOnlyToMe;
    [EwsEnumAttribute("Condition:SentToAddresses")]
public static RuleProperty ConditionSentToAddresses;
    [EwsEnumAttribute("Condition:SentToMe")]
public static RuleProperty ConditionSentToMe;
    [EwsEnumAttribute("Condition:SentToOrCcMe")]
public static RuleProperty ConditionSentToOrCcMe;
    [EwsEnumAttribute("Condition:Sensitivity")]
public static RuleProperty ConditionSensitivity;
    [EwsEnumAttribute("Condition:WithinDateRange")]
public static RuleProperty ConditionWithinDateRange;
    [EwsEnumAttribute("Condition:WithinSizeRange")]
public static RuleProperty ConditionWithinSizeRange;
    [EwsEnumAttribute("Exception:Categories")]
public static RuleProperty ExceptionCategories;
    [EwsEnumAttribute("Exception:ContainsBodyStrings")]
public static RuleProperty ExceptionContainsBodyStrings;
    [EwsEnumAttribute("Exception:ContainsHeaderStrings")]
public static RuleProperty ExceptionContainsHeaderStrings;
    [EwsEnumAttribute("Exception:ContainsRecipientStrings")]
public static RuleProperty ExceptionContainsRecipientStrings;
    [EwsEnumAttribute("Exception:ContainsSenderStrings")]
public static RuleProperty ExceptionContainsSenderStrings;
    [EwsEnumAttribute("Exception:ContainsSubjectOrBodyStrings")]
public static RuleProperty ExceptionContainsSubjectOrBodyStrings;
    [EwsEnumAttribute("Exception:ContainsSubjectStrings")]
public static RuleProperty ExceptionContainsSubjectStrings;
    [EwsEnumAttribute("Exception:FlaggedForAction")]
public static RuleProperty ExceptionFlaggedForAction;
    [EwsEnumAttribute("Exception:FromAddresses")]
public static RuleProperty ExceptionFromAddresses;
    [EwsEnumAttribute("Exception:FromConnectedAccounts")]
public static RuleProperty ExceptionFromConnectedAccounts;
    [EwsEnumAttribute("Exception:HasAttachments")]
public static RuleProperty ExceptionHasAttachments;
    [EwsEnumAttribute("Exception:Importance")]
public static RuleProperty ExceptionImportance;
    [EwsEnumAttribute("Exception:IsApprovalRequest")]
public static RuleProperty ExceptionIsApprovalRequest;
    [EwsEnumAttribute("Exception:IsAutomaticForward")]
public static RuleProperty ExceptionIsAutomaticForward;
    [EwsEnumAttribute("Exception:IsAutomaticReply")]
public static RuleProperty ExceptionIsAutomaticReply;
    [EwsEnumAttribute("Exception:IsEncrypted")]
public static RuleProperty ExceptionIsEncrypted;
    [EwsEnumAttribute("Exception:IsMeetingRequest")]
public static RuleProperty ExceptionIsMeetingRequest;
    [EwsEnumAttribute("Exception:IsMeetingResponse")]
public static RuleProperty ExceptionIsMeetingResponse;
    [EwsEnumAttribute("Exception:IsNDR")]
public static RuleProperty ExceptionIsNonDeliveryReport;
    [EwsEnumAttribute("Exception:IsPermissionControlled")]
public static RuleProperty ExceptionIsPermissionControlled;
    [EwsEnumAttribute("Exception:IsRead")]
public static RuleProperty ExceptionIsRead;
    [EwsEnumAttribute("Exception:IsSigned")]
public static RuleProperty ExceptionIsSigned;
    [EwsEnumAttribute("Exception:IsVoicemail")]
public static RuleProperty ExceptionIsVoicemail;
    [EwsEnumAttribute("Exception:ItemClasses")]
public static RuleProperty ExceptionItemClasses;
    [EwsEnumAttribute("Exception:MessageClassifications")]
public static RuleProperty ExceptionMessageClassifications;
    [EwsEnumAttribute("Exception:NotSentToMe")]
public static RuleProperty ExceptionNotSentToMe;
    [EwsEnumAttribute("Exception:SentCcMe")]
public static RuleProperty ExceptionSentCcMe;
    [EwsEnumAttribute("Exception:SentOnlyToMe")]
public static RuleProperty ExceptionSentOnlyToMe;
    [EwsEnumAttribute("Exception:SentToAddresses")]
public static RuleProperty ExceptionSentToAddresses;
    [EwsEnumAttribute("Exception:SentToMe")]
public static RuleProperty ExceptionSentToMe;
    [EwsEnumAttribute("Exception:SentToOrCcMe")]
public static RuleProperty ExceptionSentToOrCcMe;
    [EwsEnumAttribute("Exception:Sensitivity")]
public static RuleProperty ExceptionSensitivity;
    [EwsEnumAttribute("Exception:WithinDateRange")]
public static RuleProperty ExceptionWithinDateRange;
    [EwsEnumAttribute("Exception:WithinSizeRange")]
public static RuleProperty ExceptionWithinSizeRange;
    [EwsEnumAttribute("Action:Categories")]
public static RuleProperty ActionCategories;
    [EwsEnumAttribute("Action:CopyToFolder")]
public static RuleProperty ActionCopyToFolder;
    [EwsEnumAttribute("Action:Delete")]
public static RuleProperty ActionDelete;
    [EwsEnumAttribute("Action:ForwardAsAttachmentToRecipients")]
public static RuleProperty ActionForwardAsAttachmentToRecipients;
    [EwsEnumAttribute("Action:ForwardToRecipients")]
public static RuleProperty ActionForwardToRecipients;
    [EwsEnumAttribute("Action:Importance")]
public static RuleProperty ActionImportance;
    [EwsEnumAttribute("Action:MarkAsRead")]
public static RuleProperty ActionMarkAsRead;
    [EwsEnumAttribute("Action:MoveToFolder")]
public static RuleProperty ActionMoveToFolder;
    [EwsEnumAttribute("Action:PermanentDelete")]
public static RuleProperty ActionPermanentDelete;
    [EwsEnumAttribute("Action:RedirectToRecipients")]
public static RuleProperty ActionRedirectToRecipients;
    [EwsEnumAttribute("Action:SendSMSAlertToRecipients")]
public static RuleProperty ActionSendSMSAlertToRecipients;
    [EwsEnumAttribute("Action:ServerReplyWithMessage")]
public static RuleProperty ActionServerReplyWithMessage;
    [EwsEnumAttribute("Action:StopProcessingRules")]
public static RuleProperty ActionStopProcessingRules;
    [EwsEnumAttribute("IsEnabled")]
public static RuleProperty IsEnabled;
    [EwsEnumAttribute("IsInError")]
public static RuleProperty IsInError;
    [EwsEnumAttribute("Conditions")]
public static RuleProperty Conditions;
    [EwsEnumAttribute("Exceptions")]
public static RuleProperty Exceptions;
}
internal class Microsoft.Exchange.WebServices.Data.SafeXmlDocument : XmlDocument {
    private XmlReaderSettings settings;
    public SafeXmlDocument(XmlImplementation imp);
    public SafeXmlDocument(XmlNameTable nt);
    public virtual void Load(Stream inStream);
    public virtual void Load(TextReader txtReader);
    public virtual void Load(XmlReader reader);
    public virtual void LoadXml(string xml);
}
internal class Microsoft.Exchange.WebServices.Data.SafeXmlFactory : object {
    private static XmlReaderSettings defaultSettings;
    private static SafeXmlFactory();
    public static XmlReader CreateSafeXmlTextReader(Stream stream);
    public static XmlReader CreateSafeXmlTextReader(string url);
    public static XmlReader CreateSafeXmlTextReader(TextReader input);
    public static XmlReader CreateSafeXmlTextReader(Stream input, XmlNameTable nt);
    public static XmlReader CreateSafeXmlTextReader(string url, XmlNameTable nt);
    public static XmlReader CreateSafeXmlTextReader(TextReader input, XmlNameTable nt);
    public static XPathDocument CreateXPathDocument(Stream stream);
    public static XPathDocument CreateXPathDocument(string uri);
    public static XPathDocument CreateXPathDocument(TextReader textReader);
    public static XPathDocument CreateXPathDocument(XmlReader reader);
    public static XPathDocument CreateXPathDocument(string uri, XmlSpace space);
    public static XPathDocument CreateXPathDocument(XmlReader reader, XmlSpace space);
}
internal class Microsoft.Exchange.WebServices.Data.SafeXmlSchema : XmlSchema {
    private static XmlReaderSettings defaultSettings;
    private static SafeXmlSchema();
    public static XmlSchema Read(Stream stream, ValidationEventHandler validationEventHandler);
    public static XmlSchema Read(TextReader reader, ValidationEventHandler validationEventHandler);
    public static XmlSchema Read(XmlReader reader, ValidationEventHandler validationEventHandler);
}
[AttributeUsageAttribute("4")]
internal class Microsoft.Exchange.WebServices.Data.SchemaAttribute : Attribute {
}
internal class Microsoft.Exchange.WebServices.Data.ScopedDateTimePropertyDefinition : DateTimePropertyDefinition {
    private GetPropertyDefinitionCallback getPropertyDefinitionCallback;
    internal ScopedDateTimePropertyDefinition(string xmlElementName, string uri, PropertyDefinitionFlags flags, ExchangeVersion version, GetPropertyDefinitionCallback getPropertyDefinitionCallback);
    private PropertyDefinition GetTimeZoneProperty(ExchangeVersion version);
    internal virtual DateTime ScopeToTimeZone(ExchangeServiceBase service, DateTime dateTime, PropertyBag propertyBag, bool isUpdateOperation);
}
public class Microsoft.Exchange.WebServices.Data.SearchableMailbox : object {
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SmtpAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExternalMailbox>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExternalEmailAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsMembershipGroup>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReferenceId>k__BackingField;
    public Guid Guid { get; public set; }
    public string SmtpAddress { get; public set; }
    public bool IsExternalMailbox { get; public set; }
    public string ExternalEmailAddress { get; public set; }
    public string DisplayName { get; public set; }
    public bool IsMembershipGroup { get; public set; }
    public string ReferenceId { get; public set; }
    public SearchableMailbox(Guid guid, string smtpAddress, bool isExternalMailbox, string externalEmailAddress, string displayName, bool isMembershipGroup, string referenceId);
    internal static SearchableMailbox LoadFromXml(EwsServiceXmlReader reader);
    [CompilerGeneratedAttribute]
public Guid get_Guid();
    [CompilerGeneratedAttribute]
public void set_Guid(Guid value);
    [CompilerGeneratedAttribute]
public string get_SmtpAddress();
    [CompilerGeneratedAttribute]
public void set_SmtpAddress(string value);
    [CompilerGeneratedAttribute]
public bool get_IsExternalMailbox();
    [CompilerGeneratedAttribute]
public void set_IsExternalMailbox(bool value);
    [CompilerGeneratedAttribute]
public string get_ExternalEmailAddress();
    [CompilerGeneratedAttribute]
public void set_ExternalEmailAddress(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public bool get_IsMembershipGroup();
    [CompilerGeneratedAttribute]
public void set_IsMembershipGroup(bool value);
    [CompilerGeneratedAttribute]
public string get_ReferenceId();
    [CompilerGeneratedAttribute]
public void set_ReferenceId(string value);
}
public abstract class Microsoft.Exchange.WebServices.Data.SearchFilter : ComplexProperty {
    internal static SearchFilter LoadFromXml(EwsServiceXmlReader reader);
    private static SearchFilter GetSearchFilterInstance(string localName);
    internal abstract virtual string GetXmlElementName();
    internal virtual void WriteToXml(EwsServiceXmlWriter writer);
}
[ServiceObjectDefinitionAttribute("SearchFolder")]
public class Microsoft.Exchange.WebServices.Data.SearchFolder : Folder {
    public SearchFolderParameters SearchParameters { get; }
    public SearchFolder(ExchangeService service);
    public static Task`1<SearchFolder> Bind(ExchangeService service, FolderId id, PropertySet propertySet, CancellationToken token);
    public static Task`1<SearchFolder> Bind(ExchangeService service, FolderId id, CancellationToken token);
    public static Task`1<SearchFolder> Bind(ExchangeService service, WellKnownFolderName name, PropertySet propertySet, CancellationToken token);
    public static Task`1<SearchFolder> Bind(ExchangeService service, WellKnownFolderName name, CancellationToken token);
    internal virtual ServiceObjectSchema GetSchema();
    internal virtual void Validate();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public SearchFolderParameters get_SearchParameters();
}
public class Microsoft.Exchange.WebServices.Data.SearchFolderParameters : ComplexProperty {
    private SearchFolderTraversal traversal;
    private FolderIdCollection rootFolderIds;
    private SearchFilter searchFilter;
    public SearchFolderTraversal Traversal { get; public set; }
    public FolderIdCollection RootFolderIds { get; }
    public SearchFilter SearchFilter { get; public set; }
    private void PropertyChanged(ComplexProperty complexProperty);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void ReadAttributesFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal void Validate();
    public SearchFolderTraversal get_Traversal();
    public void set_Traversal(SearchFolderTraversal value);
    public FolderIdCollection get_RootFolderIds();
    public SearchFilter get_SearchFilter();
    public void set_SearchFilter(SearchFilter value);
}
[SchemaAttribute]
public class Microsoft.Exchange.WebServices.Data.SearchFolderSchema : FolderSchema {
    public static PropertyDefinition SearchParameters;
    internal static SearchFolderSchema Instance;
    private static SearchFolderSchema();
    internal virtual void RegisterProperties();
}
public enum Microsoft.Exchange.WebServices.Data.SearchFolderTraversal : Enum {
    public int value__;
    public static SearchFolderTraversal Shallow;
    public static SearchFolderTraversal Deep;
}
public class Microsoft.Exchange.WebServices.Data.SearchMailboxesParameters : object {
    [CompilerGeneratedAttribute]
private MailboxQuery[] <SearchQueries>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchResultType <ResultType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SortBy>k__BackingField;
    [CompilerGeneratedAttribute]
private SortDirection <SortOrder>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PerformDeduplication>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageSize>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchPageDirection <PageDirection>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PageItemReference>k__BackingField;
    [CompilerGeneratedAttribute]
private PreviewItemResponseShape <PreviewItemResponseShape>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    public MailboxQuery[] SearchQueries { get; public set; }
    public SearchResultType ResultType { get; public set; }
    public string SortBy { get; public set; }
    public SortDirection SortOrder { get; public set; }
    public bool PerformDeduplication { get; public set; }
    public int PageSize { get; public set; }
    public SearchPageDirection PageDirection { get; public set; }
    public string PageItemReference { get; public set; }
    public PreviewItemResponseShape PreviewItemResponseShape { get; public set; }
    public string Language { get; public set; }
    [CompilerGeneratedAttribute]
public MailboxQuery[] get_SearchQueries();
    [CompilerGeneratedAttribute]
public void set_SearchQueries(MailboxQuery[] value);
    [CompilerGeneratedAttribute]
public SearchResultType get_ResultType();
    [CompilerGeneratedAttribute]
public void set_ResultType(SearchResultType value);
    [CompilerGeneratedAttribute]
public string get_SortBy();
    [CompilerGeneratedAttribute]
public void set_SortBy(string value);
    [CompilerGeneratedAttribute]
public SortDirection get_SortOrder();
    [CompilerGeneratedAttribute]
public void set_SortOrder(SortDirection value);
    [CompilerGeneratedAttribute]
public bool get_PerformDeduplication();
    [CompilerGeneratedAttribute]
public void set_PerformDeduplication(bool value);
    [CompilerGeneratedAttribute]
public int get_PageSize();
    [CompilerGeneratedAttribute]
public void set_PageSize(int value);
    [CompilerGeneratedAttribute]
public SearchPageDirection get_PageDirection();
    [CompilerGeneratedAttribute]
public void set_PageDirection(SearchPageDirection value);
    [CompilerGeneratedAttribute]
public string get_PageItemReference();
    [CompilerGeneratedAttribute]
public void set_PageItemReference(string value);
    [CompilerGeneratedAttribute]
public PreviewItemResponseShape get_PreviewItemResponseShape();
    [CompilerGeneratedAttribute]
public void set_PreviewItemResponseShape(PreviewItemResponseShape value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
}
internal class Microsoft.Exchange.WebServices.Data.SearchMailboxesRequest : MultiResponseServiceRequest`1<SearchMailboxesResponse> {
    private List`1<MailboxQuery> searchQueries;
    private SearchResultType searchResultType;
    private SortDirection sortOrder;
    private string sortByProperty;
    private bool performDeduplication;
    private int pageSize;
    private string pageItemReference;
    private SearchPageDirection pageDirection;
    private PreviewItemResponseShape previewItemResponseShape;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Microsoft.Exchange.WebServices.Data.IDiscoveryVersionable.ServerVersion>k__BackingField;
    public List`1<MailboxQuery> SearchQueries { get; public set; }
    public SearchResultType ResultType { get; public set; }
    public PreviewItemResponseShape PreviewItemResponseShape { get; public set; }
    public SortDirection SortOrder { get; public set; }
    public string SortByProperty { get; public set; }
    public string Language { get; public set; }
    public bool PerformDeduplication { get; public set; }
    public int PageSize { get; public set; }
    public string PageItemReference { get; public set; }
    public SearchPageDirection PageDirection { get; public set; }
    private long Microsoft.Exchange.WebServices.Data.IDiscoveryVersionable.ServerVersion { get; private set; }
    internal SearchMailboxesRequest(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual SearchMailboxesResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual string GetXmlElementName();
    internal virtual void Validate();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public List`1<MailboxQuery> get_SearchQueries();
    public void set_SearchQueries(List`1<MailboxQuery> value);
    public SearchResultType get_ResultType();
    public void set_ResultType(SearchResultType value);
    public PreviewItemResponseShape get_PreviewItemResponseShape();
    public void set_PreviewItemResponseShape(PreviewItemResponseShape value);
    public SortDirection get_SortOrder();
    public void set_SortOrder(SortDirection value);
    public string get_SortByProperty();
    public void set_SortByProperty(string value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    public bool get_PerformDeduplication();
    public void set_PerformDeduplication(bool value);
    public int get_PageSize();
    public void set_PageSize(int value);
    public string get_PageItemReference();
    public void set_PageItemReference(string value);
    public SearchPageDirection get_PageDirection();
    public void set_PageDirection(SearchPageDirection value);
    [CompilerGeneratedAttribute]
private sealed virtual override long Microsoft.Exchange.WebServices.Data.IDiscoveryVersionable.get_ServerVersion();
    [CompilerGeneratedAttribute]
private sealed virtual override void Microsoft.Exchange.WebServices.Data.IDiscoveryVersionable.set_ServerVersion(long value);
}
public class Microsoft.Exchange.WebServices.Data.SearchMailboxesResponse : ServiceResponse {
    private SearchMailboxesResult searchResult;
    public SearchMailboxesResult SearchResult { get; internal set; }
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    public SearchMailboxesResult get_SearchResult();
    internal void set_SearchResult(SearchMailboxesResult value);
}
public class Microsoft.Exchange.WebServices.Data.SearchMailboxesResult : object {
    [CompilerGeneratedAttribute]
private MailboxQuery[] <SearchQueries>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchResultType <ResultType>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ItemCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PageItemCount>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <PageItemSize>k__BackingField;
    [CompilerGeneratedAttribute]
private KeywordStatisticsSearchResult[] <KeywordStats>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchPreviewItem[] <PreviewItems>k__BackingField;
    [CompilerGeneratedAttribute]
private FailedSearchMailbox[] <FailedMailboxes>k__BackingField;
    [CompilerGeneratedAttribute]
private SearchRefinerItem[] <Refiners>k__BackingField;
    [CompilerGeneratedAttribute]
private MailboxStatisticsItem[] <MailboxStats>k__BackingField;
    public MailboxQuery[] SearchQueries { get; public set; }
    public SearchResultType ResultType { get; public set; }
    public long ItemCount { get; public set; }
    [CLSCompliantAttribute("False")]
public ulong Size { get; public set; }
    public int PageItemCount { get; public set; }
    [CLSCompliantAttribute("False")]
public ulong PageItemSize { get; public set; }
    public KeywordStatisticsSearchResult[] KeywordStats { get; public set; }
    public SearchPreviewItem[] PreviewItems { get; public set; }
    public FailedSearchMailbox[] FailedMailboxes { get; public set; }
    public SearchRefinerItem[] Refiners { get; public set; }
    public MailboxStatisticsItem[] MailboxStats { get; public set; }
    internal static SearchMailboxesResult LoadFromXml(EwsServiceXmlReader reader);
    private static KeywordStatisticsSearchResult[] LoadKeywordStatsXml(EwsServiceXmlReader reader);
    private static SearchPreviewItem[] LoadPreviewItemsXml(EwsServiceXmlReader reader);
    private static String[] GetRecipients(EwsServiceXmlReader reader, string elementName);
    private static ExtendedPropertyCollection LoadExtendedPropertiesXml(EwsServiceXmlReader reader);
    [CompilerGeneratedAttribute]
public MailboxQuery[] get_SearchQueries();
    [CompilerGeneratedAttribute]
public void set_SearchQueries(MailboxQuery[] value);
    [CompilerGeneratedAttribute]
public SearchResultType get_ResultType();
    [CompilerGeneratedAttribute]
public void set_ResultType(SearchResultType value);
    [CompilerGeneratedAttribute]
public long get_ItemCount();
    [CompilerGeneratedAttribute]
public void set_ItemCount(long value);
    [CompilerGeneratedAttribute]
public ulong get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(ulong value);
    [CompilerGeneratedAttribute]
public int get_PageItemCount();
    [CompilerGeneratedAttribute]
public void set_PageItemCount(int value);
    [CompilerGeneratedAttribute]
public ulong get_PageItemSize();
    [CompilerGeneratedAttribute]
public void set_PageItemSize(ulong value);
    [CompilerGeneratedAttribute]
public KeywordStatisticsSearchResult[] get_KeywordStats();
    [CompilerGeneratedAttribute]
public void set_KeywordStats(KeywordStatisticsSearchResult[] value);
    [CompilerGeneratedAttribute]
public SearchPreviewItem[] get_PreviewItems();
    [CompilerGeneratedAttribute]
public void set_PreviewItems(SearchPreviewItem[] value);
    [CompilerGeneratedAttribute]
public FailedSearchMailbox[] get_FailedMailboxes();
    [CompilerGeneratedAttribute]
public void set_FailedMailboxes(FailedSearchMailbox[] value);
    [CompilerGeneratedAttribute]
public SearchRefinerItem[] get_Refiners();
    [CompilerGeneratedAttribute]
public void set_Refiners(SearchRefinerItem[] value);
    [CompilerGeneratedAttribute]
public MailboxStatisticsItem[] get_MailboxStats();
    [CompilerGeneratedAttribute]
public void set_MailboxStats(MailboxStatisticsItem[] value);
}
public enum Microsoft.Exchange.WebServices.Data.SearchPageDirection : Enum {
    public int value__;
    public static SearchPageDirection Next;
    public static SearchPageDirection Previous;
}
public class Microsoft.Exchange.WebServices.Data.SearchPreviewItem : object {
    [CompilerGeneratedAttribute]
private ItemId <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private PreviewItemMailbox <Mailbox>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemId <ParentId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemClass>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UniqueHash>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SortValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OwaLink>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Sender>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ToRecipients>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <CcRecipients>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <BccRecipients>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ReceivedTime>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <SentTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Subject>k__BackingField;
    [CompilerGeneratedAttribute]
private ulong <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Preview>k__BackingField;
    [CompilerGeneratedAttribute]
private Importance <Importance>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Read>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasAttachment>k__BackingField;
    [CompilerGeneratedAttribute]
private ExtendedPropertyCollection <ExtendedProperties>k__BackingField;
    public ItemId Id { get; public set; }
    public PreviewItemMailbox Mailbox { get; public set; }
    public ItemId ParentId { get; public set; }
    public string ItemClass { get; public set; }
    public string UniqueHash { get; public set; }
    public string SortValue { get; public set; }
    public string OwaLink { get; public set; }
    public string Sender { get; public set; }
    public String[] ToRecipients { get; public set; }
    public String[] CcRecipients { get; public set; }
    public String[] BccRecipients { get; public set; }
    public DateTime CreatedTime { get; public set; }
    public DateTime ReceivedTime { get; public set; }
    public DateTime SentTime { get; public set; }
    public string Subject { get; public set; }
    [CLSCompliantAttribute("False")]
public ulong Size { get; public set; }
    public string Preview { get; public set; }
    public Importance Importance { get; public set; }
    public bool Read { get; public set; }
    public bool HasAttachment { get; public set; }
    public ExtendedPropertyCollection ExtendedProperties { get; public set; }
    [CompilerGeneratedAttribute]
public ItemId get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(ItemId value);
    [CompilerGeneratedAttribute]
public PreviewItemMailbox get_Mailbox();
    [CompilerGeneratedAttribute]
public void set_Mailbox(PreviewItemMailbox value);
    [CompilerGeneratedAttribute]
public ItemId get_ParentId();
    [CompilerGeneratedAttribute]
public void set_ParentId(ItemId value);
    [CompilerGeneratedAttribute]
public string get_ItemClass();
    [CompilerGeneratedAttribute]
public void set_ItemClass(string value);
    [CompilerGeneratedAttribute]
public string get_UniqueHash();
    [CompilerGeneratedAttribute]
public void set_UniqueHash(string value);
    [CompilerGeneratedAttribute]
public string get_SortValue();
    [CompilerGeneratedAttribute]
public void set_SortValue(string value);
    [CompilerGeneratedAttribute]
public string get_OwaLink();
    [CompilerGeneratedAttribute]
public void set_OwaLink(string value);
    [CompilerGeneratedAttribute]
public string get_Sender();
    [CompilerGeneratedAttribute]
public void set_Sender(string value);
    [CompilerGeneratedAttribute]
public String[] get_ToRecipients();
    [CompilerGeneratedAttribute]
public void set_ToRecipients(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_CcRecipients();
    [CompilerGeneratedAttribute]
public void set_CcRecipients(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_BccRecipients();
    [CompilerGeneratedAttribute]
public void set_BccRecipients(String[] value);
    [CompilerGeneratedAttribute]
public DateTime get_CreatedTime();
    [CompilerGeneratedAttribute]
public void set_CreatedTime(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_ReceivedTime();
    [CompilerGeneratedAttribute]
public void set_ReceivedTime(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_SentTime();
    [CompilerGeneratedAttribute]
public void set_SentTime(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(string value);
    [CompilerGeneratedAttribute]
public ulong get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(ulong value);
    [CompilerGeneratedAttribute]
public string get_Preview();
    [CompilerGeneratedAttribute]
public void set_Preview(string value);
    [CompilerGeneratedAttribute]
public Importance get_Importance();
    [CompilerGeneratedAttribute]
public void set_Importance(Importance value);
    [CompilerGeneratedAttribute]
public bool get_Read();
    [CompilerGeneratedAttribute]
public void set_Read(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasAttachment();
    [CompilerGeneratedAttribute]
public void set_HasAttachment(bool value);
    [CompilerGeneratedAttribute]
public ExtendedPropertyCollection get_ExtendedProperties();
    [CompilerGeneratedAttribute]
public void set_ExtendedProperties(ExtendedPropertyCollection value);
}
public class Microsoft.Exchange.WebServices.Data.SearchRefinerItem : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Token>k__BackingField;
    public string Name { get; public set; }
    public string Value { get; public set; }
    public long Count { get; public set; }
    public string Token { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    [CompilerGeneratedAttribute]
public long get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(long value);
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public void set_Token(string value);
    internal static SearchRefinerItem LoadFromXml(EwsServiceXmlReader reader);
}
public enum Microsoft.Exchange.WebServices.Data.SearchResultType : Enum {
    public int value__;
    public static SearchResultType StatisticsOnly;
    public static SearchResultType PreviewOnly;
}
internal class Microsoft.Exchange.WebServices.Data.SecurityTimestamp : object {
    internal static string DefaultTimestampValidityDurationString;
    internal static TimeSpan DefaultTimestampValidityDuration;
    internal static string DefaultFormat;
    internal static TimeSpan DefaultTimeToLive;
    private string id;
    private string digestAlgorithm;
    private Byte[] digest;
    private Char[] computedCreationTimeUtc;
    private Char[] computedExpiryTimeUtc;
    private DateTime creationTimeUtc;
    private DateTime expiryTimeUtc;
    public DateTime CreationTimeUtc { get; }
    public DateTime ExpiryTimeUtc { get; }
    public string Id { get; }
    public string DigestAlgorithm { get; }
    public SecurityTimestamp(DateTime creationTimeUtc, DateTime expiryTimeUtc, string id);
    internal SecurityTimestamp(DateTime creationTimeUtc, DateTime expiryTimeUtc, string id, string digestAlgorithm, Byte[] digest);
    private static SecurityTimestamp();
    public DateTime get_CreationTimeUtc();
    public DateTime get_ExpiryTimeUtc();
    public string get_Id();
    public string get_DigestAlgorithm();
    internal Byte[] GetDigest();
    internal Char[] GetCreationTimeChars();
    internal Char[] GetExpiryTimeChars();
    private static Char[] ToChars(DateTime& utcTime);
    private static void ToChars(int n, Char[] buffer, Int32& offset, int count);
    public virtual string ToString();
}
public class Microsoft.Exchange.WebServices.Data.SeekToConditionItemView : ViewBase {
    private int pageSize;
    private ItemTraversal traversal;
    private SearchFilter condition;
    private OffsetBasePoint offsetBasePoint;
    private OrderByCollection orderBy;
    private ServiceObjectType serviceObjType;
    public int PageSize { get; public set; }
    public OffsetBasePoint OffsetBasePoint { get; public set; }
    public SearchFilter Condition { get; public set; }
    public ItemTraversal Traversal { get; public set; }
    public OrderByCollection OrderBy { get; }
    public SeekToConditionItemView(SearchFilter condition, int pageSize);
    public SeekToConditionItemView(SearchFilter condition, int pageSize, OffsetBasePoint offsetBasePoint);
    internal virtual ServiceObjectType GetServiceObjectType();
    internal void SetServiceObjectType(ServiceObjectType objType);
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual string GetViewXmlElementName();
    internal virtual void InternalValidate(ServiceRequestBase request);
    internal virtual void InternalWriteViewToXml(EwsServiceXmlWriter writer);
    internal virtual void InternalWriteSearchSettingsToXml(EwsServiceXmlWriter writer, Grouping groupBy);
    internal virtual Nullable`1<int> GetMaxEntriesReturned();
    internal virtual void WriteOrderByToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteToXml(EwsServiceXmlWriter writer, Grouping groupBy);
    public int get_PageSize();
    public void set_PageSize(int value);
    public OffsetBasePoint get_OffsetBasePoint();
    public void set_OffsetBasePoint(OffsetBasePoint value);
    public SearchFilter get_Condition();
    public void set_Condition(SearchFilter value);
    public ItemTraversal get_Traversal();
    public void set_Traversal(ItemTraversal value);
    public OrderByCollection get_OrderBy();
}
public enum Microsoft.Exchange.WebServices.Data.SendCancellationsMode : Enum {
    public int value__;
    public static SendCancellationsMode SendToNone;
    public static SendCancellationsMode SendOnlyToAll;
    public static SendCancellationsMode SendToAllAndSaveCopy;
}
public enum Microsoft.Exchange.WebServices.Data.SendInvitationsMode : Enum {
    public int value__;
    public static SendInvitationsMode SendToNone;
    public static SendInvitationsMode SendOnlyToAll;
    public static SendInvitationsMode SendToAllAndSaveCopy;
}
public enum Microsoft.Exchange.WebServices.Data.SendInvitationsOrCancellationsMode : Enum {
    public int value__;
    public static SendInvitationsOrCancellationsMode SendToNone;
    public static SendInvitationsOrCancellationsMode SendOnlyToAll;
    public static SendInvitationsOrCancellationsMode SendOnlyToChanged;
    public static SendInvitationsOrCancellationsMode SendToAllAndSaveCopy;
    public static SendInvitationsOrCancellationsMode SendToChangedAndSaveCopy;
}
internal class Microsoft.Exchange.WebServices.Data.SendItemRequest : MultiResponseServiceRequest`1<ServiceResponse> {
    private IEnumerable`1<Item> items;
    private FolderId savedCopyDestinationFolderId;
    public IEnumerable`1<Item> Items { get; public set; }
    public FolderId SavedCopyDestinationFolderId { get; public set; }
    internal SendItemRequest(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual void Validate();
    internal virtual ServiceResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public IEnumerable`1<Item> get_Items();
    public void set_Items(IEnumerable`1<Item> value);
    public FolderId get_SavedCopyDestinationFolderId();
    public void set_SavedCopyDestinationFolderId(FolderId value);
}
public enum Microsoft.Exchange.WebServices.Data.SendPrompt : Enum {
    public int value__;
    public static SendPrompt None;
    public static SendPrompt Send;
    public static SendPrompt VotingOption;
}
public enum Microsoft.Exchange.WebServices.Data.Sensitivity : Enum {
    public int value__;
    public static Sensitivity Normal;
    public static Sensitivity Personal;
    public static Sensitivity Private;
    public static Sensitivity Confidential;
}
public class Microsoft.Exchange.WebServices.Data.ServerBusyException : ServiceResponseException {
    private static string BackOffMillisecondsKey;
    private int backOffMilliseconds;
    public int BackOffMilliseconds { get; }
    public ServerBusyException(ServiceResponse response);
    protected ServerBusyException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public int get_BackOffMilliseconds();
}
public enum Microsoft.Exchange.WebServices.Data.ServiceError : Enum {
    public int value__;
    public static ServiceError NoError;
    public static ServiceError ErrorAccessDenied;
    public static ServiceError ErrorAccessModeSpecified;
    public static ServiceError ErrorAccountDisabled;
    public static ServiceError ErrorAddDelegatesFailed;
    public static ServiceError ErrorAddressSpaceNotFound;
    public static ServiceError ErrorADOperation;
    public static ServiceError ErrorADSessionFilter;
    public static ServiceError ErrorADUnavailable;
    public static ServiceError ErrorAffectedTaskOccurrencesRequired;
    public static ServiceError ErrorApplyConversationActionFailed;
    public static ServiceError ErrorArchiveMailboxNotEnabled;
    public static ServiceError ErrorArchiveFolderPathCreation;
    public static ServiceError ErrorArchiveMailboxServiceDiscoveryFailed;
    public static ServiceError ErrorAttachmentNestLevelLimitExceeded;
    public static ServiceError ErrorAttachmentSizeLimitExceeded;
    public static ServiceError ErrorAutoDiscoverFailed;
    public static ServiceError ErrorAvailabilityConfigNotFound;
    public static ServiceError ErrorBatchProcessingStopped;
    public static ServiceError ErrorCalendarCannotMoveOrCopyOccurrence;
    public static ServiceError ErrorCalendarCannotUpdateDeletedItem;
    public static ServiceError ErrorCalendarCannotUseIdForOccurrenceId;
    public static ServiceError ErrorCalendarCannotUseIdForRecurringMasterId;
    public static ServiceError ErrorCalendarDurationIsTooLong;
    public static ServiceError ErrorCalendarEndDateIsEarlierThanStartDate;
    public static ServiceError ErrorCalendarFolderIsInvalidForCalendarView;
    public static ServiceError ErrorCalendarInvalidAttributeValue;
    public static ServiceError ErrorCalendarInvalidDayForTimeChangePattern;
    public static ServiceError ErrorCalendarInvalidDayForWeeklyRecurrence;
    public static ServiceError ErrorCalendarInvalidPropertyState;
    public static ServiceError ErrorCalendarInvalidPropertyValue;
    public static ServiceError ErrorCalendarInvalidRecurrence;
    public static ServiceError ErrorCalendarInvalidTimeZone;
    public static ServiceError ErrorCalendarIsCancelledForAccept;
    public static ServiceError ErrorCalendarIsCancelledForDecline;
    public static ServiceError ErrorCalendarIsCancelledForRemove;
    public static ServiceError ErrorCalendarIsCancelledForTentative;
    public static ServiceError ErrorCalendarIsDelegatedForAccept;
    public static ServiceError ErrorCalendarIsDelegatedForDecline;
    public static ServiceError ErrorCalendarIsDelegatedForRemove;
    public static ServiceError ErrorCalendarIsDelegatedForTentative;
    public static ServiceError ErrorCalendarIsNotOrganizer;
    public static ServiceError ErrorCalendarIsOrganizerForAccept;
    public static ServiceError ErrorCalendarIsOrganizerForDecline;
    public static ServiceError ErrorCalendarIsOrganizerForRemove;
    public static ServiceError ErrorCalendarIsOrganizerForTentative;
    public static ServiceError ErrorCalendarMeetingRequestIsOutOfDate;
    public static ServiceError ErrorCalendarOccurrenceIndexIsOutOfRecurrenceRange;
    public static ServiceError ErrorCalendarOccurrenceIsDeletedFromRecurrence;
    public static ServiceError ErrorCalendarOutOfRange;
    public static ServiceError ErrorCalendarViewRangeTooBig;
    public static ServiceError ErrorCallerIsInvalidADAccount;
    public static ServiceError ErrorCannotArchiveCalendarContactTaskFolderException;
    public static ServiceError ErrorCannotArchiveItemsInArchiveMailbox;
    public static ServiceError ErrorCannotArchiveItemsInPublicFolders;
    public static ServiceError ErrorCannotCreateCalendarItemInNonCalendarFolder;
    public static ServiceError ErrorCannotCreateContactInNonContactFolder;
    public static ServiceError ErrorCannotCreatePostItemInNonMailFolder;
    public static ServiceError ErrorCannotCreateTaskInNonTaskFolder;
    public static ServiceError ErrorCannotDeleteObject;
    public static ServiceError ErrorCannotDeleteTaskOccurrence;
    public static ServiceError ErrorCannotDisableMandatoryExtension;
    public static ServiceError ErrorCannotEmptyFolder;
    public static ServiceError ErrorCannotGetExternalEcpUrl;
    public static ServiceError ErrorCannotGetSourceFolderPath;
    public static ServiceError ErrorCannotOpenFileAttachment;
    public static ServiceError ErrorCannotSetCalendarPermissionOnNonCalendarFolder;
    public static ServiceError ErrorCannotSetNonCalendarPermissionOnCalendarFolder;
    public static ServiceError ErrorCannotSetPermissionUnknownEntries;
    public static ServiceError ErrorCannotSpecifySearchFolderAsSourceFolder;
    public static ServiceError ErrorCannotUseFolderIdForItemId;
    public static ServiceError ErrorCannotUseItemIdForFolderId;
    public static ServiceError ErrorChangeKeyRequired;
    public static ServiceError ErrorChangeKeyRequiredForWriteOperations;
    public static ServiceError ErrorClientDisconnected;
    public static ServiceError ErrorConnectionFailed;
    public static ServiceError ErrorContainsFilterWrongType;
    public static ServiceError ErrorContentConversionFailed;
    public static ServiceError ErrorCorruptData;
    public static ServiceError ErrorCreateItemAccessDenied;
    public static ServiceError ErrorCreateManagedFolderPartialCompletion;
    public static ServiceError ErrorCreateSubfolderAccessDenied;
    public static ServiceError ErrorCrossMailboxMoveCopy;
    public static ServiceError ErrorCrossSiteRequest;
    public static ServiceError ErrorDataSizeLimitExceeded;
    public static ServiceError ErrorDataSourceOperation;
    public static ServiceError ErrorDelegateAlreadyExists;
    public static ServiceError ErrorDelegateCannotAddOwner;
    public static ServiceError ErrorDelegateMissingConfiguration;
    public static ServiceError ErrorDelegateNoUser;
    public static ServiceError ErrorDelegateValidationFailed;
    public static ServiceError ErrorDeleteDistinguishedFolder;
    public static ServiceError ErrorDeleteItemsFailed;
    public static ServiceError ErrorDistinguishedUserNotSupported;
    public static ServiceError ErrorDistributionListMemberNotExist;
    public static ServiceError ErrorDuplicateInputFolderNames;
    public static ServiceError ErrorDuplicateLegacyDistinguishedName;
    public static ServiceError ErrorDuplicateSOAPHeader;
    public static ServiceError ErrorDuplicateUserIdsSpecified;
    public static ServiceError ErrorEmailAddressMismatch;
    public static ServiceError ErrorEventNotFound;
    public static ServiceError ErrorExceededConnectionCount;
    public static ServiceError ErrorExceededFindCountLimit;
    public static ServiceError ErrorExceededSubscriptionCount;
    public static ServiceError ErrorExpiredSubscription;
    public static ServiceError ErrorExtensionNotFound;
    public static ServiceError ErrorFolderCorrupt;
    public static ServiceError ErrorFolderExists;
    public static ServiceError ErrorFolderNotFound;
    public static ServiceError ErrorFolderPropertRequestFailed;
    public static ServiceError ErrorFolderSave;
    public static ServiceError ErrorFolderSaveFailed;
    public static ServiceError ErrorFolderSavePropertyError;
    public static ServiceError ErrorFreeBusyDLLimitReached;
    public static ServiceError ErrorFreeBusyGenerationFailed;
    public static ServiceError ErrorGetServerSecurityDescriptorFailed;
    public static ServiceError ErrorImContactLimitReached;
    public static ServiceError ErrorImGroupDisplayNameAlreadyExists;
    public static ServiceError ErrorImGroupLimitReached;
    public static ServiceError ErrorImpersonateUserDenied;
    public static ServiceError ErrorImpersonationDenied;
    public static ServiceError ErrorImpersonationFailed;
    public static ServiceError ErrorInboxRulesValidationError;
    public static ServiceError ErrorIncorrectSchemaVersion;
    public static ServiceError ErrorIncorrectUpdatePropertyCount;
    public static ServiceError ErrorIndividualMailboxLimitReached;
    public static ServiceError ErrorInsufficientResources;
    public static ServiceError ErrorInternalServerError;
    public static ServiceError ErrorInternalServerTransientError;
    public static ServiceError ErrorInvalidAccessLevel;
    public static ServiceError ErrorInvalidArgument;
    public static ServiceError ErrorInvalidAttachmentId;
    public static ServiceError ErrorInvalidAttachmentSubfilter;
    public static ServiceError ErrorInvalidAttachmentSubfilterTextFilter;
    public static ServiceError ErrorInvalidAuthorizationContext;
    public static ServiceError ErrorInvalidChangeKey;
    public static ServiceError ErrorInvalidClientSecurityContext;
    public static ServiceError ErrorInvalidCompleteDate;
    public static ServiceError ErrorInvalidContactEmailAddress;
    public static ServiceError ErrorInvalidContactEmailIndex;
    public static ServiceError ErrorInvalidCrossForestCredentials;
    public static ServiceError ErrorInvalidDelegatePermission;
    public static ServiceError ErrorInvalidDelegateUserId;
    public static ServiceError ErrorInvalidExchangeImpersonationHeaderData;
    public static ServiceError ErrorInvalidExcludesRestriction;
    public static ServiceError ErrorInvalidExpressionTypeForSubFilter;
    public static ServiceError ErrorInvalidExtendedProperty;
    public static ServiceError ErrorInvalidExtendedPropertyValue;
    public static ServiceError ErrorInvalidExternalSharingInitiator;
    public static ServiceError ErrorInvalidExternalSharingSubscriber;
    public static ServiceError ErrorInvalidFederatedOrganizationId;
    public static ServiceError ErrorInvalidFolderId;
    public static ServiceError ErrorInvalidFolderTypeForOperation;
    public static ServiceError ErrorInvalidFractionalPagingParameters;
    public static ServiceError ErrorInvalidFreeBusyViewType;
    public static ServiceError ErrorInvalidGetSharingFolderRequest;
    public static ServiceError ErrorInvalidId;
    public static ServiceError ErrorInvalidImContactId;
    public static ServiceError ErrorInvalidImDistributionGroupSmtpAddress;
    public static ServiceError ErrorInvalidImGroupId;
    public static ServiceError ErrorInvalidIdEmpty;
    public static ServiceError ErrorInvalidIdMalformed;
    public static ServiceError ErrorInvalidIdMalformedEwsLegacyIdFormat;
    public static ServiceError ErrorInvalidIdMonikerTooLong;
    public static ServiceError ErrorInvalidIdNotAnItemAttachmentId;
    public static ServiceError ErrorInvalidIdReturnedByResolveNames;
    public static ServiceError ErrorInvalidIdStoreObjectIdTooLong;
    public static ServiceError ErrorInvalidIdTooManyAttachmentLevels;
    public static ServiceError ErrorInvalidIdXml;
    public static ServiceError ErrorInvalidIndexedPagingParameters;
    public static ServiceError ErrorInvalidInternetHeaderChildNodes;
    public static ServiceError ErrorInvalidItemForOperationAcceptItem;
    public static ServiceError ErrorInvalidItemForOperationArchiveItem;
    public static ServiceError ErrorInvalidItemForOperationCancelItem;
    public static ServiceError ErrorInvalidItemForOperationCreateItem;
    public static ServiceError ErrorInvalidItemForOperationCreateItemAttachment;
    public static ServiceError ErrorInvalidItemForOperationDeclineItem;
    public static ServiceError ErrorInvalidItemForOperationExpandDL;
    public static ServiceError ErrorInvalidItemForOperationRemoveItem;
    public static ServiceError ErrorInvalidItemForOperationSendItem;
    public static ServiceError ErrorInvalidItemForOperationTentative;
    public static ServiceError ErrorInvalidLogonType;
    public static ServiceError ErrorInvalidMailbox;
    public static ServiceError ErrorInvalidManagedFolderProperty;
    public static ServiceError ErrorInvalidManagedFolderQuota;
    public static ServiceError ErrorInvalidManagedFolderSize;
    public static ServiceError ErrorInvalidMergedFreeBusyInterval;
    public static ServiceError ErrorInvalidNameForNameResolution;
    public static ServiceError ErrorInvalidNetworkServiceContext;
    public static ServiceError ErrorInvalidOofParameter;
    public static ServiceError ErrorInvalidOperation;
    public static ServiceError ErrorInvalidOrganizationRelationshipForFreeBusy;
    public static ServiceError ErrorInvalidPagingMaxRows;
    public static ServiceError ErrorInvalidParentFolder;
    public static ServiceError ErrorInvalidPercentCompleteValue;
    public static ServiceError ErrorInvalidPermissionSettings;
    public static ServiceError ErrorInvalidPhoneCallId;
    public static ServiceError ErrorInvalidPhoneNumber;
    public static ServiceError ErrorInvalidPropertyAppend;
    public static ServiceError ErrorInvalidPropertyDelete;
    public static ServiceError ErrorInvalidPropertyForExists;
    public static ServiceError ErrorInvalidPropertyForOperation;
    public static ServiceError ErrorInvalidPropertyRequest;
    public static ServiceError ErrorInvalidPropertySet;
    public static ServiceError ErrorInvalidPropertyUpdateSentMessage;
    public static ServiceError ErrorInvalidProxySecurityContext;
    public static ServiceError ErrorInvalidPullSubscriptionId;
    public static ServiceError ErrorInvalidPushSubscriptionUrl;
    public static ServiceError ErrorInvalidRecipients;
    public static ServiceError ErrorInvalidRecipientSubfilter;
    public static ServiceError ErrorInvalidRecipientSubfilterComparison;
    public static ServiceError ErrorInvalidRecipientSubfilterOrder;
    public static ServiceError ErrorInvalidRecipientSubfilterTextFilter;
    public static ServiceError ErrorInvalidReferenceItem;
    public static ServiceError ErrorInvalidRequest;
    public static ServiceError ErrorInvalidRestriction;
    public static ServiceError ErrorInvalidRetentionTagTypeMismatch;
    public static ServiceError ErrorInvalidRetentionTagInvisible;
    public static ServiceError ErrorInvalidRetentionTagInheritance;
    public static ServiceError ErrorInvalidRetentionTagIdGuid;
    public static ServiceError ErrorInvalidRoutingType;
    public static ServiceError ErrorInvalidScheduledOofDuration;
    public static ServiceError ErrorInvalidSchemaVersionForMailboxVersion;
    public static ServiceError ErrorInvalidSecurityDescriptor;
    public static ServiceError ErrorInvalidSendItemSaveSettings;
    public static ServiceError ErrorInvalidSerializedAccessToken;
    public static ServiceError ErrorInvalidServerVersion;
    public static ServiceError ErrorInvalidSharingData;
    public static ServiceError ErrorInvalidSharingMessage;
    public static ServiceError ErrorInvalidSid;
    public static ServiceError ErrorInvalidSIPUri;
    public static ServiceError ErrorInvalidSmtpAddress;
    public static ServiceError ErrorInvalidSubfilterType;
    public static ServiceError ErrorInvalidSubfilterTypeNotAttendeeType;
    public static ServiceError ErrorInvalidSubfilterTypeNotRecipientType;
    public static ServiceError ErrorInvalidSubscription;
    public static ServiceError ErrorInvalidSubscriptionRequest;
    public static ServiceError ErrorInvalidSyncStateData;
    public static ServiceError ErrorInvalidTimeInterval;
    public static ServiceError ErrorInvalidUserInfo;
    public static ServiceError ErrorInvalidUserOofSettings;
    public static ServiceError ErrorInvalidUserPrincipalName;
    public static ServiceError ErrorInvalidUserSid;
    public static ServiceError ErrorInvalidUserSidMissingUPN;
    public static ServiceError ErrorInvalidValueForProperty;
    public static ServiceError ErrorInvalidWatermark;
    public static ServiceError ErrorIPGatewayNotFound;
    public static ServiceError ErrorIrresolvableConflict;
    public static ServiceError ErrorItemCorrupt;
    public static ServiceError ErrorItemNotFound;
    public static ServiceError ErrorItemPropertyRequestFailed;
    public static ServiceError ErrorItemSave;
    public static ServiceError ErrorItemSavePropertyError;
    public static ServiceError ErrorLegacyMailboxFreeBusyViewTypeNotMerged;
    public static ServiceError ErrorLocalServerObjectNotFound;
    public static ServiceError ErrorLogonAsNetworkServiceFailed;
    public static ServiceError ErrorMailboxConfiguration;
    public static ServiceError ErrorMailboxDataArrayEmpty;
    public static ServiceError ErrorMailboxDataArrayTooBig;
    public static ServiceError ErrorMailboxFailover;
    public static ServiceError ErrorMailboxHoldNotFound;
    public static ServiceError ErrorMailboxLogonFailed;
    public static ServiceError ErrorMailboxMoveInProgress;
    public static ServiceError ErrorMailboxStoreUnavailable;
    public static ServiceError ErrorMailRecipientNotFound;
    public static ServiceError ErrorMailTipsDisabled;
    public static ServiceError ErrorManagedFolderAlreadyExists;
    public static ServiceError ErrorManagedFolderNotFound;
    public static ServiceError ErrorManagedFoldersRootFailure;
    public static ServiceError ErrorMeetingSuggestionGenerationFailed;
    public static ServiceError ErrorMessageDispositionRequired;
    public static ServiceError ErrorMessageSizeExceeded;
    public static ServiceError ErrorMessageTrackingNoSuchDomain;
    public static ServiceError ErrorMessageTrackingPermanentError;
    public static ServiceError ErrorMessageTrackingTransientError;
    public static ServiceError ErrorMimeContentConversionFailed;
    public static ServiceError ErrorMimeContentInvalid;
    public static ServiceError ErrorMimeContentInvalidBase64String;
    public static ServiceError ErrorMissedNotificationEvents;
    public static ServiceError ErrorMissingArgument;
    public static ServiceError ErrorMissingEmailAddress;
    public static ServiceError ErrorMissingEmailAddressForManagedFolder;
    public static ServiceError ErrorMissingInformationEmailAddress;
    public static ServiceError ErrorMissingInformationReferenceItemId;
    public static ServiceError ErrorMissingInformationSharingFolderId;
    public static ServiceError ErrorMissingItemForCreateItemAttachment;
    public static ServiceError ErrorMissingManagedFolderId;
    public static ServiceError ErrorMissingRecipients;
    public static ServiceError ErrorMissingUserIdInformation;
    public static ServiceError ErrorMoreThanOneAccessModeSpecified;
    public static ServiceError ErrorMoveCopyFailed;
    public static ServiceError ErrorMoveDistinguishedFolder;
    public static ServiceError ErrorMultiLegacyMailboxAccess;
    public static ServiceError ErrorNameResolutionMultipleResults;
    public static ServiceError ErrorNameResolutionNoMailbox;
    public static ServiceError ErrorNameResolutionNoResults;
    public static ServiceError ErrorNewEventStreamConnectionOpened;
    public static ServiceError ErrorNoApplicableProxyCASServersAvailable;
    public static ServiceError ErrorNoCalendar;
    public static ServiceError ErrorNoDestinationCASDueToKerberosRequirements;
    public static ServiceError ErrorNoDestinationCASDueToSSLRequirements;
    public static ServiceError ErrorNoDestinationCASDueToVersionMismatch;
    public static ServiceError ErrorNoFolderClassOverride;
    public static ServiceError ErrorNoFreeBusyAccess;
    public static ServiceError ErrorNonExistentMailbox;
    public static ServiceError ErrorNonPrimarySmtpAddress;
    public static ServiceError ErrorNoPropertyTagForCustomProperties;
    public static ServiceError ErrorNoPublicFolderReplicaAvailable;
    public static ServiceError ErrorNoPublicFolderServerAvailable;
    public static ServiceError ErrorNoRespondingCASInDestinationSite;
    public static ServiceError ErrorNotAllowedExternalSharingByPolicy;
    public static ServiceError ErrorNotDelegate;
    public static ServiceError ErrorNotEnoughMemory;
    public static ServiceError ErrorNotSupportedSharingMessage;
    public static ServiceError ErrorObjectTypeChanged;
    public static ServiceError ErrorOccurrenceCrossingBoundary;
    public static ServiceError ErrorOccurrenceTimeSpanTooBig;
    public static ServiceError ErrorOperationNotAllowedWithPublicFolderRoot;
    public static ServiceError ErrorOrganizationNotFederated;
    public static ServiceError ErrorOutlookRuleBlobExists;
    public static ServiceError ErrorParentFolderIdRequired;
    public static ServiceError ErrorParentFolderNotFound;
    public static ServiceError ErrorPasswordChangeRequired;
    public static ServiceError ErrorPasswordExpired;
    public static ServiceError ErrorPermissionNotAllowedByPolicy;
    public static ServiceError ErrorPhoneNumberNotDialable;
    public static ServiceError ErrorPropertyUpdate;
    public static ServiceError ErrorPropertyValidationFailure;
    public static ServiceError ErrorProxiedSubscriptionCallFailure;
    public static ServiceError ErrorProxyCallFailed;
    public static ServiceError ErrorProxyGroupSidLimitExceeded;
    public static ServiceError ErrorProxyRequestNotAllowed;
    public static ServiceError ErrorProxyRequestProcessingFailed;
    public static ServiceError ErrorProxyServiceDiscoveryFailed;
    public static ServiceError ErrorProxyTokenExpired;
    public static ServiceError ErrorPublicFolderRequestProcessingFailed;
    public static ServiceError ErrorPublicFolderServerNotFound;
    public static ServiceError ErrorQueryFilterTooLong;
    public static ServiceError ErrorQuotaExceeded;
    public static ServiceError ErrorReadEventsFailed;
    public static ServiceError ErrorReadReceiptNotPending;
    public static ServiceError ErrorRecurrenceEndDateTooBig;
    public static ServiceError ErrorRecurrenceHasNoOccurrence;
    public static ServiceError ErrorRemoveDelegatesFailed;
    public static ServiceError ErrorRequestAborted;
    public static ServiceError ErrorRequestStreamTooBig;
    public static ServiceError ErrorRequiredPropertyMissing;
    public static ServiceError ErrorResolveNamesInvalidFolderType;
    public static ServiceError ErrorResolveNamesOnlyOneContactsFolderAllowed;
    public static ServiceError ErrorResponseSchemaValidation;
    public static ServiceError ErrorRestrictionTooComplex;
    public static ServiceError ErrorRestrictionTooLong;
    public static ServiceError ErrorResultSetTooBig;
    public static ServiceError ErrorRulesOverQuota;
    public static ServiceError ErrorSavedItemFolderNotFound;
    public static ServiceError ErrorSchemaValidation;
    public static ServiceError ErrorSearchFolderNotInitialized;
    public static ServiceError ErrorSendAsDenied;
    public static ServiceError ErrorSendMeetingCancellationsRequired;
    public static ServiceError ErrorSendMeetingInvitationsOrCancellationsRequired;
    public static ServiceError ErrorSendMeetingInvitationsRequired;
    public static ServiceError ErrorSentMeetingRequestUpdate;
    public static ServiceError ErrorSentTaskRequestUpdate;
    public static ServiceError ErrorServerBusy;
    public static ServiceError ErrorServiceDiscoveryFailed;
    public static ServiceError ErrorSharingNoExternalEwsAvailable;
    public static ServiceError ErrorSharingSynchronizationFailed;
    public static ServiceError ErrorStaleObject;
    public static ServiceError ErrorSubmissionQuotaExceeded;
    public static ServiceError ErrorSubscriptionAccessDenied;
    public static ServiceError ErrorSubscriptionDelegateAccessNotSupported;
    public static ServiceError ErrorSubscriptionNotFound;
    public static ServiceError ErrorSubscriptionUnsubscribed;
    public static ServiceError ErrorSyncFolderNotFound;
    public static ServiceError ErrorTeamMailboxNotFound;
    public static ServiceError ErrorTeamMailboxNotLinkedToSharePoint;
    public static ServiceError ErrorTeamMailboxUrlValidationFailed;
    public static ServiceError ErrorTeamMailboxNotAuthorizedOwner;
    public static ServiceError ErrorTeamMailboxActiveToPendingDelete;
    public static ServiceError ErrorTeamMailboxFailedSendingNotifications;
    public static ServiceError ErrorTeamMailboxErrorUnknown;
    public static ServiceError ErrorTimeIntervalTooBig;
    public static ServiceError ErrorTimeoutExpired;
    public static ServiceError ErrorTimeZone;
    public static ServiceError ErrorToFolderNotFound;
    public static ServiceError ErrorTokenSerializationDenied;
    public static ServiceError ErrorUnableToGetUserOofSettings;
    public static ServiceError ErrorUnableToRemoveImContactFromGroup;
    public static ServiceError ErrorUnifiedMessagingDialPlanNotFound;
    public static ServiceError ErrorUnifiedMessagingRequestFailed;
    public static ServiceError ErrorUnifiedMessagingServerNotFound;
    public static ServiceError ErrorUnsupportedCulture;
    public static ServiceError ErrorUnsupportedMapiPropertyType;
    public static ServiceError ErrorUnsupportedMimeConversion;
    public static ServiceError ErrorUnsupportedPathForQuery;
    public static ServiceError ErrorUnsupportedPathForSortGroup;
    public static ServiceError ErrorUnsupportedPropertyDefinition;
    public static ServiceError ErrorUnsupportedQueryFilter;
    public static ServiceError ErrorUnsupportedRecurrence;
    public static ServiceError ErrorUnsupportedSubFilter;
    public static ServiceError ErrorUnsupportedTypeForConversion;
    public static ServiceError ErrorUpdateDelegatesFailed;
    public static ServiceError ErrorUpdatePropertyMismatch;
    public static ServiceError ErrorUserNotAllowedByPolicy;
    public static ServiceError ErrorUserNotUnifiedMessagingEnabled;
    public static ServiceError ErrorUserWithoutFederatedProxyAddress;
    public static ServiceError ErrorValueOutOfRange;
    public static ServiceError ErrorVirusDetected;
    public static ServiceError ErrorVirusMessageDeleted;
    public static ServiceError ErrorVoiceMailNotImplemented;
    public static ServiceError ErrorWebRequestInInvalidState;
    public static ServiceError ErrorWin32InteropError;
    public static ServiceError ErrorWorkingHoursSaveFailed;
    public static ServiceError ErrorWorkingHoursXmlMalformed;
    public static ServiceError ErrorWrongServerVersion;
    public static ServiceError ErrorWrongServerVersionDelegate;
    public static ServiceError ErrorInvalidClientAccessTokenRequest;
    public static ServiceError ErrorInvalidManagementRoleHeader;
    public static ServiceError ErrorSearchQueryHasTooManyKeywords;
    public static ServiceError ErrorSearchTooManyMailboxes;
    public static ServiceError ErrorInvalidRetentionTagNone;
    public static ServiceError ErrorDiscoverySearchesDisabled;
    public static ServiceError ErrorCalendarSeekToConditionNotSupported;
    public static ServiceError ErrorArchiveMailboxSearchFailed;
    public static ServiceError ErrorGetRemoteArchiveFolderFailed;
    public static ServiceError ErrorFindRemoteArchiveFolderFailed;
    public static ServiceError ErrorGetRemoteArchiveItemFailed;
    public static ServiceError ErrorExportRemoteArchiveItemsFailed;
    public static ServiceError ErrorClientIntentInvalidStateDefinition;
    public static ServiceError ErrorClientIntentNotFound;
    public static ServiceError ErrorContentIndexingNotEnabled;
    public static ServiceError ErrorDeleteUnifiedMessagingPromptFailed;
    public static ServiceError ErrorLocationServicesDisabled;
    public static ServiceError ErrorLocationServicesInvalidRequest;
    public static ServiceError ErrorLocationServicesRequestFailed;
    public static ServiceError ErrorLocationServicesRequestTimedOut;
    public static ServiceError ErrorWeatherServiceDisabled;
    public static ServiceError ErrorMailboxScopeNotAllowedWithoutQueryString;
    public static ServiceError ErrorNoSpeechDetected;
    public static ServiceError ErrorPromptPublishingOperationFailed;
    public static ServiceError ErrorPublicFolderMailboxDiscoveryFailed;
    public static ServiceError ErrorPublicFolderOperationFailed;
    public static ServiceError ErrorPublicFolderSyncException;
    public static ServiceError ErrorRecipientNotFound;
    public static ServiceError ErrorRecognizerNotInstalled;
    public static ServiceError ErrorSpeechGrammarError;
    public static ServiceError ErrorTooManyObjectsOpened;
    public static ServiceError ErrorUMServerUnavailable;
    public static ServiceError ErrorUnifiedMessagingPromptNotFound;
    public static ServiceError ErrorUnifiedMessagingReportDataNotFound;
    public static ServiceError ErrorInvalidPhotoSize;
    public static ServiceError ErrorCalendarIsGroupMailboxForAccept;
    public static ServiceError ErrorCalendarIsGroupMailboxForDecline;
    public static ServiceError ErrorCalendarIsGroupMailboxForTentative;
    public static ServiceError ErrorCalendarIsGroupMailboxForSuppressReadReceipt;
    public static ServiceError ErrorOrganizationAccessBlocked;
    public static ServiceError ErrorInvalidLicense;
    public static ServiceError ErrorMessagePerFolderCountReceiveQuotaExceeded;
    public static ServiceError ErrorUnifiedGroupMailboxNotFound;
    public static ServiceError ErrorInvalidChannelId;
    public static ServiceError ErrorNewChannelConnectionOpened;
    public static ServiceError ErrorChannelSubscriptionNotFound;
    public static ServiceError ErrorExceededChannelSubscriptionCount;
    public static ServiceError ErrorChannelSubscriptionAlreadyExists;
    public static ServiceError ErrorInvalidChannelSubscriptionId;
    public static ServiceError ErrorMessageSubmissionBlocked;
    public static ServiceError ErrorExceededMessageLimit;
    public static ServiceError ErrorExceededMaxRecipientLimitBlock;
    public static ServiceError ErrorAccountSuspend;
    public static ServiceError ErrorExceededMaxRecipientLimit;
    public static ServiceError ErrorMessageBlocked;
    public static ServiceError ErrorAccountSuspendShowTierUpgrade;
    public static ServiceError ErrorExceededMessageLimitShowTierUpgrade;
    public static ServiceError ErrorExceededMaxRecipientLimitShowTierUpgrade;
}
internal enum Microsoft.Exchange.WebServices.Data.ServiceErrorHandling : Enum {
    public int value__;
    public static ServiceErrorHandling ReturnErrors;
    public static ServiceErrorHandling ThrowOnError;
}
public abstract class Microsoft.Exchange.WebServices.Data.ServiceId : ComplexProperty {
    private string changeKey;
    private string uniqueId;
    internal bool IsValid { get; }
    public string UniqueId { get; internal set; }
    public string ChangeKey { get; internal set; }
    internal ServiceId(string uniqueId);
    internal virtual void ReadAttributesFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal abstract virtual string GetXmlElementName();
    internal void WriteToXml(EwsServiceXmlWriter writer);
    internal void Assign(ServiceId source);
    internal virtual bool get_IsValid();
    public string get_UniqueId();
    internal void set_UniqueId(string value);
    public string get_ChangeKey();
    internal void set_ChangeKey(string value);
    public bool SameIdAndChangeKey(ServiceId other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Microsoft.Exchange.WebServices.Data.ServiceLocalException : Exception {
    public ServiceLocalException(string message);
    public ServiceLocalException(string message, Exception innerException);
    protected ServiceLocalException(SerializationInfo info, StreamingContext context);
}
[DefaultMemberAttribute("Item")]
public abstract class Microsoft.Exchange.WebServices.Data.ServiceObject : object {
    private object lockObject;
    private ExchangeService service;
    private PropertyBag propertyBag;
    private string xmlElementName;
    [CompilerGeneratedAttribute]
private ServiceObjectChangedDelegate OnChange;
    internal PropertyBag PropertyBag { get; }
    public ServiceObjectSchema Schema { get; }
    public object Item { get; }
    public ExchangeService Service { get; internal set; }
    public bool IsNew { get; }
    public bool IsDirty { get; }
    internal ServiceObject(ExchangeService service);
    internal void Changed();
    internal void ThrowIfThisIsNew();
    internal void ThrowIfThisIsNotNew();
    internal virtual string GetXmlElementNameOverride();
    internal string GetXmlElementName();
    internal virtual string GetChangeXmlElementName();
    internal virtual string GetSetFieldXmlElementName();
    internal virtual string GetDeleteFieldXmlElementName();
    internal virtual bool GetIsTimeZoneHeaderRequired(bool isUpdateOperation);
    internal virtual bool GetIsCustomDateTimeScopingRequired();
    internal PropertyBag get_PropertyBag();
    public ServiceObjectSchema get_Schema();
    internal abstract virtual ServiceObjectSchema GetSchema();
    internal abstract virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal void LoadFromXml(EwsServiceXmlReader reader, bool clearPropertyBag);
    internal virtual void Validate();
    internal void LoadFromXml(EwsServiceXmlReader reader, bool clearPropertyBag, PropertySet requestedPropertySet, bool summaryPropertiesOnly);
    internal void ClearChangeLog();
    internal void WriteToXml(EwsServiceXmlWriter writer);
    internal void WriteToXmlForUpdate(EwsServiceXmlWriter writer);
    internal abstract virtual Task`1<ServiceResponseCollection`1<ServiceResponse>> InternalLoad(PropertySet propertySet, CancellationToken token);
    internal abstract virtual Task`1<ServiceResponseCollection`1<ServiceResponse>> InternalDelete(DeleteMode deleteMode, Nullable`1<SendCancellationsMode> sendCancellationsMode, Nullable`1<AffectedTaskOccurrence> affectedTaskOccurrences, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<ServiceResponse>> Load(PropertySet propertySet, CancellationToken token);
    public Task`1<ServiceResponseCollection`1<ServiceResponse>> Load(CancellationToken token);
    public object get_Item(PropertyDefinitionBase propertyDefinition);
    internal bool TryGetExtendedProperty(ExtendedPropertyDefinition propertyDefinition, T& propertyValue);
    public bool TryGetProperty(PropertyDefinitionBase propertyDefinition, Object& propertyValue);
    public bool TryGetProperty(PropertyDefinitionBase propertyDefinition, T& propertyValue);
    public Collection`1<PropertyDefinitionBase> GetLoadedPropertyDefinitions();
    public ExchangeService get_Service();
    internal void set_Service(ExchangeService value);
    internal virtual PropertyDefinition GetIdPropertyDefinition();
    internal ServiceId GetId();
    public virtual bool get_IsNew();
    public bool get_IsDirty();
    internal virtual ExtendedPropertyCollection GetExtendedProperties();
    [CompilerGeneratedAttribute]
internal void add_OnChange(ServiceObjectChangedDelegate value);
    [CompilerGeneratedAttribute]
internal void remove_OnChange(ServiceObjectChangedDelegate value);
}
internal class Microsoft.Exchange.WebServices.Data.ServiceObjectChangedDelegate : MulticastDelegate {
    public ServiceObjectChangedDelegate(object object, IntPtr method);
    public virtual void Invoke(ServiceObject serviceObject);
    public virtual IAsyncResult BeginInvoke(ServiceObject serviceObject, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("4")]
internal class Microsoft.Exchange.WebServices.Data.ServiceObjectDefinitionAttribute : Attribute {
    private string xmlElementName;
    private bool returnedByServer;
    internal string XmlElementName { get; }
    public bool ReturnedByServer { get; public set; }
    internal ServiceObjectDefinitionAttribute(string xmlElementName);
    internal string get_XmlElementName();
    public bool get_ReturnedByServer();
    public void set_ReturnedByServer(bool value);
}
internal class Microsoft.Exchange.WebServices.Data.ServiceObjectInfo : object {
    private Dictionary`2<string, Type> xmlElementNameToServiceObjectClassMap;
    private Dictionary`2<Type, CreateServiceObjectWithServiceParam> serviceObjectConstructorsWithServiceParam;
    private Dictionary`2<Type, CreateServiceObjectWithAttachmentParam> serviceObjectConstructorsWithAttachmentParam;
    internal Dictionary`2<string, Type> XmlElementNameToServiceObjectClassMap { get; }
    internal Dictionary`2<Type, CreateServiceObjectWithServiceParam> ServiceObjectConstructorsWithServiceParam { get; }
    internal Dictionary`2<Type, CreateServiceObjectWithAttachmentParam> ServiceObjectConstructorsWithAttachmentParam { get; }
    private void InitializeServiceObjectClassMap();
    private void AddServiceObjectType(string xmlElementName, Type type, CreateServiceObjectWithServiceParam createServiceObjectWithServiceParam, CreateServiceObjectWithAttachmentParam createServiceObjectWithAttachmentParam);
    internal Dictionary`2<string, Type> get_XmlElementNameToServiceObjectClassMap();
    internal Dictionary`2<Type, CreateServiceObjectWithServiceParam> get_ServiceObjectConstructorsWithServiceParam();
    internal Dictionary`2<Type, CreateServiceObjectWithAttachmentParam> get_ServiceObjectConstructorsWithAttachmentParam();
}
public abstract class Microsoft.Exchange.WebServices.Data.ServiceObjectPropertyDefinition : PropertyDefinitionBase {
    private string uri;
    public ExchangeVersion Version { get; }
    internal string Uri { get; }
    internal ServiceObjectPropertyDefinition(string uri);
    internal virtual string GetXmlElementName();
    public virtual ExchangeVersion get_Version();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal string get_Uri();
}
public class Microsoft.Exchange.WebServices.Data.ServiceObjectPropertyException : PropertyException {
    private PropertyDefinitionBase propertyDefinition;
    public PropertyDefinitionBase PropertyDefinition { get; }
    public ServiceObjectPropertyException(PropertyDefinitionBase propertyDefinition);
    public ServiceObjectPropertyException(string message, PropertyDefinitionBase propertyDefinition);
    public ServiceObjectPropertyException(string message, PropertyDefinitionBase propertyDefinition, Exception innerException);
    protected ServiceObjectPropertyException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public PropertyDefinitionBase get_PropertyDefinition();
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.Exchange.WebServices.Data.ServiceObjectSchema : object {
    private static object lockObject;
    private static LazyMember`1<List`1<Type>> allSchemaTypes;
    private static LazyMember`1<Dictionary`2<string, PropertyDefinitionBase>> allSchemaProperties;
    public static PropertyDefinition ExtendedProperties;
    private Dictionary`2<string, PropertyDefinition> properties;
    private List`1<PropertyDefinition> visibleProperties;
    private List`1<PropertyDefinition> firstClassProperties;
    private List`1<PropertyDefinition> firstClassSummaryProperties;
    private List`1<IndexedPropertyDefinition> indexedProperties;
    internal List`1<PropertyDefinition> FirstClassProperties { get; }
    internal List`1<PropertyDefinition> FirstClassSummaryProperties { get; }
    internal List`1<IndexedPropertyDefinition> IndexedProperties { get; }
    private static ServiceObjectSchema();
    internal static void ForeachPublicStaticPropertyFieldInType(Type type, PropertyFieldInfoDelegate propFieldDelegate);
    internal static void AddSchemaPropertiesToDictionary(Type type, Dictionary`2<string, PropertyDefinitionBase> propDefDictionary);
    private static void AddSchemaPropertyNamesToDictionary(Type type, Dictionary`2<PropertyDefinition, string> propertyNameDictionary);
    internal static PropertyDefinitionBase FindPropertyDefinition(string uri);
    internal static void InitializeSchemaPropertyNames();
    private void RegisterProperty(PropertyDefinition property, bool isInternal);
    internal void RegisterProperty(PropertyDefinition property);
    internal void RegisterInternalProperty(PropertyDefinition property);
    internal void RegisterIndexedProperty(IndexedPropertyDefinition indexedProperty);
    internal virtual void RegisterProperties();
    internal List`1<PropertyDefinition> get_FirstClassProperties();
    internal List`1<PropertyDefinition> get_FirstClassSummaryProperties();
    internal List`1<IndexedPropertyDefinition> get_IndexedProperties();
    internal bool TryGetPropertyDefinition(string xmlElementName, PropertyDefinition& propertyDefinition);
    public sealed virtual IEnumerator`1<PropertyDefinition> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum Microsoft.Exchange.WebServices.Data.ServiceObjectType : Enum {
    public int value__;
    public static ServiceObjectType Folder;
    public static ServiceObjectType Item;
    public static ServiceObjectType Conversation;
    public static ServiceObjectType Persona;
}
public class Microsoft.Exchange.WebServices.Data.ServiceRemoteException : Exception {
    public ServiceRemoteException(string message);
    public ServiceRemoteException(string message, Exception innerException);
    protected ServiceRemoteException(SerializationInfo info, StreamingContext context);
}
internal abstract class Microsoft.Exchange.WebServices.Data.ServiceRequestBase : object {
    private static string AnchorMailboxHeaderName;
    private static string ExplicitLogonUserHeaderName;
    private static String[] RequestIdResponseHeaders;
    private static string XMLSchemaNamespace;
    private static string XMLSchemaInstanceNamespace;
    private static string ClientStatisticsRequestHeader;
    [CompilerGeneratedAttribute]
private string <AnchorMailbox>k__BackingField;
    private static List`1<string> clientStatisticsCache;
    private ExchangeService service;
    internal string AnchorMailbox { get; internal set; }
    internal bool EmitTimeZoneHeader { get; }
    internal ExchangeService Service { get; }
    internal ServiceRequestBase(ExchangeService service);
    private static ServiceRequestBase();
    [CompilerGeneratedAttribute]
internal string get_AnchorMailbox();
    [CompilerGeneratedAttribute]
internal void set_AnchorMailbox(string value);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ServiceRequestBase/<GetResponseStream>d__12")]
protected static Task`1<Stream> GetResponseStream(IEwsHttpWebResponse response);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ServiceRequestBase/<GetResponseStream>d__13")]
protected static Task`1<Stream> GetResponseStream(IEwsHttpWebResponse response, int readTimeout);
    private static Stream WrapStream(Stream responseStream, string contentEncoding);
    internal abstract virtual string GetXmlElementName();
    internal abstract virtual string GetResponseXmlElementName();
    internal abstract virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal abstract virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual object ParseResponse(EwsServiceXmlReader reader, HttpResponseHeaders responseHeaders);
    internal virtual bool get_EmitTimeZoneHeader();
    internal virtual void Validate();
    internal void WriteBodyToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void AddHeaders(HttpRequestHeaders webHeaderCollection);
    internal ExchangeService get_Service();
    internal void ThrowIfNotSupportedByRequestedServerVersion();
    internal void WriteToXml(EwsServiceXmlWriter writer);
    private string GetRequestedServiceVersionString();
    private void EmitRequest(IEwsHttpWebRequest request);
    private void TraceAndEmitRequest(IEwsHttpWebRequest request, bool needSignature, bool needTrace);
    protected object ReadResponse(EwsServiceXmlReader ewsXmlReader, HttpResponseHeaders responseHeaders);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ServiceRequestBase/<ReadResponseAsync>d__36")]
protected Task`1<object> ReadResponseAsync(EwsServiceXmlReader ewsXmlReader, HttpResponseHeaders responseHeaders, CancellationToken token);
    protected virtual void ReadPreamble(EwsServiceXmlReader ewsXmlReader);
    protected virtual Task ReadPreambleAsync(EwsServiceXmlReader ewsXmlReader, CancellationToken token);
    private void ReadSoapHeader(EwsServiceXmlReader reader);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ServiceRequestBase/<ReadSoapHeaderAsync>d__40")]
private Task ReadSoapHeaderAsync(EwsServiceXmlReader reader, CancellationToken token);
    protected SoapFaultDetails ReadSoapFault(EwsServiceXmlReader reader);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ServiceRequestBase/<ValidateAndEmitRequest>d__42")]
protected Task`1<Tuple`2<IEwsHttpWebRequest, IEwsHttpWebResponse>> ValidateAndEmitRequest(CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ServiceRequestBase/<BuildEwsHttpWebRequest>d__43")]
protected Task`1<IEwsHttpWebRequest> BuildEwsHttpWebRequest();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ServiceRequestBase/<GetEwsHttpWebResponse>d__44")]
protected Task`1<IEwsHttpWebResponse> GetEwsHttpWebResponse(IEwsHttpWebRequest request, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ServiceRequestBase/<ProcessEwsHttpClientException>d__45")]
private Task ProcessEwsHttpClientException(EwsHttpClientException webException);
    protected void TraceXmlRequest(MemoryStream memoryStream);
    protected void TraceResponseXml(IEwsHttpWebResponse response, MemoryStream memoryStream);
    private void ReadXmlDeclaration(EwsServiceXmlReader reader);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.ServiceRequestBase/<ReadXmlDeclarationAsync>d__49")]
private Task ReadXmlDeclarationAsync(EwsServiceXmlReader reader, CancellationToken token);
}
public class Microsoft.Exchange.WebServices.Data.ServiceRequestException : ServiceRemoteException {
    public ServiceRequestException(string message);
    public ServiceRequestException(string message, Exception innerException);
    protected ServiceRequestException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Exchange.WebServices.Data.ServiceResponse : object {
    private ServiceResult result;
    private ServiceError errorCode;
    private string errorMessage;
    private Dictionary`2<string, string> errorDetails;
    private Collection`1<PropertyDefinitionBase> errorProperties;
    internal bool BatchProcessingStopped { get; }
    public ServiceResult Result { get; }
    public ServiceError ErrorCode { get; }
    public string ErrorMessage { get; internal set; }
    public IDictionary`2<string, string> ErrorDetails { get; }
    public Collection`1<PropertyDefinitionBase> ErrorProperties { get; }
    internal ServiceResponse(SoapFaultDetails soapFaultDetails);
    internal ServiceResponse(ServiceError responseCode, string errorMessage);
    internal void LoadFromXml(EwsServiceXmlReader reader, string xmlElementName);
    private void ParseMessageXml(EwsServiceXmlReader reader);
    internal virtual void Loaded();
    internal void MapErrorCodeToErrorMessage();
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    internal virtual void ReadHeader(HttpResponseHeaders responseHeaders);
    internal virtual bool LoadExtraErrorDetailsFromXml(EwsServiceXmlReader reader, string xmlElementName);
    internal void ThrowIfNecessary();
    internal virtual void InternalThrowIfNecessary();
    internal bool get_BatchProcessingStopped();
    public ServiceResult get_Result();
    public ServiceError get_ErrorCode();
    public string get_ErrorMessage();
    internal void set_ErrorMessage(string value);
    public IDictionary`2<string, string> get_ErrorDetails();
    public Collection`1<PropertyDefinitionBase> get_ErrorProperties();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Exchange.WebServices.Data.ServiceResponseCollection`1 : object {
    private List`1<TResponse> responses;
    private ServiceResult overallResult;
    public int Count { get; }
    public TResponse Item { get; }
    public ServiceResult OverallResult { get; }
    internal void Add(TResponse response);
    public int get_Count();
    public TResponse get_Item(int index);
    public ServiceResult get_OverallResult();
    public sealed virtual IEnumerator`1<TResponse> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class Microsoft.Exchange.WebServices.Data.ServiceResponseException : ServiceRemoteException {
    private static string ExceptionClassKey;
    private static string ExceptionMessageKey;
    private static string StackTraceKey;
    private ServiceResponse response;
    public ServiceResponse Response { get; }
    public ServiceError ErrorCode { get; }
    public string Message { get; }
    internal ServiceResponseException(ServiceResponse response);
    protected ServiceResponseException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public ServiceResponse get_Response();
    public ServiceError get_ErrorCode();
    public virtual string get_Message();
}
public enum Microsoft.Exchange.WebServices.Data.ServiceResult : Enum {
    public int value__;
    public static ServiceResult Success;
    public static ServiceResult Warning;
    public static ServiceResult Error;
}
public class Microsoft.Exchange.WebServices.Data.ServiceValidationException : ServiceLocalException {
    public ServiceValidationException(string message);
    public ServiceValidationException(string message, Exception innerException);
    private ServiceValidationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Exchange.WebServices.Data.ServiceVersionException : ServiceLocalException {
    public ServiceVersionException(string message);
    public ServiceVersionException(string message, Exception innerException);
    private ServiceVersionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Exchange.WebServices.Data.ServiceXmlDeserializationException : ServiceLocalException {
    public ServiceXmlDeserializationException(string message);
    public ServiceXmlDeserializationException(string message, Exception innerException);
    private ServiceXmlDeserializationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Exchange.WebServices.Data.ServiceXmlSerializationException : ServiceLocalException {
    public ServiceXmlSerializationException(string message);
    public ServiceXmlSerializationException(string message, Exception innerException);
    protected ServiceXmlSerializationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Exchange.WebServices.Data.SetClientExtensionAction : ComplexProperty {
    private SetClientExtensionActionId setClientExtensionActionId;
    private string extensionId;
    private ClientExtension clientExtension;
    public SetClientExtensionAction(SetClientExtensionActionId setClientExtensionActionId, string extensionId, ClientExtension clientExtension);
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
}
public enum Microsoft.Exchange.WebServices.Data.SetClientExtensionActionId : Enum {
    public int value__;
    public static SetClientExtensionActionId Install;
    public static SetClientExtensionActionId Uninstall;
    public static SetClientExtensionActionId Configure;
}
internal class Microsoft.Exchange.WebServices.Data.SetClientExtensionRequest : MultiResponseServiceRequest`1<ServiceResponse> {
    private List`1<SetClientExtensionAction> actions;
    internal SetClientExtensionRequest(ExchangeService service, List`1<SetClientExtensionAction> actions);
    internal virtual void Validate();
    internal virtual ServiceResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
}
public class Microsoft.Exchange.WebServices.Data.SetHoldOnMailboxesParameters : object {
    [CompilerGeneratedAttribute]
private HoldAction <ActionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HoldId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Mailboxes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InPlaceHoldIdentity>k__BackingField;
    public HoldAction ActionType { get; public set; }
    public string HoldId { get; public set; }
    public string Query { get; public set; }
    public String[] Mailboxes { get; public set; }
    public string Language { get; public set; }
    public string InPlaceHoldIdentity { get; public set; }
    [CompilerGeneratedAttribute]
public HoldAction get_ActionType();
    [CompilerGeneratedAttribute]
public void set_ActionType(HoldAction value);
    [CompilerGeneratedAttribute]
public string get_HoldId();
    [CompilerGeneratedAttribute]
public void set_HoldId(string value);
    [CompilerGeneratedAttribute]
public string get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(string value);
    [CompilerGeneratedAttribute]
public String[] get_Mailboxes();
    [CompilerGeneratedAttribute]
public void set_Mailboxes(String[] value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public string get_InPlaceHoldIdentity();
    [CompilerGeneratedAttribute]
public void set_InPlaceHoldIdentity(string value);
}
internal class Microsoft.Exchange.WebServices.Data.SetHoldOnMailboxesRequest : SimpleServiceRequestBase {
    [CompilerGeneratedAttribute]
private HoldAction <ActionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HoldId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Query>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Mailboxes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Language>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InPlaceHoldIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemHoldPeriod>k__BackingField;
    public HoldAction ActionType { get; public set; }
    public string HoldId { get; public set; }
    public string Query { get; public set; }
    public String[] Mailboxes { get; public set; }
    public string Language { get; public set; }
    public string InPlaceHoldIdentity { get; public set; }
    public string ItemHoldPeriod { get; public set; }
    internal SetHoldOnMailboxesRequest(ExchangeService service);
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetXmlElementName();
    internal virtual void Validate();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.SetHoldOnMailboxesRequest/<Execute>d__6")]
internal Task`1<SetHoldOnMailboxesResponse> Execute(CancellationToken token);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [CompilerGeneratedAttribute]
public HoldAction get_ActionType();
    [CompilerGeneratedAttribute]
public void set_ActionType(HoldAction value);
    [CompilerGeneratedAttribute]
public string get_HoldId();
    [CompilerGeneratedAttribute]
public void set_HoldId(string value);
    [CompilerGeneratedAttribute]
public string get_Query();
    [CompilerGeneratedAttribute]
public void set_Query(string value);
    [CompilerGeneratedAttribute]
public String[] get_Mailboxes();
    [CompilerGeneratedAttribute]
public void set_Mailboxes(String[] value);
    [CompilerGeneratedAttribute]
public string get_Language();
    [CompilerGeneratedAttribute]
public void set_Language(string value);
    [CompilerGeneratedAttribute]
public string get_InPlaceHoldIdentity();
    [CompilerGeneratedAttribute]
public void set_InPlaceHoldIdentity(string value);
    [CompilerGeneratedAttribute]
public string get_ItemHoldPeriod();
    [CompilerGeneratedAttribute]
public void set_ItemHoldPeriod(string value);
}
public class Microsoft.Exchange.WebServices.Data.SetHoldOnMailboxesResponse : ServiceResponse {
    private MailboxHoldResult holdResult;
    public MailboxHoldResult HoldResult { get; }
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    public MailboxHoldResult get_HoldResult();
}
internal class Microsoft.Exchange.WebServices.Data.SetOMEConfigurationRequest : SimpleServiceRequestBase {
    private string xml;
    public string Xml { get; }
    internal SetOMEConfigurationRequest(ExchangeService service, string xml);
    public string get_Xml();
    internal virtual string GetXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetResponseXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.SetOMEConfigurationRequest/<Execute>d__9")]
internal Task`1<ServiceResponse> Execute(CancellationToken token);
}
internal class Microsoft.Exchange.WebServices.Data.SetOMEConfigurationResponse : ServiceResponse {
}
public class Microsoft.Exchange.WebServices.Data.SetRuleOperation : RuleOperation {
    private Rule rule;
    public Rule Rule { get; public set; }
    internal string XmlElementName { get; }
    public SetRuleOperation(Rule rule);
    public Rule get_Rule();
    public void set_Rule(Rule value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual void InternalValidate();
    internal virtual string get_XmlElementName();
}
internal class Microsoft.Exchange.WebServices.Data.SetTeamMailboxRequest : SimpleServiceRequestBase {
    private EmailAddress emailAddress;
    private Uri sharePointSiteUrl;
    private TeamMailboxLifecycleState state;
    internal SetTeamMailboxRequest(ExchangeService service, EmailAddress emailAddress, Uri sharePointSiteUrl, TeamMailboxLifecycleState state);
    internal virtual string GetXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetResponseXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.SetTeamMailboxRequest/<Execute>d__9")]
internal Task`1<ServiceResponse> Execute(CancellationToken token);
}
internal class Microsoft.Exchange.WebServices.Data.SetUserOofSettingsRequest : SimpleServiceRequestBase {
    private string smtpAddress;
    private OofSettings oofSettings;
    public string SmtpAddress { get; public set; }
    public OofSettings OofSettings { get; public set; }
    internal SetUserOofSettingsRequest(ExchangeService service);
    internal virtual string GetXmlElementName();
    internal virtual void Validate();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetResponseXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.SetUserOofSettingsRequest/<Execute>d__9")]
internal Task`1<ServiceResponse> Execute(CancellationToken token);
    public string get_SmtpAddress();
    public void set_SmtpAddress(string value);
    public OofSettings get_OofSettings();
    public void set_OofSettings(OofSettings value);
}
internal class Microsoft.Exchange.WebServices.Data.SetUserPhotoRequest : SimpleServiceRequestBase {
    [CompilerGeneratedAttribute]
private string <EmailAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <Photo>k__BackingField;
    internal string EmailAddress { get; internal set; }
    internal Byte[] Photo { get; internal set; }
    internal SetUserPhotoRequest(ExchangeService service);
    [CompilerGeneratedAttribute]
internal string get_EmailAddress();
    [CompilerGeneratedAttribute]
internal void set_EmailAddress(string value);
    [CompilerGeneratedAttribute]
internal Byte[] get_Photo();
    [CompilerGeneratedAttribute]
internal void set_Photo(Byte[] value);
    internal virtual void Validate();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual void AddHeaders(HttpRequestHeaders webHeaderCollection);
    internal virtual object ParseResponse(EwsServiceXmlReader reader, HttpResponseHeaders responseHeaders);
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal SetUserPhotoResponse Execute(CancellationToken token);
    private static SetUserPhotoResponse SetResultOrDefault(Func`1<object> serviceResponseFactory);
}
internal class Microsoft.Exchange.WebServices.Data.SetUserPhotoResponse : ServiceResponse {
    [CompilerGeneratedAttribute]
private SetUserPhotoResults <Results>k__BackingField;
    internal SetUserPhotoResults Results { get; private set; }
    [CompilerGeneratedAttribute]
internal SetUserPhotoResults get_Results();
    [CompilerGeneratedAttribute]
private void set_Results(SetUserPhotoResults value);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    internal virtual void ReadHeader(HttpResponseHeaders responseHeaders);
}
public class Microsoft.Exchange.WebServices.Data.SetUserPhotoResults : object {
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Exchange.WebServices.Data.SimplePropertyBag`1 : object {
    private Dictionary`2<TKey, object> items;
    private List`1<TKey> removedItems;
    private List`1<TKey> addedItems;
    private List`1<TKey> modifiedItems;
    [CompilerGeneratedAttribute]
private PropertyBagChangedDelegate OnChange;
    internal IEnumerable`1<TKey> AddedItems { get; }
    internal IEnumerable`1<TKey> RemovedItems { get; }
    internal IEnumerable`1<TKey> ModifiedItems { get; }
    public object Item { get; public set; }
    private static void InternalAddItemToChangeList(TKey key, List`1<TKey> changeList);
    private void Changed();
    private void InternalRemoveItem(TKey key);
    internal IEnumerable`1<TKey> get_AddedItems();
    internal IEnumerable`1<TKey> get_RemovedItems();
    internal IEnumerable`1<TKey> get_ModifiedItems();
    public void ClearChangeLog();
    public bool ContainsKey(TKey key);
    public bool TryGetValue(TKey key, Object& value);
    public object get_Item(TKey key);
    public void set_Item(TKey key, object value);
    [CompilerGeneratedAttribute]
public void add_OnChange(PropertyBagChangedDelegate value);
    [CompilerGeneratedAttribute]
public void remove_OnChange(PropertyBagChangedDelegate value);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal abstract class Microsoft.Exchange.WebServices.Data.SimpleServiceRequestBase : ServiceRequestBase {
    internal SimpleServiceRequestBase(ExchangeService service);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.SimpleServiceRequestBase/<InternalExecuteAsync>d__1")]
internal Task`1<object> InternalExecuteAsync(CancellationToken token);
    private static void WebRequestAsyncCallback(IAsyncResult webAsyncResult);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.SimpleServiceRequestBase/<ReadResponse>d__3")]
private Task`1<object> ReadResponse(IEwsHttpWebResponse response);
    private object ReadResponseXml(Stream responseStream);
    private object ReadResponseXml(Stream responseStream, HttpResponseHeaders responseHeaders);
}
public class Microsoft.Exchange.WebServices.Data.SingleValueInsightContent : ComplexProperty {
    [CompilerGeneratedAttribute]
private InsightValue <Item>k__BackingField;
    public InsightValue Item { get; internal set; }
    [CompilerGeneratedAttribute]
public InsightValue get_Item();
    [CompilerGeneratedAttribute]
internal void set_Item(InsightValue value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
public class Microsoft.Exchange.WebServices.Data.SkillInsightValue : InsightValue {
    private string name;
    private string strength;
    public string Name { get; public set; }
    public string Strength { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Strength();
    public void set_Strength(string value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
public class Microsoft.Exchange.WebServices.Data.SkillInsightValueCollection : ComplexPropertyCollection`1<SkillInsightValue> {
    private string collectionItemXmlElementName;
    internal SkillInsightValueCollection(string collectionItemXmlElementName);
    internal virtual SkillInsightValue CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(SkillInsightValue insight);
    internal virtual bool ShouldWriteToRequest();
}
internal class Microsoft.Exchange.WebServices.Data.SoapFaultDetails : object {
    private string faultCode;
    private string faultString;
    private string faultActor;
    private ServiceError responseCode;
    private string message;
    private ServiceError errorCode;
    private string exceptionType;
    private int lineNumber;
    private int positionWithinLine;
    private Dictionary`2<string, string> errorDetails;
    internal string FaultCode { get; internal set; }
    internal string FaultString { get; internal set; }
    internal string FaultActor { get; internal set; }
    internal ServiceError ResponseCode { get; internal set; }
    internal string Message { get; internal set; }
    internal ServiceError ErrorCode { get; internal set; }
    internal string ExceptionType { get; internal set; }
    internal int LineNumber { get; internal set; }
    internal int PositionWithinLine { get; internal set; }
    internal Dictionary`2<string, string> ErrorDetails { get; internal set; }
    internal static SoapFaultDetails Parse(EwsXmlReader reader, XmlNamespace soapNamespace);
    private void ParseDetailNode(EwsXmlReader reader);
    private void ParseMessageXml(EwsXmlReader reader);
    internal string get_FaultCode();
    internal void set_FaultCode(string value);
    internal string get_FaultString();
    internal void set_FaultString(string value);
    internal string get_FaultActor();
    internal void set_FaultActor(string value);
    internal ServiceError get_ResponseCode();
    internal void set_ResponseCode(ServiceError value);
    internal string get_Message();
    internal void set_Message(string value);
    internal ServiceError get_ErrorCode();
    internal void set_ErrorCode(ServiceError value);
    internal string get_ExceptionType();
    internal void set_ExceptionType(string value);
    internal int get_LineNumber();
    internal void set_LineNumber(int value);
    internal int get_PositionWithinLine();
    internal void set_PositionWithinLine(int value);
    internal Dictionary`2<string, string> get_ErrorDetails();
    internal void set_ErrorDetails(Dictionary`2<string, string> value);
}
public enum Microsoft.Exchange.WebServices.Data.SortDirection : Enum {
    public int value__;
    public static SortDirection Ascending;
    public static SortDirection Descending;
}
public enum Microsoft.Exchange.WebServices.Data.StandardUser : Enum {
    public int value__;
    public static StandardUser Default;
    public static StandardUser Anonymous;
}
internal class Microsoft.Exchange.WebServices.Data.StartTimeZonePropertyDefinition : TimeZonePropertyDefinition {
    internal StartTimeZonePropertyDefinition(string xmlElementName, string uri, PropertyDefinitionFlags flags, ExchangeVersion version);
    internal virtual void RegisterAssociatedInternalProperties(List`1<PropertyDefinition> properties);
    internal virtual void WritePropertyValueToXml(EwsServiceXmlWriter writer, PropertyBag propertyBag, bool isUpdateOperation);
    internal virtual void WriteToXml(EwsServiceXmlWriter writer);
    internal virtual bool HasFlag(PropertyDefinitionFlags flag, Nullable`1<ExchangeVersion> version);
}
public class Microsoft.Exchange.WebServices.Data.StreamingSubscription : SubscriptionBase {
    public ExchangeService Service { get; }
    protected bool UsesWatermark { get; }
    internal StreamingSubscription(ExchangeService service);
    public StreamingSubscription(ExchangeService service, string subscriptionId);
    public Task Unsubscribe(CancellationToken token);
    public ExchangeService get_Service();
    protected virtual bool get_UsesWatermark();
}
public class Microsoft.Exchange.WebServices.Data.StreamingSubscriptionConnection : object {
    private Dictionary`2<string, StreamingSubscription> subscriptions;
    private int connectionTimeout;
    private ExchangeService session;
    private bool isDisposed;
    private GetStreamingEventsRequest currentHangingRequest;
    private object lockObject;
    [CompilerGeneratedAttribute]
private NotificationEventDelegate OnNotificationEvent;
    [CompilerGeneratedAttribute]
private SubscriptionErrorDelegate OnSubscriptionError;
    [CompilerGeneratedAttribute]
private SubscriptionErrorDelegate OnDisconnect;
    public IEnumerable`1<StreamingSubscription> CurrentSubscriptions { get; }
    public bool IsOpen { get; }
    public StreamingSubscriptionConnection(ExchangeService service, int lifetime);
    public StreamingSubscriptionConnection(ExchangeService service, IEnumerable`1<StreamingSubscription> subscriptions, int lifetime);
    [CompilerGeneratedAttribute]
public void add_OnNotificationEvent(NotificationEventDelegate value);
    [CompilerGeneratedAttribute]
public void remove_OnNotificationEvent(NotificationEventDelegate value);
    [CompilerGeneratedAttribute]
public void add_OnSubscriptionError(SubscriptionErrorDelegate value);
    [CompilerGeneratedAttribute]
public void remove_OnSubscriptionError(SubscriptionErrorDelegate value);
    [CompilerGeneratedAttribute]
public void add_OnDisconnect(SubscriptionErrorDelegate value);
    [CompilerGeneratedAttribute]
public void remove_OnDisconnect(SubscriptionErrorDelegate value);
    public IEnumerable`1<StreamingSubscription> get_CurrentSubscriptions();
    public void AddSubscription(StreamingSubscription subscription);
    public void RemoveSubscription(StreamingSubscription subscription);
    public void Open(CancellationToken token);
    private void OnRequestDisconnect(object sender, HangingRequestDisconnectEventArgs args);
    public void Close();
    private void InternalOnDisconnect(Exception ex);
    public bool get_IsOpen();
    private void ValidateConnectionState(bool isConnectedExpected, string errorMessage);
    private void HandleServiceResponseObject(object response);
    private void IssueSubscriptionFailures(GetStreamingEventsResponse gseResponse);
    private void IssueGeneralFailure(GetStreamingEventsResponse gseResponse);
    private void IssueNotificationEvents(GetStreamingEventsResponse gseResponse);
    protected virtual override void Finalize();
    public sealed virtual void Dispose();
    private void Dispose(bool suppressFinalizer);
    private void ThrowIfDisposed();
}
public class Microsoft.Exchange.WebServices.Data.StringInsightValue : InsightValue {
    private string data;
    public string Data { get; public set; }
    public string get_Data();
    public void set_Data(string value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Exchange.WebServices.Data.StringList : ComplexProperty {
    private List`1<string> items;
    private string itemXmlElementName;
    public int Count { get; }
    public string Item { get; public set; }
    public StringList(IEnumerable`1<string> strings);
    internal StringList(string itemXmlElementName);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    public void Add(string s);
    public void AddRange(IEnumerable`1<string> strings);
    public bool Contains(string s);
    public bool Remove(string s);
    public void RemoveAt(int index);
    public void Clear();
    public virtual string ToString();
    public int get_Count();
    public string get_Item(int index);
    public void set_Item(int index, string value);
    public sealed virtual IEnumerator`1<string> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Microsoft.Exchange.WebServices.Data.StringPropertyDefinition : TypedPropertyDefinition {
    internal bool IsNullable { get; }
    public Type Type { get; }
    internal StringPropertyDefinition(string xmlElementName, string uri, PropertyDefinitionFlags flags, ExchangeVersion version);
    internal virtual object Parse(string value);
    internal virtual bool get_IsNullable();
    public virtual Type get_Type();
}
internal abstract class Microsoft.Exchange.WebServices.Data.SubscribeRequest`1 : MultiResponseServiceRequest`1<SubscribeResponse`1<TSubscription>> {
    [CompilerGeneratedAttribute]
private FolderIdWrapperList <FolderIds>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<EventType> <EventTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Watermark>k__BackingField;
    public FolderIdWrapperList FolderIds { get; private set; }
    public List`1<EventType> EventTypes { get; private set; }
    public string Watermark { get; public set; }
    internal SubscribeRequest`1(ExchangeService service);
    internal virtual void Validate();
    internal abstract virtual string GetSubscriptionXmlElementName();
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal abstract virtual void InternalWriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    [CompilerGeneratedAttribute]
public FolderIdWrapperList get_FolderIds();
    [CompilerGeneratedAttribute]
private void set_FolderIds(FolderIdWrapperList value);
    [CompilerGeneratedAttribute]
public List`1<EventType> get_EventTypes();
    [CompilerGeneratedAttribute]
private void set_EventTypes(List`1<EventType> value);
    [CompilerGeneratedAttribute]
public string get_Watermark();
    [CompilerGeneratedAttribute]
public void set_Watermark(string value);
    [CompilerGeneratedAttribute]
private void <Validate>b__0_1(EventType eventType);
}
internal class Microsoft.Exchange.WebServices.Data.SubscribeResponse`1 : ServiceResponse {
    private TSubscription subscription;
    public TSubscription Subscription { get; }
    internal SubscribeResponse`1(TSubscription subscription);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    public TSubscription get_Subscription();
}
internal class Microsoft.Exchange.WebServices.Data.SubscribeToPullNotificationsRequest : SubscribeRequest`1<PullSubscription> {
    private int timeout;
    public int Timeout { get; public set; }
    internal SubscribeToPullNotificationsRequest(ExchangeService service);
    internal virtual void Validate();
    internal virtual SubscribeResponse`1<PullSubscription> CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual string GetSubscriptionXmlElementName();
    internal virtual void InternalWriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public int get_Timeout();
    public void set_Timeout(int value);
}
internal class Microsoft.Exchange.WebServices.Data.SubscribeToPushNotificationsRequest : SubscribeRequest`1<PushSubscription> {
    private int frequency;
    private Uri url;
    private string callerData;
    public int Frequency { get; public set; }
    public Uri Url { get; public set; }
    public string CallerData { get; public set; }
    internal SubscribeToPushNotificationsRequest(ExchangeService service);
    internal virtual void Validate();
    internal virtual string GetSubscriptionXmlElementName();
    internal virtual void InternalWriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual SubscribeResponse`1<PushSubscription> CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public int get_Frequency();
    public void set_Frequency(int value);
    public Uri get_Url();
    public void set_Url(Uri value);
    public string get_CallerData();
    public void set_CallerData(string value);
}
internal class Microsoft.Exchange.WebServices.Data.SubscribeToStreamingNotificationsRequest : SubscribeRequest`1<StreamingSubscription> {
    internal SubscribeToStreamingNotificationsRequest(ExchangeService service);
    internal virtual void Validate();
    internal virtual string GetSubscriptionXmlElementName();
    internal virtual void InternalWriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual SubscribeResponse`1<StreamingSubscription> CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.Exchange.WebServices.Data.SubscriptionBase : object {
    private ExchangeService service;
    private string id;
    private string watermark;
    internal ExchangeService Service { get; }
    public string Id { get; internal set; }
    public string Watermark { get; internal set; }
    protected bool UsesWatermark { get; }
    internal SubscriptionBase(ExchangeService service);
    internal SubscriptionBase(ExchangeService service, string id);
    internal SubscriptionBase(ExchangeService service, string id, string watermark);
    internal virtual void LoadFromXml(EwsServiceXmlReader reader);
    internal ExchangeService get_Service();
    public string get_Id();
    internal void set_Id(string value);
    public string get_Watermark();
    internal void set_Watermark(string value);
    protected virtual bool get_UsesWatermark();
}
public class Microsoft.Exchange.WebServices.Data.SubscriptionErrorEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private StreamingSubscription <Subscription>k__BackingField;
    [CompilerGeneratedAttribute]
private Exception <Exception>k__BackingField;
    public StreamingSubscription Subscription { get; internal set; }
    public Exception Exception { get; internal set; }
    internal SubscriptionErrorEventArgs(StreamingSubscription subscription, Exception exception);
    [CompilerGeneratedAttribute]
public StreamingSubscription get_Subscription();
    [CompilerGeneratedAttribute]
internal void set_Subscription(StreamingSubscription value);
    [CompilerGeneratedAttribute]
public Exception get_Exception();
    [CompilerGeneratedAttribute]
internal void set_Exception(Exception value);
}
public class Microsoft.Exchange.WebServices.Data.Suggestion : ComplexProperty {
    private DateTime date;
    private SuggestionQuality quality;
    private Collection`1<TimeSuggestion> timeSuggestions;
    public DateTime Date { get; }
    public SuggestionQuality Quality { get; }
    public Collection`1<TimeSuggestion> TimeSuggestions { get; }
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    public DateTime get_Date();
    public SuggestionQuality get_Quality();
    public Collection`1<TimeSuggestion> get_TimeSuggestions();
}
public enum Microsoft.Exchange.WebServices.Data.SuggestionQuality : Enum {
    public int value__;
    public static SuggestionQuality Excellent;
    public static SuggestionQuality Good;
    public static SuggestionQuality Fair;
    public static SuggestionQuality Poor;
}
internal class Microsoft.Exchange.WebServices.Data.SuggestionsResponse : ServiceResponse {
    private Collection`1<Suggestion> daySuggestions;
    internal Collection`1<Suggestion> Suggestions { get; }
    internal void LoadSuggestedDaysFromXml(EwsServiceXmlReader reader);
    internal Collection`1<Suggestion> get_Suggestions();
}
[ServiceObjectDefinitionAttribute("SuppressReadReceipt")]
internal class Microsoft.Exchange.WebServices.Data.SuppressReadReceipt : ServiceObject {
    private Item referenceItem;
    internal SuppressReadReceipt(Item referenceItem);
    internal virtual ServiceObjectSchema GetSchema();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal virtual Task`1<ServiceResponseCollection`1<ServiceResponse>> InternalLoad(PropertySet propertySet, CancellationToken token);
    internal virtual Task`1<ServiceResponseCollection`1<ServiceResponse>> InternalDelete(DeleteMode deleteMode, Nullable`1<SendCancellationsMode> sendCancellationsMode, Nullable`1<AffectedTaskOccurrence> affectedTaskOccurrences, CancellationToken token);
    internal Task InternalCreate(FolderId parentFolderId, Nullable`1<MessageDisposition> messageDisposition, CancellationToken token);
}
internal class Microsoft.Exchange.WebServices.Data.SyncFolderHierarchyRequest : MultiResponseServiceRequest`1<SyncFolderHierarchyResponse> {
    private PropertySet propertySet;
    private FolderId syncFolderId;
    private string syncState;
    public PropertySet PropertySet { get; public set; }
    public FolderId SyncFolderId { get; public set; }
    public string SyncState { get; public set; }
    internal SyncFolderHierarchyRequest(ExchangeService service);
    internal virtual SyncFolderHierarchyResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual void Validate();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public PropertySet get_PropertySet();
    public void set_PropertySet(PropertySet value);
    public FolderId get_SyncFolderId();
    public void set_SyncFolderId(FolderId value);
    public string get_SyncState();
    public void set_SyncState(string value);
}
public class Microsoft.Exchange.WebServices.Data.SyncFolderHierarchyResponse : SyncResponse`2<Folder, FolderChange> {
    internal bool SummaryPropertiesOnly { get; }
    internal SyncFolderHierarchyResponse(PropertySet propertySet);
    internal virtual string GetIncludesLastInRangeXmlElementName();
    internal virtual FolderChange CreateChangeInstance();
    internal virtual string GetChangeElementName();
    internal virtual string GetChangeIdElementName();
    internal virtual bool get_SummaryPropertiesOnly();
}
internal class Microsoft.Exchange.WebServices.Data.SyncFolderItemsRequest : MultiResponseServiceRequest`1<SyncFolderItemsResponse> {
    private PropertySet propertySet;
    private FolderId syncFolderId;
    private SyncFolderItemsScope syncScope;
    private string syncState;
    private ItemIdWrapperList ignoredItemIds;
    private int maxChangesReturned;
    private int numberOfDays;
    public PropertySet PropertySet { get; public set; }
    public FolderId SyncFolderId { get; public set; }
    public SyncFolderItemsScope SyncScope { get; public set; }
    public string SyncState { get; public set; }
    public ItemIdWrapperList IgnoredItemIds { get; }
    public int MaxChangesReturned { get; public set; }
    public int NumberOfDays { get; public set; }
    internal SyncFolderItemsRequest(ExchangeService service);
    internal virtual SyncFolderItemsResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual void Validate();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public PropertySet get_PropertySet();
    public void set_PropertySet(PropertySet value);
    public FolderId get_SyncFolderId();
    public void set_SyncFolderId(FolderId value);
    public SyncFolderItemsScope get_SyncScope();
    public void set_SyncScope(SyncFolderItemsScope value);
    public string get_SyncState();
    public void set_SyncState(string value);
    public ItemIdWrapperList get_IgnoredItemIds();
    public int get_MaxChangesReturned();
    public void set_MaxChangesReturned(int value);
    public int get_NumberOfDays();
    public void set_NumberOfDays(int value);
}
public class Microsoft.Exchange.WebServices.Data.SyncFolderItemsResponse : SyncResponse`2<Item, ItemChange> {
    internal bool SummaryPropertiesOnly { get; }
    internal SyncFolderItemsResponse(PropertySet propertySet);
    internal virtual string GetIncludesLastInRangeXmlElementName();
    internal virtual ItemChange CreateChangeInstance();
    internal virtual string GetChangeElementName();
    internal virtual string GetChangeIdElementName();
    internal virtual bool get_SummaryPropertiesOnly();
}
public enum Microsoft.Exchange.WebServices.Data.SyncFolderItemsScope : Enum {
    public int value__;
    public static SyncFolderItemsScope NormalItems;
    public static SyncFolderItemsScope NormalAndAssociatedItems;
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.Exchange.WebServices.Data.SyncResponse`2 : ServiceResponse {
    private ChangeCollection`1<TChange> changes;
    private PropertySet propertySet;
    public ChangeCollection`1<TChange> Changes { get; }
    internal bool SummaryPropertiesOnly { get; }
    internal SyncResponse`2(PropertySet propertySet);
    internal abstract virtual string GetIncludesLastInRangeXmlElementName();
    internal abstract virtual TChange CreateChangeInstance();
    internal abstract virtual string GetChangeElementName();
    internal abstract virtual string GetChangeIdElementName();
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    public ChangeCollection`1<TChange> get_Changes();
    internal abstract virtual bool get_SummaryPropertiesOnly();
}
[AttachableAttribute]
[ServiceObjectDefinitionAttribute("Task")]
public class Microsoft.Exchange.WebServices.Data.Task : Item {
    public Nullable`1<int> ActualWork { get; public set; }
    public Nullable`1<DateTime> AssignedTime { get; }
    public string BillingInformation { get; public set; }
    public int ChangeCount { get; }
    public StringList Companies { get; public set; }
    public Nullable`1<DateTime> CompleteDate { get; public set; }
    public StringList Contacts { get; public set; }
    public TaskDelegationState DelegationState { get; }
    public string Delegator { get; }
    public Nullable`1<DateTime> DueDate { get; public set; }
    public TaskMode Mode { get; }
    public bool IsComplete { get; }
    public bool IsRecurring { get; }
    public bool IsTeamTask { get; }
    public string Mileage { get; public set; }
    public string Owner { get; }
    public double PercentComplete { get; public set; }
    public Recurrence Recurrence { get; public set; }
    public Nullable`1<DateTime> StartDate { get; public set; }
    public TaskStatus Status { get; public set; }
    public string StatusDescription { get; }
    public Nullable`1<int> TotalWork { get; public set; }
    internal Nullable`1<AffectedTaskOccurrence> DefaultAffectedTaskOccurrences { get; }
    public Task(ExchangeService service);
    internal Task(ItemAttachment parentAttachment);
    public static Task`1<Task> Bind(ExchangeService service, ItemId id, PropertySet propertySet, CancellationToken token);
    public static Task`1<Task> Bind(ExchangeService service, ItemId id);
    internal virtual ServiceObjectSchema GetSchema();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal virtual bool GetIsTimeZoneHeaderRequired(bool isUpdateOperation);
    public Task`1<ServiceResponseCollection`1<ServiceResponse>> DeleteCurrentOccurrence(DeleteMode deleteMode, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.Task/<Update>d__8")]
public Task`1<Task> Update(ConflictResolutionMode conflictResolutionMode, CancellationToken token);
    public Nullable`1<int> get_ActualWork();
    public void set_ActualWork(Nullable`1<int> value);
    public Nullable`1<DateTime> get_AssignedTime();
    public string get_BillingInformation();
    public void set_BillingInformation(string value);
    public int get_ChangeCount();
    public StringList get_Companies();
    public void set_Companies(StringList value);
    public Nullable`1<DateTime> get_CompleteDate();
    public void set_CompleteDate(Nullable`1<DateTime> value);
    public StringList get_Contacts();
    public void set_Contacts(StringList value);
    public TaskDelegationState get_DelegationState();
    public string get_Delegator();
    public Nullable`1<DateTime> get_DueDate();
    public void set_DueDate(Nullable`1<DateTime> value);
    public TaskMode get_Mode();
    public bool get_IsComplete();
    public bool get_IsRecurring();
    public bool get_IsTeamTask();
    public string get_Mileage();
    public void set_Mileage(string value);
    public string get_Owner();
    public double get_PercentComplete();
    public void set_PercentComplete(double value);
    public Recurrence get_Recurrence();
    public void set_Recurrence(Recurrence value);
    public Nullable`1<DateTime> get_StartDate();
    public void set_StartDate(Nullable`1<DateTime> value);
    public TaskStatus get_Status();
    public void set_Status(TaskStatus value);
    public string get_StatusDescription();
    public Nullable`1<int> get_TotalWork();
    public void set_TotalWork(Nullable`1<int> value);
    internal virtual Nullable`1<AffectedTaskOccurrence> get_DefaultAffectedTaskOccurrences();
}
public enum Microsoft.Exchange.WebServices.Data.TaskDelegationState : Enum {
    public int value__;
    public static TaskDelegationState NoDelegation;
    public static TaskDelegationState Unknown;
    public static TaskDelegationState Accepted;
    public static TaskDelegationState Declined;
}
internal class Microsoft.Exchange.WebServices.Data.TaskDelegationStatePropertyDefinition : GenericPropertyDefinition`1<TaskDelegationState> {
    private static string NoMatch;
    private static string OwnNew;
    private static string Owned;
    private static string Accepted;
    internal TaskDelegationStatePropertyDefinition(string xmlElementName, string uri, PropertyDefinitionFlags flags, ExchangeVersion version);
    internal virtual object Parse(string value);
    internal virtual string ToString(object value);
}
public enum Microsoft.Exchange.WebServices.Data.TaskMode : Enum {
    public int value__;
    public static TaskMode Normal;
    public static TaskMode Request;
    public static TaskMode RequestAccepted;
    public static TaskMode RequestDeclined;
    public static TaskMode Update;
    public static TaskMode SelfDelegated;
}
[SchemaAttribute]
public class Microsoft.Exchange.WebServices.Data.TaskSchema : ItemSchema {
    public static PropertyDefinition ActualWork;
    public static PropertyDefinition AssignedTime;
    public static PropertyDefinition BillingInformation;
    public static PropertyDefinition ChangeCount;
    public static PropertyDefinition Companies;
    public static PropertyDefinition CompleteDate;
    public static PropertyDefinition Contacts;
    public static PropertyDefinition DelegationState;
    public static PropertyDefinition Delegator;
    public static PropertyDefinition DueDate;
    public static PropertyDefinition Mode;
    public static PropertyDefinition IsComplete;
    public static PropertyDefinition IsRecurring;
    public static PropertyDefinition IsTeamTask;
    public static PropertyDefinition Mileage;
    public static PropertyDefinition Owner;
    public static PropertyDefinition PercentComplete;
    public static PropertyDefinition Recurrence;
    public static PropertyDefinition StartDate;
    public static PropertyDefinition Status;
    public static PropertyDefinition StatusDescription;
    public static PropertyDefinition TotalWork;
    internal static TaskSchema Instance;
    private static TaskSchema();
    internal virtual void RegisterProperties();
}
[ServiceObjectDefinitionAttribute("TasksFolder")]
public class Microsoft.Exchange.WebServices.Data.TasksFolder : Folder {
    public TasksFolder(ExchangeService service);
    public static Task`1<TasksFolder> Bind(ExchangeService service, FolderId id, PropertySet propertySet, CancellationToken token);
    public static Task`1<TasksFolder> Bind(ExchangeService service, FolderId id, CancellationToken token);
    public static Task`1<TasksFolder> Bind(ExchangeService service, WellKnownFolderName name, PropertySet propertySet, CancellationToken token);
    public static Task`1<TasksFolder> Bind(ExchangeService service, WellKnownFolderName name, CancellationToken token);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
}
public enum Microsoft.Exchange.WebServices.Data.TaskStatus : Enum {
    public int value__;
    public static TaskStatus NotStarted;
    public static TaskStatus InProgress;
    public static TaskStatus Completed;
    public static TaskStatus WaitingOnOthers;
    public static TaskStatus Deferred;
}
public class Microsoft.Exchange.WebServices.Data.TaskSuggestion : ExtractedEntity {
    [CompilerGeneratedAttribute]
private string <TaskString>k__BackingField;
    [CompilerGeneratedAttribute]
private EmailUserEntityCollection <Assignees>k__BackingField;
    public string TaskString { get; internal set; }
    public EmailUserEntityCollection Assignees { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_TaskString();
    [CompilerGeneratedAttribute]
internal void set_TaskString(string value);
    [CompilerGeneratedAttribute]
public EmailUserEntityCollection get_Assignees();
    [CompilerGeneratedAttribute]
internal void set_Assignees(EmailUserEntityCollection value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.TaskSuggestionCollection : ComplexPropertyCollection`1<TaskSuggestion> {
    internal TaskSuggestionCollection(IEnumerable`1<TaskSuggestion> collection);
    internal virtual TaskSuggestion CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(TaskSuggestion complexProperty);
}
public enum Microsoft.Exchange.WebServices.Data.TeamMailboxLifecycleState : Enum {
    public int value__;
    [EwsEnumAttribute("Active")]
public static TeamMailboxLifecycleState Active;
    [EwsEnumAttribute("Closed")]
public static TeamMailboxLifecycleState Closed;
    [EwsEnumAttribute("Unlinked")]
public static TeamMailboxLifecycleState Unlinked;
    [EwsEnumAttribute("PendingDelete")]
public static TeamMailboxLifecycleState PendingDelete;
}
public class Microsoft.Exchange.WebServices.Data.TextBody : MessageBody {
    public TextBody(string text);
    public static TextBody op_Implicit(string textBody);
}
internal class Microsoft.Exchange.WebServices.Data.Time : object {
    private int hours;
    private int minutes;
    private int seconds;
    internal int Hours { get; internal set; }
    internal int Minutes { get; internal set; }
    internal int Seconds { get; internal set; }
    internal Time(int minutes);
    internal Time(DateTime dateTime);
    internal Time(int hours, int minutes, int seconds);
    internal string ToXSTime();
    internal int ConvertToMinutes();
    internal int get_Hours();
    internal void set_Hours(int value);
    internal int get_Minutes();
    internal void set_Minutes(int value);
    internal int get_Seconds();
    internal void set_Seconds(int value);
}
internal class Microsoft.Exchange.WebServices.Data.TimeChange : ComplexProperty {
    private string timeZoneName;
    private Nullable`1<TimeSpan> offset;
    private Time time;
    private Nullable`1<DateTime> absoluteDate;
    private TimeChangeRecurrence recurrence;
    public string TimeZoneName { get; public set; }
    public Nullable`1<TimeSpan> Offset { get; public set; }
    public Time Time { get; public set; }
    public Nullable`1<DateTime> AbsoluteDate { get; public set; }
    public TimeChangeRecurrence Recurrence { get; public set; }
    public TimeChange(TimeSpan offset);
    public TimeChange(TimeSpan offset, Time time);
    public string get_TimeZoneName();
    public void set_TimeZoneName(string value);
    public Nullable`1<TimeSpan> get_Offset();
    public void set_Offset(Nullable`1<TimeSpan> value);
    public Time get_Time();
    public void set_Time(Time value);
    public Nullable`1<DateTime> get_AbsoluteDate();
    public void set_AbsoluteDate(Nullable`1<DateTime> value);
    public TimeChangeRecurrence get_Recurrence();
    public void set_Recurrence(TimeChangeRecurrence value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void ReadAttributesFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
}
internal class Microsoft.Exchange.WebServices.Data.TimeChangeRecurrence : ComplexProperty {
    private Nullable`1<DayOfTheWeek> dayOfTheWeek;
    private Nullable`1<DayOfTheWeekIndex> dayOfTheWeekIndex;
    private Nullable`1<Month> month;
    public Nullable`1<DayOfTheWeekIndex> DayOfTheWeekIndex { get; public set; }
    public Nullable`1<DayOfTheWeek> DayOfTheWeek { get; public set; }
    public Nullable`1<Month> Month { get; public set; }
    public TimeChangeRecurrence(DayOfTheWeekIndex dayOfTheWeekIndex, DayOfTheWeek dayOfTheWeek, Month month);
    public Nullable`1<DayOfTheWeekIndex> get_DayOfTheWeekIndex();
    public void set_DayOfTheWeekIndex(Nullable`1<DayOfTheWeekIndex> value);
    public Nullable`1<DayOfTheWeek> get_DayOfTheWeek();
    public void set_DayOfTheWeek(Nullable`1<DayOfTheWeek> value);
    public Nullable`1<Month> get_Month();
    public void set_Month(Nullable`1<Month> value);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
internal class Microsoft.Exchange.WebServices.Data.TimeSpanPropertyDefinition : GenericPropertyDefinition`1<TimeSpan> {
    internal TimeSpanPropertyDefinition(string xmlElementName, string uri, PropertyDefinitionFlags flags, ExchangeVersion version);
    internal virtual object Parse(string value);
    internal virtual string ToString(object value);
}
public class Microsoft.Exchange.WebServices.Data.TimeSuggestion : ComplexProperty {
    private DateTime meetingTime;
    private bool isWorkTime;
    private SuggestionQuality quality;
    private Collection`1<Conflict> conflicts;
    public DateTime MeetingTime { get; }
    public bool IsWorkTime { get; }
    public SuggestionQuality Quality { get; }
    public Collection`1<Conflict> Conflicts { get; }
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    public DateTime get_MeetingTime();
    public bool get_IsWorkTime();
    public SuggestionQuality get_Quality();
    public Collection`1<Conflict> get_Conflicts();
}
public class Microsoft.Exchange.WebServices.Data.TimeWindow : object {
    private DateTime startTime;
    private DateTime endTime;
    public DateTime StartTime { get; public set; }
    public DateTime EndTime { get; public set; }
    internal TimeSpan Duration { get; }
    public TimeWindow(DateTime startTime, DateTime endTime);
    public DateTime get_StartTime();
    public void set_StartTime(DateTime value);
    public DateTime get_EndTime();
    public void set_EndTime(DateTime value);
    internal void LoadFromXml(EwsServiceXmlReader reader);
    private static void WriteToXml(EwsServiceXmlWriter writer, string xmlElementName, object startTime, object endTime);
    internal void WriteToXmlUnscopedDatesOnly(EwsServiceXmlWriter writer, string xmlElementName);
    internal void WriteToXml(EwsServiceXmlWriter writer, string xmlElementName);
    internal TimeSpan get_Duration();
    private sealed virtual override void Microsoft.Exchange.WebServices.Data.ISelfValidate.Validate();
}
public class Microsoft.Exchange.WebServices.Data.TimeZoneConversionException : ServiceLocalException {
    public TimeZoneConversionException(string message);
    public TimeZoneConversionException(string message, Exception innerException);
    protected TimeZoneConversionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.Exchange.WebServices.Data.TimeZoneDefinition : ComplexProperty {
    private static string NoIdPrefix;
    private string name;
    private string id;
    private Dictionary`2<string, TimeZonePeriod> periods;
    private Dictionary`2<string, TimeZoneTransitionGroup> transitionGroups;
    private List`1<TimeZoneTransition> transitions;
    internal string Name { get; internal set; }
    public string Id { get; public set; }
    internal Dictionary`2<string, TimeZonePeriod> Periods { get; }
    internal Dictionary`2<string, TimeZoneTransitionGroup> TransitionGroups { get; }
    internal TimeZoneDefinition(TimeZoneInfo timeZoneInfo);
    private int CompareTransitions(TimeZoneTransition x, TimeZoneTransition y);
    private TimeZoneTransitionGroup CreateTransitionGroupToPeriod(TimeZonePeriod timeZonePeriod);
    internal virtual void ReadAttributesFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal void LoadFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal void WriteToXml(EwsServiceXmlWriter writer);
    internal void Validate();
    internal TimeZoneInfo ToTimeZoneInfo(ExchangeService service);
    internal string get_Name();
    internal void set_Name(string value);
    public string get_Id();
    public void set_Id(string value);
    internal Dictionary`2<string, TimeZonePeriod> get_Periods();
    internal Dictionary`2<string, TimeZoneTransitionGroup> get_TransitionGroups();
}
internal class Microsoft.Exchange.WebServices.Data.TimeZonePeriod : ComplexProperty {
    internal static string StandardPeriodId;
    internal static string StandardPeriodName;
    internal static string DaylightPeriodId;
    internal static string DaylightPeriodName;
    private TimeSpan bias;
    private string name;
    private string id;
    internal bool IsStandardPeriod { get; }
    internal TimeSpan Bias { get; internal set; }
    internal string Name { get; internal set; }
    internal string Id { get; internal set; }
    internal virtual void ReadAttributesFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal void LoadFromXml(EwsServiceXmlReader reader);
    internal void WriteToXml(EwsServiceXmlWriter writer);
    internal bool get_IsStandardPeriod();
    internal TimeSpan get_Bias();
    internal void set_Bias(TimeSpan value);
    internal string get_Name();
    internal void set_Name(string value);
    internal string get_Id();
    internal void set_Id(string value);
}
internal class Microsoft.Exchange.WebServices.Data.TimeZonePropertyDefinition : PropertyDefinition {
    public Type Type { get; }
    internal TimeZonePropertyDefinition(string xmlElementName, string uri, PropertyDefinitionFlags flags, ExchangeVersion version);
    internal virtual void LoadPropertyValueFromXml(EwsServiceXmlReader reader, PropertyBag propertyBag);
    internal virtual void WritePropertyValueToXml(EwsServiceXmlWriter writer, PropertyBag propertyBag, bool isUpdateOperation);
    public virtual Type get_Type();
}
internal class Microsoft.Exchange.WebServices.Data.TimeZoneTransition : ComplexProperty {
    private static string PeriodTarget;
    private static string GroupTarget;
    private TimeZoneDefinition timeZoneDefinition;
    private TimeZonePeriod targetPeriod;
    private TimeZoneTransitionGroup targetGroup;
    internal TimeZonePeriod TargetPeriod { get; }
    internal TimeZoneTransitionGroup TargetGroup { get; }
    internal TimeZoneTransition(TimeZoneDefinition timeZoneDefinition);
    internal TimeZoneTransition(TimeZoneDefinition timeZoneDefinition, TimeZoneTransitionGroup targetGroup);
    internal TimeZoneTransition(TimeZoneDefinition timeZoneDefinition, TimeZonePeriod targetPeriod);
    internal static TimeZoneTransition Create(TimeZoneDefinition timeZoneDefinition, string xmlElementName);
    internal static TimeZoneTransition CreateTimeZoneTransition(TimeZoneDefinition timeZoneDefinition, TimeZonePeriod targetPeriod, TransitionTime transitionTime);
    internal virtual string GetXmlElementName();
    internal virtual TransitionTime CreateTransitionTime();
    internal virtual void InitializeFromTransitionTime(TransitionTime transitionTime);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal void LoadFromXml(EwsServiceXmlReader reader);
    internal void WriteToXml(EwsServiceXmlWriter writer);
    internal TimeZonePeriod get_TargetPeriod();
    internal TimeZoneTransitionGroup get_TargetGroup();
}
internal class Microsoft.Exchange.WebServices.Data.TimeZoneTransitionGroup : ComplexProperty {
    private TimeZoneDefinition timeZoneDefinition;
    private string id;
    private List`1<TimeZoneTransition> transitions;
    private TimeZoneTransition transitionToStandard;
    private TimeZoneTransition transitionToDaylight;
    internal bool SupportsDaylight { get; }
    private TimeZoneTransition TransitionToDaylight { get; }
    private TimeZoneTransition TransitionToStandard { get; }
    internal string Id { get; internal set; }
    internal List`1<TimeZoneTransition> Transitions { get; }
    internal TimeZoneTransitionGroup(TimeZoneDefinition timeZoneDefinition);
    internal TimeZoneTransitionGroup(TimeZoneDefinition timeZoneDefinition, string id);
    internal void LoadFromXml(EwsServiceXmlReader reader);
    internal void WriteToXml(EwsServiceXmlWriter writer);
    internal virtual void ReadAttributesFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual void InitializeFromAdjustmentRule(AdjustmentRule adjustmentRule, TimeZonePeriod standardPeriod);
    internal void Validate();
    internal bool get_SupportsDaylight();
    private void InitializeTransitions();
    private TimeZoneTransition get_TransitionToDaylight();
    private TimeZoneTransition get_TransitionToStandard();
    internal CustomTimeZoneCreateParams GetCustomTimeZoneCreationParams();
    internal TimeSpan GetDaylightDelta();
    internal AdjustmentRule CreateAdjustmentRule(DateTime startDate, DateTime endDate);
    internal string get_Id();
    internal void set_Id(string value);
    internal List`1<TimeZoneTransition> get_Transitions();
}
public class Microsoft.Exchange.WebServices.Data.TokenCredentials : WSSecurityBasedCredentials {
    public TokenCredentials(string securityToken);
    internal virtual void PrepareWebRequest(IEwsHttpWebRequest request);
}
[FlagsAttribute]
public enum Microsoft.Exchange.WebServices.Data.TraceFlags : Enum {
    public long value__;
    public static TraceFlags None;
    public static TraceFlags EwsRequest;
    public static TraceFlags EwsResponse;
    public static TraceFlags EwsResponseHttpHeaders;
    public static TraceFlags AutodiscoverRequest;
    public static TraceFlags AutodiscoverResponse;
    public static TraceFlags AutodiscoverResponseHttpHeaders;
    public static TraceFlags AutodiscoverConfiguration;
    public static TraceFlags DebugMessage;
    public static TraceFlags EwsRequestHttpHeaders;
    public static TraceFlags AutodiscoverRequestHttpHeaders;
    public static TraceFlags EwsTimeZones;
    public static TraceFlags All;
}
internal abstract class Microsoft.Exchange.WebServices.Data.TypedPropertyDefinition : PropertyDefinition {
    private bool isNullable;
    internal bool IsNullable { get; }
    internal TypedPropertyDefinition(string xmlElementName, string uri, ExchangeVersion version);
    internal TypedPropertyDefinition(string xmlElementName, string uri, PropertyDefinitionFlags flags, ExchangeVersion version);
    internal TypedPropertyDefinition(string xmlElementName, string uri, PropertyDefinitionFlags flags, ExchangeVersion version, bool isNullable);
    internal abstract virtual object Parse(string value);
    internal virtual bool get_IsNullable();
    internal virtual string ToString(object value);
    internal virtual void LoadPropertyValueFromXml(EwsServiceXmlReader reader, PropertyBag propertyBag);
    internal virtual void WritePropertyValueToXml(EwsServiceXmlWriter writer, PropertyBag propertyBag, bool isUpdateOperation);
}
public class Microsoft.Exchange.WebServices.Data.UnifiedMessaging : object {
    private ExchangeService service;
    internal UnifiedMessaging(ExchangeService service);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.UnifiedMessaging/<PlayOnPhone>d__2")]
public Task`1<PhoneCall> PlayOnPhone(ItemId itemId, string dialString, CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.UnifiedMessaging/<GetPhoneCallInformation>d__3")]
internal Task`1<PhoneCall> GetPhoneCallInformation(PhoneCallId id, CancellationToken token);
    internal Task DisconnectPhoneCall(PhoneCallId id, CancellationToken token);
}
internal class Microsoft.Exchange.WebServices.Data.UninstallAppRequest : SimpleServiceRequestBase {
    [CompilerGeneratedAttribute]
private string <ID>k__BackingField;
    private string ID { get; private set; }
    internal UninstallAppRequest(ExchangeService service, string id);
    internal virtual string GetXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetResponseXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.UninstallAppRequest/<Execute>d__6")]
internal Task`1<UninstallAppResponse> Execute(CancellationToken token);
    [CompilerGeneratedAttribute]
private string get_ID();
    [CompilerGeneratedAttribute]
private void set_ID(string value);
}
internal class Microsoft.Exchange.WebServices.Data.UninstallAppResponse : ServiceResponse {
}
public class Microsoft.Exchange.WebServices.Data.UniqueBody : ComplexProperty {
    private BodyType bodyType;
    private string text;
    private bool isTruncated;
    public BodyType BodyType { get; }
    public string Text { get; }
    public bool IsTruncated { get; }
    public static string op_Implicit(UniqueBody messageBody);
    internal virtual void ReadAttributesFromXml(EwsServiceXmlReader reader);
    internal virtual void ReadTextValueFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    public BodyType get_BodyType();
    public string get_Text();
    public bool get_IsTruncated();
    public virtual string ToString();
}
internal class Microsoft.Exchange.WebServices.Data.UnpinTeamMailboxRequest : SimpleServiceRequestBase {
    private EmailAddress emailAddress;
    public UnpinTeamMailboxRequest(ExchangeService service, EmailAddress emailAddress);
    internal virtual string GetXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetResponseXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.UnpinTeamMailboxRequest/<Execute>d__7")]
internal Task`1<ServiceResponse> Execute(CancellationToken token);
}
internal class Microsoft.Exchange.WebServices.Data.UnsubscribeRequest : MultiResponseServiceRequest`1<ServiceResponse> {
    [CompilerGeneratedAttribute]
private string <SubscriptionId>k__BackingField;
    public string SubscriptionId { get; public set; }
    internal UnsubscribeRequest(ExchangeService service);
    internal virtual ServiceResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual void Validate();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    [CompilerGeneratedAttribute]
public string get_SubscriptionId();
    [CompilerGeneratedAttribute]
public void set_SubscriptionId(string value);
}
internal class Microsoft.Exchange.WebServices.Data.UpdateDelegateRequest : DelegateManagementRequestBase`1<DelegateManagementResponse> {
    private List`1<DelegateUser> delegateUsers;
    private Nullable`1<MeetingRequestsDeliveryScope> meetingRequestsDeliveryScope;
    public Nullable`1<MeetingRequestsDeliveryScope> MeetingRequestsDeliveryScope { get; public set; }
    public List`1<DelegateUser> DelegateUsers { get; }
    internal UpdateDelegateRequest(ExchangeService service);
    internal virtual void Validate();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetResponseXmlElementName();
    internal virtual DelegateManagementResponse CreateResponse();
    internal virtual string GetXmlElementName();
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public Nullable`1<MeetingRequestsDeliveryScope> get_MeetingRequestsDeliveryScope();
    public void set_MeetingRequestsDeliveryScope(Nullable`1<MeetingRequestsDeliveryScope> value);
    public List`1<DelegateUser> get_DelegateUsers();
}
internal class Microsoft.Exchange.WebServices.Data.UpdateFolderRequest : MultiResponseServiceRequest`1<ServiceResponse> {
    private List`1<Folder> folders;
    public List`1<Folder> Folders { get; }
    internal UpdateFolderRequest(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual void Validate();
    internal virtual ServiceResponse CreateServiceResponse(ExchangeService session, int responseIndex);
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public List`1<Folder> get_Folders();
}
internal class Microsoft.Exchange.WebServices.Data.UpdateFolderResponse : ServiceResponse {
    private Folder folder;
    internal UpdateFolderResponse(Folder folder);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    internal virtual void Loaded();
    private Folder GetObjectInstance(ExchangeService session, string xmlElementName);
}
public class Microsoft.Exchange.WebServices.Data.UpdateInboxRulesException : ServiceRemoteException {
    private ServiceResponse serviceResponse;
    private RuleOperationErrorCollection errors;
    public ServiceResponse ServiceResponse { get; }
    public RuleOperationErrorCollection Errors { get; }
    public ServiceError ErrorCode { get; }
    public string ErrorMessage { get; }
    internal UpdateInboxRulesException(UpdateInboxRulesResponse serviceResponse, IEnumerator`1<RuleOperation> ruleOperations);
    private UpdateInboxRulesException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public ServiceResponse get_ServiceResponse();
    public RuleOperationErrorCollection get_Errors();
    public ServiceError get_ErrorCode();
    public string get_ErrorMessage();
}
internal class Microsoft.Exchange.WebServices.Data.UpdateInboxRulesRequest : SimpleServiceRequestBase {
    private string mailboxSmtpAddress;
    private bool removeOutlookRuleBlob;
    private IEnumerable`1<RuleOperation> inboxRuleOperations;
    internal string MailboxSmtpAddress { get; internal set; }
    internal bool RemoveOutlookRuleBlob { get; internal set; }
    internal IEnumerable`1<RuleOperation> InboxRuleOperations { get; internal set; }
    internal UpdateInboxRulesRequest(ExchangeService service);
    internal virtual string GetXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual string GetResponseXmlElementName();
    internal virtual object ParseResponse(EwsServiceXmlReader reader);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal virtual void Validate();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.UpdateInboxRulesRequest/<Execute>d__10")]
internal Task`1<UpdateInboxRulesResponse> Execute(CancellationToken token);
    internal string get_MailboxSmtpAddress();
    internal void set_MailboxSmtpAddress(string value);
    internal bool get_RemoveOutlookRuleBlob();
    internal void set_RemoveOutlookRuleBlob(bool value);
    internal IEnumerable`1<RuleOperation> get_InboxRuleOperations();
    internal void set_InboxRuleOperations(IEnumerable`1<RuleOperation> value);
}
internal class Microsoft.Exchange.WebServices.Data.UpdateInboxRulesResponse : ServiceResponse {
    private RuleOperationErrorCollection errors;
    internal RuleOperationErrorCollection Errors { get; }
    internal virtual bool LoadExtraErrorDetailsFromXml(EwsServiceXmlReader reader, string xmlElementName);
    internal RuleOperationErrorCollection get_Errors();
}
internal class Microsoft.Exchange.WebServices.Data.UpdateItemRequest : MultiResponseServiceRequest`1<UpdateItemResponse> {
    private List`1<Item> items;
    private FolderId savedItemsDestinationFolder;
    private ConflictResolutionMode conflictResolutionMode;
    private Nullable`1<MessageDisposition> messageDisposition;
    private Nullable`1<SendInvitationsOrCancellationsMode> sendInvitationsOrCancellationsMode;
    [CompilerGeneratedAttribute]
private bool <SuppressReadReceipts>k__BackingField;
    internal bool EmitTimeZoneHeader { get; }
    public Nullable`1<MessageDisposition> MessageDisposition { get; public set; }
    public ConflictResolutionMode ConflictResolutionMode { get; public set; }
    public Nullable`1<SendInvitationsOrCancellationsMode> SendInvitationsOrCancellationsMode { get; public set; }
    public bool SuppressReadReceipts { get; public set; }
    public List`1<Item> Items { get; }
    public FolderId SavedItemsDestinationFolder { get; public set; }
    internal UpdateItemRequest(ExchangeService service, ServiceErrorHandling errorHandlingMode);
    internal virtual bool get_EmitTimeZoneHeader();
    internal virtual void Validate();
    internal virtual UpdateItemResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    public Nullable`1<MessageDisposition> get_MessageDisposition();
    public void set_MessageDisposition(Nullable`1<MessageDisposition> value);
    public ConflictResolutionMode get_ConflictResolutionMode();
    public void set_ConflictResolutionMode(ConflictResolutionMode value);
    public Nullable`1<SendInvitationsOrCancellationsMode> get_SendInvitationsOrCancellationsMode();
    public void set_SendInvitationsOrCancellationsMode(Nullable`1<SendInvitationsOrCancellationsMode> value);
    [CompilerGeneratedAttribute]
public bool get_SuppressReadReceipts();
    [CompilerGeneratedAttribute]
public void set_SuppressReadReceipts(bool value);
    public List`1<Item> get_Items();
    public FolderId get_SavedItemsDestinationFolder();
    public void set_SavedItemsDestinationFolder(FolderId value);
}
public class Microsoft.Exchange.WebServices.Data.UpdateItemResponse : ServiceResponse {
    private Item item;
    private Item returnedItem;
    private int conflictCount;
    public Item ReturnedItem { get; }
    public int ConflictCount { get; }
    internal UpdateItemResponse(Item item);
    internal virtual void ReadElementsFromXml(EwsServiceXmlReader reader);
    internal virtual void Loaded();
    private Item GetObjectInstance(ExchangeService service, string xmlElementName);
    public Item get_ReturnedItem();
    public int get_ConflictCount();
}
internal class Microsoft.Exchange.WebServices.Data.UpdateUserConfigurationRequest : MultiResponseServiceRequest`1<ServiceResponse> {
    protected UserConfiguration userConfiguration;
    public UserConfiguration UserConfiguration { get; public set; }
    internal UpdateUserConfigurationRequest(ExchangeService service);
    internal virtual void Validate();
    internal virtual ServiceResponse CreateServiceResponse(ExchangeService service, int responseIndex);
    internal virtual ExchangeVersion GetMinimumRequiredServerVersion();
    internal virtual int GetExpectedResponseMessageCount();
    internal virtual string GetXmlElementName();
    internal virtual string GetResponseXmlElementName();
    internal virtual string GetResponseMessageXmlElementName();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    public UserConfiguration get_UserConfiguration();
    public void set_UserConfiguration(UserConfiguration value);
}
public class Microsoft.Exchange.WebServices.Data.UrlEntity : ExtractedEntity {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Url { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
internal void set_Url(string value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.UrlEntityCollection : ComplexPropertyCollection`1<UrlEntity> {
    internal UrlEntityCollection(IEnumerable`1<UrlEntity> collection);
    internal virtual UrlEntity CreateComplexProperty(string xmlElementName);
    internal virtual string GetCollectionItemXmlElementName(UrlEntity complexProperty);
}
public class Microsoft.Exchange.WebServices.Data.UserConfiguration : object {
    private static ExchangeVersion ObjectVersion;
    private static UserConfigurationProperties PropertiesAvailableForNewObject;
    private static UserConfigurationProperties NoProperties;
    private ExchangeService service;
    private string name;
    private FolderId parentFolderId;
    private ItemId itemId;
    private UserConfigurationDictionary dictionary;
    private Byte[] xmlData;
    private Byte[] binaryData;
    private UserConfigurationProperties propertiesAvailableForAccess;
    private UserConfigurationProperties updatedProperties;
    private bool isNew;
    public string Name { get; internal set; }
    public FolderId ParentFolderId { get; internal set; }
    public ItemId ItemId { get; }
    public UserConfigurationDictionary Dictionary { get; }
    public Byte[] XmlData { get; public set; }
    public Byte[] BinaryData { get; public set; }
    public bool IsDirty { get; }
    public UserConfiguration(ExchangeService service);
    internal UserConfiguration(ExchangeService service, UserConfigurationProperties requestedProperties);
    private static void WriteByteArrayToXml(EwsServiceXmlWriter writer, Byte[] byteArray, string xmlElementName);
    internal static void WriteUserConfigurationNameToXml(EwsServiceXmlWriter writer, XmlNamespace xmlNamespace, string name, FolderId parentFolderId);
    public string get_Name();
    internal void set_Name(string value);
    public FolderId get_ParentFolderId();
    internal void set_ParentFolderId(FolderId value);
    public ItemId get_ItemId();
    public UserConfigurationDictionary get_Dictionary();
    public Byte[] get_XmlData();
    public void set_XmlData(Byte[] value);
    public Byte[] get_BinaryData();
    public void set_BinaryData(Byte[] value);
    public bool get_IsDirty();
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.UserConfiguration/<Bind>d__35")]
public static Task`1<UserConfiguration> Bind(ExchangeService service, string name, FolderId parentFolderId, UserConfigurationProperties properties, CancellationToken token);
    public static Task`1<UserConfiguration> Bind(ExchangeService service, string name, WellKnownFolderName parentFolderName, UserConfigurationProperties properties);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.UserConfiguration/<Save>d__37")]
public Task Save(string name, FolderId parentFolderId, CancellationToken token);
    public Task Save(string name, WellKnownFolderName parentFolderName);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.UserConfiguration/<Update>d__39")]
public Task Update(CancellationToken token);
    [AsyncStateMachineAttribute("Microsoft.Exchange.WebServices.Data.UserConfiguration/<Delete>d__40")]
public Task Delete(CancellationToken token);
    public Task Load(UserConfigurationProperties properties, CancellationToken token);
    internal void WriteToXml(EwsServiceXmlWriter writer, XmlNamespace xmlNamespace, string xmlElementName);
    private string GetBase64PropertyValue(Byte[] bytes);
    private bool IsPropertyUpdated(UserConfigurationProperties property);
    private void WriteXmlDataToXml(EwsServiceXmlWriter writer);
    private void WriteBinaryDataToXml(EwsServiceXmlWriter writer);
    internal void LoadFromXml(EwsServiceXmlReader reader);
    private void InitializeProperties(UserConfigurationProperties requestedProperties);
    private void ResetIsDirty();
    private void ValidatePropertyAccess(UserConfigurationProperties property);
    private void MarkPropertyForUpdate(UserConfigurationProperties property);
}
[DefaultMemberAttribute("Item")]
[EditorBrowsableAttribute("1")]
public class Microsoft.Exchange.WebServices.Data.UserConfigurationDictionary : ComplexProperty {
    private Dictionary`2<object, object> dictionary;
    private bool isDirty;
    private static Type[] ValidTypes;
    public object Item { get; public set; }
    public int Count { get; }
    internal bool IsDirty { get; internal set; }
    private static UserConfigurationDictionary();
    public object get_Item(object key);
    public void set_Item(object key, object value);
    public void Add(object key, object value);
    public bool ContainsKey(object key);
    public bool Remove(object key);
    public bool TryGetValue(object key, Object& value);
    public int get_Count();
    public void Clear();
    public sealed virtual IEnumerator GetEnumerator();
    internal bool get_IsDirty();
    internal void set_IsDirty(bool value);
    internal virtual void Changed();
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
    private static void GetTypeCode(ExchangeServiceBase service, object dictionaryObject, UserConfigurationDictionaryObjectType& dictionaryObjectType, String& valueAsString);
    private static UserConfigurationDictionaryObjectType GetObjectType(string type);
    private void WriteObjectToXml(EwsServiceXmlWriter writer, string xmlElementName, object dictionaryObject);
    private void WriteObjectValueToXml(EwsServiceXmlWriter writer, object dictionaryObject);
    private void WriteEntryTypeToXml(EwsServiceXmlWriter writer, UserConfigurationDictionaryObjectType dictionaryObjectType);
    private void WriteEntryValueToXml(EwsServiceXmlWriter writer, string value);
    internal virtual void LoadFromXml(EwsServiceXmlReader reader, XmlNamespace xmlNamespace, string xmlElementName);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    private void LoadEntry(EwsServiceXmlReader reader);
    private List`1<string> GetObjectValue(Object[] valueArray);
    private object GetDictionaryObject(EwsServiceXmlReader reader);
    private List`1<string> GetObjectValue(EwsServiceXmlReader reader, UserConfigurationDictionaryObjectType type);
    private UserConfigurationDictionaryObjectType GetObjectType(EwsServiceXmlReader reader);
    private object ConstructObject(UserConfigurationDictionaryObjectType type, List`1<string> value, ExchangeService service);
    private void ValidateEntry(object key, object value);
    private void ValidateObject(object dictionaryObject);
    private void ValidateArrayObject(Array dictionaryObjectAsArray);
    private void ValidateObjectType(Type type);
}
public enum Microsoft.Exchange.WebServices.Data.UserConfigurationDictionaryObjectType : Enum {
    public int value__;
    public static UserConfigurationDictionaryObjectType DateTime;
    public static UserConfigurationDictionaryObjectType Boolean;
    public static UserConfigurationDictionaryObjectType Byte;
    public static UserConfigurationDictionaryObjectType String;
    public static UserConfigurationDictionaryObjectType Integer32;
    public static UserConfigurationDictionaryObjectType UnsignedInteger32;
    public static UserConfigurationDictionaryObjectType Integer64;
    public static UserConfigurationDictionaryObjectType UnsignedInteger64;
    public static UserConfigurationDictionaryObjectType StringArray;
    public static UserConfigurationDictionaryObjectType ByteArray;
}
[FlagsAttribute]
public enum Microsoft.Exchange.WebServices.Data.UserConfigurationProperties : Enum {
    public int value__;
    public static UserConfigurationProperties Id;
    public static UserConfigurationProperties Dictionary;
    public static UserConfigurationProperties XmlData;
    public static UserConfigurationProperties BinaryData;
    public static UserConfigurationProperties All;
}
public class Microsoft.Exchange.WebServices.Data.UserId : ComplexProperty {
    private string sID;
    private string primarySmtpAddress;
    private string displayName;
    private Nullable`1<StandardUser> standardUser;
    public string SID { get; public set; }
    public string PrimarySmtpAddress { get; public set; }
    public string DisplayName { get; public set; }
    public Nullable`1<StandardUser> StandardUser { get; public set; }
    public UserId(string primarySmtpAddress);
    public UserId(StandardUser standardUser);
    internal bool IsValid();
    public string get_SID();
    public void set_SID(string value);
    public string get_PrimarySmtpAddress();
    public void set_PrimarySmtpAddress(string value);
    public string get_DisplayName();
    public void set_DisplayName(string value);
    public Nullable`1<StandardUser> get_StandardUser();
    public void set_StandardUser(Nullable`1<StandardUser> value);
    public static UserId op_Implicit(string primarySmtpAddress);
    public static UserId op_Implicit(StandardUser standardUser);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal virtual void WriteElementsToXml(EwsServiceXmlWriter writer);
}
public static class Microsoft.Exchange.WebServices.Data.UserPhotoSize : object {
    public static string HR48x48;
    public static string HR64x64;
    public static string HR96x96;
    public static string HR120x120;
    public static string HR240x240;
    public static string HR360x360;
    public static string HR432x432;
    public static string HR504x504;
    public static string HR648x648;
    private static UserPhotoSize();
}
public class Microsoft.Exchange.WebServices.Data.UserProfilePicture : InsightValue {
    private string blob;
    private string photoSize;
    private string url;
    private string imageType;
    public string Blob { get; public set; }
    public string PhotoSize { get; public set; }
    public string Url { get; public set; }
    public string ImageType { get; public set; }
    public string get_Blob();
    public void set_Blob(string value);
    public string get_PhotoSize();
    public void set_PhotoSize(string value);
    public string get_Url();
    public void set_Url(string value);
    public string get_ImageType();
    public void set_ImageType(string value);
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.Exchange.WebServices.Data.ViewBase : object {
    private PropertySet propertySet;
    public PropertySet PropertySet { get; public set; }
    internal virtual void InternalValidate(ServiceRequestBase request);
    internal virtual void InternalWriteViewToXml(EwsServiceXmlWriter writer);
    internal abstract virtual void InternalWriteSearchSettingsToXml(EwsServiceXmlWriter writer, Grouping groupBy);
    internal abstract virtual void WriteOrderByToXml(EwsServiceXmlWriter writer);
    internal abstract virtual string GetViewXmlElementName();
    internal abstract virtual Nullable`1<int> GetMaxEntriesReturned();
    internal abstract virtual ServiceObjectType GetServiceObjectType();
    internal abstract virtual void WriteAttributesToXml(EwsServiceXmlWriter writer);
    internal virtual void WriteToXml(EwsServiceXmlWriter writer, Grouping groupBy);
    internal PropertySet GetPropertySetOrDefault();
    public PropertySet get_PropertySet();
    public void set_PropertySet(PropertySet value);
}
public enum Microsoft.Exchange.WebServices.Data.ViewFilter : Enum {
    public int value__;
    [RequiredServerVersionAttribute("4")]
public static ViewFilter All;
    [RequiredServerVersionAttribute("4")]
public static ViewFilter Flagged;
    [RequiredServerVersionAttribute("4")]
public static ViewFilter HasAttachment;
    [RequiredServerVersionAttribute("4")]
public static ViewFilter ToOrCcMe;
    [RequiredServerVersionAttribute("4")]
public static ViewFilter Unread;
    [RequiredServerVersionAttribute("4")]
public static ViewFilter TaskActive;
    [RequiredServerVersionAttribute("4")]
public static ViewFilter TaskOverdue;
    [RequiredServerVersionAttribute("4")]
public static ViewFilter TaskCompleted;
    [RequiredServerVersionAttribute("4")]
public static ViewFilter Suggestions;
    [RequiredServerVersionAttribute("4")]
public static ViewFilter SuggestionsRespond;
    [RequiredServerVersionAttribute("4")]
public static ViewFilter SuggestionsDelete;
}
public class Microsoft.Exchange.WebServices.Data.VotingInformation : ComplexProperty {
    private Collection`1<VotingOptionData> userOptions;
    private string votingResponse;
    public Collection`1<VotingOptionData> UserOptions { get; }
    public string VotingResponse { get; }
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    public Collection`1<VotingOptionData> get_UserOptions();
    public string get_VotingResponse();
}
public class Microsoft.Exchange.WebServices.Data.VotingOptionData : ComplexProperty {
    private string displayName;
    private SendPrompt sendPrompt;
    public string DisplayName { get; }
    public SendPrompt SendPrompt { get; }
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    public string get_DisplayName();
    public SendPrompt get_SendPrompt();
}
internal class Microsoft.Exchange.WebServices.Data.WebAsyncCallStateAnchor : object {
    [CompilerGeneratedAttribute]
private ServiceRequestBase <ServiceRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private IEwsHttpWebRequest <WebRequest>k__BackingField;
    [CompilerGeneratedAttribute]
private object <AsyncState>k__BackingField;
    [CompilerGeneratedAttribute]
private AsyncCallback <AsyncCallback>k__BackingField;
    public ServiceRequestBase ServiceRequest { get; private set; }
    public IEwsHttpWebRequest WebRequest { get; private set; }
    public object AsyncState { get; private set; }
    public AsyncCallback AsyncCallback { get; private set; }
    public WebAsyncCallStateAnchor(ServiceRequestBase serviceRequest, IEwsHttpWebRequest webRequest, AsyncCallback asyncCallback, object asyncState);
    [CompilerGeneratedAttribute]
public ServiceRequestBase get_ServiceRequest();
    [CompilerGeneratedAttribute]
private void set_ServiceRequest(ServiceRequestBase value);
    [CompilerGeneratedAttribute]
public IEwsHttpWebRequest get_WebRequest();
    [CompilerGeneratedAttribute]
private void set_WebRequest(IEwsHttpWebRequest value);
    [CompilerGeneratedAttribute]
public object get_AsyncState();
    [CompilerGeneratedAttribute]
private void set_AsyncState(object value);
    [CompilerGeneratedAttribute]
public AsyncCallback get_AsyncCallback();
    [CompilerGeneratedAttribute]
private void set_AsyncCallback(AsyncCallback value);
}
public class Microsoft.Exchange.WebServices.Data.WebCredentials : ExchangeCredentials {
    private ICredentials credentials;
    public ICredentials Credentials { get; }
    public WebCredentials(ICredentials credentials);
    public WebCredentials(string username, string password);
    public WebCredentials(string username, string password, string domain);
    internal virtual void PrepareWebRequest(IEwsHttpWebRequest request);
    public ICredentials get_Credentials();
    internal virtual Uri AdjustUrl(Uri url);
}
public enum Microsoft.Exchange.WebServices.Data.WellKnownFolderName : Enum {
    public int value__;
    [EwsEnumAttribute("calendar")]
public static WellKnownFolderName Calendar;
    [EwsEnumAttribute("contacts")]
public static WellKnownFolderName Contacts;
    [EwsEnumAttribute("deleteditems")]
public static WellKnownFolderName DeletedItems;
    [EwsEnumAttribute("drafts")]
public static WellKnownFolderName Drafts;
    [EwsEnumAttribute("inbox")]
public static WellKnownFolderName Inbox;
    [EwsEnumAttribute("journal")]
public static WellKnownFolderName Journal;
    [EwsEnumAttribute("notes")]
public static WellKnownFolderName Notes;
    [EwsEnumAttribute("outbox")]
public static WellKnownFolderName Outbox;
    [EwsEnumAttribute("sentitems")]
public static WellKnownFolderName SentItems;
    [EwsEnumAttribute("tasks")]
public static WellKnownFolderName Tasks;
    [EwsEnumAttribute("msgfolderroot")]
public static WellKnownFolderName MsgFolderRoot;
    [RequiredServerVersionAttribute("0")]
[EwsEnumAttribute("publicfoldersroot")]
public static WellKnownFolderName PublicFoldersRoot;
    [EwsEnumAttribute("root")]
public static WellKnownFolderName Root;
    [EwsEnumAttribute("junkemail")]
public static WellKnownFolderName JunkEmail;
    [EwsEnumAttribute("searchfolders")]
public static WellKnownFolderName SearchFolders;
    [EwsEnumAttribute("voicemail")]
public static WellKnownFolderName VoiceMail;
    [RequiredServerVersionAttribute("2")]
[EwsEnumAttribute("recoverableitemsroot")]
public static WellKnownFolderName RecoverableItemsRoot;
    [RequiredServerVersionAttribute("2")]
[EwsEnumAttribute("recoverableitemsdeletions")]
public static WellKnownFolderName RecoverableItemsDeletions;
    [RequiredServerVersionAttribute("2")]
[EwsEnumAttribute("recoverableitemsversions")]
public static WellKnownFolderName RecoverableItemsVersions;
    [RequiredServerVersionAttribute("2")]
[EwsEnumAttribute("recoverableitemspurges")]
public static WellKnownFolderName RecoverableItemsPurges;
    [RequiredServerVersionAttribute("5")]
[EwsEnumAttribute("recoverableitemsdiscoveryholds")]
public static WellKnownFolderName RecoverableItemsDiscoveryHolds;
    [RequiredServerVersionAttribute("2")]
[EwsEnumAttribute("archiveroot")]
public static WellKnownFolderName ArchiveRoot;
    [RequiredServerVersionAttribute("5")]
[EwsEnumAttribute("archiveinbox")]
public static WellKnownFolderName ArchiveInbox;
    [RequiredServerVersionAttribute("2")]
[EwsEnumAttribute("archivemsgfolderroot")]
public static WellKnownFolderName ArchiveMsgFolderRoot;
    [RequiredServerVersionAttribute("2")]
[EwsEnumAttribute("archivedeleteditems")]
public static WellKnownFolderName ArchiveDeletedItems;
    [RequiredServerVersionAttribute("2")]
[EwsEnumAttribute("archiverecoverableitemsroot")]
public static WellKnownFolderName ArchiveRecoverableItemsRoot;
    [RequiredServerVersionAttribute("2")]
[EwsEnumAttribute("archiverecoverableitemsdeletions")]
public static WellKnownFolderName ArchiveRecoverableItemsDeletions;
    [RequiredServerVersionAttribute("2")]
[EwsEnumAttribute("archiverecoverableitemsversions")]
public static WellKnownFolderName ArchiveRecoverableItemsVersions;
    [RequiredServerVersionAttribute("2")]
[EwsEnumAttribute("archiverecoverableitemspurges")]
public static WellKnownFolderName ArchiveRecoverableItemsPurges;
    [RequiredServerVersionAttribute("5")]
[EwsEnumAttribute("archiverecoverableitemsdiscoveryholds")]
public static WellKnownFolderName ArchiveRecoverableItemsDiscoveryHolds;
    [RequiredServerVersionAttribute("4")]
[EwsEnumAttribute("syncissues")]
public static WellKnownFolderName SyncIssues;
    [RequiredServerVersionAttribute("4")]
[EwsEnumAttribute("conflicts")]
public static WellKnownFolderName Conflicts;
    [RequiredServerVersionAttribute("4")]
[EwsEnumAttribute("localfailures")]
public static WellKnownFolderName LocalFailures;
    [RequiredServerVersionAttribute("4")]
[EwsEnumAttribute("serverfailures")]
public static WellKnownFolderName ServerFailures;
    [RequiredServerVersionAttribute("4")]
[EwsEnumAttribute("recipientcache")]
public static WellKnownFolderName RecipientCache;
    [RequiredServerVersionAttribute("4")]
[EwsEnumAttribute("quickcontacts")]
public static WellKnownFolderName QuickContacts;
    [RequiredServerVersionAttribute("4")]
[EwsEnumAttribute("conversationhistory")]
public static WellKnownFolderName ConversationHistory;
    [RequiredServerVersionAttribute("4")]
[EwsEnumAttribute("adminauditlogs")]
public static WellKnownFolderName AdminAuditLogs;
    [RequiredServerVersionAttribute("4")]
[EwsEnumAttribute("todosearch")]
public static WellKnownFolderName ToDoSearch;
    [RequiredServerVersionAttribute("4")]
[EwsEnumAttribute("mycontacts")]
public static WellKnownFolderName MyContacts;
    [RequiredServerVersionAttribute("5")]
[EwsEnumAttribute("directory")]
public static WellKnownFolderName Directory;
    [RequiredServerVersionAttribute("4")]
[EwsEnumAttribute("imcontactlist")]
public static WellKnownFolderName IMContactList;
    [RequiredServerVersionAttribute("4")]
[EwsEnumAttribute("peopleconnect")]
public static WellKnownFolderName PeopleConnect;
    [RequiredServerVersionAttribute("4")]
[EwsEnumAttribute("favorites")]
public static WellKnownFolderName Favorites;
}
internal class Microsoft.Exchange.WebServices.Data.WindowsLiveCredentials : WSSecurityBasedCredentials {
    private string windowsLiveId;
    private string password;
    private Uri windowsLiveUrl;
    private bool isAuthenticated;
    private bool traceEnabled;
    private ITraceListener traceListener;
    internal static string XmlEncNamespace;
    internal static string WindowsLiveSoapNamespacePrefix;
    internal static string RequestSecurityTokenResponseCollectionElementName;
    internal static string RequestSecurityTokenResponseElementName;
    internal static string EncryptedDataElementName;
    internal static string PpElementName;
    internal static string ReqstatusElementName;
    internal static string SuccessfulReqstatus;
    internal static Uri DefaultWindowsLiveUrl;
    internal static string XmlSignatureReference;
    public bool TraceEnabled { get; public set; }
    public ITraceListener TraceListener { get; public set; }
    public Uri WindowsLiveUrl { get; public set; }
    public bool IsAuthenticated { get; internal set; }
    public WindowsLiveCredentials(string windowsLiveId, string password);
    private static WindowsLiveCredentials();
    public bool get_TraceEnabled();
    public void set_TraceEnabled(bool value);
    public ITraceListener get_TraceListener();
    public void set_TraceListener(ITraceListener value);
    public Uri get_WindowsLiveUrl();
    public void set_WindowsLiveUrl(Uri value);
    internal virtual void PrepareWebRequest(IEwsHttpWebRequest request);
    public bool get_IsAuthenticated();
    internal void set_IsAuthenticated(bool value);
    private HttpWebResponse EmitTokenRequest(Uri uriForTokenEndpointReference);
    private void TraceResponse(HttpResponseMessage response, MemoryStream memoryStream);
    private void TraceWebException(EwsHttpClientException e);
    private void MakeTokenRequestToWindowsLive(Uri uriForTokenEndpointReference);
    private void ReadWindowsLiveRSTResponseHeaders(EwsXmlReader rstResponse);
    private void ParseWindowsLiveRSTResponseBody(EwsXmlReader rstResponse);
    private void ProcessTokenResponse(HttpWebResponse response);
}
public class Microsoft.Exchange.WebServices.Data.WorkingHours : ComplexProperty {
    private TimeZoneInfo timeZone;
    private Collection`1<DayOfTheWeek> daysOfTheWeek;
    private TimeSpan startTime;
    private TimeSpan endTime;
    public TimeZoneInfo TimeZone { get; }
    public Collection`1<DayOfTheWeek> DaysOfTheWeek { get; }
    public TimeSpan StartTime { get; }
    public TimeSpan EndTime { get; }
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    public TimeZoneInfo get_TimeZone();
    public Collection`1<DayOfTheWeek> get_DaysOfTheWeek();
    public TimeSpan get_StartTime();
    public TimeSpan get_EndTime();
}
internal class Microsoft.Exchange.WebServices.Data.WorkingPeriod : ComplexProperty {
    private Collection`1<DayOfTheWeek> daysOfWeek;
    private TimeSpan startTime;
    private TimeSpan endTime;
    internal Collection`1<DayOfTheWeek> DaysOfWeek { get; }
    internal TimeSpan StartTime { get; }
    internal TimeSpan EndTime { get; }
    internal virtual bool TryReadElementFromXml(EwsServiceXmlReader reader);
    internal Collection`1<DayOfTheWeek> get_DaysOfWeek();
    internal TimeSpan get_StartTime();
    internal TimeSpan get_EndTime();
}
public abstract class Microsoft.Exchange.WebServices.Data.WSSecurityBasedCredentials : ExchangeCredentials {
    internal static string WsAddressingHeadersFormat;
    internal static string WsSecurityHeaderFormat;
    internal static string WsuTimeStampFormat;
    internal static string WsSecurityPathSuffix;
    private bool addTimestamp;
    private static XmlNamespaceManager namespaceManager;
    private string securityToken;
    private Uri ewsUrl;
    internal string SecurityToken { get; internal set; }
    internal Uri EwsUrl { get; internal set; }
    internal static XmlNamespaceManager NamespaceManager { get; }
    internal WSSecurityBasedCredentials(string securityToken);
    internal WSSecurityBasedCredentials(string securityToken, bool addTimestamp);
    internal virtual void PreAuthenticate();
    internal virtual void EmitExtraSoapHeaderNamespaceAliases(XmlWriter writer);
    internal virtual void SerializeExtraSoapHeaders(XmlWriter writer, string webMethodName);
    private void SerializeWSAddressingHeaders(XmlWriter xmlWriter, string webMethodName);
    internal virtual void SerializeWSSecurityHeaders(XmlWriter xmlWriter);
    internal virtual Uri AdjustUrl(Uri url);
    internal string get_SecurityToken();
    internal void set_SecurityToken(string value);
    internal Uri get_EwsUrl();
    internal void set_EwsUrl(Uri value);
    internal static XmlNamespaceManager get_NamespaceManager();
}
internal class Microsoft.Exchange.WebServices.Data.WSSecurityUtilityIdSignedXml : SignedXml {
    private static long nextId;
    private static string commonPrefix;
    private XmlDocument document;
    private Dictionary`2<string, XmlElement> ids;
    public WSSecurityUtilityIdSignedXml(XmlDocument document);
    private static WSSecurityUtilityIdSignedXml();
    public static string GetUniqueId();
    public void AddReference(string xpath);
    public virtual XmlElement GetIdElement(XmlDocument document, string idValue);
}
public class Microsoft.Exchange.WebServices.Data.X509CertificateCredentials : WSSecurityBasedCredentials {
    private static string BinarySecurityTokenFormat;
    private static string KeyInfoClauseFormat;
    private static string WsSecurityX509CertPathSuffix;
    private X509Certificate2 certificate;
    private KeyInfoClause keyInfoClause;
    internal bool NeedSignature { get; }
    public X509CertificateCredentials(X509Certificate2 certificate);
    internal virtual void PrepareWebRequest(IEwsHttpWebRequest request);
    internal virtual Uri AdjustUrl(Uri url);
    internal virtual bool get_NeedSignature();
    internal virtual void Sign(MemoryStream memoryStream);
    public virtual string ToString();
}
internal static class Microsoft.Exchange.WebServices.Data.XmlAttributeNames : object {
    public static string XmlNs;
    public static string Id;
    public static string ChangeKey;
    public static string RecurringMasterId;
    public static string InstanceIndex;
    public static string OccurrenceId;
    public static string Traversal;
    public static string ViewFilter;
    public static string Offset;
    public static string MaxEntriesReturned;
    public static string BasePoint;
    public static string ResponseClass;
    public static string IndexedPagingOffset;
    public static string TotalItemsInView;
    public static string IncludesLastItemInRange;
    public static string BodyType;
    public static string MessageDisposition;
    public static string SaveItemToFolder;
    public static string RootItemChangeKey;
    public static string DeleteType;
    public static string DeleteSubFolders;
    public static string AffectedTaskOccurrences;
    public static string SendMeetingCancellations;
    public static string SuppressReadReceipts;
    public static string FieldURI;
    public static string FieldIndex;
    public static string ConflictResolution;
    public static string SendMeetingInvitationsOrCancellations;
    public static string CharacterSet;
    public static string HeaderName;
    public static string SendMeetingInvitations;
    public static string Key;
    public static string RoutingType;
    public static string MailboxType;
    public static string DistinguishedPropertySetId;
    public static string PropertySetId;
    public static string PropertyTag;
    public static string PropertyName;
    public static string PropertyId;
    public static string PropertyType;
    public static string TimeZoneName;
    public static string ReturnFullContactData;
    public static string ContactDataShape;
    public static string Numerator;
    public static string Denominator;
    public static string Value;
    public static string ContainmentMode;
    public static string ContainmentComparison;
    public static string Order;
    public static string StartDate;
    public static string EndDate;
    public static string Version;
    public static string Aggregate;
    public static string SearchScope;
    public static string Format;
    public static string Mailbox;
    public static string DestinationFormat;
    public static string FolderId;
    public static string ItemId;
    public static string IncludePermissions;
    public static string InitialName;
    public static string FinalName;
    public static string AuthenticationMethod;
    public static string Time;
    public static string Name;
    public static string Bias;
    public static string Kind;
    public static string SubscribeToAllFolders;
    public static string PublicFolderServer;
    public static string IsArchive;
    public static string ReturnHighlightTerms;
    public static string IsExplicit;
    public static string ClientExtensionUserIdentity;
    public static string ClientExtensionEnabledOnly;
    public static string SetClientExtensionActionId;
    public static string ClientExtensionId;
    public static string ClientExtensionIsAvailable;
    public static string ClientExtensionIsMandatory;
    public static string ClientExtensionIsEnabledByDefault;
    public static string ClientExtensionProvidedTo;
    public static string ClientExtensionType;
    public static string ClientExtensionScope;
    public static string ClientExtensionMarketplaceAssetID;
    public static string ClientExtensionMarketplaceContentMarket;
    public static string ClientExtensionAppStatus;
    public static string ClientExtensionEtoken;
    public static string ClientExtensionInstalledDateTime;
    public static string IsTruncated;
    public static string IsJunk;
    public static string MoveItem;
    public static string Nil;
    public static string Type;
}
internal class Microsoft.Exchange.WebServices.Data.XmlDtdException : XmlException {
    public string Message { get; }
    protected XmlDtdException(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
}
internal static class Microsoft.Exchange.WebServices.Data.XmlElementNames : object {
    public static string AllProperties;
    public static string ParentFolderIds;
    public static string DistinguishedFolderId;
    public static string ItemId;
    public static string ItemIds;
    public static string FolderId;
    public static string FolderIds;
    public static string SourceId;
    public static string OccurrenceItemId;
    public static string RecurringMasterItemId;
    public static string ItemShape;
    public static string FolderShape;
    public static string BaseShape;
    public static string IndexedPageItemView;
    public static string IndexedPageFolderView;
    public static string FractionalPageItemView;
    public static string FractionalPageFolderView;
    public static string SeekToConditionPageItemView;
    public static string ResponseCode;
    public static string RootFolder;
    public static string Folder;
    public static string ContactsFolder;
    public static string TasksFolder;
    public static string SearchFolder;
    public static string Folders;
    public static string Item;
    public static string Items;
    public static string Message;
    public static string Mailbox;
    public static string Body;
    public static string From;
    public static string Sender;
    public static string Name;
    public static string Address;
    public static string EmailAddress;
    public static string RoutingType;
    public static string MailboxType;
    public static string ToRecipients;
    public static string CcRecipients;
    public static string BccRecipients;
    public static string ReplyTo;
    public static string ConversationTopic;
    public static string ConversationIndex;
    public static string IsDeliveryReceiptRequested;
    public static string IsRead;
    public static string IsReadReceiptRequested;
    public static string IsResponseRequested;
    public static string InternetMessageId;
    public static string References;
    public static string ParentItemId;
    public static string ParentFolderId;
    public static string ChildFolderCount;
    public static string DisplayName;
    public static string TotalCount;
    public static string ItemClass;
    public static string FolderClass;
    public static string Subject;
    public static string MimeContent;
    public static string MimeContentUTF8;
    public static string Sensitivity;
    public static string Attachments;
    public static string DateTimeReceived;
    public static string Size;
    public static string Categories;
    public static string Importance;
    public static string InReplyTo;
    public static string IsSubmitted;
    public static string IsAssociated;
    public static string IsDraft;
    public static string IsFromMe;
    public static string IsHidden;
    public static string IsQuickContact;
    public static string IsResend;
    public static string IsUnmodified;
    public static string IsWritable;
    public static string InternetMessageHeader;
    public static string InternetMessageHeaders;
    public static string DateTimeSent;
    public static string DateTimeCreated;
    public static string ResponseObjects;
    public static string ReminderDueBy;
    public static string ReminderIsSet;
    public static string ReminderMinutesBeforeStart;
    public static string DisplayCc;
    public static string DisplayTo;
    public static string HasAttachments;
    public static string ExtendedProperty;
    public static string Culture;
    public static string FileAttachment;
    public static string ItemAttachment;
    public static string ReferenceAttachment;
    public static string AttachLongPathName;
    public static string ProviderType;
    public static string ProviderEndpointUrl;
    public static string AttachmentThumbnailUrl;
    public static string AttachmentPreviewUrl;
    public static string PermissionType;
    public static string AttachmentIsFolder;
    public static string AttachmentIds;
    public static string AttachmentId;
    public static string ContentType;
    public static string ContentLocation;
    public static string ContentId;
    public static string Content;
    public static string SavedItemFolderId;
    public static string MessageText;
    public static string DescriptiveLinkKey;
    public static string ItemChange;
    public static string ItemChanges;
    public static string FolderChange;
    public static string FolderChanges;
    public static string Updates;
    public static string AppendToItemField;
    public static string SetItemField;
    public static string DeleteItemField;
    public static string SetFolderField;
    public static string DeleteFolderField;
    public static string FieldURI;
    public static string RootItemId;
    public static string ReferenceItemId;
    public static string NewBodyContent;
    public static string ReplyToItem;
    public static string ReplyAllToItem;
    public static string ForwardItem;
    public static string AcceptItem;
    public static string TentativelyAcceptItem;
    public static string DeclineItem;
    public static string CancelCalendarItem;
    public static string RemoveItem;
    public static string SuppressReadReceipt;
    public static string SuppressReadReceipts;
    public static string String;
    public static string Start;
    public static string End;
    public static string ProposedStart;
    public static string ProposedEnd;
    public static string OriginalStart;
    public static string IsAllDayEvent;
    public static string LegacyFreeBusyStatus;
    public static string Location;
    public static string When;
    public static string IsMeeting;
    public static string IsCancelled;
    public static string IsRecurring;
    public static string MeetingRequestWasSent;
    public static string CalendarItemType;
    public static string MyResponseType;
    public static string Organizer;
    public static string RequiredAttendees;
    public static string OptionalAttendees;
    public static string Resources;
    public static string ConflictingMeetingCount;
    public static string AdjacentMeetingCount;
    public static string ConflictingMeetings;
    public static string AdjacentMeetings;
    public static string Duration;
    public static string TimeZone;
    public static string AppointmentReplyTime;
    public static string AppointmentSequenceNumber;
    public static string AppointmentState;
    public static string Recurrence;
    public static string FirstOccurrence;
    public static string LastOccurrence;
    public static string ModifiedOccurrences;
    public static string DeletedOccurrences;
    public static string MeetingTimeZone;
    public static string ConferenceType;
    public static string AllowNewTimeProposal;
    public static string IsOnlineMeeting;
    public static string MeetingWorkspaceUrl;
    public static string NetShowUrl;
    public static string JoinOnlineMeetingUrl;
    public static string OnlineMeetingSettings;
    public static string LobbyBypass;
    public static string AccessLevel;
    public static string Presenters;
    public static string CalendarItem;
    public static string CalendarFolder;
    public static string Attendee;
    public static string ResponseType;
    public static string LastResponseTime;
    public static string Occurrence;
    public static string DeletedOccurrence;
    public static string RelativeYearlyRecurrence;
    public static string AbsoluteYearlyRecurrence;
    public static string RelativeMonthlyRecurrence;
    public static string AbsoluteMonthlyRecurrence;
    public static string WeeklyRecurrence;
    public static string DailyRecurrence;
    public static string DailyRegeneration;
    public static string WeeklyRegeneration;
    public static string MonthlyRegeneration;
    public static string YearlyRegeneration;
    public static string NoEndRecurrence;
    public static string EndDateRecurrence;
    public static string NumberedRecurrence;
    public static string Interval;
    public static string DayOfMonth;
    public static string DayOfWeek;
    public static string DaysOfWeek;
    public static string DayOfWeekIndex;
    public static string Month;
    public static string StartDate;
    public static string EndDate;
    public static string StartTime;
    public static string EndTime;
    public static string NumberOfOccurrences;
    public static string AssociatedCalendarItemId;
    public static string IsDelegated;
    public static string IsOutOfDate;
    public static string HasBeenProcessed;
    public static string IsOrganizer;
    public static string MeetingMessage;
    public static string FileAs;
    public static string FileAsMapping;
    public static string GivenName;
    public static string Initials;
    public static string MiddleName;
    public static string NickName;
    public static string CompleteName;
    public static string CompanyName;
    public static string EmailAddresses;
    public static string PhysicalAddresses;
    public static string PhoneNumbers;
    public static string PhoneNumber;
    public static string AssistantName;
    public static string Birthday;
    public static string BusinessHomePage;
    public static string Children;
    public static string Companies;
    public static string ContactSource;
    public static string Department;
    public static string Generation;
    public static string ImAddresses;
    public static string ImAddress;
    public static string JobTitle;
    public static string Manager;
    public static string Mileage;
    public static string OfficeLocation;
    public static string PostalAddressIndex;
    public static string Profession;
    public static string SpouseName;
    public static string Surname;
    public static string WeddingAnniversary;
    public static string HasPicture;
    public static string Title;
    public static string FirstName;
    public static string LastName;
    public static string Suffix;
    public static string FullName;
    public static string YomiFirstName;
    public static string YomiLastName;
    public static string Contact;
    public static string Entry;
    public static string Street;
    public static string City;
    public static string State;
    public static string SharePointSiteUrl;
    public static string Country;
    public static string CountryOrRegion;
    public static string PostalCode;
    public static string PostOfficeBox;
    public static string Members;
    public static string Member;
    public static string AdditionalProperties;
    public static string ExtendedFieldURI;
    public static string Value;
    public static string Values;
    public static string ToFolderId;
    public static string ActualWork;
    public static string AssignedTime;
    public static string BillingInformation;
    public static string ChangeCount;
    public static string CompleteDate;
    public static string Contacts;
    public static string DelegationState;
    public static string Delegator;
    public static string DueDate;
    public static string IsAssignmentEditable;
    public static string IsComplete;
    public static string IsTeamTask;
    public static string Owner;
    public static string PercentComplete;
    public static string Status;
    public static string StatusDescription;
    public static string TotalWork;
    public static string Task;
    public static string MailboxCulture;
    public static string MeetingRequestType;
    public static string IntendedFreeBusyStatus;
    public static string MeetingRequest;
    public static string MeetingResponse;
    public static string MeetingCancellation;
    public static string ChangeHighlights;
    public static string HasLocationChanged;
    public static string HasStartTimeChanged;
    public static string HasEndTimeChanged;
    public static string BaseOffset;
    public static string Offset;
    public static string Standard;
    public static string Daylight;
    public static string Time;
    public static string AbsoluteDate;
    public static string UnresolvedEntry;
    public static string ResolutionSet;
    public static string Resolution;
    public static string DistributionList;
    public static string DLExpansion;
    public static string IndexedFieldURI;
    public static string PullSubscriptionRequest;
    public static string PushSubscriptionRequest;
    public static string StreamingSubscriptionRequest;
    public static string EventTypes;
    public static string EventType;
    public static string Timeout;
    public static string Watermark;
    public static string SubscriptionId;
    public static string SubscriptionIds;
    public static string StatusFrequency;
    public static string URL;
    public static string CallerData;
    public static string Notification;
    public static string Notifications;
    public static string PreviousWatermark;
    public static string MoreEvents;
    public static string TimeStamp;
    public static string UnreadCount;
    public static string OldParentFolderId;
    public static string CopiedEvent;
    public static string CreatedEvent;
    public static string DeletedEvent;
    public static string ModifiedEvent;
    public static string MovedEvent;
    public static string NewMailEvent;
    public static string StatusEvent;
    public static string FreeBusyChangedEvent;
    public static string ExchangeImpersonation;
    public static string ConnectingSID;
    public static string OpenAsAdminOrSystemService;
    public static string LogonType;
    public static string BudgetType;
    public static string ManagementRole;
    public static string UserRoles;
    public static string ApplicationRoles;
    public static string Role;
    public static string SyncFolderId;
    public static string SyncScope;
    public static string SyncState;
    public static string Ignore;
    public static string MaxChangesReturned;
    public static string Changes;
    public static string IncludesLastItemInRange;
    public static string IncludesLastFolderInRange;
    public static string Create;
    public static string Update;
    public static string Delete;
    public static string ReadFlagChange;
    public static string SearchParameters;
    public static string SoftDeleted;
    public static string Shallow;
    public static string Associated;
    public static string BaseFolderId;
    public static string BaseFolderIds;
    public static string SortOrder;
    public static string FieldOrder;
    public static string CanDelete;
    public static string CanRenameOrMove;
    public static string MustDisplayComment;
    public static string HasQuota;
    public static string IsManagedFoldersRoot;
    public static string ManagedFolderId;
    public static string Comment;
    public static string StorageQuota;
    public static string FolderSize;
    public static string HomePage;
    public static string ManagedFolderInformation;
    public static string CalendarView;
    public static string PostedTime;
    public static string PostItem;
    public static string RequestVersion;
    public static string RequestServerVersion;
    public static string PostReplyItem;
    public static string CreateAssociated;
    public static string CreateContents;
    public static string CreateHierarchy;
    public static string Modify;
    public static string Read;
    public static string EffectiveRights;
    public static string LastModifiedName;
    public static string LastModifiedTime;
    public static string ConversationId;
    public static string UniqueBody;
    public static string BodyType;
    public static string NormalizedBodyType;
    public static string UniqueBodyType;
    public static string AttachmentShape;
    public static string UserId;
    public static string UserIds;
    public static string CanCreateItems;
    public static string CanCreateSubFolders;
    public static string IsFolderOwner;
    public static string IsFolderVisible;
    public static string IsFolderContact;
    public static string EditItems;
    public static string DeleteItems;
    public static string ReadItems;
    public static string PermissionLevel;
    public static string CalendarPermissionLevel;
    public static string SID;
    public static string PrimarySmtpAddress;
    public static string DistinguishedUser;
    public static string PermissionSet;
    public static string Permissions;
    public static string Permission;
    public static string CalendarPermissions;
    public static string CalendarPermission;
    public static string GroupBy;
    public static string AggregateOn;
    public static string Groups;
    public static string GroupedItems;
    public static string GroupIndex;
    public static string ConflictResults;
    public static string Count;
    public static string OofSettings;
    public static string UserOofSettings;
    public static string OofState;
    public static string ExternalAudience;
    public static string AllowExternalOof;
    public static string InternalReply;
    public static string ExternalReply;
    public static string Bias;
    public static string DayOrder;
    public static string Year;
    public static string StandardTime;
    public static string DaylightTime;
    public static string MailboxData;
    public static string MailboxDataArray;
    public static string Email;
    public static string AttendeeType;
    public static string ExcludeConflicts;
    public static string FreeBusyViewOptions;
    public static string SuggestionsViewOptions;
    public static string FreeBusyView;
    public static string TimeWindow;
    public static string MergedFreeBusyIntervalInMinutes;
    public static string RequestedView;
    public static string FreeBusyViewType;
    public static string CalendarEventArray;
    public static string CalendarEvent;
    public static string BusyType;
    public static string MergedFreeBusy;
    public static string WorkingHours;
    public static string WorkingPeriodArray;
    public static string WorkingPeriod;
    public static string StartTimeInMinutes;
    public static string EndTimeInMinutes;
    public static string GoodThreshold;
    public static string MaximumResultsByDay;
    public static string MaximumNonWorkHourResultsByDay;
    public static string MeetingDurationInMinutes;
    public static string MinimumSuggestionQuality;
    public static string DetailedSuggestionsWindow;
    public static string CurrentMeetingTime;
    public static string GlobalObjectId;
    public static string SuggestionDayResultArray;
    public static string SuggestionDayResult;
    public static string Date;
    public static string DayQuality;
    public static string SuggestionArray;
    public static string Suggestion;
    public static string MeetingTime;
    public static string IsWorkTime;
    public static string SuggestionQuality;
    public static string AttendeeConflictDataArray;
    public static string UnknownAttendeeConflictData;
    public static string TooBigGroupAttendeeConflictData;
    public static string IndividualAttendeeConflictData;
    public static string GroupAttendeeConflictData;
    public static string NumberOfMembers;
    public static string NumberOfMembersAvailable;
    public static string NumberOfMembersWithConflict;
    public static string NumberOfMembersWithNoData;
    public static string SourceIds;
    public static string AlternateId;
    public static string AlternatePublicFolderId;
    public static string AlternatePublicFolderItemId;
    public static string DelegatePermissions;
    public static string ReceiveCopiesOfMeetingMessages;
    public static string ViewPrivateItems;
    public static string CalendarFolderPermissionLevel;
    public static string TasksFolderPermissionLevel;
    public static string InboxFolderPermissionLevel;
    public static string ContactsFolderPermissionLevel;
    public static string NotesFolderPermissionLevel;
    public static string JournalFolderPermissionLevel;
    public static string DelegateUser;
    public static string DelegateUsers;
    public static string DeliverMeetingRequests;
    public static string MessageXml;
    public static string UserConfiguration;
    public static string UserConfigurationName;
    public static string UserConfigurationProperties;
    public static string Dictionary;
    public static string DictionaryEntry;
    public static string DictionaryKey;
    public static string DictionaryValue;
    public static string XmlData;
    public static string BinaryData;
    public static string FilterHtmlContent;
    public static string ConvertHtmlCodePageToUTF8;
    public static string UnknownEntries;
    public static string UnknownEntry;
    public static string PasswordExpirationDate;
    public static string Flag;
    public static string PersonaPostalAddress;
    public static string PostalAddressType;
    public static string EnhancedLocation;
    public static string LocationDisplayName;
    public static string LocationAnnotation;
    public static string LocationSource;
    public static string LocationUri;
    public static string Latitude;
    public static string Longitude;
    public static string Accuracy;
    public static string Altitude;
    public static string AltitudeAccuracy;
    public static string FormattedAddress;
    public static string Guid;
    public static string PhoneCallId;
    public static string DialString;
    public static string PhoneCallInformation;
    public static string PhoneCallState;
    public static string ConnectionFailureCause;
    public static string SIPResponseCode;
    public static string SIPResponseText;
    public static string WebClientReadFormQueryString;
    public static string WebClientEditFormQueryString;
    public static string Ids;
    public static string Id;
    public static string TimeZoneDefinitions;
    public static string TimeZoneDefinition;
    public static string Periods;
    public static string Period;
    public static string TransitionsGroups;
    public static string TransitionsGroup;
    public static string Transitions;
    public static string Transition;
    public static string AbsoluteDateTransition;
    public static string RecurringDayTransition;
    public static string RecurringDateTransition;
    public static string DateTime;
    public static string TimeOffset;
    public static string Day;
    public static string TimeZoneContext;
    public static string StartTimeZone;
    public static string EndTimeZone;
    public static string ReceivedBy;
    public static string ReceivedRepresenting;
    public static string Uid;
    public static string RecurrenceId;
    public static string DateTimeStamp;
    public static string IsInline;
    public static string IsContactPhoto;
    public static string QueryString;
    public static string HighlightTerms;
    public static string HighlightTerm;
    public static string HighlightTermScope;
    public static string HighlightTermValue;
    public static string CalendarEventDetails;
    public static string ID;
    public static string IsException;
    public static string IsReminderSet;
    public static string IsPrivate;
    public static string FirstDayOfWeek;
    public static string Verb;
    public static string Parameter;
    public static string ReturnValue;
    public static string ReturnNewItemIds;
    public static string DateTimePrecision;
    public static string ConvertInlineImagesToDataUrls;
    public static string InlineImageUrlTemplate;
    public static string BlockExternalImages;
    public static string AddBlankTargetToLinks;
    public static string MaximumBodySize;
    public static string StoreEntryId;
    public static string InstanceKey;
    public static string NormalizedBody;
    public static string PolicyTag;
    public static string ArchiveTag;
    public static string RetentionDate;
    public static string DisableReason;
    public static string AppMarketplaceUrl;
    public static string TextBody;
    public static string IconIndex;
    public static string GlobalIconIndex;
    public static string DraftItemIds;
    public static string HasIrm;
    public static string GlobalHasIrm;
    public static string ApprovalRequestData;
    public static string IsUndecidedApprovalRequest;
    public static string ApprovalDecision;
    public static string ApprovalDecisionMaker;
    public static string ApprovalDecisionTime;
    public static string VotingOptionData;
    public static string VotingOptionDisplayName;
    public static string SendPrompt;
    public static string VotingInformation;
    public static string UserOptions;
    public static string VotingResponse;
    public static string NumberOfDays;
    public static string AcceptanceState;
    public static string NlgEntityExtractionResult;
    public static string NlgAddresses;
    public static string NlgAddress;
    public static string NlgMeetingSuggestions;
    public static string NlgMeetingSuggestion;
    public static string NlgTaskSuggestions;
    public static string NlgTaskSuggestion;
    public static string NlgBusinessName;
    public static string NlgPeopleName;
    public static string NlgEmailAddresses;
    public static string NlgEmailAddress;
    public static string NlgEmailPosition;
    public static string NlgContacts;
    public static string NlgContact;
    public static string NlgContactString;
    public static string NlgUrls;
    public static string NlgUrl;
    public static string NlgPhoneNumbers;
    public static string NlgPhone;
    public static string NlgAttendees;
    public static string NlgEmailUser;
    public static string NlgLocation;
    public static string NlgSubject;
    public static string NlgMeetingString;
    public static string NlgStartTime;
    public static string NlgEndTime;
    public static string NlgTaskString;
    public static string NlgAssignees;
    public static string NlgPersonName;
    public static string NlgOriginalPhoneString;
    public static string NlgPhoneString;
    public static string NlgType;
    public static string NlgName;
    public static string NlgUserId;
    public static string GetClientAccessToken;
    public static string GetClientAccessTokenResponse;
    public static string GetClientAccessTokenResponseMessage;
    public static string TokenRequests;
    public static string TokenRequest;
    public static string TokenType;
    public static string TokenValue;
    public static string TTL;
    public static string Tokens;
    public static string MarkAsJunk;
    public static string MarkAsJunkResponse;
    public static string MarkAsJunkResponseMessage;
    public static string MovedItemId;
    public static string CreationTime;
    public static string People;
    public static string Persona;
    public static string PersonaId;
    public static string PersonaShape;
    public static string RelevanceScore;
    public static string TotalNumberOfPeopleInView;
    public static string FirstMatchingRowIndex;
    public static string FirstLoadedRowIndex;
    public static string YomiCompanyName;
    public static string Emails1;
    public static string Emails2;
    public static string Emails3;
    public static string HomeAddresses;
    public static string BusinessAddresses;
    public static string OtherAddresses;
    public static string BusinessPhoneNumbers;
    public static string BusinessPhoneNumbers2;
    public static string AssistantPhoneNumbers;
    public static string TTYTDDPhoneNumbers;
    public static string HomePhones;
    public static string HomePhones2;
    public static string MobilePhones;
    public static string MobilePhones2;
    public static string CallbackPhones;
    public static string CarPhones;
    public static string HomeFaxes;
    public static string OrganizationMainPhones;
    public static string OtherFaxes;
    public static string OtherTelephones;
    public static string OtherPhones2;
    public static string Pagers;
    public static string RadioPhones;
    public static string TelexNumbers;
    public static string WorkFaxes;
    public static string FileAses;
    public static string CompanyNames;
    public static string DisplayNames;
    public static string DisplayNamePrefixes;
    public static string GivenNames;
    public static string MiddleNames;
    public static string Surnames;
    public static string Generations;
    public static string Nicknames;
    public static string YomiCompanyNames;
    public static string YomiFirstNames;
    public static string YomiLastNames;
    public static string Managers;
    public static string AssistantNames;
    public static string Professions;
    public static string SpouseNames;
    public static string Departments;
    public static string Titles;
    public static string ImAddresses2;
    public static string ImAddresses3;
    public static string DisplayNamePrefix;
    public static string DisplayNameFirstLast;
    public static string DisplayNameLastFirst;
    public static string DisplayNameFirstLastHeader;
    public static string DisplayNameLastFirstHeader;
    public static string IsFavorite;
    public static string Schools;
    public static string Hobbies;
    public static string Locations;
    public static string OfficeLocations;
    public static string BusinessHomePages;
    public static string PersonalHomePages;
    public static string ThirdPartyPhotoUrls;
    public static string Attribution;
    public static string Attributions;
    public static string StringAttributedValue;
    public static string DisplayNameFirstLastSortKey;
    public static string DisplayNameLastFirstSortKey;
    public static string CompanyNameSortKey;
    public static string HomeCitySortKey;
    public static string WorkCitySortKey;
    public static string FileAsId;
    public static string FileAsIds;
    public static string HomeCity;
    public static string WorkCity;
    public static string PersonaType;
    public static string Birthdays;
    public static string BirthdaysLocal;
    public static string WeddingAnniversaries;
    public static string WeddingAnniversariesLocal;
    public static string OriginalDisplayName;
    public static string Person;
    public static string Insights;
    public static string Insight;
    public static string InsightType;
    public static string InsightSourceType;
    public static string InsightValue;
    public static string InsightSource;
    public static string UpdatedUtcTicks;
    public static string StringInsightValue;
    public static string ProfileInsightValue;
    public static string JobInsightValue;
    public static string OutOfOfficeInsightValue;
    public static string UserProfilePicture;
    public static string EducationInsightValue;
    public static string SkillInsightValue;
    public static string MeetingInsightValue;
    public static string Attendees;
    public static string EmailInsightValue;
    public static string ThreadId;
    public static string LastEmailDateUtcTicks;
    public static string LastEmailSender;
    public static string EmailsCount;
    public static string DelveDocument;
    public static string CompanyInsightValue;
    public static string ArrayOfInsightValue;
    public static string InsightContent;
    public static string SingleValueInsightContent;
    public static string MultiValueInsightContent;
    public static string ArrayOfInsight;
    public static string PersonType;
    public static string SatoriId;
    public static string DescriptionAttribution;
    public static string ImageUrl;
    public static string ImageUrlAttribution;
    public static string YearFound;
    public static string FinanceSymbol;
    public static string WebsiteUrl;
    public static string Rank;
    public static string Author;
    public static string Created;
    public static string DefaultEncodingURL;
    public static string FileType;
    public static string Data;
    public static string ItemList;
    public static string Avatar;
    public static string JoinedUtcTicks;
    public static string Company;
    public static string StartUtcTicks;
    public static string EndUtcTicks;
    public static string Blob;
    public static string PhotoSize;
    public static string Institute;
    public static string Degree;
    public static string Strength;
    public static string ComputedInsightValueProperty;
    public static string ComputedInsightValue;
    public static string Properties;
    public static string Property;
    public static string Key;
    public static string SMSNumber;
    public static string FacebookProfileLink;
    public static string LinkedInProfileLink;
    public static string ProfessionalBiography;
    public static string TeamSize;
    public static string Hometown;
    public static string CurrentLocation;
    public static string Office;
    public static string Headline;
    public static string ManagementChain;
    public static string Peers;
    public static string MutualConnections;
    public static string MutualManager;
    public static string Skills;
    public static string JobInsight;
    public static string CurrentJob;
    public static string CompanyProfile;
    public static string CompanyInsight;
    public static string Text;
    public static string ImageType;
    public static string DocumentId;
    public static string PreviewURL;
    public static string LastEditor;
    public static string ProfilePicture;
    public static string Conversations;
    public static string Conversation;
    public static string UniqueRecipients;
    public static string GlobalUniqueRecipients;
    public static string UniqueUnreadSenders;
    public static string GlobalUniqueUnreadSenders;
    public static string UniqueSenders;
    public static string GlobalUniqueSenders;
    public static string LastDeliveryTime;
    public static string GlobalLastDeliveryTime;
    public static string GlobalCategories;
    public static string FlagStatus;
    public static string GlobalFlagStatus;
    public static string GlobalHasAttachments;
    public static string MessageCount;
    public static string GlobalMessageCount;
    public static string GlobalUnreadCount;
    public static string GlobalSize;
    public static string ItemClasses;
    public static string GlobalItemClasses;
    public static string GlobalImportance;
    public static string GlobalInferredImportance;
    public static string GlobalItemIds;
    public static string ChangeType;
    public static string ReadFlag;
    public static string TotalConversationsInView;
    public static string IndexedOffset;
    public static string ConversationShape;
    public static string MailboxScope;
    public static string ApplyConversationAction;
    public static string ConversationActions;
    public static string ConversationAction;
    public static string ApplyConversationActionResponse;
    public static string ApplyConversationActionResponseMessage;
    public static string EnableAlwaysDelete;
    public static string ProcessRightAway;
    public static string DestinationFolderId;
    public static string ContextFolderId;
    public static string ConversationLastSyncTime;
    public static string AlwaysCategorize;
    public static string AlwaysDelete;
    public static string AlwaysMove;
    public static string Move;
    public static string Copy;
    public static string SetReadState;
    public static string SetRetentionPolicy;
    public static string DeleteType;
    public static string RetentionPolicyType;
    public static string RetentionPolicyTagId;
    public static string FoldersToIgnore;
    public static string ParentInternetMessageId;
    public static string ConversationNode;
    public static string ConversationNodes;
    public static string MaxItemsToReturn;
    public static string SetTeamMailbox;
    public static string SetTeamMailboxResponse;
    public static string UnpinTeamMailbox;
    public static string UnpinTeamMailboxResponse;
    public static string RoomLists;
    public static string Rooms;
    public static string Room;
    public static string RoomList;
    public static string RoomId;
    public static string Autodiscover;
    public static string BinarySecret;
    public static string Response;
    public static string User;
    public static string LegacyDN;
    public static string DeploymentId;
    public static string Account;
    public static string AccountType;
    public static string Action;
    public static string To;
    public static string RedirectAddr;
    public static string RedirectUrl;
    public static string Protocol;
    public static string Type;
    public static string Server;
    public static string OwnerSmtpAddress;
    public static string ServerDN;
    public static string ServerVersion;
    public static string ServerVersionInfo;
    public static string AD;
    public static string AuthPackage;
    public static string MdbDN;
    public static string EWSUrl;
    public static string EwsPartnerUrl;
    public static string EmwsUrl;
    public static string ASUrl;
    public static string OOFUrl;
    public static string UMUrl;
    public static string OABUrl;
    public static string Internal;
    public static string External;
    public static string OWAUrl;
    public static string Error;
    public static string ErrorCode;
    public static string DebugData;
    public static string Users;
    public static string RequestedSettings;
    public static string Setting;
    public static string GetUserSettingsRequestMessage;
    public static string RequestedServerVersion;
    public static string Request;
    public static string RedirectTarget;
    public static string UserSettings;
    public static string UserSettingErrors;
    public static string GetUserSettingsResponseMessage;
    public static string ErrorMessage;
    public static string UserResponse;
    public static string UserResponses;
    public static string UserSettingError;
    public static string Domain;
    public static string Domains;
    public static string DomainResponse;
    public static string DomainResponses;
    public static string DomainSetting;
    public static string DomainSettings;
    public static string DomainStringSetting;
    public static string DomainSettingError;
    public static string DomainSettingErrors;
    public static string GetDomainSettingsRequestMessage;
    public static string GetDomainSettingsResponseMessage;
    public static string SettingName;
    public static string UserSetting;
    public static string StringSetting;
    public static string WebClientUrlCollectionSetting;
    public static string WebClientUrls;
    public static string WebClientUrl;
    public static string AuthenticationMethods;
    public static string Url;
    public static string AlternateMailboxCollectionSetting;
    public static string AlternateMailboxes;
    public static string AlternateMailbox;
    public static string ProtocolConnectionCollectionSetting;
    public static string ProtocolConnections;
    public static string ProtocolConnection;
    public static string DocumentSharingLocationCollectionSetting;
    public static string DocumentSharingLocations;
    public static string DocumentSharingLocation;
    public static string ServiceUrl;
    public static string LocationUrl;
    public static string SupportedFileExtensions;
    public static string FileExtension;
    public static string ExternalAccessAllowed;
    public static string AnonymousAccessAllowed;
    public static string CanModifyPermissions;
    public static string IsDefault;
    public static string EncryptionMethod;
    public static string Hostname;
    public static string Port;
    public static string Version;
    public static string MajorVersion;
    public static string MinorVersion;
    public static string MajorBuildNumber;
    public static string MinorBuildNumber;
    public static string RequestedVersion;
    public static string PublicFolderServer;
    public static string Ssl;
    public static string SharingUrl;
    public static string EcpUrl;
    public static string EcpUrl_um;
    public static string EcpUrl_aggr;
    public static string EcpUrl_sms;
    public static string EcpUrl_mt;
    public static string EcpUrl_ret;
    public static string EcpUrl_publish;
    public static string EcpUrl_photo;
    public static string ExchangeRpcUrl;
    public static string EcpUrl_connect;
    public static string EcpUrl_tm;
    public static string EcpUrl_tmCreating;
    public static string EcpUrl_tmEditing;
    public static string EcpUrl_tmHiding;
    public static string SiteMailboxCreationURL;
    public static string EcpUrl_extinstall;
    public static string PartnerToken;
    public static string PartnerTokenReference;
    public static string ServerExclusiveConnect;
    public static string AutoDiscoverSMTPAddress;
    public static string CertPrincipalName;
    public static string GroupingInformation;
    public static string MailboxSmtpAddress;
    public static string RuleId;
    public static string Priority;
    public static string IsEnabled;
    public static string IsNotSupported;
    public static string IsInError;
    public static string Conditions;
    public static string Exceptions;
    public static string Actions;
    public static string InboxRules;
    public static string Rule;
    public static string OutlookRuleBlobExists;
    public static string RemoveOutlookRuleBlob;
    public static string ContainsBodyStrings;
    public static string ContainsHeaderStrings;
    public static string ContainsRecipientStrings;
    public static string ContainsSenderStrings;
    public static string ContainsSubjectOrBodyStrings;
    public static string ContainsSubjectStrings;
    public static string FlaggedForAction;
    public static string FromAddresses;
    public static string FromConnectedAccounts;
    public static string IsApprovalRequest;
    public static string IsAutomaticForward;
    public static string IsAutomaticReply;
    public static string IsEncrypted;
    public static string IsMeetingRequest;
    public static string IsMeetingResponse;
    public static string IsNDR;
    public static string IsPermissionControlled;
    public static string IsSigned;
    public static string IsVoicemail;
    public static string IsReadReceipt;
    public static string MessageClassifications;
    public static string NotSentToMe;
    public static string SentCcMe;
    public static string SentOnlyToMe;
    public static string SentToAddresses;
    public static string SentToMe;
    public static string SentToOrCcMe;
    public static string WithinDateRange;
    public static string WithinSizeRange;
    public static string MinimumSize;
    public static string MaximumSize;
    public static string StartDateTime;
    public static string EndDateTime;
    public static string AssignCategories;
    public static string CopyToFolder;
    public static string FlagMessage;
    public static string ForwardAsAttachmentToRecipients;
    public static string ForwardToRecipients;
    public static string MarkImportance;
    public static string MarkAsRead;
    public static string MoveToFolder;
    public static string PermanentDelete;
    public static string RedirectToRecipients;
    public static string SendSMSAlertToRecipients;
    public static string ServerReplyWithMessage;
    public static string StopProcessingRules;
    public static string CreateRuleOperation;
    public static string SetRuleOperation;
    public static string DeleteRuleOperation;
    public static string Operations;
    public static string RuleOperationErrors;
    public static string RuleOperationError;
    public static string OperationIndex;
    public static string ValidationErrors;
    public static string FieldValue;
    public static string Not;
    public static string Bitmask;
    public static string Constant;
    public static string Restriction;
    public static string Condition;
    public static string Contains;
    public static string Excludes;
    public static string Exists;
    public static string FieldURIOrConstant;
    public static string And;
    public static string Or;
    public static string IsEqualTo;
    public static string IsNotEqualTo;
    public static string IsGreaterThan;
    public static string IsGreaterThanOrEqualTo;
    public static string IsLessThan;
    public static string IsLessThanOrEqualTo;
    public static string PhoneticFullName;
    public static string PhoneticFirstName;
    public static string PhoneticLastName;
    public static string Alias;
    public static string Notes;
    public static string Photo;
    public static string UserSMIMECertificate;
    public static string MSExchangeCertificate;
    public static string DirectoryId;
    public static string ManagerMailbox;
    public static string DirectReports;
    public static string SizeRequested;
    public static string HasChanged;
    public static string PictureData;
    public static string ResponseMessage;
    public static string ResponseMessages;
    public static string FindConversation;
    public static string FindConversationResponse;
    public static string FindConversationResponseMessage;
    public static string GetConversationItems;
    public static string GetConversationItemsResponse;
    public static string GetConversationItemsResponseMessage;
    public static string FindItem;
    public static string FindItemResponse;
    public static string FindItemResponseMessage;
    public static string GetItem;
    public static string GetItemResponse;
    public static string GetItemResponseMessage;
    public static string CreateItem;
    public static string CreateItemResponse;
    public static string CreateItemResponseMessage;
    public static string SendItem;
    public static string SendItemResponse;
    public static string SendItemResponseMessage;
    public static string DeleteItem;
    public static string DeleteItemResponse;
    public static string DeleteItemResponseMessage;
    public static string UpdateItem;
    public static string UpdateItemResponse;
    public static string UpdateItemResponseMessage;
    public static string CopyItem;
    public static string CopyItemResponse;
    public static string CopyItemResponseMessage;
    public static string MoveItem;
    public static string MoveItemResponse;
    public static string MoveItemResponseMessage;
    public static string ArchiveItem;
    public static string ArchiveItemResponse;
    public static string ArchiveItemResponseMessage;
    public static string ArchiveSourceFolderId;
    public static string FindFolder;
    public static string FindFolderResponse;
    public static string FindFolderResponseMessage;
    public static string GetFolder;
    public static string GetFolderResponse;
    public static string GetFolderResponseMessage;
    public static string CreateFolder;
    public static string CreateFolderResponse;
    public static string CreateFolderResponseMessage;
    public static string DeleteFolder;
    public static string DeleteFolderResponse;
    public static string DeleteFolderResponseMessage;
    public static string EmptyFolder;
    public static string EmptyFolderResponse;
    public static string EmptyFolderResponseMessage;
    public static string UpdateFolder;
    public static string UpdateFolderResponse;
    public static string UpdateFolderResponseMessage;
    public static string CopyFolder;
    public static string CopyFolderResponse;
    public static string CopyFolderResponseMessage;
    public static string MoveFolder;
    public static string MoveFolderResponse;
    public static string MoveFolderResponseMessage;
    public static string MarkAllItemsAsRead;
    public static string MarkAllItemsAsReadResponse;
    public static string MarkAllItemsAsReadResponseMessage;
    public static string FindPeople;
    public static string FindPeopleResponse;
    public static string FindPeopleResponseMessage;
    public static string SearchPeopleSuggestionIndex;
    public static string SearchPeopleContext;
    public static string SearchPeopleQuerySources;
    public static string FindPeopleTransactionId;
    public static string FindPeopleSources;
    public static string GetPeopleInsights;
    public static string GetPeopleInsightsResponse;
    public static string GetPeopleInsightsResponseMessage;
    public static string GetUserPhoto;
    public static string GetUserPhotoResponse;
    public static string GetUserPhotoResponseMessage;
    public static string SetUserPhoto;
    public static string SetUserPhotoResponse;
    public static string SetUserPhotoResponseMessage;
    public static string GetAttachment;
    public static string GetAttachmentResponse;
    public static string GetAttachmentResponseMessage;
    public static string CreateAttachment;
    public static string CreateAttachmentResponse;
    public static string CreateAttachmentResponseMessage;
    public static string DeleteAttachment;
    public static string DeleteAttachmentResponse;
    public static string DeleteAttachmentResponseMessage;
    public static string ResolveNames;
    public static string ResolveNamesResponse;
    public static string ResolveNamesResponseMessage;
    public static string ExpandDL;
    public static string ExpandDLResponse;
    public static string ExpandDLResponseMessage;
    public static string Subscribe;
    public static string SubscribeResponse;
    public static string SubscribeResponseMessage;
    public static string SubscriptionRequest;
    public static string Unsubscribe;
    public static string UnsubscribeResponse;
    public static string UnsubscribeResponseMessage;
    public static string GetEvents;
    public static string GetEventsResponse;
    public static string GetEventsResponseMessage;
    public static string GetStreamingEvents;
    public static string GetStreamingEventsResponse;
    public static string GetStreamingEventsResponseMessage;
    public static string ConnectionStatus;
    public static string ErrorSubscriptionIds;
    public static string ConnectionTimeout;
    public static string HeartbeatFrequency;
    public static string SyncFolderItems;
    public static string SyncFolderItemsResponse;
    public static string SyncFolderItemsResponseMessage;
    public static string SyncFolderHierarchy;
    public static string SyncFolderHierarchyResponse;
    public static string SyncFolderHierarchyResponseMessage;
    public static string GetUserOofSettingsRequest;
    public static string GetUserOofSettingsResponse;
    public static string SetUserOofSettingsRequest;
    public static string SetUserOofSettingsResponse;
    public static string GetUserAvailabilityRequest;
    public static string GetUserAvailabilityResponse;
    public static string FreeBusyResponseArray;
    public static string FreeBusyResponse;
    public static string SuggestionsResponse;
    public static string GetRoomListsRequest;
    public static string GetRoomListsResponse;
    public static string GetRoomsRequest;
    public static string GetRoomsResponse;
    public static string ConvertId;
    public static string ConvertIdResponse;
    public static string ConvertIdResponseMessage;
    public static string AddDelegate;
    public static string AddDelegateResponse;
    public static string DelegateUserResponseMessageType;
    public static string RemoveDelegate;
    public static string RemoveDelegateResponse;
    public static string GetDelegate;
    public static string GetDelegateResponse;
    public static string UpdateDelegate;
    public static string UpdateDelegateResponse;
    public static string CreateUserConfiguration;
    public static string CreateUserConfigurationResponse;
    public static string CreateUserConfigurationResponseMessage;
    public static string DeleteUserConfiguration;
    public static string DeleteUserConfigurationResponse;
    public static string DeleteUserConfigurationResponseMessage;
    public static string GetUserConfiguration;
    public static string GetUserConfigurationResponse;
    public static string GetUserConfigurationResponseMessage;
    public static string UpdateUserConfiguration;
    public static string UpdateUserConfigurationResponse;
    public static string UpdateUserConfigurationResponseMessage;
    public static string PlayOnPhone;
    public static string PlayOnPhoneResponse;
    public static string GetPhoneCall;
    public static string GetPhoneCallResponse;
    public static string DisconnectPhoneCall;
    public static string DisconnectPhoneCallResponse;
    public static string GetServerTimeZones;
    public static string GetServerTimeZonesResponse;
    public static string GetServerTimeZonesResponseMessage;
    public static string GetInboxRules;
    public static string GetInboxRulesResponse;
    public static string UpdateInboxRules;
    public static string UpdateInboxRulesResponse;
    public static string ExecuteDiagnosticMethod;
    public static string ExecuteDiagnosticMethodResponse;
    public static string ExecuteDiagnosticMethodResponseMEssage;
    public static string GetPasswordExpirationDateRequest;
    public static string GetPasswordExpirationDateResponse;
    public static string GetSearchableMailboxes;
    public static string GetSearchableMailboxesResponse;
    public static string GetDiscoverySearchConfiguration;
    public static string GetDiscoverySearchConfigurationResponse;
    public static string GetHoldOnMailboxes;
    public static string GetHoldOnMailboxesResponse;
    public static string SetHoldOnMailboxes;
    public static string SetHoldOnMailboxesResponse;
    public static string SearchMailboxes;
    public static string SearchMailboxesResponse;
    public static string SearchMailboxesResponseMessage;
    public static string GetNonIndexableItemDetails;
    public static string GetNonIndexableItemDetailsResponse;
    public static string GetNonIndexableItemStatistics;
    public static string GetNonIndexableItemStatisticsResponse;
    public static string SearchQueries;
    public static string SearchQuery;
    public static string MailboxQuery;
    public static string Query;
    public static string MailboxSearchScopes;
    public static string MailboxSearchScope;
    public static string SearchScope;
    public static string ResultType;
    public static string SortBy;
    public static string Order;
    public static string Language;
    public static string Deduplication;
    public static string PageSize;
    public static string PageItemReference;
    public static string PageDirection;
    public static string PreviewItemResponseShape;
    public static string ExtendedProperties;
    public static string PageItemSize;
    public static string PageItemCount;
    public static string ItemCount;
    public static string KeywordStats;
    public static string KeywordStat;
    public static string Keyword;
    public static string ItemHits;
    public static string SearchPreviewItem;
    public static string ChangeKey;
    public static string ParentId;
    public static string MailboxId;
    public static string UniqueHash;
    public static string SortValue;
    public static string OwaLink;
    public static string SmtpAddress;
    public static string CreatedTime;
    public static string ReceivedTime;
    public static string SentTime;
    public static string Preview;
    public static string HasAttachment;
    public static string FailedMailboxes;
    public static string FailedMailbox;
    public static string Token;
    public static string Refiners;
    public static string Refiner;
    public static string MailboxStats;
    public static string MailboxStat;
    public static string HoldId;
    public static string ActionType;
    public static string Mailboxes;
    public static string SearchFilter;
    public static string ReferenceId;
    public static string IsMembershipGroup;
    public static string ExpandGroupMembership;
    public static string SearchableMailboxes;
    public static string SearchableMailbox;
    public static string SearchMailboxesResult;
    public static string MailboxHoldResult;
    public static string Statuses;
    public static string MailboxHoldStatuses;
    public static string MailboxHoldStatus;
    public static string AdditionalInfo;
    public static string NonIndexableItemDetail;
    public static string NonIndexableItemStatistic;
    public static string NonIndexableItemDetails;
    public static string NonIndexableItemStatistics;
    public static string NonIndexableItemDetailsResult;
    public static string SearchArchiveOnly;
    public static string ErrorDescription;
    public static string IsPartiallyIndexed;
    public static string IsPermanentFailure;
    public static string AttemptCount;
    public static string LastAttemptTime;
    public static string SearchId;
    public static string DiscoverySearchConfigurations;
    public static string DiscoverySearchConfiguration;
    public static string InPlaceHoldConfigurationOnly;
    public static string InPlaceHoldIdentity;
    public static string ItemHoldPeriod;
    public static string ManagedByOrganization;
    public static string IsExternalMailbox;
    public static string ExternalEmailAddress;
    public static string ExtendedAttributes;
    public static string ExtendedAttribute;
    public static string ExtendedAttributeName;
    public static string ExtendedAttributeValue;
    public static string SearchScopeType;
    public static string GetAppManifestsRequest;
    public static string GetAppManifestsResponse;
    public static string Manifests;
    public static string Manifest;
    public static string Apps;
    public static string App;
    public static string Metadata;
    public static string ActionUrl;
    public static string AppStatus;
    public static string EndNodeUrl;
    public static string GetClientExtensionRequest;
    public static string ClientExtensionUserRequest;
    public static string ClientExtensionUserEnabled;
    public static string ClientExtensionUserDisabled;
    public static string ClientExtensionRequestedIds;
    public static string ClientExtensionIsDebug;
    public static string ClientExtensionRawMasterTableXml;
    public static string GetClientExtensionResponse;
    public static string ClientExtensionSpecificUsers;
    public static string ClientExtensions;
    public static string ClientExtension;
    public static string SetClientExtensionRequest;
    public static string SetClientExtensionActions;
    public static string SetClientExtensionAction;
    public static string SetClientExtensionResponse;
    public static string SetClientExtensionResponseMessage;
    public static string GetOMEConfigurationRequest;
    public static string SetOMEConfigurationRequest;
    public static string OMEConfigurationXml;
    public static string GetOMEConfigurationResponse;
    public static string SetOMEConfigurationResponse;
    public static string InstallAppRequest;
    public static string InstallAppResponse;
    public static string MarketplaceAssetId;
    public static string MarketplaceContentMarket;
    public static string SendWelcomeEmail;
    public static string WasFirstInstall;
    public static string UninstallAppRequest;
    public static string UninstallAppResponse;
    public static string DisableAppRequest;
    public static string DisableAppResponse;
    public static string RegisterConsentRequest;
    public static string RegisterConsentResponse;
    public static string GetAppMarketplaceUrlRequest;
    public static string GetAppMarketplaceUrlResponse;
    public static string GetUserRetentionPolicyTags;
    public static string GetUserRetentionPolicyTagsResponse;
    public static string RetentionPolicyTags;
    public static string RetentionPolicyTag;
    public static string RetentionId;
    public static string RetentionPeriod;
    public static string RetentionAction;
    public static string Description;
    public static string IsVisible;
    public static string OptedInto;
    public static string IsArchive;
    public static string Likers;
    public static string GetUserUnifiedGroups;
    public static string RequestedGroupsSets;
    public static string RequestedUnifiedGroupsSetItem;
    public static string SortType;
    public static string FilterType;
    public static string SortDirection;
    public static string GroupsLimit;
    public static string UserSmtpAddress;
    public static string GetUserUnifiedGroupsResponseMessage;
    public static string GroupsSets;
    public static string UnifiedGroupsSet;
    public static string TotalGroups;
    public static string GroupsTag;
    public static string UnifiedGroup;
    public static string MailboxGuid;
    public static string LastVisitedTimeUtc;
    public static string AccessType;
    public static string ExternalDirectoryObjectId;
    public static string GetUnifiedGroupUnseenCount;
    public static string GroupIdentity;
    public static string GroupIdentityType;
    public static string GroupIdentityValue;
    public static string GetUnifiedGroupUnseenCountResponseMessage;
    public static string UnseenCount;
    public static string SetUnifiedGroupLastVisitedTime;
    public static string SetUnifiedGroupLastVisitedTimeResponseMessage;
    public static string Hashtags;
    public static string Mentions;
    public static string MentionedMe;
    public static string SOAPEnvelopeElementName;
    public static string SOAPHeaderElementName;
    public static string SOAPBodyElementName;
    public static string SOAPFaultElementName;
    public static string SOAPFaultCodeElementName;
    public static string SOAPFaultStringElementName;
    public static string SOAPFaultActorElementName;
    public static string SOAPDetailElementName;
    public static string EwsResponseCodeElementName;
    public static string EwsMessageElementName;
    public static string EwsLineElementName;
    public static string EwsPositionElementName;
    public static string EwsErrorCodeElementName;
    public static string EwsExceptionTypeElementName;
}
internal enum Microsoft.Exchange.WebServices.Data.XmlNamespace : Enum {
    public int value__;
    public static XmlNamespace NotSpecified;
    public static XmlNamespace Messages;
    public static XmlNamespace Types;
    public static XmlNamespace Errors;
    public static XmlNamespace Soap;
    public static XmlNamespace Soap12;
    public static XmlNamespace XmlSchemaInstance;
    public static XmlNamespace PassportSoapFault;
    public static XmlNamespace WSTrustFebruary2005;
    public static XmlNamespace WSAddressing;
    public static XmlNamespace Autodiscover;
}
internal class Microsoft.Exchange.WebServices.Dns.DnsClient : object {
    private static int Win32Success;
    private static LazyMember`1<Dictionary`2<Type, DnsRecordType>> typeToDnsTypeMap;
    private static DnsClient();
    internal static List`1<T> DnsQuery(string domain, IPAddress dnsServerAddress);
}
internal class Microsoft.Exchange.WebServices.Dns.DnsException : Win32Exception {
    internal DnsException(int errorCode);
    protected DnsException(SerializationInfo info, StreamingContext context);
}
[ComVisibleAttribute("False")]
internal static class Microsoft.Exchange.WebServices.Dns.DnsNativeMethods : object {
    private static string DNSAPI;
    private static int DnsQuery(string pszName, DnsRecordType wType, DnsQueryOptions options, IntPtr aipServers, IntPtr& ppQueryResults, int pReserved);
    private static void DnsRecordListFree(IntPtr ptrRecords, FreeType freeType);
    private static IntPtr AllocDnsServerList(IPAddress dnsServerAddress);
    internal static int DnsQuery(string domain, IPAddress dnsServerAddress, DnsRecordType recordType, IntPtr& ppQueryResults);
    internal static void FreeDnsQueryResults(IntPtr ptrRecords);
}
internal abstract class Microsoft.Exchange.WebServices.Dns.DnsRecord : object {
    private string name;
    private UInt32 timeToLive;
    internal DnsRecordType RecordType { get; }
    public string Name { get; }
    public TimeSpan TimeToLive { get; }
    internal virtual void Load(DnsRecordHeader header, IntPtr dataPointer);
    internal abstract virtual DnsRecordType get_RecordType();
    public string get_Name();
    public TimeSpan get_TimeToLive();
}
internal class Microsoft.Exchange.WebServices.Dns.DnsRecordHeader : ValueType {
    internal IntPtr NextRecord;
    internal string Name;
    internal DnsRecordType RecordType;
    internal ushort DataLength;
    internal UInt32 Flags;
    internal UInt32 Ttl;
    internal UInt32 Reserved;
}
internal enum Microsoft.Exchange.WebServices.Dns.DnsRecordType : Enum {
    public ushort value__;
    public static DnsRecordType A;
    public static DnsRecordType CNAME;
    public static DnsRecordType SOA;
    public static DnsRecordType PTR;
    public static DnsRecordType MX;
    public static DnsRecordType TXT;
    public static DnsRecordType AAAA;
    public static DnsRecordType SRV;
}
internal class Microsoft.Exchange.WebServices.Dns.DnsSrvRecord : DnsRecord {
    private string target;
    private int priority;
    private int weight;
    private int port;
    internal DnsRecordType RecordType { get; }
    internal string NameTarget { get; }
    internal int Priority { get; }
    internal int Weight { get; }
    internal int Port { get; }
    internal virtual void Load(DnsRecordHeader header, IntPtr dataPointer);
    internal virtual DnsRecordType get_RecordType();
    internal string get_NameTarget();
    internal int get_Priority();
    internal int get_Weight();
    internal int get_Port();
}
internal static class Microsoft.Exchange.WebServices.Strings : object {
    internal static string CannotRemoveSubscriptionFromLiveConnection;
    internal static string ReadAccessInvalidForNonCalendarFolder;
    internal static string PropertyDefinitionPropertyMustBeSet;
    internal static string ArgumentIsBlankString;
    internal static string InvalidAutodiscoverDomainsCount;
    internal static string MinutesMustBeBetween0And1439;
    internal static string DeleteInvalidForUnsavedUserConfiguration;
    internal static string PeriodNotFound;
    internal static string InvalidAutodiscoverSmtpAddress;
    internal static string InvalidOAuthToken;
    internal static string MaxScpHopsExceeded;
    internal static string ContactGroupMemberCannotBeUpdatedWithoutBeingLoadedFirst;
    internal static string CurrentPositionNotElementStart;
    internal static string CannotConvertBetweenTimeZones;
    internal static string FrequencyMustBeBetween1And1440;
    internal static string CannotSetDelegateFolderPermissionLevelToCustom;
    internal static string PartnerTokenIncompatibleWithRequestVersion;
    internal static string InvalidAutodiscoverRequest;
    internal static string InvalidAsyncResult;
    internal static string InvalidMailboxType;
    internal static string AttachmentCollectionNotLoaded;
    internal static string ParameterIncompatibleWithRequestVersion;
    internal static string DayOfWeekIndexMustBeSpecifiedForRecurrencePattern;
    internal static string WLIDCredentialsCannotBeUsedWithLegacyAutodiscover;
    internal static string PropertyCannotBeUpdated;
    internal static string IncompatibleTypeForArray;
    internal static string PercentCompleteMustBeBetween0And100;
    internal static string AutodiscoverServiceIncompatibleWithRequestVersion;
    internal static string InvalidAutodiscoverSmtpAddressesCount;
    internal static string ServiceUrlMustBeSet;
    internal static string ItemTypeNotCompatible;
    internal static string AttachmentItemTypeMismatch;
    internal static string UnsupportedWebProtocol;
    internal static string EnumValueIncompatibleWithRequestVersion;
    internal static string UnexpectedElement;
    internal static string InvalidOrderBy;
    internal static string NoAppropriateConstructorForItemClass;
    internal static string SearchFilterAtIndexIsInvalid;
    internal static string DeletingThisObjectTypeNotAuthorized;
    internal static string PropertyCannotBeDeleted;
    internal static string ValuePropertyMustBeSet;
    internal static string TagValueIsOutOfRange;
    internal static string ItemToUpdateCannotBeNullOrNew;
    internal static string SearchParametersRootFolderIdsEmpty;
    internal static string MailboxQueriesParameterIsNotSpecified;
    internal static string FolderPermissionHasInvalidUserId;
    internal static string InvalidAutodiscoverDomain;
    internal static string MailboxesParameterIsNotSpecified;
    internal static string ParentFolderDoesNotHaveId;
    internal static string DayOfMonthMustBeSpecifiedForRecurrencePattern;
    internal static string ClassIncompatibleWithRequestVersion;
    internal static string CertificateHasNoPrivateKey;
    internal static string InvalidOrUnsupportedTimeZoneDefinition;
    internal static string HourMustBeBetween0And23;
    internal static string TimeoutMustBeBetween1And1440;
    internal static string CredentialsRequired;
    internal static string MustLoadOrAssignPropertyBeforeAccess;
    internal static string InvalidAutodiscoverServiceResponse;
    internal static string CannotCallConnectDuringLiveConnection;
    internal static string ObjectDoesNotHaveId;
    internal static string CannotAddSubscriptionToLiveConnection;
    internal static string MaxChangesMustBeBetween1And512;
    internal static string AttributeValueCannotBeSerialized;
    internal static string NumberOfDaysMustBePositive;
    internal static string SearchFilterMustBeSet;
    internal static string EndDateMustBeGreaterThanStartDate;
    internal static string InvalidDateTime;
    internal static string UpdateItemsDoesNotAllowAttachments;
    internal static string TimeoutMustBeGreaterThanZero;
    internal static string AutodiscoverInvalidSettingForOutlookProvider;
    internal static string InvalidRedirectionResponseReturned;
    internal static string ExpectedStartElement;
    internal static string DaysOfTheWeekNotSpecified;
    internal static string FolderToUpdateCannotBeNullOrNew;
    internal static string PartnerTokenRequestRequiresUrl;
    internal static string NumberOfOccurrencesMustBeGreaterThanZero;
    internal static string StartTimeZoneRequired;
    internal static string PropertyAlreadyExistsInOrderByCollection;
    internal static string ItemAttachmentMustBeNamed;
    internal static string InvalidAutodiscoverSettingsCount;
    internal static string LoadingThisObjectTypeNotSupported;
    internal static string UserIdForDelegateUserNotSpecified;
    internal static string PhoneCallAlreadyDisconnected;
    internal static string OperationDoesNotSupportAttachments;
    internal static string UnsupportedTimeZonePeriodTransitionTarget;
    internal static string IEnumerableDoesNotContainThatManyObject;
    internal static string UpdateItemsDoesNotSupportNewOrUnchangedItems;
    internal static string ValidationFailed;
    internal static string InvalidRecurrencePattern;
    internal static string TimeWindowStartTimeMustBeGreaterThanEndTime;
    internal static string InvalidAttributeValue;
    internal static string FileAttachmentContentIsNotSet;
    internal static string AutodiscoverDidNotReturnEwsUrl;
    internal static string RecurrencePatternMustHaveStartDate;
    internal static string OccurrenceIndexMustBeGreaterThanZero;
    internal static string ServiceResponseDoesNotContainXml;
    internal static string ItemIsOutOfDate;
    internal static string MinuteMustBeBetween0And59;
    internal static string NoSoapOrWsSecurityEndpointAvailable;
    internal static string ElementNotFound;
    internal static string IndexIsOutOfRange;
    internal static string PropertyIsReadOnly;
    internal static string AttachmentCreationFailed;
    internal static string DayOfMonthMustBeBetween1And31;
    internal static string ServiceRequestFailed;
    internal static string DelegateUserHasInvalidUserId;
    internal static string SearchFilterComparisonValueTypeIsNotSupported;
    internal static string ElementValueCannotBeSerialized;
    internal static string PropertyValueMustBeSpecifiedForRecurrencePattern;
    internal static string NonSummaryPropertyCannotBeUsed;
    internal static string HoldIdParameterIsNotSpecified;
    internal static string TransitionGroupNotFound;
    internal static string ObjectTypeNotSupported;
    internal static string InvalidTimeoutValue;
    internal static string AutodiscoverRedirectBlocked;
    internal static string PropertySetCannotBeModified;
    internal static string DayOfTheWeekMustBeSpecifiedForRecurrencePattern;
    internal static string ServiceObjectAlreadyHasId;
    internal static string MethodIncompatibleWithRequestVersion;
    internal static string OperationNotSupportedForPropertyDefinitionType;
    internal static string InvalidElementStringValue;
    internal static string CollectionIsEmpty;
    internal static string InvalidFrequencyValue;
    internal static string UnexpectedEndOfXmlDocument;
    internal static string FolderTypeNotCompatible;
    internal static string RequestIncompatibleWithRequestVersion;
    internal static string PropertyTypeIncompatibleWhenUpdatingCollection;
    internal static string ServerVersionNotSupported;
    internal static string DurationMustBeSpecifiedWhenScheduled;
    internal static string NoError;
    internal static string CannotUpdateNewUserConfiguration;
    internal static string ObjectTypeIncompatibleWithRequestVersion;
    internal static string NullStringArrayElementInvalid;
    internal static string HttpsIsRequired;
    internal static string MergedFreeBusyIntervalMustBeSmallerThanTimeWindow;
    internal static string SecondMustBeBetween0And59;
    internal static string AtLeastOneAttachmentCouldNotBeDeleted;
    internal static string IdAlreadyInList;
    internal static string BothSearchFilterAndQueryStringCannotBeSpecified;
    internal static string AdditionalPropertyIsNull;
    internal static string InvalidEmailAddress;
    internal static string MaximumRedirectionHopsExceeded;
    internal static string AutodiscoverCouldNotBeLocated;
    internal static string NoSubscriptionsOnConnection;
    internal static string PermissionLevelInvalidForNonCalendarFolder;
    internal static string InvalidAuthScheme;
    internal static string ValuePropertyNotLoaded;
    internal static string PropertyIncompatibleWithRequestVersion;
    internal static string OffsetMustBeGreaterThanZero;
    internal static string CreateItemsDoesNotAllowAttachments;
    internal static string PropertyDefinitionTypeMismatch;
    internal static string IntervalMustBeGreaterOrEqualToOne;
    internal static string CannotSetPermissionLevelToCustom;
    internal static string CannotAddRequestHeader;
    internal static string ArrayMustHaveAtLeastOneElement;
    internal static string MonthMustBeSpecifiedForRecurrencePattern;
    internal static string ValueOfTypeCannotBeConverted;
    internal static string ValueCannotBeConverted;
    internal static string ServerErrorAndStackTraceDetails;
    internal static string FolderPermissionLevelMustBeSet;
    internal static string AutodiscoverError;
    internal static string ArrayMustHaveSingleDimension;
    internal static string InvalidPropertyValueNotInRange;
    internal static string RegenerationPatternsOnlyValidForTasks;
    internal static string ItemAttachmentCannotBeUpdated;
    internal static string EqualityComparisonFilterIsInvalid;
    internal static string AutodiscoverServiceRequestRequiresDomainOrUrl;
    internal static string InvalidUser;
    internal static string AccountIsLocked;
    internal static string InvalidDomainName;
    internal static string TooFewServiceReponsesReturned;
    internal static string CannotSubscribeToStatusEvents;
    internal static string InvalidSortByPropertyForMailboxSearch;
    internal static string UnexpectedElementType;
    internal static string ValueMustBeGreaterThanZero;
    internal static string AttachmentCannotBeUpdated;
    internal static string CreateItemsDoesNotHandleExistingItems;
    internal static string MultipleContactPhotosInAttachment;
    internal static string InvalidRecurrenceRange;
    internal static string CannotSetBothImpersonatedAndPrivilegedUser;
    internal static string NewMessagesWithAttachmentsCannotBeSentDirectly;
    internal static string CannotCallDisconnectWithNoLiveConnection;
    internal static string IdPropertyMustBeSet;
    internal static string ValuePropertyNotAssigned;
    internal static string ZeroLengthArrayInvalid;
    internal static string HoldMailboxesParameterIsNotSpecified;
    internal static string CannotSaveNotNewUserConfiguration;
    internal static string ServiceObjectDoesNotHaveId;
    internal static string PropertyCollectionSizeMismatch;
    internal static string XsDurationCouldNotBeParsed;
    internal static string UnknownTimeZonePeriodTransitionType;
    internal static string UserPhotoSizeNotSpecified;
    internal static string UserPhotoNotSpecified;
    private static Strings();
}
