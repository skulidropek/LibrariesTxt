[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryExtensions : object {
    [ExtensionAttribute]
public static DistributedCacheEntryOptions SetAbsoluteExpiration(DistributedCacheEntryOptions options, TimeSpan relative);
    [ExtensionAttribute]
public static DistributedCacheEntryOptions SetAbsoluteExpiration(DistributedCacheEntryOptions options, DateTimeOffset absolute);
    [ExtensionAttribute]
public static DistributedCacheEntryOptions SetSlidingExpiration(DistributedCacheEntryOptions options, TimeSpan offset);
}
public class Microsoft.Extensions.Caching.Distributed.DistributedCacheEntryOptions : object {
    private Nullable`1<DateTimeOffset> _absoluteExpiration;
    private Nullable`1<TimeSpan> _absoluteExpirationRelativeToNow;
    private Nullable`1<TimeSpan> _slidingExpiration;
    public Nullable`1<DateTimeOffset> AbsoluteExpiration { get; public set; }
    public Nullable`1<TimeSpan> AbsoluteExpirationRelativeToNow { get; public set; }
    public Nullable`1<TimeSpan> SlidingExpiration { get; public set; }
    public Nullable`1<DateTimeOffset> get_AbsoluteExpiration();
    public void set_AbsoluteExpiration(Nullable`1<DateTimeOffset> value);
    public Nullable`1<TimeSpan> get_AbsoluteExpirationRelativeToNow();
    public void set_AbsoluteExpirationRelativeToNow(Nullable`1<TimeSpan> value);
    public Nullable`1<TimeSpan> get_SlidingExpiration();
    public void set_SlidingExpiration(Nullable`1<TimeSpan> value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions : object {
    [ExtensionAttribute]
public static void Set(IDistributedCache cache, string key, Byte[] value);
    [ExtensionAttribute]
public static Task SetAsync(IDistributedCache cache, string key, Byte[] value, CancellationToken token);
    [ExtensionAttribute]
public static void SetString(IDistributedCache cache, string key, string value);
    [ExtensionAttribute]
public static void SetString(IDistributedCache cache, string key, string value, DistributedCacheEntryOptions options);
    [ExtensionAttribute]
public static Task SetStringAsync(IDistributedCache cache, string key, string value, CancellationToken token);
    [ExtensionAttribute]
public static Task SetStringAsync(IDistributedCache cache, string key, string value, DistributedCacheEntryOptions options, CancellationToken token);
    [ExtensionAttribute]
public static string GetString(IDistributedCache cache, string key);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Caching.Distributed.DistributedCacheExtensions/<GetStringAsync>d__7")]
[ExtensionAttribute]
public static Task`1<string> GetStringAsync(IDistributedCache cache, string key, CancellationToken token);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Caching.Distributed.IDistributedCache {
    public abstract virtual Byte[] Get(string key);
    public abstract virtual Task`1<Byte[]> GetAsync(string key, CancellationToken token);
    public abstract virtual void Set(string key, Byte[] value, DistributedCacheEntryOptions options);
    public abstract virtual Task SetAsync(string key, Byte[] value, DistributedCacheEntryOptions options, CancellationToken token);
    public abstract virtual void Refresh(string key);
    public abstract virtual Task RefreshAsync(string key, CancellationToken token);
    public abstract virtual void Remove(string key);
    public abstract virtual Task RemoveAsync(string key, CancellationToken token);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Caching.Memory.CacheEntryExtensions : object {
    [ExtensionAttribute]
public static ICacheEntry SetPriority(ICacheEntry entry, CacheItemPriority priority);
    [ExtensionAttribute]
public static ICacheEntry AddExpirationToken(ICacheEntry entry, IChangeToken expirationToken);
    [ExtensionAttribute]
public static ICacheEntry SetAbsoluteExpiration(ICacheEntry entry, TimeSpan relative);
    [ExtensionAttribute]
public static ICacheEntry SetAbsoluteExpiration(ICacheEntry entry, DateTimeOffset absolute);
    [ExtensionAttribute]
public static ICacheEntry SetSlidingExpiration(ICacheEntry entry, TimeSpan offset);
    [ExtensionAttribute]
public static ICacheEntry RegisterPostEvictionCallback(ICacheEntry entry, PostEvictionDelegate callback);
    [ExtensionAttribute]
public static ICacheEntry RegisterPostEvictionCallback(ICacheEntry entry, PostEvictionDelegate callback, object state);
    [ExtensionAttribute]
public static ICacheEntry SetValue(ICacheEntry entry, object value);
    [ExtensionAttribute]
public static ICacheEntry SetSize(ICacheEntry entry, long size);
    [ExtensionAttribute]
public static ICacheEntry SetOptions(ICacheEntry entry, MemoryCacheEntryOptions options);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Caching.Memory.CacheExtensions : object {
    [ExtensionAttribute]
public static object Get(IMemoryCache cache, object key);
    [ExtensionAttribute]
public static TItem Get(IMemoryCache cache, object key);
    [ExtensionAttribute]
public static bool TryGetValue(IMemoryCache cache, object key, TItem& value);
    [ExtensionAttribute]
public static TItem Set(IMemoryCache cache, object key, TItem value);
    [ExtensionAttribute]
public static TItem Set(IMemoryCache cache, object key, TItem value, DateTimeOffset absoluteExpiration);
    [ExtensionAttribute]
public static TItem Set(IMemoryCache cache, object key, TItem value, TimeSpan absoluteExpirationRelativeToNow);
    [ExtensionAttribute]
public static TItem Set(IMemoryCache cache, object key, TItem value, IChangeToken expirationToken);
    [ExtensionAttribute]
public static TItem Set(IMemoryCache cache, object key, TItem value, MemoryCacheEntryOptions options);
    [ExtensionAttribute]
public static TItem GetOrCreate(IMemoryCache cache, object key, Func`2<ICacheEntry, TItem> factory);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Caching.Memory.CacheExtensions/<GetOrCreateAsync>d__9`1")]
[ExtensionAttribute]
public static Task`1<TItem> GetOrCreateAsync(IMemoryCache cache, object key, Func`2<ICacheEntry, Task`1<TItem>> factory);
}
public enum Microsoft.Extensions.Caching.Memory.CacheItemPriority : Enum {
    public int value__;
    public static CacheItemPriority Low;
    public static CacheItemPriority Normal;
    public static CacheItemPriority High;
    public static CacheItemPriority NeverRemove;
}
public enum Microsoft.Extensions.Caching.Memory.EvictionReason : Enum {
    public int value__;
    public static EvictionReason None;
    public static EvictionReason Removed;
    public static EvictionReason Replaced;
    public static EvictionReason Expired;
    public static EvictionReason TokenExpired;
    public static EvictionReason Capacity;
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Caching.Memory.ICacheEntry {
    public object Key { get; }
    [NullableAttribute("2")]
public object Value { get; public set; }
    public Nullable`1<DateTimeOffset> AbsoluteExpiration { get; public set; }
    public Nullable`1<TimeSpan> AbsoluteExpirationRelativeToNow { get; public set; }
    public Nullable`1<TimeSpan> SlidingExpiration { get; public set; }
    public IList`1<IChangeToken> ExpirationTokens { get; }
    public IList`1<PostEvictionCallbackRegistration> PostEvictionCallbacks { get; }
    public CacheItemPriority Priority { get; public set; }
    public Nullable`1<long> Size { get; public set; }
    public abstract virtual object get_Key();
    [NullableContextAttribute("2")]
public abstract virtual object get_Value();
    [NullableContextAttribute("2")]
public abstract virtual void set_Value(object value);
    public abstract virtual Nullable`1<DateTimeOffset> get_AbsoluteExpiration();
    public abstract virtual void set_AbsoluteExpiration(Nullable`1<DateTimeOffset> value);
    public abstract virtual Nullable`1<TimeSpan> get_AbsoluteExpirationRelativeToNow();
    public abstract virtual void set_AbsoluteExpirationRelativeToNow(Nullable`1<TimeSpan> value);
    public abstract virtual Nullable`1<TimeSpan> get_SlidingExpiration();
    public abstract virtual void set_SlidingExpiration(Nullable`1<TimeSpan> value);
    public abstract virtual IList`1<IChangeToken> get_ExpirationTokens();
    public abstract virtual IList`1<PostEvictionCallbackRegistration> get_PostEvictionCallbacks();
    public abstract virtual CacheItemPriority get_Priority();
    public abstract virtual void set_Priority(CacheItemPriority value);
    public abstract virtual Nullable`1<long> get_Size();
    public abstract virtual void set_Size(Nullable`1<long> value);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Caching.Memory.IMemoryCache {
    public abstract virtual bool TryGetValue(object key, Object& value);
    public abstract virtual ICacheEntry CreateEntry(object key);
    public abstract virtual void Remove(object key);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Caching.Memory.MemoryCacheEntryExtensions : object {
    [ExtensionAttribute]
public static MemoryCacheEntryOptions SetPriority(MemoryCacheEntryOptions options, CacheItemPriority priority);
    [ExtensionAttribute]
public static MemoryCacheEntryOptions SetSize(MemoryCacheEntryOptions options, long size);
    [ExtensionAttribute]
public static MemoryCacheEntryOptions AddExpirationToken(MemoryCacheEntryOptions options, IChangeToken expirationToken);
    [ExtensionAttribute]
public static MemoryCacheEntryOptions SetAbsoluteExpiration(MemoryCacheEntryOptions options, TimeSpan relative);
    [ExtensionAttribute]
public static MemoryCacheEntryOptions SetAbsoluteExpiration(MemoryCacheEntryOptions options, DateTimeOffset absolute);
    [ExtensionAttribute]
public static MemoryCacheEntryOptions SetSlidingExpiration(MemoryCacheEntryOptions options, TimeSpan offset);
    [ExtensionAttribute]
public static MemoryCacheEntryOptions RegisterPostEvictionCallback(MemoryCacheEntryOptions options, PostEvictionDelegate callback);
    [ExtensionAttribute]
public static MemoryCacheEntryOptions RegisterPostEvictionCallback(MemoryCacheEntryOptions options, PostEvictionDelegate callback, object state);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions : object {
    private Nullable`1<DateTimeOffset> _absoluteExpiration;
    private Nullable`1<TimeSpan> _absoluteExpirationRelativeToNow;
    private Nullable`1<TimeSpan> _slidingExpiration;
    private Nullable`1<long> _size;
    [CompilerGeneratedAttribute]
private IList`1<IChangeToken> <ExpirationTokens>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<PostEvictionCallbackRegistration> <PostEvictionCallbacks>k__BackingField;
    [CompilerGeneratedAttribute]
private CacheItemPriority <Priority>k__BackingField;
    public Nullable`1<DateTimeOffset> AbsoluteExpiration { get; public set; }
    public Nullable`1<TimeSpan> AbsoluteExpirationRelativeToNow { get; public set; }
    public Nullable`1<TimeSpan> SlidingExpiration { get; public set; }
    public IList`1<IChangeToken> ExpirationTokens { get; }
    public IList`1<PostEvictionCallbackRegistration> PostEvictionCallbacks { get; }
    public CacheItemPriority Priority { get; public set; }
    public Nullable`1<long> Size { get; public set; }
    public Nullable`1<DateTimeOffset> get_AbsoluteExpiration();
    public void set_AbsoluteExpiration(Nullable`1<DateTimeOffset> value);
    public Nullable`1<TimeSpan> get_AbsoluteExpirationRelativeToNow();
    public void set_AbsoluteExpirationRelativeToNow(Nullable`1<TimeSpan> value);
    public Nullable`1<TimeSpan> get_SlidingExpiration();
    public void set_SlidingExpiration(Nullable`1<TimeSpan> value);
    [CompilerGeneratedAttribute]
public IList`1<IChangeToken> get_ExpirationTokens();
    [CompilerGeneratedAttribute]
public IList`1<PostEvictionCallbackRegistration> get_PostEvictionCallbacks();
    [CompilerGeneratedAttribute]
public CacheItemPriority get_Priority();
    [CompilerGeneratedAttribute]
public void set_Priority(CacheItemPriority value);
    public Nullable`1<long> get_Size();
    public void set_Size(Nullable`1<long> value);
}
public class Microsoft.Extensions.Caching.Memory.MemoryCacheStatistics : object {
    [CompilerGeneratedAttribute]
private long <CurrentEntryCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <CurrentEstimatedSize>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalMisses>k__BackingField;
    [CompilerGeneratedAttribute]
private long <TotalHits>k__BackingField;
    public long CurrentEntryCount { get; public set; }
    public Nullable`1<long> CurrentEstimatedSize { get; public set; }
    public long TotalMisses { get; public set; }
    public long TotalHits { get; public set; }
    [CompilerGeneratedAttribute]
public long get_CurrentEntryCount();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CurrentEntryCount(long value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_CurrentEstimatedSize();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_CurrentEstimatedSize(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public long get_TotalMisses();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TotalMisses(long value);
    [CompilerGeneratedAttribute]
public long get_TotalHits();
    [CompilerGeneratedAttribute]
public Void modreq(System.Runtime.CompilerServices.IsExternalInit) set_TotalHits(long value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Caching.Memory.PostEvictionCallbackRegistration : object {
    [CompilerGeneratedAttribute]
private PostEvictionDelegate <EvictionCallback>k__BackingField;
    [CompilerGeneratedAttribute]
private object <State>k__BackingField;
    public PostEvictionDelegate EvictionCallback { get; public set; }
    public object State { get; public set; }
    [CompilerGeneratedAttribute]
public PostEvictionDelegate get_EvictionCallback();
    [CompilerGeneratedAttribute]
public void set_EvictionCallback(PostEvictionDelegate value);
    [CompilerGeneratedAttribute]
public object get_State();
    [CompilerGeneratedAttribute]
public void set_State(object value);
}
public class Microsoft.Extensions.Caching.Memory.PostEvictionDelegate : MulticastDelegate {
    public PostEvictionDelegate(object object, IntPtr method);
    [NullableContextAttribute("2")]
public virtual void Invoke(object key, object value, EvictionReason reason, object state);
    public virtual IAsyncResult BeginInvoke(object key, object value, EvictionReason reason, object state, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public interface Microsoft.Extensions.Internal.ISystemClock {
    public DateTimeOffset UtcNow { get; }
    public abstract virtual DateTimeOffset get_UtcNow();
}
public class Microsoft.Extensions.Internal.SystemClock : object {
    public DateTimeOffset UtcNow { get; }
    public sealed virtual DateTimeOffset get_UtcNow();
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[EditorBrowsableAttribute("1")]
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.LibraryImportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <LibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMarshalling <StringMarshalling>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StringMarshallingCustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetLastError>k__BackingField;
    public string LibraryName { get; }
    public string EntryPoint { get; public set; }
    public StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    public bool SetLastError { get; public set; }
    public LibraryImportAttribute(string libraryName);
    [CompilerGeneratedAttribute]
public string get_LibraryName();
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public StringMarshalling get_StringMarshalling();
    [CompilerGeneratedAttribute]
public void set_StringMarshalling(StringMarshalling value);
    [CompilerGeneratedAttribute]
public Type get_StringMarshallingCustomType();
    [CompilerGeneratedAttribute]
public void set_StringMarshallingCustomType(Type value);
    [CompilerGeneratedAttribute]
public bool get_SetLastError();
    [CompilerGeneratedAttribute]
public void set_SetLastError(bool value);
}
internal enum System.Runtime.InteropServices.StringMarshalling : Enum {
    public int value__;
    public static StringMarshalling Custom;
    public static StringMarshalling Utf8;
    public static StringMarshalling Utf16;
}
internal static class System.ThrowHelper : object {
    internal static void ThrowIfNull(object argument, string paramName);
    private static void Throw(string paramName);
}
