internal static class Microsoft.Extensions.Configuration.Binder.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string Error_CannotActivateAbstractOrInterface { get; }
    internal static string Error_FailedBinding { get; }
    internal static string Error_FailedToActivate { get; }
    internal static string Error_MissingParameterlessConstructor { get; }
    internal static string Error_UnsupportedMultidimensionalArray { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_Error_CannotActivateAbstractOrInterface();
    internal static string FormatError_CannotActivateAbstractOrInterface(object p0);
    internal static string get_Error_FailedBinding();
    internal static string FormatError_FailedBinding(object p0, object p1);
    internal static string get_Error_FailedToActivate();
    internal static string FormatError_FailedToActivate(object p0);
    internal static string get_Error_MissingParameterlessConstructor();
    internal static string FormatError_MissingParameterlessConstructor(object p0);
    internal static string get_Error_UnsupportedMultidimensionalArray();
    internal static string FormatError_UnsupportedMultidimensionalArray(object p0);
}
public class Microsoft.Extensions.Configuration.BinderOptions : object {
    [CompilerGeneratedAttribute]
private bool <BindNonPublicProperties>k__BackingField;
    public bool BindNonPublicProperties { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_BindNonPublicProperties();
    [CompilerGeneratedAttribute]
public void set_BindNonPublicProperties(bool value);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Configuration.ConfigurationBinder : object {
    [ExtensionAttribute]
public static T Get(IConfiguration configuration);
    [ExtensionAttribute]
public static T Get(IConfiguration configuration, Action`1<BinderOptions> configureOptions);
    [ExtensionAttribute]
public static object Get(IConfiguration configuration, Type type);
    [ExtensionAttribute]
public static object Get(IConfiguration configuration, Type type, Action`1<BinderOptions> configureOptions);
    [ExtensionAttribute]
public static void Bind(IConfiguration configuration, string key, object instance);
    [ExtensionAttribute]
public static void Bind(IConfiguration configuration, object instance);
    [ExtensionAttribute]
public static void Bind(IConfiguration configuration, object instance, Action`1<BinderOptions> configureOptions);
    [ExtensionAttribute]
public static T GetValue(IConfiguration configuration, string key);
    [ExtensionAttribute]
public static T GetValue(IConfiguration configuration, string key, T defaultValue);
    [ExtensionAttribute]
public static object GetValue(IConfiguration configuration, Type type, string key);
    [ExtensionAttribute]
public static object GetValue(IConfiguration configuration, Type type, string key, object defaultValue);
    [ExtensionAttribute]
private static void BindNonScalar(IConfiguration configuration, object instance, BinderOptions options);
    private static void BindProperty(PropertyInfo property, object instance, IConfiguration config, BinderOptions options);
    private static object BindToCollection(TypeInfo typeInfo, IConfiguration config, BinderOptions options);
    private static object AttemptBindToCollectionInterfaces(Type type, IConfiguration config, BinderOptions options);
    private static object BindInstance(Type type, object instance, IConfiguration config, BinderOptions options);
    private static object CreateInstance(Type type);
    private static void BindDictionary(object dictionary, Type dictionaryType, IConfiguration config, BinderOptions options);
    private static void BindCollection(object collection, Type collectionType, IConfiguration config, BinderOptions options);
    private static Array BindArray(Array source, IConfiguration config, BinderOptions options);
    private static bool TryConvertValue(Type type, string value, string path, Object& result, Exception& error);
    private static object ConvertValue(Type type, string value, string path);
    private static Type FindOpenGenericInterface(Type expected, Type actual);
    private static IEnumerable`1<PropertyInfo> GetAllProperties(TypeInfo type);
}
