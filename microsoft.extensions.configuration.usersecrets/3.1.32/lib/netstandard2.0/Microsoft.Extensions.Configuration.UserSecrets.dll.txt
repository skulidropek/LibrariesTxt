public class Microsoft.Extensions.Configuration.UserSecrets.PathHelper : object {
    internal static string SecretsFileName;
    public static string GetSecretsPathFromSecretsId(string userSecretsId);
}
internal static class Microsoft.Extensions.Configuration.UserSecrets.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string Common_StringNullOrEmpty { get; }
    internal static string Error_Invalid_Character_In_UserSecrets_Id { get; }
    internal static string Error_Missing_UserSecretsIdAttribute { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_Common_StringNullOrEmpty();
    internal static string get_Error_Invalid_Character_In_UserSecrets_Id();
    internal static string FormatError_Invalid_Character_In_UserSecrets_Id(object p0, object p1);
    internal static string get_Error_Missing_UserSecretsIdAttribute();
    internal static string FormatError_Missing_UserSecretsIdAttribute(object p0);
}
[AttributeUsageAttribute("1")]
public class Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <UserSecretsId>k__BackingField;
    public string UserSecretsId { get; }
    public UserSecretsIdAttribute(string userSecretId);
    [CompilerGeneratedAttribute]
public string get_UserSecretsId();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Configuration.UserSecretsConfigurationExtensions : object {
    [ExtensionAttribute]
public static IConfigurationBuilder AddUserSecrets(IConfigurationBuilder configuration);
    [ExtensionAttribute]
public static IConfigurationBuilder AddUserSecrets(IConfigurationBuilder configuration, bool optional);
    [ExtensionAttribute]
public static IConfigurationBuilder AddUserSecrets(IConfigurationBuilder configuration, bool optional, bool reloadOnChange);
    [ExtensionAttribute]
public static IConfigurationBuilder AddUserSecrets(IConfigurationBuilder configuration, Assembly assembly);
    [ExtensionAttribute]
public static IConfigurationBuilder AddUserSecrets(IConfigurationBuilder configuration, Assembly assembly, bool optional);
    [ExtensionAttribute]
public static IConfigurationBuilder AddUserSecrets(IConfigurationBuilder configuration, Assembly assembly, bool optional, bool reloadOnChange);
    [ExtensionAttribute]
public static IConfigurationBuilder AddUserSecrets(IConfigurationBuilder configuration, string userSecretsId);
    [ExtensionAttribute]
public static IConfigurationBuilder AddUserSecrets(IConfigurationBuilder configuration, string userSecretsId, bool reloadOnChange);
    private static IConfigurationBuilder AddSecretsFile(IConfigurationBuilder configuration, string secretPath, bool reloadOnChange);
}
