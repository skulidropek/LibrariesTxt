internal static class FxResources.Microsoft.Extensions.DependencyInjection.Abstractions.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Extensions.DependencyInjection.ActivatorUtilities : object {
    private static MethodInfo GetServiceInfo;
    private static ActivatorUtilities();
    public static object CreateInstance(IServiceProvider provider, Type instanceType, Object[] parameters);
    private static ConstructorInfoEx[] CreateConstructorInfoExs(Type type);
    public static ObjectFactory CreateFactory(Type instanceType, Type[] argumentTypes);
    public static ObjectFactory`1<T> CreateFactory(Type[] argumentTypes);
    private static void CreateFactoryInternal(Type instanceType, Type[] argumentTypes, ParameterExpression& provider, ParameterExpression& argumentArray, Expression& factoryExpressionBody);
    public static T CreateInstance(IServiceProvider provider, Object[] parameters);
    public static T GetServiceOrCreateInstance(IServiceProvider provider);
    public static object GetServiceOrCreateInstance(IServiceProvider provider, Type type);
    private static MethodInfo GetMethodInfo(Expression`1<T> expr);
    private static object GetService(IServiceProvider sp, Type type, Type requiredBy, bool hasDefaultValue, object key);
    [DoesNotReturnAttribute]
private static void ThrowHelperUnableToResolveService(Type type, Type requiredBy);
    private static BlockExpression BuildFactoryExpression(ConstructorInfo constructor, Nullable`1[] parameterMap, Expression serviceProvider, Expression factoryArgumentArray);
    private static void FindApplicableConstructor(Type instanceType, Type[] argumentTypes, ConstructorInfoEx[] constructors, ConstructorInfo& matchingConstructor, Nullable`1[]& matchingParameterMap);
    private static ConstructorInfoEx FindConstructorEx(ConstructorInfo constructorInfo, ConstructorInfoEx[] constructorExs);
    private static bool TryFindMatchingConstructor(Type instanceType, Type[] argumentTypes, ConstructorInfo& matchingConstructor, Nullable`1[]& parameterMap);
    private static bool TryFindPreferredConstructor(Type instanceType, Type[] argumentTypes, ConstructorInfoEx[] constructors, ConstructorInfo& matchingConstructor, Nullable`1[]& parameterMap);
    private static bool TryCreateParameterMap(ParameterInfo[] constructorParameters, Type[] argumentTypes, Nullable`1[]& parameterMap);
    private static void ThrowMultipleCtorsMarkedWithAttributeException();
    private static void ThrowMarkedCtorDoesNotTakeAllProvidedArguments();
    private static object GetKeyedService(IServiceProvider provider, Type type, object serviceKey);
    [CompilerGeneratedAttribute]
internal static void <CreateInstance>g__InitializeCtorArgValues|1_0(Object[]& ctorArgs, int length);
}
[AttributeUsageAttribute("32767")]
public class Microsoft.Extensions.DependencyInjection.ActivatorUtilitiesConstructorAttribute : Attribute {
}
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{ServiceProvider,nq}")]
public class Microsoft.Extensions.DependencyInjection.AsyncServiceScope : ValueType {
    private IServiceScope _serviceScope;
    [NullableAttribute("1")]
public IServiceProvider ServiceProvider { get; }
    [NullableContextAttribute("1")]
public AsyncServiceScope(IServiceScope serviceScope);
    [NullableContextAttribute("1")]
public sealed virtual IServiceProvider get_ServiceProvider();
    public sealed virtual void Dispose();
    public sealed virtual ValueTask DisposeAsync();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection Add(IServiceCollection collection, ServiceDescriptor descriptor);
    [ExtensionAttribute]
public static IServiceCollection Add(IServiceCollection collection, IEnumerable`1<ServiceDescriptor> descriptors);
    [ExtensionAttribute]
public static void TryAdd(IServiceCollection collection, ServiceDescriptor descriptor);
    [ExtensionAttribute]
public static void TryAdd(IServiceCollection collection, IEnumerable`1<ServiceDescriptor> descriptors);
    [ExtensionAttribute]
public static void TryAddTransient(IServiceCollection collection, Type service);
    [ExtensionAttribute]
public static void TryAddTransient(IServiceCollection collection, Type service, Type implementationType);
    [ExtensionAttribute]
public static void TryAddTransient(IServiceCollection collection, Type service, Func`2<IServiceProvider, object> implementationFactory);
    [ExtensionAttribute]
public static void TryAddTransient(IServiceCollection collection);
    [ExtensionAttribute]
public static void TryAddTransient(IServiceCollection collection);
    [ExtensionAttribute]
public static void TryAddTransient(IServiceCollection services, Func`2<IServiceProvider, TService> implementationFactory);
    [ExtensionAttribute]
public static void TryAddScoped(IServiceCollection collection, Type service);
    [ExtensionAttribute]
public static void TryAddScoped(IServiceCollection collection, Type service, Type implementationType);
    [ExtensionAttribute]
public static void TryAddScoped(IServiceCollection collection, Type service, Func`2<IServiceProvider, object> implementationFactory);
    [ExtensionAttribute]
public static void TryAddScoped(IServiceCollection collection);
    [ExtensionAttribute]
public static void TryAddScoped(IServiceCollection collection);
    [ExtensionAttribute]
public static void TryAddScoped(IServiceCollection services, Func`2<IServiceProvider, TService> implementationFactory);
    [ExtensionAttribute]
public static void TryAddSingleton(IServiceCollection collection, Type service);
    [ExtensionAttribute]
public static void TryAddSingleton(IServiceCollection collection, Type service, Type implementationType);
    [ExtensionAttribute]
public static void TryAddSingleton(IServiceCollection collection, Type service, Func`2<IServiceProvider, object> implementationFactory);
    [ExtensionAttribute]
public static void TryAddSingleton(IServiceCollection collection);
    [ExtensionAttribute]
public static void TryAddSingleton(IServiceCollection collection);
    [ExtensionAttribute]
public static void TryAddSingleton(IServiceCollection collection, TService instance);
    [ExtensionAttribute]
public static void TryAddSingleton(IServiceCollection services, Func`2<IServiceProvider, TService> implementationFactory);
    [ExtensionAttribute]
public static void TryAddEnumerable(IServiceCollection services, ServiceDescriptor descriptor);
    [ExtensionAttribute]
public static void TryAddEnumerable(IServiceCollection services, IEnumerable`1<ServiceDescriptor> descriptors);
    [ExtensionAttribute]
public static IServiceCollection Replace(IServiceCollection collection, ServiceDescriptor descriptor);
    [ExtensionAttribute]
public static IServiceCollection RemoveAll(IServiceCollection collection);
    [ExtensionAttribute]
public static IServiceCollection RemoveAll(IServiceCollection collection, Type serviceType);
    [ExtensionAttribute]
public static void TryAddKeyedTransient(IServiceCollection collection, Type service, object serviceKey);
    [ExtensionAttribute]
public static void TryAddKeyedTransient(IServiceCollection collection, Type service, object serviceKey, Type implementationType);
    [ExtensionAttribute]
public static void TryAddKeyedTransient(IServiceCollection collection, Type service, object serviceKey, Func`3<IServiceProvider, object, object> implementationFactory);
    [ExtensionAttribute]
public static void TryAddKeyedTransient(IServiceCollection collection, object serviceKey);
    [ExtensionAttribute]
public static void TryAddKeyedTransient(IServiceCollection collection, object serviceKey);
    [ExtensionAttribute]
public static void TryAddKeyedTransient(IServiceCollection services, object serviceKey, Func`3<IServiceProvider, object, TService> implementationFactory);
    [ExtensionAttribute]
public static void TryAddKeyedScoped(IServiceCollection collection, Type service, object serviceKey);
    [ExtensionAttribute]
public static void TryAddKeyedScoped(IServiceCollection collection, Type service, object serviceKey, Type implementationType);
    [ExtensionAttribute]
public static void TryAddKeyedScoped(IServiceCollection collection, Type service, object serviceKey, Func`3<IServiceProvider, object, object> implementationFactory);
    [ExtensionAttribute]
public static void TryAddKeyedScoped(IServiceCollection collection, object serviceKey);
    [ExtensionAttribute]
public static void TryAddKeyedScoped(IServiceCollection collection, object serviceKey);
    [ExtensionAttribute]
public static void TryAddKeyedScoped(IServiceCollection services, object serviceKey, Func`3<IServiceProvider, object, TService> implementationFactory);
    [ExtensionAttribute]
public static void TryAddKeyedSingleton(IServiceCollection collection, Type service, object serviceKey);
    [ExtensionAttribute]
public static void TryAddKeyedSingleton(IServiceCollection collection, Type service, object serviceKey, Type implementationType);
    [ExtensionAttribute]
public static void TryAddKeyedSingleton(IServiceCollection collection, Type service, object serviceKey, Func`3<IServiceProvider, object, object> implementationFactory);
    [ExtensionAttribute]
public static void TryAddKeyedSingleton(IServiceCollection collection, object serviceKey);
    [ExtensionAttribute]
public static void TryAddKeyedSingleton(IServiceCollection collection, object serviceKey);
    [ExtensionAttribute]
public static void TryAddKeyedSingleton(IServiceCollection collection, object serviceKey, TService instance);
    [ExtensionAttribute]
public static void TryAddKeyedSingleton(IServiceCollection services, object serviceKey, Func`3<IServiceProvider, object, TService> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection RemoveAllKeyed(IServiceCollection collection, object serviceKey);
    [ExtensionAttribute]
public static IServiceCollection RemoveAllKeyed(IServiceCollection collection, Type serviceType, object serviceKey);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
public class Microsoft.Extensions.DependencyInjection.FromKeyedServicesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private object <Key>k__BackingField;
    public object Key { get; }
    public FromKeyedServicesAttribute(object key);
    [CompilerGeneratedAttribute]
public object get_Key();
}
public interface Microsoft.Extensions.DependencyInjection.IKeyedServiceProvider {
    [NullableContextAttribute("2")]
public abstract virtual object GetKeyedService(Type serviceType, object serviceKey);
    [NullableContextAttribute("1")]
public abstract virtual object GetRequiredKeyedService(Type serviceType, object serviceKey);
}
public interface Microsoft.Extensions.DependencyInjection.IServiceCollection {
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.DependencyInjection.IServiceProviderFactory`1 {
    public abstract virtual TContainerBuilder CreateBuilder(IServiceCollection services);
    public abstract virtual IServiceProvider CreateServiceProvider(TContainerBuilder containerBuilder);
}
public interface Microsoft.Extensions.DependencyInjection.IServiceProviderIsKeyedService {
    [NullableContextAttribute("1")]
public abstract virtual bool IsKeyedService(Type serviceType, object serviceKey);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.DependencyInjection.IServiceProviderIsService {
    public abstract virtual bool IsService(Type serviceType);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.DependencyInjection.IServiceScope {
    public IServiceProvider ServiceProvider { get; }
    public abstract virtual IServiceProvider get_ServiceProvider();
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.DependencyInjection.IServiceScopeFactory {
    public abstract virtual IServiceScope CreateScope();
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.DependencyInjection.ISupportRequiredService {
    public abstract virtual object GetRequiredService(Type serviceType);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Extensions.DependencyInjection.KeyedService : object {
    [CompilerGeneratedAttribute]
private static object <AnyKey>k__BackingField;
    public static object AnyKey { get; }
    private static KeyedService();
    [CompilerGeneratedAttribute]
public static object get_AnyKey();
}
public class Microsoft.Extensions.DependencyInjection.ObjectFactory : MulticastDelegate {
    public ObjectFactory(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual object Invoke(IServiceProvider serviceProvider, Object[] arguments);
    public virtual IAsyncResult BeginInvoke(IServiceProvider serviceProvider, Object[] arguments, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public class Microsoft.Extensions.DependencyInjection.ObjectFactory`1 : MulticastDelegate {
    public ObjectFactory`1(object object, IntPtr method);
    [NullableContextAttribute("1")]
public virtual T Invoke(IServiceProvider serviceProvider, Object[] arguments);
    public virtual IAsyncResult BeginInvoke(IServiceProvider serviceProvider, Object[] arguments, AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("{DebuggerToString(),nq}")]
[DebuggerTypeProxyAttribute("Microsoft.Extensions.DependencyInjection.ServiceCollection/ServiceCollectionDebugView")]
public class Microsoft.Extensions.DependencyInjection.ServiceCollection : object {
    private List`1<ServiceDescriptor> _descriptors;
    private bool _isReadOnly;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ServiceDescriptor Item { get; public set; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ServiceDescriptor get_Item(int index);
    public sealed virtual void set_Item(int index, ServiceDescriptor value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ServiceDescriptor item);
    public sealed virtual void CopyTo(ServiceDescriptor[] array, int arrayIndex);
    public sealed virtual bool Remove(ServiceDescriptor item);
    public sealed virtual IEnumerator`1<ServiceDescriptor> GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<Microsoft.Extensions.DependencyInjection.ServiceDescriptor>.Add(ServiceDescriptor item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int IndexOf(ServiceDescriptor item);
    public sealed virtual void Insert(int index, ServiceDescriptor item);
    public sealed virtual void RemoveAt(int index);
    public void MakeReadOnly();
    private void CheckReadOnly();
    private static void ThrowReadOnlyException();
    private string DebuggerToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddTransient(IServiceCollection services, Type serviceType, Type implementationType);
    [ExtensionAttribute]
public static IServiceCollection AddTransient(IServiceCollection services, Type serviceType, Func`2<IServiceProvider, object> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddTransient(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddTransient(IServiceCollection services, Type serviceType);
    [ExtensionAttribute]
public static IServiceCollection AddTransient(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddTransient(IServiceCollection services, Func`2<IServiceProvider, TService> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddTransient(IServiceCollection services, Func`2<IServiceProvider, TImplementation> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddScoped(IServiceCollection services, Type serviceType, Type implementationType);
    [ExtensionAttribute]
public static IServiceCollection AddScoped(IServiceCollection services, Type serviceType, Func`2<IServiceProvider, object> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddScoped(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddScoped(IServiceCollection services, Type serviceType);
    [ExtensionAttribute]
public static IServiceCollection AddScoped(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddScoped(IServiceCollection services, Func`2<IServiceProvider, TService> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddScoped(IServiceCollection services, Func`2<IServiceProvider, TImplementation> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddSingleton(IServiceCollection services, Type serviceType, Type implementationType);
    [ExtensionAttribute]
public static IServiceCollection AddSingleton(IServiceCollection services, Type serviceType, Func`2<IServiceProvider, object> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddSingleton(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddSingleton(IServiceCollection services, Type serviceType);
    [ExtensionAttribute]
public static IServiceCollection AddSingleton(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddSingleton(IServiceCollection services, Func`2<IServiceProvider, TService> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddSingleton(IServiceCollection services, Func`2<IServiceProvider, TImplementation> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddSingleton(IServiceCollection services, Type serviceType, object implementationInstance);
    [ExtensionAttribute]
public static IServiceCollection AddSingleton(IServiceCollection services, TService implementationInstance);
    private static IServiceCollection Add(IServiceCollection collection, Type serviceType, Type implementationType, ServiceLifetime lifetime);
    private static IServiceCollection Add(IServiceCollection collection, Type serviceType, Func`2<IServiceProvider, object> implementationFactory, ServiceLifetime lifetime);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedTransient(IServiceCollection services, Type serviceType, object serviceKey, Type implementationType);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedTransient(IServiceCollection services, Type serviceType, object serviceKey, Func`3<IServiceProvider, object, object> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedTransient(IServiceCollection services, object serviceKey);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedTransient(IServiceCollection services, Type serviceType, object serviceKey);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedTransient(IServiceCollection services, object serviceKey);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedTransient(IServiceCollection services, object serviceKey, Func`3<IServiceProvider, object, TService> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedTransient(IServiceCollection services, object serviceKey, Func`3<IServiceProvider, object, TImplementation> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedScoped(IServiceCollection services, Type serviceType, object serviceKey, Type implementationType);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedScoped(IServiceCollection services, Type serviceType, object serviceKey, Func`3<IServiceProvider, object, object> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedScoped(IServiceCollection services, object serviceKey);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedScoped(IServiceCollection services, Type serviceType, object serviceKey);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedScoped(IServiceCollection services, object serviceKey);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedScoped(IServiceCollection services, object serviceKey, Func`3<IServiceProvider, object, TService> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedScoped(IServiceCollection services, object serviceKey, Func`3<IServiceProvider, object, TImplementation> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedSingleton(IServiceCollection services, Type serviceType, object serviceKey, Type implementationType);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedSingleton(IServiceCollection services, Type serviceType, object serviceKey, Func`3<IServiceProvider, object, object> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedSingleton(IServiceCollection services, object serviceKey);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedSingleton(IServiceCollection services, Type serviceType, object serviceKey);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedSingleton(IServiceCollection services, object serviceKey);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedSingleton(IServiceCollection services, object serviceKey, Func`3<IServiceProvider, object, TService> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedSingleton(IServiceCollection services, object serviceKey, Func`3<IServiceProvider, object, TImplementation> implementationFactory);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedSingleton(IServiceCollection services, Type serviceType, object serviceKey, object implementationInstance);
    [ExtensionAttribute]
public static IServiceCollection AddKeyedSingleton(IServiceCollection services, object serviceKey, TService implementationInstance);
    private static IServiceCollection AddKeyed(IServiceCollection collection, Type serviceType, object serviceKey, Type implementationType, ServiceLifetime lifetime);
    private static IServiceCollection AddKeyed(IServiceCollection collection, Type serviceType, object serviceKey, Func`3<IServiceProvider, object, object> implementationFactory, ServiceLifetime lifetime);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerToString(),nq}")]
public class Microsoft.Extensions.DependencyInjection.ServiceDescriptor : object {
    [CompilerGeneratedAttribute]
private ServiceLifetime <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ServiceKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    [DynamicallyAccessedMembersAttribute("3")]
private Type _implementationType;
    private object _implementationInstance;
    private object _implementationFactory;
    public ServiceLifetime Lifetime { get; }
    [NullableAttribute("2")]
public object ServiceKey { get; }
    public Type ServiceType { get; }
    [NullableAttribute("2")]
[DynamicallyAccessedMembersAttribute("3")]
public Type ImplementationType { get; }
    [NullableAttribute("2")]
[DynamicallyAccessedMembersAttribute("3")]
public Type KeyedImplementationType { get; }
    [NullableAttribute("2")]
public object ImplementationInstance { get; }
    [NullableAttribute("2")]
public object KeyedImplementationInstance { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`2<IServiceProvider, object> ImplementationFactory { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public Func`3<IServiceProvider, object, object> KeyedImplementationFactory { get; }
    public bool IsKeyedService { get; }
    public ServiceDescriptor(Type serviceType, Type implementationType, ServiceLifetime lifetime);
    public ServiceDescriptor(Type serviceType, object serviceKey, Type implementationType, ServiceLifetime lifetime);
    public ServiceDescriptor(Type serviceType, object instance);
    public ServiceDescriptor(Type serviceType, object serviceKey, object instance);
    public ServiceDescriptor(Type serviceType, Func`2<IServiceProvider, object> factory, ServiceLifetime lifetime);
    public ServiceDescriptor(Type serviceType, object serviceKey, Func`3<IServiceProvider, object, object> factory, ServiceLifetime lifetime);
    private ServiceDescriptor(Type serviceType, object serviceKey, ServiceLifetime lifetime);
    [CompilerGeneratedAttribute]
public ServiceLifetime get_Lifetime();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_ServiceKey();
    [CompilerGeneratedAttribute]
public Type get_ServiceType();
    [NullableContextAttribute("2")]
public Type get_ImplementationType();
    [NullableContextAttribute("2")]
public Type get_KeyedImplementationType();
    [NullableContextAttribute("2")]
public object get_ImplementationInstance();
    [NullableContextAttribute("2")]
public object get_KeyedImplementationInstance();
    public Func`2<IServiceProvider, object> get_ImplementationFactory();
    public Func`3<IServiceProvider, object, object> get_KeyedImplementationFactory();
    public bool get_IsKeyedService();
    public virtual string ToString();
    internal Type GetImplementationType();
    public static ServiceDescriptor Transient();
    public static ServiceDescriptor KeyedTransient(object serviceKey);
    public static ServiceDescriptor Transient(Type service, Type implementationType);
    public static ServiceDescriptor KeyedTransient(Type service, object serviceKey, Type implementationType);
    public static ServiceDescriptor Transient(Func`2<IServiceProvider, TImplementation> implementationFactory);
    public static ServiceDescriptor KeyedTransient(object serviceKey, Func`3<IServiceProvider, object, TImplementation> implementationFactory);
    public static ServiceDescriptor Transient(Func`2<IServiceProvider, TService> implementationFactory);
    public static ServiceDescriptor KeyedTransient(object serviceKey, Func`3<IServiceProvider, object, TService> implementationFactory);
    public static ServiceDescriptor Transient(Type service, Func`2<IServiceProvider, object> implementationFactory);
    public static ServiceDescriptor KeyedTransient(Type service, object serviceKey, Func`3<IServiceProvider, object, object> implementationFactory);
    public static ServiceDescriptor Scoped();
    public static ServiceDescriptor KeyedScoped(object serviceKey);
    public static ServiceDescriptor Scoped(Type service, Type implementationType);
    public static ServiceDescriptor KeyedScoped(Type service, object serviceKey, Type implementationType);
    public static ServiceDescriptor Scoped(Func`2<IServiceProvider, TImplementation> implementationFactory);
    public static ServiceDescriptor KeyedScoped(object serviceKey, Func`3<IServiceProvider, object, TImplementation> implementationFactory);
    public static ServiceDescriptor Scoped(Func`2<IServiceProvider, TService> implementationFactory);
    public static ServiceDescriptor KeyedScoped(object serviceKey, Func`3<IServiceProvider, object, TService> implementationFactory);
    public static ServiceDescriptor Scoped(Type service, Func`2<IServiceProvider, object> implementationFactory);
    public static ServiceDescriptor KeyedScoped(Type service, object serviceKey, Func`3<IServiceProvider, object, object> implementationFactory);
    public static ServiceDescriptor Singleton();
    public static ServiceDescriptor KeyedSingleton(object serviceKey);
    public static ServiceDescriptor Singleton(Type service, Type implementationType);
    public static ServiceDescriptor KeyedSingleton(Type service, object serviceKey, Type implementationType);
    public static ServiceDescriptor Singleton(Func`2<IServiceProvider, TImplementation> implementationFactory);
    public static ServiceDescriptor KeyedSingleton(object serviceKey, Func`3<IServiceProvider, object, TImplementation> implementationFactory);
    public static ServiceDescriptor Singleton(Func`2<IServiceProvider, TService> implementationFactory);
    public static ServiceDescriptor KeyedSingleton(object serviceKey, Func`3<IServiceProvider, object, TService> implementationFactory);
    public static ServiceDescriptor Singleton(Type serviceType, Func`2<IServiceProvider, object> implementationFactory);
    public static ServiceDescriptor KeyedSingleton(Type serviceType, object serviceKey, Func`3<IServiceProvider, object, object> implementationFactory);
    public static ServiceDescriptor Singleton(TService implementationInstance);
    public static ServiceDescriptor KeyedSingleton(object serviceKey, TService implementationInstance);
    public static ServiceDescriptor Singleton(Type serviceType, object implementationInstance);
    public static ServiceDescriptor KeyedSingleton(Type serviceType, object serviceKey, object implementationInstance);
    private static ServiceDescriptor DescribeKeyed(object serviceKey, ServiceLifetime lifetime);
    public static ServiceDescriptor Describe(Type serviceType, Type implementationType, ServiceLifetime lifetime);
    public static ServiceDescriptor DescribeKeyed(Type serviceType, object serviceKey, Type implementationType, ServiceLifetime lifetime);
    public static ServiceDescriptor Describe(Type serviceType, Func`2<IServiceProvider, object> implementationFactory, ServiceLifetime lifetime);
    public static ServiceDescriptor DescribeKeyed(Type serviceType, object serviceKey, Func`3<IServiceProvider, object, object> implementationFactory, ServiceLifetime lifetime);
    private string DebuggerToString();
    private static void ThrowKeyedDescriptor();
    private static void ThrowNonKeyedDescriptor();
}
[AttributeUsageAttribute("2048")]
public class Microsoft.Extensions.DependencyInjection.ServiceKeyAttribute : Attribute {
}
public enum Microsoft.Extensions.DependencyInjection.ServiceLifetime : Enum {
    public int value__;
    public static ServiceLifetime Singleton;
    public static ServiceLifetime Scoped;
    public static ServiceLifetime Transient;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceProviderKeyedServiceExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T GetKeyedService(IServiceProvider provider, object serviceKey);
    [ExtensionAttribute]
public static object GetRequiredKeyedService(IServiceProvider provider, Type serviceType, object serviceKey);
    [ExtensionAttribute]
public static T GetRequiredKeyedService(IServiceProvider provider, object serviceKey);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetKeyedServices(IServiceProvider provider, object serviceKey);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("The native code for an IEnumerable<serviceType> might not be available at runtime.")]
public static IEnumerable`1<object> GetKeyedServices(IServiceProvider provider, Type serviceType, object serviceKey);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static T GetService(IServiceProvider provider);
    [ExtensionAttribute]
public static object GetRequiredService(IServiceProvider provider, Type serviceType);
    [ExtensionAttribute]
public static T GetRequiredService(IServiceProvider provider);
    [ExtensionAttribute]
public static IEnumerable`1<T> GetServices(IServiceProvider provider);
    [ExtensionAttribute]
[RequiresDynamicCodeAttribute("The native code for an IEnumerable<serviceType> might not be available at runtime.")]
public static IEnumerable`1<object> GetServices(IServiceProvider provider, Type serviceType);
    [ExtensionAttribute]
public static IServiceScope CreateScope(IServiceProvider provider);
    [ExtensionAttribute]
public static AsyncServiceScope CreateAsyncScope(IServiceProvider provider);
    [ExtensionAttribute]
public static AsyncServiceScope CreateAsyncScope(IServiceScopeFactory serviceScopeFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.Extensions.Internal.ParameterDefaultValue : object {
    public static bool TryGetDefaultValue(ParameterInfo parameter, Object& defaultValue);
    public static bool CheckHasDefaultValue(ParameterInfo parameter, Boolean& tryToGetDefaultValue);
    [CompilerGeneratedAttribute]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2067:UnrecognizedReflectionPattern")]
internal static object <TryGetDefaultValue>g__CreateValueType|0_0(Type t);
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("28108")]
internal class System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute : Attribute {
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public DynamicallyAccessedMembersAttribute(DynamicallyAccessedMemberTypes memberTypes);
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
}
[FlagsAttribute]
internal enum System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes : Enum {
    public int value__;
    public static DynamicallyAccessedMemberTypes None;
    public static DynamicallyAccessedMemberTypes PublicParameterlessConstructor;
    public static DynamicallyAccessedMemberTypes PublicConstructors;
    public static DynamicallyAccessedMemberTypes NonPublicConstructors;
    public static DynamicallyAccessedMemberTypes PublicMethods;
    public static DynamicallyAccessedMemberTypes NonPublicMethods;
    public static DynamicallyAccessedMemberTypes PublicFields;
    public static DynamicallyAccessedMemberTypes NonPublicFields;
    public static DynamicallyAccessedMemberTypes PublicNestedTypes;
    public static DynamicallyAccessedMemberTypes NonPublicNestedTypes;
    public static DynamicallyAccessedMemberTypes PublicProperties;
    public static DynamicallyAccessedMemberTypes NonPublicProperties;
    public static DynamicallyAccessedMemberTypes PublicEvents;
    public static DynamicallyAccessedMemberTypes NonPublicEvents;
    public static DynamicallyAccessedMemberTypes Interfaces;
    public static DynamicallyAccessedMemberTypes All;
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("100")]
internal class System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    [NullableAttribute("2")]
public string Url { get; public set; }
    public RequiresDynamicCodeAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_Url();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_Url(string value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
internal class System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Justification>k__BackingField;
    [NullableAttribute("1")]
public string Category { get; }
    [NullableAttribute("1")]
public string CheckId { get; }
    public string Scope { get; public set; }
    public string Target { get; public set; }
    public string MessageId { get; public set; }
    public string Justification { get; public set; }
    [NullableContextAttribute("1")]
public UnconditionalSuppressMessageAttribute(string category, string checkId);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Category();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_CheckId();
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(string value);
    [CompilerGeneratedAttribute]
public string get_Justification();
    [CompilerGeneratedAttribute]
public void set_Justification(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.LibraryImportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <LibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMarshalling <StringMarshalling>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StringMarshallingCustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetLastError>k__BackingField;
    [NullableAttribute("1")]
public string LibraryName { get; }
    public string EntryPoint { get; public set; }
    public StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    public bool SetLastError { get; public set; }
    [NullableContextAttribute("1")]
public LibraryImportAttribute(string libraryName);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_LibraryName();
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public StringMarshalling get_StringMarshalling();
    [CompilerGeneratedAttribute]
public void set_StringMarshalling(StringMarshalling value);
    [CompilerGeneratedAttribute]
public Type get_StringMarshallingCustomType();
    [CompilerGeneratedAttribute]
public void set_StringMarshallingCustomType(Type value);
    [CompilerGeneratedAttribute]
public bool get_SetLastError();
    [CompilerGeneratedAttribute]
public void set_SetLastError(bool value);
}
internal enum System.Runtime.InteropServices.StringMarshalling : Enum {
    public int value__;
    public static StringMarshalling Custom;
    public static StringMarshalling Utf8;
    public static StringMarshalling Utf16;
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string AmbiguousConstructorMatch { get; }
    internal static string CannotResolveService { get; }
    internal static string NoConstructorMatch { get; }
    internal static string NoServiceRegistered { get; }
    internal static string ServiceCollectionReadOnly { get; }
    internal static string TryAddIndistinguishableTypeToEnumerable { get; }
    internal static string MultipleCtorsMarkedWithAttribute { get; }
    internal static string MarkedCtorMissingArgumentTypes { get; }
    internal static string CannotCreateAbstractClasses { get; }
    internal static string MultipleCtorsFoundWithBestLength { get; }
    internal static string UnableToResolveService { get; }
    internal static string CtorNotLocated { get; }
    internal static string MultipleCtorsFound { get; }
    internal static string KeyedServicesNotSupported { get; }
    internal static string KeyedDescriptorMisuse { get; }
    internal static string NonKeyedDescriptorMisuse { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, object p1);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(string resourceFormat, object p1, object p2, object p3);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, Object[] args);
    [NullableContextAttribute("1")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    [NullableContextAttribute("1")]
internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_AmbiguousConstructorMatch();
    internal static string get_CannotResolveService();
    internal static string get_NoConstructorMatch();
    internal static string get_NoServiceRegistered();
    internal static string get_ServiceCollectionReadOnly();
    internal static string get_TryAddIndistinguishableTypeToEnumerable();
    internal static string get_MultipleCtorsMarkedWithAttribute();
    internal static string get_MarkedCtorMissingArgumentTypes();
    internal static string get_CannotCreateAbstractClasses();
    internal static string get_MultipleCtorsFoundWithBestLength();
    internal static string get_UnableToResolveService();
    internal static string get_CtorNotLocated();
    internal static string get_MultipleCtorsFound();
    internal static string get_KeyedServicesNotSupported();
    internal static string get_KeyedDescriptorMisuse();
    internal static string get_NonKeyedDescriptorMisuse();
}
internal static class System.ThrowHelper : object {
    [NullableContextAttribute("2")]
internal static void ThrowIfNull(object argument, string paramName);
    private static void Throw(string paramName);
    [NullableContextAttribute("1")]
public static string IfNullOrWhitespace(string argument, string paramName);
}
