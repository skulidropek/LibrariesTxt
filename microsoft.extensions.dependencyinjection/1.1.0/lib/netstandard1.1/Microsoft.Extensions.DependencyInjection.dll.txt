public class Microsoft.Extensions.DependencyInjection.DefaultServiceProviderFactory : object {
    public sealed virtual IServiceCollection CreateBuilder(IServiceCollection services);
    public sealed virtual IServiceProvider CreateServiceProvider(IServiceCollection containerBuilder);
}
internal static class Microsoft.Extensions.DependencyInjection.Resources : object {
    private static ResourceManager _resourceManager;
    internal static string AmbigiousConstructorException { get; }
    internal static string CannotResolveService { get; }
    internal static string CircularDependencyException { get; }
    internal static string UnableToActivateTypeException { get; }
    internal static string OpenGenericServiceRequiresOpenGenericImplementation { get; }
    internal static string TypeCannotBeActivated { get; }
    internal static string NoConstructorMatch { get; }
    internal static string ScopedInSingletonException { get; }
    internal static string ScopedResolvedFromRootException { get; }
    internal static string DirectScopedResolvedFromRootException { get; }
    private static Resources();
    internal static string get_AmbigiousConstructorException();
    internal static string FormatAmbigiousConstructorException(object p0);
    internal static string get_CannotResolveService();
    internal static string FormatCannotResolveService(object p0, object p1);
    internal static string get_CircularDependencyException();
    internal static string FormatCircularDependencyException(object p0);
    internal static string get_UnableToActivateTypeException();
    internal static string FormatUnableToActivateTypeException(object p0);
    internal static string get_OpenGenericServiceRequiresOpenGenericImplementation();
    internal static string FormatOpenGenericServiceRequiresOpenGenericImplementation(object p0);
    internal static string get_TypeCannotBeActivated();
    internal static string FormatTypeCannotBeActivated(object p0, object p1);
    internal static string get_NoConstructorMatch();
    internal static string FormatNoConstructorMatch(object p0);
    internal static string get_ScopedInSingletonException();
    internal static string FormatScopedInSingletonException(object p0, object p1, object p2, object p3);
    internal static string get_ScopedResolvedFromRootException();
    internal static string FormatScopedResolvedFromRootException(object p0, object p1, object p2);
    internal static string get_DirectScopedResolvedFromRootException();
    internal static string FormatDirectScopedResolvedFromRootException(object p0, object p1);
    private static string GetString(string name, String[] formatterNames);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Extensions.DependencyInjection.ServiceCollection : object {
    private List`1<ServiceDescriptor> _descriptors;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ServiceDescriptor Item { get; public set; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ServiceDescriptor get_Item(int index);
    public sealed virtual void set_Item(int index, ServiceDescriptor value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ServiceDescriptor item);
    public sealed virtual void CopyTo(ServiceDescriptor[] array, int arrayIndex);
    public sealed virtual bool Remove(ServiceDescriptor item);
    public sealed virtual IEnumerator`1<ServiceDescriptor> GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<Microsoft.Extensions.DependencyInjection.ServiceDescriptor>.Add(ServiceDescriptor item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int IndexOf(ServiceDescriptor item);
    public sealed virtual void Insert(int index, ServiceDescriptor item);
    public sealed virtual void RemoveAt(int index);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions : object {
    [ExtensionAttribute]
public static IServiceProvider BuildServiceProvider(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceProvider BuildServiceProvider(IServiceCollection services, bool validateScopes);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteExpressionBuilder : CallSiteVisitor`2<ParameterExpression, Expression> {
    private static MethodInfo CaptureDisposableMethodInfo;
    private static MethodInfo TryGetValueMethodInfo;
    private static MethodInfo AddMethodInfo;
    private static MethodInfo MonitorEnterMethodInfo;
    private static MethodInfo MonitorExitMethodInfo;
    private static MethodInfo CallSiteRuntimeResolverResolve;
    private static ParameterExpression ProviderParameter;
    private static ParameterExpression ResolvedServices;
    private static BinaryExpression ResolvedServicesVariableAssignment;
    private static ParameterExpression CaptureDisposableParameter;
    private static LambdaExpression CaptureDisposable;
    private CallSiteRuntimeResolver _runtimeResolver;
    private bool _requiresResolvedServices;
    public CallSiteExpressionBuilder(CallSiteRuntimeResolver runtimeResolver);
    private static CallSiteExpressionBuilder();
    public Func`2<ServiceProvider, object> Build(IServiceCallSite callSite);
    private Expression`1<Func`2<ServiceProvider, object>> BuildExpression(IServiceCallSite callSite);
    protected virtual Expression VisitSingleton(SingletonCallSite singletonCallSite, ParameterExpression provider);
    protected virtual Expression VisitConstant(ConstantCallSite constantCallSite, ParameterExpression provider);
    protected virtual Expression VisitCreateInstance(CreateInstanceCallSite createInstanceCallSite, ParameterExpression provider);
    protected virtual Expression VisitInstanceService(InstanceService instanceCallSite, ParameterExpression provider);
    protected virtual Expression VisitServiceProviderService(ServiceProviderService serviceProviderService, ParameterExpression provider);
    protected virtual Expression VisitEmptyIEnumerable(EmptyIEnumerableCallSite emptyIEnumerableCallSite, ParameterExpression provider);
    protected virtual Expression VisitServiceScopeService(ServiceScopeService serviceScopeService, ParameterExpression provider);
    protected virtual Expression VisitFactoryService(FactoryService factoryService, ParameterExpression provider);
    protected virtual Expression VisitClosedIEnumerable(ClosedIEnumerableCallSite callSite, ParameterExpression provider);
    protected virtual Expression VisitTransient(TransientCallSite callSite, ParameterExpression provider);
    protected virtual Expression VisitConstructor(ConstructorCallSite callSite, ParameterExpression provider);
    protected virtual Expression VisitScoped(ScopedCallSite callSite, ParameterExpression provider);
    private static MethodInfo GetMethodInfo(Expression`1<T> expr);
    public Expression GetCaptureDisposable(ParameterExpression provider);
    public Expression GetResolvedServices(ParameterExpression provider);
    private static Expression Lock(Expression body, Expression syncVariable);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver : CallSiteVisitor`2<ServiceProvider, object> {
    public object Resolve(IServiceCallSite callSite, ServiceProvider provider);
    protected virtual object VisitTransient(TransientCallSite transientCallSite, ServiceProvider provider);
    protected virtual object VisitConstructor(ConstructorCallSite constructorCallSite, ServiceProvider provider);
    protected virtual object VisitSingleton(SingletonCallSite singletonCallSite, ServiceProvider provider);
    protected virtual object VisitScoped(ScopedCallSite scopedCallSite, ServiceProvider provider);
    protected virtual object VisitConstant(ConstantCallSite constantCallSite, ServiceProvider provider);
    protected virtual object VisitCreateInstance(CreateInstanceCallSite createInstanceCallSite, ServiceProvider provider);
    protected virtual object VisitInstanceService(InstanceService instanceCallSite, ServiceProvider provider);
    protected virtual object VisitServiceProviderService(ServiceProviderService serviceProviderService, ServiceProvider provider);
    protected virtual object VisitEmptyIEnumerable(EmptyIEnumerableCallSite emptyIEnumerableCallSite, ServiceProvider provider);
    protected virtual object VisitServiceScopeService(ServiceScopeService serviceScopeService, ServiceProvider provider);
    protected virtual object VisitClosedIEnumerable(ClosedIEnumerableCallSite closedIEnumerableCallSite, ServiceProvider provider);
    protected virtual object VisitFactoryService(FactoryService factoryService, ServiceProvider provider);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteValidator : CallSiteVisitor`2<CallSiteValidatorState, Type> {
    private Dictionary`2<Type, Type> _scopedServices;
    public void ValidateCallSite(Type serviceType, IServiceCallSite callSite);
    public void ValidateResolution(Type serviceType, ServiceProvider serviceProvider);
    protected virtual Type VisitTransient(TransientCallSite transientCallSite, CallSiteValidatorState state);
    protected virtual Type VisitConstructor(ConstructorCallSite constructorCallSite, CallSiteValidatorState state);
    protected virtual Type VisitClosedIEnumerable(ClosedIEnumerableCallSite closedIEnumerableCallSite, CallSiteValidatorState state);
    protected virtual Type VisitSingleton(SingletonCallSite singletonCallSite, CallSiteValidatorState state);
    protected virtual Type VisitScoped(ScopedCallSite scopedCallSite, CallSiteValidatorState state);
    protected virtual Type VisitConstant(ConstantCallSite constantCallSite, CallSiteValidatorState state);
    protected virtual Type VisitCreateInstance(CreateInstanceCallSite createInstanceCallSite, CallSiteValidatorState state);
    protected virtual Type VisitInstanceService(InstanceService instanceCallSite, CallSiteValidatorState state);
    protected virtual Type VisitServiceProviderService(ServiceProviderService serviceProviderService, CallSiteValidatorState state);
    protected virtual Type VisitEmptyIEnumerable(EmptyIEnumerableCallSite emptyIEnumerableCallSite, CallSiteValidatorState state);
    protected virtual Type VisitServiceScopeService(ServiceScopeService serviceScopeService, CallSiteValidatorState state);
    protected virtual Type VisitFactoryService(FactoryService factoryService, CallSiteValidatorState state);
}
internal abstract class Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2 : object {
    protected virtual TResult VisitCallSite(IServiceCallSite callSite, TArgument argument);
    protected abstract virtual TResult VisitTransient(TransientCallSite transientCallSite, TArgument argument);
    protected abstract virtual TResult VisitConstructor(ConstructorCallSite constructorCallSite, TArgument argument);
    protected abstract virtual TResult VisitSingleton(SingletonCallSite singletonCallSite, TArgument argument);
    protected abstract virtual TResult VisitScoped(ScopedCallSite scopedCallSite, TArgument argument);
    protected abstract virtual TResult VisitConstant(ConstantCallSite constantCallSite, TArgument argument);
    protected abstract virtual TResult VisitCreateInstance(CreateInstanceCallSite createInstanceCallSite, TArgument argument);
    protected abstract virtual TResult VisitInstanceService(InstanceService instanceCallSite, TArgument argument);
    protected abstract virtual TResult VisitServiceProviderService(ServiceProviderService serviceProviderService, TArgument argument);
    protected abstract virtual TResult VisitEmptyIEnumerable(EmptyIEnumerableCallSite emptyIEnumerableCallSite, TArgument argument);
    protected abstract virtual TResult VisitServiceScopeService(ServiceScopeService serviceScopeService, TArgument argument);
    protected abstract virtual TResult VisitClosedIEnumerable(ClosedIEnumerableCallSite closedIEnumerableCallSite, TArgument argument);
    protected abstract virtual TResult VisitFactoryService(FactoryService factoryService, TArgument argument);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ClosedIEnumerableCallSite : object {
    [CompilerGeneratedAttribute]
private Type <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceCallSite[] <ServiceCallSites>k__BackingField;
    internal Type ItemType { get; }
    internal IServiceCallSite[] ServiceCallSites { get; }
    public ClosedIEnumerableCallSite(Type itemType, IServiceCallSite[] serviceCallSites);
    [CompilerGeneratedAttribute]
internal Type get_ItemType();
    [CompilerGeneratedAttribute]
internal IServiceCallSite[] get_ServiceCallSites();
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ClosedIEnumerableService : object {
    private Type _itemType;
    private ServiceEntry _serviceEntry;
    [CompilerGeneratedAttribute]
private IService <Next>k__BackingField;
    public IService Next { get; public set; }
    public ServiceLifetime Lifetime { get; }
    public Type ServiceType { get; }
    public ClosedIEnumerableService(Type itemType, ServiceEntry entry);
    [CompilerGeneratedAttribute]
public sealed virtual IService get_Next();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Next(IService value);
    public sealed virtual ServiceLifetime get_Lifetime();
    public sealed virtual Type get_ServiceType();
    public sealed virtual IServiceCallSite CreateCallSite(ServiceProvider provider, ISet`1<Type> callSiteChain);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstantCallSite : object {
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    internal object DefaultValue { get; }
    public ConstantCallSite(object defaultValue);
    [CompilerGeneratedAttribute]
internal object get_DefaultValue();
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite : object {
    [CompilerGeneratedAttribute]
private ConstructorInfo <ConstructorInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceCallSite[] <ParameterCallSites>k__BackingField;
    internal ConstructorInfo ConstructorInfo { get; }
    internal IServiceCallSite[] ParameterCallSites { get; }
    public ConstructorCallSite(ConstructorInfo constructorInfo, IServiceCallSite[] parameterCallSites);
    [CompilerGeneratedAttribute]
internal ConstructorInfo get_ConstructorInfo();
    [CompilerGeneratedAttribute]
internal IServiceCallSite[] get_ParameterCallSites();
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.CreateInstanceCallSite : object {
    [CompilerGeneratedAttribute]
private ServiceDescriptor <Descriptor>k__BackingField;
    internal ServiceDescriptor Descriptor { get; }
    public CreateInstanceCallSite(ServiceDescriptor descriptor);
    [CompilerGeneratedAttribute]
internal ServiceDescriptor get_Descriptor();
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.EmptyIEnumerableCallSite : object {
    [CompilerGeneratedAttribute]
private object <ServiceInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    internal object ServiceInstance { get; }
    internal Type ServiceType { get; }
    public EmptyIEnumerableCallSite(Type serviceType, object serviceInstance);
    [CompilerGeneratedAttribute]
internal object get_ServiceInstance();
    [CompilerGeneratedAttribute]
internal Type get_ServiceType();
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.FactoryService : object {
    [CompilerGeneratedAttribute]
private ServiceDescriptor <Descriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private IService <Next>k__BackingField;
    internal ServiceDescriptor Descriptor { get; }
    public IService Next { get; public set; }
    public ServiceLifetime Lifetime { get; }
    public Type ServiceType { get; }
    public FactoryService(ServiceDescriptor descriptor);
    [CompilerGeneratedAttribute]
internal ServiceDescriptor get_Descriptor();
    [CompilerGeneratedAttribute]
public sealed virtual IService get_Next();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Next(IService value);
    public sealed virtual ServiceLifetime get_Lifetime();
    public sealed virtual Type get_ServiceType();
    public sealed virtual IServiceCallSite CreateCallSite(ServiceProvider provider, ISet`1<Type> callSiteChain);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.GenericService : object {
    private ServiceDescriptor _descriptor;
    public ServiceLifetime Lifetime { get; }
    public GenericService(ServiceDescriptor descriptor);
    public sealed virtual ServiceLifetime get_Lifetime();
    public sealed virtual IService GetService(Type closedServiceType);
}
internal interface Microsoft.Extensions.DependencyInjection.ServiceLookup.IGenericService {
    public ServiceLifetime Lifetime { get; }
    public abstract virtual ServiceLifetime get_Lifetime();
    public abstract virtual IService GetService(Type closedServiceType);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.InstanceService : object {
    [CompilerGeneratedAttribute]
private ServiceDescriptor <Descriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private IService <Next>k__BackingField;
    internal ServiceDescriptor Descriptor { get; }
    public IService Next { get; public set; }
    public ServiceLifetime Lifetime { get; }
    public Type ServiceType { get; }
    public InstanceService(ServiceDescriptor descriptor);
    [CompilerGeneratedAttribute]
internal ServiceDescriptor get_Descriptor();
    [CompilerGeneratedAttribute]
public sealed virtual IService get_Next();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Next(IService value);
    public sealed virtual ServiceLifetime get_Lifetime();
    public sealed virtual Type get_ServiceType();
    public sealed virtual IServiceCallSite CreateCallSite(ServiceProvider provider, ISet`1<Type> callSiteChain);
}
internal interface Microsoft.Extensions.DependencyInjection.ServiceLookup.IService {
    public IService Next { get; public set; }
    public ServiceLifetime Lifetime { get; }
    public Type ServiceType { get; }
    public abstract virtual IService get_Next();
    public abstract virtual void set_Next(IService value);
    public abstract virtual ServiceLifetime get_Lifetime();
    public abstract virtual IServiceCallSite CreateCallSite(ServiceProvider provider, ISet`1<Type> callSiteChain);
    public abstract virtual Type get_ServiceType();
}
internal interface Microsoft.Extensions.DependencyInjection.ServiceLookup.IServiceCallSite {
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.OpenIEnumerableService : object {
    private ServiceTable _table;
    public ServiceLifetime Lifetime { get; }
    public OpenIEnumerableService(ServiceTable table);
    public sealed virtual ServiceLifetime get_Lifetime();
    public sealed virtual IService GetService(Type closedServiceType);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ScopedCallSite : object {
    [CompilerGeneratedAttribute]
private IService <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceCallSite <ServiceCallSite>k__BackingField;
    internal IService Key { get; }
    internal IServiceCallSite ServiceCallSite { get; }
    public ScopedCallSite(IService key, IServiceCallSite serviceCallSite);
    [CompilerGeneratedAttribute]
internal IService get_Key();
    [CompilerGeneratedAttribute]
internal IServiceCallSite get_ServiceCallSite();
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.Service : object {
    private ServiceDescriptor _descriptor;
    [CompilerGeneratedAttribute]
private IService <Next>k__BackingField;
    public IService Next { get; public set; }
    public ServiceLifetime Lifetime { get; }
    public Type ServiceType { get; }
    public Service(ServiceDescriptor descriptor);
    [CompilerGeneratedAttribute]
public sealed virtual IService get_Next();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Next(IService value);
    public sealed virtual ServiceLifetime get_Lifetime();
    public sealed virtual IServiceCallSite CreateCallSite(ServiceProvider provider, ISet`1<Type> callSiteChain);
    public sealed virtual Type get_ServiceType();
    private bool IsSuperset(IEnumerable`1<Type> left, IEnumerable`1<Type> right);
    private IServiceCallSite[] PopulateCallSites(ServiceProvider provider, ISet`1<Type> callSiteChain, ParameterInfo[] parameters, bool throwIfCallSiteNotFound);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceEntry : object {
    private object _sync;
    [CompilerGeneratedAttribute]
private IService <First>k__BackingField;
    [CompilerGeneratedAttribute]
private IService <Last>k__BackingField;
    public IService First { get; private set; }
    public IService Last { get; private set; }
    public ServiceEntry(IService service);
    [CompilerGeneratedAttribute]
public IService get_First();
    [CompilerGeneratedAttribute]
private void set_First(IService value);
    [CompilerGeneratedAttribute]
public IService get_Last();
    [CompilerGeneratedAttribute]
private void set_Last(IService value);
    public void Add(IService service);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderService : object {
    [CompilerGeneratedAttribute]
private IService <Next>k__BackingField;
    public IService Next { get; public set; }
    public ServiceLifetime Lifetime { get; }
    public Type ServiceType { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IService get_Next();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Next(IService value);
    public sealed virtual ServiceLifetime get_Lifetime();
    public sealed virtual Type get_ServiceType();
    public sealed virtual IServiceCallSite CreateCallSite(ServiceProvider provider, ISet`1<Type> callSiteChain);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceScope : object {
    private ServiceProvider _scopedProvider;
    public IServiceProvider ServiceProvider { get; }
    public ServiceScope(ServiceProvider scopedProvider);
    public sealed virtual IServiceProvider get_ServiceProvider();
    public sealed virtual void Dispose();
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceScopeFactory : object {
    private ServiceProvider _provider;
    public ServiceScopeFactory(ServiceProvider provider);
    public sealed virtual IServiceScope CreateScope();
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceScopeService : object {
    [CompilerGeneratedAttribute]
private IService <Next>k__BackingField;
    public IService Next { get; public set; }
    public ServiceLifetime Lifetime { get; }
    public Type ServiceType { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IService get_Next();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Next(IService value);
    public sealed virtual ServiceLifetime get_Lifetime();
    public sealed virtual Type get_ServiceType();
    public sealed virtual IServiceCallSite CreateCallSite(ServiceProvider provider, ISet`1<Type> callSiteChain);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceTable : object {
    private object _sync;
    private Dictionary`2<Type, ServiceEntry> _services;
    private Dictionary`2<Type, List`1<IGenericService>> _genericServices;
    private ConcurrentDictionary`2<Type, Func`2<ServiceProvider, object>> _realizedServices;
    public ConcurrentDictionary`2<Type, Func`2<ServiceProvider, object>> RealizedServices { get; }
    public ServiceTable(IEnumerable`1<ServiceDescriptor> descriptors);
    public ConcurrentDictionary`2<Type, Func`2<ServiceProvider, object>> get_RealizedServices();
    public bool TryGetEntry(Type serviceType, ServiceEntry& entry);
    public void Add(Type serviceType, IService service);
    public void Add(Type serviceType, IGenericService genericService);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.SingletonCallSite : ScopedCallSite {
    public SingletonCallSite(IService key, IServiceCallSite serviceCallSite);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.TransientCallSite : object {
    [CompilerGeneratedAttribute]
private IServiceCallSite <Service>k__BackingField;
    internal IServiceCallSite Service { get; }
    public TransientCallSite(IServiceCallSite service);
    [CompilerGeneratedAttribute]
internal IServiceCallSite get_Service();
}
internal class Microsoft.Extensions.DependencyInjection.ServiceProvider : object {
    private CallSiteValidator _callSiteValidator;
    private ServiceTable _table;
    private bool _disposeCalled;
    private List`1<IDisposable> _transientDisposables;
    [CompilerGeneratedAttribute]
private ServiceProvider <Root>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<object, object> <ResolvedServices>k__BackingField;
    private static Func`3<Type, ServiceProvider, Func`2<ServiceProvider, object>> _createServiceAccessor;
    private static CallSiteRuntimeResolver _callSiteRuntimeResolver;
    internal ServiceProvider Root { get; }
    internal Dictionary`2<object, object> ResolvedServices { get; }
    public ServiceProvider(IEnumerable`1<ServiceDescriptor> serviceDescriptors, bool validateScopes);
    internal ServiceProvider(ServiceProvider parent);
    private static ServiceProvider();
    [CompilerGeneratedAttribute]
internal ServiceProvider get_Root();
    [CompilerGeneratedAttribute]
internal Dictionary`2<object, object> get_ResolvedServices();
    public sealed virtual object GetService(Type serviceType);
    private static Func`2<ServiceProvider, object> CreateServiceAccessor(Type serviceType, ServiceProvider serviceProvider);
    internal static Func`2<ServiceProvider, object> RealizeService(ServiceTable table, Type serviceType, IServiceCallSite callSite);
    internal IServiceCallSite GetServiceCallSite(Type serviceType, ISet`1<Type> callSiteChain);
    internal IServiceCallSite GetResolveCallSite(IService service, ISet`1<Type> callSiteChain);
    public sealed virtual void Dispose();
    internal object CaptureDisposable(object service);
    private object GetEmptyIEnumerableOrNull(Type serviceType);
}
[ExtensionAttribute]
internal static class System.Collections.Concurrent.ConcurrentDictionaryExtensions : object {
    [ExtensionAttribute]
internal static TValue GetOrAdd(ConcurrentDictionary`2<TKey, TValue> dictionary, TKey key, Func`3<TKey, TArg, TValue> valueFactory, TArg arg);
}
