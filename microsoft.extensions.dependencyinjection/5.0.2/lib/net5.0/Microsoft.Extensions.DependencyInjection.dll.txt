internal static class FxResources.Microsoft.Extensions.DependencyInjection.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.Extensions.DependencyInjection.CallSiteJsonFormatter : CallSiteVisitor`2<CallSiteFormatterContext, object> {
    internal static CallSiteJsonFormatter Instance;
    private static CallSiteJsonFormatter();
    public string Format(ServiceCallSite callSite);
    protected virtual object VisitConstructor(ConstructorCallSite constructorCallSite, CallSiteFormatterContext argument);
    protected virtual object VisitCallSiteMain(ServiceCallSite callSite, CallSiteFormatterContext argument);
    protected virtual object VisitConstant(ConstantCallSite constantCallSite, CallSiteFormatterContext argument);
    protected virtual object VisitServiceProvider(ServiceProviderCallSite serviceProviderCallSite, CallSiteFormatterContext argument);
    protected virtual object VisitServiceScopeFactory(ServiceScopeFactoryCallSite serviceScopeFactoryCallSite, CallSiteFormatterContext argument);
    protected virtual object VisitIEnumerable(IEnumerableCallSite enumerableCallSite, CallSiteFormatterContext argument);
    protected virtual object VisitFactory(FactoryCallSite factoryCallSite, CallSiteFormatterContext argument);
}
public class Microsoft.Extensions.DependencyInjection.DefaultServiceProviderFactory : object {
    private ServiceProviderOptions _options;
    public DefaultServiceProviderFactory(ServiceProviderOptions options);
    public sealed virtual IServiceCollection CreateBuilder(IServiceCollection services);
    public sealed virtual IServiceProvider CreateServiceProvider(IServiceCollection containerBuilder);
}
[EventSourceAttribute]
internal class Microsoft.Extensions.DependencyInjection.DependencyInjectionEventSource : EventSource {
    public static DependencyInjectionEventSource Log;
    private int MaxChunkSize;
    private static DependencyInjectionEventSource();
    [EventAttribute("1")]
private void CallSiteBuilt(string serviceType, string callSite, int chunkIndex, int chunkCount);
    [EventAttribute("2")]
public void ServiceResolved(string serviceType);
    [EventAttribute("3")]
public void ExpressionTreeGenerated(string serviceType, int nodeCount);
    [EventAttribute("4")]
public void DynamicMethodBuilt(string serviceType, int methodSize);
    [NonEventAttribute]
public void ServiceResolved(Type serviceType);
    [NonEventAttribute]
public void CallSiteBuilt(Type serviceType, ServiceCallSite callSite);
    [NonEventAttribute]
public void DynamicMethodBuilt(Type serviceType, int methodSize);
}
[ExtensionAttribute]
internal static class Microsoft.Extensions.DependencyInjection.DependencyInjectionEventSourceExtensions : object {
    [ExtensionAttribute]
public static void ExpressionTreeGenerated(DependencyInjectionEventSource source, Type serviceType, Expression expression);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Extensions.DependencyInjection.ServiceCollection : object {
    private List`1<ServiceDescriptor> _descriptors;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public ServiceDescriptor Item { get; public set; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ServiceDescriptor get_Item(int index);
    public sealed virtual void set_Item(int index, ServiceDescriptor value);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ServiceDescriptor item);
    public sealed virtual void CopyTo(ServiceDescriptor[] array, int arrayIndex);
    public sealed virtual bool Remove(ServiceDescriptor item);
    public sealed virtual IEnumerator`1<ServiceDescriptor> GetEnumerator();
    private sealed virtual override void System.Collections.Generic.ICollection<Microsoft.Extensions.DependencyInjection.ServiceDescriptor>.Add(ServiceDescriptor item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual int IndexOf(ServiceDescriptor item);
    public sealed virtual void Insert(int index, ServiceDescriptor item);
    public sealed virtual void RemoveAt(int index);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions : object {
    [ExtensionAttribute]
public static ServiceProvider BuildServiceProvider(IServiceCollection services);
    [ExtensionAttribute]
public static ServiceProvider BuildServiceProvider(IServiceCollection services, bool validateScopes);
    [ExtensionAttribute]
public static ServiceProvider BuildServiceProvider(IServiceCollection services, ServiceProviderOptions options);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteChain : object {
    private Dictionary`2<Type, ChainItemInfo> _callSiteChain;
    public void CheckCircularDependency(Type serviceType);
    public void Remove(Type serviceType);
    public void Add(Type serviceType, Type implementationType);
    private string CreateCircularDependencyExceptionMessage(Type type);
    private void AppendResolutionPath(StringBuilder builder, Type currentlyResolving);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteFactory : object {
    private static int DefaultSlot;
    private List`1<ServiceDescriptor> _descriptors;
    private ConcurrentDictionary`2<Type, ServiceCallSite> _callSiteCache;
    private Dictionary`2<Type, ServiceDescriptorCacheItem> _descriptorLookup;
    private StackGuard _stackGuard;
    public CallSiteFactory(IEnumerable`1<ServiceDescriptor> descriptors);
    private void Populate();
    internal ServiceCallSite GetCallSite(Type serviceType, CallSiteChain callSiteChain);
    internal ServiceCallSite GetCallSite(ServiceDescriptor serviceDescriptor, CallSiteChain callSiteChain);
    private ServiceCallSite CreateCallSite(Type serviceType, CallSiteChain callSiteChain);
    private ServiceCallSite TryCreateExact(Type serviceType, CallSiteChain callSiteChain);
    private ServiceCallSite TryCreateOpenGeneric(Type serviceType, CallSiteChain callSiteChain);
    private ServiceCallSite TryCreateEnumerable(Type serviceType, CallSiteChain callSiteChain);
    private CallSiteResultCacheLocation GetCommonCacheLocation(CallSiteResultCacheLocation locationA, CallSiteResultCacheLocation locationB);
    private ServiceCallSite TryCreateExact(ServiceDescriptor descriptor, Type serviceType, CallSiteChain callSiteChain, int slot);
    private ServiceCallSite TryCreateOpenGeneric(ServiceDescriptor descriptor, Type serviceType, CallSiteChain callSiteChain, int slot, bool throwOnConstraintViolation);
    private ServiceCallSite CreateConstructorCallSite(ResultCache lifetime, Type serviceType, Type implementationType, CallSiteChain callSiteChain);
    private ServiceCallSite[] CreateArgumentCallSites(Type serviceType, Type implementationType, CallSiteChain callSiteChain, ParameterInfo[] parameters, bool throwIfCallSiteNotFound);
    public void Add(Type type, ServiceCallSite serviceCallSite);
    [CompilerGeneratedAttribute]
private ServiceCallSite <CreateCallSite>b__9_0(Type type, CallSiteChain chain);
}
internal enum Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteKind : Enum {
    public int value__;
    public static CallSiteKind Factory;
    public static CallSiteKind Constructor;
    public static CallSiteKind Constant;
    public static CallSiteKind IEnumerable;
    public static CallSiteKind ServiceProvider;
    public static CallSiteKind Scope;
    public static CallSiteKind Transient;
    public static CallSiteKind CreateInstance;
    public static CallSiteKind ServiceScopeFactory;
    public static CallSiteKind Singleton;
}
internal enum Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteResultCacheLocation : Enum {
    public int value__;
    public static CallSiteResultCacheLocation Root;
    public static CallSiteResultCacheLocation Scope;
    public static CallSiteResultCacheLocation Dispose;
    public static CallSiteResultCacheLocation None;
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver : CallSiteVisitor`2<RuntimeResolverContext, object> {
    public object Resolve(ServiceCallSite callSite, ServiceProviderEngineScope scope);
    protected virtual object VisitDisposeCache(ServiceCallSite transientCallSite, RuntimeResolverContext context);
    protected virtual object VisitConstructor(ConstructorCallSite constructorCallSite, RuntimeResolverContext context);
    protected virtual object VisitRootCache(ServiceCallSite singletonCallSite, RuntimeResolverContext context);
    protected virtual object VisitScopeCache(ServiceCallSite singletonCallSite, RuntimeResolverContext context);
    private object VisitCache(ServiceCallSite callSite, RuntimeResolverContext context, ServiceProviderEngineScope serviceProviderEngine, RuntimeResolverLock lockType);
    protected virtual object VisitConstant(ConstantCallSite constantCallSite, RuntimeResolverContext context);
    protected virtual object VisitServiceProvider(ServiceProviderCallSite serviceProviderCallSite, RuntimeResolverContext context);
    protected virtual object VisitServiceScopeFactory(ServiceScopeFactoryCallSite serviceScopeFactoryCallSite, RuntimeResolverContext context);
    protected virtual object VisitIEnumerable(IEnumerableCallSite enumerableCallSite, RuntimeResolverContext context);
    protected virtual object VisitFactory(FactoryCallSite factoryCallSite, RuntimeResolverContext context);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteValidator : CallSiteVisitor`2<CallSiteValidatorState, Type> {
    private ConcurrentDictionary`2<Type, Type> _scopedServices;
    public void ValidateCallSite(ServiceCallSite callSite);
    public void ValidateResolution(Type serviceType, IServiceScope scope, IServiceScope rootScope);
    protected virtual Type VisitConstructor(ConstructorCallSite constructorCallSite, CallSiteValidatorState state);
    protected virtual Type VisitIEnumerable(IEnumerableCallSite enumerableCallSite, CallSiteValidatorState state);
    protected virtual Type VisitRootCache(ServiceCallSite singletonCallSite, CallSiteValidatorState state);
    protected virtual Type VisitScopeCache(ServiceCallSite scopedCallSite, CallSiteValidatorState state);
    protected virtual Type VisitConstant(ConstantCallSite constantCallSite, CallSiteValidatorState state);
    protected virtual Type VisitServiceProvider(ServiceProviderCallSite serviceProviderCallSite, CallSiteValidatorState state);
    protected virtual Type VisitServiceScopeFactory(ServiceScopeFactoryCallSite serviceScopeFactoryCallSite, CallSiteValidatorState state);
    protected virtual Type VisitFactory(FactoryCallSite factoryCallSite, CallSiteValidatorState state);
}
internal abstract class Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2 : object {
    private StackGuard _stackGuard;
    protected virtual TResult VisitCallSite(ServiceCallSite callSite, TArgument argument);
    protected virtual TResult VisitCallSiteMain(ServiceCallSite callSite, TArgument argument);
    protected virtual TResult VisitNoCache(ServiceCallSite callSite, TArgument argument);
    protected virtual TResult VisitDisposeCache(ServiceCallSite callSite, TArgument argument);
    protected virtual TResult VisitRootCache(ServiceCallSite callSite, TArgument argument);
    protected virtual TResult VisitScopeCache(ServiceCallSite callSite, TArgument argument);
    protected abstract virtual TResult VisitConstructor(ConstructorCallSite constructorCallSite, TArgument argument);
    protected abstract virtual TResult VisitConstant(ConstantCallSite constantCallSite, TArgument argument);
    protected abstract virtual TResult VisitServiceProvider(ServiceProviderCallSite serviceProviderCallSite, TArgument argument);
    protected abstract virtual TResult VisitServiceScopeFactory(ServiceScopeFactoryCallSite serviceScopeFactoryCallSite, TArgument argument);
    protected abstract virtual TResult VisitIEnumerable(IEnumerableCallSite enumerableCallSite, TArgument argument);
    protected abstract virtual TResult VisitFactory(FactoryCallSite factoryCallSite, TArgument argument);
    [CompilerGeneratedAttribute]
private TResult <VisitCallSite>b__2_0(ServiceCallSite c, TArgument a);
}
internal abstract class Microsoft.Extensions.DependencyInjection.ServiceLookup.CompiledServiceProviderEngine : ServiceProviderEngine {
    [CompilerGeneratedAttribute]
private ILEmitResolverBuilder <ResolverBuilder>k__BackingField;
    public ILEmitResolverBuilder ResolverBuilder { get; }
    public CompiledServiceProviderEngine(IEnumerable`1<ServiceDescriptor> serviceDescriptors);
    [CompilerGeneratedAttribute]
public ILEmitResolverBuilder get_ResolverBuilder();
    protected virtual Func`2<ServiceProviderEngineScope, object> RealizeService(ServiceCallSite callSite);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstantCallSite : ServiceCallSite {
    private Type _serviceType;
    [CompilerGeneratedAttribute]
private object <DefaultValue>k__BackingField;
    [CompilerGeneratedAttribute]
private CallSiteKind <Kind>k__BackingField;
    internal object DefaultValue { get; }
    public Type ServiceType { get; }
    public Type ImplementationType { get; }
    public CallSiteKind Kind { get; }
    public ConstantCallSite(Type serviceType, object defaultValue);
    [CompilerGeneratedAttribute]
internal object get_DefaultValue();
    public virtual Type get_ServiceType();
    public virtual Type get_ImplementationType();
    [CompilerGeneratedAttribute]
public virtual CallSiteKind get_Kind();
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite : ServiceCallSite {
    [CompilerGeneratedAttribute]
private ConstructorInfo <ConstructorInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceCallSite[] <ParameterCallSites>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    [CompilerGeneratedAttribute]
private CallSiteKind <Kind>k__BackingField;
    internal ConstructorInfo ConstructorInfo { get; }
    internal ServiceCallSite[] ParameterCallSites { get; }
    public Type ServiceType { get; }
    public Type ImplementationType { get; }
    public CallSiteKind Kind { get; }
    public ConstructorCallSite(ResultCache cache, Type serviceType, ConstructorInfo constructorInfo);
    public ConstructorCallSite(ResultCache cache, Type serviceType, ConstructorInfo constructorInfo, ServiceCallSite[] parameterCallSites);
    [CompilerGeneratedAttribute]
internal ConstructorInfo get_ConstructorInfo();
    [CompilerGeneratedAttribute]
internal ServiceCallSite[] get_ParameterCallSites();
    [CompilerGeneratedAttribute]
public virtual Type get_ServiceType();
    public virtual Type get_ImplementationType();
    [CompilerGeneratedAttribute]
public virtual CallSiteKind get_Kind();
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.DynamicServiceProviderEngine : CompiledServiceProviderEngine {
    public DynamicServiceProviderEngine(IEnumerable`1<ServiceDescriptor> serviceDescriptors);
    protected virtual Func`2<ServiceProviderEngineScope, object> RealizeService(ServiceCallSite callSite);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Func`2<ServiceProviderEngineScope, object> <>n__0(ServiceCallSite callSite);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ExpressionResolverBuilder : CallSiteVisitor`2<object, Expression> {
    internal static MethodInfo InvokeFactoryMethodInfo;
    internal static MethodInfo CaptureDisposableMethodInfo;
    internal static MethodInfo TryGetValueMethodInfo;
    internal static MethodInfo AddMethodInfo;
    internal static MethodInfo MonitorEnterMethodInfo;
    internal static MethodInfo MonitorExitMethodInfo;
    private static MethodInfo ArrayEmptyMethodInfo;
    private static ParameterExpression ScopeParameter;
    private static ParameterExpression ResolvedServices;
    private static BinaryExpression ResolvedServicesVariableAssignment;
    private static ParameterExpression CaptureDisposableParameter;
    private static LambdaExpression CaptureDisposable;
    private CallSiteRuntimeResolver _runtimeResolver;
    private IServiceScopeFactory _serviceScopeFactory;
    private ServiceProviderEngineScope _rootScope;
    private ConcurrentDictionary`2<ServiceCacheKey, Func`2<ServiceProviderEngineScope, object>> _scopeResolverCache;
    private Func`3<ServiceCacheKey, ServiceCallSite, Func`2<ServiceProviderEngineScope, object>> _buildTypeDelegate;
    public ExpressionResolverBuilder(CallSiteRuntimeResolver runtimeResolver, IServiceScopeFactory serviceScopeFactory, ServiceProviderEngineScope rootScope);
    private static ExpressionResolverBuilder();
    public Func`2<ServiceProviderEngineScope, object> Build(ServiceCallSite callSite);
    public Func`2<ServiceProviderEngineScope, object> BuildNoCache(ServiceCallSite callSite);
    private Expression`1<Func`2<ServiceProviderEngineScope, object>> BuildExpression(ServiceCallSite callSite);
    protected virtual Expression VisitRootCache(ServiceCallSite singletonCallSite, object context);
    protected virtual Expression VisitConstant(ConstantCallSite constantCallSite, object context);
    protected virtual Expression VisitServiceProvider(ServiceProviderCallSite serviceProviderCallSite, object context);
    protected virtual Expression VisitServiceScopeFactory(ServiceScopeFactoryCallSite serviceScopeFactoryCallSite, object context);
    protected virtual Expression VisitFactory(FactoryCallSite factoryCallSite, object context);
    protected virtual Expression VisitIEnumerable(IEnumerableCallSite callSite, object context);
    protected virtual Expression VisitDisposeCache(ServiceCallSite callSite, object context);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2060:UnrecognizedReflectionPattern")]
internal static MethodInfo GetArrayEmptyMethodInfo(Type itemType);
    private Expression TryCaptureDisposable(ServiceCallSite callSite, ParameterExpression scope, Expression service);
    protected virtual Expression VisitConstructor(ConstructorCallSite callSite, object context);
    private static Expression Convert(Expression expression, Type type, bool forceValueTypeConversion);
    protected virtual Expression VisitScopeCache(ServiceCallSite callSite, object context);
    private Expression BuildScopedExpression(ServiceCallSite callSite);
    private static MethodInfo GetMethodInfo(Expression`1<T> expr);
    public Expression GetCaptureDisposable(ParameterExpression scope);
    [CompilerGeneratedAttribute]
private Func`2<ServiceProviderEngineScope, object> <.ctor>b__17_0(ServiceCacheKey key, ServiceCallSite cs);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ExpressionsServiceProviderEngine : ServiceProviderEngine {
    private ExpressionResolverBuilder _expressionResolverBuilder;
    public ExpressionsServiceProviderEngine(IEnumerable`1<ServiceDescriptor> serviceDescriptors);
    protected virtual Func`2<ServiceProviderEngineScope, object> RealizeService(ServiceCallSite callSite);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.FactoryCallSite : ServiceCallSite {
    [CompilerGeneratedAttribute]
private Func`2<IServiceProvider, object> <Factory>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    [CompilerGeneratedAttribute]
private CallSiteKind <Kind>k__BackingField;
    public Func`2<IServiceProvider, object> Factory { get; }
    public Type ServiceType { get; }
    public Type ImplementationType { get; }
    public CallSiteKind Kind { get; }
    public FactoryCallSite(ResultCache cache, Type serviceType, Func`2<IServiceProvider, object> factory);
    [CompilerGeneratedAttribute]
public Func`2<IServiceProvider, object> get_Factory();
    [CompilerGeneratedAttribute]
public virtual Type get_ServiceType();
    public virtual Type get_ImplementationType();
    [CompilerGeneratedAttribute]
public virtual CallSiteKind get_Kind();
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.IEnumerableCallSite : ServiceCallSite {
    [CompilerGeneratedAttribute]
private Type <ItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceCallSite[] <ServiceCallSites>k__BackingField;
    [CompilerGeneratedAttribute]
private CallSiteKind <Kind>k__BackingField;
    internal Type ItemType { get; }
    internal ServiceCallSite[] ServiceCallSites { get; }
    public Type ServiceType { get; }
    public Type ImplementationType { get; }
    public CallSiteKind Kind { get; }
    public IEnumerableCallSite(ResultCache cache, Type itemType, ServiceCallSite[] serviceCallSites);
    [CompilerGeneratedAttribute]
internal Type get_ItemType();
    [CompilerGeneratedAttribute]
internal ServiceCallSite[] get_ServiceCallSites();
    public virtual Type get_ServiceType();
    public virtual Type get_ImplementationType();
    [CompilerGeneratedAttribute]
public virtual CallSiteKind get_Kind();
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ILEmitResolverBuilder : CallSiteVisitor`2<ILEmitResolverBuilderContext, object> {
    private static MethodInfo ResolvedServicesGetter;
    private static FieldInfo FactoriesField;
    private static FieldInfo ConstantsField;
    private static MethodInfo GetTypeFromHandleMethod;
    private static ConstructorInfo CacheKeyCtor;
    private CallSiteRuntimeResolver _runtimeResolver;
    private IServiceScopeFactory _serviceScopeFactory;
    private ServiceProviderEngineScope _rootScope;
    private ConcurrentDictionary`2<ServiceCacheKey, GeneratedMethod> _scopeResolverCache;
    private Func`3<ServiceCacheKey, ServiceCallSite, GeneratedMethod> _buildTypeDelegate;
    public ILEmitResolverBuilder(CallSiteRuntimeResolver runtimeResolver, IServiceScopeFactory serviceScopeFactory, ServiceProviderEngineScope rootScope);
    private static ILEmitResolverBuilder();
    public Func`2<ServiceProviderEngineScope, object> Build(ServiceCallSite callSite);
    private GeneratedMethod BuildType(ServiceCallSite callSite);
    private GeneratedMethod BuildTypeNoCache(ServiceCallSite callSite);
    protected virtual object VisitDisposeCache(ServiceCallSite transientCallSite, ILEmitResolverBuilderContext argument);
    protected virtual object VisitConstructor(ConstructorCallSite constructorCallSite, ILEmitResolverBuilderContext argument);
    protected virtual object VisitRootCache(ServiceCallSite callSite, ILEmitResolverBuilderContext argument);
    protected virtual object VisitScopeCache(ServiceCallSite scopedCallSite, ILEmitResolverBuilderContext argument);
    protected virtual object VisitConstant(ConstantCallSite constantCallSite, ILEmitResolverBuilderContext argument);
    protected virtual object VisitServiceProvider(ServiceProviderCallSite serviceProviderCallSite, ILEmitResolverBuilderContext argument);
    protected virtual object VisitServiceScopeFactory(ServiceScopeFactoryCallSite serviceScopeFactoryCallSite, ILEmitResolverBuilderContext argument);
    protected virtual object VisitIEnumerable(IEnumerableCallSite enumerableCallSite, ILEmitResolverBuilderContext argument);
    protected virtual object VisitFactory(FactoryCallSite factoryCallSite, ILEmitResolverBuilderContext argument);
    private void AddConstant(ILEmitResolverBuilderContext argument, object value);
    private void AddCacheKey(ILEmitResolverBuilderContext argument, ServiceCacheKey key);
    private ILEmitResolverBuilderRuntimeContext GenerateMethodBody(ServiceCallSite callSite, ILGenerator generator);
    private static void BeginCaptureDisposable(ILEmitResolverBuilderContext argument);
    private static void EndCaptureDisposable(ILEmitResolverBuilderContext argument);
    private void Ldloc(ILGenerator generator, int index);
    private void Stloc(ILGenerator generator, int index);
    [CompilerGeneratedAttribute]
private GeneratedMethod <.ctor>b__12_0(ServiceCacheKey key, ServiceCallSite cs);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ILEmitResolverBuilderContext : object {
    [CompilerGeneratedAttribute]
private ILGenerator <Generator>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<object> <Constants>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Func`2<IServiceProvider, object>> <Factories>k__BackingField;
    public ILGenerator Generator { get; public set; }
    public List`1<object> Constants { get; public set; }
    public List`1<Func`2<IServiceProvider, object>> Factories { get; public set; }
    [CompilerGeneratedAttribute]
public ILGenerator get_Generator();
    [CompilerGeneratedAttribute]
public void set_Generator(ILGenerator value);
    [CompilerGeneratedAttribute]
public List`1<object> get_Constants();
    [CompilerGeneratedAttribute]
public void set_Constants(List`1<object> value);
    [CompilerGeneratedAttribute]
public List`1<Func`2<IServiceProvider, object>> get_Factories();
    [CompilerGeneratedAttribute]
public void set_Factories(List`1<Func`2<IServiceProvider, object>> value);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ILEmitServiceProviderEngine : ServiceProviderEngine {
    private ILEmitResolverBuilder _expressionResolverBuilder;
    public ILEmitServiceProviderEngine(IEnumerable`1<ServiceDescriptor> serviceDescriptors);
    protected virtual Func`2<ServiceProviderEngineScope, object> RealizeService(ServiceCallSite callSite);
}
internal interface Microsoft.Extensions.DependencyInjection.ServiceLookup.IServiceProviderEngine {
    public IServiceScope RootScope { get; }
    public abstract virtual IServiceScope get_RootScope();
    public abstract virtual void InitializeCallback(IServiceProviderEngineCallback callback);
    public abstract virtual void ValidateService(ServiceDescriptor descriptor);
}
internal interface Microsoft.Extensions.DependencyInjection.ServiceLookup.IServiceProviderEngineCallback {
    public abstract virtual void OnCreate(ServiceCallSite callSite);
    public abstract virtual void OnResolve(Type serviceType, IServiceScope scope);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ResultCache : ValueType {
    [CompilerGeneratedAttribute]
private static ResultCache <None>k__BackingField;
    [CompilerGeneratedAttribute]
private CallSiteResultCacheLocation <Location>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceCacheKey <Key>k__BackingField;
    public static ResultCache None { get; }
    public CallSiteResultCacheLocation Location { get; public set; }
    public ServiceCacheKey Key { get; public set; }
    internal ResultCache(CallSiteResultCacheLocation lifetime, ServiceCacheKey cacheKey);
    public ResultCache(ServiceLifetime lifetime, Type type, int slot);
    private static ResultCache();
    [CompilerGeneratedAttribute]
public static ResultCache get_None();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public CallSiteResultCacheLocation get_Location();
    [CompilerGeneratedAttribute]
public void set_Location(CallSiteResultCacheLocation value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ServiceCacheKey get_Key();
    [CompilerGeneratedAttribute]
public void set_Key(ServiceCacheKey value);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverContext : ValueType {
    [CompilerGeneratedAttribute]
private ServiceProviderEngineScope <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimeResolverLock <AcquiredLocks>k__BackingField;
    public ServiceProviderEngineScope Scope { get; public set; }
    public RuntimeResolverLock AcquiredLocks { get; public set; }
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ServiceProviderEngineScope get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(ServiceProviderEngineScope value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public RuntimeResolverLock get_AcquiredLocks();
    [CompilerGeneratedAttribute]
public void set_AcquiredLocks(RuntimeResolverLock value);
}
[FlagsAttribute]
internal enum Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeResolverLock : Enum {
    public int value__;
    public static RuntimeResolverLock Scope;
    public static RuntimeResolverLock Root;
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.RuntimeServiceProviderEngine : ServiceProviderEngine {
    public RuntimeServiceProviderEngine(IEnumerable`1<ServiceDescriptor> serviceDescriptors);
    protected virtual Func`2<ServiceProviderEngineScope, object> RealizeService(ServiceCallSite callSite);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCacheKey : ValueType {
    [CompilerGeneratedAttribute]
private static ServiceCacheKey <Empty>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Slot>k__BackingField;
    public static ServiceCacheKey Empty { get; }
    public Type Type { get; }
    public int Slot { get; }
    public ServiceCacheKey(Type type, int slot);
    private static ServiceCacheKey();
    [CompilerGeneratedAttribute]
public static ServiceCacheKey get_Empty();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public Type get_Type();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public int get_Slot();
    public sealed virtual bool Equals(ServiceCacheKey other);
    public virtual int GetHashCode();
}
internal abstract class Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceCallSite : object {
    [CompilerGeneratedAttribute]
private ResultCache <Cache>k__BackingField;
    public Type ServiceType { get; }
    public Type ImplementationType { get; }
    public CallSiteKind Kind { get; }
    public ResultCache Cache { get; }
    public bool CaptureDisposable { get; }
    protected ServiceCallSite(ResultCache cache);
    public abstract virtual Type get_ServiceType();
    public abstract virtual Type get_ImplementationType();
    public abstract virtual CallSiteKind get_Kind();
    [CompilerGeneratedAttribute]
public ResultCache get_Cache();
    public bool get_CaptureDisposable();
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderCallSite : ServiceCallSite {
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ImplementationType>k__BackingField;
    [CompilerGeneratedAttribute]
private CallSiteKind <Kind>k__BackingField;
    public Type ServiceType { get; }
    public Type ImplementationType { get; }
    public CallSiteKind Kind { get; }
    [CompilerGeneratedAttribute]
public virtual Type get_ServiceType();
    [CompilerGeneratedAttribute]
public virtual Type get_ImplementationType();
    [CompilerGeneratedAttribute]
public virtual CallSiteKind get_Kind();
}
internal abstract class Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine : object {
    private IServiceProviderEngineCallback _callback;
    private Func`2<Type, Func`2<ServiceProviderEngineScope, object>> _createServiceAccessor;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private ConcurrentDictionary`2<Type, Func`2<ServiceProviderEngineScope, object>> <RealizedServices>k__BackingField;
    [CompilerGeneratedAttribute]
private CallSiteFactory <CallSiteFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private CallSiteRuntimeResolver <RuntimeResolver>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceProviderEngineScope <Root>k__BackingField;
    internal ConcurrentDictionary`2<Type, Func`2<ServiceProviderEngineScope, object>> RealizedServices { get; }
    internal CallSiteFactory CallSiteFactory { get; }
    protected CallSiteRuntimeResolver RuntimeResolver { get; }
    public ServiceProviderEngineScope Root { get; }
    public IServiceScope RootScope { get; }
    protected ServiceProviderEngine(IEnumerable`1<ServiceDescriptor> serviceDescriptors);
    [CompilerGeneratedAttribute]
internal ConcurrentDictionary`2<Type, Func`2<ServiceProviderEngineScope, object>> get_RealizedServices();
    [CompilerGeneratedAttribute]
internal CallSiteFactory get_CallSiteFactory();
    [CompilerGeneratedAttribute]
protected CallSiteRuntimeResolver get_RuntimeResolver();
    [CompilerGeneratedAttribute]
public ServiceProviderEngineScope get_Root();
    public sealed virtual IServiceScope get_RootScope();
    private sealed virtual override void Microsoft.Extensions.DependencyInjection.ServiceLookup.IServiceProviderEngine.InitializeCallback(IServiceProviderEngineCallback callback);
    public sealed virtual void ValidateService(ServiceDescriptor descriptor);
    public sealed virtual object GetService(Type serviceType);
    protected abstract virtual Func`2<ServiceProviderEngineScope, object> RealizeService(ServiceCallSite callSite);
    public sealed virtual void Dispose();
    public sealed virtual ValueTask DisposeAsync();
    internal object GetService(Type serviceType, ServiceProviderEngineScope serviceProviderEngineScope);
    public sealed virtual IServiceScope CreateScope();
    private Func`2<ServiceProviderEngineScope, object> CreateServiceAccessor(Type serviceType);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope : object {
    internal Action`1<object> _captureDisposableCallback;
    private List`1<object> _disposables;
    private bool _disposed;
    [CompilerGeneratedAttribute]
private Dictionary`2<ServiceCacheKey, object> <ResolvedServices>k__BackingField;
    [CompilerGeneratedAttribute]
private ServiceProviderEngine <Engine>k__BackingField;
    internal Dictionary`2<ServiceCacheKey, object> ResolvedServices { get; }
    public ServiceProviderEngine Engine { get; }
    public IServiceProvider ServiceProvider { get; }
    public ServiceProviderEngineScope(ServiceProviderEngine engine);
    [CompilerGeneratedAttribute]
internal Dictionary`2<ServiceCacheKey, object> get_ResolvedServices();
    [CompilerGeneratedAttribute]
public ServiceProviderEngine get_Engine();
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual IServiceProvider get_ServiceProvider();
    internal object CaptureDisposable(object service);
    public sealed virtual void Dispose();
    public sealed virtual ValueTask DisposeAsync();
    private List`1<object> BeginDispose();
    [AsyncStateMachineAttribute("Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngineScope/<<DisposeAsync>g__Await|15_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask <DisposeAsync>g__Await|15_0(int i, ValueTask vt, List`1<object> toDispose);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceScopeFactoryCallSite : ServiceCallSite {
    [CompilerGeneratedAttribute]
private Type <ServiceType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ImplementationType>k__BackingField;
    [CompilerGeneratedAttribute]
private CallSiteKind <Kind>k__BackingField;
    public Type ServiceType { get; }
    public Type ImplementationType { get; }
    public CallSiteKind Kind { get; }
    [CompilerGeneratedAttribute]
public virtual Type get_ServiceType();
    [CompilerGeneratedAttribute]
public virtual Type get_ImplementationType();
    [CompilerGeneratedAttribute]
public virtual CallSiteKind get_Kind();
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.StackGuard : object {
    private static int MaxExecutionStackCount;
    private int _executionStackCount;
    public bool TryEnterOnCurrentStack();
    public TR RunOnEmptyStack(Func`3<T1, T2, TR> action, T1 arg1, T2 arg2);
    private R RunOnEmptyStackCore(Func`2<object, R> action, object state);
}
internal class Microsoft.Extensions.DependencyInjection.ServiceLookup.ThrowHelper : object {
    internal static void ThrowObjectDisposedException();
}
public class Microsoft.Extensions.DependencyInjection.ServiceProvider : object {
    private IServiceProviderEngine _engine;
    private CallSiteValidator _callSiteValidator;
    internal ServiceProvider(IEnumerable`1<ServiceDescriptor> serviceDescriptors, IServiceProviderEngine engine, ServiceProviderOptions options);
    public sealed virtual object GetService(Type serviceType);
    public sealed virtual void Dispose();
    private sealed virtual override void Microsoft.Extensions.DependencyInjection.ServiceLookup.IServiceProviderEngineCallback.OnCreate(ServiceCallSite callSite);
    private sealed virtual override void Microsoft.Extensions.DependencyInjection.ServiceLookup.IServiceProviderEngineCallback.OnResolve(Type serviceType, IServiceScope scope);
    public sealed virtual ValueTask DisposeAsync();
}
public class Microsoft.Extensions.DependencyInjection.ServiceProviderOptions : object {
    internal static ServiceProviderOptions Default;
    [CompilerGeneratedAttribute]
private bool <ValidateScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ValidateOnBuild>k__BackingField;
    public bool ValidateScopes { get; public set; }
    public bool ValidateOnBuild { get; public set; }
    private static ServiceProviderOptions();
    [CompilerGeneratedAttribute]
public bool get_ValidateScopes();
    [CompilerGeneratedAttribute]
public void set_ValidateScopes(bool value);
    [CompilerGeneratedAttribute]
public bool get_ValidateOnBuild();
    [CompilerGeneratedAttribute]
public void set_ValidateOnBuild(bool value);
}
internal class Microsoft.Extensions.Internal.ParameterDefaultValue : object {
    private static Type _nullable;
    private static ParameterDefaultValue();
    [NullableContextAttribute("1")]
public static bool TryGetDefaultValue(ParameterInfo parameter, Object& defaultValue);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2067:UnrecognizedReflectionPattern")]
internal static object <TryGetDefaultValue>g__CreateValueType|1_0(Type t);
}
internal static class Microsoft.Extensions.Internal.TypeNameHelper : object {
    private static char DefaultNestedTypeDelimiter;
    private static Dictionary`2<Type, string> _builtInTypeNames;
    private static TypeNameHelper();
    public static string GetTypeDisplayName(object item, bool fullName);
    public static string GetTypeDisplayName(Type type, bool fullName, bool includeGenericParameterNames, bool includeGenericParameters, char nestedTypeDelimiter);
    private static void ProcessType(StringBuilder builder, Type type, DisplayNameOptions& options);
    private static void ProcessArrayType(StringBuilder builder, Type type, DisplayNameOptions& options);
    private static void ProcessGenericType(StringBuilder builder, Type type, Type[] genericArguments, int length, DisplayNameOptions& options);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string AmbiguousConstructorException { get; }
    internal static string CannotResolveService { get; }
    internal static string CircularDependencyException { get; }
    internal static string UnableToActivateTypeException { get; }
    internal static string OpenGenericServiceRequiresOpenGenericImplementation { get; }
    internal static string TypeCannotBeActivated { get; }
    internal static string NoConstructorMatch { get; }
    internal static string ScopedInSingletonException { get; }
    internal static string ScopedResolvedFromRootException { get; }
    internal static string DirectScopedResolvedFromRootException { get; }
    internal static string ConstantCantBeConvertedToServiceType { get; }
    internal static string ImplementationTypeCantBeConvertedToServiceType { get; }
    internal static string AsyncDisposableServiceDispose { get; }
    private static SR();
    private static bool UsingResourceKeys();
    [NullableContextAttribute("1")]
internal static string GetResourceString(string resourceKey, string defaultString);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, object p1);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(string resourceFormat, object p1, object p2, object p3);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, Object[] args);
    [NullableContextAttribute("1")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    [NullableContextAttribute("1")]
internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_AmbiguousConstructorException();
    internal static string get_CannotResolveService();
    internal static string get_CircularDependencyException();
    internal static string get_UnableToActivateTypeException();
    internal static string get_OpenGenericServiceRequiresOpenGenericImplementation();
    internal static string get_TypeCannotBeActivated();
    internal static string get_NoConstructorMatch();
    internal static string get_ScopedInSingletonException();
    internal static string get_ScopedResolvedFromRootException();
    internal static string get_DirectScopedResolvedFromRootException();
    internal static string get_ConstantCantBeConvertedToServiceType();
    internal static string get_ImplementationTypeCantBeConvertedToServiceType();
    internal static string get_AsyncDisposableServiceDispose();
}
