public class Microsoft.Extensions.Hosting.ConsoleLifetimeOptions : object {
    [CompilerGeneratedAttribute]
private bool <SuppressStatusMessages>k__BackingField;
    public bool SuppressStatusMessages { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_SuppressStatusMessages();
    [CompilerGeneratedAttribute]
public void set_SuppressStatusMessages(bool value);
}
public static class Microsoft.Extensions.Hosting.Host : object {
    public static IHostBuilder CreateDefaultBuilder();
    public static IHostBuilder CreateDefaultBuilder(String[] args);
}
public class Microsoft.Extensions.Hosting.HostBuilder : object {
    private List`1<Action`1<IConfigurationBuilder>> _configureHostConfigActions;
    private List`1<Action`2<HostBuilderContext, IConfigurationBuilder>> _configureAppConfigActions;
    private List`1<Action`2<HostBuilderContext, IServiceCollection>> _configureServicesActions;
    private List`1<IConfigureContainerAdapter> _configureContainerActions;
    private IServiceFactoryAdapter _serviceProviderFactory;
    private bool _hostBuilt;
    private IConfiguration _hostConfiguration;
    private IConfiguration _appConfiguration;
    private HostBuilderContext _hostBuilderContext;
    private HostingEnvironment _hostingEnvironment;
    private IServiceProvider _appServices;
    [CompilerGeneratedAttribute]
private IDictionary`2<object, object> <Properties>k__BackingField;
    public IDictionary`2<object, object> Properties { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<object, object> get_Properties();
    public sealed virtual IHostBuilder ConfigureHostConfiguration(Action`1<IConfigurationBuilder> configureDelegate);
    public sealed virtual IHostBuilder ConfigureAppConfiguration(Action`2<HostBuilderContext, IConfigurationBuilder> configureDelegate);
    public sealed virtual IHostBuilder ConfigureServices(Action`2<HostBuilderContext, IServiceCollection> configureDelegate);
    public sealed virtual IHostBuilder UseServiceProviderFactory(IServiceProviderFactory`1<TContainerBuilder> factory);
    public sealed virtual IHostBuilder UseServiceProviderFactory(Func`2<HostBuilderContext, IServiceProviderFactory`1<TContainerBuilder>> factory);
    public sealed virtual IHostBuilder ConfigureContainer(Action`2<HostBuilderContext, TContainerBuilder> configureDelegate);
    public sealed virtual IHost Build();
    private void BuildHostConfiguration();
    private void CreateHostingEnvironment();
    private string ResolveContentRootPath(string contentRootPath, string basePath);
    private void CreateHostBuilderContext();
    private void BuildAppConfiguration();
    private void CreateServiceProvider();
    [CompilerGeneratedAttribute]
private HostBuilderContext <UseServiceProviderFactory>b__18_0();
    [CompilerGeneratedAttribute]
private IConfiguration <CreateServiceProvider>b__26_0(IServiceProvider _);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.HostingHostBuilderExtensions : object {
    [ExtensionAttribute]
public static IHostBuilder UseEnvironment(IHostBuilder hostBuilder, string environment);
    [ExtensionAttribute]
public static IHostBuilder UseContentRoot(IHostBuilder hostBuilder, string contentRoot);
    [ExtensionAttribute]
public static IHostBuilder UseDefaultServiceProvider(IHostBuilder hostBuilder, Action`1<ServiceProviderOptions> configure);
    [ExtensionAttribute]
public static IHostBuilder UseDefaultServiceProvider(IHostBuilder hostBuilder, Action`2<HostBuilderContext, ServiceProviderOptions> configure);
    [ExtensionAttribute]
public static IHostBuilder ConfigureLogging(IHostBuilder hostBuilder, Action`2<HostBuilderContext, ILoggingBuilder> configureLogging);
    [ExtensionAttribute]
public static IHostBuilder ConfigureLogging(IHostBuilder hostBuilder, Action`1<ILoggingBuilder> configureLogging);
    [ExtensionAttribute]
public static IHostBuilder ConfigureAppConfiguration(IHostBuilder hostBuilder, Action`1<IConfigurationBuilder> configureDelegate);
    [ExtensionAttribute]
public static IHostBuilder ConfigureServices(IHostBuilder hostBuilder, Action`1<IServiceCollection> configureDelegate);
    [ExtensionAttribute]
public static IHostBuilder ConfigureContainer(IHostBuilder hostBuilder, Action`1<TContainerBuilder> configureDelegate);
    [ExtensionAttribute]
public static IHostBuilder UseConsoleLifetime(IHostBuilder hostBuilder);
    [ExtensionAttribute]
public static IHostBuilder UseConsoleLifetime(IHostBuilder hostBuilder, Action`1<ConsoleLifetimeOptions> configureOptions);
    [ExtensionAttribute]
public static Task RunConsoleAsync(IHostBuilder hostBuilder, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task RunConsoleAsync(IHostBuilder hostBuilder, Action`1<ConsoleLifetimeOptions> configureOptions, CancellationToken cancellationToken);
}
public class Microsoft.Extensions.Hosting.HostOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <ShutdownTimeout>k__BackingField;
    public TimeSpan ShutdownTimeout { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_ShutdownTimeout();
    [CompilerGeneratedAttribute]
public void set_ShutdownTimeout(TimeSpan value);
}
public class Microsoft.Extensions.Hosting.Internal.ApplicationLifetime : object {
    private CancellationTokenSource _startedSource;
    private CancellationTokenSource _stoppingSource;
    private CancellationTokenSource _stoppedSource;
    private ILogger`1<ApplicationLifetime> _logger;
    public CancellationToken ApplicationStarted { get; }
    public CancellationToken ApplicationStopping { get; }
    public CancellationToken ApplicationStopped { get; }
    public ApplicationLifetime(ILogger`1<ApplicationLifetime> logger);
    public sealed virtual CancellationToken get_ApplicationStarted();
    public sealed virtual CancellationToken get_ApplicationStopping();
    public sealed virtual CancellationToken get_ApplicationStopped();
    public sealed virtual void StopApplication();
    public void NotifyStarted();
    public void NotifyStopped();
    private void ExecuteHandlers(CancellationTokenSource cancel);
}
internal class Microsoft.Extensions.Hosting.Internal.ConfigureContainerAdapter`1 : object {
    private Action`2<HostBuilderContext, TContainerBuilder> _action;
    public ConfigureContainerAdapter`1(Action`2<HostBuilderContext, TContainerBuilder> action);
    public sealed virtual void ConfigureContainer(HostBuilderContext hostContext, object containerBuilder);
}
public class Microsoft.Extensions.Hosting.Internal.ConsoleLifetime : object {
    private ManualResetEvent _shutdownBlock;
    private CancellationTokenRegistration _applicationStartedRegistration;
    private CancellationTokenRegistration _applicationStoppingRegistration;
    [CompilerGeneratedAttribute]
private ConsoleLifetimeOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IHostEnvironment <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private IHostApplicationLifetime <ApplicationLifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private HostOptions <HostOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    private ConsoleLifetimeOptions Options { get; }
    private IHostEnvironment Environment { get; }
    private IHostApplicationLifetime ApplicationLifetime { get; }
    private HostOptions HostOptions { get; }
    private ILogger Logger { get; }
    public ConsoleLifetime(IOptions`1<ConsoleLifetimeOptions> options, IHostEnvironment environment, IHostApplicationLifetime applicationLifetime, IOptions`1<HostOptions> hostOptions);
    public ConsoleLifetime(IOptions`1<ConsoleLifetimeOptions> options, IHostEnvironment environment, IHostApplicationLifetime applicationLifetime, IOptions`1<HostOptions> hostOptions, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
private ConsoleLifetimeOptions get_Options();
    [CompilerGeneratedAttribute]
private IHostEnvironment get_Environment();
    [CompilerGeneratedAttribute]
private IHostApplicationLifetime get_ApplicationLifetime();
    [CompilerGeneratedAttribute]
private HostOptions get_HostOptions();
    [CompilerGeneratedAttribute]
private ILogger get_Logger();
    public sealed virtual Task WaitForStartAsync(CancellationToken cancellationToken);
    private void OnApplicationStarted();
    private void OnApplicationStopping();
    private void OnProcessExit(object sender, EventArgs e);
    private void OnCancelKeyPress(object sender, ConsoleCancelEventArgs e);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
}
internal class Microsoft.Extensions.Hosting.Internal.Host : object {
    private ILogger`1<Host> _logger;
    private IHostLifetime _hostLifetime;
    private ApplicationLifetime _applicationLifetime;
    private HostOptions _options;
    private IEnumerable`1<IHostedService> _hostedServices;
    [CompilerGeneratedAttribute]
private IServiceProvider <Services>k__BackingField;
    public IServiceProvider Services { get; }
    public Host(IServiceProvider services, IHostApplicationLifetime applicationLifetime, ILogger`1<Host> logger, IHostLifetime hostLifetime, IOptions`1<HostOptions> options);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_Services();
    [AsyncStateMachineAttribute("Microsoft.Extensions.Hosting.Internal.Host/<StartAsync>d__9")]
public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Hosting.Internal.Host/<StopAsync>d__10")]
public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Extensions.Hosting.Internal.Host/<DisposeAsync>d__12")]
public sealed virtual ValueTask DisposeAsync();
}
public class Microsoft.Extensions.Hosting.Internal.HostingEnvironment : object {
    [CompilerGeneratedAttribute]
private string <EnvironmentName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentRootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileProvider <ContentRootFileProvider>k__BackingField;
    public string EnvironmentName { get; public set; }
    public string ApplicationName { get; public set; }
    public string ContentRootPath { get; public set; }
    public IFileProvider ContentRootFileProvider { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_EnvironmentName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnvironmentName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ApplicationName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ApplicationName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentRootPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentRootPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IFileProvider get_ContentRootFileProvider();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentRootFileProvider(IFileProvider value);
}
[ExtensionAttribute]
internal static class Microsoft.Extensions.Hosting.Internal.HostingLoggerExtensions : object {
    [ExtensionAttribute]
public static void ApplicationError(ILogger logger, EventId eventId, string message, Exception exception);
    [ExtensionAttribute]
public static void Starting(ILogger logger);
    [ExtensionAttribute]
public static void Started(ILogger logger);
    [ExtensionAttribute]
public static void Stopping(ILogger logger);
    [ExtensionAttribute]
public static void Stopped(ILogger logger);
    [ExtensionAttribute]
public static void StoppedWithException(ILogger logger, Exception ex);
}
internal interface Microsoft.Extensions.Hosting.Internal.IConfigureContainerAdapter {
    public abstract virtual void ConfigureContainer(HostBuilderContext hostContext, object containerBuilder);
}
internal interface Microsoft.Extensions.Hosting.Internal.IServiceFactoryAdapter {
    public abstract virtual object CreateBuilder(IServiceCollection services);
    public abstract virtual IServiceProvider CreateServiceProvider(object containerBuilder);
}
internal static class Microsoft.Extensions.Hosting.Internal.LoggerEventIds : object {
    public static int Starting;
    public static int Started;
    public static int Stopping;
    public static int Stopped;
    public static int StoppedWithException;
    public static int ApplicationStartupException;
    public static int ApplicationStoppingException;
    public static int ApplicationStoppedException;
}
internal class Microsoft.Extensions.Hosting.Internal.ServiceFactoryAdapter`1 : object {
    private IServiceProviderFactory`1<TContainerBuilder> _serviceProviderFactory;
    private Func`1<HostBuilderContext> _contextResolver;
    private Func`2<HostBuilderContext, IServiceProviderFactory`1<TContainerBuilder>> _factoryResolver;
    public ServiceFactoryAdapter`1(IServiceProviderFactory`1<TContainerBuilder> serviceProviderFactory);
    public ServiceFactoryAdapter`1(Func`1<HostBuilderContext> contextResolver, Func`2<HostBuilderContext, IServiceProviderFactory`1<TContainerBuilder>> factoryResolver);
    public sealed virtual object CreateBuilder(IServiceCollection services);
    public sealed virtual IServiceProvider CreateServiceProvider(object containerBuilder);
}
