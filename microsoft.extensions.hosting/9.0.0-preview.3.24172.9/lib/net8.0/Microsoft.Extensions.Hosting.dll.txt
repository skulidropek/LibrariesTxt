internal static class FxResources.Microsoft.Extensions.Hosting.SR : object {
}
public enum Microsoft.Extensions.Hosting.BackgroundServiceExceptionBehavior : Enum {
    public int value__;
    public static BackgroundServiceExceptionBehavior StopHost;
    public static BackgroundServiceExceptionBehavior Ignore;
}
public class Microsoft.Extensions.Hosting.ConsoleLifetimeOptions : object {
    [CompilerGeneratedAttribute]
private bool <SuppressStatusMessages>k__BackingField;
    public bool SuppressStatusMessages { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_SuppressStatusMessages();
    [CompilerGeneratedAttribute]
public void set_SuppressStatusMessages(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Extensions.Hosting.Host : object {
    public static IHostBuilder CreateDefaultBuilder();
    public static IHostBuilder CreateDefaultBuilder(String[] args);
    public static HostApplicationBuilder CreateApplicationBuilder();
    public static HostApplicationBuilder CreateApplicationBuilder(String[] args);
    public static HostApplicationBuilder CreateApplicationBuilder(HostApplicationBuilderSettings settings);
    public static HostApplicationBuilder CreateEmptyApplicationBuilder(HostApplicationBuilderSettings settings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Hosting.HostApplicationBuilder : object {
    private HostBuilderContext _hostBuilderContext;
    private ServiceCollection _serviceCollection;
    private IHostEnvironment _environment;
    private LoggingBuilder _logging;
    private MetricsBuilder _metrics;
    private Func`1<IServiceProvider> _createServiceProvider;
    private Action`1<object> _configureContainer;
    private HostBuilderAdapter _hostBuilderAdapter;
    private IServiceProvider _appServices;
    private bool _hostBuilt;
    [CompilerGeneratedAttribute]
private ConfigurationManager <Configuration>k__BackingField;
    private IDictionary`2<object, object> Microsoft.Extensions.Hosting.IHostApplicationBuilder.Properties { get; }
    public IHostEnvironment Environment { get; }
    public ConfigurationManager Configuration { get; }
    private IConfigurationManager Microsoft.Extensions.Hosting.IHostApplicationBuilder.Configuration { get; }
    public IServiceCollection Services { get; }
    public ILoggingBuilder Logging { get; }
    public IMetricsBuilder Metrics { get; }
    public HostApplicationBuilder(String[] args);
    [NullableContextAttribute("2")]
public HostApplicationBuilder(HostApplicationBuilderSettings settings);
    internal HostApplicationBuilder(HostApplicationBuilderSettings settings, bool empty);
    private void Initialize(HostApplicationBuilderSettings settings, HostBuilderContext& hostBuilderContext, IHostEnvironment& environment, LoggingBuilder& logging, MetricsBuilder& metrics);
    private sealed virtual override IDictionary`2<object, object> Microsoft.Extensions.Hosting.IHostApplicationBuilder.get_Properties();
    public sealed virtual IHostEnvironment get_Environment();
    [CompilerGeneratedAttribute]
public ConfigurationManager get_Configuration();
    private sealed virtual override IConfigurationManager Microsoft.Extensions.Hosting.IHostApplicationBuilder.get_Configuration();
    public sealed virtual IServiceCollection get_Services();
    public sealed virtual ILoggingBuilder get_Logging();
    public sealed virtual IMetricsBuilder get_Metrics();
    public sealed virtual void ConfigureContainer(IServiceProviderFactory`1<TContainerBuilder> factory, Action`1<TContainerBuilder> configure);
    public IHost Build();
    internal IHostBuilder AsHostBuilder();
    [CompilerGeneratedAttribute]
private IServiceProvider <.ctor>b__13_0();
    [CompilerGeneratedAttribute]
private IServiceProvider <Initialize>b__14_0();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Hosting.HostApplicationBuilderSettings : object {
    [CompilerGeneratedAttribute]
private bool <DisableDefaults>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Args>k__BackingField;
    [CompilerGeneratedAttribute]
private ConfigurationManager <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EnvironmentName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentRootPath>k__BackingField;
    public bool DisableDefaults { get; public set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public String[] Args { get; public set; }
    public ConfigurationManager Configuration { get; public set; }
    public string EnvironmentName { get; public set; }
    public string ApplicationName { get; public set; }
    public string ContentRootPath { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_DisableDefaults();
    [CompilerGeneratedAttribute]
public void set_DisableDefaults(bool value);
    [CompilerGeneratedAttribute]
public String[] get_Args();
    [CompilerGeneratedAttribute]
public void set_Args(String[] value);
    [CompilerGeneratedAttribute]
public ConfigurationManager get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(ConfigurationManager value);
    [CompilerGeneratedAttribute]
public string get_EnvironmentName();
    [CompilerGeneratedAttribute]
public void set_EnvironmentName(string value);
    [CompilerGeneratedAttribute]
public string get_ApplicationName();
    [CompilerGeneratedAttribute]
public void set_ApplicationName(string value);
    [CompilerGeneratedAttribute]
public string get_ContentRootPath();
    [CompilerGeneratedAttribute]
public void set_ContentRootPath(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Hosting.HostBuilder : object {
    private static string HostBuildingDiagnosticListenerName;
    private static string HostBuildingEventName;
    private static string HostBuiltEventName;
    private List`1<Action`1<IConfigurationBuilder>> _configureHostConfigActions;
    private List`1<Action`2<HostBuilderContext, IConfigurationBuilder>> _configureAppConfigActions;
    private List`1<Action`2<HostBuilderContext, IServiceCollection>> _configureServicesActions;
    private List`1<IConfigureContainerAdapter> _configureContainerActions;
    private IServiceFactoryAdapter _serviceProviderFactory;
    private bool _hostBuilt;
    private IConfiguration _hostConfiguration;
    private IConfiguration _appConfiguration;
    private HostBuilderContext _hostBuilderContext;
    private HostingEnvironment _hostingEnvironment;
    private IServiceProvider _appServices;
    private PhysicalFileProvider _defaultProvider;
    [CompilerGeneratedAttribute]
private IDictionary`2<object, object> <Properties>k__BackingField;
    public IDictionary`2<object, object> Properties { get; }
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<object, object> get_Properties();
    public sealed virtual IHostBuilder ConfigureHostConfiguration(Action`1<IConfigurationBuilder> configureDelegate);
    public sealed virtual IHostBuilder ConfigureAppConfiguration(Action`2<HostBuilderContext, IConfigurationBuilder> configureDelegate);
    public sealed virtual IHostBuilder ConfigureServices(Action`2<HostBuilderContext, IServiceCollection> configureDelegate);
    public sealed virtual IHostBuilder UseServiceProviderFactory(IServiceProviderFactory`1<TContainerBuilder> factory);
    public sealed virtual IHostBuilder UseServiceProviderFactory(Func`2<HostBuilderContext, IServiceProviderFactory`1<TContainerBuilder>> factory);
    public sealed virtual IHostBuilder ConfigureContainer(Action`2<HostBuilderContext, TContainerBuilder> configureDelegate);
    public sealed virtual IHost Build();
    private static DiagnosticListener LogHostBuilding(IHostBuilder hostBuilder);
    internal static DiagnosticListener LogHostBuilding(HostApplicationBuilder hostApplicationBuilder);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:UnrecognizedReflectionPattern")]
private static void Write(DiagnosticListener diagnosticSource, string name, T value);
    [MemberNotNullAttribute("_hostConfiguration")]
private void InitializeHostConfiguration();
    [MemberNotNullAttribute("_defaultProvider")]
[MemberNotNullAttribute("_hostingEnvironment")]
private void InitializeHostingEnvironment();
    internal static ValueTuple`2<HostingEnvironment, PhysicalFileProvider> CreateHostingEnvironment(IConfiguration hostConfiguration);
    internal static string ResolveContentRootPath(string contentRootPath, string basePath);
    [MemberNotNullAttribute("_hostBuilderContext")]
private void InitializeHostBuilderContext();
    [MemberNotNullAttribute("_appConfiguration")]
private void InitializeAppConfiguration();
    [MemberNotNullAttribute("_appServices")]
internal static void PopulateServiceCollection(IServiceCollection services, HostBuilderContext hostBuilderContext, HostingEnvironment hostingEnvironment, PhysicalFileProvider defaultFileProvider, IConfiguration appConfiguration, Func`1<IServiceProvider> serviceProviderGetter);
    [MemberNotNullAttribute("_appServices")]
private void InitializeServiceProvider();
    internal static IHost ResolveHost(IServiceProvider serviceProvider, DiagnosticListener diagnosticListener);
    private static void AddLifetime(IServiceCollection services);
    [CompilerGeneratedAttribute]
private HostBuilderContext <UseServiceProviderFactory>b__23_0();
    [CompilerGeneratedAttribute]
private IServiceProvider <InitializeServiceProvider>b__36_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.HostingHostBuilderExtensions : object {
    [ExtensionAttribute]
public static IHostBuilder UseEnvironment(IHostBuilder hostBuilder, string environment);
    [ExtensionAttribute]
public static IHostBuilder UseContentRoot(IHostBuilder hostBuilder, string contentRoot);
    [ExtensionAttribute]
public static IHostBuilder UseDefaultServiceProvider(IHostBuilder hostBuilder, Action`1<ServiceProviderOptions> configure);
    [ExtensionAttribute]
public static IHostBuilder UseDefaultServiceProvider(IHostBuilder hostBuilder, Action`2<HostBuilderContext, ServiceProviderOptions> configure);
    [ExtensionAttribute]
public static IHostBuilder ConfigureLogging(IHostBuilder hostBuilder, Action`2<HostBuilderContext, ILoggingBuilder> configureLogging);
    [ExtensionAttribute]
public static IHostBuilder ConfigureLogging(IHostBuilder hostBuilder, Action`1<ILoggingBuilder> configureLogging);
    [ExtensionAttribute]
public static IHostBuilder ConfigureHostOptions(IHostBuilder hostBuilder, Action`2<HostBuilderContext, HostOptions> configureOptions);
    [ExtensionAttribute]
public static IHostBuilder ConfigureHostOptions(IHostBuilder hostBuilder, Action`1<HostOptions> configureOptions);
    [ExtensionAttribute]
public static IHostBuilder ConfigureAppConfiguration(IHostBuilder hostBuilder, Action`1<IConfigurationBuilder> configureDelegate);
    [ExtensionAttribute]
public static IHostBuilder ConfigureServices(IHostBuilder hostBuilder, Action`1<IServiceCollection> configureDelegate);
    [ExtensionAttribute]
public static IHostBuilder ConfigureContainer(IHostBuilder hostBuilder, Action`1<TContainerBuilder> configureDelegate);
    [ExtensionAttribute]
public static IHostBuilder ConfigureDefaults(IHostBuilder builder, String[] args);
    private static void ApplyDefaultHostConfiguration(IConfigurationBuilder hostConfigBuilder, String[] args);
    internal static void SetDefaultContentRoot(IConfigurationBuilder hostConfigBuilder);
    internal static void ApplyDefaultAppConfiguration(HostBuilderContext hostingContext, IConfigurationBuilder appConfigBuilder, String[] args);
    internal static void AddCommandLineConfig(IConfigurationBuilder configBuilder, String[] args);
    internal static void AddDefaultServices(HostBuilderContext hostingContext, IServiceCollection services);
    internal static ServiceProviderOptions CreateDefaultServiceProviderOptions(HostBuilderContext context);
    [ExtensionAttribute]
[UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static IHostBuilder UseConsoleLifetime(IHostBuilder hostBuilder);
    [ExtensionAttribute]
[UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static IHostBuilder UseConsoleLifetime(IHostBuilder hostBuilder, Action`1<ConsoleLifetimeOptions> configureOptions);
    [ExtensionAttribute]
[UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static Task RunConsoleAsync(IHostBuilder hostBuilder, CancellationToken cancellationToken);
    [ExtensionAttribute]
[UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public static Task RunConsoleAsync(IHostBuilder hostBuilder, Action`1<ConsoleLifetimeOptions> configureOptions, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static IHostBuilder ConfigureMetrics(IHostBuilder hostBuilder, Action`1<IMetricsBuilder> configureMetrics);
    [ExtensionAttribute]
public static IHostBuilder ConfigureMetrics(IHostBuilder hostBuilder, Action`2<HostBuilderContext, IMetricsBuilder> configureMetrics);
    [CompilerGeneratedAttribute]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
internal static bool <ApplyDefaultAppConfiguration>g__GetReloadConfigOnChangeValue|14_0(HostBuilderContext hostingContext);
}
public class Microsoft.Extensions.Hosting.HostOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <ShutdownTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <StartupTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ServicesStartConcurrently>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ServicesStopConcurrently>k__BackingField;
    [CompilerGeneratedAttribute]
private BackgroundServiceExceptionBehavior <BackgroundServiceExceptionBehavior>k__BackingField;
    public TimeSpan ShutdownTimeout { get; public set; }
    public TimeSpan StartupTimeout { get; public set; }
    public bool ServicesStartConcurrently { get; public set; }
    public bool ServicesStopConcurrently { get; public set; }
    public BackgroundServiceExceptionBehavior BackgroundServiceExceptionBehavior { get; public set; }
    [CompilerGeneratedAttribute]
public TimeSpan get_ShutdownTimeout();
    [CompilerGeneratedAttribute]
public void set_ShutdownTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_StartupTimeout();
    [CompilerGeneratedAttribute]
public void set_StartupTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_ServicesStartConcurrently();
    [CompilerGeneratedAttribute]
public void set_ServicesStartConcurrently(bool value);
    [CompilerGeneratedAttribute]
public bool get_ServicesStopConcurrently();
    [CompilerGeneratedAttribute]
public void set_ServicesStopConcurrently(bool value);
    [CompilerGeneratedAttribute]
public BackgroundServiceExceptionBehavior get_BackgroundServiceExceptionBehavior();
    [CompilerGeneratedAttribute]
public void set_BackgroundServiceExceptionBehavior(BackgroundServiceExceptionBehavior value);
    internal void Initialize(IConfiguration configuration);
}
[DebuggerDisplayAttribute("ApplicationStarted = {ApplicationStarted.IsCancellationRequested}, ApplicationStopping = {ApplicationStopping.IsCancellationRequested}, ApplicationStopped = {ApplicationStopped.IsCancellationRequested}")]
public class Microsoft.Extensions.Hosting.Internal.ApplicationLifetime : object {
    private CancellationTokenSource _startedSource;
    private CancellationTokenSource _stoppingSource;
    private CancellationTokenSource _stoppedSource;
    private ILogger`1<ApplicationLifetime> _logger;
    public CancellationToken ApplicationStarted { get; }
    public CancellationToken ApplicationStopping { get; }
    public CancellationToken ApplicationStopped { get; }
    [NullableContextAttribute("1")]
public ApplicationLifetime(ILogger`1<ApplicationLifetime> logger);
    public sealed virtual CancellationToken get_ApplicationStarted();
    public sealed virtual CancellationToken get_ApplicationStopping();
    public sealed virtual CancellationToken get_ApplicationStopped();
    public sealed virtual void StopApplication();
    public void NotifyStarted();
    public void NotifyStopped();
}
internal class Microsoft.Extensions.Hosting.Internal.ConfigureContainerAdapter`1 : object {
    private Action`2<HostBuilderContext, TContainerBuilder> _action;
    public ConfigureContainerAdapter`1(Action`2<HostBuilderContext, TContainerBuilder> action);
    public sealed virtual void ConfigureContainer(HostBuilderContext hostContext, object containerBuilder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
public class Microsoft.Extensions.Hosting.Internal.ConsoleLifetime : object {
    private CancellationTokenRegistration _applicationStartedRegistration;
    private CancellationTokenRegistration _applicationStoppingRegistration;
    [CompilerGeneratedAttribute]
private ConsoleLifetimeOptions <Options>k__BackingField;
    [CompilerGeneratedAttribute]
private IHostEnvironment <Environment>k__BackingField;
    [CompilerGeneratedAttribute]
private IHostApplicationLifetime <ApplicationLifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private HostOptions <HostOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    private PosixSignalRegistration _sigIntRegistration;
    private PosixSignalRegistration _sigQuitRegistration;
    private PosixSignalRegistration _sigTermRegistration;
    private ConsoleLifetimeOptions Options { get; }
    private IHostEnvironment Environment { get; }
    private IHostApplicationLifetime ApplicationLifetime { get; }
    private HostOptions HostOptions { get; }
    private ILogger Logger { get; }
    public ConsoleLifetime(IOptions`1<ConsoleLifetimeOptions> options, IHostEnvironment environment, IHostApplicationLifetime applicationLifetime, IOptions`1<HostOptions> hostOptions);
    public ConsoleLifetime(IOptions`1<ConsoleLifetimeOptions> options, IHostEnvironment environment, IHostApplicationLifetime applicationLifetime, IOptions`1<HostOptions> hostOptions, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
private ConsoleLifetimeOptions get_Options();
    [CompilerGeneratedAttribute]
private IHostEnvironment get_Environment();
    [CompilerGeneratedAttribute]
private IHostApplicationLifetime get_ApplicationLifetime();
    [CompilerGeneratedAttribute]
private HostOptions get_HostOptions();
    [CompilerGeneratedAttribute]
private ILogger get_Logger();
    public sealed virtual Task WaitForStartAsync(CancellationToken cancellationToken);
    private void RegisterShutdownHandlers();
    private void OnApplicationStarted();
    private void OnApplicationStopping();
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    private void UnregisterShutdownHandlers();
    private void HandlePosixSignal(PosixSignalContext context);
}
[DebuggerDisplayAttribute("{DebuggerToString(),nq}")]
[DebuggerTypeProxyAttribute("Microsoft.Extensions.Hosting.Internal.Host/HostDebugView")]
internal class Microsoft.Extensions.Hosting.Internal.Host : object {
    private ILogger`1<Host> _logger;
    private IHostLifetime _hostLifetime;
    private ApplicationLifetime _applicationLifetime;
    private HostOptions _options;
    private IHostEnvironment _hostEnvironment;
    private PhysicalFileProvider _defaultProvider;
    private IEnumerable`1<IHostedService> _hostedServices;
    private IEnumerable`1<IHostedLifecycleService> _hostedLifecycleServices;
    private bool _hostStarting;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _stopCalled;
    private bool _hostStopped;
    [CompilerGeneratedAttribute]
private IServiceProvider <Services>k__BackingField;
    public IServiceProvider Services { get; }
    private bool IsRunning { get; }
    public Host(IServiceProvider services, IHostEnvironment hostEnvironment, PhysicalFileProvider defaultProvider, IHostApplicationLifetime applicationLifetime, ILogger`1<Host> logger, IHostLifetime hostLifetime, IOptions`1<HostOptions> options);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_Services();
    [AsyncStateMachineAttribute("Microsoft.Extensions.Hosting.Internal.Host/<StartAsync>d__15")]
public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Hosting.Internal.Host/<TryExecuteBackgroundServiceAsync>d__16")]
private Task TryExecuteBackgroundServiceAsync(BackgroundService backgroundService);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Hosting.Internal.Host/<StopAsync>d__17")]
public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Hosting.Internal.Host/<ForeachService>d__18`1")]
private static Task ForeachService(IEnumerable`1<T> services, CancellationToken token, bool concurrent, bool abortOnFirstException, List`1<Exception> exceptions, Func`3<T, CancellationToken, Task> operation);
    private static List`1<IHostedLifecycleService> GetHostLifecycles(IEnumerable`1<IHostedService> hostedServices);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.Extensions.Hosting.Internal.Host/<DisposeAsync>d__21")]
public sealed virtual ValueTask DisposeAsync();
    private string DebuggerToString();
    private bool get_IsRunning();
    [AsyncStateMachineAttribute("Microsoft.Extensions.Hosting.Internal.Host/<<StartAsync>b__15_1>d")]
[CompilerGeneratedAttribute]
private Task <StartAsync>b__15_1(IHostedService service, CancellationToken token);
    [CompilerGeneratedAttribute]
private void <StartAsync>g__LogAndRethrow|15_3(<>c__DisplayClass15_0& );
    [CompilerGeneratedAttribute]
internal static ValueTask <DisposeAsync>g__DisposeAsync|21_0(object o);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("ApplicationName = {ApplicationName}, EnvironmentName = {EnvironmentName}")]
public class Microsoft.Extensions.Hosting.Internal.HostingEnvironment : object {
    [CompilerGeneratedAttribute]
private string <EnvironmentName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ApplicationName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentRootPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IFileProvider <ContentRootFileProvider>k__BackingField;
    public string EnvironmentName { get; public set; }
    public string ApplicationName { get; public set; }
    public string ContentRootPath { get; public set; }
    public IFileProvider ContentRootFileProvider { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_EnvironmentName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_EnvironmentName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ApplicationName();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ApplicationName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ContentRootPath();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentRootPath(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IFileProvider get_ContentRootFileProvider();
    [CompilerGeneratedAttribute]
public sealed virtual void set_ContentRootFileProvider(IFileProvider value);
}
[ExtensionAttribute]
internal static class Microsoft.Extensions.Hosting.Internal.HostingLoggerExtensions : object {
    [ExtensionAttribute]
public static void ApplicationError(ILogger logger, EventId eventId, string message, Exception exception);
    [ExtensionAttribute]
public static void Starting(ILogger logger);
    [ExtensionAttribute]
public static void Started(ILogger logger);
    [ExtensionAttribute]
public static void Stopping(ILogger logger);
    [ExtensionAttribute]
public static void Stopped(ILogger logger);
    [ExtensionAttribute]
public static void StoppedWithException(ILogger logger, Exception ex);
    [ExtensionAttribute]
public static void BackgroundServiceFaulted(ILogger logger, Exception ex);
    [ExtensionAttribute]
public static void BackgroundServiceStoppingHost(ILogger logger, Exception ex);
    [ExtensionAttribute]
public static void HostedServiceStartupFaulted(ILogger logger, Exception ex);
}
internal interface Microsoft.Extensions.Hosting.Internal.IConfigureContainerAdapter {
    public abstract virtual void ConfigureContainer(HostBuilderContext hostContext, object containerBuilder);
}
internal interface Microsoft.Extensions.Hosting.Internal.IServiceFactoryAdapter {
    public abstract virtual object CreateBuilder(IServiceCollection services);
    public abstract virtual IServiceProvider CreateServiceProvider(object containerBuilder);
}
internal static class Microsoft.Extensions.Hosting.Internal.LoggerEventIds : object {
    public static EventId Starting;
    public static EventId Started;
    public static EventId Stopping;
    public static EventId Stopped;
    public static EventId StoppedWithException;
    public static EventId ApplicationStartupException;
    public static EventId ApplicationStoppingException;
    public static EventId ApplicationStoppedException;
    public static EventId BackgroundServiceFaulted;
    public static EventId BackgroundServiceStoppingHost;
    public static EventId HostedServiceStartupFaulted;
    private static LoggerEventIds();
}
internal class Microsoft.Extensions.Hosting.Internal.NullLifetime : object {
    public sealed virtual Task WaitForStartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
}
internal class Microsoft.Extensions.Hosting.Internal.ServiceFactoryAdapter`1 : object {
    private IServiceProviderFactory`1<TContainerBuilder> _serviceProviderFactory;
    private Func`1<HostBuilderContext> _contextResolver;
    private Func`2<HostBuilderContext, IServiceProviderFactory`1<TContainerBuilder>> _factoryResolver;
    public ServiceFactoryAdapter`1(IServiceProviderFactory`1<TContainerBuilder> serviceProviderFactory);
    public ServiceFactoryAdapter`1(Func`1<HostBuilderContext> contextResolver, Func`2<HostBuilderContext, IServiceProviderFactory`1<TContainerBuilder>> factoryResolver);
    public sealed virtual object CreateBuilder(IServiceCollection services);
    public sealed virtual IServiceProvider CreateServiceProvider(object containerBuilder);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string ApplicationNameChangeNotSupported { get; }
    internal static string BackgroundServiceExceptionStoppedHost { get; }
    internal static string BuildCalled { get; }
    internal static string ContentRootChangeNotSupported { get; }
    internal static string CreateBuilderCallBeforeCreateServiceProvider { get; }
    internal static string EnvironmentNameChangeNotSupoprted { get; }
    internal static string IHostApplicationLifetimeReplacementNotSupported { get; }
    internal static string NullIServiceProvider { get; }
    internal static string ResolverReturnedNull { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_ApplicationNameChangeNotSupported();
    internal static string get_BackgroundServiceExceptionStoppedHost();
    internal static string get_BuildCalled();
    internal static string get_ContentRootChangeNotSupported();
    internal static string get_CreateBuilderCallBeforeCreateServiceProvider();
    internal static string get_EnvironmentNameChangeNotSupoprted();
    internal static string get_IHostApplicationLifetimeReplacementNotSupported();
    internal static string get_NullIServiceProvider();
    internal static string get_ResolverReturnedNull();
}
internal static class System.ThrowHelper : object {
    internal static void ThrowIfNull(object argument, string paramName);
    [DoesNotReturnAttribute]
private static void Throw(string paramName);
    public static string IfNullOrWhitespace(string argument, string paramName);
}
