internal static class FxResources.Microsoft.Extensions.Http.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.DependencyInjection.DefaultHttpClientBuilder : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    public string Name { get; }
    public IServiceCollection Services { get; }
    public DefaultHttpClientBuilder(IServiceCollection services, string name);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Microsoft.Extensions.DependencyInjection.DefaultHttpClientBuilderServiceCollection : object {
    private IServiceCollection _services;
    private bool _isDefault;
    private DefaultHttpClientConfigurationTracker _tracker;
    public ServiceDescriptor Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    public DefaultHttpClientBuilderServiceCollection(IServiceCollection services, bool isDefault, DefaultHttpClientConfigurationTracker tracker);
    public sealed virtual void Add(ServiceDescriptor item);
    public sealed virtual ServiceDescriptor get_Item(int index);
    public sealed virtual void set_Item(int index, ServiceDescriptor value);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Clear();
    public sealed virtual bool Contains(ServiceDescriptor item);
    public sealed virtual void CopyTo(ServiceDescriptor[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<ServiceDescriptor> GetEnumerator();
    public sealed virtual int IndexOf(ServiceDescriptor item);
    public sealed virtual void Insert(int index, ServiceDescriptor item);
    public sealed virtual bool Remove(ServiceDescriptor item);
    public sealed virtual void RemoveAt(int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.DependencyInjection.DefaultHttpClientConfigurationTracker : object {
    [CompilerGeneratedAttribute]
private ServiceDescriptor <InsertDefaultsAfterDescriptor>k__BackingField;
    public ServiceDescriptor InsertDefaultsAfterDescriptor { get; public set; }
    [CompilerGeneratedAttribute]
public ServiceDescriptor get_InsertDefaultsAfterDescriptor();
    [CompilerGeneratedAttribute]
public void set_InsertDefaultsAfterDescriptor(ServiceDescriptor value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions : object {
    [ExtensionAttribute]
public static IHttpClientBuilder ConfigureHttpClient(IHttpClientBuilder builder, Action`1<HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder ConfigureHttpClient(IHttpClientBuilder builder, Action`2<IServiceProvider, HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpMessageHandler(IHttpClientBuilder builder, Func`1<DelegatingHandler> configureHandler);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpMessageHandler(IHttpClientBuilder builder, Func`2<IServiceProvider, DelegatingHandler> configureHandler);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpMessageHandler(IHttpClientBuilder builder);
    [ExtensionAttribute]
public static IHttpClientBuilder ConfigurePrimaryHttpMessageHandler(IHttpClientBuilder builder, Func`1<HttpMessageHandler> configureHandler);
    [ExtensionAttribute]
public static IHttpClientBuilder ConfigurePrimaryHttpMessageHandler(IHttpClientBuilder builder, Func`2<IServiceProvider, HttpMessageHandler> configureHandler);
    [ExtensionAttribute]
public static IHttpClientBuilder ConfigurePrimaryHttpMessageHandler(IHttpClientBuilder builder);
    [ExtensionAttribute]
public static IHttpClientBuilder ConfigurePrimaryHttpMessageHandler(IHttpClientBuilder builder, Action`2<HttpMessageHandler, IServiceProvider> configureHandler);
    [ExtensionAttribute]
[ObsoleteAttribute("This method has been deprecated. Use ConfigurePrimaryHttpMessageHandler or ConfigureAdditionalHttpMessageHandlers instead.")]
public static IHttpClientBuilder ConfigureHttpMessageHandlerBuilder(IHttpClientBuilder builder, Action`1<HttpMessageHandlerBuilder> configureBuilder);
    [ExtensionAttribute]
public static IHttpClientBuilder AddTypedClient(IHttpClientBuilder builder);
    [ExtensionAttribute]
internal static IHttpClientBuilder AddTypedClientCore(IHttpClientBuilder builder, bool validateSingleType);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2091:UnrecognizedReflectionPattern")]
private static TClient AddTransientHelper(IServiceProvider s, IHttpClientBuilder builder);
    [ExtensionAttribute]
public static IHttpClientBuilder AddTypedClient(IHttpClientBuilder builder);
    [ExtensionAttribute]
internal static IHttpClientBuilder AddTypedClientCore(IHttpClientBuilder builder, bool validateSingleType);
    [UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2091:UnrecognizedReflectionPattern")]
private static TClient AddTransientHelper(IServiceProvider s, IHttpClientBuilder builder);
    [ExtensionAttribute]
public static IHttpClientBuilder AddTypedClient(IHttpClientBuilder builder, Func`2<HttpClient, TClient> factory);
    [ExtensionAttribute]
internal static IHttpClientBuilder AddTypedClientCore(IHttpClientBuilder builder, Func`2<HttpClient, TClient> factory, bool validateSingleType);
    [ExtensionAttribute]
public static IHttpClientBuilder AddTypedClient(IHttpClientBuilder builder, Func`3<HttpClient, IServiceProvider, TClient> factory);
    [ExtensionAttribute]
internal static IHttpClientBuilder AddTypedClientCore(IHttpClientBuilder builder, Func`3<HttpClient, IServiceProvider, TClient> factory, bool validateSingleType);
    [ExtensionAttribute]
public static IHttpClientBuilder RedactLoggedHeaders(IHttpClientBuilder builder, Func`2<string, bool> shouldRedactHeaderValue);
    [ExtensionAttribute]
public static IHttpClientBuilder RedactLoggedHeaders(IHttpClientBuilder builder, IEnumerable`1<string> redactedLoggedHeaderNames);
    [ExtensionAttribute]
public static IHttpClientBuilder SetHandlerLifetime(IHttpClientBuilder builder, TimeSpan handlerLifetime);
    [ExtensionAttribute]
public static IHttpClientBuilder ConfigureAdditionalHttpMessageHandlers(IHttpClientBuilder builder, Action`2<IList`1<DelegatingHandler>, IServiceProvider> configureAdditionalHandlers);
    private static void ReserveClient(IHttpClientBuilder builder, Type type, string name, bool validateSingleType);
    [ExtensionAttribute]
public static IHttpClientBuilder AddLogger(IHttpClientBuilder builder, Func`2<IServiceProvider, IHttpClientLogger> httpClientLoggerFactory, bool wrapHandlersPipeline);
    [ExtensionAttribute]
public static IHttpClientBuilder AddLogger(IHttpClientBuilder builder, bool wrapHandlersPipeline);
    [ExtensionAttribute]
public static IHttpClientBuilder RemoveAllLoggers(IHttpClientBuilder builder);
    [ExtensionAttribute]
public static IHttpClientBuilder AddDefaultLogger(IHttpClientBuilder builder);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.HttpClientFactoryServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddHttpClient(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection ConfigureHttpClientDefaults(IServiceCollection services, Action`1<IHttpClientBuilder> configure);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name, Action`1<HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name, Action`2<IServiceProvider, HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, Action`1<HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, Action`2<IServiceProvider, HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, Action`1<HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, Action`2<IServiceProvider, HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name, Action`1<HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name, Action`2<IServiceProvider, HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name, Action`1<HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name, Action`2<IServiceProvider, HttpClient> configureClient);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, Func`2<HttpClient, TImplementation> factory);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name, Func`2<HttpClient, TImplementation> factory);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, Func`3<HttpClient, IServiceProvider, TImplementation> factory);
    [ExtensionAttribute]
public static IHttpClientBuilder AddHttpClient(IServiceCollection services, string name, Func`3<HttpClient, IServiceProvider, TImplementation> factory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.DependencyInjection.HttpClientMappingRegistry : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, Type> <NamedClientRegistrations>k__BackingField;
    public Dictionary`2<string, Type> NamedClientRegistrations { get; }
    [CompilerGeneratedAttribute]
public Dictionary`2<string, Type> get_NamedClientRegistrations();
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.DependencyInjection.IHttpClientBuilder {
    public string Name { get; }
    public IServiceCollection Services { get; }
    public abstract virtual string get_Name();
    public abstract virtual IServiceCollection get_Services();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Http.ActiveHandlerTrackingEntry : object {
    private static TimerCallback _timerCallback;
    private object _lock;
    private bool _timerInitialized;
    private Timer _timer;
    private TimerCallback _callback;
    [CompilerGeneratedAttribute]
private LifetimeTrackingHttpMessageHandler <Handler>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Lifetime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceScope <Scope>k__BackingField;
    public LifetimeTrackingHttpMessageHandler Handler { get; private set; }
    public TimeSpan Lifetime { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public IServiceScope Scope { get; }
    public ActiveHandlerTrackingEntry(string name, LifetimeTrackingHttpMessageHandler handler, IServiceScope scope, TimeSpan lifetime);
    private static ActiveHandlerTrackingEntry();
    [CompilerGeneratedAttribute]
public LifetimeTrackingHttpMessageHandler get_Handler();
    [CompilerGeneratedAttribute]
private void set_Handler(LifetimeTrackingHttpMessageHandler value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Lifetime();
    [CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IServiceScope get_Scope();
    public void StartExpiryTimer(TimerCallback callback);
    private void StartExpiryTimerSlow(TimerCallback callback);
    private void Timer_Tick();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Http.DefaultHttpClientFactory : object {
    private static TimerCallback _cleanupCallback;
    private IServiceProvider _services;
    private IServiceScopeFactory _scopeFactory;
    private IOptionsMonitor`1<HttpClientFactoryOptions> _optionsMonitor;
    private IHttpMessageHandlerBuilderFilter[] _filters;
    private Func`2<string, Lazy`1<ActiveHandlerTrackingEntry>> _entryFactory;
    private Lazy`1<ILogger> _logger;
    private TimeSpan DefaultCleanupInterval;
    private Timer _cleanupTimer;
    private object _cleanupTimerLock;
    private object _cleanupActiveLock;
    internal ConcurrentDictionary`2<string, Lazy`1<ActiveHandlerTrackingEntry>> _activeHandlers;
    internal ConcurrentQueue`1<ExpiredHandlerTrackingEntry> _expiredHandlers;
    private TimerCallback _expiryCallback;
    public DefaultHttpClientFactory(IServiceProvider services, IServiceScopeFactory scopeFactory, IOptionsMonitor`1<HttpClientFactoryOptions> optionsMonitor, IEnumerable`1<IHttpMessageHandlerBuilderFilter> filters);
    private static DefaultHttpClientFactory();
    public sealed virtual HttpClient CreateClient(string name);
    public sealed virtual HttpMessageHandler CreateHandler(string name);
    internal ActiveHandlerTrackingEntry CreateHandlerEntry(string name);
    [NullableContextAttribute("2")]
internal void ExpiryTimer_Tick(object state);
    internal virtual void StartHandlerEntryTimer(ActiveHandlerTrackingEntry entry);
    internal virtual void StartCleanupTimer();
    internal virtual void StopCleanupTimer();
    internal void CleanupTimer_Tick();
    [CompilerGeneratedAttribute]
private Lazy`1<ActiveHandlerTrackingEntry> <.ctor>b__14_0(string name);
    [CompilerGeneratedAttribute]
private ILogger <.ctor>b__14_1();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Http.DefaultHttpMessageHandlerBuilder : HttpMessageHandlerBuilder {
    private string _name;
    [CompilerGeneratedAttribute]
private HttpMessageHandler <PrimaryHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<DelegatingHandler> <AdditionalHandlers>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <Services>k__BackingField;
    [NullableAttribute("2")]
public string Name { get; public set; }
    public HttpMessageHandler PrimaryHandler { get; public set; }
    public IList`1<DelegatingHandler> AdditionalHandlers { get; }
    public IServiceProvider Services { get; }
    public DefaultHttpMessageHandlerBuilder(IServiceProvider services);
    [NullableContextAttribute("2")]
public virtual string get_Name();
    [NullableContextAttribute("2")]
public virtual void set_Name(string value);
    [CompilerGeneratedAttribute]
public virtual HttpMessageHandler get_PrimaryHandler();
    [CompilerGeneratedAttribute]
public virtual void set_PrimaryHandler(HttpMessageHandler value);
    [CompilerGeneratedAttribute]
public virtual IList`1<DelegatingHandler> get_AdditionalHandlers();
    [CompilerGeneratedAttribute]
public virtual IServiceProvider get_Services();
    public virtual HttpMessageHandler Build();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Http.DefaultTypedHttpClientFactory`1 : object {
    private Cache<TClient> _cache;
    private IServiceProvider _services;
    public DefaultTypedHttpClientFactory`1(Cache<TClient> cache, IServiceProvider services);
    public sealed virtual TClient CreateClient(HttpClient httpClient);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Http.ExpiredHandlerTrackingEntry : object {
    private WeakReference _livenessTracker;
    [CompilerGeneratedAttribute]
private HttpMessageHandler <InnerHandler>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceScope <Scope>k__BackingField;
    public bool CanDispose { get; }
    public HttpMessageHandler InnerHandler { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public IServiceScope Scope { get; }
    public ExpiredHandlerTrackingEntry(ActiveHandlerTrackingEntry other);
    public bool get_CanDispose();
    [CompilerGeneratedAttribute]
public HttpMessageHandler get_InnerHandler();
    [CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public IServiceScope get_Scope();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Http.HttpClientFactoryOptions : object {
    internal static TimeSpan MinimumHandlerLifetime;
    private TimeSpan _handlerLifetime;
    [CompilerGeneratedAttribute]
private IList`1<Action`1<HttpMessageHandlerBuilder>> <HttpMessageHandlerBuilderActions>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Action`1<HttpClient>> <HttpClientActions>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`2<string, bool> <ShouldRedactHeaderValue>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressHandlerScope>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SuppressDefaultLogging>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<Action`1<HttpMessageHandlerBuilder>> <LoggingBuilderActions>k__BackingField;
    public IList`1<Action`1<HttpMessageHandlerBuilder>> HttpMessageHandlerBuilderActions { get; }
    public IList`1<Action`1<HttpClient>> HttpClientActions { get; }
    public TimeSpan HandlerLifetime { get; public set; }
    public Func`2<string, bool> ShouldRedactHeaderValue { get; public set; }
    public bool SuppressHandlerScope { get; public set; }
    internal bool SuppressDefaultLogging { get; internal set; }
    internal List`1<Action`1<HttpMessageHandlerBuilder>> LoggingBuilderActions { get; }
    private static HttpClientFactoryOptions();
    [CompilerGeneratedAttribute]
public IList`1<Action`1<HttpMessageHandlerBuilder>> get_HttpMessageHandlerBuilderActions();
    [CompilerGeneratedAttribute]
public IList`1<Action`1<HttpClient>> get_HttpClientActions();
    public TimeSpan get_HandlerLifetime();
    public void set_HandlerLifetime(TimeSpan value);
    [CompilerGeneratedAttribute]
public Func`2<string, bool> get_ShouldRedactHeaderValue();
    [CompilerGeneratedAttribute]
public void set_ShouldRedactHeaderValue(Func`2<string, bool> value);
    [CompilerGeneratedAttribute]
public bool get_SuppressHandlerScope();
    [CompilerGeneratedAttribute]
public void set_SuppressHandlerScope(bool value);
    [CompilerGeneratedAttribute]
internal bool get_SuppressDefaultLogging();
    [CompilerGeneratedAttribute]
internal void set_SuppressDefaultLogging(bool value);
    [CompilerGeneratedAttribute]
internal List`1<Action`1<HttpMessageHandlerBuilder>> get_LoggingBuilderActions();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.Extensions.Http.HttpMessageHandlerBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceProvider <Services>k__BackingField;
    [NullableAttribute("2")]
public string Name { get; public set; }
    public HttpMessageHandler PrimaryHandler { get; public set; }
    public IList`1<DelegatingHandler> AdditionalHandlers { get; }
    public IServiceProvider Services { get; }
    [NullableContextAttribute("2")]
public abstract virtual string get_Name();
    [NullableContextAttribute("2")]
public abstract virtual void set_Name(string value);
    public abstract virtual HttpMessageHandler get_PrimaryHandler();
    public abstract virtual void set_PrimaryHandler(HttpMessageHandler value);
    public abstract virtual IList`1<DelegatingHandler> get_AdditionalHandlers();
    [CompilerGeneratedAttribute]
public virtual IServiceProvider get_Services();
    public abstract virtual HttpMessageHandler Build();
    protected internal static HttpMessageHandler CreateHandlerPipeline(HttpMessageHandler primaryHandler, IEnumerable`1<DelegatingHandler> additionalHandlers);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Http.IHttpMessageHandlerBuilderFilter {
    public abstract virtual Action`1<HttpMessageHandlerBuilder> Configure(Action`1<HttpMessageHandlerBuilder> next);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Http.ITypedHttpClientFactory`1 {
    public abstract virtual TClient CreateClient(HttpClient httpClient);
}
internal class Microsoft.Extensions.Http.LifetimeTrackingHttpMessageHandler : DelegatingHandler {
    [NullableContextAttribute("1")]
public LifetimeTrackingHttpMessageHandler(HttpMessageHandler innerHandler);
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Http.Logging.HttpClientLoggerHandler : DelegatingHandler {
    private IHttpClientLogger _httpClientLogger;
    private IHttpClientAsyncLogger _httpClientAsyncLogger;
    public HttpClientLoggerHandler(IHttpClientLogger httpClientLogger);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Http.Logging.HttpClientLoggerHandler/<SendAsync>d__3")]
protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Microsoft.Extensions.Http.Logging.HttpHeadersLogValue : object {
    private Kind _kind;
    private Func`2<string, bool> _shouldRedactHeaderValue;
    private string _formatted;
    private List`1<KeyValuePair`2<string, object>> _values;
    [CompilerGeneratedAttribute]
private HttpHeaders <Headers>k__BackingField;
    [CompilerGeneratedAttribute]
private HttpHeaders <ContentHeaders>k__BackingField;
    public HttpHeaders Headers { get; }
    [NullableAttribute("2")]
public HttpHeaders ContentHeaders { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<KeyValuePair`2<string, object>> Values { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public KeyValuePair`2<string, object> Item { get; }
    public int Count { get; }
    public HttpHeadersLogValue(Kind kind, HttpHeaders headers, HttpHeaders contentHeaders, Func`2<string, bool> shouldRedactHeaderValue);
    [CompilerGeneratedAttribute]
public HttpHeaders get_Headers();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public HttpHeaders get_ContentHeaders();
    private List`1<KeyValuePair`2<string, object>> get_Values();
    public sealed virtual KeyValuePair`2<string, object> get_Item(int index);
    public sealed virtual int get_Count();
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, object>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Http.Logging.IHttpClientAsyncLogger {
    public abstract virtual ValueTask`1<object> LogRequestStartAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    public abstract virtual ValueTask LogRequestStopAsync(object context, HttpRequestMessage request, HttpResponseMessage response, TimeSpan elapsed, CancellationToken cancellationToken);
    public abstract virtual ValueTask LogRequestFailedAsync(object context, HttpRequestMessage request, HttpResponseMessage response, Exception exception, TimeSpan elapsed, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Http.Logging.IHttpClientLogger {
    public abstract virtual object LogRequestStart(HttpRequestMessage request);
    public abstract virtual void LogRequestStop(object context, HttpRequestMessage request, HttpResponseMessage response, TimeSpan elapsed);
    public abstract virtual void LogRequestFailed(object context, HttpRequestMessage request, HttpResponseMessage response, Exception exception, TimeSpan elapsed);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler : DelegatingHandler {
    private ILogger _logger;
    private HttpClientFactoryOptions _options;
    private static Func`2<string, bool> _shouldNotRedactHeaderValue;
    public LoggingHttpMessageHandler(ILogger logger);
    public LoggingHttpMessageHandler(ILogger logger, HttpClientFactoryOptions options);
    private static LoggingHttpMessageHandler();
    private Task`1<HttpResponseMessage> SendCoreAsync(HttpRequestMessage request, bool useAsync, CancellationToken cancellationToken);
    protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler/<<SendCoreAsync>g__Core|5_0>d")]
[CompilerGeneratedAttribute]
private Task`1<HttpResponseMessage> <SendCoreAsync>g__Core|5_0(HttpRequestMessage request, bool useAsync, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler : DelegatingHandler {
    private ILogger _logger;
    private HttpClientFactoryOptions _options;
    private static Func`2<string, bool> _shouldNotRedactHeaderValue;
    public LoggingScopeHttpMessageHandler(ILogger logger);
    public LoggingScopeHttpMessageHandler(ILogger logger, HttpClientFactoryOptions options);
    private static LoggingScopeHttpMessageHandler();
    private Task`1<HttpResponseMessage> SendCoreAsync(HttpRequestMessage request, bool useAsync, CancellationToken cancellationToken);
    protected virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler/<<SendCoreAsync>g__Core|5_0>d")]
[CompilerGeneratedAttribute]
private Task`1<HttpResponseMessage> <SendCoreAsync>g__Core|5_0(HttpRequestMessage request, bool useAsync, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<HttpResponseMessage> <>n__0(HttpRequestMessage request, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Http.LoggingHttpMessageHandlerBuilderFilter : object {
    private ILoggerFactory _loggerFactory;
    private IServiceProvider _serviceProvider;
    private IOptionsMonitor`1<HttpClientFactoryOptions> _optionsMonitor;
    private ILoggerFactory LoggerFactory { get; }
    public LoggingHttpMessageHandlerBuilderFilter(IServiceProvider serviceProvider, IOptionsMonitor`1<HttpClientFactoryOptions> optionsMonitor);
    private ILoggerFactory get_LoggerFactory();
    public sealed virtual Action`1<HttpMessageHandlerBuilder> Configure(Action`1<HttpMessageHandlerBuilder> next);
}
internal static class Microsoft.Extensions.Internal.NonCapturingTimer : object {
    [NullableContextAttribute("1")]
public static Timer Create(TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);
}
internal static class Microsoft.Extensions.Internal.TypeNameHelper : object {
    private static char DefaultNestedTypeDelimiter;
    private static Dictionary`2<Type, string> _builtInTypeNames;
    private static TypeNameHelper();
    [NullableContextAttribute("2")]
public static string GetTypeDisplayName(object item, bool fullName);
    [NullableContextAttribute("1")]
public static string GetTypeDisplayName(Type type, bool fullName, bool includeGenericParameterNames, bool includeGenericParameters, char nestedTypeDelimiter);
    private static string ProcessType(StringBuilder& builder, Type type, DisplayNameOptions& options);
    private static void ProcessArrayType(StringBuilder builder, Type type, DisplayNameOptions& options);
    private static void ProcessGenericType(StringBuilder builder, Type type, Type[] genericArguments, int length, DisplayNameOptions& options);
}
[IsReadOnlyAttribute]
internal class Microsoft.Extensions.Internal.ValueStopwatch : ValueType {
    private static double s_timestampToTicks;
    private long _startTimestamp;
    public bool IsActive { get; }
    private ValueStopwatch(long startTimestamp);
    private static ValueStopwatch();
    public bool get_IsActive();
    public static ValueStopwatch StartNew();
    public TimeSpan GetElapsedTime();
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("28108")]
internal class System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute : Attribute {
    [CompilerGeneratedAttribute]
private DynamicallyAccessedMemberTypes <MemberTypes>k__BackingField;
    public DynamicallyAccessedMemberTypes MemberTypes { get; }
    public DynamicallyAccessedMembersAttribute(DynamicallyAccessedMemberTypes memberTypes);
    [CompilerGeneratedAttribute]
public DynamicallyAccessedMemberTypes get_MemberTypes();
}
[FlagsAttribute]
internal enum System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes : Enum {
    public int value__;
    public static DynamicallyAccessedMemberTypes None;
    public static DynamicallyAccessedMemberTypes PublicParameterlessConstructor;
    public static DynamicallyAccessedMemberTypes PublicConstructors;
    public static DynamicallyAccessedMemberTypes NonPublicConstructors;
    public static DynamicallyAccessedMemberTypes PublicMethods;
    public static DynamicallyAccessedMemberTypes NonPublicMethods;
    public static DynamicallyAccessedMemberTypes PublicFields;
    public static DynamicallyAccessedMemberTypes NonPublicFields;
    public static DynamicallyAccessedMemberTypes PublicNestedTypes;
    public static DynamicallyAccessedMemberTypes NonPublicNestedTypes;
    public static DynamicallyAccessedMemberTypes PublicProperties;
    public static DynamicallyAccessedMemberTypes NonPublicProperties;
    public static DynamicallyAccessedMemberTypes PublicEvents;
    public static DynamicallyAccessedMemberTypes NonPublicEvents;
    public static DynamicallyAccessedMemberTypes Interfaces;
    public static DynamicallyAccessedMemberTypes All;
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("32767")]
internal class System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CheckId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Scope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Target>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MessageId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Justification>k__BackingField;
    [NullableAttribute("1")]
public string Category { get; }
    [NullableAttribute("1")]
public string CheckId { get; }
    public string Scope { get; public set; }
    public string Target { get; public set; }
    public string MessageId { get; public set; }
    public string Justification { get; public set; }
    [NullableContextAttribute("1")]
public UnconditionalSuppressMessageAttribute(string category, string checkId);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_Category();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_CheckId();
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public string get_MessageId();
    [CompilerGeneratedAttribute]
public void set_MessageId(string value);
    [CompilerGeneratedAttribute]
public string get_Justification();
    [CompilerGeneratedAttribute]
public void set_Justification(string value);
}
[ExtensionAttribute]
public static class System.Net.Http.HttpClientFactoryExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static HttpClient CreateClient(IHttpClientFactory factory);
}
[ExtensionAttribute]
public static class System.Net.Http.HttpMessageHandlerFactoryExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static HttpMessageHandler CreateHandler(IHttpMessageHandlerFactory factory);
}
[NullableContextAttribute("1")]
public interface System.Net.Http.IHttpClientFactory {
    public abstract virtual HttpClient CreateClient(string name);
}
[NullableContextAttribute("1")]
public interface System.Net.Http.IHttpMessageHandlerFactory {
    public abstract virtual HttpMessageHandler CreateHandler(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("2048")]
internal class System.Runtime.CompilerServices.CallerArgumentExpressionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public CallerArgumentExpressionAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.LibraryImportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <LibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMarshalling <StringMarshalling>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StringMarshallingCustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetLastError>k__BackingField;
    [NullableAttribute("1")]
public string LibraryName { get; }
    public string EntryPoint { get; public set; }
    public StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    public bool SetLastError { get; public set; }
    [NullableContextAttribute("1")]
public LibraryImportAttribute(string libraryName);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_LibraryName();
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public StringMarshalling get_StringMarshalling();
    [CompilerGeneratedAttribute]
public void set_StringMarshalling(StringMarshalling value);
    [CompilerGeneratedAttribute]
public Type get_StringMarshallingCustomType();
    [CompilerGeneratedAttribute]
public void set_StringMarshallingCustomType(Type value);
    [CompilerGeneratedAttribute]
public bool get_SetLastError();
    [CompilerGeneratedAttribute]
public void set_SetLastError(bool value);
}
internal enum System.Runtime.InteropServices.StringMarshalling : Enum {
    public int value__;
    public static StringMarshalling Custom;
    public static StringMarshalling Utf8;
    public static StringMarshalling Utf16;
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string HttpMessageHandlerBuilder_AdditionalHandlerIsNull { get; }
    internal static string HttpMessageHandlerBuilder_AdditionHandlerIsInvalid { get; }
    internal static string HttpMessageHandlerBuilder_PrimaryHandlerIsNull { get; }
    internal static string HandlerLifetime_InvalidValue { get; }
    internal static string SocketsHttpHandlerBuilder_PrimaryHandlerIsInvalid { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, object p1);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(string resourceFormat, object p1, object p2, object p3);
    [NullableContextAttribute("1")]
internal static string Format(string resourceFormat, Object[] args);
    [NullableContextAttribute("1")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    [NullableContextAttribute("1")]
internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_HttpMessageHandlerBuilder_AdditionalHandlerIsNull();
    internal static string get_HttpMessageHandlerBuilder_AdditionHandlerIsInvalid();
    internal static string get_HttpMessageHandlerBuilder_PrimaryHandlerIsNull();
    internal static string get_HandlerLifetime_InvalidValue();
    internal static string get_SocketsHttpHandlerBuilder_PrimaryHandlerIsInvalid();
}
internal static class System.ThrowHelper : object {
    [NullableContextAttribute("2")]
internal static void ThrowIfNull(object argument, string paramName);
    private static void Throw(string paramName);
    [NullableContextAttribute("1")]
public static string IfNullOrWhitespace(string argument, string paramName);
}
