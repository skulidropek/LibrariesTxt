[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Identity.AuthenticatorTokenProvider`1 : object {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.AuthenticatorTokenProvider`1/<CanGenerateTwoFactorTokenAsync>d__0")]
public virtual Task`1<bool> CanGenerateTwoFactorTokenAsync(UserManager`1<TUser> manager, TUser user);
    public virtual Task`1<string> GenerateAsync(string purpose, UserManager`1<TUser> manager, TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.AuthenticatorTokenProvider`1/<ValidateAsync>d__2")]
public virtual Task`1<bool> ValidateAsync(string purpose, string token, UserManager`1<TUser> manager, TUser user);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Identity.Base32 : object {
    private static string _base32Chars;
    public static string GenerateBase32();
    public static string ToBase32(Byte[] input);
    public static Byte[] FromBase32(string input);
    private static int GetNextGroup(Span`1<byte> input, Int32& offset, Byte& a, Byte& b, Byte& c, Byte& d, Byte& e, Byte& f, Byte& g, Byte& h);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Identity.ClaimsIdentityOptions : object {
    [CompilerGeneratedAttribute]
private string <RoleClaimType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserNameClaimType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UserIdClaimType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EmailClaimType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SecurityStampClaimType>k__BackingField;
    public string RoleClaimType { get; public set; }
    public string UserNameClaimType { get; public set; }
    public string UserIdClaimType { get; public set; }
    public string EmailClaimType { get; public set; }
    public string SecurityStampClaimType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RoleClaimType();
    [CompilerGeneratedAttribute]
public void set_RoleClaimType(string value);
    [CompilerGeneratedAttribute]
public string get_UserNameClaimType();
    [CompilerGeneratedAttribute]
public void set_UserNameClaimType(string value);
    [CompilerGeneratedAttribute]
public string get_UserIdClaimType();
    [CompilerGeneratedAttribute]
public void set_UserIdClaimType(string value);
    [CompilerGeneratedAttribute]
public string get_EmailClaimType();
    [CompilerGeneratedAttribute]
public void set_EmailClaimType(string value);
    [CompilerGeneratedAttribute]
public string get_SecurityStampClaimType();
    [CompilerGeneratedAttribute]
public void set_SecurityStampClaimType(string value);
}
public class Microsoft.AspNetCore.Identity.DefaultPersonalDataProtector : object {
    private ILookupProtectorKeyRing _keyRing;
    private ILookupProtector _encryptor;
    [NullableContextAttribute("1")]
public DefaultPersonalDataProtector(ILookupProtectorKeyRing keyRing, ILookupProtector protector);
    [NullableContextAttribute("2")]
public virtual string Unprotect(string data);
    [NullableContextAttribute("2")]
public virtual string Protect(string data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Identity.DefaultUserConfirmation`1 : object {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.DefaultUserConfirmation`1/<IsConfirmedAsync>d__0")]
public virtual Task`1<bool> IsConfirmedAsync(UserManager`1<TUser> manager, TUser user);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Identity.EmailTokenProvider`1 : TotpSecurityStampBasedTokenProvider`1<TUser> {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EmailTokenProvider`1/<CanGenerateTwoFactorTokenAsync>d__0")]
public virtual Task`1<bool> CanGenerateTwoFactorTokenAsync(UserManager`1<TUser> manager, TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.EmailTokenProvider`1/<GetUserModifierAsync>d__1")]
public virtual Task`1<string> GetUserModifierAsync(string purpose, UserManager`1<TUser> manager, TUser user);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Identity.IdentityBuilder : object {
    [CompilerGeneratedAttribute]
private Type <UserType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <RoleType>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    public Type UserType { get; }
    [NullableAttribute("2")]
[DynamicallyAccessedMembersAttribute("3")]
public Type RoleType { get; private set; }
    public IServiceCollection Services { get; }
    public IdentityBuilder(Type user, IServiceCollection services);
    public IdentityBuilder(Type user, Type role, IServiceCollection services);
    [CompilerGeneratedAttribute]
public Type get_UserType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public Type get_RoleType();
    [CompilerGeneratedAttribute]
private void set_RoleType(Type value);
    [CompilerGeneratedAttribute]
public IServiceCollection get_Services();
    private IdentityBuilder AddScoped(Type serviceType, Type concreteType);
    [UnconditionalSuppressMessageAttribute("AOT", "IL3050")]
public virtual IdentityBuilder AddUserValidator();
    [UnconditionalSuppressMessageAttribute("AOT", "IL3050")]
public virtual IdentityBuilder AddClaimsPrincipalFactory();
    public virtual IdentityBuilder AddErrorDescriber();
    [UnconditionalSuppressMessageAttribute("AOT", "IL3050")]
public virtual IdentityBuilder AddPasswordValidator();
    [UnconditionalSuppressMessageAttribute("AOT", "IL3050")]
public virtual IdentityBuilder AddUserStore();
    public virtual IdentityBuilder AddTokenProvider(string providerName);
    [UnconditionalSuppressMessageAttribute("AOT", "IL3050")]
public virtual IdentityBuilder AddTokenProvider(string providerName, Type provider);
    [UnconditionalSuppressMessageAttribute("AOT", "IL3050")]
public virtual IdentityBuilder AddUserManager();
    [UnconditionalSuppressMessageAttribute("AOT", "IL3050")]
public virtual IdentityBuilder AddRoles();
    [UnconditionalSuppressMessageAttribute("AOT", "IL3050")]
public virtual IdentityBuilder AddRoleValidator();
    public virtual IdentityBuilder AddPersonalDataProtection();
    [UnconditionalSuppressMessageAttribute("AOT", "IL3050")]
public virtual IdentityBuilder AddRoleStore();
    [UnconditionalSuppressMessageAttribute("AOT", "IL3050")]
public virtual IdentityBuilder AddRoleManager();
    [UnconditionalSuppressMessageAttribute("AOT", "IL3050")]
public virtual IdentityBuilder AddUserConfirmation();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Identity.IdentityError : object {
    [CompilerGeneratedAttribute]
private string <Code>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public string Code { get; public set; }
    public string Description { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Identity.IdentityErrorDescriber : object {
    public virtual IdentityError DefaultError();
    public virtual IdentityError ConcurrencyFailure();
    public virtual IdentityError PasswordMismatch();
    public virtual IdentityError InvalidToken();
    public virtual IdentityError RecoveryCodeRedemptionFailed();
    public virtual IdentityError LoginAlreadyAssociated();
    public virtual IdentityError InvalidUserName(string userName);
    public virtual IdentityError InvalidEmail(string email);
    public virtual IdentityError DuplicateUserName(string userName);
    public virtual IdentityError DuplicateEmail(string email);
    public virtual IdentityError InvalidRoleName(string role);
    public virtual IdentityError DuplicateRoleName(string role);
    public virtual IdentityError UserAlreadyHasPassword();
    public virtual IdentityError UserLockoutNotEnabled();
    public virtual IdentityError UserAlreadyInRole(string role);
    public virtual IdentityError UserNotInRole(string role);
    public virtual IdentityError PasswordTooShort(int length);
    public virtual IdentityError PasswordRequiresUniqueChars(int uniqueChars);
    public virtual IdentityError PasswordRequiresNonAlphanumeric();
    public virtual IdentityError PasswordRequiresDigit();
    public virtual IdentityError PasswordRequiresLower();
    public virtual IdentityError PasswordRequiresUpper();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Identity.IdentityOptions : object {
    [CompilerGeneratedAttribute]
private ClaimsIdentityOptions <ClaimsIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private UserOptions <User>k__BackingField;
    [CompilerGeneratedAttribute]
private PasswordOptions <Password>k__BackingField;
    [CompilerGeneratedAttribute]
private LockoutOptions <Lockout>k__BackingField;
    [CompilerGeneratedAttribute]
private SignInOptions <SignIn>k__BackingField;
    [CompilerGeneratedAttribute]
private TokenOptions <Tokens>k__BackingField;
    [CompilerGeneratedAttribute]
private StoreOptions <Stores>k__BackingField;
    public ClaimsIdentityOptions ClaimsIdentity { get; public set; }
    public UserOptions User { get; public set; }
    public PasswordOptions Password { get; public set; }
    public LockoutOptions Lockout { get; public set; }
    public SignInOptions SignIn { get; public set; }
    public TokenOptions Tokens { get; public set; }
    public StoreOptions Stores { get; public set; }
    [CompilerGeneratedAttribute]
public ClaimsIdentityOptions get_ClaimsIdentity();
    [CompilerGeneratedAttribute]
public void set_ClaimsIdentity(ClaimsIdentityOptions value);
    [CompilerGeneratedAttribute]
public UserOptions get_User();
    [CompilerGeneratedAttribute]
public void set_User(UserOptions value);
    [CompilerGeneratedAttribute]
public PasswordOptions get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(PasswordOptions value);
    [CompilerGeneratedAttribute]
public LockoutOptions get_Lockout();
    [CompilerGeneratedAttribute]
public void set_Lockout(LockoutOptions value);
    [CompilerGeneratedAttribute]
public SignInOptions get_SignIn();
    [CompilerGeneratedAttribute]
public void set_SignIn(SignInOptions value);
    [CompilerGeneratedAttribute]
public TokenOptions get_Tokens();
    [CompilerGeneratedAttribute]
public void set_Tokens(TokenOptions value);
    [CompilerGeneratedAttribute]
public StoreOptions get_Stores();
    [CompilerGeneratedAttribute]
public void set_Stores(StoreOptions value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Identity.IdentityResult : object {
    private static IdentityResult _success;
    private List`1<IdentityError> _errors;
    [CompilerGeneratedAttribute]
private bool <Succeeded>k__BackingField;
    public bool Succeeded { get; protected set; }
    public IEnumerable`1<IdentityError> Errors { get; }
    public static IdentityResult Success { get; }
    private static IdentityResult();
    [CompilerGeneratedAttribute]
public bool get_Succeeded();
    [CompilerGeneratedAttribute]
protected void set_Succeeded(bool value);
    public IEnumerable`1<IdentityError> get_Errors();
    public static IdentityResult get_Success();
    public static IdentityResult Failed(IdentityError[] errors);
    internal static IdentityResult Failed(List`1<IdentityError> errors);
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.AspNetCore.Identity.IdentitySchemaVersions : object {
    public static Version Default;
    public static Version Version1;
    public static Version Version2;
    private static IdentitySchemaVersions();
}
[NullableContextAttribute("2")]
public interface Microsoft.AspNetCore.Identity.ILookupNormalizer {
    public abstract virtual string NormalizeName(string name);
    public abstract virtual string NormalizeEmail(string email);
}
[NullableContextAttribute("2")]
public interface Microsoft.AspNetCore.Identity.ILookupProtector {
    public abstract virtual string Protect(string keyId, string data);
    public abstract virtual string Unprotect(string keyId, string data);
}
[NullableContextAttribute("1")]
[DefaultMemberAttribute("Item")]
public interface Microsoft.AspNetCore.Identity.ILookupProtectorKeyRing {
    public string CurrentKeyId { get; }
    public string Item { get; }
    public abstract virtual string get_CurrentKeyId();
    public abstract virtual string get_Item(string keyId);
    public abstract virtual IEnumerable`1<string> GetAllKeyIds();
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Identity.IPasswordHasher`1 {
    public abstract virtual string HashPassword(TUser user, string password);
    public abstract virtual PasswordVerificationResult VerifyHashedPassword(TUser user, string hashedPassword, string providedPassword);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Identity.IPasswordValidator`1 {
    public abstract virtual Task`1<IdentityResult> ValidateAsync(UserManager`1<TUser> manager, TUser user, string password);
}
[NullableContextAttribute("2")]
public interface Microsoft.AspNetCore.Identity.IPersonalDataProtector {
    public abstract virtual string Protect(string data);
    public abstract virtual string Unprotect(string data);
}
public interface Microsoft.AspNetCore.Identity.IProtectedUserStore`1 {
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Identity.IQueryableRoleStore`1 {
    public IQueryable`1<TRole> Roles { get; }
    public abstract virtual IQueryable`1<TRole> get_Roles();
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Identity.IQueryableUserStore`1 {
    public IQueryable`1<TUser> Users { get; }
    public abstract virtual IQueryable`1<TUser> get_Users();
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Identity.IRoleClaimStore`1 {
    public abstract virtual Task`1<IList`1<Claim>> GetClaimsAsync(TRole role, CancellationToken cancellationToken);
    public abstract virtual Task AddClaimAsync(TRole role, Claim claim, CancellationToken cancellationToken);
    public abstract virtual Task RemoveClaimAsync(TRole role, Claim claim, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Identity.IRoleStore`1 {
    public abstract virtual Task`1<IdentityResult> CreateAsync(TRole role, CancellationToken cancellationToken);
    public abstract virtual Task`1<IdentityResult> UpdateAsync(TRole role, CancellationToken cancellationToken);
    public abstract virtual Task`1<IdentityResult> DeleteAsync(TRole role, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetRoleIdAsync(TRole role, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetRoleNameAsync(TRole role, CancellationToken cancellationToken);
    public abstract virtual Task SetRoleNameAsync(TRole role, string roleName, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetNormalizedRoleNameAsync(TRole role, CancellationToken cancellationToken);
    public abstract virtual Task SetNormalizedRoleNameAsync(TRole role, string normalizedName, CancellationToken cancellationToken);
    public abstract virtual Task`1<TRole> FindByIdAsync(string roleId, CancellationToken cancellationToken);
    public abstract virtual Task`1<TRole> FindByNameAsync(string normalizedRoleName, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Identity.IRoleValidator`1 {
    public abstract virtual Task`1<IdentityResult> ValidateAsync(RoleManager`1<TRole> manager, TRole role);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Identity.IUserAuthenticationTokenStore`1 {
    public abstract virtual Task SetTokenAsync(TUser user, string loginProvider, string name, string value, CancellationToken cancellationToken);
    public abstract virtual Task RemoveTokenAsync(TUser user, string loginProvider, string name, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetTokenAsync(TUser user, string loginProvider, string name, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Identity.IUserAuthenticatorKeyStore`1 {
    public abstract virtual Task SetAuthenticatorKeyAsync(TUser user, string key, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetAuthenticatorKeyAsync(TUser user, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Identity.IUserClaimsPrincipalFactory`1 {
    public abstract virtual Task`1<ClaimsPrincipal> CreateAsync(TUser user);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Identity.IUserClaimStore`1 {
    public abstract virtual Task`1<IList`1<Claim>> GetClaimsAsync(TUser user, CancellationToken cancellationToken);
    public abstract virtual Task AddClaimsAsync(TUser user, IEnumerable`1<Claim> claims, CancellationToken cancellationToken);
    public abstract virtual Task ReplaceClaimAsync(TUser user, Claim claim, Claim newClaim, CancellationToken cancellationToken);
    public abstract virtual Task RemoveClaimsAsync(TUser user, IEnumerable`1<Claim> claims, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<TUser>> GetUsersForClaimAsync(Claim claim, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Identity.IUserConfirmation`1 {
    public abstract virtual Task`1<bool> IsConfirmedAsync(UserManager`1<TUser> manager, TUser user);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Identity.IUserEmailStore`1 {
    public abstract virtual Task SetEmailAsync(TUser user, string email, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetEmailAsync(TUser user, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> GetEmailConfirmedAsync(TUser user, CancellationToken cancellationToken);
    public abstract virtual Task SetEmailConfirmedAsync(TUser user, bool confirmed, CancellationToken cancellationToken);
    public abstract virtual Task`1<TUser> FindByEmailAsync(string normalizedEmail, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetNormalizedEmailAsync(TUser user, CancellationToken cancellationToken);
    public abstract virtual Task SetNormalizedEmailAsync(TUser user, string normalizedEmail, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Identity.IUserLockoutStore`1 {
    public abstract virtual Task`1<Nullable`1<DateTimeOffset>> GetLockoutEndDateAsync(TUser user, CancellationToken cancellationToken);
    public abstract virtual Task SetLockoutEndDateAsync(TUser user, Nullable`1<DateTimeOffset> lockoutEnd, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> IncrementAccessFailedCountAsync(TUser user, CancellationToken cancellationToken);
    public abstract virtual Task ResetAccessFailedCountAsync(TUser user, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> GetAccessFailedCountAsync(TUser user, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> GetLockoutEnabledAsync(TUser user, CancellationToken cancellationToken);
    public abstract virtual Task SetLockoutEnabledAsync(TUser user, bool enabled, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Identity.IUserLoginStore`1 {
    public abstract virtual Task AddLoginAsync(TUser user, UserLoginInfo login, CancellationToken cancellationToken);
    public abstract virtual Task RemoveLoginAsync(TUser user, string loginProvider, string providerKey, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<UserLoginInfo>> GetLoginsAsync(TUser user, CancellationToken cancellationToken);
    public abstract virtual Task`1<TUser> FindByLoginAsync(string loginProvider, string providerKey, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Identity.IUserPasswordStore`1 {
    public abstract virtual Task SetPasswordHashAsync(TUser user, string passwordHash, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetPasswordHashAsync(TUser user, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> HasPasswordAsync(TUser user, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Identity.IUserPhoneNumberStore`1 {
    public abstract virtual Task SetPhoneNumberAsync(TUser user, string phoneNumber, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetPhoneNumberAsync(TUser user, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> GetPhoneNumberConfirmedAsync(TUser user, CancellationToken cancellationToken);
    public abstract virtual Task SetPhoneNumberConfirmedAsync(TUser user, bool confirmed, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Identity.IUserRoleStore`1 {
    public abstract virtual Task AddToRoleAsync(TUser user, string roleName, CancellationToken cancellationToken);
    public abstract virtual Task RemoveFromRoleAsync(TUser user, string roleName, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<string>> GetRolesAsync(TUser user, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> IsInRoleAsync(TUser user, string roleName, CancellationToken cancellationToken);
    public abstract virtual Task`1<IList`1<TUser>> GetUsersInRoleAsync(string roleName, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Identity.IUserSecurityStampStore`1 {
    public abstract virtual Task SetSecurityStampAsync(TUser user, string stamp, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetSecurityStampAsync(TUser user, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Identity.IUserStore`1 {
    public abstract virtual Task`1<string> GetUserIdAsync(TUser user, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetUserNameAsync(TUser user, CancellationToken cancellationToken);
    public abstract virtual Task SetUserNameAsync(TUser user, string userName, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> GetNormalizedUserNameAsync(TUser user, CancellationToken cancellationToken);
    public abstract virtual Task SetNormalizedUserNameAsync(TUser user, string normalizedName, CancellationToken cancellationToken);
    public abstract virtual Task`1<IdentityResult> CreateAsync(TUser user, CancellationToken cancellationToken);
    public abstract virtual Task`1<IdentityResult> UpdateAsync(TUser user, CancellationToken cancellationToken);
    public abstract virtual Task`1<IdentityResult> DeleteAsync(TUser user, CancellationToken cancellationToken);
    public abstract virtual Task`1<TUser> FindByIdAsync(string userId, CancellationToken cancellationToken);
    public abstract virtual Task`1<TUser> FindByNameAsync(string normalizedUserName, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Identity.IUserTwoFactorRecoveryCodeStore`1 {
    public abstract virtual Task ReplaceCodesAsync(TUser user, IEnumerable`1<string> recoveryCodes, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> RedeemCodeAsync(TUser user, string code, CancellationToken cancellationToken);
    public abstract virtual Task`1<int> CountCodesAsync(TUser user, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Identity.IUserTwoFactorStore`1 {
    public abstract virtual Task SetTwoFactorEnabledAsync(TUser user, bool enabled, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> GetTwoFactorEnabledAsync(TUser user, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Identity.IUserTwoFactorTokenProvider`1 {
    public abstract virtual Task`1<string> GenerateAsync(string purpose, UserManager`1<TUser> manager, TUser user);
    public abstract virtual Task`1<bool> ValidateAsync(string purpose, string token, UserManager`1<TUser> manager, TUser user);
    public abstract virtual Task`1<bool> CanGenerateTwoFactorTokenAsync(UserManager`1<TUser> manager, TUser user);
}
[NullableContextAttribute("1")]
public interface Microsoft.AspNetCore.Identity.IUserValidator`1 {
    public abstract virtual Task`1<IdentityResult> ValidateAsync(UserManager`1<TUser> manager, TUser user);
}
public class Microsoft.AspNetCore.Identity.LockoutOptions : object {
    [CompilerGeneratedAttribute]
private bool <AllowedForNewUsers>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxFailedAccessAttempts>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <DefaultLockoutTimeSpan>k__BackingField;
    public bool AllowedForNewUsers { get; public set; }
    public int MaxFailedAccessAttempts { get; public set; }
    public TimeSpan DefaultLockoutTimeSpan { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllowedForNewUsers();
    [CompilerGeneratedAttribute]
public void set_AllowedForNewUsers(bool value);
    [CompilerGeneratedAttribute]
public int get_MaxFailedAccessAttempts();
    [CompilerGeneratedAttribute]
public void set_MaxFailedAccessAttempts(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_DefaultLockoutTimeSpan();
    [CompilerGeneratedAttribute]
public void set_DefaultLockoutTimeSpan(TimeSpan value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Identity.PasswordHasher`1 : object {
    private PasswordHasherCompatibilityMode _compatibilityMode;
    private int _iterCount;
    private RandomNumberGenerator _rng;
    private static PasswordHasherOptions DefaultOptions;
    public PasswordHasher`1(IOptions`1<PasswordHasherOptions> optionsAccessor);
    private static PasswordHasher`1();
    public virtual string HashPassword(TUser user, string password);
    private static Byte[] HashPasswordV2(string password, RandomNumberGenerator rng);
    private Byte[] HashPasswordV3(string password, RandomNumberGenerator rng);
    private static Byte[] HashPasswordV3(string password, RandomNumberGenerator rng, KeyDerivationPrf prf, int iterCount, int saltSize, int numBytesRequested);
    public virtual PasswordVerificationResult VerifyHashedPassword(TUser user, string hashedPassword, string providedPassword);
    private static bool VerifyHashedPasswordV2(Byte[] hashedPassword, string password);
    private static bool VerifyHashedPasswordV3(Byte[] hashedPassword, string password, Int32& iterCount, KeyDerivationPrf& prf);
    private static UInt32 ReadNetworkByteOrder(Byte[] buffer, int offset);
    private static void WriteNetworkByteOrder(Byte[] buffer, int offset, UInt32 value);
}
public enum Microsoft.AspNetCore.Identity.PasswordHasherCompatibilityMode : Enum {
    public int value__;
    public static PasswordHasherCompatibilityMode IdentityV2;
    public static PasswordHasherCompatibilityMode IdentityV3;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Identity.PasswordHasherOptions : object {
    private static RandomNumberGenerator _defaultRng;
    [CompilerGeneratedAttribute]
private PasswordHasherCompatibilityMode <CompatibilityMode>k__BackingField;
    [CompilerGeneratedAttribute]
private int <IterationCount>k__BackingField;
    [CompilerGeneratedAttribute]
private RandomNumberGenerator <Rng>k__BackingField;
    public PasswordHasherCompatibilityMode CompatibilityMode { get; public set; }
    public int IterationCount { get; public set; }
    internal RandomNumberGenerator Rng { get; internal set; }
    private static PasswordHasherOptions();
    [CompilerGeneratedAttribute]
public PasswordHasherCompatibilityMode get_CompatibilityMode();
    [CompilerGeneratedAttribute]
public void set_CompatibilityMode(PasswordHasherCompatibilityMode value);
    [CompilerGeneratedAttribute]
public int get_IterationCount();
    [CompilerGeneratedAttribute]
public void set_IterationCount(int value);
    [CompilerGeneratedAttribute]
internal RandomNumberGenerator get_Rng();
    [CompilerGeneratedAttribute]
internal void set_Rng(RandomNumberGenerator value);
}
public class Microsoft.AspNetCore.Identity.PasswordOptions : object {
    [CompilerGeneratedAttribute]
private int <RequiredLength>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RequiredUniqueChars>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireNonAlphanumeric>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireLowercase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireUppercase>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireDigit>k__BackingField;
    public int RequiredLength { get; public set; }
    public int RequiredUniqueChars { get; public set; }
    public bool RequireNonAlphanumeric { get; public set; }
    public bool RequireLowercase { get; public set; }
    public bool RequireUppercase { get; public set; }
    public bool RequireDigit { get; public set; }
    [CompilerGeneratedAttribute]
public int get_RequiredLength();
    [CompilerGeneratedAttribute]
public void set_RequiredLength(int value);
    [CompilerGeneratedAttribute]
public int get_RequiredUniqueChars();
    [CompilerGeneratedAttribute]
public void set_RequiredUniqueChars(int value);
    [CompilerGeneratedAttribute]
public bool get_RequireNonAlphanumeric();
    [CompilerGeneratedAttribute]
public void set_RequireNonAlphanumeric(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireLowercase();
    [CompilerGeneratedAttribute]
public void set_RequireLowercase(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireUppercase();
    [CompilerGeneratedAttribute]
public void set_RequireUppercase(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireDigit();
    [CompilerGeneratedAttribute]
public void set_RequireDigit(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Identity.PasswordValidator`1 : object {
    [CompilerGeneratedAttribute]
private IdentityErrorDescriber <Describer>k__BackingField;
    public IdentityErrorDescriber Describer { get; private set; }
    [NullableContextAttribute("2")]
public PasswordValidator`1(IdentityErrorDescriber errors);
    [CompilerGeneratedAttribute]
public IdentityErrorDescriber get_Describer();
    [CompilerGeneratedAttribute]
private void set_Describer(IdentityErrorDescriber value);
    public virtual Task`1<IdentityResult> ValidateAsync(UserManager`1<TUser> manager, TUser user, string password);
    public virtual bool IsDigit(char c);
    public virtual bool IsLower(char c);
    public virtual bool IsUpper(char c);
    public virtual bool IsLetterOrDigit(char c);
}
public enum Microsoft.AspNetCore.Identity.PasswordVerificationResult : Enum {
    public int value__;
    public static PasswordVerificationResult Failed;
    public static PasswordVerificationResult Success;
    public static PasswordVerificationResult SuccessRehashNeeded;
}
[AttributeUsageAttribute("128")]
public class Microsoft.AspNetCore.Identity.PersonalDataAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Identity.PhoneNumberTokenProvider`1 : TotpSecurityStampBasedTokenProvider`1<TUser> {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.PhoneNumberTokenProvider`1/<CanGenerateTwoFactorTokenAsync>d__0")]
public virtual Task`1<bool> CanGenerateTwoFactorTokenAsync(UserManager`1<TUser> manager, TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.PhoneNumberTokenProvider`1/<GetUserModifierAsync>d__1")]
public virtual Task`1<string> GetUserModifierAsync(string purpose, UserManager`1<TUser> manager, TUser user);
}
public class Microsoft.AspNetCore.Identity.ProtectedPersonalDataAttribute : PersonalDataAttribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Identity.Rfc6238AuthenticationService : object {
    private static TimeSpan _timestep;
    private static Encoding _encoding;
    private static Rfc6238AuthenticationService();
    internal static int ComputeTotp(Byte[] key, ulong timestepNumber, Byte[] modifierBytes);
    private static Byte[] ApplyModifier(Span`1<byte> input, Byte[] modifierBytes);
    private static ulong GetCurrentTimeStepNumber();
    public static int GenerateCode(Byte[] securityToken, string modifier);
    public static bool ValidateCode(Byte[] securityToken, int code, string modifier);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Identity.RoleManager`1 : object {
    private bool _disposed;
    [CompilerGeneratedAttribute]
private IRoleStore`1<TRole> <Store>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IRoleValidator`1<TRole>> <RoleValidators>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityErrorDescriber <ErrorDescriber>k__BackingField;
    [CompilerGeneratedAttribute]
private ILookupNormalizer <KeyNormalizer>k__BackingField;
    protected CancellationToken CancellationToken { get; }
    protected IRoleStore`1<TRole> Store { get; private set; }
    public ILogger Logger { get; public set; }
    public IList`1<IRoleValidator`1<TRole>> RoleValidators { get; }
    public IdentityErrorDescriber ErrorDescriber { get; public set; }
    public ILookupNormalizer KeyNormalizer { get; public set; }
    public IQueryable`1<TRole> Roles { get; }
    public bool SupportsQueryableRoles { get; }
    public bool SupportsRoleClaims { get; }
    public RoleManager`1(IRoleStore`1<TRole> store, IEnumerable`1<IRoleValidator`1<TRole>> roleValidators, ILookupNormalizer keyNormalizer, IdentityErrorDescriber errors, ILogger`1<RoleManager`1<TRole>> logger);
    protected virtual CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
protected IRoleStore`1<TRole> get_Store();
    [CompilerGeneratedAttribute]
private void set_Store(IRoleStore`1<TRole> value);
    [CompilerGeneratedAttribute]
public virtual ILogger get_Logger();
    [CompilerGeneratedAttribute]
public virtual void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public IList`1<IRoleValidator`1<TRole>> get_RoleValidators();
    [CompilerGeneratedAttribute]
public IdentityErrorDescriber get_ErrorDescriber();
    [CompilerGeneratedAttribute]
public void set_ErrorDescriber(IdentityErrorDescriber value);
    [CompilerGeneratedAttribute]
public ILookupNormalizer get_KeyNormalizer();
    [CompilerGeneratedAttribute]
public void set_KeyNormalizer(ILookupNormalizer value);
    public virtual IQueryable`1<TRole> get_Roles();
    public virtual bool get_SupportsQueryableRoles();
    public virtual bool get_SupportsRoleClaims();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.RoleManager`1/<CreateAsync>d__29")]
public virtual Task`1<IdentityResult> CreateAsync(TRole role);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.RoleManager`1/<UpdateNormalizedRoleNameAsync>d__30")]
public virtual Task UpdateNormalizedRoleNameAsync(TRole role);
    public virtual Task`1<IdentityResult> UpdateAsync(TRole role);
    public virtual Task`1<IdentityResult> DeleteAsync(TRole role);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.RoleManager`1/<RoleExistsAsync>d__33")]
public virtual Task`1<bool> RoleExistsAsync(string roleName);
    [NullableContextAttribute("2")]
public virtual string NormalizeKey(string key);
    public virtual Task`1<TRole> FindByIdAsync(string roleId);
    public virtual Task`1<string> GetRoleNameAsync(TRole role);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.RoleManager`1/<SetRoleNameAsync>d__37")]
public virtual Task`1<IdentityResult> SetRoleNameAsync(TRole role, string name);
    public virtual Task`1<string> GetRoleIdAsync(TRole role);
    public virtual Task`1<TRole> FindByNameAsync(string roleName);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.RoleManager`1/<AddClaimAsync>d__40")]
public virtual Task`1<IdentityResult> AddClaimAsync(TRole role, Claim claim);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.RoleManager`1/<RemoveClaimAsync>d__41")]
public virtual Task`1<IdentityResult> RemoveClaimAsync(TRole role, Claim claim);
    public virtual Task`1<IList`1<Claim>> GetClaimsAsync(TRole role);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.RoleManager`1/<ValidateRoleAsync>d__45")]
protected virtual Task`1<IdentityResult> ValidateRoleAsync(TRole role);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.RoleManager`1/<UpdateRoleAsync>d__46")]
protected virtual Task`1<IdentityResult> UpdateRoleAsync(TRole role);
    private IRoleClaimStore`1<TRole> GetClaimStore();
    protected void ThrowIfDisposed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Identity.RoleValidator`1 : object {
    [CompilerGeneratedAttribute]
private IdentityErrorDescriber <Describer>k__BackingField;
    private IdentityErrorDescriber Describer { get; private set; }
    [NullableContextAttribute("2")]
public RoleValidator`1(IdentityErrorDescriber errors);
    [CompilerGeneratedAttribute]
private IdentityErrorDescriber get_Describer();
    [CompilerGeneratedAttribute]
private void set_Describer(IdentityErrorDescriber value);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.RoleValidator`1/<ValidateAsync>d__5")]
public virtual Task`1<IdentityResult> ValidateAsync(RoleManager`1<TRole> manager, TRole role);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.RoleValidator`1/<ValidateRoleName>d__6")]
private Task`1<List`1<IdentityError>> ValidateRoleName(RoleManager`1<TRole> manager, TRole role);
}
public class Microsoft.AspNetCore.Identity.SignInOptions : object {
    [CompilerGeneratedAttribute]
private bool <RequireConfirmedEmail>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireConfirmedPhoneNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireConfirmedAccount>k__BackingField;
    public bool RequireConfirmedEmail { get; public set; }
    public bool RequireConfirmedPhoneNumber { get; public set; }
    public bool RequireConfirmedAccount { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_RequireConfirmedEmail();
    [CompilerGeneratedAttribute]
public void set_RequireConfirmedEmail(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireConfirmedPhoneNumber();
    [CompilerGeneratedAttribute]
public void set_RequireConfirmedPhoneNumber(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequireConfirmedAccount();
    [CompilerGeneratedAttribute]
public void set_RequireConfirmedAccount(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Identity.SignInResult : object {
    private static SignInResult _success;
    private static SignInResult _failed;
    private static SignInResult _lockedOut;
    private static SignInResult _notAllowed;
    private static SignInResult _twoFactorRequired;
    [CompilerGeneratedAttribute]
private bool <Succeeded>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLockedOut>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNotAllowed>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequiresTwoFactor>k__BackingField;
    public bool Succeeded { get; protected set; }
    public bool IsLockedOut { get; protected set; }
    public bool IsNotAllowed { get; protected set; }
    public bool RequiresTwoFactor { get; protected set; }
    public static SignInResult Success { get; }
    public static SignInResult Failed { get; }
    public static SignInResult LockedOut { get; }
    public static SignInResult NotAllowed { get; }
    public static SignInResult TwoFactorRequired { get; }
    private static SignInResult();
    [CompilerGeneratedAttribute]
public bool get_Succeeded();
    [CompilerGeneratedAttribute]
protected void set_Succeeded(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsLockedOut();
    [CompilerGeneratedAttribute]
protected void set_IsLockedOut(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNotAllowed();
    [CompilerGeneratedAttribute]
protected void set_IsNotAllowed(bool value);
    [CompilerGeneratedAttribute]
public bool get_RequiresTwoFactor();
    [CompilerGeneratedAttribute]
protected void set_RequiresTwoFactor(bool value);
    public static SignInResult get_Success();
    public static SignInResult get_Failed();
    public static SignInResult get_LockedOut();
    public static SignInResult get_NotAllowed();
    public static SignInResult get_TwoFactorRequired();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Identity.StoreOptions : object {
    [CompilerGeneratedAttribute]
private int <MaxLengthForKeys>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ProtectPersonalData>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <SchemaVersion>k__BackingField;
    public int MaxLengthForKeys { get; public set; }
    public bool ProtectPersonalData { get; public set; }
    public Version SchemaVersion { get; public set; }
    [CompilerGeneratedAttribute]
public int get_MaxLengthForKeys();
    [CompilerGeneratedAttribute]
public void set_MaxLengthForKeys(int value);
    [CompilerGeneratedAttribute]
public bool get_ProtectPersonalData();
    [CompilerGeneratedAttribute]
public void set_ProtectPersonalData(bool value);
    [CompilerGeneratedAttribute]
public Version get_SchemaVersion();
    [CompilerGeneratedAttribute]
public void set_SchemaVersion(Version value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Identity.TokenOptions : object {
    public static string DefaultProvider;
    public static string DefaultEmailProvider;
    public static string DefaultPhoneProvider;
    public static string DefaultAuthenticatorProvider;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, TokenProviderDescriptor> <ProviderMap>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EmailConfirmationTokenProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PasswordResetTokenProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChangeEmailTokenProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ChangePhoneNumberTokenProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticatorTokenProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticatorIssuer>k__BackingField;
    public Dictionary`2<string, TokenProviderDescriptor> ProviderMap { get; public set; }
    public string EmailConfirmationTokenProvider { get; public set; }
    public string PasswordResetTokenProvider { get; public set; }
    public string ChangeEmailTokenProvider { get; public set; }
    public string ChangePhoneNumberTokenProvider { get; public set; }
    public string AuthenticatorTokenProvider { get; public set; }
    public string AuthenticatorIssuer { get; public set; }
    private static TokenOptions();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, TokenProviderDescriptor> get_ProviderMap();
    [CompilerGeneratedAttribute]
public void set_ProviderMap(Dictionary`2<string, TokenProviderDescriptor> value);
    [CompilerGeneratedAttribute]
public string get_EmailConfirmationTokenProvider();
    [CompilerGeneratedAttribute]
public void set_EmailConfirmationTokenProvider(string value);
    [CompilerGeneratedAttribute]
public string get_PasswordResetTokenProvider();
    [CompilerGeneratedAttribute]
public void set_PasswordResetTokenProvider(string value);
    [CompilerGeneratedAttribute]
public string get_ChangeEmailTokenProvider();
    [CompilerGeneratedAttribute]
public void set_ChangeEmailTokenProvider(string value);
    [CompilerGeneratedAttribute]
public string get_ChangePhoneNumberTokenProvider();
    [CompilerGeneratedAttribute]
public void set_ChangePhoneNumberTokenProvider(string value);
    [CompilerGeneratedAttribute]
public string get_AuthenticatorTokenProvider();
    [CompilerGeneratedAttribute]
public void set_AuthenticatorTokenProvider(string value);
    [CompilerGeneratedAttribute]
public string get_AuthenticatorIssuer();
    [CompilerGeneratedAttribute]
public void set_AuthenticatorIssuer(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Identity.TokenProviderDescriptor : object {
    private Stack`1<Type> _providerTypes;
    [CompilerGeneratedAttribute]
private object <ProviderInstance>k__BackingField;
    public Type ProviderType { get; }
    [NullableAttribute("2")]
public object ProviderInstance { get; public set; }
    public TokenProviderDescriptor(Type type);
    public Type get_ProviderType();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public object get_ProviderInstance();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ProviderInstance(object value);
    internal void AddProviderType(Type type);
    [NullableContextAttribute("2")]
internal Type GetProviderType();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.AspNetCore.Identity.TotpSecurityStampBasedTokenProvider`1 : object {
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.TotpSecurityStampBasedTokenProvider`1/<GenerateAsync>d__0")]
public virtual Task`1<string> GenerateAsync(string purpose, UserManager`1<TUser> manager, TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.TotpSecurityStampBasedTokenProvider`1/<ValidateAsync>d__1")]
public virtual Task`1<bool> ValidateAsync(string purpose, string token, UserManager`1<TUser> manager, TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.TotpSecurityStampBasedTokenProvider`1/<GetUserModifierAsync>d__2")]
public virtual Task`1<string> GetUserModifierAsync(string purpose, UserManager`1<TUser> manager, TUser user);
    public abstract virtual Task`1<bool> CanGenerateTwoFactorTokenAsync(UserManager`1<TUser> manager, TUser user);
}
public class Microsoft.AspNetCore.Identity.UpperInvariantLookupNormalizer : object {
    [NullableContextAttribute("2")]
public sealed virtual string NormalizeName(string name);
    [NullableContextAttribute("2")]
public sealed virtual string NormalizeEmail(string email);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`1 : object {
    [CompilerGeneratedAttribute]
private UserManager`1<TUser> <UserManager>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityOptions <Options>k__BackingField;
    public UserManager`1<TUser> UserManager { get; private set; }
    public IdentityOptions Options { get; private set; }
    public UserClaimsPrincipalFactory`1(UserManager`1<TUser> userManager, IOptions`1<IdentityOptions> optionsAccessor);
    [CompilerGeneratedAttribute]
public UserManager`1<TUser> get_UserManager();
    [CompilerGeneratedAttribute]
private void set_UserManager(UserManager`1<TUser> value);
    [CompilerGeneratedAttribute]
public IdentityOptions get_Options();
    [CompilerGeneratedAttribute]
private void set_Options(IdentityOptions value);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`1/<CreateAsync>d__9")]
public virtual Task`1<ClaimsPrincipal> CreateAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`1/<GenerateClaimsAsync>d__10")]
protected virtual Task`1<ClaimsIdentity> GenerateClaimsAsync(TUser user);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2 : UserClaimsPrincipalFactory`1<TUser> {
    [CompilerGeneratedAttribute]
private RoleManager`1<TRole> <RoleManager>k__BackingField;
    public RoleManager`1<TRole> RoleManager { get; private set; }
    public UserClaimsPrincipalFactory`2(UserManager`1<TUser> userManager, RoleManager`1<TRole> roleManager, IOptions`1<IdentityOptions> options);
    [CompilerGeneratedAttribute]
public RoleManager`1<TRole> get_RoleManager();
    [CompilerGeneratedAttribute]
private void set_RoleManager(RoleManager`1<TRole> value);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserClaimsPrincipalFactory`2/<GenerateClaimsAsync>d__5")]
protected virtual Task`1<ClaimsIdentity> GenerateClaimsAsync(TUser user);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task`1<ClaimsIdentity> <>n__0(TUser user);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Identity.UserLoginInfo : object {
    [CompilerGeneratedAttribute]
private string <LoginProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderKey>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderDisplayName>k__BackingField;
    public string LoginProvider { get; public set; }
    public string ProviderKey { get; public set; }
    [NullableAttribute("2")]
public string ProviderDisplayName { get; public set; }
    public UserLoginInfo(string loginProvider, string providerKey, string displayName);
    [CompilerGeneratedAttribute]
public string get_LoginProvider();
    [CompilerGeneratedAttribute]
public void set_LoginProvider(string value);
    [CompilerGeneratedAttribute]
public string get_ProviderKey();
    [CompilerGeneratedAttribute]
public void set_ProviderKey(string value);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ProviderDisplayName();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public void set_ProviderDisplayName(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Identity.UserManager`1 : object {
    public static string ResetPasswordTokenPurpose;
    public static string ChangePhoneNumberTokenPurpose;
    public static string ConfirmEmailTokenPurpose;
    private Dictionary`2<string, IUserTwoFactorTokenProvider`1<TUser>> _tokenProviders;
    private bool _disposed;
    private IServiceProvider _services;
    [CompilerGeneratedAttribute]
private IUserStore`1<TUser> <Store>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IPasswordHasher`1<TUser> <PasswordHasher>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IUserValidator`1<TUser>> <UserValidators>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IPasswordValidator`1<TUser>> <PasswordValidators>k__BackingField;
    [CompilerGeneratedAttribute]
private ILookupNormalizer <KeyNormalizer>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityErrorDescriber <ErrorDescriber>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityOptions <Options>k__BackingField;
    private static Char[] AllowedChars;
    protected CancellationToken CancellationToken { get; }
    protected internal IUserStore`1<TUser> Store { get; protected internal set; }
    public ILogger Logger { get; public set; }
    public IPasswordHasher`1<TUser> PasswordHasher { get; public set; }
    public IList`1<IUserValidator`1<TUser>> UserValidators { get; }
    public IList`1<IPasswordValidator`1<TUser>> PasswordValidators { get; }
    public ILookupNormalizer KeyNormalizer { get; public set; }
    public IdentityErrorDescriber ErrorDescriber { get; public set; }
    public IdentityOptions Options { get; public set; }
    public bool SupportsUserAuthenticationTokens { get; }
    public bool SupportsUserAuthenticatorKey { get; }
    public bool SupportsUserTwoFactorRecoveryCodes { get; }
    public bool SupportsUserTwoFactor { get; }
    public bool SupportsUserPassword { get; }
    public bool SupportsUserSecurityStamp { get; }
    public bool SupportsUserRole { get; }
    public bool SupportsUserLogin { get; }
    public bool SupportsUserEmail { get; }
    public bool SupportsUserPhoneNumber { get; }
    public bool SupportsUserClaim { get; }
    public bool SupportsUserLockout { get; }
    public bool SupportsQueryableUsers { get; }
    public IQueryable`1<TUser> Users { get; }
    public UserManager`1(IUserStore`1<TUser> store, IOptions`1<IdentityOptions> optionsAccessor, IPasswordHasher`1<TUser> passwordHasher, IEnumerable`1<IUserValidator`1<TUser>> userValidators, IEnumerable`1<IPasswordValidator`1<TUser>> passwordValidators, ILookupNormalizer keyNormalizer, IdentityErrorDescriber errors, IServiceProvider services, ILogger`1<UserManager`1<TUser>> logger);
    private static UserManager`1();
    protected virtual CancellationToken get_CancellationToken();
    [CompilerGeneratedAttribute]
protected internal IUserStore`1<TUser> get_Store();
    [CompilerGeneratedAttribute]
protected internal void set_Store(IUserStore`1<TUser> value);
    [CompilerGeneratedAttribute]
public virtual ILogger get_Logger();
    [CompilerGeneratedAttribute]
public virtual void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public IPasswordHasher`1<TUser> get_PasswordHasher();
    [CompilerGeneratedAttribute]
public void set_PasswordHasher(IPasswordHasher`1<TUser> value);
    [CompilerGeneratedAttribute]
public IList`1<IUserValidator`1<TUser>> get_UserValidators();
    [CompilerGeneratedAttribute]
public IList`1<IPasswordValidator`1<TUser>> get_PasswordValidators();
    [CompilerGeneratedAttribute]
public ILookupNormalizer get_KeyNormalizer();
    [CompilerGeneratedAttribute]
public void set_KeyNormalizer(ILookupNormalizer value);
    [CompilerGeneratedAttribute]
public IdentityErrorDescriber get_ErrorDescriber();
    [CompilerGeneratedAttribute]
public void set_ErrorDescriber(IdentityErrorDescriber value);
    [CompilerGeneratedAttribute]
public IdentityOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(IdentityOptions value);
    public virtual bool get_SupportsUserAuthenticationTokens();
    public virtual bool get_SupportsUserAuthenticatorKey();
    public virtual bool get_SupportsUserTwoFactorRecoveryCodes();
    public virtual bool get_SupportsUserTwoFactor();
    public virtual bool get_SupportsUserPassword();
    public virtual bool get_SupportsUserSecurityStamp();
    public virtual bool get_SupportsUserRole();
    public virtual bool get_SupportsUserLogin();
    public virtual bool get_SupportsUserEmail();
    public virtual bool get_SupportsUserPhoneNumber();
    public virtual bool get_SupportsUserClaim();
    public virtual bool get_SupportsUserLockout();
    public virtual bool get_SupportsQueryableUsers();
    public virtual IQueryable`1<TUser> get_Users();
    public sealed virtual void Dispose();
    public virtual string GetUserName(ClaimsPrincipal principal);
    public virtual string GetUserId(ClaimsPrincipal principal);
    public virtual Task`1<TUser> GetUserAsync(ClaimsPrincipal principal);
    public virtual Task`1<string> GenerateConcurrencyStampAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<CreateAsync>d__72")]
public virtual Task`1<IdentityResult> CreateAsync(TUser user);
    public virtual Task`1<IdentityResult> UpdateAsync(TUser user);
    public virtual Task`1<IdentityResult> DeleteAsync(TUser user);
    public virtual Task`1<TUser> FindByIdAsync(string userId);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<FindByNameAsync>d__76")]
public virtual Task`1<TUser> FindByNameAsync(string userName);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<CreateAsync>d__77")]
public virtual Task`1<IdentityResult> CreateAsync(TUser user, string password);
    [NullableContextAttribute("2")]
public virtual string NormalizeName(string name);
    [NullableContextAttribute("2")]
public virtual string NormalizeEmail(string email);
    private string ProtectPersonalData(string data);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<UpdateNormalizedUserNameAsync>d__81")]
public virtual Task UpdateNormalizedUserNameAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<GetUserNameAsync>d__82")]
public virtual Task`1<string> GetUserNameAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<SetUserNameAsync>d__83")]
public virtual Task`1<IdentityResult> SetUserNameAsync(TUser user, string userName);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<GetUserIdAsync>d__84")]
public virtual Task`1<string> GetUserIdAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<CheckPasswordAsync>d__85")]
public virtual Task`1<bool> CheckPasswordAsync(TUser user, string password);
    public virtual Task`1<bool> HasPasswordAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<AddPasswordAsync>d__87")]
public virtual Task`1<IdentityResult> AddPasswordAsync(TUser user, string password);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<ChangePasswordAsync>d__88")]
public virtual Task`1<IdentityResult> ChangePasswordAsync(TUser user, string currentPassword, string newPassword);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<RemovePasswordAsync>d__89")]
public virtual Task`1<IdentityResult> RemovePasswordAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<VerifyPasswordAsync>d__90")]
protected virtual Task`1<PasswordVerificationResult> VerifyPasswordAsync(IUserPasswordStore`1<TUser> store, TUser user, string password);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<GetSecurityStampAsync>d__91")]
public virtual Task`1<string> GetSecurityStampAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<UpdateSecurityStampAsync>d__92")]
public virtual Task`1<IdentityResult> UpdateSecurityStampAsync(TUser user);
    public virtual Task`1<string> GeneratePasswordResetTokenAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<ResetPasswordAsync>d__94")]
public virtual Task`1<IdentityResult> ResetPasswordAsync(TUser user, string token, string newPassword);
    public virtual Task`1<TUser> FindByLoginAsync(string loginProvider, string providerKey);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<RemoveLoginAsync>d__96")]
public virtual Task`1<IdentityResult> RemoveLoginAsync(TUser user, string loginProvider, string providerKey);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<AddLoginAsync>d__97")]
public virtual Task`1<IdentityResult> AddLoginAsync(TUser user, UserLoginInfo login);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<GetLoginsAsync>d__98")]
public virtual Task`1<IList`1<UserLoginInfo>> GetLoginsAsync(TUser user);
    public virtual Task`1<IdentityResult> AddClaimAsync(TUser user, Claim claim);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<AddClaimsAsync>d__100")]
public virtual Task`1<IdentityResult> AddClaimsAsync(TUser user, IEnumerable`1<Claim> claims);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<ReplaceClaimAsync>d__101")]
public virtual Task`1<IdentityResult> ReplaceClaimAsync(TUser user, Claim claim, Claim newClaim);
    public virtual Task`1<IdentityResult> RemoveClaimAsync(TUser user, Claim claim);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<RemoveClaimsAsync>d__103")]
public virtual Task`1<IdentityResult> RemoveClaimsAsync(TUser user, IEnumerable`1<Claim> claims);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<GetClaimsAsync>d__104")]
public virtual Task`1<IList`1<Claim>> GetClaimsAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<AddToRoleAsync>d__105")]
public virtual Task`1<IdentityResult> AddToRoleAsync(TUser user, string role);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<AddToRolesAsync>d__106")]
public virtual Task`1<IdentityResult> AddToRolesAsync(TUser user, IEnumerable`1<string> roles);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<RemoveFromRoleAsync>d__107")]
public virtual Task`1<IdentityResult> RemoveFromRoleAsync(TUser user, string role);
    private IdentityResult UserAlreadyInRoleError(string role);
    private IdentityResult UserNotInRoleError(string role);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<RemoveFromRolesAsync>d__110")]
public virtual Task`1<IdentityResult> RemoveFromRolesAsync(TUser user, IEnumerable`1<string> roles);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<GetRolesAsync>d__111")]
public virtual Task`1<IList`1<string>> GetRolesAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<IsInRoleAsync>d__112")]
public virtual Task`1<bool> IsInRoleAsync(TUser user, string role);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<GetEmailAsync>d__113")]
public virtual Task`1<string> GetEmailAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<SetEmailAsync>d__114")]
public virtual Task`1<IdentityResult> SetEmailAsync(TUser user, string email);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<FindByEmailAsync>d__115")]
public virtual Task`1<TUser> FindByEmailAsync(string email);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<UpdateNormalizedEmailAsync>d__116")]
public virtual Task UpdateNormalizedEmailAsync(TUser user);
    public virtual Task`1<string> GenerateEmailConfirmationTokenAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<ConfirmEmailAsync>d__118")]
public virtual Task`1<IdentityResult> ConfirmEmailAsync(TUser user, string token);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<IsEmailConfirmedAsync>d__119")]
public virtual Task`1<bool> IsEmailConfirmedAsync(TUser user);
    public virtual Task`1<string> GenerateChangeEmailTokenAsync(TUser user, string newEmail);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<ChangeEmailAsync>d__121")]
public virtual Task`1<IdentityResult> ChangeEmailAsync(TUser user, string newEmail, string token);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<GetPhoneNumberAsync>d__122")]
public virtual Task`1<string> GetPhoneNumberAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<SetPhoneNumberAsync>d__123")]
public virtual Task`1<IdentityResult> SetPhoneNumberAsync(TUser user, string phoneNumber);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<ChangePhoneNumberAsync>d__124")]
public virtual Task`1<IdentityResult> ChangePhoneNumberAsync(TUser user, string phoneNumber, string token);
    public virtual Task`1<bool> IsPhoneNumberConfirmedAsync(TUser user);
    public virtual Task`1<string> GenerateChangePhoneNumberTokenAsync(TUser user, string phoneNumber);
    public virtual Task`1<bool> VerifyChangePhoneNumberTokenAsync(TUser user, string token, string phoneNumber);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<VerifyUserTokenAsync>d__128")]
public virtual Task`1<bool> VerifyUserTokenAsync(TUser user, string tokenProvider, string purpose, string token);
    public virtual Task`1<string> GenerateUserTokenAsync(TUser user, string tokenProvider, string purpose);
    public virtual void RegisterTokenProvider(string providerName, IUserTwoFactorTokenProvider`1<TUser> provider);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<GetValidTwoFactorProvidersAsync>d__131")]
public virtual Task`1<IList`1<string>> GetValidTwoFactorProvidersAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<VerifyTwoFactorTokenAsync>d__132")]
public virtual Task`1<bool> VerifyTwoFactorTokenAsync(TUser user, string tokenProvider, string token);
    public virtual Task`1<string> GenerateTwoFactorTokenAsync(TUser user, string tokenProvider);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<GetTwoFactorEnabledAsync>d__134")]
public virtual Task`1<bool> GetTwoFactorEnabledAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<SetTwoFactorEnabledAsync>d__135")]
public virtual Task`1<IdentityResult> SetTwoFactorEnabledAsync(TUser user, bool enabled);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<IsLockedOutAsync>d__136")]
public virtual Task`1<bool> IsLockedOutAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<SetLockoutEnabledAsync>d__137")]
public virtual Task`1<IdentityResult> SetLockoutEnabledAsync(TUser user, bool enabled);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<GetLockoutEnabledAsync>d__138")]
public virtual Task`1<bool> GetLockoutEnabledAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<GetLockoutEndDateAsync>d__139")]
public virtual Task`1<Nullable`1<DateTimeOffset>> GetLockoutEndDateAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<SetLockoutEndDateAsync>d__140")]
public virtual Task`1<IdentityResult> SetLockoutEndDateAsync(TUser user, Nullable`1<DateTimeOffset> lockoutEnd);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<AccessFailedAsync>d__141")]
public virtual Task`1<IdentityResult> AccessFailedAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<ResetAccessFailedCountAsync>d__142")]
public virtual Task`1<IdentityResult> ResetAccessFailedCountAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<GetAccessFailedCountAsync>d__143")]
public virtual Task`1<int> GetAccessFailedCountAsync(TUser user);
    public virtual Task`1<IList`1<TUser>> GetUsersForClaimAsync(Claim claim);
    public virtual Task`1<IList`1<TUser>> GetUsersInRoleAsync(string roleName);
    public virtual Task`1<string> GetAuthenticationTokenAsync(TUser user, string loginProvider, string tokenName);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<SetAuthenticationTokenAsync>d__147")]
public virtual Task`1<IdentityResult> SetAuthenticationTokenAsync(TUser user, string loginProvider, string tokenName, string tokenValue);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<RemoveAuthenticationTokenAsync>d__148")]
public virtual Task`1<IdentityResult> RemoveAuthenticationTokenAsync(TUser user, string loginProvider, string tokenName);
    public virtual Task`1<string> GetAuthenticatorKeyAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<ResetAuthenticatorKeyAsync>d__150")]
public virtual Task`1<IdentityResult> ResetAuthenticatorKeyAsync(TUser user);
    public virtual string GenerateNewAuthenticatorKey();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<GenerateNewTwoFactorRecoveryCodesAsync>d__152")]
public virtual Task`1<IEnumerable`1<string>> GenerateNewTwoFactorRecoveryCodesAsync(TUser user, int number);
    protected virtual string CreateTwoFactorRecoveryCode();
    private static char GetRandomRecoveryCodeChar();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<RedeemTwoFactorRecoveryCodeAsync>d__156")]
public virtual Task`1<IdentityResult> RedeemTwoFactorRecoveryCodeAsync(TUser user, string code);
    public virtual Task`1<int> CountRecoveryCodesAsync(TUser user);
    protected virtual void Dispose(bool disposing);
    private IUserTwoFactorStore`1<TUser> GetUserTwoFactorStore();
    private IUserLockoutStore`1<TUser> GetUserLockoutStore();
    private IUserEmailStore`1<TUser> GetEmailStore();
    private IUserEmailStore`1<TUser> GetOptionalEmailStore();
    private IUserPhoneNumberStore`1<TUser> GetPhoneNumberStore();
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<CreateSecurityTokenAsync>d__164")]
public virtual Task`1<Byte[]> CreateSecurityTokenAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<UpdateSecurityStampInternal>d__165")]
private Task UpdateSecurityStampInternal(TUser user);
    protected virtual Task`1<IdentityResult> UpdatePasswordHash(TUser user, string newPassword, bool validatePassword);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<UpdatePasswordHash>d__167")]
private Task`1<IdentityResult> UpdatePasswordHash(IUserPasswordStore`1<TUser> passwordStore, TUser user, string newPassword, bool validatePassword);
    private IUserRoleStore`1<TUser> GetUserRoleStore();
    private static string NewSecurityStamp();
    private IUserLoginStore`1<TUser> GetLoginStore();
    private IUserSecurityStampStore`1<TUser> GetSecurityStore();
    private IUserClaimStore`1<TUser> GetClaimStore();
    public static string GetChangeEmailTokenPurpose(string newEmail);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<ValidateUserAsync>d__174")]
protected Task`1<IdentityResult> ValidateUserAsync(TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<ValidatePasswordAsync>d__175")]
protected Task`1<IdentityResult> ValidatePasswordAsync(TUser user, string password);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserManager`1/<UpdateUserAsync>d__176")]
protected virtual Task`1<IdentityResult> UpdateUserAsync(TUser user);
    private IUserAuthenticatorKeyStore`1<TUser> GetAuthenticatorKeyStore();
    private IUserTwoFactorRecoveryCodeStore`1<TUser> GetRecoveryCodeStore();
    private IUserAuthenticationTokenStore`1<TUser> GetAuthenticationTokenStore();
    private IUserPasswordStore`1<TUser> GetPasswordStore();
    protected void ThrowIfDisposed();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Identity.UserOptions : object {
    [CompilerGeneratedAttribute]
private string <AllowedUserNameCharacters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RequireUniqueEmail>k__BackingField;
    public string AllowedUserNameCharacters { get; public set; }
    public bool RequireUniqueEmail { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AllowedUserNameCharacters();
    [CompilerGeneratedAttribute]
public void set_AllowedUserNameCharacters(string value);
    [CompilerGeneratedAttribute]
public bool get_RequireUniqueEmail();
    [CompilerGeneratedAttribute]
public void set_RequireUniqueEmail(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.AspNetCore.Identity.UserValidator`1 : object {
    [CompilerGeneratedAttribute]
private IdentityErrorDescriber <Describer>k__BackingField;
    public IdentityErrorDescriber Describer { get; private set; }
    [NullableContextAttribute("2")]
public UserValidator`1(IdentityErrorDescriber errors);
    [CompilerGeneratedAttribute]
public IdentityErrorDescriber get_Describer();
    [CompilerGeneratedAttribute]
private void set_Describer(IdentityErrorDescriber value);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserValidator`1/<ValidateAsync>d__5")]
public virtual Task`1<IdentityResult> ValidateAsync(UserManager`1<TUser> manager, TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserValidator`1/<ValidateUserName>d__6")]
private Task`1<List`1<IdentityError>> ValidateUserName(UserManager`1<TUser> manager, TUser user);
    [AsyncStateMachineAttribute("Microsoft.AspNetCore.Identity.UserValidator`1/<ValidateEmail>d__7")]
private Task`1<List`1<IdentityError>> ValidateEmail(UserManager`1<TUser> manager, TUser user, List`1<IdentityError> errors);
}
internal static class Microsoft.AspNetCore.Shared.ArgumentNullThrowHelper : object {
    [NullableContextAttribute("2")]
public static void ThrowIfNull(object argument, string paramName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.AspNetCore.Shared.ObjectDisposedThrowHelper : object {
    public static void ThrowIf(bool condition, object instance);
    public static void ThrowIf(bool condition, Type type);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.IdentityServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IdentityBuilder AddIdentityCore(IServiceCollection services);
    [ExtensionAttribute]
public static IdentityBuilder AddIdentityCore(IServiceCollection services, Action`1<IdentityOptions> setupAction);
}
internal static class Microsoft.Extensions.Identity.Core.LoggerEventIds : object {
    public static EventId RoleValidationFailed;
    public static EventId InvalidPassword;
    public static EventId UserAlreadyHasPassword;
    public static EventId ChangePasswordFailed;
    public static EventId AddLoginFailed;
    public static EventId UserAlreadyInRole;
    public static EventId UserNotInRole;
    public static EventId PhoneNumberChanged;
    public static EventId VerifyUserTokenFailed;
    public static EventId VerifyTwoFactorTokenFailed;
    public static EventId LockoutFailed;
    public static EventId UserLockedOut;
    public static EventId UserValidationFailed;
    public static EventId PasswordValidationFailed;
    public static EventId GetSecurityStampFailed;
    private static LoggerEventIds();
}
internal static class Microsoft.Extensions.Identity.Core.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string ConcurrencyFailure { get; }
    internal static string DefaultError { get; }
    internal static string DuplicateEmail { get; }
    internal static string DuplicateRoleName { get; }
    internal static string DuplicateUserName { get; }
    internal static string InvalidEmail { get; }
    internal static string InvalidManagerType { get; }
    internal static string InvalidPasswordHasherCompatibilityMode { get; }
    internal static string InvalidPasswordHasherIterationCount { get; }
    internal static string InvalidRoleName { get; }
    internal static string InvalidToken { get; }
    internal static string InvalidUserName { get; }
    internal static string LoginAlreadyAssociated { get; }
    internal static string MustCallAddIdentity { get; }
    internal static string NoTokenProvider { get; }
    internal static string NullSecurityStamp { get; }
    internal static string PasswordMismatch { get; }
    internal static string PasswordRequiresDigit { get; }
    internal static string PasswordRequiresLower { get; }
    internal static string PasswordRequiresNonAlphanumeric { get; }
    internal static string PasswordRequiresUpper { get; }
    internal static string PasswordTooShort { get; }
    internal static string RoleNotFound { get; }
    internal static string StoreNotIQueryableRoleStore { get; }
    internal static string StoreNotIQueryableUserStore { get; }
    internal static string StoreNotIRoleClaimStore { get; }
    internal static string StoreNotIUserAuthenticationTokenStore { get; }
    internal static string StoreNotIUserClaimStore { get; }
    internal static string StoreNotIUserConfirmationStore { get; }
    internal static string StoreNotIUserEmailStore { get; }
    internal static string StoreNotIUserLockoutStore { get; }
    internal static string StoreNotIUserLoginStore { get; }
    internal static string StoreNotIUserPasswordStore { get; }
    internal static string StoreNotIUserPhoneNumberStore { get; }
    internal static string StoreNotIUserRoleStore { get; }
    internal static string StoreNotIUserSecurityStampStore { get; }
    internal static string StoreNotIUserAuthenticatorKeyStore { get; }
    internal static string StoreNotIUserTwoFactorStore { get; }
    internal static string RecoveryCodeRedemptionFailed { get; }
    internal static string UserAlreadyHasPassword { get; }
    internal static string UserAlreadyInRole { get; }
    internal static string UserLockedOut { get; }
    internal static string UserLockoutNotEnabled { get; }
    internal static string UserNameNotFound { get; }
    internal static string UserNotInRole { get; }
    internal static string StoreNotIUserTwoFactorRecoveryCodeStore { get; }
    internal static string PasswordRequiresUniqueChars { get; }
    internal static string NoRoleType { get; }
    internal static string StoreNotIProtectedUserStore { get; }
    internal static string NoPersonalDataProtector { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    private static string GetResourceString(string resourceKey, String[] formatterNames);
    internal static string get_ConcurrencyFailure();
    internal static string get_DefaultError();
    internal static string get_DuplicateEmail();
    internal static string FormatDuplicateEmail(object p0);
    internal static string get_DuplicateRoleName();
    internal static string FormatDuplicateRoleName(object p0);
    internal static string get_DuplicateUserName();
    internal static string FormatDuplicateUserName(object p0);
    internal static string get_InvalidEmail();
    internal static string FormatInvalidEmail(object p0);
    internal static string get_InvalidManagerType();
    internal static string FormatInvalidManagerType(object p0, object p1, object p2);
    internal static string get_InvalidPasswordHasherCompatibilityMode();
    internal static string get_InvalidPasswordHasherIterationCount();
    internal static string get_InvalidRoleName();
    internal static string FormatInvalidRoleName(object p0);
    internal static string get_InvalidToken();
    internal static string get_InvalidUserName();
    internal static string FormatInvalidUserName(object p0);
    internal static string get_LoginAlreadyAssociated();
    internal static string get_MustCallAddIdentity();
    internal static string get_NoTokenProvider();
    internal static string FormatNoTokenProvider(object p0, object p1);
    internal static string get_NullSecurityStamp();
    internal static string get_PasswordMismatch();
    internal static string get_PasswordRequiresDigit();
    internal static string get_PasswordRequiresLower();
    internal static string get_PasswordRequiresNonAlphanumeric();
    internal static string get_PasswordRequiresUpper();
    internal static string get_PasswordTooShort();
    internal static string FormatPasswordTooShort(object p0);
    internal static string get_RoleNotFound();
    internal static string FormatRoleNotFound(object p0);
    internal static string get_StoreNotIQueryableRoleStore();
    internal static string get_StoreNotIQueryableUserStore();
    internal static string get_StoreNotIRoleClaimStore();
    internal static string get_StoreNotIUserAuthenticationTokenStore();
    internal static string get_StoreNotIUserClaimStore();
    internal static string get_StoreNotIUserConfirmationStore();
    internal static string get_StoreNotIUserEmailStore();
    internal static string get_StoreNotIUserLockoutStore();
    internal static string get_StoreNotIUserLoginStore();
    internal static string get_StoreNotIUserPasswordStore();
    internal static string get_StoreNotIUserPhoneNumberStore();
    internal static string get_StoreNotIUserRoleStore();
    internal static string get_StoreNotIUserSecurityStampStore();
    internal static string get_StoreNotIUserAuthenticatorKeyStore();
    internal static string get_StoreNotIUserTwoFactorStore();
    internal static string get_RecoveryCodeRedemptionFailed();
    internal static string get_UserAlreadyHasPassword();
    internal static string get_UserAlreadyInRole();
    internal static string FormatUserAlreadyInRole(object p0);
    internal static string get_UserLockedOut();
    internal static string get_UserLockoutNotEnabled();
    internal static string get_UserNameNotFound();
    internal static string FormatUserNameNotFound(object p0);
    internal static string get_UserNotInRole();
    internal static string FormatUserNotInRole(object p0);
    internal static string get_StoreNotIUserTwoFactorRecoveryCodeStore();
    internal static string get_PasswordRequiresUniqueChars();
    internal static string FormatPasswordRequiresUniqueChars(object p0);
    internal static string get_NoRoleType();
    internal static string get_StoreNotIProtectedUserStore();
    internal static string get_NoPersonalDataProtector();
}
[ExtensionAttribute]
public static class System.Security.Claims.PrincipalExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string FindFirstValue(ClaimsPrincipal principal, string claimType);
}
