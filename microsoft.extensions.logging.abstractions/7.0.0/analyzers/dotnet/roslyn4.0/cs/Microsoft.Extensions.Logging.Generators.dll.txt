internal static class FxResources.Microsoft.Extensions.Logging.Generators.SR : object {
}
internal abstract class Microsoft.CodeAnalysis.DotnetRuntime.Extensions.AbstractSyntaxHelper : object {
    public bool IsCaseSensitive { get; }
    public abstract virtual bool get_IsCaseSensitive();
    public abstract virtual bool IsValidIdentifier(string name);
    public abstract virtual SyntaxToken GetUnqualifiedIdentifierOfName(SyntaxNode name);
    public abstract virtual bool IsAnyNamespaceBlock(SyntaxNode node);
    public abstract virtual bool IsAttribute(SyntaxNode node);
    public abstract virtual SyntaxNode GetNameOfAttribute(SyntaxNode node);
    public abstract virtual bool IsAttributeList(SyntaxNode node);
    public abstract virtual SeparatedSyntaxList`1<SyntaxNode> GetAttributesOfAttributeList(SyntaxNode node);
    public abstract virtual void AddAttributeTargets(SyntaxNode node, ValueListBuilder`1& targets);
    public abstract virtual bool IsLambdaExpression(SyntaxNode node);
    public abstract virtual void AddAliases(SyntaxNode node, ValueListBuilder`1& aliases, bool global);
    public abstract virtual void AddAliases(CompilationOptions options, ValueListBuilder`1& aliases);
    public abstract virtual bool ContainsGlobalAliases(SyntaxNode root);
}
internal class Microsoft.CodeAnalysis.DotnetRuntime.Extensions.CSharpSyntaxHelper : AbstractSyntaxHelper {
    public static ISyntaxHelper Instance;
    public bool IsCaseSensitive { get; }
    private static CSharpSyntaxHelper();
    public virtual bool get_IsCaseSensitive();
    public virtual bool IsValidIdentifier(string name);
    public virtual bool IsAnyNamespaceBlock(SyntaxNode node);
    public virtual bool IsAttribute(SyntaxNode node);
    public virtual SyntaxNode GetNameOfAttribute(SyntaxNode node);
    public virtual bool IsAttributeList(SyntaxNode node);
    public virtual void AddAttributeTargets(SyntaxNode node, ValueListBuilder`1& targets);
    public virtual SeparatedSyntaxList`1<SyntaxNode> GetAttributesOfAttributeList(SyntaxNode node);
    public virtual bool IsLambdaExpression(SyntaxNode node);
    public virtual SyntaxToken GetUnqualifiedIdentifierOfName(SyntaxNode node);
    public virtual void AddAliases(SyntaxNode node, ValueListBuilder`1& aliases, bool global);
    private static void AddAliases(SyntaxList`1<UsingDirectiveSyntax> usings, ValueListBuilder`1& aliases, bool global);
    public virtual void AddAliases(CompilationOptions compilation, ValueListBuilder`1& aliases);
    public virtual bool ContainsGlobalAliases(SyntaxNode root);
}
[IsReadOnlyAttribute]
internal class Microsoft.CodeAnalysis.DotnetRuntime.Extensions.GeneratorAttributeSyntaxContext : ValueType {
    [CompilerGeneratedAttribute]
private SyntaxNode <TargetNode>k__BackingField;
    [CompilerGeneratedAttribute]
private ISymbol <TargetSymbol>k__BackingField;
    [CompilerGeneratedAttribute]
private SemanticModel <SemanticModel>k__BackingField;
    [CompilerGeneratedAttribute]
private ImmutableArray`1<AttributeData> <Attributes>k__BackingField;
    public SyntaxNode TargetNode { get; }
    public ISymbol TargetSymbol { get; }
    public SemanticModel SemanticModel { get; }
    public ImmutableArray`1<AttributeData> Attributes { get; }
    internal GeneratorAttributeSyntaxContext(SyntaxNode targetNode, ISymbol targetSymbol, SemanticModel semanticModel, ImmutableArray`1<AttributeData> attributes);
    [CompilerGeneratedAttribute]
public SyntaxNode get_TargetNode();
    [CompilerGeneratedAttribute]
public ISymbol get_TargetSymbol();
    [CompilerGeneratedAttribute]
public SemanticModel get_SemanticModel();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<AttributeData> get_Attributes();
}
internal class Microsoft.CodeAnalysis.DotnetRuntime.Extensions.GlobalAliases : object {
    public static GlobalAliases Empty;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<ValueTuple`2<string, string>> AliasAndSymbolNames;
    private int _hashCode;
    private GlobalAliases(ImmutableArray`1<ValueTuple`2<string, string>> aliasAndSymbolNames);
    private static GlobalAliases();
    public static GlobalAliases Create(ImmutableArray`1<ValueTuple`2<string, string>> aliasAndSymbolNames);
    public static GlobalAliases Concat(GlobalAliases ga1, GlobalAliases ga2);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(GlobalAliases aliases);
}
internal interface Microsoft.CodeAnalysis.DotnetRuntime.Extensions.ISyntaxHelper {
    public bool IsCaseSensitive { get; }
    public abstract virtual bool get_IsCaseSensitive();
    public abstract virtual bool IsValidIdentifier(string name);
    public abstract virtual bool IsAnyNamespaceBlock(SyntaxNode node);
    public abstract virtual bool IsAttributeList(SyntaxNode node);
    public abstract virtual SeparatedSyntaxList`1<SyntaxNode> GetAttributesOfAttributeList(SyntaxNode node);
    public abstract virtual void AddAttributeTargets(SyntaxNode node, ValueListBuilder`1& targets);
    public abstract virtual bool IsAttribute(SyntaxNode node);
    public abstract virtual SyntaxNode GetNameOfAttribute(SyntaxNode node);
    public abstract virtual bool IsLambdaExpression(SyntaxNode node);
    public abstract virtual SyntaxToken GetUnqualifiedIdentifierOfName(SyntaxNode node);
    public abstract virtual void AddAliases(SyntaxNode node, ValueListBuilder`1& aliases, bool global);
    public abstract virtual void AddAliases(CompilationOptions options, ValueListBuilder`1& aliases);
    public abstract virtual bool ContainsGlobalAliases(SyntaxNode root);
}
[ExtensionAttribute]
internal static class Microsoft.CodeAnalysis.DotnetRuntime.Extensions.RoslynExtensions : object {
    [ExtensionAttribute]
public static INamedTypeSymbol GetBestTypeByMetadataName(Compilation compilation, string fullyQualifiedMetadataName);
    [ExtensionAttribute]
private static SymbolVisibility GetResultantVisibility(ISymbol symbol);
    [ExtensionAttribute]
internal static bool HasAttributeSuffix(string name, bool isCaseSensitive);
    [ExtensionAttribute]
public static ImmutableArray`1<T> ToImmutableArray(ReadOnlySpan`1<T> span);
    [ExtensionAttribute]
public static SimpleNameSyntax GetUnqualifiedName(NameSyntax name);
}
[ExtensionAttribute]
internal static class Microsoft.CodeAnalysis.DotnetRuntime.Extensions.SyntaxValueProviderExtensions : object {
    private static ConditionalWeakTable`2<SyntaxTree, SyntaxTreeInfo> s_treeToInfo;
    private static SyntaxValueProviderExtensions();
    [ExtensionAttribute]
public static IncrementalValuesProvider`1<T> ForAttributeWithMetadataName(SyntaxValueProvider this, IncrementalGeneratorInitializationContext context, string fullyQualifiedMetadataName, Func`3<SyntaxNode, CancellationToken, bool> predicate, Func`3<GeneratorAttributeSyntaxContext, CancellationToken, T> transform);
    [ExtensionAttribute]
public static IncrementalValuesProvider`1<ValueTuple`2<SyntaxTree, ImmutableArray`1<SyntaxNode>>> ForAttributeWithSimpleName(SyntaxValueProvider this, IncrementalGeneratorInitializationContext context, string simpleName, Func`3<SyntaxNode, CancellationToken, bool> predicate);
    private static SyntaxTreeInfo GetTreeInfo(SyntaxTree tree, ISyntaxHelper syntaxHelper, CancellationToken cancellationToken);
    private static ImmutableArray`1<SyntaxNode> GetMatchingNodes(ISyntaxHelper syntaxHelper, GlobalAliases globalAliases, SyntaxTree syntaxTree, string name, Func`3<SyntaxNode, CancellationToken, bool> predicate, CancellationToken cancellationToken);
    private static bool ContainsAttributeList(SyntaxNode node);
    [CompilerGeneratedAttribute]
internal static ImmutableArray`1<AttributeData> <ForAttributeWithMetadataName>g__getMatchingAttributes|2_1(SyntaxNode attributeTarget, ISymbol symbol, string fullyQualifiedMetadataName);
    [CompilerGeneratedAttribute]
internal static void <ForAttributeWithMetadataName>g__addMatchingAttributes|2_2(ValueListBuilder`1& result, Nullable`1<ImmutableArray`1<AttributeData>> attributes, <>c__DisplayClass2_1`1& );
    [CompilerGeneratedAttribute]
internal static GlobalAliases <ForAttributeWithSimpleName>g__getGlobalAliasesInCompilationUnit|5_7(SyntaxNode compilationUnit);
    [CompilerGeneratedAttribute]
internal static SyntaxTreeInfo <GetTreeInfo>g__computeTreeInfo|6_0(<>c__DisplayClass6_0& );
    [CompilerGeneratedAttribute]
internal static void <GetMatchingNodes>g__processCompilationUnit|7_0(SyntaxNode compilationUnit, ValueListBuilder`1& localAliases, ValueListBuilder`1& seenNames, ValueListBuilder`1& results, ValueListBuilder`1& attributeTargets, <>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static void <GetMatchingNodes>g__processCompilationOrNamespaceMembers|7_1(SyntaxNode node, ValueListBuilder`1& localAliases, ValueListBuilder`1& seenNames, ValueListBuilder`1& results, ValueListBuilder`1& attributeTargets, <>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static void <GetMatchingNodes>g__processNamespaceBlock|7_2(SyntaxNode namespaceBlock, ValueListBuilder`1& localAliases, ValueListBuilder`1& seenNames, ValueListBuilder`1& results, ValueListBuilder`1& attributeTargets, <>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static void <GetMatchingNodes>g__processMember|7_3(SyntaxNode member, ValueListBuilder`1& localAliases, ValueListBuilder`1& seenNames, ValueListBuilder`1& results, ValueListBuilder`1& attributeTargets, <>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static bool <GetMatchingNodes>g__matchesName|7_4(string name, string matchAgainst, bool withAttributeSuffix, <>c__DisplayClass7_0& );
    [CompilerGeneratedAttribute]
internal static bool <GetMatchingNodes>g__matchesAttributeName|7_5(ValueListBuilder`1& localAliases, ValueListBuilder`1& seenNames, string currentAttributeName, bool withAttributeSuffix, <>c__DisplayClass7_0& );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Extensions.Logging.Generators.DiagnosticDescriptors : object {
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <InvalidLoggingMethodName>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ShouldntMentionLogLevelInMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <InvalidLoggingMethodParameterName>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <MissingRequiredType>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ShouldntReuseEventIds>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <LoggingMethodMustReturnVoid>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <MissingLoggerArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <LoggingMethodShouldBeStatic>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <LoggingMethodMustBePartial>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <LoggingMethodIsGeneric>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <RedundantQualifierInMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ShouldntMentionExceptionInMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <TemplateHasNoCorrespondingArgument>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ArgumentHasNoCorrespondingTemplate>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <LoggingMethodHasBody>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <MissingLogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <ShouldntMentionLoggerInMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <MissingLoggerField>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <MultipleLoggerFields>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <InconsistentTemplateCasing>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <MalformedFormatStrings>k__BackingField;
    [CompilerGeneratedAttribute]
private static DiagnosticDescriptor <GeneratingForMax6Arguments>k__BackingField;
    public static DiagnosticDescriptor InvalidLoggingMethodName { get; }
    public static DiagnosticDescriptor ShouldntMentionLogLevelInMessage { get; }
    public static DiagnosticDescriptor InvalidLoggingMethodParameterName { get; }
    public static DiagnosticDescriptor MissingRequiredType { get; }
    public static DiagnosticDescriptor ShouldntReuseEventIds { get; }
    public static DiagnosticDescriptor LoggingMethodMustReturnVoid { get; }
    public static DiagnosticDescriptor MissingLoggerArgument { get; }
    public static DiagnosticDescriptor LoggingMethodShouldBeStatic { get; }
    public static DiagnosticDescriptor LoggingMethodMustBePartial { get; }
    public static DiagnosticDescriptor LoggingMethodIsGeneric { get; }
    public static DiagnosticDescriptor RedundantQualifierInMessage { get; }
    public static DiagnosticDescriptor ShouldntMentionExceptionInMessage { get; }
    public static DiagnosticDescriptor TemplateHasNoCorrespondingArgument { get; }
    public static DiagnosticDescriptor ArgumentHasNoCorrespondingTemplate { get; }
    public static DiagnosticDescriptor LoggingMethodHasBody { get; }
    public static DiagnosticDescriptor MissingLogLevel { get; }
    public static DiagnosticDescriptor ShouldntMentionLoggerInMessage { get; }
    public static DiagnosticDescriptor MissingLoggerField { get; }
    public static DiagnosticDescriptor MultipleLoggerFields { get; }
    public static DiagnosticDescriptor InconsistentTemplateCasing { get; }
    public static DiagnosticDescriptor MalformedFormatStrings { get; }
    public static DiagnosticDescriptor GeneratingForMax6Arguments { get; }
    private static DiagnosticDescriptors();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_InvalidLoggingMethodName();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ShouldntMentionLogLevelInMessage();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_InvalidLoggingMethodParameterName();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_MissingRequiredType();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ShouldntReuseEventIds();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_LoggingMethodMustReturnVoid();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_MissingLoggerArgument();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_LoggingMethodShouldBeStatic();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_LoggingMethodMustBePartial();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_LoggingMethodIsGeneric();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_RedundantQualifierInMessage();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ShouldntMentionExceptionInMessage();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_TemplateHasNoCorrespondingArgument();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ArgumentHasNoCorrespondingTemplate();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_LoggingMethodHasBody();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_MissingLogLevel();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_ShouldntMentionLoggerInMessage();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_MissingLoggerField();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_MultipleLoggerFields();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_InconsistentTemplateCasing();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_MalformedFormatStrings();
    [CompilerGeneratedAttribute]
public static DiagnosticDescriptor get_GeneratingForMax6Arguments();
}
[GeneratorAttribute]
public class Microsoft.Extensions.Logging.Generators.LoggerMessageGenerator : object {
    private static string ConvertEndOfLineAndQuotationCharactersToEscapeForm(string s);
    public sealed virtual void Initialize(IncrementalGeneratorInitializationContext context);
    private static void Execute(Compilation compilation, ImmutableArray`1<ClassDeclarationSyntax> classes, SourceProductionContext context);
}
internal static class Roslyn.Utilities.Hash : object {
    internal static int Combine(int newKey, int currentKey);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[DefaultMemberAttribute("Item")]
internal class System.Collections.Generic.ValueListBuilder`1 : ValueType {
    private Span`1<T> _span;
    private T[] _arrayFromPool;
    private int _pos;
    public int Length { get; public set; }
    public T& Item { get; }
    public ValueListBuilder`1(Span`1<T> initialSpan);
    public int get_Length();
    public void set_Length(int value);
    public T& get_Item(int index);
    public void Append(T item);
    private void AddWithResize(T item);
    public ReadOnlySpan`1<T> AsSpan();
    public void Dispose();
    private void Grow();
    public T Pop();
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.AllowNullAttribute : Attribute {
}
[AttributeUsageAttribute("2432")]
internal class System.Diagnostics.CodeAnalysis.DisallowNullAttribute : Attribute {
}
[AttributeUsageAttribute("64")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ParameterValue>k__BackingField;
    public bool ParameterValue { get; }
    public DoesNotReturnIfAttribute(bool parameterValue);
    [CompilerGeneratedAttribute]
public bool get_ParameterValue();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullAttribute : Attribute {
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public MaybeNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public String[] Members { get; }
    public MemberNotNullAttribute(string member);
    public MemberNotNullAttribute(String[] members);
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("192")]
internal class System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <Members>k__BackingField;
    public bool ReturnValue { get; }
    public String[] Members { get; }
    public MemberNotNullWhenAttribute(bool returnValue, string member);
    public MemberNotNullWhenAttribute(bool returnValue, String[] members);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
    [CompilerGeneratedAttribute]
public String[] get_Members();
}
[AttributeUsageAttribute("10624")]
internal class System.Diagnostics.CodeAnalysis.NotNullAttribute : Attribute {
}
[AttributeUsageAttribute("10368")]
internal class System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ParameterName>k__BackingField;
    public string ParameterName { get; }
    public NotNullIfNotNullAttribute(string parameterName);
    [CompilerGeneratedAttribute]
public string get_ParameterName();
}
[AttributeUsageAttribute("2048")]
internal class System.Diagnostics.CodeAnalysis.NotNullWhenAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <ReturnValue>k__BackingField;
    public bool ReturnValue { get; }
    public NotNullWhenAttribute(bool returnValue);
    [CompilerGeneratedAttribute]
public bool get_ReturnValue();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string InvalidLoggingMethodNameMessage { get; }
    internal static string InvalidLoggingMethodParameterNameMessage { get; }
    internal static string MissingRequiredTypeTitle { get; }
    internal static string MissingRequiredTypeMessage { get; }
    internal static string ShouldntReuseEventIdsTitle { get; }
    internal static string ShouldntReuseEventIdsMessage { get; }
    internal static string LoggingMethodMustReturnVoidMessage { get; }
    internal static string MissingLoggerArgumentTitle { get; }
    internal static string MissingLoggerArgumentMessage { get; }
    internal static string LoggingMethodShouldBeStaticMessage { get; }
    internal static string LoggingMethodMustBePartialMessage { get; }
    internal static string LoggingMethodIsGenericMessage { get; }
    internal static string ShouldntMentionInTemplateMessage { get; }
    internal static string ShouldntMentionExceptionInMessageTitle { get; }
    internal static string RedundantQualifierInMessageMessage { get; }
    internal static string RedundantQualifierInMessageTitle { get; }
    internal static string ArgumentHasNoCorrespondingTemplateMessage { get; }
    internal static string ArgumentHasNoCorrespondingTemplateTitle { get; }
    internal static string TemplateHasNoCorrespondingArgumentMessage { get; }
    internal static string TemplateHasNoCorrespondingArgumentTitle { get; }
    internal static string LoggingMethodHasBodyMessage { get; }
    internal static string MissingLogLevelMessage { get; }
    internal static string ShouldntMentionLogLevelInMessageTitle { get; }
    internal static string ShouldntMentionLoggerInMessageTitle { get; }
    internal static string MissingLoggerFieldMessage { get; }
    internal static string MissingLoggerFieldTitle { get; }
    internal static string MultipleLoggerFieldsMessage { get; }
    internal static string MultipleLoggerFieldsTitle { get; }
    internal static string InconsistentTemplateCasingMessage { get; }
    internal static string MalformedFormatStringsMessage { get; }
    internal static string GeneratingForMax6ArgumentsMessage { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_InvalidLoggingMethodNameMessage();
    internal static string get_InvalidLoggingMethodParameterNameMessage();
    internal static string get_MissingRequiredTypeTitle();
    internal static string get_MissingRequiredTypeMessage();
    internal static string get_ShouldntReuseEventIdsTitle();
    internal static string get_ShouldntReuseEventIdsMessage();
    internal static string get_LoggingMethodMustReturnVoidMessage();
    internal static string get_MissingLoggerArgumentTitle();
    internal static string get_MissingLoggerArgumentMessage();
    internal static string get_LoggingMethodShouldBeStaticMessage();
    internal static string get_LoggingMethodMustBePartialMessage();
    internal static string get_LoggingMethodIsGenericMessage();
    internal static string get_ShouldntMentionInTemplateMessage();
    internal static string get_ShouldntMentionExceptionInMessageTitle();
    internal static string get_RedundantQualifierInMessageMessage();
    internal static string get_RedundantQualifierInMessageTitle();
    internal static string get_ArgumentHasNoCorrespondingTemplateMessage();
    internal static string get_ArgumentHasNoCorrespondingTemplateTitle();
    internal static string get_TemplateHasNoCorrespondingArgumentMessage();
    internal static string get_TemplateHasNoCorrespondingArgumentTitle();
    internal static string get_LoggingMethodHasBodyMessage();
    internal static string get_MissingLogLevelMessage();
    internal static string get_ShouldntMentionLogLevelInMessageTitle();
    internal static string get_ShouldntMentionLoggerInMessageTitle();
    internal static string get_MissingLoggerFieldMessage();
    internal static string get_MissingLoggerFieldTitle();
    internal static string get_MultipleLoggerFieldsMessage();
    internal static string get_MultipleLoggerFieldsTitle();
    internal static string get_InconsistentTemplateCasingMessage();
    internal static string get_MalformedFormatStringsMessage();
    internal static string get_GeneratingForMax6ArgumentsMessage();
}
