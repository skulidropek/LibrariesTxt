internal static class FxResources.Microsoft.Extensions.Logging.Configuration.SR : object {
}
[ExtensionAttribute]
[GeneratedCodeAttribute("Microsoft.Extensions.Configuration.Binder.SourceGeneration", "9.0.10.17209")]
internal static class Microsoft.Extensions.Configuration.Binder.SourceGeneration.<BindingExtensions_g>FEC7713CD9BFDC16219B2837A9AB26ED7666212FD989252C69BBA06945B4961A8__BindingExtensions : object {
    [ExtensionAttribute]
[<BindingExtensions_g>FEC7713CD9BFDC16219B2837A9AB26ED7666212FD989252C69BBA06945B4961A8__InterceptsLocationAttribute("/_/src/libraries/Microsoft.Extensions.Logging.Configuration/src/LoggerFilterConfigureOptions.cs", "33", "52")]
public static T GetValue(IConfiguration configuration, string key, T defaultValue);
    [ExtensionAttribute]
public static object GetValueCore(IConfiguration configuration, Type type, string key);
    public static bool ParseBool(string value, Func`1<string> getPath);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfiguration`1 {
    public IConfiguration Configuration { get; }
    public abstract virtual IConfiguration get_Configuration();
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Logging.Configuration.ILoggerProviderConfigurationFactory {
    public abstract virtual IConfiguration GetConfiguration(Type providerType);
}
internal class Microsoft.Extensions.Logging.Configuration.LoggerProviderConfiguration`1 : object {
    [CompilerGeneratedAttribute]
private IConfiguration <Configuration>k__BackingField;
    public IConfiguration Configuration { get; }
    public LoggerProviderConfiguration`1(ILoggerProviderConfigurationFactory providerConfigurationFactory);
    [CompilerGeneratedAttribute]
public sealed virtual IConfiguration get_Configuration();
}
internal class Microsoft.Extensions.Logging.Configuration.LoggerProviderConfigurationFactory : object {
    private IEnumerable`1<LoggingConfiguration> _configurations;
    public LoggerProviderConfigurationFactory(IEnumerable`1<LoggingConfiguration> configurations);
    public sealed virtual IConfiguration GetConfiguration(Type providerType);
}
internal class Microsoft.Extensions.Logging.Configuration.LoggerProviderConfigureOptions`2 : ConfigureFromConfigurationOptions`1<TOptions> {
    [RequiresDynamicCodeAttribute("Binding TOptions to configuration values may require generating dynamic code at runtime.")]
[RequiresUnreferencedCodeAttribute("TOptions's dependent types may have their members trimmed. Ensure all required members are preserved.")]
public LoggerProviderConfigureOptions`2(ILoggerProviderConfiguration`1<TProvider> providerConfiguration);
}
public static class Microsoft.Extensions.Logging.Configuration.LoggerProviderOptions : object {
    internal static string RequiresDynamicCodeMessage;
    internal static string TrimmingRequiresUnreferencedCodeMessage;
    [NullableContextAttribute("1")]
[RequiresDynamicCodeAttribute("Binding TOptions to configuration values may require generating dynamic code at runtime.")]
[RequiresUnreferencedCodeAttribute("TOptions's dependent types may have their members trimmed. Ensure all required members are preserved.")]
public static void RegisterProviderOptions(IServiceCollection services);
}
[NullableContextAttribute("2")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.Extensions.Logging.Configuration.LoggerProviderOptionsChangeTokenSource`2 : ConfigurationChangeTokenSource`1<TOptions> {
    [NullableContextAttribute("1")]
public LoggerProviderOptionsChangeTokenSource`2(ILoggerProviderConfiguration`1<TProvider> providerConfiguration);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.Configuration.LoggingBuilderConfigurationExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void AddConfiguration(ILoggingBuilder builder);
}
internal class Microsoft.Extensions.Logging.Configuration.LoggingConfiguration : object {
    [CompilerGeneratedAttribute]
private IConfiguration <Configuration>k__BackingField;
    public IConfiguration Configuration { get; }
    public LoggingConfiguration(IConfiguration configuration);
    [CompilerGeneratedAttribute]
public IConfiguration get_Configuration();
}
internal class Microsoft.Extensions.Logging.LoggerFilterConfigureOptions : object {
    private static string LogLevelKey;
    private static string DefaultCategory;
    private IConfiguration _configuration;
    public LoggerFilterConfigureOptions(IConfiguration configuration);
    public sealed virtual void Configure(LoggerFilterOptions options);
    private void LoadDefaultConfigValues(LoggerFilterOptions options);
    private static void LoadRules(LoggerFilterOptions options, IConfigurationSection configurationSection, string logger);
    private static bool TryGetSwitch(string value, LogLevel& level);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.LoggingBuilderExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ILoggingBuilder AddConfiguration(ILoggingBuilder builder, IConfiguration configuration);
}
internal static class Microsoft.Extensions.Logging.ProviderAliasUtilities : object {
    private static string AliasAttributeTypeFullName;
    internal static string GetAlias(Type providerType);
}
[GeneratedCodeAttribute("Microsoft.Extensions.Configuration.Binder.SourceGeneration", "9.0.10.17209")]
[AttributeUsageAttribute("64")]
internal class System.Runtime.CompilerServices.<BindingExtensions_g>FEC7713CD9BFDC16219B2837A9AB26ED7666212FD989252C69BBA06945B4961A8__InterceptsLocationAttribute : Attribute {
    public <BindingExtensions_g>FEC7713CD9BFDC16219B2837A9AB26ED7666212FD989252C69BBA06945B4961A8__InterceptsLocationAttribute(string filePath, int line, int column);
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string ValueNotSupported { get; }
    private static SR();
    internal static bool UsingResourceKeys();
    private static string GetResourceString(string resourceKey);
    private static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_ValueNotSupported();
}
internal static class System.ThrowHelper : object {
    internal static void ThrowIfNull(object argument, string paramName);
    [DoesNotReturnAttribute]
private static void Throw(string paramName);
    public static string IfNullOrWhitespace(string argument, string paramName);
}
