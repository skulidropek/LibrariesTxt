[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.Extensions.Logging.Console.AnsiLogConsole : object {
    private StringBuilder _outputBuilder;
    private IAnsiSystemConsole _systemConsole;
    public AnsiLogConsole(IAnsiSystemConsole systemConsole);
    public sealed virtual void Write(string message, Nullable`1<ConsoleColor> background, Nullable`1<ConsoleColor> foreground);
    public sealed virtual void WriteLine(string message, Nullable`1<ConsoleColor> background, Nullable`1<ConsoleColor> foreground);
    public sealed virtual void Flush();
    private static string GetForegroundColorEscapeCode(ConsoleColor color);
    private static string GetBackgroundColorEscapeCode(ConsoleColor color);
}
internal class Microsoft.Extensions.Logging.Console.AnsiSystemConsole : object {
    private TextWriter _textWriter;
    public AnsiSystemConsole(bool stdErr);
    public sealed virtual void Write(string message);
}
internal class Microsoft.Extensions.Logging.Console.ConsoleLogger : object {
    private static string _loglevelPadding;
    private static string _messagePadding;
    private static string _newLineWithMessagePadding;
    private Nullable`1<ConsoleColor> DefaultConsoleColor;
    private string _name;
    private ConsoleLoggerProcessor _queueProcessor;
    [ThreadStaticAttribute]
private static StringBuilder _logBuilder;
    [CompilerGeneratedAttribute]
private IExternalScopeProvider <ScopeProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleLoggerOptions <Options>k__BackingField;
    internal IExternalScopeProvider ScopeProvider { get; internal set; }
    internal ConsoleLoggerOptions Options { get; internal set; }
    private static ConsoleLogger();
    internal ConsoleLogger(string name, ConsoleLoggerProcessor loggerProcessor);
    [CompilerGeneratedAttribute]
internal IExternalScopeProvider get_ScopeProvider();
    [CompilerGeneratedAttribute]
internal void set_ScopeProvider(IExternalScopeProvider value);
    [CompilerGeneratedAttribute]
internal ConsoleLoggerOptions get_Options();
    [CompilerGeneratedAttribute]
internal void set_Options(ConsoleLoggerOptions value);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public virtual void WriteMessage(LogLevel logLevel, string logName, int eventId, string message, Exception exception);
    private LogMessageEntry CreateDefaultLogMessage(StringBuilder logBuilder, LogLevel logLevel, string logName, int eventId, string message, Exception exception);
    private LogMessageEntry CreateSystemdLogMessage(StringBuilder logBuilder, LogLevel logLevel, string logName, int eventId, string message, Exception exception);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual IDisposable BeginScope(TState state);
    private static string GetLogLevelString(LogLevel logLevel);
    private static string GetSyslogSeverityString(LogLevel logLevel);
    private ConsoleColors GetLogLevelConsoleColors(LogLevel logLevel);
    private void GetScopeInformation(StringBuilder stringBuilder, bool multiLine);
    [CompilerGeneratedAttribute]
internal static void <CreateSystemdLogMessage>g__AppendAndReplaceNewLine|20_0(StringBuilder sb, string message);
}
public enum Microsoft.Extensions.Logging.Console.ConsoleLoggerFormat : Enum {
    public int value__;
    public static ConsoleLoggerFormat Default;
    public static ConsoleLoggerFormat Systemd;
}
public class Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions : object {
    private ConsoleLoggerFormat _format;
    [CompilerGeneratedAttribute]
private bool <IncludeScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DisableColors>k__BackingField;
    [CompilerGeneratedAttribute]
private LogLevel <LogToStandardErrorThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimestampFormat>k__BackingField;
    public bool IncludeScopes { get; public set; }
    public bool DisableColors { get; public set; }
    public ConsoleLoggerFormat Format { get; public set; }
    public LogLevel LogToStandardErrorThreshold { get; public set; }
    public string TimestampFormat { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IncludeScopes();
    [CompilerGeneratedAttribute]
public void set_IncludeScopes(bool value);
    [CompilerGeneratedAttribute]
public bool get_DisableColors();
    [CompilerGeneratedAttribute]
public void set_DisableColors(bool value);
    public ConsoleLoggerFormat get_Format();
    public void set_Format(ConsoleLoggerFormat value);
    [CompilerGeneratedAttribute]
public LogLevel get_LogToStandardErrorThreshold();
    [CompilerGeneratedAttribute]
public void set_LogToStandardErrorThreshold(LogLevel value);
    [CompilerGeneratedAttribute]
public string get_TimestampFormat();
    [CompilerGeneratedAttribute]
public void set_TimestampFormat(string value);
}
internal class Microsoft.Extensions.Logging.Console.ConsoleLoggerProcessor : object {
    private static int _maxQueuedMessages;
    private BlockingCollection`1<LogMessageEntry> _messageQueue;
    private Thread _outputThread;
    public IConsole Console;
    public IConsole ErrorConsole;
    public virtual void EnqueueMessage(LogMessageEntry message);
    internal virtual void WriteMessage(LogMessageEntry message);
    private void ProcessLogQueue();
    public sealed virtual void Dispose();
}
[ProviderAliasAttribute("Console")]
public class Microsoft.Extensions.Logging.Console.ConsoleLoggerProvider : object {
    private IOptionsMonitor`1<ConsoleLoggerOptions> _options;
    private ConcurrentDictionary`2<string, ConsoleLogger> _loggers;
    private ConsoleLoggerProcessor _messageQueue;
    private IDisposable _optionsReloadToken;
    private IExternalScopeProvider _scopeProvider;
    public ConsoleLoggerProvider(IOptionsMonitor`1<ConsoleLoggerOptions> options);
    private void ReloadLoggerOptions(ConsoleLoggerOptions options);
    public sealed virtual ILogger CreateLogger(string name);
    public sealed virtual void Dispose();
    public sealed virtual void SetScopeProvider(IExternalScopeProvider scopeProvider);
}
internal interface Microsoft.Extensions.Logging.Console.IAnsiSystemConsole {
    public abstract virtual void Write(string message);
}
internal interface Microsoft.Extensions.Logging.Console.IConsole {
    public abstract virtual void Write(string message, Nullable`1<ConsoleColor> background, Nullable`1<ConsoleColor> foreground);
    public abstract virtual void WriteLine(string message, Nullable`1<ConsoleColor> background, Nullable`1<ConsoleColor> foreground);
    public abstract virtual void Flush();
}
[IsReadOnlyAttribute]
internal class Microsoft.Extensions.Logging.Console.LogMessageEntry : ValueType {
    public string TimeStamp;
    public string LevelString;
    public Nullable`1<ConsoleColor> LevelBackground;
    public Nullable`1<ConsoleColor> LevelForeground;
    public Nullable`1<ConsoleColor> MessageColor;
    public string Message;
    public bool LogAsError;
    public LogMessageEntry(string message, string timeStamp, string levelString, Nullable`1<ConsoleColor> levelBackground, Nullable`1<ConsoleColor> levelForeground, Nullable`1<ConsoleColor> messageColor, bool logAsError);
}
internal class Microsoft.Extensions.Logging.Console.WindowsLogConsole : object {
    private TextWriter _textWriter;
    public WindowsLogConsole(bool stdErr);
    private bool SetColor(Nullable`1<ConsoleColor> background, Nullable`1<ConsoleColor> foreground);
    private void ResetColor();
    public sealed virtual void Write(string message, Nullable`1<ConsoleColor> background, Nullable`1<ConsoleColor> foreground);
    public sealed virtual void WriteLine(string message, Nullable`1<ConsoleColor> background, Nullable`1<ConsoleColor> foreground);
    public sealed virtual void Flush();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.ConsoleLoggerExtensions : object {
    [ExtensionAttribute]
public static ILoggingBuilder AddConsole(ILoggingBuilder builder);
    [ExtensionAttribute]
public static ILoggingBuilder AddConsole(ILoggingBuilder builder, Action`1<ConsoleLoggerOptions> configure);
}
internal class Microsoft.Extensions.Logging.NullExternalScopeProvider : object {
    [CompilerGeneratedAttribute]
private static IExternalScopeProvider <Instance>k__BackingField;
    public static IExternalScopeProvider Instance { get; }
    private static NullExternalScopeProvider();
    [CompilerGeneratedAttribute]
public static IExternalScopeProvider get_Instance();
    private sealed virtual override void Microsoft.Extensions.Logging.IExternalScopeProvider.ForEachScope(Action`2<object, TState> callback, TState state);
    private sealed virtual override IDisposable Microsoft.Extensions.Logging.IExternalScopeProvider.Push(object state);
}
internal class Microsoft.Extensions.Logging.NullScope : object {
    [CompilerGeneratedAttribute]
private static NullScope <Instance>k__BackingField;
    public static NullScope Instance { get; }
    private static NullScope();
    [CompilerGeneratedAttribute]
public static NullScope get_Instance();
    public sealed virtual void Dispose();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
