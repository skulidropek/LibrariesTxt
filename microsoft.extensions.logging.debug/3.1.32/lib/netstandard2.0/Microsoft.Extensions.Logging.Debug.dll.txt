internal class Microsoft.Extensions.Logging.Debug.DebugLogger : object {
    private string _name;
    public DebugLogger(string name);
    public sealed virtual IDisposable BeginScope(TState state);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    private void DebugWriteLine(string message, string name);
}
[ProviderAliasAttribute("Debug")]
public class Microsoft.Extensions.Logging.Debug.DebugLoggerProvider : object {
    public sealed virtual ILogger CreateLogger(string name);
    public sealed virtual void Dispose();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.DebugLoggerFactoryExtensions : object {
    [ExtensionAttribute]
public static ILoggingBuilder AddDebug(ILoggingBuilder builder);
}
internal class Microsoft.Extensions.Logging.NullExternalScopeProvider : object {
    [CompilerGeneratedAttribute]
private static IExternalScopeProvider <Instance>k__BackingField;
    public static IExternalScopeProvider Instance { get; }
    private static NullExternalScopeProvider();
    [CompilerGeneratedAttribute]
public static IExternalScopeProvider get_Instance();
    private sealed virtual override void Microsoft.Extensions.Logging.IExternalScopeProvider.ForEachScope(Action`2<object, TState> callback, TState state);
    private sealed virtual override IDisposable Microsoft.Extensions.Logging.IExternalScopeProvider.Push(object state);
}
internal class Microsoft.Extensions.Logging.NullScope : object {
    [CompilerGeneratedAttribute]
private static NullScope <Instance>k__BackingField;
    public static NullScope Instance { get; }
    private static NullScope();
    [CompilerGeneratedAttribute]
public static NullScope get_Instance();
    public sealed virtual void Dispose();
}
