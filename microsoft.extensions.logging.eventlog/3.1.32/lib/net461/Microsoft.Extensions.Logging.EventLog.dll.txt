internal class Microsoft.Extensions.Logging.EventLog.EventLogLogger : object {
    private string _name;
    private EventLogSettings _settings;
    private IExternalScopeProvider _externalScopeProvider;
    private static string ContinuationString;
    private int _beginOrEndMessageSegmentSize;
    private int _intermediateMessageSegmentSize;
    [CompilerGeneratedAttribute]
private IEventLog <EventLog>k__BackingField;
    public IEventLog EventLog { get; }
    public EventLogLogger(string name, EventLogSettings settings, IExternalScopeProvider externalScopeProvider);
    [CompilerGeneratedAttribute]
public IEventLog get_EventLog();
    public sealed virtual IDisposable BeginScope(TState state);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    private void WriteMessage(string message, EventLogEntryType eventLogEntryType, int eventId);
    private EventLogEntryType GetEventLogEntryType(LogLevel level);
}
[ProviderAliasAttribute("EventLog")]
public class Microsoft.Extensions.Logging.EventLog.EventLogLoggerProvider : object {
    internal EventLogSettings _settings;
    private IExternalScopeProvider _scopeProvider;
    public EventLogLoggerProvider(EventLogSettings settings);
    public EventLogLoggerProvider(IOptions`1<EventLogSettings> options);
    public sealed virtual ILogger CreateLogger(string name);
    public sealed virtual void Dispose();
    public sealed virtual void SetScopeProvider(IExternalScopeProvider scopeProvider);
}
public class Microsoft.Extensions.Logging.EventLog.EventLogSettings : object {
    private IEventLog _eventLog;
    [CompilerGeneratedAttribute]
private string <LogName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MachineName>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<string, LogLevel, bool> <Filter>k__BackingField;
    public string LogName { get; public set; }
    public string SourceName { get; public set; }
    public string MachineName { get; public set; }
    public Func`3<string, LogLevel, bool> Filter { get; public set; }
    internal IEventLog EventLog { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_LogName();
    [CompilerGeneratedAttribute]
public void set_LogName(string value);
    [CompilerGeneratedAttribute]
public string get_SourceName();
    [CompilerGeneratedAttribute]
public void set_SourceName(string value);
    [CompilerGeneratedAttribute]
public string get_MachineName();
    [CompilerGeneratedAttribute]
public void set_MachineName(string value);
    [CompilerGeneratedAttribute]
public Func`3<string, LogLevel, bool> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Func`3<string, LogLevel, bool> value);
    internal IEventLog get_EventLog();
    internal void set_EventLog(IEventLog value);
    private IEventLog CreateDefaultEventLog();
}
internal interface Microsoft.Extensions.Logging.EventLog.IEventLog {
    public Nullable`1<int> DefaultEventId { get; }
    public int MaxMessageSize { get; }
    public abstract virtual Nullable`1<int> get_DefaultEventId();
    public abstract virtual int get_MaxMessageSize();
    public abstract virtual void WriteEntry(string message, EventLogEntryType type, int eventID, short category);
}
internal class Microsoft.Extensions.Logging.EventLog.WindowsEventLog : object {
    private static int MaximumMessageSize;
    private bool _enabled;
    [CompilerGeneratedAttribute]
private EventLog <DiagnosticsEventLog>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <DefaultEventId>k__BackingField;
    public EventLog DiagnosticsEventLog { get; }
    public int MaxMessageSize { get; }
    public Nullable`1<int> DefaultEventId { get; public set; }
    public WindowsEventLog(string logName, string machineName, string sourceName);
    [CompilerGeneratedAttribute]
public EventLog get_DiagnosticsEventLog();
    public sealed virtual int get_MaxMessageSize();
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<int> get_DefaultEventId();
    [CompilerGeneratedAttribute]
public void set_DefaultEventId(Nullable`1<int> value);
    public sealed virtual void WriteEntry(string message, EventLogEntryType type, int eventID, short category);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.EventLoggerFactoryExtensions : object {
    [ExtensionAttribute]
public static ILoggingBuilder AddEventLog(ILoggingBuilder builder);
    [ExtensionAttribute]
public static ILoggingBuilder AddEventLog(ILoggingBuilder builder, EventLogSettings settings);
    [ExtensionAttribute]
public static ILoggingBuilder AddEventLog(ILoggingBuilder builder, Action`1<EventLogSettings> configure);
}
