[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddLogging(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddLogging(IServiceCollection services, Action`1<ILoggingBuilder> configure);
}
internal class Microsoft.Extensions.Logging.DefaultLoggerLevelConfigureOptions : ConfigureOptions`1<LoggerFilterOptions> {
    public DefaultLoggerLevelConfigureOptions(LogLevel level);
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions : object {
    [ExtensionAttribute]
public static ILoggingBuilder AddFilter(ILoggingBuilder builder, Func`4<string, string, LogLevel, bool> filter);
    [ExtensionAttribute]
public static ILoggingBuilder AddFilter(ILoggingBuilder builder, Func`3<string, LogLevel, bool> categoryLevelFilter);
    [ExtensionAttribute]
public static ILoggingBuilder AddFilter(ILoggingBuilder builder, Func`3<string, LogLevel, bool> categoryLevelFilter);
    [ExtensionAttribute]
public static ILoggingBuilder AddFilter(ILoggingBuilder builder, Func`2<LogLevel, bool> levelFilter);
    [ExtensionAttribute]
public static ILoggingBuilder AddFilter(ILoggingBuilder builder, Func`2<LogLevel, bool> levelFilter);
    [ExtensionAttribute]
public static ILoggingBuilder AddFilter(ILoggingBuilder builder, string category, LogLevel level);
    [ExtensionAttribute]
public static ILoggingBuilder AddFilter(ILoggingBuilder builder, string category, LogLevel level);
    [ExtensionAttribute]
public static ILoggingBuilder AddFilter(ILoggingBuilder builder, string category, Func`2<LogLevel, bool> levelFilter);
    [ExtensionAttribute]
public static ILoggingBuilder AddFilter(ILoggingBuilder builder, string category, Func`2<LogLevel, bool> levelFilter);
    [ExtensionAttribute]
public static LoggerFilterOptions AddFilter(LoggerFilterOptions builder, Func`4<string, string, LogLevel, bool> filter);
    [ExtensionAttribute]
public static LoggerFilterOptions AddFilter(LoggerFilterOptions builder, Func`3<string, LogLevel, bool> categoryLevelFilter);
    [ExtensionAttribute]
public static LoggerFilterOptions AddFilter(LoggerFilterOptions builder, Func`3<string, LogLevel, bool> categoryLevelFilter);
    [ExtensionAttribute]
public static LoggerFilterOptions AddFilter(LoggerFilterOptions builder, Func`2<LogLevel, bool> levelFilter);
    [ExtensionAttribute]
public static LoggerFilterOptions AddFilter(LoggerFilterOptions builder, Func`2<LogLevel, bool> levelFilter);
    [ExtensionAttribute]
public static LoggerFilterOptions AddFilter(LoggerFilterOptions builder, string category, LogLevel level);
    [ExtensionAttribute]
public static LoggerFilterOptions AddFilter(LoggerFilterOptions builder, string category, LogLevel level);
    [ExtensionAttribute]
public static LoggerFilterOptions AddFilter(LoggerFilterOptions builder, string category, Func`2<LogLevel, bool> levelFilter);
    [ExtensionAttribute]
public static LoggerFilterOptions AddFilter(LoggerFilterOptions builder, string category, Func`2<LogLevel, bool> levelFilter);
    [ExtensionAttribute]
private static ILoggingBuilder ConfigureFilter(ILoggingBuilder builder, Action`1<LoggerFilterOptions> configureOptions);
    private static LoggerFilterOptions AddRule(LoggerFilterOptions options, string type, string category, Nullable`1<LogLevel> level, Func`4<string, string, LogLevel, bool> filter);
}
public interface Microsoft.Extensions.Logging.ILoggingBuilder {
    public IServiceCollection Services { get; }
    public abstract virtual IServiceCollection get_Services();
}
internal class Microsoft.Extensions.Logging.Logger : object {
    [CompilerGeneratedAttribute]
private LoggerInformation[] <Loggers>k__BackingField;
    public LoggerInformation[] Loggers { get; public set; }
    [CompilerGeneratedAttribute]
public LoggerInformation[] get_Loggers();
    [CompilerGeneratedAttribute]
public void set_Loggers(LoggerInformation[] value);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual IDisposable BeginScope(TState state);
}
public class Microsoft.Extensions.Logging.LoggerFactory : object {
    private static LoggerRuleSelector RuleSelector;
    private Dictionary`2<string, Logger> _loggers;
    private List`1<ProviderRegistration> _providerRegistrations;
    private object _sync;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _disposed;
    private IDisposable _changeTokenRegistration;
    private LoggerFilterOptions _filterOptions;
    public LoggerFactory(IEnumerable`1<ILoggerProvider> providers);
    public LoggerFactory(IEnumerable`1<ILoggerProvider> providers, LoggerFilterOptions filterOptions);
    public LoggerFactory(IEnumerable`1<ILoggerProvider> providers, IOptionsMonitor`1<LoggerFilterOptions> filterOption);
    private static LoggerFactory();
    private void RefreshFilters(LoggerFilterOptions filterOptions);
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void AddProvider(ILoggerProvider provider);
    private LoggerInformation[] CreateLoggers(string categoryName);
    private void ApplyRules(LoggerInformation[] loggers, string categoryName, int start, int count);
    protected virtual bool CheckDisposed();
    public sealed virtual void Dispose();
}
public class Microsoft.Extensions.Logging.LoggerFilterOptions : object {
    [CompilerGeneratedAttribute]
private LogLevel <MinLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<LoggerFilterRule> <Rules>k__BackingField;
    public LogLevel MinLevel { get; public set; }
    public IList`1<LoggerFilterRule> Rules { get; }
    [CompilerGeneratedAttribute]
public LogLevel get_MinLevel();
    [CompilerGeneratedAttribute]
public void set_MinLevel(LogLevel value);
    [CompilerGeneratedAttribute]
public IList`1<LoggerFilterRule> get_Rules();
}
public class Microsoft.Extensions.Logging.LoggerFilterRule : object {
    [CompilerGeneratedAttribute]
private string <ProviderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CategoryName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<LogLevel> <LogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`4<string, string, LogLevel, bool> <Filter>k__BackingField;
    public string ProviderName { get; }
    public string CategoryName { get; }
    public Nullable`1<LogLevel> LogLevel { get; }
    public Func`4<string, string, LogLevel, bool> Filter { get; }
    public LoggerFilterRule(string providerName, string categoryName, Nullable`1<LogLevel> logLevel, Func`4<string, string, LogLevel, bool> filter);
    [CompilerGeneratedAttribute]
public string get_ProviderName();
    [CompilerGeneratedAttribute]
public string get_CategoryName();
    [CompilerGeneratedAttribute]
public Nullable`1<LogLevel> get_LogLevel();
    [CompilerGeneratedAttribute]
public Func`4<string, string, LogLevel, bool> get_Filter();
    public virtual string ToString();
}
internal class Microsoft.Extensions.Logging.LoggerInformation : ValueType {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ProviderType>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<LogLevel> <MinLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`4<string, string, LogLevel, bool> <Filter>k__BackingField;
    public ILogger Logger { get; public set; }
    public string Category { get; public set; }
    public Type ProviderType { get; public set; }
    public Nullable`1<LogLevel> MinLevel { get; public set; }
    public Func`4<string, string, LogLevel, bool> Filter { get; public set; }
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public void set_Category(string value);
    [CompilerGeneratedAttribute]
public Type get_ProviderType();
    [CompilerGeneratedAttribute]
public void set_ProviderType(Type value);
    [CompilerGeneratedAttribute]
public Nullable`1<LogLevel> get_MinLevel();
    [CompilerGeneratedAttribute]
public void set_MinLevel(Nullable`1<LogLevel> value);
    [CompilerGeneratedAttribute]
public Func`4<string, string, LogLevel, bool> get_Filter();
    [CompilerGeneratedAttribute]
public void set_Filter(Func`4<string, string, LogLevel, bool> value);
    public bool IsEnabled(LogLevel level);
}
internal class Microsoft.Extensions.Logging.LoggerRuleSelector : object {
    private static string AliasAttibuteTypeFullName;
    private static string AliasAttibuteAliasProperty;
    public void Select(LoggerFilterOptions options, Type providerType, string category, Nullable`1& minLevel, Func`4& filter);
    private string GetAlias(Type providerType);
    private static bool IsBetter(LoggerFilterRule rule, LoggerFilterRule current, string logger, string category);
}
internal class Microsoft.Extensions.Logging.LoggingBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    public IServiceCollection Services { get; }
    public LoggingBuilder(IServiceCollection services);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.LoggingBuilderExtensions : object {
    [ExtensionAttribute]
public static ILoggingBuilder SetMinimumLevel(ILoggingBuilder builder, LogLevel level);
    [ExtensionAttribute]
public static ILoggingBuilder AddProvider(ILoggingBuilder builder, ILoggerProvider provider);
    [ExtensionAttribute]
public static ILoggingBuilder ClearProviders(ILoggingBuilder builder);
}
[AttributeUsageAttribute("4")]
public class Microsoft.Extensions.Logging.ProviderAliasAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    public string Alias { get; }
    public ProviderAliasAttribute(string alias);
    [CompilerGeneratedAttribute]
public string get_Alias();
}
internal class Microsoft.Extensions.Logging.StaticFilterOptionsMonitor : object {
    [CompilerGeneratedAttribute]
private LoggerFilterOptions <CurrentValue>k__BackingField;
    public LoggerFilterOptions CurrentValue { get; }
    public StaticFilterOptionsMonitor(LoggerFilterOptions currentValue);
    public sealed virtual IDisposable OnChange(Action`2<LoggerFilterOptions, string> listener);
    public sealed virtual LoggerFilterOptions Get(string name);
    [CompilerGeneratedAttribute]
public sealed virtual LoggerFilterOptions get_CurrentValue();
}
