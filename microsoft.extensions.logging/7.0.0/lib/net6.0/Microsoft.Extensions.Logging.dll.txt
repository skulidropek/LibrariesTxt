internal static class FxResources.Microsoft.Extensions.Logging.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.DependencyInjection.LoggingServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IServiceCollection AddLogging(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddLogging(IServiceCollection services, Action`1<ILoggingBuilder> configure);
}
[ExtensionAttribute]
internal static class Microsoft.Extensions.Logging.ActivityExtensions : object {
    [ExtensionAttribute]
public static string GetSpanId(Activity activity);
    [ExtensionAttribute]
public static string GetTraceId(Activity activity);
    [ExtensionAttribute]
public static string GetParentId(Activity activity);
}
[FlagsAttribute]
public enum Microsoft.Extensions.Logging.ActivityTrackingOptions : Enum {
    public int value__;
    public static ActivityTrackingOptions None;
    public static ActivityTrackingOptions SpanId;
    public static ActivityTrackingOptions TraceId;
    public static ActivityTrackingOptions ParentId;
    public static ActivityTrackingOptions TraceState;
    public static ActivityTrackingOptions TraceFlags;
    public static ActivityTrackingOptions Tags;
    public static ActivityTrackingOptions Baggage;
}
internal class Microsoft.Extensions.Logging.DefaultLoggerLevelConfigureOptions : ConfigureOptions`1<LoggerFilterOptions> {
    public DefaultLoggerLevelConfigureOptions(LogLevel level);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.FilterLoggingBuilderExtensions : object {
    [ExtensionAttribute]
public static ILoggingBuilder AddFilter(ILoggingBuilder builder, Func`4<string, string, LogLevel, bool> filter);
    [ExtensionAttribute]
public static ILoggingBuilder AddFilter(ILoggingBuilder builder, Func`3<string, LogLevel, bool> categoryLevelFilter);
    [ExtensionAttribute]
public static ILoggingBuilder AddFilter(ILoggingBuilder builder, Func`3<string, LogLevel, bool> categoryLevelFilter);
    [ExtensionAttribute]
public static ILoggingBuilder AddFilter(ILoggingBuilder builder, Func`2<LogLevel, bool> levelFilter);
    [ExtensionAttribute]
public static ILoggingBuilder AddFilter(ILoggingBuilder builder, Func`2<LogLevel, bool> levelFilter);
    [ExtensionAttribute]
public static ILoggingBuilder AddFilter(ILoggingBuilder builder, string category, LogLevel level);
    [ExtensionAttribute]
public static ILoggingBuilder AddFilter(ILoggingBuilder builder, string category, LogLevel level);
    [ExtensionAttribute]
public static ILoggingBuilder AddFilter(ILoggingBuilder builder, string category, Func`2<LogLevel, bool> levelFilter);
    [ExtensionAttribute]
public static ILoggingBuilder AddFilter(ILoggingBuilder builder, string category, Func`2<LogLevel, bool> levelFilter);
    [ExtensionAttribute]
public static LoggerFilterOptions AddFilter(LoggerFilterOptions builder, Func`4<string, string, LogLevel, bool> filter);
    [ExtensionAttribute]
public static LoggerFilterOptions AddFilter(LoggerFilterOptions builder, Func`3<string, LogLevel, bool> categoryLevelFilter);
    [ExtensionAttribute]
public static LoggerFilterOptions AddFilter(LoggerFilterOptions builder, Func`3<string, LogLevel, bool> categoryLevelFilter);
    [ExtensionAttribute]
public static LoggerFilterOptions AddFilter(LoggerFilterOptions builder, Func`2<LogLevel, bool> levelFilter);
    [ExtensionAttribute]
public static LoggerFilterOptions AddFilter(LoggerFilterOptions builder, Func`2<LogLevel, bool> levelFilter);
    [ExtensionAttribute]
public static LoggerFilterOptions AddFilter(LoggerFilterOptions builder, string category, LogLevel level);
    [ExtensionAttribute]
public static LoggerFilterOptions AddFilter(LoggerFilterOptions builder, string category, LogLevel level);
    [ExtensionAttribute]
public static LoggerFilterOptions AddFilter(LoggerFilterOptions builder, string category, Func`2<LogLevel, bool> levelFilter);
    [ExtensionAttribute]
public static LoggerFilterOptions AddFilter(LoggerFilterOptions builder, string category, Func`2<LogLevel, bool> levelFilter);
    [ExtensionAttribute]
private static ILoggingBuilder ConfigureFilter(ILoggingBuilder builder, Action`1<LoggerFilterOptions> configureOptions);
    private static LoggerFilterOptions AddRule(LoggerFilterOptions options, string type, string category, Nullable`1<LogLevel> level, Func`4<string, string, LogLevel, bool> filter);
}
[NullableContextAttribute("1")]
public interface Microsoft.Extensions.Logging.ILoggingBuilder {
    public IServiceCollection Services { get; }
    public abstract virtual IServiceCollection get_Services();
}
internal class Microsoft.Extensions.Logging.Logger : object {
    [CompilerGeneratedAttribute]
private LoggerInformation[] <Loggers>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageLogger[] <MessageLoggers>k__BackingField;
    [CompilerGeneratedAttribute]
private ScopeLogger[] <ScopeLoggers>k__BackingField;
    public LoggerInformation[] Loggers { get; public set; }
    public MessageLogger[] MessageLoggers { get; public set; }
    public ScopeLogger[] ScopeLoggers { get; public set; }
    public Logger(LoggerInformation[] loggers);
    [CompilerGeneratedAttribute]
public LoggerInformation[] get_Loggers();
    [CompilerGeneratedAttribute]
public void set_Loggers(LoggerInformation[] value);
    [CompilerGeneratedAttribute]
public MessageLogger[] get_MessageLoggers();
    [CompilerGeneratedAttribute]
public void set_MessageLoggers(MessageLogger[] value);
    [CompilerGeneratedAttribute]
public ScopeLogger[] get_ScopeLoggers();
    [CompilerGeneratedAttribute]
public void set_ScopeLoggers(ScopeLogger[] value);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual IDisposable BeginScope(TState state);
    private static void ThrowLoggingError(List`1<Exception> exceptions);
    [CompilerGeneratedAttribute]
internal static void <Log>g__LoggerLog|13_0(LogLevel logLevel, EventId eventId, ILogger logger, Exception exception, Func`3<TState, Exception, string> formatter, List`1& exceptions, TState& state);
    [CompilerGeneratedAttribute]
internal static bool <IsEnabled>g__LoggerIsEnabled|14_0(LogLevel logLevel, ILogger logger, List`1& exceptions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Logging.LoggerFactory : object {
    private Dictionary`2<string, Logger> _loggers;
    private List`1<ProviderRegistration> _providerRegistrations;
    private object _sync;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _disposed;
    private IDisposable _changeTokenRegistration;
    private LoggerFilterOptions _filterOptions;
    private IExternalScopeProvider _scopeProvider;
    private LoggerFactoryOptions _factoryOptions;
    public LoggerFactory(IEnumerable`1<ILoggerProvider> providers);
    public LoggerFactory(IEnumerable`1<ILoggerProvider> providers, LoggerFilterOptions filterOptions);
    public LoggerFactory(IEnumerable`1<ILoggerProvider> providers, IOptionsMonitor`1<LoggerFilterOptions> filterOption);
    public LoggerFactory(IEnumerable`1<ILoggerProvider> providers, IOptionsMonitor`1<LoggerFilterOptions> filterOption, IOptions`1<LoggerFactoryOptions> options);
    public LoggerFactory(IEnumerable`1<ILoggerProvider> providers, IOptionsMonitor`1<LoggerFilterOptions> filterOption, IOptions`1<LoggerFactoryOptions> options, IExternalScopeProvider scopeProvider);
    [RequiresDynamicCodeAttribute("LoggerFactory.Create uses Microsoft.Extensions.DependencyInjection, which may require generating code dynamically at runtime.")]
public static ILoggerFactory Create(Action`1<ILoggingBuilder> configure);
    [MemberNotNullAttribute("_filterOptions")]
private void RefreshFilters(LoggerFilterOptions filterOptions);
    public sealed virtual ILogger CreateLogger(string categoryName);
    public sealed virtual void AddProvider(ILoggerProvider provider);
    private void AddProviderRegistration(ILoggerProvider provider, bool dispose);
    private LoggerInformation[] CreateLoggers(string categoryName);
    private ValueTuple`2<MessageLogger[], ScopeLogger[]> ApplyFilters(LoggerInformation[] loggers);
    protected virtual bool CheckDisposed();
    public sealed virtual void Dispose();
}
public class Microsoft.Extensions.Logging.LoggerFactoryOptions : object {
    [CompilerGeneratedAttribute]
private ActivityTrackingOptions <ActivityTrackingOptions>k__BackingField;
    public ActivityTrackingOptions ActivityTrackingOptions { get; public set; }
    [CompilerGeneratedAttribute]
public ActivityTrackingOptions get_ActivityTrackingOptions();
    [CompilerGeneratedAttribute]
public void set_ActivityTrackingOptions(ActivityTrackingOptions value);
}
internal class Microsoft.Extensions.Logging.LoggerFactoryScopeProvider : object {
    private AsyncLocal`1<Scope> _currentScope;
    private ActivityTrackingOptions _activityTrackingOption;
    public LoggerFactoryScopeProvider(ActivityTrackingOptions activityTrackingOption);
    public sealed virtual void ForEachScope(Action`2<object, TState> callback, TState state);
    private static ActivityBaggageLogScopeWrapper GetOrCreateActivityBaggageLogScopeWrapper(Activity activity, IEnumerable`1<KeyValuePair`2<string, string>> items);
    public sealed virtual IDisposable Push(object state);
    [CompilerGeneratedAttribute]
internal static void <ForEachScope>g__Report|3_0(Scope current, <>c__DisplayClass3_0`1& );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Logging.LoggerFilterOptions : object {
    [CompilerGeneratedAttribute]
private bool <CaptureScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private LogLevel <MinLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<LoggerFilterRule> <RulesInternal>k__BackingField;
    public bool CaptureScopes { get; public set; }
    public LogLevel MinLevel { get; public set; }
    public IList`1<LoggerFilterRule> Rules { get; }
    internal List`1<LoggerFilterRule> RulesInternal { get; }
    [CompilerGeneratedAttribute]
public bool get_CaptureScopes();
    [CompilerGeneratedAttribute]
public void set_CaptureScopes(bool value);
    [CompilerGeneratedAttribute]
public LogLevel get_MinLevel();
    [CompilerGeneratedAttribute]
public void set_MinLevel(LogLevel value);
    public IList`1<LoggerFilterRule> get_Rules();
    [CompilerGeneratedAttribute]
internal List`1<LoggerFilterRule> get_RulesInternal();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Logging.LoggerFilterRule : object {
    [CompilerGeneratedAttribute]
private string <ProviderName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CategoryName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<LogLevel> <LogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`4<string, string, LogLevel, bool> <Filter>k__BackingField;
    public string ProviderName { get; }
    public string CategoryName { get; }
    public Nullable`1<LogLevel> LogLevel { get; }
    public Func`4<string, string, LogLevel, bool> Filter { get; }
    public LoggerFilterRule(string providerName, string categoryName, Nullable`1<LogLevel> logLevel, Func`4<string, string, LogLevel, bool> filter);
    [CompilerGeneratedAttribute]
public string get_ProviderName();
    [CompilerGeneratedAttribute]
public string get_CategoryName();
    [CompilerGeneratedAttribute]
public Nullable`1<LogLevel> get_LogLevel();
    [CompilerGeneratedAttribute]
public Func`4<string, string, LogLevel, bool> get_Filter();
    [NullableContextAttribute("1")]
public virtual string ToString();
}
[IsReadOnlyAttribute]
internal class Microsoft.Extensions.Logging.LoggerInformation : ValueType {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ProviderType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExternalScope>k__BackingField;
    public ILogger Logger { get; }
    public string Category { get; }
    public Type ProviderType { get; }
    public bool ExternalScope { get; }
    public LoggerInformation(ILoggerProvider provider, string category);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
public Type get_ProviderType();
    [CompilerGeneratedAttribute]
public bool get_ExternalScope();
}
internal static class Microsoft.Extensions.Logging.LoggerRuleSelector : object {
    public static void Select(LoggerFilterOptions options, Type providerType, string category, Nullable`1& minLevel, Func`4& filter);
    private static bool IsBetter(LoggerFilterRule rule, LoggerFilterRule current, string logger, string category);
}
internal class Microsoft.Extensions.Logging.LoggingBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    public IServiceCollection Services { get; }
    public LoggingBuilder(IServiceCollection services);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.Extensions.Logging.LoggingBuilderExtensions : object {
    [ExtensionAttribute]
public static ILoggingBuilder SetMinimumLevel(ILoggingBuilder builder, LogLevel level);
    [ExtensionAttribute]
public static ILoggingBuilder AddProvider(ILoggingBuilder builder, ILoggerProvider provider);
    [ExtensionAttribute]
public static ILoggingBuilder ClearProviders(ILoggingBuilder builder);
    [ExtensionAttribute]
public static ILoggingBuilder Configure(ILoggingBuilder builder, Action`1<LoggerFactoryOptions> action);
}
[IsReadOnlyAttribute]
internal class Microsoft.Extensions.Logging.MessageLogger : ValueType {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Category>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProviderTypeFullName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<LogLevel> <MinLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`4<string, string, LogLevel, bool> <Filter>k__BackingField;
    public ILogger Logger { get; }
    public string Category { get; }
    private string ProviderTypeFullName { get; }
    public Nullable`1<LogLevel> MinLevel { get; }
    public Func`4<string, string, LogLevel, bool> Filter { get; }
    public MessageLogger(ILogger logger, string category, string providerTypeFullName, Nullable`1<LogLevel> minLevel, Func`4<string, string, LogLevel, bool> filter);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public string get_Category();
    [CompilerGeneratedAttribute]
private string get_ProviderTypeFullName();
    [CompilerGeneratedAttribute]
public Nullable`1<LogLevel> get_MinLevel();
    [CompilerGeneratedAttribute]
public Func`4<string, string, LogLevel, bool> get_Filter();
    public bool IsEnabled(LogLevel level);
}
internal class Microsoft.Extensions.Logging.NullExternalScopeProvider : object {
    [CompilerGeneratedAttribute]
private static IExternalScopeProvider <Instance>k__BackingField;
    public static IExternalScopeProvider Instance { get; }
    private static NullExternalScopeProvider();
    [CompilerGeneratedAttribute]
public static IExternalScopeProvider get_Instance();
    private sealed virtual override void Microsoft.Extensions.Logging.IExternalScopeProvider.ForEachScope(Action`2<object, TState> callback, TState state);
    private sealed virtual override IDisposable Microsoft.Extensions.Logging.IExternalScopeProvider.Push(object state);
}
internal class Microsoft.Extensions.Logging.NullScope : object {
    [CompilerGeneratedAttribute]
private static NullScope <Instance>k__BackingField;
    public static NullScope Instance { get; }
    private static NullScope();
    [CompilerGeneratedAttribute]
public static NullScope get_Instance();
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[AttributeUsageAttribute("4")]
public class Microsoft.Extensions.Logging.ProviderAliasAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    public string Alias { get; }
    public ProviderAliasAttribute(string alias);
    [CompilerGeneratedAttribute]
public string get_Alias();
}
internal static class Microsoft.Extensions.Logging.ProviderAliasUtilities : object {
    private static string AliasAttributeTypeFullName;
    internal static string GetAlias(Type providerType);
}
[IsReadOnlyAttribute]
internal class Microsoft.Extensions.Logging.ScopeLogger : ValueType {
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IExternalScopeProvider <ExternalScopeProvider>k__BackingField;
    public ILogger Logger { get; }
    public IExternalScopeProvider ExternalScopeProvider { get; }
    public ScopeLogger(ILogger logger, IExternalScopeProvider externalScopeProvider);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public IExternalScopeProvider get_ExternalScopeProvider();
    public IDisposable CreateScope(TState state);
}
internal class Microsoft.Extensions.Logging.StaticFilterOptionsMonitor : object {
    [CompilerGeneratedAttribute]
private LoggerFilterOptions <CurrentValue>k__BackingField;
    public LoggerFilterOptions CurrentValue { get; }
    public StaticFilterOptionsMonitor(LoggerFilterOptions currentValue);
    public sealed virtual IDisposable OnChange(Action`2<LoggerFilterOptions, string> listener);
    public sealed virtual LoggerFilterOptions Get(string name);
    [CompilerGeneratedAttribute]
public sealed virtual LoggerFilterOptions get_CurrentValue();
}
[AttributeUsageAttribute("100")]
internal class System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    public string Message { get; }
    public string Url { get; public set; }
    public RequiresDynamicCodeAttribute(string message);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
[AttributeUsageAttribute("64")]
internal class System.Runtime.InteropServices.LibraryImportAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <LibraryName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EntryPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private StringMarshalling <StringMarshalling>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <StringMarshallingCustomType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SetLastError>k__BackingField;
    public string LibraryName { get; }
    public string EntryPoint { get; public set; }
    public StringMarshalling StringMarshalling { get; public set; }
    public Type StringMarshallingCustomType { get; public set; }
    public bool SetLastError { get; public set; }
    public LibraryImportAttribute(string libraryName);
    [CompilerGeneratedAttribute]
public string get_LibraryName();
    [CompilerGeneratedAttribute]
public string get_EntryPoint();
    [CompilerGeneratedAttribute]
public void set_EntryPoint(string value);
    [CompilerGeneratedAttribute]
public StringMarshalling get_StringMarshalling();
    [CompilerGeneratedAttribute]
public void set_StringMarshalling(StringMarshalling value);
    [CompilerGeneratedAttribute]
public Type get_StringMarshallingCustomType();
    [CompilerGeneratedAttribute]
public void set_StringMarshallingCustomType(Type value);
    [CompilerGeneratedAttribute]
public bool get_SetLastError();
    [CompilerGeneratedAttribute]
public void set_SetLastError(bool value);
}
internal enum System.Runtime.InteropServices.StringMarshalling : Enum {
    public int value__;
    public static StringMarshalling Custom;
    public static StringMarshalling Utf8;
    public static StringMarshalling Utf16;
}
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string InvalidActivityTrackingOptions { get; }
    internal static string MoreThanOneWildcard { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_InvalidActivityTrackingOptions();
    internal static string get_MoreThanOneWildcard();
}
internal static class System.ThrowHelper : object {
    internal static void ThrowIfNull(object argument, string paramName);
    [DoesNotReturnAttribute]
private static void Throw(string paramName);
}
