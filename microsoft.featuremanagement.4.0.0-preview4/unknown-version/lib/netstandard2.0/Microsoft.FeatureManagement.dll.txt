public class Microsoft.FeatureManagement.Allocation : object {
    [CompilerGeneratedAttribute]
private string <DefaultWhenEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultWhenDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<UserAllocation> <User>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<GroupAllocation> <Group>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<PercentileAllocation> <Percentile>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Seed>k__BackingField;
    public string DefaultWhenEnabled { get; public set; }
    public string DefaultWhenDisabled { get; public set; }
    public IEnumerable`1<UserAllocation> User { get; public set; }
    public IEnumerable`1<GroupAllocation> Group { get; public set; }
    public IEnumerable`1<PercentileAllocation> Percentile { get; public set; }
    public string Seed { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DefaultWhenEnabled();
    [CompilerGeneratedAttribute]
public void set_DefaultWhenEnabled(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultWhenDisabled();
    [CompilerGeneratedAttribute]
public void set_DefaultWhenDisabled(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<UserAllocation> get_User();
    [CompilerGeneratedAttribute]
public void set_User(IEnumerable`1<UserAllocation> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<GroupAllocation> get_Group();
    [CompilerGeneratedAttribute]
public void set_Group(IEnumerable`1<GroupAllocation> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<PercentileAllocation> get_Percentile();
    [CompilerGeneratedAttribute]
public void set_Percentile(IEnumerable`1<PercentileAllocation> value);
    [CompilerGeneratedAttribute]
public string get_Seed();
    [CompilerGeneratedAttribute]
public void set_Seed(string value);
}
public class Microsoft.FeatureManagement.ConfigurationFeatureDefinitionProvider : object {
    private IConfiguration _configuration;
    private ConcurrentDictionary`2<string, FeatureDefinition> _definitions;
    private IDisposable _changeSubscription;
    private int _stale;
    private static string ParseValueErrorString;
    [CompilerGeneratedAttribute]
private bool <RootConfigurationFallbackEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    public bool RootConfigurationFallbackEnabled { get; public set; }
    public ILogger Logger { get; public set; }
    public ConfigurationFeatureDefinitionProvider(IConfiguration configuration);
    [CompilerGeneratedAttribute]
public bool get_RootConfigurationFallbackEnabled();
    [CompilerGeneratedAttribute]
public void set_RootConfigurationFallbackEnabled(bool value);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    public sealed virtual void Dispose();
    public sealed virtual Task`1<FeatureDefinition> GetFeatureDefinitionAsync(string featureName);
    [AsyncIteratorStateMachineAttribute("Microsoft.FeatureManagement.ConfigurationFeatureDefinitionProvider/<GetAllFeatureDefinitionsAsync>d__16")]
public sealed virtual IAsyncEnumerable`1<FeatureDefinition> GetAllFeatureDefinitionsAsync();
    private FeatureDefinition GetDotnetSchemaFeatureDefinition(string featureName);
    private FeatureDefinition GetMicrosoftSchemaFeatureDefinition(string featureName);
    private IEnumerable`1<IConfigurationSection> GetDotnetFeatureDefinitionSections();
    private IEnumerable`1<IConfigurationSection> GetMicrosoftFeatureDefinitionSections();
    private FeatureDefinition ParseDotnetSchemaFeatureDefinition(IConfigurationSection configurationSection);
    private FeatureDefinition ParseMicrosoftSchemaFeatureDefinition(IConfigurationSection configurationSection);
    private T ParseEnum(string feature, string rawValue, string fieldKeyword);
    private double ParseDouble(string feature, string rawValue, string fieldKeyword);
    private bool ParseBool(string feature, string rawValue, string fieldKeyword);
    [CompilerGeneratedAttribute]
private IChangeToken <.ctor>b__5_0();
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_1();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.FeatureManagement.ConfigurationWrapper : object {
    private IConfiguration _configuration;
    public string Item { get; public set; }
    public ConfigurationWrapper(IConfiguration configuration);
    public sealed virtual string get_Item(string key);
    public sealed virtual void set_Item(string key, string value);
    public sealed virtual IEnumerable`1<IConfigurationSection> GetChildren();
    public sealed virtual IChangeToken GetReloadToken();
    public sealed virtual IConfigurationSection GetSection(string key);
}
internal class Microsoft.FeatureManagement.ContextualFeatureFilterEvaluator : object {
    private IFeatureFilterMetadata _filter;
    private Func`4<object, FeatureFilterEvaluationContext, object, Task`1<bool>> _evaluateFunc;
    public ContextualFeatureFilterEvaluator(IFeatureFilterMetadata filter, Type appContextType);
    public sealed virtual Task`1<bool> EvaluateAsync(FeatureFilterEvaluationContext evaluationContext, object context);
    public static bool IsContextualFilter(IFeatureFilterMetadata filter, Type appContextType);
    private static Type GetContextualFilterInterface(IFeatureFilterMetadata filter, Type appContextType);
    private static Func`4<object, FeatureFilterEvaluationContext, object, Task`1<bool>> TypeAgnosticEvaluate(Type filterType, MethodInfo method);
    private static Func`4<object, FeatureFilterEvaluationContext, object, Task`1<bool>> GenericTypeAgnosticEvaluate(MethodInfo method);
}
internal static class Microsoft.FeatureManagement.DotnetFeatureManagementFields : object {
    public static string RequirementType;
    public static string FeatureFiltersSectionName;
    public static string FeatureFilterConfigurationParameters;
    public static string NameKeyword;
    public static string FeatureManagementSectionName;
}
public class Microsoft.FeatureManagement.FeatureDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<FeatureFilterConfiguration> <EnabledFor>k__BackingField;
    [CompilerGeneratedAttribute]
private RequirementType <RequirementType>k__BackingField;
    [CompilerGeneratedAttribute]
private FeatureStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private Allocation <Allocation>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<VariantDefinition> <Variants>k__BackingField;
    [CompilerGeneratedAttribute]
private TelemetryConfiguration <Telemetry>k__BackingField;
    public string Name { get; public set; }
    public IEnumerable`1<FeatureFilterConfiguration> EnabledFor { get; public set; }
    public RequirementType RequirementType { get; public set; }
    public FeatureStatus Status { get; public set; }
    public Allocation Allocation { get; public set; }
    public IEnumerable`1<VariantDefinition> Variants { get; public set; }
    public TelemetryConfiguration Telemetry { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<FeatureFilterConfiguration> get_EnabledFor();
    [CompilerGeneratedAttribute]
public void set_EnabledFor(IEnumerable`1<FeatureFilterConfiguration> value);
    [CompilerGeneratedAttribute]
public RequirementType get_RequirementType();
    [CompilerGeneratedAttribute]
public void set_RequirementType(RequirementType value);
    [CompilerGeneratedAttribute]
public FeatureStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(FeatureStatus value);
    [CompilerGeneratedAttribute]
public Allocation get_Allocation();
    [CompilerGeneratedAttribute]
public void set_Allocation(Allocation value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<VariantDefinition> get_Variants();
    [CompilerGeneratedAttribute]
public void set_Variants(IEnumerable`1<VariantDefinition> value);
    [CompilerGeneratedAttribute]
public TelemetryConfiguration get_Telemetry();
    [CompilerGeneratedAttribute]
public void set_Telemetry(TelemetryConfiguration value);
}
public class Microsoft.FeatureManagement.FeatureFilterConfiguration : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfiguration <Parameters>k__BackingField;
    public string Name { get; public set; }
    public IConfiguration Parameters { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IConfiguration get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(IConfiguration value);
}
public class Microsoft.FeatureManagement.FeatureFilterEvaluationContext : object {
    [CompilerGeneratedAttribute]
private string <FeatureName>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfiguration <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Settings>k__BackingField;
    public string FeatureName { get; public set; }
    public IConfiguration Parameters { get; public set; }
    public object Settings { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FeatureName();
    [CompilerGeneratedAttribute]
public void set_FeatureName(string value);
    [CompilerGeneratedAttribute]
public IConfiguration get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(IConfiguration value);
    [CompilerGeneratedAttribute]
public object get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(object value);
}
public class Microsoft.FeatureManagement.FeatureFilters.Audience : object {
    [CompilerGeneratedAttribute]
private List`1<string> <Users>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<GroupRollout> <Groups>k__BackingField;
    [CompilerGeneratedAttribute]
private double <DefaultRolloutPercentage>k__BackingField;
    [CompilerGeneratedAttribute]
private BasicAudience <Exclusion>k__BackingField;
    public List`1<string> Users { get; public set; }
    public List`1<GroupRollout> Groups { get; public set; }
    public double DefaultRolloutPercentage { get; public set; }
    public BasicAudience Exclusion { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Users();
    [CompilerGeneratedAttribute]
public void set_Users(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<GroupRollout> get_Groups();
    [CompilerGeneratedAttribute]
public void set_Groups(List`1<GroupRollout> value);
    [CompilerGeneratedAttribute]
public double get_DefaultRolloutPercentage();
    [CompilerGeneratedAttribute]
public void set_DefaultRolloutPercentage(double value);
    [CompilerGeneratedAttribute]
public BasicAudience get_Exclusion();
    [CompilerGeneratedAttribute]
public void set_Exclusion(BasicAudience value);
}
public class Microsoft.FeatureManagement.FeatureFilters.BasicAudience : object {
    [CompilerGeneratedAttribute]
private List`1<string> <Users>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Groups>k__BackingField;
    public List`1<string> Users { get; public set; }
    public List`1<string> Groups { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Users();
    [CompilerGeneratedAttribute]
public void set_Users(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Groups();
    [CompilerGeneratedAttribute]
public void set_Groups(List`1<string> value);
}
[FilterAliasAttribute("Microsoft.Targeting")]
public class Microsoft.FeatureManagement.FeatureFilters.ContextualTargetingFilter : object {
    private static string Alias;
    private TargetingEvaluationOptions _options;
    private ILogger _logger;
    public ContextualTargetingFilter(IOptions`1<TargetingEvaluationOptions> options, ILoggerFactory loggerFactory);
    public sealed virtual object BindParameters(IConfiguration filterParameters);
    public sealed virtual Task`1<bool> EvaluateAsync(FeatureFilterEvaluationContext context, ITargetingContext targetingContext);
}
public class Microsoft.FeatureManagement.FeatureFilters.GroupRollout : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private double <RolloutPercentage>k__BackingField;
    public string Name { get; public set; }
    public double RolloutPercentage { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public double get_RolloutPercentage();
    [CompilerGeneratedAttribute]
public void set_RolloutPercentage(double value);
}
internal interface Microsoft.FeatureManagement.FeatureFilters.ISystemClock {
    public DateTimeOffset UtcNow { get; }
    public abstract virtual DateTimeOffset get_UtcNow();
}
public interface Microsoft.FeatureManagement.FeatureFilters.ITargetingContext {
    public string UserId { get; public set; }
    public IEnumerable`1<string> Groups { get; public set; }
    public abstract virtual string get_UserId();
    public abstract virtual void set_UserId(string value);
    public abstract virtual IEnumerable`1<string> get_Groups();
    public abstract virtual void set_Groups(IEnumerable`1<string> value);
}
public interface Microsoft.FeatureManagement.FeatureFilters.ITargetingContextAccessor {
    public abstract virtual ValueTask`1<TargetingContext> GetContextAsync();
}
[FilterAliasAttribute("Microsoft.Percentage")]
public class Microsoft.FeatureManagement.FeatureFilters.PercentageFilter : object {
    private static string Alias;
    private ILogger _logger;
    public PercentageFilter(ILoggerFactory loggerFactory);
    public sealed virtual object BindParameters(IConfiguration filterParameters);
    public sealed virtual Task`1<bool> EvaluateAsync(FeatureFilterEvaluationContext context);
}
public class Microsoft.FeatureManagement.FeatureFilters.PercentageFilterSettings : object {
    [CompilerGeneratedAttribute]
private int <Value>k__BackingField;
    public int Value { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(int value);
}
public class Microsoft.FeatureManagement.FeatureFilters.Recurrence : object {
    [CompilerGeneratedAttribute]
private RecurrencePattern <Pattern>k__BackingField;
    [CompilerGeneratedAttribute]
private RecurrenceRange <Range>k__BackingField;
    public RecurrencePattern Pattern { get; public set; }
    public RecurrenceRange Range { get; public set; }
    [CompilerGeneratedAttribute]
public RecurrencePattern get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(RecurrencePattern value);
    [CompilerGeneratedAttribute]
public RecurrenceRange get_Range();
    [CompilerGeneratedAttribute]
public void set_Range(RecurrenceRange value);
}
internal static class Microsoft.FeatureManagement.FeatureFilters.RecurrenceEvaluator : object {
    private static int DaysPerWeek;
    public static bool IsMatch(DateTimeOffset time, TimeWindowFilterSettings settings);
    public static Nullable`1<DateTimeOffset> CalculateClosestStart(DateTimeOffset time, TimeWindowFilterSettings settings);
    private static void CalculateSurroundingOccurrences(DateTimeOffset time, TimeWindowFilterSettings settings, Nullable`1& prevOccurrence, Nullable`1& nextOccurrence);
    private static bool TryFindPreviousOccurrence(DateTimeOffset time, TimeWindowFilterSettings settings, DateTimeOffset& previousOccurrence, Int32& numberOfOccurrences);
    private static void FindDailyPreviousOccurrence(DateTimeOffset time, TimeWindowFilterSettings settings, DateTimeOffset& previousOccurrence, Int32& numberOfOccurrences);
    private static void FindWeeklyPreviousOccurrence(DateTimeOffset time, TimeWindowFilterSettings settings, DateTimeOffset& previousOccurrence, Int32& numberOfOccurrences);
    private static DateTimeOffset CalculateWeeklyNextOccurrence(DateTimeOffset previousOccurrence, TimeWindowFilterSettings settings);
    private static int CalculateWeeklyDayOffset(DayOfWeek day1, DayOfWeek day2);
    private static List`1<DayOfWeek> SortDaysOfWeek(IEnumerable`1<DayOfWeek> daysOfWeek, DayOfWeek firstDayOfWeek);
}
public class Microsoft.FeatureManagement.FeatureFilters.RecurrencePattern : object {
    [CompilerGeneratedAttribute]
private RecurrencePatternType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Interval>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<DayOfWeek> <DaysOfWeek>k__BackingField;
    [CompilerGeneratedAttribute]
private DayOfWeek <FirstDayOfWeek>k__BackingField;
    public RecurrencePatternType Type { get; public set; }
    public int Interval { get; public set; }
    public IEnumerable`1<DayOfWeek> DaysOfWeek { get; public set; }
    public DayOfWeek FirstDayOfWeek { get; public set; }
    [CompilerGeneratedAttribute]
public RecurrencePatternType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(RecurrencePatternType value);
    [CompilerGeneratedAttribute]
public int get_Interval();
    [CompilerGeneratedAttribute]
public void set_Interval(int value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<DayOfWeek> get_DaysOfWeek();
    [CompilerGeneratedAttribute]
public void set_DaysOfWeek(IEnumerable`1<DayOfWeek> value);
    [CompilerGeneratedAttribute]
public DayOfWeek get_FirstDayOfWeek();
    [CompilerGeneratedAttribute]
public void set_FirstDayOfWeek(DayOfWeek value);
}
public enum Microsoft.FeatureManagement.FeatureFilters.RecurrencePatternType : Enum {
    public int value__;
    public static RecurrencePatternType Daily;
    public static RecurrencePatternType Weekly;
}
public class Microsoft.FeatureManagement.FeatureFilters.RecurrenceRange : object {
    [CompilerGeneratedAttribute]
private RecurrenceRangeType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <EndDate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfOccurrences>k__BackingField;
    public RecurrenceRangeType Type { get; public set; }
    public DateTimeOffset EndDate { get; public set; }
    public int NumberOfOccurrences { get; public set; }
    [CompilerGeneratedAttribute]
public RecurrenceRangeType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(RecurrenceRangeType value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_EndDate();
    [CompilerGeneratedAttribute]
public void set_EndDate(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public int get_NumberOfOccurrences();
    [CompilerGeneratedAttribute]
public void set_NumberOfOccurrences(int value);
}
public enum Microsoft.FeatureManagement.FeatureFilters.RecurrenceRangeType : Enum {
    public int value__;
    public static RecurrenceRangeType NoEnd;
    public static RecurrenceRangeType EndDate;
    public static RecurrenceRangeType Numbered;
}
internal static class Microsoft.FeatureManagement.FeatureFilters.RecurrenceValidator : object {
    private static int DaysPerWeek;
    private static string ValueOutOfRange;
    private static string UnrecognizableValue;
    private static string RequiredParameter;
    private static string StartNotMatched;
    private static string TimeWindowDurationOutOfRange;
    public static bool TryValidateSettings(TimeWindowFilterSettings settings, String& paramName, String& reason);
    private static bool TryValidateRecurrenceRequiredParameter(TimeWindowFilterSettings settings, String& paramName, String& reason);
    private static bool TryValidateRecurrencePattern(TimeWindowFilterSettings settings, String& paramName, String& reason);
    private static bool TryValidateDailyRecurrencePattern(TimeWindowFilterSettings settings, String& paramName, String& reason);
    private static bool TryValidateWeeklyRecurrencePattern(TimeWindowFilterSettings settings, String& paramName, String& reason);
    private static bool TryValidateRecurrenceRange(TimeWindowFilterSettings settings, String& paramName, String& reason);
    private static bool TryValidateInterval(TimeWindowFilterSettings settings, String& paramName, String& reason);
    private static bool TryValidateDaysOfWeek(TimeWindowFilterSettings settings, String& paramName, String& reason);
    private static bool TryValidateEndDate(TimeWindowFilterSettings settings, String& paramName, String& reason);
    private static bool TryValidateNumberOfOccurrences(TimeWindowFilterSettings settings, String& paramName, String& reason);
    private static bool IsDurationCompliantWithDaysOfWeek(TimeSpan duration, int interval, IEnumerable`1<DayOfWeek> daysOfWeek, DayOfWeek firstDayOfWeek);
    private static int CalculateWeeklyDayOffset(DayOfWeek day1, DayOfWeek day2);
    private static List`1<DayOfWeek> SortDaysOfWeek(IEnumerable`1<DayOfWeek> daysOfWeek, DayOfWeek firstDayOfWeek);
}
public class Microsoft.FeatureManagement.FeatureFilters.TargetingContext : object {
    [CompilerGeneratedAttribute]
private string <UserId>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Groups>k__BackingField;
    public string UserId { get; public set; }
    public IEnumerable`1<string> Groups { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_UserId();
    [CompilerGeneratedAttribute]
public sealed virtual void set_UserId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_Groups();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Groups(IEnumerable`1<string> value);
}
public class Microsoft.FeatureManagement.FeatureFilters.TargetingEvaluationOptions : object {
    [CompilerGeneratedAttribute]
private bool <IgnoreCase>k__BackingField;
    public bool IgnoreCase { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IgnoreCase();
    [CompilerGeneratedAttribute]
public void set_IgnoreCase(bool value);
}
[FilterAliasAttribute("Microsoft.Targeting")]
public class Microsoft.FeatureManagement.FeatureFilters.TargetingFilter : object {
    private static string Alias;
    private ITargetingContextAccessor _contextAccessor;
    private IContextualFeatureFilter`1<ITargetingContext> _contextualFilter;
    private ILogger _logger;
    public TargetingFilter(ITargetingContextAccessor contextAccessor, IOptions`1<TargetingEvaluationOptions> options, ILoggerFactory loggerFactory);
    public sealed virtual object BindParameters(IConfiguration filterParameters);
    [AsyncStateMachineAttribute("Microsoft.FeatureManagement.FeatureFilters.TargetingFilter/<EvaluateAsync>d__6")]
public sealed virtual Task`1<bool> EvaluateAsync(FeatureFilterEvaluationContext context);
}
public class Microsoft.FeatureManagement.FeatureFilters.TargetingFilterSettings : object {
    [CompilerGeneratedAttribute]
private Audience <Audience>k__BackingField;
    public Audience Audience { get; public set; }
    [CompilerGeneratedAttribute]
public Audience get_Audience();
    [CompilerGeneratedAttribute]
public void set_Audience(Audience value);
}
[FilterAliasAttribute("Microsoft.TimeWindow")]
public class Microsoft.FeatureManagement.FeatureFilters.TimeWindowFilter : object {
    private TimeSpan CacheSlidingExpiration;
    private TimeSpan CacheAbsoluteExpirationRelativeToNow;
    private static string Alias;
    private ILogger _logger;
    [CompilerGeneratedAttribute]
private IMemoryCache <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private ISystemClock <SystemClock>k__BackingField;
    public IMemoryCache Cache { get; public set; }
    internal ISystemClock SystemClock { get; internal set; }
    public TimeWindowFilter(ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
public IMemoryCache get_Cache();
    [CompilerGeneratedAttribute]
public void set_Cache(IMemoryCache value);
    [CompilerGeneratedAttribute]
internal ISystemClock get_SystemClock();
    [CompilerGeneratedAttribute]
internal void set_SystemClock(ISystemClock value);
    public sealed virtual object BindParameters(IConfiguration filterParameters);
    public sealed virtual Task`1<bool> EvaluateAsync(FeatureFilterEvaluationContext context);
    private Nullable`1<DateTimeOffset> ReloadClosestStart(TimeWindowFilterSettings settings);
}
public class Microsoft.FeatureManagement.FeatureFilters.TimeWindowFilterSettings : object {
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <Start>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTimeOffset> <End>k__BackingField;
    [CompilerGeneratedAttribute]
private Recurrence <Recurrence>k__BackingField;
    public Nullable`1<DateTimeOffset> Start { get; public set; }
    public Nullable`1<DateTimeOffset> End { get; public set; }
    public Recurrence Recurrence { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_End();
    [CompilerGeneratedAttribute]
public void set_End(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Recurrence get_Recurrence();
    [CompilerGeneratedAttribute]
public void set_Recurrence(Recurrence value);
}
internal class Microsoft.FeatureManagement.FeatureManagementBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    public IServiceCollection Services { get; }
    public FeatureManagementBuilder(IServiceCollection services);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
    public sealed virtual IFeatureManagementBuilder AddFeatureFilter();
    public IFeatureManagementBuilder AddFeatureFilter(Func`2<IServiceProvider, object> implementationFactory);
    public sealed virtual IFeatureManagementBuilder AddSessionManager();
}
[ExtensionAttribute]
public static class Microsoft.FeatureManagement.FeatureManagementBuilderExtensions : object {
    [ExtensionAttribute]
public static IFeatureManagementBuilder WithTargeting(IFeatureManagementBuilder builder);
    [ExtensionAttribute]
public static IFeatureManagementBuilder WithVariantService(IFeatureManagementBuilder builder, string featureName);
}
public enum Microsoft.FeatureManagement.FeatureManagementError : Enum {
    public int value__;
    public static FeatureManagementError MissingFeatureFilter;
    public static FeatureManagementError AmbiguousFeatureFilter;
    public static FeatureManagementError MissingFeature;
    public static FeatureManagementError Conflict;
    public static FeatureManagementError InvalidConfigurationSetting;
}
public class Microsoft.FeatureManagement.FeatureManagementException : Exception {
    [CompilerGeneratedAttribute]
private FeatureManagementError <Error>k__BackingField;
    public FeatureManagementError Error { get; public set; }
    public FeatureManagementException(FeatureManagementError errorType, string message);
    [CompilerGeneratedAttribute]
public FeatureManagementError get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(FeatureManagementError value);
}
public class Microsoft.FeatureManagement.FeatureManagementOptions : object {
    [CompilerGeneratedAttribute]
private bool <IgnoreMissingFeatureFilters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreMissingFeatures>k__BackingField;
    public bool IgnoreMissingFeatureFilters { get; public set; }
    public bool IgnoreMissingFeatures { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IgnoreMissingFeatureFilters();
    [CompilerGeneratedAttribute]
public void set_IgnoreMissingFeatureFilters(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreMissingFeatures();
    [CompilerGeneratedAttribute]
public void set_IgnoreMissingFeatures(bool value);
}
public class Microsoft.FeatureManagement.FeatureManager : object {
    private TimeSpan ParametersCacheSlidingExpiration;
    private TimeSpan ParametersCacheAbsoluteExpirationRelativeToNow;
    private IFeatureDefinitionProvider _featureDefinitionProvider;
    private ConcurrentDictionary`2<string, IFeatureFilterMetadata> _filterMetadataCache;
    private ConcurrentDictionary`2<string, ContextualFeatureFilterEvaluator> _contextualFeatureFilterCache;
    private FeatureManagementOptions _options;
    private IEnumerable`1<IFeatureFilterMetadata> _featureFilters;
    private IEnumerable`1<ISessionManager> _sessionManagers;
    private TargetingEvaluationOptions _assignerOptions;
    private static ActivitySource ActivitySource;
    [CompilerGeneratedAttribute]
private IMemoryCache <Cache>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private ITargetingContextAccessor <TargetingContextAccessor>k__BackingField;
    public IEnumerable`1<IFeatureFilterMetadata> FeatureFilters { get; public set; }
    public IEnumerable`1<ISessionManager> SessionManagers { get; public set; }
    public IMemoryCache Cache { get; public set; }
    public ILogger Logger { get; public set; }
    public IConfiguration Configuration { get; public set; }
    public ITargetingContextAccessor TargetingContextAccessor { get; public set; }
    public TargetingEvaluationOptions AssignerOptions { get; public set; }
    public FeatureManager(IFeatureDefinitionProvider featureDefinitionProvider, FeatureManagementOptions options);
    private static FeatureManager();
    public IEnumerable`1<IFeatureFilterMetadata> get_FeatureFilters();
    public void set_FeatureFilters(IEnumerable`1<IFeatureFilterMetadata> value);
    public IEnumerable`1<ISessionManager> get_SessionManagers();
    public void set_SessionManagers(IEnumerable`1<ISessionManager> value);
    [CompilerGeneratedAttribute]
public IMemoryCache get_Cache();
    [CompilerGeneratedAttribute]
public void set_Cache(IMemoryCache value);
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ILogger value);
    [CompilerGeneratedAttribute]
public IConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(IConfiguration value);
    [CompilerGeneratedAttribute]
public ITargetingContextAccessor get_TargetingContextAccessor();
    [CompilerGeneratedAttribute]
public void set_TargetingContextAccessor(ITargetingContextAccessor value);
    public TargetingEvaluationOptions get_AssignerOptions();
    public void set_AssignerOptions(TargetingEvaluationOptions value);
    [AsyncStateMachineAttribute("Microsoft.FeatureManagement.FeatureManager/<IsEnabledAsync>d__37")]
public sealed virtual Task`1<bool> IsEnabledAsync(string feature);
    [AsyncStateMachineAttribute("Microsoft.FeatureManagement.FeatureManager/<IsEnabledAsync>d__38`1")]
public sealed virtual Task`1<bool> IsEnabledAsync(string feature, TContext appContext);
    [AsyncStateMachineAttribute("Microsoft.FeatureManagement.FeatureManager/<IsEnabledAsync>d__39")]
public sealed virtual ValueTask`1<bool> IsEnabledAsync(string feature, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.FeatureManagement.FeatureManager/<IsEnabledAsync>d__40`1")]
public sealed virtual ValueTask`1<bool> IsEnabledAsync(string feature, TContext appContext, CancellationToken cancellationToken);
    public sealed virtual IAsyncEnumerable`1<string> GetFeatureNamesAsync();
    [AsyncIteratorStateMachineAttribute("Microsoft.FeatureManagement.FeatureManager/<GetFeatureNamesAsync>d__42")]
public sealed virtual IAsyncEnumerable`1<string> GetFeatureNamesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.FeatureManagement.FeatureManager/<GetVariantAsync>d__43")]
public sealed virtual ValueTask`1<Variant> GetVariantAsync(string feature, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.FeatureManagement.FeatureManager/<GetVariantAsync>d__44")]
public sealed virtual ValueTask`1<Variant> GetVariantAsync(string feature, TargetingContext context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.FeatureManagement.FeatureManager/<EvaluateFeature>d__45`1")]
private ValueTask`1<EvaluationEvent> EvaluateFeature(string feature, TContext context, bool useContext, CancellationToken cancellationToken);
    private void AddEvaluationActivityEvent(EvaluationEvent evaluationEvent);
    [AsyncStateMachineAttribute("Microsoft.FeatureManagement.FeatureManager/<IsEnabledAsync>d__47`1")]
private ValueTask`1<bool> IsEnabledAsync(FeatureDefinition featureDefinition, TContext appContext, bool useAppContext, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.FeatureManagement.FeatureManager/<GetFeatureDefinition>d__48")]
private ValueTask`1<FeatureDefinition> GetFeatureDefinition(string feature);
    [AsyncStateMachineAttribute("Microsoft.FeatureManagement.FeatureManager/<ResolveTargetingContextAsync>d__49")]
private ValueTask`1<TargetingContext> ResolveTargetingContextAsync(CancellationToken cancellationToken);
    private ValueTask`1<VariantDefinition> AssignVariantAsync(EvaluationEvent evaluationEvent, TargetingContext targetingContext, CancellationToken cancellationToken);
    private void BindSettings(IFeatureFilterMetadata filter, FeatureFilterEvaluationContext context, int filterIndex);
    private IFeatureFilterMetadata GetFeatureFilterMetadata(string filterName, Type appContextType);
    private bool IsMatchingName(Type filterType, string filterName);
    private ContextualFeatureFilterEvaluator GetContextualFeatureFilter(string filterName, Type appContextType);
    private Variant GetVariantFromVariantDefinition(VariantDefinition variantDefinition);
}
internal class Microsoft.FeatureManagement.FeatureManagerSnapshot : object {
    private IVariantFeatureManager _featureManager;
    private ConcurrentDictionary`2<string, ValueTask`1<bool>> _flagCache;
    private ConcurrentDictionary`2<string, Variant> _variantCache;
    private IEnumerable`1<string> _featureNames;
    public FeatureManagerSnapshot(IVariantFeatureManager featureManager);
    public sealed virtual IAsyncEnumerable`1<string> GetFeatureNamesAsync();
    [AsyncIteratorStateMachineAttribute("Microsoft.FeatureManagement.FeatureManagerSnapshot/<GetFeatureNamesAsync>d__6")]
public sealed virtual IAsyncEnumerable`1<string> GetFeatureNamesAsync(CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> IsEnabledAsync(string feature);
    public sealed virtual Task`1<bool> IsEnabledAsync(string feature, TContext context);
    public sealed virtual ValueTask`1<bool> IsEnabledAsync(string feature, CancellationToken cancellationToken);
    public sealed virtual ValueTask`1<bool> IsEnabledAsync(string feature, TContext context, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.FeatureManagement.FeatureManagerSnapshot/<GetVariantAsync>d__11")]
public sealed virtual ValueTask`1<Variant> GetVariantAsync(string feature, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.FeatureManagement.FeatureManagerSnapshot/<GetVariantAsync>d__12")]
public sealed virtual ValueTask`1<Variant> GetVariantAsync(string feature, TargetingContext context, CancellationToken cancellationToken);
    private string GetVariantCacheKey(string feature);
    [CompilerGeneratedAttribute]
private ValueTask`1<bool> <IsEnabledAsync>b__7_0(string key);
}
public enum Microsoft.FeatureManagement.FeatureStatus : Enum {
    public int value__;
    public static FeatureStatus Conditional;
    public static FeatureStatus Disabled;
}
public class Microsoft.FeatureManagement.FilterAliasAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    public string Alias { get; }
    public FilterAliasAttribute(string alias);
    [CompilerGeneratedAttribute]
public string get_Alias();
}
public class Microsoft.FeatureManagement.GroupAllocation : object {
    [CompilerGeneratedAttribute]
private string <Variant>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Groups>k__BackingField;
    public string Variant { get; public set; }
    public IEnumerable`1<string> Groups { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Groups();
    [CompilerGeneratedAttribute]
public void set_Groups(IEnumerable`1<string> value);
}
public interface Microsoft.FeatureManagement.IContextualFeatureFilter`1 {
    public abstract virtual Task`1<bool> EvaluateAsync(FeatureFilterEvaluationContext featureFilterContext, TContext appContext);
}
public interface Microsoft.FeatureManagement.IFeatureDefinitionProvider {
    public abstract virtual Task`1<FeatureDefinition> GetFeatureDefinitionAsync(string featureName);
    public abstract virtual IAsyncEnumerable`1<FeatureDefinition> GetAllFeatureDefinitionsAsync();
}
internal interface Microsoft.FeatureManagement.IFeatureDefinitionProviderCacheable {
}
public interface Microsoft.FeatureManagement.IFeatureFilter {
    public abstract virtual Task`1<bool> EvaluateAsync(FeatureFilterEvaluationContext context);
}
public interface Microsoft.FeatureManagement.IFeatureFilterMetadata {
}
public interface Microsoft.FeatureManagement.IFeatureManagementBuilder {
    public IServiceCollection Services { get; }
    public abstract virtual IServiceCollection get_Services();
    public abstract virtual IFeatureManagementBuilder AddFeatureFilter();
    public abstract virtual IFeatureManagementBuilder AddSessionManager();
}
public interface Microsoft.FeatureManagement.IFeatureManager {
    public abstract virtual IAsyncEnumerable`1<string> GetFeatureNamesAsync();
    public abstract virtual Task`1<bool> IsEnabledAsync(string feature);
    public abstract virtual Task`1<bool> IsEnabledAsync(string feature, TContext context);
}
public interface Microsoft.FeatureManagement.IFeatureManagerSnapshot {
}
public interface Microsoft.FeatureManagement.IFilterParametersBinder {
    public abstract virtual object BindParameters(IConfiguration parameters);
}
public interface Microsoft.FeatureManagement.ISessionManager {
    public abstract virtual Task SetAsync(string featureName, bool enabled);
    public abstract virtual Task`1<Nullable`1<bool>> GetAsync(string featureName);
}
public interface Microsoft.FeatureManagement.IVariantFeatureManager {
    public abstract virtual IAsyncEnumerable`1<string> GetFeatureNamesAsync(CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<bool> IsEnabledAsync(string feature, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<bool> IsEnabledAsync(string feature, TContext context, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<Variant> GetVariantAsync(string feature, CancellationToken cancellationToken);
    public abstract virtual ValueTask`1<Variant> GetVariantAsync(string feature, TargetingContext context, CancellationToken cancellationToken);
}
public interface Microsoft.FeatureManagement.IVariantFeatureManagerSnapshot {
}
public interface Microsoft.FeatureManagement.IVariantServiceProvider`1 {
    public abstract virtual ValueTask`1<TService> GetServiceAsync(CancellationToken cancellationToken);
}
internal static class Microsoft.FeatureManagement.MicrosoftFeatureManagementFields : object {
    public static string FeatureManagementSectionName;
    public static string FeatureFlagsSectionName;
    public static string Id;
    public static string Enabled;
    public static string Conditions;
    public static string ClientFilters;
    public static string RequirementType;
    public static string AllocationSectionName;
    public static string AllocationDefaultWhenDisabled;
    public static string AllocationDefaultWhenEnabled;
    public static string AllocationVariantKeyword;
    public static string UserAllocationSectionName;
    public static string UserAllocationUsers;
    public static string GroupAllocationSectionName;
    public static string GroupAllocationGroups;
    public static string PercentileAllocationSectionName;
    public static string PercentileAllocationFrom;
    public static string PercentileAllocationTo;
    public static string AllocationSeed;
    public static string Name;
    public static string Parameters;
    public static string VariantsSectionName;
    public static string VariantDefinitionConfigurationValue;
    public static string VariantDefinitionConfigurationReference;
    public static string VariantDefinitionStatusOverride;
    public static string Telemetry;
    public static string Metadata;
}
public class Microsoft.FeatureManagement.PercentileAllocation : object {
    [CompilerGeneratedAttribute]
private string <Variant>k__BackingField;
    [CompilerGeneratedAttribute]
private double <From>k__BackingField;
    [CompilerGeneratedAttribute]
private double <To>k__BackingField;
    public string Variant { get; public set; }
    public double From { get; public set; }
    public double To { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(string value);
    [CompilerGeneratedAttribute]
public double get_From();
    [CompilerGeneratedAttribute]
public void set_From(double value);
    [CompilerGeneratedAttribute]
public double get_To();
    [CompilerGeneratedAttribute]
public void set_To(double value);
}
public enum Microsoft.FeatureManagement.RequirementType : Enum {
    public int value__;
    public static RequirementType Any;
    public static RequirementType All;
}
[ExtensionAttribute]
public static class Microsoft.FeatureManagement.ServiceCollectionExtensions : object {
    [ExtensionAttribute]
public static IFeatureManagementBuilder AddFeatureManagement(IServiceCollection services);
    [ExtensionAttribute]
public static IFeatureManagementBuilder AddFeatureManagement(IServiceCollection services, IConfiguration configuration);
    [ExtensionAttribute]
public static IFeatureManagementBuilder AddScopedFeatureManagement(IServiceCollection services);
    [ExtensionAttribute]
public static IFeatureManagementBuilder AddScopedFeatureManagement(IServiceCollection services, IConfiguration configuration);
}
public enum Microsoft.FeatureManagement.StatusOverride : Enum {
    public int value__;
    public static StatusOverride None;
    public static StatusOverride Enabled;
    public static StatusOverride Disabled;
}
internal static class Microsoft.FeatureManagement.Targeting.TargetingEvaluator : object {
    private static string OutOfRange;
    private static string RequiredParameter;
    private static StringComparison GetComparisonType(bool ignoreCase);
    public static bool TryValidateSettings(TargetingFilterSettings targetingSettings, String& paramName, String& reason);
    public static bool IsTargeted(ITargetingContext targetingContext, TargetingFilterSettings settings, bool ignoreCase, string hint);
    public static bool IsTargeted(string userId, IEnumerable`1<string> users, bool ignoreCase);
    public static bool IsTargeted(IEnumerable`1<string> sourceGroups, IEnumerable`1<string> targetedGroups, bool ignoreCase);
    public static bool IsTargeted(ITargetingContext targetingContext, IEnumerable`1<GroupRollout> groups, bool ignoreCase, string hint);
    public static bool IsTargeted(ITargetingContext targetingContext, double defaultRolloutPercentage, bool ignoreCase, string hint);
    public static bool IsTargeted(ITargetingContext targetingContext, double from, double to, bool ignoreCase, string hint);
    private static bool IsTargeted(string contextId, double from, double to);
}
public class Microsoft.FeatureManagement.Telemetry.EvaluationEvent : object {
    [CompilerGeneratedAttribute]
private FeatureDefinition <FeatureDefinition>k__BackingField;
    [CompilerGeneratedAttribute]
private TargetingContext <TargetingContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Variant <Variant>k__BackingField;
    [CompilerGeneratedAttribute]
private VariantAssignmentReason <VariantAssignmentReason>k__BackingField;
    public FeatureDefinition FeatureDefinition { get; public set; }
    public TargetingContext TargetingContext { get; public set; }
    public bool Enabled { get; public set; }
    public Variant Variant { get; public set; }
    public VariantAssignmentReason VariantAssignmentReason { get; public set; }
    [CompilerGeneratedAttribute]
public FeatureDefinition get_FeatureDefinition();
    [CompilerGeneratedAttribute]
public void set_FeatureDefinition(FeatureDefinition value);
    [CompilerGeneratedAttribute]
public TargetingContext get_TargetingContext();
    [CompilerGeneratedAttribute]
public void set_TargetingContext(TargetingContext value);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public Variant get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(Variant value);
    [CompilerGeneratedAttribute]
public VariantAssignmentReason get_VariantAssignmentReason();
    [CompilerGeneratedAttribute]
public void set_VariantAssignmentReason(VariantAssignmentReason value);
}
public enum Microsoft.FeatureManagement.Telemetry.VariantAssignmentReason : Enum {
    public int value__;
    public static VariantAssignmentReason None;
    public static VariantAssignmentReason DefaultWhenDisabled;
    public static VariantAssignmentReason DefaultWhenEnabled;
    public static VariantAssignmentReason User;
    public static VariantAssignmentReason Group;
    public static VariantAssignmentReason Percentile;
}
public class Microsoft.FeatureManagement.TelemetryConfiguration : object {
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private IReadOnlyDictionary`2<string, string> <Metadata>k__BackingField;
    public bool Enabled { get; public set; }
    public IReadOnlyDictionary`2<string, string> Metadata { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    [CompilerGeneratedAttribute]
public IReadOnlyDictionary`2<string, string> get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(IReadOnlyDictionary`2<string, string> value);
}
public class Microsoft.FeatureManagement.UserAllocation : object {
    [CompilerGeneratedAttribute]
private string <Variant>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Users>k__BackingField;
    public string Variant { get; public set; }
    public IEnumerable`1<string> Users { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Variant();
    [CompilerGeneratedAttribute]
public void set_Variant(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Users();
    [CompilerGeneratedAttribute]
public void set_Users(IEnumerable`1<string> value);
}
internal static class Microsoft.FeatureManagement.Utils.RandomGenerator : object {
    private static Random _global;
    private static ThreadLocal`1<Random> _rnd;
    private static RandomGenerator();
    public static int Next();
    public static double NextDouble();
}
public class Microsoft.FeatureManagement.Variant : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfigurationSection <Configuration>k__BackingField;
    public string Name { get; public set; }
    public IConfigurationSection Configuration { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IConfigurationSection get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(IConfigurationSection value);
}
public class Microsoft.FeatureManagement.VariantDefinition : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IConfigurationSection <ConfigurationValue>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigurationReference>k__BackingField;
    [CompilerGeneratedAttribute]
private StatusOverride <StatusOverride>k__BackingField;
    public string Name { get; public set; }
    public IConfigurationSection ConfigurationValue { get; public set; }
    public string ConfigurationReference { get; public set; }
    public StatusOverride StatusOverride { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public IConfigurationSection get_ConfigurationValue();
    [CompilerGeneratedAttribute]
public void set_ConfigurationValue(IConfigurationSection value);
    [CompilerGeneratedAttribute]
public string get_ConfigurationReference();
    [CompilerGeneratedAttribute]
public void set_ConfigurationReference(string value);
    [CompilerGeneratedAttribute]
public StatusOverride get_StatusOverride();
    [CompilerGeneratedAttribute]
public void set_StatusOverride(StatusOverride value);
}
public class Microsoft.FeatureManagement.VariantServiceAliasAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Alias>k__BackingField;
    public string Alias { get; }
    public VariantServiceAliasAttribute(string alias);
    [CompilerGeneratedAttribute]
public string get_Alias();
}
internal class Microsoft.FeatureManagement.VariantServiceProvider`1 : object {
    private IEnumerable`1<TService> _services;
    private IVariantFeatureManager _featureManager;
    private string _featureName;
    private ConcurrentDictionary`2<string, TService> _variantServiceCache;
    public VariantServiceProvider`1(string featureName, IVariantFeatureManager featureManager, IEnumerable`1<TService> services);
    [AsyncStateMachineAttribute("Microsoft.FeatureManagement.VariantServiceProvider`1/<GetServiceAsync>d__5")]
public sealed virtual ValueTask`1<TService> GetServiceAsync(CancellationToken cancellationToken);
    private bool IsMatchingVariantName(Type implementationType, string variantName);
}
