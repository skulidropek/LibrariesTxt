public class InternalVisibleTo.KeyToken : object {
    public static string MSAL;
}
public class Microsoft.Identity.Client.NativeInterop.Account : object {
    private MSALRUNTIME_ACCOUNT_HANDLE _accountHandle;
    private Lazy`1<string> _accountId;
    private Lazy`1<string> _homeAccountid;
    private Lazy`1<string> _environment;
    private Lazy`1<string> _realm;
    private Lazy`1<string> _localAccountId;
    private Lazy`1<string> _userName;
    private Lazy`1<string> _givenName;
    private Lazy`1<string> _familyName;
    private Lazy`1<string> _middleName;
    private Lazy`1<string> _displayName;
    private Lazy`1<string> _additionalFieldsJson;
    private Lazy`1<string> _homeEnvironment;
    private Lazy`1<string> _clientInfo;
    public string AccountId { get; }
    public string HomeAccountid { get; }
    public string Environment { get; }
    public string Realm { get; }
    public string LocalAccountId { get; }
    public string UserName { get; }
    public string GivenName { get; }
    public string FamilyName { get; }
    public string MiddleName { get; }
    public string DisplayName { get; }
    public string AdditionalFieldsJson { get; }
    public string HomeEnvironment { get; }
    public string ClientInfo { get; }
    internal MSALRUNTIME_ACCOUNT_HANDLE Handle { get; }
    internal Account(MSALRUNTIME_ACCOUNT_HANDLE accountHandle);
    public string get_AccountId();
    public string get_HomeAccountid();
    public string get_Environment();
    public string get_Realm();
    public string get_LocalAccountId();
    public string get_UserName();
    public string get_GivenName();
    public string get_FamilyName();
    public string get_MiddleName();
    public string get_DisplayName();
    public string get_AdditionalFieldsJson();
    public string get_HomeEnvironment();
    public string get_ClientInfo();
    internal MSALRUNTIME_ACCOUNT_HANDLE get_Handle();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private string <.ctor>b__14_0();
    [CompilerGeneratedAttribute]
private string <.ctor>b__14_1();
    [CompilerGeneratedAttribute]
private string <.ctor>b__14_2();
    [CompilerGeneratedAttribute]
private string <.ctor>b__14_3();
    [CompilerGeneratedAttribute]
private string <.ctor>b__14_4();
    [CompilerGeneratedAttribute]
private string <.ctor>b__14_5();
    [CompilerGeneratedAttribute]
private string <.ctor>b__14_6();
    [CompilerGeneratedAttribute]
private string <.ctor>b__14_7();
    [CompilerGeneratedAttribute]
private string <.ctor>b__14_8();
    [CompilerGeneratedAttribute]
private string <.ctor>b__14_9();
    [CompilerGeneratedAttribute]
private string <.ctor>b__14_10();
    [CompilerGeneratedAttribute]
private string <.ctor>b__14_11();
    [CompilerGeneratedAttribute]
private string <.ctor>b__14_12();
}
internal abstract class Microsoft.Identity.Client.NativeInterop.API : object {
    public static API CPU;
    private static API();
    public abstract virtual void ReleaseAccount(IntPtr account);
    public abstract virtual string GetAccountId(MSALRUNTIME_ACCOUNT_HANDLE account);
    public abstract virtual string GetHomeAccountId(MSALRUNTIME_ACCOUNT_HANDLE account);
    public abstract virtual string GetEnvironment(MSALRUNTIME_ACCOUNT_HANDLE account);
    public abstract virtual string GetRealm(MSALRUNTIME_ACCOUNT_HANDLE account);
    public abstract virtual string GetLocalAccountId(MSALRUNTIME_ACCOUNT_HANDLE account);
    public abstract virtual string GetUserName(MSALRUNTIME_ACCOUNT_HANDLE account);
    public abstract virtual string GetGivenName(MSALRUNTIME_ACCOUNT_HANDLE account);
    public abstract virtual string GetFamilyName(MSALRUNTIME_ACCOUNT_HANDLE account);
    public abstract virtual string GetMiddleName(MSALRUNTIME_ACCOUNT_HANDLE account);
    public abstract virtual string GetDisplayName(MSALRUNTIME_ACCOUNT_HANDLE account);
    public abstract virtual string GetAdditionalFieldsJson(MSALRUNTIME_ACCOUNT_HANDLE account);
    public abstract virtual string GetHomeEnvironment(MSALRUNTIME_ACCOUNT_HANDLE account);
    public abstract virtual string GetClientInfo(MSALRUNTIME_ACCOUNT_HANDLE account);
    public abstract virtual void ReleaseAsyncHandle(IntPtr asyncHandle);
    public abstract virtual void CancelAsyncOperation(MSALRUNTIME_ASYNC_HANDLE asyncHandle);
    public abstract virtual void ReleaseAuthParameters(IntPtr asyncHandle);
    public abstract virtual MSALRUNTIME_AUTH_PARAMETERS_HANDLE CreateAuthParameters(string clientId, string authority);
    public abstract virtual void SetRequestedScopes(MSALRUNTIME_AUTH_PARAMETERS_HANDLE authParameters, string scopes);
    public abstract virtual void SetDecodedClaims(MSALRUNTIME_AUTH_PARAMETERS_HANDLE handle, string value);
    public abstract virtual void SetRedirectUri(MSALRUNTIME_AUTH_PARAMETERS_HANDLE handle, string value);
    public abstract virtual void SetAccessTokenToRenew(MSALRUNTIME_AUTH_PARAMETERS_HANDLE handle, string value);
    public abstract virtual void SetPopParams(MSALRUNTIME_AUTH_PARAMETERS_HANDLE handle, string httpMethod, string uriHost, string uriPath, string nonce);
    public abstract virtual void SetAdditionalParameter(MSALRUNTIME_AUTH_PARAMETERS_HANDLE authParameters, string key, string value);
    public abstract virtual void ReleaseAuthResult(IntPtr authResult);
    private static Task`1<AuthResult> CreateAsyncForAuthResult(MSALAsync asyncFunc, Async& asyncObj);
    private static void CallbackCompletionForAuthResult(IntPtr hResponse, IntPtr callbackData);
    public abstract virtual MSALRUNTIME_ACCOUNT_HANDLE GetAccount(MSALRUNTIME_AUTH_RESULT_HANDLE authResult);
    public abstract virtual string GetIdToken(MSALRUNTIME_AUTH_RESULT_HANDLE authResult);
    public abstract virtual string GetRawIdToken(MSALRUNTIME_AUTH_RESULT_HANDLE authResult);
    public abstract virtual string GetAccessToken(MSALRUNTIME_AUTH_RESULT_HANDLE authResult);
    public abstract virtual string GetGrantedScopes(MSALRUNTIME_AUTH_RESULT_HANDLE authResult);
    public abstract virtual string GetAuthorizationHeader(MSALRUNTIME_AUTH_RESULT_HANDLE authResult);
    public abstract virtual bool IsPopAuthorization(MSALRUNTIME_AUTH_RESULT_HANDLE authResult);
    public abstract virtual long GetExpiresOn(MSALRUNTIME_AUTH_RESULT_HANDLE handle);
    public Error GetError(MSALRUNTIME_AUTH_RESULT_HANDLE handle);
    protected abstract virtual MSALRUNTIME_ERROR_HANDLE GetErrorInternal(MSALRUNTIME_AUTH_RESULT_HANDLE handle);
    public abstract virtual string GetTelemetryData(MSALRUNTIME_AUTH_RESULT_HANDLE handle);
    public abstract virtual void ReleaseDiscoverAccountsResult(IntPtr discoverAccountsResult);
    private static Task`1<DiscoverAccountsResult> CreateDiscoverAccountsAsync(MSALAsync asyncFunc, Async& asyncObj);
    private static void DiscoverAccountsCallbackCompletion(IntPtr hResponse, IntPtr callbackData);
    public MSALRUNTIME_ACCOUNT_HANDLE GetAccountAt(MSALRUNTIME_DISCOVER_ACCOUNTS_RESULT_HANDLE discoverAccountsResult, UInt32 index);
    protected abstract virtual MSALRUNTIME_ACCOUNT_HANDLE GetAccountAtInternal(MSALRUNTIME_DISCOVER_ACCOUNTS_RESULT_HANDLE discoverAccountsResult, UInt32 index);
    public Error GetDiscoverAccountsError(MSALRUNTIME_DISCOVER_ACCOUNTS_RESULT_HANDLE handle);
    protected abstract virtual MSALRUNTIME_ERROR_HANDLE GetDiscoverAccountsErrorInternal(MSALRUNTIME_DISCOVER_ACCOUNTS_RESULT_HANDLE handle);
    public abstract virtual string GetDiscoverAccountsTelemetryData(MSALRUNTIME_DISCOVER_ACCOUNTS_RESULT_HANDLE handle);
    public abstract virtual void ReleaseError(IntPtr error);
    public abstract virtual ResponseStatus GetStatus(MSALRUNTIME_ERROR_HANDLE error);
    public abstract virtual long GetErrorCode(MSALRUNTIME_ERROR_HANDLE error);
    public abstract virtual int GetTag(MSALRUNTIME_ERROR_HANDLE error);
    public abstract virtual string GetContext(MSALRUNTIME_ERROR_HANDLE error);
    internal void RegisterLogCallback(Core core);
    internal static void LogCallback(string logMessage, int logLevel, IntPtr callbackData);
    internal abstract virtual void ReleaseRegisterLogCallback(IntPtr loggerHandle);
    internal abstract virtual void SetIsPiiEnabled(bool isEnabled);
    protected abstract virtual void RegisterLogCallback(MSALRUNTIME_LOG_CALLBACK_ROUTINE callback, IntPtr callbackData, MSALRUNTIME_LOG_CALLBACK_HANDLE& asyncHandle);
    public abstract virtual void ReleaseReadAccountResult(IntPtr readAccountResult);
    private static Task`1<ReadAccountResult> CreateReadAccountAsync(MSALAsync asyncFunc, Async& asyncObj);
    private static void ReadAccountCallbackCompletion(IntPtr hResponse, IntPtr callbackData);
    public abstract virtual MSALRUNTIME_ACCOUNT_HANDLE GetAccount(MSALRUNTIME_READ_ACCOUNT_RESULT_HANDLE handle);
    public Error GetReadAccountError(MSALRUNTIME_READ_ACCOUNT_RESULT_HANDLE handle);
    protected abstract virtual MSALRUNTIME_ERROR_HANDLE GetReadAccountErrorInternal(MSALRUNTIME_READ_ACCOUNT_RESULT_HANDLE handle);
    public abstract virtual string GetReadAccountTelemetryData(MSALRUNTIME_READ_ACCOUNT_RESULT_HANDLE handle);
    public abstract virtual void ReleaseSignOutResult(IntPtr signOutResult);
    private static Task`1<SignOutResult> CreateSignOutAsync(MSALAsync asyncFunc, Async& asyncObj);
    private static void SignOutCallbackCompletion(IntPtr hResponse, IntPtr callbackData);
    public Error GetSignOutError(MSALRUNTIME_SIGNOUT_RESULT_HANDLE handle);
    protected abstract virtual MSALRUNTIME_ERROR_HANDLE GetSignOutErrorInternal(MSALRUNTIME_SIGNOUT_RESULT_HANDLE handle);
    public abstract virtual string GetSignOutTelemetryData(MSALRUNTIME_SIGNOUT_RESULT_HANDLE handle);
    public abstract virtual Task`1<AuthResult> SignInAsync(IntPtr parentHwnd, AuthParameters authParameters, string correlationId, string accountHint, Async& asyncObj);
    public abstract virtual Task`1<AuthResult> SignInSilentlyAsync(AuthParameters authParameters, string correlationId, Async& asyncObj);
    public abstract virtual Task`1<AuthResult> SignInInteractivelyAsync(IntPtr parentHwnd, AuthParameters authParameters, string correlationId, string accountHint, Async& asyncObj);
    public abstract virtual Task`1<ReadAccountResult> ReadAccountByIdAsync(string accountId, string correlationId, Async& asyncObj);
    public abstract virtual Task`1<AuthResult> AcquireTokenSilentlyAsync(AuthParameters authParameters, string correlationId, Account account, Async& asyncObj);
    public abstract virtual Task`1<AuthResult> AcquireTokenInteractivelyAsync(IntPtr parentHwnd, AuthParameters authParameters, string correlationId, Account account, Async& asyncObj);
    public abstract virtual Task`1<SignOutResult> SignOutSilentlyAsync(string clientId, string correlationId, Account account, Async& asyncObj);
    public abstract virtual Task`1<DiscoverAccountsResult> DiscoverAccountsAsync(string clientId, string correlationId, Async& asyncObj);
    public abstract virtual void Startup();
    public abstract virtual void Shutdown();
    private static IntPtr LoadWindowsLibrary(string path);
    private static string GetPackagePathAndSetEnvironmentVariables();
    public static void SetEnvironmentVariable(string execDir, string arch);
    private static API CreateAPI();
    private static void CallbackCompletion(IntPtr hResponse, IntPtr callbackData, Func`2<IntPtr, T> convert);
    private static Task`1<T> CreateAsync(MSALAsync asyncFunc, Func`2<U, T> convert, MSALRUNTIME_COMPLETION_ROUTINE callbackCompletion, Async& asyncObj);
    private void ThrowIfFailed(MSALRUNTIME_ERROR_HANDLE hError);
    protected string GetString(APIFunc func);
}
public class Microsoft.Identity.Client.NativeInterop.Async : object {
    private MSALRUNTIME_ASYNC_HANDLE _asyncHandle;
    internal Async(MSALRUNTIME_ASYNC_HANDLE asyncHandle);
    public void Cancel();
    public sealed virtual void Dispose();
}
public class Microsoft.Identity.Client.NativeInterop.AuthParameters : object {
    private MSALRUNTIME_AUTH_PARAMETERS_HANDLE _params;
    private string _requestedScopes;
    private string _redirectUri;
    private string _decodedClaims;
    private string _accessTokenToRenew;
    private PopParams _popParams;
    private PropertyCollection _properties;
    public string RequestedScopes { get; public set; }
    public string RedirectUri { get; public set; }
    public string DecodedClaims { get; public set; }
    public string AccessTokenToRenew { get; public set; }
    public PopParams PopParams { get; public set; }
    public PropertyCollection Properties { get; }
    public AuthParameters(string clientId, string authority);
    public string get_RequestedScopes();
    public void set_RequestedScopes(string value);
    public string get_RedirectUri();
    public void set_RedirectUri(string value);
    public string get_DecodedClaims();
    public void set_DecodedClaims(string value);
    public string get_AccessTokenToRenew();
    public void set_AccessTokenToRenew(string value);
    public void set_PopParams(PopParams value);
    public PopParams get_PopParams();
    public PropertyCollection get_Properties();
    internal MSALRUNTIME_AUTH_PARAMETERS_HANDLE ConstructHandle();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <.ctor>b__7_0(string key, string value);
}
public class Microsoft.Identity.Client.NativeInterop.AuthResult : object {
    private MSALRUNTIME_AUTH_RESULT_HANDLE _authResultHandle;
    private Lazy`1<Account> _account;
    private Lazy`1<string> _accessToken;
    private Lazy`1<string> _idToken;
    private Lazy`1<string> _rawIdToken;
    private Lazy`1<string> _grantedScopes;
    private Lazy`1<string> _authorizationHeader;
    private Lazy`1<bool> _isPopAuthorization;
    private Lazy`1<DateTime> _expiresOn;
    private Lazy`1<Error> _error;
    private Lazy`1<string> _telemetryData;
    public bool IsSuccess { get; }
    public Account Account { get; }
    public string AccessToken { get; }
    public string IdToken { get; }
    public string RawIdToken { get; }
    public string GrantedScopes { get; }
    public string AuthorizationHeader { get; }
    public bool IsPopAuthorization { get; }
    public DateTime ExpiresOn { get; }
    public Error Error { get; }
    public string TelemetryData { get; }
    internal AuthResult(MSALRUNTIME_AUTH_RESULT_HANDLE authResultHandle);
    public bool get_IsSuccess();
    public Account get_Account();
    public string get_AccessToken();
    public string get_IdToken();
    public string get_RawIdToken();
    public string get_GrantedScopes();
    public string get_AuthorizationHeader();
    public bool get_IsPopAuthorization();
    public DateTime get_ExpiresOn();
    public Error get_Error();
    public string get_TelemetryData();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private Account <.ctor>b__11_0();
    [CompilerGeneratedAttribute]
private string <.ctor>b__11_1();
    [CompilerGeneratedAttribute]
private string <.ctor>b__11_2();
    [CompilerGeneratedAttribute]
private string <.ctor>b__11_3();
    [CompilerGeneratedAttribute]
private string <.ctor>b__11_4();
    [CompilerGeneratedAttribute]
private string <.ctor>b__11_5();
    [CompilerGeneratedAttribute]
private bool <.ctor>b__11_6();
    [CompilerGeneratedAttribute]
private DateTime <.ctor>b__11_7();
    [CompilerGeneratedAttribute]
private Error <.ctor>b__11_8();
    [CompilerGeneratedAttribute]
private string <.ctor>b__11_9();
}
public class Microsoft.Identity.Client.NativeInterop.Core : CriticalFinalizerObject {
    private bool _alive;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private MSALRUNTIME_LOG_CALLBACK_HANDLE <LogCallBackHandle>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private GCHandle <CallbackDataHandle>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private LogDelegate _onLog;
    private object _sync;
    internal MSALRUNTIME_LOG_CALLBACK_HANDLE LogCallBackHandle { get; internal set; }
    internal GCHandle CallbackDataHandle { get; internal set; }
    [CompilerGeneratedAttribute]
internal MSALRUNTIME_LOG_CALLBACK_HANDLE get_LogCallBackHandle();
    [CompilerGeneratedAttribute]
internal void set_LogCallBackHandle(MSALRUNTIME_LOG_CALLBACK_HANDLE value);
    [CompilerGeneratedAttribute]
internal GCHandle get_CallbackDataHandle();
    [CompilerGeneratedAttribute]
internal void set_CallbackDataHandle(GCHandle value);
    protected virtual override void Finalize();
    public Task`1<AuthResult> SignInAsync(IntPtr parentHwnd, AuthParameters authParameters, string correlationId, CancellationToken cancellationToken);
    public Task`1<AuthResult> SignInAsync(IntPtr parentHwnd, AuthParameters authParameters, string correlationId, string accountHint, CancellationToken cancellationToken);
    public Task`1<AuthResult> SignInSilentlyAsync(AuthParameters authParameters, string correlationId, CancellationToken cancellationToken);
    public Task`1<AuthResult> SignInInteractivelyAsync(IntPtr parentHwnd, AuthParameters authParameters, string correlationId, CancellationToken cancellationToken);
    public Task`1<AuthResult> SignInInteractivelyAsync(IntPtr parentHwnd, AuthParameters authParameters, string correlationId, string accountHint, CancellationToken cancellationToken);
    public Task`1<ReadAccountResult> ReadAccountByIdAsync(string accountId, string correlationId, CancellationToken cancellationToken);
    public Task`1<AuthResult> AcquireTokenSilentlyAsync(AuthParameters authParameters, string correlationId, Account account, CancellationToken cancellationToken);
    public Task`1<AuthResult> AcquireTokenInteractivelyAsync(IntPtr parentHwnd, AuthParameters authParameters, string correlationId, Account account, CancellationToken cancellationToken);
    public Task`1<SignOutResult> SignOutSilentlyAsync(string clientId, string correlationId, Account account, CancellationToken cancellationToken);
    public Task`1<DiscoverAccountsResult> DiscoverAccountsAsync(string clientId, string correlationId, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
private void add__onLog(LogDelegate value);
    [CompilerGeneratedAttribute]
private void remove__onLog(LogDelegate value);
    public void add_LogEvent(LogDelegate value);
    public void remove_LogEvent(LogDelegate value);
    public void EnablePii(bool enable);
    internal void FireLogEvent(string logMessage, LogLevel logLevel);
    public sealed virtual void Dispose();
    private void Dispose(bool disposing);
    private void ReleaseCallback();
    private static void MonitorCancellationOrDisposeAsyncObj(Async asyncObj, CancellationToken cancellationToken);
}
public class Microsoft.Identity.Client.NativeInterop.DiscoverAccountsResult : object {
    private MSALRUNTIME_DISCOVER_ACCOUNTS_RESULT_HANDLE _discoverAccountsResultHandle;
    private Lazy`1<List`1<Account>> _accounts;
    private Lazy`1<Error> _error;
    private Lazy`1<string> _telemetryData;
    public bool IsSuccess { get; }
    public Error Error { get; }
    public string TelemetryData { get; }
    public List`1<Account> Accounts { get; }
    internal DiscoverAccountsResult(MSALRUNTIME_DISCOVER_ACCOUNTS_RESULT_HANDLE discoverAccountsResultHandle);
    public bool get_IsSuccess();
    public Error get_Error();
    public string get_TelemetryData();
    public List`1<Account> get_Accounts();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private List`1<Account> <.ctor>b__4_0();
    [CompilerGeneratedAttribute]
private Error <.ctor>b__4_1();
    [CompilerGeneratedAttribute]
private string <.ctor>b__4_2();
}
public class Microsoft.Identity.Client.NativeInterop.Error : object {
    private ResponseStatus _status;
    private long _errorCode;
    private int _tag;
    private string _context;
    public ResponseStatus Status { get; }
    public long ErrorCode { get; }
    public int Tag { get; }
    public string Context { get; }
    private Error(MSALRUNTIME_ERROR_HANDLE hError);
    internal static Error TryCreate(MSALRUNTIME_ERROR_HANDLE hError);
    public ResponseStatus get_Status();
    public long get_ErrorCode();
    public int get_Tag();
    public string get_Context();
    public virtual string ToString();
}
internal abstract class Microsoft.Identity.Client.NativeInterop.Handle : SafeHandle {
    private bool _releaseModule;
    public bool IsInvalid { get; }
    public Handle(bool releaseModule);
    public virtual bool get_IsInvalid();
    protected sealed virtual bool ReleaseHandle();
    protected abstract virtual void Release();
    protected virtual void Dispose(bool disposing);
}
public class Microsoft.Identity.Client.NativeInterop.LogEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private LogLevel <LogLevel>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Message>k__BackingField;
    public LogLevel LogLevel { get; }
    public string Message { get; }
    public LogEventArgs(LogLevel logLevel, string message);
    [CompilerGeneratedAttribute]
public LogLevel get_LogLevel();
    [CompilerGeneratedAttribute]
public string get_Message();
}
public enum Microsoft.Identity.Client.NativeInterop.LogLevel : Enum {
    public int value__;
    public static LogLevel Trace;
    public static LogLevel Debug;
    public static LogLevel Info;
    public static LogLevel Warning;
    public static LogLevel Error;
    public static LogLevel Fatal;
}
internal class Microsoft.Identity.Client.NativeInterop.Module : object {
    private static int s_handleCount;
    private static object s_lockRuntime;
    public static int HandleCount { get; }
    private static Module();
    public static int get_HandleCount();
    internal static void AddRef(string handleName);
    internal static void RemoveRef(string handleName);
    public static int RefCount();
}
internal class Microsoft.Identity.Client.NativeInterop.MSALRUNTIME_ACCOUNT_HANDLE : Handle {
    protected virtual void Release();
}
internal class Microsoft.Identity.Client.NativeInterop.MSALRUNTIME_ASYNC_HANDLE : Handle {
    protected virtual void Release();
}
internal class Microsoft.Identity.Client.NativeInterop.MSALRUNTIME_AUTH_PARAMETERS_HANDLE : Handle {
    protected virtual void Release();
}
internal class Microsoft.Identity.Client.NativeInterop.MSALRUNTIME_AUTH_RESULT_HANDLE : Handle {
    public MSALRUNTIME_AUTH_RESULT_HANDLE(IntPtr hndl);
    protected virtual void Release();
}
internal class Microsoft.Identity.Client.NativeInterop.MSALRUNTIME_DISCOVER_ACCOUNTS_RESULT_HANDLE : Handle {
    public MSALRUNTIME_DISCOVER_ACCOUNTS_RESULT_HANDLE(IntPtr hndl);
    protected virtual void Release();
}
internal class Microsoft.Identity.Client.NativeInterop.MSALRUNTIME_ERROR_HANDLE : Handle {
    public bool IsSuccess { get; }
    public MSALRUNTIME_ERROR_HANDLE(bool releaseModule);
    protected virtual void Release();
    public bool get_IsSuccess();
}
internal class Microsoft.Identity.Client.NativeInterop.MSALRUNTIME_ERROR_HANDLE_MODULE : MSALRUNTIME_ERROR_HANDLE {
}
internal class Microsoft.Identity.Client.NativeInterop.MSALRUNTIME_LOG_CALLBACK_HANDLE : Handle {
    protected virtual void Release();
}
internal class Microsoft.Identity.Client.NativeInterop.MSALRUNTIME_READ_ACCOUNT_RESULT_HANDLE : Handle {
    public MSALRUNTIME_READ_ACCOUNT_RESULT_HANDLE(IntPtr hndl);
    protected virtual void Release();
}
internal class Microsoft.Identity.Client.NativeInterop.MSALRUNTIME_SIGNOUT_RESULT_HANDLE : Handle {
    public MSALRUNTIME_SIGNOUT_RESULT_HANDLE(IntPtr hndl);
    protected virtual void Release();
}
public class Microsoft.Identity.Client.NativeInterop.MsalRuntimeException : Exception {
    private Error _result;
    public ResponseStatus Status { get; }
    public long ErrorCode { get; }
    public int Tag { get; }
    public string Context { get; }
    public MsalRuntimeException(Error result);
    public ResponseStatus get_Status();
    public long get_ErrorCode();
    public int get_Tag();
    public string get_Context();
}
internal enum Microsoft.Identity.Client.NativeInterop.OperatingSystemType : Enum {
    public int value__;
    public static OperatingSystemType Windows;
    public static OperatingSystemType Linux;
    public static OperatingSystemType MacOSX;
}
internal static class Microsoft.Identity.Client.NativeInterop.Platform : object {
    public static string ProcessorArchitecture { get; }
    public static OperatingSystemType OperatingSystem { get; }
    public static string get_ProcessorArchitecture();
    public static OperatingSystemType get_OperatingSystem();
    public static string GetNativeLibraryExtension();
    public static bool IsRunningOnMono();
    public static bool IsRunningOnNetFramework();
    public static bool IsRunningOnNetCore();
    public static string GetExecutingAssemblyDirectory();
}
public class Microsoft.Identity.Client.NativeInterop.PopParams : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <HttpMethod>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <UriHost>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <UriPath>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Nonce>k__BackingField;
    public string HttpMethod { get; public set; }
    public string UriHost { get; public set; }
    public string UriPath { get; public set; }
    public string Nonce { get; public set; }
    [CompilerGeneratedAttribute]
public string get_HttpMethod();
    [CompilerGeneratedAttribute]
public void set_HttpMethod(string value);
    [CompilerGeneratedAttribute]
public string get_UriHost();
    [CompilerGeneratedAttribute]
public void set_UriHost(string value);
    [CompilerGeneratedAttribute]
public string get_UriPath();
    [CompilerGeneratedAttribute]
public void set_UriPath(string value);
    [CompilerGeneratedAttribute]
public string get_Nonce();
    [CompilerGeneratedAttribute]
public void set_Nonce(string value);
    public bool IsEmpty();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Identity.Client.NativeInterop.PropertyCollection : object {
    private Dictionary`2<string, string> _properties;
    private Action`2<string, string> _setter;
    public string Item { get; public set; }
    internal PropertyCollection(Action`2<string, string> setter);
    public void set_Item(string key, string value);
    public string get_Item(string key);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Identity.Client.NativeInterop.PropertyROCollection : object {
    private Dictionary`2<string, string> _properties;
    private Func`2<string, string> _reader;
    public string Item { get; }
    internal PropertyROCollection(Func`2<string, string> reader);
    public string get_Item(string key);
}
public class Microsoft.Identity.Client.NativeInterop.ReadAccountResult : object {
    private MSALRUNTIME_READ_ACCOUNT_RESULT_HANDLE _readAccountResultHandle;
    private Lazy`1<Account> _account;
    private Lazy`1<Error> _error;
    private Lazy`1<string> _telemetryData;
    public bool IsSuccess { get; }
    public Account Account { get; }
    public Error Error { get; }
    public string TelemetryData { get; }
    internal ReadAccountResult(MSALRUNTIME_READ_ACCOUNT_RESULT_HANDLE readAccountResultHandle);
    public bool get_IsSuccess();
    public Account get_Account();
    public Error get_Error();
    public string get_TelemetryData();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private Account <.ctor>b__4_0();
    [CompilerGeneratedAttribute]
private Error <.ctor>b__4_1();
    [CompilerGeneratedAttribute]
private string <.ctor>b__4_2();
}
public enum Microsoft.Identity.Client.NativeInterop.ResponseStatus : Enum {
    public int value__;
    public static ResponseStatus Unexpected;
    public static ResponseStatus Reserved;
    public static ResponseStatus InteractionRequired;
    public static ResponseStatus NoNetwork;
    public static ResponseStatus NetworkTemporarilyUnavailable;
    public static ResponseStatus ServerTemporarilyUnavailable;
    public static ResponseStatus ApiContractViolation;
    public static ResponseStatus UserCanceled;
    public static ResponseStatus ApplicationCanceled;
    public static ResponseStatus IncorrectConfiguration;
    public static ResponseStatus InsufficientBuffer;
    public static ResponseStatus AuthorityUntrusted;
    public static ResponseStatus UserSwitch;
    public static ResponseStatus AccountUnusable;
    public static ResponseStatus UserDataRemovalRequired;
    public static ResponseStatus KeyNotFound;
    public static ResponseStatus AccountNotFound;
}
public class Microsoft.Identity.Client.NativeInterop.SignOutResult : object {
    private MSALRUNTIME_SIGNOUT_RESULT_HANDLE _signOutResultHandle;
    private Lazy`1<Error> _error;
    private Lazy`1<string> _telemetryData;
    public bool IsSuccess { get; }
    public Error Error { get; }
    public string TelemetryData { get; }
    internal SignOutResult(MSALRUNTIME_SIGNOUT_RESULT_HANDLE signOutResultHandle);
    public bool get_IsSuccess();
    public Error get_Error();
    public string get_TelemetryData();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private Error <.ctor>b__3_0();
    [CompilerGeneratedAttribute]
private string <.ctor>b__3_1();
}
