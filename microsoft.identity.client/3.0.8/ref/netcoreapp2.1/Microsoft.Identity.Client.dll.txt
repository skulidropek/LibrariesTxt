public enum Microsoft.Identity.Client.AadAuthorityAudience : Enum {
    public int value__;
    public static AadAuthorityAudience None;
    public static AadAuthorityAudience AzureAdMyOrg;
    public static AadAuthorityAudience AzureAdAndPersonalMicrosoftAccount;
    public static AadAuthorityAudience AzureAdMultipleOrgs;
    public static AadAuthorityAudience PersonalMicrosoftAccount;
}
public abstract class Microsoft.Identity.Client.AbstractAcquireTokenParameterBuilder`1 : object {
    internal AcquireTokenCommonParameters CommonParameters { get; }
    internal ApiTelemetryId ApiTelemetryId { get; }
    [CompilerGeneratedAttribute]
internal AcquireTokenCommonParameters get_CommonParameters();
    public abstract virtual Task`1<AuthenticationResult> ExecuteAsync(CancellationToken cancellationToken);
    internal abstract virtual ApiIds CalculateApiEventId();
    internal abstract virtual ApiTelemetryId get_ApiTelemetryId();
    public Task`1<AuthenticationResult> ExecuteAsync();
    protected T WithScopes(IEnumerable`1<string> scopes);
    public T WithExtraQueryParameters(Dictionary`2<string, string> extraQueryParameters);
    public T WithClaims(string claims);
    public T WithExtraQueryParameters(string extraQueryParameters);
    public T WithAuthority(string authorityUri, bool validateAuthority);
    public T WithAuthority(string cloudInstanceUri, Guid tenantId, bool validateAuthority);
    public T WithAuthority(string cloudInstanceUri, string tenant, bool validateAuthority);
    public T WithAuthority(AzureCloudInstance azureCloudInstance, Guid tenantId, bool validateAuthority);
    public T WithAuthority(AzureCloudInstance azureCloudInstance, string tenant, bool validateAuthority);
    public T WithAuthority(AzureCloudInstance azureCloudInstance, AadAuthorityAudience authorityAudience, bool validateAuthority);
    public T WithAuthority(AadAuthorityAudience authorityAudience, bool validateAuthority);
    public T WithAdfsAuthority(string authorityUri, bool validateAuthority);
    public T WithB2CAuthority(string authorityUri);
    protected virtual void Validate();
    internal void ValidateAndCalculateApiId();
}
public abstract class Microsoft.Identity.Client.AbstractApplicationBuilder`1 : object {
    internal ApplicationConfiguration Config { get; }
    internal AbstractApplicationBuilder`1(ApplicationConfiguration configuration);
    [CompilerGeneratedAttribute]
internal ApplicationConfiguration get_Config();
    public T WithHttpClientFactory(IMsalHttpClientFactory httpClientFactory);
    internal T WithHttpManager(IHttpManager httpManager);
    public T WithLogging(LogCallback loggingCallback, Nullable`1<LogLevel> logLevel, Nullable`1<bool> enablePiiLogging, Nullable`1<bool> enableDefaultPlatformLogging);
    public T WithDebugLoggingCallback(LogLevel logLevel, bool enablePiiLogging, bool withDefaultPlatformLoggingEnabled);
    public T WithTelemetry(TelemetryCallback telemetryCallback);
    public T WithClientId(string clientId);
    public T WithRedirectUri(string redirectUri);
    public T WithTenantId(string tenantId);
    public T WithClientName(string clientName);
    public T WithClientVersion(string clientVersion);
    protected T WithOptions(ApplicationOptions applicationOptions);
    public T WithExtraQueryParameters(IDictionary`2<string, string> extraQueryParameters);
    public T WithExtraQueryParameters(string extraQueryParameters);
    internal T WithMatsTelemetry(MatsConfig matsConfig);
    internal virtual void Validate();
    internal ApplicationConfiguration BuildConfiguration();
    public T WithAuthority(Uri authorityUri, bool validateAuthority);
    public T WithAuthority(string cloudInstanceUri, Guid tenantId, bool validateAuthority);
    public T WithAuthority(string cloudInstanceUri, string tenant, bool validateAuthority);
    public T WithAuthority(AzureCloudInstance azureCloudInstance, Guid tenantId, bool validateAuthority);
    public T WithAuthority(AzureCloudInstance azureCloudInstance, string tenant, bool validateAuthority);
    public T WithAuthority(AzureCloudInstance azureCloudInstance, AadAuthorityAudience authorityAudience, bool validateAuthority);
    public T WithAuthority(AadAuthorityAudience authorityAudience, bool validateAuthority);
    public T WithAuthority(string authorityUri, bool validateAuthority);
    public T WithAdfsAuthority(string authorityUri, bool validateAuthority);
    public T WithB2CAuthority(string authorityUri);
}
public abstract class Microsoft.Identity.Client.AbstractClientAppBaseAcquireTokenParameterBuilder`1 : AbstractAcquireTokenParameterBuilder`1<T> {
    internal IClientApplicationBaseExecutor ClientApplicationBaseExecutor { get; }
    internal AbstractClientAppBaseAcquireTokenParameterBuilder`1(IClientApplicationBaseExecutor clientApplicationBaseExecutor);
    [CompilerGeneratedAttribute]
internal IClientApplicationBaseExecutor get_ClientApplicationBaseExecutor();
    internal abstract virtual Task`1<AuthenticationResult> ExecuteInternalAsync(CancellationToken cancellationToken);
    public virtual Task`1<AuthenticationResult> ExecuteAsync(CancellationToken cancellationToken);
}
public abstract class Microsoft.Identity.Client.AbstractConfidentialClientAcquireTokenParameterBuilder`1 : AbstractAcquireTokenParameterBuilder`1<T> {
    internal IConfidentialClientApplicationExecutor ConfidentialClientApplicationExecutor { get; }
    internal AbstractConfidentialClientAcquireTokenParameterBuilder`1(IConfidentialClientApplicationExecutor confidentialClientApplicationExecutor);
    internal abstract virtual Task`1<AuthenticationResult> ExecuteInternalAsync(CancellationToken cancellationToken);
    public virtual Task`1<AuthenticationResult> ExecuteAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal IConfidentialClientApplicationExecutor get_ConfidentialClientApplicationExecutor();
}
public abstract class Microsoft.Identity.Client.AbstractPublicClientAcquireTokenParameterBuilder`1 : AbstractAcquireTokenParameterBuilder`1<T> {
    internal IPublicClientApplicationExecutor PublicClientApplicationExecutor { get; }
    internal AbstractPublicClientAcquireTokenParameterBuilder`1(IPublicClientApplicationExecutor publicClientApplicationExecutor);
    internal abstract virtual Task`1<AuthenticationResult> ExecuteInternalAsync(CancellationToken cancellationToken);
    public virtual Task`1<AuthenticationResult> ExecuteAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
internal IPublicClientApplicationExecutor get_PublicClientApplicationExecutor();
}
internal class Microsoft.Identity.Client.Account : object {
    public string Username { get; internal set; }
    public string Environment { get; internal set; }
    public AccountId HomeAccountId { get; internal set; }
    public Account(string homeAccountId, string username, string environment);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Username();
    [CompilerGeneratedAttribute]
internal void set_Username(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Environment();
    [CompilerGeneratedAttribute]
internal void set_Environment(string value);
    [CompilerGeneratedAttribute]
public sealed virtual AccountId get_HomeAccountId();
    [CompilerGeneratedAttribute]
internal void set_HomeAccountId(AccountId value);
    public virtual string ToString();
}
public class Microsoft.Identity.Client.AccountId : object {
    public string Identifier { get; }
    public string ObjectId { get; }
    public string TenantId { get; }
    public AccountId(string identifier, string objectId, string tenantId);
    [CompilerGeneratedAttribute]
public string get_Identifier();
    [CompilerGeneratedAttribute]
public string get_ObjectId();
    [CompilerGeneratedAttribute]
public string get_TenantId();
    internal static AccountId ParseFromString(string str);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class Microsoft.Identity.Client.AcquireTokenByAuthorizationCodeParameterBuilder : AbstractConfidentialClientAcquireTokenParameterBuilder`1<AcquireTokenByAuthorizationCodeParameterBuilder> {
    internal ApiTelemetryId ApiTelemetryId { get; }
    internal AcquireTokenByAuthorizationCodeParameterBuilder(IConfidentialClientApplicationExecutor confidentialClientApplicationExecutor);
    internal virtual ApiTelemetryId get_ApiTelemetryId();
    internal static AcquireTokenByAuthorizationCodeParameterBuilder Create(IConfidentialClientApplicationExecutor confidentialClientApplicationExecutor, IEnumerable`1<string> scopes, string authorizationCode);
    internal virtual ApiIds CalculateApiEventId();
    protected virtual void Validate();
    internal virtual Task`1<AuthenticationResult> ExecuteInternalAsync(CancellationToken cancellationToken);
}
public class Microsoft.Identity.Client.AcquireTokenByIntegratedWindowsAuthParameterBuilder : AbstractPublicClientAcquireTokenParameterBuilder`1<AcquireTokenByIntegratedWindowsAuthParameterBuilder> {
    internal ApiTelemetryId ApiTelemetryId { get; }
    internal AcquireTokenByIntegratedWindowsAuthParameterBuilder(IPublicClientApplicationExecutor publicClientApplicationExecutor);
    internal virtual ApiTelemetryId get_ApiTelemetryId();
    internal static AcquireTokenByIntegratedWindowsAuthParameterBuilder Create(IPublicClientApplicationExecutor publicClientApplicationExecutor, IEnumerable`1<string> scopes);
    public AcquireTokenByIntegratedWindowsAuthParameterBuilder WithUsername(string username);
    internal virtual Task`1<AuthenticationResult> ExecuteInternalAsync(CancellationToken cancellationToken);
    internal virtual ApiIds CalculateApiEventId();
}
public class Microsoft.Identity.Client.AcquireTokenByRefreshTokenParameterBuilder : AbstractClientAppBaseAcquireTokenParameterBuilder`1<AcquireTokenByRefreshTokenParameterBuilder> {
    internal ApiTelemetryId ApiTelemetryId { get; }
    internal AcquireTokenByRefreshTokenParameterBuilder(IClientApplicationBaseExecutor clientApplicationBaseExecutor);
    internal virtual ApiTelemetryId get_ApiTelemetryId();
    internal static AcquireTokenByRefreshTokenParameterBuilder Create(IClientApplicationBaseExecutor clientApplicationBaseExecutor, IEnumerable`1<string> scopes, string refreshToken);
    internal AcquireTokenByRefreshTokenParameterBuilder WithRefreshToken(string refreshToken);
    internal virtual Task`1<AuthenticationResult> ExecuteInternalAsync(CancellationToken cancellationToken);
    internal virtual ApiIds CalculateApiEventId();
}
public class Microsoft.Identity.Client.AcquireTokenByUsernamePasswordParameterBuilder : AbstractPublicClientAcquireTokenParameterBuilder`1<AcquireTokenByUsernamePasswordParameterBuilder> {
    internal ApiTelemetryId ApiTelemetryId { get; }
    internal AcquireTokenByUsernamePasswordParameterBuilder(IPublicClientApplicationExecutor publicClientApplicationExecutor);
    internal virtual ApiTelemetryId get_ApiTelemetryId();
    internal static AcquireTokenByUsernamePasswordParameterBuilder Create(IPublicClientApplicationExecutor publicClientApplicationExecutor, IEnumerable`1<string> scopes, string username, SecureString password);
    internal virtual Task`1<AuthenticationResult> ExecuteInternalAsync(CancellationToken cancellationToken);
    internal virtual ApiIds CalculateApiEventId();
}
public class Microsoft.Identity.Client.AcquireTokenForClientParameterBuilder : AbstractConfidentialClientAcquireTokenParameterBuilder`1<AcquireTokenForClientParameterBuilder> {
    internal ApiTelemetryId ApiTelemetryId { get; }
    internal AcquireTokenForClientParameterBuilder(IConfidentialClientApplicationExecutor confidentialClientApplicationExecutor);
    internal virtual ApiTelemetryId get_ApiTelemetryId();
    internal static AcquireTokenForClientParameterBuilder Create(IConfidentialClientApplicationExecutor confidentialClientApplicationExecutor, IEnumerable`1<string> scopes);
    public AcquireTokenForClientParameterBuilder WithForceRefresh(bool forceRefresh);
    public AcquireTokenForClientParameterBuilder WithSendX5C(bool withSendX5C);
    internal virtual Task`1<AuthenticationResult> ExecuteInternalAsync(CancellationToken cancellationToken);
    internal virtual ApiIds CalculateApiEventId();
}
public class Microsoft.Identity.Client.AcquireTokenInteractiveParameterBuilder : AbstractPublicClientAcquireTokenParameterBuilder`1<AcquireTokenInteractiveParameterBuilder> {
    internal ApiTelemetryId ApiTelemetryId { get; }
    internal AcquireTokenInteractiveParameterBuilder(IPublicClientApplicationExecutor publicClientApplicationExecutor);
    internal virtual ApiTelemetryId get_ApiTelemetryId();
    internal void SetCustomWebUi(ICustomWebUi customWebUi);
    internal static AcquireTokenInteractiveParameterBuilder Create(IPublicClientApplicationExecutor publicClientApplicationExecutor, IEnumerable`1<string> scopes);
    internal AcquireTokenInteractiveParameterBuilder WithCurrentSynchronizationContext();
    public AcquireTokenInteractiveParameterBuilder WithUseEmbeddedWebView(bool useEmbeddedWebView);
    public AcquireTokenInteractiveParameterBuilder WithLoginHint(string loginHint);
    public AcquireTokenInteractiveParameterBuilder WithAccount(IAccount account);
    public AcquireTokenInteractiveParameterBuilder WithExtraScopesToConsent(IEnumerable`1<string> extraScopesToConsent);
    public AcquireTokenInteractiveParameterBuilder WithPrompt(Prompt prompt);
    protected virtual void Validate();
    internal virtual Task`1<AuthenticationResult> ExecuteInternalAsync(CancellationToken cancellationToken);
    internal virtual ApiIds CalculateApiEventId();
}
public class Microsoft.Identity.Client.AcquireTokenOnBehalfOfParameterBuilder : AbstractConfidentialClientAcquireTokenParameterBuilder`1<AcquireTokenOnBehalfOfParameterBuilder> {
    internal ApiTelemetryId ApiTelemetryId { get; }
    internal AcquireTokenOnBehalfOfParameterBuilder(IConfidentialClientApplicationExecutor confidentialClientApplicationExecutor);
    internal virtual ApiTelemetryId get_ApiTelemetryId();
    internal static AcquireTokenOnBehalfOfParameterBuilder Create(IConfidentialClientApplicationExecutor confidentialClientApplicationExecutor, IEnumerable`1<string> scopes, UserAssertion userAssertion);
    public AcquireTokenOnBehalfOfParameterBuilder WithSendX5C(bool withSendX5C);
    internal virtual Task`1<AuthenticationResult> ExecuteInternalAsync(CancellationToken cancellationToken);
    internal virtual ApiIds CalculateApiEventId();
}
public class Microsoft.Identity.Client.AcquireTokenSilentParameterBuilder : AbstractClientAppBaseAcquireTokenParameterBuilder`1<AcquireTokenSilentParameterBuilder> {
    internal ApiTelemetryId ApiTelemetryId { get; }
    internal AcquireTokenSilentParameterBuilder(IClientApplicationBaseExecutor clientApplicationBaseExecutor);
    internal static AcquireTokenSilentParameterBuilder Create(IClientApplicationBaseExecutor clientApplicationBaseExecutor, IEnumerable`1<string> scopes, IAccount account);
    internal static AcquireTokenSilentParameterBuilder Create(IClientApplicationBaseExecutor clientApplicationBaseExecutor, IEnumerable`1<string> scopes, string loginHint);
    public AcquireTokenSilentParameterBuilder WithForceRefresh(bool forceRefresh);
    internal virtual Task`1<AuthenticationResult> ExecuteInternalAsync(CancellationToken cancellationToken);
    internal virtual ApiIds CalculateApiEventId();
    internal virtual ApiTelemetryId get_ApiTelemetryId();
    protected virtual void Validate();
}
public class Microsoft.Identity.Client.AcquireTokenWithDeviceCodeParameterBuilder : AbstractPublicClientAcquireTokenParameterBuilder`1<AcquireTokenWithDeviceCodeParameterBuilder> {
    internal ApiTelemetryId ApiTelemetryId { get; }
    internal AcquireTokenWithDeviceCodeParameterBuilder(IPublicClientApplicationExecutor publicClientApplicationExecutor);
    internal virtual ApiTelemetryId get_ApiTelemetryId();
    internal static AcquireTokenWithDeviceCodeParameterBuilder Create(IPublicClientApplicationExecutor publicClientApplicationExecutor, IEnumerable`1<string> scopes, Func`2<DeviceCodeResult, Task> deviceCodeResultCallback);
    public AcquireTokenWithDeviceCodeParameterBuilder WithDeviceCodeResultCallback(Func`2<DeviceCodeResult, Task> deviceCodeResultCallback);
    internal virtual Task`1<AuthenticationResult> ExecuteInternalAsync(CancellationToken cancellationToken);
    internal virtual ApiIds CalculateApiEventId();
    protected virtual void Validate();
}
internal abstract class Microsoft.Identity.Client.ApiConfig.Executors.AbstractExecutor : object {
    protected IServiceBundle ServiceBundle { get; }
    protected AbstractExecutor(IServiceBundle serviceBundle, ClientApplicationBase clientApplicationBase);
    [CompilerGeneratedAttribute]
protected IServiceBundle get_ServiceBundle();
    protected RequestContext CreateRequestContextAndLogVersionInfo(Guid telemetryCorrelationId);
}
internal abstract class Microsoft.Identity.Client.ApiConfig.Executors.AbstractMatsExecutor : object {
    protected AbstractMatsExecutor(IMatsTelemetryClient mats);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.ApiConfig.Executors.AbstractMatsExecutor/<ExecuteMatsAsync>d__2")]
protected Task`1<AuthenticationResult> ExecuteMatsAsync(AcquireTokenCommonParameters commonParameters, Func`1<Task`1<AuthenticationResult>> executorAction);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.ApiConfig.Executors.AbstractMatsExecutor/<ExecuteMatsToUriAsync>d__3")]
protected Task`1<Uri> ExecuteMatsToUriAsync(AcquireTokenCommonParameters commonParameters, Func`1<Task`1<Uri>> executorAction);
}
internal class Microsoft.Identity.Client.ApiConfig.Executors.ClientApplicationBaseExecutor : AbstractExecutor {
    public ClientApplicationBaseExecutor(IServiceBundle serviceBundle, ClientApplicationBase clientApplicationBase);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.ApiConfig.Executors.ClientApplicationBaseExecutor/<ExecuteAsync>d__2")]
public sealed virtual Task`1<AuthenticationResult> ExecuteAsync(AcquireTokenCommonParameters commonParameters, AcquireTokenSilentParameters silentParameters, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.ApiConfig.Executors.ClientApplicationBaseExecutor/<ExecuteAsync>d__3")]
public sealed virtual Task`1<AuthenticationResult> ExecuteAsync(AcquireTokenCommonParameters commonParameters, AcquireTokenByRefreshTokenParameters refreshTokenParameters, CancellationToken cancellationToken);
}
internal static class Microsoft.Identity.Client.ApiConfig.Executors.ClientExecutorFactory : object {
    public static IPublicClientApplicationExecutor CreatePublicClientExecutor(PublicClientApplication publicClientApplication);
    public static IConfidentialClientApplicationExecutor CreateConfidentialClientExecutor(ConfidentialClientApplication confidentialClientApplication);
    public static IClientApplicationBaseExecutor CreateClientApplicationBaseExecutor(ClientApplicationBase clientApplicationBase);
}
internal class Microsoft.Identity.Client.ApiConfig.Executors.ConfidentialClientExecutor : AbstractExecutor {
    public ConfidentialClientExecutor(IServiceBundle serviceBundle, ConfidentialClientApplication confidentialClientApplication);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.ApiConfig.Executors.ConfidentialClientExecutor/<ExecuteAsync>d__2")]
public sealed virtual Task`1<AuthenticationResult> ExecuteAsync(AcquireTokenCommonParameters commonParameters, AcquireTokenByAuthorizationCodeParameters authorizationCodeParameters, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.ApiConfig.Executors.ConfidentialClientExecutor/<ExecuteAsync>d__3")]
public sealed virtual Task`1<AuthenticationResult> ExecuteAsync(AcquireTokenCommonParameters commonParameters, AcquireTokenForClientParameters clientParameters, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.ApiConfig.Executors.ConfidentialClientExecutor/<ExecuteAsync>d__4")]
public sealed virtual Task`1<AuthenticationResult> ExecuteAsync(AcquireTokenCommonParameters commonParameters, AcquireTokenOnBehalfOfParameters onBehalfOfParameters, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.ApiConfig.Executors.ConfidentialClientExecutor/<ExecuteAsync>d__5")]
public sealed virtual Task`1<Uri> ExecuteAsync(AcquireTokenCommonParameters commonParameters, GetAuthorizationRequestUrlParameters authorizationRequestUrlParameters, CancellationToken cancellationToken);
}
internal interface Microsoft.Identity.Client.ApiConfig.Executors.IClientApplicationBaseExecutor {
    public abstract virtual Task`1<AuthenticationResult> ExecuteAsync(AcquireTokenCommonParameters commonParameters, AcquireTokenSilentParameters silentParameters, CancellationToken cancellationToken);
    public abstract virtual Task`1<AuthenticationResult> ExecuteAsync(AcquireTokenCommonParameters commonParameters, AcquireTokenByRefreshTokenParameters byRefreshTokenParameters, CancellationToken cancellationToken);
}
internal interface Microsoft.Identity.Client.ApiConfig.Executors.IConfidentialClientApplicationExecutor {
    public abstract virtual Task`1<AuthenticationResult> ExecuteAsync(AcquireTokenCommonParameters commonParameters, AcquireTokenByAuthorizationCodeParameters authorizationCodeParameters, CancellationToken cancellationToken);
    public abstract virtual Task`1<AuthenticationResult> ExecuteAsync(AcquireTokenCommonParameters commonParameters, AcquireTokenForClientParameters clientParameters, CancellationToken cancellationToken);
    public abstract virtual Task`1<AuthenticationResult> ExecuteAsync(AcquireTokenCommonParameters commonParameters, AcquireTokenOnBehalfOfParameters onBehalfOfParameters, CancellationToken cancellationToken);
    public abstract virtual Task`1<Uri> ExecuteAsync(AcquireTokenCommonParameters commonParameters, GetAuthorizationRequestUrlParameters authorizationRequestUrlParameters, CancellationToken cancellationToken);
}
internal interface Microsoft.Identity.Client.ApiConfig.Executors.IPublicClientApplicationExecutor {
    public abstract virtual Task`1<AuthenticationResult> ExecuteAsync(AcquireTokenCommonParameters commonParameters, AcquireTokenInteractiveParameters interactiveParameters, CancellationToken cancellationToken);
    public abstract virtual Task`1<AuthenticationResult> ExecuteAsync(AcquireTokenCommonParameters commonParameters, AcquireTokenWithDeviceCodeParameters withDeviceCodeParameters, CancellationToken cancellationToken);
    public abstract virtual Task`1<AuthenticationResult> ExecuteAsync(AcquireTokenCommonParameters commonParameters, AcquireTokenByIntegratedWindowsAuthParameters integratedWindowsAuthParameters, CancellationToken cancellationToken);
    public abstract virtual Task`1<AuthenticationResult> ExecuteAsync(AcquireTokenCommonParameters commonParameters, AcquireTokenByUsernamePasswordParameters usernamePasswordParameters, CancellationToken cancellationToken);
}
internal class Microsoft.Identity.Client.ApiConfig.Executors.MatsClientApplicationBaseExecutor : AbstractMatsExecutor {
    public MatsClientApplicationBaseExecutor(IClientApplicationBaseExecutor executor, IMatsTelemetryClient mats);
    public sealed virtual Task`1<AuthenticationResult> ExecuteAsync(AcquireTokenCommonParameters commonParameters, AcquireTokenSilentParameters silentParameters, CancellationToken cancellationToken);
    public sealed virtual Task`1<AuthenticationResult> ExecuteAsync(AcquireTokenCommonParameters commonParameters, AcquireTokenByRefreshTokenParameters byRefreshTokenParameters, CancellationToken cancellationToken);
}
internal class Microsoft.Identity.Client.ApiConfig.Executors.MatsConfidentialClientExecutor : AbstractMatsExecutor {
    public MatsConfidentialClientExecutor(IConfidentialClientApplicationExecutor executor, IMatsTelemetryClient mats);
    public sealed virtual Task`1<AuthenticationResult> ExecuteAsync(AcquireTokenCommonParameters commonParameters, AcquireTokenByAuthorizationCodeParameters authorizationCodeParameters, CancellationToken cancellationToken);
    public sealed virtual Task`1<AuthenticationResult> ExecuteAsync(AcquireTokenCommonParameters commonParameters, AcquireTokenForClientParameters clientParameters, CancellationToken cancellationToken);
    public sealed virtual Task`1<AuthenticationResult> ExecuteAsync(AcquireTokenCommonParameters commonParameters, AcquireTokenOnBehalfOfParameters onBehalfOfParameters, CancellationToken cancellationToken);
    public sealed virtual Task`1<Uri> ExecuteAsync(AcquireTokenCommonParameters commonParameters, GetAuthorizationRequestUrlParameters authorizationRequestUrlParameters, CancellationToken cancellationToken);
}
internal class Microsoft.Identity.Client.ApiConfig.Executors.MatsPublicClientExecutor : AbstractMatsExecutor {
    public MatsPublicClientExecutor(IPublicClientApplicationExecutor executor, IMatsTelemetryClient mats);
    public sealed virtual Task`1<AuthenticationResult> ExecuteAsync(AcquireTokenCommonParameters commonParameters, AcquireTokenInteractiveParameters interactiveParameters, CancellationToken cancellationToken);
    public sealed virtual Task`1<AuthenticationResult> ExecuteAsync(AcquireTokenCommonParameters commonParameters, AcquireTokenWithDeviceCodeParameters withDeviceCodeParameters, CancellationToken cancellationToken);
    public sealed virtual Task`1<AuthenticationResult> ExecuteAsync(AcquireTokenCommonParameters commonParameters, AcquireTokenByIntegratedWindowsAuthParameters integratedWindowsAuthParameters, CancellationToken cancellationToken);
    public sealed virtual Task`1<AuthenticationResult> ExecuteAsync(AcquireTokenCommonParameters commonParameters, AcquireTokenByUsernamePasswordParameters usernamePasswordParameters, CancellationToken cancellationToken);
}
internal class Microsoft.Identity.Client.ApiConfig.Executors.PublicClientExecutor : AbstractExecutor {
    public PublicClientExecutor(IServiceBundle serviceBundle, PublicClientApplication publicClientApplication);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.ApiConfig.Executors.PublicClientExecutor/<ExecuteAsync>d__2")]
public sealed virtual Task`1<AuthenticationResult> ExecuteAsync(AcquireTokenCommonParameters commonParameters, AcquireTokenInteractiveParameters interactiveParameters, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.ApiConfig.Executors.PublicClientExecutor/<ExecuteAsync>d__3")]
public sealed virtual Task`1<AuthenticationResult> ExecuteAsync(AcquireTokenCommonParameters commonParameters, AcquireTokenWithDeviceCodeParameters deviceCodeParameters, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.ApiConfig.Executors.PublicClientExecutor/<ExecuteAsync>d__4")]
public sealed virtual Task`1<AuthenticationResult> ExecuteAsync(AcquireTokenCommonParameters commonParameters, AcquireTokenByIntegratedWindowsAuthParameters integratedWindowsAuthParameters, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.ApiConfig.Executors.PublicClientExecutor/<ExecuteAsync>d__5")]
public sealed virtual Task`1<AuthenticationResult> ExecuteAsync(AcquireTokenCommonParameters commonParameters, AcquireTokenByUsernamePasswordParameters usernamePasswordParameters, CancellationToken cancellationToken);
}
internal abstract class Microsoft.Identity.Client.ApiConfig.Parameters.AbstractAcquireTokenByUsernameParameters : object {
    public string Username { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
}
internal class Microsoft.Identity.Client.ApiConfig.Parameters.AcquireTokenByAuthorizationCodeParameters : object {
    public string AuthorizationCode { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AuthorizationCode();
    [CompilerGeneratedAttribute]
public void set_AuthorizationCode(string value);
    public sealed virtual void LogParameters(ICoreLogger logger);
}
internal class Microsoft.Identity.Client.ApiConfig.Parameters.AcquireTokenByIntegratedWindowsAuthParameters : AbstractAcquireTokenByUsernameParameters {
    public sealed virtual void LogParameters(ICoreLogger logger);
}
internal class Microsoft.Identity.Client.ApiConfig.Parameters.AcquireTokenByRefreshTokenParameters : object {
    public string RefreshToken { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RefreshToken();
    [CompilerGeneratedAttribute]
public void set_RefreshToken(string value);
    public sealed virtual void LogParameters(ICoreLogger logger);
}
internal class Microsoft.Identity.Client.ApiConfig.Parameters.AcquireTokenByUsernamePasswordParameters : AbstractAcquireTokenByUsernameParameters {
    public SecureString Password { get; public set; }
    [CompilerGeneratedAttribute]
public SecureString get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(SecureString value);
    public sealed virtual void LogParameters(ICoreLogger logger);
}
internal class Microsoft.Identity.Client.ApiConfig.Parameters.AcquireTokenCommonParameters : object {
    public ApiIds ApiId { get; public set; }
    public Guid TelemetryCorrelationId { get; public set; }
    public IEnumerable`1<string> Scopes { get; public set; }
    public IDictionary`2<string, string> ExtraQueryParameters { get; public set; }
    public string Claims { get; public set; }
    public AuthorityInfo AuthorityOverride { get; public set; }
    public ApiTelemetryId ApiTelemId { get; public set; }
    [CompilerGeneratedAttribute]
public ApiIds get_ApiId();
    [CompilerGeneratedAttribute]
public void set_ApiId(ApiIds value);
    [CompilerGeneratedAttribute]
public Guid get_TelemetryCorrelationId();
    [CompilerGeneratedAttribute]
public void set_TelemetryCorrelationId(Guid value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Scopes();
    [CompilerGeneratedAttribute]
public void set_Scopes(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ExtraQueryParameters();
    [CompilerGeneratedAttribute]
public void set_ExtraQueryParameters(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public string get_Claims();
    [CompilerGeneratedAttribute]
public void set_Claims(string value);
    [CompilerGeneratedAttribute]
public AuthorityInfo get_AuthorityOverride();
    [CompilerGeneratedAttribute]
public void set_AuthorityOverride(AuthorityInfo value);
    [CompilerGeneratedAttribute]
public ApiTelemetryId get_ApiTelemId();
    [CompilerGeneratedAttribute]
public void set_ApiTelemId(ApiTelemetryId value);
    public void AddApiTelemetryFeature(ApiTelemetryFeature feature);
    public IEnumerable`1<KeyValuePair`2<string, string>> GetApiTelemetryFeatures();
}
internal class Microsoft.Identity.Client.ApiConfig.Parameters.AcquireTokenForClientParameters : object {
    public bool ForceRefresh { get; public set; }
    public bool SendX5C { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ForceRefresh();
    [CompilerGeneratedAttribute]
public void set_ForceRefresh(bool value);
    [CompilerGeneratedAttribute]
public bool get_SendX5C();
    [CompilerGeneratedAttribute]
public void set_SendX5C(bool value);
    public sealed virtual void LogParameters(ICoreLogger logger);
}
internal class Microsoft.Identity.Client.ApiConfig.Parameters.AcquireTokenInteractiveParameters : object {
    public Prompt Prompt { get; public set; }
    public CoreUIParent UiParent { get; }
    public IEnumerable`1<string> ExtraScopesToConsent { get; public set; }
    public bool UseEmbeddedWebView { get; public set; }
    public string LoginHint { get; public set; }
    public IAccount Account { get; public set; }
    public ICustomWebUi CustomWebUi { get; public set; }
    [CompilerGeneratedAttribute]
public Prompt get_Prompt();
    [CompilerGeneratedAttribute]
public void set_Prompt(Prompt value);
    [CompilerGeneratedAttribute]
public CoreUIParent get_UiParent();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ExtraScopesToConsent();
    [CompilerGeneratedAttribute]
public void set_ExtraScopesToConsent(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_UseEmbeddedWebView();
    [CompilerGeneratedAttribute]
public void set_UseEmbeddedWebView(bool value);
    [CompilerGeneratedAttribute]
public string get_LoginHint();
    [CompilerGeneratedAttribute]
public void set_LoginHint(string value);
    [CompilerGeneratedAttribute]
public IAccount get_Account();
    [CompilerGeneratedAttribute]
public void set_Account(IAccount value);
    [CompilerGeneratedAttribute]
public ICustomWebUi get_CustomWebUi();
    [CompilerGeneratedAttribute]
public void set_CustomWebUi(ICustomWebUi value);
    public sealed virtual void LogParameters(ICoreLogger logger);
}
internal class Microsoft.Identity.Client.ApiConfig.Parameters.AcquireTokenOnBehalfOfParameters : object {
    public UserAssertion UserAssertion { get; public set; }
    public bool SendX5C { get; public set; }
    [CompilerGeneratedAttribute]
public UserAssertion get_UserAssertion();
    [CompilerGeneratedAttribute]
public void set_UserAssertion(UserAssertion value);
    [CompilerGeneratedAttribute]
public bool get_SendX5C();
    [CompilerGeneratedAttribute]
public void set_SendX5C(bool value);
    public sealed virtual void LogParameters(ICoreLogger logger);
}
internal class Microsoft.Identity.Client.ApiConfig.Parameters.AcquireTokenSilentParameters : object {
    public bool ForceRefresh { get; public set; }
    public string LoginHint { get; public set; }
    public IAccount Account { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ForceRefresh();
    [CompilerGeneratedAttribute]
public void set_ForceRefresh(bool value);
    [CompilerGeneratedAttribute]
public string get_LoginHint();
    [CompilerGeneratedAttribute]
public void set_LoginHint(string value);
    [CompilerGeneratedAttribute]
public IAccount get_Account();
    [CompilerGeneratedAttribute]
public void set_Account(IAccount value);
    public sealed virtual void LogParameters(ICoreLogger logger);
}
internal class Microsoft.Identity.Client.ApiConfig.Parameters.AcquireTokenWithDeviceCodeParameters : object {
    public Func`2<DeviceCodeResult, Task> DeviceCodeResultCallback { get; public set; }
    [CompilerGeneratedAttribute]
public Func`2<DeviceCodeResult, Task> get_DeviceCodeResultCallback();
    [CompilerGeneratedAttribute]
public void set_DeviceCodeResultCallback(Func`2<DeviceCodeResult, Task> value);
    public sealed virtual void LogParameters(ICoreLogger logger);
}
internal class Microsoft.Identity.Client.ApiConfig.Parameters.GetAuthorizationRequestUrlParameters : object {
    public string RedirectUri { get; public set; }
    public IAccount Account { get; public set; }
    public IEnumerable`1<string> ExtraScopesToConsent { get; public set; }
    public string LoginHint { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RedirectUri();
    [CompilerGeneratedAttribute]
public void set_RedirectUri(string value);
    [CompilerGeneratedAttribute]
public IAccount get_Account();
    [CompilerGeneratedAttribute]
public void set_Account(IAccount value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ExtraScopesToConsent();
    [CompilerGeneratedAttribute]
public void set_ExtraScopesToConsent(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_LoginHint();
    [CompilerGeneratedAttribute]
public void set_LoginHint(string value);
    public AcquireTokenInteractiveParameters ToInteractiveParameters();
    public sealed virtual void LogParameters(ICoreLogger logger);
}
internal interface Microsoft.Identity.Client.ApiConfig.Parameters.IAcquireTokenParameters {
    public abstract virtual void LogParameters(ICoreLogger logger);
}
internal class Microsoft.Identity.Client.ApplicationConfiguration : object {
    public string ClientName { get; internal set; }
    public string ClientVersion { get; internal set; }
    public bool UseCorporateNetwork { get; internal set; }
    public string IosKeychainSecurityGroup { get; internal set; }
    public bool IsBrokerEnabled { get; internal set; }
    public IMatsConfig MatsConfig { get; internal set; }
    public IHttpManager HttpManager { get; internal set; }
    public AuthorityInfo AuthorityInfo { get; internal set; }
    public string ClientId { get; internal set; }
    public string TenantId { get; internal set; }
    public string RedirectUri { get; internal set; }
    public bool EnablePiiLogging { get; internal set; }
    public LogLevel LogLevel { get; internal set; }
    public bool IsDefaultPlatformLoggingEnabled { get; internal set; }
    public IMsalHttpClientFactory HttpClientFactory { get; internal set; }
    public bool IsExtendedTokenLifetimeEnabled { get; public set; }
    public TelemetryCallback TelemetryCallback { get; internal set; }
    public LogCallback LoggingCallback { get; internal set; }
    public string Component { get; internal set; }
    public IDictionary`2<string, string> ExtraQueryParameters { get; internal set; }
    internal ILegacyCachePersistence UserTokenLegacyCachePersistenceForTest { get; internal set; }
    internal ILegacyCachePersistence AppTokenLegacyCachePersistenceForTest { get; internal set; }
    public ClientCredentialWrapper ClientCredential { get; internal set; }
    public string ClientSecret { get; internal set; }
    public X509Certificate2 ClientCredentialCertificate { get; internal set; }
    internal AadAuthorityAudience AadAuthorityAudience { get; internal set; }
    internal AzureCloudInstance AzureCloudInstance { get; internal set; }
    internal string Instance { get; internal set; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClientName();
    [CompilerGeneratedAttribute]
internal void set_ClientName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClientVersion();
    [CompilerGeneratedAttribute]
internal void set_ClientVersion(string value);
    [CompilerGeneratedAttribute]
public bool get_UseCorporateNetwork();
    [CompilerGeneratedAttribute]
internal void set_UseCorporateNetwork(bool value);
    [CompilerGeneratedAttribute]
public string get_IosKeychainSecurityGroup();
    [CompilerGeneratedAttribute]
internal void set_IosKeychainSecurityGroup(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsBrokerEnabled();
    [CompilerGeneratedAttribute]
internal void set_IsBrokerEnabled(bool value);
    [CompilerGeneratedAttribute]
public IMatsConfig get_MatsConfig();
    [CompilerGeneratedAttribute]
internal void set_MatsConfig(IMatsConfig value);
    [CompilerGeneratedAttribute]
public IHttpManager get_HttpManager();
    [CompilerGeneratedAttribute]
internal void set_HttpManager(IHttpManager value);
    [CompilerGeneratedAttribute]
public sealed virtual AuthorityInfo get_AuthorityInfo();
    [CompilerGeneratedAttribute]
internal void set_AuthorityInfo(AuthorityInfo value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClientId();
    [CompilerGeneratedAttribute]
internal void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_TenantId();
    [CompilerGeneratedAttribute]
internal void set_TenantId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RedirectUri();
    [CompilerGeneratedAttribute]
internal void set_RedirectUri(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EnablePiiLogging();
    [CompilerGeneratedAttribute]
internal void set_EnablePiiLogging(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual LogLevel get_LogLevel();
    [CompilerGeneratedAttribute]
internal void set_LogLevel(LogLevel value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsDefaultPlatformLoggingEnabled();
    [CompilerGeneratedAttribute]
internal void set_IsDefaultPlatformLoggingEnabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual IMsalHttpClientFactory get_HttpClientFactory();
    [CompilerGeneratedAttribute]
internal void set_HttpClientFactory(IMsalHttpClientFactory value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsExtendedTokenLifetimeEnabled();
    [CompilerGeneratedAttribute]
public void set_IsExtendedTokenLifetimeEnabled(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual TelemetryCallback get_TelemetryCallback();
    [CompilerGeneratedAttribute]
internal void set_TelemetryCallback(TelemetryCallback value);
    [CompilerGeneratedAttribute]
public sealed virtual LogCallback get_LoggingCallback();
    [CompilerGeneratedAttribute]
internal void set_LoggingCallback(LogCallback value);
    [CompilerGeneratedAttribute]
public string get_Component();
    [CompilerGeneratedAttribute]
internal void set_Component(string value);
    [CompilerGeneratedAttribute]
public sealed virtual IDictionary`2<string, string> get_ExtraQueryParameters();
    [CompilerGeneratedAttribute]
internal void set_ExtraQueryParameters(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
internal ILegacyCachePersistence get_UserTokenLegacyCachePersistenceForTest();
    [CompilerGeneratedAttribute]
internal void set_UserTokenLegacyCachePersistenceForTest(ILegacyCachePersistence value);
    [CompilerGeneratedAttribute]
internal ILegacyCachePersistence get_AppTokenLegacyCachePersistenceForTest();
    [CompilerGeneratedAttribute]
internal void set_AppTokenLegacyCachePersistenceForTest(ILegacyCachePersistence value);
    [CompilerGeneratedAttribute]
public sealed virtual ClientCredentialWrapper get_ClientCredential();
    [CompilerGeneratedAttribute]
internal void set_ClientCredential(ClientCredentialWrapper value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClientSecret();
    [CompilerGeneratedAttribute]
internal void set_ClientSecret(string value);
    [CompilerGeneratedAttribute]
public sealed virtual X509Certificate2 get_ClientCredentialCertificate();
    [CompilerGeneratedAttribute]
internal void set_ClientCredentialCertificate(X509Certificate2 value);
    [CompilerGeneratedAttribute]
internal AadAuthorityAudience get_AadAuthorityAudience();
    [CompilerGeneratedAttribute]
internal void set_AadAuthorityAudience(AadAuthorityAudience value);
    [CompilerGeneratedAttribute]
internal AzureCloudInstance get_AzureCloudInstance();
    [CompilerGeneratedAttribute]
internal void set_AzureCloudInstance(AzureCloudInstance value);
    [CompilerGeneratedAttribute]
internal string get_Instance();
    [CompilerGeneratedAttribute]
internal void set_Instance(string value);
}
public abstract class Microsoft.Identity.Client.ApplicationOptions : object {
    public string ClientId { get; public set; }
    public string TenantId { get; public set; }
    public AadAuthorityAudience AadAuthorityAudience { get; public set; }
    public string Instance { get; public set; }
    public AzureCloudInstance AzureCloudInstance { get; public set; }
    public string RedirectUri { get; public set; }
    public LogLevel LogLevel { get; public set; }
    public bool EnablePiiLogging { get; public set; }
    public bool IsDefaultPlatformLoggingEnabled { get; public set; }
    [ObsoleteAttribute("Should use ClientName and ClientVersion properties instead of Component", "True")]
public string Component { get; public set; }
    public string ClientName { get; public set; }
    public string ClientVersion { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_TenantId();
    [CompilerGeneratedAttribute]
public void set_TenantId(string value);
    [CompilerGeneratedAttribute]
public AadAuthorityAudience get_AadAuthorityAudience();
    [CompilerGeneratedAttribute]
public void set_AadAuthorityAudience(AadAuthorityAudience value);
    [CompilerGeneratedAttribute]
public string get_Instance();
    [CompilerGeneratedAttribute]
public void set_Instance(string value);
    [CompilerGeneratedAttribute]
public AzureCloudInstance get_AzureCloudInstance();
    [CompilerGeneratedAttribute]
public void set_AzureCloudInstance(AzureCloudInstance value);
    [CompilerGeneratedAttribute]
public string get_RedirectUri();
    [CompilerGeneratedAttribute]
public void set_RedirectUri(string value);
    [CompilerGeneratedAttribute]
public LogLevel get_LogLevel();
    [CompilerGeneratedAttribute]
public void set_LogLevel(LogLevel value);
    [CompilerGeneratedAttribute]
public bool get_EnablePiiLogging();
    [CompilerGeneratedAttribute]
public void set_EnablePiiLogging(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDefaultPlatformLoggingEnabled();
    [CompilerGeneratedAttribute]
public void set_IsDefaultPlatformLoggingEnabled(bool value);
    [CompilerGeneratedAttribute]
public string get_Component();
    [CompilerGeneratedAttribute]
public void set_Component(string value);
    [CompilerGeneratedAttribute]
public string get_ClientName();
    [CompilerGeneratedAttribute]
public void set_ClientName(string value);
    [CompilerGeneratedAttribute]
public string get_ClientVersion();
    [CompilerGeneratedAttribute]
public void set_ClientVersion(string value);
}
public class Microsoft.Identity.Client.AuthenticationResult : object {
    public string AccessToken { get; }
    public bool IsExtendedLifeTimeToken { get; }
    public string UniqueId { get; }
    public DateTimeOffset ExpiresOn { get; }
    public DateTimeOffset ExtendedExpiresOn { get; }
    public string TenantId { get; }
    public IAccount Account { get; }
    public string IdToken { get; }
    public IEnumerable`1<string> Scopes { get; }
    [EditorBrowsableAttribute("1")]
[DebuggerBrowsableAttribute("0")]
[ObsoleteAttribute("Use Account instead (See https://aka.ms/msal-net-2-released)", "True")]
public IUser User { get; }
    public AuthenticationResult(string accessToken, bool isExtendedLifeTimeToken, string uniqueId, DateTimeOffset expiresOn, DateTimeOffset extendedExpiresOn, string tenantId, IAccount account, string idToken, IEnumerable`1<string> scopes);
    internal AuthenticationResult(MsalAccessTokenCacheItem msalAccessTokenCacheItem, MsalIdTokenCacheItem msalIdTokenCacheItem);
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    [CompilerGeneratedAttribute]
public bool get_IsExtendedLifeTimeToken();
    [CompilerGeneratedAttribute]
public string get_UniqueId();
    [CompilerGeneratedAttribute]
public DateTimeOffset get_ExpiresOn();
    [CompilerGeneratedAttribute]
public DateTimeOffset get_ExtendedExpiresOn();
    [CompilerGeneratedAttribute]
public string get_TenantId();
    [CompilerGeneratedAttribute]
public IAccount get_Account();
    [CompilerGeneratedAttribute]
public string get_IdToken();
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Scopes();
    public string CreateAuthorizationHeader();
    public IUser get_User();
}
internal class Microsoft.Identity.Client.AuthorityInfo : object {
    public string Host { get; }
    public string CanonicalAuthority { get; public set; }
    public AuthorityType AuthorityType { get; }
    public string UserRealmUriPrefix { get; }
    public bool ValidateAuthority { get; }
    public AuthorityInfo(AuthorityType authorityType, string authority, bool validateAuthority);
    [CompilerGeneratedAttribute]
public string get_Host();
    [CompilerGeneratedAttribute]
public string get_CanonicalAuthority();
    [CompilerGeneratedAttribute]
public void set_CanonicalAuthority(string value);
    [CompilerGeneratedAttribute]
public AuthorityType get_AuthorityType();
    [CompilerGeneratedAttribute]
public string get_UserRealmUriPrefix();
    [CompilerGeneratedAttribute]
public bool get_ValidateAuthority();
    internal static AuthorityInfo FromAuthorityUri(string authorityUri, bool validateAuthority);
    internal static AuthorityInfo FromAadAuthority(Uri cloudInstanceUri, Guid tenantId, bool validateAuthority);
    internal static AuthorityInfo FromAadAuthority(Uri cloudInstanceUri, string tenant, bool validateAuthority);
    internal static AuthorityInfo FromAadAuthority(AzureCloudInstance azureCloudInstance, Guid tenantId, bool validateAuthority);
    internal static AuthorityInfo FromAadAuthority(AzureCloudInstance azureCloudInstance, string tenant, bool validateAuthority);
    internal static AuthorityInfo FromAadAuthority(AzureCloudInstance azureCloudInstance, AadAuthorityAudience authorityAudience, bool validateAuthority);
    internal static AuthorityInfo FromAadAuthority(AadAuthorityAudience authorityAudience, bool validateAuthority);
    internal static AuthorityInfo FromAadAuthority(string authorityUri, bool validateAuthority);
    internal static AuthorityInfo FromAdfsAuthority(string authorityUri, bool validateAuthority);
    internal static AuthorityInfo FromB2CAuthority(string authorityUri);
    internal static string GetCloudUrl(AzureCloudInstance azureCloudInstance);
    internal static string GetAuthorityUri(AzureCloudInstance azureCloudInstance, AadAuthorityAudience authorityAudience, string tenantId);
    internal static string GetAadAuthorityAudienceValue(AadAuthorityAudience authorityAudience, string tenantId);
    internal static string CanonicalizeAuthorityUri(string uri);
}
internal enum Microsoft.Identity.Client.AuthorityType : Enum {
    public int value__;
    public static AuthorityType Aad;
    public static AuthorityType Adfs;
    public static AuthorityType B2C;
}
public enum Microsoft.Identity.Client.AzureCloudInstance : Enum {
    public int value__;
    public static AzureCloudInstance None;
    public static AzureCloudInstance AzurePublic;
    public static AzureCloudInstance AzureChina;
    public static AzureCloudInstance AzureGermany;
    public static AzureCloudInstance AzureUsGovernment;
}
internal static class Microsoft.Identity.Client.Cache.AdalCacheOperations : object {
    public static Byte[] Serialize(ICoreLogger logger, IDictionary`2<AdalTokenCacheKey, AdalResultWrapper> tokenCacheDictionary);
    public static IDictionary`2<AdalTokenCacheKey, AdalResultWrapper> Deserialize(ICoreLogger logger, Byte[] state);
}
[DataContractAttribute]
internal class Microsoft.Identity.Client.Cache.AdalResult : object {
    [DataMemberAttribute]
public string AccessTokenType { get; }
    [DataMemberAttribute]
public string AccessToken { get; internal set; }
    [DataMemberAttribute]
public DateTimeOffset ExpiresOn { get; internal set; }
    [DataMemberAttribute]
internal DateTimeOffset ExtendedExpiresOn { get; internal set; }
    [DataMemberAttribute]
public bool ExtendedLifeTimeToken { get; internal set; }
    [DataMemberAttribute]
public string TenantId { get; internal set; }
    [DataMemberAttribute]
public AdalUserInfo UserInfo { get; internal set; }
    [DataMemberAttribute]
public string IdToken { get; internal set; }
    public string Authority { get; internal set; }
    internal AdalResult(string accessTokenType, string accessToken, DateTimeOffset expiresOn);
    internal AdalResult(string accessTokenType, string accessToken, DateTimeOffset expiresOn, DateTimeOffset extendedExpiresOn);
    [CompilerGeneratedAttribute]
public string get_AccessTokenType();
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    [CompilerGeneratedAttribute]
internal void set_AccessToken(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_ExpiresOn();
    [CompilerGeneratedAttribute]
internal void set_ExpiresOn(DateTimeOffset value);
    [CompilerGeneratedAttribute]
internal DateTimeOffset get_ExtendedExpiresOn();
    [CompilerGeneratedAttribute]
internal void set_ExtendedExpiresOn(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public bool get_ExtendedLifeTimeToken();
    [CompilerGeneratedAttribute]
internal void set_ExtendedLifeTimeToken(bool value);
    [CompilerGeneratedAttribute]
public string get_TenantId();
    [CompilerGeneratedAttribute]
internal void set_TenantId(string value);
    [CompilerGeneratedAttribute]
public AdalUserInfo get_UserInfo();
    [CompilerGeneratedAttribute]
internal void set_UserInfo(AdalUserInfo value);
    [CompilerGeneratedAttribute]
public string get_IdToken();
    [CompilerGeneratedAttribute]
internal void set_IdToken(string value);
    [CompilerGeneratedAttribute]
public string get_Authority();
    [CompilerGeneratedAttribute]
internal void set_Authority(string value);
    public string CreateAuthorizationHeader();
    internal void UpdateTenantAndUserInfo(string tenantId, string idToken, AdalUserInfo userInfo);
}
[DataContractAttribute]
internal class Microsoft.Identity.Client.Cache.AdalResultWrapper : object {
    [DataMemberAttribute]
public AdalResult Result { get; public set; }
    [DataMemberAttribute]
public string RawClientInfo { get; public set; }
    [DataMemberAttribute]
public string RefreshToken { get; public set; }
    internal bool IsMultipleResourceRefreshToken { get; }
    [DataMemberAttribute]
internal string ResourceInResponse { get; internal set; }
    internal Exception Exception { get; internal set; }
    [DataMemberAttribute]
public string UserAssertionHash { get; public set; }
    [CompilerGeneratedAttribute]
public AdalResult get_Result();
    [CompilerGeneratedAttribute]
public void set_Result(AdalResult value);
    [CompilerGeneratedAttribute]
public string get_RawClientInfo();
    [CompilerGeneratedAttribute]
public void set_RawClientInfo(string value);
    [CompilerGeneratedAttribute]
public string get_RefreshToken();
    [CompilerGeneratedAttribute]
public void set_RefreshToken(string value);
    internal bool get_IsMultipleResourceRefreshToken();
    [CompilerGeneratedAttribute]
internal string get_ResourceInResponse();
    [CompilerGeneratedAttribute]
internal void set_ResourceInResponse(string value);
    public static AdalResultWrapper Deserialize(string serializedObject);
    public string Serialize();
    [CompilerGeneratedAttribute]
internal Exception get_Exception();
    [CompilerGeneratedAttribute]
internal void set_Exception(Exception value);
    [CompilerGeneratedAttribute]
public string get_UserAssertionHash();
    [CompilerGeneratedAttribute]
public void set_UserAssertionHash(string value);
    internal AdalResultWrapper Clone();
}
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
internal class Microsoft.Identity.Client.Cache.AdalTokenCacheKey : object {
    public string Authority { get; }
    public string Resource { get; }
    public string ClientId { get; }
    public string UniqueId { get; }
    public string DisplayableId { get; }
    public TokenSubjectType TokenSubjectType { get; }
    internal AdalTokenCacheKey(string authority, string resource, string clientId, TokenSubjectType tokenSubjectType, AdalUserInfo adalUserInfo);
    internal AdalTokenCacheKey(string authority, string resource, string clientId, TokenSubjectType tokenSubjectType, string uniqueId, string displayableId);
    [CompilerGeneratedAttribute]
public string get_Authority();
    [CompilerGeneratedAttribute]
public string get_Resource();
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public string get_UniqueId();
    [CompilerGeneratedAttribute]
public string get_DisplayableId();
    [CompilerGeneratedAttribute]
public TokenSubjectType get_TokenSubjectType();
    public virtual bool Equals(object obj);
    public bool Equals(AdalTokenCacheKey other);
    public virtual int GetHashCode();
    internal bool ResourceEquals(string otherResource);
    internal bool ClientIdEquals(string otherClientId);
    internal bool DisplayableIdEquals(string otherDisplayableId);
}
internal class Microsoft.Identity.Client.Cache.AdalUserForMsalEntry : object {
    public string ClientId { get; }
    public string Authority { get; }
    public string ClientInfo { get; }
    public AdalUserInfo UserInfo { get; }
    public AdalUserForMsalEntry(string clientId, string authority, string clientInfo, AdalUserInfo userInfo);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public string get_Authority();
    [CompilerGeneratedAttribute]
public string get_ClientInfo();
    [CompilerGeneratedAttribute]
public AdalUserInfo get_UserInfo();
}
[DataContractAttribute]
internal class Microsoft.Identity.Client.Cache.AdalUserInfo : object {
    [DataMemberAttribute]
public string UniqueId { get; internal set; }
    [DataMemberAttribute]
public string DisplayableId { get; internal set; }
    [DataMemberAttribute]
public string GivenName { get; internal set; }
    [DataMemberAttribute]
public string FamilyName { get; internal set; }
    [DataMemberAttribute]
public Nullable`1<DateTimeOffset> PasswordExpiresOn { get; internal set; }
    [DataMemberAttribute]
public Uri PasswordChangeUrl { get; internal set; }
    [DataMemberAttribute]
public string IdentityProvider { get; internal set; }
    public AdalUserInfo(AdalUserInfo other);
    [CompilerGeneratedAttribute]
public string get_UniqueId();
    [CompilerGeneratedAttribute]
internal void set_UniqueId(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayableId();
    [CompilerGeneratedAttribute]
internal void set_DisplayableId(string value);
    [CompilerGeneratedAttribute]
public string get_GivenName();
    [CompilerGeneratedAttribute]
internal void set_GivenName(string value);
    [CompilerGeneratedAttribute]
public string get_FamilyName();
    [CompilerGeneratedAttribute]
internal void set_FamilyName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTimeOffset> get_PasswordExpiresOn();
    [CompilerGeneratedAttribute]
internal void set_PasswordExpiresOn(Nullable`1<DateTimeOffset> value);
    [CompilerGeneratedAttribute]
public Uri get_PasswordChangeUrl();
    [CompilerGeneratedAttribute]
internal void set_PasswordChangeUrl(Uri value);
    [CompilerGeneratedAttribute]
public string get_IdentityProvider();
    [CompilerGeneratedAttribute]
internal void set_IdentityProvider(string value);
}
internal class Microsoft.Identity.Client.Cache.AdalUsersForMsal : object {
    public AdalUsersForMsal(IEnumerable`1<AdalUserForMsalEntry> userEntries);
    public IDictionary`2<string, AdalUserInfo> GetUsersWithClientInfo(IEnumerable`1<string> envAliases);
    public IEnumerable`1<AdalUserInfo> GetUsersWithoutClientInfo(IEnumerable`1<string> envAliases);
    public ISet`1<string> GetAdalUserEnviroments();
}
internal enum Microsoft.Identity.Client.Cache.CacheAuthorityType : Enum {
    public int value__;
    public static CacheAuthorityType AAD;
    public static CacheAuthorityType MSA;
    public static CacheAuthorityType MSSTS;
    public static CacheAuthorityType OTHER;
}
[ObsoleteAttribute("This is expected to be removed in MSAL.NET v3 and ADAL.NET v5. We recommend using SerializeMsalV3/DeserializeMsalV3. Read more: https://aka.ms/msal-net-3x-cache-breaking-change", "False")]
public class Microsoft.Identity.Client.Cache.CacheData : object {
    public Byte[] AdalV3State { get; public set; }
    public Byte[] UnifiedState { get; public set; }
    [CompilerGeneratedAttribute]
public Byte[] get_AdalV3State();
    [CompilerGeneratedAttribute]
public void set_AdalV3State(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_UnifiedState();
    [CompilerGeneratedAttribute]
public void set_UnifiedState(Byte[] value);
}
internal static class Microsoft.Identity.Client.Cache.CacheFallbackOperations : object {
    internal static string DifferentEnvError;
    internal static string DifferentAuthorityError;
    public static void WriteAdalRefreshToken(ICoreLogger logger, ILegacyCachePersistence legacyCachePersistence, MsalRefreshTokenCacheItem rtItem, MsalIdTokenCacheItem idItem, string authority, string uniqueId, string scope);
    public static AdalUsersForMsal GetAllAdalUsersForMsal(ICoreLogger logger, ILegacyCachePersistence legacyCachePersistence, string clientId);
    public static void RemoveAdalUser(ICoreLogger logger, ILegacyCachePersistence legacyCachePersistence, string clientId, string displayableId, string accountOrUserId);
    public static List`1<MsalRefreshTokenCacheItem> GetAllAdalEntriesForMsal(ICoreLogger logger, ILegacyCachePersistence legacyCachePersistence, ISet`1<string> environmentAliases, string clientId, string upn, string uniqueId);
    public static MsalRefreshTokenCacheItem GetAdalEntryForMsal(ICoreLogger logger, ILegacyCachePersistence legacyCachePersistence, string preferredEnvironment, ISet`1<string> environmentAliases, string clientId, string upn, string uniqueId);
}
internal class Microsoft.Identity.Client.Cache.CacheSessionManager : object {
    public ITokenCacheInternal TokenCacheInternal { get; }
    public bool HasCache { get; }
    public CacheSessionManager(ITokenCacheInternal tokenCacheInternal, AuthenticationRequestParameters requestParams);
    [CompilerGeneratedAttribute]
public sealed virtual ITokenCacheInternal get_TokenCacheInternal();
    public sealed virtual bool get_HasCache();
    public sealed virtual Task`1<MsalAccessTokenCacheItem> FindAccessTokenAsync();
    public sealed virtual Tuple`2<MsalAccessTokenCacheItem, MsalIdTokenCacheItem> SaveTokenResponse(MsalTokenResponse tokenResponse);
    public sealed virtual MsalIdTokenCacheItem GetIdTokenCacheItem(MsalIdTokenCacheKey idTokenCacheKey);
    public sealed virtual Task`1<MsalRefreshTokenCacheItem> FindFamilyRefreshTokenAsync(string familyId);
    public sealed virtual Task`1<MsalRefreshTokenCacheItem> FindRefreshTokenAsync();
    public sealed virtual Task`1<Nullable`1<bool>> IsAppFociMemberAsync(string familyId);
}
internal interface Microsoft.Identity.Client.Cache.ICacheSessionManager {
    public ITokenCacheInternal TokenCacheInternal { get; }
    public bool HasCache { get; }
    public abstract virtual ITokenCacheInternal get_TokenCacheInternal();
    public abstract virtual bool get_HasCache();
    public abstract virtual Task`1<MsalAccessTokenCacheItem> FindAccessTokenAsync();
    public abstract virtual Tuple`2<MsalAccessTokenCacheItem, MsalIdTokenCacheItem> SaveTokenResponse(MsalTokenResponse tokenResponse);
    public abstract virtual MsalIdTokenCacheItem GetIdTokenCacheItem(MsalIdTokenCacheKey idTokenCacheKey);
    public abstract virtual Task`1<MsalRefreshTokenCacheItem> FindRefreshTokenAsync();
    public abstract virtual Task`1<MsalRefreshTokenCacheItem> FindFamilyRefreshTokenAsync(string familyId);
    public abstract virtual Task`1<Nullable`1<bool>> IsAppFociMemberAsync(string familyId);
}
internal interface Microsoft.Identity.Client.Cache.ILegacyCachePersistence {
    public abstract virtual Byte[] LoadCache();
    public abstract virtual void WriteCache(Byte[] serializedCache);
}
internal class Microsoft.Identity.Client.Cache.Items.CacheSerializationContract : object {
    public Dictionary`2<string, MsalAccessTokenCacheItem> AccessTokens { get; public set; }
    public Dictionary`2<string, MsalRefreshTokenCacheItem> RefreshTokens { get; public set; }
    public Dictionary`2<string, MsalIdTokenCacheItem> IdTokens { get; public set; }
    public Dictionary`2<string, MsalAccountCacheItem> Accounts { get; public set; }
    public Dictionary`2<string, MsalAppMetadataCacheItem> AppMetadata { get; public set; }
    public IDictionary`2<string, JToken> UnknownNodes { get; }
    public CacheSerializationContract(IDictionary`2<string, JToken> unkownNodes);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, MsalAccessTokenCacheItem> get_AccessTokens();
    [CompilerGeneratedAttribute]
public void set_AccessTokens(Dictionary`2<string, MsalAccessTokenCacheItem> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, MsalRefreshTokenCacheItem> get_RefreshTokens();
    [CompilerGeneratedAttribute]
public void set_RefreshTokens(Dictionary`2<string, MsalRefreshTokenCacheItem> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, MsalIdTokenCacheItem> get_IdTokens();
    [CompilerGeneratedAttribute]
public void set_IdTokens(Dictionary`2<string, MsalIdTokenCacheItem> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, MsalAccountCacheItem> get_Accounts();
    [CompilerGeneratedAttribute]
public void set_Accounts(Dictionary`2<string, MsalAccountCacheItem> value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, MsalAppMetadataCacheItem> get_AppMetadata();
    [CompilerGeneratedAttribute]
public void set_AppMetadata(Dictionary`2<string, MsalAppMetadataCacheItem> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, JToken> get_UnknownNodes();
    internal static CacheSerializationContract FromJsonString(string json);
    internal string ToJsonString();
}
internal class Microsoft.Identity.Client.Cache.Items.MsalAccessTokenCacheItem : MsalCredentialCacheItemBase {
    internal string TenantId { get; internal set; }
    internal string NormalizedScopes { get; internal set; }
    internal string CachedAt { get; internal set; }
    internal string ExpiresOnUnixTimestamp { get; internal set; }
    internal string ExtendedExpiresOnUnixTimestamp { get; internal set; }
    public string UserAssertionHash { get; public set; }
    internal string Authority { get; }
    internal SortedSet`1<string> ScopeSet { get; }
    internal DateTimeOffset ExpiresOn { get; }
    internal DateTimeOffset ExtendedExpiresOn { get; }
    public bool IsExtendedLifeTimeToken { get; public set; }
    internal MsalAccessTokenCacheItem(string environment, string clientId, MsalTokenResponse response, string tenantId);
    internal MsalAccessTokenCacheItem(string environment, string clientId, string scopes, string tenantId, string secret, DateTimeOffset accessTokenExpiresOn, DateTimeOffset accessTokenExtendedExpiresOn, string rawClientInfo);
    [CompilerGeneratedAttribute]
internal string get_TenantId();
    [CompilerGeneratedAttribute]
internal void set_TenantId(string value);
    [CompilerGeneratedAttribute]
internal string get_NormalizedScopes();
    [CompilerGeneratedAttribute]
internal void set_NormalizedScopes(string value);
    [CompilerGeneratedAttribute]
internal string get_CachedAt();
    [CompilerGeneratedAttribute]
internal void set_CachedAt(string value);
    [CompilerGeneratedAttribute]
internal string get_ExpiresOnUnixTimestamp();
    [CompilerGeneratedAttribute]
internal void set_ExpiresOnUnixTimestamp(string value);
    [CompilerGeneratedAttribute]
internal string get_ExtendedExpiresOnUnixTimestamp();
    [CompilerGeneratedAttribute]
internal void set_ExtendedExpiresOnUnixTimestamp(string value);
    [CompilerGeneratedAttribute]
public string get_UserAssertionHash();
    [CompilerGeneratedAttribute]
public void set_UserAssertionHash(string value);
    internal string get_Authority();
    internal SortedSet`1<string> get_ScopeSet();
    internal DateTimeOffset get_ExpiresOn();
    internal DateTimeOffset get_ExtendedExpiresOn();
    [CompilerGeneratedAttribute]
public bool get_IsExtendedLifeTimeToken();
    [CompilerGeneratedAttribute]
public void set_IsExtendedLifeTimeToken(bool value);
    internal static MsalAccessTokenCacheItem FromJsonString(string json);
    internal static MsalAccessTokenCacheItem FromJObject(JObject j);
    internal virtual JObject ToJObject();
    internal string ToJsonString();
    internal MsalAccessTokenCacheKey GetKey();
    internal MsalIdTokenCacheKey GetIdTokenItemKey();
}
internal class Microsoft.Identity.Client.Cache.Items.MsalAccountCacheItem : MsalCacheItemBase {
    internal string TenantId { get; internal set; }
    internal string PreferredUsername { get; internal set; }
    internal string Name { get; internal set; }
    internal string GivenName { get; internal set; }
    internal string FamilyName { get; internal set; }
    internal string LocalAccountId { get; internal set; }
    internal string AuthorityType { get; internal set; }
    internal MsalAccountCacheItem(string environment, MsalTokenResponse response, string preferredUsername, string tenantId);
    internal MsalAccountCacheItem(string environment, string localAccountId, string rawClientInfo, string name, string preferredUsername, string tenantId, string givenName, string familyName);
    [CompilerGeneratedAttribute]
internal string get_TenantId();
    [CompilerGeneratedAttribute]
internal void set_TenantId(string value);
    [CompilerGeneratedAttribute]
internal string get_PreferredUsername();
    [CompilerGeneratedAttribute]
internal void set_PreferredUsername(string value);
    [CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
internal void set_Name(string value);
    [CompilerGeneratedAttribute]
internal string get_GivenName();
    [CompilerGeneratedAttribute]
internal void set_GivenName(string value);
    [CompilerGeneratedAttribute]
internal string get_FamilyName();
    [CompilerGeneratedAttribute]
internal void set_FamilyName(string value);
    [CompilerGeneratedAttribute]
internal string get_LocalAccountId();
    [CompilerGeneratedAttribute]
internal void set_LocalAccountId(string value);
    [CompilerGeneratedAttribute]
internal string get_AuthorityType();
    [CompilerGeneratedAttribute]
internal void set_AuthorityType(string value);
    internal MsalAccountCacheKey GetKey();
    internal static MsalAccountCacheItem FromJsonString(string json);
    internal static MsalAccountCacheItem FromJObject(JObject j);
    internal virtual JObject ToJObject();
    internal string ToJsonString();
}
internal class Microsoft.Identity.Client.Cache.Items.MsalAppMetadataCacheItem : MsalItemWithAdditionalFields {
    public string ClientId { get; }
    public string Environment { get; }
    public string FamilyId { get; }
    public MsalAppMetadataCacheItem(string clientId, string env, string familyId);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public string get_Environment();
    [CompilerGeneratedAttribute]
public string get_FamilyId();
    public MsalAppMetadataCacheKey GetKey();
    internal static MsalAppMetadataCacheItem FromJsonString(string json);
    internal static MsalAppMetadataCacheItem FromJObject(JObject j);
    internal string ToJsonString();
    internal virtual JObject ToJObject();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public sealed virtual bool Equals(MsalAppMetadataCacheItem item);
}
internal abstract class Microsoft.Identity.Client.Cache.Items.MsalCacheItemBase : MsalItemWithAdditionalFields {
    internal string HomeAccountId { get; internal set; }
    internal string Environment { get; internal set; }
    internal string RawClientInfo { get; internal set; }
    internal ClientInfo ClientInfo { get; }
    [CompilerGeneratedAttribute]
internal string get_HomeAccountId();
    [CompilerGeneratedAttribute]
internal void set_HomeAccountId(string value);
    [CompilerGeneratedAttribute]
internal string get_Environment();
    [CompilerGeneratedAttribute]
internal void set_Environment(string value);
    [CompilerGeneratedAttribute]
internal string get_RawClientInfo();
    [CompilerGeneratedAttribute]
internal void set_RawClientInfo(string value);
    internal ClientInfo get_ClientInfo();
    internal void InitUserIdentifier();
    internal virtual void PopulateFieldsFromJObject(JObject j);
    internal virtual JObject ToJObject();
}
internal class Microsoft.Identity.Client.Cache.Items.MsalCredentialCacheItemBase : MsalCacheItemBase {
    internal string CredentialType { get; internal set; }
    public string ClientId { get; public set; }
    public string Secret { get; public set; }
    [CompilerGeneratedAttribute]
internal string get_CredentialType();
    [CompilerGeneratedAttribute]
internal void set_CredentialType(string value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_Secret();
    [CompilerGeneratedAttribute]
public void set_Secret(string value);
    internal virtual void PopulateFieldsFromJObject(JObject j);
    internal virtual JObject ToJObject();
}
internal class Microsoft.Identity.Client.Cache.Items.MsalIdTokenCacheItem : MsalCredentialCacheItemBase {
    internal string TenantId { get; internal set; }
    internal string Authority { get; }
    internal IdToken IdToken { get; }
    internal MsalIdTokenCacheItem(string environment, string clientId, MsalTokenResponse response, string tenantId);
    internal MsalIdTokenCacheItem(string environment, string clientId, string secret, string rawClientInfo, string tenantId);
    [CompilerGeneratedAttribute]
internal string get_TenantId();
    [CompilerGeneratedAttribute]
internal void set_TenantId(string value);
    internal string get_Authority();
    internal IdToken get_IdToken();
    internal MsalIdTokenCacheKey GetKey();
    internal static MsalIdTokenCacheItem FromJsonString(string json);
    internal static MsalIdTokenCacheItem FromJObject(JObject j);
    internal virtual JObject ToJObject();
    internal string ToJsonString();
}
internal abstract class Microsoft.Identity.Client.Cache.Items.MsalItemWithAdditionalFields : object {
    internal string AdditionalFieldsJson { get; internal set; }
    [CompilerGeneratedAttribute]
internal string get_AdditionalFieldsJson();
    [CompilerGeneratedAttribute]
internal void set_AdditionalFieldsJson(string value);
    internal virtual void PopulateFieldsFromJObject(JObject j);
    internal virtual JObject ToJObject();
}
internal class Microsoft.Identity.Client.Cache.Items.MsalRefreshTokenCacheItem : MsalCredentialCacheItemBase {
    public string FamilyId { get; public set; }
    public bool IsFRT { get; }
    internal MsalRefreshTokenCacheItem(string environment, string clientId, MsalTokenResponse response);
    internal MsalRefreshTokenCacheItem(string environment, string clientId, string secret, string rawClientInfo, string familyId);
    [CompilerGeneratedAttribute]
public string get_FamilyId();
    [CompilerGeneratedAttribute]
public void set_FamilyId(string value);
    public bool get_IsFRT();
    internal MsalRefreshTokenCacheKey GetKey();
    internal static MsalRefreshTokenCacheItem FromJsonString(string json);
    internal static MsalRefreshTokenCacheItem FromJObject(JObject j);
    internal virtual JObject ToJObject();
    internal string ToJsonString();
}
internal interface Microsoft.Identity.Client.Cache.ITokenCacheAccessor {
    public abstract virtual void SaveAccessToken(MsalAccessTokenCacheItem item);
    public abstract virtual void SaveRefreshToken(MsalRefreshTokenCacheItem item);
    public abstract virtual void SaveIdToken(MsalIdTokenCacheItem item);
    public abstract virtual void SaveAccount(MsalAccountCacheItem item);
    public abstract virtual void SaveAppMetadata(MsalAppMetadataCacheItem item);
    public abstract virtual MsalAccessTokenCacheItem GetAccessToken(MsalAccessTokenCacheKey accessTokenKey);
    public abstract virtual MsalRefreshTokenCacheItem GetRefreshToken(MsalRefreshTokenCacheKey refreshTokenKey);
    public abstract virtual MsalIdTokenCacheItem GetIdToken(MsalIdTokenCacheKey idTokenKey);
    public abstract virtual MsalAccountCacheItem GetAccount(MsalAccountCacheKey accountKey);
    public abstract virtual MsalAppMetadataCacheItem GetAppMetadata(MsalAppMetadataCacheKey appMetadataKey);
    public abstract virtual void DeleteAccessToken(MsalAccessTokenCacheKey cacheKey);
    public abstract virtual void DeleteRefreshToken(MsalRefreshTokenCacheKey cacheKey);
    public abstract virtual void DeleteIdToken(MsalIdTokenCacheKey cacheKey);
    public abstract virtual void DeleteAccount(MsalAccountCacheKey cacheKey);
    public abstract virtual IEnumerable`1<MsalAccessTokenCacheItem> GetAllAccessTokens();
    public abstract virtual IEnumerable`1<MsalRefreshTokenCacheItem> GetAllRefreshTokens();
    public abstract virtual IEnumerable`1<MsalIdTokenCacheItem> GetAllIdTokens();
    public abstract virtual IEnumerable`1<MsalAccountCacheItem> GetAllAccounts();
    public abstract virtual IEnumerable`1<MsalAppMetadataCacheItem> GetAllAppMetadata();
    public abstract virtual void Clear();
}
internal interface Microsoft.Identity.Client.Cache.ITokenCacheSerializer {
    public abstract virtual IDictionary`2<string, JToken> Deserialize(Byte[] bytes, bool clearExistingCacheData);
    public abstract virtual Byte[] Serialize(IDictionary`2<string, JToken> additionalNodes);
}
internal interface Microsoft.Identity.Client.Cache.Keys.IiOSKey {
    public string iOSAccount { get; }
    public string iOSGeneric { get; }
    public string iOSService { get; }
    public int iOSType { get; }
    public abstract virtual string get_iOSAccount();
    public abstract virtual string get_iOSGeneric();
    public abstract virtual string get_iOSService();
    public abstract virtual int get_iOSType();
}
internal class Microsoft.Identity.Client.Cache.Keys.MsalAccessTokenCacheKey : object {
    public string iOSAccount { get; }
    public string iOSService { get; }
    public string iOSGeneric { get; }
    public int iOSType { get; }
    internal MsalAccessTokenCacheKey(string environment, string tenantId, string userIdentifier, string clientId, string scopes);
    public virtual string ToString();
    public sealed virtual string get_iOSAccount();
    public sealed virtual string get_iOSService();
    public sealed virtual string get_iOSGeneric();
    public sealed virtual int get_iOSType();
}
internal class Microsoft.Identity.Client.Cache.Keys.MsalAccountCacheKey : object {
    public string iOSAccount { get; }
    public string iOSGeneric { get; }
    public string iOSService { get; }
    public int iOSType { get; }
    public MsalAccountCacheKey(string environment, string tenantId, string userIdentifier, string username, string authorityType);
    public virtual string ToString();
    public sealed virtual string get_iOSAccount();
    public sealed virtual string get_iOSGeneric();
    public sealed virtual string get_iOSService();
    public sealed virtual int get_iOSType();
}
internal class Microsoft.Identity.Client.Cache.Keys.MsalAppMetadataCacheKey : object {
    public string iOSService { get; }
    public string iOSGeneric { get; }
    public string iOSAccount { get; }
    public int iOSType { get; }
    public MsalAppMetadataCacheKey(string clientId, string environment);
    public virtual string ToString();
    public sealed virtual string get_iOSService();
    public sealed virtual string get_iOSGeneric();
    public sealed virtual string get_iOSAccount();
    public sealed virtual int get_iOSType();
}
internal class Microsoft.Identity.Client.Cache.Keys.MsalCacheKeys : object {
    public static string CacheKeyDelimiter;
    internal static Dictionary`2<string, int> iOSAuthorityTypeToAttrType;
    public static string GetCredentialKey(string homeAccountId, string environment, string keyDescriptor, string clientId, string tenantId, string scopes);
    public static string GetiOSAccountKey(string homeAccountId, string environment);
    public static string GetiOSServiceKey(string keyDescriptor, string clientId, string tenantId, string scopes);
    public static string GetiOSGenericKey(string keyDescriptor, string clientId, string tenantId);
}
internal class Microsoft.Identity.Client.Cache.Keys.MsalIdTokenCacheKey : object {
    public string iOSAccount { get; }
    public string iOSGeneric { get; }
    public string iOSService { get; }
    public int iOSType { get; }
    public MsalIdTokenCacheKey(string environment, string tenantId, string userIdentifier, string clientId);
    public virtual string ToString();
    public sealed virtual string get_iOSAccount();
    public sealed virtual string get_iOSGeneric();
    public sealed virtual string get_iOSService();
    public sealed virtual int get_iOSType();
}
internal class Microsoft.Identity.Client.Cache.Keys.MsalRefreshTokenCacheKey : object {
    public string iOSAccount { get; }
    public string iOSGeneric { get; }
    public string iOSService { get; }
    public int iOSType { get; }
    internal MsalRefreshTokenCacheKey(string environment, string clientId, string userIdentifier, string familyId);
    public virtual string ToString();
    public sealed virtual string get_iOSAccount();
    public sealed virtual string get_iOSGeneric();
    public sealed virtual string get_iOSService();
    public sealed virtual int get_iOSType();
}
internal static class Microsoft.Identity.Client.Cache.StorageJsonKeys : object {
    public static string HomeAccountId;
    public static string Environment;
    public static string Realm;
    public static string LocalAccountId;
    public static string Username;
    public static string AuthorityType;
    public static string AlternativeAccountId;
    public static string GivenName;
    public static string FamilyName;
    public static string MiddleName;
    public static string Name;
    public static string AvatarUrl;
    public static string CredentialType;
    public static string ClientId;
    public static string Secret;
    public static string Target;
    public static string CachedAt;
    public static string ExpiresOn;
    public static string ExtendedExpiresOn;
    public static string ClientInfo;
    public static string FamilyId;
    public static string AppMetadata;
    public static string UserAssertionHash;
    public static string ExtendedExpiresOn_MsalCompat;
}
internal static class Microsoft.Identity.Client.Cache.StorageJsonValues : object {
    public static string AuthorityTypeAdfs;
    public static string AuthorityTypeMsa;
    public static string AuthorityTypeMsSts;
    public static string AuthorityTypeOther;
    public static string CredentialTypeRefreshToken;
    public static string CredentialTypeAccessToken;
    public static string CredentialTypeIdToken;
    public static string AccountRootKey;
    public static string CredentialTypeOther;
    public static string AppMetadata;
}
internal class Microsoft.Identity.Client.Cache.TokenCacheDictionarySerializer : object {
    public TokenCacheDictionarySerializer(ITokenCacheAccessor accessor);
    public sealed virtual Byte[] Serialize(IDictionary`2<string, JToken> unkownNodes);
    public sealed virtual IDictionary`2<string, JToken> Deserialize(Byte[] bytes, bool clearExistingCacheData);
}
internal class Microsoft.Identity.Client.Cache.TokenCacheJsonSerializer : object {
    public TokenCacheJsonSerializer(ITokenCacheAccessor accessor);
    public sealed virtual Byte[] Serialize(IDictionary`2<string, JToken> unkownNodes);
    public sealed virtual IDictionary`2<string, JToken> Deserialize(Byte[] bytes, bool clearExistingCacheData);
}
internal enum Microsoft.Identity.Client.Cache.TokenSubjectType : Enum {
    public int value__;
    public static TokenSubjectType User;
    public static TokenSubjectType Client;
    public static TokenSubjectType UserPlusClient;
}
internal class Microsoft.Identity.Client.CacheV2.CacheManager : object {
    public CacheManager(IStorageManager storageManager, AuthenticationRequestParameters authParameters);
    public sealed virtual bool TryReadCache(MsalTokenResponse& msalTokenResponse, IAccount& account);
    public sealed virtual IAccount CacheTokenResponse(MsalTokenResponse msalTokenResponse);
    public sealed virtual void DeleteCachedRefreshToken();
    internal static string GetLocalAccountId(IdToken idTokenJwt);
    internal CacheV2AuthorityType GetAuthorityType();
    internal static string GetHomeAccountId(TokenResponse tokenResponse);
    internal static bool IsAccessTokenValid(Credential accessToken);
}
internal interface Microsoft.Identity.Client.CacheV2.ICacheManager {
    public abstract virtual bool TryReadCache(MsalTokenResponse& msalTokenResponse, IAccount& account);
    public abstract virtual IAccount CacheTokenResponse(MsalTokenResponse tokenResponse);
    public abstract virtual void DeleteCachedRefreshToken();
}
internal class Microsoft.Identity.Client.CacheV2.Impl.AdalLegacyCacheManager : object {
    public ILegacyCachePersistence LegacyCachePersistence { get; }
    public AdalLegacyCacheManager(ILegacyCachePersistence legacyCachePersistence);
    [CompilerGeneratedAttribute]
public sealed virtual ILegacyCachePersistence get_LegacyCachePersistence();
    public sealed virtual void WriteAdalRefreshToken();
    public sealed virtual Credential GetAdalRefreshToken();
    public sealed virtual IEnumerable`1<Account> GetAllAdalUsers();
    public sealed virtual void RemoveAdalUser();
}
internal class Microsoft.Identity.Client.CacheV2.Impl.FileSystemCredentialPathManager : object {
    public FileSystemCredentialPathManager(ICryptographyManager cryptographyManager);
    public sealed virtual string GetCredentialPath(Credential credential);
    public sealed virtual string ToSafeFilename(string data);
    public sealed virtual string GetCredentialPath(string homeAccountId, string environment, string realm, string clientId, string familyId, CredentialType credentialType);
    public sealed virtual string GetAppMetadataPath(string environment, string clientId);
    public sealed virtual string GetAccountPath(Account account);
    public sealed virtual string GetAccountPath(string homeAccountId, string environment, string realm);
    public sealed virtual string GetAppMetadataPath(AppMetadata appMetadata);
    public sealed virtual string GetAccountsPath(string homeAccountId, string environment);
}
internal interface Microsoft.Identity.Client.CacheV2.Impl.IAdalLegacyCacheManager {
    public ILegacyCachePersistence LegacyCachePersistence { get; }
    public abstract virtual ILegacyCachePersistence get_LegacyCachePersistence();
    public abstract virtual void WriteAdalRefreshToken();
    public abstract virtual Credential GetAdalRefreshToken();
    public abstract virtual IEnumerable`1<Account> GetAllAdalUsers();
    public abstract virtual void RemoveAdalUser();
}
internal interface Microsoft.Identity.Client.CacheV2.Impl.ICachePathStorage {
    public abstract virtual Byte[] Read(string relativePath);
    public abstract virtual void ReadModifyWrite(string relativePath, Func`2<Byte[], Byte[]> modify);
    public abstract virtual void Write(string relativePath, Byte[] data);
    public abstract virtual void DeleteFile(string relativePath);
    public abstract virtual void DeleteContent(string relativePath);
    public abstract virtual IEnumerable`1<string> ListContent(string relativePath);
}
internal interface Microsoft.Identity.Client.CacheV2.Impl.ICredentialPathManager {
    public abstract virtual string GetCredentialPath(Credential credential);
    public abstract virtual string ToSafeFilename(string data);
    public abstract virtual string GetCredentialPath(string homeAccountId, string environment, string realm, string clientId, string familyId, CredentialType credentialType);
    public abstract virtual string GetAppMetadataPath(string environment, string clientId);
    public abstract virtual string GetAccountPath(Account account);
    public abstract virtual string GetAccountPath(string homeAccountId, string environment, string realm);
    public abstract virtual string GetAppMetadataPath(AppMetadata appMetadata);
    public abstract virtual string GetAccountsPath(string homeAccountId, string environment);
}
internal class Microsoft.Identity.Client.CacheV2.Impl.IdToken : Jwt {
    public string PreferredUsername { get; }
    public string GivenName { get; }
    public string FamilyName { get; }
    public string MiddleName { get; }
    public string Name { get; }
    public string AlternativeId { get; }
    public string Upn { get; }
    public string Email { get; }
    public string Subject { get; }
    public string Oid { get; }
    public string TenantId { get; }
    public IdToken(string raw);
    public string get_PreferredUsername();
    public string get_GivenName();
    public string get_FamilyName();
    public string get_MiddleName();
    public string get_Name();
    public string get_AlternativeId();
    public string get_Upn();
    public string get_Email();
    public string get_Subject();
    public string get_Oid();
    public string get_TenantId();
}
internal class Microsoft.Identity.Client.CacheV2.Impl.InMemory.InMemoryCachePathStorage : object {
    internal FsDirectory RootDirectory { get; }
    [CompilerGeneratedAttribute]
internal FsDirectory get_RootDirectory();
    public sealed virtual Byte[] Read(string key);
    public sealed virtual void ReadModifyWrite(string key, Func`2<Byte[], Byte[]> modify);
    public sealed virtual void Write(string key, Byte[] data);
    public sealed virtual void DeleteFile(string key);
    public sealed virtual void DeleteContent(string key);
    public sealed virtual IEnumerable`1<string> ListContent(string key);
}
internal interface Microsoft.Identity.Client.CacheV2.Impl.IStorageManager {
    public IAdalLegacyCacheManager AdalLegacyCacheManager { get; }
    public abstract virtual IAdalLegacyCacheManager get_AdalLegacyCacheManager();
    public abstract virtual Byte[] Serialize();
    public abstract virtual void Deserialize(Byte[] serializedBytes);
    public abstract virtual ReadCredentialsResponse ReadCredentials(string correlationId, string homeAccountId, string environment, string realm, string clientId, string familyId, string target, ISet`1<CredentialType> types);
    public abstract virtual OperationStatus WriteCredentials(string correlationId, IEnumerable`1<Credential> credentials);
    public abstract virtual OperationStatus DeleteCredentials(string correlationId, string homeAccountId, string environment, string realm, string clientId, string familyId, string target, ISet`1<CredentialType> types);
    public abstract virtual ReadAccountsResponse ReadAllAccounts(string correlationId);
    public abstract virtual ReadAccountResponse ReadAccount(string correlationId, string homeAccountId, string environment, string realm);
    public abstract virtual OperationStatus WriteAccount(string correlationId, Account account);
    public abstract virtual OperationStatus DeleteAccount(string correlationId, string homeAccountId, string environment, string realm);
    public abstract virtual OperationStatus DeleteAccounts(string correlationId, string homeAccountId, string environment);
    public abstract virtual AppMetadata ReadAppMetadata(string environment, string clientId);
    public abstract virtual void WriteAppMetadata(AppMetadata appMetadata);
}
internal interface Microsoft.Identity.Client.CacheV2.Impl.IStorageWorker {
    public abstract virtual IEnumerable`1<Credential> ReadCredentials(string homeAccountId, string environment, string realm, string clientId, string familyId, string target, ISet`1<CredentialType> types);
    public abstract virtual void WriteCredentials(IEnumerable`1<Credential> credentials);
    public abstract virtual void DeleteCredentials(string homeAccountId, string environment, string realm, string clientId, string familyId, string target, ISet`1<CredentialType> types);
    public abstract virtual Account ReadAccount(string homeAccountId, string environment, string realm);
    public abstract virtual void WriteAccount(Account account);
    public abstract virtual void DeleteAccount(string homeAccountId, string environment, string realm);
    public abstract virtual void DeleteAccounts(string homeAccountId, string environment);
    public abstract virtual AppMetadata ReadAppMetadata(string environment, string clientId);
    public abstract virtual void WriteAppMetadata(AppMetadata appMetadata);
}
internal class Microsoft.Identity.Client.CacheV2.Impl.Jwt : object {
    protected JObject Json { get; }
    public string Raw { get; }
    public string Payload { get; }
    public bool IsSigned { get; }
    public bool IsEmpty { get; }
    public Jwt(string raw);
    [CompilerGeneratedAttribute]
protected JObject get_Json();
    [CompilerGeneratedAttribute]
public string get_Raw();
    [CompilerGeneratedAttribute]
public string get_Payload();
    [CompilerGeneratedAttribute]
public bool get_IsSigned();
    public bool get_IsEmpty();
}
internal class Microsoft.Identity.Client.CacheV2.Impl.OperationStatus : object {
    public OperationStatusType StatusType { get; public set; }
    public int Code { get; public set; }
    public string StatusDescription { get; public set; }
    public long PlatformCode { get; public set; }
    public string PlatformDomain { get; public set; }
    [CompilerGeneratedAttribute]
public OperationStatusType get_StatusType();
    [CompilerGeneratedAttribute]
public void set_StatusType(OperationStatusType value);
    [CompilerGeneratedAttribute]
public int get_Code();
    [CompilerGeneratedAttribute]
public void set_Code(int value);
    [CompilerGeneratedAttribute]
public string get_StatusDescription();
    [CompilerGeneratedAttribute]
public void set_StatusDescription(string value);
    [CompilerGeneratedAttribute]
public long get_PlatformCode();
    [CompilerGeneratedAttribute]
public void set_PlatformCode(long value);
    [CompilerGeneratedAttribute]
public string get_PlatformDomain();
    [CompilerGeneratedAttribute]
public void set_PlatformDomain(string value);
    public static OperationStatus CreateSuccess();
}
internal enum Microsoft.Identity.Client.CacheV2.Impl.OperationStatusType : Enum {
    public int value__;
    public static OperationStatusType Success;
    public static OperationStatusType Failure;
    public static OperationStatusType RetriableError;
}
internal class Microsoft.Identity.Client.CacheV2.Impl.PathStorageWorker : object {
    public PathStorageWorker(ICachePathStorage fileIo, ICredentialPathManager credentialPathManager);
    public sealed virtual IEnumerable`1<Credential> ReadCredentials(string homeAccountId, string environment, string realm, string clientId, string familyId, string target, ISet`1<CredentialType> types);
    public sealed virtual void WriteCredentials(IEnumerable`1<Credential> credentials);
    public sealed virtual void DeleteCredentials(string homeAccountId, string environment, string realm, string clientId, string familyId, string target, ISet`1<CredentialType> types);
    public sealed virtual Account ReadAccount(string homeAccountId, string environment, string realm);
    public sealed virtual void WriteAccount(Account account);
    public sealed virtual void DeleteAccount(string homeAccountId, string environment, string realm);
    public sealed virtual void DeleteAccounts(string homeAccountId, string environment);
    public sealed virtual AppMetadata ReadAppMetadata(string environment, string clientId);
    public sealed virtual void WriteAppMetadata(AppMetadata appMetadata);
    public Credential FindAccessTokenWithScopes(JObject accessTokens, string target);
    internal HashSet`1<string> SplitAndNormalizeScopes(string target);
    public JObject Read(string relativePath);
    internal string GetCredentialPath(Credential credential);
    public void AddAccessTokenWithScopes(JObject accessTokens, JObject tokenToAdd);
    public void RemoveAccessTokenWithScopes(JObject accessTokens, string target);
    public void ReadModifyWrite(string relativePath, Func`2<JObject, JObject> modify);
    public Byte[] Encrypt(string input);
}
internal class Microsoft.Identity.Client.CacheV2.Impl.ReadAccountResponse : object {
    public Account Account { get; }
    public OperationStatus Status { get; }
    public ReadAccountResponse(Account account, OperationStatus status);
    [CompilerGeneratedAttribute]
public Account get_Account();
    [CompilerGeneratedAttribute]
public OperationStatus get_Status();
}
internal class Microsoft.Identity.Client.CacheV2.Impl.ReadAccountsResponse : object {
    public IEnumerable`1<Account> Accounts { get; }
    public OperationStatus Status { get; }
    public ReadAccountsResponse(IEnumerable`1<Account> accounts, OperationStatus status);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Account> get_Accounts();
    [CompilerGeneratedAttribute]
public OperationStatus get_Status();
}
internal class Microsoft.Identity.Client.CacheV2.Impl.ReadCredentialsResponse : object {
    public IEnumerable`1<Credential> Credentials { get; }
    public OperationStatus Status { get; }
    public ReadCredentialsResponse(IEnumerable`1<Credential> credentials, OperationStatus status);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Credential> get_Credentials();
    [CompilerGeneratedAttribute]
public OperationStatus get_Status();
}
internal class Microsoft.Identity.Client.CacheV2.Impl.StorageManager : object {
    public IAdalLegacyCacheManager AdalLegacyCacheManager { get; }
    public StorageManager(IPlatformProxy platformProxy, IStorageWorker storageWorker, IAdalLegacyCacheManager adalLegacyCacheManager);
    [CompilerGeneratedAttribute]
public sealed virtual IAdalLegacyCacheManager get_AdalLegacyCacheManager();
    public sealed virtual Byte[] Serialize();
    public sealed virtual void Deserialize(Byte[] serializedBytes);
    public sealed virtual ReadCredentialsResponse ReadCredentials(string correlationId, string homeAccountId, string environment, string realm, string clientId, string familyId, string target, ISet`1<CredentialType> types);
    public sealed virtual OperationStatus WriteCredentials(string correlationId, IEnumerable`1<Credential> credentials);
    public sealed virtual OperationStatus DeleteCredentials(string correlationId, string homeAccountId, string environment, string realm, string clientId, string familyId, string target, ISet`1<CredentialType> types);
    public sealed virtual ReadAccountsResponse ReadAllAccounts(string correlationId);
    public sealed virtual ReadAccountResponse ReadAccount(string correlationId, string homeAccountId, string environment, string realm);
    public sealed virtual OperationStatus WriteAccount(string correlationId, Account account);
    public sealed virtual OperationStatus DeleteAccount(string correlationId, string homeAccountId, string environment, string realm);
    public sealed virtual OperationStatus DeleteAccounts(string correlationId, string homeAccountId, string environment);
    public sealed virtual AppMetadata ReadAppMetadata(string environment, string clientId);
    public sealed virtual void WriteAppMetadata(AppMetadata appMetadata);
}
internal class Microsoft.Identity.Client.CacheV2.Impl.TokenResponse : object {
    public string AccessToken { get; }
    public DateTime ExpiresOn { get; }
    public DateTime ExtendedExpiresOn { get; }
    public ISet`1<string> GrantedScopes { get; }
    public ISet`1<string> DeclinedScopes { get; }
    public IdToken IdToken { get; public set; }
    public string RefreshToken { get; }
    public string RawClientInfo { get; }
    public string Uid { get; }
    public string Utid { get; }
    public bool HasAccessToken { get; }
    public bool HasRefreshToken { get; }
    public JObject ClientInfo { get; public set; }
    public TokenResponse(IdToken idToken, Credential accessToken, Credential refreshToken);
    public TokenResponse(MsalTokenResponse msalTokenResponse);
    public MsalTokenResponse ToMsalTokenResponse();
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    [CompilerGeneratedAttribute]
public DateTime get_ExpiresOn();
    [CompilerGeneratedAttribute]
public DateTime get_ExtendedExpiresOn();
    [CompilerGeneratedAttribute]
public ISet`1<string> get_GrantedScopes();
    [CompilerGeneratedAttribute]
public ISet`1<string> get_DeclinedScopes();
    [CompilerGeneratedAttribute]
public IdToken get_IdToken();
    [CompilerGeneratedAttribute]
public void set_IdToken(IdToken value);
    [CompilerGeneratedAttribute]
public string get_RefreshToken();
    public string get_RawClientInfo();
    public string get_Uid();
    public string get_Utid();
    public bool get_HasAccessToken();
    public bool get_HasRefreshToken();
    [CompilerGeneratedAttribute]
public JObject get_ClientInfo();
    [CompilerGeneratedAttribute]
public void set_ClientInfo(JObject value);
}
[ExtensionAttribute]
internal static class Microsoft.Identity.Client.CacheV2.Impl.Utils.Base32Hex : object {
    public static string ToBase32String(Byte[] input, bool addPadding);
    public static string EncodeAsBase32String(string input, bool addPadding);
    [ExtensionAttribute]
public static string DecodeFromBase32String(string input);
    [ExtensionAttribute]
public static Byte[] ToByteArray(string input);
}
[ExtensionAttribute]
internal static class Microsoft.Identity.Client.CacheV2.Impl.Utils.JObjectExtensions : object {
    [ExtensionAttribute]
public static bool IsEmpty(JObject json);
}
internal static class Microsoft.Identity.Client.CacheV2.Impl.Utils.PathUtils : object {
    public static string Normalize(string inputPath);
}
internal static class Microsoft.Identity.Client.CacheV2.Impl.Utils.ScopeUtils : object {
    public static HashSet`1<string> SplitScopes(string kvpKey);
    public static string JoinScopes(ISet`1<string> scopes);
}
internal static class Microsoft.Identity.Client.CacheV2.Impl.Utils.TimeUtils : object {
    public static long GetSecondsFromEpochNow();
}
[ExtensionAttribute]
internal static class Microsoft.Identity.Client.CacheV2.Impl.Utils.UriExtensions : object {
    [ExtensionAttribute]
public static string GetEnvironment(Uri uri);
    [ExtensionAttribute]
public static string GetRealm(Uri uri);
    [ExtensionAttribute]
public static string GetPath(Uri uri);
}
internal interface Microsoft.Identity.Client.CacheV2.ITokenCacheAdapter {
    public ITokenCache TokenCache { get; public set; }
    public abstract virtual ITokenCache get_TokenCache();
    public abstract virtual void set_TokenCache(ITokenCache value);
    public abstract virtual IEnumerable`1<IAccount> GetAccounts(string authority, bool validateAuthority, RequestContext requestContext);
    public abstract virtual void RemoveAccount(IAccount account, RequestContext requestContext);
    public abstract virtual bool TryReadCache(AuthenticationRequestParameters authenticationRequestParameters, MsalTokenResponse& msalTokenResponse, IAccount& account);
    public abstract virtual AuthenticationResult SaveAccessAndRefreshToken(AuthenticationRequestParameters authenticationRequestParameters, MsalTokenResponse msalTokenResponse);
    public abstract virtual Task`1<MsalAccessTokenCacheItem> FindAccessTokenAsync(AuthenticationRequestParameters authenticationRequestParameters);
    public abstract virtual MsalIdTokenCacheItem GetIdTokenCacheItem(MsalIdTokenCacheKey msalIdTokenCacheKey, RequestContext requestContext);
    public abstract virtual Task`1<MsalRefreshTokenCacheItem> FindRefreshTokenAsync(AuthenticationRequestParameters authenticationRequestParameters);
    public abstract virtual void SetKeychainSecurityGroup(string keychainSecurityGroup);
    public abstract virtual ICollection`1<string> GetAllAccessTokenCacheItems(RequestContext requestContext);
    public abstract virtual ICollection`1<MsalAccessTokenCacheItem> GetAllAccessTokensForClient(RequestContext requestContext);
    public abstract virtual ICollection`1<MsalAccountCacheItem> GetAllAccounts(RequestContext requestContext);
    public abstract virtual ICollection`1<string> GetAllAccountCacheItems(RequestContext requestContext);
    public abstract virtual ICollection`1<MsalIdTokenCacheItem> GetAllIdTokensForClient(RequestContext requestContext);
    public abstract virtual ICollection`1<string> GetAllIdTokenCacheItems(RequestContext requestContext);
    public abstract virtual ICollection`1<MsalRefreshTokenCacheItem> GetAllRefreshTokensForClient(RequestContext requestContext);
    public abstract virtual ICollection`1<string> GetAllRefreshTokenCacheItems(RequestContext requestContext);
    public abstract virtual void RemoveMsalAccount(IAccount account, RequestContext requestContext);
}
internal class Microsoft.Identity.Client.CacheV2.Schema.Account : object {
    public string HomeAccountId { get; public set; }
    public string Environment { get; public set; }
    public string Realm { get; public set; }
    public string LocalAccountId { get; public set; }
    public CacheV2AuthorityType AuthorityType { get; public set; }
    public string Username { get; public set; }
    public string GivenName { get; public set; }
    public string FamilyName { get; public set; }
    public string MiddleName { get; public set; }
    public string Name { get; public set; }
    public string AlternativeAccountId { get; public set; }
    public string ClientInfo { get; public set; }
    public string AdditionalFieldsJson { get; public set; }
    private string Microsoft.Identity.Client.IAccount.Username { get; }
    private string Microsoft.Identity.Client.IAccount.Environment { get; }
    private AccountId Microsoft.Identity.Client.IAccount.HomeAccountId { get; }
    [CompilerGeneratedAttribute]
public string get_HomeAccountId();
    [CompilerGeneratedAttribute]
public void set_HomeAccountId(string value);
    [CompilerGeneratedAttribute]
public string get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(string value);
    [CompilerGeneratedAttribute]
public string get_Realm();
    [CompilerGeneratedAttribute]
public void set_Realm(string value);
    [CompilerGeneratedAttribute]
public string get_LocalAccountId();
    [CompilerGeneratedAttribute]
public void set_LocalAccountId(string value);
    [CompilerGeneratedAttribute]
public CacheV2AuthorityType get_AuthorityType();
    [CompilerGeneratedAttribute]
public void set_AuthorityType(CacheV2AuthorityType value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_GivenName();
    [CompilerGeneratedAttribute]
public void set_GivenName(string value);
    [CompilerGeneratedAttribute]
public string get_FamilyName();
    [CompilerGeneratedAttribute]
public void set_FamilyName(string value);
    [CompilerGeneratedAttribute]
public string get_MiddleName();
    [CompilerGeneratedAttribute]
public void set_MiddleName(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_AlternativeAccountId();
    [CompilerGeneratedAttribute]
public void set_AlternativeAccountId(string value);
    [CompilerGeneratedAttribute]
public string get_ClientInfo();
    [CompilerGeneratedAttribute]
public void set_ClientInfo(string value);
    [CompilerGeneratedAttribute]
public string get_AdditionalFieldsJson();
    [CompilerGeneratedAttribute]
public void set_AdditionalFieldsJson(string value);
    private sealed virtual override string Microsoft.Identity.Client.IAccount.get_Username();
    private sealed virtual override string Microsoft.Identity.Client.IAccount.get_Environment();
    private sealed virtual override AccountId Microsoft.Identity.Client.IAccount.get_HomeAccountId();
    public static Account CreateEmpty();
    public static Account Create(string homeAccountId, string environment, string realm, string localAccountId, CacheV2AuthorityType authorityType, string userName, string givenName, string familyName, string middleName, string name, string alternativeAccountId, string clientInfo, string additionalFieldsJson);
}
internal class Microsoft.Identity.Client.CacheV2.Schema.AppMetadata : object {
    public string Environment { get; }
    public string ClientId { get; }
    public string FamilyId { get; }
    public AppMetadata(string environment, string clientId, string familyId);
    [CompilerGeneratedAttribute]
public string get_Environment();
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public string get_FamilyId();
}
internal enum Microsoft.Identity.Client.CacheV2.Schema.CacheV2AuthorityType : Enum {
    public int value__;
    public static CacheV2AuthorityType MsSts;
    public static CacheV2AuthorityType Adfs;
    public static CacheV2AuthorityType Msa;
    public static CacheV2AuthorityType Other;
}
internal class Microsoft.Identity.Client.CacheV2.Schema.Credential : object {
    public string HomeAccountId { get; public set; }
    public string Environment { get; public set; }
    public string Realm { get; public set; }
    public CredentialType CredentialType { get; public set; }
    public string ClientId { get; public set; }
    public string FamilyId { get; public set; }
    public string Target { get; public set; }
    public long CachedAt { get; public set; }
    public long ExpiresOn { get; public set; }
    public long ExtendedExpiresOn { get; public set; }
    public string Secret { get; public set; }
    public string AdditionalFieldsJson { get; public set; }
    [CompilerGeneratedAttribute]
public string get_HomeAccountId();
    [CompilerGeneratedAttribute]
public void set_HomeAccountId(string value);
    [CompilerGeneratedAttribute]
public string get_Environment();
    [CompilerGeneratedAttribute]
public void set_Environment(string value);
    [CompilerGeneratedAttribute]
public string get_Realm();
    [CompilerGeneratedAttribute]
public void set_Realm(string value);
    [CompilerGeneratedAttribute]
public CredentialType get_CredentialType();
    [CompilerGeneratedAttribute]
public void set_CredentialType(CredentialType value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public string get_FamilyId();
    [CompilerGeneratedAttribute]
public void set_FamilyId(string value);
    [CompilerGeneratedAttribute]
public string get_Target();
    [CompilerGeneratedAttribute]
public void set_Target(string value);
    [CompilerGeneratedAttribute]
public long get_CachedAt();
    [CompilerGeneratedAttribute]
public void set_CachedAt(long value);
    [CompilerGeneratedAttribute]
public long get_ExpiresOn();
    [CompilerGeneratedAttribute]
public void set_ExpiresOn(long value);
    [CompilerGeneratedAttribute]
public long get_ExtendedExpiresOn();
    [CompilerGeneratedAttribute]
public void set_ExtendedExpiresOn(long value);
    [CompilerGeneratedAttribute]
public string get_Secret();
    [CompilerGeneratedAttribute]
public void set_Secret(string value);
    public string get_AdditionalFieldsJson();
    public void set_AdditionalFieldsJson(string value);
    public sealed virtual bool Equals(Credential other);
    public static Credential CreateEmpty();
    public static Credential CreateAccessToken(string homeAccountId, string environment, string realm, string clientId, string target, long cachedAt, long expiresOn, long extendedExpiresOn, string secret, string additionalFieldsJson);
    public static Credential CreateIdToken(string homeAccountId, string environment, string realm, string clientId, long cachedAt, string secret, string additionalFieldsJson);
    public static Credential CreateRefreshToken(string homeAccountId, string environment, string clientId, long cachedAt, string secret, string additionalFieldsJson);
    public static Credential CreateFamilyRefreshToken(string homeAccountId, string environment, string clientId, string familyId, long cachedAt, string secret, string additionalFieldsJson);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Credential left, Credential right);
    public static bool op_Inequality(Credential left, Credential right);
    public virtual string ToString();
}
internal enum Microsoft.Identity.Client.CacheV2.Schema.CredentialType : Enum {
    public int value__;
    public static CredentialType OAuth2AccessToken;
    public static CredentialType OAuth2RefreshToken;
    public static CredentialType OidcIdToken;
    public static CredentialType Other;
}
internal static class Microsoft.Identity.Client.CacheV2.Schema.StorageJsonUtils : object {
    public static JObject CredentialToJson(Credential credential);
    public static string CredentialTypeToString(CredentialType credentialType);
    public static Credential CredentialFromJson(JObject credentialJson);
    public static CredentialType CredentialTypeToEnum(string credentialTypeString);
    public static JObject AccountToJson(Account account);
    public static Account AccountFromJson(JObject accountJson);
    public static JObject AppMetadataToJson(AppMetadata appMetadata);
    public static AppMetadata AppMetadataFromJson(JObject appMetadataJson);
}
public abstract class Microsoft.Identity.Client.ClientApplicationBase : object {
    internal static string DefaultAuthority;
    internal IServiceBundle ServiceBundle { get; }
    public IAppConfig AppConfig { get; }
    public string Authority { get; }
    public ITokenCache UserTokenCache { get; }
    internal ITokenCacheInternal UserTokenCacheInternal { get; internal set; }
    [EditorBrowsableAttribute("1")]
[DebuggerBrowsableAttribute("0")]
[ObsoleteAttribute("Use GetAccountsAsync instead (See https://aka.ms/msal-net-2-released)", "True")]
public IEnumerable`1<IUser> Users { get; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use WithComponent on AbstractApplicationBuilder<T> to configure this instead.See https://aka.ms/msal-net-3-breaking-changes", "True")]
public string Component { get; public set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use ExtraQueryParameters on each call instead.See https://aka.ms/msal-net-3-breaking-changes", "True")]
public string SliceParameters { get; public set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Can be set on AbstractApplicationBuilder<T>.WithAuthority as needed.See https://aka.ms/msal-net-3-breaking-changes", "True")]
public bool ValidateAuthority { get; public set; }
    [ObsoleteAttribute("Should be set using AbstractApplicationBuilder<T>.WithRedirectUri and can be viewed with ClientApplicationBase.AppConfig.RedirectUri.See https://aka.ms/msal-net-3-breaking-changes", "True")]
public string RedirectUri { get; public set; }
    [ObsoleteAttribute("Use AppConfig.ClientId instead.See https://aka.ms/msal-net-3-breaking-changes", "True")]
public string ClientId { get; }
    internal ClientApplicationBase(ApplicationConfiguration config);
    [CompilerGeneratedAttribute]
internal IServiceBundle get_ServiceBundle();
    public sealed virtual IAppConfig get_AppConfig();
    public sealed virtual string get_Authority();
    public sealed virtual ITokenCache get_UserTokenCache();
    [CompilerGeneratedAttribute]
internal ITokenCacheInternal get_UserTokenCacheInternal();
    [CompilerGeneratedAttribute]
internal void set_UserTokenCacheInternal(ITokenCacheInternal value);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.ClientApplicationBase/<GetAccountsAsync>d__15")]
public sealed virtual Task`1<IEnumerable`1<IAccount>> GetAccountsAsync();
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.ClientApplicationBase/<GetAccountAsync>d__16")]
public sealed virtual Task`1<IAccount> GetAccountAsync(string accountId);
    public sealed virtual Task RemoveAsync(IAccount account);
    internal static Authority GetAuthority(IServiceBundle serviceBundle, IAccount account);
    internal virtual AuthenticationRequestParameters CreateRequestParameters(AcquireTokenCommonParameters commonParameters, RequestContext requestContext, ITokenCacheInternal cache);
    public sealed virtual AcquireTokenSilentParameterBuilder AcquireTokenSilent(IEnumerable`1<string> scopes, IAccount account);
    public sealed virtual AcquireTokenSilentParameterBuilder AcquireTokenSilent(IEnumerable`1<string> scopes, string loginHint);
    public sealed virtual IEnumerable`1<IUser> get_Users();
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use GetAccountAsync instead and pass IAccount.HomeAccountId.Identifier (See https://aka.ms/msal-net-2-released)", "True")]
public sealed virtual IUser GetUser(string identifier);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use RemoveAccountAsync instead (See https://aka.ms/msal-net-2-released)", "True")]
public sealed virtual void Remove(IUser user);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Component();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Component(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SliceParameters();
    [CompilerGeneratedAttribute]
public sealed virtual void set_SliceParameters(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_ValidateAuthority();
    [CompilerGeneratedAttribute]
public void set_ValidateAuthority(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RedirectUri();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RedirectUri(string value);
    public sealed virtual string get_ClientId();
    [ObsoleteAttribute("Use AcquireTokenSilent instead.See https://aka.ms/msal-net-3-breaking-changes", "True")]
public sealed virtual Task`1<AuthenticationResult> AcquireTokenSilentAsync(IEnumerable`1<string> scopes, IAccount account, string authority, bool forceRefresh);
    [ObsoleteAttribute("Use AcquireTokenSilent instead.See https://aka.ms/msal-net-3-breaking-changes", "True")]
public sealed virtual Task`1<AuthenticationResult> AcquireTokenSilentAsync(IEnumerable`1<string> scopes, IAccount account);
}
[ObsoleteAttribute("Use ConfidentialClientApplicationBuilder.WithCertificate instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public class Microsoft.Identity.Client.ClientAssertionCertificate : object {
    public static int MinKeySizeInBits { get; }
    public X509Certificate2 Certificate { get; }
    internal string Thumbprint { get; }
    public ClientAssertionCertificate(X509Certificate2 certificate);
    public static int get_MinKeySizeInBits();
    public X509Certificate2 get_Certificate();
    internal Byte[] Sign(ICryptographyManager cryptographyManager, string message);
    internal string get_Thumbprint();
}
[ObsoleteAttribute("Use ConfidentialClientApplicationBuilder.WithCertificate or WithClientSecret instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public class Microsoft.Identity.Client.ClientCredential : object {
    internal ClientAssertionCertificate Certificate { get; }
    internal string Assertion { get; internal set; }
    internal long ValidTo { get; internal set; }
    internal bool ContainsX5C { get; internal set; }
    internal string Audience { get; internal set; }
    internal string Secret { get; }
    public ClientCredential(ClientAssertionCertificate certificate);
    public ClientCredential(string secret);
    internal ClientAssertionCertificate get_Certificate();
    internal string get_Assertion();
    internal void set_Assertion(string value);
    internal long get_ValidTo();
    internal void set_ValidTo(long value);
    internal bool get_ContainsX5C();
    internal void set_ContainsX5C(bool value);
    internal string get_Audience();
    internal void set_Audience(string value);
    internal string get_Secret();
}
public class Microsoft.Identity.Client.ConfidentialClientApplication : ClientApplicationBase {
    internal ClientCredentialWrapper ClientCredential { get; }
    public ITokenCache AppTokenCache { get; }
    internal ITokenCacheInternal AppTokenCacheInternal { get; internal set; }
    internal ConfidentialClientApplication(ApplicationConfiguration configuration);
    [ObsoleteAttribute("Use ConfidentialClientApplicationBuilder instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public ConfidentialClientApplication(string clientId, string redirectUri, ClientCredential clientCredential, TokenCache userTokenCache, TokenCache appTokenCache);
    [ObsoleteAttribute("Use ConfidentialClientApplicationBuilder instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public ConfidentialClientApplication(string clientId, string authority, string redirectUri, ClientCredential clientCredential, TokenCache userTokenCache, TokenCache appTokenCache);
    public sealed virtual AcquireTokenByAuthorizationCodeParameterBuilder AcquireTokenByAuthorizationCode(IEnumerable`1<string> scopes, string authorizationCode);
    public sealed virtual AcquireTokenForClientParameterBuilder AcquireTokenForClient(IEnumerable`1<string> scopes);
    public sealed virtual AcquireTokenOnBehalfOfParameterBuilder AcquireTokenOnBehalfOf(IEnumerable`1<string> scopes, UserAssertion userAssertion);
    public sealed virtual GetAuthorizationRequestUrlParameterBuilder GetAuthorizationRequestUrl(IEnumerable`1<string> scopes);
    private sealed virtual override AcquireTokenByRefreshTokenParameterBuilder Microsoft.Identity.Client.IByRefreshToken.AcquireTokenByRefreshToken(IEnumerable`1<string> scopes, string refreshToken);
    internal ClientCredentialWrapper get_ClientCredential();
    public sealed virtual ITokenCache get_AppTokenCache();
    [CompilerGeneratedAttribute]
internal ITokenCacheInternal get_AppTokenCacheInternal();
    [CompilerGeneratedAttribute]
internal void set_AppTokenCacheInternal(ITokenCacheInternal value);
    internal virtual AuthenticationRequestParameters CreateRequestParameters(AcquireTokenCommonParameters commonParameters, RequestContext requestContext, ITokenCacheInternal cache);
    internal static void GuardMobileFrameworks();
    [ObsoleteAttribute("Use AcquireTokenOnBehalfOf instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public sealed virtual Task`1<AuthenticationResult> AcquireTokenOnBehalfOfAsync(IEnumerable`1<string> scopes, UserAssertion userAssertion);
    [ObsoleteAttribute("Use AcquireTokenOnBehalfOf instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public sealed virtual Task`1<AuthenticationResult> AcquireTokenOnBehalfOfAsync(IEnumerable`1<string> scopes, UserAssertion userAssertion, string authority);
    [ObsoleteAttribute("Use AcquireTokenOnBehalfOf instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
private sealed virtual override Task`1<AuthenticationResult> Microsoft.Identity.Client.IConfidentialClientApplicationWithCertificate.AcquireTokenOnBehalfOfWithCertificateAsync(IEnumerable`1<string> scopes, UserAssertion userAssertion);
    [ObsoleteAttribute("Use AcquireTokenOnBehalfOf instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
private sealed virtual override Task`1<AuthenticationResult> Microsoft.Identity.Client.IConfidentialClientApplicationWithCertificate.AcquireTokenOnBehalfOfWithCertificateAsync(IEnumerable`1<string> scopes, UserAssertion userAssertion, string authority);
    [ObsoleteAttribute("Use AcquireTokenByAuthorizationCode instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public sealed virtual Task`1<AuthenticationResult> AcquireTokenByAuthorizationCodeAsync(string authorizationCode, IEnumerable`1<string> scopes);
    [ObsoleteAttribute("Use AcquireTokenForClient instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public sealed virtual Task`1<AuthenticationResult> AcquireTokenForClientAsync(IEnumerable`1<string> scopes);
    [ObsoleteAttribute("Use AcquireTokenForClient instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public sealed virtual Task`1<AuthenticationResult> AcquireTokenForClientAsync(IEnumerable`1<string> scopes, bool forceRefresh);
    [ObsoleteAttribute("Use AcquireTokenForClient instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
private sealed virtual override Task`1<AuthenticationResult> Microsoft.Identity.Client.IConfidentialClientApplicationWithCertificate.AcquireTokenForClientWithCertificateAsync(IEnumerable`1<string> scopes);
    [ObsoleteAttribute("Use AcquireTokenForClient instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
private sealed virtual override Task`1<AuthenticationResult> Microsoft.Identity.Client.IConfidentialClientApplicationWithCertificate.AcquireTokenForClientWithCertificateAsync(IEnumerable`1<string> scopes, bool forceRefresh);
    [ObsoleteAttribute("Use AcquireTokenByRefreshToken instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
private sealed virtual override Task`1<AuthenticationResult> Microsoft.Identity.Client.IByRefreshToken.AcquireTokenByRefreshTokenAsync(IEnumerable`1<string> scopes, string refreshToken);
    [ObsoleteAttribute("Use GetAuthorizationRequestUrl instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public sealed virtual Task`1<Uri> GetAuthorizationRequestUrlAsync(IEnumerable`1<string> scopes, string loginHint, string extraQueryParameters);
    [ObsoleteAttribute("Use GetAuthorizationRequestUrl instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public sealed virtual Task`1<Uri> GetAuthorizationRequestUrlAsync(IEnumerable`1<string> scopes, string redirectUri, string loginHint, string extraQueryParameters, IEnumerable`1<string> extraScopesToConsent, string authority);
}
public class Microsoft.Identity.Client.ConfidentialClientApplicationBuilder : AbstractApplicationBuilder`1<ConfidentialClientApplicationBuilder> {
    internal ConfidentialClientApplicationBuilder(ApplicationConfiguration configuration);
    public static ConfidentialClientApplicationBuilder CreateWithApplicationOptions(ConfidentialClientApplicationOptions options);
    public static ConfidentialClientApplicationBuilder Create(string clientId);
    public ConfidentialClientApplicationBuilder WithCertificate(X509Certificate2 certificate);
    public ConfidentialClientApplicationBuilder WithClientSecret(string clientSecret);
    internal virtual void Validate();
    public IConfidentialClientApplication Build();
    internal ConfidentialClientApplication BuildConcrete();
}
public class Microsoft.Identity.Client.ConfidentialClientApplicationOptions : ApplicationOptions {
    public string ClientSecret { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ClientSecret();
    [CompilerGeneratedAttribute]
public void set_ClientSecret(string value);
}
[DataContractAttribute]
internal class Microsoft.Identity.Client.Core.ClientInfo : object {
    [DataMemberAttribute]
public string UniqueObjectIdentifier { get; public set; }
    [DataMemberAttribute]
public string UniqueTenantIdentifier { get; public set; }
    [CompilerGeneratedAttribute]
public string get_UniqueObjectIdentifier();
    [CompilerGeneratedAttribute]
public void set_UniqueObjectIdentifier(string value);
    [CompilerGeneratedAttribute]
public string get_UniqueTenantIdentifier();
    [CompilerGeneratedAttribute]
public void set_UniqueTenantIdentifier(string value);
    public static ClientInfo CreateFromJson(string clientInfo);
    public string ToEncodedJson();
    public string ToAccountIdentifier();
}
internal static class Microsoft.Identity.Client.Core.ClientInfoClaim : object {
    public static string UniqueIdentifier;
    public static string UniqueTenantIdentifier;
}
internal static class Microsoft.Identity.Client.Core.Constants : object {
    public static string MsAppScheme;
    public static int ExpirationMarginInMinutes;
    public static int CodeVerifierLength;
    public static int CodeVerifierByteSize;
    public static string UapWEBRedirectUri;
    public static string DefaultRedirectUri;
    public static string DefaultConfidentialClientRedirectUri;
    public static string DefaultRealm;
    public static string WellKnownOpenIdConfigurationPath;
    public static string OpenIdConfigurationEndpoint;
    public static string FormatEnterpriseRegistrationOnPremiseUri(string domain);
    public static string FormatEnterpriseRegistrationInternetUri(string domain);
    public static string FormatAdfsWebFingerUrl(string host, string resource);
}
internal interface Microsoft.Identity.Client.Core.ICoreLogger {
    public Guid CorrelationId { get; }
    public string ClientName { get; }
    public string ClientVersion { get; }
    public bool PiiLoggingEnabled { get; }
    public abstract virtual Guid get_CorrelationId();
    public abstract virtual string get_ClientName();
    public abstract virtual string get_ClientVersion();
    public abstract virtual bool get_PiiLoggingEnabled();
    public abstract virtual void Error(string messageScrubbed);
    public abstract virtual void ErrorPii(string messageWithPii, string messageScrubbed);
    public abstract virtual void ErrorPii(Exception exWithPii);
    public abstract virtual void ErrorPiiWithPrefix(Exception exWithPii, string prefix);
    public abstract virtual void Warning(string messageScrubbed);
    public abstract virtual void WarningPii(string messageWithPii, string messageScrubbed);
    public abstract virtual void WarningPii(Exception exWithPii);
    public abstract virtual void WarningPiiWithPrefix(Exception exWithPii, string prefix);
    public abstract virtual void Info(string messageScrubbed);
    public abstract virtual void InfoPii(string messageWithPii, string messageScrubbed);
    public abstract virtual void InfoPii(Exception exWithPii);
    public abstract virtual void InfoPiiWithPrefix(Exception exWithPii, string prefix);
    public abstract virtual void Verbose(string messageScrubbed);
    public abstract virtual void VerbosePii(string messageWithPii, string messageScrubbed);
}
[DataContractAttribute]
internal class Microsoft.Identity.Client.Core.IdToken : object {
    [DataMemberAttribute]
public string Issuer { get; public set; }
    [DataMemberAttribute]
public string ObjectId { get; public set; }
    [DataMemberAttribute]
public string Subject { get; public set; }
    [DataMemberAttribute]
public string TenantId { get; public set; }
    [DataMemberAttribute]
public string Version { get; public set; }
    [DataMemberAttribute]
public string PreferredUsername { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string HomeObjectId { get; public set; }
    [DataMemberAttribute]
public string GivenName { get; public set; }
    [DataMemberAttribute]
public string FamilyName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Issuer();
    [CompilerGeneratedAttribute]
public void set_Issuer(string value);
    [CompilerGeneratedAttribute]
public string get_ObjectId();
    [CompilerGeneratedAttribute]
public void set_ObjectId(string value);
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(string value);
    [CompilerGeneratedAttribute]
public string get_TenantId();
    [CompilerGeneratedAttribute]
public void set_TenantId(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_PreferredUsername();
    [CompilerGeneratedAttribute]
public void set_PreferredUsername(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_HomeObjectId();
    [CompilerGeneratedAttribute]
public void set_HomeObjectId(string value);
    [CompilerGeneratedAttribute]
public string get_GivenName();
    [CompilerGeneratedAttribute]
public void set_GivenName(string value);
    [CompilerGeneratedAttribute]
public string get_FamilyName();
    [CompilerGeneratedAttribute]
public void set_FamilyName(string value);
    public static IdToken Parse(string idToken);
    public string GetUniqueId();
}
internal class Microsoft.Identity.Client.Core.IdTokenClaim : object {
    public static string Issuer;
    public static string ObjectId;
    public static string Subject;
    public static string TenantId;
    public static string Version;
    public static string PreferredUsername;
    public static string Name;
    public static string HomeObjectId;
    public static string GivenName;
    public static string FamilyName;
}
internal interface Microsoft.Identity.Client.Core.IServiceBundle {
    public IApplicationConfiguration Config { get; }
    public ICoreLogger DefaultLogger { get; }
    public IHttpManager HttpManager { get; }
    public ITelemetryManager TelemetryManager { get; }
    public IAadInstanceDiscovery AadInstanceDiscovery { get; }
    public IPlatformProxy PlatformProxy { get; }
    public IWsTrustWebRequestManager WsTrustWebRequestManager { get; }
    public IAuthorityEndpointResolutionManager AuthorityEndpointResolutionManager { get; }
    public IMatsTelemetryClient Mats { get; }
    public abstract virtual IApplicationConfiguration get_Config();
    public abstract virtual ICoreLogger get_DefaultLogger();
    public abstract virtual IHttpManager get_HttpManager();
    public abstract virtual ITelemetryManager get_TelemetryManager();
    public abstract virtual IAadInstanceDiscovery get_AadInstanceDiscovery();
    public abstract virtual IPlatformProxy get_PlatformProxy();
    public abstract virtual IWsTrustWebRequestManager get_WsTrustWebRequestManager();
    public abstract virtual IAuthorityEndpointResolutionManager get_AuthorityEndpointResolutionManager();
    public abstract virtual IMatsTelemetryClient get_Mats();
}
internal static class Microsoft.Identity.Client.Core.MsalIdHelper : object {
    public static IDictionary`2<string, string> GetMsalIdParameters(ICoreLogger logger);
    public static string GetMsalVersion();
}
internal static class Microsoft.Identity.Client.Core.MsalIdParameter : object {
    public static string Product;
    public static string Version;
    public static string CpuPlatform;
    public static string OS;
    public static string DeviceModel;
}
internal class Microsoft.Identity.Client.Core.RequestContext : object {
    public string TelemetryCorrelationId { get; }
    public string ClientId { get; public set; }
    public ICoreLogger Logger { get; public set; }
    public RequestContext(string clientId, ICoreLogger logger, Guid telemetryCorrelationId);
    [CompilerGeneratedAttribute]
public string get_TelemetryCorrelationId();
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public ICoreLogger get_Logger();
    [CompilerGeneratedAttribute]
public void set_Logger(ICoreLogger value);
    public static RequestContext CreateForTest(IServiceBundle serviceBundle);
}
internal class Microsoft.Identity.Client.Core.ServiceBundle : object {
    public ICoreLogger DefaultLogger { get; }
    public IHttpManager HttpManager { get; }
    public ITelemetryManager TelemetryManager { get; }
    public IAadInstanceDiscovery AadInstanceDiscovery { get; }
    public IWsTrustWebRequestManager WsTrustWebRequestManager { get; }
    public IAuthorityEndpointResolutionManager AuthorityEndpointResolutionManager { get; }
    public IPlatformProxy PlatformProxy { get; }
    public IApplicationConfiguration Config { get; }
    public IMatsTelemetryClient Mats { get; }
    internal ServiceBundle(ApplicationConfiguration config, bool shouldClearCaches);
    [CompilerGeneratedAttribute]
public sealed virtual ICoreLogger get_DefaultLogger();
    [CompilerGeneratedAttribute]
public sealed virtual IHttpManager get_HttpManager();
    [CompilerGeneratedAttribute]
public sealed virtual ITelemetryManager get_TelemetryManager();
    [CompilerGeneratedAttribute]
public sealed virtual IAadInstanceDiscovery get_AadInstanceDiscovery();
    [CompilerGeneratedAttribute]
public sealed virtual IWsTrustWebRequestManager get_WsTrustWebRequestManager();
    [CompilerGeneratedAttribute]
public sealed virtual IAuthorityEndpointResolutionManager get_AuthorityEndpointResolutionManager();
    [CompilerGeneratedAttribute]
public sealed virtual IPlatformProxy get_PlatformProxy();
    [CompilerGeneratedAttribute]
public sealed virtual IApplicationConfiguration get_Config();
    [CompilerGeneratedAttribute]
public sealed virtual IMatsTelemetryClient get_Mats();
    public static ServiceBundle Create(ApplicationConfiguration config);
}
internal static class Microsoft.Identity.Client.Core.XmlNamespace : object {
    public static XNamespace Wsdl;
    public static XNamespace Wsp;
    public static XNamespace Http;
    public static XNamespace Sp;
    public static XNamespace Sp2005;
    public static XNamespace Wsu;
    public static XNamespace Soap12;
    public static XNamespace Wsa10;
    public static XNamespace Trust;
    public static XNamespace Trust2005;
    public static XNamespace Issue;
    public static XNamespace Issue2005;
    public static XNamespace SoapEnvelope;
}
public class Microsoft.Identity.Client.DeviceCodeResult : object {
    public string UserCode { get; }
    public string DeviceCode { get; }
    public string VerificationUrl { get; }
    public DateTimeOffset ExpiresOn { get; }
    public long Interval { get; }
    public string Message { get; }
    public string ClientId { get; }
    public IReadOnlyCollection`1<string> Scopes { get; }
    internal DeviceCodeResult(string userCode, string deviceCode, string verificationUrl, DateTimeOffset expiresOn, long interval, string message, string clientId, ISet`1<string> scopes);
    [CompilerGeneratedAttribute]
public string get_UserCode();
    [CompilerGeneratedAttribute]
public string get_DeviceCode();
    [CompilerGeneratedAttribute]
public string get_VerificationUrl();
    [CompilerGeneratedAttribute]
public DateTimeOffset get_ExpiresOn();
    [CompilerGeneratedAttribute]
public long get_Interval();
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public IReadOnlyCollection`1<string> get_Scopes();
}
[ExtensionAttribute]
public static class Microsoft.Identity.Client.Extensibility.AcquireTokenInteractiveParameterBuilderExtensions : object {
    [ExtensionAttribute]
public static AcquireTokenInteractiveParameterBuilder WithCustomWebUi(AcquireTokenInteractiveParameterBuilder builder, ICustomWebUi customWebUi);
}
public interface Microsoft.Identity.Client.Extensibility.ICustomWebUi {
    public abstract virtual Task`1<Uri> AcquireAuthorizationCodeAsync(Uri authorizationUri, Uri redirectUri, CancellationToken cancellationToken);
}
public class Microsoft.Identity.Client.Extensibility.MsalExtensionException : MsalException {
    public MsalExtensionException(string message);
    public MsalExtensionException(string message, Exception innerException);
}
public class Microsoft.Identity.Client.GetAuthorizationRequestUrlParameterBuilder : AbstractConfidentialClientAcquireTokenParameterBuilder`1<GetAuthorizationRequestUrlParameterBuilder> {
    internal ApiTelemetryId ApiTelemetryId { get; }
    internal GetAuthorizationRequestUrlParameterBuilder(IConfidentialClientApplicationExecutor confidentialClientApplicationexecutor);
    internal virtual ApiTelemetryId get_ApiTelemetryId();
    internal static GetAuthorizationRequestUrlParameterBuilder Create(IConfidentialClientApplicationExecutor confidentialClientApplicationExecutor, IEnumerable`1<string> scopes);
    public GetAuthorizationRequestUrlParameterBuilder WithRedirectUri(string redirectUri);
    public GetAuthorizationRequestUrlParameterBuilder WithLoginHint(string loginHint);
    public GetAuthorizationRequestUrlParameterBuilder WithAccount(IAccount account);
    public GetAuthorizationRequestUrlParameterBuilder WithExtraScopesToConsent(IEnumerable`1<string> extraScopesToConsent);
    internal virtual Task`1<AuthenticationResult> ExecuteInternalAsync(CancellationToken cancellationToken);
    public Task`1<Uri> ExecuteAsync(CancellationToken cancellationToken);
    internal virtual ApiIds CalculateApiEventId();
}
internal class Microsoft.Identity.Client.Http.HttpClientFactory : object {
    public static long MaxResponseContentBufferSizeInBytes;
    public sealed virtual HttpClient GetHttpClient();
}
internal class Microsoft.Identity.Client.Http.HttpManager : object {
    public HttpManager(IMsalHttpClientFactory httpClientFactory);
    protected virtual HttpClient GetHttpClient();
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Http.HttpManager/<SendPostAsync>d__3")]
public sealed virtual Task`1<HttpResponse> SendPostAsync(Uri endpoint, IDictionary`2<string, string> headers, IDictionary`2<string, string> bodyParameters, RequestContext requestContext);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Http.HttpManager/<SendPostAsync>d__4")]
public sealed virtual Task`1<HttpResponse> SendPostAsync(Uri endpoint, IDictionary`2<string, string> headers, HttpContent body, RequestContext requestContext);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Http.HttpManager/<SendGetAsync>d__5")]
public sealed virtual Task`1<HttpResponse> SendGetAsync(Uri endpoint, IDictionary`2<string, string> headers, RequestContext requestContext);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Http.HttpManager/<SendPostForceResponseAsync>d__6")]
public sealed virtual Task`1<HttpResponse> SendPostForceResponseAsync(Uri uri, Dictionary`2<string, string> headers, StringContent body, RequestContext requestContext);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Http.HttpManager/<CreateResponseAsync>d__10")]
internal static Task`1<HttpResponse> CreateResponseAsync(HttpResponseMessage response);
}
internal class Microsoft.Identity.Client.Http.HttpResponse : object {
    public HttpResponseHeaders Headers { get; public set; }
    public IDictionary`2<string, string> HeadersAsDictionary { get; }
    public HttpStatusCode StatusCode { get; public set; }
    public string UserAgent { get; public set; }
    public string Body { get; public set; }
    [CompilerGeneratedAttribute]
public HttpResponseHeaders get_Headers();
    [CompilerGeneratedAttribute]
public void set_Headers(HttpResponseHeaders value);
    public IDictionary`2<string, string> get_HeadersAsDictionary();
    [CompilerGeneratedAttribute]
public HttpStatusCode get_StatusCode();
    [CompilerGeneratedAttribute]
public void set_StatusCode(HttpStatusCode value);
    [CompilerGeneratedAttribute]
public string get_UserAgent();
    [CompilerGeneratedAttribute]
public void set_UserAgent(string value);
    [CompilerGeneratedAttribute]
public string get_Body();
    [CompilerGeneratedAttribute]
public void set_Body(string value);
}
internal interface Microsoft.Identity.Client.Http.IHttpManager {
    public abstract virtual Task`1<HttpResponse> SendPostAsync(Uri endpoint, IDictionary`2<string, string> headers, IDictionary`2<string, string> bodyParameters, RequestContext requestContext);
    public abstract virtual Task`1<HttpResponse> SendPostAsync(Uri endpoint, IDictionary`2<string, string> headers, HttpContent body, RequestContext requestContext);
    public abstract virtual Task`1<HttpResponse> SendGetAsync(Uri endpoint, IDictionary`2<string, string> headers, RequestContext requestContext);
    public abstract virtual Task`1<HttpResponse> SendPostForceResponseAsync(Uri uri, Dictionary`2<string, string> headers, StringContent body, RequestContext requestContext);
}
internal class Microsoft.Identity.Client.Http.RedirectUriHelper : object {
    public static void Validate(Uri redirectUri, bool usesSystemBrowser);
}
public interface Microsoft.Identity.Client.IAccount {
    public string Username { get; }
    public string Environment { get; }
    public AccountId HomeAccountId { get; }
    public abstract virtual string get_Username();
    public abstract virtual string get_Environment();
    public abstract virtual AccountId get_HomeAccountId();
}
public interface Microsoft.Identity.Client.IAppConfig {
    public string ClientId { get; }
    public bool EnablePiiLogging { get; }
    public IMsalHttpClientFactory HttpClientFactory { get; }
    public LogLevel LogLevel { get; }
    public bool IsDefaultPlatformLoggingEnabled { get; }
    public string RedirectUri { get; }
    public string TenantId { get; }
    public LogCallback LoggingCallback { get; }
    public TelemetryCallback TelemetryCallback { get; }
    public IDictionary`2<string, string> ExtraQueryParameters { get; }
    public bool IsBrokerEnabled { get; }
    public string ClientName { get; }
    public string ClientVersion { get; }
    public string ClientSecret { get; }
    public X509Certificate2 ClientCredentialCertificate { get; }
    public abstract virtual string get_ClientId();
    public abstract virtual bool get_EnablePiiLogging();
    public abstract virtual IMsalHttpClientFactory get_HttpClientFactory();
    public abstract virtual LogLevel get_LogLevel();
    public abstract virtual bool get_IsDefaultPlatformLoggingEnabled();
    public abstract virtual string get_RedirectUri();
    public abstract virtual string get_TenantId();
    public abstract virtual LogCallback get_LoggingCallback();
    public abstract virtual TelemetryCallback get_TelemetryCallback();
    public abstract virtual IDictionary`2<string, string> get_ExtraQueryParameters();
    public abstract virtual bool get_IsBrokerEnabled();
    public abstract virtual string get_ClientName();
    public abstract virtual string get_ClientVersion();
    public abstract virtual string get_ClientSecret();
    public abstract virtual X509Certificate2 get_ClientCredentialCertificate();
}
internal interface Microsoft.Identity.Client.IApplicationConfiguration {
    public bool IsExtendedTokenLifetimeEnabled { get; }
    public AuthorityInfo AuthorityInfo { get; }
    public ClientCredentialWrapper ClientCredential { get; }
    public abstract virtual bool get_IsExtendedTokenLifetimeEnabled();
    public abstract virtual AuthorityInfo get_AuthorityInfo();
    public abstract virtual ClientCredentialWrapper get_ClientCredential();
}
public interface Microsoft.Identity.Client.IByRefreshToken {
    public abstract virtual AcquireTokenByRefreshTokenParameterBuilder AcquireTokenByRefreshToken(IEnumerable`1<string> scopes, string refreshToken);
    [ObsoleteAttribute("Use AcquireTokenByRefreshToken instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public abstract virtual Task`1<AuthenticationResult> AcquireTokenByRefreshTokenAsync(IEnumerable`1<string> scopes, string refreshToken);
}
public interface Microsoft.Identity.Client.IClientApplicationBase {
    public IAppConfig AppConfig { get; }
    public ITokenCache UserTokenCache { get; }
    public string Authority { get; }
    [EditorBrowsableAttribute("1")]
[DebuggerBrowsableAttribute("0")]
[ObsoleteAttribute("Use GetAccountsAsync instead (See https://aka.ms/msal-net-2-released)", "True")]
public IEnumerable`1<IUser> Users { get; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use WithComponent on AbstractApplicationBuilder<T> to configure this instead.  See https://aka.ms/msal-net-3-breaking-changes or https://aka.ms/msal-net-application-configuration", "True")]
public string Component { get; public set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use ExtraQueryParameters on each call instead.  See https://aka.ms/msal-net-3-breaking-changes or https://aka.ms/msal-net-application-configuration", "True")]
public string SliceParameters { get; public set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Can be set on AbstractApplicationBuilder<T>.WithAuthority as needed.  See https://aka.ms/msal-net-3-breaking-changes or https://aka.ms/msal-net-application-configuration", "True")]
public bool ValidateAuthority { get; }
    [ObsoleteAttribute("Should be set using AbstractApplicationBuilder<T>.WithRedirectUri and can be viewed with ClientApplicationBase.AppConfig.RedirectUri. See https://aka.ms/msal-net-3-breaking-changes or https://aka.ms/msal-net-application-configuration", "True")]
public string RedirectUri { get; public set; }
    [ObsoleteAttribute("Use AppConfig.ClientId instead.See https://aka.ms/msal-net-3-breaking-changes", "True")]
public string ClientId { get; }
    public abstract virtual IAppConfig get_AppConfig();
    public abstract virtual ITokenCache get_UserTokenCache();
    public abstract virtual string get_Authority();
    public abstract virtual Task`1<IEnumerable`1<IAccount>> GetAccountsAsync();
    public abstract virtual Task`1<IAccount> GetAccountAsync(string identifier);
    public abstract virtual AcquireTokenSilentParameterBuilder AcquireTokenSilent(IEnumerable`1<string> scopes, IAccount account);
    public abstract virtual AcquireTokenSilentParameterBuilder AcquireTokenSilent(IEnumerable`1<string> scopes, string loginHint);
    public abstract virtual Task RemoveAsync(IAccount account);
    public abstract virtual IEnumerable`1<IUser> get_Users();
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use GetAccountAsync instead and pass IAccount.HomeAccountId.Identifier (See https://aka.ms/msal-net-2-released)", "True")]
public abstract virtual IUser GetUser(string identifier);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use RemoveAccountAsync instead (See https://aka.ms/msal-net-2-released)", "True")]
public abstract virtual void Remove(IUser user);
    public abstract virtual string get_Component();
    public abstract virtual void set_Component(string value);
    public abstract virtual string get_SliceParameters();
    public abstract virtual void set_SliceParameters(string value);
    public abstract virtual bool get_ValidateAuthority();
    public abstract virtual string get_RedirectUri();
    public abstract virtual void set_RedirectUri(string value);
    [ObsoleteAttribute("Use AcquireTokenSilent instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public abstract virtual Task`1<AuthenticationResult> AcquireTokenSilentAsync(IEnumerable`1<string> scopes, IAccount account);
    [ObsoleteAttribute("Use AcquireTokenSilent instead.See https://aka.ms/msal-net-3-breaking-changes", "True")]
public abstract virtual Task`1<AuthenticationResult> AcquireTokenSilentAsync(IEnumerable`1<string> scopes, IAccount account, string authority, bool forceRefresh);
    public abstract virtual string get_ClientId();
}
public interface Microsoft.Identity.Client.IConfidentialClientApplication {
    public ITokenCache AppTokenCache { get; }
    public abstract virtual ITokenCache get_AppTokenCache();
    public abstract virtual AcquireTokenByAuthorizationCodeParameterBuilder AcquireTokenByAuthorizationCode(IEnumerable`1<string> scopes, string authorizationCode);
    public abstract virtual AcquireTokenForClientParameterBuilder AcquireTokenForClient(IEnumerable`1<string> scopes);
    public abstract virtual AcquireTokenOnBehalfOfParameterBuilder AcquireTokenOnBehalfOf(IEnumerable`1<string> scopes, UserAssertion userAssertion);
    public abstract virtual GetAuthorizationRequestUrlParameterBuilder GetAuthorizationRequestUrl(IEnumerable`1<string> scopes);
    [ObsoleteAttribute("Use AcquireTokenOnBehalfOf instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public abstract virtual Task`1<AuthenticationResult> AcquireTokenOnBehalfOfAsync(IEnumerable`1<string> scopes, UserAssertion userAssertion);
    [ObsoleteAttribute("Use AcquireTokenOnBehalfOf instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public abstract virtual Task`1<AuthenticationResult> AcquireTokenOnBehalfOfAsync(IEnumerable`1<string> scopes, UserAssertion userAssertion, string authority);
    [ObsoleteAttribute("Use AcquireTokenByAuthorizationCode instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public abstract virtual Task`1<AuthenticationResult> AcquireTokenByAuthorizationCodeAsync(string authorizationCode, IEnumerable`1<string> scopes);
    [ObsoleteAttribute("Use AcquireTokenForClient instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public abstract virtual Task`1<AuthenticationResult> AcquireTokenForClientAsync(IEnumerable`1<string> scopes);
    [ObsoleteAttribute("Use AcquireTokenForClient instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public abstract virtual Task`1<AuthenticationResult> AcquireTokenForClientAsync(IEnumerable`1<string> scopes, bool forceRefresh);
    [ObsoleteAttribute("Use GetAuthorizationRequestUrl instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public abstract virtual Task`1<Uri> GetAuthorizationRequestUrlAsync(IEnumerable`1<string> scopes, string loginHint, string extraQueryParameters);
    [ObsoleteAttribute("Use GetAuthorizationRequestUrl instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public abstract virtual Task`1<Uri> GetAuthorizationRequestUrlAsync(IEnumerable`1<string> scopes, string redirectUri, string loginHint, string extraQueryParameters, IEnumerable`1<string> extraScopesToConsent, string authority);
}
public interface Microsoft.Identity.Client.IConfidentialClientApplicationWithCertificate {
    [ObsoleteAttribute("Use AcquireTokenForClient instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public abstract virtual Task`1<AuthenticationResult> AcquireTokenForClientWithCertificateAsync(IEnumerable`1<string> scopes);
    [ObsoleteAttribute("Use AcquireTokenForClient instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public abstract virtual Task`1<AuthenticationResult> AcquireTokenForClientWithCertificateAsync(IEnumerable`1<string> scopes, bool forceRefresh);
    [ObsoleteAttribute("Use AcquireTokenForClient instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public abstract virtual Task`1<AuthenticationResult> AcquireTokenOnBehalfOfWithCertificateAsync(IEnumerable`1<string> scopes, UserAssertion userAssertion);
    [ObsoleteAttribute("Use AcquireTokenForClient instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public abstract virtual Task`1<AuthenticationResult> AcquireTokenOnBehalfOfWithCertificateAsync(IEnumerable`1<string> scopes, UserAssertion userAssertion, string authority);
}
internal interface Microsoft.Identity.Client.IMatsConfig {
    public MatsAudienceType AudienceType { get; }
    public string SessionId { get; }
    public Action`1<IMatsTelemetryBatch> DispatchAction { get; }
    public IEnumerable`1<string> AllowedScopes { get; }
    public abstract virtual MatsAudienceType get_AudienceType();
    public abstract virtual string get_SessionId();
    public abstract virtual Action`1<IMatsTelemetryBatch> get_DispatchAction();
    public abstract virtual IEnumerable`1<string> get_AllowedScopes();
}
internal interface Microsoft.Identity.Client.IMatsTelemetryBatch {
    public string Name { get; }
    public IReadOnlyDictionary`2<string, bool> BoolValues { get; }
    public IReadOnlyDictionary`2<string, long> Int64Values { get; }
    public IReadOnlyDictionary`2<string, int> IntValues { get; }
    public IReadOnlyDictionary`2<string, string> StringValues { get; }
    public abstract virtual string get_Name();
    public abstract virtual IReadOnlyDictionary`2<string, bool> get_BoolValues();
    public abstract virtual IReadOnlyDictionary`2<string, long> get_Int64Values();
    public abstract virtual IReadOnlyDictionary`2<string, int> get_IntValues();
    public abstract virtual IReadOnlyDictionary`2<string, string> get_StringValues();
    public abstract virtual string ToJsonString();
}
public interface Microsoft.Identity.Client.IMsalHttpClientFactory {
    public abstract virtual HttpClient GetHttpClient();
}
internal class Microsoft.Identity.Client.Instance.AadAuthority : Authority {
    public static string DefaultTrustedHost;
    public static string AADCanonicalAuthorityTemplate;
    internal AadAuthority(IServiceBundle serviceBundle, AuthorityInfo authorityInfo);
    internal static bool IsInTrustedHostList(string host);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Instance.AadAuthority/<UpdateCanonicalAuthorityAsync>d__5")]
internal virtual Task UpdateCanonicalAuthorityAsync(RequestContext requestContext);
    internal virtual string GetTenantId();
    internal virtual void UpdateTenantId(string tenantId);
}
internal class Microsoft.Identity.Client.Instance.AadInstanceDiscovery : object {
    public AadInstanceDiscovery(ICoreLogger logger, IHttpManager httpManager, ITelemetryManager telemetryManager, bool shouldClearCache);
    public sealed virtual bool TryGetValue(string host, InstanceDiscoveryMetadataEntry& instanceDiscoveryMetadataEntry);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Instance.AadInstanceDiscovery/<GetMetadataEntryAsync>d__6")]
public sealed virtual Task`1<InstanceDiscoveryMetadataEntry> GetMetadataEntryAsync(Uri authority, RequestContext requestContext);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Instance.AadInstanceDiscovery/<DoInstanceDiscoveryAndCacheAsync>d__7")]
public Task`1<InstanceDiscoveryResponse> DoInstanceDiscoveryAndCacheAsync(Uri authority, RequestContext requestContext);
    public sealed virtual bool TryAddValue(string host, InstanceDiscoveryMetadataEntry instanceDiscoveryMetadataEntry);
    public static string BuildAuthorizeEndpoint(string host, string tenant);
    public static string BuildInstanceDiscoveryEndpoint(string host);
}
internal class Microsoft.Identity.Client.Instance.AadOpenIdConfigurationEndpointManager : object {
    public AadOpenIdConfigurationEndpointManager(IServiceBundle serviceBundle);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Instance.AadOpenIdConfigurationEndpointManager/<ValidateAuthorityAndGetOpenIdDiscoveryEndpointAsync>d__2")]
public sealed virtual Task`1<string> ValidateAuthorityAndGetOpenIdDiscoveryEndpointAsync(AuthorityInfo authorityInfo, string userPrincipalName, RequestContext requestContext);
}
internal class Microsoft.Identity.Client.Instance.AdfsOpenIdConfigurationEndpointManager : object {
    public AdfsOpenIdConfigurationEndpointManager(IServiceBundle serviceBundle);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Instance.AdfsOpenIdConfigurationEndpointManager/<ValidateAuthorityAndGetOpenIdDiscoveryEndpointAsync>d__2")]
public sealed virtual Task`1<string> ValidateAuthorityAndGetOpenIdDiscoveryEndpointAsync(AuthorityInfo authorityInfo, string userPrincipalName, RequestContext requestContext);
}
internal static class Microsoft.Identity.Client.Instance.AdfsUpnHelper : object {
    public static string GetDomainFromUpn(string upn);
}
[DataContractAttribute]
internal class Microsoft.Identity.Client.Instance.AdfsWebFingerResponse : OAuth2ResponseBase {
    [DataMemberAttribute]
public string Subject { get; public set; }
    [DataMemberAttribute]
public List`1<LinksList> Links { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Subject();
    [CompilerGeneratedAttribute]
public void set_Subject(string value);
    [CompilerGeneratedAttribute]
public List`1<LinksList> get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(List`1<LinksList> value);
}
internal class Microsoft.Identity.Client.Instance.AdfsWebFingerResponseClaim : OAuth2ResponseBaseClaim {
    public static string Subject;
    public static string Links;
    public static string Rel;
    public static string Href;
}
internal abstract class Microsoft.Identity.Client.Instance.Authority : object {
    internal static HashSet`1<string> TenantlessTenantNames;
    public AuthorityInfo AuthorityInfo { get; }
    protected IServiceBundle ServiceBundle { get; }
    internal bool IsTenantless { get; }
    protected Authority(IServiceBundle serviceBundle, AuthorityInfo authorityInfo);
    [CompilerGeneratedAttribute]
public AuthorityInfo get_AuthorityInfo();
    [CompilerGeneratedAttribute]
protected IServiceBundle get_ServiceBundle();
    public static Authority CreateAuthorityWithOverride(IServiceBundle serviceBundle, AuthorityInfo authorityInfo);
    public static Authority CreateAuthority(IServiceBundle serviceBundle, string authority, bool validateAuthority);
    public static Authority CreateAuthority(IServiceBundle serviceBundle);
    internal virtual Task UpdateCanonicalAuthorityAsync(RequestContext requestContext);
    internal static string GetFirstPathSegment(string authority);
    internal static AuthorityType GetAuthorityType(string authority);
    internal abstract virtual string GetTenantId();
    internal abstract virtual void UpdateTenantId(string tenantId);
    internal bool get_IsTenantless();
    internal static string CreateAuthorityUriWithHost(string authority, string host);
    internal static string GetEnviroment(string authority);
}
internal class Microsoft.Identity.Client.Instance.AuthorityEndpointResolutionManager : object {
    public AuthorityEndpointResolutionManager(IServiceBundle serviceBundle, bool shouldClearCache);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Instance.AuthorityEndpointResolutionManager/<ResolveEndpointsAsync>d__3")]
public sealed virtual Task`1<AuthorityEndpoints> ResolveEndpointsAsync(AuthorityInfo authorityInfo, string userPrincipalName, RequestContext requestContext);
}
internal class Microsoft.Identity.Client.Instance.AuthorityEndpoints : object {
    public string AuthorizationEndpoint { get; }
    public string TokenEndpoint { get; }
    public string SelfSignedJwtAudience { get; }
    public AuthorityEndpoints(string authorizationEndpoint, string tokenEndpoint, string selfSignedJwtAudience);
    [CompilerGeneratedAttribute]
public string get_AuthorizationEndpoint();
    [CompilerGeneratedAttribute]
public string get_TokenEndpoint();
    [CompilerGeneratedAttribute]
public string get_SelfSignedJwtAudience();
}
internal class Microsoft.Identity.Client.Instance.B2CAuthority : AadAuthority {
    public static string Prefix;
    public static string B2CCanonicalAuthorityTemplate;
    internal B2CAuthority(IServiceBundle serviceBundle, AuthorityInfo authorityInfo);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Instance.B2CAuthority/<UpdateCanonicalAuthorityAsync>d__3")]
internal virtual Task UpdateCanonicalAuthorityAsync(RequestContext requestContext);
    internal virtual string GetTenantId();
    internal virtual void UpdateTenantId(string tenantId);
}
internal class Microsoft.Identity.Client.Instance.B2COpenIdConfigurationEndpointManager : object {
    public sealed virtual Task`1<string> ValidateAuthorityAndGetOpenIdDiscoveryEndpointAsync(AuthorityInfo authorityInfo, string userPrincipalName, RequestContext requestContext);
}
[DataContractAttribute]
internal class Microsoft.Identity.Client.Instance.DrsMetadataResponse : OAuth2ResponseBase {
    [DataMemberAttribute]
public IdentityProviderService IdentityProviderService { get; public set; }
    [CompilerGeneratedAttribute]
public IdentityProviderService get_IdentityProviderService();
    [CompilerGeneratedAttribute]
public void set_IdentityProviderService(IdentityProviderService value);
}
internal class Microsoft.Identity.Client.Instance.DrsMetadataResponseClaim : OAuth2ResponseBaseClaim {
    public static string PassiveAuthEndpoint;
    public static string IdentityProviderService;
}
internal interface Microsoft.Identity.Client.Instance.IAadInstanceDiscovery {
    public abstract virtual Task`1<InstanceDiscoveryMetadataEntry> GetMetadataEntryAsync(Uri authority, RequestContext requestContext);
    public abstract virtual bool TryAddValue(string host, InstanceDiscoveryMetadataEntry instanceDiscoveryMetadataEntry);
    public abstract virtual bool TryGetValue(string host, InstanceDiscoveryMetadataEntry& instanceDiscoveryMetadataEntry);
}
internal interface Microsoft.Identity.Client.Instance.IAuthorityEndpointResolutionManager {
    public abstract virtual Task`1<AuthorityEndpoints> ResolveEndpointsAsync(AuthorityInfo authorityInfo, string userPrincipalName, RequestContext requestContext);
}
[DataContractAttribute]
internal class Microsoft.Identity.Client.Instance.IdentityProviderService : object {
    [DataMemberAttribute]
public Uri PassiveAuthEndpoint { get; public set; }
    [CompilerGeneratedAttribute]
public Uri get_PassiveAuthEndpoint();
    [CompilerGeneratedAttribute]
public void set_PassiveAuthEndpoint(Uri value);
}
[DataContractAttribute]
internal class Microsoft.Identity.Client.Instance.InstanceDiscoveryMetadataEntry : object {
    [DataMemberAttribute]
public string PreferredNetwork { get; public set; }
    [DataMemberAttribute]
public string PreferredCache { get; public set; }
    [DataMemberAttribute]
public String[] Aliases { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PreferredNetwork();
    [CompilerGeneratedAttribute]
public void set_PreferredNetwork(string value);
    [CompilerGeneratedAttribute]
public string get_PreferredCache();
    [CompilerGeneratedAttribute]
public void set_PreferredCache(string value);
    [CompilerGeneratedAttribute]
public String[] get_Aliases();
    [CompilerGeneratedAttribute]
public void set_Aliases(String[] value);
}
[DataContractAttribute]
internal class Microsoft.Identity.Client.Instance.InstanceDiscoveryResponse : OAuth2ResponseBase {
    [DataMemberAttribute]
public string TenantDiscoveryEndpoint { get; public set; }
    [DataMemberAttribute]
public InstanceDiscoveryMetadataEntry[] Metadata { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TenantDiscoveryEndpoint();
    [CompilerGeneratedAttribute]
public void set_TenantDiscoveryEndpoint(string value);
    [CompilerGeneratedAttribute]
public InstanceDiscoveryMetadataEntry[] get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(InstanceDiscoveryMetadataEntry[] value);
}
internal interface Microsoft.Identity.Client.Instance.IOpenIdConfigurationEndpointManager {
    public abstract virtual Task`1<string> ValidateAuthorityAndGetOpenIdDiscoveryEndpointAsync(AuthorityInfo authorityInfo, string userPrincipalName, RequestContext requestContext);
}
[DataContractAttribute]
internal class Microsoft.Identity.Client.Instance.LinksList : object {
    [DataMemberAttribute]
public string Rel { get; public set; }
    [DataMemberAttribute]
public string Href { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Rel();
    [CompilerGeneratedAttribute]
public void set_Rel(string value);
    [CompilerGeneratedAttribute]
public string get_Href();
    [CompilerGeneratedAttribute]
public void set_Href(string value);
}
internal static class Microsoft.Identity.Client.Instance.OpenIdConfigurationEndpointManagerFactory : object {
    public static IOpenIdConfigurationEndpointManager Create(AuthorityInfo authorityInfo, IServiceBundle serviceBundle);
}
[DataContractAttribute]
internal class Microsoft.Identity.Client.Instance.TenantDiscoveryResponse : OAuth2ResponseBase {
    [DataMemberAttribute]
public string AuthorizationEndpoint { get; public set; }
    [DataMemberAttribute]
public string TokenEndpoint { get; public set; }
    [DataMemberAttribute]
public string Issuer { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AuthorizationEndpoint();
    [CompilerGeneratedAttribute]
public void set_AuthorizationEndpoint(string value);
    [CompilerGeneratedAttribute]
public string get_TokenEndpoint();
    [CompilerGeneratedAttribute]
public void set_TokenEndpoint(string value);
    [CompilerGeneratedAttribute]
public string get_Issuer();
    [CompilerGeneratedAttribute]
public void set_Issuer(string value);
}
internal class Microsoft.Identity.Client.Instance.TenantDiscoveryResponseClaim : OAuth2ResponseBaseClaim {
    public static string AuthorizationEndpoint;
    public static string TokenEndpoint;
    public static string Issuer;
}
internal class Microsoft.Identity.Client.Internal.Broker.BrokerFactory : object {
    public IBroker CreateBrokerFacade(IServiceBundle serviceBundle);
}
internal class Microsoft.Identity.Client.Internal.Broker.BrokerInteractiveRequest : object {
    internal Dictionary`2<string, string> _brokerPayload;
    internal BrokerInteractiveRequest(AuthenticationRequestParameters authenticationRequestParameters, AcquireTokenInteractiveParameters acquireTokenInteractiveParameters, IServiceBundle serviceBundle, AuthorizationResult authorizationResult);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Internal.Broker.BrokerInteractiveRequest/<SendTokenRequestToBrokerAsync>d__8")]
public Task`1<MsalTokenResponse> SendTokenRequestToBrokerAsync();
    internal void CreateRequestParametersForBroker();
    internal bool IsBrokerInvocationRequired();
    internal void ValidateResponseFromBroker(MsalTokenResponse msalTokenResponse);
}
internal class Microsoft.Identity.Client.Internal.Broker.BrokerParameter : object {
    public static string Authority;
    public static string ClientId;
    public static string RequestScopes;
    public static string ExtraOidcScopes;
    public static string OidcScopesValue;
    public static string RedirectUri;
    public static string BrokerKey;
    public static string ClientVersion;
    public static string MsgProtocolVersion;
    public static string MsgProtocolVersion3;
    public static string SkipCache;
    public static string CorrelationId;
    public static string ExtraQp;
    public static string HomeAccountId;
    public static string Username;
    public static string LoginHint;
    public static string IntuneEnrollmentIds;
    public static string IntuneMamResource;
    public static string ClientCapabilities;
    public static string ClientAppName;
    public static string ClientAppVersion;
    public static string Claims;
    public static string ExtraConsentScopes;
    public static string Prompt;
    public static string Force;
    public static string BrokerInstallUrl;
    public static string BrokerV2;
    public static string AuthCodePrefixForEmbeddedWebviewBrokerInstallRequired;
}
internal class Microsoft.Identity.Client.Internal.Broker.BrokerResponseConst : object {
    public static string ErrorMetadata;
    public static string ErrorDomain;
    public static string Authority;
    public static string AccessToken;
    public static string RefreshToken;
    public static string IdToken;
    public static string Bearer;
    public static string CorrelationId;
    public static string Scope;
    public static string ExpiresOn;
    public static string ClientInfo;
}
internal interface Microsoft.Identity.Client.Internal.Broker.IBroker {
    public abstract virtual bool CanInvokeBroker(CoreUIParent uiParent);
    public abstract virtual Task`1<MsalTokenResponse> AcquireTokenUsingBrokerAsync(Dictionary`2<string, string> brokerPayload);
}
internal class Microsoft.Identity.Client.Internal.Broker.NullBroker : object {
    public sealed virtual bool CanInvokeBroker(CoreUIParent uiParent);
    public sealed virtual Task`1<MsalTokenResponse> AcquireTokenUsingBrokerAsync(Dictionary`2<string, string> brokerPayload);
}
internal class Microsoft.Identity.Client.Internal.ClientAssertionCertificateWrapper : object {
    public static int MinKeySizeInBits { get; }
    public X509Certificate2 Certificate { get; }
    internal string Thumbprint { get; }
    public ClientAssertionCertificateWrapper(X509Certificate2 certificate);
    public static int get_MinKeySizeInBits();
    [CompilerGeneratedAttribute]
public X509Certificate2 get_Certificate();
    internal Byte[] Sign(ICryptographyManager cryptographyManager, string message);
    internal string get_Thumbprint();
}
internal class Microsoft.Identity.Client.Internal.ClientCredentialWrapper : object {
    internal ClientAssertionCertificateWrapper Certificate { get; }
    internal string Assertion { get; internal set; }
    internal long ValidTo { get; internal set; }
    internal bool ContainsX5C { get; internal set; }
    internal string Audience { get; internal set; }
    internal string Secret { get; }
    public ClientCredentialWrapper(ClientAssertionCertificateWrapper certificate);
    public ClientCredentialWrapper(string secret);
    [CompilerGeneratedAttribute]
internal ClientAssertionCertificateWrapper get_Certificate();
    [CompilerGeneratedAttribute]
internal string get_Assertion();
    [CompilerGeneratedAttribute]
internal void set_Assertion(string value);
    [CompilerGeneratedAttribute]
internal long get_ValidTo();
    [CompilerGeneratedAttribute]
internal void set_ValidTo(long value);
    [CompilerGeneratedAttribute]
internal bool get_ContainsX5C();
    [CompilerGeneratedAttribute]
internal void set_ContainsX5C(bool value);
    [CompilerGeneratedAttribute]
internal string get_Audience();
    [CompilerGeneratedAttribute]
internal void set_Audience(string value);
    [CompilerGeneratedAttribute]
internal string get_Secret();
}
[DataContractAttribute]
internal class Microsoft.Identity.Client.Internal.DeviceCodeResponse : OAuth2ResponseBase {
    [DataMemberAttribute]
public string UserCode { get; internal set; }
    [DataMemberAttribute]
public string DeviceCode { get; internal set; }
    [DataMemberAttribute]
public string VerificationUrl { get; internal set; }
    [DataMemberAttribute]
public string VerificationUri { get; internal set; }
    [DataMemberAttribute]
public long ExpiresIn { get; internal set; }
    [DataMemberAttribute]
public long Interval { get; internal set; }
    [DataMemberAttribute]
public string Message { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_UserCode();
    [CompilerGeneratedAttribute]
internal void set_UserCode(string value);
    [CompilerGeneratedAttribute]
public string get_DeviceCode();
    [CompilerGeneratedAttribute]
internal void set_DeviceCode(string value);
    [CompilerGeneratedAttribute]
public string get_VerificationUrl();
    [CompilerGeneratedAttribute]
internal void set_VerificationUrl(string value);
    [CompilerGeneratedAttribute]
public string get_VerificationUri();
    [CompilerGeneratedAttribute]
internal void set_VerificationUri(string value);
    [CompilerGeneratedAttribute]
public long get_ExpiresIn();
    [CompilerGeneratedAttribute]
internal void set_ExpiresIn(long value);
    [CompilerGeneratedAttribute]
public long get_Interval();
    [CompilerGeneratedAttribute]
internal void set_Interval(long value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
internal void set_Message(string value);
    public DeviceCodeResult GetResult(string clientId, ISet`1<string> scopes);
}
internal class Microsoft.Identity.Client.Internal.JsonWebToken : object {
    public JWTPayload Payload;
    public JsonWebToken(ICryptographyManager cryptographyManager, string clientId, string audience);
    public string Sign(ClientAssertionCertificateWrapper credential, bool sendCertificate);
    internal static long ConvertToTimeT(DateTime time);
}
internal class Microsoft.Identity.Client.Internal.JsonWebTokenConstants : object {
    public static UInt32 JwtToAadLifetimeInSeconds;
    public static string HeaderType;
}
internal class Microsoft.Identity.Client.Internal.MsalLogger : object {
    public static ICoreLogger NullLogger { get; }
    public Guid CorrelationId { get; }
    public bool PiiLoggingEnabled { get; }
    public string ClientName { get; }
    public string ClientVersion { get; }
    internal string ClientInformation { get; }
    internal MsalLogger(Guid correlationId, string clientName, string clientVersion, LogLevel logLevel, bool enablePiiLogging, bool isDefaultPlatformLoggingEnabled, LogCallback loggingCallback);
    public static ICoreLogger Create(Guid correlationId, IApplicationConfiguration config, bool isDefaultPlatformLoggingEnabled);
    public static ICoreLogger get_NullLogger();
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_CorrelationId();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PiiLoggingEnabled();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClientName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClientVersion();
    [CompilerGeneratedAttribute]
internal string get_ClientInformation();
    public sealed virtual void Info(string messageScrubbed);
    public sealed virtual void InfoPii(string messageWithPii, string messageScrubbed);
    public sealed virtual void InfoPii(Exception exWithPii);
    public sealed virtual void InfoPiiWithPrefix(Exception exWithPii, string prefix);
    public sealed virtual void Verbose(string messageScrubbed);
    public sealed virtual void VerbosePii(string messageWithPii, string messageScrubbed);
    public sealed virtual void Warning(string messageScrubbed);
    public sealed virtual void WarningPii(string messageWithPii, string messageScrubbed);
    public sealed virtual void WarningPii(Exception exWithPii);
    public sealed virtual void WarningPiiWithPrefix(Exception exWithPii, string prefix);
    public sealed virtual void Error(string messageScrubbed);
    public sealed virtual void ErrorPii(Exception exWithPii);
    public sealed virtual void ErrorPiiWithPrefix(Exception exWithPii, string prefix);
    public sealed virtual void ErrorPii(string messageWithPii, string messageScrubbed);
    internal static string GetPiiScrubbedExceptionDetails(Exception ex);
}
internal class Microsoft.Identity.Client.Internal.NullLogger : object {
    public string ClientName { get; }
    public string ClientVersion { get; }
    public Guid CorrelationId { get; }
    public bool PiiLoggingEnabled { get; }
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClientName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClientVersion();
    [CompilerGeneratedAttribute]
public sealed virtual Guid get_CorrelationId();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_PiiLoggingEnabled();
    public sealed virtual void Error(string messageScrubbed);
    public sealed virtual void ErrorPii(string messageWithPii, string messageScrubbed);
    public sealed virtual void ErrorPii(Exception exWithPii);
    public sealed virtual void ErrorPiiWithPrefix(Exception exWithPii, string prefix);
    public sealed virtual void Warning(string messageScrubbed);
    public sealed virtual void WarningPii(string messageWithPii, string messageScrubbed);
    public sealed virtual void WarningPii(Exception exWithPii);
    public sealed virtual void WarningPiiWithPrefix(Exception exWithPii, string prefix);
    public sealed virtual void Info(string messageScrubbed);
    public sealed virtual void InfoPii(string messageWithPii, string messageScrubbed);
    public sealed virtual void InfoPii(Exception exWithPii);
    public sealed virtual void InfoPiiWithPrefix(Exception exWithPii, string prefix);
    public sealed virtual void Verbose(string messageScrubbed);
    public sealed virtual void VerbosePii(string messageWithPii, string messageScrubbed);
}
internal class Microsoft.Identity.Client.Internal.Requests.AuthenticationRequestParameters : object {
    public ApiTelemetryId ApiTelemId { get; }
    public ApiIds ApiId { get; }
    public RequestContext RequestContext { get; }
    public Authority Authority { get; public set; }
    public AuthorityInfo AuthorityInfo { get; }
    public AuthorityEndpoints Endpoints { get; public set; }
    public string TenantUpdatedCanonicalAuthority { get; public set; }
    public ICacheSessionManager CacheSessionManager { get; }
    public SortedSet`1<string> Scope { get; }
    public string ClientId { get; }
    public Uri RedirectUri { get; public set; }
    public IDictionary`2<string, string> ExtraQueryParameters { get; }
    public string Claims { get; }
    public AuthorityInfo AuthorityOverride { get; }
    internal bool IsBrokerEnabled { get; internal set; }
    public ClientCredentialWrapper ClientCredential { get; public set; }
    public bool SendX5C { get; public set; }
    public string LoginHint { get; public set; }
    public IAccount Account { get; public set; }
    public bool IsClientCredentialRequest { get; public set; }
    public bool IsRefreshTokenRequest { get; public set; }
    public UserAssertion UserAssertion { get; public set; }
    public AuthenticationRequestParameters(IServiceBundle serviceBundle, ITokenCacheInternal tokenCache, AcquireTokenCommonParameters commonParameters, RequestContext requestContext);
    public ApiTelemetryId get_ApiTelemId();
    public IEnumerable`1<KeyValuePair`2<string, string>> GetApiTelemetryFeatures();
    public ApiIds get_ApiId();
    [CompilerGeneratedAttribute]
public RequestContext get_RequestContext();
    [CompilerGeneratedAttribute]
public Authority get_Authority();
    [CompilerGeneratedAttribute]
public void set_Authority(Authority value);
    public AuthorityInfo get_AuthorityInfo();
    [CompilerGeneratedAttribute]
public AuthorityEndpoints get_Endpoints();
    [CompilerGeneratedAttribute]
public void set_Endpoints(AuthorityEndpoints value);
    [CompilerGeneratedAttribute]
public string get_TenantUpdatedCanonicalAuthority();
    [CompilerGeneratedAttribute]
public void set_TenantUpdatedCanonicalAuthority(string value);
    [CompilerGeneratedAttribute]
public ICacheSessionManager get_CacheSessionManager();
    [CompilerGeneratedAttribute]
public SortedSet`1<string> get_Scope();
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
public Uri get_RedirectUri();
    [CompilerGeneratedAttribute]
public void set_RedirectUri(Uri value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_ExtraQueryParameters();
    public string get_Claims();
    public AuthorityInfo get_AuthorityOverride();
    [CompilerGeneratedAttribute]
internal bool get_IsBrokerEnabled();
    [CompilerGeneratedAttribute]
internal void set_IsBrokerEnabled(bool value);
    [CompilerGeneratedAttribute]
public ClientCredentialWrapper get_ClientCredential();
    [CompilerGeneratedAttribute]
public void set_ClientCredential(ClientCredentialWrapper value);
    [CompilerGeneratedAttribute]
public bool get_SendX5C();
    [CompilerGeneratedAttribute]
public void set_SendX5C(bool value);
    [CompilerGeneratedAttribute]
public string get_LoginHint();
    [CompilerGeneratedAttribute]
public void set_LoginHint(string value);
    [CompilerGeneratedAttribute]
public IAccount get_Account();
    [CompilerGeneratedAttribute]
public void set_Account(IAccount value);
    [CompilerGeneratedAttribute]
public bool get_IsClientCredentialRequest();
    [CompilerGeneratedAttribute]
public void set_IsClientCredentialRequest(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsRefreshTokenRequest();
    [CompilerGeneratedAttribute]
public void set_IsRefreshTokenRequest(bool value);
    [CompilerGeneratedAttribute]
public UserAssertion get_UserAssertion();
    [CompilerGeneratedAttribute]
public void set_UserAssertion(UserAssertion value);
    public void LogParameters(ICoreLogger logger);
}
internal class Microsoft.Identity.Client.Internal.Requests.AuthorizationCodeRequest : RequestBase {
    public AuthorizationCodeRequest(IServiceBundle serviceBundle, AuthenticationRequestParameters authenticationRequestParameters, AcquireTokenByAuthorizationCodeParameters authorizationCodeParameters);
    protected virtual void EnrichTelemetryApiEvent(ApiEvent apiEvent);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Internal.Requests.AuthorizationCodeRequest/<ExecuteAsync>d__3")]
internal virtual Task`1<AuthenticationResult> ExecuteAsync(CancellationToken cancellationToken);
}
internal class Microsoft.Identity.Client.Internal.Requests.ByRefreshTokenRequest : RequestBase {
    public ByRefreshTokenRequest(IServiceBundle serviceBundle, AuthenticationRequestParameters authenticationRequestParameters, AcquireTokenByRefreshTokenParameters refreshTokenParameters);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Internal.Requests.ByRefreshTokenRequest/<ExecuteAsync>d__2")]
internal virtual Task`1<AuthenticationResult> ExecuteAsync(CancellationToken cancellationToken);
}
internal static class Microsoft.Identity.Client.Internal.Requests.ClientCredentialHelper : object {
    public static bool ValidateClientAssertion(ClientCredentialWrapper clientCredential, AuthorityEndpoints endpoints, bool sendX5C);
    public static Dictionary`2<string, string> CreateClientCredentialBodyParameters(ICoreLogger logger, ICryptographyManager cryptographyManager, ClientCredentialWrapper clientCredential, string clientId, AuthorityEndpoints endpoints, bool sendX5C);
}
internal class Microsoft.Identity.Client.Internal.Requests.ClientCredentialRequest : RequestBase {
    public ClientCredentialRequest(IServiceBundle serviceBundle, AuthenticationRequestParameters authenticationRequestParameters, AcquireTokenForClientParameters clientParameters);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Internal.Requests.ClientCredentialRequest/<ExecuteAsync>d__2")]
internal virtual Task`1<AuthenticationResult> ExecuteAsync(CancellationToken cancellationToken);
    protected virtual void EnrichTelemetryApiEvent(ApiEvent apiEvent);
}
internal class Microsoft.Identity.Client.Internal.Requests.DeviceCodeRequest : RequestBase {
    public DeviceCodeRequest(IServiceBundle serviceBundle, AuthenticationRequestParameters authenticationRequestParameters, AcquireTokenWithDeviceCodeParameters deviceCodeParameters);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Internal.Requests.DeviceCodeRequest/<ExecuteAsync>d__2")]
internal virtual Task`1<AuthenticationResult> ExecuteAsync(CancellationToken cancellationToken);
}
internal class Microsoft.Identity.Client.Internal.Requests.IntegratedWindowsAuthRequest : RequestBase {
    public IntegratedWindowsAuthRequest(IServiceBundle serviceBundle, AuthenticationRequestParameters authenticationRequestParameters, AcquireTokenByIntegratedWindowsAuthParameters integratedWindowsAuthParameters);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Internal.Requests.IntegratedWindowsAuthRequest/<ExecuteAsync>d__3")]
internal virtual Task`1<AuthenticationResult> ExecuteAsync(CancellationToken cancellationToken);
}
internal class Microsoft.Identity.Client.Internal.Requests.InteractiveRequest : RequestBase {
    public InteractiveRequest(IServiceBundle serviceBundle, AuthenticationRequestParameters authenticationRequestParameters, AcquireTokenInteractiveParameters interactiveParameters, IWebUI webUi);
    protected virtual void EnrichTelemetryApiEvent(ApiEvent apiEvent);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Internal.Requests.InteractiveRequest/<ExecuteAsync>d__9")]
internal virtual Task`1<AuthenticationResult> ExecuteAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Internal.Requests.InteractiveRequest/<CreateAuthorizationUriAsync>d__11")]
internal Task`1<Uri> CreateAuthorizationUriAsync();
}
internal class Microsoft.Identity.Client.Internal.Requests.OnBehalfOfRequest : RequestBase {
    public OnBehalfOfRequest(IServiceBundle serviceBundle, AuthenticationRequestParameters authenticationRequestParameters, AcquireTokenOnBehalfOfParameters onBehalfOfParameters);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Internal.Requests.OnBehalfOfRequest/<ExecuteAsync>d__2")]
internal virtual Task`1<AuthenticationResult> ExecuteAsync(CancellationToken cancellationToken);
    protected virtual void EnrichTelemetryApiEvent(ApiEvent apiEvent);
}
internal abstract class Microsoft.Identity.Client.Internal.Requests.RequestBase : object {
    internal AuthenticationRequestParameters AuthenticationRequestParameters { get; }
    internal ICacheSessionManager CacheManager { get; }
    protected IServiceBundle ServiceBundle { get; }
    protected RequestBase(IServiceBundle serviceBundle, AuthenticationRequestParameters authenticationRequestParameters, IAcquireTokenParameters acquireTokenParameters);
    [CompilerGeneratedAttribute]
internal AuthenticationRequestParameters get_AuthenticationRequestParameters();
    internal ICacheSessionManager get_CacheManager();
    [CompilerGeneratedAttribute]
protected IServiceBundle get_ServiceBundle();
    protected SortedSet`1<string> GetDecoratedScope(SortedSet`1<string> inputScope);
    protected void ValidateScopeInput(SortedSet`1<string> scopesToValidate);
    internal abstract virtual Task`1<AuthenticationResult> ExecuteAsync(CancellationToken cancellationToken);
    internal virtual Task PreRunAsync();
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Internal.Requests.RequestBase/<RunAsync>d__14")]
public Task`1<AuthenticationResult> RunAsync(CancellationToken cancellationToken);
    protected virtual void EnrichTelemetryApiEvent(ApiEvent apiEvent);
    protected AuthenticationResult CacheTokenResponseAndCreateAuthenticationResult(MsalTokenResponse msalTokenResponse);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Internal.Requests.RequestBase/<ResolveAuthorityEndpointsAsync>d__20")]
internal Task ResolveAuthorityEndpointsAsync();
    protected Task`1<MsalTokenResponse> SendTokenRequestAsync(IDictionary`2<string, string> additionalBodyParameters, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Internal.Requests.RequestBase/<SendTokenRequestAsync>d__22")]
protected Task`1<MsalTokenResponse> SendTokenRequestAsync(string tokenEndpoint, IDictionary`2<string, string> additionalBodyParameters, CancellationToken cancellationToken);
}
internal class Microsoft.Identity.Client.Internal.Requests.SilentRequest : RequestBase {
    public SilentRequest(IServiceBundle serviceBundle, AuthenticationRequestParameters authenticationRequestParameters, AcquireTokenSilentParameters silentParameters);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Internal.Requests.SilentRequest/<PreRunAsync>d__6")]
internal virtual Task PreRunAsync();
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Internal.Requests.SilentRequest/<ExecuteAsync>d__7")]
internal virtual Task`1<AuthenticationResult> ExecuteAsync(CancellationToken cancellationToken);
    protected virtual void EnrichTelemetryApiEvent(ApiEvent apiEvent);
}
internal class Microsoft.Identity.Client.Internal.Requests.UsernamePasswordRequest : RequestBase {
    public UsernamePasswordRequest(IServiceBundle serviceBundle, AuthenticationRequestParameters authenticationRequestParameters, AcquireTokenByUsernamePasswordParameters usernamePasswordParameters);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.Internal.Requests.UsernamePasswordRequest/<ExecuteAsync>d__3")]
internal virtual Task`1<AuthenticationResult> ExecuteAsync(CancellationToken cancellationToken);
}
public interface Microsoft.Identity.Client.IPublicClientApplication {
    public bool IsSystemWebViewAvailable { get; }
    public abstract virtual bool get_IsSystemWebViewAvailable();
    public abstract virtual AcquireTokenInteractiveParameterBuilder AcquireTokenInteractive(IEnumerable`1<string> scopes);
    public abstract virtual AcquireTokenWithDeviceCodeParameterBuilder AcquireTokenWithDeviceCode(IEnumerable`1<string> scopes, Func`2<DeviceCodeResult, Task> deviceCodeResultCallback);
    public abstract virtual AcquireTokenByIntegratedWindowsAuthParameterBuilder AcquireTokenByIntegratedWindowsAuth(IEnumerable`1<string> scopes);
    public abstract virtual AcquireTokenByUsernamePasswordParameterBuilder AcquireTokenByUsernamePassword(IEnumerable`1<string> scopes, string username, SecureString password);
    [ObsoleteAttribute("Use AcquireTokenByUsernamePassword instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public abstract virtual Task`1<AuthenticationResult> AcquireTokenByUsernamePasswordAsync(IEnumerable`1<string> scopes, string username, SecureString securePassword);
    [ObsoleteAttribute("Use AcquireTokenWithDeviceCode instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public abstract virtual Task`1<AuthenticationResult> AcquireTokenWithDeviceCodeAsync(IEnumerable`1<string> scopes, Func`2<DeviceCodeResult, Task> deviceCodeResultCallback);
    [ObsoleteAttribute("Use AcquireTokenWithDeviceCode instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public abstract virtual Task`1<AuthenticationResult> AcquireTokenWithDeviceCodeAsync(IEnumerable`1<string> scopes, string extraQueryParameters, Func`2<DeviceCodeResult, Task> deviceCodeResultCallback);
    [ObsoleteAttribute("Use AcquireTokenWithDeviceCode instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public abstract virtual Task`1<AuthenticationResult> AcquireTokenWithDeviceCodeAsync(IEnumerable`1<string> scopes, Func`2<DeviceCodeResult, Task> deviceCodeResultCallback, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use AcquireTokenWithDeviceCode instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public abstract virtual Task`1<AuthenticationResult> AcquireTokenWithDeviceCodeAsync(IEnumerable`1<string> scopes, string extraQueryParameters, Func`2<DeviceCodeResult, Task> deviceCodeResultCallback, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use AcquireTokenByIntegratedWindowsAuth instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public abstract virtual Task`1<AuthenticationResult> AcquireTokenByIntegratedWindowsAuthAsync(IEnumerable`1<string> scopes, string username);
}
public interface Microsoft.Identity.Client.ITokenCache {
    public abstract virtual void SetBeforeAccess(TokenCacheCallback beforeAccess);
    public abstract virtual void SetAfterAccess(TokenCacheCallback afterAccess);
    public abstract virtual void SetBeforeWrite(TokenCacheCallback beforeWrite);
    public abstract virtual Byte[] SerializeMsalV3();
    public abstract virtual void DeserializeMsalV3(Byte[] msalV3State, bool shouldClearExistingCache);
    public abstract virtual Byte[] SerializeMsalV2();
    public abstract virtual void DeserializeMsalV2(Byte[] msalV2State);
    public abstract virtual Byte[] SerializeAdalV3();
    public abstract virtual void DeserializeAdalV3(Byte[] adalV3State);
    [ObsoleteAttribute("This is expected to be removed in MSAL.NET v3 and ADAL.NET v5. We recommend using SerializeMsalV3/DeserializeMsalV3. Read more: https://aka.ms/msal-net-3x-cache-breaking-change", "False")]
public abstract virtual Byte[] Serialize();
    [ObsoleteAttribute("This is expected to be removed in MSAL.NET v3 and ADAL.NET v5. We recommend using SerializeMsalV3/DeserializeMsalV3. Read more: https://aka.ms/msal-net-3x-cache-breaking-change", "False")]
public abstract virtual void Deserialize(Byte[] msalV2State);
    [ObsoleteAttribute("This is expected to be removed in MSAL.NET v3 and ADAL.NET v5. We recommend using SerializeMsalV3/DeserializeMsalV3. Read more: https://aka.ms/msal-net-3x-cache-breaking-change", "False")]
public abstract virtual CacheData SerializeUnifiedAndAdalCache();
    [ObsoleteAttribute("This is expected to be removed in MSAL.NET v3 and ADAL.NET v5. We recommend using SerializeMsalV3/DeserializeMsalV3. Read more: https://aka.ms/msal-net-3x-cache-breaking-change", "False")]
public abstract virtual void DeserializeUnifiedAndAdalCache(CacheData cacheData);
}
internal interface Microsoft.Identity.Client.ITokenCacheInternal {
    public object LockObject { get; }
    public ILegacyCachePersistence LegacyPersistence { get; }
    public ITokenCacheAccessor Accessor { get; }
    public abstract virtual object get_LockObject();
    public abstract virtual void RemoveAccount(IAccount account, RequestContext requestContext);
    public abstract virtual Task`1<IEnumerable`1<IAccount>> GetAccountsAsync(string authority, RequestContext requestContext);
    public abstract virtual Tuple`2<MsalAccessTokenCacheItem, MsalIdTokenCacheItem> SaveTokenResponse(AuthenticationRequestParameters authenticationRequestParameters, MsalTokenResponse msalTokenResponse);
    public abstract virtual Task`1<MsalAccessTokenCacheItem> FindAccessTokenAsync(AuthenticationRequestParameters authenticationRequestParameters);
    public abstract virtual MsalIdTokenCacheItem GetIdTokenCacheItem(MsalIdTokenCacheKey getIdTokenItemKey, RequestContext requestContext);
    public abstract virtual Task`1<MsalRefreshTokenCacheItem> FindRefreshTokenAsync(AuthenticationRequestParameters authenticationRequestParameters, string familyId);
    public abstract virtual void SetIosKeychainSecurityGroup(string securityGroup);
    public abstract virtual ILegacyCachePersistence get_LegacyPersistence();
    public abstract virtual ITokenCacheAccessor get_Accessor();
    public abstract virtual void RemoveMsalAccount(IAccount account, RequestContext requestContext);
    public abstract virtual IEnumerable`1<MsalAccessTokenCacheItem> GetAllAccessTokens(bool filterByClientId);
    public abstract virtual IEnumerable`1<MsalRefreshTokenCacheItem> GetAllRefreshTokens(bool filterByClientId);
    public abstract virtual IEnumerable`1<MsalIdTokenCacheItem> GetAllIdTokens(bool filterByClientId);
    public abstract virtual IEnumerable`1<MsalAccountCacheItem> GetAllAccounts();
    public abstract virtual Task`1<Nullable`1<bool>> IsFociMemberAsync(AuthenticationRequestParameters authenticationRequestParameters, string familyId);
    public abstract virtual void ClearAdalCache();
    public abstract virtual void ClearMsalCache();
    public abstract virtual void Clear();
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use IAccount instead (See https://aka.ms/msal-net-2-released)", "True")]
public interface Microsoft.Identity.Client.IUser {
    [EditorBrowsableAttribute("1")]
[DebuggerBrowsableAttribute("0")]
[ObsoleteAttribute("Use IAccount.Username instead (See https://aka.ms/msal-net-2-released)", "True")]
public string DisplayableId { get; }
    [EditorBrowsableAttribute("1")]
[DebuggerBrowsableAttribute("0")]
[ObsoleteAttribute("Use IAccount.Username instead (See https://aka.ms/msal-net-2-released)", "True")]
public string Name { get; }
    [EditorBrowsableAttribute("1")]
[DebuggerBrowsableAttribute("0")]
[ObsoleteAttribute("Use IAccount.Environment instead to get the Identity Provider host (See https://aka.ms/msal-net-2-released)", "True")]
public string IdentityProvider { get; }
    [EditorBrowsableAttribute("1")]
[DebuggerBrowsableAttribute("0")]
[ObsoleteAttribute("Use IAccount.HomeAccountId.Identifier instead to get the user identifier (See https://aka.ms/msal-net-2-released)", "True")]
public string Identifier { get; }
    public abstract virtual string get_DisplayableId();
    public abstract virtual string get_Name();
    public abstract virtual string get_IdentityProvider();
    public abstract virtual string get_Identifier();
}
public class Microsoft.Identity.Client.LogCallback : MulticastDelegate {
    public LogCallback(object object, IntPtr method);
    public virtual void Invoke(LogLevel level, string message, bool containsPii);
    public virtual IAsyncResult BeginInvoke(LogLevel level, string message, bool containsPii, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ObsoleteAttribute("Logging is now specified per ClientApplication.  See https://aka.ms/msal-net-3-breaking-changes and https://aka.ms/msal-net-application-configuration", "True")]
public class Microsoft.Identity.Client.Logger : object {
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Logging is now specified per ClientApplication.  See https://aka.ms/msal-net-3-breaking-changes and https://aka.ms/msal-net-application-configuration", "True")]
unknown static LogCallback LogCallback {public set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Logging is now specified per ClientApplication.  See https://aka.ms/msal-net-3-breaking-changes and https://aka.ms/msal-net-application-configuration", "True")]
public static LogLevel Level { get; public set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Logging is now specified per ClientApplication.  See https://aka.ms/msal-net-3-breaking-changes and https://aka.ms/msal-net-application-configuration", "True")]
public static bool PiiLoggingEnabled { get; public set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Logging is now specified per ClientApplication.  See https://aka.ms/msal-net-3-breaking-changes and https://aka.ms/msal-net-application-configuration", "True")]
public static bool DefaultLoggingEnabled { get; public set; }
    public static void set_LogCallback(LogCallback value);
    public static LogLevel get_Level();
    public static void set_Level(LogLevel value);
    [CompilerGeneratedAttribute]
public static bool get_PiiLoggingEnabled();
    [CompilerGeneratedAttribute]
public static void set_PiiLoggingEnabled(bool value);
    [CompilerGeneratedAttribute]
public static bool get_DefaultLoggingEnabled();
    [CompilerGeneratedAttribute]
public static void set_DefaultLoggingEnabled(bool value);
}
public enum Microsoft.Identity.Client.LogLevel : Enum {
    public int value__;
    public static LogLevel Error;
    public static LogLevel Warning;
    public static LogLevel Info;
    public static LogLevel Verbose;
}
internal static class Microsoft.Identity.Client.LogMessages : object {
    public static string BeginningAcquireByRefreshToken;
    public static string NoScopesProvidedForRefreshTokenRequest;
    public static string CustomWebUiAcquiringAuthorizationCode;
    public static string CustomWebUiRedirectUriMatched;
    public static string CustomWebUiOperationCancelled;
    public static string CustomWebUiCallingAcquireAuthorizationCodeNoPii;
    public static string CheckMsalTokenResponseReturnedFromBroker;
    public static string BrokerResponseContainsAccessToken;
    public static string UnknownErrorReturnedInBrokerResponse;
    public static string BrokerInvocationRequired;
    public static string AddBrokerInstallUrlToPayload;
    public static string BrokerInvocationNotRequired;
    public static string CanInvokeBrokerAcquireTokenWithBroker;
    public static string AuthenticationWithBrokerDidNotSucceed;
    public static string UsingXScopesForRefreshTokenRequest(int numScopes);
    public static string CustomWebUiCallingAcquireAuthorizationCodePii(Uri authorizationUri, Uri redirectUri);
    public static string ErrorReturnedInBrokerResponse(string error);
}
internal enum Microsoft.Identity.Client.Mats.AuthOutcome : Enum {
    public int value__;
    public static AuthOutcome Succeeded;
    public static AuthOutcome Cancelled;
    public static AuthOutcome Failed;
    public static AuthOutcome Incomplete;
}
internal enum Microsoft.Identity.Client.Mats.CustomIdentityService : Enum {
    public int value__;
    public static CustomIdentityService EmailHrd;
    public static CustomIdentityService Basic;
    public static CustomIdentityService Fba;
    public static CustomIdentityService Kerberos;
    public static CustomIdentityService OnPremUnspecified;
}
internal enum Microsoft.Identity.Client.Mats.ErrorSource : Enum {
    public int value__;
    public static ErrorSource None;
    public static ErrorSource Service;
    public static ErrorSource AuthSdk;
    public static ErrorSource Client;
}
internal interface Microsoft.Identity.Client.Mats.IMatsTelemetryClient {
    public ITelemetryManager TelemetryManager { get; }
    public abstract virtual ITelemetryManager get_TelemetryManager();
    public abstract virtual MatsScenario CreateScenario();
    public abstract virtual MatsAction StartAction(MatsScenario scenario, string correlationId);
    public abstract virtual MatsAction StartActionWithScopes(MatsScenario scenario, string correlationId, IEnumerable`1<string> scopes);
    public abstract virtual void EndAction(MatsAction action, AuthenticationResult authenticationResult);
    public abstract virtual void EndAction(MatsAction action, Exception ex);
    public abstract virtual void EndAction(MatsAction action, AuthOutcome outcome, ErrorSource errorSource, string error, string errorDescription);
}
internal enum Microsoft.Identity.Client.Mats.InteractiveAuthContainerType : Enum {
    public int value__;
    public static InteractiveAuthContainerType Embedded;
    public static InteractiveAuthContainerType CompanyPortal;
    public static InteractiveAuthContainerType Wam;
    public static InteractiveAuthContainerType Authenticator;
    public static InteractiveAuthContainerType SystemWebView;
    public static InteractiveAuthContainerType Browser;
}
internal enum Microsoft.Identity.Client.Mats.Internal.AccountType : Enum {
    public int value__;
    public static AccountType MSA;
    public static AccountType AAD;
    public static AccountType B2C;
}
internal static class Microsoft.Identity.Client.Mats.Internal.ActionAggregator : object {
    public static void AggregateActions(ActionPropertyBag targetAction, ActionPropertyBag childAction);
}
internal class Microsoft.Identity.Client.Mats.Internal.ActionArtifacts : object {
    public MatsAction Action { get; }
    public ActionPropertyBag PropertyBag { get; }
    public ActionArtifacts(MatsAction action, ActionPropertyBag propertyBag);
    [CompilerGeneratedAttribute]
public MatsAction get_Action();
    [CompilerGeneratedAttribute]
public ActionPropertyBag get_PropertyBag();
}
internal static class Microsoft.Identity.Client.Mats.Internal.ActionComparer : object {
    public static bool IsEquivalentClass(ActionPropertyBag action1, ActionPropertyBag action2);
}
internal class Microsoft.Identity.Client.Mats.Internal.ActionPropertyBag : PropertyBag {
    public bool IsAggregable { get; public set; }
    public bool ReadyForUpload { get; public set; }
    public ActionPropertyBag(IErrorStore errorStore);
    public bool get_IsAggregable();
    public void set_IsAggregable(bool value);
    public bool get_ReadyForUpload();
    public void set_ReadyForUpload(bool value);
}
internal class Microsoft.Identity.Client.Mats.Internal.ActionStore : object {
    public ActionStore(int maxActionDurationMillis, int maxAggregationDurationMillis, IErrorStore errorStore, IEventFilter eventFilter, HashSet`1<string> telemetryAllowedScopes);
    public sealed virtual void EndMsalAction(MatsAction action, AuthOutcome outcome, ErrorSource errorSource, string error, string errorDescription);
    public sealed virtual IEnumerable`1<IPropertyBag> GetEventsForUpload();
    public sealed virtual void ProcessMsalTelemetryBlob(IDictionary`2<string, string> blob);
    public sealed virtual MatsAction StartMsalAction(MatsScenario scenario, string correlationId, IEnumerable`1<string> scopes);
}
internal enum Microsoft.Identity.Client.Mats.Internal.ActionType : Enum {
    public int value__;
    public static ActionType Adal;
    public static ActionType CustomInteractive;
    public static ActionType MsaInteractive;
    public static ActionType MsaNonInteractive;
    public static ActionType Wam;
    public static ActionType Msal;
}
internal class Microsoft.Identity.Client.Mats.Internal.Constants.ActionPropertyNames : object {
    public static string AccountIdConstStrKey;
    public static string AccountTypeConstStrKey;
    public static string ActionIdConstStrKey;
    public static string ActionTypeConstStrKey;
    public static string AppForcedPromptConstStrKey;
    public static string AskedForCredsConstStrKey;
    public static string AverageConstStrSuffix;
    public static string BlockingPromptConstStrKey;
    public static string CorrelationIdConstStrKey;
    public static string CountConstStrKey;
    public static string DurationConstStrKey;
    public static string EndTimeConstStrKey;
    public static string FailureConstStrKey;
    public static string FailureDescriptionConstStrKey;
    public static string FailureSourceConstStrKey;
    public static string IdentityConstStrKey;
    public static string IdentityServiceConstStrKey;
    public static string InteractiveAuthContainerConstStrKey;
    public static string IsSilentConstStrKey;
    public static string OutcomeConstStrKey;
    public static string MaxConstStrSuffix;
    public static string MinConstStrSuffix;
    public static string ResourceConstStrKey;
    public static string ScopeConstStrKey;
    public static string StartTimeConstStrKey;
    public static string SumConstStrSuffix;
    public static string UploadIdConstStrKey;
    public static string TenantIdConstStrKey;
    public static string WamApiConstStrKey;
    public static string WamTelemetryBatchConstStrKey;
}
internal static class Microsoft.Identity.Client.Mats.Internal.Constants.ApiTelemetryFeatureKey : object {
    public static string Unknown;
    public static string WithAccount;
    public static string WithForceRefresh;
    public static string WithLoginHint;
    public static string WithRedirectUri;
    public static string WithExtraScopesToConsent;
    public static string WithUserAssertion;
    public static string WithSendX5C;
    public static string WithCurrentSynchronizationContext;
    public static string WithEmbeddedWebView;
    public static string WithParent;
    public static string WithPrompt;
    public static string WithUsername;
    public static string WithClaims;
    public static string WithExtraQueryParameters;
    public static string WithAuthority;
    public static string WithValidateAuthority;
    public static string WithAdfsAuthority;
    public static string WithB2CAuthority;
    public static string WithCustomWebUi;
}
internal static class Microsoft.Identity.Client.Mats.Internal.Constants.ContextPropertyNames : object {
    public static string AppNameConstStrKey;
    public static string AppVerConstStrKey;
    public static string AppAudienceConstStrKey;
    public static string DeviceNetworkStateConstStrKey;
    public static string DptiConstStrKey;
    public static string SessionIdConstStrKey;
    public static string TypeConstStrKey;
    public static string MatsSdkVerConstStrKey;
    public static string PlatformConstStrKey;
}
internal static class Microsoft.Identity.Client.Mats.Internal.Constants.ContextPropertyValues : object {
    public static string AuthenticationConstStrValue;
    public static string MatsSdkVerConstStrValue;
}
internal static class Microsoft.Identity.Client.Mats.Internal.Constants.MatsErrorPropertyNames : object {
    public static string ErrorMessageConstStrKey;
    public static string SessionIdConstStrKey;
    public static string SeverityConstStrKey;
    public static string TimestampConstStrKey;
    public static string TypeConstStrKey;
    public static string CountConstStrKey;
}
internal static class Microsoft.Identity.Client.Mats.Internal.Constants.MsalTelemetryBlobEventNames : object {
    public static string MsalCorrelationIdConstStrKey;
    public static string ApiTelemIdConstStrKey;
    public static string ApiIdConstStrKey;
    public static string BrokerAppConstStrKey;
    public static string CacheEventCountConstStrKey;
    public static string HttpEventCountTelemetryBatchKey;
    public static string IdpConstStrKey;
    public static string IsSilentTelemetryBatchKey;
    public static string IsSuccessfulConstStrKey;
    public static string ResponseTimeConstStrKey;
    public static string TenantIdConstStrKey;
    public static string UiEventCountTelemetryBatchKey;
}
internal static class Microsoft.Identity.Client.Mats.Internal.Constants.MsalTelemetryBlobEventValues : object {
    public static string IsSuccessfulConstStrValue;
}
internal static class Microsoft.Identity.Client.Mats.Internal.Constants.ScenarioPropertyNames : object {
    public static string IdConstStrKey;
    public static string UploadIdConstStrKey;
}
internal static class Microsoft.Identity.Client.Mats.Internal.Constants.TimeConstants : object {
    public static int ActionTimeoutMilliseconds;
    public static int ScenarioTimeoutMilliseconds;
    public static int AggregationWindowMilliseconds;
}
internal class Microsoft.Identity.Client.Mats.Internal.ContextStore : object {
    public MatsAudienceType AudienceType { get; }
    public string AppName { get; }
    public string AppVersion { get; }
    public string DptiInternal { get; }
    public string DeviceNetworkState { get; }
    public string SessionId { get; }
    public int Platform { get; }
    public static ContextStore CreateContextStore(MatsAudienceType audienceType, string appName, string appVersion, string dptiInternal, string deviceNetworkState, string sessionId, int platform);
    [CompilerGeneratedAttribute]
public MatsAudienceType get_AudienceType();
    [CompilerGeneratedAttribute]
public string get_AppName();
    [CompilerGeneratedAttribute]
public string get_AppVersion();
    [CompilerGeneratedAttribute]
public string get_DptiInternal();
    [CompilerGeneratedAttribute]
public string get_DeviceNetworkState();
    [CompilerGeneratedAttribute]
public string get_SessionId();
    [CompilerGeneratedAttribute]
public int get_Platform();
    public void AddContext(IEnumerable`1<IPropertyBag> propertyBags);
}
internal static class Microsoft.Identity.Client.Mats.Internal.DateTimeUtils : object {
    public static long GetMillisecondsSinceEpoch(DateTime timeUtc);
}
internal enum Microsoft.Identity.Client.Mats.Internal.ErrorSeverity : Enum {
    public int value__;
    public static ErrorSeverity Warning;
    public static ErrorSeverity LibraryError;
}
internal class Microsoft.Identity.Client.Mats.Internal.ErrorStore : object {
    public sealed virtual void Append(IErrorStore errorStore);
    public sealed virtual void Clear();
    public sealed virtual IEnumerable`1<IPropertyBag> GetEventsForUpload();
    public sealed virtual void ReportError(string errorMessage, ErrorType errorType, ErrorSeverity errorSeverity);
}
internal enum Microsoft.Identity.Client.Mats.Internal.ErrorType : Enum {
    public int value__;
    public static ErrorType Uninitialized;
    public static ErrorType Scenario;
    public static ErrorType Action;
    public static ErrorType Other;
}
internal class Microsoft.Identity.Client.Mats.Internal.EventFilter : object {
    public EventFilter(bool enableAggregation);
    public sealed virtual void SetShouldAggregate(bool shouldAggregate);
    public sealed virtual bool ShouldAggregateAction(PropertyBagContents contents);
    public sealed virtual bool IsSilentAction(PropertyBagContents contents);
}
internal class Microsoft.Identity.Client.Mats.Internal.Events.ApiEvent : EventBase {
    public static string AuthorityKey;
    public static string AuthorityTypeKey;
    public static string PromptKey;
    public static string TenantIdKey;
    public static string UserIdKey;
    public static string WasSuccessfulKey;
    public static string IsConfidentialClientKey;
    public static string ApiErrorCodeKey;
    public static string LoginHintKey;
    unknown ApiTelemetryId ApiTelemId {public set; }
    unknown ApiIds ApiId {public set; }
    unknown Uri Authority {public set; }
    unknown string AuthorityType {public set; }
    unknown string Prompt {public set; }
    unknown string TenantId {public set; }
    unknown string AccountId {public set; }
    public bool WasSuccessful { get; public set; }
    unknown bool IsConfidentialClient {public set; }
    unknown string ApiErrorCode {public set; }
    unknown string LoginHint {public set; }
    public ApiEvent(ICoreLogger logger, ICryptographyManager cryptographyManager, string telemetryCorrelationId);
    public void set_ApiTelemId(ApiTelemetryId value);
    public void set_ApiId(ApiIds value);
    public void set_Authority(Uri value);
    public void set_AuthorityType(string value);
    public void set_Prompt(string value);
    public void set_TenantId(string value);
    public void set_AccountId(string value);
    public void set_WasSuccessful(bool value);
    public bool get_WasSuccessful();
    public void set_IsConfidentialClient(bool value);
    public void set_ApiErrorCode(string value);
    public void set_LoginHint(string value);
}
internal enum Microsoft.Identity.Client.Mats.Internal.Events.ApiTelemetryFeature : Enum {
    public int value__;
    public static ApiTelemetryFeature WithAccount;
    public static ApiTelemetryFeature WithLoginHint;
    public static ApiTelemetryFeature WithForceRefresh;
    public static ApiTelemetryFeature WithRedirectUri;
    public static ApiTelemetryFeature WithExtraScopesToConsent;
    public static ApiTelemetryFeature WithUserAssertion;
    public static ApiTelemetryFeature WithSendX5C;
    public static ApiTelemetryFeature WithCurrentSynchronizationContext;
    public static ApiTelemetryFeature WithEmbeddedWebView;
    public static ApiTelemetryFeature WithParent;
    public static ApiTelemetryFeature WithPrompt;
    public static ApiTelemetryFeature WithUsername;
    public static ApiTelemetryFeature WithClaims;
    public static ApiTelemetryFeature WithExtraQueryParameters;
    public static ApiTelemetryFeature WithAuthority;
    public static ApiTelemetryFeature WithValidateAuthority;
    public static ApiTelemetryFeature WithAdfsAuthority;
    public static ApiTelemetryFeature WithB2CAuthority;
    public static ApiTelemetryFeature WithCustomWebUi;
}
internal enum Microsoft.Identity.Client.Mats.Internal.Events.ApiTelemetryId : Enum {
    public int value__;
    public static ApiTelemetryId Unknown;
    public static ApiTelemetryId AcquireTokenSilent;
    public static ApiTelemetryId AcquireTokenWithDeviceCode;
    public static ApiTelemetryId GetAuthorizationRequestUrl;
    public static ApiTelemetryId AcquireTokenOnBehalfOf;
    public static ApiTelemetryId AcquireTokenInteractive;
    public static ApiTelemetryId AcquireTokenForClient;
    public static ApiTelemetryId AcquireTokenByUsernamePassword;
    public static ApiTelemetryId AcquireTokenByRefreshToken;
    public static ApiTelemetryId AcquireTokenByIntegratedWindowsAuth;
    public static ApiTelemetryId AcquireTokenByAuthorizationCode;
}
internal class Microsoft.Identity.Client.Mats.Internal.Events.CacheEvent : EventBase {
    public static string TokenCacheLookup;
    public static string TokenCacheWrite;
    public static string TokenCacheBeforeAccess;
    public static string TokenCacheAfterAccess;
    public static string TokenCacheBeforeWrite;
    public static string TokenCacheDelete;
    public static string TokenTypeKey;
    unknown TokenTypes TokenType {public set; }
    public CacheEvent(string eventName, string telemetryCorrelationId);
    public void set_TokenType(TokenTypes value);
}
internal class Microsoft.Identity.Client.Mats.Internal.Events.DefaultEvent : EventBase {
    public DefaultEvent(IPlatformProxy platformProxy, string telemetryCorrelationId, string clientId, IDictionary`2<string, int> eventCount);
}
internal abstract class Microsoft.Identity.Client.Mats.Internal.Events.EventBase : Dictionary`2<string, string> {
    protected static string EventNamePrefix;
    public static string EventNameKey;
    public static string StartTimeKey;
    public static string ElapsedTimeKey;
    public static string TenantPlaceHolder;
    public string EventId { get; }
    public string TelemetryCorrelationId { get; public set; }
    public EventBase(string eventName, string telemetryCorrelationId);
    [CompilerGeneratedAttribute]
public string get_EventId();
    protected static long CurrentUnixTimeMilliseconds();
    public string get_TelemetryCorrelationId();
    public void set_TelemetryCorrelationId(string value);
    public void Stop();
    public static string ScrubTenant(Uri uri);
    public string HashPersonalIdentifier(ICryptographyManager cryptographyManager, string valueToHash);
}
internal class Microsoft.Identity.Client.Mats.Internal.Events.HttpEvent : EventBase {
    public static string HttpPathKey;
    public static string UserAgentKey;
    public static string QueryParametersKey;
    public static string ApiVersionKey;
    public static string ResponseCodeKey;
    public static string OauthErrorCodeKey;
    public static string HttpMethodKey;
    public static string RequestIdHeaderKey;
    public static string TokenAgeKey;
    public static string SpeInfoKey;
    public static string ServerErrorCodeKey;
    public static string ServerSubErrorCodeKey;
    unknown Uri HttpPath {public set; }
    unknown string UserAgent {public set; }
    unknown string QueryParams {public set; }
    unknown string ApiVersion {public set; }
    unknown int HttpResponseStatus {public set; }
    unknown string OauthErrorCode {public set; }
    unknown string HttpMethod {public set; }
    unknown string RequestIdHeader {public set; }
    unknown string TokenAge {public set; }
    unknown string SpeInfo {public set; }
    unknown string ServerErrorCode {public set; }
    unknown string ServerSubErrorCode {public set; }
    public HttpEvent(string telemetryCorrelationId);
    public void set_HttpPath(Uri value);
    public void set_UserAgent(string value);
    public void set_QueryParams(string value);
    public void set_ApiVersion(string value);
    public void set_HttpResponseStatus(int value);
    public void set_OauthErrorCode(string value);
    public void set_HttpMethod(string value);
    public void set_RequestIdHeader(string value);
    public void set_TokenAge(string value);
    public void set_SpeInfo(string value);
    public void set_ServerErrorCode(string value);
    public void set_ServerSubErrorCode(string value);
}
internal class Microsoft.Identity.Client.Mats.Internal.Events.UiEvent : EventBase {
    public static string UserCancelledKey;
    public static string AccessDeniedKey;
    unknown bool UserCancelled {public set; }
    unknown bool AccessDenied {public set; }
    public UiEvent(string telemetryCorrelationId);
    public void set_UserCancelled(bool value);
    public void set_AccessDenied(bool value);
}
internal enum Microsoft.Identity.Client.Mats.Internal.EventType : Enum {
    public int value__;
    public static EventType Scenario;
    public static EventType Action;
    public static EventType LibraryError;
}
internal interface Microsoft.Identity.Client.Mats.Internal.IActionStore {
    public abstract virtual MatsAction StartMsalAction(MatsScenario scenario, string correlationId, IEnumerable`1<string> scopes);
    public abstract virtual void ProcessMsalTelemetryBlob(IDictionary`2<string, string> blob);
    public abstract virtual void EndMsalAction(MatsAction action, AuthOutcome outcome, ErrorSource errorSource, string error, string errorDescription);
    public abstract virtual IEnumerable`1<IPropertyBag> GetEventsForUpload();
}
internal enum Microsoft.Identity.Client.Mats.Internal.IdentityService : Enum {
    public int value__;
    public static IdentityService AAD;
    public static IdentityService MSA;
}
internal interface Microsoft.Identity.Client.Mats.Internal.IErrorStore {
    public abstract virtual void ReportError(string errorMessage, ErrorType errorType, ErrorSeverity errorSeverity);
    public abstract virtual IEnumerable`1<IPropertyBag> GetEventsForUpload();
    public abstract virtual void Append(IErrorStore errorStore);
    public abstract virtual void Clear();
}
internal interface Microsoft.Identity.Client.Mats.Internal.IEventFilter {
    public abstract virtual bool ShouldAggregateAction(PropertyBagContents contents);
    public abstract virtual bool IsSilentAction(PropertyBagContents contents);
    public abstract virtual void SetShouldAggregate(bool shouldAggregate);
}
internal interface Microsoft.Identity.Client.Mats.Internal.IPropertyBag {
    public abstract virtual PropertyBagContents GetContents();
    public abstract virtual void Add(string key, string val);
    public abstract virtual void Add(string key, int val);
    public abstract virtual void Add(string key, long val);
    public abstract virtual void Update(string key, int value);
}
internal interface Microsoft.Identity.Client.Mats.Internal.IScenarioStore {
    public abstract virtual MatsScenario CreateScenario();
    public abstract virtual IEnumerable`1<IPropertyBag> GetEventsForUpload();
    public abstract virtual void ClearCompletedScenarios();
    public abstract virtual void NotifyActionCompleted(string scenarioId);
}
internal interface Microsoft.Identity.Client.Mats.Internal.IUploader {
    public string AppName { get; }
    public abstract virtual string get_AppName();
    public abstract virtual void Upload(IEnumerable`1<PropertyBagContents> uploadEvents);
}
internal class Microsoft.Identity.Client.Mats.Internal.MatsAction : object {
    public string ActionId { get; }
    public MatsScenario Scenario { get; }
    public string TelemetryCorrelationId { get; }
    public MatsAction(string actionId, MatsScenario scenario, string telemetryCorrelationId);
    [CompilerGeneratedAttribute]
public string get_ActionId();
    [CompilerGeneratedAttribute]
public MatsScenario get_Scenario();
    [CompilerGeneratedAttribute]
public string get_TelemetryCorrelationId();
}
internal static class Microsoft.Identity.Client.Mats.Internal.MatsConverter : object {
    public static string AsString(AccountType accountType);
    public static string AsString(ActionType actionType);
    public static string AsString(AuthOutcome outcome);
    public static string AsString(ErrorSource errorSource);
    public static string AsString(EventType eventType);
    public static string AsString(IdentityService service);
    public static string AsString(MatsAudienceType audience);
    public static string AsString(OsPlatform osPlatform);
    public static int AsInt(OsPlatform osPlatform);
    public static string AsString(ApiTelemetryFeature apiTelemetryFeature);
}
[ExtensionAttribute]
internal static class Microsoft.Identity.Client.Mats.Internal.MatsId : object {
    public static string Create();
    [ExtensionAttribute]
public static string AsMatsCorrelationId(Guid correlationIdGuid);
}
internal class Microsoft.Identity.Client.Mats.Internal.MatsScenario : object {
    public string ScenarioId { get; }
    public int ActionCount { get; }
    public MatsScenario(string scenarioId, int actionCount);
    [CompilerGeneratedAttribute]
public string get_ScenarioId();
    [CompilerGeneratedAttribute]
public int get_ActionCount();
}
internal class Microsoft.Identity.Client.Mats.Internal.MatsTelemetryBatch : object {
    public IReadOnlyDictionary`2<string, bool> BoolValues { get; }
    public IReadOnlyDictionary`2<string, long> Int64Values { get; }
    public IReadOnlyDictionary`2<string, int> IntValues { get; }
    public IReadOnlyDictionary`2<string, string> StringValues { get; }
    public string Name { get; }
    public static IMatsTelemetryBatch Create(string name, PropertyBagContents contents);
    public sealed virtual string ToJsonString();
    public sealed virtual IReadOnlyDictionary`2<string, bool> get_BoolValues();
    public sealed virtual IReadOnlyDictionary`2<string, long> get_Int64Values();
    public sealed virtual IReadOnlyDictionary`2<string, int> get_IntValues();
    public sealed virtual IReadOnlyDictionary`2<string, string> get_StringValues();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
}
internal static class Microsoft.Identity.Client.Mats.Internal.MatsUtils : object {
    public static bool ContainsCharsThatAreEitherAlphaNumericOrDotsOrUnderscore(string name);
    public static bool IsValidPropertyName(string name, String& errorMessage);
    public static string NormalizeValidPropertyName(string name, String& errorMessage);
}
internal enum Microsoft.Identity.Client.Mats.Internal.OsPlatform : Enum {
    public int value__;
    public static OsPlatform Win32;
    public static OsPlatform Android;
    public static OsPlatform Ios;
    public static OsPlatform Mac;
    public static OsPlatform Winrt;
}
internal class Microsoft.Identity.Client.Mats.Internal.PropertyBag : object {
    public PropertyBag(EventType eventType, IErrorStore errorStore);
    public sealed virtual void Add(string key, string value);
    public sealed virtual void Add(string key, int value);
    public sealed virtual void Add(string key, long value);
    public void Add(string key, bool value);
    public sealed virtual PropertyBagContents GetContents();
    public sealed virtual void Update(string key, int value);
    public void Sum(string key, int value);
    public void Max(string key, int value);
    public void Min(string key, int value);
    public void Sum(string key, long value);
    public void Max(string key, long value);
    public void Min(string key, long value);
    public void IncrementCount();
    public int GetCount();
}
internal class Microsoft.Identity.Client.Mats.Internal.PropertyBagContents : object {
    public ConcurrentDictionary`2<string, string> StringProperties;
    public ConcurrentDictionary`2<string, int> IntProperties;
    public ConcurrentDictionary`2<string, long> Int64Properties;
    public ConcurrentDictionary`2<string, bool> BoolProperties;
    public EventType EventType { get; }
    public PropertyBagContents(EventType eventType);
    [CompilerGeneratedAttribute]
public EventType get_EventType();
}
internal static class Microsoft.Identity.Client.Mats.Internal.SampleUtils : object {
    public static bool ShouldEnableDevice(string uuid);
}
internal class Microsoft.Identity.Client.Mats.Internal.ScenarioHolder : object {
    public IPropertyBag PropertyBag { get; }
    public bool ShouldUpload { get; public set; }
    public DateTime StartTime { get; }
    public ScenarioHolder(IPropertyBag propertyBag);
    [CompilerGeneratedAttribute]
public IPropertyBag get_PropertyBag();
    [CompilerGeneratedAttribute]
public bool get_ShouldUpload();
    [CompilerGeneratedAttribute]
public void set_ShouldUpload(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_StartTime();
}
internal class Microsoft.Identity.Client.Mats.Internal.ScenarioStore : object {
    public ScenarioStore(int maxInactiveScenarioDurationMillis, IErrorStore errorStore);
    public sealed virtual MatsScenario CreateScenario();
    public sealed virtual IEnumerable`1<IPropertyBag> GetEventsForUpload();
    public sealed virtual void ClearCompletedScenarios();
    public sealed virtual void NotifyActionCompleted(string scenarioId);
}
[ExtensionAttribute]
internal static class Microsoft.Identity.Client.Mats.Internal.StringExtensions : object {
    [ExtensionAttribute]
public static string TrimCurlyBraces(string input);
}
internal class Microsoft.Identity.Client.Mats.Internal.TelemetryUploader : object {
    public string AppName { get; }
    public TelemetryUploader(Action`1<IMatsTelemetryBatch> dispatchAction, IPlatformProxy platformProxy, string appName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_AppName();
    public sealed virtual void Upload(IEnumerable`1<PropertyBagContents> uploadEvents);
}
internal static class Microsoft.Identity.Client.Mats.Internal.UploadEventUtils : object {
    public static string GetUploadEventName(IPlatformProxy platformProxy, EventType eventType, string appName);
}
internal enum Microsoft.Identity.Client.Mats.Internal.WamApi : Enum {
    public int value__;
    public static WamApi RequestToken;
    public static WamApi GetTokenSilently;
    public static WamApi Other;
}
internal enum Microsoft.Identity.Client.Mats.Internal.WamIdentityService : Enum {
    public int value__;
    public static WamIdentityService Msa;
    public static WamIdentityService Aad;
}
internal class Microsoft.Identity.Client.Mats.MatsTelemetryClient : object {
    public ITelemetryManager TelemetryManager { get; }
    public static IMatsTelemetryClient CreateMats(IApplicationConfiguration applicationConfiguration, IPlatformProxy platformProxy, IMatsConfig matsConfig);
    [CompilerGeneratedAttribute]
public sealed virtual ITelemetryManager get_TelemetryManager();
    public sealed virtual MatsScenario CreateScenario();
    public sealed virtual MatsAction StartAction(MatsScenario scenario, string correlationId);
    public sealed virtual MatsAction StartActionWithScopes(MatsScenario scenario, string correlationId, IEnumerable`1<string> scopes);
    public sealed virtual void EndAction(MatsAction action, AuthenticationResult authenticationResult);
    public sealed virtual void EndAction(MatsAction action, AuthOutcome outcome, ErrorSource errorSource, string error, string errorDescription);
    public sealed virtual void EndAction(MatsAction action, Exception ex);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    public void ProcessTelemetryCallback(List`1<Dictionary`2<string, string>> events);
}
internal enum Microsoft.Identity.Client.MatsAudienceType : Enum {
    public int value__;
    public static MatsAudienceType PreProduction;
    public static MatsAudienceType Production;
}
internal class Microsoft.Identity.Client.MatsConfig : object {
    public MatsAudienceType AudienceType { get; public set; }
    public string SessionId { get; public set; }
    public Action`1<IMatsTelemetryBatch> DispatchAction { get; public set; }
    public IEnumerable`1<string> AllowedScopes { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual MatsAudienceType get_AudienceType();
    [CompilerGeneratedAttribute]
public void set_AudienceType(MatsAudienceType value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SessionId();
    [CompilerGeneratedAttribute]
public void set_SessionId(string value);
    [CompilerGeneratedAttribute]
public sealed virtual Action`1<IMatsTelemetryBatch> get_DispatchAction();
    [CompilerGeneratedAttribute]
public void set_DispatchAction(Action`1<IMatsTelemetryBatch> value);
    [CompilerGeneratedAttribute]
public sealed virtual IEnumerable`1<string> get_AllowedScopes();
    [CompilerGeneratedAttribute]
public void set_AllowedScopes(IEnumerable`1<string> value);
}
internal static class Microsoft.Identity.Client.MigrationHelper : object {
    public static NotImplementedException CreateMsalNet3BreakingChangesException();
}
public class Microsoft.Identity.Client.MsalClientException : MsalException {
    public MsalClientException(string errorCode);
    public MsalClientException(string errorCode, string errorMessage);
    public MsalClientException(string errorCode, string errorMessage, Exception innerException);
}
public static class Microsoft.Identity.Client.MsalError : object {
    public static string InvalidGrantError;
    public static string NoTokensFoundError;
    public static string UserNullError;
    public static string NoAccountForLoginHint;
    public static string MultipleAccountsForLoginHint;
    public static string TokenCacheNullError;
    public static string NoPromptFailedError;
    public static string ServiceNotAvailable;
    public static string RequestTimeout;
    public static string UpnRequired;
    public static string MissingPassiveAuthEndpoint;
    public static string InvalidAuthority;
    public static string InvalidAuthorityType;
    public static string UnknownError;
    public static string AuthenticationFailed;
    public static string AuthorityValidationFailed;
    public static string InvalidOwnerWindowType;
    public static string InvalidServiceUrl;
    public static string EncodedTokenTooLong;
    public static string NoDataFromSts;
    public static string UserMismatch;
    public static string FailedToRefreshToken;
    public static string FailedToAcquireTokenSilentlyFromBroker;
    public static string RedirectUriValidationFailed;
    public static string AuthenticationUiFailed;
    public static string InternalError;
    public static string AccessingWsMetadataExchangeFailed;
    public static string FederatedServiceReturnedError;
    public static string UserRealmDiscoveryFailed;
    public static string MissingFederationMetadataUrl;
    public static string ParsingWsMetadataExchangeFailed;
    public static string WsTrustEndpointNotFoundInMetadataDocument;
    public static string ParsingWsTrustResponseFailed;
    public static string UnknownUserType;
    public static string UnknownUser;
    public static string GetUserNameFailed;
    public static string PasswordRequiredForManagedUserError;
    public static string InvalidRequest;
    public static string UapCannotFindDomainUser;
    public static string UapCannotFindUpn;
    public static string NonParsableOAuthError;
    public static string CodeExpired;
    public static string IntegratedWindowsAuthNotSupportedForManagedUser;
    public static string ActivityRequired;
    public static string BrokerResponseHashMismatch;
    public static string BrokerResponseReturnedError;
    public static string CannotInvokeBroker;
    public static string HttpStatusNotFound;
    public static string HttpStatusCodeNotOk;
    public static string CustomWebUiReturnedInvalidUri;
    public static string CustomWebUiRedirectUriMismatch;
    public static string AccessDenied;
    public static string CannotAccessUserInformationOrUserNotDomainJoined;
    public static string DefaultRedirectUriIsInvalid;
    public static string NoRedirectUri;
    public static string MultipleTokensMatchedError;
    public static string NonHttpsRedirectNotSupported;
    public static string NetworkNotAvailableError;
    public static string B2CAuthorityHostMismatch;
    public static string DuplicateQueryParameterError;
    public static string AuthenticationUiFailedError;
    public static string AuthenticationCanceledError;
    public static string JsonParseError;
    public static string InvalidJwtError;
    public static string StateMismatchError;
    public static string TenantDiscoveryFailedError;
    public static string PlatformNotSupported;
}
internal static class Microsoft.Identity.Client.MsalErrorMessage : object {
    public static string AccessingMetadataDocumentFailed;
    public static string AssemblyNotFoundTemplate;
    public static string AssemblyLoadFailedTemplate;
    public static string AuthenticationUiFailed;
    public static string DeprecatedAuthorityError;
    public static string CertificateKeySizeTooSmallTemplate;
    public static string EmailAddressSuffixMismatch;
    public static string EncodedTokenTooLong;
    public static string FailedToAcquireTokenSilently;
    public static string FailedToRefreshToken;
    public static string IdentityProtocolLoginUrlNull;
    public static string IdentityProtocolMismatch;
    public static string IdentityProviderRequestFailed;
    public static string InvalidArgumentLength;
    public static string InvalidAuthenticateHeaderFormat;
    public static string InvalidAuthorityTypeTemplate;
    public static string InvalidCredentialType;
    public static string InvalidFormatParameterTemplate;
    public static string InvalidTokenCacheKeyFormat;
    public static string MissingAuthenticateHeader;
    public static string MultipleTokensMatched;
    public static string NetworkNotAvailable;
    public static string NoDataFromSTS;
    public static string NullParameterTemplate;
    public static string ParsingMetadataDocumentFailed;
    public static string ParsingWsTrustResponseFailed;
    public static string PasswordRequiredForManagedUserError;
    public static string LoginHintNullForUiOption;
    public static string ServiceReturnedError;
    public static string BrokerResponseHashMismatch;
    public static string StsMetadataRequestFailed;
    public static string StsTokenRequestFailed;
    public static string UnauthorizedHttpStatusCodeExpected;
    public static string UnauthorizedResponseExpected;
    public static string UnexpectedAuthorityValidList;
    public static string UnsupportedUserType;
    public static string UnsupportedMultiRefreshToken;
    public static string UserMismatch;
    public static string UserCredentialAssertionTypeEmpty;
    public static string NoPromptFailedErrorMessage;
    public static string UserRealmDiscoveryFailed;
    public static string WsTrustEndpointNotFoundInMetadataDocument;
    public static string GetUserNameFailed;
    public static string MissingFederationMetadataUrl;
    public static string SpecifyAnyUser;
    public static string IntegratedAuthFailed;
    public static string DuplicateQueryParameterTemplate;
    public static string DeviceCertificateNotFoundTemplate;
    public static string MsalUiRequiredMessage;
    public static string UserMismatchSaveToken;
    public static string IwaNotSupportedForManagedUser;
    public static string ActivityRequired;
    public static string BrokerResponseReturnedError;
    public static string BrokerResponseError;
    public static string CannotInvokeBroker;
    public static string NoAccountForLoginHint;
    public static string MultipleAccountsForLoginHint;
    public static string UnknownUser;
    public static string HttpRequestUnsuccessful;
    public static string AuthorityInvalidUriFormat;
    public static string AuthorityNotSupported;
    public static string AuthorityValidationFailed;
    public static string AuthorityUriInsecure;
    public static string AuthorityUriInvalidPath;
    public static string B2cAuthorityUriInvalidPath;
    public static string UnsupportedAuthorityValidation;
    public static string AuthenticationCanceled;
    public static string AuthenticationCanceledAndroid;
    public static string Unknown;
    public static string AuthorizationServerInvalidResponse;
    public static string NonHttpsRedirectNotSupported;
    public static string IDTokenMustHaveTwoParts;
    public static string FailedToParseIDToken;
    public static string InvalidAuthorityOpenId;
    public static string UpnRequiredForAuthroityValidation;
    public static string CannotFindTheAuthEndpont;
    public static string UapCannotFindUpn;
    public static string UapCannotFindDomainUser;
    public static string PlatformNotSupported;
    public static string FederatedServiceReturnedErrorTemplate;
    public static string UnknownUserType;
    public static string InternalErrorCacheEmptyUsername;
    public static string InternalErrorCacheEmptyIdentifier;
    public static string NonParsableOAuthError;
    public static string CannotAccessPublisherKeyChain;
    public static string MissingEntitlements;
    public static string AndroidActivityNotFound;
    public static string DefaultRedirectUriIsInvalid;
    public static string RedirectUriContainsFragment;
    public static string NoRedirectUri;
    public static string ClientApplicationBaseExecutorNotImplemented;
    public static string ActivityRequiredForParentObjectAndroid;
    public static string LoggingCallbackAlreadySet;
    public static string TelemetryCallbackAlreadySet;
    public static string NoClientIdWasSpecified;
    public static string AdfsNotCurrentlySupportedAuthorityType;
    public static string TenantIdAndAadAuthorityInstanceAreMutuallyExclusive;
    public static string InstanceAndAzureCloudInstanceAreMutuallyExclusive;
    public static string NoRefreshTokenProvided;
    public static string NullTokenCacheError;
    public static string NullTokenCacheForSilentError;
    public static string NoTokensFoundError;
    public static string NoRefreshTokenInResponse;
    public static string ConfidentialClientDoesntImplementIConfidentialClientApplicationExecutor;
    public static string ClientSecretAndCertificateAreMutuallyExclusive;
    public static string ClientIdMustBeAGuid;
    public static string TelemetryClassIsObsolete;
    public static string LoggingClassIsObsolete;
    public static string AuthorityDoesNotHaveTwoSegments;
    public static string AzureAdMyOrgRequiresSpecifyingATenant;
    public static string CustomWebUiReturnedInvalidUri;
    public static string InteractiveAuthNotSupported;
    public static string CustomWebUiAuthorizationCodeFailed;
    public static string TokenCacheJsonSerializerFailedParse;
    public static string TokenCacheDictionarySerializerFailedParse;
    public static string BrokerNotSupportedOnThisPlatform;
    public static string MsalExceptionFailedToParse;
    public static string MatsAndTelemetryCallbackCannotBeConfiguredSimultaneously;
    public static string AkaMsmsalnet3BreakingChanges;
    public static string B2CAuthorityHostMisMatch;
    public static string InvalidRedirectUriReceived(string invalidRedirectUri);
    public static string CustomWebUiRedirectUriMismatch(string expectedUri, string actualUri);
}
public class Microsoft.Identity.Client.MsalException : Exception {
    public string ErrorCode { get; }
    public MsalException(string errorCode);
    public MsalException(string errorCode, string errorMessage);
    public MsalException(string errorCode, string errorMessage, Exception innerException);
    public string get_ErrorCode();
    public virtual string ToString();
    internal virtual void PopulateJson(JObject jobj);
    internal virtual void PopulateObjectFromJson(JObject jobj);
    public string ToJsonString();
    public static MsalException FromJsonString(string json);
}
public class Microsoft.Identity.Client.MsalServiceException : MsalException {
    internal HttpResponse HttpResponse { get; internal set; }
    internal OAuth2ResponseBase OAuth2Response { get; internal set; }
    public int StatusCode { get; internal set; }
    public string Claims { get; internal set; }
    public string ResponseBody { get; internal set; }
    internal string SubError { get; internal set; }
    public HttpResponseHeaders Headers { get; internal set; }
    public string CorrelationId { get; internal set; }
    public MsalServiceException(string errorCode, string errorMessage);
    public MsalServiceException(string errorCode, string errorMessage, int statusCode);
    public MsalServiceException(string errorCode, string errorMessage, Exception innerException);
    public MsalServiceException(string errorCode, string errorMessage, int statusCode, Exception innerException);
    public MsalServiceException(string errorCode, string errorMessage, int statusCode, string claims, Exception innerException);
    internal HttpResponse get_HttpResponse();
    internal void set_HttpResponse(HttpResponse value);
    internal OAuth2ResponseBase get_OAuth2Response();
    internal void set_OAuth2Response(OAuth2ResponseBase value);
    [CompilerGeneratedAttribute]
public int get_StatusCode();
    [CompilerGeneratedAttribute]
internal void set_StatusCode(int value);
    [CompilerGeneratedAttribute]
public string get_Claims();
    [CompilerGeneratedAttribute]
internal void set_Claims(string value);
    [CompilerGeneratedAttribute]
public string get_ResponseBody();
    [CompilerGeneratedAttribute]
internal void set_ResponseBody(string value);
    [CompilerGeneratedAttribute]
internal string get_SubError();
    [CompilerGeneratedAttribute]
internal void set_SubError(string value);
    [CompilerGeneratedAttribute]
public HttpResponseHeaders get_Headers();
    [CompilerGeneratedAttribute]
internal void set_Headers(HttpResponseHeaders value);
    [CompilerGeneratedAttribute]
public string get_CorrelationId();
    [CompilerGeneratedAttribute]
internal void set_CorrelationId(string value);
    public virtual string ToString();
    internal virtual void PopulateJson(JObject jobj);
    internal virtual void PopulateObjectFromJson(JObject jobj);
}
public class Microsoft.Identity.Client.MsalUiRequiredException : MsalServiceException {
    public MsalUiRequiredException(string errorCode, string errorMessage);
    public MsalUiRequiredException(string errorCode, string errorMessage, Exception innerException);
}
[DataContractAttribute]
internal class Microsoft.Identity.Client.OAuth2.MsalTokenResponse : OAuth2ResponseBase {
    [DataMemberAttribute]
public string TokenType { get; public set; }
    [DataMemberAttribute]
public string AccessToken { get; public set; }
    [DataMemberAttribute]
public string RefreshToken { get; public set; }
    [DataMemberAttribute]
public string Scope { get; public set; }
    [DataMemberAttribute]
public string ClientInfo { get; public set; }
    [DataMemberAttribute]
public string IdToken { get; public set; }
    [DataMemberAttribute]
public long ExpiresIn { get; public set; }
    [DataMemberAttribute]
public long ExtendedExpiresIn { get; public set; }
    [DataMemberAttribute]
public string FamilyId { get; public set; }
    public DateTimeOffset AccessTokenExpiresOn { get; }
    public DateTimeOffset AccessTokenExtendedExpiresOn { get; }
    public string Authority { get; }
    [CompilerGeneratedAttribute]
public string get_TokenType();
    [CompilerGeneratedAttribute]
public void set_TokenType(string value);
    [CompilerGeneratedAttribute]
public string get_AccessToken();
    [CompilerGeneratedAttribute]
public void set_AccessToken(string value);
    [CompilerGeneratedAttribute]
public string get_RefreshToken();
    [CompilerGeneratedAttribute]
public void set_RefreshToken(string value);
    [CompilerGeneratedAttribute]
public string get_Scope();
    [CompilerGeneratedAttribute]
public void set_Scope(string value);
    [CompilerGeneratedAttribute]
public string get_ClientInfo();
    [CompilerGeneratedAttribute]
public void set_ClientInfo(string value);
    [CompilerGeneratedAttribute]
public string get_IdToken();
    [CompilerGeneratedAttribute]
public void set_IdToken(string value);
    public long get_ExpiresIn();
    public void set_ExpiresIn(long value);
    public long get_ExtendedExpiresIn();
    public void set_ExtendedExpiresIn(long value);
    [CompilerGeneratedAttribute]
public string get_FamilyId();
    [CompilerGeneratedAttribute]
public void set_FamilyId(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_AccessTokenExpiresOn();
    [CompilerGeneratedAttribute]
public DateTimeOffset get_AccessTokenExtendedExpiresOn();
    [CompilerGeneratedAttribute]
public string get_Authority();
    internal static MsalTokenResponse CreateFromBrokerResponse(Dictionary`2<string, string> responseDictionary);
}
internal static class Microsoft.Identity.Client.OAuth2.OAuth2AssertionType : object {
    public static string JwtBearer;
}
internal class Microsoft.Identity.Client.OAuth2.OAuth2Client : object {
    public OAuth2Client(ICoreLogger logger, IHttpManager httpManager, ITelemetryManager telemetryManager);
    public void AddQueryParameter(string key, string value);
    public void AddBodyParameter(string key, string value);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.OAuth2.OAuth2Client/<DiscoverAadInstanceAsync>d__8")]
public Task`1<InstanceDiscoveryResponse> DiscoverAadInstanceAsync(Uri endPoint, RequestContext requestContext);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.OAuth2.OAuth2Client/<GetTokenAsync>d__9")]
public Task`1<MsalTokenResponse> GetTokenAsync(Uri endPoint, RequestContext requestContext);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.OAuth2.OAuth2Client/<ExecuteRequestAsync>d__10`1")]
internal Task`1<T> ExecuteRequestAsync(Uri endPoint, HttpMethod method, RequestContext requestContext);
    public static T CreateResponse(HttpResponse response, RequestContext requestContext, bool addCorrelationId);
    public static void CreateErrorResponse(HttpResponse response, RequestContext requestContext);
}
internal static class Microsoft.Identity.Client.OAuth2.OAuth2Error : object {
    public static string LoginRequired;
    public static string AuthorizationPending;
}
internal static class Microsoft.Identity.Client.OAuth2.OAuth2GrantType : object {
    public static string AuthorizationCode;
    public static string RefreshToken;
    public static string ClientCredentials;
    public static string Saml11Bearer;
    public static string Saml20Bearer;
    public static string JwtBearer;
    public static string Password;
    public static string DeviceCode;
}
internal static class Microsoft.Identity.Client.OAuth2.OAuth2Header : object {
    public static string CorrelationId;
    public static string RequestCorrelationIdInResponse;
    public static string AppName;
    public static string AppVer;
}
internal static class Microsoft.Identity.Client.OAuth2.OAuth2Parameter : object {
    public static string ResponseType;
    public static string GrantType;
    public static string ClientId;
    public static string ClientSecret;
    public static string ClientAssertion;
    public static string ClientAssertionType;
    public static string RefreshToken;
    public static string RedirectUri;
    public static string Resource;
    public static string Code;
    public static string DeviceCode;
    public static string Scope;
    public static string Assertion;
    public static string RequestedTokenUse;
    public static string Username;
    public static string Password;
    public static string LoginHint;
    public static string CorrelationId;
    public static string State;
    public static string CodeChallengeMethod;
    public static string CodeChallenge;
    public static string CodeVerifier;
    public static string LoginReq;
    public static string DomainReq;
    public static string Prompt;
    public static string ClientInfo;
    public static string Claims;
}
internal static class Microsoft.Identity.Client.OAuth2.OAuth2RequestedTokenUse : object {
    public static string OnBehalfOf;
}
[DataContractAttribute]
internal class Microsoft.Identity.Client.OAuth2.OAuth2ResponseBase : object {
    [DataMemberAttribute]
public string Error { get; public set; }
    [DataMemberAttribute]
public string SubError { get; public set; }
    [DataMemberAttribute]
public string ErrorDescription { get; public set; }
    [DataMemberAttribute]
public String[] ErrorCodes { get; public set; }
    [DataMemberAttribute]
public string CorrelationId { get; public set; }
    [DataMemberAttribute]
public string Claims { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(string value);
    [CompilerGeneratedAttribute]
public string get_SubError();
    [CompilerGeneratedAttribute]
public void set_SubError(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorDescription();
    [CompilerGeneratedAttribute]
public void set_ErrorDescription(string value);
    [CompilerGeneratedAttribute]
public String[] get_ErrorCodes();
    [CompilerGeneratedAttribute]
public void set_ErrorCodes(String[] value);
    [CompilerGeneratedAttribute]
public string get_CorrelationId();
    [CompilerGeneratedAttribute]
public void set_CorrelationId(string value);
    [CompilerGeneratedAttribute]
public string get_Claims();
    [CompilerGeneratedAttribute]
public void set_Claims(string value);
}
internal class Microsoft.Identity.Client.OAuth2.OAuth2ResponseBaseClaim : object {
    public static string Claims;
    public static string Error;
    public static string SubError;
    public static string ErrorDescription;
    public static string ErrorCodes;
    public static string CorrelationId;
}
internal static class Microsoft.Identity.Client.OAuth2.OAuth2ResponseType : object {
    public static string Code;
}
internal static class Microsoft.Identity.Client.OAuth2.OAuth2Value : object {
    public static String[] ReservedScopes;
    public static string CodeChallengeMethodValue;
    public static string ScopeOpenId;
    public static string ScopeOfflineAccess;
    public static string ScopeProfile;
}
internal class Microsoft.Identity.Client.OAuth2.PromptValue : object {
    public static string Login;
    public static string RefreshSession;
    public static string AttemptNone;
}
internal class Microsoft.Identity.Client.OAuth2.TokenResponseClaim : OAuth2ResponseBaseClaim {
    public static string Code;
    public static string TokenType;
    public static string AccessToken;
    public static string RefreshToken;
    public static string IdToken;
    public static string Scope;
    public static string ClientInfo;
    public static string ExpiresIn;
    public static string CloudInstanceHost;
    public static string CreatedOn;
    public static string ExtendedExpiresIn;
    public static string Authority;
    public static string FamilyId;
}
internal class Microsoft.Identity.Client.Platforms.netcore.NetCoreCryptographyManager : object {
    public sealed virtual string CreateBase64UrlEncodedSha256Hash(string input);
    public sealed virtual string GenerateCodeVerifier();
    public sealed virtual string CreateSha256Hash(string input);
    public sealed virtual Byte[] CreateSha256HashBytes(string input);
    public sealed virtual string Encrypt(string message);
    public sealed virtual string Decrypt(string encryptedMessage);
    public sealed virtual Byte[] Encrypt(Byte[] message);
    public sealed virtual Byte[] Decrypt(Byte[] encryptedMessage);
    public sealed virtual Byte[] SignWithCertificate(string message, X509Certificate2 certificate);
}
internal class Microsoft.Identity.Client.Platforms.netcore.NetCoreFeatureFlags : object {
    public bool IsFociEnabled { get; }
    public sealed virtual bool get_IsFociEnabled();
}
internal class Microsoft.Identity.Client.Platforms.netcore.NetCorePlatformProxy : AbstractPlatformProxy {
    public bool IsSystemWebViewAvailable { get; }
    public NetCorePlatformProxy(ICoreLogger logger);
    public virtual bool get_IsSystemWebViewAvailable();
    public virtual Task`1<string> GetUserPrincipalNameAsync();
    public virtual Task`1<bool> IsUserLocalAsync(RequestContext requestContext);
    public virtual bool IsDomainJoined();
    public virtual string GetEnvironmentVariable(string variable);
    protected virtual string InternalGetProcessorArchitecture();
    protected virtual string InternalGetOperatingSystem();
    protected virtual string InternalGetDeviceModel();
    public virtual string GetBrokerOrRedirectUri(Uri redirectUri);
    public virtual string GetDefaultRedirectUri(string clientId);
    protected virtual string InternalGetProductName();
    protected virtual string InternalGetCallingApplicationName();
    protected virtual string InternalGetCallingApplicationVersion();
    protected virtual string InternalGetDeviceId();
    public virtual ILegacyCachePersistence CreateLegacyCachePersistence();
    public virtual ITokenCacheAccessor CreateTokenCacheAccessor();
    protected virtual IWebUIFactory CreateWebUiFactory();
    protected virtual ICryptographyManager InternalGetCryptographyManager();
    protected virtual IPlatformLogger InternalGetPlatformLogger();
    public virtual string GetDeviceNetworkState();
    public virtual string GetDevicePlatformTelemetryId();
    public virtual string GetMatsOsPlatform();
    public virtual int GetMatsOsPlatformCode();
    protected virtual IFeatureFlags CreateFeatureFlags();
}
internal class Microsoft.Identity.Client.Platforms.netcore.WebUIFactory : object {
    public sealed virtual IWebUI CreateAuthenticationDialog(CoreUIParent parent, RequestContext requestContext);
}
internal static class Microsoft.Identity.Client.PlatformsCommon.Factories.PlatformProxyFactory : object {
    public static IPlatformProxy CreatePlatformProxy(ICoreLogger logger);
}
internal interface Microsoft.Identity.Client.PlatformsCommon.Interfaces.ICryptographyManager {
    public abstract virtual string CreateBase64UrlEncodedSha256Hash(string input);
    public abstract virtual string GenerateCodeVerifier();
    public abstract virtual string CreateSha256Hash(string input);
    public abstract virtual Byte[] CreateSha256HashBytes(string input);
    public abstract virtual string Encrypt(string message);
    public abstract virtual string Decrypt(string encryptedMessage);
    public abstract virtual Byte[] Encrypt(Byte[] message);
    public abstract virtual Byte[] Decrypt(Byte[] encryptedMessage);
    public abstract virtual Byte[] SignWithCertificate(string message, X509Certificate2 certificate);
}
internal interface Microsoft.Identity.Client.PlatformsCommon.Interfaces.IFeatureFlags {
    public bool IsFociEnabled { get; }
    public abstract virtual bool get_IsFociEnabled();
}
internal interface Microsoft.Identity.Client.PlatformsCommon.Interfaces.IPlatformLogger {
    public abstract virtual void Error(string message);
    public abstract virtual void Warning(string message);
    public abstract virtual void Verbose(string message);
    public abstract virtual void Information(string message);
}
internal interface Microsoft.Identity.Client.PlatformsCommon.Interfaces.IPlatformProxy {
    public bool IsSystemWebViewAvailable { get; }
    public ICryptographyManager CryptographyManager { get; }
    public IPlatformLogger PlatformLogger { get; }
    public abstract virtual bool get_IsSystemWebViewAvailable();
    public abstract virtual string GetDeviceModel();
    public abstract virtual string GetEnvironmentVariable(string variable);
    public abstract virtual string GetOperatingSystem();
    public abstract virtual string GetProcessorArchitecture();
    public abstract virtual Task`1<string> GetUserPrincipalNameAsync();
    public abstract virtual bool IsDomainJoined();
    public abstract virtual Task`1<bool> IsUserLocalAsync(RequestContext requestContext);
    public abstract virtual string GetCallingApplicationName();
    public abstract virtual string GetCallingApplicationVersion();
    public abstract virtual string GetDeviceId();
    public abstract virtual string GetBrokerOrRedirectUri(Uri redirectUri);
    public abstract virtual string GetDefaultRedirectUri(string clientId);
    public abstract virtual string GetProductName();
    public abstract virtual ILegacyCachePersistence CreateLegacyCachePersistence();
    public abstract virtual ITokenCacheAccessor CreateTokenCacheAccessor();
    public abstract virtual ITokenCacheBlobStorage CreateTokenCacheBlobStorage();
    public abstract virtual ICryptographyManager get_CryptographyManager();
    public abstract virtual IPlatformLogger get_PlatformLogger();
    public abstract virtual IWebUIFactory GetWebUiFactory();
    public abstract virtual string GetDevicePlatformTelemetryId();
    public abstract virtual string GetDeviceNetworkState();
    public abstract virtual int GetMatsOsPlatformCode();
    public abstract virtual string GetMatsOsPlatform();
    public abstract virtual void SetWebUiFactory(IWebUIFactory webUiFactory);
    public abstract virtual IFeatureFlags GetFeatureFlags();
    public abstract virtual void SetFeatureFlags(IFeatureFlags featureFlags);
}
internal interface Microsoft.Identity.Client.PlatformsCommon.Interfaces.ITokenCacheBlobStorage {
    public abstract virtual void OnAfterAccess(TokenCacheNotificationArgs args);
    public abstract virtual void OnBeforeAccess(TokenCacheNotificationArgs args);
    public abstract virtual void OnBeforeWrite(TokenCacheNotificationArgs args);
}
internal abstract class Microsoft.Identity.Client.PlatformsCommon.Shared.AbstractPlatformProxy : object {
    public bool IsSystemWebViewAvailable { get; }
    protected IWebUIFactory OverloadWebUiFactory { get; protected set; }
    protected IFeatureFlags OverloadFeatureFlags { get; protected set; }
    protected ICoreLogger Logger { get; }
    public ICryptographyManager CryptographyManager { get; }
    public IPlatformLogger PlatformLogger { get; }
    protected AbstractPlatformProxy(ICoreLogger logger);
    public abstract virtual bool get_IsSystemWebViewAvailable();
    [CompilerGeneratedAttribute]
protected IWebUIFactory get_OverloadWebUiFactory();
    [CompilerGeneratedAttribute]
protected void set_OverloadWebUiFactory(IWebUIFactory value);
    [CompilerGeneratedAttribute]
protected IFeatureFlags get_OverloadFeatureFlags();
    [CompilerGeneratedAttribute]
protected void set_OverloadFeatureFlags(IFeatureFlags value);
    [CompilerGeneratedAttribute]
protected ICoreLogger get_Logger();
    public sealed virtual IWebUIFactory GetWebUiFactory();
    public sealed virtual void SetWebUiFactory(IWebUIFactory webUiFactory);
    public sealed virtual string GetDeviceModel();
    public abstract virtual string GetEnvironmentVariable(string variable);
    public sealed virtual string GetOperatingSystem();
    public sealed virtual string GetProcessorArchitecture();
    public abstract virtual Task`1<string> GetUserPrincipalNameAsync();
    public abstract virtual bool IsDomainJoined();
    public abstract virtual Task`1<bool> IsUserLocalAsync(RequestContext requestContext);
    public sealed virtual string GetCallingApplicationName();
    public sealed virtual string GetCallingApplicationVersion();
    public sealed virtual string GetDeviceId();
    public abstract virtual string GetBrokerOrRedirectUri(Uri redirectUri);
    public abstract virtual string GetDefaultRedirectUri(string clientId);
    public sealed virtual string GetProductName();
    public abstract virtual ILegacyCachePersistence CreateLegacyCachePersistence();
    public abstract virtual ITokenCacheAccessor CreateTokenCacheAccessor();
    public sealed virtual ICryptographyManager get_CryptographyManager();
    public sealed virtual IPlatformLogger get_PlatformLogger();
    protected abstract virtual IWebUIFactory CreateWebUiFactory();
    protected abstract virtual IFeatureFlags CreateFeatureFlags();
    protected abstract virtual string InternalGetDeviceModel();
    protected abstract virtual string InternalGetOperatingSystem();
    protected abstract virtual string InternalGetProcessorArchitecture();
    protected abstract virtual string InternalGetCallingApplicationName();
    protected abstract virtual string InternalGetCallingApplicationVersion();
    protected abstract virtual string InternalGetDeviceId();
    protected abstract virtual string InternalGetProductName();
    protected abstract virtual ICryptographyManager InternalGetCryptographyManager();
    protected abstract virtual IPlatformLogger InternalGetPlatformLogger();
    public virtual ITokenCacheBlobStorage CreateTokenCacheBlobStorage();
    public abstract virtual string GetDevicePlatformTelemetryId();
    public abstract virtual string GetDeviceNetworkState();
    public abstract virtual int GetMatsOsPlatformCode();
    public abstract virtual string GetMatsOsPlatform();
    public virtual IFeatureFlags GetFeatureFlags();
    public sealed virtual void SetFeatureFlags(IFeatureFlags featureFlags);
}
internal class Microsoft.Identity.Client.PlatformsCommon.Shared.ConsolePlatformLogger : object {
    public sealed virtual void Error(string message);
    public sealed virtual void Warning(string message);
    public sealed virtual void Verbose(string message);
    public sealed virtual void Information(string message);
}
internal class Microsoft.Identity.Client.PlatformsCommon.Shared.EventSourcePlatformLogger : object {
    internal static MsalEventSource MsalEventSource { get; }
    [CompilerGeneratedAttribute]
internal static MsalEventSource get_MsalEventSource();
    public sealed virtual void Error(string message);
    public sealed virtual void Warning(string message);
    public sealed virtual void Verbose(string message);
    public sealed virtual void Information(string message);
}
internal class Microsoft.Identity.Client.PlatformsCommon.Shared.InMemoryLegacyCachePersistance : object {
    public sealed virtual Byte[] LoadCache();
    public sealed virtual void WriteCache(Byte[] serializedCache);
}
internal class Microsoft.Identity.Client.PlatformsCommon.Shared.InMemoryTokenCacheAccessor : object {
    public sealed virtual void SaveAccessToken(MsalAccessTokenCacheItem item);
    public sealed virtual void SaveRefreshToken(MsalRefreshTokenCacheItem item);
    public sealed virtual void SaveIdToken(MsalIdTokenCacheItem item);
    public sealed virtual void SaveAccount(MsalAccountCacheItem item);
    public sealed virtual void SaveAppMetadata(MsalAppMetadataCacheItem item);
    public sealed virtual MsalAccessTokenCacheItem GetAccessToken(MsalAccessTokenCacheKey accessTokenKey);
    public sealed virtual MsalRefreshTokenCacheItem GetRefreshToken(MsalRefreshTokenCacheKey refreshTokenKey);
    public sealed virtual MsalIdTokenCacheItem GetIdToken(MsalIdTokenCacheKey idTokenKey);
    public sealed virtual MsalAccountCacheItem GetAccount(MsalAccountCacheKey accountKey);
    public sealed virtual void DeleteAccessToken(MsalAccessTokenCacheKey cacheKey);
    public sealed virtual void DeleteRefreshToken(MsalRefreshTokenCacheKey cacheKey);
    public sealed virtual void DeleteIdToken(MsalIdTokenCacheKey cacheKey);
    public sealed virtual void DeleteAccount(MsalAccountCacheKey cacheKey);
    public sealed virtual IEnumerable`1<MsalAccessTokenCacheItem> GetAllAccessTokens();
    public sealed virtual IEnumerable`1<MsalRefreshTokenCacheItem> GetAllRefreshTokens();
    public sealed virtual IEnumerable`1<MsalIdTokenCacheItem> GetAllIdTokens();
    public sealed virtual IEnumerable`1<MsalAccountCacheItem> GetAllAccounts();
    public sealed virtual IEnumerable`1<MsalAppMetadataCacheItem> GetAllAppMetadata();
    public void SetiOSKeychainSecurityGroup(string keychainSecurityGroup);
    public sealed virtual void Clear();
    public sealed virtual MsalAppMetadataCacheItem GetAppMetadata(MsalAppMetadataCacheKey appMetadataKey);
}
[EventSourceAttribute]
internal class Microsoft.Identity.Client.PlatformsCommon.Shared.MsalEventSource : EventSource {
    [EventAttribute("1")]
internal void Verbose(string message);
    [EventAttribute("2")]
internal void Information(string message);
    [EventAttribute("3")]
internal void Warning(string message);
    [EventAttribute("4")]
internal void Error(string message);
}
internal class Microsoft.Identity.Client.PlatformsCommon.Shared.NullLegacyCachePersistence : object {
    public sealed virtual Byte[] LoadCache();
    public sealed virtual void WriteCache(Byte[] serializedCache);
}
internal class Microsoft.Identity.Client.PlatformsCommon.Shared.NullTokenCacheBlobStorage : object {
    public sealed virtual void OnAfterAccess(TokenCacheNotificationArgs args);
    public sealed virtual void OnBeforeAccess(TokenCacheNotificationArgs args);
    public sealed virtual void OnBeforeWrite(TokenCacheNotificationArgs args);
}
public class Microsoft.Identity.Client.Prompt : ValueType {
    public static Prompt SelectAccount;
    public static Prompt ForceLogin;
    public static Prompt Consent;
    public static Prompt NoPrompt;
    [CompilerGeneratedAttribute]
private string <PromptValue>k__BackingField;
    internal string PromptValue { get; }
    [CompilerGeneratedAttribute]
internal string get_PromptValue();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(Prompt x, Prompt y);
    public static bool op_Inequality(Prompt x, Prompt y);
}
public class Microsoft.Identity.Client.PublicClientApplication : ClientApplicationBase {
    public bool IsSystemWebViewAvailable { get; }
    [ObsoleteAttribute("Use PublicClientApplicationBuilder instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public PublicClientApplication(string clientId);
    [ObsoleteAttribute("Use PublicClientApplicationBuilder instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public PublicClientApplication(string clientId, string authority);
    [ObsoleteAttribute("Use PublicClientApplicationBuilder instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public PublicClientApplication(string clientId, string authority, TokenCache userTokenCache);
    internal PublicClientApplication(ApplicationConfiguration configuration);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.PublicClientApplication/<AcquireTokenByUsernamePasswordAsync>d__0")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Use overload with SecureString instead (See https://aka.ms/msal-net-3-breaking-changes and https://aka.ms/msal-net-up)", "True")]
public Task`1<AuthenticationResult> AcquireTokenByUsernamePasswordAsync(IEnumerable`1<string> scopes, string username, string password);
    [ObsoleteAttribute("Use AcquireTokenByUsernamePassword instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public sealed virtual Task`1<AuthenticationResult> AcquireTokenByUsernamePasswordAsync(IEnumerable`1<string> scopes, string username, SecureString securePassword);
    [ObsoleteAttribute("Use AcquireTokenWithDeviceCode instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public sealed virtual Task`1<AuthenticationResult> AcquireTokenWithDeviceCodeAsync(IEnumerable`1<string> scopes, Func`2<DeviceCodeResult, Task> deviceCodeResultCallback);
    [ObsoleteAttribute("Use AcquireTokenWithDeviceCode instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public sealed virtual Task`1<AuthenticationResult> AcquireTokenWithDeviceCodeAsync(IEnumerable`1<string> scopes, string extraQueryParameters, Func`2<DeviceCodeResult, Task> deviceCodeResultCallback);
    [ObsoleteAttribute("Use AcquireTokenWithDeviceCode instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public sealed virtual Task`1<AuthenticationResult> AcquireTokenWithDeviceCodeAsync(IEnumerable`1<string> scopes, Func`2<DeviceCodeResult, Task> deviceCodeResultCallback, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use AcquireTokenWithDeviceCode instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public sealed virtual Task`1<AuthenticationResult> AcquireTokenWithDeviceCodeAsync(IEnumerable`1<string> scopes, string extraQueryParameters, Func`2<DeviceCodeResult, Task> deviceCodeResultCallback, CancellationToken cancellationToken);
    [ObsoleteAttribute("Use AcquireTokenByRefreshToken instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
private sealed virtual override Task`1<AuthenticationResult> Microsoft.Identity.Client.IByRefreshToken.AcquireTokenByRefreshTokenAsync(IEnumerable`1<string> scopes, string refreshToken);
    [ObsoleteAttribute("Use AcquireTokenByIntegratedWindowsAuth instead. See https://aka.ms/msal-net-3-breaking-changes", "True")]
public sealed virtual Task`1<AuthenticationResult> AcquireTokenByIntegratedWindowsAuthAsync(IEnumerable`1<string> scopes, string username);
    public sealed virtual bool get_IsSystemWebViewAvailable();
    [CLSCompliantAttribute("False")]
public sealed virtual AcquireTokenInteractiveParameterBuilder AcquireTokenInteractive(IEnumerable`1<string> scopes);
    public sealed virtual AcquireTokenWithDeviceCodeParameterBuilder AcquireTokenWithDeviceCode(IEnumerable`1<string> scopes, Func`2<DeviceCodeResult, Task> deviceCodeResultCallback);
    private sealed virtual override AcquireTokenByRefreshTokenParameterBuilder Microsoft.Identity.Client.IByRefreshToken.AcquireTokenByRefreshToken(IEnumerable`1<string> scopes, string refreshToken);
    public sealed virtual AcquireTokenByIntegratedWindowsAuthParameterBuilder AcquireTokenByIntegratedWindowsAuth(IEnumerable`1<string> scopes);
    public sealed virtual AcquireTokenByUsernamePasswordParameterBuilder AcquireTokenByUsernamePassword(IEnumerable`1<string> scopes, string username, SecureString password);
}
public class Microsoft.Identity.Client.PublicClientApplicationBuilder : AbstractApplicationBuilder`1<PublicClientApplicationBuilder> {
    internal PublicClientApplicationBuilder(ApplicationConfiguration configuration);
    public static PublicClientApplicationBuilder CreateWithApplicationOptions(PublicClientApplicationOptions options);
    public static PublicClientApplicationBuilder Create(string clientId);
    internal PublicClientApplicationBuilder WithUserTokenLegacyCachePersistenceForTest(ILegacyCachePersistence legacyCachePersistence);
    public IPublicClientApplication Build();
    internal PublicClientApplication BuildConcrete();
    internal virtual void Validate();
}
public class Microsoft.Identity.Client.PublicClientApplicationOptions : ApplicationOptions {
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Telemetry is now specified per ClientApplication.  See https://aka.ms/msal-net-3-breaking-changes and https://aka.ms/msal-net-application-configuration", "True")]
public class Microsoft.Identity.Client.Telemetry : object {
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Telemetry is now specified per ClientApplication.  See https://aka.ms/msal-net-3-breaking-changes and https://aka.ms/msal-net-application-configuration", "True")]
public bool TelemetryOnFailureOnly { get; public set; }
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Telemetry is now specified per ClientApplication.  See https://aka.ms/msal-net-3-breaking-changes and https://aka.ms/msal-net-application-configuration", "True")]
public static Telemetry GetInstance();
    public bool get_TelemetryOnFailureOnly();
    public void set_TelemetryOnFailureOnly(bool value);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Telemetry is now specified per ClientApplication.  See https://aka.ms/msal-net-3-breaking-changes and https://aka.ms/msal-net-application-configuration", "True")]
public void RegisterReceiver(Receiver r);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Telemetry is now specified per ClientApplication.  See https://aka.ms/msal-net-3-breaking-changes and https://aka.ms/msal-net-application-configuration", "True")]
public bool HasRegisteredReceiver();
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("Telemetry is now specified per ClientApplication.  See https://aka.ms/msal-net-3-breaking-changes and https://aka.ms/msal-net-application-configuration", "True")]
private sealed virtual override void Microsoft.Identity.Client.TelemetryCore.ITelemetryReceiver.HandleTelemetryEvents(List`1<Dictionary`2<string, string>> events);
}
public class Microsoft.Identity.Client.TelemetryCallback : MulticastDelegate {
    public TelemetryCallback(object object, IntPtr method);
    public virtual void Invoke(List`1<Dictionary`2<string, string>> events);
    public virtual IAsyncResult BeginInvoke(List`1<Dictionary`2<string, string>> events, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal interface Microsoft.Identity.Client.TelemetryCore.ITelemetryManager {
    public TelemetryCallback Callback { get; }
    public abstract virtual TelemetryCallback get_Callback();
    public abstract virtual TelemetryHelper CreateTelemetryHelper(EventBase eventBase);
    public abstract virtual void StartEvent(EventBase eventToStart);
    public abstract virtual void StopEvent(EventBase eventToStop);
    public abstract virtual void Flush(string telemetryCorrelationId);
}
internal interface Microsoft.Identity.Client.TelemetryCore.ITelemetryReceiver {
    public abstract virtual void HandleTelemetryEvents(List`1<Dictionary`2<string, string>> events);
}
internal static class Microsoft.Identity.Client.TelemetryCore.TelemetryError : object {
    public static string XmsCliTelemMalformed;
    public static string XmsUnrecognizedHeaderVersion;
}
internal class Microsoft.Identity.Client.TelemetryCore.TelemetryHelper : object {
    public TelemetryHelper(ITelemetryManager telemetryManager, EventBase eventBase);
    public sealed virtual void Dispose();
}
internal class Microsoft.Identity.Client.TelemetryCore.TelemetryManager : object {
    internal ConcurrentDictionary`2<string, List`1<EventBase>> CompletedEvents;
    internal ConcurrentDictionary`2<EventKey, EventBase> EventsInProgress;
    internal ConcurrentDictionary`2<string, ConcurrentDictionary`2<string, int>> EventCount;
    public TelemetryCallback Callback { get; }
    public TelemetryManager(IApplicationConfiguration applicationConfiguration, IPlatformProxy platformProxy, TelemetryCallback telemetryCallback, bool onlySendFailureTelemetry);
    [CompilerGeneratedAttribute]
public sealed virtual TelemetryCallback get_Callback();
    public sealed virtual TelemetryHelper CreateTelemetryHelper(EventBase eventToStart);
    public sealed virtual void StartEvent(EventBase eventToStart);
    public sealed virtual void StopEvent(EventBase eventToStop);
    public sealed virtual void Flush(string telemetryCorrelationId);
}
internal class Microsoft.Identity.Client.TelemetryCore.XmsCliTelemInfo : object {
    public string Version { get; public set; }
    public string ServerErrorCode { get; public set; }
    public string ServerSubErrorCode { get; public set; }
    public string TokenAge { get; public set; }
    public string SpeInfo { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_ServerErrorCode();
    [CompilerGeneratedAttribute]
public void set_ServerErrorCode(string value);
    [CompilerGeneratedAttribute]
public string get_ServerSubErrorCode();
    [CompilerGeneratedAttribute]
public void set_ServerSubErrorCode(string value);
    [CompilerGeneratedAttribute]
public string get_TokenAge();
    [CompilerGeneratedAttribute]
public void set_TokenAge(string value);
    [CompilerGeneratedAttribute]
public string get_SpeInfo();
    [CompilerGeneratedAttribute]
public void set_SpeInfo(string value);
}
internal class Microsoft.Identity.Client.TelemetryCore.XmsCliTelemInfoParser : object {
    internal XmsCliTelemInfo ParseXMsTelemHeader(string headerValue, RequestContext requestContext);
}
public class Microsoft.Identity.Client.TokenCache : object {
    internal static string NullPreferredUsernameDisplayLabel;
    internal object LockObject;
    internal IServiceBundle ServiceBundle { get; }
    internal ILegacyCachePersistence LegacyCachePersistence { get; }
    private ITokenCacheAccessor Microsoft.Identity.Client.ITokenCacheInternal.Accessor { get; }
    private ILegacyCachePersistence Microsoft.Identity.Client.ITokenCacheInternal.LegacyPersistence { get; }
    private object Microsoft.Identity.Client.ITokenCacheInternal.LockObject { get; }
    internal string ClientId { get; }
    internal TokenCacheCallback BeforeAccess { get; internal set; }
    internal TokenCacheCallback BeforeWrite { get; internal set; }
    internal TokenCacheCallback AfterAccess { get; internal set; }
    [ObsoleteAttribute("Please use the equivalent flag TokenCacheNotificationArgs.HasStateChanged, which indicates if the operation triggering the notification is modifying the cache or not. Setting the flag is not required.")]
public bool HasStateChanged { get; public set; }
    internal TokenCache(IServiceBundle serviceBundle);
    internal TokenCache(IServiceBundle serviceBundle, ILegacyCachePersistence legacyCachePersistenceForTest);
    [CompilerGeneratedAttribute]
internal IServiceBundle get_ServiceBundle();
    [CompilerGeneratedAttribute]
internal ILegacyCachePersistence get_LegacyCachePersistence();
    private sealed virtual override ITokenCacheAccessor Microsoft.Identity.Client.ITokenCacheInternal.get_Accessor();
    private sealed virtual override ILegacyCachePersistence Microsoft.Identity.Client.ITokenCacheInternal.get_LegacyPersistence();
    private sealed virtual override object Microsoft.Identity.Client.ITokenCacheInternal.get_LockObject();
    internal string get_ClientId();
    internal TokenCacheCallback get_BeforeAccess();
    internal void set_BeforeAccess(TokenCacheCallback value);
    internal TokenCacheCallback get_BeforeWrite();
    internal void set_BeforeWrite(TokenCacheCallback value);
    internal TokenCacheCallback get_AfterAccess();
    internal void set_AfterAccess(TokenCacheCallback value);
    public bool get_HasStateChanged();
    public void set_HasStateChanged(bool value);
    internal void OnAfterAccess(TokenCacheNotificationArgs args);
    internal void OnBeforeAccess(TokenCacheNotificationArgs args);
    internal void OnBeforeWrite(TokenCacheNotificationArgs args);
    private sealed virtual override Tuple`2<MsalAccessTokenCacheItem, MsalIdTokenCacheItem> Microsoft.Identity.Client.ITokenCacheInternal.SaveTokenResponse(AuthenticationRequestParameters requestParams, MsalTokenResponse response);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.TokenCache/<Microsoft-Identity-Client-ITokenCacheInternal-FindAccessTokenAsync>d__49")]
private sealed virtual override Task`1<MsalAccessTokenCacheItem> Microsoft.Identity.Client.ITokenCacheInternal.FindAccessTokenAsync(AuthenticationRequestParameters requestParams);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.TokenCache/<Microsoft-Identity-Client-ITokenCacheInternal-FindRefreshTokenAsync>d__52")]
private sealed virtual override Task`1<MsalRefreshTokenCacheItem> Microsoft.Identity.Client.ITokenCacheInternal.FindRefreshTokenAsync(AuthenticationRequestParameters requestParams, string familyId);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.TokenCache/<Microsoft-Identity-Client-ITokenCacheInternal-IsFociMemberAsync>d__53")]
private sealed virtual override Task`1<Nullable`1<bool>> Microsoft.Identity.Client.ITokenCacheInternal.IsFociMemberAsync(AuthenticationRequestParameters requestParams, string familyId);
    public sealed virtual void SetIosKeychainSecurityGroup(string securityGroup);
    private sealed virtual override MsalIdTokenCacheItem Microsoft.Identity.Client.ITokenCacheInternal.GetIdTokenCacheItem(MsalIdTokenCacheKey msalIdTokenCacheKey, RequestContext requestContext);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.TokenCache/<Microsoft-Identity-Client-ITokenCacheInternal-GetAccountsAsync>d__61")]
private sealed virtual override Task`1<IEnumerable`1<IAccount>> Microsoft.Identity.Client.ITokenCacheInternal.GetAccountsAsync(string authority, RequestContext requestContext);
    private sealed virtual override IEnumerable`1<MsalRefreshTokenCacheItem> Microsoft.Identity.Client.ITokenCacheInternal.GetAllRefreshTokens(bool filterByClientId);
    private sealed virtual override IEnumerable`1<MsalAccessTokenCacheItem> Microsoft.Identity.Client.ITokenCacheInternal.GetAllAccessTokens(bool filterByClientId);
    private sealed virtual override IEnumerable`1<MsalIdTokenCacheItem> Microsoft.Identity.Client.ITokenCacheInternal.GetAllIdTokens(bool filterByClientId);
    private sealed virtual override IEnumerable`1<MsalAccountCacheItem> Microsoft.Identity.Client.ITokenCacheInternal.GetAllAccounts();
    private sealed virtual override void Microsoft.Identity.Client.ITokenCacheInternal.RemoveAccount(IAccount account, RequestContext requestContext);
    private sealed virtual override void Microsoft.Identity.Client.ITokenCacheInternal.RemoveMsalAccount(IAccount account, RequestContext requestContext);
    private sealed virtual override void Microsoft.Identity.Client.ITokenCacheInternal.Clear();
    private sealed virtual override void Microsoft.Identity.Client.ITokenCacheInternal.ClearAdalCache();
    private sealed virtual override void Microsoft.Identity.Client.ITokenCacheInternal.ClearMsalCache();
    public sealed virtual void SetBeforeAccess(TokenCacheCallback beforeAccess);
    public sealed virtual void SetAfterAccess(TokenCacheCallback afterAccess);
    public sealed virtual void SetBeforeWrite(TokenCacheCallback beforeWrite);
    [ObsoleteAttribute("This is expected to be removed in MSAL.NET v3 and ADAL.NET v5. We recommend using SerializeMsalV3/DeserializeMsalV3. Read more: https://aka.ms/msal-net-3x-cache-breaking-change", "False")]
public sealed virtual CacheData SerializeUnifiedAndAdalCache();
    [ObsoleteAttribute("This is expected to be removed in MSAL.NET v3 and ADAL.NET v5. We recommend using SerializeMsalV3/DeserializeMsalV3. Read more: https://aka.ms/msal-net-3x-cache-breaking-change", "False")]
public sealed virtual void DeserializeUnifiedAndAdalCache(CacheData cacheData);
    [ObsoleteAttribute("This is expected to be removed in MSAL.NET v3 and ADAL.NET v5. We recommend using SerializeMsalV3/DeserializeMsalV3. Read more: https://aka.ms/msal-net-3x-cache-breaking-change", "False")]
public sealed virtual Byte[] Serialize();
    [ObsoleteAttribute("This is expected to be removed in MSAL.NET v3 and ADAL.NET v5. We recommend using SerializeMsalV3/DeserializeMsalV3. Read more: https://aka.ms/msal-net-3x-cache-breaking-change", "False")]
public sealed virtual void Deserialize(Byte[] msalV2State);
    public sealed virtual Byte[] SerializeAdalV3();
    public sealed virtual void DeserializeAdalV3(Byte[] adalV3State);
    public sealed virtual Byte[] SerializeMsalV2();
    public sealed virtual void DeserializeMsalV2(Byte[] msalV2State);
    public sealed virtual Byte[] SerializeMsalV3();
    public sealed virtual void DeserializeMsalV3(Byte[] msalV3State, bool shouldClearExistingCache);
}
public class Microsoft.Identity.Client.TokenCacheCallback : MulticastDelegate {
    public TokenCacheCallback(object object, IntPtr method);
    public virtual void Invoke(TokenCacheNotificationArgs args);
    public virtual IAsyncResult BeginInvoke(TokenCacheNotificationArgs args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Identity.Client.TokenCacheNotificationArgs : object {
    [EditorBrowsableAttribute("1")]
[DebuggerBrowsableAttribute("0")]
[ObsoleteAttribute("Use Account instead (See https://aka.ms/msal-net-2-released)", "True")]
public IUser User { get; }
    public ITokenCache TokenCache { get; internal set; }
    public string ClientId { get; internal set; }
    public IAccount Account { get; internal set; }
    public bool HasStateChanged { get; internal set; }
    public IUser get_User();
    [CompilerGeneratedAttribute]
public ITokenCache get_TokenCache();
    [CompilerGeneratedAttribute]
internal void set_TokenCache(ITokenCache value);
    [CompilerGeneratedAttribute]
public string get_ClientId();
    [CompilerGeneratedAttribute]
internal void set_ClientId(string value);
    [CompilerGeneratedAttribute]
public IAccount get_Account();
    [CompilerGeneratedAttribute]
internal void set_Account(IAccount value);
    [CompilerGeneratedAttribute]
public bool get_HasStateChanged();
    [CompilerGeneratedAttribute]
internal void set_HasStateChanged(bool value);
}
[DataContractAttribute]
internal class Microsoft.Identity.Client.UI.AuthorizationResult : object {
    public AuthorizationStatus Status { get; }
    [DataMemberAttribute]
public string Code { get; }
    [DataMemberAttribute]
public string Error { get; public set; }
    [DataMemberAttribute]
public string ErrorDescription { get; public set; }
    [DataMemberAttribute]
public string CloudInstanceHost { get; public set; }
    public string State { get; public set; }
    internal AuthorizationResult(AuthorizationStatus status, string returnedUriInput);
    internal AuthorizationResult(AuthorizationStatus status);
    [CompilerGeneratedAttribute]
public AuthorizationStatus get_Status();
    [CompilerGeneratedAttribute]
public string get_Code();
    [CompilerGeneratedAttribute]
public string get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(string value);
    [CompilerGeneratedAttribute]
public string get_ErrorDescription();
    [CompilerGeneratedAttribute]
public void set_ErrorDescription(string value);
    [CompilerGeneratedAttribute]
public string get_CloudInstanceHost();
    [CompilerGeneratedAttribute]
public void set_CloudInstanceHost(string value);
    [CompilerGeneratedAttribute]
public string get_State();
    [CompilerGeneratedAttribute]
public void set_State(string value);
    public void ParseAuthorizeResponse(string webAuthenticationResult);
}
internal enum Microsoft.Identity.Client.UI.AuthorizationStatus : Enum {
    public int value__;
    public static AuthorizationStatus Success;
    public static AuthorizationStatus ErrorHttp;
    public static AuthorizationStatus ProtocolError;
    public static AuthorizationStatus UserCancel;
    public static AuthorizationStatus UnknownError;
}
internal class Microsoft.Identity.Client.UI.CoreUIParent : object {
    internal bool UseEmbeddedWebview { get; internal set; }
    internal SynchronizationContext SynchronizationContext { get; internal set; }
    [CompilerGeneratedAttribute]
internal bool get_UseEmbeddedWebview();
    [CompilerGeneratedAttribute]
internal void set_UseEmbeddedWebview(bool value);
    [CompilerGeneratedAttribute]
internal SynchronizationContext get_SynchronizationContext();
    [CompilerGeneratedAttribute]
internal void set_SynchronizationContext(SynchronizationContext value);
}
internal class Microsoft.Identity.Client.UI.CustomWebUiHandler : object {
    public CustomWebUiHandler(ICustomWebUi customWebUi);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.UI.CustomWebUiHandler/<AcquireAuthorizationAsync>d__2")]
public sealed virtual Task`1<AuthorizationResult> AcquireAuthorizationAsync(Uri authorizationUri, Uri redirectUri, RequestContext requestContext, CancellationToken cancellationToken);
    public sealed virtual void ValidateRedirectUri(Uri redirectUri);
}
internal interface Microsoft.Identity.Client.UI.IWebUI {
    public abstract virtual Task`1<AuthorizationResult> AcquireAuthorizationAsync(Uri authorizationUri, Uri redirectUri, RequestContext requestContext, CancellationToken cancellationToken);
    public abstract virtual void ValidateRedirectUri(Uri redirectUri);
}
internal interface Microsoft.Identity.Client.UI.IWebUIFactory {
    public abstract virtual IWebUI CreateAuthenticationDialog(CoreUIParent coreUIParent, RequestContext requestContext);
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("UIBehavior struct is now obsolete.  Please use Prompt struct instead.See https://aka.ms/msal-net-3-breaking-changes", "True")]
public class Microsoft.Identity.Client.UIBehavior : ValueType {
}
[ObsoleteAttribute("In MSAL.NET 3.x, you should directly pass the Activity (on Xamarin.Android), or Window (on .NET Framework and UWP) using AcquireTokenInteractiveParameterBuilder.WithParentActivityOrWindowSee https://aka.ms/msal-net-3-breaking-changes", "True")]
public class Microsoft.Identity.Client.UIParent : object {
    [ObsoleteAttribute("See https://aka.ms/msal-net-3-breaking-changes", "True")]
[EditorBrowsableAttribute("1")]
public UIParent(object parent, bool useEmbeddedWebView);
    [ObsoleteAttribute("See https://aka.ms/msal-net-3-breaking-changes", "True")]
[EditorBrowsableAttribute("1")]
public static bool IsSystemWebviewAvailable();
}
public class Microsoft.Identity.Client.UserAssertion : object {
    public string Assertion { get; }
    public string AssertionType { get; }
    internal string AssertionHash { get; internal set; }
    public UserAssertion(string jwtBearerToken);
    public UserAssertion(string assertion, string assertionType);
    [CompilerGeneratedAttribute]
public string get_Assertion();
    [CompilerGeneratedAttribute]
public string get_AssertionType();
    [CompilerGeneratedAttribute]
internal string get_AssertionHash();
    [CompilerGeneratedAttribute]
internal void set_AssertionHash(string value);
}
internal static class Microsoft.Identity.Client.Utils.AssemblyUtils : object {
    public static string GetAssemblyFileVersionAttribute();
    public static string GetAssemblyInformationalVersion();
}
internal static class Microsoft.Identity.Client.Utils.Base64UrlHelpers : object {
    public static string Encode(string arg);
    public static string DecodeToString(string arg);
    public static Byte[] DecodeToBytes(string arg);
    internal static string Encode(Byte[] arg);
}
[ExtensionAttribute]
internal static class Microsoft.Identity.Client.Utils.CoreHelpers : object {
    internal static string ByteArrayToString(Byte[] input);
    public static DateTime UnixTimestampToDateTime(double unixTimestamp);
    public static DateTime UnixTimestampStringToDateTime(string str);
    public static string DateTimeToUnixTimestamp(DateTimeOffset dateTimeOffset);
    public static string CurrDateTimeInUnixTimestamp();
    public static long DateTimeToUnixTimestampMilliseconds(DateTimeOffset dateTimeOffset);
    public static string CreateString(Byte[] bytes);
    public static string UrlEncode(string message);
    public static string UrlDecode(string message);
    public static void AddKeyValueString(StringBuilder messageBuilder, string key, string value);
    [ExtensionAttribute]
public static string ToQueryParameter(IDictionary`2<string, string> input);
    public static Dictionary`2<string, string> ParseKeyValueList(string input, char delimiter, bool urlDecode, bool lowercaseKeys, RequestContext requestContext);
    public static Dictionary`2<string, string> ParseKeyValueList(string input, char delimiter, bool urlDecode, RequestContext requestContext);
    internal static List`1<string> SplitWithQuotes(string input, char delimiter);
}
[ExtensionAttribute]
internal static class Microsoft.Identity.Client.Utils.EnumerableExtensions : object {
    [ExtensionAttribute]
internal static bool IsNullOrEmpty(IEnumerable`1<T> input);
    [ExtensionAttribute]
internal static string AsSingleString(IEnumerable`1<string> input);
    [ExtensionAttribute]
internal static bool ContainsOrdinalIgnoreCase(IEnumerable`1<string> set, string toLookFor);
    [ExtensionAttribute]
internal static List`1<T> FilterWithLogging(List`1<T> list, Func`2<T, bool> predicate, ICoreLogger logger, string logPrefix);
}
internal class Microsoft.Identity.Client.Utils.GuidFactory : object {
    public sealed virtual Guid NewGuid();
}
internal interface Microsoft.Identity.Client.Utils.IGuidFactory {
    public abstract virtual Guid NewGuid();
}
internal interface Microsoft.Identity.Client.Utils.ITimeService {
    public abstract virtual DateTime GetUtcNow();
}
internal static class Microsoft.Identity.Client.Utils.JsonHelper : object {
    internal static string SerializeToJson(T toEncode);
    internal static T DeserializeFromJson(string json);
    internal static T TryToDeserializeFromJson(string json, RequestContext requestContext);
    internal static T DeserializeFromJson(Byte[] jsonByteArray);
}
internal static class Microsoft.Identity.Client.Utils.JsonUtils : object {
    public static string GetExistingOrEmptyString(JObject json, string key);
    public static string ExtractExistingOrEmptyString(JObject json, string key);
    public static long ExtractParsedIntOrZero(JObject json, string key);
}
internal static class Microsoft.Identity.Client.Utils.ScopeHelper : object {
    public static bool ScopeContains(SortedSet`1<string> outerSet, SortedSet`1<string> possibleContainedSet);
    internal static SortedSet`1<string> ConvertStringToLowercaseSortedSet(string singleString);
    internal static SortedSet`1<string> CreateSortedSetFromEnumerable(IEnumerable`1<string> input);
}
[ExtensionAttribute]
internal static class Microsoft.Identity.Client.Utils.StringExtensions : object {
    [ExtensionAttribute]
public static Byte[] ToByteArray(string stringInput);
}
internal class Microsoft.Identity.Client.Utils.StringWriterWithEncoding : StringWriter {
    public Encoding Encoding { get; }
    public StringWriterWithEncoding(Encoding encoding);
    [CompilerGeneratedAttribute]
public virtual Encoding get_Encoding();
}
internal class Microsoft.Identity.Client.Utils.TimeService : object {
    public sealed virtual DateTime GetUtcNow();
}
[ExtensionAttribute]
internal static class Microsoft.Identity.Client.Utils.UriBuilderExtensions : object {
    [ExtensionAttribute]
public static void AppendQueryParameters(UriBuilder builder, string queryParams);
    [ExtensionAttribute]
public static void AppendQueryParameters(UriBuilder builder, IDictionary`2<string, string> queryParams);
}
internal class Microsoft.Identity.Client.WsTrust.CommonNonInteractiveHandler : object {
    public CommonNonInteractiveHandler(RequestContext requestContext, IServiceBundle serviceBundle);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.WsTrust.CommonNonInteractiveHandler/<GetPlatformUserAsync>d__3")]
public Task`1<string> GetPlatformUserAsync();
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.WsTrust.CommonNonInteractiveHandler/<QueryUserRealmDataAsync>d__4")]
public Task`1<UserRealmDiscoveryResponse> QueryUserRealmDataAsync(string userRealmUriPrefix, string username);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.WsTrust.CommonNonInteractiveHandler/<PerformWsTrustMexExchangeAsync>d__5")]
public Task`1<WsTrustResponse> PerformWsTrustMexExchangeAsync(string federationMetadataUrl, string cloudAudienceUrn, UserAuthType userAuthType, string username, SecureString password);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.WsTrust.CommonNonInteractiveHandler/<GetWsTrustResponseAsync>d__6")]
internal Task`1<WsTrustResponse> GetWsTrustResponseAsync(UserAuthType userAuthType, string cloudAudienceUrn, WsTrustEndpoint endpoint, string username, SecureString securePassword);
}
internal interface Microsoft.Identity.Client.WsTrust.IWsTrustWebRequestManager {
    public abstract virtual Task`1<MexDocument> GetMexDocumentAsync(string federationMetadataUrl, RequestContext requestContext);
    public abstract virtual Task`1<WsTrustResponse> GetWsTrustResponseAsync(WsTrustEndpoint wsTrustEndpoint, string wsTrustRequest, RequestContext requestContext);
    public abstract virtual Task`1<UserRealmDiscoveryResponse> GetUserRealmAsync(string userRealmUriPrefix, string userName, RequestContext requestContext);
}
internal class Microsoft.Identity.Client.WsTrust.MexDocument : object {
    public MexDocument(string responseBody);
    public WsTrustEndpoint GetWsTrustUsernamePasswordEndpoint();
    public WsTrustEndpoint GetWsTrustWindowsTransportEndpoint();
}
[ExtensionAttribute]
internal static class Microsoft.Identity.Client.WsTrust.SecureStringExtensions : object {
    [ExtensionAttribute]
public static Char[] PasswordToCharArray(SecureString secureString);
}
internal enum Microsoft.Identity.Client.WsTrust.UserAuthType : Enum {
    public int value__;
    public static UserAuthType IntegratedAuth;
    public static UserAuthType UsernamePassword;
}
[DataContractAttribute]
internal class Microsoft.Identity.Client.WsTrust.UserRealmDiscoveryResponse : object {
    [DataMemberAttribute]
public string Version { get; public set; }
    [DataMemberAttribute]
public string AccountType { get; public set; }
    [DataMemberAttribute]
public string FederationProtocol { get; public set; }
    [DataMemberAttribute]
public string FederationMetadataUrl { get; public set; }
    [DataMemberAttribute]
public string FederationActiveAuthUrl { get; public set; }
    [DataMemberAttribute]
public string CloudAudienceUrn { get; public set; }
    public bool IsFederated { get; }
    public bool IsManaged { get; }
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_AccountType();
    [CompilerGeneratedAttribute]
public void set_AccountType(string value);
    [CompilerGeneratedAttribute]
public string get_FederationProtocol();
    [CompilerGeneratedAttribute]
public void set_FederationProtocol(string value);
    [CompilerGeneratedAttribute]
public string get_FederationMetadataUrl();
    [CompilerGeneratedAttribute]
public void set_FederationMetadataUrl(string value);
    [CompilerGeneratedAttribute]
public string get_FederationActiveAuthUrl();
    [CompilerGeneratedAttribute]
public void set_FederationActiveAuthUrl(string value);
    [CompilerGeneratedAttribute]
public string get_CloudAudienceUrn();
    [CompilerGeneratedAttribute]
public void set_CloudAudienceUrn(string value);
    public bool get_IsFederated();
    public bool get_IsManaged();
}
internal class Microsoft.Identity.Client.WsTrust.WsTrustEndpoint : object {
    public Uri Uri { get; }
    public WsTrustVersion Version { get; }
    public WsTrustEndpoint(Uri uri, WsTrustVersion version, ITimeService timeService, IGuidFactory guidFactory);
    [CompilerGeneratedAttribute]
public Uri get_Uri();
    [CompilerGeneratedAttribute]
public WsTrustVersion get_Version();
    public string BuildTokenRequestMessageWindowsIntegratedAuth(string cloudAudienceUri);
    public string BuildTokenRequestMessageUsernamePassword(string cloudAudienceUri, string username, string password);
}
internal class Microsoft.Identity.Client.WsTrust.WsTrustResponse : object {
    public static string Saml1Assertion;
    public string Token { get; }
    public string TokenType { get; }
    [CompilerGeneratedAttribute]
public string get_Token();
    [CompilerGeneratedAttribute]
public string get_TokenType();
    public static WsTrustResponse CreateFromResponse(string response, WsTrustVersion version);
    public static string ReadErrorResponse(XDocument responseDocument, RequestContext requestContext);
    internal static WsTrustResponse CreateFromResponseDocument(XDocument responseDocument, WsTrustVersion version);
}
internal enum Microsoft.Identity.Client.WsTrust.WsTrustVersion : Enum {
    public int value__;
    public static WsTrustVersion WsTrust13;
    public static WsTrustVersion WsTrust2005;
}
internal class Microsoft.Identity.Client.WsTrust.WsTrustWebRequestManager : object {
    public WsTrustWebRequestManager(IHttpManager httpManager);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.WsTrust.WsTrustWebRequestManager/<GetMexDocumentAsync>d__2")]
public sealed virtual Task`1<MexDocument> GetMexDocumentAsync(string federationMetadataUrl, RequestContext requestContext);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.WsTrust.WsTrustWebRequestManager/<GetWsTrustResponseAsync>d__3")]
public sealed virtual Task`1<WsTrustResponse> GetWsTrustResponseAsync(WsTrustEndpoint wsTrustEndpoint, string wsTrustRequest, RequestContext requestContext);
    [AsyncStateMachineAttribute("Microsoft.Identity.Client.WsTrust.WsTrustWebRequestManager/<GetUserRealmAsync>d__4")]
public sealed virtual Task`1<UserRealmDiscoveryResponse> GetUserRealmAsync(string userRealmUriPrefix, string userName, RequestContext requestContext);
}
internal class Microsoft.Identity.Json.Bson.BsonArray : BsonToken {
    public BsonType Type { get; }
    public void Add(BsonToken token);
    public virtual BsonType get_Type();
    public sealed virtual IEnumerator`1<BsonToken> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal class Microsoft.Identity.Json.Bson.BsonBinary : BsonValue {
    public BsonBinaryType BinaryType { get; public set; }
    public BsonBinary(Byte[] value, BsonBinaryType binaryType);
    [CompilerGeneratedAttribute]
public BsonBinaryType get_BinaryType();
    [CompilerGeneratedAttribute]
public void set_BinaryType(BsonBinaryType value);
}
internal enum Microsoft.Identity.Json.Bson.BsonBinaryType : Enum {
    public byte value__;
    public static BsonBinaryType Binary;
    public static BsonBinaryType Function;
    [ObsoleteAttribute("This type has been deprecated in the BSON specification. Use Binary instead.")]
public static BsonBinaryType BinaryOld;
    [ObsoleteAttribute("This type has been deprecated in the BSON specification. Use Uuid instead.")]
public static BsonBinaryType UuidOld;
    public static BsonBinaryType Uuid;
    public static BsonBinaryType Md5;
    public static BsonBinaryType UserDefined;
}
internal class Microsoft.Identity.Json.Bson.BsonBinaryWriter : object {
    public DateTimeKind DateTimeKindHandling { get; public set; }
    public BsonBinaryWriter(BinaryWriter writer);
    [CompilerGeneratedAttribute]
public DateTimeKind get_DateTimeKindHandling();
    [CompilerGeneratedAttribute]
public void set_DateTimeKindHandling(DateTimeKind value);
    public void Flush();
    public void Close();
    public void WriteToken(BsonToken t);
    public void WriteUtf8Bytes(string s, int byteCount);
}
internal class Microsoft.Identity.Json.Bson.BsonBoolean : BsonValue {
    public static BsonBoolean False;
    public static BsonBoolean True;
}
internal class Microsoft.Identity.Json.Bson.BsonEmpty : BsonToken {
    public static BsonToken Null;
    public static BsonToken Undefined;
    public BsonType Type { get; }
    [CompilerGeneratedAttribute]
public virtual BsonType get_Type();
}
internal class Microsoft.Identity.Json.Bson.BsonObject : BsonToken {
    public BsonType Type { get; }
    public void Add(string name, BsonToken token);
    public virtual BsonType get_Type();
    public sealed virtual IEnumerator`1<BsonProperty> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[ObsoleteAttribute("BSON reading and writing has been moved to its own package. See https://www.nuget.org/packages/Microsoft.Identity.Json.Bson for more details.")]
internal class Microsoft.Identity.Json.Bson.BsonObjectId : object {
    public Byte[] Value { get; }
    public BsonObjectId(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_Value();
}
internal class Microsoft.Identity.Json.Bson.BsonProperty : object {
    public BsonString Name { get; public set; }
    public BsonToken Value { get; public set; }
    [CompilerGeneratedAttribute]
public BsonString get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(BsonString value);
    [CompilerGeneratedAttribute]
public BsonToken get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(BsonToken value);
}
[ObsoleteAttribute("BSON reading and writing has been moved to its own package. See https://www.nuget.org/packages/Microsoft.Identity.Json.Bson for more details.")]
internal class Microsoft.Identity.Json.Bson.BsonReader : JsonReader {
    [ObsoleteAttribute("JsonNet35BinaryCompatibility will be removed in a future version of Json.NET.")]
public bool JsonNet35BinaryCompatibility { get; public set; }
    public bool ReadRootValueAsArray { get; public set; }
    public DateTimeKind DateTimeKindHandling { get; public set; }
    public BsonReader(Stream stream);
    public BsonReader(BinaryReader reader);
    public BsonReader(Stream stream, bool readRootValueAsArray, DateTimeKind dateTimeKindHandling);
    public BsonReader(BinaryReader reader, bool readRootValueAsArray, DateTimeKind dateTimeKindHandling);
    public bool get_JsonNet35BinaryCompatibility();
    public void set_JsonNet35BinaryCompatibility(bool value);
    public bool get_ReadRootValueAsArray();
    public void set_ReadRootValueAsArray(bool value);
    public DateTimeKind get_DateTimeKindHandling();
    public void set_DateTimeKindHandling(DateTimeKind value);
    public virtual bool Read();
    public virtual void Close();
}
internal class Microsoft.Identity.Json.Bson.BsonRegex : BsonToken {
    public BsonString Pattern { get; public set; }
    public BsonString Options { get; public set; }
    public BsonType Type { get; }
    public BsonRegex(string pattern, string options);
    [CompilerGeneratedAttribute]
public BsonString get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(BsonString value);
    [CompilerGeneratedAttribute]
public BsonString get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(BsonString value);
    public virtual BsonType get_Type();
}
internal class Microsoft.Identity.Json.Bson.BsonString : BsonValue {
    public int ByteCount { get; public set; }
    public bool IncludeLength { get; }
    public BsonString(object value, bool includeLength);
    [CompilerGeneratedAttribute]
public int get_ByteCount();
    [CompilerGeneratedAttribute]
public void set_ByteCount(int value);
    [CompilerGeneratedAttribute]
public bool get_IncludeLength();
}
internal abstract class Microsoft.Identity.Json.Bson.BsonToken : object {
    public BsonType Type { get; }
    public BsonToken Parent { get; public set; }
    public int CalculatedSize { get; public set; }
    public abstract virtual BsonType get_Type();
    [CompilerGeneratedAttribute]
public BsonToken get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(BsonToken value);
    [CompilerGeneratedAttribute]
public int get_CalculatedSize();
    [CompilerGeneratedAttribute]
public void set_CalculatedSize(int value);
}
internal enum Microsoft.Identity.Json.Bson.BsonType : Enum {
    public sbyte value__;
    public static BsonType Number;
    public static BsonType String;
    public static BsonType Object;
    public static BsonType Array;
    public static BsonType Binary;
    public static BsonType Undefined;
    public static BsonType Oid;
    public static BsonType Boolean;
    public static BsonType Date;
    public static BsonType Null;
    public static BsonType Regex;
    public static BsonType Reference;
    public static BsonType Code;
    public static BsonType Symbol;
    public static BsonType CodeWScope;
    public static BsonType Integer;
    public static BsonType TimeStamp;
    public static BsonType Long;
    public static BsonType MinKey;
    public static BsonType MaxKey;
}
internal class Microsoft.Identity.Json.Bson.BsonValue : BsonToken {
    public object Value { get; }
    public BsonType Type { get; }
    public BsonValue(object value, BsonType type);
    public object get_Value();
    public virtual BsonType get_Type();
}
[ObsoleteAttribute("BSON reading and writing has been moved to its own package. See https://www.nuget.org/packages/Microsoft.Identity.Json.Bson for more details.")]
internal class Microsoft.Identity.Json.Bson.BsonWriter : JsonWriter {
    public DateTimeKind DateTimeKindHandling { get; public set; }
    public BsonWriter(Stream stream);
    public BsonWriter(BinaryWriter writer);
    public DateTimeKind get_DateTimeKindHandling();
    public void set_DateTimeKindHandling(DateTimeKind value);
    public virtual void Flush();
    protected virtual void WriteEnd(JsonToken token);
    public virtual void WriteComment(string text);
    public virtual void WriteStartConstructor(string name);
    public virtual void WriteRaw(string json);
    public virtual void WriteRawValue(string json);
    public virtual void WriteStartArray();
    public virtual void WriteStartObject();
    public virtual void WritePropertyName(string name);
    public virtual void Close();
    internal void AddToken(BsonToken token);
    public virtual void WriteValue(object value);
    public virtual void WriteNull();
    public virtual void WriteUndefined();
    public virtual void WriteValue(string value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(long value);
    public virtual void WriteValue(ulong value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(short value);
    public virtual void WriteValue(ushort value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(byte value);
    public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(Byte[] value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(TimeSpan value);
    public virtual void WriteValue(Uri value);
    public void WriteObjectId(Byte[] value);
    public void WriteRegex(string pattern, string options);
}
internal enum Microsoft.Identity.Json.ConstructorHandling : Enum {
    public int value__;
    public static ConstructorHandling Default;
    public static ConstructorHandling AllowNonPublicDefaultConstructor;
}
internal class Microsoft.Identity.Json.Converters.BinaryConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
[ObsoleteAttribute("BSON reading and writing has been moved to its own package. See https://www.nuget.org/packages/Microsoft.Identity.Json.Bson for more details.")]
internal class Microsoft.Identity.Json.Converters.BsonObjectIdConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
internal abstract class Microsoft.Identity.Json.Converters.CustomCreationConverter`1 : JsonConverter {
    public bool CanWrite { get; }
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public abstract virtual T Create(Type objectType);
    public virtual bool CanConvert(Type objectType);
    public virtual bool get_CanWrite();
}
internal class Microsoft.Identity.Json.Converters.DataSetConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type valueType);
}
internal class Microsoft.Identity.Json.Converters.DataTableConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type valueType);
}
internal abstract class Microsoft.Identity.Json.Converters.DateTimeConverterBase : JsonConverter {
    public virtual bool CanConvert(Type objectType);
}
internal class Microsoft.Identity.Json.Converters.DiscriminatedUnionConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
internal class Microsoft.Identity.Json.Converters.EntityKeyMemberConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
internal class Microsoft.Identity.Json.Converters.ExpandoObjectConverter : JsonConverter {
    public bool CanWrite { get; }
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
    public virtual bool get_CanWrite();
}
internal class Microsoft.Identity.Json.Converters.IsoDateTimeConverter : DateTimeConverterBase {
    public DateTimeStyles DateTimeStyles { get; public set; }
    public string DateTimeFormat { get; public set; }
    public CultureInfo Culture { get; public set; }
    public DateTimeStyles get_DateTimeStyles();
    public void set_DateTimeStyles(DateTimeStyles value);
    public string get_DateTimeFormat();
    public void set_DateTimeFormat(string value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
internal interface Microsoft.Identity.Json.Converters.IXmlDeclaration {
    public string Version { get; }
    public string Encoding { get; public set; }
    public string Standalone { get; public set; }
    public abstract virtual string get_Version();
    public abstract virtual string get_Encoding();
    public abstract virtual void set_Encoding(string value);
    public abstract virtual string get_Standalone();
    public abstract virtual void set_Standalone(string value);
}
internal interface Microsoft.Identity.Json.Converters.IXmlDocument {
    public IXmlElement DocumentElement { get; }
    public abstract virtual IXmlNode CreateComment(string text);
    public abstract virtual IXmlNode CreateTextNode(string text);
    public abstract virtual IXmlNode CreateCDataSection(string data);
    public abstract virtual IXmlNode CreateWhitespace(string text);
    public abstract virtual IXmlNode CreateSignificantWhitespace(string text);
    public abstract virtual IXmlNode CreateXmlDeclaration(string version, string encoding, string standalone);
    public abstract virtual IXmlNode CreateXmlDocumentType(string name, string publicId, string systemId, string internalSubset);
    public abstract virtual IXmlNode CreateProcessingInstruction(string target, string data);
    public abstract virtual IXmlElement CreateElement(string elementName);
    public abstract virtual IXmlElement CreateElement(string qualifiedName, string namespaceUri);
    public abstract virtual IXmlNode CreateAttribute(string name, string value);
    public abstract virtual IXmlNode CreateAttribute(string qualifiedName, string namespaceUri, string value);
    public abstract virtual IXmlElement get_DocumentElement();
}
internal interface Microsoft.Identity.Json.Converters.IXmlDocumentType {
    public string Name { get; }
    public string System { get; }
    public string Public { get; }
    public string InternalSubset { get; }
    public abstract virtual string get_Name();
    public abstract virtual string get_System();
    public abstract virtual string get_Public();
    public abstract virtual string get_InternalSubset();
}
internal interface Microsoft.Identity.Json.Converters.IXmlElement {
    public bool IsEmpty { get; }
    public abstract virtual void SetAttributeNode(IXmlNode attribute);
    public abstract virtual string GetPrefixOfNamespace(string namespaceUri);
    public abstract virtual bool get_IsEmpty();
}
internal interface Microsoft.Identity.Json.Converters.IXmlNode {
    public XmlNodeType NodeType { get; }
    public string LocalName { get; }
    public List`1<IXmlNode> ChildNodes { get; }
    public List`1<IXmlNode> Attributes { get; }
    public IXmlNode ParentNode { get; }
    public string Value { get; public set; }
    public string NamespaceUri { get; }
    public object WrappedNode { get; }
    public abstract virtual XmlNodeType get_NodeType();
    public abstract virtual string get_LocalName();
    public abstract virtual List`1<IXmlNode> get_ChildNodes();
    public abstract virtual List`1<IXmlNode> get_Attributes();
    public abstract virtual IXmlNode get_ParentNode();
    public abstract virtual string get_Value();
    public abstract virtual void set_Value(string value);
    public abstract virtual IXmlNode AppendChild(IXmlNode newChild);
    public abstract virtual string get_NamespaceUri();
    public abstract virtual object get_WrappedNode();
}
internal class Microsoft.Identity.Json.Converters.JavaScriptDateTimeConverter : DateTimeConverterBase {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
internal class Microsoft.Identity.Json.Converters.KeyValuePairConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
internal class Microsoft.Identity.Json.Converters.RegexConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
internal class Microsoft.Identity.Json.Converters.StringEnumConverter : JsonConverter {
    [ObsoleteAttribute("StringEnumConverter.CamelCaseText is obsolete. Set StringEnumConverter.NamingStrategy with CamelCaseNamingStrategy instead.")]
public bool CamelCaseText { get; public set; }
    public NamingStrategy NamingStrategy { get; public set; }
    public bool AllowIntegerValues { get; public set; }
    [ObsoleteAttribute("StringEnumConverter(bool) is obsolete. Create a converter with StringEnumConverter(NamingStrategy, bool) instead.")]
public StringEnumConverter(bool camelCaseText);
    public StringEnumConverter(NamingStrategy namingStrategy, bool allowIntegerValues);
    public StringEnumConverter(Type namingStrategyType);
    public StringEnumConverter(Type namingStrategyType, Object[] namingStrategyParameters);
    public StringEnumConverter(Type namingStrategyType, Object[] namingStrategyParameters, bool allowIntegerValues);
    public bool get_CamelCaseText();
    public void set_CamelCaseText(bool value);
    [CompilerGeneratedAttribute]
public NamingStrategy get_NamingStrategy();
    [CompilerGeneratedAttribute]
public void set_NamingStrategy(NamingStrategy value);
    [CompilerGeneratedAttribute]
public bool get_AllowIntegerValues();
    [CompilerGeneratedAttribute]
public void set_AllowIntegerValues(bool value);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
internal class Microsoft.Identity.Json.Converters.UnixDateTimeConverter : DateTimeConverterBase {
    internal static DateTime UnixEpoch;
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
}
internal class Microsoft.Identity.Json.Converters.VersionConverter : JsonConverter {
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type objectType);
}
internal class Microsoft.Identity.Json.Converters.XAttributeWrapper : XObjectWrapper {
    public string Value { get; public set; }
    public string LocalName { get; }
    public string NamespaceUri { get; }
    public IXmlNode ParentNode { get; }
    public XAttributeWrapper(XAttribute attribute);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual string get_LocalName();
    public virtual string get_NamespaceUri();
    public virtual IXmlNode get_ParentNode();
}
internal class Microsoft.Identity.Json.Converters.XCommentWrapper : XObjectWrapper {
    public string Value { get; public set; }
    public IXmlNode ParentNode { get; }
    public XCommentWrapper(XComment text);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual IXmlNode get_ParentNode();
}
internal class Microsoft.Identity.Json.Converters.XContainerWrapper : XObjectWrapper {
    public List`1<IXmlNode> ChildNodes { get; }
    protected bool HasChildNodes { get; }
    public IXmlNode ParentNode { get; }
    public XContainerWrapper(XContainer container);
    public virtual List`1<IXmlNode> get_ChildNodes();
    protected virtual bool get_HasChildNodes();
    public virtual IXmlNode get_ParentNode();
    internal static IXmlNode WrapNode(XObject node);
    public virtual IXmlNode AppendChild(IXmlNode newChild);
}
internal class Microsoft.Identity.Json.Converters.XDeclarationWrapper : XObjectWrapper {
    internal XDeclaration Declaration { get; }
    public XmlNodeType NodeType { get; }
    public string Version { get; }
    public string Encoding { get; public set; }
    public string Standalone { get; public set; }
    public XDeclarationWrapper(XDeclaration declaration);
    [CompilerGeneratedAttribute]
internal XDeclaration get_Declaration();
    public virtual XmlNodeType get_NodeType();
    public sealed virtual string get_Version();
    public sealed virtual string get_Encoding();
    public sealed virtual void set_Encoding(string value);
    public sealed virtual string get_Standalone();
    public sealed virtual void set_Standalone(string value);
}
internal class Microsoft.Identity.Json.Converters.XDocumentTypeWrapper : XObjectWrapper {
    public string Name { get; }
    public string System { get; }
    public string Public { get; }
    public string InternalSubset { get; }
    public string LocalName { get; }
    public XDocumentTypeWrapper(XDocumentType documentType);
    public sealed virtual string get_Name();
    public sealed virtual string get_System();
    public sealed virtual string get_Public();
    public sealed virtual string get_InternalSubset();
    public virtual string get_LocalName();
}
internal class Microsoft.Identity.Json.Converters.XDocumentWrapper : XContainerWrapper {
    public List`1<IXmlNode> ChildNodes { get; }
    protected bool HasChildNodes { get; }
    public IXmlElement DocumentElement { get; }
    public XDocumentWrapper(XDocument document);
    public virtual List`1<IXmlNode> get_ChildNodes();
    protected virtual bool get_HasChildNodes();
    public sealed virtual IXmlNode CreateComment(string text);
    public sealed virtual IXmlNode CreateTextNode(string text);
    public sealed virtual IXmlNode CreateCDataSection(string data);
    public sealed virtual IXmlNode CreateWhitespace(string text);
    public sealed virtual IXmlNode CreateSignificantWhitespace(string text);
    public sealed virtual IXmlNode CreateXmlDeclaration(string version, string encoding, string standalone);
    public sealed virtual IXmlNode CreateXmlDocumentType(string name, string publicId, string systemId, string internalSubset);
    public sealed virtual IXmlNode CreateProcessingInstruction(string target, string data);
    public sealed virtual IXmlElement CreateElement(string elementName);
    public sealed virtual IXmlElement CreateElement(string qualifiedName, string namespaceUri);
    public sealed virtual IXmlNode CreateAttribute(string name, string value);
    public sealed virtual IXmlNode CreateAttribute(string qualifiedName, string namespaceUri, string value);
    public sealed virtual IXmlElement get_DocumentElement();
    public virtual IXmlNode AppendChild(IXmlNode newChild);
}
internal class Microsoft.Identity.Json.Converters.XElementWrapper : XContainerWrapper {
    public List`1<IXmlNode> Attributes { get; }
    public string Value { get; public set; }
    public string LocalName { get; }
    public string NamespaceUri { get; }
    public bool IsEmpty { get; }
    public XElementWrapper(XElement element);
    public sealed virtual void SetAttributeNode(IXmlNode attribute);
    public virtual List`1<IXmlNode> get_Attributes();
    public virtual IXmlNode AppendChild(IXmlNode newChild);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual string get_LocalName();
    public virtual string get_NamespaceUri();
    public sealed virtual string GetPrefixOfNamespace(string namespaceUri);
    public sealed virtual bool get_IsEmpty();
}
internal class Microsoft.Identity.Json.Converters.XmlDeclarationWrapper : XmlNodeWrapper {
    public string Version { get; }
    public string Encoding { get; public set; }
    public string Standalone { get; public set; }
    public XmlDeclarationWrapper(XmlDeclaration declaration);
    public sealed virtual string get_Version();
    public sealed virtual string get_Encoding();
    public sealed virtual void set_Encoding(string value);
    public sealed virtual string get_Standalone();
    public sealed virtual void set_Standalone(string value);
}
internal class Microsoft.Identity.Json.Converters.XmlDocumentTypeWrapper : XmlNodeWrapper {
    public string Name { get; }
    public string System { get; }
    public string Public { get; }
    public string InternalSubset { get; }
    public string LocalName { get; }
    public XmlDocumentTypeWrapper(XmlDocumentType documentType);
    public sealed virtual string get_Name();
    public sealed virtual string get_System();
    public sealed virtual string get_Public();
    public sealed virtual string get_InternalSubset();
    public virtual string get_LocalName();
}
internal class Microsoft.Identity.Json.Converters.XmlDocumentWrapper : XmlNodeWrapper {
    public IXmlElement DocumentElement { get; }
    public XmlDocumentWrapper(XmlDocument document);
    public sealed virtual IXmlNode CreateComment(string data);
    public sealed virtual IXmlNode CreateTextNode(string text);
    public sealed virtual IXmlNode CreateCDataSection(string data);
    public sealed virtual IXmlNode CreateWhitespace(string text);
    public sealed virtual IXmlNode CreateSignificantWhitespace(string text);
    public sealed virtual IXmlNode CreateXmlDeclaration(string version, string encoding, string standalone);
    public sealed virtual IXmlNode CreateXmlDocumentType(string name, string publicId, string systemId, string internalSubset);
    public sealed virtual IXmlNode CreateProcessingInstruction(string target, string data);
    public sealed virtual IXmlElement CreateElement(string elementName);
    public sealed virtual IXmlElement CreateElement(string qualifiedName, string namespaceUri);
    public sealed virtual IXmlNode CreateAttribute(string name, string value);
    public sealed virtual IXmlNode CreateAttribute(string qualifiedName, string namespaceUri, string value);
    public sealed virtual IXmlElement get_DocumentElement();
}
internal class Microsoft.Identity.Json.Converters.XmlElementWrapper : XmlNodeWrapper {
    public bool IsEmpty { get; }
    public XmlElementWrapper(XmlElement element);
    public sealed virtual void SetAttributeNode(IXmlNode attribute);
    public sealed virtual string GetPrefixOfNamespace(string namespaceUri);
    public sealed virtual bool get_IsEmpty();
}
internal class Microsoft.Identity.Json.Converters.XmlNodeConverter : JsonConverter {
    internal static List`1<IXmlNode> EmptyChildNodes;
    public string DeserializeRootElementName { get; public set; }
    public bool WriteArrayAttribute { get; public set; }
    public bool OmitRootObject { get; public set; }
    public bool EncodeSpecialCharacters { get; public set; }
    [CompilerGeneratedAttribute]
public string get_DeserializeRootElementName();
    [CompilerGeneratedAttribute]
public void set_DeserializeRootElementName(string value);
    [CompilerGeneratedAttribute]
public bool get_WriteArrayAttribute();
    [CompilerGeneratedAttribute]
public void set_WriteArrayAttribute(bool value);
    [CompilerGeneratedAttribute]
public bool get_OmitRootObject();
    [CompilerGeneratedAttribute]
public void set_OmitRootObject(bool value);
    [CompilerGeneratedAttribute]
public bool get_EncodeSpecialCharacters();
    [CompilerGeneratedAttribute]
public void set_EncodeSpecialCharacters(bool value);
    public virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public virtual bool CanConvert(Type valueType);
}
internal class Microsoft.Identity.Json.Converters.XmlNodeWrapper : object {
    public object WrappedNode { get; }
    public XmlNodeType NodeType { get; }
    public string LocalName { get; }
    public List`1<IXmlNode> ChildNodes { get; }
    protected bool HasChildNodes { get; }
    public List`1<IXmlNode> Attributes { get; }
    public IXmlNode ParentNode { get; }
    public string Value { get; public set; }
    public string NamespaceUri { get; }
    public XmlNodeWrapper(XmlNode node);
    public sealed virtual object get_WrappedNode();
    public sealed virtual XmlNodeType get_NodeType();
    public virtual string get_LocalName();
    public sealed virtual List`1<IXmlNode> get_ChildNodes();
    protected virtual bool get_HasChildNodes();
    internal static IXmlNode WrapNode(XmlNode node);
    public sealed virtual List`1<IXmlNode> get_Attributes();
    public sealed virtual IXmlNode get_ParentNode();
    public sealed virtual string get_Value();
    public sealed virtual void set_Value(string value);
    public sealed virtual IXmlNode AppendChild(IXmlNode newChild);
    public sealed virtual string get_NamespaceUri();
}
internal class Microsoft.Identity.Json.Converters.XObjectWrapper : object {
    public object WrappedNode { get; }
    public XmlNodeType NodeType { get; }
    public string LocalName { get; }
    public List`1<IXmlNode> ChildNodes { get; }
    public List`1<IXmlNode> Attributes { get; }
    public IXmlNode ParentNode { get; }
    public string Value { get; public set; }
    public string NamespaceUri { get; }
    public XObjectWrapper(XObject xmlObject);
    public sealed virtual object get_WrappedNode();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_LocalName();
    public virtual List`1<IXmlNode> get_ChildNodes();
    public virtual List`1<IXmlNode> get_Attributes();
    public virtual IXmlNode get_ParentNode();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual IXmlNode AppendChild(IXmlNode newChild);
    public virtual string get_NamespaceUri();
}
internal class Microsoft.Identity.Json.Converters.XProcessingInstructionWrapper : XObjectWrapper {
    public string LocalName { get; }
    public string Value { get; public set; }
    public XProcessingInstructionWrapper(XProcessingInstruction processingInstruction);
    public virtual string get_LocalName();
    public virtual string get_Value();
    public virtual void set_Value(string value);
}
internal class Microsoft.Identity.Json.Converters.XTextWrapper : XObjectWrapper {
    public string Value { get; public set; }
    public IXmlNode ParentNode { get; }
    public XTextWrapper(XText text);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual IXmlNode get_ParentNode();
}
internal enum Microsoft.Identity.Json.DateFormatHandling : Enum {
    public int value__;
    public static DateFormatHandling IsoDateFormat;
    public static DateFormatHandling MicrosoftDateFormat;
}
internal enum Microsoft.Identity.Json.DateParseHandling : Enum {
    public int value__;
    public static DateParseHandling None;
    public static DateParseHandling DateTime;
    public static DateParseHandling DateTimeOffset;
}
internal enum Microsoft.Identity.Json.DateTimeZoneHandling : Enum {
    public int value__;
    public static DateTimeZoneHandling Local;
    public static DateTimeZoneHandling Utc;
    public static DateTimeZoneHandling Unspecified;
    public static DateTimeZoneHandling RoundtripKind;
}
internal class Microsoft.Identity.Json.DefaultJsonNameTable : JsonNameTable {
    public virtual string Get(Char[] key, int start, int length);
    public string Add(string key);
}
[FlagsAttribute]
internal enum Microsoft.Identity.Json.DefaultValueHandling : Enum {
    public int value__;
    public static DefaultValueHandling Include;
    public static DefaultValueHandling Ignore;
    public static DefaultValueHandling Populate;
    public static DefaultValueHandling IgnoreAndPopulate;
}
internal enum Microsoft.Identity.Json.FloatFormatHandling : Enum {
    public int value__;
    public static FloatFormatHandling String;
    public static FloatFormatHandling Symbol;
    public static FloatFormatHandling DefaultValue;
}
internal enum Microsoft.Identity.Json.FloatParseHandling : Enum {
    public int value__;
    public static FloatParseHandling Double;
    public static FloatParseHandling Decimal;
}
internal enum Microsoft.Identity.Json.Formatting : Enum {
    public int value__;
    public static Formatting None;
    public static Formatting Indented;
}
internal interface Microsoft.Identity.Json.IArrayPool`1 {
    public abstract virtual T[] Rent(int minimumLength);
    public abstract virtual void Return(T[] array);
}
internal interface Microsoft.Identity.Json.IJsonLineInfo {
    public int LineNumber { get; }
    public int LinePosition { get; }
    public abstract virtual bool HasLineInfo();
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_LinePosition();
}
[AttributeUsageAttribute("1028")]
internal class Microsoft.Identity.Json.JsonArrayAttribute : JsonContainerAttribute {
    public bool AllowNullItems { get; public set; }
    public JsonArrayAttribute(bool allowNullItems);
    public JsonArrayAttribute(string id);
    public bool get_AllowNullItems();
    public void set_AllowNullItems(bool value);
}
[AttributeUsageAttribute("32")]
internal class Microsoft.Identity.Json.JsonConstructorAttribute : Attribute {
}
[AttributeUsageAttribute("1028")]
internal abstract class Microsoft.Identity.Json.JsonContainerAttribute : Attribute {
    internal Nullable`1<bool> _isReference;
    internal Nullable`1<bool> _itemIsReference;
    internal Nullable`1<ReferenceLoopHandling> _itemReferenceLoopHandling;
    internal Nullable`1<TypeNameHandling> _itemTypeNameHandling;
    public string Id { get; public set; }
    public string Title { get; public set; }
    public string Description { get; public set; }
    public Type ItemConverterType { get; public set; }
    public Object[] ItemConverterParameters { get; public set; }
    public Type NamingStrategyType { get; public set; }
    public Object[] NamingStrategyParameters { get; public set; }
    internal NamingStrategy NamingStrategyInstance { get; internal set; }
    public bool IsReference { get; public set; }
    public bool ItemIsReference { get; public set; }
    public ReferenceLoopHandling ItemReferenceLoopHandling { get; public set; }
    public TypeNameHandling ItemTypeNameHandling { get; public set; }
    protected JsonContainerAttribute(string id);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Type get_ItemConverterType();
    [CompilerGeneratedAttribute]
public void set_ItemConverterType(Type value);
    [CompilerGeneratedAttribute]
public Object[] get_ItemConverterParameters();
    [CompilerGeneratedAttribute]
public void set_ItemConverterParameters(Object[] value);
    public Type get_NamingStrategyType();
    public void set_NamingStrategyType(Type value);
    public Object[] get_NamingStrategyParameters();
    public void set_NamingStrategyParameters(Object[] value);
    [CompilerGeneratedAttribute]
internal NamingStrategy get_NamingStrategyInstance();
    [CompilerGeneratedAttribute]
internal void set_NamingStrategyInstance(NamingStrategy value);
    public bool get_IsReference();
    public void set_IsReference(bool value);
    public bool get_ItemIsReference();
    public void set_ItemIsReference(bool value);
    public ReferenceLoopHandling get_ItemReferenceLoopHandling();
    public void set_ItemReferenceLoopHandling(ReferenceLoopHandling value);
    public TypeNameHandling get_ItemTypeNameHandling();
    public void set_ItemTypeNameHandling(TypeNameHandling value);
}
internal enum Microsoft.Identity.Json.JsonContainerType : Enum {
    public int value__;
    public static JsonContainerType None;
    public static JsonContainerType Object;
    public static JsonContainerType Array;
    public static JsonContainerType Constructor;
}
internal static class Microsoft.Identity.Json.JsonConvert : object {
    public static string True;
    public static string False;
    public static string Null;
    public static string Undefined;
    public static string PositiveInfinity;
    public static string NegativeInfinity;
    public static string NaN;
    public static Func`1<JsonSerializerSettings> DefaultSettings { get; public set; }
    [CompilerGeneratedAttribute]
public static Func`1<JsonSerializerSettings> get_DefaultSettings();
    [CompilerGeneratedAttribute]
public static void set_DefaultSettings(Func`1<JsonSerializerSettings> value);
    public static string ToString(DateTime value);
    public static string ToString(DateTime value, DateFormatHandling format, DateTimeZoneHandling timeZoneHandling);
    public static string ToString(DateTimeOffset value);
    public static string ToString(DateTimeOffset value, DateFormatHandling format);
    public static string ToString(bool value);
    public static string ToString(char value);
    public static string ToString(Enum value);
    public static string ToString(int value);
    public static string ToString(short value);
    public static string ToString(ushort value);
    public static string ToString(UInt32 value);
    public static string ToString(long value);
    public static string ToString(ulong value);
    public static string ToString(float value);
    internal static string ToString(float value, FloatFormatHandling floatFormatHandling, char quoteChar, bool nullable);
    public static string ToString(double value);
    internal static string ToString(double value, FloatFormatHandling floatFormatHandling, char quoteChar, bool nullable);
    public static string ToString(byte value);
    public static string ToString(sbyte value);
    public static string ToString(decimal value);
    public static string ToString(Guid value);
    internal static string ToString(Guid value, char quoteChar);
    public static string ToString(TimeSpan value);
    internal static string ToString(TimeSpan value, char quoteChar);
    public static string ToString(Uri value);
    internal static string ToString(Uri value, char quoteChar);
    public static string ToString(string value);
    public static string ToString(string value, char delimiter);
    public static string ToString(string value, char delimiter, StringEscapeHandling stringEscapeHandling);
    public static string ToString(object value);
    [DebuggerStepThroughAttribute]
public static string SerializeObject(object value);
    [DebuggerStepThroughAttribute]
public static string SerializeObject(object value, Formatting formatting);
    [DebuggerStepThroughAttribute]
public static string SerializeObject(object value, JsonConverter[] converters);
    [DebuggerStepThroughAttribute]
public static string SerializeObject(object value, Formatting formatting, JsonConverter[] converters);
    [DebuggerStepThroughAttribute]
public static string SerializeObject(object value, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public static string SerializeObject(object value, Type type, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public static string SerializeObject(object value, Formatting formatting, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public static string SerializeObject(object value, Type type, Formatting formatting, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public static object DeserializeObject(string value);
    [DebuggerStepThroughAttribute]
public static object DeserializeObject(string value, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public static object DeserializeObject(string value, Type type);
    [DebuggerStepThroughAttribute]
public static T DeserializeObject(string value);
    [DebuggerStepThroughAttribute]
public static T DeserializeAnonymousType(string value, T anonymousTypeObject);
    [DebuggerStepThroughAttribute]
public static T DeserializeAnonymousType(string value, T anonymousTypeObject, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public static T DeserializeObject(string value, JsonConverter[] converters);
    [DebuggerStepThroughAttribute]
public static T DeserializeObject(string value, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public static object DeserializeObject(string value, Type type, JsonConverter[] converters);
    public static object DeserializeObject(string value, Type type, JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public static void PopulateObject(string value, object target);
    public static void PopulateObject(string value, object target, JsonSerializerSettings settings);
    public static string SerializeXmlNode(XmlNode node);
    public static string SerializeXmlNode(XmlNode node, Formatting formatting);
    public static string SerializeXmlNode(XmlNode node, Formatting formatting, bool omitRootObject);
    public static XmlDocument DeserializeXmlNode(string value);
    public static XmlDocument DeserializeXmlNode(string value, string deserializeRootElementName);
    public static XmlDocument DeserializeXmlNode(string value, string deserializeRootElementName, bool writeArrayAttribute);
    public static XmlDocument DeserializeXmlNode(string value, string deserializeRootElementName, bool writeArrayAttribute, bool encodeSpecialCharacters);
    public static string SerializeXNode(XObject node);
    public static string SerializeXNode(XObject node, Formatting formatting);
    public static string SerializeXNode(XObject node, Formatting formatting, bool omitRootObject);
    public static XDocument DeserializeXNode(string value);
    public static XDocument DeserializeXNode(string value, string deserializeRootElementName);
    public static XDocument DeserializeXNode(string value, string deserializeRootElementName, bool writeArrayAttribute);
    public static XDocument DeserializeXNode(string value, string deserializeRootElementName, bool writeArrayAttribute, bool encodeSpecialCharacters);
}
internal abstract class Microsoft.Identity.Json.JsonConverter : object {
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public abstract virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public abstract virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public abstract virtual bool CanConvert(Type objectType);
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
}
internal abstract class Microsoft.Identity.Json.JsonConverter`1 : JsonConverter {
    public sealed virtual void WriteJson(JsonWriter writer, object value, JsonSerializer serializer);
    public abstract virtual void WriteJson(JsonWriter writer, T value, JsonSerializer serializer);
    public sealed virtual object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer);
    public abstract virtual T ReadJson(JsonReader reader, Type objectType, T existingValue, bool hasExistingValue, JsonSerializer serializer);
    public sealed virtual bool CanConvert(Type objectType);
}
[AttributeUsageAttribute("3484")]
internal class Microsoft.Identity.Json.JsonConverterAttribute : Attribute {
    public Type ConverterType { get; }
    public Object[] ConverterParameters { get; }
    public JsonConverterAttribute(Type converterType);
    public JsonConverterAttribute(Type converterType, Object[] converterParameters);
    public Type get_ConverterType();
    [CompilerGeneratedAttribute]
public Object[] get_ConverterParameters();
}
internal class Microsoft.Identity.Json.JsonConverterCollection : Collection`1<JsonConverter> {
}
[AttributeUsageAttribute("1028")]
internal class Microsoft.Identity.Json.JsonDictionaryAttribute : JsonContainerAttribute {
    public JsonDictionaryAttribute(string id);
}
internal class Microsoft.Identity.Json.JsonException : Exception {
    public JsonException(string message);
    public JsonException(string message, Exception innerException);
    public JsonException(SerializationInfo info, StreamingContext context);
    internal static JsonException Create(IJsonLineInfo lineInfo, string path, string message);
}
[AttributeUsageAttribute("384")]
internal class Microsoft.Identity.Json.JsonExtensionDataAttribute : Attribute {
    public bool WriteData { get; public set; }
    public bool ReadData { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_WriteData();
    [CompilerGeneratedAttribute]
public void set_WriteData(bool value);
    [CompilerGeneratedAttribute]
public bool get_ReadData();
    [CompilerGeneratedAttribute]
public void set_ReadData(bool value);
}
[AttributeUsageAttribute("384")]
internal class Microsoft.Identity.Json.JsonIgnoreAttribute : Attribute {
}
internal abstract class Microsoft.Identity.Json.JsonNameTable : object {
    public abstract virtual string Get(Char[] key, int start, int length);
}
[AttributeUsageAttribute("1036")]
internal class Microsoft.Identity.Json.JsonObjectAttribute : JsonContainerAttribute {
    internal Nullable`1<Required> _itemRequired;
    internal Nullable`1<NullValueHandling> _itemNullValueHandling;
    public MemberSerialization MemberSerialization { get; public set; }
    public NullValueHandling ItemNullValueHandling { get; public set; }
    public Required ItemRequired { get; public set; }
    public JsonObjectAttribute(MemberSerialization memberSerialization);
    public JsonObjectAttribute(string id);
    public MemberSerialization get_MemberSerialization();
    public void set_MemberSerialization(MemberSerialization value);
    public NullValueHandling get_ItemNullValueHandling();
    public void set_ItemNullValueHandling(NullValueHandling value);
    public Required get_ItemRequired();
    public void set_ItemRequired(Required value);
}
internal class Microsoft.Identity.Json.JsonPosition : ValueType {
    private static Char[] SpecialCharacters;
    internal JsonContainerType Type;
    internal int Position;
    internal string PropertyName;
    internal bool HasIndex;
    public JsonPosition(JsonContainerType type);
    internal int CalculateLength();
    internal void WriteTo(StringBuilder sb, StringWriter& writer, Char[]& buffer);
    internal static bool TypeHasIndex(JsonContainerType type);
    internal static string BuildPath(List`1<JsonPosition> positions, Nullable`1<JsonPosition> currentPosition);
    internal static string FormatMessage(IJsonLineInfo lineInfo, string path, string message);
}
[AttributeUsageAttribute("2432")]
internal class Microsoft.Identity.Json.JsonPropertyAttribute : Attribute {
    internal Nullable`1<NullValueHandling> _nullValueHandling;
    internal Nullable`1<DefaultValueHandling> _defaultValueHandling;
    internal Nullable`1<ReferenceLoopHandling> _referenceLoopHandling;
    internal Nullable`1<ObjectCreationHandling> _objectCreationHandling;
    internal Nullable`1<TypeNameHandling> _typeNameHandling;
    internal Nullable`1<bool> _isReference;
    internal Nullable`1<int> _order;
    internal Nullable`1<Required> _required;
    internal Nullable`1<bool> _itemIsReference;
    internal Nullable`1<ReferenceLoopHandling> _itemReferenceLoopHandling;
    internal Nullable`1<TypeNameHandling> _itemTypeNameHandling;
    public Type ItemConverterType { get; public set; }
    public Object[] ItemConverterParameters { get; public set; }
    public Type NamingStrategyType { get; public set; }
    public Object[] NamingStrategyParameters { get; public set; }
    public NullValueHandling NullValueHandling { get; public set; }
    public DefaultValueHandling DefaultValueHandling { get; public set; }
    public ReferenceLoopHandling ReferenceLoopHandling { get; public set; }
    public ObjectCreationHandling ObjectCreationHandling { get; public set; }
    public TypeNameHandling TypeNameHandling { get; public set; }
    public bool IsReference { get; public set; }
    public int Order { get; public set; }
    public Required Required { get; public set; }
    public string PropertyName { get; public set; }
    public ReferenceLoopHandling ItemReferenceLoopHandling { get; public set; }
    public TypeNameHandling ItemTypeNameHandling { get; public set; }
    public bool ItemIsReference { get; public set; }
    public JsonPropertyAttribute(string propertyName);
    [CompilerGeneratedAttribute]
public Type get_ItemConverterType();
    [CompilerGeneratedAttribute]
public void set_ItemConverterType(Type value);
    [CompilerGeneratedAttribute]
public Object[] get_ItemConverterParameters();
    [CompilerGeneratedAttribute]
public void set_ItemConverterParameters(Object[] value);
    [CompilerGeneratedAttribute]
public Type get_NamingStrategyType();
    [CompilerGeneratedAttribute]
public void set_NamingStrategyType(Type value);
    [CompilerGeneratedAttribute]
public Object[] get_NamingStrategyParameters();
    [CompilerGeneratedAttribute]
public void set_NamingStrategyParameters(Object[] value);
    public NullValueHandling get_NullValueHandling();
    public void set_NullValueHandling(NullValueHandling value);
    public DefaultValueHandling get_DefaultValueHandling();
    public void set_DefaultValueHandling(DefaultValueHandling value);
    public ReferenceLoopHandling get_ReferenceLoopHandling();
    public void set_ReferenceLoopHandling(ReferenceLoopHandling value);
    public ObjectCreationHandling get_ObjectCreationHandling();
    public void set_ObjectCreationHandling(ObjectCreationHandling value);
    public TypeNameHandling get_TypeNameHandling();
    public void set_TypeNameHandling(TypeNameHandling value);
    public bool get_IsReference();
    public void set_IsReference(bool value);
    public int get_Order();
    public void set_Order(int value);
    public Required get_Required();
    public void set_Required(Required value);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public void set_PropertyName(string value);
    public ReferenceLoopHandling get_ItemReferenceLoopHandling();
    public void set_ItemReferenceLoopHandling(ReferenceLoopHandling value);
    public TypeNameHandling get_ItemTypeNameHandling();
    public void set_ItemTypeNameHandling(TypeNameHandling value);
    public bool get_ItemIsReference();
    public void set_ItemIsReference(bool value);
}
internal abstract class Microsoft.Identity.Json.JsonReader : object {
    internal char _quoteChar;
    internal State _currentState;
    internal DateParseHandling _dateParseHandling;
    internal FloatParseHandling _floatParseHandling;
    protected State CurrentState { get; }
    public bool CloseInput { get; public set; }
    public bool SupportMultipleContent { get; public set; }
    public char QuoteChar { get; protected internal set; }
    public DateTimeZoneHandling DateTimeZoneHandling { get; public set; }
    public DateParseHandling DateParseHandling { get; public set; }
    public FloatParseHandling FloatParseHandling { get; public set; }
    public string DateFormatString { get; public set; }
    public Nullable`1<int> MaxDepth { get; public set; }
    public JsonToken TokenType { get; }
    public object Value { get; }
    public Type ValueType { get; }
    public int Depth { get; }
    public string Path { get; }
    public CultureInfo Culture { get; public set; }
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.JsonReader/<SkipAsync>d__1")]
public Task SkipAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.JsonReader/<ReaderReadAndAssertAsync>d__2")]
internal Task ReaderReadAndAssertAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<bool>> ReadAsBooleanAsync(CancellationToken cancellationToken);
    public virtual Task`1<Byte[]> ReadAsBytesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.JsonReader/<ReadArrayIntoByteArrayAsync>d__5")]
internal Task`1<Byte[]> ReadArrayIntoByteArrayAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<DateTime>> ReadAsDateTimeAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<DateTimeOffset>> ReadAsDateTimeOffsetAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<decimal>> ReadAsDecimalAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<double>> ReadAsDoubleAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<int>> ReadAsInt32Async(CancellationToken cancellationToken);
    public virtual Task`1<string> ReadAsStringAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.JsonReader/<ReadAndMoveToContentAsync>d__12")]
internal Task`1<bool> ReadAndMoveToContentAsync(CancellationToken cancellationToken);
    internal Task`1<bool> MoveToContentAsync(CancellationToken cancellationToken);
    protected State get_CurrentState();
    [CompilerGeneratedAttribute]
public bool get_CloseInput();
    [CompilerGeneratedAttribute]
public void set_CloseInput(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportMultipleContent();
    [CompilerGeneratedAttribute]
public void set_SupportMultipleContent(bool value);
    public virtual char get_QuoteChar();
    protected internal virtual void set_QuoteChar(char value);
    public DateTimeZoneHandling get_DateTimeZoneHandling();
    public void set_DateTimeZoneHandling(DateTimeZoneHandling value);
    public DateParseHandling get_DateParseHandling();
    public void set_DateParseHandling(DateParseHandling value);
    public FloatParseHandling get_FloatParseHandling();
    public void set_FloatParseHandling(FloatParseHandling value);
    public string get_DateFormatString();
    public void set_DateFormatString(string value);
    public Nullable`1<int> get_MaxDepth();
    public void set_MaxDepth(Nullable`1<int> value);
    public virtual JsonToken get_TokenType();
    public virtual object get_Value();
    public virtual Type get_ValueType();
    public virtual int get_Depth();
    public virtual string get_Path();
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    internal JsonPosition GetPosition(int depth);
    public abstract virtual bool Read();
    public virtual Nullable`1<int> ReadAsInt32();
    internal Nullable`1<int> ReadInt32String(string s);
    public virtual string ReadAsString();
    public virtual Byte[] ReadAsBytes();
    internal Byte[] ReadArrayIntoByteArray();
    public virtual Nullable`1<double> ReadAsDouble();
    internal Nullable`1<double> ReadDoubleString(string s);
    public virtual Nullable`1<bool> ReadAsBoolean();
    internal Nullable`1<bool> ReadBooleanString(string s);
    public virtual Nullable`1<decimal> ReadAsDecimal();
    internal Nullable`1<decimal> ReadDecimalString(string s);
    public virtual Nullable`1<DateTime> ReadAsDateTime();
    internal Nullable`1<DateTime> ReadDateTimeString(string s);
    public virtual Nullable`1<DateTimeOffset> ReadAsDateTimeOffset();
    internal Nullable`1<DateTimeOffset> ReadDateTimeOffsetString(string s);
    internal void ReaderReadAndAssert();
    internal JsonReaderException CreateUnexpectedEndException();
    internal void ReadIntoWrappedTypeObject();
    public void Skip();
    protected void SetToken(JsonToken newToken);
    protected void SetToken(JsonToken newToken, object value);
    protected void SetToken(JsonToken newToken, object value, bool updateIndex);
    internal void SetPostValueState(bool updateIndex);
    protected void SetStateBasedOnCurrent();
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual void Close();
    internal void ReadAndAssert();
    internal void ReadForTypeAndAssert(JsonContract contract, bool hasConverter);
    internal bool ReadForType(JsonContract contract, bool hasConverter);
    internal bool ReadAndMoveToContent();
    internal bool MoveToContent();
}
internal class Microsoft.Identity.Json.JsonReaderException : JsonException {
    public int LineNumber { get; }
    public int LinePosition { get; }
    public string Path { get; }
    public JsonReaderException(string message);
    public JsonReaderException(string message, Exception innerException);
    public JsonReaderException(SerializationInfo info, StreamingContext context);
    public JsonReaderException(string message, string path, int lineNumber, int linePosition, Exception innerException);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    [CompilerGeneratedAttribute]
public string get_Path();
    internal static JsonReaderException Create(JsonReader reader, string message);
    internal static JsonReaderException Create(JsonReader reader, string message, Exception ex);
    internal static JsonReaderException Create(IJsonLineInfo lineInfo, string path, string message, Exception ex);
}
[AttributeUsageAttribute("384")]
internal class Microsoft.Identity.Json.JsonRequiredAttribute : Attribute {
}
internal class Microsoft.Identity.Json.JsonSerializationException : JsonException {
    public int LineNumber { get; }
    public int LinePosition { get; }
    public string Path { get; }
    public JsonSerializationException(string message);
    public JsonSerializationException(string message, Exception innerException);
    public JsonSerializationException(SerializationInfo info, StreamingContext context);
    public JsonSerializationException(string message, string path, int lineNumber, int linePosition, Exception innerException);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    [CompilerGeneratedAttribute]
public string get_Path();
    internal static JsonSerializationException Create(JsonReader reader, string message);
    internal static JsonSerializationException Create(JsonReader reader, string message, Exception ex);
    internal static JsonSerializationException Create(IJsonLineInfo lineInfo, string path, string message, Exception ex);
}
internal class Microsoft.Identity.Json.JsonSerializer : object {
    internal TypeNameHandling _typeNameHandling;
    internal TypeNameAssemblyFormatHandling _typeNameAssemblyFormatHandling;
    internal PreserveReferencesHandling _preserveReferencesHandling;
    internal ReferenceLoopHandling _referenceLoopHandling;
    internal MissingMemberHandling _missingMemberHandling;
    internal ObjectCreationHandling _objectCreationHandling;
    internal NullValueHandling _nullValueHandling;
    internal DefaultValueHandling _defaultValueHandling;
    internal ConstructorHandling _constructorHandling;
    internal MetadataPropertyHandling _metadataPropertyHandling;
    internal JsonConverterCollection _converters;
    internal IContractResolver _contractResolver;
    internal ITraceWriter _traceWriter;
    internal IEqualityComparer _equalityComparer;
    internal ISerializationBinder _serializationBinder;
    internal StreamingContext _context;
    public IReferenceResolver ReferenceResolver { get; public set; }
    public ISerializationBinder SerializationBinder { get; public set; }
    public ITraceWriter TraceWriter { get; public set; }
    public IEqualityComparer EqualityComparer { get; public set; }
    public TypeNameHandling TypeNameHandling { get; public set; }
    [ObsoleteAttribute("TypeNameAssemblyFormat is obsolete. Use TypeNameAssemblyFormatHandling instead.")]
public FormatterAssemblyStyle TypeNameAssemblyFormat { get; public set; }
    public TypeNameAssemblyFormatHandling TypeNameAssemblyFormatHandling { get; public set; }
    public PreserveReferencesHandling PreserveReferencesHandling { get; public set; }
    public ReferenceLoopHandling ReferenceLoopHandling { get; public set; }
    public MissingMemberHandling MissingMemberHandling { get; public set; }
    public NullValueHandling NullValueHandling { get; public set; }
    public DefaultValueHandling DefaultValueHandling { get; public set; }
    public ObjectCreationHandling ObjectCreationHandling { get; public set; }
    public ConstructorHandling ConstructorHandling { get; public set; }
    public MetadataPropertyHandling MetadataPropertyHandling { get; public set; }
    public JsonConverterCollection Converters { get; }
    public IContractResolver ContractResolver { get; public set; }
    public StreamingContext Context { get; public set; }
    public Formatting Formatting { get; public set; }
    public DateFormatHandling DateFormatHandling { get; public set; }
    public DateTimeZoneHandling DateTimeZoneHandling { get; public set; }
    public DateParseHandling DateParseHandling { get; public set; }
    public FloatParseHandling FloatParseHandling { get; public set; }
    public FloatFormatHandling FloatFormatHandling { get; public set; }
    public StringEscapeHandling StringEscapeHandling { get; public set; }
    public string DateFormatString { get; public set; }
    public CultureInfo Culture { get; public set; }
    public Nullable`1<int> MaxDepth { get; public set; }
    public bool CheckAdditionalContent { get; public set; }
    [CompilerGeneratedAttribute]
public virtual void add_Error(EventHandler`1<ErrorEventArgs> value);
    [CompilerGeneratedAttribute]
public virtual void remove_Error(EventHandler`1<ErrorEventArgs> value);
    public virtual IReferenceResolver get_ReferenceResolver();
    public virtual void set_ReferenceResolver(IReferenceResolver value);
    public virtual ISerializationBinder get_SerializationBinder();
    public virtual void set_SerializationBinder(ISerializationBinder value);
    public virtual ITraceWriter get_TraceWriter();
    public virtual void set_TraceWriter(ITraceWriter value);
    public virtual IEqualityComparer get_EqualityComparer();
    public virtual void set_EqualityComparer(IEqualityComparer value);
    public virtual TypeNameHandling get_TypeNameHandling();
    public virtual void set_TypeNameHandling(TypeNameHandling value);
    public virtual FormatterAssemblyStyle get_TypeNameAssemblyFormat();
    public virtual void set_TypeNameAssemblyFormat(FormatterAssemblyStyle value);
    public virtual TypeNameAssemblyFormatHandling get_TypeNameAssemblyFormatHandling();
    public virtual void set_TypeNameAssemblyFormatHandling(TypeNameAssemblyFormatHandling value);
    public virtual PreserveReferencesHandling get_PreserveReferencesHandling();
    public virtual void set_PreserveReferencesHandling(PreserveReferencesHandling value);
    public virtual ReferenceLoopHandling get_ReferenceLoopHandling();
    public virtual void set_ReferenceLoopHandling(ReferenceLoopHandling value);
    public virtual MissingMemberHandling get_MissingMemberHandling();
    public virtual void set_MissingMemberHandling(MissingMemberHandling value);
    public virtual NullValueHandling get_NullValueHandling();
    public virtual void set_NullValueHandling(NullValueHandling value);
    public virtual DefaultValueHandling get_DefaultValueHandling();
    public virtual void set_DefaultValueHandling(DefaultValueHandling value);
    public virtual ObjectCreationHandling get_ObjectCreationHandling();
    public virtual void set_ObjectCreationHandling(ObjectCreationHandling value);
    public virtual ConstructorHandling get_ConstructorHandling();
    public virtual void set_ConstructorHandling(ConstructorHandling value);
    public virtual MetadataPropertyHandling get_MetadataPropertyHandling();
    public virtual void set_MetadataPropertyHandling(MetadataPropertyHandling value);
    public virtual JsonConverterCollection get_Converters();
    public virtual IContractResolver get_ContractResolver();
    public virtual void set_ContractResolver(IContractResolver value);
    public virtual StreamingContext get_Context();
    public virtual void set_Context(StreamingContext value);
    public virtual Formatting get_Formatting();
    public virtual void set_Formatting(Formatting value);
    public virtual DateFormatHandling get_DateFormatHandling();
    public virtual void set_DateFormatHandling(DateFormatHandling value);
    public virtual DateTimeZoneHandling get_DateTimeZoneHandling();
    public virtual void set_DateTimeZoneHandling(DateTimeZoneHandling value);
    public virtual DateParseHandling get_DateParseHandling();
    public virtual void set_DateParseHandling(DateParseHandling value);
    public virtual FloatParseHandling get_FloatParseHandling();
    public virtual void set_FloatParseHandling(FloatParseHandling value);
    public virtual FloatFormatHandling get_FloatFormatHandling();
    public virtual void set_FloatFormatHandling(FloatFormatHandling value);
    public virtual StringEscapeHandling get_StringEscapeHandling();
    public virtual void set_StringEscapeHandling(StringEscapeHandling value);
    public virtual string get_DateFormatString();
    public virtual void set_DateFormatString(string value);
    public virtual CultureInfo get_Culture();
    public virtual void set_Culture(CultureInfo value);
    public virtual Nullable`1<int> get_MaxDepth();
    public virtual void set_MaxDepth(Nullable`1<int> value);
    public virtual bool get_CheckAdditionalContent();
    public virtual void set_CheckAdditionalContent(bool value);
    internal bool IsCheckAdditionalContentSet();
    public static JsonSerializer Create();
    public static JsonSerializer Create(JsonSerializerSettings settings);
    public static JsonSerializer CreateDefault();
    public static JsonSerializer CreateDefault(JsonSerializerSettings settings);
    [DebuggerStepThroughAttribute]
public void Populate(TextReader reader, object target);
    [DebuggerStepThroughAttribute]
public void Populate(JsonReader reader, object target);
    internal virtual void PopulateInternal(JsonReader reader, object target);
    [DebuggerStepThroughAttribute]
public object Deserialize(JsonReader reader);
    [DebuggerStepThroughAttribute]
public object Deserialize(TextReader reader, Type objectType);
    [DebuggerStepThroughAttribute]
public T Deserialize(JsonReader reader);
    [DebuggerStepThroughAttribute]
public object Deserialize(JsonReader reader, Type objectType);
    internal virtual object DeserializeInternal(JsonReader reader, Type objectType);
    public void Serialize(TextWriter textWriter, object value);
    public void Serialize(JsonWriter jsonWriter, object value, Type objectType);
    public void Serialize(TextWriter textWriter, object value, Type objectType);
    public void Serialize(JsonWriter jsonWriter, object value);
    internal virtual void SerializeInternal(JsonWriter jsonWriter, object value, Type objectType);
    internal IReferenceResolver GetReferenceResolver();
    internal JsonConverter GetMatchingConverter(Type type);
    internal static JsonConverter GetMatchingConverter(IList`1<JsonConverter> converters, Type objectType);
    internal void OnError(ErrorEventArgs e);
}
internal class Microsoft.Identity.Json.JsonSerializerSettings : object {
    internal static ReferenceLoopHandling DefaultReferenceLoopHandling;
    internal static MissingMemberHandling DefaultMissingMemberHandling;
    internal static NullValueHandling DefaultNullValueHandling;
    internal static DefaultValueHandling DefaultDefaultValueHandling;
    internal static ObjectCreationHandling DefaultObjectCreationHandling;
    internal static PreserveReferencesHandling DefaultPreserveReferencesHandling;
    internal static ConstructorHandling DefaultConstructorHandling;
    internal static TypeNameHandling DefaultTypeNameHandling;
    internal static MetadataPropertyHandling DefaultMetadataPropertyHandling;
    internal static StreamingContext DefaultContext;
    internal static Formatting DefaultFormatting;
    internal static DateFormatHandling DefaultDateFormatHandling;
    internal static DateTimeZoneHandling DefaultDateTimeZoneHandling;
    internal static DateParseHandling DefaultDateParseHandling;
    internal static FloatParseHandling DefaultFloatParseHandling;
    internal static FloatFormatHandling DefaultFloatFormatHandling;
    internal static StringEscapeHandling DefaultStringEscapeHandling;
    internal static TypeNameAssemblyFormatHandling DefaultTypeNameAssemblyFormatHandling;
    internal static CultureInfo DefaultCulture;
    internal static bool DefaultCheckAdditionalContent;
    internal static string DefaultDateFormatString;
    internal Nullable`1<Formatting> _formatting;
    internal Nullable`1<DateFormatHandling> _dateFormatHandling;
    internal Nullable`1<DateTimeZoneHandling> _dateTimeZoneHandling;
    internal Nullable`1<DateParseHandling> _dateParseHandling;
    internal Nullable`1<FloatFormatHandling> _floatFormatHandling;
    internal Nullable`1<FloatParseHandling> _floatParseHandling;
    internal Nullable`1<StringEscapeHandling> _stringEscapeHandling;
    internal CultureInfo _culture;
    internal Nullable`1<bool> _checkAdditionalContent;
    internal Nullable`1<int> _maxDepth;
    internal bool _maxDepthSet;
    internal string _dateFormatString;
    internal bool _dateFormatStringSet;
    internal Nullable`1<TypeNameAssemblyFormatHandling> _typeNameAssemblyFormatHandling;
    internal Nullable`1<DefaultValueHandling> _defaultValueHandling;
    internal Nullable`1<PreserveReferencesHandling> _preserveReferencesHandling;
    internal Nullable`1<NullValueHandling> _nullValueHandling;
    internal Nullable`1<ObjectCreationHandling> _objectCreationHandling;
    internal Nullable`1<MissingMemberHandling> _missingMemberHandling;
    internal Nullable`1<ReferenceLoopHandling> _referenceLoopHandling;
    internal Nullable`1<StreamingContext> _context;
    internal Nullable`1<ConstructorHandling> _constructorHandling;
    internal Nullable`1<TypeNameHandling> _typeNameHandling;
    internal Nullable`1<MetadataPropertyHandling> _metadataPropertyHandling;
    public ReferenceLoopHandling ReferenceLoopHandling { get; public set; }
    public MissingMemberHandling MissingMemberHandling { get; public set; }
    public ObjectCreationHandling ObjectCreationHandling { get; public set; }
    public NullValueHandling NullValueHandling { get; public set; }
    public DefaultValueHandling DefaultValueHandling { get; public set; }
    public IList`1<JsonConverter> Converters { get; public set; }
    public PreserveReferencesHandling PreserveReferencesHandling { get; public set; }
    public TypeNameHandling TypeNameHandling { get; public set; }
    public MetadataPropertyHandling MetadataPropertyHandling { get; public set; }
    [ObsoleteAttribute("TypeNameAssemblyFormat is obsolete. Use TypeNameAssemblyFormatHandling instead.")]
public FormatterAssemblyStyle TypeNameAssemblyFormat { get; public set; }
    public TypeNameAssemblyFormatHandling TypeNameAssemblyFormatHandling { get; public set; }
    public ConstructorHandling ConstructorHandling { get; public set; }
    public IContractResolver ContractResolver { get; public set; }
    public IEqualityComparer EqualityComparer { get; public set; }
    [ObsoleteAttribute("ReferenceResolver property is obsolete. Use the ReferenceResolverProvider property to set the IReferenceResolver: settings.ReferenceResolverProvider = () => resolver")]
public IReferenceResolver ReferenceResolver { get; public set; }
    public Func`1<IReferenceResolver> ReferenceResolverProvider { get; public set; }
    public ITraceWriter TraceWriter { get; public set; }
    public ISerializationBinder SerializationBinder { get; public set; }
    public EventHandler`1<ErrorEventArgs> Error { get; public set; }
    public StreamingContext Context { get; public set; }
    public string DateFormatString { get; public set; }
    public Nullable`1<int> MaxDepth { get; public set; }
    public Formatting Formatting { get; public set; }
    public DateFormatHandling DateFormatHandling { get; public set; }
    public DateTimeZoneHandling DateTimeZoneHandling { get; public set; }
    public DateParseHandling DateParseHandling { get; public set; }
    public FloatFormatHandling FloatFormatHandling { get; public set; }
    public FloatParseHandling FloatParseHandling { get; public set; }
    public StringEscapeHandling StringEscapeHandling { get; public set; }
    public CultureInfo Culture { get; public set; }
    public bool CheckAdditionalContent { get; public set; }
    public ReferenceLoopHandling get_ReferenceLoopHandling();
    public void set_ReferenceLoopHandling(ReferenceLoopHandling value);
    public MissingMemberHandling get_MissingMemberHandling();
    public void set_MissingMemberHandling(MissingMemberHandling value);
    public ObjectCreationHandling get_ObjectCreationHandling();
    public void set_ObjectCreationHandling(ObjectCreationHandling value);
    public NullValueHandling get_NullValueHandling();
    public void set_NullValueHandling(NullValueHandling value);
    public DefaultValueHandling get_DefaultValueHandling();
    public void set_DefaultValueHandling(DefaultValueHandling value);
    [CompilerGeneratedAttribute]
public IList`1<JsonConverter> get_Converters();
    [CompilerGeneratedAttribute]
public void set_Converters(IList`1<JsonConverter> value);
    public PreserveReferencesHandling get_PreserveReferencesHandling();
    public void set_PreserveReferencesHandling(PreserveReferencesHandling value);
    public TypeNameHandling get_TypeNameHandling();
    public void set_TypeNameHandling(TypeNameHandling value);
    public MetadataPropertyHandling get_MetadataPropertyHandling();
    public void set_MetadataPropertyHandling(MetadataPropertyHandling value);
    public FormatterAssemblyStyle get_TypeNameAssemblyFormat();
    public void set_TypeNameAssemblyFormat(FormatterAssemblyStyle value);
    public TypeNameAssemblyFormatHandling get_TypeNameAssemblyFormatHandling();
    public void set_TypeNameAssemblyFormatHandling(TypeNameAssemblyFormatHandling value);
    public ConstructorHandling get_ConstructorHandling();
    public void set_ConstructorHandling(ConstructorHandling value);
    [CompilerGeneratedAttribute]
public IContractResolver get_ContractResolver();
    [CompilerGeneratedAttribute]
public void set_ContractResolver(IContractResolver value);
    [CompilerGeneratedAttribute]
public IEqualityComparer get_EqualityComparer();
    [CompilerGeneratedAttribute]
public void set_EqualityComparer(IEqualityComparer value);
    public IReferenceResolver get_ReferenceResolver();
    public void set_ReferenceResolver(IReferenceResolver value);
    [CompilerGeneratedAttribute]
public Func`1<IReferenceResolver> get_ReferenceResolverProvider();
    [CompilerGeneratedAttribute]
public void set_ReferenceResolverProvider(Func`1<IReferenceResolver> value);
    [CompilerGeneratedAttribute]
public ITraceWriter get_TraceWriter();
    [CompilerGeneratedAttribute]
public void set_TraceWriter(ITraceWriter value);
    [CompilerGeneratedAttribute]
public ISerializationBinder get_SerializationBinder();
    [CompilerGeneratedAttribute]
public void set_SerializationBinder(ISerializationBinder value);
    [CompilerGeneratedAttribute]
public EventHandler`1<ErrorEventArgs> get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(EventHandler`1<ErrorEventArgs> value);
    public StreamingContext get_Context();
    public void set_Context(StreamingContext value);
    public string get_DateFormatString();
    public void set_DateFormatString(string value);
    public Nullable`1<int> get_MaxDepth();
    public void set_MaxDepth(Nullable`1<int> value);
    public Formatting get_Formatting();
    public void set_Formatting(Formatting value);
    public DateFormatHandling get_DateFormatHandling();
    public void set_DateFormatHandling(DateFormatHandling value);
    public DateTimeZoneHandling get_DateTimeZoneHandling();
    public void set_DateTimeZoneHandling(DateTimeZoneHandling value);
    public DateParseHandling get_DateParseHandling();
    public void set_DateParseHandling(DateParseHandling value);
    public FloatFormatHandling get_FloatFormatHandling();
    public void set_FloatFormatHandling(FloatFormatHandling value);
    public FloatParseHandling get_FloatParseHandling();
    public void set_FloatParseHandling(FloatParseHandling value);
    public StringEscapeHandling get_StringEscapeHandling();
    public void set_StringEscapeHandling(StringEscapeHandling value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    public bool get_CheckAdditionalContent();
    public void set_CheckAdditionalContent(bool value);
}
internal class Microsoft.Identity.Json.JsonTextReader : JsonReader {
    public JsonNameTable PropertyNameTable { get; public set; }
    public IArrayPool`1<char> ArrayPool { get; public set; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public JsonTextReader(TextReader reader);
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    internal Task`1<bool> DoReadAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<bool>> ReadAsBooleanAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.JsonTextReader/<DoReadAsBooleanAsync>d__40")]
internal Task`1<Nullable`1<bool>> DoReadAsBooleanAsync(CancellationToken cancellationToken);
    public virtual Task`1<Byte[]> ReadAsBytesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.JsonTextReader/<DoReadAsBytesAsync>d__42")]
internal Task`1<Byte[]> DoReadAsBytesAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<DateTime>> ReadAsDateTimeAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.JsonTextReader/<DoReadAsDateTimeAsync>d__45")]
internal Task`1<Nullable`1<DateTime>> DoReadAsDateTimeAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<DateTimeOffset>> ReadAsDateTimeOffsetAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.JsonTextReader/<DoReadAsDateTimeOffsetAsync>d__47")]
internal Task`1<Nullable`1<DateTimeOffset>> DoReadAsDateTimeOffsetAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<decimal>> ReadAsDecimalAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.JsonTextReader/<DoReadAsDecimalAsync>d__49")]
internal Task`1<Nullable`1<decimal>> DoReadAsDecimalAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<double>> ReadAsDoubleAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.JsonTextReader/<DoReadAsDoubleAsync>d__51")]
internal Task`1<Nullable`1<double>> DoReadAsDoubleAsync(CancellationToken cancellationToken);
    public virtual Task`1<Nullable`1<int>> ReadAsInt32Async(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.JsonTextReader/<DoReadAsInt32Async>d__53")]
internal Task`1<Nullable`1<int>> DoReadAsInt32Async(CancellationToken cancellationToken);
    public virtual Task`1<string> ReadAsStringAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.JsonTextReader/<DoReadAsStringAsync>d__55")]
internal Task`1<string> DoReadAsStringAsync(CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public JsonNameTable get_PropertyNameTable();
    [CompilerGeneratedAttribute]
public void set_PropertyNameTable(JsonNameTable value);
    public IArrayPool`1<char> get_ArrayPool();
    public void set_ArrayPool(IArrayPool`1<char> value);
    public virtual bool Read();
    public virtual Nullable`1<int> ReadAsInt32();
    public virtual Nullable`1<DateTime> ReadAsDateTime();
    public virtual string ReadAsString();
    public virtual Byte[] ReadAsBytes();
    public virtual Nullable`1<bool> ReadAsBoolean();
    public virtual Nullable`1<DateTimeOffset> ReadAsDateTimeOffset();
    public virtual Nullable`1<decimal> ReadAsDecimal();
    public virtual Nullable`1<double> ReadAsDouble();
    public virtual void Close();
    public sealed virtual bool HasLineInfo();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
}
internal class Microsoft.Identity.Json.JsonTextWriter : JsonWriter {
    public IArrayPool`1<char> ArrayPool { get; public set; }
    public int Indentation { get; public set; }
    public char QuoteChar { get; public set; }
    public char IndentChar { get; public set; }
    public bool QuoteName { get; public set; }
    public JsonTextWriter(TextWriter textWriter);
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    internal Task DoFlushAsync(CancellationToken cancellationToken);
    protected virtual Task WriteValueDelimiterAsync(CancellationToken cancellationToken);
    internal Task DoWriteValueDelimiterAsync(CancellationToken cancellationToken);
    protected virtual Task WriteEndAsync(JsonToken token, CancellationToken cancellationToken);
    internal Task DoWriteEndAsync(JsonToken token, CancellationToken cancellationToken);
    public virtual Task CloseAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.JsonTextWriter/<DoCloseAsync>d__8")]
internal Task DoCloseAsync(CancellationToken cancellationToken);
    public virtual Task WriteEndAsync(CancellationToken cancellationToken);
    protected virtual Task WriteIndentAsync(CancellationToken cancellationToken);
    internal Task DoWriteIndentAsync(CancellationToken cancellationToken);
    protected virtual Task WriteIndentSpaceAsync(CancellationToken cancellationToken);
    internal Task DoWriteIndentSpaceAsync(CancellationToken cancellationToken);
    public virtual Task WriteRawAsync(string json, CancellationToken cancellationToken);
    internal Task DoWriteRawAsync(string json, CancellationToken cancellationToken);
    public virtual Task WriteNullAsync(CancellationToken cancellationToken);
    internal Task DoWriteNullAsync(CancellationToken cancellationToken);
    internal Task WriteIntegerValueAsync(long value, CancellationToken cancellationToken);
    internal Task WriteIntegerValueAsync(ulong uvalue, CancellationToken cancellationToken);
    public virtual Task WritePropertyNameAsync(string name, CancellationToken cancellationToken);
    internal Task DoWritePropertyNameAsync(string name, CancellationToken cancellationToken);
    public virtual Task WritePropertyNameAsync(string name, bool escape, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.JsonTextWriter/<DoWritePropertyNameAsync>d__31")]
internal Task DoWritePropertyNameAsync(string name, bool escape, CancellationToken cancellationToken);
    public virtual Task WriteStartArrayAsync(CancellationToken cancellationToken);
    internal Task DoWriteStartArrayAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.JsonTextWriter/<DoWriteStartArrayAsync>d__34")]
internal Task DoWriteStartArrayAsync(Task task, CancellationToken cancellationToken);
    public virtual Task WriteStartObjectAsync(CancellationToken cancellationToken);
    internal Task DoWriteStartObjectAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.JsonTextWriter/<DoWriteStartObjectAsync>d__37")]
internal Task DoWriteStartObjectAsync(Task task, CancellationToken cancellationToken);
    public virtual Task WriteStartConstructorAsync(string name, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.JsonTextWriter/<DoWriteStartConstructorAsync>d__39")]
internal Task DoWriteStartConstructorAsync(string name, CancellationToken cancellationToken);
    public virtual Task WriteUndefinedAsync(CancellationToken cancellationToken);
    internal Task DoWriteUndefinedAsync(CancellationToken cancellationToken);
    public virtual Task WriteWhitespaceAsync(string ws, CancellationToken cancellationToken);
    internal Task DoWriteWhitespaceAsync(string ws, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(bool value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(bool value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<bool> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<bool> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(byte value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<byte> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<byte> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Byte[] value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.JsonTextWriter/<WriteValueNonNullAsync>d__53")]
internal Task WriteValueNonNullAsync(Byte[] value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(char value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(char value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<char> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<char> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(DateTime value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.JsonTextWriter/<DoWriteValueAsync>d__59")]
internal Task DoWriteValueAsync(DateTime value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<DateTime> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<DateTime> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(DateTimeOffset value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.JsonTextWriter/<DoWriteValueAsync>d__63")]
internal Task DoWriteValueAsync(DateTimeOffset value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<DateTimeOffset> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<DateTimeOffset> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(decimal value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(decimal value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<decimal> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<decimal> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(double value, CancellationToken cancellationToken);
    internal Task WriteValueAsync(double value, bool nullable, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<double> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(float value, CancellationToken cancellationToken);
    internal Task WriteValueAsync(float value, bool nullable, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<float> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Guid value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.JsonTextWriter/<DoWriteValueAsync>d__77")]
internal Task DoWriteValueAsync(Guid value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<Guid> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<Guid> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(int value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<int> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<int> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(long value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<long> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<long> value, CancellationToken cancellationToken);
    internal Task WriteValueAsync(BigInteger value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(object value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(sbyte value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<sbyte> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<sbyte> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(short value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<short> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<short> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(string value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(string value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(TimeSpan value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.JsonTextWriter/<DoWriteValueAsync>d__98")]
internal Task DoWriteValueAsync(TimeSpan value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<TimeSpan> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<TimeSpan> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(UInt32 value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<UInt32> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<UInt32> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(ulong value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<ulong> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<ulong> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Uri value, CancellationToken cancellationToken);
    internal Task WriteValueNotNullAsync(Uri value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.JsonTextWriter/<WriteValueNotNullAsync>d__109")]
internal Task WriteValueNotNullAsync(Task task, Uri value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(ushort value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<ushort> value, CancellationToken cancellationToken);
    internal Task DoWriteValueAsync(Nullable`1<ushort> value, CancellationToken cancellationToken);
    public virtual Task WriteCommentAsync(string text, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.JsonTextWriter/<DoWriteCommentAsync>d__114")]
internal Task DoWriteCommentAsync(string text, CancellationToken cancellationToken);
    public virtual Task WriteEndArrayAsync(CancellationToken cancellationToken);
    public virtual Task WriteEndConstructorAsync(CancellationToken cancellationToken);
    public virtual Task WriteEndObjectAsync(CancellationToken cancellationToken);
    public virtual Task WriteRawValueAsync(string json, CancellationToken cancellationToken);
    internal Task DoWriteRawValueAsync(string json, CancellationToken cancellationToken);
    internal Char[] EnsureWriteBuffer(int length, int copyTo);
    public IArrayPool`1<char> get_ArrayPool();
    public void set_ArrayPool(IArrayPool`1<char> value);
    public int get_Indentation();
    public void set_Indentation(int value);
    public char get_QuoteChar();
    public void set_QuoteChar(char value);
    public char get_IndentChar();
    public void set_IndentChar(char value);
    public bool get_QuoteName();
    public void set_QuoteName(bool value);
    public virtual void Flush();
    public virtual void Close();
    public virtual void WriteStartObject();
    public virtual void WriteStartArray();
    public virtual void WriteStartConstructor(string name);
    protected virtual void WriteEnd(JsonToken token);
    public virtual void WritePropertyName(string name);
    public virtual void WritePropertyName(string name, bool escape);
    internal virtual void OnStringEscapeHandlingChanged();
    protected virtual void WriteIndent();
    protected virtual void WriteValueDelimiter();
    protected virtual void WriteIndentSpace();
    public virtual void WriteValue(object value);
    public virtual void WriteNull();
    public virtual void WriteUndefined();
    public virtual void WriteRaw(string json);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(long value);
    public virtual void WriteValue(ulong value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(Nullable`1<float> value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(Nullable`1<double> value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(short value);
    public virtual void WriteValue(ushort value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(byte value);
    public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(Byte[] value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(TimeSpan value);
    public virtual void WriteValue(Uri value);
    public virtual void WriteComment(string text);
    public virtual void WriteWhitespace(string ws);
}
internal enum Microsoft.Identity.Json.JsonToken : Enum {
    public int value__;
    public static JsonToken None;
    public static JsonToken StartObject;
    public static JsonToken StartArray;
    public static JsonToken StartConstructor;
    public static JsonToken PropertyName;
    public static JsonToken Comment;
    public static JsonToken Raw;
    public static JsonToken Integer;
    public static JsonToken Float;
    public static JsonToken String;
    public static JsonToken Boolean;
    public static JsonToken Null;
    public static JsonToken Undefined;
    public static JsonToken EndObject;
    public static JsonToken EndArray;
    public static JsonToken EndConstructor;
    public static JsonToken Date;
    public static JsonToken Bytes;
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Microsoft.Identity.Json.JsonValidatingReader : JsonReader {
    public object Value { get; }
    public int Depth { get; }
    public string Path { get; }
    public char QuoteChar { get; protected internal set; }
    public JsonToken TokenType { get; }
    public Type ValueType { get; }
    public JsonSchema Schema { get; public set; }
    public JsonReader Reader { get; }
    private int Microsoft.Identity.Json.IJsonLineInfo.LineNumber { get; }
    private int Microsoft.Identity.Json.IJsonLineInfo.LinePosition { get; }
    public JsonValidatingReader(JsonReader reader);
    [CompilerGeneratedAttribute]
public void add_ValidationEventHandler(ValidationEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_ValidationEventHandler(ValidationEventHandler value);
    public virtual object get_Value();
    public virtual int get_Depth();
    public virtual string get_Path();
    public virtual char get_QuoteChar();
    protected internal virtual void set_QuoteChar(char value);
    public virtual JsonToken get_TokenType();
    public virtual Type get_ValueType();
    public JsonSchema get_Schema();
    public void set_Schema(JsonSchema value);
    public JsonReader get_Reader();
    public virtual void Close();
    public virtual Nullable`1<int> ReadAsInt32();
    public virtual Byte[] ReadAsBytes();
    public virtual Nullable`1<decimal> ReadAsDecimal();
    public virtual Nullable`1<double> ReadAsDouble();
    public virtual Nullable`1<bool> ReadAsBoolean();
    public virtual string ReadAsString();
    public virtual Nullable`1<DateTime> ReadAsDateTime();
    public virtual Nullable`1<DateTimeOffset> ReadAsDateTimeOffset();
    public virtual bool Read();
    private sealed virtual override bool Microsoft.Identity.Json.IJsonLineInfo.HasLineInfo();
    private sealed virtual override int Microsoft.Identity.Json.IJsonLineInfo.get_LineNumber();
    private sealed virtual override int Microsoft.Identity.Json.IJsonLineInfo.get_LinePosition();
}
internal abstract class Microsoft.Identity.Json.JsonWriter : object {
    internal static State[][] StateArrayTempate;
    public bool CloseOutput { get; public set; }
    public bool AutoCompleteOnClose { get; public set; }
    protected internal int Top { get; }
    public WriteState WriteState { get; }
    internal string ContainerPath { get; }
    public string Path { get; }
    public Formatting Formatting { get; public set; }
    public DateFormatHandling DateFormatHandling { get; public set; }
    public DateTimeZoneHandling DateTimeZoneHandling { get; public set; }
    public StringEscapeHandling StringEscapeHandling { get; public set; }
    public FloatFormatHandling FloatFormatHandling { get; public set; }
    public string DateFormatString { get; public set; }
    public CultureInfo Culture { get; public set; }
    internal Task AutoCompleteAsync(JsonToken tokenBeingWritten, CancellationToken cancellationToken);
    public virtual Task CloseAsync(CancellationToken cancellationToken);
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    protected virtual Task WriteEndAsync(JsonToken token, CancellationToken cancellationToken);
    protected virtual Task WriteIndentAsync(CancellationToken cancellationToken);
    protected virtual Task WriteValueDelimiterAsync(CancellationToken cancellationToken);
    protected virtual Task WriteIndentSpaceAsync(CancellationToken cancellationToken);
    public virtual Task WriteRawAsync(string json, CancellationToken cancellationToken);
    public virtual Task WriteEndAsync(CancellationToken cancellationToken);
    internal Task WriteEndInternalAsync(CancellationToken cancellationToken);
    internal Task InternalWriteEndAsync(JsonContainerType type, CancellationToken cancellationToken);
    public virtual Task WriteEndArrayAsync(CancellationToken cancellationToken);
    public virtual Task WriteEndConstructorAsync(CancellationToken cancellationToken);
    public virtual Task WriteEndObjectAsync(CancellationToken cancellationToken);
    public virtual Task WriteNullAsync(CancellationToken cancellationToken);
    public virtual Task WritePropertyNameAsync(string name, CancellationToken cancellationToken);
    public virtual Task WritePropertyNameAsync(string name, bool escape, CancellationToken cancellationToken);
    internal Task InternalWritePropertyNameAsync(string name, CancellationToken cancellationToken);
    public virtual Task WriteStartArrayAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.JsonWriter/<InternalWriteStartAsync>d__20")]
internal Task InternalWriteStartAsync(JsonToken token, JsonContainerType container, CancellationToken cancellationToken);
    public virtual Task WriteCommentAsync(string text, CancellationToken cancellationToken);
    internal Task InternalWriteCommentAsync(CancellationToken cancellationToken);
    public virtual Task WriteRawValueAsync(string json, CancellationToken cancellationToken);
    public virtual Task WriteStartConstructorAsync(string name, CancellationToken cancellationToken);
    public virtual Task WriteStartObjectAsync(CancellationToken cancellationToken);
    public Task WriteTokenAsync(JsonReader reader, CancellationToken cancellationToken);
    public Task WriteTokenAsync(JsonReader reader, bool writeChildren, CancellationToken cancellationToken);
    public Task WriteTokenAsync(JsonToken token, CancellationToken cancellationToken);
    public Task WriteTokenAsync(JsonToken token, object value, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.JsonWriter/<WriteTokenAsync>d__30")]
internal virtual Task WriteTokenAsync(JsonReader reader, bool writeChildren, bool writeDateConstructorAsDate, bool writeComments, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.JsonWriter/<WriteTokenSyncReadingAsync>d__31")]
internal Task WriteTokenSyncReadingAsync(JsonReader reader, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(bool value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<bool> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(byte value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<byte> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Byte[] value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(char value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<char> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(DateTime value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<DateTime> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(DateTimeOffset value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<DateTimeOffset> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(decimal value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<decimal> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(double value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<double> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(float value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<float> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Guid value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<Guid> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(int value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<int> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(long value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<long> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(object value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(sbyte value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<sbyte> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(short value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<short> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(string value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(TimeSpan value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<TimeSpan> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(UInt32 value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<UInt32> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(ulong value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<ulong> value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Uri value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(ushort value, CancellationToken cancellationToken);
    public virtual Task WriteValueAsync(Nullable`1<ushort> value, CancellationToken cancellationToken);
    public virtual Task WriteUndefinedAsync(CancellationToken cancellationToken);
    public virtual Task WriteWhitespaceAsync(string ws, CancellationToken cancellationToken);
    internal Task InternalWriteValueAsync(JsonToken token, CancellationToken cancellationToken);
    protected Task SetWriteStateAsync(JsonToken token, object value, CancellationToken cancellationToken);
    internal static Task WriteValueAsync(JsonWriter writer, PrimitiveTypeCode typeCode, object value, CancellationToken cancellationToken);
    internal static State[][] BuildStateArray();
    [CompilerGeneratedAttribute]
public bool get_CloseOutput();
    [CompilerGeneratedAttribute]
public void set_CloseOutput(bool value);
    [CompilerGeneratedAttribute]
public bool get_AutoCompleteOnClose();
    [CompilerGeneratedAttribute]
public void set_AutoCompleteOnClose(bool value);
    protected internal int get_Top();
    public WriteState get_WriteState();
    internal string get_ContainerPath();
    public string get_Path();
    public Formatting get_Formatting();
    public void set_Formatting(Formatting value);
    public DateFormatHandling get_DateFormatHandling();
    public void set_DateFormatHandling(DateFormatHandling value);
    public DateTimeZoneHandling get_DateTimeZoneHandling();
    public void set_DateTimeZoneHandling(DateTimeZoneHandling value);
    public StringEscapeHandling get_StringEscapeHandling();
    public void set_StringEscapeHandling(StringEscapeHandling value);
    internal virtual void OnStringEscapeHandlingChanged();
    public FloatFormatHandling get_FloatFormatHandling();
    public void set_FloatFormatHandling(FloatFormatHandling value);
    public string get_DateFormatString();
    public void set_DateFormatString(string value);
    public CultureInfo get_Culture();
    public void set_Culture(CultureInfo value);
    internal void UpdateScopeWithFinishedValue();
    public abstract virtual void Flush();
    public virtual void Close();
    public virtual void WriteStartObject();
    public virtual void WriteEndObject();
    public virtual void WriteStartArray();
    public virtual void WriteEndArray();
    public virtual void WriteStartConstructor(string name);
    public virtual void WriteEndConstructor();
    public virtual void WritePropertyName(string name);
    public virtual void WritePropertyName(string name, bool escape);
    public virtual void WriteEnd();
    public void WriteToken(JsonReader reader);
    public void WriteToken(JsonReader reader, bool writeChildren);
    public void WriteToken(JsonToken token, object value);
    public void WriteToken(JsonToken token);
    internal virtual void WriteToken(JsonReader reader, bool writeChildren, bool writeDateConstructorAsDate, bool writeComments);
    protected virtual void WriteEnd(JsonToken token);
    protected virtual void WriteIndent();
    protected virtual void WriteValueDelimiter();
    protected virtual void WriteIndentSpace();
    internal void AutoComplete(JsonToken tokenBeingWritten);
    public virtual void WriteNull();
    public virtual void WriteUndefined();
    public virtual void WriteRaw(string json);
    public virtual void WriteRawValue(string json);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(long value);
    public virtual void WriteValue(ulong value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(short value);
    public virtual void WriteValue(ushort value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(byte value);
    public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(TimeSpan value);
    public virtual void WriteValue(Nullable`1<int> value);
    public virtual void WriteValue(Nullable`1<UInt32> value);
    public virtual void WriteValue(Nullable`1<long> value);
    public virtual void WriteValue(Nullable`1<ulong> value);
    public virtual void WriteValue(Nullable`1<float> value);
    public virtual void WriteValue(Nullable`1<double> value);
    public virtual void WriteValue(Nullable`1<bool> value);
    public virtual void WriteValue(Nullable`1<short> value);
    public virtual void WriteValue(Nullable`1<ushort> value);
    public virtual void WriteValue(Nullable`1<char> value);
    public virtual void WriteValue(Nullable`1<byte> value);
    public virtual void WriteValue(Nullable`1<sbyte> value);
    public virtual void WriteValue(Nullable`1<decimal> value);
    public virtual void WriteValue(Nullable`1<DateTime> value);
    public virtual void WriteValue(Nullable`1<DateTimeOffset> value);
    public virtual void WriteValue(Nullable`1<Guid> value);
    public virtual void WriteValue(Nullable`1<TimeSpan> value);
    public virtual void WriteValue(Byte[] value);
    public virtual void WriteValue(Uri value);
    public virtual void WriteValue(object value);
    public virtual void WriteComment(string text);
    public virtual void WriteWhitespace(string ws);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
    internal static void WriteValue(JsonWriter writer, PrimitiveTypeCode typeCode, object value);
    protected void SetWriteState(JsonToken token, object value);
    internal void InternalWriteEnd(JsonContainerType container);
    internal void InternalWritePropertyName(string name);
    internal void InternalWriteRaw();
    internal void InternalWriteStart(JsonToken token, JsonContainerType container);
    internal void InternalWriteValue(JsonToken token);
    internal void InternalWriteWhitespace(string ws);
    internal void InternalWriteComment();
}
internal class Microsoft.Identity.Json.JsonWriterException : JsonException {
    public string Path { get; }
    public JsonWriterException(string message);
    public JsonWriterException(string message, Exception innerException);
    public JsonWriterException(SerializationInfo info, StreamingContext context);
    public JsonWriterException(string message, string path, Exception innerException);
    [CompilerGeneratedAttribute]
public string get_Path();
    internal static JsonWriterException Create(JsonWriter writer, string message, Exception ex);
    internal static JsonWriterException Create(string path, string message, Exception ex);
}
internal enum Microsoft.Identity.Json.Linq.CommentHandling : Enum {
    public int value__;
    public static CommentHandling Ignore;
    public static CommentHandling Load;
}
[ExtensionAttribute]
internal static class Microsoft.Identity.Json.Linq.Extensions : object {
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Ancestors(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> AncestorsAndSelf(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Descendants(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> DescendantsAndSelf(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JProperty> Properties(IEnumerable`1<JObject> source);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Values(IEnumerable`1<JToken> source, object key);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Values(IEnumerable`1<JToken> source);
    [ExtensionAttribute]
public static IEnumerable`1<U> Values(IEnumerable`1<JToken> source, object key);
    [ExtensionAttribute]
public static IEnumerable`1<U> Values(IEnumerable`1<JToken> source);
    [ExtensionAttribute]
public static U Value(IEnumerable`1<JToken> value);
    [ExtensionAttribute]
public static U Value(IEnumerable`1<T> value);
    [IteratorStateMachineAttribute("Microsoft.Identity.Json.Linq.Extensions/<Values>d__11`2")]
[ExtensionAttribute]
internal static IEnumerable`1<U> Values(IEnumerable`1<T> source, object key);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> Children(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static IEnumerable`1<U> Children(IEnumerable`1<T> source);
    [IteratorStateMachineAttribute("Microsoft.Identity.Json.Linq.Extensions/<Convert>d__14`2")]
[ExtensionAttribute]
internal static IEnumerable`1<U> Convert(IEnumerable`1<T> source);
    [ExtensionAttribute]
internal static U Convert(T token);
    [ExtensionAttribute]
public static IJEnumerable`1<JToken> AsJEnumerable(IEnumerable`1<JToken> source);
    [ExtensionAttribute]
public static IJEnumerable`1<T> AsJEnumerable(IEnumerable`1<T> source);
}
[DefaultMemberAttribute("Item")]
internal interface Microsoft.Identity.Json.Linq.IJEnumerable`1 {
    public IJEnumerable`1<JToken> Item { get; }
    public abstract virtual IJEnumerable`1<JToken> get_Item(object key);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Identity.Json.Linq.JArray : JContainer {
    protected IList`1<JToken> ChildrenTokens { get; }
    public JTokenType Type { get; }
    public JToken Item { get; public set; }
    public JToken Item { get; public set; }
    public bool IsReadOnly { get; }
    public JArray(JArray other);
    public JArray(Object[] content);
    public JArray(object content);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.Linq.JArray/<WriteToAsync>d__0")]
public virtual Task WriteToAsync(JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    public static Task`1<JArray> LoadAsync(JsonReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.Linq.JArray/<LoadAsync>d__2")]
public static Task`1<JArray> LoadAsync(JsonReader reader, JsonLoadSettings settings, CancellationToken cancellationToken);
    protected virtual IList`1<JToken> get_ChildrenTokens();
    public virtual JTokenType get_Type();
    internal virtual bool DeepEquals(JToken node);
    internal virtual JToken CloneToken();
    public static JArray Load(JsonReader reader);
    public static JArray Load(JsonReader reader, JsonLoadSettings settings);
    public static JArray Parse(string json);
    public static JArray Parse(string json, JsonLoadSettings settings);
    public static JArray FromObject(object o);
    public static JArray FromObject(object o, JsonSerializer jsonSerializer);
    public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    public virtual JToken get_Item(object key);
    public virtual void set_Item(object key, JToken value);
    public sealed virtual JToken get_Item(int index);
    public sealed virtual void set_Item(int index, JToken value);
    internal virtual int IndexOfItem(JToken item);
    internal virtual void MergeItem(object content, JsonMergeSettings settings);
    public sealed virtual int IndexOf(JToken item);
    public sealed virtual void Insert(int index, JToken item);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual IEnumerator`1<JToken> GetEnumerator();
    public sealed virtual void Add(JToken item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(JToken item);
    public sealed virtual void CopyTo(JToken[] array, int arrayIndex);
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(JToken item);
    internal virtual int GetDeepHashCode();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Identity.Json.Linq.JConstructor : JContainer {
    protected IList`1<JToken> ChildrenTokens { get; }
    public string Name { get; public set; }
    public JTokenType Type { get; }
    public JToken Item { get; public set; }
    public JConstructor(JConstructor other);
    public JConstructor(string name, Object[] content);
    public JConstructor(string name, object content);
    public JConstructor(string name);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.Linq.JConstructor/<WriteToAsync>d__0")]
public virtual Task WriteToAsync(JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    public static Task`1<JConstructor> LoadAsync(JsonReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.Linq.JConstructor/<LoadAsync>d__2")]
public static Task`1<JConstructor> LoadAsync(JsonReader reader, JsonLoadSettings settings, CancellationToken cancellationToken);
    protected virtual IList`1<JToken> get_ChildrenTokens();
    internal virtual int IndexOfItem(JToken item);
    internal virtual void MergeItem(object content, JsonMergeSettings settings);
    public string get_Name();
    public void set_Name(string value);
    public virtual JTokenType get_Type();
    internal virtual bool DeepEquals(JToken node);
    internal virtual JToken CloneToken();
    public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    public virtual JToken get_Item(object key);
    public virtual void set_Item(object key, JToken value);
    internal virtual int GetDeepHashCode();
    public static JConstructor Load(JsonReader reader);
    public static JConstructor Load(JsonReader reader, JsonLoadSettings settings);
}
internal abstract class Microsoft.Identity.Json.Linq.JContainer : JToken {
    internal ListChangedEventHandler _listChanged;
    internal AddingNewEventHandler _addingNew;
    internal NotifyCollectionChangedEventHandler _collectionChanged;
    protected IList`1<JToken> ChildrenTokens { get; }
    public bool HasValues { get; }
    public JToken First { get; }
    public JToken Last { get; }
    private JToken System.Collections.Generic.IList<Microsoft.Identity.Json.Linq.JToken>.Item { get; private set; }
    private bool System.Collections.Generic.ICollection<Microsoft.Identity.Json.Linq.JToken>.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    internal JContainer(JContainer other);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.Linq.JContainer/<ReadTokenFromAsync>d__0")]
internal Task ReadTokenFromAsync(JsonReader reader, JsonLoadSettings options, CancellationToken cancellationToken);
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    public void add_AddingNew(AddingNewEventHandler value);
    public void remove_AddingNew(AddingNewEventHandler value);
    public sealed virtual void add_CollectionChanged(NotifyCollectionChangedEventHandler value);
    public sealed virtual void remove_CollectionChanged(NotifyCollectionChangedEventHandler value);
    protected abstract virtual IList`1<JToken> get_ChildrenTokens();
    internal void CheckReentrancy();
    internal virtual IList`1<JToken> CreateChildrenCollection();
    protected virtual void OnAddingNew(AddingNewEventArgs e);
    protected virtual void OnListChanged(ListChangedEventArgs e);
    protected virtual void OnCollectionChanged(NotifyCollectionChangedEventArgs e);
    public virtual bool get_HasValues();
    internal bool ContentsEqual(JContainer container);
    public virtual JToken get_First();
    public virtual JToken get_Last();
    public virtual JEnumerable`1<JToken> Children();
    public virtual IEnumerable`1<T> Values();
    public IEnumerable`1<JToken> Descendants();
    public IEnumerable`1<JToken> DescendantsAndSelf();
    [IteratorStateMachineAttribute("Microsoft.Identity.Json.Linq.JContainer/<GetDescendants>d__36")]
internal IEnumerable`1<JToken> GetDescendants(bool self);
    internal bool IsMultiContent(object content);
    internal JToken EnsureParentToken(JToken item, bool skipParentCheck);
    internal abstract virtual int IndexOfItem(JToken item);
    internal virtual void InsertItem(int index, JToken item, bool skipParentCheck);
    internal virtual void RemoveItemAt(int index);
    internal virtual bool RemoveItem(JToken item);
    internal virtual JToken GetItem(int index);
    internal virtual void SetItem(int index, JToken item);
    internal virtual void ClearItems();
    internal virtual void ReplaceItem(JToken existing, JToken replacement);
    internal virtual bool ContainsItem(JToken item);
    internal virtual void CopyItemsTo(Array array, int arrayIndex);
    internal static bool IsTokenUnchanged(JToken currentValue, JToken newValue);
    internal virtual void ValidateToken(JToken o, JToken existing);
    public virtual void Add(object content);
    internal void AddAndSkipParentCheck(JToken token);
    public void AddFirst(object content);
    internal void AddInternal(int index, object content, bool skipParentCheck);
    internal static JToken CreateFromContent(object content);
    public JsonWriter CreateWriter();
    public void ReplaceAll(object content);
    public void RemoveAll();
    internal abstract virtual void MergeItem(object content, JsonMergeSettings settings);
    public void Merge(object content);
    public void Merge(object content, JsonMergeSettings settings);
    internal void ReadTokenFrom(JsonReader reader, JsonLoadSettings options);
    internal void ReadContentFrom(JsonReader r, JsonLoadSettings settings);
    internal int ContentsHashCode();
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    private sealed virtual override int System.Collections.Generic.IList<Microsoft.Identity.Json.Linq.JToken>.IndexOf(JToken item);
    private sealed virtual override void System.Collections.Generic.IList<Microsoft.Identity.Json.Linq.JToken>.Insert(int index, JToken item);
    private sealed virtual override void System.Collections.Generic.IList<Microsoft.Identity.Json.Linq.JToken>.RemoveAt(int index);
    private sealed virtual override JToken System.Collections.Generic.IList<Microsoft.Identity.Json.Linq.JToken>.get_Item(int index);
    private sealed virtual override void System.Collections.Generic.IList<Microsoft.Identity.Json.Linq.JToken>.set_Item(int index, JToken value);
    private sealed virtual override void System.Collections.Generic.ICollection<Microsoft.Identity.Json.Linq.JToken>.Add(JToken item);
    private sealed virtual override void System.Collections.Generic.ICollection<Microsoft.Identity.Json.Linq.JToken>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<Microsoft.Identity.Json.Linq.JToken>.Contains(JToken item);
    private sealed virtual override void System.Collections.Generic.ICollection<Microsoft.Identity.Json.Linq.JToken>.CopyTo(JToken[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<Microsoft.Identity.Json.Linq.JToken>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<Microsoft.Identity.Json.Linq.JToken>.Remove(JToken item);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    internal static void MergeEnumerableContent(JContainer target, IEnumerable content, JsonMergeSettings settings);
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class Microsoft.Identity.Json.Linq.JEnumerable`1 : ValueType {
    public static JEnumerable`1<T> Empty;
    private IEnumerable`1<T> _enumerable;
    public IJEnumerable`1<JToken> Item { get; }
    public JEnumerable`1(IEnumerable`1<T> enumerable);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IJEnumerable`1<JToken> get_Item(object key);
    public sealed virtual bool Equals(JEnumerable`1<T> other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Identity.Json.Linq.JObject : JContainer {
    protected IList`1<JToken> ChildrenTokens { get; }
    public JTokenType Type { get; }
    public JToken Item { get; public set; }
    public JToken Item { get; public set; }
    private ICollection`1<string> System.Collections.Generic.IDictionary<System.String,Microsoft.Identity.Json.Linq.JToken>.Keys { get; }
    private ICollection`1<JToken> System.Collections.Generic.IDictionary<System.String,Microsoft.Identity.Json.Linq.JToken>.Values { get; }
    private bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Identity.Json.Linq.JToken>>.IsReadOnly { get; }
    public JObject(JObject other);
    public JObject(Object[] content);
    public JObject(object content);
    public virtual Task WriteToAsync(JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    public static Task`1<JObject> LoadAsync(JsonReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.Linq.JObject/<LoadAsync>d__2")]
public static Task`1<JObject> LoadAsync(JsonReader reader, JsonLoadSettings settings, CancellationToken cancellationToken);
    protected virtual IList`1<JToken> get_ChildrenTokens();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanging(PropertyChangingEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanging(PropertyChangingEventHandler value);
    internal virtual bool DeepEquals(JToken node);
    internal virtual int IndexOfItem(JToken item);
    internal virtual void InsertItem(int index, JToken item, bool skipParentCheck);
    internal virtual void ValidateToken(JToken o, JToken existing);
    internal virtual void MergeItem(object content, JsonMergeSettings settings);
    internal void InternalPropertyChanged(JProperty childProperty);
    internal void InternalPropertyChanging(JProperty childProperty);
    internal virtual JToken CloneToken();
    public virtual JTokenType get_Type();
    public IEnumerable`1<JProperty> Properties();
    public JProperty Property(string name);
    public JProperty Property(string name, StringComparison comparison);
    public JEnumerable`1<JToken> PropertyValues();
    public virtual JToken get_Item(object key);
    public virtual void set_Item(object key, JToken value);
    public sealed virtual JToken get_Item(string propertyName);
    public sealed virtual void set_Item(string propertyName, JToken value);
    public static JObject Load(JsonReader reader);
    public static JObject Load(JsonReader reader, JsonLoadSettings settings);
    public static JObject Parse(string json);
    public static JObject Parse(string json, JsonLoadSettings settings);
    public static JObject FromObject(object o);
    public static JObject FromObject(object o, JsonSerializer jsonSerializer);
    public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    public JToken GetValue(string propertyName);
    public JToken GetValue(string propertyName, StringComparison comparison);
    public bool TryGetValue(string propertyName, StringComparison comparison, JToken& value);
    public sealed virtual void Add(string propertyName, JToken value);
    public sealed virtual bool ContainsKey(string propertyName);
    private sealed virtual override ICollection`1<string> System.Collections.Generic.IDictionary<System.String,Microsoft.Identity.Json.Linq.JToken>.get_Keys();
    public sealed virtual bool Remove(string propertyName);
    public sealed virtual bool TryGetValue(string propertyName, JToken& value);
    private sealed virtual override ICollection`1<JToken> System.Collections.Generic.IDictionary<System.String,Microsoft.Identity.Json.Linq.JToken>.get_Values();
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Identity.Json.Linq.JToken>>.Add(KeyValuePair`2<string, JToken> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Identity.Json.Linq.JToken>>.Clear();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Identity.Json.Linq.JToken>>.Contains(KeyValuePair`2<string, JToken> item);
    private sealed virtual override void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Identity.Json.Linq.JToken>>.CopyTo(KeyValuePair`2[] array, int arrayIndex);
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Identity.Json.Linq.JToken>>.get_IsReadOnly();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<System.String,Microsoft.Identity.Json.Linq.JToken>>.Remove(KeyValuePair`2<string, JToken> item);
    internal virtual int GetDeepHashCode();
    [IteratorStateMachineAttribute("Microsoft.Identity.Json.Linq.JObject/<GetEnumerator>d__63")]
public sealed virtual IEnumerator`1<KeyValuePair`2<string, JToken>> GetEnumerator();
    protected virtual void OnPropertyChanged(string propertyName);
    protected virtual void OnPropertyChanging(string propertyName);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
    protected virtual DynamicMetaObject GetMetaObject(Expression parameter);
}
internal class Microsoft.Identity.Json.Linq.JProperty : JContainer {
    protected IList`1<JToken> ChildrenTokens { get; }
    public string Name { get; }
    public JToken Value { get; public set; }
    public JTokenType Type { get; }
    public JProperty(JProperty other);
    internal JProperty(string name);
    public JProperty(string name, Object[] content);
    public JProperty(string name, object content);
    public virtual Task WriteToAsync(JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    public static Task`1<JProperty> LoadAsync(JsonReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.Linq.JProperty/<LoadAsync>d__4")]
public static Task`1<JProperty> LoadAsync(JsonReader reader, JsonLoadSettings settings, CancellationToken cancellationToken);
    protected virtual IList`1<JToken> get_ChildrenTokens();
    [DebuggerStepThroughAttribute]
public string get_Name();
    [DebuggerStepThroughAttribute]
public JToken get_Value();
    public void set_Value(JToken value);
    internal virtual JToken GetItem(int index);
    internal virtual void SetItem(int index, JToken item);
    internal virtual bool RemoveItem(JToken item);
    internal virtual void RemoveItemAt(int index);
    internal virtual int IndexOfItem(JToken item);
    internal virtual void InsertItem(int index, JToken item, bool skipParentCheck);
    internal virtual bool ContainsItem(JToken item);
    internal virtual void MergeItem(object content, JsonMergeSettings settings);
    internal virtual void ClearItems();
    internal virtual bool DeepEquals(JToken node);
    internal virtual JToken CloneToken();
    [DebuggerStepThroughAttribute]
public virtual JTokenType get_Type();
    public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    internal virtual int GetDeepHashCode();
    public static JProperty Load(JsonReader reader);
    public static JProperty Load(JsonReader reader, JsonLoadSettings settings);
}
internal class Microsoft.Identity.Json.Linq.JPropertyDescriptor : PropertyDescriptor {
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    protected int NameHashCode { get; }
    public JPropertyDescriptor(string name);
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    protected virtual int get_NameHashCode();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Identity.Json.Linq.JPropertyKeyedCollection : Collection`1<JToken> {
    public JToken Item { get; }
    public ICollection`1<string> Keys { get; }
    public ICollection`1<JToken> Values { get; }
    protected void ChangeItemKey(JToken item, string newKey);
    protected virtual void ClearItems();
    public bool Contains(string key);
    protected virtual void InsertItem(int index, JToken item);
    public bool Remove(string key);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, JToken item);
    public JToken get_Item(string key);
    public bool TryGetValue(string key, JToken& value);
    public ICollection`1<string> get_Keys();
    public ICollection`1<JToken> get_Values();
    public int IndexOfReference(JToken t);
    public bool Compare(JPropertyKeyedCollection other);
}
internal class Microsoft.Identity.Json.Linq.JRaw : JValue {
    public JRaw(JRaw other);
    public JRaw(object rawJson);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.Linq.JRaw/<CreateAsync>d__0")]
public static Task`1<JRaw> CreateAsync(JsonReader reader, CancellationToken cancellationToken);
    public static JRaw Create(JsonReader reader);
    internal virtual JToken CloneToken();
}
internal class Microsoft.Identity.Json.Linq.JsonLoadSettings : object {
    public CommentHandling CommentHandling { get; public set; }
    public LineInfoHandling LineInfoHandling { get; public set; }
    public CommentHandling get_CommentHandling();
    public void set_CommentHandling(CommentHandling value);
    public LineInfoHandling get_LineInfoHandling();
    public void set_LineInfoHandling(LineInfoHandling value);
}
internal class Microsoft.Identity.Json.Linq.JsonMergeSettings : object {
    public MergeArrayHandling MergeArrayHandling { get; public set; }
    public MergeNullValueHandling MergeNullValueHandling { get; public set; }
    public StringComparison PropertyNameComparison { get; public set; }
    public MergeArrayHandling get_MergeArrayHandling();
    public void set_MergeArrayHandling(MergeArrayHandling value);
    public MergeNullValueHandling get_MergeNullValueHandling();
    public void set_MergeNullValueHandling(MergeNullValueHandling value);
    public StringComparison get_PropertyNameComparison();
    public void set_PropertyNameComparison(StringComparison value);
}
internal class Microsoft.Identity.Json.Linq.JsonPath.ArrayIndexFilter : PathFilter {
    public Nullable`1<int> Index { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(Nullable`1<int> value);
    [IteratorStateMachineAttribute("Microsoft.Identity.Json.Linq.JsonPath.ArrayIndexFilter/<ExecuteFilter>d__4")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, bool errorWhenNoMatch);
}
internal class Microsoft.Identity.Json.Linq.JsonPath.ArrayMultipleIndexFilter : PathFilter {
    public List`1<int> Indexes { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<int> get_Indexes();
    [CompilerGeneratedAttribute]
public void set_Indexes(List`1<int> value);
    [IteratorStateMachineAttribute("Microsoft.Identity.Json.Linq.JsonPath.ArrayMultipleIndexFilter/<ExecuteFilter>d__4")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, bool errorWhenNoMatch);
}
internal class Microsoft.Identity.Json.Linq.JsonPath.ArraySliceFilter : PathFilter {
    public Nullable`1<int> Start { get; public set; }
    public Nullable`1<int> End { get; public set; }
    public Nullable`1<int> Step { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Start();
    [CompilerGeneratedAttribute]
public void set_Start(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_End();
    [CompilerGeneratedAttribute]
public void set_End(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Step();
    [CompilerGeneratedAttribute]
public void set_Step(Nullable`1<int> value);
    [IteratorStateMachineAttribute("Microsoft.Identity.Json.Linq.JsonPath.ArraySliceFilter/<ExecuteFilter>d__12")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, bool errorWhenNoMatch);
}
internal class Microsoft.Identity.Json.Linq.JsonPath.BooleanQueryExpression : QueryExpression {
    public object Left { get; public set; }
    public object Right { get; public set; }
    [CompilerGeneratedAttribute]
public object get_Left();
    [CompilerGeneratedAttribute]
public void set_Left(object value);
    [CompilerGeneratedAttribute]
public object get_Right();
    [CompilerGeneratedAttribute]
public void set_Right(object value);
    public virtual bool IsMatch(JToken root, JToken t);
    internal static bool EqualsWithStringCoercion(JValue value, JValue queryValue);
    internal static bool EqualsWithStrictMatch(JValue value, JValue queryValue);
}
internal class Microsoft.Identity.Json.Linq.JsonPath.CompositeExpression : QueryExpression {
    public List`1<QueryExpression> Expressions { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<QueryExpression> get_Expressions();
    [CompilerGeneratedAttribute]
public void set_Expressions(List`1<QueryExpression> value);
    public virtual bool IsMatch(JToken root, JToken t);
}
internal class Microsoft.Identity.Json.Linq.JsonPath.FieldFilter : PathFilter {
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [IteratorStateMachineAttribute("Microsoft.Identity.Json.Linq.JsonPath.FieldFilter/<ExecuteFilter>d__4")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, bool errorWhenNoMatch);
}
internal class Microsoft.Identity.Json.Linq.JsonPath.FieldMultipleFilter : PathFilter {
    public List`1<string> Names { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Names();
    [CompilerGeneratedAttribute]
public void set_Names(List`1<string> value);
    [IteratorStateMachineAttribute("Microsoft.Identity.Json.Linq.JsonPath.FieldMultipleFilter/<ExecuteFilter>d__4")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, bool errorWhenNoMatch);
}
internal class Microsoft.Identity.Json.Linq.JsonPath.JPath : object {
    public List`1<PathFilter> Filters { get; }
    public JPath(string expression);
    [CompilerGeneratedAttribute]
public List`1<PathFilter> get_Filters();
    internal IEnumerable`1<JToken> Evaluate(JToken root, JToken t, bool errorWhenNoMatch);
    internal static IEnumerable`1<JToken> Evaluate(List`1<PathFilter> filters, JToken root, JToken t, bool errorWhenNoMatch);
}
internal abstract class Microsoft.Identity.Json.Linq.JsonPath.PathFilter : object {
    public abstract virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, bool errorWhenNoMatch);
    protected static JToken GetTokenIndex(JToken t, bool errorWhenNoMatch, int index);
    protected static JToken GetNextScanValue(JToken originalParent, JToken container, JToken value);
}
internal abstract class Microsoft.Identity.Json.Linq.JsonPath.QueryExpression : object {
    public QueryOperator Operator { get; public set; }
    [CompilerGeneratedAttribute]
public QueryOperator get_Operator();
    [CompilerGeneratedAttribute]
public void set_Operator(QueryOperator value);
    public abstract virtual bool IsMatch(JToken root, JToken t);
}
internal class Microsoft.Identity.Json.Linq.JsonPath.QueryFilter : PathFilter {
    public QueryExpression Expression { get; public set; }
    [CompilerGeneratedAttribute]
public QueryExpression get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(QueryExpression value);
    [IteratorStateMachineAttribute("Microsoft.Identity.Json.Linq.JsonPath.QueryFilter/<ExecuteFilter>d__4")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, bool errorWhenNoMatch);
}
internal enum Microsoft.Identity.Json.Linq.JsonPath.QueryOperator : Enum {
    public int value__;
    public static QueryOperator None;
    public static QueryOperator Equals;
    public static QueryOperator NotEquals;
    public static QueryOperator Exists;
    public static QueryOperator LessThan;
    public static QueryOperator LessThanOrEquals;
    public static QueryOperator GreaterThan;
    public static QueryOperator GreaterThanOrEquals;
    public static QueryOperator And;
    public static QueryOperator Or;
    public static QueryOperator RegexEquals;
    public static QueryOperator StrictEquals;
    public static QueryOperator StrictNotEquals;
}
internal class Microsoft.Identity.Json.Linq.JsonPath.QueryScanFilter : PathFilter {
    public QueryExpression Expression { get; public set; }
    [CompilerGeneratedAttribute]
public QueryExpression get_Expression();
    [CompilerGeneratedAttribute]
public void set_Expression(QueryExpression value);
    [IteratorStateMachineAttribute("Microsoft.Identity.Json.Linq.JsonPath.QueryScanFilter/<ExecuteFilter>d__4")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, bool errorWhenNoMatch);
}
internal class Microsoft.Identity.Json.Linq.JsonPath.RootFilter : PathFilter {
    public static RootFilter Instance;
    public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, bool errorWhenNoMatch);
}
internal class Microsoft.Identity.Json.Linq.JsonPath.ScanFilter : PathFilter {
    public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [IteratorStateMachineAttribute("Microsoft.Identity.Json.Linq.JsonPath.ScanFilter/<ExecuteFilter>d__4")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, bool errorWhenNoMatch);
}
internal class Microsoft.Identity.Json.Linq.JsonPath.ScanMultipleFilter : PathFilter {
    public List`1<string> Names { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Names();
    [CompilerGeneratedAttribute]
public void set_Names(List`1<string> value);
    [IteratorStateMachineAttribute("Microsoft.Identity.Json.Linq.JsonPath.ScanMultipleFilter/<ExecuteFilter>d__4")]
public virtual IEnumerable`1<JToken> ExecuteFilter(JToken root, IEnumerable`1<JToken> current, bool errorWhenNoMatch);
}
[DefaultMemberAttribute("Item")]
internal abstract class Microsoft.Identity.Json.Linq.JToken : object {
    public static JTokenEqualityComparer EqualityComparer { get; }
    public JContainer Parent { get; internal set; }
    public JToken Root { get; }
    public JTokenType Type { get; }
    public bool HasValues { get; }
    public JToken Next { get; internal set; }
    public JToken Previous { get; internal set; }
    public string Path { get; }
    public JToken Item { get; public set; }
    public JToken First { get; }
    public JToken Last { get; }
    private IJEnumerable`1<JToken> Microsoft.Identity.Json.Linq.IJEnumerable<Microsoft.Identity.Json.Linq.JToken>.Item { get; }
    private int Microsoft.Identity.Json.IJsonLineInfo.LineNumber { get; }
    private int Microsoft.Identity.Json.IJsonLineInfo.LinePosition { get; }
    public virtual Task WriteToAsync(JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    public Task WriteToAsync(JsonWriter writer, JsonConverter[] converters);
    public static Task`1<JToken> ReadFromAsync(JsonReader reader, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.Linq.JToken/<ReadFromAsync>d__3")]
public static Task`1<JToken> ReadFromAsync(JsonReader reader, JsonLoadSettings settings, CancellationToken cancellationToken);
    public static Task`1<JToken> LoadAsync(JsonReader reader, CancellationToken cancellationToken);
    public static Task`1<JToken> LoadAsync(JsonReader reader, JsonLoadSettings settings, CancellationToken cancellationToken);
    public static JTokenEqualityComparer get_EqualityComparer();
    [DebuggerStepThroughAttribute]
public JContainer get_Parent();
    internal void set_Parent(JContainer value);
    public JToken get_Root();
    internal abstract virtual JToken CloneToken();
    internal abstract virtual bool DeepEquals(JToken node);
    public abstract virtual JTokenType get_Type();
    public abstract virtual bool get_HasValues();
    public static bool DeepEquals(JToken t1, JToken t2);
    public JToken get_Next();
    internal void set_Next(JToken value);
    public JToken get_Previous();
    internal void set_Previous(JToken value);
    public string get_Path();
    public void AddAfterSelf(object content);
    public void AddBeforeSelf(object content);
    public IEnumerable`1<JToken> Ancestors();
    public IEnumerable`1<JToken> AncestorsAndSelf();
    [IteratorStateMachineAttribute("Microsoft.Identity.Json.Linq.JToken/<GetAncestors>d__48")]
internal IEnumerable`1<JToken> GetAncestors(bool self);
    [IteratorStateMachineAttribute("Microsoft.Identity.Json.Linq.JToken/<AfterSelf>d__49")]
public IEnumerable`1<JToken> AfterSelf();
    [IteratorStateMachineAttribute("Microsoft.Identity.Json.Linq.JToken/<BeforeSelf>d__50")]
public IEnumerable`1<JToken> BeforeSelf();
    public virtual JToken get_Item(object key);
    public virtual void set_Item(object key, JToken value);
    public virtual T Value(object key);
    public virtual JToken get_First();
    public virtual JToken get_Last();
    public virtual JEnumerable`1<JToken> Children();
    public JEnumerable`1<T> Children();
    public virtual IEnumerable`1<T> Values();
    public void Remove();
    public void Replace(JToken value);
    public abstract virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    public virtual string ToString();
    public string ToString(Formatting formatting, JsonConverter[] converters);
    public static bool op_Explicit(JToken value);
    public static DateTimeOffset op_Explicit(JToken value);
    public static Nullable`1<bool> op_Explicit(JToken value);
    public static long op_Explicit(JToken value);
    public static Nullable`1<DateTime> op_Explicit(JToken value);
    public static Nullable`1<DateTimeOffset> op_Explicit(JToken value);
    public static Nullable`1<decimal> op_Explicit(JToken value);
    public static Nullable`1<double> op_Explicit(JToken value);
    public static Nullable`1<char> op_Explicit(JToken value);
    public static int op_Explicit(JToken value);
    public static short op_Explicit(JToken value);
    public static ushort op_Explicit(JToken value);
    public static char op_Explicit(JToken value);
    public static byte op_Explicit(JToken value);
    public static sbyte op_Explicit(JToken value);
    public static Nullable`1<int> op_Explicit(JToken value);
    public static Nullable`1<short> op_Explicit(JToken value);
    public static Nullable`1<ushort> op_Explicit(JToken value);
    public static Nullable`1<byte> op_Explicit(JToken value);
    public static Nullable`1<sbyte> op_Explicit(JToken value);
    public static DateTime op_Explicit(JToken value);
    public static Nullable`1<long> op_Explicit(JToken value);
    public static Nullable`1<float> op_Explicit(JToken value);
    public static decimal op_Explicit(JToken value);
    public static Nullable`1<UInt32> op_Explicit(JToken value);
    public static Nullable`1<ulong> op_Explicit(JToken value);
    public static double op_Explicit(JToken value);
    public static float op_Explicit(JToken value);
    public static string op_Explicit(JToken value);
    public static UInt32 op_Explicit(JToken value);
    public static ulong op_Explicit(JToken value);
    public static Byte[] op_Explicit(JToken value);
    public static Guid op_Explicit(JToken value);
    public static Nullable`1<Guid> op_Explicit(JToken value);
    public static TimeSpan op_Explicit(JToken value);
    public static Nullable`1<TimeSpan> op_Explicit(JToken value);
    public static Uri op_Explicit(JToken value);
    public static JToken op_Implicit(bool value);
    public static JToken op_Implicit(DateTimeOffset value);
    public static JToken op_Implicit(byte value);
    public static JToken op_Implicit(Nullable`1<byte> value);
    public static JToken op_Implicit(sbyte value);
    public static JToken op_Implicit(Nullable`1<sbyte> value);
    public static JToken op_Implicit(Nullable`1<bool> value);
    public static JToken op_Implicit(long value);
    public static JToken op_Implicit(Nullable`1<DateTime> value);
    public static JToken op_Implicit(Nullable`1<DateTimeOffset> value);
    public static JToken op_Implicit(Nullable`1<decimal> value);
    public static JToken op_Implicit(Nullable`1<double> value);
    public static JToken op_Implicit(short value);
    public static JToken op_Implicit(ushort value);
    public static JToken op_Implicit(int value);
    public static JToken op_Implicit(Nullable`1<int> value);
    public static JToken op_Implicit(DateTime value);
    public static JToken op_Implicit(Nullable`1<long> value);
    public static JToken op_Implicit(Nullable`1<float> value);
    public static JToken op_Implicit(decimal value);
    public static JToken op_Implicit(Nullable`1<short> value);
    public static JToken op_Implicit(Nullable`1<ushort> value);
    public static JToken op_Implicit(Nullable`1<UInt32> value);
    public static JToken op_Implicit(Nullable`1<ulong> value);
    public static JToken op_Implicit(double value);
    public static JToken op_Implicit(float value);
    public static JToken op_Implicit(string value);
    public static JToken op_Implicit(UInt32 value);
    public static JToken op_Implicit(ulong value);
    public static JToken op_Implicit(Byte[] value);
    public static JToken op_Implicit(Uri value);
    public static JToken op_Implicit(TimeSpan value);
    public static JToken op_Implicit(Nullable`1<TimeSpan> value);
    public static JToken op_Implicit(Guid value);
    public static JToken op_Implicit(Nullable`1<Guid> value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IEnumerator`1<JToken> System.Collections.Generic.IEnumerable<Microsoft.Identity.Json.Linq.JToken>.GetEnumerator();
    internal abstract virtual int GetDeepHashCode();
    private sealed virtual override IJEnumerable`1<JToken> Microsoft.Identity.Json.Linq.IJEnumerable<Microsoft.Identity.Json.Linq.JToken>.get_Item(object key);
    public JsonReader CreateReader();
    internal static JToken FromObjectInternal(object o, JsonSerializer jsonSerializer);
    public static JToken FromObject(object o);
    public static JToken FromObject(object o, JsonSerializer jsonSerializer);
    public T ToObject();
    public object ToObject(Type objectType);
    public T ToObject(JsonSerializer jsonSerializer);
    public object ToObject(Type objectType, JsonSerializer jsonSerializer);
    public static JToken ReadFrom(JsonReader reader);
    public static JToken ReadFrom(JsonReader reader, JsonLoadSettings settings);
    public static JToken Parse(string json);
    public static JToken Parse(string json, JsonLoadSettings settings);
    public static JToken Load(JsonReader reader, JsonLoadSettings settings);
    public static JToken Load(JsonReader reader);
    internal void SetLineInfo(IJsonLineInfo lineInfo, JsonLoadSettings settings);
    internal void SetLineInfo(int lineNumber, int linePosition);
    private sealed virtual override bool Microsoft.Identity.Json.IJsonLineInfo.HasLineInfo();
    private sealed virtual override int Microsoft.Identity.Json.IJsonLineInfo.get_LineNumber();
    private sealed virtual override int Microsoft.Identity.Json.IJsonLineInfo.get_LinePosition();
    public JToken SelectToken(string path);
    public JToken SelectToken(string path, bool errorWhenNoMatch);
    public IEnumerable`1<JToken> SelectTokens(string path);
    public IEnumerable`1<JToken> SelectTokens(string path, bool errorWhenNoMatch);
    protected virtual DynamicMetaObject GetMetaObject(Expression parameter);
    private sealed virtual override DynamicMetaObject System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(Expression parameter);
    private sealed virtual override object System.ICloneable.Clone();
    public JToken DeepClone();
    public void AddAnnotation(object annotation);
    public T Annotation();
    public object Annotation(Type type);
    [IteratorStateMachineAttribute("Microsoft.Identity.Json.Linq.JToken/<Annotations>d__182`1")]
public IEnumerable`1<T> Annotations();
    [IteratorStateMachineAttribute("Microsoft.Identity.Json.Linq.JToken/<Annotations>d__183")]
public IEnumerable`1<object> Annotations(Type type);
    public void RemoveAnnotations();
    public void RemoveAnnotations(Type type);
}
internal class Microsoft.Identity.Json.Linq.JTokenEqualityComparer : object {
    public sealed virtual bool Equals(JToken x, JToken y);
    public sealed virtual int GetHashCode(JToken obj);
}
internal class Microsoft.Identity.Json.Linq.JTokenReader : JsonReader {
    public JToken CurrentToken { get; }
    private int Microsoft.Identity.Json.IJsonLineInfo.LineNumber { get; }
    private int Microsoft.Identity.Json.IJsonLineInfo.LinePosition { get; }
    public string Path { get; }
    public JTokenReader(JToken token);
    internal JTokenReader(JToken token, string initialPath);
    public JToken get_CurrentToken();
    public virtual bool Read();
    private sealed virtual override bool Microsoft.Identity.Json.IJsonLineInfo.HasLineInfo();
    private sealed virtual override int Microsoft.Identity.Json.IJsonLineInfo.get_LineNumber();
    private sealed virtual override int Microsoft.Identity.Json.IJsonLineInfo.get_LinePosition();
    public virtual string get_Path();
}
internal enum Microsoft.Identity.Json.Linq.JTokenType : Enum {
    public int value__;
    public static JTokenType None;
    public static JTokenType Object;
    public static JTokenType Array;
    public static JTokenType Constructor;
    public static JTokenType Property;
    public static JTokenType Comment;
    public static JTokenType Integer;
    public static JTokenType Float;
    public static JTokenType String;
    public static JTokenType Boolean;
    public static JTokenType Null;
    public static JTokenType Undefined;
    public static JTokenType Date;
    public static JTokenType Raw;
    public static JTokenType Bytes;
    public static JTokenType Guid;
    public static JTokenType Uri;
    public static JTokenType TimeSpan;
}
internal class Microsoft.Identity.Json.Linq.JTokenWriter : JsonWriter {
    public JToken CurrentToken { get; }
    public JToken Token { get; }
    public JTokenWriter(JContainer container);
    internal virtual Task WriteTokenAsync(JsonReader reader, bool writeChildren, bool writeDateConstructorAsDate, bool writeComments, CancellationToken cancellationToken);
    public JToken get_CurrentToken();
    public JToken get_Token();
    public virtual void Flush();
    public virtual void Close();
    public virtual void WriteStartObject();
    public virtual void WriteStartArray();
    public virtual void WriteStartConstructor(string name);
    protected virtual void WriteEnd(JsonToken token);
    public virtual void WritePropertyName(string name);
    internal void AddValue(JValue value, JsonToken token);
    public virtual void WriteValue(object value);
    public virtual void WriteNull();
    public virtual void WriteUndefined();
    public virtual void WriteRaw(string json);
    public virtual void WriteComment(string text);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(long value);
    public virtual void WriteValue(ulong value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(short value);
    public virtual void WriteValue(ushort value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(byte value);
    public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(Byte[] value);
    public virtual void WriteValue(TimeSpan value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(Uri value);
    internal virtual void WriteToken(JsonReader reader, bool writeChildren, bool writeDateConstructorAsDate, bool writeComments);
}
internal class Microsoft.Identity.Json.Linq.JValue : JToken {
    public bool HasValues { get; }
    public JTokenType Type { get; }
    public object Value { get; public set; }
    internal JValue(object value, JTokenType type);
    public JValue(JValue other);
    public JValue(long value);
    public JValue(decimal value);
    public JValue(char value);
    public JValue(ulong value);
    public JValue(double value);
    public JValue(float value);
    public JValue(DateTime value);
    public JValue(DateTimeOffset value);
    public JValue(bool value);
    public JValue(string value);
    public JValue(Guid value);
    public JValue(Uri value);
    public JValue(TimeSpan value);
    public JValue(object value);
    public virtual Task WriteToAsync(JsonWriter writer, CancellationToken cancellationToken, JsonConverter[] converters);
    internal virtual bool DeepEquals(JToken node);
    public virtual bool get_HasValues();
    internal static int Compare(JTokenType valueType, object objA, object objB);
    internal virtual JToken CloneToken();
    public static JValue CreateComment(string value);
    public static JValue CreateString(string value);
    public static JValue CreateNull();
    public static JValue CreateUndefined();
    public virtual JTokenType get_Type();
    public object get_Value();
    public void set_Value(object value);
    public virtual void WriteTo(JsonWriter writer, JsonConverter[] converters);
    internal virtual int GetDeepHashCode();
    public sealed virtual bool Equals(JValue other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
    public string ToString(string format);
    public sealed virtual string ToString(IFormatProvider formatProvider);
    public sealed virtual string ToString(string format, IFormatProvider formatProvider);
    protected virtual DynamicMetaObject GetMetaObject(Expression parameter);
    private sealed virtual override int System.IComparable.CompareTo(object obj);
    public sealed virtual int CompareTo(JValue obj);
    private sealed virtual override TypeCode System.IConvertible.GetTypeCode();
    private sealed virtual override bool System.IConvertible.ToBoolean(IFormatProvider provider);
    private sealed virtual override char System.IConvertible.ToChar(IFormatProvider provider);
    private sealed virtual override sbyte System.IConvertible.ToSByte(IFormatProvider provider);
    private sealed virtual override byte System.IConvertible.ToByte(IFormatProvider provider);
    private sealed virtual override short System.IConvertible.ToInt16(IFormatProvider provider);
    private sealed virtual override ushort System.IConvertible.ToUInt16(IFormatProvider provider);
    private sealed virtual override int System.IConvertible.ToInt32(IFormatProvider provider);
    private sealed virtual override UInt32 System.IConvertible.ToUInt32(IFormatProvider provider);
    private sealed virtual override long System.IConvertible.ToInt64(IFormatProvider provider);
    private sealed virtual override ulong System.IConvertible.ToUInt64(IFormatProvider provider);
    private sealed virtual override float System.IConvertible.ToSingle(IFormatProvider provider);
    private sealed virtual override double System.IConvertible.ToDouble(IFormatProvider provider);
    private sealed virtual override decimal System.IConvertible.ToDecimal(IFormatProvider provider);
    private sealed virtual override DateTime System.IConvertible.ToDateTime(IFormatProvider provider);
    private sealed virtual override object System.IConvertible.ToType(Type conversionType, IFormatProvider provider);
}
internal enum Microsoft.Identity.Json.Linq.LineInfoHandling : Enum {
    public int value__;
    public static LineInfoHandling Ignore;
    public static LineInfoHandling Load;
}
internal enum Microsoft.Identity.Json.Linq.MergeArrayHandling : Enum {
    public int value__;
    public static MergeArrayHandling Concat;
    public static MergeArrayHandling Union;
    public static MergeArrayHandling Replace;
    public static MergeArrayHandling Merge;
}
[FlagsAttribute]
internal enum Microsoft.Identity.Json.Linq.MergeNullValueHandling : Enum {
    public int value__;
    public static MergeNullValueHandling Ignore;
    public static MergeNullValueHandling Merge;
}
internal enum Microsoft.Identity.Json.MemberSerialization : Enum {
    public int value__;
    public static MemberSerialization OptOut;
    public static MemberSerialization OptIn;
    public static MemberSerialization Fields;
}
internal enum Microsoft.Identity.Json.MetadataPropertyHandling : Enum {
    public int value__;
    public static MetadataPropertyHandling Default;
    public static MetadataPropertyHandling ReadAhead;
    public static MetadataPropertyHandling Ignore;
}
internal enum Microsoft.Identity.Json.MissingMemberHandling : Enum {
    public int value__;
    public static MissingMemberHandling Ignore;
    public static MissingMemberHandling Error;
}
internal enum Microsoft.Identity.Json.NullValueHandling : Enum {
    public int value__;
    public static NullValueHandling Include;
    public static NullValueHandling Ignore;
}
internal enum Microsoft.Identity.Json.ObjectCreationHandling : Enum {
    public int value__;
    public static ObjectCreationHandling Auto;
    public static ObjectCreationHandling Reuse;
    public static ObjectCreationHandling Replace;
}
[FlagsAttribute]
internal enum Microsoft.Identity.Json.PreserveReferencesHandling : Enum {
    public int value__;
    public static PreserveReferencesHandling None;
    public static PreserveReferencesHandling Objects;
    public static PreserveReferencesHandling Arrays;
    public static PreserveReferencesHandling All;
}
internal enum Microsoft.Identity.Json.ReadType : Enum {
    public int value__;
    public static ReadType Read;
    public static ReadType ReadAsInt32;
    public static ReadType ReadAsInt64;
    public static ReadType ReadAsBytes;
    public static ReadType ReadAsString;
    public static ReadType ReadAsDecimal;
    public static ReadType ReadAsDateTime;
    public static ReadType ReadAsDateTimeOffset;
    public static ReadType ReadAsDouble;
    public static ReadType ReadAsBoolean;
}
internal enum Microsoft.Identity.Json.ReferenceLoopHandling : Enum {
    public int value__;
    public static ReferenceLoopHandling Error;
    public static ReferenceLoopHandling Ignore;
    public static ReferenceLoopHandling Serialize;
}
internal enum Microsoft.Identity.Json.Required : Enum {
    public int value__;
    public static Required Default;
    public static Required AllowNull;
    public static Required Always;
    public static Required DisallowNull;
}
[ExtensionAttribute]
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal static class Microsoft.Identity.Json.Schema.Extensions : object {
    [ExtensionAttribute]
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
public static bool IsValid(JToken source, JsonSchema schema);
    [ExtensionAttribute]
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
public static bool IsValid(JToken source, JsonSchema schema, IList`1& errorMessages);
    [ExtensionAttribute]
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
public static void Validate(JToken source, JsonSchema schema);
    [ExtensionAttribute]
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
public static void Validate(JToken source, JsonSchema schema, ValidationEventHandler validationEventHandler);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Microsoft.Identity.Json.Schema.JsonSchema : object {
    public string Id { get; public set; }
    public string Title { get; public set; }
    public Nullable`1<bool> Required { get; public set; }
    public Nullable`1<bool> ReadOnly { get; public set; }
    public Nullable`1<bool> Hidden { get; public set; }
    public Nullable`1<bool> Transient { get; public set; }
    public string Description { get; public set; }
    public Nullable`1<JsonSchemaType> Type { get; public set; }
    public string Pattern { get; public set; }
    public Nullable`1<int> MinimumLength { get; public set; }
    public Nullable`1<int> MaximumLength { get; public set; }
    public Nullable`1<double> DivisibleBy { get; public set; }
    public Nullable`1<double> Minimum { get; public set; }
    public Nullable`1<double> Maximum { get; public set; }
    public Nullable`1<bool> ExclusiveMinimum { get; public set; }
    public Nullable`1<bool> ExclusiveMaximum { get; public set; }
    public Nullable`1<int> MinimumItems { get; public set; }
    public Nullable`1<int> MaximumItems { get; public set; }
    public IList`1<JsonSchema> Items { get; public set; }
    public bool PositionalItemsValidation { get; public set; }
    public JsonSchema AdditionalItems { get; public set; }
    public bool AllowAdditionalItems { get; public set; }
    public bool UniqueItems { get; public set; }
    public IDictionary`2<string, JsonSchema> Properties { get; public set; }
    public JsonSchema AdditionalProperties { get; public set; }
    public IDictionary`2<string, JsonSchema> PatternProperties { get; public set; }
    public bool AllowAdditionalProperties { get; public set; }
    public string Requires { get; public set; }
    public IList`1<JToken> Enum { get; public set; }
    public Nullable`1<JsonSchemaType> Disallow { get; public set; }
    public JToken Default { get; public set; }
    public IList`1<JsonSchema> Extends { get; public set; }
    public string Format { get; public set; }
    internal string Location { get; internal set; }
    internal string InternalId { get; }
    internal string DeferredReference { get; internal set; }
    internal bool ReferencesResolved { get; internal set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ReadOnly();
    [CompilerGeneratedAttribute]
public void set_ReadOnly(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Hidden();
    [CompilerGeneratedAttribute]
public void set_Hidden(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Transient();
    [CompilerGeneratedAttribute]
public void set_Transient(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<JsonSchemaType> get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Nullable`1<JsonSchemaType> value);
    [CompilerGeneratedAttribute]
public string get_Pattern();
    [CompilerGeneratedAttribute]
public void set_Pattern(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinimumLength();
    [CompilerGeneratedAttribute]
public void set_MinimumLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaximumLength();
    [CompilerGeneratedAttribute]
public void set_MaximumLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_DivisibleBy();
    [CompilerGeneratedAttribute]
public void set_DivisibleBy(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Minimum();
    [CompilerGeneratedAttribute]
public void set_Minimum(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Maximum();
    [CompilerGeneratedAttribute]
public void set_Maximum(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ExclusiveMinimum();
    [CompilerGeneratedAttribute]
public void set_ExclusiveMinimum(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ExclusiveMaximum();
    [CompilerGeneratedAttribute]
public void set_ExclusiveMaximum(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinimumItems();
    [CompilerGeneratedAttribute]
public void set_MinimumItems(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaximumItems();
    [CompilerGeneratedAttribute]
public void set_MaximumItems(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IList`1<JsonSchema> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IList`1<JsonSchema> value);
    [CompilerGeneratedAttribute]
public bool get_PositionalItemsValidation();
    [CompilerGeneratedAttribute]
public void set_PositionalItemsValidation(bool value);
    [CompilerGeneratedAttribute]
public JsonSchema get_AdditionalItems();
    [CompilerGeneratedAttribute]
public void set_AdditionalItems(JsonSchema value);
    [CompilerGeneratedAttribute]
public bool get_AllowAdditionalItems();
    [CompilerGeneratedAttribute]
public void set_AllowAdditionalItems(bool value);
    [CompilerGeneratedAttribute]
public bool get_UniqueItems();
    [CompilerGeneratedAttribute]
public void set_UniqueItems(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, JsonSchema> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IDictionary`2<string, JsonSchema> value);
    [CompilerGeneratedAttribute]
public JsonSchema get_AdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AdditionalProperties(JsonSchema value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, JsonSchema> get_PatternProperties();
    [CompilerGeneratedAttribute]
public void set_PatternProperties(IDictionary`2<string, JsonSchema> value);
    [CompilerGeneratedAttribute]
public bool get_AllowAdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AllowAdditionalProperties(bool value);
    [CompilerGeneratedAttribute]
public string get_Requires();
    [CompilerGeneratedAttribute]
public void set_Requires(string value);
    [CompilerGeneratedAttribute]
public IList`1<JToken> get_Enum();
    [CompilerGeneratedAttribute]
public void set_Enum(IList`1<JToken> value);
    [CompilerGeneratedAttribute]
public Nullable`1<JsonSchemaType> get_Disallow();
    [CompilerGeneratedAttribute]
public void set_Disallow(Nullable`1<JsonSchemaType> value);
    [CompilerGeneratedAttribute]
public JToken get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(JToken value);
    [CompilerGeneratedAttribute]
public IList`1<JsonSchema> get_Extends();
    [CompilerGeneratedAttribute]
public void set_Extends(IList`1<JsonSchema> value);
    [CompilerGeneratedAttribute]
public string get_Format();
    [CompilerGeneratedAttribute]
public void set_Format(string value);
    [CompilerGeneratedAttribute]
internal string get_Location();
    [CompilerGeneratedAttribute]
internal void set_Location(string value);
    internal string get_InternalId();
    [CompilerGeneratedAttribute]
internal string get_DeferredReference();
    [CompilerGeneratedAttribute]
internal void set_DeferredReference(string value);
    [CompilerGeneratedAttribute]
internal bool get_ReferencesResolved();
    [CompilerGeneratedAttribute]
internal void set_ReferencesResolved(bool value);
    public static JsonSchema Read(JsonReader reader);
    public static JsonSchema Read(JsonReader reader, JsonSchemaResolver resolver);
    public static JsonSchema Parse(string json);
    public static JsonSchema Parse(string json, JsonSchemaResolver resolver);
    public void WriteTo(JsonWriter writer);
    public void WriteTo(JsonWriter writer, JsonSchemaResolver resolver);
    public virtual string ToString();
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Microsoft.Identity.Json.Schema.JsonSchemaBuilder : object {
    public JsonSchemaBuilder(JsonSchemaResolver resolver);
    internal JsonSchema Read(JsonReader reader);
    internal static JsonSchemaType MapType(string type);
    internal static string MapType(JsonSchemaType type);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal static class Microsoft.Identity.Json.Schema.JsonSchemaConstants : object {
    public static string TypePropertyName;
    public static string PropertiesPropertyName;
    public static string ItemsPropertyName;
    public static string AdditionalItemsPropertyName;
    public static string RequiredPropertyName;
    public static string PatternPropertiesPropertyName;
    public static string AdditionalPropertiesPropertyName;
    public static string RequiresPropertyName;
    public static string MinimumPropertyName;
    public static string MaximumPropertyName;
    public static string ExclusiveMinimumPropertyName;
    public static string ExclusiveMaximumPropertyName;
    public static string MinimumItemsPropertyName;
    public static string MaximumItemsPropertyName;
    public static string PatternPropertyName;
    public static string MaximumLengthPropertyName;
    public static string MinimumLengthPropertyName;
    public static string EnumPropertyName;
    public static string ReadOnlyPropertyName;
    public static string TitlePropertyName;
    public static string DescriptionPropertyName;
    public static string FormatPropertyName;
    public static string DefaultPropertyName;
    public static string TransientPropertyName;
    public static string DivisibleByPropertyName;
    public static string HiddenPropertyName;
    public static string DisallowPropertyName;
    public static string ExtendsPropertyName;
    public static string IdPropertyName;
    public static string UniqueItemsPropertyName;
    public static string OptionValuePropertyName;
    public static string OptionLabelPropertyName;
    public static IDictionary`2<string, JsonSchemaType> JsonSchemaTypeMapping;
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Microsoft.Identity.Json.Schema.JsonSchemaException : JsonException {
    public int LineNumber { get; }
    public int LinePosition { get; }
    public string Path { get; }
    public JsonSchemaException(string message);
    public JsonSchemaException(string message, Exception innerException);
    public JsonSchemaException(SerializationInfo info, StreamingContext context);
    internal JsonSchemaException(string message, Exception innerException, string path, int lineNumber, int linePosition);
    [CompilerGeneratedAttribute]
public int get_LineNumber();
    [CompilerGeneratedAttribute]
public int get_LinePosition();
    [CompilerGeneratedAttribute]
public string get_Path();
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Microsoft.Identity.Json.Schema.JsonSchemaGenerator : object {
    public UndefinedSchemaIdHandling UndefinedSchemaIdHandling { get; public set; }
    public IContractResolver ContractResolver { get; public set; }
    [CompilerGeneratedAttribute]
public UndefinedSchemaIdHandling get_UndefinedSchemaIdHandling();
    [CompilerGeneratedAttribute]
public void set_UndefinedSchemaIdHandling(UndefinedSchemaIdHandling value);
    public IContractResolver get_ContractResolver();
    public void set_ContractResolver(IContractResolver value);
    public JsonSchema Generate(Type type);
    public JsonSchema Generate(Type type, JsonSchemaResolver resolver);
    public JsonSchema Generate(Type type, bool rootSchemaNullable);
    public JsonSchema Generate(Type type, JsonSchemaResolver resolver, bool rootSchemaNullable);
    internal static bool HasFlag(Nullable`1<JsonSchemaType> value, JsonSchemaType flag);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Microsoft.Identity.Json.Schema.JsonSchemaModel : object {
    public bool Required { get; public set; }
    public JsonSchemaType Type { get; public set; }
    public Nullable`1<int> MinimumLength { get; public set; }
    public Nullable`1<int> MaximumLength { get; public set; }
    public Nullable`1<double> DivisibleBy { get; public set; }
    public Nullable`1<double> Minimum { get; public set; }
    public Nullable`1<double> Maximum { get; public set; }
    public bool ExclusiveMinimum { get; public set; }
    public bool ExclusiveMaximum { get; public set; }
    public Nullable`1<int> MinimumItems { get; public set; }
    public Nullable`1<int> MaximumItems { get; public set; }
    public IList`1<string> Patterns { get; public set; }
    public IList`1<JsonSchemaModel> Items { get; public set; }
    public IDictionary`2<string, JsonSchemaModel> Properties { get; public set; }
    public IDictionary`2<string, JsonSchemaModel> PatternProperties { get; public set; }
    public JsonSchemaModel AdditionalProperties { get; public set; }
    public JsonSchemaModel AdditionalItems { get; public set; }
    public bool PositionalItemsValidation { get; public set; }
    public bool AllowAdditionalProperties { get; public set; }
    public bool AllowAdditionalItems { get; public set; }
    public bool UniqueItems { get; public set; }
    public IList`1<JToken> Enum { get; public set; }
    public JsonSchemaType Disallow { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Required();
    [CompilerGeneratedAttribute]
public void set_Required(bool value);
    [CompilerGeneratedAttribute]
public JsonSchemaType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(JsonSchemaType value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinimumLength();
    [CompilerGeneratedAttribute]
public void set_MinimumLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaximumLength();
    [CompilerGeneratedAttribute]
public void set_MaximumLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_DivisibleBy();
    [CompilerGeneratedAttribute]
public void set_DivisibleBy(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Minimum();
    [CompilerGeneratedAttribute]
public void set_Minimum(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public Nullable`1<double> get_Maximum();
    [CompilerGeneratedAttribute]
public void set_Maximum(Nullable`1<double> value);
    [CompilerGeneratedAttribute]
public bool get_ExclusiveMinimum();
    [CompilerGeneratedAttribute]
public void set_ExclusiveMinimum(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExclusiveMaximum();
    [CompilerGeneratedAttribute]
public void set_ExclusiveMaximum(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MinimumItems();
    [CompilerGeneratedAttribute]
public void set_MinimumItems(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaximumItems();
    [CompilerGeneratedAttribute]
public void set_MaximumItems(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Patterns();
    [CompilerGeneratedAttribute]
public void set_Patterns(IList`1<string> value);
    [CompilerGeneratedAttribute]
public IList`1<JsonSchemaModel> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IList`1<JsonSchemaModel> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, JsonSchemaModel> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IDictionary`2<string, JsonSchemaModel> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, JsonSchemaModel> get_PatternProperties();
    [CompilerGeneratedAttribute]
public void set_PatternProperties(IDictionary`2<string, JsonSchemaModel> value);
    [CompilerGeneratedAttribute]
public JsonSchemaModel get_AdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AdditionalProperties(JsonSchemaModel value);
    [CompilerGeneratedAttribute]
public JsonSchemaModel get_AdditionalItems();
    [CompilerGeneratedAttribute]
public void set_AdditionalItems(JsonSchemaModel value);
    [CompilerGeneratedAttribute]
public bool get_PositionalItemsValidation();
    [CompilerGeneratedAttribute]
public void set_PositionalItemsValidation(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowAdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AllowAdditionalProperties(bool value);
    [CompilerGeneratedAttribute]
public bool get_AllowAdditionalItems();
    [CompilerGeneratedAttribute]
public void set_AllowAdditionalItems(bool value);
    [CompilerGeneratedAttribute]
public bool get_UniqueItems();
    [CompilerGeneratedAttribute]
public void set_UniqueItems(bool value);
    [CompilerGeneratedAttribute]
public IList`1<JToken> get_Enum();
    [CompilerGeneratedAttribute]
public void set_Enum(IList`1<JToken> value);
    [CompilerGeneratedAttribute]
public JsonSchemaType get_Disallow();
    [CompilerGeneratedAttribute]
public void set_Disallow(JsonSchemaType value);
    public static JsonSchemaModel Create(IList`1<JsonSchema> schemata);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Microsoft.Identity.Json.Schema.JsonSchemaModelBuilder : object {
    public JsonSchemaModel Build(JsonSchema schema);
    public JsonSchemaNode AddSchema(JsonSchemaNode existingNode, JsonSchema schema);
    public void AddProperties(IDictionary`2<string, JsonSchema> source, IDictionary`2<string, JsonSchemaNode> target);
    public void AddProperty(IDictionary`2<string, JsonSchemaNode> target, string propertyName, JsonSchema schema);
    public void AddItem(JsonSchemaNode parentNode, int index, JsonSchema schema);
    public void AddAdditionalProperties(JsonSchemaNode parentNode, JsonSchema schema);
    public void AddAdditionalItems(JsonSchemaNode parentNode, JsonSchema schema);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Microsoft.Identity.Json.Schema.JsonSchemaNode : object {
    public string Id { get; }
    public ReadOnlyCollection`1<JsonSchema> Schemas { get; }
    public Dictionary`2<string, JsonSchemaNode> Properties { get; }
    public Dictionary`2<string, JsonSchemaNode> PatternProperties { get; }
    public List`1<JsonSchemaNode> Items { get; }
    public JsonSchemaNode AdditionalProperties { get; public set; }
    public JsonSchemaNode AdditionalItems { get; public set; }
    public JsonSchemaNode(JsonSchema schema);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public ReadOnlyCollection`1<JsonSchema> get_Schemas();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, JsonSchemaNode> get_Properties();
    [CompilerGeneratedAttribute]
public Dictionary`2<string, JsonSchemaNode> get_PatternProperties();
    [CompilerGeneratedAttribute]
public List`1<JsonSchemaNode> get_Items();
    [CompilerGeneratedAttribute]
public JsonSchemaNode get_AdditionalProperties();
    [CompilerGeneratedAttribute]
public void set_AdditionalProperties(JsonSchemaNode value);
    [CompilerGeneratedAttribute]
public JsonSchemaNode get_AdditionalItems();
    [CompilerGeneratedAttribute]
public void set_AdditionalItems(JsonSchemaNode value);
    public JsonSchemaNode Combine(JsonSchema schema);
    public static string GetId(IEnumerable`1<JsonSchema> schemata);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Microsoft.Identity.Json.Schema.JsonSchemaNodeCollection : KeyedCollection`2<string, JsonSchemaNode> {
    protected virtual string GetKeyForItem(JsonSchemaNode item);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Microsoft.Identity.Json.Schema.JsonSchemaResolver : object {
    public IList`1<JsonSchema> LoadedSchemas { get; protected set; }
    [CompilerGeneratedAttribute]
public IList`1<JsonSchema> get_LoadedSchemas();
    [CompilerGeneratedAttribute]
protected void set_LoadedSchemas(IList`1<JsonSchema> value);
    public virtual JsonSchema GetSchema(string reference);
}
[FlagsAttribute]
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal enum Microsoft.Identity.Json.Schema.JsonSchemaType : Enum {
    public int value__;
    public static JsonSchemaType None;
    public static JsonSchemaType String;
    public static JsonSchemaType Float;
    public static JsonSchemaType Integer;
    public static JsonSchemaType Boolean;
    public static JsonSchemaType Object;
    public static JsonSchemaType Array;
    public static JsonSchemaType Null;
    public static JsonSchemaType Any;
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Microsoft.Identity.Json.Schema.JsonSchemaWriter : object {
    public JsonSchemaWriter(JsonWriter writer, JsonSchemaResolver resolver);
    public void WriteSchema(JsonSchema schema);
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal enum Microsoft.Identity.Json.Schema.UndefinedSchemaIdHandling : Enum {
    public int value__;
    public static UndefinedSchemaIdHandling None;
    public static UndefinedSchemaIdHandling UseTypeName;
    public static UndefinedSchemaIdHandling UseAssemblyQualifiedName;
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Microsoft.Identity.Json.Schema.ValidationEventArgs : EventArgs {
    public JsonSchemaException Exception { get; }
    public string Path { get; }
    public string Message { get; }
    internal ValidationEventArgs(JsonSchemaException ex);
    public JsonSchemaException get_Exception();
    public string get_Path();
    public string get_Message();
}
[ObsoleteAttribute("JSON Schema validation has been moved to its own package. See https://www.newtonsoft.com/jsonschema for more details.")]
internal class Microsoft.Identity.Json.Schema.ValidationEventHandler : MulticastDelegate {
    public ValidationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ValidationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ValidationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class Microsoft.Identity.Json.Serialization.CachedAttributeGetter`1 : object {
    public static T GetAttribute(object type);
}
internal class Microsoft.Identity.Json.Serialization.CamelCaseNamingStrategy : NamingStrategy {
    public CamelCaseNamingStrategy(bool processDictionaryKeys, bool overrideSpecifiedNames);
    public CamelCaseNamingStrategy(bool processDictionaryKeys, bool overrideSpecifiedNames, bool processExtensionDataNames);
    protected virtual string ResolvePropertyName(string name);
}
internal class Microsoft.Identity.Json.Serialization.CamelCasePropertyNamesContractResolver : DefaultContractResolver {
    public virtual JsonContract ResolveContract(Type type);
    internal virtual DefaultJsonNameTable GetNameTable();
}
internal class Microsoft.Identity.Json.Serialization.DefaultContractResolver : object {
    internal static IContractResolver Instance { get; }
    public bool DynamicCodeGeneration { get; }
    [ObsoleteAttribute("DefaultMembersSearchFlags is obsolete. To modify the members serialized inherit from DefaultContractResolver and override the GetSerializableMembers method instead.")]
public BindingFlags DefaultMembersSearchFlags { get; public set; }
    public bool SerializeCompilerGeneratedMembers { get; public set; }
    public bool IgnoreSerializableInterface { get; public set; }
    public bool IgnoreSerializableAttribute { get; public set; }
    public bool IgnoreIsSpecifiedMembers { get; public set; }
    public bool IgnoreShouldSerializeMembers { get; public set; }
    public NamingStrategy NamingStrategy { get; public set; }
    internal static IContractResolver get_Instance();
    public bool get_DynamicCodeGeneration();
    [CompilerGeneratedAttribute]
public BindingFlags get_DefaultMembersSearchFlags();
    [CompilerGeneratedAttribute]
public void set_DefaultMembersSearchFlags(BindingFlags value);
    [CompilerGeneratedAttribute]
public bool get_SerializeCompilerGeneratedMembers();
    [CompilerGeneratedAttribute]
public void set_SerializeCompilerGeneratedMembers(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreSerializableInterface();
    [CompilerGeneratedAttribute]
public void set_IgnoreSerializableInterface(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreSerializableAttribute();
    [CompilerGeneratedAttribute]
public void set_IgnoreSerializableAttribute(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreIsSpecifiedMembers();
    [CompilerGeneratedAttribute]
public void set_IgnoreIsSpecifiedMembers(bool value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreShouldSerializeMembers();
    [CompilerGeneratedAttribute]
public void set_IgnoreShouldSerializeMembers(bool value);
    [CompilerGeneratedAttribute]
public NamingStrategy get_NamingStrategy();
    [CompilerGeneratedAttribute]
public void set_NamingStrategy(NamingStrategy value);
    public virtual JsonContract ResolveContract(Type type);
    protected virtual List`1<MemberInfo> GetSerializableMembers(Type objectType);
    protected virtual JsonObjectContract CreateObjectContract(Type objectType);
    protected virtual IList`1<JsonProperty> CreateConstructorParameters(ConstructorInfo constructor, JsonPropertyCollection memberProperties);
    protected virtual JsonProperty CreatePropertyFromConstructorParameter(JsonProperty matchingMemberProperty, ParameterInfo parameterInfo);
    protected virtual JsonConverter ResolveContractConverter(Type objectType);
    protected virtual JsonDictionaryContract CreateDictionaryContract(Type objectType);
    protected virtual JsonArrayContract CreateArrayContract(Type objectType);
    protected virtual JsonPrimitiveContract CreatePrimitiveContract(Type objectType);
    protected virtual JsonLinqContract CreateLinqContract(Type objectType);
    protected virtual JsonISerializableContract CreateISerializableContract(Type objectType);
    protected virtual JsonDynamicContract CreateDynamicContract(Type objectType);
    protected virtual JsonStringContract CreateStringContract(Type objectType);
    protected virtual JsonContract CreateContract(Type objectType);
    internal static bool IsJsonPrimitiveType(Type t);
    internal static bool IsIConvertible(Type t);
    internal static bool CanConvertToString(Type type);
    internal static string GetClrTypeFullName(Type type);
    protected virtual IList`1<JsonProperty> CreateProperties(Type type, MemberSerialization memberSerialization);
    internal virtual DefaultJsonNameTable GetNameTable();
    protected virtual IValueProvider CreateMemberValueProvider(MemberInfo member);
    protected virtual JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization);
    protected virtual string ResolvePropertyName(string propertyName);
    protected virtual string ResolveExtensionDataName(string extensionDataName);
    protected virtual string ResolveDictionaryKey(string dictionaryKey);
    public string GetResolvedPropertyName(string propertyName);
}
internal class Microsoft.Identity.Json.Serialization.DefaultNamingStrategy : NamingStrategy {
    protected virtual string ResolvePropertyName(string name);
}
internal class Microsoft.Identity.Json.Serialization.DefaultReferenceResolver : object {
    public sealed virtual object ResolveReference(object context, string reference);
    public sealed virtual string GetReference(object context, object value);
    public sealed virtual void AddReference(object context, string reference, object value);
    public sealed virtual bool IsReferenced(object context, object value);
}
internal class Microsoft.Identity.Json.Serialization.DefaultSerializationBinder : SerializationBinder {
    internal static DefaultSerializationBinder Instance;
    public virtual Type BindToType(string assemblyName, string typeName);
    public virtual void BindToName(Type serializedType, String& assemblyName, String& typeName);
}
internal class Microsoft.Identity.Json.Serialization.DiagnosticsTraceWriter : object {
    public TraceLevel LevelFilter { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual TraceLevel get_LevelFilter();
    [CompilerGeneratedAttribute]
public void set_LevelFilter(TraceLevel value);
    public sealed virtual void Trace(TraceLevel level, string message, Exception ex);
}
internal class Microsoft.Identity.Json.Serialization.DynamicValueProvider : object {
    public DynamicValueProvider(MemberInfo memberInfo);
    public sealed virtual void SetValue(object target, object value);
    public sealed virtual object GetValue(object target);
}
internal class Microsoft.Identity.Json.Serialization.ErrorContext : object {
    internal bool Traced { get; internal set; }
    public Exception Error { get; }
    public object OriginalObject { get; }
    public object Member { get; }
    public string Path { get; }
    public bool Handled { get; public set; }
    internal ErrorContext(object originalObject, object member, string path, Exception error);
    [CompilerGeneratedAttribute]
internal bool get_Traced();
    [CompilerGeneratedAttribute]
internal void set_Traced(bool value);
    [CompilerGeneratedAttribute]
public Exception get_Error();
    [CompilerGeneratedAttribute]
public object get_OriginalObject();
    [CompilerGeneratedAttribute]
public object get_Member();
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
}
internal class Microsoft.Identity.Json.Serialization.ErrorEventArgs : EventArgs {
    public object CurrentObject { get; }
    public ErrorContext ErrorContext { get; }
    public ErrorEventArgs(object currentObject, ErrorContext errorContext);
    [CompilerGeneratedAttribute]
public object get_CurrentObject();
    [CompilerGeneratedAttribute]
public ErrorContext get_ErrorContext();
}
internal class Microsoft.Identity.Json.Serialization.ExpressionValueProvider : object {
    public ExpressionValueProvider(MemberInfo memberInfo);
    public sealed virtual void SetValue(object target, object value);
    public sealed virtual object GetValue(object target);
}
internal class Microsoft.Identity.Json.Serialization.ExtensionDataGetter : MulticastDelegate {
    public ExtensionDataGetter(object object, IntPtr method);
    public virtual IEnumerable`1<KeyValuePair`2<object, object>> Invoke(object o);
    public virtual IAsyncResult BeginInvoke(object o, AsyncCallback callback, object object);
    public virtual IEnumerable`1<KeyValuePair`2<object, object>> EndInvoke(IAsyncResult result);
}
internal class Microsoft.Identity.Json.Serialization.ExtensionDataSetter : MulticastDelegate {
    public ExtensionDataSetter(object object, IntPtr method);
    public virtual void Invoke(object o, string key, object value);
    public virtual IAsyncResult BeginInvoke(object o, string key, object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal interface Microsoft.Identity.Json.Serialization.IAttributeProvider {
    public abstract virtual IList`1<Attribute> GetAttributes(bool inherit);
    public abstract virtual IList`1<Attribute> GetAttributes(Type attributeType, bool inherit);
}
internal interface Microsoft.Identity.Json.Serialization.IContractResolver {
    public abstract virtual JsonContract ResolveContract(Type type);
}
internal interface Microsoft.Identity.Json.Serialization.IReferenceResolver {
    public abstract virtual object ResolveReference(object context, string reference);
    public abstract virtual string GetReference(object context, object value);
    public abstract virtual bool IsReferenced(object context, object value);
    public abstract virtual void AddReference(object context, string reference, object value);
}
internal interface Microsoft.Identity.Json.Serialization.ISerializationBinder {
    public abstract virtual Type BindToType(string assemblyName, string typeName);
    public abstract virtual void BindToName(Type serializedType, String& assemblyName, String& typeName);
}
internal interface Microsoft.Identity.Json.Serialization.ITraceWriter {
    public TraceLevel LevelFilter { get; }
    public abstract virtual TraceLevel get_LevelFilter();
    public abstract virtual void Trace(TraceLevel level, string message, Exception ex);
}
internal interface Microsoft.Identity.Json.Serialization.IValueProvider {
    public abstract virtual void SetValue(object target, object value);
    public abstract virtual object GetValue(object target);
}
internal class Microsoft.Identity.Json.Serialization.JsonArrayContract : JsonContainerContract {
    public Type CollectionItemType { get; }
    public bool IsMultidimensionalArray { get; }
    internal bool IsArray { get; }
    internal bool ShouldCreateWrapper { get; }
    internal bool CanDeserialize { get; }
    internal ObjectConstructor`1<object> ParameterizedCreator { get; }
    public ObjectConstructor`1<object> OverrideCreator { get; public set; }
    public bool HasParameterizedCreator { get; public set; }
    internal bool HasParameterizedCreatorInternal { get; }
    public JsonArrayContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public Type get_CollectionItemType();
    [CompilerGeneratedAttribute]
public bool get_IsMultidimensionalArray();
    [CompilerGeneratedAttribute]
internal bool get_IsArray();
    [CompilerGeneratedAttribute]
internal bool get_ShouldCreateWrapper();
    [CompilerGeneratedAttribute]
internal bool get_CanDeserialize();
    internal ObjectConstructor`1<object> get_ParameterizedCreator();
    public ObjectConstructor`1<object> get_OverrideCreator();
    public void set_OverrideCreator(ObjectConstructor`1<object> value);
    [CompilerGeneratedAttribute]
public bool get_HasParameterizedCreator();
    [CompilerGeneratedAttribute]
public void set_HasParameterizedCreator(bool value);
    internal bool get_HasParameterizedCreatorInternal();
    internal IWrappedCollection CreateWrapper(object list);
    internal IList CreateTemporaryCollection();
}
internal class Microsoft.Identity.Json.Serialization.JsonContainerContract : JsonContract {
    internal JsonContract ItemContract { get; internal set; }
    internal JsonContract FinalItemContract { get; }
    public JsonConverter ItemConverter { get; public set; }
    public Nullable`1<bool> ItemIsReference { get; public set; }
    public Nullable`1<ReferenceLoopHandling> ItemReferenceLoopHandling { get; public set; }
    public Nullable`1<TypeNameHandling> ItemTypeNameHandling { get; public set; }
    internal JsonContainerContract(Type underlyingType);
    internal JsonContract get_ItemContract();
    internal void set_ItemContract(JsonContract value);
    internal JsonContract get_FinalItemContract();
    [CompilerGeneratedAttribute]
public JsonConverter get_ItemConverter();
    [CompilerGeneratedAttribute]
public void set_ItemConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ItemIsReference();
    [CompilerGeneratedAttribute]
public void set_ItemIsReference(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ReferenceLoopHandling> get_ItemReferenceLoopHandling();
    [CompilerGeneratedAttribute]
public void set_ItemReferenceLoopHandling(Nullable`1<ReferenceLoopHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TypeNameHandling> get_ItemTypeNameHandling();
    [CompilerGeneratedAttribute]
public void set_ItemTypeNameHandling(Nullable`1<TypeNameHandling> value);
}
internal abstract class Microsoft.Identity.Json.Serialization.JsonContract : object {
    internal bool IsNullable;
    internal bool IsConvertable;
    internal bool IsEnum;
    internal Type NonNullableUnderlyingType;
    internal ReadType InternalReadType;
    internal JsonContractType ContractType;
    internal bool IsReadOnlyOrFixedSize;
    internal bool IsSealed;
    internal bool IsInstantiable;
    public Type UnderlyingType { get; }
    public Type CreatedType { get; public set; }
    public Nullable`1<bool> IsReference { get; public set; }
    public JsonConverter Converter { get; public set; }
    internal JsonConverter InternalConverter { get; internal set; }
    public IList`1<SerializationCallback> OnDeserializedCallbacks { get; }
    public IList`1<SerializationCallback> OnDeserializingCallbacks { get; }
    public IList`1<SerializationCallback> OnSerializedCallbacks { get; }
    public IList`1<SerializationCallback> OnSerializingCallbacks { get; }
    public IList`1<SerializationErrorCallback> OnErrorCallbacks { get; }
    public Func`1<object> DefaultCreator { get; public set; }
    public bool DefaultCreatorNonPublic { get; public set; }
    internal JsonContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public Type get_UnderlyingType();
    public Type get_CreatedType();
    public void set_CreatedType(Type value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsReference();
    [CompilerGeneratedAttribute]
public void set_IsReference(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public JsonConverter get_Converter();
    [CompilerGeneratedAttribute]
public void set_Converter(JsonConverter value);
    [CompilerGeneratedAttribute]
internal JsonConverter get_InternalConverter();
    [CompilerGeneratedAttribute]
internal void set_InternalConverter(JsonConverter value);
    public IList`1<SerializationCallback> get_OnDeserializedCallbacks();
    public IList`1<SerializationCallback> get_OnDeserializingCallbacks();
    public IList`1<SerializationCallback> get_OnSerializedCallbacks();
    public IList`1<SerializationCallback> get_OnSerializingCallbacks();
    public IList`1<SerializationErrorCallback> get_OnErrorCallbacks();
    [CompilerGeneratedAttribute]
public Func`1<object> get_DefaultCreator();
    [CompilerGeneratedAttribute]
public void set_DefaultCreator(Func`1<object> value);
    [CompilerGeneratedAttribute]
public bool get_DefaultCreatorNonPublic();
    [CompilerGeneratedAttribute]
public void set_DefaultCreatorNonPublic(bool value);
    internal void InvokeOnSerializing(object o, StreamingContext context);
    internal void InvokeOnSerialized(object o, StreamingContext context);
    internal void InvokeOnDeserializing(object o, StreamingContext context);
    internal void InvokeOnDeserialized(object o, StreamingContext context);
    internal void InvokeOnError(object o, StreamingContext context, ErrorContext errorContext);
    internal static SerializationCallback CreateSerializationCallback(MethodInfo callbackMethodInfo);
    internal static SerializationErrorCallback CreateSerializationErrorCallback(MethodInfo callbackMethodInfo);
}
internal enum Microsoft.Identity.Json.Serialization.JsonContractType : Enum {
    public int value__;
    public static JsonContractType None;
    public static JsonContractType Object;
    public static JsonContractType Array;
    public static JsonContractType Primitive;
    public static JsonContractType String;
    public static JsonContractType Dictionary;
    public static JsonContractType Dynamic;
    public static JsonContractType Serializable;
    public static JsonContractType Linq;
}
internal class Microsoft.Identity.Json.Serialization.JsonDictionaryContract : JsonContainerContract {
    public Func`2<string, string> DictionaryKeyResolver { get; public set; }
    public Type DictionaryKeyType { get; }
    public Type DictionaryValueType { get; }
    internal JsonContract KeyContract { get; internal set; }
    internal bool ShouldCreateWrapper { get; }
    internal ObjectConstructor`1<object> ParameterizedCreator { get; }
    public ObjectConstructor`1<object> OverrideCreator { get; public set; }
    public bool HasParameterizedCreator { get; public set; }
    internal bool HasParameterizedCreatorInternal { get; }
    public JsonDictionaryContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_DictionaryKeyResolver();
    [CompilerGeneratedAttribute]
public void set_DictionaryKeyResolver(Func`2<string, string> value);
    [CompilerGeneratedAttribute]
public Type get_DictionaryKeyType();
    [CompilerGeneratedAttribute]
public Type get_DictionaryValueType();
    [CompilerGeneratedAttribute]
internal JsonContract get_KeyContract();
    [CompilerGeneratedAttribute]
internal void set_KeyContract(JsonContract value);
    [CompilerGeneratedAttribute]
internal bool get_ShouldCreateWrapper();
    internal ObjectConstructor`1<object> get_ParameterizedCreator();
    public ObjectConstructor`1<object> get_OverrideCreator();
    public void set_OverrideCreator(ObjectConstructor`1<object> value);
    [CompilerGeneratedAttribute]
public bool get_HasParameterizedCreator();
    [CompilerGeneratedAttribute]
public void set_HasParameterizedCreator(bool value);
    internal bool get_HasParameterizedCreatorInternal();
    internal IWrappedDictionary CreateWrapper(object dictionary);
    internal IDictionary CreateTemporaryDictionary();
}
internal class Microsoft.Identity.Json.Serialization.JsonDynamicContract : JsonContainerContract {
    public JsonPropertyCollection Properties { get; }
    public Func`2<string, string> PropertyNameResolver { get; public set; }
    public JsonDynamicContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public JsonPropertyCollection get_Properties();
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_PropertyNameResolver();
    [CompilerGeneratedAttribute]
public void set_PropertyNameResolver(Func`2<string, string> value);
    internal bool TryGetMember(IDynamicMetaObjectProvider dynamicProvider, string name, Object& value);
    internal bool TrySetMember(IDynamicMetaObjectProvider dynamicProvider, string name, object value);
}
internal class Microsoft.Identity.Json.Serialization.JsonFormatterConverter : object {
    public JsonFormatterConverter(JsonSerializerInternalReader reader, JsonISerializableContract contract, JsonProperty member);
    public sealed virtual object Convert(object value, Type type);
    public sealed virtual object Convert(object value, TypeCode typeCode);
    public sealed virtual bool ToBoolean(object value);
    public sealed virtual byte ToByte(object value);
    public sealed virtual char ToChar(object value);
    public sealed virtual DateTime ToDateTime(object value);
    public sealed virtual decimal ToDecimal(object value);
    public sealed virtual double ToDouble(object value);
    public sealed virtual short ToInt16(object value);
    public sealed virtual int ToInt32(object value);
    public sealed virtual long ToInt64(object value);
    public sealed virtual sbyte ToSByte(object value);
    public sealed virtual float ToSingle(object value);
    public sealed virtual string ToString(object value);
    public sealed virtual ushort ToUInt16(object value);
    public sealed virtual UInt32 ToUInt32(object value);
    public sealed virtual ulong ToUInt64(object value);
}
internal class Microsoft.Identity.Json.Serialization.JsonISerializableContract : JsonContainerContract {
    public ObjectConstructor`1<object> ISerializableCreator { get; public set; }
    public JsonISerializableContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public ObjectConstructor`1<object> get_ISerializableCreator();
    [CompilerGeneratedAttribute]
public void set_ISerializableCreator(ObjectConstructor`1<object> value);
}
internal class Microsoft.Identity.Json.Serialization.JsonLinqContract : JsonContract {
    public JsonLinqContract(Type underlyingType);
}
internal class Microsoft.Identity.Json.Serialization.JsonObjectContract : JsonContainerContract {
    internal bool ExtensionDataIsJToken;
    public MemberSerialization MemberSerialization { get; public set; }
    public Nullable`1<Required> ItemRequired { get; public set; }
    public Nullable`1<NullValueHandling> ItemNullValueHandling { get; public set; }
    public JsonPropertyCollection Properties { get; }
    public JsonPropertyCollection CreatorParameters { get; }
    public ObjectConstructor`1<object> OverrideCreator { get; public set; }
    internal ObjectConstructor`1<object> ParameterizedCreator { get; internal set; }
    public ExtensionDataSetter ExtensionDataSetter { get; public set; }
    public ExtensionDataGetter ExtensionDataGetter { get; public set; }
    public Type ExtensionDataValueType { get; public set; }
    public Func`2<string, string> ExtensionDataNameResolver { get; public set; }
    internal bool HasRequiredOrDefaultValueProperties { get; }
    public JsonObjectContract(Type underlyingType);
    [CompilerGeneratedAttribute]
public MemberSerialization get_MemberSerialization();
    [CompilerGeneratedAttribute]
public void set_MemberSerialization(MemberSerialization value);
    [CompilerGeneratedAttribute]
public Nullable`1<Required> get_ItemRequired();
    [CompilerGeneratedAttribute]
public void set_ItemRequired(Nullable`1<Required> value);
    [CompilerGeneratedAttribute]
public Nullable`1<NullValueHandling> get_ItemNullValueHandling();
    [CompilerGeneratedAttribute]
public void set_ItemNullValueHandling(Nullable`1<NullValueHandling> value);
    [CompilerGeneratedAttribute]
public JsonPropertyCollection get_Properties();
    public JsonPropertyCollection get_CreatorParameters();
    public ObjectConstructor`1<object> get_OverrideCreator();
    public void set_OverrideCreator(ObjectConstructor`1<object> value);
    internal ObjectConstructor`1<object> get_ParameterizedCreator();
    internal void set_ParameterizedCreator(ObjectConstructor`1<object> value);
    [CompilerGeneratedAttribute]
public ExtensionDataSetter get_ExtensionDataSetter();
    [CompilerGeneratedAttribute]
public void set_ExtensionDataSetter(ExtensionDataSetter value);
    [CompilerGeneratedAttribute]
public ExtensionDataGetter get_ExtensionDataGetter();
    [CompilerGeneratedAttribute]
public void set_ExtensionDataGetter(ExtensionDataGetter value);
    public Type get_ExtensionDataValueType();
    public void set_ExtensionDataValueType(Type value);
    [CompilerGeneratedAttribute]
public Func`2<string, string> get_ExtensionDataNameResolver();
    [CompilerGeneratedAttribute]
public void set_ExtensionDataNameResolver(Func`2<string, string> value);
    internal bool get_HasRequiredOrDefaultValueProperties();
    [SecuritySafeCriticalAttribute]
internal object GetUninitializedObject();
}
internal class Microsoft.Identity.Json.Serialization.JsonPrimitiveContract : JsonContract {
    internal PrimitiveTypeCode TypeCode { get; internal set; }
    public JsonPrimitiveContract(Type underlyingType);
    [CompilerGeneratedAttribute]
internal PrimitiveTypeCode get_TypeCode();
    [CompilerGeneratedAttribute]
internal void set_TypeCode(PrimitiveTypeCode value);
}
internal class Microsoft.Identity.Json.Serialization.JsonProperty : object {
    internal Nullable`1<Required> _required;
    internal bool _hasExplicitDefaultValue;
    internal bool _skipPropertyNameEscape;
    internal JsonContract PropertyContract { get; internal set; }
    public string PropertyName { get; public set; }
    public Type DeclaringType { get; public set; }
    public Nullable`1<int> Order { get; public set; }
    public string UnderlyingName { get; public set; }
    public IValueProvider ValueProvider { get; public set; }
    public IAttributeProvider AttributeProvider { get; public set; }
    public Type PropertyType { get; public set; }
    public JsonConverter Converter { get; public set; }
    [ObsoleteAttribute("MemberConverter is obsolete. Use Converter instead.")]
public JsonConverter MemberConverter { get; public set; }
    public bool Ignored { get; public set; }
    public bool Readable { get; public set; }
    public bool Writable { get; public set; }
    public bool HasMemberAttribute { get; public set; }
    public object DefaultValue { get; public set; }
    public Required Required { get; public set; }
    public Nullable`1<bool> IsReference { get; public set; }
    public Nullable`1<NullValueHandling> NullValueHandling { get; public set; }
    public Nullable`1<DefaultValueHandling> DefaultValueHandling { get; public set; }
    public Nullable`1<ReferenceLoopHandling> ReferenceLoopHandling { get; public set; }
    public Nullable`1<ObjectCreationHandling> ObjectCreationHandling { get; public set; }
    public Nullable`1<TypeNameHandling> TypeNameHandling { get; public set; }
    public Predicate`1<object> ShouldSerialize { get; public set; }
    public Predicate`1<object> ShouldDeserialize { get; public set; }
    public Predicate`1<object> GetIsSpecified { get; public set; }
    public Action`2<object, object> SetIsSpecified { get; public set; }
    public JsonConverter ItemConverter { get; public set; }
    public Nullable`1<bool> ItemIsReference { get; public set; }
    public Nullable`1<TypeNameHandling> ItemTypeNameHandling { get; public set; }
    public Nullable`1<ReferenceLoopHandling> ItemReferenceLoopHandling { get; public set; }
    [CompilerGeneratedAttribute]
internal JsonContract get_PropertyContract();
    [CompilerGeneratedAttribute]
internal void set_PropertyContract(JsonContract value);
    public string get_PropertyName();
    public void set_PropertyName(string value);
    [CompilerGeneratedAttribute]
public Type get_DeclaringType();
    [CompilerGeneratedAttribute]
public void set_DeclaringType(Type value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_UnderlyingName();
    [CompilerGeneratedAttribute]
public void set_UnderlyingName(string value);
    [CompilerGeneratedAttribute]
public IValueProvider get_ValueProvider();
    [CompilerGeneratedAttribute]
public void set_ValueProvider(IValueProvider value);
    [CompilerGeneratedAttribute]
public IAttributeProvider get_AttributeProvider();
    [CompilerGeneratedAttribute]
public void set_AttributeProvider(IAttributeProvider value);
    public Type get_PropertyType();
    public void set_PropertyType(Type value);
    [CompilerGeneratedAttribute]
public JsonConverter get_Converter();
    [CompilerGeneratedAttribute]
public void set_Converter(JsonConverter value);
    public JsonConverter get_MemberConverter();
    public void set_MemberConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public bool get_Ignored();
    [CompilerGeneratedAttribute]
public void set_Ignored(bool value);
    [CompilerGeneratedAttribute]
public bool get_Readable();
    [CompilerGeneratedAttribute]
public void set_Readable(bool value);
    [CompilerGeneratedAttribute]
public bool get_Writable();
    [CompilerGeneratedAttribute]
public void set_Writable(bool value);
    [CompilerGeneratedAttribute]
public bool get_HasMemberAttribute();
    [CompilerGeneratedAttribute]
public void set_HasMemberAttribute(bool value);
    public object get_DefaultValue();
    public void set_DefaultValue(object value);
    internal object GetResolvedDefaultValue();
    public Required get_Required();
    public void set_Required(Required value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsReference();
    [CompilerGeneratedAttribute]
public void set_IsReference(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<NullValueHandling> get_NullValueHandling();
    [CompilerGeneratedAttribute]
public void set_NullValueHandling(Nullable`1<NullValueHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DefaultValueHandling> get_DefaultValueHandling();
    [CompilerGeneratedAttribute]
public void set_DefaultValueHandling(Nullable`1<DefaultValueHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ReferenceLoopHandling> get_ReferenceLoopHandling();
    [CompilerGeneratedAttribute]
public void set_ReferenceLoopHandling(Nullable`1<ReferenceLoopHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ObjectCreationHandling> get_ObjectCreationHandling();
    [CompilerGeneratedAttribute]
public void set_ObjectCreationHandling(Nullable`1<ObjectCreationHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TypeNameHandling> get_TypeNameHandling();
    [CompilerGeneratedAttribute]
public void set_TypeNameHandling(Nullable`1<TypeNameHandling> value);
    [CompilerGeneratedAttribute]
public Predicate`1<object> get_ShouldSerialize();
    [CompilerGeneratedAttribute]
public void set_ShouldSerialize(Predicate`1<object> value);
    [CompilerGeneratedAttribute]
public Predicate`1<object> get_ShouldDeserialize();
    [CompilerGeneratedAttribute]
public void set_ShouldDeserialize(Predicate`1<object> value);
    [CompilerGeneratedAttribute]
public Predicate`1<object> get_GetIsSpecified();
    [CompilerGeneratedAttribute]
public void set_GetIsSpecified(Predicate`1<object> value);
    [CompilerGeneratedAttribute]
public Action`2<object, object> get_SetIsSpecified();
    [CompilerGeneratedAttribute]
public void set_SetIsSpecified(Action`2<object, object> value);
    public virtual string ToString();
    [CompilerGeneratedAttribute]
public JsonConverter get_ItemConverter();
    [CompilerGeneratedAttribute]
public void set_ItemConverter(JsonConverter value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ItemIsReference();
    [CompilerGeneratedAttribute]
public void set_ItemIsReference(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<TypeNameHandling> get_ItemTypeNameHandling();
    [CompilerGeneratedAttribute]
public void set_ItemTypeNameHandling(Nullable`1<TypeNameHandling> value);
    [CompilerGeneratedAttribute]
public Nullable`1<ReferenceLoopHandling> get_ItemReferenceLoopHandling();
    [CompilerGeneratedAttribute]
public void set_ItemReferenceLoopHandling(Nullable`1<ReferenceLoopHandling> value);
    internal void WritePropertyName(JsonWriter writer);
}
internal class Microsoft.Identity.Json.Serialization.JsonPropertyCollection : KeyedCollection`2<string, JsonProperty> {
    public JsonPropertyCollection(Type type);
    protected virtual string GetKeyForItem(JsonProperty item);
    public void AddProperty(JsonProperty property);
    public JsonProperty GetClosestMatchProperty(string propertyName);
    public JsonProperty GetProperty(string propertyName, StringComparison comparisonType);
}
internal abstract class Microsoft.Identity.Json.Serialization.JsonSerializerInternalBase : object {
    internal JsonSerializer Serializer;
    internal ITraceWriter TraceWriter;
    protected JsonSerializerProxy InternalSerializer;
    internal BidirectionalDictionary`2<string, object> DefaultReferenceMappings { get; }
    protected JsonSerializerInternalBase(JsonSerializer serializer);
    internal BidirectionalDictionary`2<string, object> get_DefaultReferenceMappings();
    protected NullValueHandling ResolvedNullValueHandling(JsonObjectContract containerContract, JsonProperty property);
    protected void ClearErrorContext();
    protected bool IsErrorHandled(object currentObject, JsonContract contract, object keyValue, IJsonLineInfo lineInfo, string path, Exception ex);
}
internal class Microsoft.Identity.Json.Serialization.JsonSerializerInternalReader : JsonSerializerInternalBase {
    public JsonSerializerInternalReader(JsonSerializer serializer);
    public void Populate(JsonReader reader, object target);
    public object Deserialize(JsonReader reader, Type objectType, bool checkAdditionalContent);
    internal string GetExpectedDescription(JsonContract contract);
    internal object CreateISerializableItem(JToken token, Type type, JsonISerializableContract contract, JsonProperty member);
    public object CreateNewObject(JsonReader reader, JsonObjectContract objectContract, JsonProperty containerMember, JsonProperty containerProperty, string id, Boolean& createdFromNonDefaultCreator);
}
internal class Microsoft.Identity.Json.Serialization.JsonSerializerInternalWriter : JsonSerializerInternalBase {
    public JsonSerializerInternalWriter(JsonSerializer serializer);
    public void Serialize(JsonWriter jsonWriter, object value, Type objectType);
    internal static bool TryConvertToString(object value, Type type, String& s);
}
internal class Microsoft.Identity.Json.Serialization.JsonSerializerProxy : JsonSerializer {
    public IReferenceResolver ReferenceResolver { get; public set; }
    public ITraceWriter TraceWriter { get; public set; }
    public IEqualityComparer EqualityComparer { get; public set; }
    public JsonConverterCollection Converters { get; }
    public DefaultValueHandling DefaultValueHandling { get; public set; }
    public IContractResolver ContractResolver { get; public set; }
    public MissingMemberHandling MissingMemberHandling { get; public set; }
    public NullValueHandling NullValueHandling { get; public set; }
    public ObjectCreationHandling ObjectCreationHandling { get; public set; }
    public ReferenceLoopHandling ReferenceLoopHandling { get; public set; }
    public PreserveReferencesHandling PreserveReferencesHandling { get; public set; }
    public TypeNameHandling TypeNameHandling { get; public set; }
    public MetadataPropertyHandling MetadataPropertyHandling { get; public set; }
    [ObsoleteAttribute("TypeNameAssemblyFormat is obsolete. Use TypeNameAssemblyFormatHandling instead.")]
public FormatterAssemblyStyle TypeNameAssemblyFormat { get; public set; }
    public TypeNameAssemblyFormatHandling TypeNameAssemblyFormatHandling { get; public set; }
    public ConstructorHandling ConstructorHandling { get; public set; }
    public ISerializationBinder SerializationBinder { get; public set; }
    public StreamingContext Context { get; public set; }
    public Formatting Formatting { get; public set; }
    public DateFormatHandling DateFormatHandling { get; public set; }
    public DateTimeZoneHandling DateTimeZoneHandling { get; public set; }
    public DateParseHandling DateParseHandling { get; public set; }
    public FloatFormatHandling FloatFormatHandling { get; public set; }
    public FloatParseHandling FloatParseHandling { get; public set; }
    public StringEscapeHandling StringEscapeHandling { get; public set; }
    public string DateFormatString { get; public set; }
    public CultureInfo Culture { get; public set; }
    public Nullable`1<int> MaxDepth { get; public set; }
    public bool CheckAdditionalContent { get; public set; }
    public JsonSerializerProxy(JsonSerializerInternalReader serializerReader);
    public JsonSerializerProxy(JsonSerializerInternalWriter serializerWriter);
    public virtual void add_Error(EventHandler`1<ErrorEventArgs> value);
    public virtual void remove_Error(EventHandler`1<ErrorEventArgs> value);
    public virtual IReferenceResolver get_ReferenceResolver();
    public virtual void set_ReferenceResolver(IReferenceResolver value);
    public virtual ITraceWriter get_TraceWriter();
    public virtual void set_TraceWriter(ITraceWriter value);
    public virtual IEqualityComparer get_EqualityComparer();
    public virtual void set_EqualityComparer(IEqualityComparer value);
    public virtual JsonConverterCollection get_Converters();
    public virtual DefaultValueHandling get_DefaultValueHandling();
    public virtual void set_DefaultValueHandling(DefaultValueHandling value);
    public virtual IContractResolver get_ContractResolver();
    public virtual void set_ContractResolver(IContractResolver value);
    public virtual MissingMemberHandling get_MissingMemberHandling();
    public virtual void set_MissingMemberHandling(MissingMemberHandling value);
    public virtual NullValueHandling get_NullValueHandling();
    public virtual void set_NullValueHandling(NullValueHandling value);
    public virtual ObjectCreationHandling get_ObjectCreationHandling();
    public virtual void set_ObjectCreationHandling(ObjectCreationHandling value);
    public virtual ReferenceLoopHandling get_ReferenceLoopHandling();
    public virtual void set_ReferenceLoopHandling(ReferenceLoopHandling value);
    public virtual PreserveReferencesHandling get_PreserveReferencesHandling();
    public virtual void set_PreserveReferencesHandling(PreserveReferencesHandling value);
    public virtual TypeNameHandling get_TypeNameHandling();
    public virtual void set_TypeNameHandling(TypeNameHandling value);
    public virtual MetadataPropertyHandling get_MetadataPropertyHandling();
    public virtual void set_MetadataPropertyHandling(MetadataPropertyHandling value);
    public virtual FormatterAssemblyStyle get_TypeNameAssemblyFormat();
    public virtual void set_TypeNameAssemblyFormat(FormatterAssemblyStyle value);
    public virtual TypeNameAssemblyFormatHandling get_TypeNameAssemblyFormatHandling();
    public virtual void set_TypeNameAssemblyFormatHandling(TypeNameAssemblyFormatHandling value);
    public virtual ConstructorHandling get_ConstructorHandling();
    public virtual void set_ConstructorHandling(ConstructorHandling value);
    public virtual ISerializationBinder get_SerializationBinder();
    public virtual void set_SerializationBinder(ISerializationBinder value);
    public virtual StreamingContext get_Context();
    public virtual void set_Context(StreamingContext value);
    public virtual Formatting get_Formatting();
    public virtual void set_Formatting(Formatting value);
    public virtual DateFormatHandling get_DateFormatHandling();
    public virtual void set_DateFormatHandling(DateFormatHandling value);
    public virtual DateTimeZoneHandling get_DateTimeZoneHandling();
    public virtual void set_DateTimeZoneHandling(DateTimeZoneHandling value);
    public virtual DateParseHandling get_DateParseHandling();
    public virtual void set_DateParseHandling(DateParseHandling value);
    public virtual FloatFormatHandling get_FloatFormatHandling();
    public virtual void set_FloatFormatHandling(FloatFormatHandling value);
    public virtual FloatParseHandling get_FloatParseHandling();
    public virtual void set_FloatParseHandling(FloatParseHandling value);
    public virtual StringEscapeHandling get_StringEscapeHandling();
    public virtual void set_StringEscapeHandling(StringEscapeHandling value);
    public virtual string get_DateFormatString();
    public virtual void set_DateFormatString(string value);
    public virtual CultureInfo get_Culture();
    public virtual void set_Culture(CultureInfo value);
    public virtual Nullable`1<int> get_MaxDepth();
    public virtual void set_MaxDepth(Nullable`1<int> value);
    public virtual bool get_CheckAdditionalContent();
    public virtual void set_CheckAdditionalContent(bool value);
    internal JsonSerializerInternalBase GetInternalSerializer();
    internal virtual object DeserializeInternal(JsonReader reader, Type objectType);
    internal virtual void PopulateInternal(JsonReader reader, object target);
    internal virtual void SerializeInternal(JsonWriter jsonWriter, object value, Type rootType);
}
internal class Microsoft.Identity.Json.Serialization.JsonStringContract : JsonPrimitiveContract {
    public JsonStringContract(Type underlyingType);
}
internal static class Microsoft.Identity.Json.Serialization.JsonTypeReflector : object {
    public static string IdPropertyName;
    public static string RefPropertyName;
    public static string TypePropertyName;
    public static string ValuePropertyName;
    public static string ArrayValuesPropertyName;
    public static string ShouldSerializePrefix;
    public static string SpecifiedPostfix;
    public static string ConcurrentDictionaryTypeName;
    public static bool DynamicCodeGeneration { get; }
    public static bool FullyTrusted { get; }
    public static ReflectionDelegateFactory ReflectionDelegateFactory { get; }
    public static T GetCachedAttribute(object attributeProvider);
    public static bool CanTypeDescriptorConvertString(Type type, TypeConverter& typeConverter);
    public static DataContractAttribute GetDataContractAttribute(Type type);
    public static DataMemberAttribute GetDataMemberAttribute(MemberInfo memberInfo);
    public static MemberSerialization GetObjectMemberSerialization(Type objectType, bool ignoreSerializableAttribute);
    public static JsonConverter GetJsonConverter(object attributeProvider);
    public static JsonConverter CreateJsonConverterInstance(Type converterType, Object[] args);
    public static NamingStrategy CreateNamingStrategyInstance(Type namingStrategyType, Object[] args);
    public static NamingStrategy GetContainerNamingStrategy(JsonContainerAttribute containerAttribute);
    public static bool IsNonSerializable(object provider);
    public static bool IsSerializable(object provider);
    public static T GetAttribute(object provider);
    [SecuritySafeCriticalAttribute]
public static bool get_DynamicCodeGeneration();
    public static bool get_FullyTrusted();
    public static ReflectionDelegateFactory get_ReflectionDelegateFactory();
}
internal class Microsoft.Identity.Json.Serialization.MemoryTraceWriter : object {
    public TraceLevel LevelFilter { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual TraceLevel get_LevelFilter();
    [CompilerGeneratedAttribute]
public void set_LevelFilter(TraceLevel value);
    public sealed virtual void Trace(TraceLevel level, string message, Exception ex);
    public IEnumerable`1<string> GetTraceMessages();
    public virtual string ToString();
}
internal abstract class Microsoft.Identity.Json.Serialization.NamingStrategy : object {
    public bool ProcessDictionaryKeys { get; public set; }
    public bool ProcessExtensionDataNames { get; public set; }
    public bool OverrideSpecifiedNames { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ProcessDictionaryKeys();
    [CompilerGeneratedAttribute]
public void set_ProcessDictionaryKeys(bool value);
    [CompilerGeneratedAttribute]
public bool get_ProcessExtensionDataNames();
    [CompilerGeneratedAttribute]
public void set_ProcessExtensionDataNames(bool value);
    [CompilerGeneratedAttribute]
public bool get_OverrideSpecifiedNames();
    [CompilerGeneratedAttribute]
public void set_OverrideSpecifiedNames(bool value);
    public virtual string GetPropertyName(string name, bool hasSpecifiedName);
    public virtual string GetExtensionDataName(string name);
    public virtual string GetDictionaryKey(string key);
    protected abstract virtual string ResolvePropertyName(string name);
}
internal class Microsoft.Identity.Json.Serialization.ObjectConstructor`1 : MulticastDelegate {
    public ObjectConstructor`1(object object, IntPtr method);
    public virtual object Invoke(Object[] args);
    public virtual IAsyncResult BeginInvoke(Object[] args, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("64")]
internal class Microsoft.Identity.Json.Serialization.OnErrorAttribute : Attribute {
}
internal class Microsoft.Identity.Json.Serialization.ReflectionAttributeProvider : object {
    public ReflectionAttributeProvider(object attributeProvider);
    public sealed virtual IList`1<Attribute> GetAttributes(bool inherit);
    public sealed virtual IList`1<Attribute> GetAttributes(Type attributeType, bool inherit);
}
internal class Microsoft.Identity.Json.Serialization.ReflectionValueProvider : object {
    public ReflectionValueProvider(MemberInfo memberInfo);
    public sealed virtual void SetValue(object target, object value);
    public sealed virtual object GetValue(object target);
}
internal class Microsoft.Identity.Json.Serialization.SerializationBinderAdapter : object {
    public SerializationBinder SerializationBinder;
    public SerializationBinderAdapter(SerializationBinder serializationBinder);
    public sealed virtual Type BindToType(string assemblyName, string typeName);
    public sealed virtual void BindToName(Type serializedType, String& assemblyName, String& typeName);
}
internal class Microsoft.Identity.Json.Serialization.SerializationCallback : MulticastDelegate {
    public SerializationCallback(object object, IntPtr method);
    public virtual void Invoke(object o, StreamingContext context);
    public virtual IAsyncResult BeginInvoke(object o, StreamingContext context, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Identity.Json.Serialization.SerializationErrorCallback : MulticastDelegate {
    public SerializationErrorCallback(object object, IntPtr method);
    public virtual void Invoke(object o, StreamingContext context, ErrorContext errorContext);
    public virtual IAsyncResult BeginInvoke(object o, StreamingContext context, ErrorContext errorContext, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Identity.Json.Serialization.SnakeCaseNamingStrategy : NamingStrategy {
    public SnakeCaseNamingStrategy(bool processDictionaryKeys, bool overrideSpecifiedNames);
    public SnakeCaseNamingStrategy(bool processDictionaryKeys, bool overrideSpecifiedNames, bool processExtensionDataNames);
    protected virtual string ResolvePropertyName(string name);
}
internal class Microsoft.Identity.Json.Serialization.TraceJsonReader : JsonReader {
    public int Depth { get; }
    public string Path { get; }
    public char QuoteChar { get; protected internal set; }
    public JsonToken TokenType { get; }
    public object Value { get; }
    public Type ValueType { get; }
    private int Microsoft.Identity.Json.IJsonLineInfo.LineNumber { get; }
    private int Microsoft.Identity.Json.IJsonLineInfo.LinePosition { get; }
    public TraceJsonReader(JsonReader innerReader);
    public string GetDeserializedJsonMessage();
    public virtual bool Read();
    public virtual Nullable`1<int> ReadAsInt32();
    public virtual string ReadAsString();
    public virtual Byte[] ReadAsBytes();
    public virtual Nullable`1<decimal> ReadAsDecimal();
    public virtual Nullable`1<double> ReadAsDouble();
    public virtual Nullable`1<bool> ReadAsBoolean();
    public virtual Nullable`1<DateTime> ReadAsDateTime();
    public virtual Nullable`1<DateTimeOffset> ReadAsDateTimeOffset();
    public void WriteCurrentToken();
    public virtual int get_Depth();
    public virtual string get_Path();
    public virtual char get_QuoteChar();
    protected internal virtual void set_QuoteChar(char value);
    public virtual JsonToken get_TokenType();
    public virtual object get_Value();
    public virtual Type get_ValueType();
    public virtual void Close();
    private sealed virtual override bool Microsoft.Identity.Json.IJsonLineInfo.HasLineInfo();
    private sealed virtual override int Microsoft.Identity.Json.IJsonLineInfo.get_LineNumber();
    private sealed virtual override int Microsoft.Identity.Json.IJsonLineInfo.get_LinePosition();
}
internal class Microsoft.Identity.Json.Serialization.TraceJsonWriter : JsonWriter {
    public TraceJsonWriter(JsonWriter innerWriter);
    public string GetSerializedJsonMessage();
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(Nullable`1<decimal> value);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(Nullable`1<bool> value);
    public virtual void WriteValue(byte value);
    public virtual void WriteValue(Nullable`1<byte> value);
    public virtual void WriteValue(char value);
    public virtual void WriteValue(Nullable`1<char> value);
    public virtual void WriteValue(Byte[] value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(Nullable`1<DateTime> value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(Nullable`1<DateTimeOffset> value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(Nullable`1<double> value);
    public virtual void WriteUndefined();
    public virtual void WriteNull();
    public virtual void WriteValue(float value);
    public virtual void WriteValue(Nullable`1<float> value);
    public virtual void WriteValue(Guid value);
    public virtual void WriteValue(Nullable`1<Guid> value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(Nullable`1<int> value);
    public virtual void WriteValue(long value);
    public virtual void WriteValue(Nullable`1<long> value);
    public virtual void WriteValue(object value);
    public virtual void WriteValue(sbyte value);
    public virtual void WriteValue(Nullable`1<sbyte> value);
    public virtual void WriteValue(short value);
    public virtual void WriteValue(Nullable`1<short> value);
    public virtual void WriteValue(string value);
    public virtual void WriteValue(TimeSpan value);
    public virtual void WriteValue(Nullable`1<TimeSpan> value);
    public virtual void WriteValue(UInt32 value);
    public virtual void WriteValue(Nullable`1<UInt32> value);
    public virtual void WriteValue(ulong value);
    public virtual void WriteValue(Nullable`1<ulong> value);
    public virtual void WriteValue(Uri value);
    public virtual void WriteValue(ushort value);
    public virtual void WriteValue(Nullable`1<ushort> value);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteComment(string text);
    public virtual void WriteStartArray();
    public virtual void WriteEndArray();
    public virtual void WriteStartConstructor(string name);
    public virtual void WriteEndConstructor();
    public virtual void WritePropertyName(string name);
    public virtual void WritePropertyName(string name, bool escape);
    public virtual void WriteStartObject();
    public virtual void WriteEndObject();
    public virtual void WriteRawValue(string json);
    public virtual void WriteRaw(string json);
    public virtual void Close();
    public virtual void Flush();
}
[ObsoleteAttribute("SerializationBinder is obsolete. Use ISerializationBinder instead.")]
internal abstract class Microsoft.Identity.Json.SerializationBinder : object {
    public abstract virtual Type BindToType(string assemblyName, string typeName);
    public virtual void BindToName(Type serializedType, String& assemblyName, String& typeName);
}
internal enum Microsoft.Identity.Json.StringEscapeHandling : Enum {
    public int value__;
    public static StringEscapeHandling Default;
    public static StringEscapeHandling EscapeNonAscii;
    public static StringEscapeHandling EscapeHtml;
}
internal enum Microsoft.Identity.Json.TypeNameAssemblyFormatHandling : Enum {
    public int value__;
    public static TypeNameAssemblyFormatHandling Simple;
    public static TypeNameAssemblyFormatHandling Full;
}
[FlagsAttribute]
internal enum Microsoft.Identity.Json.TypeNameHandling : Enum {
    public int value__;
    public static TypeNameHandling None;
    public static TypeNameHandling Objects;
    public static TypeNameHandling Arrays;
    public static TypeNameHandling All;
    public static TypeNameHandling Auto;
}
[ExtensionAttribute]
internal static class Microsoft.Identity.Json.Utilities.AsyncUtils : object {
    public static Task`1<bool> False;
    public static Task`1<bool> True;
    internal static Task CompletedTask;
    [ExtensionAttribute]
internal static Task`1<bool> ToAsync(bool value);
    [ExtensionAttribute]
public static Task CancelIfRequestedAsync(CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> CancelIfRequestedAsync(CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task FromCanceled(CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<T> FromCanceled(CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task WriteAsync(TextWriter writer, char value, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task WriteAsync(TextWriter writer, string value, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task WriteAsync(TextWriter writer, Char[] value, int start, int count, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<int> ReadAsync(TextReader reader, Char[] buffer, int index, int count, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static bool IsCompletedSucessfully(Task task);
}
internal class Microsoft.Identity.Json.Utilities.Base64Encoder : object {
    public Base64Encoder(TextWriter writer);
    public void Encode(Byte[] buffer, int index, int count);
    public void Flush();
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.Utilities.Base64Encoder/<EncodeAsync>d__13")]
public Task EncodeAsync(Byte[] buffer, int index, int count, CancellationToken cancellationToken);
    public Task FlushAsync(CancellationToken cancellationToken);
}
internal class Microsoft.Identity.Json.Utilities.BidirectionalDictionary`2 : object {
    public BidirectionalDictionary`2(IEqualityComparer`1<TFirst> firstEqualityComparer, IEqualityComparer`1<TSecond> secondEqualityComparer);
    public BidirectionalDictionary`2(IEqualityComparer`1<TFirst> firstEqualityComparer, IEqualityComparer`1<TSecond> secondEqualityComparer, string duplicateFirstErrorMessage, string duplicateSecondErrorMessage);
    public void Set(TFirst first, TSecond second);
    public bool TryGetByFirst(TFirst first, TSecond& second);
    public bool TryGetBySecond(TSecond second, TFirst& first);
}
internal static class Microsoft.Identity.Json.Utilities.BufferUtils : object {
    public static Char[] RentBuffer(IArrayPool`1<char> bufferPool, int minSize);
    public static void ReturnBuffer(IArrayPool`1<char> bufferPool, Char[] buffer);
    public static Char[] EnsureBufferSize(IArrayPool`1<char> bufferPool, int size, Char[] buffer);
}
[ExtensionAttribute]
internal static class Microsoft.Identity.Json.Utilities.CollectionUtils : object {
    public static bool IsNullOrEmpty(ICollection`1<T> collection);
    [ExtensionAttribute]
public static void AddRange(IList`1<T> initial, IEnumerable`1<T> collection);
    public static bool IsDictionaryType(Type type);
    public static ConstructorInfo ResolveEnumerableCollectionConstructor(Type collectionType, Type collectionItemType);
    public static ConstructorInfo ResolveEnumerableCollectionConstructor(Type collectionType, Type collectionItemType, Type constructorArgumentType);
    [ExtensionAttribute]
public static bool AddDistinct(IList`1<T> list, T value);
    [ExtensionAttribute]
public static bool AddDistinct(IList`1<T> list, T value, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static bool ContainsValue(IEnumerable`1<TSource> source, TSource value, IEqualityComparer`1<TSource> comparer);
    [ExtensionAttribute]
public static bool AddRangeDistinct(IList`1<T> list, IEnumerable`1<T> values, IEqualityComparer`1<T> comparer);
    [ExtensionAttribute]
public static int IndexOf(IEnumerable`1<T> collection, Func`2<T, bool> predicate);
    [ExtensionAttribute]
public static bool Contains(List`1<T> list, T value, IEqualityComparer comparer);
    [ExtensionAttribute]
public static int IndexOfReference(List`1<T> list, T item);
    [ExtensionAttribute]
public static void FastReverse(List`1<T> list);
    public static Array ToMultidimensionalArray(IList values, Type type, int rank);
    public static T[] ArrayEmpty();
}
internal class Microsoft.Identity.Json.Utilities.CollectionWrapper`1 : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public object UnderlyingCollection { get; }
    public CollectionWrapper`1(IList list);
    public CollectionWrapper`1(ICollection`1<T> list);
    public virtual void Add(T item);
    public virtual void Clear();
    public virtual bool Contains(T item);
    public virtual void CopyTo(T[] array, int arrayIndex);
    public virtual int get_Count();
    public virtual bool get_IsReadOnly();
    public virtual bool Remove(T item);
    public virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int arrayIndex);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual object get_UnderlyingCollection();
}
internal static class Microsoft.Identity.Json.Utilities.ConvertUtils : object {
    public static PrimitiveTypeCode GetTypeCode(Type t);
    public static PrimitiveTypeCode GetTypeCode(Type t, Boolean& isEnum);
    public static TypeInformation GetTypeInformation(IConvertible convertable);
    public static bool IsConvertible(Type t);
    public static TimeSpan ParseTimeSpan(string input);
    internal static BigInteger ToBigInteger(object value);
    public static object FromBigInteger(BigInteger i, Type targetType);
    public static object Convert(object initialValue, CultureInfo culture, Type targetType);
    public static object ConvertOrCast(object initialValue, CultureInfo culture, Type targetType);
    public static bool VersionTryParse(string input, Version& result);
    public static bool IsInteger(object value);
    public static ParseResult Int32TryParse(Char[] chars, int start, int length, Int32& value);
    public static ParseResult Int64TryParse(Char[] chars, int start, int length, Int64& value);
    public static ParseResult DecimalTryParse(Char[] chars, int start, int length, Decimal& value);
    public static bool TryConvertGuid(string s, Guid& g);
    public static bool TryHexTextToInt(Char[] text, int start, int end, Int32& value);
}
internal class Microsoft.Identity.Json.Utilities.Creator`1 : MulticastDelegate {
    public Creator`1(object object, IntPtr method);
    public virtual T Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual T EndInvoke(IAsyncResult result);
}
internal class Microsoft.Identity.Json.Utilities.DateTimeParser : ValueType {
    public int Year;
    public int Month;
    public int Day;
    public int Hour;
    public int Minute;
    public int Second;
    public int Fraction;
    public int ZoneHour;
    public int ZoneMinute;
    public ParserTimeZone Zone;
    private Char[] _text;
    private int _end;
    private static Int32[] Power10;
    private static int Lzyyyy;
    private static int Lzyyyy_;
    private static int Lzyyyy_MM;
    private static int Lzyyyy_MM_;
    private static int Lzyyyy_MM_dd;
    private static int Lzyyyy_MM_ddT;
    private static int LzHH;
    private static int LzHH_;
    private static int LzHH_mm;
    private static int LzHH_mm_;
    private static int LzHH_mm_ss;
    private static int Lz_;
    private static int Lz_zz;
    private static short MaxFractionDigits;
    public bool Parse(Char[] text, int startIndex, int length);
}
[ExtensionAttribute]
internal static class Microsoft.Identity.Json.Utilities.DateTimeUtils : object {
    internal static long InitialJavaScriptDateTicks;
    [ExtensionAttribute]
public static TimeSpan GetUtcOffset(DateTime d);
    public static XmlDateTimeSerializationMode ToSerializationMode(DateTimeKind kind);
    internal static DateTime EnsureDateTime(DateTime value, DateTimeZoneHandling timeZone);
    internal static long ConvertDateTimeToJavaScriptTicks(DateTime dateTime, TimeSpan offset);
    internal static long ConvertDateTimeToJavaScriptTicks(DateTime dateTime);
    internal static long ConvertDateTimeToJavaScriptTicks(DateTime dateTime, bool convertToUtc);
    internal static DateTime ConvertJavaScriptTicksToDateTime(long javaScriptTicks);
    internal static bool TryParseDateTimeIso(StringReference text, DateTimeZoneHandling dateTimeZoneHandling, DateTime& dt);
    internal static bool TryParseDateTimeOffsetIso(StringReference text, DateTimeOffset& dt);
    internal static bool TryParseDateTime(StringReference s, DateTimeZoneHandling dateTimeZoneHandling, string dateFormatString, CultureInfo culture, DateTime& dt);
    internal static bool TryParseDateTime(string s, DateTimeZoneHandling dateTimeZoneHandling, string dateFormatString, CultureInfo culture, DateTime& dt);
    internal static bool TryParseDateTimeOffset(StringReference s, string dateFormatString, CultureInfo culture, DateTimeOffset& dt);
    internal static bool TryParseDateTimeOffset(string s, string dateFormatString, CultureInfo culture, DateTimeOffset& dt);
    internal static void WriteDateTimeString(TextWriter writer, DateTime value, DateFormatHandling format, string formatString, CultureInfo culture);
    internal static int WriteDateTimeString(Char[] chars, int start, DateTime value, Nullable`1<TimeSpan> offset, DateTimeKind kind, DateFormatHandling format);
    internal static int WriteDefaultIsoDate(Char[] chars, int start, DateTime dt);
    internal static int WriteDateTimeOffset(Char[] chars, int start, TimeSpan offset, DateFormatHandling format);
    internal static void WriteDateTimeOffsetString(TextWriter writer, DateTimeOffset value, DateFormatHandling format, string formatString, CultureInfo culture);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Identity.Json.Utilities.DictionaryWrapper`2 : object {
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    public TValue Item { get; public set; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    private object System.Collections.IDictionary.Item { get; private set; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public object UnderlyingDictionary { get; }
    public DictionaryWrapper`2(IDictionary dictionary);
    public DictionaryWrapper`2(IDictionary`2<TKey, TValue> dictionary);
    public DictionaryWrapper`2(IReadOnlyDictionary`2<TKey, TValue> dictionary);
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual ICollection`1<TValue> get_Values();
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    public sealed virtual void Remove(object key);
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual object get_UnderlyingDictionary();
}
internal class Microsoft.Identity.Json.Utilities.DynamicProxy`1 : object {
    public virtual IEnumerable`1<string> GetDynamicMemberNames(T instance);
    public virtual bool TryBinaryOperation(T instance, BinaryOperationBinder binder, object arg, Object& result);
    public virtual bool TryConvert(T instance, ConvertBinder binder, Object& result);
    public virtual bool TryCreateInstance(T instance, CreateInstanceBinder binder, Object[] args, Object& result);
    public virtual bool TryDeleteIndex(T instance, DeleteIndexBinder binder, Object[] indexes);
    public virtual bool TryDeleteMember(T instance, DeleteMemberBinder binder);
    public virtual bool TryGetIndex(T instance, GetIndexBinder binder, Object[] indexes, Object& result);
    public virtual bool TryGetMember(T instance, GetMemberBinder binder, Object& result);
    public virtual bool TryInvoke(T instance, InvokeBinder binder, Object[] args, Object& result);
    public virtual bool TryInvokeMember(T instance, InvokeMemberBinder binder, Object[] args, Object& result);
    public virtual bool TrySetIndex(T instance, SetIndexBinder binder, Object[] indexes, object value);
    public virtual bool TrySetMember(T instance, SetMemberBinder binder, object value);
    public virtual bool TryUnaryOperation(T instance, UnaryOperationBinder binder, Object& result);
}
internal class Microsoft.Identity.Json.Utilities.DynamicProxyMetaObject`1 : DynamicMetaObject {
    internal DynamicProxyMetaObject`1(Expression expression, T value, DynamicProxy`1<T> proxy);
    public virtual DynamicMetaObject BindGetMember(GetMemberBinder binder);
    public virtual DynamicMetaObject BindSetMember(SetMemberBinder binder, DynamicMetaObject value);
    public virtual DynamicMetaObject BindDeleteMember(DeleteMemberBinder binder);
    public virtual DynamicMetaObject BindConvert(ConvertBinder binder);
    public virtual DynamicMetaObject BindInvokeMember(InvokeMemberBinder binder, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindCreateInstance(CreateInstanceBinder binder, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindInvoke(InvokeBinder binder, DynamicMetaObject[] args);
    public virtual DynamicMetaObject BindBinaryOperation(BinaryOperationBinder binder, DynamicMetaObject arg);
    public virtual DynamicMetaObject BindUnaryOperation(UnaryOperationBinder binder);
    public virtual DynamicMetaObject BindGetIndex(GetIndexBinder binder, DynamicMetaObject[] indexes);
    public virtual DynamicMetaObject BindSetIndex(SetIndexBinder binder, DynamicMetaObject[] indexes, DynamicMetaObject value);
    public virtual DynamicMetaObject BindDeleteIndex(DeleteIndexBinder binder, DynamicMetaObject[] indexes);
    public virtual IEnumerable`1<string> GetDynamicMemberNames();
}
internal class Microsoft.Identity.Json.Utilities.DynamicReflectionDelegateFactory : ReflectionDelegateFactory {
    internal static DynamicReflectionDelegateFactory Instance { get; }
    [CompilerGeneratedAttribute]
internal static DynamicReflectionDelegateFactory get_Instance();
    public virtual ObjectConstructor`1<object> CreateParameterizedConstructor(MethodBase method);
    public virtual MethodCall`2<T, object> CreateMethodCall(MethodBase method);
    public virtual Func`1<T> CreateDefaultConstructor(Type type);
    public virtual Func`2<T, object> CreateGet(PropertyInfo propertyInfo);
    public virtual Func`2<T, object> CreateGet(FieldInfo fieldInfo);
    public virtual Action`2<T, object> CreateSet(FieldInfo fieldInfo);
    internal static void GenerateCreateSetFieldIL(FieldInfo fieldInfo, ILGenerator generator);
    public virtual Action`2<T, object> CreateSet(PropertyInfo propertyInfo);
    internal static void GenerateCreateSetPropertyIL(PropertyInfo propertyInfo, ILGenerator generator);
}
[ExtensionAttribute]
internal static class Microsoft.Identity.Json.Utilities.DynamicUtils : object {
    [ExtensionAttribute]
public static IEnumerable`1<string> GetDynamicMemberNames(IDynamicMetaObjectProvider dynamicProvider);
}
internal class Microsoft.Identity.Json.Utilities.EnumInfo : object {
    public bool IsFlags;
    public UInt64[] Values;
    public String[] Names;
    public String[] ResolvedNames;
    public EnumInfo(bool isFlags, UInt64[] values, String[] names, String[] resolvedNames);
}
internal static class Microsoft.Identity.Json.Utilities.EnumUtils : object {
    public static IList`1<T> GetFlagsValues(T value);
    public static bool TryToString(Type enumType, object value, NamingStrategy namingStrategy, String& name);
    public static EnumInfo GetEnumValuesAndNames(Type enumType);
    public static object ParseEnum(Type enumType, NamingStrategy namingStrategy, string value, bool disallowNumber);
}
internal class Microsoft.Identity.Json.Utilities.ExpressionReflectionDelegateFactory : ReflectionDelegateFactory {
    internal static ReflectionDelegateFactory Instance { get; }
    internal static ReflectionDelegateFactory get_Instance();
    public virtual ObjectConstructor`1<object> CreateParameterizedConstructor(MethodBase method);
    public virtual MethodCall`2<T, object> CreateMethodCall(MethodBase method);
    public virtual Func`1<T> CreateDefaultConstructor(Type type);
    public virtual Func`2<T, object> CreateGet(PropertyInfo propertyInfo);
    public virtual Func`2<T, object> CreateGet(FieldInfo fieldInfo);
    public virtual Action`2<T, object> CreateSet(FieldInfo fieldInfo);
    public virtual Action`2<T, object> CreateSet(PropertyInfo propertyInfo);
}
internal class Microsoft.Identity.Json.Utilities.FSharpFunction : object {
    public FSharpFunction(object instance, MethodCall`2<object, object> invoker);
    public object Invoke(Object[] args);
}
internal static class Microsoft.Identity.Json.Utilities.FSharpUtils : object {
    public static string FSharpSetTypeName;
    public static string FSharpListTypeName;
    public static string FSharpMapTypeName;
    public static Assembly FSharpCoreAssembly { get; }
    public static MethodCall`2<object, object> IsUnion { get; }
    public static MethodCall`2<object, object> GetUnionCases { get; }
    public static MethodCall`2<object, object> PreComputeUnionTagReader { get; }
    public static MethodCall`2<object, object> PreComputeUnionReader { get; }
    public static MethodCall`2<object, object> PreComputeUnionConstructor { get; }
    public static Func`2<object, object> GetUnionCaseInfoDeclaringType { get; }
    public static Func`2<object, object> GetUnionCaseInfoName { get; }
    public static Func`2<object, object> GetUnionCaseInfoTag { get; }
    public static MethodCall`2<object, object> GetUnionCaseInfoFields { get; }
    [CompilerGeneratedAttribute]
public static Assembly get_FSharpCoreAssembly();
    [CompilerGeneratedAttribute]
public static MethodCall`2<object, object> get_IsUnion();
    [CompilerGeneratedAttribute]
public static MethodCall`2<object, object> get_GetUnionCases();
    [CompilerGeneratedAttribute]
public static MethodCall`2<object, object> get_PreComputeUnionTagReader();
    [CompilerGeneratedAttribute]
public static MethodCall`2<object, object> get_PreComputeUnionReader();
    [CompilerGeneratedAttribute]
public static MethodCall`2<object, object> get_PreComputeUnionConstructor();
    [CompilerGeneratedAttribute]
public static Func`2<object, object> get_GetUnionCaseInfoDeclaringType();
    [CompilerGeneratedAttribute]
public static Func`2<object, object> get_GetUnionCaseInfoName();
    [CompilerGeneratedAttribute]
public static Func`2<object, object> get_GetUnionCaseInfoTag();
    [CompilerGeneratedAttribute]
public static MethodCall`2<object, object> get_GetUnionCaseInfoFields();
    public static void EnsureInitialized(Assembly fsharpCoreAssembly);
    public static ObjectConstructor`1<object> CreateSeq(Type t);
    public static ObjectConstructor`1<object> CreateMap(Type keyType, Type valueType);
    public static ObjectConstructor`1<object> BuildMapCreator();
}
[ExtensionAttribute]
internal static class Microsoft.Identity.Json.Utilities.ILGeneratorExtensions : object {
    [ExtensionAttribute]
public static void PushInstance(ILGenerator generator, Type type);
    [ExtensionAttribute]
public static void PushArrayInstance(ILGenerator generator, int argsIndex, int arrayIndex);
    [ExtensionAttribute]
public static void BoxIfNeeded(ILGenerator generator, Type type);
    [ExtensionAttribute]
public static void UnboxIfNeeded(ILGenerator generator, Type type);
    [ExtensionAttribute]
public static void CallMethod(ILGenerator generator, MethodInfo methodInfo);
    [ExtensionAttribute]
public static void Return(ILGenerator generator);
}
internal static class Microsoft.Identity.Json.Utilities.ImmutableCollectionsUtils : object {
    internal static bool TryBuildImmutableForArrayContract(Type underlyingType, Type collectionItemType, Type& createdType, ObjectConstructor`1& parameterizedCreator);
    internal static bool TryBuildImmutableForDictionaryContract(Type underlyingType, Type keyItemType, Type valueItemType, Type& createdType, ObjectConstructor`1& parameterizedCreator);
}
internal interface Microsoft.Identity.Json.Utilities.IWrappedCollection {
    public object UnderlyingCollection { get; }
    public abstract virtual object get_UnderlyingCollection();
}
internal interface Microsoft.Identity.Json.Utilities.IWrappedDictionary {
    public object UnderlyingDictionary { get; }
    public abstract virtual object get_UnderlyingDictionary();
}
internal static class Microsoft.Identity.Json.Utilities.JavaScriptUtils : object {
    internal static Boolean[] SingleQuoteCharEscapeFlags;
    internal static Boolean[] DoubleQuoteCharEscapeFlags;
    internal static Boolean[] HtmlCharEscapeFlags;
    public static Boolean[] GetCharEscapeFlags(StringEscapeHandling stringEscapeHandling, char quoteChar);
    public static bool ShouldEscapeJavaScriptString(string s, Boolean[] charEscapeFlags);
    public static void WriteEscapedJavaScriptString(TextWriter writer, string s, char delimiter, bool appendDelimiters, Boolean[] charEscapeFlags, StringEscapeHandling stringEscapeHandling, IArrayPool`1<char> bufferPool, Char[]& writeBuffer);
    public static string ToEscapedJavaScriptString(string value, char delimiter, bool appendDelimiters, StringEscapeHandling stringEscapeHandling);
    public static Task WriteEscapedJavaScriptStringAsync(TextWriter writer, string s, char delimiter, bool appendDelimiters, Boolean[] charEscapeFlags, StringEscapeHandling stringEscapeHandling, JsonTextWriter client, Char[] writeBuffer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.Identity.Json.Utilities.JavaScriptUtils/<WriteCharAsync>d__14")]
public static Task WriteCharAsync(Task task, TextWriter writer, char c, CancellationToken cancellationToken);
    public static bool TryGetDateFromConstructorJson(JsonReader reader, DateTime& dateTime, String& errorMessage);
}
internal static class Microsoft.Identity.Json.Utilities.JsonTokenUtils : object {
    internal static bool IsEndToken(JsonToken token);
    internal static bool IsStartToken(JsonToken token);
    internal static bool IsPrimitiveToken(JsonToken token);
}
internal class Microsoft.Identity.Json.Utilities.LateBoundReflectionDelegateFactory : ReflectionDelegateFactory {
    internal static ReflectionDelegateFactory Instance { get; }
    internal static ReflectionDelegateFactory get_Instance();
    public virtual ObjectConstructor`1<object> CreateParameterizedConstructor(MethodBase method);
    public virtual MethodCall`2<T, object> CreateMethodCall(MethodBase method);
    public virtual Func`1<T> CreateDefaultConstructor(Type type);
    public virtual Func`2<T, object> CreateGet(PropertyInfo propertyInfo);
    public virtual Func`2<T, object> CreateGet(FieldInfo fieldInfo);
    public virtual Action`2<T, object> CreateSet(FieldInfo fieldInfo);
    public virtual Action`2<T, object> CreateSet(PropertyInfo propertyInfo);
}
internal static class Microsoft.Identity.Json.Utilities.MathUtils : object {
    public static int IntLength(ulong i);
    public static char IntToHex(int n);
    public static Nullable`1<int> Min(Nullable`1<int> val1, Nullable`1<int> val2);
    public static Nullable`1<int> Max(Nullable`1<int> val1, Nullable`1<int> val2);
    public static Nullable`1<double> Max(Nullable`1<double> val1, Nullable`1<double> val2);
    public static bool ApproxEquals(double d1, double d2);
}
internal class Microsoft.Identity.Json.Utilities.MethodCall`2 : MulticastDelegate {
    public MethodCall`2(object object, IntPtr method);
    public virtual TResult Invoke(T target, Object[] args);
    public virtual IAsyncResult BeginInvoke(T target, Object[] args, AsyncCallback callback, object object);
    public virtual TResult EndInvoke(IAsyncResult result);
}
internal static class Microsoft.Identity.Json.Utilities.MiscellaneousUtils : object {
    public static bool ValueEquals(object objA, object objB);
    public static ArgumentOutOfRangeException CreateArgumentOutOfRangeException(string paramName, object actualValue, string message);
    public static string ToString(object value);
    public static int ByteArrayCompare(Byte[] a1, Byte[] a2);
    public static string GetPrefix(string qualifiedName);
    public static string GetLocalName(string qualifiedName);
    public static void GetQualifiedNameParts(string qualifiedName, String& prefix, String& localName);
    internal static RegexOptions GetRegexOptions(string optionsText);
}
internal class Microsoft.Identity.Json.Utilities.NoThrowExpressionVisitor : ExpressionVisitor {
    internal static object ErrorResult;
    protected virtual Expression VisitConditional(ConditionalExpression node);
}
internal class Microsoft.Identity.Json.Utilities.NoThrowGetBinderMember : GetMemberBinder {
    public NoThrowGetBinderMember(GetMemberBinder innerBinder);
    public virtual DynamicMetaObject FallbackGetMember(DynamicMetaObject target, DynamicMetaObject errorSuggestion);
}
internal class Microsoft.Identity.Json.Utilities.NoThrowSetBinderMember : SetMemberBinder {
    public NoThrowSetBinderMember(SetMemberBinder innerBinder);
    public virtual DynamicMetaObject FallbackSetMember(DynamicMetaObject target, DynamicMetaObject value, DynamicMetaObject errorSuggestion);
}
internal enum Microsoft.Identity.Json.Utilities.ParseResult : Enum {
    public int value__;
    public static ParseResult None;
    public static ParseResult Success;
    public static ParseResult Overflow;
    public static ParseResult Invalid;
}
internal enum Microsoft.Identity.Json.Utilities.ParserTimeZone : Enum {
    public int value__;
    public static ParserTimeZone Unspecified;
    public static ParserTimeZone Utc;
    public static ParserTimeZone LocalWestOfUtc;
    public static ParserTimeZone LocalEastOfUtc;
}
internal enum Microsoft.Identity.Json.Utilities.PrimitiveTypeCode : Enum {
    public int value__;
    public static PrimitiveTypeCode Empty;
    public static PrimitiveTypeCode Object;
    public static PrimitiveTypeCode Char;
    public static PrimitiveTypeCode CharNullable;
    public static PrimitiveTypeCode Boolean;
    public static PrimitiveTypeCode BooleanNullable;
    public static PrimitiveTypeCode SByte;
    public static PrimitiveTypeCode SByteNullable;
    public static PrimitiveTypeCode Int16;
    public static PrimitiveTypeCode Int16Nullable;
    public static PrimitiveTypeCode UInt16;
    public static PrimitiveTypeCode UInt16Nullable;
    public static PrimitiveTypeCode Int32;
    public static PrimitiveTypeCode Int32Nullable;
    public static PrimitiveTypeCode Byte;
    public static PrimitiveTypeCode ByteNullable;
    public static PrimitiveTypeCode UInt32;
    public static PrimitiveTypeCode UInt32Nullable;
    public static PrimitiveTypeCode Int64;
    public static PrimitiveTypeCode Int64Nullable;
    public static PrimitiveTypeCode UInt64;
    public static PrimitiveTypeCode UInt64Nullable;
    public static PrimitiveTypeCode Single;
    public static PrimitiveTypeCode SingleNullable;
    public static PrimitiveTypeCode Double;
    public static PrimitiveTypeCode DoubleNullable;
    public static PrimitiveTypeCode DateTime;
    public static PrimitiveTypeCode DateTimeNullable;
    public static PrimitiveTypeCode DateTimeOffset;
    public static PrimitiveTypeCode DateTimeOffsetNullable;
    public static PrimitiveTypeCode Decimal;
    public static PrimitiveTypeCode DecimalNullable;
    public static PrimitiveTypeCode Guid;
    public static PrimitiveTypeCode GuidNullable;
    public static PrimitiveTypeCode TimeSpan;
    public static PrimitiveTypeCode TimeSpanNullable;
    public static PrimitiveTypeCode BigInteger;
    public static PrimitiveTypeCode BigIntegerNullable;
    public static PrimitiveTypeCode Uri;
    public static PrimitiveTypeCode String;
    public static PrimitiveTypeCode Bytes;
    public static PrimitiveTypeCode DBNull;
}
internal abstract class Microsoft.Identity.Json.Utilities.ReflectionDelegateFactory : object {
    public Func`2<T, object> CreateGet(MemberInfo memberInfo);
    public Action`2<T, object> CreateSet(MemberInfo memberInfo);
    public abstract virtual MethodCall`2<T, object> CreateMethodCall(MethodBase method);
    public abstract virtual ObjectConstructor`1<object> CreateParameterizedConstructor(MethodBase method);
    public abstract virtual Func`1<T> CreateDefaultConstructor(Type type);
    public abstract virtual Func`2<T, object> CreateGet(PropertyInfo propertyInfo);
    public abstract virtual Func`2<T, object> CreateGet(FieldInfo fieldInfo);
    public abstract virtual Action`2<T, object> CreateSet(FieldInfo fieldInfo);
    public abstract virtual Action`2<T, object> CreateSet(PropertyInfo propertyInfo);
}
internal class Microsoft.Identity.Json.Utilities.ReflectionMember : object {
    public Type MemberType { get; public set; }
    public Func`2<object, object> Getter { get; public set; }
    public Action`2<object, object> Setter { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_MemberType();
    [CompilerGeneratedAttribute]
public void set_MemberType(Type value);
    [CompilerGeneratedAttribute]
public Func`2<object, object> get_Getter();
    [CompilerGeneratedAttribute]
public void set_Getter(Func`2<object, object> value);
    [CompilerGeneratedAttribute]
public Action`2<object, object> get_Setter();
    [CompilerGeneratedAttribute]
public void set_Setter(Action`2<object, object> value);
}
internal class Microsoft.Identity.Json.Utilities.ReflectionObject : object {
    public ObjectConstructor`1<object> Creator { get; }
    public IDictionary`2<string, ReflectionMember> Members { get; }
    [CompilerGeneratedAttribute]
public ObjectConstructor`1<object> get_Creator();
    [CompilerGeneratedAttribute]
public IDictionary`2<string, ReflectionMember> get_Members();
    public object GetValue(object target, string member);
    public void SetValue(object target, string member, object value);
    public Type GetType(string member);
    public static ReflectionObject Create(Type t, String[] memberNames);
    public static ReflectionObject Create(Type t, MethodBase creator, String[] memberNames);
}
[ExtensionAttribute]
internal static class Microsoft.Identity.Json.Utilities.ReflectionUtils : object {
    public static Type[] EmptyTypes;
    [ExtensionAttribute]
public static bool IsVirtual(PropertyInfo propertyInfo);
    [ExtensionAttribute]
public static MethodInfo GetBaseDefinition(PropertyInfo propertyInfo);
    public static bool IsPublic(PropertyInfo property);
    public static Type GetObjectType(object v);
    public static string GetTypeName(Type t, TypeNameAssemblyFormatHandling assemblyFormat, ISerializationBinder binder);
    public static bool HasDefaultConstructor(Type t, bool nonPublic);
    public static ConstructorInfo GetDefaultConstructor(Type t);
    public static ConstructorInfo GetDefaultConstructor(Type t, bool nonPublic);
    public static bool IsNullable(Type t);
    public static bool IsNullableType(Type t);
    public static Type EnsureNotNullableType(Type t);
    public static Type EnsureNotByRefType(Type t);
    public static bool IsGenericDefinition(Type type, Type genericInterfaceDefinition);
    public static bool ImplementsGenericDefinition(Type type, Type genericInterfaceDefinition);
    public static bool ImplementsGenericDefinition(Type type, Type genericInterfaceDefinition, Type& implementingType);
    public static bool InheritsGenericDefinition(Type type, Type genericClassDefinition);
    public static bool InheritsGenericDefinition(Type type, Type genericClassDefinition, Type& implementingType);
    public static Type GetCollectionItemType(Type type);
    public static void GetDictionaryKeyValueTypes(Type dictionaryType, Type& keyType, Type& valueType);
    public static Type GetMemberUnderlyingType(MemberInfo member);
    public static bool IsIndexedProperty(MemberInfo member);
    public static bool IsIndexedProperty(PropertyInfo property);
    public static object GetMemberValue(MemberInfo member, object target);
    public static void SetMemberValue(MemberInfo member, object target, object value);
    public static bool CanReadMemberValue(MemberInfo member, bool nonPublic);
    public static bool CanSetMemberValue(MemberInfo member, bool nonPublic, bool canSetReadOnly);
    public static List`1<MemberInfo> GetFieldsAndProperties(Type type, BindingFlags bindingAttr);
    public static T GetAttribute(object attributeProvider);
    public static T GetAttribute(object attributeProvider, bool inherit);
    public static T[] GetAttributes(object attributeProvider, bool inherit);
    public static Attribute[] GetAttributes(object attributeProvider, Type attributeType, bool inherit);
    public static StructMultiKey`2<string, string> SplitFullyQualifiedTypeName(string fullyQualifiedTypeName);
    public static MemberInfo GetMemberInfoFromType(Type targetType, MemberInfo memberInfo);
    public static IEnumerable`1<FieldInfo> GetFields(Type targetType, BindingFlags bindingAttr);
    public static IEnumerable`1<PropertyInfo> GetProperties(Type targetType, BindingFlags bindingAttr);
    [ExtensionAttribute]
public static BindingFlags RemoveFlag(BindingFlags bindingAttr, BindingFlags flag);
    public static bool IsMethodOverridden(Type currentType, Type methodDeclaringType, string method);
    public static object GetDefaultValue(Type type);
}
internal class Microsoft.Identity.Json.Utilities.StringBuffer : ValueType {
    private Char[] _buffer;
    private int _position;
    public int Position { get; public set; }
    public bool IsEmpty { get; }
    public Char[] InternalBuffer { get; }
    public StringBuffer(IArrayPool`1<char> bufferPool, int initalSize);
    public int get_Position();
    public void set_Position(int value);
    public bool get_IsEmpty();
    public void Append(IArrayPool`1<char> bufferPool, char value);
    public void Append(IArrayPool`1<char> bufferPool, Char[] buffer, int startIndex, int count);
    public void Clear(IArrayPool`1<char> bufferPool);
    public virtual string ToString();
    public string ToString(int start, int length);
    public Char[] get_InternalBuffer();
}
[IsReadOnlyAttribute]
[DefaultMemberAttribute("Item")]
internal class Microsoft.Identity.Json.Utilities.StringReference : ValueType {
    private Char[] _chars;
    private int _startIndex;
    private int _length;
    public char Item { get; }
    public Char[] Chars { get; }
    public int StartIndex { get; }
    public int Length { get; }
    public StringReference(Char[] chars, int startIndex, int length);
    public char get_Item(int i);
    public Char[] get_Chars();
    public int get_StartIndex();
    public int get_Length();
    public virtual string ToString();
}
[ExtensionAttribute]
internal static class Microsoft.Identity.Json.Utilities.StringReferenceExtensions : object {
    [ExtensionAttribute]
public static int IndexOf(StringReference s, char c, int startIndex, int length);
    [ExtensionAttribute]
public static bool StartsWith(StringReference s, string text);
    [ExtensionAttribute]
public static bool EndsWith(StringReference s, string text);
}
[ExtensionAttribute]
internal static class Microsoft.Identity.Json.Utilities.StringUtils : object {
    public static string CarriageReturnLineFeed;
    public static string Empty;
    public static char CarriageReturn;
    public static char LineFeed;
    public static char Tab;
    [ExtensionAttribute]
public static string FormatWith(string format, IFormatProvider provider, object arg0);
    [ExtensionAttribute]
public static string FormatWith(string format, IFormatProvider provider, object arg0, object arg1);
    [ExtensionAttribute]
public static string FormatWith(string format, IFormatProvider provider, object arg0, object arg1, object arg2);
    [ExtensionAttribute]
public static string FormatWith(string format, IFormatProvider provider, object arg0, object arg1, object arg2, object arg3);
    public static bool IsWhiteSpace(string s);
    public static StringWriter CreateStringWriter(int capacity);
    public static void ToCharAsUnicode(char c, Char[] buffer);
    [ExtensionAttribute]
public static TSource ForgivingCaseSensitiveFind(IEnumerable`1<TSource> source, Func`2<TSource, string> valueSelector, string testValue);
    public static string ToCamelCase(string s);
    public static string ToSnakeCase(string s);
    public static bool IsHighSurrogate(char c);
    public static bool IsLowSurrogate(char c);
    [ExtensionAttribute]
public static bool StartsWith(string source, char value);
    [ExtensionAttribute]
public static bool EndsWith(string source, char value);
    [ExtensionAttribute]
public static string Trim(string s, int start, int length);
}
[IsReadOnlyAttribute]
internal class Microsoft.Identity.Json.Utilities.StructMultiKey`2 : ValueType {
    public T1 Value1;
    public T2 Value2;
    public StructMultiKey`2(T1 v1, T2 v2);
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(StructMultiKey`2<T1, T2> other);
}
internal class Microsoft.Identity.Json.Utilities.ThreadSafeStore`2 : object {
    public ThreadSafeStore`2(Func`2<TKey, TValue> creator);
    public TValue Get(TKey key);
}
[ExtensionAttribute]
internal static class Microsoft.Identity.Json.Utilities.TypeExtensions : object {
    [ExtensionAttribute]
public static MethodInfo Method(Delegate d);
    [ExtensionAttribute]
public static MemberTypes MemberType(MemberInfo memberInfo);
    [ExtensionAttribute]
public static bool ContainsGenericParameters(Type type);
    [ExtensionAttribute]
public static bool IsInterface(Type type);
    [ExtensionAttribute]
public static bool IsGenericType(Type type);
    [ExtensionAttribute]
public static bool IsGenericTypeDefinition(Type type);
    [ExtensionAttribute]
public static Type BaseType(Type type);
    [ExtensionAttribute]
public static Assembly Assembly(Type type);
    [ExtensionAttribute]
public static bool IsEnum(Type type);
    [ExtensionAttribute]
public static bool IsClass(Type type);
    [ExtensionAttribute]
public static bool IsSealed(Type type);
    [ExtensionAttribute]
public static bool IsAbstract(Type type);
    [ExtensionAttribute]
public static bool IsVisible(Type type);
    [ExtensionAttribute]
public static bool IsValueType(Type type);
    [ExtensionAttribute]
public static bool IsPrimitive(Type type);
    [ExtensionAttribute]
public static bool AssignableToTypeName(Type type, string fullTypeName, bool searchInterfaces, Type& match);
    [ExtensionAttribute]
public static bool AssignableToTypeName(Type type, string fullTypeName, bool searchInterfaces);
    [ExtensionAttribute]
public static bool ImplementInterface(Type type, Type interfaceType);
}
internal class Microsoft.Identity.Json.Utilities.TypeInformation : object {
    public Type Type { get; public set; }
    public PrimitiveTypeCode TypeCode { get; public set; }
    [CompilerGeneratedAttribute]
public Type get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(Type value);
    [CompilerGeneratedAttribute]
public PrimitiveTypeCode get_TypeCode();
    [CompilerGeneratedAttribute]
public void set_TypeCode(PrimitiveTypeCode value);
}
internal static class Microsoft.Identity.Json.Utilities.ValidationUtils : object {
    public static void ArgumentNotNull(object value, string parameterName);
}
internal enum Microsoft.Identity.Json.WriteState : Enum {
    public int value__;
    public static WriteState Error;
    public static WriteState Closed;
    public static WriteState Object;
    public static WriteState Array;
    public static WriteState Constructor;
    public static WriteState Property;
    public static WriteState Start;
}
