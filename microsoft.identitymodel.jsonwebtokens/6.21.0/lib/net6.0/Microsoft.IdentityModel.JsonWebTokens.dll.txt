public static class Microsoft.IdentityModel.JsonWebTokens.JsonClaimValueTypes : object {
    public static string Json;
    public static string JsonArray;
    public static string JsonNull;
}
public class Microsoft.IdentityModel.JsonWebTokens.JsonWebToken : SecurityToken {
    [CompilerGeneratedAttribute]
private string <AuthenticationTag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ciphertext>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncryptedKey>k__BackingField;
    [CompilerGeneratedAttribute]
private JObject <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InitializationVector>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonWebToken <InnerToken>k__BackingField;
    [CompilerGeneratedAttribute]
private JObject <Payload>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncodedHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncodedPayload>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncodedSignature>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncodedToken>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityKey <SecurityKey>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityKey <SigningKey>k__BackingField;
    public string Actor { get; }
    public string Alg { get; }
    public IEnumerable`1<string> Audiences { get; }
    public string AuthenticationTag { get; private set; }
    public string Ciphertext { get; private set; }
    public IEnumerable`1<Claim> Claims { get; }
    public string Cty { get; }
    public string Enc { get; }
    public string EncryptedKey { get; private set; }
    internal JObject Header { get; private set; }
    public string Id { get; }
    public string InitializationVector { get; private set; }
    public JsonWebToken InnerToken { get; internal set; }
    public DateTime IssuedAt { get; }
    public string Issuer { get; }
    public string Kid { get; }
    internal JObject Payload { get; private set; }
    public string EncodedHeader { get; internal set; }
    public string EncodedPayload { get; internal set; }
    public string EncodedSignature { get; internal set; }
    public string EncodedToken { get; private set; }
    public SecurityKey SecurityKey { get; }
    public SecurityKey SigningKey { get; public set; }
    public string Subject { get; }
    public string Typ { get; }
    public DateTime ValidFrom { get; }
    public DateTime ValidTo { get; }
    public string X5t { get; }
    public string Zip { get; }
    public JsonWebToken(string jwtEncodedString);
    public JsonWebToken(string header, string payload);
    public string get_Actor();
    public string get_Alg();
    public IEnumerable`1<string> get_Audiences();
    [CompilerGeneratedAttribute]
public string get_AuthenticationTag();
    [CompilerGeneratedAttribute]
private void set_AuthenticationTag(string value);
    [CompilerGeneratedAttribute]
public string get_Ciphertext();
    [CompilerGeneratedAttribute]
private void set_Ciphertext(string value);
    public virtual IEnumerable`1<Claim> get_Claims();
    public string get_Cty();
    public string get_Enc();
    [CompilerGeneratedAttribute]
public string get_EncryptedKey();
    [CompilerGeneratedAttribute]
private void set_EncryptedKey(string value);
    [CompilerGeneratedAttribute]
internal JObject get_Header();
    [CompilerGeneratedAttribute]
private void set_Header(JObject value);
    public virtual string get_Id();
    [CompilerGeneratedAttribute]
public string get_InitializationVector();
    [CompilerGeneratedAttribute]
private void set_InitializationVector(string value);
    [CompilerGeneratedAttribute]
public JsonWebToken get_InnerToken();
    [CompilerGeneratedAttribute]
internal void set_InnerToken(JsonWebToken value);
    public DateTime get_IssuedAt();
    public virtual string get_Issuer();
    public string get_Kid();
    [CompilerGeneratedAttribute]
internal JObject get_Payload();
    [CompilerGeneratedAttribute]
private void set_Payload(JObject value);
    [CompilerGeneratedAttribute]
public string get_EncodedHeader();
    [CompilerGeneratedAttribute]
internal void set_EncodedHeader(string value);
    [CompilerGeneratedAttribute]
public string get_EncodedPayload();
    [CompilerGeneratedAttribute]
internal void set_EncodedPayload(string value);
    [CompilerGeneratedAttribute]
public string get_EncodedSignature();
    [CompilerGeneratedAttribute]
internal void set_EncodedSignature(string value);
    [CompilerGeneratedAttribute]
public string get_EncodedToken();
    [CompilerGeneratedAttribute]
private void set_EncodedToken(string value);
    [CompilerGeneratedAttribute]
public virtual SecurityKey get_SecurityKey();
    [CompilerGeneratedAttribute]
public virtual void set_SigningKey(SecurityKey value);
    [CompilerGeneratedAttribute]
public virtual SecurityKey get_SigningKey();
    public string get_Subject();
    public string get_Typ();
    public virtual DateTime get_ValidFrom();
    public virtual DateTime get_ValidTo();
    public string get_X5t();
    public string get_Zip();
    private void Decode(String[] tokenParts, string rawData);
    private static void AddClaimsFromJToken(List`1<Claim> claims, string claimType, JToken jtoken, string issuer);
    private static void AddDefaultClaimFromJToken(List`1<Claim> claims, string claimType, JToken jtoken, string issuer);
    private void DecodeJwe(String[] tokenParts);
    private void DecodeJws(String[] tokenParts);
    private static string GetClaimValueType(object obj);
    public Claim GetClaim(string key);
    public T GetPayloadValue(string key);
    public bool TryGetClaim(string key, Claim& value);
    public bool TryGetPayloadValue(string key, T& value);
    public T GetHeaderValue(string key);
    public bool TryGetHeaderValue(string key, T& value);
}
public class Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler : TokenHandler {
    public static string Base64UrlEncodedUnsignedJWSHeader;
    public Type TokenType { get; }
    public bool CanValidateToken { get; }
    public Type get_TokenType();
    internal static IDictionary`2<string, object> AddCtyClaimDefaultValue(IDictionary`2<string, object> additionalClaims, bool setDefaultCtyClaim);
    public virtual bool CanReadToken(string token);
    public virtual bool get_CanValidateToken();
    private static JObject CreateDefaultJWEHeader(EncryptingCredentials encryptingCredentials, string compressionAlgorithm, string tokenType);
    private static JObject CreateDefaultJWSHeader(SigningCredentials signingCredentials, string tokenType);
    public virtual string CreateToken(string payload);
    public virtual string CreateToken(string payload, IDictionary`2<string, object> additionalHeaderClaims);
    public virtual string CreateToken(string payload, SigningCredentials signingCredentials);
    public virtual string CreateToken(string payload, SigningCredentials signingCredentials, IDictionary`2<string, object> additionalHeaderClaims);
    public virtual string CreateToken(SecurityTokenDescriptor tokenDescriptor);
    public virtual string CreateToken(string payload, EncryptingCredentials encryptingCredentials);
    public virtual string CreateToken(string payload, EncryptingCredentials encryptingCredentials, IDictionary`2<string, object> additionalHeaderClaims);
    public virtual string CreateToken(string payload, SigningCredentials signingCredentials, EncryptingCredentials encryptingCredentials);
    public virtual string CreateToken(string payload, SigningCredentials signingCredentials, EncryptingCredentials encryptingCredentials, IDictionary`2<string, object> additionalHeaderClaims);
    public virtual string CreateToken(string payload, EncryptingCredentials encryptingCredentials, string compressionAlgorithm);
    public virtual string CreateToken(string payload, SigningCredentials signingCredentials, EncryptingCredentials encryptingCredentials, string compressionAlgorithm);
    public virtual string CreateToken(string payload, SigningCredentials signingCredentials, EncryptingCredentials encryptingCredentials, string compressionAlgorithm, IDictionary`2<string, object> additionalHeaderClaims, IDictionary`2<string, object> additionalInnerHeaderClaims);
    public virtual string CreateToken(string payload, SigningCredentials signingCredentials, EncryptingCredentials encryptingCredentials, string compressionAlgorithm, IDictionary`2<string, object> additionalHeaderClaims);
    private string CreateTokenPrivate(string payload, SigningCredentials signingCredentials, EncryptingCredentials encryptingCredentials, string compressionAlgorithm, IDictionary`2<string, object> additionalHeaderClaims, IDictionary`2<string, object> additionalInnerHeaderClaims, string tokenType);
    private static Byte[] CompressToken(string token, string compressionAlgorithm);
    private static StringComparison GetStringComparisonRuleIf509(SecurityKey securityKey);
    private static StringComparison GetStringComparisonRuleIf509OrECDsa(SecurityKey securityKey);
    protected virtual ClaimsIdentity CreateClaimsIdentity(JsonWebToken jwtToken, TokenValidationParameters validationParameters);
    private ClaimsIdentity CreateClaimsIdentity(JsonWebToken jwtToken, TokenValidationParameters validationParameters, string actualIssuer);
    public string DecryptToken(JsonWebToken jwtToken, TokenValidationParameters validationParameters);
    public string EncryptToken(string innerJwt, EncryptingCredentials encryptingCredentials);
    public string EncryptToken(string innerJwt, EncryptingCredentials encryptingCredentials, IDictionary`2<string, object> additionalHeaderClaims);
    public string EncryptToken(string innerJwt, EncryptingCredentials encryptingCredentials, string algorithm);
    public string EncryptToken(string innerJwt, EncryptingCredentials encryptingCredentials, string algorithm, IDictionary`2<string, object> additionalHeaderClaims);
    private static string EncryptTokenPrivate(string innerJwt, EncryptingCredentials encryptingCredentials, string compressionAlgorithm, IDictionary`2<string, object> additionalHeaderClaims, string tokenType);
    internal IEnumerable`1<SecurityKey> GetContentEncryptionKeys(JsonWebToken jwtToken, TokenValidationParameters validationParameters);
    protected virtual SecurityKey ResolveTokenDecryptionKey(string token, JsonWebToken jwtToken, TokenValidationParameters validationParameters);
    public virtual JsonWebToken ReadJsonWebToken(string token);
    public virtual SecurityToken ReadToken(string token);
    public virtual TokenValidationResult ValidateToken(string token, TokenValidationParameters validationParameters);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler/<ValidateTokenAsync>d__39")]
public virtual Task`1<TokenValidationResult> ValidateTokenAsync(string token, TokenValidationParameters validationParameters);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler/<ValidateTokenAsync>d__40")]
private Task`1<TokenValidationResult> ValidateTokenAsync(string token, JsonWebToken outerToken, string decryptedJwt, TokenValidationParameters validationParameters);
    private TokenValidationResult ValidateJWS(string token, TokenValidationParameters validationParameters, BaseConfiguration configuration);
    private TokenValidationResult ValidateJWE(JsonWebToken jwtToken, string decryptedJwt, TokenValidationParameters validationParameters, BaseConfiguration configuration);
    private TokenValidationResult ValidateTokenPayload(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration);
    private static JsonWebToken ValidateSignature(string token, TokenValidationParameters validationParameters, BaseConfiguration configuration);
    internal static bool ValidateSignature(Byte[] encodedBytes, Byte[] signature, SecurityKey key, string algorithm, SecurityToken securityToken, TokenValidationParameters validationParameters);
}
public static class Microsoft.IdentityModel.JsonWebTokens.JwtConstants : object {
    public static string HeaderType;
    public static string HeaderTypeAlt;
    public static string TokenType;
    public static string TokenTypeAlt;
    public static string JsonCompactSerializationRegex;
    public static string JweCompactSerializationRegex;
    public static int JweSegmentCount;
    public static int JwsSegmentCount;
    public static int MaxJwtSegmentCount;
    public static string DirectKeyUseAlg;
}
public class Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames : ValueType {
    public static string Alg;
    public static string Cty;
    public static string Enc;
    public static string IV;
    public static string Jku;
    public static string Jwk;
    public static string Kid;
    public static string Typ;
    public static string X5c;
    public static string X5t;
    public static string X5u;
    public static string Zip;
    public static string Epk;
    public static string Apu;
    public static string Apv;
}
public class Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames : ValueType {
    public static string Actort;
    public static string Acr;
    public static string Amr;
    public static string Aud;
    public static string AuthTime;
    public static string Azp;
    public static string Birthdate;
    public static string CHash;
    public static string AtHash;
    public static string Email;
    public static string Exp;
    public static string Gender;
    public static string FamilyName;
    public static string GivenName;
    public static string Iat;
    public static string Iss;
    public static string Jti;
    public static string Name;
    public static string NameId;
    public static string Nonce;
    public static string Nbf;
    public static string PhoneNumber;
    public static string PhoneNumberVerified;
    public static string Prn;
    public static string Sid;
    public static string Sub;
    public static string Typ;
    public static string UniqueName;
    public static string Website;
}
internal class Microsoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters : object {
    [CompilerGeneratedAttribute]
private string <Alg>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationTag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ciphertext>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`3<Byte[], string, string> <DecompressionFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Enc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncodedHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncodedToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InitializationVector>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<SecurityKey> <Keys>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Zip>k__BackingField;
    public string Alg { get; public set; }
    public string AuthenticationTag { get; public set; }
    public string Ciphertext { get; public set; }
    public Func`3<Byte[], string, string> DecompressionFunction { get; public set; }
    public string Enc { get; public set; }
    public string EncodedHeader { get; public set; }
    public string EncodedToken { get; public set; }
    public string InitializationVector { get; public set; }
    public IEnumerable`1<SecurityKey> Keys { get; public set; }
    public string Zip { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Alg();
    [CompilerGeneratedAttribute]
public void set_Alg(string value);
    [CompilerGeneratedAttribute]
public string get_AuthenticationTag();
    [CompilerGeneratedAttribute]
public void set_AuthenticationTag(string value);
    [CompilerGeneratedAttribute]
public string get_Ciphertext();
    [CompilerGeneratedAttribute]
public void set_Ciphertext(string value);
    [CompilerGeneratedAttribute]
public Func`3<Byte[], string, string> get_DecompressionFunction();
    [CompilerGeneratedAttribute]
public void set_DecompressionFunction(Func`3<Byte[], string, string> value);
    [CompilerGeneratedAttribute]
public string get_Enc();
    [CompilerGeneratedAttribute]
public void set_Enc(string value);
    [CompilerGeneratedAttribute]
public string get_EncodedHeader();
    [CompilerGeneratedAttribute]
public void set_EncodedHeader(string value);
    [CompilerGeneratedAttribute]
public string get_EncodedToken();
    [CompilerGeneratedAttribute]
public void set_EncodedToken(string value);
    [CompilerGeneratedAttribute]
public string get_InitializationVector();
    [CompilerGeneratedAttribute]
public void set_InitializationVector(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<SecurityKey> get_Keys();
    [CompilerGeneratedAttribute]
public void set_Keys(IEnumerable`1<SecurityKey> value);
    [CompilerGeneratedAttribute]
public string get_Zip();
    [CompilerGeneratedAttribute]
public void set_Zip(string value);
}
public class Microsoft.IdentityModel.JsonWebTokens.JwtTokenUtilities : object {
    public static Regex RegexJws;
    public static Regex RegexJwe;
    internal static IList`1<string> DefaultHeaderParameters;
    private static JwtTokenUtilities();
    public static string CreateEncodedSignature(string input, SigningCredentials signingCredentials);
    public static string CreateEncodedSignature(string input, SigningCredentials signingCredentials, bool cacheProvider);
    internal static string DecompressToken(Byte[] tokenBytes, string algorithm);
    internal static string DecryptJwtToken(SecurityToken jwtToken, TokenValidationParameters validationParameters, JwtTokenDecryptionParameters decryptionParameters);
    private static void ValidateDecryption(JwtTokenDecryptionParameters decryptionParameters, bool decryptionSucceeded, bool algorithmNotSupportedByCryptoProvider, StringBuilder exceptionStrings, StringBuilder keysAttempted);
    private static Byte[] DecryptToken(CryptoProviderFactory cryptoProviderFactory, SecurityKey key, JwtTokenDecryptionParameters decryptionParameters);
    public static Byte[] GenerateKeyBytes(int sizeInBits);
    internal static SecurityKey GetSecurityKey(EncryptingCredentials encryptingCredentials, CryptoProviderFactory cryptoProviderFactory, IDictionary`2<string, object> additionalHeaderClaims, Byte[]& wrappedKey);
    public static IEnumerable`1<SecurityKey> GetAllDecryptionKeys(TokenValidationParameters validationParameters);
    internal static DateTime GetDateTime(string key, JObject payload);
    private static long ParseTimeValue(JToken jToken, string claimName);
    internal static SecurityKey ResolveTokenSigningKey(string kid, string x5t, TokenValidationParameters validationParameters, BaseConfiguration configuration);
    internal static SecurityKey ResolveTokenSigningKey(string kid, string x5t, TokenValidationParameters validationParameters);
}
internal static class Microsoft.IdentityModel.JsonWebTokens.LogMessages : object {
    internal static string IDX14000;
    internal static string IDX14100;
    internal static string IDX14101;
    internal static string IDX14102;
    internal static string IDX14103;
    internal static string IDX14105;
    internal static string IDX14107;
    internal static string IDX14111;
    internal static string IDX14112;
    internal static string IDX14113;
    internal static string IDX14114;
    internal static string IDX14116;
    internal static string IDX14200;
    internal static string IDX14201;
    internal static string IDX14300;
    internal static string IDX14301;
    internal static string IDX14302;
    internal static string IDX14303;
    internal static string IDX14304;
    internal static string IDX14305;
    internal static string IDX14306;
    internal static string IDX14307;
}
