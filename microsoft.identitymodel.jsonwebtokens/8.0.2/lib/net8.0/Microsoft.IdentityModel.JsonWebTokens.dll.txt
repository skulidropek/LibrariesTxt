internal static class Microsoft.IdentityModel.JsonWebTokens.ClaimTypeMapping : object {
    private static Dictionary`2<string, string> shortToLongClaimTypeMapping;
    private static Dictionary`2<string, string> longToShortClaimTypeMapping;
    private static HashSet`1<string> inboundClaimFilter;
    public static IDictionary`2<string, string> InboundClaimTypeMap { get; }
    public static IDictionary`2<string, string> OutboundClaimTypeMap { get; }
    public static ISet`1<string> InboundClaimFilter { get; }
    private static ClaimTypeMapping();
    public static IDictionary`2<string, string> get_InboundClaimTypeMap();
    public static IDictionary`2<string, string> get_OutboundClaimTypeMap();
    public static ISet`1<string> get_InboundClaimFilter();
}
internal class Microsoft.IdentityModel.JsonWebTokens.JsonClaimSet : object {
    internal static string ClassName;
    internal object _claimsLock;
    internal Dictionary`2<string, object> _jsonClaims;
    private List`1<Claim> _claims;
    internal JsonClaimSet(Dictionary`2<string, object> jsonClaims);
    internal List`1<Claim> Claims(string issuer);
    internal List`1<Claim> CreateClaims(string issuer);
    internal static void CreateClaimFromObject(List`1<Claim> claims, string claimType, object value, string issuer);
    internal static Claim CreateClaimFromJsonElement(string claimType, string issuer, JsonElement jsonElement);
    internal Claim GetClaim(string key, string issuer);
    internal string GetStringValue(string key);
    internal DateTime GetDateTime(string key);
    internal T GetValue(string key);
    internal T GetValue(string key, bool throwEx, Boolean& found);
    internal bool TryGetClaim(string key, string issuer, Claim& claim);
    internal bool TryGetValue(string key, T& value);
    internal bool HasClaim(string claimName);
}
public static class Microsoft.IdentityModel.JsonWebTokens.JsonClaimValueTypes : object {
    public static string Json;
    public static string JsonArray;
    public static string JsonNull;
}
public class Microsoft.IdentityModel.JsonWebTokens.JsonWebToken : SecurityToken {
    internal static string ClassName;
    private ClaimsIdentity _claimsIdentity;
    private bool _wasClaimsIdentitySet;
    private string _act;
    private string _authenticationTag;
    private string _ciphertext;
    private string _encodedHeader;
    private string _encodedPayload;
    private string _encodedSignature;
    private string _encodedToken;
    private string _encryptedKey;
    private string _initializationVector;
    private List`1<string> _audiences;
    private ReadOnlyMemory`1<char> _encodedTokenMemory;
    internal string _alg;
    internal string _cty;
    internal string _enc;
    internal string _kid;
    internal string _typ;
    internal string _x5t;
    internal string _zip;
    internal string _azp;
    internal Nullable`1<long> _exp;
    internal Nullable`1<DateTime> _expDateTime;
    internal Nullable`1<long> _iat;
    internal Nullable`1<DateTime> _iatDateTime;
    internal string _id;
    internal string _iss;
    internal string _jti;
    internal string _sub;
    internal Nullable`1<long> _nbf;
    internal Nullable`1<DateTime> _nbfDateTime;
    internal Nullable`1<DateTime> _validFrom;
    internal Nullable`1<DateTime> _validTo;
    [CompilerGeneratedAttribute]
private string <ActualIssuer>k__BackingField;
    [CompilerGeneratedAttribute]
private ClaimsIdentity <ActorClaimsIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <AuthenticationTagBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <CipherTextBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Dot1>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Dot2>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Dot3>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Dot4>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <EncryptedKeyBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonClaimSet <Header>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <HeaderAsciiBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <InitializationVectorBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonWebToken <InnerToken>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSigned>k__BackingField;
    [CompilerGeneratedAttribute]
private JsonClaimSet <Payload>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityKey <SecurityKey>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityKey <SigningKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <MessageBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NumberOfDots>k__BackingField;
    internal string ActualIssuer { get; internal set; }
    internal ClaimsIdentity ActorClaimsIdentity { get; internal set; }
    public string AuthenticationTag { get; }
    internal Byte[] AuthenticationTagBytes { get; internal set; }
    public string Ciphertext { get; }
    internal Byte[] CipherTextBytes { get; internal set; }
    internal int Dot1 { get; internal set; }
    internal int Dot2 { get; internal set; }
    internal int Dot3 { get; internal set; }
    internal int Dot4 { get; internal set; }
    public string EncodedHeader { get; }
    public string EncryptedKey { get; }
    internal Byte[] EncryptedKeyBytes { get; internal set; }
    public string EncodedPayload { get; }
    public string EncodedSignature { get; }
    public string EncodedToken { get; }
    internal JsonClaimSet Header { get; internal set; }
    internal Byte[] HeaderAsciiBytes { get; internal set; }
    internal Byte[] InitializationVectorBytes { get; internal set; }
    public string InitializationVector { get; }
    public JsonWebToken InnerToken { get; internal set; }
    public bool IsEncrypted { get; }
    public bool IsSigned { get; internal set; }
    internal JsonClaimSet Payload { get; internal set; }
    public SecurityKey SecurityKey { get; }
    public SecurityKey SigningKey { get; public set; }
    internal Byte[] MessageBytes { get; internal set; }
    internal int NumberOfDots { get; internal set; }
    public IEnumerable`1<Claim> Claims { get; }
    internal IReadOnlyCollection`1<string> PayloadClaimNames { get; }
    internal ClaimsIdentity ClaimsIdentity { get; internal set; }
    public string Alg { get; }
    public string Cty { get; }
    public string Enc { get; }
    public string Kid { get; }
    public string Typ { get; internal set; }
    public string X5t { get; }
    public string Zip { get; }
    public string Actor { get; }
    public IEnumerable`1<string> Audiences { get; }
    public string Azp { get; }
    public DateTime IssuedAt { get; }
    public string Issuer { get; }
    public string Id { get; }
    public string Subject { get; }
    public DateTime ValidFrom { get; }
    internal Nullable`1<DateTime> ValidFromNullable { get; }
    public DateTime ValidTo { get; }
    internal Nullable`1<DateTime> ValidToNullable { get; }
    public JsonWebToken(string jwtEncodedString);
    public JsonWebToken(ReadOnlyMemory`1<char> encodedTokenMemory);
    public JsonWebToken(string header, string payload);
    [CompilerGeneratedAttribute]
internal string get_ActualIssuer();
    [CompilerGeneratedAttribute]
internal void set_ActualIssuer(string value);
    [CompilerGeneratedAttribute]
internal ClaimsIdentity get_ActorClaimsIdentity();
    [CompilerGeneratedAttribute]
internal void set_ActorClaimsIdentity(ClaimsIdentity value);
    public string get_AuthenticationTag();
    [CompilerGeneratedAttribute]
internal Byte[] get_AuthenticationTagBytes();
    [CompilerGeneratedAttribute]
internal void set_AuthenticationTagBytes(Byte[] value);
    public string get_Ciphertext();
    [CompilerGeneratedAttribute]
internal Byte[] get_CipherTextBytes();
    [CompilerGeneratedAttribute]
internal void set_CipherTextBytes(Byte[] value);
    [CompilerGeneratedAttribute]
internal int get_Dot1();
    [CompilerGeneratedAttribute]
internal void set_Dot1(int value);
    [CompilerGeneratedAttribute]
internal int get_Dot2();
    [CompilerGeneratedAttribute]
internal void set_Dot2(int value);
    [CompilerGeneratedAttribute]
internal int get_Dot3();
    [CompilerGeneratedAttribute]
internal void set_Dot3(int value);
    [CompilerGeneratedAttribute]
internal int get_Dot4();
    [CompilerGeneratedAttribute]
internal void set_Dot4(int value);
    public string get_EncodedHeader();
    public string get_EncryptedKey();
    [CompilerGeneratedAttribute]
internal Byte[] get_EncryptedKeyBytes();
    [CompilerGeneratedAttribute]
internal void set_EncryptedKeyBytes(Byte[] value);
    public string get_EncodedPayload();
    public string get_EncodedSignature();
    public string get_EncodedToken();
    [CompilerGeneratedAttribute]
internal JsonClaimSet get_Header();
    [CompilerGeneratedAttribute]
internal void set_Header(JsonClaimSet value);
    [CompilerGeneratedAttribute]
internal Byte[] get_HeaderAsciiBytes();
    [CompilerGeneratedAttribute]
internal void set_HeaderAsciiBytes(Byte[] value);
    [CompilerGeneratedAttribute]
internal Byte[] get_InitializationVectorBytes();
    [CompilerGeneratedAttribute]
internal void set_InitializationVectorBytes(Byte[] value);
    public string get_InitializationVector();
    [CompilerGeneratedAttribute]
public JsonWebToken get_InnerToken();
    [CompilerGeneratedAttribute]
internal void set_InnerToken(JsonWebToken value);
    public bool get_IsEncrypted();
    [CompilerGeneratedAttribute]
public bool get_IsSigned();
    [CompilerGeneratedAttribute]
internal void set_IsSigned(bool value);
    [CompilerGeneratedAttribute]
internal JsonClaimSet get_Payload();
    [CompilerGeneratedAttribute]
internal void set_Payload(JsonClaimSet value);
    [CompilerGeneratedAttribute]
public virtual SecurityKey get_SecurityKey();
    [CompilerGeneratedAttribute]
public virtual SecurityKey get_SigningKey();
    [CompilerGeneratedAttribute]
public virtual void set_SigningKey(SecurityKey value);
    [CompilerGeneratedAttribute]
internal Byte[] get_MessageBytes();
    [CompilerGeneratedAttribute]
internal void set_MessageBytes(Byte[] value);
    [CompilerGeneratedAttribute]
internal int get_NumberOfDots();
    [CompilerGeneratedAttribute]
internal void set_NumberOfDots(int value);
    internal void ReadToken(ReadOnlyMemory`1<char> encodedTokenMemory);
    internal JsonClaimSet CreateClaimSet(ReadOnlySpan`1<char> strSpan, int startIndex, int length, bool createHeaderClaimSet);
    public virtual string ToString();
    public virtual string UnsafeToString();
    public virtual IEnumerable`1<Claim> get_Claims();
    public Claim GetClaim(string key);
    internal IReadOnlyCollection`1<string> get_PayloadClaimNames();
    internal ClaimsIdentity get_ClaimsIdentity();
    internal void set_ClaimsIdentity(ClaimsIdentity value);
    public bool TryGetClaim(string key, Claim& value);
    internal bool HasPayloadClaim(string claimName);
    public T GetHeaderValue(string key);
    public T GetPayloadValue(string key);
    public bool TryGetValue(string key, T& value);
    public bool TryGetHeaderValue(string key, T& value);
    public bool TryGetPayloadValue(string key, T& value);
    public string get_Alg();
    public string get_Cty();
    public string get_Enc();
    public string get_Kid();
    public string get_Typ();
    internal void set_Typ(string value);
    public string get_X5t();
    public string get_Zip();
    public string get_Actor();
    public IEnumerable`1<string> get_Audiences();
    public string get_Azp();
    public DateTime get_IssuedAt();
    public virtual string get_Issuer();
    public virtual string get_Id();
    public string get_Subject();
    public virtual DateTime get_ValidFrom();
    internal Nullable`1<DateTime> get_ValidFromNullable();
    public virtual DateTime get_ValidTo();
    internal Nullable`1<DateTime> get_ValidToNullable();
    internal JsonClaimSet CreateHeaderClaimSet(Byte[] bytes);
    internal JsonClaimSet CreateHeaderClaimSet(Byte[] bytes, int length);
    internal JsonClaimSet CreateHeaderClaimSet(ReadOnlySpan`1<byte> byteSpan);
    internal JsonClaimSet CreatePayloadClaimSet(Byte[] bytes, int length);
    internal JsonClaimSet CreatePayloadClaimSet(ReadOnlySpan`1<byte> byteSpan);
    private protected virtual void ReadPayloadValue(Utf8JsonReader& reader, IDictionary`2<string, object> claims);
}
public class Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler : TokenHandler {
    private IDictionary`2<string, string> _inboundClaimTypeMap;
    private static string _namespace;
    private static string _shortClaimType;
    private bool _mapInboundClaims;
    public static IDictionary`2<string, string> DefaultInboundClaimTypeMap;
    public static bool DefaultMapInboundClaims;
    public static string Base64UrlEncodedUnsignedJWSHeader;
    public Type TokenType { get; }
    public static string ShortClaimTypeProperty { get; public set; }
    public bool MapInboundClaims { get; public set; }
    public IDictionary`2<string, string> InboundClaimTypeMap { get; public set; }
    public bool CanValidateToken { get; }
    private static JsonWebTokenHandler();
    [NullableContextAttribute("1")]
internal virtual ClaimsIdentity CreateClaimsIdentity(JsonWebToken jwtToken, ValidationParameters validationParameters);
    [NullableContextAttribute("1")]
internal virtual ClaimsIdentity CreateClaimsIdentity(JsonWebToken jwtToken, ValidationParameters validationParameters, string issuer);
    [NullableContextAttribute("1")]
internal virtual ClaimsIdentity CreateClaimsIdentityInternal(SecurityToken securityToken, ValidationParameters validationParameters, string issuer);
    [NullableContextAttribute("1")]
private ClaimsIdentity CreateClaimsIdentityWithMapping(JsonWebToken jwtToken, ValidationParameters validationParameters, string issuer);
    [NullableContextAttribute("1")]
private ClaimsIdentity CreateClaimsIdentityPrivate(JsonWebToken jwtToken, ValidationParameters validationParameters, string issuer);
    public virtual string CreateToken(string payload);
    public virtual string CreateToken(string payload, IDictionary`2<string, object> additionalHeaderClaims);
    public virtual string CreateToken(string payload, SigningCredentials signingCredentials);
    public virtual string CreateToken(string payload, SigningCredentials signingCredentials, IDictionary`2<string, object> additionalHeaderClaims);
    public virtual string CreateToken(SecurityTokenDescriptor tokenDescriptor);
    internal static string CreateToken(SecurityTokenDescriptor tokenDescriptor, bool setdefaultTimesOnTokenCreation, int tokenLifetimeInMinutes);
    public virtual string CreateToken(string payload, EncryptingCredentials encryptingCredentials);
    public virtual string CreateToken(string payload, EncryptingCredentials encryptingCredentials, IDictionary`2<string, object> additionalHeaderClaims);
    public virtual string CreateToken(string payload, SigningCredentials signingCredentials, EncryptingCredentials encryptingCredentials);
    public virtual string CreateToken(string payload, SigningCredentials signingCredentials, EncryptingCredentials encryptingCredentials, IDictionary`2<string, object> additionalHeaderClaims);
    public virtual string CreateToken(string payload, EncryptingCredentials encryptingCredentials, string compressionAlgorithm);
    public virtual string CreateToken(string payload, SigningCredentials signingCredentials, EncryptingCredentials encryptingCredentials, string compressionAlgorithm);
    public virtual string CreateToken(string payload, SigningCredentials signingCredentials, EncryptingCredentials encryptingCredentials, string compressionAlgorithm, IDictionary`2<string, object> additionalHeaderClaims, IDictionary`2<string, object> additionalInnerHeaderClaims);
    public virtual string CreateToken(string payload, SigningCredentials signingCredentials, EncryptingCredentials encryptingCredentials, string compressionAlgorithm, IDictionary`2<string, object> additionalHeaderClaims);
    internal static string CreateToken(string payload, SigningCredentials signingCredentials, EncryptingCredentials encryptingCredentials, string compressionAlgorithm, IDictionary`2<string, object> additionalHeaderClaims, IDictionary`2<string, object> additionalInnerHeaderClaims, string tokenType);
    internal static void WriteJwsPayload(Utf8JsonWriter& writer, SecurityTokenDescriptor tokenDescriptor, bool setDefaultTimesOnTokenCreation, int tokenLifetimeInMinutes);
    internal static void AddSubjectClaims(Utf8JsonWriter& writer, SecurityTokenDescriptor tokenDescriptor, bool audienceSet, bool issuerSet, Boolean& expSet, Boolean& iatSet, Boolean& nbfSet);
    internal static void WriteJwsHeader(Utf8JsonWriter& writer, SigningCredentials signingCredentials, EncryptingCredentials encryptingCredentials, IDictionary`2<string, object> jweHeaderClaims, IDictionary`2<string, object> jwsHeaderClaims, string tokenType);
    internal static Byte[] WriteJweHeader(EncryptingCredentials encryptingCredentials, string compressionAlgorithm, string tokenType, IDictionary`2<string, object> jweHeaderClaims);
    internal static Byte[] CompressToken(Byte[] utf8Bytes, string compressionAlgorithm);
    public string EncryptToken(string innerJwt, EncryptingCredentials encryptingCredentials);
    public string EncryptToken(string innerJwt, EncryptingCredentials encryptingCredentials, IDictionary`2<string, object> additionalHeaderClaims);
    public string EncryptToken(string innerJwt, EncryptingCredentials encryptingCredentials, string algorithm);
    public string EncryptToken(string innerJwt, EncryptingCredentials encryptingCredentials, string algorithm, IDictionary`2<string, object> additionalHeaderClaims);
    private static string EncryptTokenPrivate(string innerJwt, EncryptingCredentials encryptingCredentials, string compressionAlgorithm, IDictionary`2<string, object> additionalHeaderClaims, string tokenType);
    internal static string EncryptToken(Byte[] innerTokenUtf8Bytes, EncryptingCredentials encryptingCredentials, string compressionAlgorithm, IDictionary`2<string, object> additionalHeaderClaims, string tokenType);
    internal IEnumerable`1<SecurityKey> GetContentEncryptionKeys(JsonWebToken jwtToken, TokenValidationParameters validationParameters, BaseConfiguration configuration);
    public Type get_TokenType();
    public static string get_ShortClaimTypeProperty();
    public static void set_ShortClaimTypeProperty(string value);
    public bool get_MapInboundClaims();
    public void set_MapInboundClaims(bool value);
    public IDictionary`2<string, string> get_InboundClaimTypeMap();
    public void set_InboundClaimTypeMap(IDictionary`2<string, string> value);
    public virtual bool CanReadToken(string token);
    private static StringComparison GetStringComparisonRuleIf509(SecurityKey securityKey);
    private static StringComparison GetStringComparisonRuleIf509OrECDsa(SecurityKey securityKey);
    protected virtual ClaimsIdentity CreateClaimsIdentity(JsonWebToken jwtToken, TokenValidationParameters validationParameters);
    protected virtual ClaimsIdentity CreateClaimsIdentity(JsonWebToken jwtToken, TokenValidationParameters validationParameters, string issuer);
    private ClaimsIdentity CreateClaimsIdentityWithMapping(JsonWebToken jwtToken, TokenValidationParameters validationParameters, string issuer);
    internal virtual ClaimsIdentity CreateClaimsIdentityInternal(SecurityToken securityToken, TokenValidationParameters tokenValidationParameters, string issuer);
    private static string GetActualIssuer(JsonWebToken jwtToken);
    private ClaimsIdentity CreateClaimsIdentityPrivate(JsonWebToken jwtToken, TokenValidationParameters validationParameters, string issuer);
    public string DecryptToken(JsonWebToken jwtToken, TokenValidationParameters validationParameters);
    private string DecryptToken(JsonWebToken jwtToken, TokenValidationParameters validationParameters, BaseConfiguration configuration);
    private static SecurityKey ResolveTokenDecryptionKeyFromConfig(JsonWebToken jwtToken, BaseConfiguration configuration);
    protected virtual SecurityKey ResolveTokenDecryptionKey(string token, JsonWebToken jwtToken, TokenValidationParameters validationParameters);
    public virtual JsonWebToken ReadJsonWebToken(string token);
    public virtual SecurityToken ReadToken(string token);
    private static TokenValidationResult ReadToken(string token, TokenValidationParameters validationParameters);
    [NullableContextAttribute("1")]
internal TokenDecryptionResult DecryptToken(JsonWebToken jwtToken, ValidationParameters validationParameters, BaseConfiguration configuration, CallContext callContext);
    [NullableContextAttribute("1")]
internal ValueTuple`2<IList`1<SecurityKey>, ExceptionDetail> GetContentEncryptionKeys(JsonWebToken jwtToken, ValidationParameters validationParameters, BaseConfiguration configuration, CallContext callContext);
    [NullableContextAttribute("1")]
internal virtual SecurityKey ResolveTokenDecryptionKey(string token, JsonWebToken jwtToken, ValidationParameters validationParameters, CallContext callContext);
    [NullableContextAttribute("1")]
internal static TokenReadingResult ReadToken(string token, CallContext callContext);
    [NullableContextAttribute("1")]
internal static SignatureValidationResult ValidateSignature(JsonWebToken jwtToken, ValidationParameters validationParameters, BaseConfiguration configuration, CallContext callContext);
    [NullableContextAttribute("1")]
private static SignatureValidationResult ValidateSignatureUsingAllKeys(JsonWebToken jwtToken, ValidationParameters validationParameters, BaseConfiguration configuration, CallContext callContext);
    [NullableContextAttribute("1")]
private static ValueTuple`3<SignatureValidationResult, bool, Nullable`1<KeyMatchFailedResult>> ValidateUsingKeys(JsonWebToken jwtToken, ValidationParameters validationParameters, ICollection`1<SecurityKey> keys, CallContext callContext);
    [NullableContextAttribute("1")]
private static SignatureValidationResult ValidateSignatureWithKey(JsonWebToken jsonWebToken, SecurityKey key, ValidationParameters validationParameters, CallContext callContext);
    [NullableContextAttribute("1")]
private static ExceptionDetail GetSignatureValidationFailureExceptionDetails(JsonWebToken jwtToken, ValidationParameters validationParameters, BaseConfiguration configuration, StringBuilder exceptionStrings, StringBuilder keysAttempted, bool kidExists, bool kidMatched);
    [NullableContextAttribute("1")]
private static void PopulateFailedResults(Nullable`1<KeyMatchFailedResult> failedResult, StringBuilder exceptionStrings, StringBuilder keysAttempted);
    public virtual bool get_CanValidateToken();
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler/<ValidateJWEAsync>d__80")]
internal ValueTask`1<TokenValidationResult> ValidateJWEAsync(JsonWebToken jwtToken, TokenValidationParameters validationParameters, BaseConfiguration configuration);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler/<ValidateJWSAsync>d__81")]
internal ValueTask`1<TokenValidationResult> ValidateJWSAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration);
    private static JsonWebToken ValidateSignatureAndIssuerSecurityKey(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration);
    private static JsonWebToken ValidateSignature(JsonWebToken jwtToken, TokenValidationParameters validationParameters, BaseConfiguration configuration);
    internal static bool IsSignatureValid(Byte[] signatureBytes, int signatureBytesLength, SignatureProvider signatureProvider, Byte[] dataToVerify, int dataToVerifyLength);
    internal static bool ValidateSignature(Byte[] bytes, int len, string stringWithSignature, int signatureStartIndex, SignatureProvider signatureProvider);
    internal static bool ValidateSignature(JsonWebToken jsonWebToken, SecurityKey key, TokenValidationParameters validationParameters);
    private static JsonWebToken ValidateSignatureUsingDelegates(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters);
    [ObsoleteAttribute("`JsonWebTokens.ValidateToken(string, TokenValidationParameters)` has been deprecated and will be removed in a future release. Use `JsonWebTokens.ValidateTokenAsync(string, TokenValidationParameters)` instead. For more information, see https://aka.ms/IdentityModel/7-breaking-changes", "False")]
public virtual TokenValidationResult ValidateToken(string token, TokenValidationParameters validationParameters);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler/<ValidateTokenAsync>d__89")]
public virtual Task`1<TokenValidationResult> ValidateTokenAsync(string token, TokenValidationParameters validationParameters);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler/<ValidateTokenAsync>d__90")]
public virtual Task`1<TokenValidationResult> ValidateTokenAsync(SecurityToken token, TokenValidationParameters validationParameters);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler/<ValidateTokenAsync>d__91")]
internal ValueTask`1<TokenValidationResult> ValidateTokenAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler/<ValidateTokenPayloadAsync>d__92")]
internal ValueTask`1<TokenValidationResult> ValidateTokenPayloadAsync(JsonWebToken jsonWebToken, TokenValidationParameters validationParameters, BaseConfiguration configuration);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler/<ValidateTokenAsync>d__93")]
internal Task`1<TokenValidationResult> ValidateTokenAsync(string token, ValidationParameters validationParameters, CallContext callContext, Nullable`1<CancellationToken> cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler/<ValidateTokenAsync>d__94")]
internal Task`1<TokenValidationResult> ValidateTokenAsync(SecurityToken token, ValidationParameters validationParameters, CallContext callContext, Nullable`1<CancellationToken> cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler/<InternalValidateTokenAsync>d__95")]
private ValueTask`1<TokenValidationResult> InternalValidateTokenAsync(JsonWebToken jsonWebToken, ValidationParameters validationParameters, CallContext callContext, Nullable`1<CancellationToken> cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler/<ValidateJWEAsync>d__96")]
private ValueTask`1<InternalTokenValidationResult> ValidateJWEAsync(JsonWebToken jwtToken, ValidationParameters validationParameters, BaseConfiguration configuration, CallContext callContext, Nullable`1<CancellationToken> cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler/<ValidateJWSAsync>d__97")]
private ValueTask`1<InternalTokenValidationResult> ValidateJWSAsync(JsonWebToken jsonWebToken, ValidationParameters validationParameters, BaseConfiguration configuration, CallContext callContext, Nullable`1<CancellationToken> cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler/<GetCurrentConfigurationAsync>d__98")]
private static Task`1<BaseConfiguration> GetCurrentConfigurationAsync(ValidationParameters validationParameters);
}
public static class Microsoft.IdentityModel.JsonWebTokens.JwtConstants : object {
    public static string HeaderType;
    public static string HeaderTypeAlt;
    public static string TokenType;
    public static string TokenTypeAlt;
    public static string JsonCompactSerializationRegex;
    public static string JweCompactSerializationRegex;
    public static int JweSegmentCount;
    public static int JwsSegmentCount;
    public static int MaxJwtSegmentCount;
    public static string DirectKeyUseAlg;
}
public class Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames : ValueType {
    public static string Alg;
    public static string Apu;
    public static string Apv;
    public static string Epk;
    public static string Cty;
    public static string Enc;
    public static string IV;
    public static string Jku;
    public static string Jwk;
    public static string Kid;
    public static string Typ;
    public static string X5c;
    public static string X5t;
    public static string X5u;
    public static string Zip;
}
[IsReadOnlyAttribute]
internal class Microsoft.IdentityModel.JsonWebTokens.JwtHeaderUtf8Bytes : ValueType {
    public static ReadOnlySpan`1<byte> Alg { get; }
    public static ReadOnlySpan`1<byte> Apu { get; }
    public static ReadOnlySpan`1<byte> Apv { get; }
    public static ReadOnlySpan`1<byte> Cty { get; }
    public static ReadOnlySpan`1<byte> Enc { get; }
    public static ReadOnlySpan`1<byte> Epk { get; }
    public static ReadOnlySpan`1<byte> IV { get; }
    public static ReadOnlySpan`1<byte> Jku { get; }
    public static ReadOnlySpan`1<byte> Jwk { get; }
    public static ReadOnlySpan`1<byte> Kid { get; }
    public static ReadOnlySpan`1<byte> Typ { get; }
    public static ReadOnlySpan`1<byte> X5c { get; }
    public static ReadOnlySpan`1<byte> X5t { get; }
    public static ReadOnlySpan`1<byte> X5u { get; }
    public static ReadOnlySpan`1<byte> Zip { get; }
    public static ReadOnlySpan`1<byte> get_Alg();
    public static ReadOnlySpan`1<byte> get_Apu();
    public static ReadOnlySpan`1<byte> get_Apv();
    public static ReadOnlySpan`1<byte> get_Cty();
    public static ReadOnlySpan`1<byte> get_Enc();
    public static ReadOnlySpan`1<byte> get_Epk();
    public static ReadOnlySpan`1<byte> get_IV();
    public static ReadOnlySpan`1<byte> get_Jku();
    public static ReadOnlySpan`1<byte> get_Jwk();
    public static ReadOnlySpan`1<byte> get_Kid();
    public static ReadOnlySpan`1<byte> get_Typ();
    public static ReadOnlySpan`1<byte> get_X5c();
    public static ReadOnlySpan`1<byte> get_X5t();
    public static ReadOnlySpan`1<byte> get_X5u();
    public static ReadOnlySpan`1<byte> get_Zip();
}
[IsReadOnlyAttribute]
internal class Microsoft.IdentityModel.JsonWebTokens.JwtPayloadUtf8Bytes : ValueType {
    public static ReadOnlySpan`1<byte> Actort { get; }
    public static ReadOnlySpan`1<byte> Acr { get; }
    public static ReadOnlySpan`1<byte> Amr { get; }
    public static ReadOnlySpan`1<byte> AtHash { get; }
    public static ReadOnlySpan`1<byte> Aud { get; }
    public static ReadOnlySpan`1<byte> AuthTime { get; }
    public static ReadOnlySpan`1<byte> Azp { get; }
    public static ReadOnlySpan`1<byte> Birthdate { get; }
    public static ReadOnlySpan`1<byte> CHash { get; }
    public static ReadOnlySpan`1<byte> Email { get; }
    public static ReadOnlySpan`1<byte> Exp { get; }
    public static ReadOnlySpan`1<byte> Gender { get; }
    public static ReadOnlySpan`1<byte> FamilyName { get; }
    public static ReadOnlySpan`1<byte> GivenName { get; }
    public static ReadOnlySpan`1<byte> Iat { get; }
    public static ReadOnlySpan`1<byte> Iss { get; }
    public static ReadOnlySpan`1<byte> Jti { get; }
    public static ReadOnlySpan`1<byte> Name { get; }
    public static ReadOnlySpan`1<byte> NameId { get; }
    public static ReadOnlySpan`1<byte> Nonce { get; }
    public static ReadOnlySpan`1<byte> Nbf { get; }
    public static ReadOnlySpan`1<byte> PhoneNumber { get; }
    public static ReadOnlySpan`1<byte> PhoneNumberVerified { get; }
    public static ReadOnlySpan`1<byte> Prn { get; }
    public static ReadOnlySpan`1<byte> Sid { get; }
    public static ReadOnlySpan`1<byte> Sub { get; }
    public static ReadOnlySpan`1<byte> Typ { get; }
    public static ReadOnlySpan`1<byte> UniqueName { get; }
    public static ReadOnlySpan`1<byte> Website { get; }
    public static ReadOnlySpan`1<byte> get_Actort();
    public static ReadOnlySpan`1<byte> get_Acr();
    public static ReadOnlySpan`1<byte> get_Amr();
    public static ReadOnlySpan`1<byte> get_AtHash();
    public static ReadOnlySpan`1<byte> get_Aud();
    public static ReadOnlySpan`1<byte> get_AuthTime();
    public static ReadOnlySpan`1<byte> get_Azp();
    public static ReadOnlySpan`1<byte> get_Birthdate();
    public static ReadOnlySpan`1<byte> get_CHash();
    public static ReadOnlySpan`1<byte> get_Email();
    public static ReadOnlySpan`1<byte> get_Exp();
    public static ReadOnlySpan`1<byte> get_Gender();
    public static ReadOnlySpan`1<byte> get_FamilyName();
    public static ReadOnlySpan`1<byte> get_GivenName();
    public static ReadOnlySpan`1<byte> get_Iat();
    public static ReadOnlySpan`1<byte> get_Iss();
    public static ReadOnlySpan`1<byte> get_Jti();
    public static ReadOnlySpan`1<byte> get_Name();
    public static ReadOnlySpan`1<byte> get_NameId();
    public static ReadOnlySpan`1<byte> get_Nonce();
    public static ReadOnlySpan`1<byte> get_Nbf();
    public static ReadOnlySpan`1<byte> get_PhoneNumber();
    public static ReadOnlySpan`1<byte> get_PhoneNumberVerified();
    public static ReadOnlySpan`1<byte> get_Prn();
    public static ReadOnlySpan`1<byte> get_Sid();
    public static ReadOnlySpan`1<byte> get_Sub();
    public static ReadOnlySpan`1<byte> get_Typ();
    public static ReadOnlySpan`1<byte> get_UniqueName();
    public static ReadOnlySpan`1<byte> get_Website();
}
public class Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames : ValueType {
    public static string Actort;
    public static string Acr;
    public static string Address;
    public static string Alg;
    public static string Amr;
    public static string Aud;
    public static string AuthTime;
    public static string Azp;
    public static string Birthdate;
    public static string CHash;
    public static string AtHash;
    public static string Email;
    public static string EmailVerified;
    public static string Exp;
    public static string Gender;
    public static string FamilyName;
    public static string GivenName;
    public static string Iat;
    public static string Iss;
    public static string Jti;
    public static string Locale;
    public static string MiddleName;
    public static string Name;
    public static string NameId;
    public static string Nickname;
    public static string Nonce;
    public static string Nbf;
    public static string PhoneNumber;
    public static string PhoneNumberVerified;
    public static string Picture;
    public static string Prn;
    public static string PreferredUsername;
    public static string Profile;
    public static string Sid;
    public static string Sub;
    public static string Typ;
    public static string UniqueName;
    public static string UpdatedAt;
    public static string Website;
    public static string ZoneInfo;
}
internal class Microsoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters : object {
    [CompilerGeneratedAttribute]
private Byte[] <CipherTextBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <HeaderAsciiBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <InitializationVectorBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <AuthenticationTagBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Alg>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AuthenticationTag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Ciphertext>k__BackingField;
    [CompilerGeneratedAttribute]
private Func`4<Byte[], string, int, string> <DecompressionFunction>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Enc>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncodedHeader>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EncodedToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <InitializationVector>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<SecurityKey> <Keys>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaximumDeflateSize>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Zip>k__BackingField;
    public Byte[] CipherTextBytes { get; public set; }
    public Byte[] HeaderAsciiBytes { get; public set; }
    public Byte[] InitializationVectorBytes { get; public set; }
    public Byte[] AuthenticationTagBytes { get; public set; }
    public string Alg { get; public set; }
    public string AuthenticationTag { get; public set; }
    public string Ciphertext { get; public set; }
    public Func`4<Byte[], string, int, string> DecompressionFunction { get; public set; }
    public string Enc { get; public set; }
    public string EncodedHeader { get; public set; }
    public string EncodedToken { get; public set; }
    public string InitializationVector { get; public set; }
    public IEnumerable`1<SecurityKey> Keys { get; public set; }
    public int MaximumDeflateSize { get; public set; }
    public string Zip { get; public set; }
    [CompilerGeneratedAttribute]
public Byte[] get_CipherTextBytes();
    [CompilerGeneratedAttribute]
public void set_CipherTextBytes(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_HeaderAsciiBytes();
    [CompilerGeneratedAttribute]
public void set_HeaderAsciiBytes(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_InitializationVectorBytes();
    [CompilerGeneratedAttribute]
public void set_InitializationVectorBytes(Byte[] value);
    [CompilerGeneratedAttribute]
public Byte[] get_AuthenticationTagBytes();
    [CompilerGeneratedAttribute]
public void set_AuthenticationTagBytes(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_Alg();
    [CompilerGeneratedAttribute]
public void set_Alg(string value);
    [CompilerGeneratedAttribute]
public string get_AuthenticationTag();
    [CompilerGeneratedAttribute]
public void set_AuthenticationTag(string value);
    [CompilerGeneratedAttribute]
public string get_Ciphertext();
    [CompilerGeneratedAttribute]
public void set_Ciphertext(string value);
    [CompilerGeneratedAttribute]
public Func`4<Byte[], string, int, string> get_DecompressionFunction();
    [CompilerGeneratedAttribute]
public void set_DecompressionFunction(Func`4<Byte[], string, int, string> value);
    [CompilerGeneratedAttribute]
public string get_Enc();
    [CompilerGeneratedAttribute]
public void set_Enc(string value);
    [CompilerGeneratedAttribute]
public string get_EncodedHeader();
    [CompilerGeneratedAttribute]
public void set_EncodedHeader(string value);
    [CompilerGeneratedAttribute]
public string get_EncodedToken();
    [CompilerGeneratedAttribute]
public void set_EncodedToken(string value);
    [CompilerGeneratedAttribute]
public string get_InitializationVector();
    [CompilerGeneratedAttribute]
public void set_InitializationVector(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<SecurityKey> get_Keys();
    [CompilerGeneratedAttribute]
public void set_Keys(IEnumerable`1<SecurityKey> value);
    [CompilerGeneratedAttribute]
public int get_MaximumDeflateSize();
    [CompilerGeneratedAttribute]
public void set_MaximumDeflateSize(int value);
    [CompilerGeneratedAttribute]
public string get_Zip();
    [CompilerGeneratedAttribute]
public void set_Zip(string value);
}
public class Microsoft.IdentityModel.JsonWebTokens.JwtTokenUtilities : object {
    private static int _regexMatchTimeoutMilliseconds;
    private static string _unrecognizedEncodedToken;
    public static Regex RegexJws;
    public static Regex RegexJwe;
    internal static List`1<string> DefaultHeaderParameters;
    private static JwtTokenUtilities();
    [GeneratedRegexAttribute("^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$", "512", "100")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.36612")]
private static Regex CreateJwsRegex();
    [GeneratedRegexAttribute("^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+$", "512", "100")]
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.36612")]
private static Regex CreateJweRegex();
    public static string CreateEncodedSignature(string input, SigningCredentials signingCredentials);
    public static string CreateEncodedSignature(string input, SigningCredentials signingCredentials, bool cacheProvider);
    internal static Byte[] CreateEncodedSignature(Byte[] input, int offset, int count, SigningCredentials signingCredentials);
    internal static bool CreateSignature(ReadOnlySpan`1<byte> data, Span`1<byte> destination, SigningCredentials signingCredentials, Int32& bytesWritten);
    internal static string DecompressToken(Byte[] tokenBytes, string algorithm, int maximumDeflateSize);
    internal static string DecryptJwtToken(SecurityToken securityToken, TokenValidationParameters validationParameters, JwtTokenDecryptionParameters decryptionParameters);
    private static ExceptionDetail GetDecryptionExceptionDetail(JwtTokenDecryptionParameters decryptionParameters, bool algorithmNotSupportedByCryptoProvider, StringBuilder exceptionStrings, StringBuilder keysAttempted, CallContext callContext);
    private static Byte[] DecryptToken(CryptoProviderFactory cryptoProviderFactory, SecurityKey key, string encAlg, Byte[] ciphertext, Byte[] headerAscii, Byte[] initializationVector, Byte[] authenticationTag);
    public static Byte[] GenerateKeyBytes(int sizeInBits);
    internal static SecurityKey GetSecurityKey(EncryptingCredentials encryptingCredentials, CryptoProviderFactory cryptoProviderFactory, IDictionary`2<string, object> additionalHeaderClaims, Byte[]& wrappedKey);
    public static IEnumerable`1<SecurityKey> GetAllDecryptionKeys(TokenValidationParameters validationParameters);
    internal static string SafeLogJwtToken(object obj);
    internal static SecurityKey ResolveTokenSigningKey(string kid, string x5t, TokenValidationParameters validationParameters, BaseConfiguration configuration);
    internal static SecurityKey ResolveTokenSigningKey(string kid, string x5t, IEnumerable`1<SecurityKey> signingKeys);
    internal static int CountJwtTokenPart(string token, int maxCount);
    [IteratorStateMachineAttribute("Microsoft.IdentityModel.JsonWebTokens.JwtTokenUtilities/<ConcatSigningKeys>d__22")]
internal static IEnumerable`1<SecurityKey> ConcatSigningKeys(TokenValidationParameters tvp);
    internal static string GetStringClaimValueType(string str);
    internal static string GetStringClaimValueType(string str, string claimType);
    internal static TokenDecryptionResult DecryptJwtToken(JsonWebToken jsonWebToken, ValidationParameters validationParameters, JwtTokenDecryptionParameters decryptionParameters, CallContext callContext);
}
internal static class Microsoft.IdentityModel.JsonWebTokens.LogMessages : object {
    internal static string IDX14000;
    internal static string IDX14100;
    internal static string IDX14101;
    internal static string IDX14102;
    internal static string IDX14103;
    internal static string IDX14107;
    internal static string IDX14112;
    internal static string IDX14113;
    internal static string IDX14114;
    internal static string IDX14116;
    internal static string IDX14120;
    internal static string IDX14121;
    internal static string IDX14122;
    internal static string IDX14200;
    internal static string IDX14201;
    internal static string IDX14304;
    internal static string IDX14305;
    internal static string IDX14306;
    internal static string IDX14307;
    internal static string IDX14308;
    internal static string IDX14309;
    internal static string IDX14310;
    internal static string IDX14311;
    internal static string IDX14312;
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.36612")]
[SkipLocalsInitAttribute]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F9A223FA39EE5C4CB41A930ED0C756ED902E98A8F98CD5CCC5B543A220FB03144__CreateJweRegex_1 : Regex {
    [NullableAttribute("1")]
internal static <RegexGenerator_g>F9A223FA39EE5C4CB41A930ED0C756ED902E98A8F98CD5CCC5B543A220FB03144__CreateJweRegex_1 Instance;
    private static <RegexGenerator_g>F9A223FA39EE5C4CB41A930ED0C756ED902E98A8F98CD5CCC5B543A220FB03144__CreateJweRegex_1();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.36612")]
[SkipLocalsInitAttribute]
internal class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F9A223FA39EE5C4CB41A930ED0C756ED902E98A8F98CD5CCC5B543A220FB03144__CreateJwsRegex_0 : Regex {
    [NullableAttribute("1")]
internal static <RegexGenerator_g>F9A223FA39EE5C4CB41A930ED0C756ED902E98A8F98CD5CCC5B543A220FB03144__CreateJwsRegex_0 Instance;
    private static <RegexGenerator_g>F9A223FA39EE5C4CB41A930ED0C756ED902E98A8F98CD5CCC5B543A220FB03144__CreateJwsRegex_0();
}
[GeneratedCodeAttribute("System.Text.RegularExpressions.Generator", "8.0.10.36612")]
internal static class System.Text.RegularExpressions.Generated.<RegexGenerator_g>F9A223FA39EE5C4CB41A930ED0C756ED902E98A8F98CD5CCC5B543A220FB03144__Utilities : object {
    [NullableAttribute("1")]
internal static SearchValues`1<char> s_ascii_20FF03FEFFFF87FEFFFF07;
    private static <RegexGenerator_g>F9A223FA39EE5C4CB41A930ED0C756ED902E98A8F98CD5CCC5B543A220FB03144__Utilities();
}
