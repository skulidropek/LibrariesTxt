[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.ContentStorage.DevTools.SimpleFileStorage : object {
    private ILogger`1<SimpleFileStorage> _log;
    private IFileSystem _fileSystem;
    public SimpleFileStorage(SimpleFileStorageConfig config, ILogger`1<SimpleFileStorage> log);
    public sealed virtual Task CreateIndexDirectoryAsync(string index, CancellationToken cancellationToken);
    public sealed virtual Task DeleteIndexDirectoryAsync(string index, CancellationToken cancellationToken);
    public sealed virtual Task CreateDocumentDirectoryAsync(string index, string documentId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.ContentStorage.DevTools.SimpleFileStorage/<EmptyDocumentDirectoryAsync>d__6")]
public sealed virtual Task EmptyDocumentDirectoryAsync(string index, string documentId, CancellationToken cancellationToken);
    public sealed virtual Task DeleteDocumentDirectoryAsync(string index, string documentId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.ContentStorage.DevTools.SimpleFileStorage/<WriteFileAsync>d__8")]
public sealed virtual Task WriteFileAsync(string index, string documentId, string fileName, Stream streamContent, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.ContentStorage.DevTools.SimpleFileStorage/<ReadFileAsync>d__9")]
public sealed virtual Task`1<BinaryData> ReadFileAsync(string index, string documentId, string fileName, bool logErrIfNotFound, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.ContentStorage.DevTools.SimpleFileStorageConfig : object {
    [CompilerGeneratedAttribute]
private FileSystemTypes <StorageType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Directory>k__BackingField;
    public FileSystemTypes StorageType { get; public set; }
    public string Directory { get; public set; }
    [CompilerGeneratedAttribute]
public FileSystemTypes get_StorageType();
    [CompilerGeneratedAttribute]
public void set_StorageType(FileSystemTypes value);
    [CompilerGeneratedAttribute]
public string get_Directory();
    [CompilerGeneratedAttribute]
public void set_Directory(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.DataFormats.Image.ImageDecoder : object {
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.DataFormats.Image.ImageDecoder/<ImageToTextAsync>d__0")]
public Task`1<string> ImageToTextAsync(IOcrEngine engine, string filename, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.DataFormats.Image.ImageDecoder/<ImageToTextAsync>d__1")]
public Task`1<string> ImageToTextAsync(IOcrEngine engine, BinaryData data, CancellationToken cancellationToken);
    public Task`1<string> ImageToTextAsync(IOcrEngine engine, Stream data, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.DataFormats.Office.MsExcelDecoder : object {
    private static string DefaultSheetNumberTemplate;
    private static string DefaultEndOfSheetTemplate;
    private static string DefaultRowPrefix;
    private static string DefaultColumnSeparator;
    private static string DefaultRowSuffix;
    private bool _withWorksheetNumber;
    private bool _withEndOfWorksheetMarker;
    private bool _withQuotes;
    private string _worksheetNumberTemplate;
    private string _endOfWorksheetMarkerTemplate;
    private string _rowPrefix;
    private string _columnSeparator;
    private string _rowSuffix;
    [NullableContextAttribute("2")]
public MsExcelDecoder(bool withWorksheetNumber, bool withEndOfWorksheetMarker, bool withQuotes, string worksheetNumberTemplate, string endOfWorksheetMarkerTemplate, string rowPrefix, string columnSeparator, string rowSuffix);
    public FileContent ExtractContent(string filename);
    public FileContent ExtractContent(BinaryData data);
    public FileContent ExtractContent(Stream data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.DataFormats.Office.MsPowerPointDecoder : object {
    private string _slideNumberTemplate;
    private string _endOfSlideMarkerTemplate;
    public MsPowerPointDecoder(string slideNumberTemplate, string endOfSlideMarkerTemplate);
    public FileContent ExtractContent(string filename, bool withSlideNumber, bool withEndOfSlideMarker, bool skipHiddenSlides);
    public FileContent ExtractContent(BinaryData data, bool withSlideNumber, bool withEndOfSlideMarker, bool skipHiddenSlides);
    public FileContent ExtractContent(Stream data, bool withSlideNumber, bool withEndOfSlideMarker, bool skipHiddenSlides);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.DataFormats.Office.MsWordDecoder : object {
    public FileContent ExtractContent(string filename);
    public FileContent ExtractContent(BinaryData data);
    public FileContent ExtractContent(Stream data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.DataFormats.Pdf.PdfDecoder : object {
    public FileContent ExtractContent(string filename);
    public FileContent ExtractContent(BinaryData data);
    public FileContent ExtractContent(Stream data);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.KernelMemory.DataFormats.Text.TextChunker : object {
    private static Char[] s_spaceChar;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static String[] s_plaintextSplitOptions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static String[] s_markdownSplitOptions;
    private static TextChunker();
    public static List`1<string> SplitPlainTextLines(string text, int maxTokensPerLine, TokenCounter tokenCounter);
    public static List`1<string> SplitMarkDownLines(string text, int maxTokensPerLine, TokenCounter tokenCounter);
    public static List`1<string> SplitPlainTextParagraphs(List`1<string> lines, int maxTokensPerParagraph, int overlapTokens, string chunkHeader, TokenCounter tokenCounter);
    public static List`1<string> SplitMarkdownParagraphs(List`1<string> lines, int maxTokensPerParagraph, int overlapTokens, string chunkHeader, TokenCounter tokenCounter);
    private static List`1<string> InternalSplitTextParagraphs(List`1<string> lines, int maxTokensPerParagraph, int overlapTokens, string chunkHeader, Func`4<string, int, TokenCounter, List`1<string>> longLinesSplitter, TokenCounter tokenCounter);
    private static List`1<string> BuildParagraph(IEnumerable`1<string> truncatedLines, int maxTokensPerParagraph, TokenCounter tokenCounter);
    private static List`1<string> ProcessParagraphs(List`1<string> paragraphs, int adjustedMaxTokensPerParagraph, int overlapTokens, string chunkHeader, Func`4<string, int, TokenCounter, List`1<string>> longLinesSplitter, TokenCounter tokenCounter);
    private static List`1<string> InternalSplitLines(string text, int maxTokensPerLine, bool trim, String[] splitOptions, TokenCounter tokenCounter);
    [NullableContextAttribute("0")]
private static ValueTuple`2<List`1<string>, bool> Split(List`1<string> input, int maxTokens, ReadOnlySpan`1<char> separators, bool trim, TokenCounter tokenCounter);
    [NullableContextAttribute("0")]
private static ValueTuple`2<List`1<string>, bool> Split(ReadOnlySpan`1<char> input, string inputString, int maxTokens, ReadOnlySpan`1<char> separators, bool trim, TokenCounter tokenCounter);
    private static int GetTokenCount(string input, TokenCounter tokenCounter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.DataFormats.WebPages.WebScraper : object {
    private ILogger _log;
    [NullableContextAttribute("2")]
public WebScraper(ILogger log);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.DataFormats.WebPages.WebScraper/<GetTextAsync>d__3")]
public Task`1<Result> GetTextAsync(string url);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.DataFormats.WebPages.WebScraper/<GetAsync>d__4")]
private Task`1<Result> GetAsync(Uri url);
    private static ResiliencePipeline`1<HttpResponseMessage> RetryLogic();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.KernelMemory.DependencyInjection : object {
    [ExtensionAttribute]
public static void AddHandlerAsHostedService(IServiceCollection services, string stepName);
    [ExtensionAttribute]
public static IServiceCollection AddSimpleFileStorageAsContentStorage(IServiceCollection services, SimpleFileStorageConfig config);
    [ExtensionAttribute]
public static IServiceCollection AddSimpleFileStorageAsContentStorage(IServiceCollection services, string directory);
    [ExtensionAttribute]
public static IServiceCollection AddSimpleVectorDbAsMemoryDb(IServiceCollection services, SimpleVectorDbConfig config);
    [ExtensionAttribute]
public static IServiceCollection AddSimpleVectorDbAsMemoryDb(IServiceCollection services, string directory);
    [ExtensionAttribute]
public static IServiceCollection AddSimpleTextDbAsMemoryDb(IServiceCollection services, SimpleTextDbConfig config);
    [ExtensionAttribute]
public static IServiceCollection AddSimpleTextDbAsMemoryDb(IServiceCollection services, string directory);
    [ExtensionAttribute]
public static IServiceCollection AddSimpleQueues(IServiceCollection services, SimpleQueuesConfig config);
    [ExtensionAttribute]
public static IServiceCollection AddSimpleQueues(IServiceCollection services, string directory);
    [ExtensionAttribute]
public static IServiceCollection AddDefaultSearchClient(IServiceCollection services, SearchClientConfig config);
    [ExtensionAttribute]
public static IServiceCollection AddCustomSearchClient(IServiceCollection services, ISearchClient instance);
    [ExtensionAttribute]
public static IServiceCollection AddSearchClientConfig(IServiceCollection services, SearchClientConfig instance);
}
[ExtensionAttribute]
public static class Microsoft.KernelMemory.Diagnostics.LoggerExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string GetLogLevelName(ILogger log);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.Diagnostics.PipelineCompletedException : KernelMemoryException {
    public PipelineCompletedException(string message);
    public PipelineCompletedException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.KernelMemory.Diagnostics.Verify : object {
    public static void NotEmptyString(string value, string errMsg);
    public static void ValidateUrl(string url, bool requireHttps, bool allowReservedIp, bool allowQuery);
    [CompilerGeneratedAttribute]
internal static bool <ValidateUrl>g__IsReservedIpAddress|1_0(string host);
}
public class Microsoft.KernelMemory.Env : object {
    [NullableContextAttribute("1")]
public static string Var(string key);
}
[ExtensionAttribute]
public static class Microsoft.KernelMemory.Extensions.BinaryDataExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string CalculateSHA256(BinaryData binaryData);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.KernelMemory.FileSystem.DevTools.DiskFileSystem : object {
    private static string DefaultVolumeName;
    private static Regex s_invalidCharsRegex;
    private ILogger _log;
    private string _dataPath;
    public DiskFileSystem(string directory, ILogger log);
    private static DiskFileSystem();
    public sealed virtual Task CreateVolumeAsync(string volume, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> VolumeExistsAsync(string volume, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.FileSystem.DevTools.DiskFileSystem/<DeleteVolumeAsync>d__7")]
public sealed virtual Task DeleteVolumeAsync(string volume, CancellationToken cancellationToken);
    public sealed virtual Task`1<IEnumerable`1<string>> ListVolumesAsync(CancellationToken cancellationToken);
    public sealed virtual Task CreateDirectoryAsync(string volume, string relPath, CancellationToken cancellationToken);
    public sealed virtual Task DeleteDirectoryAsync(string volume, string relPath, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.FileSystem.DevTools.DiskFileSystem/<WriteFileAsync>d__11")]
public sealed virtual Task WriteFileAsync(string volume, string relPath, string fileName, Stream streamContent, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.FileSystem.DevTools.DiskFileSystem/<WriteFileAsync>d__12")]
public sealed virtual Task WriteFileAsync(string volume, string relPath, string fileName, string data, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.FileSystem.DevTools.DiskFileSystem/<ReadFileAsBinaryAsync>d__13")]
public sealed virtual Task`1<BinaryData> ReadFileAsBinaryAsync(string volume, string relPath, string fileName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.FileSystem.DevTools.DiskFileSystem/<ReadFileAsTextAsync>d__14")]
public sealed virtual Task`1<string> ReadFileAsTextAsync(string volume, string relPath, string fileName, CancellationToken cancellationToken);
    public sealed virtual Task`1<IEnumerable`1<string>> GetAllFileNamesAsync(string volume, string relPath, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> FileExistsAsync(string volume, string relPath, string fileName, CancellationToken cancellationToken);
    public sealed virtual Task DeleteFileAsync(string volume, string relPath, string fileName, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.FileSystem.DevTools.DiskFileSystem/<ReadAllFilesAsTextAsync>d__18")]
public sealed virtual Task`1<IDictionary`2<string, string>> ReadAllFilesAsTextAsync(string volume, string relPath, CancellationToken cancellationToken);
    private static string ValidateVolumeName(string volume);
    private static string ValidatePath(string path);
    private static string ValidateFileName(string fileName);
    private void CreateDirectory(string path);
}
public enum Microsoft.KernelMemory.FileSystem.DevTools.FileSystemTypes : Enum {
    public int value__;
    public static FileSystemTypes Disk;
    public static FileSystemTypes Volatile;
}
[NullableContextAttribute("1")]
internal interface Microsoft.KernelMemory.FileSystem.DevTools.IFileSystem {
    public abstract virtual Task CreateVolumeAsync(string volume, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> VolumeExistsAsync(string volume, CancellationToken cancellationToken);
    public abstract virtual Task DeleteVolumeAsync(string volume, CancellationToken cancellationToken);
    public abstract virtual Task`1<IEnumerable`1<string>> ListVolumesAsync(CancellationToken cancellationToken);
    public abstract virtual Task CreateDirectoryAsync(string volume, string relPath, CancellationToken cancellationToken);
    public abstract virtual Task DeleteDirectoryAsync(string volume, string relPath, CancellationToken cancellationToken);
    public abstract virtual Task WriteFileAsync(string volume, string relPath, string fileName, Stream streamContent, CancellationToken cancellationToken);
    public abstract virtual Task WriteFileAsync(string volume, string relPath, string fileName, string data, CancellationToken cancellationToken);
    public abstract virtual Task`1<bool> FileExistsAsync(string volume, string relPath, string fileName, CancellationToken cancellationToken);
    public abstract virtual Task`1<BinaryData> ReadFileAsBinaryAsync(string volume, string relPath, string fileName, CancellationToken cancellationToken);
    public abstract virtual Task`1<string> ReadFileAsTextAsync(string volume, string relPath, string fileName, CancellationToken cancellationToken);
    public abstract virtual Task`1<IDictionary`2<string, string>> ReadAllFilesAsTextAsync(string volume, string relPath, CancellationToken cancellationToken);
    public abstract virtual Task`1<IEnumerable`1<string>> GetAllFileNamesAsync(string volume, string relPath, CancellationToken cancellationToken);
    public abstract virtual Task DeleteFileAsync(string volume, string relPath, string fileName, CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class Microsoft.KernelMemory.FileSystem.DevTools.StreamExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static Byte[] ReadAllBytes(Stream stream);
}
[ExtensionAttribute]
public static class Microsoft.KernelMemory.FileSystem.DevTools.StringExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static string RemoveBOM(string x);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.KernelMemory.FileSystem.DevTools.VolatileFileSystem : object {
    private static string DefaultVolumeName;
    private static char DirSeparator;
    private static Regex s_invalidCharsRegex;
    private static ConcurrentDictionary`2<string, VolatileFileSystem> s_singletons;
    private ILogger _log;
    private ConcurrentDictionary`2<string, ConcurrentDictionary`2<string, BinaryData>> _volumes;
    [NullableContextAttribute("2")]
internal VolatileFileSystem(ILogger log);
    private static VolatileFileSystem();
    public static VolatileFileSystem GetInstance(string directory, ILogger log);
    public sealed virtual Task CreateVolumeAsync(string volume, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> VolumeExistsAsync(string volume, CancellationToken cancellationToken);
    public sealed virtual Task DeleteVolumeAsync(string volume, CancellationToken cancellationToken);
    public sealed virtual Task`1<IEnumerable`1<string>> ListVolumesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.FileSystem.DevTools.VolatileFileSystem/<CreateDirectoryAsync>d__12")]
public sealed virtual Task CreateDirectoryAsync(string volume, string relPath, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.FileSystem.DevTools.VolatileFileSystem/<DeleteDirectoryAsync>d__13")]
public sealed virtual Task DeleteDirectoryAsync(string volume, string relPath, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.FileSystem.DevTools.VolatileFileSystem/<WriteFileAsync>d__14")]
public sealed virtual Task WriteFileAsync(string volume, string relPath, string fileName, Stream streamContent, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.FileSystem.DevTools.VolatileFileSystem/<WriteFileAsync>d__15")]
public sealed virtual Task WriteFileAsync(string volume, string relPath, string fileName, string data, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.FileSystem.DevTools.VolatileFileSystem/<ReadFileAsTextAsync>d__16")]
public sealed virtual Task`1<string> ReadFileAsTextAsync(string volume, string relPath, string fileName, CancellationToken cancellationToken);
    public sealed virtual Task`1<BinaryData> ReadFileAsBinaryAsync(string volume, string relPath, string fileName, CancellationToken cancellationToken);
    public sealed virtual Task`1<IEnumerable`1<string>> GetAllFileNamesAsync(string volume, string relPath, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> FileExistsAsync(string volume, string relPath, string fileName, CancellationToken cancellationToken);
    public sealed virtual Task DeleteFileAsync(string volume, string relPath, string fileName, CancellationToken cancellationToken);
    public sealed virtual Task`1<IDictionary`2<string, string>> ReadAllFilesAsTextAsync(string volume, string relPath, CancellationToken cancellationToken);
    internal ConcurrentDictionary`2<string, ConcurrentDictionary`2<string, BinaryData>> GetInternalState();
    private Task ValidateVolumeExistsAsync(string volume, CancellationToken cancellationToken);
    private void ThrowVolumeNotFound(string volume);
    private static string ValidateVolumeName(string volume);
    private static string ValidatePath(string path);
    private static string ValidateFileName(string fileName);
    private static string JoinPaths(string a, string b);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.HandlerAsAHostedService`1 : object {
    private T _handler;
    private IPipelineOrchestrator _orchestrator;
    private string _stepName;
    private ILogger`1<HandlerAsAHostedService`1<T>> _log;
    public HandlerAsAHostedService`1(string stepName, IPipelineOrchestrator orchestrator, T handler, ILogger`1<HandlerAsAHostedService`1<T>> log);
    public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    public sealed virtual Task StopAsync(CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.Handlers.DeleteDocumentHandler : object {
    private List`1<IMemoryDb> _memoryDbs;
    private IContentStorage _contentStorage;
    private ILogger`1<DeleteDocumentHandler> _log;
    [CompilerGeneratedAttribute]
private string <StepName>k__BackingField;
    public string StepName { get; }
    public DeleteDocumentHandler(string stepName, IContentStorage contentStorage, List`1<IMemoryDb> memoryDbs, ILogger`1<DeleteDocumentHandler> log);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StepName();
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Handlers.DeleteDocumentHandler/<InvokeAsync>d__7")]
public sealed virtual Task`1<ValueTuple`2<bool, DataPipeline>> InvokeAsync(DataPipeline pipeline, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.Handlers.DeleteGeneratedFilesHandler : object {
    private IContentStorage _contentStorage;
    private ILogger`1<DeleteGeneratedFilesHandler> _log;
    [CompilerGeneratedAttribute]
private string <StepName>k__BackingField;
    public string StepName { get; }
    public DeleteGeneratedFilesHandler(string stepName, IContentStorage contentStorage, ILogger`1<DeleteGeneratedFilesHandler> log);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StepName();
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Handlers.DeleteGeneratedFilesHandler/<InvokeAsync>d__6")]
public sealed virtual Task`1<ValueTuple`2<bool, DataPipeline>> InvokeAsync(DataPipeline pipeline, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.Handlers.DeleteIndexHandler : object {
    private List`1<IMemoryDb> _memoryDbs;
    private IContentStorage _contentStorage;
    private ILogger`1<DeleteIndexHandler> _log;
    [CompilerGeneratedAttribute]
private string <StepName>k__BackingField;
    public string StepName { get; }
    public DeleteIndexHandler(string stepName, IContentStorage contentStorage, List`1<IMemoryDb> memoryDbs, ILogger`1<DeleteIndexHandler> log);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StepName();
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Handlers.DeleteIndexHandler/<InvokeAsync>d__7")]
public sealed virtual Task`1<ValueTuple`2<bool, DataPipeline>> InvokeAsync(DataPipeline pipeline, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.Handlers.GenerateEmbeddingsHandler : object {
    private IPipelineOrchestrator _orchestrator;
    private ILogger`1<GenerateEmbeddingsHandler> _log;
    private List`1<ITextEmbeddingGenerator> _embeddingGenerators;
    private bool _embeddingGenerationEnabled;
    [CompilerGeneratedAttribute]
private string <StepName>k__BackingField;
    public string StepName { get; }
    public GenerateEmbeddingsHandler(string stepName, IPipelineOrchestrator orchestrator, ILogger`1<GenerateEmbeddingsHandler> log);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StepName();
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Handlers.GenerateEmbeddingsHandler/<InvokeAsync>d__8")]
public sealed virtual Task`1<ValueTuple`2<bool, DataPipeline>> InvokeAsync(DataPipeline pipeline, CancellationToken cancellationToken);
    private static string GetEmbeddingFileName(string srcFilename, string type, string embeddingName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.Handlers.SaveRecordsHandler : object {
    private IPipelineOrchestrator _orchestrator;
    private List`1<IMemoryDb> _memoryDbs;
    private ILogger`1<SaveRecordsHandler> _log;
    private bool _embeddingGenerationEnabled;
    [CompilerGeneratedAttribute]
private string <StepName>k__BackingField;
    public string StepName { get; }
    public SaveRecordsHandler(string stepName, IPipelineOrchestrator orchestrator, ILogger`1<SaveRecordsHandler> log);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StepName();
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Handlers.SaveRecordsHandler/<InvokeAsync>d__9")]
public sealed virtual Task`1<ValueTuple`2<bool, DataPipeline>> InvokeAsync(DataPipeline pipeline, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Handlers.SaveRecordsHandler/<SaveEmbeddingsAsync>d__10")]
public Task`1<ValueTuple`2<bool, DataPipeline>> SaveEmbeddingsAsync(DataPipeline pipeline, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Handlers.SaveRecordsHandler/<SavePartitionsAsync>d__11")]
public Task`1<ValueTuple`2<bool, DataPipeline>> SavePartitionsAsync(DataPipeline pipeline, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Handlers.SaveRecordsHandler/<DeletePreviousRecordsAsync>d__12")]
private Task DeletePreviousRecordsAsync(DataPipeline pipeline, CancellationToken cancellationToken);
    private static IEnumerable`1<FileDetailsWithRecordId> GetListOfEmbeddingFiles(DataPipeline pipeline);
    private static IEnumerable`1<FileDetailsWithRecordId> GetListOfPartitionAndSyntheticFiles(DataPipeline pipeline);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Handlers.SaveRecordsHandler/<GetSourceUrlAsync>d__15")]
private Task`1<string> GetSourceUrlAsync(DataPipeline pipeline, FileDetails file, CancellationToken cancellationToken);
    private static MemoryRecord PrepareRecord(DataPipeline pipeline, string recordId, string fileName, string url, string fileId, string partitionFileId, string partitionContent, int partitionNumber, int sectionNumber, Embedding partitionEmbedding, string embeddingGeneratorProvider, string embeddingGeneratorName, TagCollection tags);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.Handlers.SummarizationHandler : object {
    private static int MinLength;
    private IPipelineOrchestrator _orchestrator;
    private ILogger`1<SummarizationHandler> _log;
    private string _summarizationPrompt;
    [CompilerGeneratedAttribute]
private string <StepName>k__BackingField;
    public string StepName { get; }
    public SummarizationHandler(string stepName, IPipelineOrchestrator orchestrator, IPromptProvider promptProvider, ILogger`1<SummarizationHandler> log);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StepName();
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Handlers.SummarizationHandler/<InvokeAsync>d__8")]
public sealed virtual Task`1<ValueTuple`2<bool, DataPipeline>> InvokeAsync(DataPipeline pipeline, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Handlers.SummarizationHandler/<SummarizeAsync>d__9")]
private Task`1<ValueTuple`2<string, bool>> SummarizeAsync(string content);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.Handlers.TextExtractionHandler : object {
    private IPipelineOrchestrator _orchestrator;
    private WebScraper _webScraper;
    [NullableAttribute("2")]
private IOcrEngine _ocrEngine;
    private ILogger`1<TextExtractionHandler> _log;
    [CompilerGeneratedAttribute]
private string <StepName>k__BackingField;
    public string StepName { get; }
    public TextExtractionHandler(string stepName, IPipelineOrchestrator orchestrator, IOcrEngine ocrEngine, ILogger`1<TextExtractionHandler> log);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StepName();
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Handlers.TextExtractionHandler/<InvokeAsync>d__8")]
public sealed virtual Task`1<ValueTuple`2<bool, DataPipeline>> InvokeAsync(DataPipeline pipeline, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Handlers.TextExtractionHandler/<ExtractTextAsync>d__9")]
private Task`1<ValueTuple`4<string, FileContent, string, bool>> ExtractTextAsync(FileDetails uploadedFile, BinaryData fileContent, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.Handlers.TextPartitioningHandler : object {
    private IPipelineOrchestrator _orchestrator;
    private TextPartitioningOptions _options;
    private ILogger`1<TextPartitioningHandler> _log;
    private TokenCounter _tokenCounter;
    private int _maxTokensPerPartition;
    [CompilerGeneratedAttribute]
private string <StepName>k__BackingField;
    public string StepName { get; }
    public TextPartitioningHandler(string stepName, IPipelineOrchestrator orchestrator, TextPartitioningOptions options, ILogger`1<TextPartitioningHandler> log);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StepName();
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Handlers.TextPartitioningHandler/<InvokeAsync>d__9")]
public sealed virtual Task`1<ValueTuple`2<bool, DataPipeline>> InvokeAsync(DataPipeline pipeline, CancellationToken cancellationToken);
}
internal static class Microsoft.KernelMemory.InternalConstants : object {
    [NullableAttribute("1")]
public static string DocsBaseUrl;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.KernelMemoryBuilder : object {
    private ServiceCollectionPool _serviceCollections;
    private IServiceCollection _memoryServiceCollection;
    [NullableAttribute("2")]
private IServiceCollection _hostServiceCollection;
    private List`1<ITextEmbeddingGenerator> _embeddingGenerators;
    private List`1<IMemoryDb> _memoryDbs;
    [NullableAttribute("2")]
private KernelMemoryConfig _memoryConfiguration;
    private bool _useDefaultHandlers;
    public ServiceCollectionPool Services { get; }
    [NullableContextAttribute("2")]
public KernelMemoryBuilder(IServiceCollection hostServiceCollection);
    public sealed virtual ServiceCollectionPool get_Services();
    public sealed virtual IKernelMemory Build();
    public sealed virtual T Build();
    public sealed virtual IKernelMemoryBuilder AddSingleton(TService implementationInstance);
    public sealed virtual IKernelMemoryBuilder AddSingleton();
    public sealed virtual IKernelMemoryBuilder WithoutDefaultHandlers();
    public sealed virtual IKernelMemoryBuilder AddIngestionMemoryDb(IMemoryDb service);
    public sealed virtual IKernelMemoryBuilder AddIngestionEmbeddingGenerator(ITextEmbeddingGenerator service);
    public sealed virtual IPipelineOrchestrator GetOrchestrator();
    [NullableContextAttribute("2")]
private static void CopyServiceCollection(IServiceCollection source, IServiceCollection destination1, IServiceCollection destination2);
    private MemoryServerless BuildServerlessClient();
    private MemoryService BuildAsyncClient();
    private KernelMemoryBuilder CompleteServerlessClient(ServiceProvider serviceProvider);
    private KernelMemoryBuilder CompleteAsyncClient(ServiceProvider serviceProvider);
    private void CheckForMissingDependencies();
    private void RequireEmbeddingGenerator();
    private void RequireOneMemoryDbForIngestion();
    private void RequireOneMemoryDbForRetrieval();
    private void UseDefaultSearchClientIfNecessary(ServiceProvider serviceProvider);
    private void ReuseRetrievalEmbeddingGeneratorIfNecessary(IServiceProvider serviceProvider);
    private void ReuseRetrievalMemoryDbIfNecessary(IServiceProvider serviceProvider);
    private bool IsEmbeddingGeneratorEnabled();
    private ClientTypes GetBuildType();
    private static void ShowException(Exception e);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.KernelMemory.KernelMemoryBuilderExtensions : object {
    [ExtensionAttribute]
public static IKernelMemoryBuilder WithSimpleFileStorage(IKernelMemoryBuilder builder, SimpleFileStorageConfig config);
    [ExtensionAttribute]
public static IKernelMemoryBuilder WithSimpleFileStorage(IKernelMemoryBuilder builder, string directory);
    [ExtensionAttribute]
public static IKernelMemoryBuilder WithDefaultMimeTypeDetection(IKernelMemoryBuilder builder);
    [ExtensionAttribute]
public static IKernelMemoryBuilder WithDefaultPromptProvider(IKernelMemoryBuilder builder);
    [ExtensionAttribute]
public static IKernelMemoryBuilder WithSimpleVectorDb(IKernelMemoryBuilder builder, SimpleVectorDbConfig config);
    [ExtensionAttribute]
public static IKernelMemoryBuilder WithSimpleVectorDb(IKernelMemoryBuilder builder, string directory);
    [ExtensionAttribute]
public static IKernelMemoryBuilder WithSimpleTextDb(IKernelMemoryBuilder builder, SimpleTextDbConfig config);
    [ExtensionAttribute]
public static IKernelMemoryBuilder WithSimpleTextDb(IKernelMemoryBuilder builder, string directory);
    [ExtensionAttribute]
public static IKernelMemoryBuilder WithSimpleQueuesPipeline(IKernelMemoryBuilder builder, SimpleQueuesConfig config);
    [ExtensionAttribute]
public static IKernelMemoryBuilder WithSimpleQueuesPipeline(IKernelMemoryBuilder builder, string directory);
    [ExtensionAttribute]
public static IKernelMemoryBuilder WithDefaultSearchClient(IKernelMemoryBuilder builder, SearchClientConfig config);
    [ExtensionAttribute]
public static IKernelMemoryBuilder WithSearchClientConfig(IKernelMemoryBuilder builder, SearchClientConfig config);
    [ExtensionAttribute]
public static IKernelMemoryBuilder WithCustomSearchClient(IKernelMemoryBuilder builder, ISearchClient instance);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.MemoryServerless : object {
    private ISearchClient _searchClient;
    private InProcessPipelineOrchestrator _orchestrator;
    public InProcessPipelineOrchestrator Orchestrator { get; }
    public MemoryServerless(InProcessPipelineOrchestrator orchestrator, ISearchClient searchClient);
    public InProcessPipelineOrchestrator get_Orchestrator();
    public void AddHandler(IPipelineStepHandler handler);
    public sealed virtual Task`1<string> ImportDocumentAsync(Document document, string index, IEnumerable`1<string> steps, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public sealed virtual Task`1<string> ImportDocumentAsync(string filePath, string documentId, TagCollection tags, string index, IEnumerable`1<string> steps, CancellationToken cancellationToken);
    public sealed virtual Task`1<string> ImportDocumentAsync(DocumentUploadRequest uploadRequest, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public sealed virtual Task`1<string> ImportDocumentAsync(Stream content, string fileName, string documentId, TagCollection tags, string index, IEnumerable`1<string> steps, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Microsoft.KernelMemory.MemoryServerless/<ImportTextAsync>d__10")]
public sealed virtual Task`1<string> ImportTextAsync(string text, string documentId, TagCollection tags, string index, IEnumerable`1<string> steps, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Microsoft.KernelMemory.MemoryServerless/<ImportWebPageAsync>d__11")]
public sealed virtual Task`1<string> ImportWebPageAsync(string url, string documentId, TagCollection tags, string index, IEnumerable`1<string> steps, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.MemoryServerless/<ListIndexesAsync>d__12")]
public sealed virtual Task`1<IEnumerable`1<IndexDetails>> ListIndexesAsync(CancellationToken cancellationToken);
    public sealed virtual Task DeleteIndexAsync(string index, CancellationToken cancellationToken);
    public sealed virtual Task DeleteDocumentAsync(string documentId, string index, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.MemoryServerless/<IsDocumentReadyAsync>d__15")]
public sealed virtual Task`1<bool> IsDocumentReadyAsync(string documentId, string index, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.MemoryServerless/<GetDocumentStatusAsync>d__16")]
public sealed virtual Task`1<DataPipelineStatus> GetDocumentStatusAsync(string documentId, string index, CancellationToken cancellationToken);
    public sealed virtual Task`1<SearchResult> SearchAsync(string query, string index, MemoryFilter filter, ICollection`1<MemoryFilter> filters, double minRelevance, int limit, CancellationToken cancellationToken);
    public sealed virtual Task`1<MemoryAnswer> AskAsync(string question, string index, MemoryFilter filter, ICollection`1<MemoryFilter> filters, double minRelevance, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.MemoryService : object {
    private IPipelineOrchestrator _orchestrator;
    private ISearchClient _searchClient;
    public MemoryService(IPipelineOrchestrator orchestrator, ISearchClient searchClient);
    public sealed virtual Task`1<string> ImportDocumentAsync(Document document, string index, IEnumerable`1<string> steps, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public sealed virtual Task`1<string> ImportDocumentAsync(string filePath, string documentId, TagCollection tags, string index, IEnumerable`1<string> steps, CancellationToken cancellationToken);
    public sealed virtual Task`1<string> ImportDocumentAsync(DocumentUploadRequest uploadRequest, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
public sealed virtual Task`1<string> ImportDocumentAsync(Stream content, string fileName, string documentId, TagCollection tags, string index, IEnumerable`1<string> steps, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Microsoft.KernelMemory.MemoryService/<ImportTextAsync>d__7")]
public sealed virtual Task`1<string> ImportTextAsync(string text, string documentId, TagCollection tags, string index, IEnumerable`1<string> steps, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Microsoft.KernelMemory.MemoryService/<ImportWebPageAsync>d__8")]
public sealed virtual Task`1<string> ImportWebPageAsync(string url, string documentId, TagCollection tags, string index, IEnumerable`1<string> steps, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.MemoryService/<ListIndexesAsync>d__9")]
public sealed virtual Task`1<IEnumerable`1<IndexDetails>> ListIndexesAsync(CancellationToken cancellationToken);
    public sealed virtual Task DeleteIndexAsync(string index, CancellationToken cancellationToken);
    public sealed virtual Task DeleteDocumentAsync(string documentId, string index, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> IsDocumentReadyAsync(string documentId, string index, CancellationToken cancellationToken);
    public sealed virtual Task`1<DataPipelineStatus> GetDocumentStatusAsync(string documentId, string index, CancellationToken cancellationToken);
    public sealed virtual Task`1<SearchResult> SearchAsync(string query, string index, MemoryFilter filter, ICollection`1<MemoryFilter> filters, double minRelevance, int limit, CancellationToken cancellationToken);
    public sealed virtual Task`1<MemoryAnswer> AskAsync(string question, string index, MemoryFilter filter, ICollection`1<MemoryFilter> filters, double minRelevance, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.MemoryStorage.DevTools.SimpleTextDb : object {
    private IFileSystem _fileSystem;
    private ILogger`1<SimpleTextDb> _log;
    private static Regex s_replaceIndexNameCharsRegex;
    private static string ValidSeparator;
    public SimpleTextDb(SimpleTextDbConfig config, ILogger`1<SimpleTextDb> log);
    private static SimpleTextDb();
    public sealed virtual Task CreateIndexAsync(string index, int vectorSize, CancellationToken cancellationToken);
    public sealed virtual Task`1<IEnumerable`1<string>> GetIndexesAsync(CancellationToken cancellationToken);
    public sealed virtual Task DeleteIndexAsync(string index, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.MemoryStorage.DevTools.SimpleTextDb/<UpsertAsync>d__6")]
public sealed virtual Task`1<string> UpsertAsync(string index, MemoryRecord record, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Microsoft.KernelMemory.MemoryStorage.DevTools.SimpleTextDb/<GetSimilarListAsync>d__7")]
public sealed virtual IAsyncEnumerable`1<ValueTuple`2<MemoryRecord, double>> GetSimilarListAsync(string index, string text, ICollection`1<MemoryFilter> filters, double minRelevance, int limit, bool withEmbeddings, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Microsoft.KernelMemory.MemoryStorage.DevTools.SimpleTextDb/<GetListAsync>d__8")]
public sealed virtual IAsyncEnumerable`1<MemoryRecord> GetListAsync(string index, ICollection`1<MemoryFilter> filters, int limit, bool withEmbeddings, CancellationToken cancellationToken);
    public sealed virtual Task DeleteAsync(string index, MemoryRecord record, CancellationToken cancellationToken);
    private static string NormalizeIndexName(string index);
    private static bool TagsMatchFilters(TagCollection tags, ICollection`1<MemoryFilter> filters);
    private static string EncodeId(string realId);
    private static string DecodeId(string encodedId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.MemoryStorage.DevTools.SimpleTextDbConfig : object {
    [CompilerGeneratedAttribute]
private FileSystemTypes <StorageType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Directory>k__BackingField;
    public FileSystemTypes StorageType { get; public set; }
    public string Directory { get; public set; }
    [CompilerGeneratedAttribute]
public FileSystemTypes get_StorageType();
    [CompilerGeneratedAttribute]
public void set_StorageType(FileSystemTypes value);
    [CompilerGeneratedAttribute]
public string get_Directory();
    [CompilerGeneratedAttribute]
public void set_Directory(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.MemoryStorage.DevTools.SimpleVectorDb : object {
    private ITextEmbeddingGenerator _embeddingGenerator;
    private IFileSystem _fileSystem;
    private ILogger`1<SimpleVectorDb> _log;
    private static Regex s_replaceIndexNameCharsRegex;
    private static string ValidSeparator;
    public SimpleVectorDb(SimpleVectorDbConfig config, ITextEmbeddingGenerator embeddingGenerator, ILogger`1<SimpleVectorDb> log);
    private static SimpleVectorDb();
    public sealed virtual Task CreateIndexAsync(string index, int vectorSize, CancellationToken cancellationToken);
    public sealed virtual Task`1<IEnumerable`1<string>> GetIndexesAsync(CancellationToken cancellationToken);
    public sealed virtual Task DeleteIndexAsync(string index, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.MemoryStorage.DevTools.SimpleVectorDb/<UpsertAsync>d__7")]
public sealed virtual Task`1<string> UpsertAsync(string index, MemoryRecord record, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Microsoft.KernelMemory.MemoryStorage.DevTools.SimpleVectorDb/<GetSimilarListAsync>d__8")]
public sealed virtual IAsyncEnumerable`1<ValueTuple`2<MemoryRecord, double>> GetSimilarListAsync(string index, string text, ICollection`1<MemoryFilter> filters, double minRelevance, int limit, bool withEmbeddings, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Microsoft.KernelMemory.MemoryStorage.DevTools.SimpleVectorDb/<GetListAsync>d__9")]
public sealed virtual IAsyncEnumerable`1<MemoryRecord> GetListAsync(string index, ICollection`1<MemoryFilter> filters, int limit, bool withEmbeddings, CancellationToken cancellationToken);
    public sealed virtual Task DeleteAsync(string index, MemoryRecord record, CancellationToken cancellationToken);
    private static string NormalizeIndexName(string index);
    private static bool TagsMatchFilters(TagCollection tags, ICollection`1<MemoryFilter> filters);
    private static string EncodeId(string realId);
    private static string DecodeId(string encodedId);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.MemoryStorage.DevTools.SimpleVectorDbConfig : object {
    [CompilerGeneratedAttribute]
private FileSystemTypes <StorageType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Directory>k__BackingField;
    public FileSystemTypes StorageType { get; public set; }
    public string Directory { get; public set; }
    [CompilerGeneratedAttribute]
public FileSystemTypes get_StorageType();
    [CompilerGeneratedAttribute]
public void set_StorageType(FileSystemTypes value);
    [CompilerGeneratedAttribute]
public string get_Directory();
    [CompilerGeneratedAttribute]
public void set_Directory(string value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.MemoryStorage.DevTools.SimpleVectorDbException : KernelMemoryException {
    public SimpleVectorDbException(string message);
    public SimpleVectorDbException(string message, Exception innerException);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.KernelMemory.MemoryStorage.MemoryRecordExtensions : object {
    [ExtensionAttribute]
public static string GetDocumentId(MemoryRecord record, ILogger log);
    [ExtensionAttribute]
public static string GetFileId(MemoryRecord record, ILogger log);
    [ExtensionAttribute]
public static int GetPartitionNumber(MemoryRecord record, ILogger log);
    [ExtensionAttribute]
public static int GetSectionNumber(MemoryRecord record, ILogger log);
    [ExtensionAttribute]
public static string GetFileContentType(MemoryRecord record, ILogger log);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static string GetWebPageUrl(MemoryRecord record, ILogger log);
    [ExtensionAttribute]
public static string GetFileName(MemoryRecord record, ILogger log);
    [ExtensionAttribute]
public static string GetPartitionText(MemoryRecord record, ILogger log);
    [ExtensionAttribute]
public static DateTimeOffset GetLastUpdate(MemoryRecord record, ILogger log);
    [ExtensionAttribute]
public static string GetTagValue(MemoryRecord record, string tagName, ILogger log);
    [ExtensionAttribute]
public static object GetPayloadValue(MemoryRecord record, string payloadKey, ILogger log);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.KernelMemory.Pipeline.BaseOrchestrator : object {
    private static JsonSerializerOptions s_indentedJsonOptions;
    private static JsonSerializerOptions s_notIndentedJsonOptions;
    private List`1<IMemoryDb> _memoryDbs;
    private List`1<ITextEmbeddingGenerator> _embeddingGenerators;
    private ITextGenerator _textGenerator;
    private List`1<string> _defaultIngestionSteps;
    private IContentStorage _contentStorage;
    private IMimeTypeDetection _mimeTypeDetection;
    [CompilerGeneratedAttribute]
private ILogger`1<BaseOrchestrator> <Log>k__BackingField;
    [CompilerGeneratedAttribute]
private CancellationTokenSource <CancellationTokenSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmbeddingGenerationEnabled>k__BackingField;
    protected ILogger`1<BaseOrchestrator> Log { get; private set; }
    protected CancellationTokenSource CancellationTokenSource { get; private set; }
    public bool EmbeddingGenerationEnabled { get; }
    protected BaseOrchestrator(IContentStorage contentStorage, List`1<ITextEmbeddingGenerator> embeddingGenerators, List`1<IMemoryDb> memoryDbs, ITextGenerator textGenerator, IMimeTypeDetection mimeTypeDetection, KernelMemoryConfig config, ILogger`1<BaseOrchestrator> log);
    private static BaseOrchestrator();
    [CompilerGeneratedAttribute]
protected ILogger`1<BaseOrchestrator> get_Log();
    [CompilerGeneratedAttribute]
private void set_Log(ILogger`1<BaseOrchestrator> value);
    [CompilerGeneratedAttribute]
protected CancellationTokenSource get_CancellationTokenSource();
    [CompilerGeneratedAttribute]
private void set_CancellationTokenSource(CancellationTokenSource value);
    public abstract virtual Task AddHandlerAsync(IPipelineStepHandler handler, CancellationToken cancellationToken);
    public abstract virtual Task TryAddHandlerAsync(IPipelineStepHandler handler, CancellationToken cancellationToken);
    public abstract virtual Task RunPipelineAsync(DataPipeline pipeline, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Pipeline.BaseOrchestrator/<ImportDocumentAsync>d__20")]
public sealed virtual Task`1<string> ImportDocumentAsync(string index, DocumentUploadRequest uploadRequest, CancellationToken cancellationToken);
    public sealed virtual DataPipeline PrepareNewDocumentUpload(string index, string documentId, TagCollection tags, IEnumerable`1<UploadedFile> filesToUpload);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Pipeline.BaseOrchestrator/<ReadPipelineStatusAsync>d__22")]
public sealed virtual Task`1<DataPipeline> ReadPipelineStatusAsync(string index, string documentId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Pipeline.BaseOrchestrator/<ReadPipelineSummaryAsync>d__23")]
public sealed virtual Task`1<DataPipelineStatus> ReadPipelineSummaryAsync(string index, string documentId, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Pipeline.BaseOrchestrator/<IsDocumentReadyAsync>d__24")]
public sealed virtual Task`1<bool> IsDocumentReadyAsync(string index, string documentId, CancellationToken cancellationToken);
    public sealed virtual Task StopAllPipelinesAsync();
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Pipeline.BaseOrchestrator/<ReadTextFileAsync>d__26")]
public sealed virtual Task`1<string> ReadTextFileAsync(DataPipeline pipeline, string fileName, CancellationToken cancellationToken);
    public sealed virtual Task`1<BinaryData> ReadFileAsync(DataPipeline pipeline, string fileName, CancellationToken cancellationToken);
    public sealed virtual Task WriteTextFileAsync(DataPipeline pipeline, string fileName, string fileContent, CancellationToken cancellationToken);
    public sealed virtual Task WriteFileAsync(DataPipeline pipeline, string fileName, BinaryData fileContent, CancellationToken cancellationToken);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_EmbeddingGenerationEnabled();
    public sealed virtual List`1<ITextEmbeddingGenerator> GetEmbeddingGenerators();
    public sealed virtual List`1<IMemoryDb> GetMemoryDbs();
    public sealed virtual ITextGenerator GetTextGenerator();
    public sealed virtual Task StartIndexDeletionAsync(string index, CancellationToken cancellationToken);
    public sealed virtual Task StartDocumentDeletionAsync(string documentId, string index, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Pipeline.BaseOrchestrator/<CleanUpAfterCompletionAsync>d__39")]
protected Task CleanUpAfterCompletionAsync(DataPipeline pipeline, CancellationToken cancellationToken);
    protected static DataPipeline PrepareIndexDeletion(string index);
    protected static DataPipeline PrepareDocumentDeletion(string index, string documentId);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Pipeline.BaseOrchestrator/<UploadFilesAsync>d__42")]
protected Task UploadFilesAsync(DataPipeline currentPipeline, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Pipeline.BaseOrchestrator/<UpdatePipelineStatusAsync>d__43")]
protected Task UpdatePipelineStatusAsync(DataPipeline pipeline, CancellationToken cancellationToken);
    protected static string ToJson(object data, bool indented);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Pipeline.BaseOrchestrator/<UploadFormFilesAsync>d__45")]
private Task UploadFormFilesAsync(DataPipeline pipeline, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.Pipeline.DistributedPipelineOrchestrator : BaseOrchestrator {
    private QueueClientFactory _queueClientFactory;
    private Dictionary`2<string, IQueue> _queues;
    public DistributedPipelineOrchestrator(IContentStorage contentStorage, IMimeTypeDetection mimeTypeDetection, QueueClientFactory queueClientFactory, List`1<ITextEmbeddingGenerator> embeddingGenerators, List`1<IMemoryDb> memoryDbs, ITextGenerator textGenerator, KernelMemoryConfig config, ILogger`1<DistributedPipelineOrchestrator> log);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Pipeline.DistributedPipelineOrchestrator/<AddHandlerAsync>d__3")]
public virtual Task AddHandlerAsync(IPipelineStepHandler handler, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Pipeline.DistributedPipelineOrchestrator/<TryAddHandlerAsync>d__4")]
public virtual Task TryAddHandlerAsync(IPipelineStepHandler handler, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Pipeline.DistributedPipelineOrchestrator/<RunPipelineAsync>d__5")]
public virtual Task RunPipelineAsync(DataPipeline pipeline, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Pipeline.DistributedPipelineOrchestrator/<RunPipelineStepAsync>d__6")]
private Task`1<bool> RunPipelineStepAsync(DataPipeline pipeline, IPipelineStepHandler handler, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Pipeline.DistributedPipelineOrchestrator/<MoveForwardAsync>d__7")]
private Task MoveForwardAsync(DataPipeline pipeline, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.Pipeline.InProcessPipelineOrchestrator : BaseOrchestrator {
    private Dictionary`2<string, IPipelineStepHandler> _handlers;
    public InProcessPipelineOrchestrator(IContentStorage contentStorage, List`1<ITextEmbeddingGenerator> embeddingGenerators, List`1<IMemoryDb> memoryDbs, ITextGenerator textGenerator, KernelMemoryConfig config, IMimeTypeDetection mimeTypeDetection, ILogger`1<InProcessPipelineOrchestrator> log);
    public virtual Task AddHandlerAsync(IPipelineStepHandler handler, CancellationToken cancellationToken);
    public void AddHandler(IPipelineStepHandler handler);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Pipeline.InProcessPipelineOrchestrator/<TryAddHandlerAsync>d__4")]
public virtual Task TryAddHandlerAsync(IPipelineStepHandler handler, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Pipeline.InProcessPipelineOrchestrator/<RunPipelineAsync>d__5")]
public virtual Task RunPipelineAsync(DataPipeline pipeline, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.Pipeline.Queue.DevTools.SimpleQueues : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private EventHandler`1<MessageEventArgs> Received;
    private static int PollFrequencyMsecs;
    private static int DispatchFrequencyMsecs;
    private static string FileExt;
    private static SemaphoreSlim s_lock;
    private bool _busy;
    private IFileSystem _fileSystem;
    private ILogger`1<SimpleQueues> _log;
    private SortedSet`1<string> _messages;
    private HashSet`1<string> _processingMessages;
    private string _queueName;
    [NullableAttribute("2")]
private Timer _populateTimer;
    [NullableAttribute("2")]
private Timer _dispatchTimer;
    public SimpleQueues(SimpleQueuesConfig config, ILogger`1<SimpleQueues> log);
    private static SimpleQueues();
    [CompilerGeneratedAttribute]
private void add_Received(EventHandler`1<MessageEventArgs> value);
    [CompilerGeneratedAttribute]
private void remove_Received(EventHandler`1<MessageEventArgs> value);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Pipeline.Queue.DevTools.SimpleQueues/<ConnectToQueueAsync>d__17")]
public sealed virtual Task`1<IQueue> ConnectToQueueAsync(string queueName, QueueOptions options, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Pipeline.Queue.DevTools.SimpleQueues/<EnqueueAsync>d__18")]
public sealed virtual Task EnqueueAsync(string message, CancellationToken cancellationToken);
    public sealed virtual void OnDequeue(Func`2<string, Task`1<bool>> processMessageAction);
    public sealed virtual void Dispose();
    private void PopulateQueue(object sender, ElapsedEventArgs elapsedEventArgs);
    private void DispatchMessages(object sender, ElapsedEventArgs e);
    private bool LockMessage(string messageId);
    private void UnlockMessage(string messageId);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Pipeline.Queue.DevTools.SimpleQueues/<DeleteMessageAsync>d__25")]
private Task DeleteMessageAsync(string messageId);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Microsoft.KernelMemory.Pipeline.Queue.DevTools.SimpleQueues/<<PopulateQueue>b__21_0>d")]
[CompilerGeneratedAttribute]
private Task <PopulateQueue>b__21_0();
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Microsoft.KernelMemory.Pipeline.Queue.DevTools.SimpleQueues/<<DispatchMessages>b__22_0>d")]
[CompilerGeneratedAttribute]
private Task <DispatchMessages>b__22_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.Pipeline.Queue.DevTools.SimpleQueuesConfig : object {
    [CompilerGeneratedAttribute]
private FileSystemTypes <StorageType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Directory>k__BackingField;
    public FileSystemTypes StorageType { get; public set; }
    public string Directory { get; public set; }
    [CompilerGeneratedAttribute]
public FileSystemTypes get_StorageType();
    [CompilerGeneratedAttribute]
public void set_StorageType(FileSystemTypes value);
    [CompilerGeneratedAttribute]
public string get_Directory();
    [CompilerGeneratedAttribute]
public void set_Directory(string value);
}
public class Microsoft.KernelMemory.Prompts.EmbeddedPromptProvider : object {
    [NullableAttribute("2")]
private static string s_namespace;
    private static EmbeddedPromptProvider();
    [NullableContextAttribute("1")]
public sealed virtual string ReadPrompt(string promptName);
    [NullableContextAttribute("1")]
private static string ReadFile(string promptName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.Search.SearchClient : object {
    private IMemoryDb _memoryDb;
    private ITextGenerator _textGenerator;
    private SearchClientConfig _config;
    private ILogger`1<SearchClient> _log;
    private string _answerPrompt;
    public SearchClient(IMemoryDb memoryDb, ITextGenerator textGenerator, SearchClientConfig config, IPromptProvider promptProvider, ILogger`1<SearchClient> log);
    public sealed virtual Task`1<IEnumerable`1<string>> ListIndexesAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Search.SearchClient/<SearchAsync>d__7")]
public sealed virtual Task`1<SearchResult> SearchAsync(string index, string query, ICollection`1<MemoryFilter> filters, double minRelevance, int limit, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.Search.SearchClient/<AskAsync>d__8")]
public sealed virtual Task`1<MemoryAnswer> AskAsync(string index, string question, ICollection`1<MemoryFilter> filters, double minRelevance, CancellationToken cancellationToken);
    private IAsyncEnumerable`1<string> GenerateAnswerAsync(string question, string facts);
    private static bool ValueIsEquivalentTo(string value, string target);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.KernelMemory.WebService.HttpDocumentUploadRequest : object {
    [CompilerGeneratedAttribute]
private string <Index>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DocumentId>k__BackingField;
    [CompilerGeneratedAttribute]
private TagCollection <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Steps>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<IFormFile> <Files>k__BackingField;
    public string Index { get; public set; }
    public string DocumentId { get; public set; }
    public TagCollection Tags { get; public set; }
    public List`1<string> Steps { get; public set; }
    public IEnumerable`1<IFormFile> Files { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Index();
    [CompilerGeneratedAttribute]
public void set_Index(string value);
    [CompilerGeneratedAttribute]
public string get_DocumentId();
    [CompilerGeneratedAttribute]
public void set_DocumentId(string value);
    [CompilerGeneratedAttribute]
public TagCollection get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(TagCollection value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Steps();
    [CompilerGeneratedAttribute]
public void set_Steps(List`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<IFormFile> get_Files();
    [CompilerGeneratedAttribute]
public void set_Files(IEnumerable`1<IFormFile> value);
    [AsyncStateMachineAttribute("Microsoft.KernelMemory.WebService.HttpDocumentUploadRequest/<BindHttpRequestAsync>d__20")]
public static Task`1<ValueTuple`3<HttpDocumentUploadRequest, bool, string>> BindHttpRequestAsync(HttpRequest httpRequest, CancellationToken cancellationToken);
    private static void ValidateTagName(string tagName);
}
[ExtensionAttribute]
public static class Microsoft.KernelMemory.WebService.HttpDocumentUploadRequestExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static DocumentUploadRequest ToDocumentUploadRequest(HttpDocumentUploadRequest request);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
