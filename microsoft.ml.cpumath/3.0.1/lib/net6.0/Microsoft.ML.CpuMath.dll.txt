[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[DefaultMemberAttribute("Item")]
[BestFriendAttribute]
internal class Microsoft.ML.Internal.CpuMath.AlignedArray : object {
    public Single[] Items;
    private int _size;
    private int _cbAlign;
    private int _base;
    private object _lock;
    public int Size { get; }
    public int CbAlign { get; }
    public float Item { get; public set; }
    public AlignedArray(int size, int cbAlign);
    public int GetBase(long addr);
    private void MoveData(int newBase);
    public int get_Size();
    public int get_CbAlign();
    public float get_Item(int index);
    public void set_Item(int index, float value);
    public void CopyTo(Span`1<float> dst, int index, int count);
    public void CopyTo(int start, Span`1<float> dst, int index, int count);
    public void CopyFrom(ReadOnlySpan`1<float> src);
    public void CopyFrom(int start, ReadOnlySpan`1<float> src);
    public void CopyFrom(ReadOnlySpan`1<int> rgposSrc, ReadOnlySpan`1<float> valuesSrc, int posMin, int iposMin, int iposLim, bool zeroItems);
    public void CopyFrom(AlignedArray src);
    public void ZeroItems();
    public void ZeroItems(Int32[] rgposSrc, int posMin, int iposMin, int iposLim);
    public void GetRawBuffer(Single[]& items, Int32& offset);
}
internal static class Microsoft.ML.Internal.CpuMath.AvxIntrinsics : object {
    public static UInt32[] LeadingAlignmentMask;
    public static UInt32[] TrailingAlignmentMask;
    private static Vector256`1<float> _absMask256;
    private static int Vector256Alignment;
    private static AvxIntrinsics();
    private static bool HasCompatibleAlignment(AlignedArray alignedArray);
    private static Single* GetAlignedBase(AlignedArray alignedArray, Single* unalignedBase);
    private static Vector128`1<float> GetHigh(Vector256`1& x);
    private static Vector256`1<float> Load8(Single* src, Int32* idx);
    private static void Store8(Vector256`1& x, Single* dst, Int32* idx);
    private static Vector256`1<float> VectorSum256(Vector256`1& vector);
    private static Vector256`1<float> VectorMax256(Vector256`1& vector);
    private static Vector256`1<float> GetNewDst256(Vector256`1& xDst1, Vector256`1& xThreshold);
    private static Vector256`1<float> MultiplyAdd(Single* psrc1, Vector256`1<float> src2, Vector256`1<float> src3);
    private static Vector256`1<float> MultiplyAdd(Vector256`1<float> src1, Vector256`1<float> src2, Vector256`1<float> src3);
    public static void MatMul(AlignedArray mat, AlignedArray src, AlignedArray dst, int crow, int ccol);
    public static void MatMulP(AlignedArray mat, ReadOnlySpan`1<int> rgposSrc, AlignedArray src, int posMin, int iposMin, int iposEnd, AlignedArray dst, int crow, int ccol);
    public static void MatMulTran(AlignedArray mat, AlignedArray src, AlignedArray dst, int crow, int ccol);
    public static void AddScalarU(float scalar, Span`1<float> dst);
    public static void Scale(float scale, Span`1<float> dst);
    public static void ScaleSrcU(float scale, ReadOnlySpan`1<float> src, Span`1<float> dst, int count);
    public static void ScaleAddU(float a, float b, Span`1<float> dst);
    public static void AddScaleU(float scale, ReadOnlySpan`1<float> src, Span`1<float> dst, int count);
    public static void AddScaleCopyU(float scale, ReadOnlySpan`1<float> src, ReadOnlySpan`1<float> dst, Span`1<float> result, int count);
    public static void AddScaleSU(float scale, ReadOnlySpan`1<float> src, ReadOnlySpan`1<int> idx, Span`1<float> dst, int count);
    public static void AddU(ReadOnlySpan`1<float> src, Span`1<float> dst, int count);
    public static void AddSU(ReadOnlySpan`1<float> src, ReadOnlySpan`1<int> idx, Span`1<float> dst, int count);
    public static void MulElementWiseU(ReadOnlySpan`1<float> src1, ReadOnlySpan`1<float> src2, Span`1<float> dst, int count);
    public static float Sum(ReadOnlySpan`1<float> src);
    public static float SumSqU(ReadOnlySpan`1<float> src);
    public static float SumSqDiffU(float mean, ReadOnlySpan`1<float> src);
    public static float SumAbsU(ReadOnlySpan`1<float> src);
    public static float SumAbsDiffU(float mean, ReadOnlySpan`1<float> src);
    public static float MaxAbsU(ReadOnlySpan`1<float> src);
    public static float MaxAbsDiffU(float mean, ReadOnlySpan`1<float> src);
    public static float DotU(ReadOnlySpan`1<float> src, ReadOnlySpan`1<float> dst, int count);
    public static float DotSU(ReadOnlySpan`1<float> src, ReadOnlySpan`1<float> dst, ReadOnlySpan`1<int> idx, int count);
    public static float Dist2(ReadOnlySpan`1<float> src, ReadOnlySpan`1<float> dst, int count);
    public static void SdcaL1UpdateU(float primalUpdate, int count, ReadOnlySpan`1<float> src, float threshold, Span`1<float> v, Span`1<float> w);
    public static void SdcaL1UpdateSU(float primalUpdate, int count, ReadOnlySpan`1<float> src, ReadOnlySpan`1<int> indices, float threshold, Span`1<float> v, Span`1<float> w);
}
[BestFriendAttribute]
[AttributeUsageAttribute("5628")]
internal class Microsoft.ML.Internal.CpuMath.Core.BestFriendAttribute : Attribute {
}
[ExtensionAttribute]
[BestFriendAttribute]
internal static class Microsoft.ML.Internal.CpuMath.Core.Contracts : object {
    public static string IsMarkedKey;
    public static string SensitivityKey;
    private static Action`2 modreq(System.Runtime.CompilerServices.IsVolatile) _handler;
    private static string GetMsg(string msg, Object[] args);
    private static int Size(ICollection`1<T> c);
    [ExtensionAttribute]
public static TException Process(TException ex, IExceptionContext ectx);
    public static TException Mark(TException ex);
    [ExtensionAttribute]
public static bool IsMarked(Exception ex);
    [ExtensionAttribute]
public static TException MarkSensitive(TException ex, MessageSensitivity sensitivity);
    [ExtensionAttribute]
public static MessageSensitivity Sensitivity(Exception ex);
    public static Action`2<string, IExceptionContext> SetAssertHandler(Action`2<string, IExceptionContext> handler);
    public static Exception Except();
    [ExtensionAttribute]
public static Exception Except(IExceptionContext ctx);
    public static Exception Except(string msg);
    [ExtensionAttribute]
public static Exception Except(IExceptionContext ctx, string msg);
    public static Exception Except(string msg, Object[] args);
    [ExtensionAttribute]
public static Exception Except(IExceptionContext ctx, string msg, Object[] args);
    public static Exception Except(Exception inner, string msg);
    [ExtensionAttribute]
public static Exception Except(IExceptionContext ctx, Exception inner, string msg);
    public static Exception Except(Exception inner, string msg, Object[] args);
    [ExtensionAttribute]
public static Exception Except(IExceptionContext ctx, Exception inner, string msg, Object[] args);
    public static Exception ExceptUserArg(string name);
    [ExtensionAttribute]
public static Exception ExceptUserArg(IExceptionContext ctx, string name);
    public static Exception ExceptUserArg(string name, string msg);
    [ExtensionAttribute]
public static Exception ExceptUserArg(IExceptionContext ctx, string name, string msg);
    public static Exception ExceptUserArg(string name, string msg, Object[] args);
    [ExtensionAttribute]
public static Exception ExceptUserArg(IExceptionContext ctx, string name, string msg, Object[] args);
    public static Exception ExceptParam(string paramName);
    [ExtensionAttribute]
public static Exception ExceptParam(IExceptionContext ctx, string paramName);
    public static Exception ExceptParam(string paramName, string msg);
    [ExtensionAttribute]
public static Exception ExceptParam(IExceptionContext ctx, string paramName, string msg);
    public static Exception ExceptParam(string paramName, string msg, Object[] args);
    [ExtensionAttribute]
public static Exception ExceptParam(IExceptionContext ctx, string paramName, string msg, Object[] args);
    public static Exception ExceptParamValue(T value, string paramName, string msg);
    [ExtensionAttribute]
public static Exception ExceptParamValue(IExceptionContext ctx, T value, string paramName, string msg);
    public static Exception ExceptParamValue(T value, string paramName, string msg, Object[] args);
    [ExtensionAttribute]
public static Exception ExceptParamValue(IExceptionContext ctx, T value, string paramName, string msg, Object[] args);
    public static Exception ExceptValue(string paramName);
    [ExtensionAttribute]
public static Exception ExceptValue(IExceptionContext ctx, string paramName);
    public static Exception ExceptValue(string paramName, string msg);
    [ExtensionAttribute]
public static Exception ExceptValue(IExceptionContext ctx, string paramName, string msg);
    public static Exception ExceptValue(string paramName, string msg, Object[] args);
    [ExtensionAttribute]
public static Exception ExceptValue(IExceptionContext ctx, string paramName, string msg, Object[] args);
    public static Exception ExceptEmpty(string paramName);
    [ExtensionAttribute]
public static Exception ExceptEmpty(IExceptionContext ctx, string paramName);
    public static Exception ExceptEmpty(string paramName, string msg);
    [ExtensionAttribute]
public static Exception ExceptEmpty(IExceptionContext ctx, string paramName, string msg);
    public static Exception ExceptEmpty(string paramName, string msg, Object[] args);
    [ExtensionAttribute]
public static Exception ExceptEmpty(IExceptionContext ctx, string paramName, string msg, Object[] args);
    public static Exception ExceptWhiteSpace(string paramName);
    [ExtensionAttribute]
public static Exception ExceptWhiteSpace(IExceptionContext ctx, string paramName);
    public static Exception ExceptWhiteSpace(string paramName, string msg);
    [ExtensionAttribute]
public static Exception ExceptWhiteSpace(IExceptionContext ctx, string paramName, string msg);
    public static Exception ExceptDecode();
    [ExtensionAttribute]
public static Exception ExceptDecode(IExceptionContext ctx);
    public static Exception ExceptDecode(string msg);
    [ExtensionAttribute]
public static Exception ExceptDecode(IExceptionContext ctx, string msg);
    public static Exception ExceptDecode(string msg, Object[] args);
    [ExtensionAttribute]
public static Exception ExceptDecode(IExceptionContext ctx, string msg, Object[] args);
    public static Exception ExceptDecode(Exception inner, string msg);
    [ExtensionAttribute]
public static Exception ExceptDecode(IExceptionContext ctx, Exception inner, string msg);
    public static Exception ExceptDecode(Exception inner, string msg, Object[] args);
    [ExtensionAttribute]
public static Exception ExceptDecode(IExceptionContext ctx, Exception inner, string msg, Object[] args);
    public static Exception ExceptIO();
    [ExtensionAttribute]
public static Exception ExceptIO(IExceptionContext ctx);
    public static Exception ExceptIO(string msg);
    [ExtensionAttribute]
public static Exception ExceptIO(IExceptionContext ctx, string msg);
    public static Exception ExceptIO(string msg, Object[] args);
    [ExtensionAttribute]
public static Exception ExceptIO(IExceptionContext ctx, string msg, Object[] args);
    public static Exception ExceptIO(Exception inner, string msg);
    [ExtensionAttribute]
public static Exception ExceptIO(IExceptionContext ctx, Exception inner, string msg);
    public static Exception ExceptIO(Exception inner, string msg, Object[] args);
    [ExtensionAttribute]
public static Exception ExceptIO(IExceptionContext ctx, Exception inner, string msg, Object[] args);
    public static Exception ExceptNotImpl();
    [ExtensionAttribute]
public static Exception ExceptNotImpl(IExceptionContext ctx);
    public static Exception ExceptNotImpl(string msg);
    [ExtensionAttribute]
public static Exception ExceptNotImpl(IExceptionContext ctx, string msg);
    public static Exception ExceptNotImpl(string msg, Object[] args);
    [ExtensionAttribute]
public static Exception ExceptNotImpl(IExceptionContext ctx, string msg, Object[] args);
    public static Exception ExceptNotSupp();
    [ExtensionAttribute]
public static Exception ExceptNotSupp(IExceptionContext ctx);
    public static Exception ExceptNotSupp(string msg);
    [ExtensionAttribute]
public static Exception ExceptNotSupp(IExceptionContext ctx, string msg);
    public static Exception ExceptNotSupp(string msg, Object[] args);
    [ExtensionAttribute]
public static Exception ExceptNotSupp(IExceptionContext ctx, string msg, Object[] args);
    public static Exception ExceptSchemaMismatch(string paramName, string columnRole, string columnName);
    [ExtensionAttribute]
public static Exception ExceptSchemaMismatch(IExceptionContext ctx, string paramName, string columnRole, string columnName);
    public static Exception ExceptSchemaMismatch(string paramName, string columnRole, string columnName, string expectedType, string actualType);
    [ExtensionAttribute]
public static Exception ExceptSchemaMismatch(IExceptionContext ctx, string paramName, string columnRole, string columnName, string expectedType, string actualType);
    private static string MakeSchemaMismatchMsg(string columnRole, string columnName, string expectedType, string actualType);
    public static void Check(bool f);
    [ExtensionAttribute]
public static void Check(IExceptionContext ctx, bool f);
    public static void Check(bool f, string msg);
    [ExtensionAttribute]
public static void Check(IExceptionContext ctx, bool f, string msg);
    public static void CheckUserArg(bool f, string name);
    [ExtensionAttribute]
public static void CheckUserArg(IExceptionContext ctx, bool f, string name);
    public static void CheckUserArg(bool f, string name, string msg);
    [ExtensionAttribute]
public static void CheckUserArg(IExceptionContext ctx, bool f, string name, string msg);
    public static void CheckParam(bool f, string paramName);
    [ExtensionAttribute]
public static void CheckParam(IExceptionContext ctx, bool f, string paramName);
    public static void CheckParam(bool f, string paramName, string msg);
    [ExtensionAttribute]
public static void CheckParam(IExceptionContext ctx, bool f, string paramName, string msg);
    public static void CheckParamValue(bool f, T value, string paramName, string msg);
    [ExtensionAttribute]
public static void CheckParamValue(IExceptionContext ctx, bool f, T value, string paramName, string msg);
    public static T CheckRef(T val, string paramName);
    [ExtensionAttribute]
public static T CheckRef(IExceptionContext ctx, T val, string paramName);
    [ExtensionAttribute]
public static T CheckRef(IExceptionContext ctx, T val, string paramName, string msg);
    public static void CheckValue(T val, string paramName);
    [ExtensionAttribute]
public static void CheckValue(IExceptionContext ctx, T val, string paramName);
    public static T CheckValue(T val, string paramName, string msg);
    [ExtensionAttribute]
public static T CheckValue(IExceptionContext ctx, T val, string paramName, string msg);
    public static string CheckNonEmpty(string s, string paramName);
    [ExtensionAttribute]
public static string CheckNonEmpty(IExceptionContext ctx, string s, string paramName);
    public static string CheckNonWhiteSpace(string s, string paramName);
    [ExtensionAttribute]
public static string CheckNonWhiteSpace(IExceptionContext ctx, string s, string paramName);
    public static string CheckNonEmpty(string s, string paramName, string msg);
    [ExtensionAttribute]
public static string CheckNonEmpty(IExceptionContext ctx, string s, string paramName, string msg);
    public static string CheckNonWhiteSpace(string s, string paramName, string msg);
    [ExtensionAttribute]
public static string CheckNonWhiteSpace(IExceptionContext ctx, string s, string paramName, string msg);
    public static T[] CheckNonEmpty(T[] args, string paramName);
    [ExtensionAttribute]
public static T[] CheckNonEmpty(IExceptionContext ctx, T[] args, string paramName);
    public static T[] CheckNonEmpty(T[] args, string paramName, string msg);
    [ExtensionAttribute]
public static T[] CheckNonEmpty(IExceptionContext ctx, T[] args, string paramName, string msg);
    public static ICollection`1<T> CheckNonEmpty(ICollection`1<T> args, string paramName);
    [ExtensionAttribute]
public static ICollection`1<T> CheckNonEmpty(IExceptionContext ctx, ICollection`1<T> args, string paramName);
    public static ICollection`1<T> CheckNonEmpty(ICollection`1<T> args, string paramName, string msg);
    [ExtensionAttribute]
public static ICollection`1<T> CheckNonEmpty(IExceptionContext ctx, ICollection`1<T> args, string paramName, string msg);
    public static void CheckDecode(bool f);
    [ExtensionAttribute]
public static void CheckDecode(IExceptionContext ctx, bool f);
    public static void CheckDecode(bool f, string msg);
    [ExtensionAttribute]
public static void CheckDecode(IExceptionContext ctx, bool f, string msg);
    public static void CheckIO(bool f);
    [ExtensionAttribute]
public static void CheckIO(IExceptionContext ctx, bool f);
    public static void CheckIO(bool f, string msg);
    [ExtensionAttribute]
public static void CheckIO(IExceptionContext ctx, bool f, string msg);
    [ExtensionAttribute]
public static void CheckIO(IExceptionContext ctx, bool f, string msg, Object[] args);
    [ConditionalAttribute("INVARIANT_CHECKS")]
public static void CheckValueOrNull(T val);
    [ExtensionAttribute]
[ConditionalAttribute("INVARIANT_CHECKS")]
public static void CheckValueOrNull(IExceptionContext ctx, T val);
    private static void DbgFailCore(string msg, IExceptionContext ctx);
    private static void DbgFail(IExceptionContext ctx);
    private static void DbgFail(string msg);
    private static void DbgFail(IExceptionContext ctx, string msg);
    private static void DbgFailValue(IExceptionContext ctx);
    private static void DbgFailValue(string paramName);
    private static void DbgFailValue(IExceptionContext ctx, string paramName);
    private static void DbgFailValue(string paramName, string msg);
    private static void DbgFailValue(IExceptionContext ctx, string paramName, string msg);
    private static void DbgFailEmpty(IExceptionContext ctx);
    private static void DbgFailEmpty(string msg);
    private static void DbgFailEmpty(IExceptionContext ctx, string msg);
    [ConditionalAttribute("DEBUG")]
public static void Assert(bool f);
    [ExtensionAttribute]
[ConditionalAttribute("DEBUG")]
public static void Assert(IExceptionContext ctx, bool f);
    [ConditionalAttribute("DEBUG")]
public static void Assert(bool f, string msg);
    [ExtensionAttribute]
[ConditionalAttribute("DEBUG")]
public static void Assert(IExceptionContext ctx, bool f, string msg);
    [ConditionalAttribute("DEBUG")]
public static void AssertValue(T val);
    [ExtensionAttribute]
[ConditionalAttribute("DEBUG")]
public static void AssertValue(IExceptionContext ctx, T val);
    [ConditionalAttribute("DEBUG")]
public static void AssertValue(T val, string paramName);
    [ExtensionAttribute]
[ConditionalAttribute("DEBUG")]
public static void AssertValue(IExceptionContext ctx, T val, string paramName);
    [ConditionalAttribute("DEBUG")]
public static void AssertValue(T val, string name, string msg);
    [ExtensionAttribute]
[ConditionalAttribute("DEBUG")]
public static void AssertValue(IExceptionContext ctx, T val, string name, string msg);
    [ConditionalAttribute("DEBUG")]
public static void AssertNonEmpty(string s);
    [ExtensionAttribute]
[ConditionalAttribute("DEBUG")]
public static void AssertNonEmpty(IExceptionContext ctx, string s);
    [ConditionalAttribute("DEBUG")]
public static void AssertNonWhiteSpace(string s);
    [ExtensionAttribute]
[ConditionalAttribute("DEBUG")]
public static void AssertNonWhiteSpace(IExceptionContext ctx, string s);
    [ConditionalAttribute("DEBUG")]
public static void AssertNonEmpty(string s, string msg);
    [ExtensionAttribute]
[ConditionalAttribute("DEBUG")]
public static void AssertNonEmpty(IExceptionContext ctx, string s, string msg);
    [ConditionalAttribute("DEBUG")]
public static void AssertNonWhiteSpace(string s, string msg);
    [ExtensionAttribute]
[ConditionalAttribute("DEBUG")]
public static void AssertNonWhiteSpace(IExceptionContext ctx, string s, string msg);
    [ConditionalAttribute("DEBUG")]
public static void AssertNonEmpty(ReadOnlySpan`1<T> args);
    [ConditionalAttribute("DEBUG")]
public static void AssertNonEmpty(Span`1<T> args);
    [ConditionalAttribute("DEBUG")]
public static void AssertNonEmpty(ICollection`1<T> args);
    [ExtensionAttribute]
[ConditionalAttribute("DEBUG")]
public static void AssertNonEmpty(IExceptionContext ctx, ICollection`1<T> args);
    [ConditionalAttribute("DEBUG")]
public static void AssertNonEmpty(ICollection`1<T> args, string msg);
    [ExtensionAttribute]
[ConditionalAttribute("DEBUG")]
public static void AssertNonEmpty(IExceptionContext ctx, ICollection`1<T> args, string msg);
    [ConditionalAttribute("INVARIANT_CHECKS")]
public static void AssertValueOrNull(T val);
    [ExtensionAttribute]
[ConditionalAttribute("INVARIANT_CHECKS")]
public static void AssertValueOrNull(IExceptionContext ctx, T val);
}
internal interface Microsoft.ML.Internal.CpuMath.Core.IExceptionContext {
    public string ContextDescription { get; }
    public abstract virtual TException Process(TException ex);
    public abstract virtual string get_ContextDescription();
}
[BestFriendAttribute]
internal static class Microsoft.ML.Internal.CpuMath.Core.InternalPublicKey : object {
    public static string Value;
}
[FlagsAttribute]
internal enum Microsoft.ML.Internal.CpuMath.Core.MessageSensitivity : Enum {
    public int value__;
    public static MessageSensitivity None;
    public static MessageSensitivity Unknown;
}
[BestFriendAttribute]
internal static class Microsoft.ML.Internal.CpuMath.Core.PublicKey : object {
    public static string Value;
    public static string TestValue;
}
[BestFriendAttribute]
[AttributeUsageAttribute("1")]
internal class Microsoft.ML.Internal.CpuMath.Core.WantsToBeBestFriendsAttribute : Attribute {
}
[BestFriendAttribute]
internal static class Microsoft.ML.Internal.CpuMath.CpuAligenedMathUtils`1 : object {
    public static void AssertCompatible(ICpuFullMatrix values);
    public static void AssertCompatible(ICpuVector values);
    private static TMatrix A(ICpuFullMatrix x);
    private static CpuAlignedVector A(ICpuVector x);
    private static void AssertCompatibleCore(ICpuMatrix mat, ICpuVector src, ICpuVector dst);
    public static void AssertCompatible(ICpuFullMatrix mat, ICpuVector src, ICpuVector dst);
    public static void MatTimesSrc(ICpuFullMatrix mat, ICpuVector src, ICpuVector dst);
    public static void MatTranTimesSrc(ICpuFullMatrix mat, ICpuVector src, ICpuVector dst);
}
[BestFriendAttribute]
internal abstract class Microsoft.ML.Internal.CpuMath.CpuAlignedMatrixBase : object {
    [CompilerGeneratedAttribute]
private AlignedArray <Items>k__BackingField;
    protected int FloatAlign;
    protected int Shift;
    protected int Mask;
    public int RunLen;
    public int RunCnt;
    public int RunLenPhy;
    public int RunCntPhy;
    public AlignedArray Items { get; }
    public int ValueCount { get; }
    public int RowCount { get; }
    public int ColCount { get; }
    public int RowCountPhy { get; }
    public int ColCountPhy { get; }
    protected CpuAlignedMatrixBase(int runLen, int runCnt, int cbAlign);
    [CompilerGeneratedAttribute]
public AlignedArray get_Items();
    public sealed virtual int get_ValueCount();
    public abstract virtual int get_RowCount();
    public abstract virtual int get_ColCount();
    public abstract virtual int get_RowCountPhy();
    public abstract virtual int get_ColCountPhy();
    protected static int RoundUp(int cflt, int cfltAlign);
    [ConditionalAttribute("DEBUG")]
protected void AssertValid();
    public sealed virtual void Dispose();
    public sealed virtual void Randomize(Func`1<float> rand);
    public sealed virtual void Zero();
    public void CopyFrom(CpuAlignedMatrixBase src);
}
[BestFriendAttribute]
internal class Microsoft.ML.Internal.CpuMath.CpuAlignedMatrixCol : CpuAlignedMatrixBase {
    public int RowCount { get; }
    public int ColCount { get; }
    public int RowCountPhy { get; }
    public int ColCountPhy { get; }
    public CpuAlignedMatrixCol(int crow, int ccol, int cbAlign);
    public virtual int get_RowCount();
    public virtual int get_ColCount();
    public virtual int get_RowCountPhy();
    public virtual int get_ColCountPhy();
    public sealed virtual void CopyTo(Single[] dst, Int32& ivDst);
    public sealed virtual void CopyTo(int row, Single[] dst, Int32& ivDst);
    public sealed virtual void CopyFrom(Single[] src, Int32& ivSrc);
    public sealed virtual void ZeroItems(Int32[] indices);
    [IteratorStateMachineAttribute("Microsoft.ML.Internal.CpuMath.CpuAlignedMatrixCol/<GetEnumerator>d__13")]
public sealed virtual IEnumerator`1<float> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[BestFriendAttribute]
internal class Microsoft.ML.Internal.CpuMath.CpuAlignedMatrixRow : CpuAlignedMatrixRowBase {
    public int RowCount { get; }
    public int ColCount { get; }
    public int RowCountPhy { get; }
    public int ColCountPhy { get; }
    public CpuAlignedMatrixRow(int crow, int ccol, int cbAlign);
    public virtual int get_RowCount();
    public virtual int get_ColCount();
    public virtual int get_RowCountPhy();
    public virtual int get_ColCountPhy();
    public sealed virtual void CopyTo(int row, Single[] dst, Int32& ivDst);
    public sealed virtual void ZeroItems(Int32[] indices);
}
[BestFriendAttribute]
internal abstract class Microsoft.ML.Internal.CpuMath.CpuAlignedMatrixRowBase : CpuAlignedMatrixBase {
    public int RowCount { get; }
    public int ColCount { get; }
    public int RowCountPhy { get; }
    public int ColCountPhy { get; }
    protected CpuAlignedMatrixRowBase(int crow, int ccol, int cbAlign);
    public virtual int get_RowCount();
    public virtual int get_ColCount();
    public virtual int get_RowCountPhy();
    public virtual int get_ColCountPhy();
    public sealed virtual void CopyTo(Single[] dst, Int32& ivDst);
    public sealed virtual void CopyFrom(Single[] src, Int32& ivSrc);
    [IteratorStateMachineAttribute("Microsoft.ML.Internal.CpuMath.CpuAlignedMatrixRowBase/<GetEnumerator>d__11")]
public sealed virtual IEnumerator`1<float> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[DefaultMemberAttribute("Item")]
[BestFriendAttribute]
internal class Microsoft.ML.Internal.CpuMath.CpuAlignedVector : object {
    private AlignedArray _items;
    private int _size;
    public int ValueCount { get; }
    public int VectorSize { get; }
    public AlignedArray Items { get; }
    public int CbAlign { get; }
    public float Item { get; public set; }
    public CpuAlignedVector(int size, int cbAlign);
    public sealed virtual int get_ValueCount();
    public sealed virtual int get_VectorSize();
    private static int RoundUp(int cflt, int cfltAlign);
    public sealed virtual void Dispose();
    [ConditionalAttribute("DEBUG")]
private void AssertValid();
    public AlignedArray get_Items();
    public int get_CbAlign();
    public float get_Item(int index);
    public void set_Item(int index, float value);
    public sealed virtual float GetValue(int i);
    public sealed virtual void Randomize(Func`1<float> rand);
    public sealed virtual void Zero();
    public sealed virtual void CopyTo(Single[] dst, Int32& ivDst);
    public void CopyTo(int ivSrc, Single[] dst, int ivDst, int count);
    public sealed virtual void CopyFrom(Single[] src, Int32& index);
    public void CopyFrom(int ivDst, Single[] src, int ivSrc, int count);
    public void CopyFrom(CpuAlignedVector src);
    [IteratorStateMachineAttribute("Microsoft.ML.Internal.CpuMath.CpuAlignedVector/<GetEnumerator>d__25")]
public sealed virtual IEnumerator`1<float> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[BestFriendAttribute]
internal static class Microsoft.ML.Internal.CpuMath.CpuMathUtils : object {
    private static int Vector128Alignment;
    private static int Vector256Alignment;
    private static int FloatAlignment;
    private static int MinInputSize;
    public static void Add(float value, Span`1<float> destination);
    public static void Scale(float value, Span`1<float> destination);
    public static void Scale(float value, ReadOnlySpan`1<float> source, Span`1<float> destination, int count);
    public static void AddScale(float scale, ReadOnlySpan`1<float> source, Span`1<float> destination, int count);
    public static void AddScaleCopy(float scale, ReadOnlySpan`1<float> source, ReadOnlySpan`1<float> destination, Span`1<float> result, int count);
    public static void Add(ReadOnlySpan`1<float> source, Span`1<float> destination, int count);
    public static void MulElementWise(ReadOnlySpan`1<float> left, ReadOnlySpan`1<float> right, Span`1<float> destination, int count);
    public static float Sum(ReadOnlySpan`1<float> source);
    public static float SumSq(ReadOnlySpan`1<float> source);
    public static float SumAbs(ReadOnlySpan`1<float> source);
    public static float DotProductDense(ReadOnlySpan`1<float> left, ReadOnlySpan`1<float> right, int count);
    public static int GetVectorAlignment();
    public static void MatrixTimesSource(bool transpose, AlignedArray matrix, AlignedArray source, AlignedArray destination, int stride);
    public static void MatrixTimesSource(AlignedArray matrix, ReadOnlySpan`1<int> rgposSrc, AlignedArray sourceValues, int posMin, int iposMin, int iposLimit, AlignedArray destination, int stride);
    public static void ScaleAdd(float scale, float addend, Span`1<float> destination);
    public static void AddScale(float scale, ReadOnlySpan`1<float> source, ReadOnlySpan`1<int> indices, Span`1<float> destination, int count);
    public static void Add(ReadOnlySpan`1<float> source, ReadOnlySpan`1<int> indices, Span`1<float> destination, int count);
    public static float SumSq(float mean, ReadOnlySpan`1<float> source);
    public static float SumAbs(float mean, ReadOnlySpan`1<float> source);
    public static float MaxAbs(ReadOnlySpan`1<float> source);
    public static float MaxAbsDiff(float mean, ReadOnlySpan`1<float> source);
    public static float DotProductSparse(ReadOnlySpan`1<float> left, ReadOnlySpan`1<float> right, ReadOnlySpan`1<int> indices, int count);
    public static float L2DistSquared(ReadOnlySpan`1<float> left, ReadOnlySpan`1<float> right, int count);
    public static void ZeroMatrixItems(AlignedArray destination, int ccol, int cfltRow, Int32[] indices);
    private static void ZeroItemsU(AlignedArray destination, int c, Int32[] indices, int cindices);
    private static void ZeroMatrixItemsCore(AlignedArray destination, int c, int ccol, int cfltRow, Int32[] indices, int cindices);
    public static void SdcaL1UpdateDense(float primalUpdate, int count, ReadOnlySpan`1<float> source, float threshold, Span`1<float> v, Span`1<float> w);
    public static void SdcaL1UpdateSparse(float primalUpdate, int count, ReadOnlySpan`1<float> source, ReadOnlySpan`1<int> indices, float threshold, Span`1<float> v, Span`1<float> w);
}
[BestFriendAttribute]
internal static class Microsoft.ML.Internal.CpuMath.EigenUtils : object {
    public static void EigenDecomposition(Single[] a, Single[]& eigenvalues, Single[]& eigenvectors);
    private static float Hypot(float x, float y);
    private static float CopySign(float x, float y);
    private static void Tred(Single[] a, Single[] d, Single[] e, Single[] z, int n);
    private static int Imtql(Single[] d, Single[] e, Single[] z, int n);
}
internal static class Microsoft.ML.Internal.CpuMath.FactorizationMachine.AvxIntrinsics : object {
    private static Vector256`1<float> _point5;
    private static AvxIntrinsics();
    private static Vector256`1<float> MultiplyAdd(Vector256`1<float> src1, Vector256`1<float> src2, Vector256`1<float> src3);
    private static Vector256`1<float> MultiplyAddNegated(Vector256`1<float> src1, Vector256`1<float> src2, Vector256`1<float> src3);
    public static void CalculateIntermediateVariables(Int32* fieldIndices, Int32* featureIndices, Single* featureValues, Single* linearWeights, Single* latentWeights, Single* latentSum, Single* response, int fieldCount, int latentDim, int count);
    public static void CalculateGradientAndUpdate(Int32* fieldIndices, Int32* featureIndices, Single* featureValues, Single* latentSum, Single* linearWeights, Single* latentWeights, Single* linearAccumulatedSquaredGrads, Single* latentAccumulatedSquaredGrads, float lambdaLinear, float lambdaLatent, float learningRate, int fieldCount, int latentDim, float weight, int count, float slope);
}
[BestFriendAttribute]
internal static class Microsoft.ML.Internal.CpuMath.FactorizationMachine.FieldAwareFactorizationMachineInterface : object {
    private static string NativePath;
    private static int CbAlign;
    private static bool Compat(AlignedArray a);
    private static Single* Ptr(AlignedArray a, Single* p);
    [SuppressUnmanagedCodeSecurityAttribute]
private static void CalculateIntermediateVariablesNative(int fieldCount, int latentDim, int count, Int32* fieldIndices, Int32* featureIndices, Single* featureValues, Single* linearWeights, Single* latentWeights, Single* latentSum, Single* response);
    [SuppressUnmanagedCodeSecurityAttribute]
private static void CalculateGradientAndUpdateNative(float lambdaLinear, float lambdaLatent, float learningRate, int fieldCount, int latentDim, float weight, int count, Int32* fieldIndices, Int32* featureIndices, Single* featureValues, Single* latentSum, float slope, Single* linearWeights, Single* latentWeights, Single* linearAccumulatedSquaredGrads, Single* latentAccumulatedSquaredGrads);
    public static void CalculateIntermediateVariables(int fieldCount, int latentDim, int count, Int32[] fieldIndices, Int32[] featureIndices, Single[] featureValues, Single[] linearWeights, AlignedArray latentWeights, AlignedArray latentSum, Single& response);
    public static void CalculateGradientAndUpdate(float lambdaLinear, float lambdaLatent, float learningRate, int fieldCount, int latentDim, float weight, int count, Int32[] fieldIndices, Int32[] featureIndices, Single[] featureValues, AlignedArray latentSum, float slope, Single[] linearWeights, AlignedArray latentWeights, Single[] linearAccumulatedSquaredGrads, AlignedArray latentAccumulatedSquaredGrads);
}
internal static class Microsoft.ML.Internal.CpuMath.GeneralUtils : object {
    public static int CbitLowZero(UInt32 u);
}
[BestFriendAttribute]
internal interface Microsoft.ML.Internal.CpuMath.ICpuBuffer`1 {
    public int ValueCount { get; }
    public abstract virtual int get_ValueCount();
    public abstract virtual void Randomize(Func`1<T> rand);
    public abstract virtual void Zero();
    public abstract virtual void CopyTo(T[] dst, Int32& ivDst);
    public abstract virtual void CopyFrom(T[] src, Int32& ivSrc);
}
[BestFriendAttribute]
internal interface Microsoft.ML.Internal.CpuMath.ICpuFullMatrix {
    public abstract virtual void CopyTo(int row, Single[] dst, Int32& ivDst);
    public abstract virtual void ZeroItems(Int32[] indices);
}
[BestFriendAttribute]
internal interface Microsoft.ML.Internal.CpuMath.ICpuMatrix {
    public int RowCount { get; }
    public int ColCount { get; }
    public abstract virtual int get_RowCount();
    public abstract virtual int get_ColCount();
}
[BestFriendAttribute]
internal interface Microsoft.ML.Internal.CpuMath.ICpuVector {
    public int VectorSize { get; }
    public abstract virtual int get_VectorSize();
    public abstract virtual float GetValue(int i);
}
[BestFriendAttribute]
internal static class Microsoft.ML.Internal.CpuMath.IntUtils : object {
    public static void Add(UInt64& dstHi, UInt64& dstLo, ulong src);
    public static void Add(UInt64& dstHi, UInt64& dstLo, ulong srcHi, ulong srcLo);
    public static void Sub(UInt64& dstHi, UInt64& dstLo, ulong src);
    public static void Sub(UInt64& dstHi, UInt64& dstLo, ulong srcHi, ulong srcLo);
    public static bool LessThan(ulong a1, ulong a0, ulong b1, ulong b0);
    [SuppressUnmanagedCodeSecurityAttribute]
private static ulong Mul64(ulong a, ulong b, UInt64& hi);
    private static int CbitHighZero(ulong u);
}
[BestFriendAttribute]
internal class Microsoft.ML.Internal.CpuMath.ProbabilityFunctions : object {
    private static Double[] _probA;
    private static Double[] _probB;
    private static Double[] _probC;
    private static Double[] _probD;
    private static Double[] _probE;
    private static Double[] _probF;
    private static ProbabilityFunctions();
    public static double Erfc(double x);
    public static double Erf(double x);
    public static double Erfinv(double x);
    public static double Probit(double p);
}
internal static class Microsoft.ML.Internal.CpuMath.SseIntrinsics : object {
    public static UInt32[] LeadingAlignmentMask;
    public static UInt32[] TrailingAlignmentMask;
    private static int Vector128Alignment;
    internal static Vector128`1<float> AbsMask128;
    private static SseIntrinsics();
    private static bool HasCompatibleAlignment(AlignedArray alignedArray);
    private static Single* GetAlignedBase(AlignedArray alignedArray, Single* unalignedBase);
    internal static Vector128`1<float> Load1(Single* src, Int32* idx);
    internal static Vector128`1<float> Load4(Single* src, Int32* idx);
    internal static Vector128`1<float> Rotate(Vector128`1& x);
    internal static void Store4(Vector128`1& x, Single* dst, Int32* idx);
    internal static Vector128`1<float> VectorSum128(Vector128`1& vector);
    internal static Vector128`1<float> VectorMax128(Vector128`1& vector);
    internal static Vector128`1<float> GetNewDst128(Vector128`1& xDst1, Vector128`1& xThreshold);
    public static void MatMul(AlignedArray mat, AlignedArray src, AlignedArray dst, int crow, int ccol);
    public static void MatMulP(AlignedArray mat, ReadOnlySpan`1<int> rgposSrc, AlignedArray src, int posMin, int iposMin, int iposEnd, AlignedArray dst, int crow, int ccol);
    public static void MatMulTran(AlignedArray mat, AlignedArray src, AlignedArray dst, int crow, int ccol);
    public static void AddScalarU(float scalar, Span`1<float> dst);
    public static void Scale(float scale, Span`1<float> dst);
    public static void ScaleSrcU(float scale, ReadOnlySpan`1<float> src, Span`1<float> dst, int count);
    public static void ScaleAddU(float a, float b, Span`1<float> dst);
    public static void AddScaleU(float scale, ReadOnlySpan`1<float> src, Span`1<float> dst, int count);
    public static void AddScaleCopyU(float scale, ReadOnlySpan`1<float> src, ReadOnlySpan`1<float> dst, Span`1<float> result, int count);
    public static void AddScaleSU(float scale, ReadOnlySpan`1<float> src, ReadOnlySpan`1<int> idx, Span`1<float> dst, int count);
    public static void AddU(ReadOnlySpan`1<float> src, Span`1<float> dst, int count);
    public static void AddSU(ReadOnlySpan`1<float> src, ReadOnlySpan`1<int> idx, Span`1<float> dst, int count);
    public static void MulElementWiseU(ReadOnlySpan`1<float> src1, ReadOnlySpan`1<float> src2, Span`1<float> dst, int count);
    public static float Sum(ReadOnlySpan`1<float> src);
    public static float SumSqU(ReadOnlySpan`1<float> src);
    public static float SumSqDiffU(float mean, ReadOnlySpan`1<float> src);
    public static float SumAbsU(ReadOnlySpan`1<float> src);
    public static float SumAbsDiffU(float mean, ReadOnlySpan`1<float> src);
    public static float MaxAbsU(ReadOnlySpan`1<float> src);
    public static float MaxAbsDiffU(float mean, ReadOnlySpan`1<float> src);
    public static float DotU(ReadOnlySpan`1<float> src, ReadOnlySpan`1<float> dst, int count);
    public static float DotSU(ReadOnlySpan`1<float> src, ReadOnlySpan`1<float> dst, ReadOnlySpan`1<int> idx, int count);
    public static float Dist2(ReadOnlySpan`1<float> src, ReadOnlySpan`1<float> dst, int count);
    public static void SdcaL1UpdateU(float primalUpdate, int count, ReadOnlySpan`1<float> src, float threshold, Span`1<float> v, Span`1<float> w);
    public static void SdcaL1UpdateSU(float primalUpdate, int count, ReadOnlySpan`1<float> src, ReadOnlySpan`1<int> indices, float threshold, Span`1<float> v, Span`1<float> w);
}
[BestFriendAttribute]
internal static class Microsoft.ML.Internal.CpuMath.Thunk : object {
    internal static string NativePath;
    [SuppressUnmanagedCodeSecurityAttribute]
public static void MatMul(Single* pmat, Single* psrc, Single* pdst, int crow, int ccol);
    [SuppressUnmanagedCodeSecurityAttribute]
public static void MatMulP(Single* pmat, Int32* pposSrc, Single* psrc, int posMin, int iposMin, int iposLim, Single* pdst, int crow, int ccol);
    [SuppressUnmanagedCodeSecurityAttribute]
public static void MatMulTran(Single* pmat, Single* psrc, Single* pdst, int crow, int ccol);
    [SuppressUnmanagedCodeSecurityAttribute]
public static void Scale(float a, Single* pd, int c);
    [SuppressUnmanagedCodeSecurityAttribute]
public static void ScaleSrcU(float a, Single* ps, Single* pd, int c);
    [SuppressUnmanagedCodeSecurityAttribute]
public static void ScaleAddU(float a, float b, Single* pd, int c);
    [SuppressUnmanagedCodeSecurityAttribute]
public static void AddScaleU(float a, Single* ps, Single* pd, int c);
    [SuppressUnmanagedCodeSecurityAttribute]
public static void AddScaleSU(float a, Single* ps, Int32* pi, Single* pd, int c);
    [SuppressUnmanagedCodeSecurityAttribute]
public static void AddScaleCopyU(float a, Single* ps, Single* pd, Single* pr, int c);
    [SuppressUnmanagedCodeSecurityAttribute]
public static void AddScalarU(float a, Single* pd, int c);
    [SuppressUnmanagedCodeSecurityAttribute]
public static void AddU(Single* ps, Single* pd, int c);
    [SuppressUnmanagedCodeSecurityAttribute]
public static void AddSU(Single* ps, Int32* pi, Single* pd, int c);
    [SuppressUnmanagedCodeSecurityAttribute]
public static float Sum(Single* pValues, int length);
    [SuppressUnmanagedCodeSecurityAttribute]
public static float SumSqU(Single* ps, int c);
    [SuppressUnmanagedCodeSecurityAttribute]
public static float SumSqDiffU(float mean, Single* ps, int c);
    [SuppressUnmanagedCodeSecurityAttribute]
public static float SumAbsU(Single* ps, int c);
    [SuppressUnmanagedCodeSecurityAttribute]
public static float SumAbsDiffU(float mean, Single* ps, int c);
    [SuppressUnmanagedCodeSecurityAttribute]
public static float MulElementWiseU(Single* ps1, Single* ps2, Single* pd, int c);
    [SuppressUnmanagedCodeSecurityAttribute]
public static float MaxAbsU(Single* ps, int c);
    [SuppressUnmanagedCodeSecurityAttribute]
public static float MaxAbsDiffU(float mean, Single* ps, int c);
    [SuppressUnmanagedCodeSecurityAttribute]
public static float DotU(Single* pa, Single* pb, int c);
    [SuppressUnmanagedCodeSecurityAttribute]
public static float DotSU(Single* pa, Single* pb, Int32* pi, int c);
    [SuppressUnmanagedCodeSecurityAttribute]
public static float Dist2(Single* px, Single* py, int c);
    [SuppressUnmanagedCodeSecurityAttribute]
public static void ZeroItemsU(Single* pd, int c, Int32* pindices, int cindices);
    [SuppressUnmanagedCodeSecurityAttribute]
public static void ZeroMatrixItemsCore(Single* pd, int c, int ccol, int cfltRow, Int32* pindices, int cindices);
    [SuppressUnmanagedCodeSecurityAttribute]
public static void SdcaL1UpdateU(float primalUpdate, Single* ps, float threshold, Single* pd1, Single* pd2, int c);
    [SuppressUnmanagedCodeSecurityAttribute]
public static void SdcaL1UpdateSU(float primalUpdate, Single* ps, Int32* pi, float threshold, Single* pd1, Single* pd2, int c);
    [SuppressUnmanagedCodeSecurityAttribute]
public static void MemCpy(Void* dst, Void* src, long count);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
