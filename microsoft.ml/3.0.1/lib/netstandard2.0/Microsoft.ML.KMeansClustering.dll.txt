[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.ML.KMeansClusteringExtensions : object {
    [ExtensionAttribute]
public static KMeansTrainer KMeans(ClusteringTrainers catalog, string featureColumnName, string exampleWeightColumnName, int numberOfClusters);
    [ExtensionAttribute]
public static KMeansTrainer KMeans(ClusteringTrainers catalog, Options options);
}
internal class Microsoft.ML.Trainers.KMeansAcceleratedRowMap : object {
    public RowIndexGetter RowIndexGetter;
    public bool IsAccelerated;
    public int MaxInstancesToAccelerate;
    private HashArray`1<DataViewRowId> _parallelIndexLookup;
    public KMeansAcceleratedRowMap(Factory factory, IChannel ch, long baseMaxInstancesToAccelerate, long totalTrainingInstances, bool isParallel);
    private HashArray`1<DataViewRowId> BuildParallelIndexLookup(Factory factory);
}
internal static class Microsoft.ML.Trainers.KMeansBarBarInitialization : object {
    private static void FindBestCluster(VBuffer`1& point, int pointRowIndex, SharedState initializationState, int clusterCount, int clusterPrevCount, VBuffer`1[] clusters, Single[] clustersL2s, bool needRealDistanceSquared, bool needToStoreWeight, Single& minDistanceSquared, Int32& bestCluster);
    private static void ComputeAccelerationMemoryRequirement(long accelMemBudgetMb, int numSamplesPerRound, int numRounds, bool isParallel, Int64& maxInstancesToAccelerate, Int64& clusterBytes);
    public static void Initialize(IHost host, int numThreads, IChannel ch, Factory cursorFactory, int k, int dimensionality, VBuffer`1[] centroids, long accelMemBudgetMb, Int64& missingFeatureCount, Int64& totalTrainingInstances);
}
internal static class Microsoft.ML.Trainers.KMeansLloydsYinYangTrain : object {
    public static void Train(IHost host, int numThreads, IChannel ch, Factory cursorFactory, long totalTrainingInstances, int k, int dimensionality, int maxIterations, long accelMemBudgetInMb, float convergenceThreshold, VBuffer`1[] centroids);
    private static void Initialize(IChannel ch, Factory factory, long totalTrainingInstances, int numThreads, int k, int dimensionality, long accelMemBudgetMb, SharedState& state, WorkChunkState[]& perThreadWorkState, ReducedWorkChunkState& reducedWorkState);
    private static void ProcessChunk(FeatureFloatVectorCursor cursor, SharedState state, WorkChunkStateBase chunkState, int k, VBuffer`1[] centroids, Single[] centroidL2s);
}
public class Microsoft.ML.Trainers.KMeansModelParameters : ModelParametersBase`1<VBuffer`1<float>> {
    internal static string LoaderSignature;
    private DataViewType _inputType;
    private DataViewType _outputType;
    private int _dimensionality;
    private int _k;
    private VBuffer`1[] _centroids;
    private Single[] _centroidL2s;
    private protected PredictionKind PredictionKind { get; }
    private DataViewType Microsoft.ML.Data.IValueMapper.InputType { get; }
    private DataViewType Microsoft.ML.Data.IValueMapper.OutputType { get; }
    internal KMeansModelParameters(IHostEnvironment env, int k, VBuffer`1[] centroids, bool copyIn);
    private KMeansModelParameters(IHostEnvironment env, ModelLoadContext ctx);
    private static VersionInfo GetVersionInfo();
    private protected virtual PredictionKind get_PredictionKind();
    private sealed virtual override DataViewType Microsoft.ML.Data.IValueMapper.get_InputType();
    private sealed virtual override DataViewType Microsoft.ML.Data.IValueMapper.get_OutputType();
    private sealed virtual override bool Microsoft.ML.Model.OnnxConverter.ICanSaveOnnx.CanSaveOnnx(OnnxContext ctx);
    private sealed virtual override ValueMapper`2<TIn, TOut> Microsoft.ML.Data.IValueMapper.GetMapper();
    private void Map(VBuffer`1& src, Span`1<float> distances);
    private sealed virtual override void Microsoft.ML.Model.ICanSaveInTextFormat.SaveAsText(TextWriter writer, RoleMappedSchema schema);
    private protected virtual void SaveCore(ModelSaveContext ctx);
    internal static KMeansModelParameters Create(IHostEnvironment env, ModelLoadContext ctx);
    private void InitPredictor();
    public void GetClusterCentroids(VBuffer`1[]& centroids, Int32& k);
    private sealed virtual override bool Microsoft.ML.Model.OnnxConverter.ISingleCanSaveOnnx.SaveAsOnnx(OnnxContext ctx, String[] outputNames, string featureColumn);
    [CompilerGeneratedAttribute]
private void <Microsoft.ML.Data.IValueMapper.GetMapper>b__17_0(VBuffer`1& src, VBuffer`1& dst);
}
internal static class Microsoft.ML.Trainers.KMeansPlusPlusInit : object {
    private static float Epsilon;
    public static void Initialize(IHost host, int numThreads, IChannel ch, Factory cursorFactory, int k, int dimensionality, VBuffer`1[] centroids, Int64& missingFeatureCount, Int64& totalTrainingInstances, bool showWarning);
}
internal static class Microsoft.ML.Trainers.KMeansRandomInit : object {
    public static void Initialize(IHost host, int numThreads, IChannel ch, Factory cursorFactory, int k, VBuffer`1[] centroids, Int64& missingFeatureCount, Int64& totalTrainingInstances);
}
public class Microsoft.ML.Trainers.KMeansTrainer : TrainerEstimatorBase`2<ClusteringPredictionTransformer`1<KMeansModelParameters>, KMeansModelParameters> {
    internal static string LoadNameValue;
    internal static string UserNameValue;
    internal static string ShortName;
    internal static string Summary;
    private int _k;
    private int _maxIterations;
    private float _convergenceThreshold;
    private long _accelMemBudgetMb;
    private InitializationAlgorithm _initAlgorithm;
    private int _numThreads;
    private string _featureColumn;
    [CompilerGeneratedAttribute]
private TrainerInfo <Info>k__BackingField;
    public TrainerInfo Info { get; }
    private protected PredictionKind PredictionKind { get; }
    internal KMeansTrainer(IHostEnvironment env, Options options);
    [CompilerGeneratedAttribute]
public virtual TrainerInfo get_Info();
    private protected virtual PredictionKind get_PredictionKind();
    private protected virtual KMeansModelParameters TrainModelCore(TrainContext context);
    private KMeansModelParameters TrainCore(IChannel ch, RoleMappedData data, int dimensionality);
    private static int ComputeNumThreads(Nullable`1<int> argNumThreads);
    [EntryPointAttribute]
internal static ClusteringOutput TrainKMeans(IHostEnvironment env, Options input);
    private protected virtual Column[] GetOutputColumnsCore(SchemaShape inputSchema);
    private protected virtual ClusteringPredictionTransformer`1<KMeansModelParameters> MakeTransformer(KMeansModelParameters model, DataViewSchema trainSchema);
}
internal static class Microsoft.ML.Trainers.KMeansUtils : object {
    public static RowStats ParallelWeightedReservoirSample(IHost host, int numThreads, int numSamples, Factory factory, WeightFunc weightFn, RowIndexGetter rowIndexGetter, VBuffer`1[]& dst, Heap`1[]& buffer);
    public static RowStats ParallelMapReduce(int numThreads, IHost baseHost, Factory factory, RowIndexGetter rowIndexGetter, InitAction`1<TPartitionState> initChunk, MapAction`1<TPartitionState> mapper, ReduceAction`2<TPartitionState, TGlobalState> reducer, TPartitionState[]& buffer, TGlobalState& result);
    public static int FindBestCluster(VBuffer`1& features, VBuffer`1[] centroids, Single[] centroidL2s);
    public static int FindBestCluster(VBuffer`1& features, VBuffer`1[] centroids, Single[] centroidL2s, int centroidCount, bool realWeight, Single& minDistance);
    public static void FindBestCluster(VBuffer`1& features, VBuffer`1[] centroids, Single[] centroidL2s, int centroidCount, bool needRealDistance, Single& minDistance, Int32& cluster, Single& secMinDistance, Int32& secCluster);
    public static void VerifyModelConsistency(VBuffer`1[] centroids);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
