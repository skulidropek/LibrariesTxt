[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.ML.PcaCatalog : object {
    [ExtensionAttribute]
public static PrincipalComponentAnalyzer ProjectToPrincipalComponents(TransformsCatalog catalog, string outputColumnName, string inputColumnName, string exampleWeightColumnName, int rank, int overSampling, bool ensureZeroMean, Nullable`1<int> seed);
    [ExtensionAttribute]
[BestFriendAttribute]
internal static PrincipalComponentAnalyzer ProjectToPrincipalComponents(TransformsCatalog catalog, ColumnOptions[] columns);
    [ExtensionAttribute]
public static RandomizedPcaTrainer RandomizedPca(AnomalyDetectionTrainers catalog, string featureColumnName, string exampleWeightColumnName, int rank, int oversampling, bool ensureZeroMean, Nullable`1<int> seed);
    [ExtensionAttribute]
public static RandomizedPcaTrainer RandomizedPca(AnomalyDetectionTrainers catalog, Options options);
}
public class Microsoft.ML.Trainers.PcaModelParameters : ModelParametersBase`1<float> {
    internal static string LoaderSignature;
    internal static string RegistrationName;
    private int _dimension;
    private int _rank;
    private VBuffer`1[] _eigenVectors;
    private Single[] _meanProjected;
    private VBuffer`1<float> _mean;
    private float _norm2Mean;
    private DataViewType _inputType;
    private protected PredictionKind PredictionKind { get; }
    private DataViewType Microsoft.ML.Data.IValueMapper.InputType { get; }
    private DataViewType Microsoft.ML.Data.IValueMapper.OutputType { get; }
    internal PcaModelParameters(IHostEnvironment env, int rank, Single[][] eigenVectors, VBuffer`1& mean);
    private PcaModelParameters(IHostEnvironment env, ModelLoadContext ctx);
    private static VersionInfo GetVersionInfo();
    private protected virtual PredictionKind get_PredictionKind();
    private protected virtual void SaveCore(ModelSaveContext ctx);
    internal static PcaModelParameters Create(IHostEnvironment env, ModelLoadContext ctx);
    private sealed virtual override void Microsoft.ML.Model.ICanSaveSummary.SaveSummary(TextWriter writer, RoleMappedSchema schema);
    private sealed virtual override void Microsoft.ML.Model.ICanSaveInTextFormat.SaveAsText(TextWriter writer, RoleMappedSchema schema);
    private sealed virtual override IDataView Microsoft.ML.Model.ICanGetSummaryAsIDataView.GetSummaryDataView(RoleMappedSchema schema);
    private sealed virtual override DataViewType Microsoft.ML.Data.IValueMapper.get_InputType();
    private sealed virtual override DataViewType Microsoft.ML.Data.IValueMapper.get_OutputType();
    private sealed virtual override ValueMapper`2<TIn, TOut> Microsoft.ML.Data.IValueMapper.GetMapper();
    private float Score(VBuffer`1& src);
    public void GetEigenVectors(VBuffer`1[]& vectors, Int32& rank);
    public void GetMean(VBuffer`1& mean);
    [CompilerGeneratedAttribute]
private void <Microsoft.ML.Data.IValueMapper.GetMapper>b__23_0(VBuffer`1& src, Single& dst);
}
public class Microsoft.ML.Trainers.RandomizedPcaTrainer : TrainerEstimatorBase`2<AnomalyPredictionTransformer`1<PcaModelParameters>, PcaModelParameters> {
    internal static string LoadNameValue;
    internal static string UserNameValue;
    internal static string ShortName;
    internal static string Summary;
    private int _rank;
    private int _oversampling;
    private bool _ensureZeroMean;
    private int _seed;
    private string _featureColumn;
    private static TrainerInfo _info;
    private protected PredictionKind PredictionKind { get; }
    public TrainerInfo Info { get; }
    internal RandomizedPcaTrainer(IHostEnvironment env, string featureColumnName, string exampleWeightColumnName, int rank, int oversampling, bool ensureZeroMean, Nullable`1<int> seed);
    internal RandomizedPcaTrainer(IHostEnvironment env, Options options);
    private RandomizedPcaTrainer(IHostEnvironment env, Options options, string featureColumnName, string exampleWeightColumnName, int rank, int oversampling, bool center, Nullable`1<int> seed);
    private static RandomizedPcaTrainer();
    private protected virtual PredictionKind get_PredictionKind();
    public virtual TrainerInfo get_Info();
    private protected virtual PcaModelParameters TrainModelCore(TrainContext context);
    private static Column MakeWeightColumn(string weightColumn);
    private static Column MakeFeatureColumn(string featureColumn);
    private PcaModelParameters TrainCore(IChannel ch, RoleMappedData data, int dimension);
    private static Single[][] Zeros(int k, int d);
    private static Single[][] GaussianMatrix(int k, int d, int seed);
    private static void Project(IHost host, Factory cursorFactory, VBuffer`1& mean, Single[][] omega, Single[][] y, Int64& numBad);
    private static void PostProcess(Single[][] y, Single[] sigma, Single[] z, int d, int k);
    private protected virtual Column[] GetOutputColumnsCore(SchemaShape inputSchema);
    private protected virtual AnomalyPredictionTransformer`1<PcaModelParameters> MakeTransformer(PcaModelParameters model, DataViewSchema trainSchema);
    [EntryPointAttribute]
internal static AnomalyDetectionOutput TrainPcaAnomaly(IHostEnvironment env, Options input);
}
public class Microsoft.ML.Transforms.PrincipalComponentAnalysisTransformer : OneToOneTransformerBase {
    internal static string Summary;
    internal static string UserName;
    internal static string ShortName;
    internal static string LoaderSignature;
    private int _numColumns;
    private ColumnSchemaInfo[] _schemaInfos;
    private TransformInfo[] _transformInfos;
    private static string RegistrationName;
    internal PrincipalComponentAnalysisTransformer(IHostEnvironment env, IDataView input, ColumnOptions[] columns);
    private PrincipalComponentAnalysisTransformer(IHost host, ModelLoadContext ctx);
    private static VersionInfo GetVersionInfo();
    private static IDataTransform Create(IHostEnvironment env, ModelLoadContext ctx, IDataView input);
    private static IRowMapper Create(IHostEnvironment env, ModelLoadContext ctx, DataViewSchema inputSchema);
    private static IDataTransform Create(IHostEnvironment env, Options options, IDataView input);
    private static PrincipalComponentAnalysisTransformer Create(IHostEnvironment env, ModelLoadContext ctx);
    private protected virtual void SaveModel(ModelSaveContext ctx);
    private static ValueTuple`2[] GetColumnPairs(ColumnOptions[] columns);
    private void Train(ColumnOptions[] columns, TransformInfo[] transformInfos, IDataView trainingData);
    private void Project(IDataView trainingData, Single[][] mean, Single[][][] omega, Single[][][] y, TransformInfo[] transformInfos);
    private Single[][] PostProcess(Single[][] y, Single[] sigma, Single[] z, int d, int k);
    private protected virtual IRowMapper MakeRowMapper(DataViewSchema schema);
    private protected virtual void CheckInputColumn(DataViewSchema inputSchema, int col, int srcCol);
    internal static void ValidatePcaInput(IExceptionContext ectx, string name, DataViewType type);
    [EntryPointAttribute]
internal static TransformOutput Calculate(IHostEnvironment env, Options input);
}
public class Microsoft.ML.Transforms.PrincipalComponentAnalyzer : object {
    private IHost _host;
    private ColumnOptions[] _columns;
    internal PrincipalComponentAnalyzer(IHostEnvironment env, string outputColumnName, string inputColumnName, string weightColumn, int rank, int overSampling, bool ensureZeroMean, Nullable`1<int> seed);
    internal PrincipalComponentAnalyzer(IHostEnvironment env, ColumnOptions[] columns);
    public sealed virtual PrincipalComponentAnalysisTransformer Fit(IDataView input);
    public sealed virtual SchemaShape GetOutputSchema(SchemaShape inputSchema);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
