public class ILLink.Tasks.CombineLinkerXmlFiles : Task {
    [CompilerGeneratedAttribute]
private ITaskItem[] <LinkerXmlFiles>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CombinedLinkerXmlFile>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] LinkerXmlFiles { get; public set; }
    [RequiredAttribute]
public string CombinedLinkerXmlFile { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_LinkerXmlFiles();
    [CompilerGeneratedAttribute]
public void set_LinkerXmlFiles(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_CombinedLinkerXmlFile();
    [CompilerGeneratedAttribute]
public void set_CombinedLinkerXmlFile(string value);
    public virtual bool Execute();
}
public class ILLink.Tasks.ComputeManagedAssemblies : Task {
    [CompilerGeneratedAttribute]
private ITaskItem[] <Assemblies>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ManagedAssemblies>k__BackingField;
    [RequiredAttribute]
public ITaskItem[] Assemblies { get; public set; }
    [OutputAttribute]
public ITaskItem[] ManagedAssemblies { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Assemblies();
    [CompilerGeneratedAttribute]
public void set_Assemblies(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ManagedAssemblies();
    [CompilerGeneratedAttribute]
public void set_ManagedAssemblies(ITaskItem[] value);
    public virtual bool Execute();
}
public class ILLink.Tasks.CreateRuntimeRootILLinkDescriptorFile : Task {
    [CompilerGeneratedAttribute]
private ITaskItem <NamespaceFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <MscorlibFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <CortypeFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <RexcepFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <ILLinkTrimXmlFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <DefineConstants>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <RuntimeRootDescriptorFilePath>k__BackingField;
    private Dictionary`2<string, string> namespaceDictionary;
    private Dictionary`2<string, string> classIdsToClassNames;
    private Dictionary`2<string, ClassMembers> classNamesToClassMembers;
    private Dictionary`2<FeatureSwitchMembers, Dictionary`2<string, ClassMembers>> featureSwitchMembers;
    private HashSet`1<string> defineConstants;
    [RequiredAttribute]
public ITaskItem NamespaceFilePath { get; public set; }
    [RequiredAttribute]
public ITaskItem MscorlibFilePath { get; public set; }
    [RequiredAttribute]
public ITaskItem CortypeFilePath { get; public set; }
    [RequiredAttribute]
public ITaskItem RexcepFilePath { get; public set; }
    [RequiredAttribute]
public ITaskItem ILLinkTrimXmlFilePath { get; public set; }
    public ITaskItem[] DefineConstants { get; public set; }
    [RequiredAttribute]
public ITaskItem RuntimeRootDescriptorFilePath { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem get_NamespaceFilePath();
    [CompilerGeneratedAttribute]
public void set_NamespaceFilePath(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_MscorlibFilePath();
    [CompilerGeneratedAttribute]
public void set_MscorlibFilePath(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_CortypeFilePath();
    [CompilerGeneratedAttribute]
public void set_CortypeFilePath(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_RexcepFilePath();
    [CompilerGeneratedAttribute]
public void set_RexcepFilePath(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem get_ILLinkTrimXmlFilePath();
    [CompilerGeneratedAttribute]
public void set_ILLinkTrimXmlFilePath(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_DefineConstants();
    [CompilerGeneratedAttribute]
public void set_DefineConstants(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem get_RuntimeRootDescriptorFilePath();
    [CompilerGeneratedAttribute]
public void set_RuntimeRootDescriptorFilePath(ITaskItem value);
    public virtual bool Execute();
    private void ProcessNamespaces(string namespaceFile);
    private void ProcessMscorlib(string typeFile);
    public void ProcessCoreTypes(string corTypeFile);
    public void ProcessExceptionTypes(string excTypeFile);
    private void OutputXml(string iLLinkTrimXmlFilePath, string outputFileName);
    private static void AddXmlTypeNode(XmlDocument doc, XmlNode assemblyNode, string typeName, ClassMembers members);
    private void AddClass(string classNamespace, string className, string classId, bool keepAllFields, Nullable`1<FeatureSwitchMembers> featureSwitch);
    private void AddField(string fieldName, string classId, Nullable`1<FeatureSwitchMembers> featureSwitch);
    private void AddMethod(string methodName, string classId, string classNamespace, string className, Nullable`1<FeatureSwitchMembers> featureSwitch);
    private string GetFullClassName(string classNamespace, string className);
    private void InitializeDefineConstants();
}
public class ILLink.Tasks.ILLink : ToolTask {
    [CompilerGeneratedAttribute]
private ITaskItem[] <AssemblyPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ReferenceAssemblyPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <RootAssemblyNames>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem <OutputDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NoWarn>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Warn>k__BackingField;
    private Nullable`1<bool> _treatWarningsAsErrors;
    private Nullable`1<bool> _singleWarn;
    [CompilerGeneratedAttribute]
private string <WarningsAsErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WarningsNotAsErrors>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <RootDescriptorFiles>k__BackingField;
    private Nullable`1<bool> _beforeFieldInit;
    private Nullable`1<bool> _overrideRemoval;
    private Nullable`1<bool> _unreachableBodies;
    private Nullable`1<bool> _unusedInterfaces;
    private Nullable`1<bool> _iPConstProp;
    [CompilerGeneratedAttribute]
private ITaskItem[] <FeatureSettings>k__BackingField;
    private Nullable`1<bool> _sealer;
    private static String[] _optimizationNames;
    [CompilerGeneratedAttribute]
private ITaskItem[] <CustomData>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ExtraArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DumpDependencies>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DependenciesFileFormat>k__BackingField;
    private Nullable`1<bool> _removeSymbols;
    [CompilerGeneratedAttribute]
private string <TrimMode>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultAction>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <CustomSteps>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <KeepMetadata>k__BackingField;
    private static string DotNetHostPathEnvironmentName;
    private string _dotnetPath;
    private string _illinkPath;
    [RequiredAttribute]
public ITaskItem[] AssemblyPaths { get; public set; }
    public ITaskItem[] ReferenceAssemblyPaths { get; public set; }
    [RequiredAttribute]
public ITaskItem[] RootAssemblyNames { get; public set; }
    [RequiredAttribute]
public ITaskItem OutputDirectory { get; public set; }
    public string NoWarn { get; public set; }
    public string Warn { get; public set; }
    unknown bool TreatWarningsAsErrors {public set; }
    unknown bool SingleWarn {public set; }
    public string WarningsAsErrors { get; public set; }
    public string WarningsNotAsErrors { get; public set; }
    public ITaskItem[] RootDescriptorFiles { get; public set; }
    unknown bool BeforeFieldInit {public set; }
    unknown bool OverrideRemoval {public set; }
    unknown bool UnreachableBodies {public set; }
    unknown bool UnusedInterfaces {public set; }
    unknown bool IPConstProp {public set; }
    public ITaskItem[] FeatureSettings { get; public set; }
    unknown bool Sealer {public set; }
    public ITaskItem[] CustomData { get; public set; }
    public string ExtraArgs { get; public set; }
    public bool DumpDependencies { get; public set; }
    public string DependenciesFileFormat { get; public set; }
    unknown bool RemoveSymbols {public set; }
    public string TrimMode { get; public set; }
    public string DefaultAction { get; public set; }
    public ITaskItem[] CustomSteps { get; public set; }
    public ITaskItem[] KeepMetadata { get; public set; }
    private string DotNetPath { get; }
    protected MessageImportance StandardErrorLoggingImportance { get; }
    protected string ToolName { get; }
    public string ILLinkPath { get; public set; }
    private static ILLink();
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AssemblyPaths();
    [CompilerGeneratedAttribute]
public void set_AssemblyPaths(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ReferenceAssemblyPaths();
    [CompilerGeneratedAttribute]
public void set_ReferenceAssemblyPaths(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_RootAssemblyNames();
    [CompilerGeneratedAttribute]
public void set_RootAssemblyNames(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem get_OutputDirectory();
    [CompilerGeneratedAttribute]
public void set_OutputDirectory(ITaskItem value);
    [CompilerGeneratedAttribute]
public string get_NoWarn();
    [CompilerGeneratedAttribute]
public void set_NoWarn(string value);
    [CompilerGeneratedAttribute]
public string get_Warn();
    [CompilerGeneratedAttribute]
public void set_Warn(string value);
    public void set_TreatWarningsAsErrors(bool value);
    public void set_SingleWarn(bool value);
    [CompilerGeneratedAttribute]
public string get_WarningsAsErrors();
    [CompilerGeneratedAttribute]
public void set_WarningsAsErrors(string value);
    [CompilerGeneratedAttribute]
public string get_WarningsNotAsErrors();
    [CompilerGeneratedAttribute]
public void set_WarningsNotAsErrors(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_RootDescriptorFiles();
    [CompilerGeneratedAttribute]
public void set_RootDescriptorFiles(ITaskItem[] value);
    public void set_BeforeFieldInit(bool value);
    public void set_OverrideRemoval(bool value);
    public void set_UnreachableBodies(bool value);
    public void set_UnusedInterfaces(bool value);
    public void set_IPConstProp(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_FeatureSettings();
    [CompilerGeneratedAttribute]
public void set_FeatureSettings(ITaskItem[] value);
    public void set_Sealer(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_CustomData();
    [CompilerGeneratedAttribute]
public void set_CustomData(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_ExtraArgs();
    [CompilerGeneratedAttribute]
public void set_ExtraArgs(string value);
    [CompilerGeneratedAttribute]
public bool get_DumpDependencies();
    [CompilerGeneratedAttribute]
public void set_DumpDependencies(bool value);
    [CompilerGeneratedAttribute]
public string get_DependenciesFileFormat();
    [CompilerGeneratedAttribute]
public void set_DependenciesFileFormat(string value);
    public void set_RemoveSymbols(bool value);
    [CompilerGeneratedAttribute]
public string get_TrimMode();
    [CompilerGeneratedAttribute]
public void set_TrimMode(string value);
    [CompilerGeneratedAttribute]
public string get_DefaultAction();
    [CompilerGeneratedAttribute]
public void set_DefaultAction(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_CustomSteps();
    [CompilerGeneratedAttribute]
public void set_CustomSteps(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_KeepMetadata();
    [CompilerGeneratedAttribute]
public void set_KeepMetadata(ITaskItem[] value);
    private string get_DotNetPath();
    protected virtual MessageImportance get_StandardErrorLoggingImportance();
    protected virtual string get_ToolName();
    protected virtual string GenerateFullPathToTool();
    public string get_ILLinkPath();
    public void set_ILLinkPath(string value);
    private static string Quote(string path);
    protected virtual string GenerateCommandLineCommands();
    private static void SetOpt(StringBuilder args, string opt, bool enabled);
    private static void SetOpt(StringBuilder args, string opt, string assembly, bool enabled);
    protected virtual string GenerateResponseFileCommands();
}
public static class ILLink.Tasks.Utils : object {
    public static bool IsManagedAssembly(string fileName);
}
