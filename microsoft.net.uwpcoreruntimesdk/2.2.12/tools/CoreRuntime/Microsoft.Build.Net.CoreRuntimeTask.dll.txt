internal enum ErrorCodes : Enum {
    public int value__;
    public static ErrorCodes Success;
    public static ErrorCodes EmptyFileList;
    public static ErrorCodes IncorrectInputFolder;
    public static ErrorCodes IncorrectOutputFolder;
    public static ErrorCodes IncorrectConfigFile;
    public static ErrorCodes InvalidArgument;
    public static ErrorCodes CrossGenNotOnPath;
    public static ErrorCodes InvalidAppManifest;
    public static ErrorCodes IncorrectPlatformFolder;
    public static ErrorCodes IncorrectFrameworkFolder;
    public static ErrorCodes IncorrectMakePriPath;
    public static ErrorCodes IncorrectRcPath;
    public static ErrorCodes UnknownCrossgenError;
    public static ErrorCodes CLRInitError;
    public static ErrorCodes InvalidCrossgenArguments;
    public static ErrorCodes AssemblyNotFound;
    public static ErrorCodes InputFileReadError;
    public static ErrorCodes InputPackageFolderStructureTooComplex;
    public static ErrorCodes SecurityException;
    public static ErrorCodes UnauthorizedAccessException;
    public static ErrorCodes PathTooLongException;
    public static ErrorCodes NotSupported;
    public static ErrorCodes CoreRuntimeLinkageError;
    public static ErrorCodes InternalWireUpCoreRuntimeError;
    public static ErrorCodes FailedCreatingJobObject;
    public static ErrorCodes CompilationFailedBadInputIL;
    public static ErrorCodes ExceededMaximumMethodSize;
    public static ErrorCodes CrossgenTimeout;
    public static ErrorCodes InsufficientMemory;
    public static ErrorCodes InsufficientDiskSpace;
    public static ErrorCodes SharingViolation;
    public static ErrorCodes CorEExecutionEngine;
    public static ErrorCodes CorESecurity;
    public static ErrorCodes CldbEInternalError;
    public static ErrorCodes AccessViolation;
    public static ErrorCodes AppCompileInternalFailure;
}
public class Microsoft.Build.Net.CoreRuntimeTask.MergePriConfigTask : Task {
    [CompilerGeneratedAttribute]
private string <AppPriConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomPriConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MergedPriConfig>k__BackingField;
    [RequiredAttribute]
public string AppPriConfig { get; public set; }
    [RequiredAttribute]
public string CustomPriConfig { get; public set; }
    [RequiredAttribute]
public string MergedPriConfig { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AppPriConfig();
    [CompilerGeneratedAttribute]
public void set_AppPriConfig(string value);
    [CompilerGeneratedAttribute]
public string get_CustomPriConfig();
    [CompilerGeneratedAttribute]
public void set_CustomPriConfig(string value);
    [CompilerGeneratedAttribute]
public string get_MergedPriConfig();
    [CompilerGeneratedAttribute]
public void set_MergedPriConfig(string value);
    public virtual bool Execute();
    private int InternalExecute();
}
public class Microsoft.Build.Net.CoreRuntimeTask.MergeResWFilesTask : Task {
    private List`1<ITaskItem> mergedResources;
    [CompilerGeneratedAttribute]
private ITaskItem[] <MergedResources>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ResourceFiles>k__BackingField;
    [OutputAttribute]
public ITaskItem[] MergedResources { get; public set; }
    [RequiredAttribute]
public string OutputLocation { get; public set; }
    [RequiredAttribute]
public ITaskItem[] ResourceFiles { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_MergedResources();
    [CompilerGeneratedAttribute]
public void set_MergedResources(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_OutputLocation();
    [CompilerGeneratedAttribute]
public void set_OutputLocation(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ResourceFiles();
    [CompilerGeneratedAttribute]
public void set_ResourceFiles(ITaskItem[] value);
    public virtual bool Execute();
    private int InternalExecute();
    private IEnumerable`1<string> GetResourceIndexes();
    private IEnumerable`1<ITaskItem> GetResourceFilesOfResourceIndex(string resourceIndex);
}
public class Microsoft.Build.Net.CoreRuntimeTask.ResourceHandlingTask : Task {
    [CompilerGeneratedAttribute]
private ITaskItem[] <AssemblyList>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutResWPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StateFile>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipFrameworkResources>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <ReswFileList>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <UnprocessedAssemblyList>k__BackingField;
    private MetadataReaderHost _host;
    private ResourceHandlingState _state;
    private List`1<ITaskItem> _mainAssemblies;
    private List`1<ITaskItem> _satelliteAssemblies;
    private HashSet`1<string> _processedAssemblies;
    [RequiredAttribute]
public ITaskItem[] AssemblyList { get; public set; }
    [RequiredAttribute]
public string OutResWPath { get; public set; }
    [RequiredAttribute]
public string StateFile { get; public set; }
    public bool SkipFrameworkResources { get; public set; }
    [OutputAttribute]
public ITaskItem[] ReswFileList { get; public set; }
    [OutputAttribute]
public ITaskItem[] UnprocessedAssemblyList { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AssemblyList();
    [CompilerGeneratedAttribute]
public void set_AssemblyList(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_OutResWPath();
    [CompilerGeneratedAttribute]
public void set_OutResWPath(string value);
    [CompilerGeneratedAttribute]
public string get_StateFile();
    [CompilerGeneratedAttribute]
public void set_StateFile(string value);
    [CompilerGeneratedAttribute]
public bool get_SkipFrameworkResources();
    [CompilerGeneratedAttribute]
public void set_SkipFrameworkResources(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ReswFileList();
    [CompilerGeneratedAttribute]
public void set_ReswFileList(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_UnprocessedAssemblyList();
    [CompilerGeneratedAttribute]
public void set_UnprocessedAssemblyList(ITaskItem[] value);
    public virtual bool Execute();
    private ResourceHandlingState ReadStateFile(string stateFile);
    private bool IsAtOutputFolder(string path);
    private void WriteStateFile(string stateFile, ResourceHandlingState state);
    private ResWInfo ExtractResourcesFromStream(Stream stream, IAssembly assembly, string resourceFileName, bool containsFrameworkResources);
    private bool TryGetNeutralResourcesLanguageAttribute(IAssembly assembly, String& neutralResourceLanguage);
    private void WriteResW(Stream stream, string reswFilePath);
    private List`1<ResWInfo> ExtractAssemblyResWList(string assemblyFilePath, Boolean& containsFrameworkResources);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
internal class Microsoft.Build.Net.CoreRuntimeTask.Resources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
internal static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
internal static CultureInfo Culture { get; internal set; }
    internal static string Error_CopyWin32ResourcesFailed { get; }
    internal static string Error_CustomEntryPointNotSupported { get; }
    internal static string Error_FailedToLoadResourceConfig { get; }
    internal static string Error_InternalWireUpCoreRuntimeError { get; }
    internal static string Error_InvalidResourceConfig { get; }
    internal static string Error_IOExceptionCopyFile { get; }
    internal static string Error_IOExceptionOutputFolder { get; }
    internal static string Error_PathTooLongExceptionCopyFile { get; }
    internal static string Error_PathTooLongExceptionOutputFolder { get; }
    internal static string Error_ResourceExtractionFailed { get; }
    internal static string Error_UnspecifiedCheckUpToDate { get; }
    internal static string Error_UnspecifiedCreatingUWPShimForHybrid { get; }
    internal static string Error_UnspecifiedSaveState { get; }
    internal static string Message_CachedReswNotExists { get; }
    internal static string Message_CachedReswNotUpToDate { get; }
    internal static string Message_CachedReswNotUpToDateAssemblyNewer { get; }
    internal static string Message_ProcessingFile { get; }
    internal static string Message_UnspecifiedReadStateFile { get; }
    internal static string Message_UnspecifiedSaveStateFile { get; }
    internal static string Message_UnspecifiedStateFileCorrupted { get; }
    internal static string Message_UsingCachedResw { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_Error_CopyWin32ResourcesFailed();
    internal static string get_Error_CustomEntryPointNotSupported();
    internal static string get_Error_FailedToLoadResourceConfig();
    internal static string get_Error_InternalWireUpCoreRuntimeError();
    internal static string get_Error_InvalidResourceConfig();
    internal static string get_Error_IOExceptionCopyFile();
    internal static string get_Error_IOExceptionOutputFolder();
    internal static string get_Error_PathTooLongExceptionCopyFile();
    internal static string get_Error_PathTooLongExceptionOutputFolder();
    internal static string get_Error_ResourceExtractionFailed();
    internal static string get_Error_UnspecifiedCheckUpToDate();
    internal static string get_Error_UnspecifiedCreatingUWPShimForHybrid();
    internal static string get_Error_UnspecifiedSaveState();
    internal static string get_Message_CachedReswNotExists();
    internal static string get_Message_CachedReswNotUpToDate();
    internal static string get_Message_CachedReswNotUpToDateAssemblyNewer();
    internal static string get_Message_ProcessingFile();
    internal static string get_Message_UnspecifiedReadStateFile();
    internal static string get_Message_UnspecifiedSaveStateFile();
    internal static string get_Message_UnspecifiedStateFileCorrupted();
    internal static string get_Message_UsingCachedResw();
}
public class Microsoft.Build.Net.CoreRuntimeTask.WireUpCoreRuntime : Task {
    private static int timeoutDuration;
    private static int ErrorNotAnAssembly;
    private static string PackageDependencyElementName;
    private static string AppEntryPointDir;
    private static string WindowsUWPShimEXE;
    private static string ConsoleUWPShimEXE;
    [CompilerGeneratedAttribute]
private string <AppxManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <AppxPackagePayload>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetRuntime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetArch>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <FrameworkPackages>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CoreRuntimeSDKLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CopyWin32ResourcesLocation>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ErrorCode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FrameworkPackagesNeedsToBeDeployed>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <TransformedAppxPackagePayload>k__BackingField;
    [RequiredAttribute]
public string AppxManifest { get; public set; }
    [RequiredAttribute]
public ITaskItem[] AppxPackagePayload { get; public set; }
    [RequiredAttribute]
public string OutputPath { get; public set; }
    [RequiredAttribute]
public string TargetRuntime { get; public set; }
    [RequiredAttribute]
public string TargetArch { get; public set; }
    [RequiredAttribute]
public ITaskItem[] FrameworkPackages { get; public set; }
    [RequiredAttribute]
public string CoreRuntimeSDKLocation { get; public set; }
    [RequiredAttribute]
public string CopyWin32ResourcesLocation { get; public set; }
    public int TimeoutDuration { get; public set; }
    [OutputAttribute]
public int ErrorCode { get; private set; }
    [OutputAttribute]
public bool FrameworkPackagesNeedsToBeDeployed { get; private set; }
    [OutputAttribute]
public ITaskItem[] TransformedAppxPackagePayload { get; public set; }
    private static WireUpCoreRuntime();
    [CompilerGeneratedAttribute]
public string get_AppxManifest();
    [CompilerGeneratedAttribute]
public void set_AppxManifest(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_AppxPackagePayload();
    [CompilerGeneratedAttribute]
public void set_AppxPackagePayload(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_OutputPath();
    [CompilerGeneratedAttribute]
public void set_OutputPath(string value);
    [CompilerGeneratedAttribute]
public string get_TargetRuntime();
    [CompilerGeneratedAttribute]
public void set_TargetRuntime(string value);
    [CompilerGeneratedAttribute]
public string get_TargetArch();
    [CompilerGeneratedAttribute]
public void set_TargetArch(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_FrameworkPackages();
    [CompilerGeneratedAttribute]
public void set_FrameworkPackages(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_CoreRuntimeSDKLocation();
    [CompilerGeneratedAttribute]
public void set_CoreRuntimeSDKLocation(string value);
    [CompilerGeneratedAttribute]
public string get_CopyWin32ResourcesLocation();
    [CompilerGeneratedAttribute]
public void set_CopyWin32ResourcesLocation(string value);
    public int get_TimeoutDuration();
    public void set_TimeoutDuration(int value);
    [CompilerGeneratedAttribute]
public int get_ErrorCode();
    [CompilerGeneratedAttribute]
private void set_ErrorCode(int value);
    [CompilerGeneratedAttribute]
public bool get_FrameworkPackagesNeedsToBeDeployed();
    [CompilerGeneratedAttribute]
private void set_FrameworkPackagesNeedsToBeDeployed(bool value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_TransformedAppxPackagePayload();
    [CompilerGeneratedAttribute]
public void set_TransformedAppxPackagePayload(ITaskItem[] value);
    public virtual bool Execute();
    internal int InternalExecute();
    private int CopyWin32Resources(string lpPEFileToReadResourcesFrom, string lpPEFileToInsertResourcesInto);
}
