internal static class FxResources.System.ComponentModel.TypeConverter.SR : object {
}
internal class MS.Internal.Xml.Linq.ComponentModel.XAttributeValuePropertyDescriptor : XPropertyDescriptor`2<XAttribute, string> {
    private XAttribute _attribute;
    public bool IsReadOnly { get; }
    public virtual bool get_IsReadOnly();
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
    protected virtual void OnChanged(object sender, XObjectChangeEventArgs args);
}
[DefaultMemberAttribute("Item")]
internal class MS.Internal.Xml.Linq.ComponentModel.XDeferredAxis`1 : object {
    private Func`3<XElement, XName, IEnumerable`1<T>> _func;
    internal XElement element;
    internal XName name;
    public IEnumerable`1<T> Item { get; }
    public XDeferredAxis`1(Func`3<XElement, XName, IEnumerable`1<T>> func, XElement element, XName name);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public IEnumerable`1<T> get_Item(string expandedName);
}
[DefaultMemberAttribute("Item")]
internal class MS.Internal.Xml.Linq.ComponentModel.XDeferredSingleton`1 : object {
    private Func`3<XElement, XName, T> _func;
    internal XElement element;
    internal XName name;
    public T Item { get; }
    public XDeferredSingleton`1(Func`3<XElement, XName, T> func, XElement element, XName name);
    public T get_Item(string expandedName);
}
internal class MS.Internal.Xml.Linq.ComponentModel.XElementAttributePropertyDescriptor : XPropertyDescriptor`2<XElement, object> {
    private XDeferredSingleton`1<XAttribute> _value;
    private XAttribute _changeState;
    public virtual object GetValue(object component);
    protected virtual void OnChanged(object sender, XObjectChangeEventArgs args);
    protected virtual void OnChanging(object sender, XObjectChangeEventArgs args);
}
internal class MS.Internal.Xml.Linq.ComponentModel.XElementDescendantsPropertyDescriptor : XPropertyDescriptor`2<XElement, IEnumerable`1<XElement>> {
    private XDeferredAxis`1<XElement> _value;
    private XName _changeState;
    public virtual object GetValue(object component);
    protected virtual void OnChanged(object sender, XObjectChangeEventArgs args);
    protected virtual void OnChanging(object sender, XObjectChangeEventArgs args);
}
internal class MS.Internal.Xml.Linq.ComponentModel.XElementElementPropertyDescriptor : XPropertyDescriptor`2<XElement, object> {
    private XDeferredSingleton`1<XElement> _value;
    private XElement _changeState;
    public virtual object GetValue(object component);
    protected virtual void OnChanged(object sender, XObjectChangeEventArgs args);
    protected virtual void OnChanging(object sender, XObjectChangeEventArgs args);
}
internal class MS.Internal.Xml.Linq.ComponentModel.XElementElementsPropertyDescriptor : XPropertyDescriptor`2<XElement, IEnumerable`1<XElement>> {
    private XDeferredAxis`1<XElement> _value;
    private object _changeState;
    public virtual object GetValue(object component);
    protected virtual void OnChanged(object sender, XObjectChangeEventArgs args);
    protected virtual void OnChanging(object sender, XObjectChangeEventArgs args);
}
internal class MS.Internal.Xml.Linq.ComponentModel.XElementValuePropertyDescriptor : XPropertyDescriptor`2<XElement, string> {
    private XElement _element;
    public bool IsReadOnly { get; }
    public virtual bool get_IsReadOnly();
    public virtual object GetValue(object component);
    public virtual void SetValue(object component, object value);
    protected virtual void OnChanged(object sender, XObjectChangeEventArgs args);
}
internal class MS.Internal.Xml.Linq.ComponentModel.XElementXmlPropertyDescriptor : XPropertyDescriptor`2<XElement, string> {
    private XElement _element;
    public virtual object GetValue(object component);
    protected virtual void OnChanged(object sender, XObjectChangeEventArgs args);
}
internal abstract class MS.Internal.Xml.Linq.ComponentModel.XPropertyDescriptor`2 : PropertyDescriptor {
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public bool SupportsChangeEvents { get; }
    public XPropertyDescriptor`2(string name);
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool get_SupportsChangeEvents();
    public virtual void AddValueChanged(object component, EventHandler handler);
    public virtual bool CanResetValue(object component);
    public virtual void RemoveValueChanged(object component, EventHandler handler);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
    protected virtual void OnChanged(object sender, XObjectChangeEventArgs args);
    protected virtual void OnChanging(object sender, XObjectChangeEventArgs args);
}
internal class MS.Internal.Xml.Linq.ComponentModel.XTypeDescriptionProvider`1 : TypeDescriptionProvider {
    public virtual ICustomTypeDescriptor GetTypeDescriptor(Type type, object instance);
}
internal class MS.Internal.Xml.Linq.ComponentModel.XTypeDescriptor`1 : CustomTypeDescriptor {
    public XTypeDescriptor`1(ICustomTypeDescriptor parent);
    public virtual PropertyDescriptorCollection GetProperties();
    public virtual PropertyDescriptorCollection GetProperties(Attribute[] attributes);
}
public class System.ComponentModel.AddingNewEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <NewObject>k__BackingField;
    public object NewObject { get; public set; }
    public AddingNewEventArgs(object newObject);
    [CompilerGeneratedAttribute]
public object get_NewObject();
    [CompilerGeneratedAttribute]
public void set_NewObject(object value);
}
public class System.ComponentModel.AddingNewEventHandler : MulticastDelegate {
    public AddingNewEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, AddingNewEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, AddingNewEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("32767")]
public class System.ComponentModel.AmbientValueAttribute : Attribute {
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public object Value { get; }
    public AmbientValueAttribute(Type type, string value);
    public AmbientValueAttribute(char value);
    public AmbientValueAttribute(byte value);
    public AmbientValueAttribute(short value);
    public AmbientValueAttribute(int value);
    public AmbientValueAttribute(long value);
    public AmbientValueAttribute(float value);
    public AmbientValueAttribute(double value);
    public AmbientValueAttribute(bool value);
    public AmbientValueAttribute(string value);
    public AmbientValueAttribute(object value);
    [CompilerGeneratedAttribute]
public object get_Value();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.ComponentModel.ArrayConverter : CollectionConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
[DefaultMemberAttribute("Item")]
public class System.ComponentModel.AttributeCollection : object {
    public static AttributeCollection Empty;
    private static Hashtable s_defaultAttributes;
    private Attribute[] _attributes;
    private static object s_internalSyncObject;
    private AttributeEntry[] _foundAttributeTypes;
    private int _index;
    protected Attribute[] Attributes { get; }
    public int Count { get; }
    public Attribute Item { get; }
    public Attribute Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private int System.Collections.ICollection.Count { get; }
    public AttributeCollection(Attribute[] attributes);
    private static AttributeCollection();
    public static AttributeCollection FromExisting(AttributeCollection existing, Attribute[] newAttributes);
    protected virtual Attribute[] get_Attributes();
    public int get_Count();
    public virtual Attribute get_Item(int index);
    public virtual Attribute get_Item(Type attributeType);
    public bool Contains(Attribute attribute);
    public bool Contains(Attribute[] attributes);
    protected Attribute GetDefaultAttribute(Type attributeType);
    public IEnumerator GetEnumerator();
    public bool Matches(Attribute attribute);
    public bool Matches(Attribute[] attributes);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void CopyTo(Array array, int index);
}
[AttributeUsageAttribute("128")]
public class System.ComponentModel.AttributeProviderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <TypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    public string TypeName { get; }
    public string PropertyName { get; }
    public AttributeProviderAttribute(string typeName);
    public AttributeProviderAttribute(string typeName, string propertyName);
    public AttributeProviderAttribute(Type type);
    [CompilerGeneratedAttribute]
public string get_TypeName();
    [CompilerGeneratedAttribute]
public string get_PropertyName();
}
public abstract class System.ComponentModel.BaseNumberConverter : TypeConverter {
    internal bool AllowHex { get; }
    internal Type TargetType { get; }
    internal virtual bool get_AllowHex();
    internal abstract virtual Type get_TargetType();
    internal abstract virtual object FromString(string value, int radix);
    internal abstract virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal abstract virtual string ToString(object value, NumberFormatInfo formatInfo);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
}
[AttributeUsageAttribute("32767")]
public class System.ComponentModel.BindableAttribute : Attribute {
    public static BindableAttribute Yes;
    public static BindableAttribute No;
    public static BindableAttribute Default;
    private bool _isDefault;
    [CompilerGeneratedAttribute]
private bool <Bindable>k__BackingField;
    [CompilerGeneratedAttribute]
private BindingDirection <Direction>k__BackingField;
    public bool Bindable { get; }
    public BindingDirection Direction { get; }
    public BindableAttribute(bool bindable);
    public BindableAttribute(bool bindable, BindingDirection direction);
    public BindableAttribute(BindableSupport flags);
    public BindableAttribute(BindableSupport flags, BindingDirection direction);
    private static BindableAttribute();
    [CompilerGeneratedAttribute]
public bool get_Bindable();
    [CompilerGeneratedAttribute]
public BindingDirection get_Direction();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
}
public enum System.ComponentModel.BindableSupport : Enum {
    public int value__;
    public static BindableSupport No;
    public static BindableSupport Yes;
    public static BindableSupport Default;
}
public enum System.ComponentModel.BindingDirection : Enum {
    public int value__;
    public static BindingDirection OneWay;
    public static BindingDirection TwoWay;
}
[TypeForwardedFromAttribute("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.ComponentModel.BindingList`1 : Collection`1<T> {
    private int addNewPos;
    private bool raiseListChangedEvents;
    private bool raiseItemChangedEvents;
    private PropertyDescriptorCollection _itemTypeProperties;
    private PropertyChangedEventHandler _propertyChangedEventHandler;
    private AddingNewEventHandler _onAddingNew;
    private ListChangedEventHandler _onListChanged;
    private int _lastChangeIndex;
    private bool allowNew;
    private bool allowEdit;
    private bool allowRemove;
    private bool userSetAllowNew;
    private bool ItemTypeHasDefaultConstructor { get; }
    public bool RaiseListChangedEvents { get; public set; }
    private bool AddingNewHandled { get; }
    public bool AllowNew { get; public set; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    public bool AllowEdit { get; public set; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    public bool AllowRemove { get; public set; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    protected bool SupportsChangeNotificationCore { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    protected bool SupportsSearchingCore { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    protected bool SupportsSortingCore { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    protected bool IsSortedCore { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    protected PropertyDescriptor SortPropertyCore { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    protected ListSortDirection SortDirectionCore { get; }
    private bool System.ComponentModel.IRaiseItemChangedEvents.RaisesItemChangedEvents { get; }
    public BindingList`1(IList`1<T> list);
    private void Initialize();
    private bool get_ItemTypeHasDefaultConstructor();
    public void add_AddingNew(AddingNewEventHandler value);
    public void remove_AddingNew(AddingNewEventHandler value);
    protected virtual void OnAddingNew(AddingNewEventArgs e);
    private object FireAddingNew();
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    protected virtual void OnListChanged(ListChangedEventArgs e);
    public bool get_RaiseListChangedEvents();
    public void set_RaiseListChangedEvents(bool value);
    public void ResetBindings();
    public void ResetItem(int position);
    private void FireListChanged(ListChangedType type, int index);
    protected virtual void ClearItems();
    protected virtual void InsertItem(int index, T item);
    protected virtual void RemoveItem(int index);
    protected virtual void SetItem(int index, T item);
    public virtual void CancelNew(int itemIndex);
    public virtual void EndNew(int itemIndex);
    public T AddNew();
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private bool get_AddingNewHandled();
    protected virtual object AddNewCore();
    public bool get_AllowNew();
    public void set_AllowNew(bool value);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    public bool get_AllowEdit();
    public void set_AllowEdit(bool value);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    public bool get_AllowRemove();
    public void set_AllowRemove(bool value);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    protected virtual bool get_SupportsChangeNotificationCore();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    protected virtual bool get_SupportsSearchingCore();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    protected virtual bool get_SupportsSortingCore();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    protected virtual bool get_IsSortedCore();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    protected virtual PropertyDescriptor get_SortPropertyCore();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    protected virtual ListSortDirection get_SortDirectionCore();
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor prop, ListSortDirection direction);
    protected virtual void ApplySortCore(PropertyDescriptor prop, ListSortDirection direction);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    protected virtual void RemoveSortCore();
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor prop, object key);
    protected virtual int FindCore(PropertyDescriptor prop, object key);
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor prop);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor prop);
    private void HookPropertyChanged(T item);
    private void UnhookPropertyChanged(T item);
    private void Child_PropertyChanged(object sender, PropertyChangedEventArgs e);
    private sealed virtual override bool System.ComponentModel.IRaiseItemChangedEvents.get_RaisesItemChangedEvents();
}
public class System.ComponentModel.BooleanConverter : TypeConverter {
    private static StandardValuesCollection modreq(System.Runtime.CompilerServices.IsVolatile) s_values;
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class System.ComponentModel.ByteConverter : BaseNumberConverter {
    internal Type TargetType { get; }
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
public class System.ComponentModel.CancelEventHandler : MulticastDelegate {
    public CancelEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CancelEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CancelEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.ComponentModel.CharConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public enum System.ComponentModel.CollectionChangeAction : Enum {
    public int value__;
    public static CollectionChangeAction Add;
    public static CollectionChangeAction Remove;
    public static CollectionChangeAction Refresh;
}
public class System.ComponentModel.CollectionChangeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private CollectionChangeAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Element>k__BackingField;
    public CollectionChangeAction Action { get; }
    public object Element { get; }
    public CollectionChangeEventArgs(CollectionChangeAction action, object element);
    [CompilerGeneratedAttribute]
public virtual CollectionChangeAction get_Action();
    [CompilerGeneratedAttribute]
public virtual object get_Element();
}
public class System.ComponentModel.CollectionChangeEventHandler : MulticastDelegate {
    public CollectionChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, CollectionChangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, CollectionChangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.ComponentModel.CollectionConverter : TypeConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
}
[AttributeUsageAttribute("4")]
public class System.ComponentModel.ComplexBindingPropertiesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <DataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataMember>k__BackingField;
    public static ComplexBindingPropertiesAttribute Default;
    public string DataSource { get; }
    public string DataMember { get; }
    public ComplexBindingPropertiesAttribute(string dataSource);
    public ComplexBindingPropertiesAttribute(string dataSource, string dataMember);
    private static ComplexBindingPropertiesAttribute();
    [CompilerGeneratedAttribute]
public string get_DataSource();
    [CompilerGeneratedAttribute]
public string get_DataMember();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.ComponentModel.ComponentConverter : ReferenceConverter {
    public ComponentConverter(Type type);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
public abstract class System.ComponentModel.ComponentEditor : object {
    public bool EditComponent(object component);
    public abstract virtual bool EditComponent(ITypeDescriptorContext context, object component);
}
public class System.ComponentModel.ComponentResourceManager : ResourceManager {
    private Hashtable _resourceSets;
    private CultureInfo _neutralResourcesCulture;
    private CultureInfo NeutralResourcesCulture { get; }
    public ComponentResourceManager(Type t);
    private CultureInfo get_NeutralResourcesCulture();
    public void ApplyResources(object value, string objectName);
    public virtual void ApplyResources(object value, string objectName, CultureInfo culture);
    private SortedList`2<string, object> FillResources(CultureInfo culture, ResourceSet& resourceSet);
}
public class System.ComponentModel.Container : object {
    private ISite[] _sites;
    private int _siteCount;
    private ComponentCollection _components;
    private ContainerFilterService _filter;
    private bool _checkedFilter;
    private object _syncObj;
    public ComponentCollection Components { get; }
    protected virtual override void Finalize();
    public virtual void Add(IComponent component);
    public virtual void Add(IComponent component, string name);
    protected virtual ISite CreateSite(IComponent component, string name);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected virtual object GetService(Type service);
    public virtual ComponentCollection get_Components();
    public virtual void Remove(IComponent component);
    private void Remove(IComponent component, bool preserveSite);
    protected void RemoveWithoutUnsiting(IComponent component);
    protected virtual void ValidateName(IComponent component, string name);
}
public abstract class System.ComponentModel.ContainerFilterService : object {
    public virtual ComponentCollection FilterComponents(ComponentCollection components);
}
public class System.ComponentModel.CultureInfoConverter : TypeConverter {
    private StandardValuesCollection _values;
    private string DefaultCultureString { get; }
    private string get_DefaultCultureString();
    protected virtual string GetCultureName(CultureInfo culture);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public abstract class System.ComponentModel.CustomTypeDescriptor : object {
    private ICustomTypeDescriptor _parent;
    protected CustomTypeDescriptor(ICustomTypeDescriptor parent);
    public virtual AttributeCollection GetAttributes();
    public virtual string GetClassName();
    public virtual string GetComponentName();
    public virtual TypeConverter GetConverter();
    public virtual EventDescriptor GetDefaultEvent();
    public virtual PropertyDescriptor GetDefaultProperty();
    public virtual object GetEditor(Type editorBaseType);
    public virtual EventDescriptorCollection GetEvents();
    public virtual EventDescriptorCollection GetEvents(Attribute[] attributes);
    public virtual PropertyDescriptorCollection GetProperties();
    public virtual PropertyDescriptorCollection GetProperties(Attribute[] attributes);
    public virtual object GetPropertyOwner(PropertyDescriptor pd);
}
[AttributeUsageAttribute("4")]
public class System.ComponentModel.DataObjectAttribute : Attribute {
    public static DataObjectAttribute DataObject;
    public static DataObjectAttribute NonDataObject;
    public static DataObjectAttribute Default;
    [CompilerGeneratedAttribute]
private bool <IsDataObject>k__BackingField;
    public bool IsDataObject { get; }
    public DataObjectAttribute(bool isDataObject);
    private static DataObjectAttribute();
    [CompilerGeneratedAttribute]
public bool get_IsDataObject();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
}
[AttributeUsageAttribute("128")]
public class System.ComponentModel.DataObjectFieldAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <IsIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNullable>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Length>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PrimaryKey>k__BackingField;
    public bool IsIdentity { get; }
    public bool IsNullable { get; }
    public int Length { get; }
    public bool PrimaryKey { get; }
    public DataObjectFieldAttribute(bool primaryKey);
    public DataObjectFieldAttribute(bool primaryKey, bool isIdentity);
    public DataObjectFieldAttribute(bool primaryKey, bool isIdentity, bool isNullable);
    public DataObjectFieldAttribute(bool primaryKey, bool isIdentity, bool isNullable, int length);
    [CompilerGeneratedAttribute]
public bool get_IsIdentity();
    [CompilerGeneratedAttribute]
public bool get_IsNullable();
    [CompilerGeneratedAttribute]
public int get_Length();
    [CompilerGeneratedAttribute]
public bool get_PrimaryKey();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[AttributeUsageAttribute("64")]
public class System.ComponentModel.DataObjectMethodAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <IsDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private DataObjectMethodType <MethodType>k__BackingField;
    public bool IsDefault { get; }
    public DataObjectMethodType MethodType { get; }
    public DataObjectMethodAttribute(DataObjectMethodType methodType);
    public DataObjectMethodAttribute(DataObjectMethodType methodType, bool isDefault);
    [CompilerGeneratedAttribute]
public bool get_IsDefault();
    [CompilerGeneratedAttribute]
public DataObjectMethodType get_MethodType();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool Match(object obj);
}
public enum System.ComponentModel.DataObjectMethodType : Enum {
    public int value__;
    public static DataObjectMethodType Fill;
    public static DataObjectMethodType Select;
    public static DataObjectMethodType Update;
    public static DataObjectMethodType Insert;
    public static DataObjectMethodType Delete;
}
public class System.ComponentModel.DateTimeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.ComponentModel.DateTimeOffsetConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.ComponentModel.DecimalConverter : BaseNumberConverter {
    internal bool AllowHex { get; }
    internal Type TargetType { get; }
    internal virtual bool get_AllowHex();
    internal virtual Type get_TargetType();
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
[AttributeUsageAttribute("4")]
public class System.ComponentModel.DefaultBindingPropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public static DefaultBindingPropertyAttribute Default;
    public string Name { get; }
    public DefaultBindingPropertyAttribute(string name);
    private static DefaultBindingPropertyAttribute();
    [CompilerGeneratedAttribute]
public string get_Name();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[AttributeUsageAttribute("4")]
public class System.ComponentModel.DefaultEventAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public static DefaultEventAttribute Default;
    public string Name { get; }
    public DefaultEventAttribute(string name);
    private static DefaultEventAttribute();
    [CompilerGeneratedAttribute]
public string get_Name();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[AttributeUsageAttribute("4")]
public class System.ComponentModel.DefaultPropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public static DefaultPropertyAttribute Default;
    public string Name { get; }
    public DefaultPropertyAttribute(string name);
    private static DefaultPropertyAttribute();
    [CompilerGeneratedAttribute]
public string get_Name();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class System.ComponentModel.DelegatingTypeDescriptionProvider : TypeDescriptionProvider {
    private Type _type;
    internal TypeDescriptionProvider Provider { get; }
    internal DelegatingTypeDescriptionProvider(Type type);
    internal TypeDescriptionProvider get_Provider();
    public virtual object CreateInstance(IServiceProvider provider, Type objectType, Type[] argTypes, Object[] args);
    public virtual IDictionary GetCache(object instance);
    public virtual string GetFullComponentName(object component);
    public virtual ICustomTypeDescriptor GetExtendedTypeDescriptor(object instance);
    protected internal virtual IExtenderProvider[] GetExtenderProviders(object instance);
    public virtual Type GetReflectionType(Type objectType, object instance);
    public virtual Type GetRuntimeType(Type objectType);
    public virtual ICustomTypeDescriptor GetTypeDescriptor(Type objectType, object instance);
    public virtual bool IsSupportedType(Type type);
}
public class System.ComponentModel.Design.ActiveDesignerEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IDesignerHost <OldDesigner>k__BackingField;
    [CompilerGeneratedAttribute]
private IDesignerHost <NewDesigner>k__BackingField;
    public IDesignerHost OldDesigner { get; }
    public IDesignerHost NewDesigner { get; }
    public ActiveDesignerEventArgs(IDesignerHost oldDesigner, IDesignerHost newDesigner);
    [CompilerGeneratedAttribute]
public IDesignerHost get_OldDesigner();
    [CompilerGeneratedAttribute]
public IDesignerHost get_NewDesigner();
}
public class System.ComponentModel.Design.ActiveDesignerEventHandler : MulticastDelegate {
    public ActiveDesignerEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ActiveDesignerEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ActiveDesignerEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[TypeForwardedFromAttribute("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.ComponentModel.Design.CheckoutException : ExternalException {
    public static CheckoutException Canceled;
    public CheckoutException(string message);
    public CheckoutException(string message, int errorCode);
    protected CheckoutException(SerializationInfo info, StreamingContext context);
    public CheckoutException(string message, Exception innerException);
    private static CheckoutException();
}
public class System.ComponentModel.Design.CommandID : object {
    [CompilerGeneratedAttribute]
private int <ID>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <Guid>k__BackingField;
    public int ID { get; }
    public Guid Guid { get; }
    public CommandID(Guid menuGroup, int commandID);
    [CompilerGeneratedAttribute]
public virtual int get_ID();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
public virtual Guid get_Guid();
    public virtual string ToString();
}
public class System.ComponentModel.Design.ComponentChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <Component>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberDescriptor <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private object <NewValue>k__BackingField;
    [CompilerGeneratedAttribute]
private object <OldValue>k__BackingField;
    public object Component { get; }
    public MemberDescriptor Member { get; }
    public object NewValue { get; }
    public object OldValue { get; }
    public ComponentChangedEventArgs(object component, MemberDescriptor member, object oldValue, object newValue);
    [CompilerGeneratedAttribute]
public object get_Component();
    [CompilerGeneratedAttribute]
public MemberDescriptor get_Member();
    [CompilerGeneratedAttribute]
public object get_NewValue();
    [CompilerGeneratedAttribute]
public object get_OldValue();
}
public class System.ComponentModel.Design.ComponentChangedEventHandler : MulticastDelegate {
    public ComponentChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ComponentChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ComponentChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.ComponentModel.Design.ComponentChangingEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <Component>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberDescriptor <Member>k__BackingField;
    public object Component { get; }
    public MemberDescriptor Member { get; }
    public ComponentChangingEventArgs(object component, MemberDescriptor member);
    [CompilerGeneratedAttribute]
public object get_Component();
    [CompilerGeneratedAttribute]
public MemberDescriptor get_Member();
}
public class System.ComponentModel.Design.ComponentChangingEventHandler : MulticastDelegate {
    public ComponentChangingEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ComponentChangingEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ComponentChangingEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.ComponentModel.Design.ComponentEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IComponent <Component>k__BackingField;
    public IComponent Component { get; }
    public ComponentEventArgs(IComponent component);
    [CompilerGeneratedAttribute]
public virtual IComponent get_Component();
}
public class System.ComponentModel.Design.ComponentEventHandler : MulticastDelegate {
    public ComponentEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ComponentEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ComponentEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.ComponentModel.Design.ComponentRenameEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <Component>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OldName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewName>k__BackingField;
    public object Component { get; }
    public string OldName { get; }
    public string NewName { get; }
    public ComponentRenameEventArgs(object component, string oldName, string newName);
    [CompilerGeneratedAttribute]
public object get_Component();
    [CompilerGeneratedAttribute]
public virtual string get_OldName();
    [CompilerGeneratedAttribute]
public virtual string get_NewName();
}
public class System.ComponentModel.Design.ComponentRenameEventHandler : MulticastDelegate {
    public ComponentRenameEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ComponentRenameEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ComponentRenameEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class System.ComponentModel.Design.DesignerCollection : object {
    private IList _designers;
    public int Count { get; }
    public IDesignerHost Item { get; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public DesignerCollection(IDesignerHost[] designers);
    public DesignerCollection(IList designers);
    public int get_Count();
    public virtual IDesignerHost get_Item(int index);
    public IEnumerator GetEnumerator();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.ComponentModel.Design.DesignerEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private IDesignerHost <Designer>k__BackingField;
    public IDesignerHost Designer { get; }
    public DesignerEventArgs(IDesignerHost host);
    [CompilerGeneratedAttribute]
public IDesignerHost get_Designer();
}
public class System.ComponentModel.Design.DesignerEventHandler : MulticastDelegate {
    public DesignerEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DesignerEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DesignerEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class System.ComponentModel.Design.DesignerOptionService : object {
    private DesignerOptionCollection _options;
    private static Char[] s_slash;
    public DesignerOptionCollection Options { get; }
    private static DesignerOptionService();
    public DesignerOptionCollection get_Options();
    protected DesignerOptionCollection CreateOptionCollection(DesignerOptionCollection parent, string name, object value);
    private PropertyDescriptor GetOptionProperty(string pageName, string valueName);
    protected virtual void PopulateOptionCollection(DesignerOptionCollection options);
    protected virtual bool ShowDialog(DesignerOptionCollection options, object optionObject);
    private sealed virtual override object System.ComponentModel.Design.IDesignerOptionService.GetOptionValue(string pageName, string valueName);
    private sealed virtual override void System.ComponentModel.Design.IDesignerOptionService.SetOptionValue(string pageName, string valueName, object value);
}
public abstract class System.ComponentModel.Design.DesignerTransaction : object {
    private bool _suppressedFinalization;
    [CompilerGeneratedAttribute]
private bool <Canceled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Committed>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    public bool Canceled { get; private set; }
    public bool Committed { get; private set; }
    public string Description { get; }
    protected DesignerTransaction(string description);
    [CompilerGeneratedAttribute]
public bool get_Canceled();
    [CompilerGeneratedAttribute]
private void set_Canceled(bool value);
    [CompilerGeneratedAttribute]
public bool get_Committed();
    [CompilerGeneratedAttribute]
private void set_Committed(bool value);
    [CompilerGeneratedAttribute]
public string get_Description();
    public void Cancel();
    public void Commit();
    protected abstract virtual void OnCancel();
    protected abstract virtual void OnCommit();
    protected virtual override void Finalize();
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
}
public class System.ComponentModel.Design.DesignerTransactionCloseEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <TransactionCommitted>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LastTransaction>k__BackingField;
    public bool TransactionCommitted { get; }
    public bool LastTransaction { get; }
    [ObsoleteAttribute("This constructor is obsolete. Use DesignerTransactionCloseEventArgs(bool, bool) instead. https://go.microsoft.com/fwlink/?linkid=14202")]
public DesignerTransactionCloseEventArgs(bool commit);
    public DesignerTransactionCloseEventArgs(bool commit, bool lastTransaction);
    [CompilerGeneratedAttribute]
public bool get_TransactionCommitted();
    [CompilerGeneratedAttribute]
public bool get_LastTransaction();
}
public class System.ComponentModel.Design.DesignerTransactionCloseEventHandler : MulticastDelegate {
    public DesignerTransactionCloseEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DesignerTransactionCloseEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DesignerTransactionCloseEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.ComponentModel.Design.DesignerVerb : MenuCommand {
    public string Description { get; public set; }
    public string Text { get; }
    public DesignerVerb(string text, EventHandler handler);
    public DesignerVerb(string text, EventHandler handler, CommandID startCommandID);
    public string get_Description();
    public void set_Description(string value);
    public string get_Text();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class System.ComponentModel.Design.DesignerVerbCollection : CollectionBase {
    public DesignerVerb Item { get; public set; }
    public DesignerVerbCollection(DesignerVerb[] value);
    public DesignerVerb get_Item(int index);
    public void set_Item(int index, DesignerVerb value);
    public int Add(DesignerVerb value);
    public void AddRange(DesignerVerb[] value);
    public void AddRange(DesignerVerbCollection value);
    public void Insert(int index, DesignerVerb value);
    public int IndexOf(DesignerVerb value);
    public bool Contains(DesignerVerb value);
    public void Remove(DesignerVerb value);
    public void CopyTo(DesignerVerb[] array, int index);
    protected virtual void OnValidate(object value);
}
public class System.ComponentModel.Design.DesigntimeLicenseContext : LicenseContext {
    internal Hashtable _savedLicenseKeys;
    public LicenseUsageMode UsageMode { get; }
    public virtual LicenseUsageMode get_UsageMode();
    public virtual string GetSavedLicenseKey(Type type, Assembly resourceAssembly);
    public virtual void SetSavedLicenseKey(Type type, string key);
}
public class System.ComponentModel.Design.DesigntimeLicenseContextSerializer : object {
    public static void Serialize(Stream o, string cryptoKey, DesigntimeLicenseContext context);
    internal static void Deserialize(Stream o, string cryptoKey, RuntimeLicenseContext context);
}
public enum System.ComponentModel.Design.HelpContextType : Enum {
    public int value__;
    public static HelpContextType Ambient;
    public static HelpContextType Window;
    public static HelpContextType Selection;
    public static HelpContextType ToolWindowSelection;
}
[AttributeUsageAttribute("32767")]
public class System.ComponentModel.Design.HelpKeywordAttribute : Attribute {
    public static HelpKeywordAttribute Default;
    [CompilerGeneratedAttribute]
private string <HelpKeyword>k__BackingField;
    public string HelpKeyword { get; }
    public HelpKeywordAttribute(string keyword);
    public HelpKeywordAttribute(Type t);
    private static HelpKeywordAttribute();
    [CompilerGeneratedAttribute]
public string get_HelpKeyword();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
}
public enum System.ComponentModel.Design.HelpKeywordType : Enum {
    public int value__;
    public static HelpKeywordType F1Keyword;
    public static HelpKeywordType GeneralKeyword;
    public static HelpKeywordType FilterKeyword;
}
public interface System.ComponentModel.Design.IComponentChangeService {
    [CompilerGeneratedAttribute]
public abstract virtual void add_ComponentAdded(ComponentEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ComponentAdded(ComponentEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ComponentAdding(ComponentEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ComponentAdding(ComponentEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ComponentChanged(ComponentChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ComponentChanged(ComponentChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ComponentChanging(ComponentChangingEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ComponentChanging(ComponentChangingEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ComponentRemoved(ComponentEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ComponentRemoved(ComponentEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ComponentRemoving(ComponentEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ComponentRemoving(ComponentEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ComponentRename(ComponentRenameEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ComponentRename(ComponentRenameEventHandler value);
    public abstract virtual void OnComponentChanged(object component, MemberDescriptor member, object oldValue, object newValue);
    public abstract virtual void OnComponentChanging(object component, MemberDescriptor member);
}
public interface System.ComponentModel.Design.IComponentDiscoveryService {
    public abstract virtual ICollection GetComponentTypes(IDesignerHost designerHost, Type baseType);
}
public interface System.ComponentModel.Design.IComponentInitializer {
    public abstract virtual void InitializeExistingComponent(IDictionary defaultValues);
    public abstract virtual void InitializeNewComponent(IDictionary defaultValues);
}
public interface System.ComponentModel.Design.IDesigner {
    public IComponent Component { get; }
    public DesignerVerbCollection Verbs { get; }
    public abstract virtual IComponent get_Component();
    public abstract virtual DesignerVerbCollection get_Verbs();
    public abstract virtual void DoDefaultAction();
    public abstract virtual void Initialize(IComponent component);
}
public interface System.ComponentModel.Design.IDesignerEventService {
    public IDesignerHost ActiveDesigner { get; }
    public DesignerCollection Designers { get; }
    public abstract virtual IDesignerHost get_ActiveDesigner();
    public abstract virtual DesignerCollection get_Designers();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ActiveDesignerChanged(ActiveDesignerEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ActiveDesignerChanged(ActiveDesignerEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DesignerCreated(DesignerEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DesignerCreated(DesignerEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_DesignerDisposed(DesignerEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_DesignerDisposed(DesignerEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SelectionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SelectionChanged(EventHandler value);
}
public interface System.ComponentModel.Design.IDesignerFilter {
    public abstract virtual void PostFilterAttributes(IDictionary attributes);
    public abstract virtual void PostFilterEvents(IDictionary events);
    public abstract virtual void PostFilterProperties(IDictionary properties);
    public abstract virtual void PreFilterAttributes(IDictionary attributes);
    public abstract virtual void PreFilterEvents(IDictionary events);
    public abstract virtual void PreFilterProperties(IDictionary properties);
}
public interface System.ComponentModel.Design.IDesignerHost {
    public bool Loading { get; }
    public bool InTransaction { get; }
    public IContainer Container { get; }
    public IComponent RootComponent { get; }
    public string RootComponentClassName { get; }
    public string TransactionDescription { get; }
    public abstract virtual bool get_Loading();
    public abstract virtual bool get_InTransaction();
    public abstract virtual IContainer get_Container();
    public abstract virtual IComponent get_RootComponent();
    public abstract virtual string get_RootComponentClassName();
    public abstract virtual string get_TransactionDescription();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Activated(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Activated(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_Deactivated(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Deactivated(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_LoadComplete(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_LoadComplete(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TransactionClosed(DesignerTransactionCloseEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TransactionClosed(DesignerTransactionCloseEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TransactionClosing(DesignerTransactionCloseEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TransactionClosing(DesignerTransactionCloseEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TransactionOpened(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TransactionOpened(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_TransactionOpening(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_TransactionOpening(EventHandler value);
    public abstract virtual void Activate();
    public abstract virtual IComponent CreateComponent(Type componentClass);
    public abstract virtual IComponent CreateComponent(Type componentClass, string name);
    public abstract virtual DesignerTransaction CreateTransaction();
    public abstract virtual DesignerTransaction CreateTransaction(string description);
    public abstract virtual void DestroyComponent(IComponent component);
    public abstract virtual IDesigner GetDesigner(IComponent component);
    public abstract virtual Type GetType(string typeName);
}
public interface System.ComponentModel.Design.IDesignerHostTransactionState {
    public bool IsClosingTransaction { get; }
    public abstract virtual bool get_IsClosingTransaction();
}
public interface System.ComponentModel.Design.IDesignerOptionService {
    public abstract virtual object GetOptionValue(string pageName, string valueName);
    public abstract virtual void SetOptionValue(string pageName, string valueName, object value);
}
public interface System.ComponentModel.Design.IDictionaryService {
    public abstract virtual object GetKey(object value);
    public abstract virtual object GetValue(object key);
    public abstract virtual void SetValue(object key, object value);
}
public interface System.ComponentModel.Design.IEventBindingService {
    public abstract virtual string CreateUniqueMethodName(IComponent component, EventDescriptor e);
    public abstract virtual ICollection GetCompatibleMethods(EventDescriptor e);
    public abstract virtual EventDescriptor GetEvent(PropertyDescriptor property);
    public abstract virtual PropertyDescriptorCollection GetEventProperties(EventDescriptorCollection events);
    public abstract virtual PropertyDescriptor GetEventProperty(EventDescriptor e);
    public abstract virtual bool ShowCode();
    public abstract virtual bool ShowCode(int lineNumber);
    public abstract virtual bool ShowCode(IComponent component, EventDescriptor e);
}
public interface System.ComponentModel.Design.IExtenderListService {
    public abstract virtual IExtenderProvider[] GetExtenderProviders();
}
public interface System.ComponentModel.Design.IExtenderProviderService {
    public abstract virtual void AddExtenderProvider(IExtenderProvider provider);
    public abstract virtual void RemoveExtenderProvider(IExtenderProvider provider);
}
public interface System.ComponentModel.Design.IHelpService {
    public abstract virtual void AddContextAttribute(string name, string value, HelpKeywordType keywordType);
    public abstract virtual void ClearContextAttributes();
    public abstract virtual IHelpService CreateLocalContext(HelpContextType contextType);
    public abstract virtual void RemoveContextAttribute(string name, string value);
    public abstract virtual void RemoveLocalContext(IHelpService localContext);
    public abstract virtual void ShowHelpFromKeyword(string helpKeyword);
    public abstract virtual void ShowHelpFromUrl(string helpUrl);
}
public interface System.ComponentModel.Design.IInheritanceService {
    public abstract virtual void AddInheritedComponents(IComponent component, IContainer container);
    public abstract virtual InheritanceAttribute GetInheritanceAttribute(IComponent component);
}
public interface System.ComponentModel.Design.IMenuCommandService {
    public DesignerVerbCollection Verbs { get; }
    public abstract virtual DesignerVerbCollection get_Verbs();
    public abstract virtual void AddCommand(MenuCommand command);
    public abstract virtual void AddVerb(DesignerVerb verb);
    public abstract virtual MenuCommand FindCommand(CommandID commandID);
    public abstract virtual bool GlobalInvoke(CommandID commandID);
    public abstract virtual void RemoveCommand(MenuCommand command);
    public abstract virtual void RemoveVerb(DesignerVerb verb);
    public abstract virtual void ShowContextMenu(CommandID menuID, int x, int y);
}
public interface System.ComponentModel.Design.IReferenceService {
    public abstract virtual IComponent GetComponent(object reference);
    public abstract virtual object GetReference(string name);
    public abstract virtual string GetName(object reference);
    public abstract virtual Object[] GetReferences();
    public abstract virtual Object[] GetReferences(Type baseType);
}
public interface System.ComponentModel.Design.IResourceService {
    public abstract virtual IResourceReader GetResourceReader(CultureInfo info);
    public abstract virtual IResourceWriter GetResourceWriter(CultureInfo info);
}
public interface System.ComponentModel.Design.IRootDesigner {
    public ViewTechnology[] SupportedTechnologies { get; }
    public abstract virtual ViewTechnology[] get_SupportedTechnologies();
    public abstract virtual object GetView(ViewTechnology technology);
}
public interface System.ComponentModel.Design.ISelectionService {
    public object PrimarySelection { get; }
    public int SelectionCount { get; }
    public abstract virtual object get_PrimarySelection();
    public abstract virtual int get_SelectionCount();
    [CompilerGeneratedAttribute]
public abstract virtual void add_SelectionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SelectionChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SelectionChanging(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SelectionChanging(EventHandler value);
    public abstract virtual bool GetComponentSelected(object component);
    public abstract virtual ICollection GetSelectedComponents();
    public abstract virtual void SetSelectedComponents(ICollection components);
    public abstract virtual void SetSelectedComponents(ICollection components, SelectionTypes selectionType);
}
public interface System.ComponentModel.Design.IServiceContainer {
    public abstract virtual void AddService(Type serviceType, object serviceInstance);
    public abstract virtual void AddService(Type serviceType, object serviceInstance, bool promote);
    public abstract virtual void AddService(Type serviceType, ServiceCreatorCallback callback);
    public abstract virtual void AddService(Type serviceType, ServiceCreatorCallback callback, bool promote);
    public abstract virtual void RemoveService(Type serviceType);
    public abstract virtual void RemoveService(Type serviceType, bool promote);
}
public interface System.ComponentModel.Design.ITreeDesigner {
    public ICollection Children { get; }
    public IDesigner Parent { get; }
    public abstract virtual ICollection get_Children();
    public abstract virtual IDesigner get_Parent();
}
public interface System.ComponentModel.Design.ITypeDescriptorFilterService {
    public abstract virtual bool FilterAttributes(IComponent component, IDictionary attributes);
    public abstract virtual bool FilterEvents(IComponent component, IDictionary events);
    public abstract virtual bool FilterProperties(IComponent component, IDictionary properties);
}
public interface System.ComponentModel.Design.ITypeDiscoveryService {
    public abstract virtual ICollection GetTypes(Type baseType, bool excludeGlobalTypes);
}
public interface System.ComponentModel.Design.ITypeResolutionService {
    public abstract virtual Assembly GetAssembly(AssemblyName name);
    public abstract virtual Assembly GetAssembly(AssemblyName name, bool throwOnError);
    public abstract virtual Type GetType(string name);
    public abstract virtual Type GetType(string name, bool throwOnError);
    public abstract virtual Type GetType(string name, bool throwOnError, bool ignoreCase);
    public abstract virtual void ReferenceAssembly(AssemblyName name);
    public abstract virtual string GetPathOfAssembly(AssemblyName name);
}
public class System.ComponentModel.Design.MenuCommand : object {
    private EventHandler _execHandler;
    private int _status;
    private IDictionary _properties;
    [CompilerGeneratedAttribute]
private EventHandler CommandChanged;
    [CompilerGeneratedAttribute]
private CommandID <CommandID>k__BackingField;
    public bool Checked { get; public set; }
    public bool Enabled { get; public set; }
    public IDictionary Properties { get; }
    public bool Supported { get; public set; }
    public bool Visible { get; public set; }
    public CommandID CommandID { get; }
    public int OleStatus { get; }
    public MenuCommand(EventHandler handler, CommandID command);
    public virtual bool get_Checked();
    public virtual void set_Checked(bool value);
    public virtual bool get_Enabled();
    public virtual void set_Enabled(bool value);
    private void SetStatus(int mask, bool value);
    public virtual IDictionary get_Properties();
    public virtual bool get_Supported();
    public virtual void set_Supported(bool value);
    public virtual bool get_Visible();
    public virtual void set_Visible(bool value);
    [CompilerGeneratedAttribute]
public void add_CommandChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CommandChanged(EventHandler value);
    [CompilerGeneratedAttribute]
public virtual CommandID get_CommandID();
    public virtual void Invoke();
    public virtual void Invoke(object arg);
    public virtual int get_OleStatus();
    protected virtual void OnCommandChanged(EventArgs e);
    public virtual string ToString();
}
internal class System.ComponentModel.Design.RuntimeLicenseContext : LicenseContext {
    private static TraceSwitch s_runtimeLicenseContextSwitch;
    internal Hashtable _savedLicenseKeys;
    private static RuntimeLicenseContext();
    private string GetLocalPath(string fileName);
    public virtual string GetSavedLicenseKey(Type type, Assembly resourceAssembly);
    private Stream CaseInsensitiveManifestResourceStreamLookup(Assembly satellite, string name);
}
[FlagsAttribute]
public enum System.ComponentModel.Design.SelectionTypes : Enum {
    public int value__;
    public static SelectionTypes Auto;
    [ObsoleteAttribute("This value has been deprecated. Use SelectionTypes.Auto instead. https://go.microsoft.com/fwlink/?linkid=14202")]
public static SelectionTypes Normal;
    public static SelectionTypes Replace;
    [ObsoleteAttribute("This value has been deprecated. It is no longer supported. https://go.microsoft.com/fwlink/?linkid=14202")]
public static SelectionTypes MouseDown;
    [ObsoleteAttribute("This value has been deprecated. It is no longer supported. https://go.microsoft.com/fwlink/?linkid=14202")]
public static SelectionTypes MouseUp;
    [ObsoleteAttribute("This value has been deprecated. Use SelectionTypes.Primary instead. https://go.microsoft.com/fwlink/?linkid=14202")]
public static SelectionTypes Click;
    public static SelectionTypes Primary;
    public static SelectionTypes Toggle;
    public static SelectionTypes Add;
    public static SelectionTypes Remove;
    [ObsoleteAttribute("This value has been deprecated. Use Enum class methods to determine valid values, or use a type converter. https://go.microsoft.com/fwlink/?linkid=14202")]
public static SelectionTypes Valid;
}
public abstract class System.ComponentModel.Design.Serialization.ComponentSerializationService : object {
    public abstract virtual SerializationStore CreateStore();
    public abstract virtual SerializationStore LoadStore(Stream stream);
    public abstract virtual void Serialize(SerializationStore store, object value);
    public abstract virtual void SerializeAbsolute(SerializationStore store, object value);
    public abstract virtual void SerializeMember(SerializationStore store, object owningObject, MemberDescriptor member);
    public abstract virtual void SerializeMemberAbsolute(SerializationStore store, object owningObject, MemberDescriptor member);
    public abstract virtual ICollection Deserialize(SerializationStore store);
    public abstract virtual ICollection Deserialize(SerializationStore store, IContainer container);
    public abstract virtual void DeserializeTo(SerializationStore store, IContainer container, bool validateRecycledTypes, bool applyDefaults);
    public void DeserializeTo(SerializationStore store, IContainer container);
    public void DeserializeTo(SerializationStore store, IContainer container, bool validateRecycledTypes);
}
[DefaultMemberAttribute("Item")]
public class System.ComponentModel.Design.Serialization.ContextStack : object {
    private ArrayList _contextStack;
    public object Current { get; }
    public object Item { get; }
    public object Item { get; }
    public object get_Current();
    public object get_Item(int level);
    public object get_Item(Type type);
    public void Append(object context);
    public object Pop();
    public void Push(object context);
}
[AttributeUsageAttribute("4")]
public class System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <ProviderTypeName>k__BackingField;
    public string ProviderTypeName { get; }
    public DefaultSerializationProviderAttribute(Type providerType);
    public DefaultSerializationProviderAttribute(string providerTypeName);
    [CompilerGeneratedAttribute]
public string get_ProviderTypeName();
}
public abstract class System.ComponentModel.Design.Serialization.DesignerLoader : object {
    public bool Loading { get; }
    public virtual bool get_Loading();
    public abstract virtual void BeginLoad(IDesignerLoaderHost host);
    public abstract virtual void Dispose();
    public virtual void Flush();
}
[AttributeUsageAttribute("1028")]
public class System.ComponentModel.Design.Serialization.DesignerSerializerAttribute : Attribute {
    private string _typeId;
    [CompilerGeneratedAttribute]
private string <SerializerTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SerializerBaseTypeName>k__BackingField;
    public string SerializerTypeName { get; }
    public string SerializerBaseTypeName { get; }
    public object TypeId { get; }
    public DesignerSerializerAttribute(Type serializerType, Type baseSerializerType);
    public DesignerSerializerAttribute(string serializerTypeName, Type baseSerializerType);
    public DesignerSerializerAttribute(string serializerTypeName, string baseSerializerTypeName);
    [CompilerGeneratedAttribute]
public string get_SerializerTypeName();
    [CompilerGeneratedAttribute]
public string get_SerializerBaseTypeName();
    public virtual object get_TypeId();
}
public interface System.ComponentModel.Design.Serialization.IDesignerLoaderHost {
    public abstract virtual void EndLoad(string baseClassName, bool successful, ICollection errorCollection);
    public abstract virtual void Reload();
}
public interface System.ComponentModel.Design.Serialization.IDesignerLoaderHost2 {
    public bool IgnoreErrorsDuringReload { get; public set; }
    public bool CanReloadWithErrors { get; public set; }
    public abstract virtual bool get_IgnoreErrorsDuringReload();
    public abstract virtual void set_IgnoreErrorsDuringReload(bool value);
    public abstract virtual bool get_CanReloadWithErrors();
    public abstract virtual void set_CanReloadWithErrors(bool value);
}
public interface System.ComponentModel.Design.Serialization.IDesignerLoaderService {
    public abstract virtual void AddLoadDependency();
    public abstract virtual void DependentLoadComplete(bool successful, ICollection errorCollection);
    public abstract virtual bool Reload();
}
public interface System.ComponentModel.Design.Serialization.IDesignerSerializationManager {
    public ContextStack Context { get; }
    public PropertyDescriptorCollection Properties { get; }
    public abstract virtual ContextStack get_Context();
    public abstract virtual PropertyDescriptorCollection get_Properties();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ResolveName(ResolveNameEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ResolveName(ResolveNameEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_SerializationComplete(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_SerializationComplete(EventHandler value);
    public abstract virtual void AddSerializationProvider(IDesignerSerializationProvider provider);
    public abstract virtual object CreateInstance(Type type, ICollection arguments, string name, bool addToContainer);
    public abstract virtual object GetInstance(string name);
    public abstract virtual string GetName(object value);
    public abstract virtual object GetSerializer(Type objectType, Type serializerType);
    public abstract virtual Type GetType(string typeName);
    public abstract virtual void RemoveSerializationProvider(IDesignerSerializationProvider provider);
    public abstract virtual void ReportError(object errorInformation);
    public abstract virtual void SetName(object instance, string name);
}
public interface System.ComponentModel.Design.Serialization.IDesignerSerializationProvider {
    public abstract virtual object GetSerializer(IDesignerSerializationManager manager, object currentSerializer, Type objectType, Type serializerType);
}
public interface System.ComponentModel.Design.Serialization.IDesignerSerializationService {
    public abstract virtual ICollection Deserialize(object serializationData);
    public abstract virtual object Serialize(ICollection objects);
}
public interface System.ComponentModel.Design.Serialization.INameCreationService {
    public abstract virtual string CreateName(IContainer container, Type dataType);
    public abstract virtual bool IsValidName(string name);
    public abstract virtual void ValidateName(string name);
}
public class System.ComponentModel.Design.Serialization.InstanceDescriptor : object {
    [CompilerGeneratedAttribute]
private ICollection <Arguments>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsComplete>k__BackingField;
    [CompilerGeneratedAttribute]
private MemberInfo <MemberInfo>k__BackingField;
    public ICollection Arguments { get; }
    public bool IsComplete { get; }
    public MemberInfo MemberInfo { get; }
    public InstanceDescriptor(MemberInfo member, ICollection arguments);
    public InstanceDescriptor(MemberInfo member, ICollection arguments, bool isComplete);
    [CompilerGeneratedAttribute]
public ICollection get_Arguments();
    [CompilerGeneratedAttribute]
public bool get_IsComplete();
    [CompilerGeneratedAttribute]
public MemberInfo get_MemberInfo();
    public object Invoke();
}
[IsReadOnlyAttribute]
public class System.ComponentModel.Design.Serialization.MemberRelationship : ValueType {
    public static MemberRelationship Empty;
    [CompilerGeneratedAttribute]
private MemberDescriptor <Member>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Owner>k__BackingField;
    public bool IsEmpty { get; }
    public MemberDescriptor Member { get; }
    public object Owner { get; }
    public MemberRelationship(object owner, MemberDescriptor member);
    private static MemberRelationship();
    public bool get_IsEmpty();
    [CompilerGeneratedAttribute]
public MemberDescriptor get_Member();
    [CompilerGeneratedAttribute]
public object get_Owner();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(MemberRelationship left, MemberRelationship right);
    public static bool op_Inequality(MemberRelationship left, MemberRelationship right);
}
[DefaultMemberAttribute("Item")]
public abstract class System.ComponentModel.Design.Serialization.MemberRelationshipService : object {
    private Dictionary`2<RelationshipEntry, RelationshipEntry> _relationships;
    public MemberRelationship Item { get; public set; }
    public MemberRelationship Item { get; public set; }
    public MemberRelationship get_Item(MemberRelationship source);
    public void set_Item(MemberRelationship source, MemberRelationship value);
    public MemberRelationship get_Item(object sourceOwner, MemberDescriptor sourceMember);
    public void set_Item(object sourceOwner, MemberDescriptor sourceMember, MemberRelationship value);
    protected virtual MemberRelationship GetRelationship(MemberRelationship source);
    protected virtual void SetRelationship(MemberRelationship source, MemberRelationship relationship);
    public abstract virtual bool SupportsRelationship(MemberRelationship source, MemberRelationship relationship);
}
public class System.ComponentModel.Design.Serialization.ResolveNameEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private object <Value>k__BackingField;
    public string Name { get; }
    public object Value { get; public set; }
    public ResolveNameEventArgs(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public object get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(object value);
}
public class System.ComponentModel.Design.Serialization.ResolveNameEventHandler : MulticastDelegate {
    public ResolveNameEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ResolveNameEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ResolveNameEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("1028")]
[ObsoleteAttribute("This attribute has been deprecated. Use DesignerSerializerAttribute instead. For example, to specify a root designer for CodeDom, use DesignerSerializerAttribute(...,typeof(TypeCodeDomSerializer)). https://go.microsoft.com/fwlink/?linkid=14202")]
public class System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute : Attribute {
    private string _typeId;
    [CompilerGeneratedAttribute]
private bool <Reloadable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SerializerTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SerializerBaseTypeName>k__BackingField;
    public bool Reloadable { get; }
    public string SerializerTypeName { get; }
    public string SerializerBaseTypeName { get; }
    public object TypeId { get; }
    public RootDesignerSerializerAttribute(Type serializerType, Type baseSerializerType, bool reloadable);
    public RootDesignerSerializerAttribute(string serializerTypeName, Type baseSerializerType, bool reloadable);
    public RootDesignerSerializerAttribute(string serializerTypeName, string baseSerializerTypeName, bool reloadable);
    [CompilerGeneratedAttribute]
public bool get_Reloadable();
    [CompilerGeneratedAttribute]
public string get_SerializerTypeName();
    [CompilerGeneratedAttribute]
public string get_SerializerBaseTypeName();
    public virtual object get_TypeId();
}
public abstract class System.ComponentModel.Design.Serialization.SerializationStore : object {
    public ICollection Errors { get; }
    public abstract virtual ICollection get_Errors();
    public abstract virtual void Close();
    public abstract virtual void Save(Stream stream);
    private sealed virtual override void System.IDisposable.Dispose();
    protected virtual void Dispose(bool disposing);
}
public class System.ComponentModel.Design.ServiceContainer : object {
    private ServiceCollection`1<object> _services;
    private IServiceProvider _parentProvider;
    private static Type[] s_defaultServices;
    private static TraceSwitch s_traceSwitch;
    private IServiceContainer Container { get; }
    protected Type[] DefaultServices { get; }
    private ServiceCollection`1<object> Services { get; }
    public ServiceContainer(IServiceProvider parentProvider);
    private static ServiceContainer();
    private IServiceContainer get_Container();
    protected virtual Type[] get_DefaultServices();
    private ServiceCollection`1<object> get_Services();
    public sealed virtual void AddService(Type serviceType, object serviceInstance);
    public virtual void AddService(Type serviceType, object serviceInstance, bool promote);
    public sealed virtual void AddService(Type serviceType, ServiceCreatorCallback callback);
    public virtual void AddService(Type serviceType, ServiceCreatorCallback callback, bool promote);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual object GetService(Type serviceType);
    public sealed virtual void RemoveService(Type serviceType);
    public virtual void RemoveService(Type serviceType, bool promote);
}
public class System.ComponentModel.Design.ServiceCreatorCallback : MulticastDelegate {
    public ServiceCreatorCallback(object object, IntPtr method);
    public virtual object Invoke(IServiceContainer container, Type serviceType);
    public virtual IAsyncResult BeginInvoke(IServiceContainer container, Type serviceType, AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public class System.ComponentModel.Design.StandardCommands : object {
    private static Guid s_standardCommandSet;
    private static Guid s_ndpCommandSet;
    public static CommandID AlignBottom;
    public static CommandID AlignHorizontalCenters;
    public static CommandID AlignLeft;
    public static CommandID AlignRight;
    public static CommandID AlignToGrid;
    public static CommandID AlignTop;
    public static CommandID AlignVerticalCenters;
    public static CommandID ArrangeBottom;
    public static CommandID ArrangeRight;
    public static CommandID BringForward;
    public static CommandID BringToFront;
    public static CommandID CenterHorizontally;
    public static CommandID CenterVertically;
    public static CommandID ViewCode;
    public static CommandID DocumentOutline;
    public static CommandID Copy;
    public static CommandID Cut;
    public static CommandID Delete;
    public static CommandID Group;
    public static CommandID HorizSpaceConcatenate;
    public static CommandID HorizSpaceDecrease;
    public static CommandID HorizSpaceIncrease;
    public static CommandID HorizSpaceMakeEqual;
    public static CommandID Paste;
    public static CommandID Properties;
    public static CommandID Redo;
    public static CommandID MultiLevelRedo;
    public static CommandID SelectAll;
    public static CommandID SendBackward;
    public static CommandID SendToBack;
    public static CommandID SizeToControl;
    public static CommandID SizeToControlHeight;
    public static CommandID SizeToControlWidth;
    public static CommandID SizeToFit;
    public static CommandID SizeToGrid;
    public static CommandID SnapToGrid;
    public static CommandID TabOrder;
    public static CommandID Undo;
    public static CommandID MultiLevelUndo;
    public static CommandID Ungroup;
    public static CommandID VertSpaceConcatenate;
    public static CommandID VertSpaceDecrease;
    public static CommandID VertSpaceIncrease;
    public static CommandID VertSpaceMakeEqual;
    public static CommandID ShowGrid;
    public static CommandID ViewGrid;
    public static CommandID Replace;
    public static CommandID PropertiesWindow;
    public static CommandID LockControls;
    public static CommandID F1Help;
    public static CommandID ArrangeIcons;
    public static CommandID LineupIcons;
    public static CommandID ShowLargeIcons;
    public static CommandID VerbFirst;
    public static CommandID VerbLast;
    private static StandardCommands();
}
public class System.ComponentModel.Design.StandardToolWindows : object {
    public static Guid ObjectBrowser;
    public static Guid OutputWindow;
    public static Guid ProjectExplorer;
    public static Guid PropertyBrowser;
    public static Guid RelatedLinks;
    public static Guid ServerExplorer;
    public static Guid TaskList;
    public static Guid Toolbox;
    private static StandardToolWindows();
}
public abstract class System.ComponentModel.Design.TypeDescriptionProviderService : object {
    public abstract virtual TypeDescriptionProvider GetProvider(object instance);
    public abstract virtual TypeDescriptionProvider GetProvider(Type type);
}
public enum System.ComponentModel.Design.ViewTechnology : Enum {
    public int value__;
    [ObsoleteAttribute("This value has been deprecated. Use ViewTechnology.Default instead. https://go.microsoft.com/fwlink/?linkid=14202")]
public static ViewTechnology Passthrough;
    [ObsoleteAttribute("This value has been deprecated. Use ViewTechnology.Default instead. https://go.microsoft.com/fwlink/?linkid=14202")]
public static ViewTechnology WindowsForms;
    public static ViewTechnology Default;
}
[AttributeUsageAttribute("1028")]
public class System.ComponentModel.DesignerAttribute : Attribute {
    private string _typeId;
    [CompilerGeneratedAttribute]
private string <DesignerBaseTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DesignerTypeName>k__BackingField;
    public string DesignerBaseTypeName { get; }
    public string DesignerTypeName { get; }
    public object TypeId { get; }
    public DesignerAttribute(string designerTypeName);
    public DesignerAttribute(Type designerType);
    public DesignerAttribute(string designerTypeName, string designerBaseTypeName);
    public DesignerAttribute(string designerTypeName, Type designerBaseType);
    public DesignerAttribute(Type designerType, Type designerBaseType);
    [CompilerGeneratedAttribute]
public string get_DesignerBaseTypeName();
    [CompilerGeneratedAttribute]
public string get_DesignerTypeName();
    public virtual object get_TypeId();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[AttributeUsageAttribute("1028")]
public class System.ComponentModel.DesignTimeVisibleAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <Visible>k__BackingField;
    public static DesignTimeVisibleAttribute Yes;
    public static DesignTimeVisibleAttribute No;
    public static DesignTimeVisibleAttribute Default;
    public bool Visible { get; }
    public DesignTimeVisibleAttribute(bool visible);
    private static DesignTimeVisibleAttribute();
    [CompilerGeneratedAttribute]
public bool get_Visible();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
}
public class System.ComponentModel.DoubleConverter : BaseNumberConverter {
    internal bool AllowHex { get; }
    internal Type TargetType { get; }
    internal virtual bool get_AllowHex();
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
[AttributeUsageAttribute("32767")]
public class System.ComponentModel.EditorAttribute : Attribute {
    private string _typeId;
    [CompilerGeneratedAttribute]
private string <EditorBaseTypeName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <EditorTypeName>k__BackingField;
    public string EditorBaseTypeName { get; }
    public string EditorTypeName { get; }
    public object TypeId { get; }
    public EditorAttribute(string typeName, string baseTypeName);
    public EditorAttribute(string typeName, Type baseType);
    public EditorAttribute(Type type, Type baseType);
    [CompilerGeneratedAttribute]
public string get_EditorBaseTypeName();
    [CompilerGeneratedAttribute]
public string get_EditorTypeName();
    public virtual object get_TypeId();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.ComponentModel.EnumConverter : TypeConverter {
    private static Char[] s_separators;
    [CompilerGeneratedAttribute]
private Type <EnumType>k__BackingField;
    [CompilerGeneratedAttribute]
private StandardValuesCollection <Values>k__BackingField;
    protected Type EnumType { get; }
    protected StandardValuesCollection Values { get; protected set; }
    protected IComparer Comparer { get; }
    public EnumConverter(Type type);
    private static EnumConverter();
    [CompilerGeneratedAttribute]
protected Type get_EnumType();
    [CompilerGeneratedAttribute]
protected StandardValuesCollection get_Values();
    [CompilerGeneratedAttribute]
protected void set_Values(StandardValuesCollection value);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    protected virtual IComparer get_Comparer();
    private static long GetEnumValue(bool isUnderlyingTypeUInt64, Enum enumVal, CultureInfo culture);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool IsValid(ITypeDescriptorContext context, object value);
}
public abstract class System.ComponentModel.EventDescriptor : MemberDescriptor {
    public Type ComponentType { get; }
    public Type EventType { get; }
    public bool IsMulticast { get; }
    protected EventDescriptor(string name, Attribute[] attrs);
    protected EventDescriptor(MemberDescriptor descr);
    protected EventDescriptor(MemberDescriptor descr, Attribute[] attrs);
    public abstract virtual Type get_ComponentType();
    public abstract virtual Type get_EventType();
    public abstract virtual bool get_IsMulticast();
    public abstract virtual void AddEventHandler(object component, Delegate value);
    public abstract virtual void RemoveEventHandler(object component, Delegate value);
}
[DefaultMemberAttribute("Item")]
public class System.ComponentModel.EventDescriptorCollection : object {
    private EventDescriptor[] _events;
    private String[] _namedSort;
    private IComparer _comparer;
    private bool _eventsOwned;
    private bool _needSort;
    private bool _readOnly;
    public static EventDescriptorCollection Empty;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; private set; }
    public EventDescriptor Item { get; }
    public EventDescriptor Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private int System.Collections.ICollection.Count { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    public EventDescriptorCollection(EventDescriptor[] events);
    public EventDescriptorCollection(EventDescriptor[] events, bool readOnly);
    private EventDescriptorCollection(EventDescriptor[] events, int eventCount, String[] namedSort, IComparer comparer);
    private static EventDescriptorCollection();
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public virtual EventDescriptor get_Item(int index);
    public virtual EventDescriptor get_Item(string name);
    public int Add(EventDescriptor value);
    public void Clear();
    public bool Contains(EventDescriptor value);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private void EnsureEventsOwned();
    private void EnsureSize(int sizeNeeded);
    public virtual EventDescriptor Find(string name, bool ignoreCase);
    public int IndexOf(EventDescriptor value);
    public void Insert(int index, EventDescriptor value);
    public void Remove(EventDescriptor value);
    public void RemoveAt(int index);
    public IEnumerator GetEnumerator();
    public virtual EventDescriptorCollection Sort();
    public virtual EventDescriptorCollection Sort(String[] names);
    public virtual EventDescriptorCollection Sort(String[] names, IComparer comparer);
    public virtual EventDescriptorCollection Sort(IComparer comparer);
    protected void InternalSort(String[] names);
    protected void InternalSort(IComparer sorter);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
}
public class System.ComponentModel.ExpandableObjectConverter : TypeConverter {
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
internal class System.ComponentModel.ExtendedPropertyDescriptor : PropertyDescriptor {
    private ReflectPropertyDescriptor _extenderInfo;
    private IExtenderProvider _provider;
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public string DisplayName { get; }
    public ExtendedPropertyDescriptor(ReflectPropertyDescriptor extenderInfo, Type receiverType, IExtenderProvider provider, Attribute[] attributes);
    public ExtendedPropertyDescriptor(PropertyDescriptor extender, Attribute[] attributes);
    public virtual bool CanResetValue(object comp);
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual string get_DisplayName();
    public virtual object GetValue(object comp);
    public virtual void ResetValue(object comp);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object comp);
}
[AttributeUsageAttribute("32767")]
public class System.ComponentModel.ExtenderProvidedPropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private PropertyDescriptor <ExtenderProperty>k__BackingField;
    [CompilerGeneratedAttribute]
private IExtenderProvider <Provider>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ReceiverType>k__BackingField;
    public PropertyDescriptor ExtenderProperty { get; private set; }
    public IExtenderProvider Provider { get; private set; }
    public Type ReceiverType { get; private set; }
    internal static ExtenderProvidedPropertyAttribute Create(PropertyDescriptor extenderProperty, Type receiverType, IExtenderProvider provider);
    [CompilerGeneratedAttribute]
public PropertyDescriptor get_ExtenderProperty();
    [CompilerGeneratedAttribute]
private void set_ExtenderProperty(PropertyDescriptor value);
    [CompilerGeneratedAttribute]
public IExtenderProvider get_Provider();
    [CompilerGeneratedAttribute]
private void set_Provider(IExtenderProvider value);
    [CompilerGeneratedAttribute]
public Type get_ReceiverType();
    [CompilerGeneratedAttribute]
private void set_ReceiverType(Type value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
}
public class System.ComponentModel.GuidConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.ComponentModel.HandledEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private bool <Handled>k__BackingField;
    public bool Handled { get; public set; }
    public HandledEventArgs(bool defaultHandledValue);
    [CompilerGeneratedAttribute]
public bool get_Handled();
    [CompilerGeneratedAttribute]
public void set_Handled(bool value);
}
public class System.ComponentModel.HandledEventHandler : MulticastDelegate {
    public HandledEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, HandledEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, HandledEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public interface System.ComponentModel.IBindingList {
    public bool AllowNew { get; }
    public bool AllowEdit { get; }
    public bool AllowRemove { get; }
    public bool SupportsChangeNotification { get; }
    public bool SupportsSearching { get; }
    public bool SupportsSorting { get; }
    public bool IsSorted { get; }
    public PropertyDescriptor SortProperty { get; }
    public ListSortDirection SortDirection { get; }
    public abstract virtual bool get_AllowNew();
    public abstract virtual object AddNew();
    public abstract virtual bool get_AllowEdit();
    public abstract virtual bool get_AllowRemove();
    public abstract virtual bool get_SupportsChangeNotification();
    public abstract virtual bool get_SupportsSearching();
    public abstract virtual bool get_SupportsSorting();
    public abstract virtual bool get_IsSorted();
    public abstract virtual PropertyDescriptor get_SortProperty();
    public abstract virtual ListSortDirection get_SortDirection();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ListChanged(ListChangedEventHandler value);
    public abstract virtual void AddIndex(PropertyDescriptor property);
    public abstract virtual void ApplySort(PropertyDescriptor property, ListSortDirection direction);
    public abstract virtual int Find(PropertyDescriptor property, object key);
    public abstract virtual void RemoveIndex(PropertyDescriptor property);
    public abstract virtual void RemoveSort();
}
public interface System.ComponentModel.IBindingListView {
    public string Filter { get; public set; }
    public ListSortDescriptionCollection SortDescriptions { get; }
    public bool SupportsAdvancedSorting { get; }
    public bool SupportsFiltering { get; }
    public abstract virtual void ApplySort(ListSortDescriptionCollection sorts);
    public abstract virtual string get_Filter();
    public abstract virtual void set_Filter(string value);
    public abstract virtual ListSortDescriptionCollection get_SortDescriptions();
    public abstract virtual void RemoveFilter();
    public abstract virtual bool get_SupportsAdvancedSorting();
    public abstract virtual bool get_SupportsFiltering();
}
public interface System.ComponentModel.ICancelAddNew {
    public abstract virtual void CancelNew(int itemIndex);
    public abstract virtual void EndNew(int itemIndex);
}
[ObsoleteAttribute("This interface has been deprecated. Add a TypeDescriptionProvider to handle type TypeDescriptor.ComObjectType instead. https://go.microsoft.com/fwlink/?linkid=14202")]
public interface System.ComponentModel.IComNativeDescriptorHandler {
    public abstract virtual AttributeCollection GetAttributes(object component);
    public abstract virtual string GetClassName(object component);
    public abstract virtual TypeConverter GetConverter(object component);
    public abstract virtual EventDescriptor GetDefaultEvent(object component);
    public abstract virtual PropertyDescriptor GetDefaultProperty(object component);
    public abstract virtual object GetEditor(object component, Type baseEditorType);
    public abstract virtual string GetName(object component);
    public abstract virtual EventDescriptorCollection GetEvents(object component);
    public abstract virtual EventDescriptorCollection GetEvents(object component, Attribute[] attributes);
    public abstract virtual PropertyDescriptorCollection GetProperties(object component, Attribute[] attributes);
    public abstract virtual object GetPropertyValue(object component, string propertyName, Boolean& success);
    public abstract virtual object GetPropertyValue(object component, int dispid, Boolean& success);
}
public interface System.ComponentModel.ICustomTypeDescriptor {
    public abstract virtual AttributeCollection GetAttributes();
    public abstract virtual string GetClassName();
    public abstract virtual string GetComponentName();
    public abstract virtual TypeConverter GetConverter();
    public abstract virtual EventDescriptor GetDefaultEvent();
    public abstract virtual PropertyDescriptor GetDefaultProperty();
    public abstract virtual object GetEditor(Type editorBaseType);
    public abstract virtual EventDescriptorCollection GetEvents();
    public abstract virtual EventDescriptorCollection GetEvents(Attribute[] attributes);
    public abstract virtual PropertyDescriptorCollection GetProperties();
    public abstract virtual PropertyDescriptorCollection GetProperties(Attribute[] attributes);
    public abstract virtual object GetPropertyOwner(PropertyDescriptor pd);
}
[DefaultMemberAttribute("Item")]
public interface System.ComponentModel.IDataErrorInfo {
    public string Item { get; }
    public string Error { get; }
    public abstract virtual string get_Item(string columnName);
    public abstract virtual string get_Error();
}
public interface System.ComponentModel.IExtenderProvider {
    public abstract virtual bool CanExtend(object extendee);
}
public interface System.ComponentModel.IIntellisenseBuilder {
    public string Name { get; }
    public abstract virtual string get_Name();
    public abstract virtual bool Show(string language, string value, String& newValue);
}
[MergablePropertyAttribute("False")]
public interface System.ComponentModel.IListSource {
    public bool ContainsListCollection { get; }
    public abstract virtual bool get_ContainsListCollection();
    public abstract virtual IList GetList();
}
public interface System.ComponentModel.INestedContainer {
    public IComponent Owner { get; }
    public abstract virtual IComponent get_Owner();
}
public interface System.ComponentModel.INestedSite {
    public string FullName { get; }
    public abstract virtual string get_FullName();
}
[AttributeUsageAttribute("896")]
public class System.ComponentModel.InheritanceAttribute : Attribute {
    public static InheritanceAttribute Inherited;
    public static InheritanceAttribute InheritedReadOnly;
    public static InheritanceAttribute NotInherited;
    public static InheritanceAttribute Default;
    [CompilerGeneratedAttribute]
private InheritanceLevel <InheritanceLevel>k__BackingField;
    public InheritanceLevel InheritanceLevel { get; }
    public InheritanceAttribute(InheritanceLevel inheritanceLevel);
    private static InheritanceAttribute();
    [CompilerGeneratedAttribute]
public InheritanceLevel get_InheritanceLevel();
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
    public virtual string ToString();
}
public enum System.ComponentModel.InheritanceLevel : Enum {
    public int value__;
    public static InheritanceLevel Inherited;
    public static InheritanceLevel InheritedReadOnly;
    public static InheritanceLevel NotInherited;
}
[AttributeUsageAttribute("4")]
public class System.ComponentModel.InstallerTypeAttribute : Attribute {
    private string _typeName;
    public Type InstallerType { get; }
    public InstallerTypeAttribute(Type installerType);
    public InstallerTypeAttribute(string typeName);
    public virtual Type get_InstallerType();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public abstract class System.ComponentModel.InstanceCreationEditor : object {
    public string Text { get; }
    public virtual string get_Text();
    public abstract virtual object CreateInstance(ITypeDescriptorContext context, Type instanceType);
}
public class System.ComponentModel.Int16Converter : BaseNumberConverter {
    internal Type TargetType { get; }
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
public class System.ComponentModel.Int32Converter : BaseNumberConverter {
    internal Type TargetType { get; }
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
public class System.ComponentModel.Int64Converter : BaseNumberConverter {
    internal Type TargetType { get; }
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
[DefaultMemberAttribute("Item")]
internal class System.ComponentModel.InterlockedBitVector32 : ValueType {
    private int _data;
    public bool Item { get; public set; }
    public bool get_Item(int bit);
    public void set_Item(int bit, bool value);
    public void DangerousSet(int bit, bool value);
    public static int CreateMask();
    public static int CreateMask(int previous);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
}
public interface System.ComponentModel.IRaiseItemChangedEvents {
    public bool RaisesItemChangedEvents { get; }
    public abstract virtual bool get_RaisesItemChangedEvents();
}
public interface System.ComponentModel.ISupportInitializeNotification {
    public bool IsInitialized { get; }
    public abstract virtual bool get_IsInitialized();
    [CompilerGeneratedAttribute]
public abstract virtual void add_Initialized(EventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_Initialized(EventHandler value);
}
public interface System.ComponentModel.ITypeDescriptorContext {
    public IContainer Container { get; }
    public object Instance { get; }
    public PropertyDescriptor PropertyDescriptor { get; }
    public abstract virtual IContainer get_Container();
    public abstract virtual object get_Instance();
    public abstract virtual PropertyDescriptor get_PropertyDescriptor();
    public abstract virtual bool OnComponentChanging();
    public abstract virtual void OnComponentChanged();
}
public interface System.ComponentModel.ITypedList {
    public abstract virtual string GetListName(PropertyDescriptor[] listAccessors);
    public abstract virtual PropertyDescriptorCollection GetItemProperties(PropertyDescriptor[] listAccessors);
}
public abstract class System.ComponentModel.License : object {
    public string LicenseKey { get; }
    public abstract virtual string get_LicenseKey();
    public abstract virtual void Dispose();
}
public class System.ComponentModel.LicenseContext : object {
    public LicenseUsageMode UsageMode { get; }
    public virtual LicenseUsageMode get_UsageMode();
    public virtual string GetSavedLicenseKey(Type type, Assembly resourceAssembly);
    public virtual object GetService(Type type);
    public virtual void SetSavedLicenseKey(Type type, string key);
}
[TypeForwardedFromAttribute("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.ComponentModel.LicenseException : SystemException {
    private object _instance;
    [CompilerGeneratedAttribute]
private Type <LicensedType>k__BackingField;
    public Type LicensedType { get; }
    public LicenseException(Type type);
    public LicenseException(Type type, object instance);
    public LicenseException(Type type, object instance, string message);
    public LicenseException(Type type, object instance, string message, Exception innerException);
    protected LicenseException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public Type get_LicensedType();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.ComponentModel.LicenseManager : object {
    private static object s_selfLock;
    private static LicenseContext modreq(System.Runtime.CompilerServices.IsVolatile) s_context;
    private static object s_contextLockHolder;
    private static Hashtable modreq(System.Runtime.CompilerServices.IsVolatile) s_providers;
    private static Hashtable modreq(System.Runtime.CompilerServices.IsVolatile) s_providerInstances;
    private static object s_internalSyncObject;
    public static LicenseContext CurrentContext { get; public set; }
    public static LicenseUsageMode UsageMode { get; }
    private static LicenseManager();
    public static LicenseContext get_CurrentContext();
    public static void set_CurrentContext(LicenseContext value);
    public static LicenseUsageMode get_UsageMode();
    private static void CacheProvider(Type type, LicenseProvider provider);
    public static object CreateWithContext(Type type, LicenseContext creationContext);
    public static object CreateWithContext(Type type, LicenseContext creationContext, Object[] args);
    private static bool GetCachedNoLicenseProvider(Type type);
    private static LicenseProvider GetCachedProvider(Type type);
    private static LicenseProvider GetCachedProviderInstance(Type providerType);
    public static bool IsLicensed(Type type);
    public static bool IsValid(Type type);
    public static bool IsValid(Type type, object instance, License& license);
    public static void LockContext(object contextUser);
    public static void UnlockContext(object contextUser);
    private static bool ValidateInternal(Type type, object instance, bool allowExceptions, License& license);
    private static bool ValidateInternalRecursive(LicenseContext context, Type type, object instance, bool allowExceptions, License& license, String& licenseKey);
    public static void Validate(Type type);
    public static License Validate(Type type, object instance);
}
public abstract class System.ComponentModel.LicenseProvider : object {
    public abstract virtual License GetLicense(LicenseContext context, Type type, object instance, bool allowExceptions);
}
[AttributeUsageAttribute("4")]
public class System.ComponentModel.LicenseProviderAttribute : Attribute {
    public static LicenseProviderAttribute Default;
    private Type _licenseProviderType;
    private string _licenseProviderName;
    public Type LicenseProvider { get; }
    public object TypeId { get; }
    public LicenseProviderAttribute(string typeName);
    public LicenseProviderAttribute(Type type);
    private static LicenseProviderAttribute();
    public Type get_LicenseProvider();
    public virtual object get_TypeId();
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
}
public enum System.ComponentModel.LicenseUsageMode : Enum {
    public int value__;
    public static LicenseUsageMode Runtime;
    public static LicenseUsageMode Designtime;
}
public class System.ComponentModel.LicFileLicenseProvider : LicenseProvider {
    protected virtual bool IsKeyValid(string key, Type type);
    protected virtual string GetKey(Type type);
    public virtual License GetLicense(LicenseContext context, Type type, object instance, bool allowExceptions);
}
[AttributeUsageAttribute("32767")]
public class System.ComponentModel.ListBindableAttribute : Attribute {
    public static ListBindableAttribute Yes;
    public static ListBindableAttribute No;
    public static ListBindableAttribute Default;
    private bool _isDefault;
    [CompilerGeneratedAttribute]
private bool <ListBindable>k__BackingField;
    public bool ListBindable { get; }
    public ListBindableAttribute(bool listBindable);
    public ListBindableAttribute(BindableSupport flags);
    private static ListBindableAttribute();
    [CompilerGeneratedAttribute]
public bool get_ListBindable();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
}
public class System.ComponentModel.ListChangedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private ListChangedType <ListChangedType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NewIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OldIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyDescriptor <PropertyDescriptor>k__BackingField;
    public ListChangedType ListChangedType { get; }
    public int NewIndex { get; }
    public int OldIndex { get; }
    public PropertyDescriptor PropertyDescriptor { get; }
    public ListChangedEventArgs(ListChangedType listChangedType, int newIndex);
    public ListChangedEventArgs(ListChangedType listChangedType, int newIndex, PropertyDescriptor propDesc);
    public ListChangedEventArgs(ListChangedType listChangedType, PropertyDescriptor propDesc);
    public ListChangedEventArgs(ListChangedType listChangedType, int newIndex, int oldIndex);
    [CompilerGeneratedAttribute]
public ListChangedType get_ListChangedType();
    [CompilerGeneratedAttribute]
public int get_NewIndex();
    [CompilerGeneratedAttribute]
public int get_OldIndex();
    [CompilerGeneratedAttribute]
public PropertyDescriptor get_PropertyDescriptor();
}
public class System.ComponentModel.ListChangedEventHandler : MulticastDelegate {
    public ListChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ListChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ListChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.ComponentModel.ListChangedType : Enum {
    public int value__;
    public static ListChangedType Reset;
    public static ListChangedType ItemAdded;
    public static ListChangedType ItemDeleted;
    public static ListChangedType ItemMoved;
    public static ListChangedType ItemChanged;
    public static ListChangedType PropertyDescriptorAdded;
    public static ListChangedType PropertyDescriptorDeleted;
    public static ListChangedType PropertyDescriptorChanged;
}
public class System.ComponentModel.ListSortDescription : object {
    [CompilerGeneratedAttribute]
private PropertyDescriptor <PropertyDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private ListSortDirection <SortDirection>k__BackingField;
    public PropertyDescriptor PropertyDescriptor { get; public set; }
    public ListSortDirection SortDirection { get; public set; }
    public ListSortDescription(PropertyDescriptor property, ListSortDirection direction);
    [CompilerGeneratedAttribute]
public PropertyDescriptor get_PropertyDescriptor();
    [CompilerGeneratedAttribute]
public void set_PropertyDescriptor(PropertyDescriptor value);
    [CompilerGeneratedAttribute]
public ListSortDirection get_SortDirection();
    [CompilerGeneratedAttribute]
public void set_SortDirection(ListSortDirection value);
}
[DefaultMemberAttribute("Item")]
public class System.ComponentModel.ListSortDescriptionCollection : object {
    private ArrayList _sorts;
    public ListSortDescription Item { get; public set; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    public int Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public ListSortDescriptionCollection(ListSortDescription[] sorts);
    public ListSortDescription get_Item(int index);
    public void set_Item(int index, ListSortDescription value);
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual int IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public sealed virtual void CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public enum System.ComponentModel.ListSortDirection : Enum {
    public int value__;
    public static ListSortDirection Ascending;
    public static ListSortDirection Descending;
}
[AttributeUsageAttribute("4")]
public class System.ComponentModel.LookupBindingPropertiesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <DataSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayMember>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ValueMember>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LookupMember>k__BackingField;
    public static LookupBindingPropertiesAttribute Default;
    public string DataSource { get; }
    public string DisplayMember { get; }
    public string ValueMember { get; }
    public string LookupMember { get; }
    public LookupBindingPropertiesAttribute(string dataSource, string displayMember, string valueMember, string lookupMember);
    private static LookupBindingPropertiesAttribute();
    [CompilerGeneratedAttribute]
public string get_DataSource();
    [CompilerGeneratedAttribute]
public string get_DisplayMember();
    [CompilerGeneratedAttribute]
public string get_ValueMember();
    [CompilerGeneratedAttribute]
public string get_LookupMember();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DesignerCategoryAttribute("Component")]
[TypeConverterAttribute("System.ComponentModel.ComponentConverter")]
[DesignerAttribute("System.Windows.Forms.Design.ComponentDocumentDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.IRootDesigner")]
public class System.ComponentModel.MarshalByValueComponent : object {
    private static object s_eventDisposed;
    private ISite _site;
    private EventHandlerList _events;
    protected EventHandlerList Events { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public ISite Site { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public IContainer Container { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool DesignMode { get; }
    private static MarshalByValueComponent();
    protected virtual override void Finalize();
    public sealed virtual void add_Disposed(EventHandler value);
    public sealed virtual void remove_Disposed(EventHandler value);
    protected EventHandlerList get_Events();
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual IContainer get_Container();
    public virtual object GetService(Type service);
    public virtual bool get_DesignMode();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class System.ComponentModel.MaskedTextProvider : object {
    private static int s_ASCII_ONLY;
    private static int s_ALLOW_PROMPT_AS_INPUT;
    private static int s_INCLUDE_PROMPT;
    private static int s_INCLUDE_LITERALS;
    private static int s_RESET_ON_PROMPT;
    private static int s_RESET_ON_LITERALS;
    private static int s_SKIP_SPACE;
    private static Type s_maskTextProviderType;
    private BitVector32 _flagState;
    private StringBuilder _testString;
    private int _requiredCharCount;
    private int _requiredEditChars;
    private int _optionalEditChars;
    private char _passwordChar;
    private char _promptChar;
    private List`1<CharDescriptor> _stringDescriptor;
    [CompilerGeneratedAttribute]
private int <AssignedEditPositionCount>k__BackingField;
    [CompilerGeneratedAttribute]
private CultureInfo <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mask>k__BackingField;
    public bool AllowPromptAsInput { get; }
    public int AssignedEditPositionCount { get; private set; }
    public int AvailableEditPositionCount { get; }
    public CultureInfo Culture { get; }
    public static char DefaultPasswordChar { get; }
    public int EditPositionCount { get; }
    public IEnumerator EditPositions { get; }
    public bool IncludeLiterals { get; public set; }
    public bool IncludePrompt { get; public set; }
    public bool AsciiOnly { get; }
    public bool IsPassword { get; public set; }
    public static int InvalidIndex { get; }
    public int LastAssignedPosition { get; }
    public int Length { get; }
    public string Mask { get; }
    public bool MaskCompleted { get; }
    public bool MaskFull { get; }
    public char PasswordChar { get; public set; }
    public char PromptChar { get; public set; }
    public bool ResetOnPrompt { get; public set; }
    public bool ResetOnSpace { get; public set; }
    public bool SkipLiterals { get; public set; }
    public char Item { get; }
    public MaskedTextProvider(string mask);
    public MaskedTextProvider(string mask, bool restrictToAscii);
    public MaskedTextProvider(string mask, CultureInfo culture);
    public MaskedTextProvider(string mask, CultureInfo culture, bool restrictToAscii);
    public MaskedTextProvider(string mask, char passwordChar, bool allowPromptAsInput);
    public MaskedTextProvider(string mask, CultureInfo culture, char passwordChar, bool allowPromptAsInput);
    public MaskedTextProvider(string mask, CultureInfo culture, bool allowPromptAsInput, char promptChar, char passwordChar, bool restrictToAscii);
    private static MaskedTextProvider();
    private void Initialize();
    public bool get_AllowPromptAsInput();
    [CompilerGeneratedAttribute]
public int get_AssignedEditPositionCount();
    [CompilerGeneratedAttribute]
private void set_AssignedEditPositionCount(int value);
    public int get_AvailableEditPositionCount();
    public sealed virtual object Clone();
    [CompilerGeneratedAttribute]
public CultureInfo get_Culture();
    public static char get_DefaultPasswordChar();
    public int get_EditPositionCount();
    public IEnumerator get_EditPositions();
    public bool get_IncludeLiterals();
    public void set_IncludeLiterals(bool value);
    public bool get_IncludePrompt();
    public void set_IncludePrompt(bool value);
    public bool get_AsciiOnly();
    public bool get_IsPassword();
    public void set_IsPassword(bool value);
    public static int get_InvalidIndex();
    public int get_LastAssignedPosition();
    public int get_Length();
    [CompilerGeneratedAttribute]
public string get_Mask();
    public bool get_MaskCompleted();
    public bool get_MaskFull();
    public char get_PasswordChar();
    public void set_PasswordChar(char value);
    public char get_PromptChar();
    public void set_PromptChar(char value);
    public bool get_ResetOnPrompt();
    public void set_ResetOnPrompt(bool value);
    public bool get_ResetOnSpace();
    public void set_ResetOnSpace(bool value);
    public bool get_SkipLiterals();
    public void set_SkipLiterals(bool value);
    public char get_Item(int index);
    public bool Add(char input);
    public bool Add(char input, Int32& testPosition, MaskedTextResultHint& resultHint);
    public bool Add(string input);
    public bool Add(string input, Int32& testPosition, MaskedTextResultHint& resultHint);
    public void Clear();
    public void Clear(MaskedTextResultHint& resultHint);
    public int FindAssignedEditPositionFrom(int position, bool direction);
    public int FindAssignedEditPositionInRange(int startPosition, int endPosition, bool direction);
    public int FindEditPositionFrom(int position, bool direction);
    public int FindEditPositionInRange(int startPosition, int endPosition, bool direction);
    private int FindEditPositionInRange(int startPosition, int endPosition, bool direction, byte assignedStatus);
    public int FindNonEditPositionFrom(int position, bool direction);
    public int FindNonEditPositionInRange(int startPosition, int endPosition, bool direction);
    private int FindPositionInRange(int startPosition, int endPosition, bool direction, CharType charTypeFlags);
    public int FindUnassignedEditPositionFrom(int position, bool direction);
    public int FindUnassignedEditPositionInRange(int startPosition, int endPosition, bool direction);
    public static bool GetOperationResultFromHint(MaskedTextResultHint hint);
    public bool InsertAt(char input, int position);
    public bool InsertAt(char input, int position, Int32& testPosition, MaskedTextResultHint& resultHint);
    public bool InsertAt(string input, int position);
    public bool InsertAt(string input, int position, Int32& testPosition, MaskedTextResultHint& resultHint);
    private bool InsertAtInt(string input, int position, Int32& testPosition, MaskedTextResultHint& resultHint, bool testOnly);
    private static bool IsAscii(char c);
    private static bool IsAciiAlphanumeric(char c);
    private static bool IsAlphanumeric(char c);
    private static bool IsAsciiLetter(char c);
    public bool IsAvailablePosition(int position);
    public bool IsEditPosition(int position);
    private static bool IsEditPosition(CharDescriptor charDescriptor);
    private static bool IsLiteralPosition(CharDescriptor charDescriptor);
    private static bool IsPrintableChar(char c);
    public static bool IsValidInputChar(char c);
    public static bool IsValidMaskChar(char c);
    public static bool IsValidPasswordChar(char c);
    public bool Remove();
    public bool Remove(Int32& testPosition, MaskedTextResultHint& resultHint);
    public bool RemoveAt(int position);
    public bool RemoveAt(int startPosition, int endPosition);
    public bool RemoveAt(int startPosition, int endPosition, Int32& testPosition, MaskedTextResultHint& resultHint);
    private bool RemoveAtInt(int startPosition, int endPosition, Int32& testPosition, MaskedTextResultHint& resultHint, bool testOnly);
    public bool Replace(char input, int position);
    public bool Replace(char input, int position, Int32& testPosition, MaskedTextResultHint& resultHint);
    public bool Replace(char input, int startPosition, int endPosition, Int32& testPosition, MaskedTextResultHint& resultHint);
    public bool Replace(string input, int position);
    public bool Replace(string input, int position, Int32& testPosition, MaskedTextResultHint& resultHint);
    public bool Replace(string input, int startPosition, int endPosition, Int32& testPosition, MaskedTextResultHint& resultHint);
    private void ResetChar(int testPosition);
    private void ResetString(int startPosition, int endPosition);
    public bool Set(string input);
    public bool Set(string input, Int32& testPosition, MaskedTextResultHint& resultHint);
    private void SetChar(char input, int position);
    private void SetChar(char input, int position, CharDescriptor charDescriptor);
    private void SetString(string input, int testPosition);
    private bool TestChar(char input, int position, MaskedTextResultHint& resultHint);
    private bool TestEscapeChar(char input, int position);
    private bool TestEscapeChar(char input, int position, CharDescriptor charDex);
    private bool TestSetChar(char input, int position, MaskedTextResultHint& resultHint);
    private bool TestSetString(string input, int position, Int32& testPosition, MaskedTextResultHint& resultHint);
    private bool TestString(string input, int position, Int32& testPosition, MaskedTextResultHint& resultHint);
    public string ToDisplayString();
    public virtual string ToString();
    public string ToString(bool ignorePasswordChar);
    public string ToString(int startPosition, int length);
    public string ToString(bool ignorePasswordChar, int startPosition, int length);
    public string ToString(bool includePrompt, bool includeLiterals);
    public string ToString(bool includePrompt, bool includeLiterals, int startPosition, int length);
    public string ToString(bool ignorePasswordChar, bool includePrompt, bool includeLiterals, int startPosition, int length);
    public bool VerifyChar(char input, int position, MaskedTextResultHint& hint);
    public bool VerifyEscapeChar(char input, int position);
    public bool VerifyString(string input);
    public bool VerifyString(string input, Int32& testPosition, MaskedTextResultHint& resultHint);
}
public enum System.ComponentModel.MaskedTextResultHint : Enum {
    public int value__;
    public static MaskedTextResultHint Unknown;
    public static MaskedTextResultHint CharacterEscaped;
    public static MaskedTextResultHint NoEffect;
    public static MaskedTextResultHint SideEffect;
    public static MaskedTextResultHint Success;
    public static MaskedTextResultHint AsciiCharacterExpected;
    public static MaskedTextResultHint AlphanumericCharacterExpected;
    public static MaskedTextResultHint DigitExpected;
    public static MaskedTextResultHint LetterExpected;
    public static MaskedTextResultHint SignedDigitExpected;
    public static MaskedTextResultHint InvalidInput;
    public static MaskedTextResultHint PromptCharNotAllowed;
    public static MaskedTextResultHint UnavailableEditPosition;
    public static MaskedTextResultHint NonEditPosition;
    public static MaskedTextResultHint PositionOutOfRange;
}
public abstract class System.ComponentModel.MemberDescriptor : object {
    private string _name;
    private string _displayName;
    private int _nameHash;
    private AttributeCollection _attributeCollection;
    private Attribute[] _attributes;
    private Attribute[] _originalAttributes;
    private bool _attributesFiltered;
    private bool _attributesFilled;
    private int _metadataVersion;
    private string _category;
    private string _description;
    private object _lockCookie;
    protected Attribute[] AttributeArray { get; protected set; }
    public AttributeCollection Attributes { get; }
    public string Category { get; }
    public string Description { get; }
    public bool IsBrowsable { get; }
    public string Name { get; }
    protected int NameHashCode { get; }
    public bool DesignTimeOnly { get; }
    public string DisplayName { get; }
    protected MemberDescriptor(string name);
    protected MemberDescriptor(string name, Attribute[] attributes);
    protected MemberDescriptor(MemberDescriptor descr);
    protected MemberDescriptor(MemberDescriptor oldMemberDescriptor, Attribute[] newAttributes);
    protected virtual Attribute[] get_AttributeArray();
    protected virtual void set_AttributeArray(Attribute[] value);
    public virtual AttributeCollection get_Attributes();
    public virtual string get_Category();
    public virtual string get_Description();
    public virtual bool get_IsBrowsable();
    public virtual string get_Name();
    protected virtual int get_NameHashCode();
    public virtual bool get_DesignTimeOnly();
    public virtual string get_DisplayName();
    private void CheckAttributesValid();
    protected virtual AttributeCollection CreateAttributeCollection();
    public virtual bool Equals(object obj);
    protected virtual void FillAttributes(IList attributeList);
    private void FilterAttributesIfNeeded();
    protected static MethodInfo FindMethod(Type componentClass, string name, Type[] args, Type returnType);
    protected static MethodInfo FindMethod(Type componentClass, string name, Type[] args, Type returnType, bool publicOnly);
    public virtual int GetHashCode();
    protected virtual object GetInvocationTarget(Type type, object instance);
    protected static ISite GetSite(object component);
    [ObsoleteAttribute("This method has been deprecated. Use GetInvocationTarget instead. https://go.microsoft.com/fwlink/?linkid=14202")]
protected static object GetInvokee(Type componentClass, object component);
}
public class System.ComponentModel.MultilineStringConverter : TypeConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
public class System.ComponentModel.NestedContainer : Container {
    [CompilerGeneratedAttribute]
private IComponent <Owner>k__BackingField;
    public IComponent Owner { get; }
    protected string OwnerName { get; }
    public NestedContainer(IComponent owner);
    [CompilerGeneratedAttribute]
public sealed virtual IComponent get_Owner();
    protected virtual string get_OwnerName();
    protected virtual ISite CreateSite(IComponent component, string name);
    protected virtual void Dispose(bool disposing);
    protected virtual object GetService(Type service);
    private void OnOwnerDisposed(object sender, EventArgs e);
}
public class System.ComponentModel.NullableConverter : TypeConverter {
    [CompilerGeneratedAttribute]
private Type <NullableType>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <UnderlyingType>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeConverter <UnderlyingTypeConverter>k__BackingField;
    public Type NullableType { get; }
    public Type UnderlyingType { get; }
    public TypeConverter UnderlyingTypeConverter { get; }
    public NullableConverter(Type type);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public virtual bool IsValid(ITypeDescriptorContext context, object value);
    [CompilerGeneratedAttribute]
public Type get_NullableType();
    [CompilerGeneratedAttribute]
public Type get_UnderlyingType();
    [CompilerGeneratedAttribute]
public TypeConverter get_UnderlyingTypeConverter();
}
[AttributeUsageAttribute("32767")]
public class System.ComponentModel.PasswordPropertyTextAttribute : Attribute {
    public static PasswordPropertyTextAttribute Yes;
    public static PasswordPropertyTextAttribute No;
    public static PasswordPropertyTextAttribute Default;
    [CompilerGeneratedAttribute]
private bool <Password>k__BackingField;
    public bool Password { get; }
    public PasswordPropertyTextAttribute(bool password);
    private static PasswordPropertyTextAttribute();
    [CompilerGeneratedAttribute]
public bool get_Password();
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
}
public abstract class System.ComponentModel.PropertyDescriptor : MemberDescriptor {
    private TypeConverter _converter;
    private Hashtable _valueChangedHandlers;
    private Object[] _editors;
    private Type[] _editorTypes;
    private int _editorCount;
    public Type ComponentType { get; }
    public TypeConverter Converter { get; }
    public bool IsLocalizable { get; }
    public bool IsReadOnly { get; }
    public DesignerSerializationVisibility SerializationVisibility { get; }
    public Type PropertyType { get; }
    public bool SupportsChangeEvents { get; }
    protected PropertyDescriptor(string name, Attribute[] attrs);
    protected PropertyDescriptor(MemberDescriptor descr);
    protected PropertyDescriptor(MemberDescriptor descr, Attribute[] attrs);
    public abstract virtual Type get_ComponentType();
    public virtual TypeConverter get_Converter();
    public virtual bool get_IsLocalizable();
    public abstract virtual bool get_IsReadOnly();
    public DesignerSerializationVisibility get_SerializationVisibility();
    public abstract virtual Type get_PropertyType();
    public virtual void AddValueChanged(object component, EventHandler handler);
    public abstract virtual bool CanResetValue(object component);
    public virtual bool Equals(object obj);
    protected object CreateInstance(Type type);
    protected virtual void FillAttributes(IList attributeList);
    public PropertyDescriptorCollection GetChildProperties();
    public PropertyDescriptorCollection GetChildProperties(Attribute[] filter);
    public PropertyDescriptorCollection GetChildProperties(object instance);
    public virtual PropertyDescriptorCollection GetChildProperties(object instance, Attribute[] filter);
    public virtual object GetEditor(Type editorBaseType);
    public virtual int GetHashCode();
    protected virtual object GetInvocationTarget(Type type, object instance);
    protected Type GetTypeFromName(string typeName);
    public abstract virtual object GetValue(object component);
    protected virtual void OnValueChanged(object component, EventArgs e);
    public virtual void RemoveValueChanged(object component, EventHandler handler);
    protected internal EventHandler GetValueChangedHandler(object component);
    public abstract virtual void ResetValue(object component);
    public abstract virtual void SetValue(object component, object value);
    public abstract virtual bool ShouldSerializeValue(object component);
    public virtual bool get_SupportsChangeEvents();
}
[DefaultMemberAttribute("Item")]
public class System.ComponentModel.PropertyDescriptorCollection : object {
    public static PropertyDescriptorCollection Empty;
    private IDictionary _cachedFoundProperties;
    private bool _cachedIgnoreCase;
    private PropertyDescriptor[] _properties;
    private String[] _namedSort;
    private IComparer _comparer;
    private bool _propsOwned;
    private bool _needSort;
    private bool _readOnly;
    private object _internalSyncObject;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    public int Count { get; private set; }
    public PropertyDescriptor Item { get; }
    public PropertyDescriptor Item { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.IDictionary.IsFixedSize { get; }
    private bool System.Collections.IDictionary.IsReadOnly { get; }
    private object System.Collections.IDictionary.Item { get; private set; }
    private ICollection System.Collections.IDictionary.Keys { get; }
    private ICollection System.Collections.IDictionary.Values { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    public PropertyDescriptorCollection(PropertyDescriptor[] properties);
    public PropertyDescriptorCollection(PropertyDescriptor[] properties, bool readOnly);
    private PropertyDescriptorCollection(PropertyDescriptor[] properties, int propCount, String[] namedSort, IComparer comparer);
    private static PropertyDescriptorCollection();
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
private void set_Count(int value);
    public virtual PropertyDescriptor get_Item(int index);
    public virtual PropertyDescriptor get_Item(string name);
    public int Add(PropertyDescriptor value);
    public void Clear();
    public bool Contains(PropertyDescriptor value);
    public sealed virtual void CopyTo(Array array, int index);
    private void EnsurePropsOwned();
    private void EnsureSize(int sizeNeeded);
    public virtual PropertyDescriptor Find(string name, bool ignoreCase);
    public int IndexOf(PropertyDescriptor value);
    public void Insert(int index, PropertyDescriptor value);
    public void Remove(PropertyDescriptor value);
    public void RemoveAt(int index);
    public virtual PropertyDescriptorCollection Sort();
    public virtual PropertyDescriptorCollection Sort(String[] names);
    public virtual PropertyDescriptorCollection Sort(String[] names, IComparer comparer);
    public virtual PropertyDescriptorCollection Sort(IComparer comparer);
    protected void InternalSort(String[] names);
    protected void InternalSort(IComparer sorter);
    public virtual IEnumerator GetEnumerator();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override void System.Collections.IDictionary.Clear();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override void System.Collections.IDictionary.Add(object key, object value);
    private sealed virtual override bool System.Collections.IDictionary.Contains(object key);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override bool System.Collections.IDictionary.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IDictionary.get_IsReadOnly();
    private sealed virtual override object System.Collections.IDictionary.get_Item(object key);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object key, object value);
    private sealed virtual override ICollection System.Collections.IDictionary.get_Keys();
    private sealed virtual override ICollection System.Collections.IDictionary.get_Values();
    private sealed virtual override void System.Collections.IDictionary.Remove(object key);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
}
[AttributeUsageAttribute("32767")]
public class System.ComponentModel.PropertyTabAttribute : Attribute {
    private Type[] _tabClasses;
    private String[] _tabClassNames;
    [CompilerGeneratedAttribute]
private PropertyTabScope[] <TabScopes>k__BackingField;
    public Type[] TabClasses { get; }
    protected String[] TabClassNames { get; }
    public PropertyTabScope[] TabScopes { get; private set; }
    public PropertyTabAttribute(Type tabClass);
    public PropertyTabAttribute(string tabClassName);
    public PropertyTabAttribute(Type tabClass, PropertyTabScope tabScope);
    public PropertyTabAttribute(string tabClassName, PropertyTabScope tabScope);
    public Type[] get_TabClasses();
    protected String[] get_TabClassNames();
    [CompilerGeneratedAttribute]
public PropertyTabScope[] get_TabScopes();
    [CompilerGeneratedAttribute]
private void set_TabScopes(PropertyTabScope[] value);
    public virtual bool Equals(object other);
    public bool Equals(PropertyTabAttribute other);
    public virtual int GetHashCode();
    protected void InitializeArrays(String[] tabClassNames, PropertyTabScope[] tabScopes);
    protected void InitializeArrays(Type[] tabClasses, PropertyTabScope[] tabScopes);
    private void InitializeArrays(String[] tabClassNames, Type[] tabClasses, PropertyTabScope[] tabScopes);
}
public enum System.ComponentModel.PropertyTabScope : Enum {
    public int value__;
    public static PropertyTabScope Static;
    public static PropertyTabScope Global;
    public static PropertyTabScope Document;
    public static PropertyTabScope Component;
}
[AttributeUsageAttribute("4")]
public class System.ComponentModel.ProvidePropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <PropertyName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ReceiverTypeName>k__BackingField;
    public string PropertyName { get; }
    public string ReceiverTypeName { get; }
    public object TypeId { get; }
    public ProvidePropertyAttribute(string propertyName, Type receiverType);
    public ProvidePropertyAttribute(string propertyName, string receiverTypeName);
    [CompilerGeneratedAttribute]
public string get_PropertyName();
    [CompilerGeneratedAttribute]
public string get_ReceiverTypeName();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual object get_TypeId();
}
[AttributeUsageAttribute("128")]
[ObsoleteAttribute("Use System.ComponentModel.SettingsBindableAttribute instead to work with the new settings model.")]
public class System.ComponentModel.RecommendedAsConfigurableAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <RecommendedAsConfigurable>k__BackingField;
    public static RecommendedAsConfigurableAttribute No;
    public static RecommendedAsConfigurableAttribute Yes;
    public static RecommendedAsConfigurableAttribute Default;
    public bool RecommendedAsConfigurable { get; }
    public RecommendedAsConfigurableAttribute(bool recommendedAsConfigurable);
    private static RecommendedAsConfigurableAttribute();
    [CompilerGeneratedAttribute]
public bool get_RecommendedAsConfigurable();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
}
public class System.ComponentModel.ReferenceConverter : TypeConverter {
    private static string s_none;
    private Type _type;
    public ReferenceConverter(Type type);
    private static ReferenceConverter();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    protected virtual bool IsValueAllowed(ITypeDescriptorContext context, object value);
}
internal class System.ComponentModel.ReflectEventDescriptor : EventDescriptor {
    private Type _type;
    private Type _componentClass;
    private MethodInfo _addMethod;
    private MethodInfo _removeMethod;
    private EventInfo _realEvent;
    private bool _filledMethods;
    public Type ComponentType { get; }
    public Type EventType { get; }
    public bool IsMulticast { get; }
    public ReflectEventDescriptor(Type componentClass, string name, Type type, Attribute[] attributes);
    public ReflectEventDescriptor(Type componentClass, EventInfo eventInfo);
    public ReflectEventDescriptor(Type componentType, EventDescriptor oldReflectEventDescriptor, Attribute[] attributes);
    public virtual Type get_ComponentType();
    public virtual Type get_EventType();
    public virtual bool get_IsMulticast();
    public virtual void AddEventHandler(object component, Delegate value);
    protected virtual void FillAttributes(IList attributes);
    private void FillEventInfoAttribute(EventInfo realEventInfo, IList attributes);
    private void FillMethods();
    private void FillSingleMethodAttribute(MethodInfo realMethodInfo, IList attributes);
    public virtual void RemoveEventHandler(object component, Delegate value);
}
internal class System.ComponentModel.ReflectPropertyDescriptor : PropertyDescriptor {
    private static object s_noValue;
    private static int s_bitDefaultValueQueried;
    private static int s_bitGetQueried;
    private static int s_bitSetQueried;
    private static int s_bitShouldSerializeQueried;
    private static int s_bitResetQueried;
    private static int s_bitChangedQueried;
    private static int s_bitIPropChangedQueried;
    private static int s_bitReadOnlyChecked;
    private static int s_bitAmbientValueQueried;
    private static int s_bitSetOnDemand;
    private InterlockedBitVector32 _state;
    private Type _componentClass;
    private Type _type;
    private object _defaultValue;
    private object _ambientValue;
    private PropertyInfo _propInfo;
    private MethodInfo _getMethod;
    private MethodInfo _setMethod;
    private MethodInfo _shouldSerializeMethod;
    private MethodInfo _resetMethod;
    private EventDescriptor _realChangedEvent;
    private EventDescriptor _realIPropChangedEvent;
    private Type _receiverType;
    private object AmbientValue { get; }
    private EventDescriptor ChangedEventValue { get; }
    private EventDescriptor IPropChangedEventValue { get; }
    public Type ComponentType { get; }
    private object DefaultValue { get; }
    private MethodInfo GetMethodValue { get; }
    private bool IsExtender { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    private MethodInfo ResetMethodValue { get; }
    private MethodInfo SetMethodValue { get; }
    private MethodInfo ShouldSerializeMethodValue { get; }
    public bool SupportsChangeEvents { get; }
    public ReflectPropertyDescriptor(Type componentClass, string name, Type type, Attribute[] attributes);
    public ReflectPropertyDescriptor(Type componentClass, string name, Type type, PropertyInfo propInfo, MethodInfo getMethod, MethodInfo setMethod, Attribute[] attrs);
    public ReflectPropertyDescriptor(Type componentClass, string name, Type type, Type receiverType, MethodInfo getMethod, MethodInfo setMethod, Attribute[] attrs);
    public ReflectPropertyDescriptor(Type componentClass, PropertyDescriptor oldReflectPropertyDescriptor, Attribute[] attributes);
    private static ReflectPropertyDescriptor();
    private object get_AmbientValue();
    private EventDescriptor get_ChangedEventValue();
    private EventDescriptor get_IPropChangedEventValue();
    public virtual Type get_ComponentType();
    private object get_DefaultValue();
    private MethodInfo get_GetMethodValue();
    private bool get_IsExtender();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    private MethodInfo get_ResetMethodValue();
    private MethodInfo get_SetMethodValue();
    private MethodInfo get_ShouldSerializeMethodValue();
    public virtual void AddValueChanged(object component, EventHandler handler);
    internal bool ExtenderCanResetValue(IExtenderProvider provider, object component);
    internal Type ExtenderGetReceiverType();
    internal Type ExtenderGetType(IExtenderProvider provider);
    internal object ExtenderGetValue(IExtenderProvider provider, object component);
    internal void ExtenderResetValue(IExtenderProvider provider, object component, PropertyDescriptor notifyDesc);
    internal void ExtenderSetValue(IExtenderProvider provider, object component, object value, PropertyDescriptor notifyDesc);
    internal bool ExtenderShouldSerializeValue(IExtenderProvider provider, object component);
    public virtual bool CanResetValue(object component);
    protected virtual void FillAttributes(IList attributes);
    public virtual object GetValue(object component);
    internal void OnINotifyPropertyChanged(object component, PropertyChangedEventArgs e);
    protected virtual void OnValueChanged(object component, EventArgs e);
    public virtual void RemoveValueChanged(object component, EventHandler handler);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
    public virtual bool get_SupportsChangeEvents();
}
internal class System.ComponentModel.ReflectTypeDescriptionProvider : TypeDescriptionProvider {
    private Hashtable _typeData;
    private static Type[] s_typeConstructor;
    private static Hashtable s_editorTables;
    private static Hashtable s_intrinsicTypeConverters;
    private static object s_intrinsicReferenceKey;
    private static object s_intrinsicNullableKey;
    private static object s_dictionaryKey;
    private static Hashtable s_propertyCache;
    private static Hashtable s_eventCache;
    private static Hashtable s_attributeCache;
    private static Hashtable s_extendedPropertyCache;
    private static Guid s_extenderPropertiesKey;
    private static Guid s_extenderProviderPropertiesKey;
    private static Type[] s_skipInterfaceAttributeList;
    [CompilerGeneratedAttribute]
private static Guid <ExtenderProviderKey>k__BackingField;
    private static object s_internalSyncObject;
    internal static Guid ExtenderProviderKey { get; }
    private static Hashtable EditorTables { get; }
    private static Hashtable IntrinsicTypeConverters { get; }
    private static Hashtable PropertyCache { get; }
    private static Hashtable EventCache { get; }
    private static Hashtable AttributeCache { get; }
    private static Hashtable ExtendedPropertyCache { get; }
    private static ReflectTypeDescriptionProvider();
    [CompilerGeneratedAttribute]
internal static Guid get_ExtenderProviderKey();
    private static Hashtable get_EditorTables();
    private static Hashtable get_IntrinsicTypeConverters();
    private static Hashtable get_PropertyCache();
    private static Hashtable get_EventCache();
    private static Hashtable get_AttributeCache();
    private static Hashtable get_ExtendedPropertyCache();
    internal static void AddEditorTable(Type editorBaseType, Hashtable table);
    public virtual object CreateInstance(IServiceProvider provider, Type objectType, Type[] argTypes, Object[] args);
    private static object CreateInstance(Type objectType, Type callingType);
    internal AttributeCollection GetAttributes(Type type);
    public virtual IDictionary GetCache(object instance);
    internal string GetClassName(Type type);
    internal string GetComponentName(Type type, object instance);
    internal TypeConverter GetConverter(Type type, object instance);
    internal EventDescriptor GetDefaultEvent(Type type, object instance);
    internal PropertyDescriptor GetDefaultProperty(Type type, object instance);
    internal object GetEditor(Type type, object instance, Type editorBaseType);
    private static Hashtable GetEditorTable(Type editorBaseType);
    internal EventDescriptorCollection GetEvents(Type type);
    internal AttributeCollection GetExtendedAttributes(object instance);
    internal string GetExtendedClassName(object instance);
    internal string GetExtendedComponentName(object instance);
    internal TypeConverter GetExtendedConverter(object instance);
    internal EventDescriptor GetExtendedDefaultEvent(object instance);
    internal PropertyDescriptor GetExtendedDefaultProperty(object instance);
    internal object GetExtendedEditor(object instance, Type editorBaseType);
    internal EventDescriptorCollection GetExtendedEvents(object instance);
    internal PropertyDescriptorCollection GetExtendedProperties(object instance);
    protected internal virtual IExtenderProvider[] GetExtenderProviders(object instance);
    private static IExtenderProvider[] GetExtenders(ICollection components, object instance, IDictionary cache);
    internal object GetExtendedPropertyOwner(object instance, PropertyDescriptor pd);
    public virtual ICustomTypeDescriptor GetExtendedTypeDescriptor(object instance);
    public virtual string GetFullComponentName(object component);
    internal Type[] GetPopulatedTypes(Module module);
    internal PropertyDescriptorCollection GetProperties(Type type);
    internal object GetPropertyOwner(Type type, object instance, PropertyDescriptor pd);
    public virtual Type GetReflectionType(Type objectType, object instance);
    private ReflectedTypeData GetTypeData(Type type, bool createIfNeeded);
    public virtual ICustomTypeDescriptor GetTypeDescriptor(Type objectType, object instance);
    private static Type GetTypeFromName(string typeName);
    internal bool IsPopulated(Type type);
    internal static Attribute[] ReflectGetAttributes(Type type);
    internal static Attribute[] ReflectGetAttributes(MemberInfo member);
    private static EventDescriptor[] ReflectGetEvents(Type type);
    private static PropertyDescriptor[] ReflectGetExtendedProperties(IExtenderProvider provider);
    private static PropertyDescriptor[] ReflectGetProperties(Type type);
    internal void Refresh(Type type);
    private static object SearchIntrinsicTable(Hashtable table, Type callingType);
}
public class System.ComponentModel.RefreshEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private object <ComponentChanged>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <TypeChanged>k__BackingField;
    public object ComponentChanged { get; }
    public Type TypeChanged { get; }
    public RefreshEventArgs(object componentChanged);
    public RefreshEventArgs(Type typeChanged);
    [CompilerGeneratedAttribute]
public object get_ComponentChanged();
    [CompilerGeneratedAttribute]
public Type get_TypeChanged();
}
public class System.ComponentModel.RefreshEventHandler : MulticastDelegate {
    public RefreshEventHandler(object object, IntPtr method);
    public virtual void Invoke(RefreshEventArgs e);
    public virtual IAsyncResult BeginInvoke(RefreshEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("4")]
public class System.ComponentModel.RunInstallerAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <RunInstaller>k__BackingField;
    public static RunInstallerAttribute Yes;
    public static RunInstallerAttribute No;
    public static RunInstallerAttribute Default;
    public bool RunInstaller { get; }
    public RunInstallerAttribute(bool runInstaller);
    private static RunInstallerAttribute();
    [CompilerGeneratedAttribute]
public bool get_RunInstaller();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool IsDefaultAttribute();
}
public class System.ComponentModel.SByteConverter : BaseNumberConverter {
    internal Type TargetType { get; }
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
[AttributeUsageAttribute("128")]
public class System.ComponentModel.SettingsBindableAttribute : Attribute {
    public static SettingsBindableAttribute Yes;
    public static SettingsBindableAttribute No;
    [CompilerGeneratedAttribute]
private bool <Bindable>k__BackingField;
    public bool Bindable { get; }
    public SettingsBindableAttribute(bool bindable);
    private static SettingsBindableAttribute();
    [CompilerGeneratedAttribute]
public bool get_Bindable();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
public class System.ComponentModel.SingleConverter : BaseNumberConverter {
    internal bool AllowHex { get; }
    internal Type TargetType { get; }
    internal virtual bool get_AllowHex();
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
public class System.ComponentModel.StringConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
public static class System.ComponentModel.SyntaxCheck : object {
    public static bool CheckMachineName(string value);
    public static bool CheckPath(string value);
    public static bool CheckRootedPath(string value);
}
public class System.ComponentModel.TimeSpanConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[AttributeUsageAttribute("32767")]
public class System.ComponentModel.ToolboxItemAttribute : Attribute {
    private Type _toolboxItemType;
    private string _toolboxItemTypeName;
    public static ToolboxItemAttribute Default;
    public static ToolboxItemAttribute None;
    public Type ToolboxItemType { get; }
    public string ToolboxItemTypeName { get; }
    public ToolboxItemAttribute(bool defaultType);
    public ToolboxItemAttribute(string toolboxItemTypeName);
    public ToolboxItemAttribute(Type toolboxItemType);
    private static ToolboxItemAttribute();
    public virtual bool IsDefaultAttribute();
    public Type get_ToolboxItemType();
    public string get_ToolboxItemTypeName();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[AttributeUsageAttribute("4")]
public class System.ComponentModel.ToolboxItemFilterAttribute : Attribute {
    private string _typeId;
    [CompilerGeneratedAttribute]
private string <FilterString>k__BackingField;
    [CompilerGeneratedAttribute]
private ToolboxItemFilterType <FilterType>k__BackingField;
    public string FilterString { get; }
    public ToolboxItemFilterType FilterType { get; }
    public object TypeId { get; }
    public ToolboxItemFilterAttribute(string filterString);
    public ToolboxItemFilterAttribute(string filterString, ToolboxItemFilterType filterType);
    [CompilerGeneratedAttribute]
public string get_FilterString();
    [CompilerGeneratedAttribute]
public ToolboxItemFilterType get_FilterType();
    public virtual object get_TypeId();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual bool Match(object obj);
    public virtual string ToString();
}
public enum System.ComponentModel.ToolboxItemFilterType : Enum {
    public int value__;
    public static ToolboxItemFilterType Allow;
    public static ToolboxItemFilterType Custom;
    public static ToolboxItemFilterType Prevent;
    public static ToolboxItemFilterType Require;
}
public class System.ComponentModel.TypeConverter : object {
    public bool CanConvertFrom(Type sourceType);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public bool CanConvertTo(Type destinationType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public object ConvertFrom(object value);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public object ConvertFromInvariantString(string text);
    public object ConvertFromInvariantString(ITypeDescriptorContext context, string text);
    public object ConvertFromString(string text);
    public object ConvertFromString(ITypeDescriptorContext context, string text);
    public object ConvertFromString(ITypeDescriptorContext context, CultureInfo culture, string text);
    public object ConvertTo(object value, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public string ConvertToInvariantString(object value);
    public string ConvertToInvariantString(ITypeDescriptorContext context, object value);
    public string ConvertToString(object value);
    public string ConvertToString(ITypeDescriptorContext context, object value);
    public string ConvertToString(ITypeDescriptorContext context, CultureInfo culture, object value);
    public object CreateInstance(IDictionary propertyValues);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    protected Exception GetConvertFromException(object value);
    protected Exception GetConvertToException(object value, Type destinationType);
    public bool GetCreateInstanceSupported();
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    public PropertyDescriptorCollection GetProperties(object value);
    public PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public bool GetPropertiesSupported();
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public ICollection GetStandardValues();
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public bool GetStandardValuesExclusive();
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public bool GetStandardValuesSupported();
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
    public bool IsValid(object value);
    public virtual bool IsValid(ITypeDescriptorContext context, object value);
    protected PropertyDescriptorCollection SortProperties(PropertyDescriptorCollection props, String[] names);
}
public abstract class System.ComponentModel.TypeDescriptionProvider : object {
    private TypeDescriptionProvider _parent;
    private EmptyCustomTypeDescriptor _emptyDescriptor;
    protected TypeDescriptionProvider(TypeDescriptionProvider parent);
    public virtual object CreateInstance(IServiceProvider provider, Type objectType, Type[] argTypes, Object[] args);
    public virtual IDictionary GetCache(object instance);
    public virtual ICustomTypeDescriptor GetExtendedTypeDescriptor(object instance);
    protected internal virtual IExtenderProvider[] GetExtenderProviders(object instance);
    public virtual string GetFullComponentName(object component);
    public Type GetReflectionType(Type objectType);
    public Type GetReflectionType(object instance);
    public virtual Type GetReflectionType(Type objectType, object instance);
    public virtual Type GetRuntimeType(Type reflectionType);
    public ICustomTypeDescriptor GetTypeDescriptor(Type objectType);
    public ICustomTypeDescriptor GetTypeDescriptor(object instance);
    public virtual ICustomTypeDescriptor GetTypeDescriptor(Type objectType, object instance);
    public virtual bool IsSupportedType(Type type);
}
public class System.ComponentModel.TypeDescriptor : object {
    private static WeakHashtable s_providerTable;
    private static Hashtable s_providerTypeTable;
    private static Hashtable s_defaultProviders;
    private static WeakHashtable s_associationTable;
    private static int s_metadataVersion;
    private static int s_collisionIndex;
    private static Guid[] s_pipelineInitializeKeys;
    private static Guid[] s_pipelineMergeKeys;
    private static Guid[] s_pipelineFilterKeys;
    private static Guid[] s_pipelineAttributeFilterKeys;
    private static object s_internalSyncObject;
    [CompilerGeneratedAttribute]
private static RefreshEventHandler Refreshed;
    [EditorBrowsableAttribute("2")]
public static Type InterfaceType { get; }
    internal static int MetadataVersion { get; }
    private static WeakHashtable AssociationTable { get; }
    [EditorBrowsableAttribute("2")]
public static Type ComObjectType { get; }
    [ObsoleteAttribute("This property has been deprecated. Use a type description provider to supply type information for COM types instead. https://go.microsoft.com/fwlink/?linkid=14202")]
public static IComNativeDescriptorHandler ComNativeDescriptorHandler { get; public set; }
    private static TypeDescriptor();
    public static Type get_InterfaceType();
    internal static int get_MetadataVersion();
    private static WeakHashtable get_AssociationTable();
    [CompilerGeneratedAttribute]
public static void add_Refreshed(RefreshEventHandler value);
    [CompilerGeneratedAttribute]
public static void remove_Refreshed(RefreshEventHandler value);
    [EditorBrowsableAttribute("2")]
public static TypeDescriptionProvider AddAttributes(Type type, Attribute[] attributes);
    [EditorBrowsableAttribute("2")]
public static TypeDescriptionProvider AddAttributes(object instance, Attribute[] attributes);
    [EditorBrowsableAttribute("2")]
public static void AddEditorTable(Type editorBaseType, Hashtable table);
    [EditorBrowsableAttribute("2")]
public static void AddProvider(TypeDescriptionProvider provider, Type type);
    [EditorBrowsableAttribute("2")]
public static void AddProvider(TypeDescriptionProvider provider, object instance);
    [EditorBrowsableAttribute("2")]
public static void AddProviderTransparent(TypeDescriptionProvider provider, Type type);
    [EditorBrowsableAttribute("2")]
public static void AddProviderTransparent(TypeDescriptionProvider provider, object instance);
    private static void CheckDefaultProvider(Type type);
    [EditorBrowsableAttribute("2")]
public static void CreateAssociation(object primary, object secondary);
    public static EventDescriptor CreateEvent(Type componentType, string name, Type type, Attribute[] attributes);
    public static EventDescriptor CreateEvent(Type componentType, EventDescriptor oldEventDescriptor, Attribute[] attributes);
    public static object CreateInstance(IServiceProvider provider, Type objectType, Type[] argTypes, Object[] args);
    public static PropertyDescriptor CreateProperty(Type componentType, string name, Type type, Attribute[] attributes);
    public static PropertyDescriptor CreateProperty(Type componentType, PropertyDescriptor oldPropertyDescriptor, Attribute[] attributes);
    private static ArrayList FilterMembers(IList members, Attribute[] attributes);
    [EditorBrowsableAttribute("2")]
public static object GetAssociation(Type type, object primary);
    public static AttributeCollection GetAttributes(Type componentType);
    public static AttributeCollection GetAttributes(object component);
    [EditorBrowsableAttribute("2")]
public static AttributeCollection GetAttributes(object component, bool noCustomTypeDesc);
    internal static IDictionary GetCache(object instance);
    public static string GetClassName(object component);
    [EditorBrowsableAttribute("2")]
public static string GetClassName(object component, bool noCustomTypeDesc);
    public static string GetClassName(Type componentType);
    public static string GetComponentName(object component);
    [EditorBrowsableAttribute("2")]
public static string GetComponentName(object component, bool noCustomTypeDesc);
    public static TypeConverter GetConverter(object component);
    [EditorBrowsableAttribute("2")]
public static TypeConverter GetConverter(object component, bool noCustomTypeDesc);
    public static TypeConverter GetConverter(Type type);
    private static object ConvertFromInvariantString(Type type, string stringValue);
    public static EventDescriptor GetDefaultEvent(Type componentType);
    public static EventDescriptor GetDefaultEvent(object component);
    [EditorBrowsableAttribute("2")]
public static EventDescriptor GetDefaultEvent(object component, bool noCustomTypeDesc);
    public static PropertyDescriptor GetDefaultProperty(Type componentType);
    public static PropertyDescriptor GetDefaultProperty(object component);
    [EditorBrowsableAttribute("2")]
public static PropertyDescriptor GetDefaultProperty(object component, bool noCustomTypeDesc);
    internal static ICustomTypeDescriptor GetDescriptor(Type type, string typeName);
    internal static ICustomTypeDescriptor GetDescriptor(object component, bool noCustomTypeDesc);
    internal static ICustomTypeDescriptor GetExtendedDescriptor(object component);
    public static object GetEditor(object component, Type editorBaseType);
    [EditorBrowsableAttribute("2")]
public static object GetEditor(object component, Type editorBaseType, bool noCustomTypeDesc);
    public static object GetEditor(Type type, Type editorBaseType);
    public static EventDescriptorCollection GetEvents(Type componentType);
    public static EventDescriptorCollection GetEvents(Type componentType, Attribute[] attributes);
    public static EventDescriptorCollection GetEvents(object component);
    [EditorBrowsableAttribute("2")]
public static EventDescriptorCollection GetEvents(object component, bool noCustomTypeDesc);
    public static EventDescriptorCollection GetEvents(object component, Attribute[] attributes);
    [EditorBrowsableAttribute("2")]
public static EventDescriptorCollection GetEvents(object component, Attribute[] attributes, bool noCustomTypeDesc);
    private static string GetExtenderCollisionSuffix(MemberDescriptor member);
    public static string GetFullComponentName(object component);
    private static Type GetNodeForBaseType(Type searchType);
    public static PropertyDescriptorCollection GetProperties(Type componentType);
    public static PropertyDescriptorCollection GetProperties(Type componentType, Attribute[] attributes);
    public static PropertyDescriptorCollection GetProperties(object component);
    [EditorBrowsableAttribute("2")]
public static PropertyDescriptorCollection GetProperties(object component, bool noCustomTypeDesc);
    public static PropertyDescriptorCollection GetProperties(object component, Attribute[] attributes);
    public static PropertyDescriptorCollection GetProperties(object component, Attribute[] attributes, bool noCustomTypeDesc);
    private static PropertyDescriptorCollection GetPropertiesImpl(object component, Attribute[] attributes, bool noCustomTypeDesc, bool noAttributes);
    [EditorBrowsableAttribute("2")]
public static TypeDescriptionProvider GetProvider(Type type);
    [EditorBrowsableAttribute("2")]
public static TypeDescriptionProvider GetProvider(object instance);
    internal static TypeDescriptionProvider GetProviderRecursive(Type type);
    [EditorBrowsableAttribute("2")]
public static Type GetReflectionType(Type type);
    [EditorBrowsableAttribute("2")]
public static Type GetReflectionType(object instance);
    private static TypeDescriptionNode NodeFor(Type type);
    private static TypeDescriptionNode NodeFor(Type type, bool createDelegator);
    private static TypeDescriptionNode NodeFor(object instance);
    private static TypeDescriptionNode NodeFor(object instance, bool createDelegator);
    private static void NodeRemove(object key, TypeDescriptionProvider provider);
    private static ICollection PipelineAttributeFilter(int pipelineType, ICollection members, Attribute[] filter, object instance, IDictionary cache);
    private static ICollection PipelineFilter(int pipelineType, ICollection members, object instance, IDictionary cache);
    private static ICollection PipelineInitialize(int pipelineType, ICollection members, IDictionary cache);
    private static ICollection PipelineMerge(int pipelineType, ICollection primary, ICollection secondary, object instance, IDictionary cache);
    private static void RaiseRefresh(object component);
    private static void RaiseRefresh(Type type);
    public static void Refresh(object component);
    private static void Refresh(object component, bool refreshReflectionProvider);
    public static void Refresh(Type type);
    public static void Refresh(Module module);
    public static void Refresh(Assembly assembly);
    public static Type get_ComObjectType();
    public static IDesigner CreateDesigner(IComponent component, Type designerBaseType);
    public static IComNativeDescriptorHandler get_ComNativeDescriptorHandler();
    public static void set_ComNativeDescriptorHandler(IComNativeDescriptorHandler value);
    [EditorBrowsableAttribute("2")]
public static void RemoveAssociation(object primary, object secondary);
    [EditorBrowsableAttribute("2")]
public static void RemoveAssociations(object primary);
    [EditorBrowsableAttribute("2")]
public static void RemoveProvider(TypeDescriptionProvider provider, Type type);
    [EditorBrowsableAttribute("2")]
public static void RemoveProvider(TypeDescriptionProvider provider, object instance);
    [EditorBrowsableAttribute("2")]
public static void RemoveProviderTransparent(TypeDescriptionProvider provider, Type type);
    [EditorBrowsableAttribute("2")]
public static void RemoveProviderTransparent(TypeDescriptionProvider provider, object instance);
    private static bool ShouldHideMember(MemberDescriptor member, Attribute attribute);
    public static void SortDescriptorArray(IList infos);
}
public abstract class System.ComponentModel.TypeListConverter : TypeConverter {
    private Type[] _types;
    private StandardValuesCollection _values;
    protected TypeListConverter(Type[] types);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
public class System.ComponentModel.UInt16Converter : BaseNumberConverter {
    internal Type TargetType { get; }
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
public class System.ComponentModel.UInt32Converter : BaseNumberConverter {
    internal Type TargetType { get; }
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
public class System.ComponentModel.UInt64Converter : BaseNumberConverter {
    internal Type TargetType { get; }
    internal virtual Type get_TargetType();
    internal virtual object FromString(string value, int radix);
    internal virtual object FromString(string value, NumberFormatInfo formatInfo);
    internal virtual string ToString(object value, NumberFormatInfo formatInfo);
}
public class System.ComponentModel.VersionConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual bool IsValid(ITypeDescriptorContext context, object value);
}
[TypeForwardedFromAttribute("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.ComponentModel.WarningException : SystemException {
    [CompilerGeneratedAttribute]
private string <HelpUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HelpTopic>k__BackingField;
    public string HelpUrl { get; }
    public string HelpTopic { get; }
    public WarningException(string message);
    public WarningException(string message, string helpUrl);
    public WarningException(string message, Exception innerException);
    public WarningException(string message, string helpUrl, string helpTopic);
    protected WarningException(SerializationInfo info, StreamingContext context);
    [CompilerGeneratedAttribute]
public string get_HelpUrl();
    [CompilerGeneratedAttribute]
public string get_HelpTopic();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
internal class System.ComponentModel.WeakHashtable : Hashtable {
    private static IEqualityComparer s_comparer;
    private long _lastGlobalMem;
    private int _lastHashCount;
    private static WeakHashtable();
    public void SetWeak(object key, object value);
    private void ScavengeKeys();
}
public class System.Drawing.ColorConverter : TypeConverter {
    private static Lazy`1<StandardValuesCollection> s_valuesLazy;
    private static ColorConverter();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
internal static class System.Drawing.ColorConverterCommon : object {
    public static Color ConvertFromString(string strValue, CultureInfo culture);
    private static Color PossibleKnownColor(Color color);
    private static int IntFromString(string text, CultureInfo culture);
    private static int IntFromString(string value, int radix);
    private static int IntFromString(string value, NumberFormatInfo formatInfo);
}
internal static class System.Drawing.ColorTable : object {
    private static Lazy`1<Dictionary`2<string, Color>> s_colorConstants;
    internal static Dictionary`2<string, Color> Colors { get; }
    private static ColorTable();
    private static Dictionary`2<string, Color> GetColors();
    private static void FillWithProperties(Dictionary`2<string, Color> dictionary, Type typeWithColors);
    internal static Dictionary`2<string, Color> get_Colors();
    internal static bool TryGetNamedColor(string name, Color& result);
    internal static bool IsKnownNamedColor(string name);
}
public class System.Drawing.PointConverter : TypeConverter {
    private static String[] s_propertySort;
    private static PointConverter();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
public class System.Drawing.RectangleConverter : TypeConverter {
    private static String[] s_propertySort;
    private static RectangleConverter();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
public class System.Drawing.SizeConverter : TypeConverter {
    private static String[] s_propertySort;
    private static SizeConverter();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
public class System.Drawing.SizeFConverter : TypeConverter {
    private static String[] s_propertySort;
    private static SizeFConverter();
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues);
    public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context);
    public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes);
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
internal class System.InvariantComparer : object {
    private CompareInfo _compareInfo;
    internal static InvariantComparer Default;
    private static InvariantComparer();
    public sealed virtual int Compare(object a, object b);
}
public class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Array { get; }
    internal static string Collection { get; }
    internal static string ConvertFromException { get; }
    internal static string ConvertInvalidPrimitive { get; }
    internal static string ConvertToException { get; }
    internal static string EnumConverterInvalidValue { get; }
    internal static string ErrorInvalidEventHandler { get; }
    internal static string ErrorInvalidEventType { get; }
    internal static string ErrorInvalidPropertyType { get; }
    internal static string ErrorMissingEventAccessors { get; }
    internal static string ErrorMissingPropertyAccessors { get; }
    internal static string InvalidMemberName { get; }
    internal static string none { get; }
    internal static string Null { get; }
    internal static string NullableConverterBadCtorArg { get; }
    internal static string Text { get; }
    internal static string TypeDescriptorAlreadyAssociated { get; }
    internal static string TypeDescriptorArgsCountMismatch { get; }
    internal static string TypeDescriptorProviderError { get; }
    internal static string TypeDescriptorExpectedElementType { get; }
    internal static string TypeDescriptorSameAssociation { get; }
    internal static string InvalidColor { get; }
    internal static string TextParseFailedFormat { get; }
    internal static string PropertyValueInvalidEntry { get; }
    internal static string InvalidParameter { get; }
    internal static string TimerInvalidInterval { get; }
    internal static string ToolboxItemAttributeFailedGetType { get; }
    internal static string PropertyTabAttributeBadPropertyTabScope { get; }
    internal static string PropertyTabAttributeTypeLoadException { get; }
    internal static string PropertyTabAttributeArrayLengthMismatch { get; }
    internal static string PropertyTabAttributeParamsBothNull { get; }
    internal static string CultureInfoConverterDefaultCultureString { get; }
    internal static string CultureInfoConverterInvalidCulture { get; }
    internal static string ErrorInvalidServiceInstance { get; }
    internal static string ErrorServiceExists { get; }
    internal static string InvalidArgumentValue { get; }
    internal static string InvalidNullArgument { get; }
    internal static string DuplicateComponentName { get; }
    internal static string MaskedTextProviderPasswordAndPromptCharError { get; }
    internal static string MaskedTextProviderInvalidCharError { get; }
    internal static string MaskedTextProviderMaskNullOrEmpty { get; }
    internal static string MaskedTextProviderMaskInvalidChar { get; }
    internal static string InstanceDescriptorCannotBeStatic { get; }
    internal static string InstanceDescriptorMustBeStatic { get; }
    internal static string InstanceDescriptorMustBeReadable { get; }
    internal static string InstanceDescriptorLengthMismatch { get; }
    internal static string MetaExtenderName { get; }
    internal static string CantModifyListSortDescriptionCollection { get; }
    internal static string LicExceptionTypeOnly { get; }
    internal static string LicExceptionTypeAndInstance { get; }
    internal static string LicMgrContextCannotBeChanged { get; }
    internal static string LicMgrAlreadyLocked { get; }
    internal static string LicMgrDifferentUser { get; }
    internal static string CollectionConverterText { get; }
    internal static string InstanceCreationEditorDefaultText { get; }
    internal static string ErrorPropertyAccessorException { get; }
    internal static string CHECKOUTCanceled { get; }
    internal static string toStringNone { get; }
    internal static string MemberRelationshipService_RelationshipNotSupported { get; }
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Array();
    internal static string get_Collection();
    internal static string get_ConvertFromException();
    internal static string get_ConvertInvalidPrimitive();
    internal static string get_ConvertToException();
    internal static string get_EnumConverterInvalidValue();
    internal static string get_ErrorInvalidEventHandler();
    internal static string get_ErrorInvalidEventType();
    internal static string get_ErrorInvalidPropertyType();
    internal static string get_ErrorMissingEventAccessors();
    internal static string get_ErrorMissingPropertyAccessors();
    internal static string get_InvalidMemberName();
    internal static string get_none();
    internal static string get_Null();
    internal static string get_NullableConverterBadCtorArg();
    internal static string get_Text();
    internal static string get_TypeDescriptorAlreadyAssociated();
    internal static string get_TypeDescriptorArgsCountMismatch();
    internal static string get_TypeDescriptorProviderError();
    internal static string get_TypeDescriptorExpectedElementType();
    internal static string get_TypeDescriptorSameAssociation();
    internal static string get_InvalidColor();
    internal static string get_TextParseFailedFormat();
    internal static string get_PropertyValueInvalidEntry();
    internal static string get_InvalidParameter();
    internal static string get_TimerInvalidInterval();
    internal static string get_ToolboxItemAttributeFailedGetType();
    internal static string get_PropertyTabAttributeBadPropertyTabScope();
    internal static string get_PropertyTabAttributeTypeLoadException();
    internal static string get_PropertyTabAttributeArrayLengthMismatch();
    internal static string get_PropertyTabAttributeParamsBothNull();
    internal static string get_CultureInfoConverterDefaultCultureString();
    internal static string get_CultureInfoConverterInvalidCulture();
    internal static string get_ErrorInvalidServiceInstance();
    internal static string get_ErrorServiceExists();
    internal static string get_InvalidArgumentValue();
    internal static string get_InvalidNullArgument();
    internal static string get_DuplicateComponentName();
    internal static string get_MaskedTextProviderPasswordAndPromptCharError();
    internal static string get_MaskedTextProviderInvalidCharError();
    internal static string get_MaskedTextProviderMaskNullOrEmpty();
    internal static string get_MaskedTextProviderMaskInvalidChar();
    internal static string get_InstanceDescriptorCannotBeStatic();
    internal static string get_InstanceDescriptorMustBeStatic();
    internal static string get_InstanceDescriptorMustBeReadable();
    internal static string get_InstanceDescriptorLengthMismatch();
    internal static string get_MetaExtenderName();
    internal static string get_CantModifyListSortDescriptionCollection();
    internal static string get_LicExceptionTypeOnly();
    internal static string get_LicExceptionTypeAndInstance();
    internal static string get_LicMgrContextCannotBeChanged();
    internal static string get_LicMgrAlreadyLocked();
    internal static string get_LicMgrDifferentUser();
    internal static string get_CollectionConverterText();
    internal static string get_InstanceCreationEditorDefaultText();
    internal static string get_ErrorPropertyAccessorException();
    internal static string get_CHECKOUTCanceled();
    internal static string get_toStringNone();
    internal static string get_MemberRelationshipService_RelationshipNotSupported();
}
public class System.Timers.ElapsedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DateTime <SignalTime>k__BackingField;
    public DateTime SignalTime { get; }
    internal ElapsedEventArgs(long fileTime);
    [CompilerGeneratedAttribute]
public DateTime get_SignalTime();
}
public class System.Timers.ElapsedEventHandler : MulticastDelegate {
    public ElapsedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ElapsedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ElapsedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultPropertyAttribute("Interval")]
[DefaultEventAttribute("Elapsed")]
public class System.Timers.Timer : Component {
    private double _interval;
    private bool _enabled;
    private bool _initializing;
    private bool _delayedEnable;
    private ElapsedEventHandler _onIntervalElapsed;
    private bool _autoReset;
    private ISynchronizeInvoke _synchronizingObject;
    private bool _disposed;
    private Timer _timer;
    private TimerCallback _callback;
    private object _cookie;
    [DefaultValueAttribute("True")]
[TimersDescriptionAttribute("TimerAutoReset", "")]
public bool AutoReset { get; public set; }
    [DefaultValueAttribute("False")]
[TimersDescriptionAttribute("TimerEnabled", "")]
public bool Enabled { get; public set; }
    [TimersDescriptionAttribute("TimerInterval", "")]
[DefaultValueAttribute("100")]
public double Interval { get; public set; }
    public ISite Site { get; public set; }
    [TimersDescriptionAttribute("TimerSynchronizingObject", "")]
[DefaultValueAttribute("")]
public ISynchronizeInvoke SynchronizingObject { get; public set; }
    public Timer(double interval);
    public bool get_AutoReset();
    public void set_AutoReset(bool value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    private void UpdateTimer();
    public double get_Interval();
    public void set_Interval(double value);
    public void add_Elapsed(ElapsedEventHandler value);
    public void remove_Elapsed(ElapsedEventHandler value);
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    public ISynchronizeInvoke get_SynchronizingObject();
    public void set_SynchronizingObject(ISynchronizeInvoke value);
    public sealed virtual void BeginInit();
    public void Close();
    protected virtual void Dispose(bool disposing);
    public sealed virtual void EndInit();
    public void Start();
    public void Stop();
    private void MyTimerCallback(object state);
}
[AttributeUsageAttribute("32767")]
public class System.Timers.TimersDescriptionAttribute : DescriptionAttribute {
    private bool _replaced;
    public string Description { get; }
    public TimersDescriptionAttribute(string description);
    internal TimersDescriptionAttribute(string description, string defaultValue);
    public virtual string get_Description();
}
public class System.UriTypeConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual bool IsValid(ITypeDescriptorContext context, object value);
}
