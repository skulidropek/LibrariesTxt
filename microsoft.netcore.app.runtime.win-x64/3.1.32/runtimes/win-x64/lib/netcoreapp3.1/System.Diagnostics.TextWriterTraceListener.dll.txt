internal static class FxResources.System.Diagnostics.TextWriterTraceListener.SR : object {
}
internal static class Interop : object {
}
public class System.Diagnostics.ConsoleTraceListener : TextWriterTraceListener {
    public ConsoleTraceListener(bool useErrorStream);
    public virtual void Close();
}
public class System.Diagnostics.DelimitedListTraceListener : TextWriterTraceListener {
    private string _delimiter;
    private string _secondaryDelim;
    public string Delimiter { get; public set; }
    public DelimitedListTraceListener(Stream stream);
    public DelimitedListTraceListener(Stream stream, string name);
    public DelimitedListTraceListener(TextWriter writer);
    public DelimitedListTraceListener(TextWriter writer, string name);
    public DelimitedListTraceListener(string fileName);
    public DelimitedListTraceListener(string fileName, string name);
    public string get_Delimiter();
    public void set_Delimiter(string value);
    protected virtual String[] GetSupportedAttributes();
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string format, Object[] args);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string message);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, object data);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, Object[] data);
    private void WriteHeader(string source, TraceEventType eventType, int id);
    private void WriteFooter(TraceEventCache eventCache);
    private void WriteEscaped(string message);
    private void WriteStackEscaped(Stack stack);
    private void EscapeMessage(string message, StringBuilder sb);
}
public class System.Diagnostics.TextWriterTraceListener : TraceListener {
    internal TextWriter _writer;
    private string _fileName;
    public TextWriter Writer { get; public set; }
    public TextWriterTraceListener(Stream stream);
    public TextWriterTraceListener(Stream stream, string name);
    public TextWriterTraceListener(TextWriter writer);
    public TextWriterTraceListener(TextWriter writer, string name);
    public TextWriterTraceListener(string fileName);
    public TextWriterTraceListener(string fileName, string name);
    public TextWriter get_Writer();
    public void set_Writer(TextWriter value);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual void Write(string message);
    public virtual void WriteLine(string message);
    private static Encoding GetEncodingWithFallback(Encoding encoding);
    internal void EnsureWriter();
    internal bool IsEnabled(TraceOptions opts);
}
internal static class System.Diagnostics.TraceListenerHelpers : object {
    private static String modreq(System.Runtime.CompilerServices.IsVolatile) s_processName;
    private static Boolean modreq(System.Runtime.CompilerServices.IsVolatile) s_hasProcessId;
    private static Int32 modreq(System.Runtime.CompilerServices.IsVolatile) s_processId;
    internal static int GetThreadId();
    internal static int GetProcessId();
    internal static string GetProcessName();
}
public class System.Diagnostics.XmlWriterTraceListener : TextWriterTraceListener {
    private string _machineName;
    private StringBuilder _strBldr;
    private XmlTextWriter _xmlBlobWriter;
    public XmlWriterTraceListener(Stream stream);
    public XmlWriterTraceListener(Stream stream, string name);
    public XmlWriterTraceListener(TextWriter writer);
    public XmlWriterTraceListener(TextWriter writer, string name);
    public XmlWriterTraceListener(string filename);
    public XmlWriterTraceListener(string filename, string name);
    public virtual void Write(string message);
    public virtual void WriteLine(string message);
    public virtual void Fail(string message, string detailMessage);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string format, Object[] args);
    public virtual void TraceEvent(TraceEventCache eventCache, string source, TraceEventType eventType, int id, string message);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, object data);
    public virtual void TraceData(TraceEventCache eventCache, string source, TraceEventType eventType, int id, Object[] data);
    private void WriteData(object data);
    public virtual void Close();
    public virtual void TraceTransfer(TraceEventCache eventCache, string source, int id, string message, Guid relatedActivityId);
    private void WriteHeader(string source, TraceEventType eventType, int id, TraceEventCache eventCache, Guid relatedActivityId);
    private void WriteHeader(string source, TraceEventType eventType, int id, TraceEventCache eventCache);
    private void WriteStartHeader(string source, TraceEventType eventType, int id, TraceEventCache eventCache);
    private void WriteEndHeader();
    private void WriteFooter(TraceEventCache eventCache);
    private void WriteEscaped(string str);
    private void InternalWrite(string message);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Generic_ArgCantBeEmptyString { get; }
    internal static string TraceAsTraceSource { get; }
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Generic_ArgCantBeEmptyString();
    internal static string get_TraceAsTraceSource();
}
