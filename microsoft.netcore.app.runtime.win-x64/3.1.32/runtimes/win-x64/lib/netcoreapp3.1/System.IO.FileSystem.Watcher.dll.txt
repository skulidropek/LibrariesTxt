internal static class FxResources.System.IO.FileSystem.Watcher.SR : object {
}
internal static class Interop : object {
}
public class System.IO.ErrorEventArgs : EventArgs {
    private Exception _exception;
    public ErrorEventArgs(Exception exception);
    public virtual Exception GetException();
}
public class System.IO.ErrorEventHandler : MulticastDelegate {
    public ErrorEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ErrorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ErrorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.IO.FileSystemEventArgs : EventArgs {
    private WatcherChangeTypes _changeType;
    private string _name;
    private string _fullPath;
    public WatcherChangeTypes ChangeType { get; }
    public string FullPath { get; }
    public string Name { get; }
    public FileSystemEventArgs(WatcherChangeTypes changeType, string directory, string name);
    internal static string Combine(string directoryPath, string name);
    public WatcherChangeTypes get_ChangeType();
    public string get_FullPath();
    public string get_Name();
}
public class System.IO.FileSystemEventHandler : MulticastDelegate {
    public FileSystemEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FileSystemEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FileSystemEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.IO.FileSystemWatcher : Component {
    private NormalizedFilterCollection _filters;
    private string _directory;
    private NotifyFilters _notifyFilters;
    private bool _includeSubdirectories;
    private bool _enabled;
    private bool _initializing;
    private UInt32 _internalBufferSize;
    private bool _disposed;
    private FileSystemEventHandler _onChangedHandler;
    private FileSystemEventHandler _onCreatedHandler;
    private FileSystemEventHandler _onDeletedHandler;
    private RenamedEventHandler _onRenamedHandler;
    private ErrorEventHandler _onErrorHandler;
    private static Char[] s_wildcards;
    [CompilerGeneratedAttribute]
private ISynchronizeInvoke <SynchronizingObject>k__BackingField;
    private int _currentSession;
    private SafeFileHandle _directoryHandle;
    public NotifyFilters NotifyFilter { get; public set; }
    public Collection`1<string> Filters { get; }
    public bool EnableRaisingEvents { get; public set; }
    public string Filter { get; public set; }
    public bool IncludeSubdirectories { get; public set; }
    public int InternalBufferSize { get; public set; }
    public string Path { get; public set; }
    public ISite Site { get; public set; }
    public ISynchronizeInvoke SynchronizingObject { get; public set; }
    public FileSystemWatcher(string path);
    public FileSystemWatcher(string path, string filter);
    private static FileSystemWatcher();
    public NotifyFilters get_NotifyFilter();
    public void set_NotifyFilter(NotifyFilters value);
    public Collection`1<string> get_Filters();
    public bool get_EnableRaisingEvents();
    public void set_EnableRaisingEvents(bool value);
    public string get_Filter();
    public void set_Filter(string value);
    public bool get_IncludeSubdirectories();
    public void set_IncludeSubdirectories(bool value);
    public int get_InternalBufferSize();
    public void set_InternalBufferSize(int value);
    private Byte[] AllocateBuffer();
    public string get_Path();
    public void set_Path(string value);
    public void add_Changed(FileSystemEventHandler value);
    public void remove_Changed(FileSystemEventHandler value);
    public void add_Created(FileSystemEventHandler value);
    public void remove_Created(FileSystemEventHandler value);
    public void add_Deleted(FileSystemEventHandler value);
    public void remove_Deleted(FileSystemEventHandler value);
    public void add_Error(ErrorEventHandler value);
    public void remove_Error(ErrorEventHandler value);
    public void add_Renamed(RenamedEventHandler value);
    public void remove_Renamed(RenamedEventHandler value);
    protected virtual void Dispose(bool disposing);
    private static void CheckPathValidity(string path);
    private bool MatchPattern(ReadOnlySpan`1<char> relativePath);
    private void NotifyInternalBufferOverflowEvent();
    private void NotifyRenameEventArgs(WatcherChangeTypes action, ReadOnlySpan`1<char> name, ReadOnlySpan`1<char> oldName);
    private FileSystemEventHandler GetHandler(WatcherChangeTypes changeType);
    private void NotifyFileSystemEventArgs(WatcherChangeTypes changeType, ReadOnlySpan`1<char> name);
    protected void OnChanged(FileSystemEventArgs e);
    protected void OnCreated(FileSystemEventArgs e);
    protected void OnDeleted(FileSystemEventArgs e);
    private void InvokeOn(FileSystemEventArgs e, FileSystemEventHandler handler);
    protected void OnError(ErrorEventArgs e);
    protected void OnRenamed(RenamedEventArgs e);
    public WaitForChangedResult WaitForChanged(WatcherChangeTypes changeType);
    public WaitForChangedResult WaitForChanged(WatcherChangeTypes changeType, int timeout);
    private void Restart();
    private void StartRaisingEventsIfNotDisposed();
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    [CompilerGeneratedAttribute]
public ISynchronizeInvoke get_SynchronizingObject();
    [CompilerGeneratedAttribute]
public void set_SynchronizingObject(ISynchronizeInvoke value);
    public sealed virtual void BeginInit();
    public sealed virtual void EndInit();
    private bool IsSuspended();
    private void StartRaisingEvents();
    private void StopRaisingEvents();
    private void FinalizeDispose();
    private static bool IsHandleInvalid(SafeFileHandle handle);
    private void Monitor(AsyncReadState state);
    private void ReadDirectoryChangesCallback(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* overlappedPointer);
    private void ParseEventBufferAndNotifyForEach(Byte[] buffer, UInt32 numBytes);
}
[TypeForwardedFromAttribute("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.IO.InternalBufferOverflowException : SystemException {
    public InternalBufferOverflowException(string message);
    public InternalBufferOverflowException(string message, Exception inner);
    protected InternalBufferOverflowException(SerializationInfo info, StreamingContext context);
}
[FlagsAttribute]
public enum System.IO.NotifyFilters : Enum {
    public int value__;
    public static NotifyFilters FileName;
    public static NotifyFilters DirectoryName;
    public static NotifyFilters Attributes;
    public static NotifyFilters Size;
    public static NotifyFilters LastWrite;
    public static NotifyFilters LastAccess;
    public static NotifyFilters CreationTime;
    public static NotifyFilters Security;
}
internal static class System.IO.PathInternal : object {
    private static bool s_isCaseSensitive;
    internal static StringComparison StringComparison { get; }
    internal static bool IsCaseSensitive { get; }
    private static PathInternal();
    internal static StringComparison get_StringComparison();
    internal static bool get_IsCaseSensitive();
    private static bool GetIsCaseSensitive();
    internal static bool IsValidDriveChar(char value);
    private static bool EndsWithPeriodOrSpace(string path);
    internal static string EnsureExtendedPrefixIfNeeded(string path);
    internal static string EnsureExtendedPrefix(string path);
    internal static bool IsDevice(string path);
    internal static bool IsExtended(string path);
    internal static bool IsPartiallyQualified(string path);
    internal static bool IsDirectorySeparator(char c);
}
public class System.IO.RenamedEventArgs : FileSystemEventArgs {
    private string _oldName;
    private string _oldFullPath;
    public string OldFullPath { get; }
    public string OldName { get; }
    public RenamedEventArgs(WatcherChangeTypes changeType, string directory, string name, string oldName);
    public string get_OldFullPath();
    public string get_OldName();
}
public class System.IO.RenamedEventHandler : MulticastDelegate {
    public RenamedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, RenamedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, RenamedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.IO.WaitForChangedResult : ValueType {
    internal static WaitForChangedResult TimedOutResult;
    [CompilerGeneratedAttribute]
private WatcherChangeTypes <ChangeType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OldName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TimedOut>k__BackingField;
    public WatcherChangeTypes ChangeType { get; public set; }
    public string Name { get; public set; }
    public string OldName { get; public set; }
    public bool TimedOut { get; public set; }
    internal WaitForChangedResult(WatcherChangeTypes changeType, string name, string oldName, bool timedOut);
    private static WaitForChangedResult();
    [CompilerGeneratedAttribute]
[IsReadOnlyAttribute]
public WatcherChangeTypes get_ChangeType();
    [CompilerGeneratedAttribute]
public void set_ChangeType(WatcherChangeTypes value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public string get_OldName();
    [CompilerGeneratedAttribute]
public void set_OldName(string value);
    [CompilerGeneratedAttribute]
[IsReadOnlyAttribute]
public bool get_TimedOut();
    [CompilerGeneratedAttribute]
public void set_TimedOut(bool value);
}
[FlagsAttribute]
public enum System.IO.WatcherChangeTypes : Enum {
    public int value__;
    public static WatcherChangeTypes Created;
    public static WatcherChangeTypes Deleted;
    public static WatcherChangeTypes Changed;
    public static WatcherChangeTypes Renamed;
    public static WatcherChangeTypes All;
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string BufferSizeTooLarge { get; }
    internal static string FSW_IOError { get; }
    internal static string FSW_BufferOverflow { get; }
    internal static string InvalidDirName { get; }
    internal static string InvalidDirName_NotExists { get; }
    internal static string InvalidEnumArgument { get; }
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static ResourceManager get_ResourceManager();
    internal static string get_BufferSizeTooLarge();
    internal static string get_FSW_IOError();
    internal static string get_FSW_BufferOverflow();
    internal static string get_InvalidDirName();
    internal static string get_InvalidDirName_NotExists();
    internal static string get_InvalidEnumArgument();
}
