internal static class FxResources.System.Net.Ping.SR : object {
}
internal static class Interop : object {
}
internal class Microsoft.Win32.SafeHandles.SafeLocalAllocHandle : SafeBuffer {
    internal static SafeLocalAllocHandle Zero;
    private static SafeLocalAllocHandle();
    internal static SafeLocalAllocHandle LocalAlloc(int cb);
    protected virtual bool ReleaseHandle();
}
[ExtensionAttribute]
internal static class System.Net.ByteOrder : object {
    [ExtensionAttribute]
public static void HostToNetworkBytes(ushort host, Byte[] bytes, int index);
}
[DefaultMemberAttribute("Item")]
internal class System.Net.Internals.SocketAddress : object {
    internal static int IPv6AddressSize;
    internal static int IPv4AddressSize;
    internal int InternalSize;
    internal Byte[] Buffer;
    private bool _changed;
    private int _hash;
    public AddressFamily Family { get; }
    public int Size { get; }
    public byte Item { get; public set; }
    public SocketAddress(AddressFamily family, int size);
    internal SocketAddress(IPAddress ipAddress);
    internal SocketAddress(IPAddress ipaddress, int port);
    private static SocketAddress();
    public AddressFamily get_Family();
    public int get_Size();
    public byte get_Item(int offset);
    public void set_Item(int offset, byte value);
    public virtual bool Equals(object comparand);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal enum System.Net.Internals.SocketType : Enum {
    public int value__;
    public static SocketType Stream;
    public static SocketType Dgram;
    public static SocketType Raw;
    public static SocketType Rdm;
    public static SocketType Seqpacket;
    public static SocketType Unknown;
}
[EventSourceAttribute]
internal class System.Net.NetEventSource : EventSource {
    public static NetEventSource Log;
    private static string MissingMember;
    private static string NullInstance;
    private static string StaticMethodObject;
    private static string NoParameters;
    private static int MaxDumpSize;
    private static int EnterEventId;
    private static int ExitEventId;
    private static int AssociateEventId;
    private static int InfoEventId;
    private static int ErrorEventId;
    private static int CriticalFailureEventId;
    private static int DumpArrayEventId;
    private static int EnumerateSecurityPackagesId;
    private static int SspiPackageNotFoundId;
    private static int AcquireDefaultCredentialId;
    private static int AcquireCredentialsHandleId;
    private static int InitializeSecurityContextId;
    private static int SecurityContextInputBufferId;
    private static int SecurityContextInputBuffersId;
    private static int AcceptSecuritContextId;
    private static int OperationReturnedSomethingId;
    private static int NextAvailableEventId;
    public static bool IsEnabled { get; }
    private static NetEventSource();
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, object arg0, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, object arg0, object arg1, string memberName);
    [NonEventAttribute]
public static void Enter(object thisOrContextObject, object arg0, object arg1, object arg2, string memberName);
    [EventAttribute("1")]
private void Enter(string thisOrContextObject, string memberName, string parameters);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, object arg0, string memberName);
    [NonEventAttribute]
public static void Exit(object thisOrContextObject, object arg0, object arg1, string memberName);
    [EventAttribute("2")]
private void Exit(string thisOrContextObject, string memberName, string result);
    [NonEventAttribute]
public static void Info(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Info(object thisOrContextObject, object message, string memberName);
    [EventAttribute("4")]
private void Info(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void Error(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Error(object thisOrContextObject, object message, string memberName);
    [EventAttribute("5")]
private void ErrorMessage(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void Fail(object thisOrContextObject, FormattableString formattableString, string memberName);
    [NonEventAttribute]
public static void Fail(object thisOrContextObject, object message, string memberName);
    [EventAttribute("6")]
private void CriticalFailure(string thisOrContextObject, string memberName, string message);
    [NonEventAttribute]
public static void DumpBuffer(object thisOrContextObject, Byte[] buffer, string memberName);
    [NonEventAttribute]
public static void DumpBuffer(object thisOrContextObject, Byte[] buffer, int offset, int count, string memberName);
    [NonEventAttribute]
public static void DumpBuffer(object thisOrContextObject, IntPtr bufferPtr, int count, string memberName);
    [EventAttribute("7")]
private void DumpBuffer(string thisOrContextObject, string memberName, Byte[] buffer);
    [NonEventAttribute]
public static void Associate(object first, object second, string memberName);
    [NonEventAttribute]
public static void Associate(object thisOrContextObject, object first, object second, string memberName);
    [EventAttribute("3")]
private void Associate(string thisOrContextObject, string memberName, string first, string second);
    [ConditionalAttribute("DEBUG_NETEVENTSOURCE_MISUSE")]
private static void DebugValidateArg(object arg);
    [ConditionalAttribute("DEBUG_NETEVENTSOURCE_MISUSE")]
private static void DebugValidateArg(FormattableString arg);
    public static bool get_IsEnabled();
    [NonEventAttribute]
public static string IdOf(object value);
    [NonEventAttribute]
public static int GetHashCode(object value);
    [NonEventAttribute]
public static object Format(object value);
    [NonEventAttribute]
private static string Format(FormattableString s);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, string arg3, string arg4);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, Byte[] arg3);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, int arg2, int arg3, int arg4);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, int arg2, string arg3);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, int arg3);
    [NonEventAttribute]
private void WriteEvent(int eventId, string arg1, string arg2, string arg3, int arg4);
}
public enum System.Net.NetworkInformation.IPStatus : Enum {
    public int value__;
    public static IPStatus Success;
    public static IPStatus DestinationNetworkUnreachable;
    public static IPStatus DestinationHostUnreachable;
    public static IPStatus DestinationProtocolUnreachable;
    public static IPStatus DestinationPortUnreachable;
    public static IPStatus DestinationProhibited;
    public static IPStatus NoResources;
    public static IPStatus BadOption;
    public static IPStatus HardwareError;
    public static IPStatus PacketTooBig;
    public static IPStatus TimedOut;
    public static IPStatus BadRoute;
    public static IPStatus TtlExpired;
    public static IPStatus TtlReassemblyTimeExceeded;
    public static IPStatus ParameterProblem;
    public static IPStatus SourceQuench;
    public static IPStatus BadDestination;
    public static IPStatus DestinationUnreachable;
    public static IPStatus TimeExceeded;
    public static IPStatus BadHeader;
    public static IPStatus UnrecognizedNextHeader;
    public static IPStatus IcmpError;
    public static IPStatus DestinationScopeMismatch;
    public static IPStatus Unknown;
}
public class System.Net.NetworkInformation.Ping : Component {
    private ManualResetEventSlim _lockObject;
    private SendOrPostCallback _onPingCompletedDelegate;
    private bool _disposeRequested;
    private Byte[] _defaultSendBuffer;
    private bool _canceled;
    private int _status;
    [CompilerGeneratedAttribute]
private PingCompletedEventHandler PingCompleted;
    private static SafeWaitHandle s_nullSafeWaitHandle;
    private static object s_socketInitializationLock;
    private static bool s_socketInitialized;
    private int _sendSize;
    private bool _ipv6;
    private ManualResetEvent _pingEvent;
    private RegisteredWaitHandle _registeredWait;
    private SafeLocalAllocHandle _requestBuffer;
    private SafeLocalAllocHandle _replyBuffer;
    private SafeCloseIcmpHandle _handlePingV4;
    private SafeCloseIcmpHandle _handlePingV6;
    private TaskCompletionSource`1<PingReply> _taskCompletionSource;
    private Byte[] DefaultSendBuffer { get; }
    private static Ping();
    private void CheckArgs(int timeout, Byte[] buffer, PingOptions options);
    private void CheckArgs(IPAddress address, int timeout, Byte[] buffer, PingOptions options);
    private void CheckDisposed();
    private void CheckStart();
    private static IPAddress GetAddressSnapshot(IPAddress address);
    private void Finish();
    private void InternalDispose();
    protected virtual void Dispose(bool disposing);
    [CompilerGeneratedAttribute]
public void add_PingCompleted(PingCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_PingCompleted(PingCompletedEventHandler value);
    protected void OnPingCompleted(PingCompletedEventArgs e);
    public PingReply Send(string hostNameOrAddress);
    public PingReply Send(string hostNameOrAddress, int timeout);
    public PingReply Send(IPAddress address);
    public PingReply Send(IPAddress address, int timeout);
    public PingReply Send(string hostNameOrAddress, int timeout, Byte[] buffer);
    public PingReply Send(IPAddress address, int timeout, Byte[] buffer);
    public PingReply Send(string hostNameOrAddress, int timeout, Byte[] buffer, PingOptions options);
    public PingReply Send(IPAddress address, int timeout, Byte[] buffer, PingOptions options);
    public void SendAsync(string hostNameOrAddress, object userToken);
    public void SendAsync(string hostNameOrAddress, int timeout, object userToken);
    public void SendAsync(IPAddress address, object userToken);
    public void SendAsync(IPAddress address, int timeout, object userToken);
    public void SendAsync(string hostNameOrAddress, int timeout, Byte[] buffer, object userToken);
    public void SendAsync(IPAddress address, int timeout, Byte[] buffer, object userToken);
    public void SendAsync(string hostNameOrAddress, int timeout, Byte[] buffer, PingOptions options, object userToken);
    public void SendAsync(IPAddress address, int timeout, Byte[] buffer, PingOptions options, object userToken);
    private void TranslateTaskToEap(object userToken, Task`1<PingReply> pingTask);
    public Task`1<PingReply> SendPingAsync(IPAddress address);
    public Task`1<PingReply> SendPingAsync(string hostNameOrAddress);
    public Task`1<PingReply> SendPingAsync(IPAddress address, int timeout);
    public Task`1<PingReply> SendPingAsync(string hostNameOrAddress, int timeout);
    public Task`1<PingReply> SendPingAsync(IPAddress address, int timeout, Byte[] buffer);
    public Task`1<PingReply> SendPingAsync(string hostNameOrAddress, int timeout, Byte[] buffer);
    public Task`1<PingReply> SendPingAsync(IPAddress address, int timeout, Byte[] buffer, PingOptions options);
    [AsyncStateMachineAttribute("System.Net.NetworkInformation.Ping/<SendPingAsyncInternal>d__50")]
private Task`1<PingReply> SendPingAsyncInternal(IPAddress address, int timeout, Byte[] buffer, PingOptions options);
    public Task`1<PingReply> SendPingAsync(string hostNameOrAddress, int timeout, Byte[] buffer, PingOptions options);
    public void SendAsyncCancel();
    private PingReply GetAddressAndSend(string hostNameOrAddress, int timeout, Byte[] buffer, PingOptions options);
    [AsyncStateMachineAttribute("System.Net.NetworkInformation.Ping/<GetAddressAndSendAsync>d__54")]
private Task`1<PingReply> GetAddressAndSendAsync(string hostNameOrAddress, int timeout, Byte[] buffer, PingOptions options);
    private void TestIsIpSupported(IPAddress ip);
    private static void InitializeSockets();
    private void InternalDisposeCore();
    private Byte[] get_DefaultSendBuffer();
    private PingReply SendPingCore(IPAddress address, Byte[] buffer, int timeout, PingOptions options);
    private Task`1<PingReply> SendPingAsyncCore(IPAddress address, Byte[] buffer, int timeout, PingOptions options);
    private Task`1<PingReply> DoSendPingCore(IPAddress address, Byte[] buffer, int timeout, PingOptions options, bool isAsync);
    private void RegisterWaitHandle();
    private void UnregisterWaitHandle();
    private SafeWaitHandle GetWaitHandle(bool async);
    private void InitialiseIcmpHandle();
    private int SendEcho(IPAddress address, Byte[] buffer, int timeout, PingOptions options, bool isAsync);
    private PingReply CreatePingReply();
    private void Cleanup(bool isAsync);
    private void PingCallback();
    private void SetUnmanagedStructures(Byte[] buffer);
    private void FreeUnmanagedStructures();
    private static IPStatus GetStatusFromCode(int statusCode);
    private static PingReply CreatePingReplyFromIcmpEchoReply(IcmpEchoReply reply);
    private static PingReply CreatePingReplyFromIcmp6EchoReply(Icmp6EchoReply reply, IntPtr dataPtr, int sendSize);
    [CompilerGeneratedAttribute]
private void <TranslateTaskToEap>b__42_0(Task`1<PingReply> t, object state);
    [CompilerGeneratedAttribute]
private void <TranslateTaskToEap>b__42_1(object o);
}
public class System.Net.NetworkInformation.PingCompletedEventArgs : AsyncCompletedEventArgs {
    [CompilerGeneratedAttribute]
private PingReply <Reply>k__BackingField;
    public PingReply Reply { get; }
    internal PingCompletedEventArgs(PingReply reply, Exception error, bool cancelled, object userToken);
    [CompilerGeneratedAttribute]
public PingReply get_Reply();
}
public class System.Net.NetworkInformation.PingCompletedEventHandler : MulticastDelegate {
    public PingCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PingCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PingCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[TypeForwardedFromAttribute("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Net.NetworkInformation.PingException : InvalidOperationException {
    public PingException(string message);
    public PingException(string message, Exception innerException);
    protected PingException(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
public class System.Net.NetworkInformation.PingOptions : object {
    private int _ttl;
    private bool _dontFragment;
    public int Ttl { get; public set; }
    public bool DontFragment { get; public set; }
    public PingOptions(int ttl, bool dontFragment);
    public int get_Ttl();
    public void set_Ttl(int value);
    public bool get_DontFragment();
    public void set_DontFragment(bool value);
}
public class System.Net.NetworkInformation.PingReply : object {
    private IPAddress _address;
    private PingOptions _options;
    private IPStatus _ipStatus;
    private long _rtt;
    private Byte[] _buffer;
    public IPStatus Status { get; }
    public IPAddress Address { get; }
    public long RoundtripTime { get; }
    public PingOptions Options { get; }
    public Byte[] Buffer { get; }
    internal PingReply(IPAddress address, PingOptions options, IPStatus ipStatus, long rtt, Byte[] buffer);
    public IPStatus get_Status();
    public IPAddress get_Address();
    public long get_RoundtripTime();
    public PingOptions get_Options();
    public Byte[] get_Buffer();
}
internal static class System.Net.SocketAddressPal : object {
    public static AddressFamily GetAddressFamily(Byte[] buffer);
    public static void SetAddressFamily(Byte[] buffer, AddressFamily family);
    public static void SetPort(Byte[] buffer, ushort port);
    public static void SetIPv4Address(Byte[] buffer, UInt32 address);
    public static void SetIPv6Address(Byte[] buffer, Span`1<byte> address, UInt32 scope);
}
internal class System.Net.SocketProtocolSupportPal : object {
    private static bool s_ipv4;
    private static bool s_ipv6;
    private static bool s_initialized;
    private static object s_initializedLock;
    public static bool OSSupportsIPv6 { get; }
    public static bool OSSupportsIPv4 { get; }
    private static SocketProtocolSupportPal();
    public static bool get_OSSupportsIPv6();
    public static bool get_OSSupportsIPv4();
    private static void EnsureInitialized();
    private static bool IsProtocolSupported(AddressFamily af);
}
[ExtensionAttribute]
internal static class System.Net.Sockets.IPEndPointExtensions : object {
    public static SocketAddress Serialize(EndPoint endpoint);
    private static SocketAddress GetInternalSocketAddress(SocketAddress address);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string net_inasync { get; }
    internal static string net_invalidPingBufferSize { get; }
    internal static string net_invalid_ip_addr { get; }
    internal static string net_ping { get; }
    internal static string net_ipv4_not_installed { get; }
    internal static string net_ipv6_not_installed { get; }
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static ResourceManager get_ResourceManager();
    internal static string get_net_inasync();
    internal static string get_net_invalidPingBufferSize();
    internal static string get_net_invalid_ip_addr();
    internal static string get_net_ping();
    internal static string get_net_ipv4_not_installed();
    internal static string get_net_ipv6_not_installed();
}
