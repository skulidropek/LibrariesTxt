internal static class FxResources.System.Security.Claims.SR : object {
}
public class System.Security.Claims.Claim : object {
    private Byte[] _userSerializationData;
    private string _issuer;
    private string _originalIssuer;
    private Dictionary`2<string, string> _properties;
    private ClaimsIdentity _subject;
    private string _type;
    private string _value;
    private string _valueType;
    protected Byte[] CustomSerializationData { get; }
    public string Issuer { get; }
    public string OriginalIssuer { get; }
    public IDictionary`2<string, string> Properties { get; }
    public ClaimsIdentity Subject { get; }
    public string Type { get; }
    public string Value { get; }
    public string ValueType { get; }
    public Claim(BinaryReader reader);
    public Claim(BinaryReader reader, ClaimsIdentity subject);
    public Claim(string type, string value);
    public Claim(string type, string value, string valueType);
    public Claim(string type, string value, string valueType, string issuer);
    public Claim(string type, string value, string valueType, string issuer, string originalIssuer);
    public Claim(string type, string value, string valueType, string issuer, string originalIssuer, ClaimsIdentity subject);
    internal Claim(string type, string value, string valueType, string issuer, string originalIssuer, ClaimsIdentity subject, string propertyKey, string propertyValue);
    protected Claim(Claim other);
    protected Claim(Claim other, ClaimsIdentity subject);
    protected virtual Byte[] get_CustomSerializationData();
    public string get_Issuer();
    public string get_OriginalIssuer();
    public IDictionary`2<string, string> get_Properties();
    public ClaimsIdentity get_Subject();
    public string get_Type();
    public string get_Value();
    public string get_ValueType();
    public virtual Claim Clone();
    public virtual Claim Clone(ClaimsIdentity identity);
    public virtual void WriteTo(BinaryWriter writer);
    protected virtual void WriteTo(BinaryWriter writer, Byte[] userData);
    public virtual string ToString();
}
public class System.Security.Claims.ClaimsIdentity : object {
    private Byte[] _userSerializationData;
    private ClaimsIdentity _actor;
    private string _authenticationType;
    private object _bootstrapContext;
    private List`1<List`1<Claim>> _externalClaims;
    private string _label;
    private List`1<Claim> _instanceClaims;
    private string _nameClaimType;
    private string _roleClaimType;
    public static string DefaultIssuer;
    public static string DefaultNameClaimType;
    public static string DefaultRoleClaimType;
    public string AuthenticationType { get; }
    public bool IsAuthenticated { get; }
    public ClaimsIdentity Actor { get; public set; }
    public object BootstrapContext { get; public set; }
    public IEnumerable`1<Claim> Claims { get; }
    protected Byte[] CustomSerializationData { get; }
    internal List`1<List`1<Claim>> ExternalClaims { get; }
    public string Label { get; public set; }
    public string Name { get; }
    public string NameClaimType { get; }
    public string RoleClaimType { get; }
    public ClaimsIdentity(IIdentity identity);
    public ClaimsIdentity(IEnumerable`1<Claim> claims);
    public ClaimsIdentity(string authenticationType);
    public ClaimsIdentity(IEnumerable`1<Claim> claims, string authenticationType);
    public ClaimsIdentity(IIdentity identity, IEnumerable`1<Claim> claims);
    public ClaimsIdentity(string authenticationType, string nameType, string roleType);
    public ClaimsIdentity(IEnumerable`1<Claim> claims, string authenticationType, string nameType, string roleType);
    public ClaimsIdentity(IIdentity identity, IEnumerable`1<Claim> claims, string authenticationType, string nameType, string roleType);
    public ClaimsIdentity(BinaryReader reader);
    protected ClaimsIdentity(ClaimsIdentity other);
    protected ClaimsIdentity(SerializationInfo info, StreamingContext context);
    protected ClaimsIdentity(SerializationInfo info);
    public virtual string get_AuthenticationType();
    public virtual bool get_IsAuthenticated();
    public ClaimsIdentity get_Actor();
    public void set_Actor(ClaimsIdentity value);
    public object get_BootstrapContext();
    public void set_BootstrapContext(object value);
    public virtual IEnumerable`1<Claim> get_Claims();
    [IteratorStateMachineAttribute("System.Security.Claims.ClaimsIdentity/<CombinedClaimsIterator>d__44")]
private IEnumerable`1<Claim> CombinedClaimsIterator();
    protected virtual Byte[] get_CustomSerializationData();
    internal List`1<List`1<Claim>> get_ExternalClaims();
    public string get_Label();
    public void set_Label(string value);
    public virtual string get_Name();
    public string get_NameClaimType();
    public string get_RoleClaimType();
    public virtual ClaimsIdentity Clone();
    public virtual void AddClaim(Claim claim);
    public virtual void AddClaims(IEnumerable`1<Claim> claims);
    public virtual bool TryRemoveClaim(Claim claim);
    public virtual void RemoveClaim(Claim claim);
    private void SafeAddClaims(IEnumerable`1<Claim> claims);
    private void SafeAddClaim(Claim claim);
    [IteratorStateMachineAttribute("System.Security.Claims.ClaimsIdentity/<FindAll>d__65")]
public virtual IEnumerable`1<Claim> FindAll(Predicate`1<Claim> match);
    [IteratorStateMachineAttribute("System.Security.Claims.ClaimsIdentity/<FindAll>d__66")]
public virtual IEnumerable`1<Claim> FindAll(string type);
    public virtual Claim FindFirst(Predicate`1<Claim> match);
    public virtual Claim FindFirst(string type);
    public virtual bool HasClaim(Predicate`1<Claim> match);
    public virtual bool HasClaim(string type, string value);
    private void Initialize(BinaryReader reader);
    protected virtual Claim CreateClaim(BinaryReader reader);
    public virtual void WriteTo(BinaryWriter writer);
    protected virtual void WriteTo(BinaryWriter writer, Byte[] userData);
    private bool IsCircular(ClaimsIdentity subject);
    protected virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Security.Claims.ClaimsPrincipal : object {
    private List`1<ClaimsIdentity> _identities;
    private Byte[] _userSerializationData;
    private static Func`2<IEnumerable`1<ClaimsIdentity>, ClaimsIdentity> s_identitySelector;
    private static Func`1<ClaimsPrincipal> s_principalSelector;
    public static Func`2<IEnumerable`1<ClaimsIdentity>, ClaimsIdentity> PrimaryIdentitySelector { get; public set; }
    public static Func`1<ClaimsPrincipal> ClaimsPrincipalSelector { get; public set; }
    public IEnumerable`1<Claim> Claims { get; }
    protected Byte[] CustomSerializationData { get; }
    public static ClaimsPrincipal Current { get; }
    public IEnumerable`1<ClaimsIdentity> Identities { get; }
    public IIdentity Identity { get; }
    protected ClaimsPrincipal(SerializationInfo info, StreamingContext context);
    public ClaimsPrincipal(IEnumerable`1<ClaimsIdentity> identities);
    public ClaimsPrincipal(IIdentity identity);
    public ClaimsPrincipal(IPrincipal principal);
    public ClaimsPrincipal(BinaryReader reader);
    private static ClaimsPrincipal();
    private static ClaimsIdentity SelectPrimaryIdentity(IEnumerable`1<ClaimsIdentity> identities);
    public static Func`2<IEnumerable`1<ClaimsIdentity>, ClaimsIdentity> get_PrimaryIdentitySelector();
    public static void set_PrimaryIdentitySelector(Func`2<IEnumerable`1<ClaimsIdentity>, ClaimsIdentity> value);
    public static Func`1<ClaimsPrincipal> get_ClaimsPrincipalSelector();
    public static void set_ClaimsPrincipalSelector(Func`1<ClaimsPrincipal> value);
    public virtual void AddIdentity(ClaimsIdentity identity);
    public virtual void AddIdentities(IEnumerable`1<ClaimsIdentity> identities);
    [IteratorStateMachineAttribute("System.Security.Claims.ClaimsPrincipal/<get_Claims>d__21")]
public virtual IEnumerable`1<Claim> get_Claims();
    protected virtual Byte[] get_CustomSerializationData();
    public virtual ClaimsPrincipal Clone();
    protected virtual ClaimsIdentity CreateClaimsIdentity(BinaryReader reader);
    public static ClaimsPrincipal get_Current();
    [IteratorStateMachineAttribute("System.Security.Claims.ClaimsPrincipal/<FindAll>d__28")]
public virtual IEnumerable`1<Claim> FindAll(Predicate`1<Claim> match);
    [IteratorStateMachineAttribute("System.Security.Claims.ClaimsPrincipal/<FindAll>d__29")]
public virtual IEnumerable`1<Claim> FindAll(string type);
    public virtual Claim FindFirst(Predicate`1<Claim> match);
    public virtual Claim FindFirst(string type);
    public virtual bool HasClaim(Predicate`1<Claim> match);
    public virtual bool HasClaim(string type, string value);
    public virtual IEnumerable`1<ClaimsIdentity> get_Identities();
    public virtual IIdentity get_Identity();
    public virtual bool IsInRole(string role);
    public virtual void WriteTo(BinaryWriter writer);
    protected virtual void WriteTo(BinaryWriter writer, Byte[] userData);
    [OnSerializingAttribute]
private void OnSerializingMethod(StreamingContext context);
    protected virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public static class System.Security.Claims.ClaimTypes : object {
    public static string AuthenticationInstant;
    public static string AuthenticationMethod;
    public static string CookiePath;
    public static string DenyOnlyPrimarySid;
    public static string DenyOnlyPrimaryGroupSid;
    public static string DenyOnlyWindowsDeviceGroup;
    public static string Dsa;
    public static string Expiration;
    public static string Expired;
    public static string GroupSid;
    public static string IsPersistent;
    public static string PrimaryGroupSid;
    public static string PrimarySid;
    public static string Role;
    public static string SerialNumber;
    public static string UserData;
    public static string Version;
    public static string WindowsAccountName;
    public static string WindowsDeviceClaim;
    public static string WindowsDeviceGroup;
    public static string WindowsUserClaim;
    public static string WindowsFqbnVersion;
    public static string WindowsSubAuthority;
    public static string Anonymous;
    public static string Authentication;
    public static string AuthorizationDecision;
    public static string Country;
    public static string DateOfBirth;
    public static string Dns;
    public static string DenyOnlySid;
    public static string Email;
    public static string Gender;
    public static string GivenName;
    public static string Hash;
    public static string HomePhone;
    public static string Locality;
    public static string MobilePhone;
    public static string Name;
    public static string NameIdentifier;
    public static string OtherPhone;
    public static string PostalCode;
    public static string Rsa;
    public static string Sid;
    public static string Spn;
    public static string StateOrProvince;
    public static string StreetAddress;
    public static string Surname;
    public static string System;
    public static string Thumbprint;
    public static string Upn;
    public static string Uri;
    public static string Webpage;
    public static string X500DistinguishedName;
    public static string Actor;
}
public static class System.Security.Claims.ClaimValueTypes : object {
    public static string Base64Binary;
    public static string Base64Octet;
    public static string Boolean;
    public static string Date;
    public static string DateTime;
    public static string Double;
    public static string Fqbn;
    public static string HexBinary;
    public static string Integer;
    public static string Integer32;
    public static string Integer64;
    public static string Sid;
    public static string String;
    public static string Time;
    public static string UInteger32;
    public static string UInteger64;
    public static string DnsName;
    public static string Email;
    public static string Rsa;
    public static string UpnName;
    public static string DsaKeyValue;
    public static string KeyInfo;
    public static string RsaKeyValue;
    public static string DaytimeDuration;
    public static string YearMonthDuration;
    public static string Rfc822Name;
    public static string X500Name;
}
public class System.Security.Principal.GenericIdentity : ClaimsIdentity {
    private string m_name;
    private string m_type;
    public IEnumerable`1<Claim> Claims { get; }
    public string Name { get; }
    public string AuthenticationType { get; }
    public bool IsAuthenticated { get; }
    public GenericIdentity(string name);
    public GenericIdentity(string name, string type);
    protected GenericIdentity(GenericIdentity identity);
    public virtual ClaimsIdentity Clone();
    public virtual IEnumerable`1<Claim> get_Claims();
    public virtual string get_Name();
    public virtual string get_AuthenticationType();
    public virtual bool get_IsAuthenticated();
    private void AddNameClaim();
}
public class System.Security.Principal.GenericPrincipal : ClaimsPrincipal {
    private IIdentity m_identity;
    private String[] m_roles;
    public IIdentity Identity { get; }
    public GenericPrincipal(IIdentity identity, String[] roles);
    private void AddIdentityWithRoles(IIdentity identity, String[] roles);
    public virtual IIdentity get_Identity();
    public virtual bool IsInRole(string role);
    private static IPrincipal GetDefaultInstance();
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string InvalidOperation_ClaimCannotBeRemoved { get; }
    internal static string InvalidOperationException_ActorGraphCircular { get; }
    internal static string PlatformNotSupported_Serialization { get; }
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static ResourceManager get_ResourceManager();
    internal static string get_InvalidOperation_ClaimCannotBeRemoved();
    internal static string get_InvalidOperationException_ActorGraphCircular();
    internal static string get_PlatformNotSupported_Serialization();
}
