internal static class FxResources.System.Security.Principal.Windows.SR : object {
}
internal static class Interop : object {
}
public class Microsoft.Win32.SafeHandles.SafeAccessTokenHandle : SafeHandle {
    public static SafeAccessTokenHandle InvalidHandle { get; }
    public bool IsInvalid { get; }
    public SafeAccessTokenHandle(IntPtr handle);
    public static SafeAccessTokenHandle get_InvalidHandle();
    public virtual bool get_IsInvalid();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Win32.SafeHandles.SafeLocalAllocHandle : SafeBuffer {
    internal static SafeLocalAllocHandle Zero;
    internal static SafeLocalAllocHandle InvalidHandle { get; }
    internal SafeLocalAllocHandle(IntPtr handle);
    private static SafeLocalAllocHandle();
    internal static SafeLocalAllocHandle get_InvalidHandle();
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Win32.SafeHandles.SafeLsaHandle : SafeHandle {
    public bool IsInvalid { get; }
    protected sealed virtual bool ReleaseHandle();
    public sealed virtual bool get_IsInvalid();
}
internal class Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle : SafeBuffer {
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle : SafeHandleZeroOrMinusOneIsInvalid {
    protected virtual bool ReleaseHandle();
}
internal class Microsoft.Win32.SafeHandles.SafeLsaReturnBufferHandle : SafeBuffer {
    protected virtual bool ReleaseHandle();
}
internal enum System.Security.Principal.IdentifierAuthority : Enum {
    public long value__;
    public static IdentifierAuthority NullAuthority;
    public static IdentifierAuthority WorldAuthority;
    public static IdentifierAuthority LocalAuthority;
    public static IdentifierAuthority CreatorAuthority;
    public static IdentifierAuthority NonUniqueAuthority;
    public static IdentifierAuthority NTAuthority;
    public static IdentifierAuthority SiteServerAuthority;
    public static IdentifierAuthority InternetSiteAuthority;
    public static IdentifierAuthority ExchangeAuthority;
    public static IdentifierAuthority ResourceManagerAuthority;
}
[TypeForwardedFromAttribute("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Security.Principal.IdentityNotMappedException : SystemException {
    private IdentityReferenceCollection _unmappedIdentities;
    public IdentityReferenceCollection UnmappedIdentities { get; }
    public IdentityNotMappedException(string message);
    public IdentityNotMappedException(string message, Exception inner);
    internal IdentityNotMappedException(string message, IdentityReferenceCollection unmappedIdentities);
    private IdentityNotMappedException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public IdentityReferenceCollection get_UnmappedIdentities();
}
public abstract class System.Security.Principal.IdentityReference : object {
    public string Value { get; }
    public abstract virtual string get_Value();
    public abstract virtual bool IsValidTargetType(Type targetType);
    public abstract virtual IdentityReference Translate(Type targetType);
    public abstract virtual bool Equals(object o);
    public abstract virtual int GetHashCode();
    public abstract virtual string ToString();
    public static bool op_Equality(IdentityReference left, IdentityReference right);
    public static bool op_Inequality(IdentityReference left, IdentityReference right);
}
[DefaultMemberAttribute("Item")]
public class System.Security.Principal.IdentityReferenceCollection : object {
    private List`1<IdentityReference> _Identities;
    public int Count { get; }
    private bool System.Collections.Generic.ICollection<System.Security.Principal.IdentityReference>.IsReadOnly { get; }
    public IdentityReference Item { get; public set; }
    internal List`1<IdentityReference> Identities { get; }
    public IdentityReferenceCollection(int capacity);
    public sealed virtual void CopyTo(IdentityReference[] array, int offset);
    public sealed virtual int get_Count();
    private sealed virtual override bool System.Collections.Generic.ICollection<System.Security.Principal.IdentityReference>.get_IsReadOnly();
    public sealed virtual void Add(IdentityReference identity);
    public sealed virtual bool Remove(IdentityReference identity);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(IdentityReference identity);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<IdentityReference> GetEnumerator();
    public IdentityReference get_Item(int index);
    public void set_Item(int index, IdentityReference value);
    internal List`1<IdentityReference> get_Identities();
    public IdentityReferenceCollection Translate(Type targetType);
    public IdentityReferenceCollection Translate(Type targetType, bool forceSuccess);
}
internal class System.Security.Principal.IdentityReferenceEnumerator : object {
    private int _current;
    private IdentityReferenceCollection _collection;
    private object System.Collections.IEnumerator.Current { get; }
    public IdentityReference Current { get; }
    internal IdentityReferenceEnumerator(IdentityReferenceCollection collection);
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual IdentityReference get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
    public sealed virtual void Dispose();
}
public class System.Security.Principal.NTAccount : IdentityReference {
    private string _name;
    public string Value { get; }
    public NTAccount(string domainName, string accountName);
    public NTAccount(string name);
    public virtual string get_Value();
    public virtual bool IsValidTargetType(Type targetType);
    public virtual IdentityReference Translate(Type targetType);
    public virtual bool Equals(object o);
    public virtual int GetHashCode();
    public virtual string ToString();
    internal static IdentityReferenceCollection Translate(IdentityReferenceCollection sourceAccounts, Type targetType, bool forceSuccess);
    internal static IdentityReferenceCollection Translate(IdentityReferenceCollection sourceAccounts, Type targetType, Boolean& someFailed);
    public static bool op_Equality(NTAccount left, NTAccount right);
    public static bool op_Inequality(NTAccount left, NTAccount right);
    private static IdentityReferenceCollection TranslateToSids(IdentityReferenceCollection sourceAccounts, Boolean& someFailed);
}
[FlagsAttribute]
internal enum System.Security.Principal.PolicyRights : Enum {
    public int value__;
    public static PolicyRights POLICY_VIEW_LOCAL_INFORMATION;
    public static PolicyRights POLICY_VIEW_AUDIT_INFORMATION;
    public static PolicyRights POLICY_GET_PRIVATE_INFORMATION;
    public static PolicyRights POLICY_TRUST_ADMIN;
    public static PolicyRights POLICY_CREATE_ACCOUNT;
    public static PolicyRights POLICY_CREATE_SECRET;
    public static PolicyRights POLICY_CREATE_PRIVILEGE;
    public static PolicyRights POLICY_SET_DEFAULT_QUOTA_LIMITS;
    public static PolicyRights POLICY_SET_AUDIT_REQUIREMENTS;
    public static PolicyRights POLICY_AUDIT_LOG_ADMIN;
    public static PolicyRights POLICY_SERVER_ADMIN;
    public static PolicyRights POLICY_LOOKUP_NAMES;
    public static PolicyRights POLICY_NOTIFICATION;
}
public class System.Security.Principal.SecurityIdentifier : IdentityReference {
    internal static long MaxIdentifierAuthority;
    internal static byte MaxSubAuthorities;
    public static int MinBinaryLength;
    public static int MaxBinaryLength;
    private IdentifierAuthority _identifierAuthority;
    private Int32[] _subAuthorities;
    private Byte[] _binaryForm;
    private SecurityIdentifier _accountDomainSid;
    private bool _accountDomainSidInitialized;
    private string _sddlForm;
    internal static byte Revision { get; }
    internal Byte[] BinaryForm { get; }
    internal IdentifierAuthority IdentifierAuthority { get; }
    internal int SubAuthorityCount { get; }
    public int BinaryLength { get; }
    public SecurityIdentifier AccountDomainSid { get; }
    public string Value { get; }
    public SecurityIdentifier(string sddlForm);
    public SecurityIdentifier(Byte[] binaryForm, int offset);
    public SecurityIdentifier(IntPtr binaryForm);
    internal SecurityIdentifier(IntPtr binaryForm, bool noDemand);
    public SecurityIdentifier(WellKnownSidType sidType, SecurityIdentifier domainSid);
    internal SecurityIdentifier(IdentifierAuthority identifierAuthority, Int32[] subAuthorities);
    private static SecurityIdentifier();
    private void CreateFromParts(IdentifierAuthority identifierAuthority, Int32[] subAuthorities);
    private void CreateFromBinaryForm(Byte[] binaryForm, int offset);
    internal static byte get_Revision();
    internal Byte[] get_BinaryForm();
    internal IdentifierAuthority get_IdentifierAuthority();
    internal int get_SubAuthorityCount();
    public int get_BinaryLength();
    public SecurityIdentifier get_AccountDomainSid();
    public virtual bool Equals(object o);
    public bool Equals(SecurityIdentifier sid);
    public virtual int GetHashCode();
    public virtual string ToString();
    public virtual string get_Value();
    internal static bool IsValidTargetTypeStatic(Type targetType);
    public virtual bool IsValidTargetType(Type targetType);
    internal SecurityIdentifier GetAccountDomainSid();
    public bool IsAccountSid();
    public virtual IdentityReference Translate(Type targetType);
    public static bool op_Equality(SecurityIdentifier left, SecurityIdentifier right);
    public static bool op_Inequality(SecurityIdentifier left, SecurityIdentifier right);
    public sealed virtual int CompareTo(SecurityIdentifier sid);
    internal int GetSubAuthority(int index);
    public bool IsWellKnown(WellKnownSidType type);
    public void GetBinaryForm(Byte[] binaryForm, int offset);
    public bool IsEqualDomainSid(SecurityIdentifier sid);
    private static IdentityReferenceCollection TranslateToNTAccounts(IdentityReferenceCollection sourceSids, Boolean& someFailed);
    internal static IdentityReferenceCollection Translate(IdentityReferenceCollection sourceSids, Type targetType, bool forceSuccess);
    internal static IdentityReferenceCollection Translate(IdentityReferenceCollection sourceSids, Type targetType, Boolean& someFailed);
}
internal enum System.Security.Principal.SidNameUse : Enum {
    public int value__;
    public static SidNameUse User;
    public static SidNameUse Group;
    public static SidNameUse Domain;
    public static SidNameUse Alias;
    public static SidNameUse WellKnownGroup;
    public static SidNameUse DeletedAccount;
    public static SidNameUse Invalid;
    public static SidNameUse Unknown;
    public static SidNameUse Computer;
}
[FlagsAttribute]
public enum System.Security.Principal.TokenAccessLevels : Enum {
    public int value__;
    public static TokenAccessLevels AssignPrimary;
    public static TokenAccessLevels Duplicate;
    public static TokenAccessLevels Impersonate;
    public static TokenAccessLevels Query;
    public static TokenAccessLevels QuerySource;
    public static TokenAccessLevels AdjustPrivileges;
    public static TokenAccessLevels AdjustGroups;
    public static TokenAccessLevels AdjustDefault;
    public static TokenAccessLevels AdjustSessionId;
    public static TokenAccessLevels Read;
    public static TokenAccessLevels Write;
    public static TokenAccessLevels AllAccess;
    public static TokenAccessLevels MaximumAllowed;
}
internal enum System.Security.Principal.TokenInformationClass : Enum {
    public int value__;
    public static TokenInformationClass TokenUser;
    public static TokenInformationClass TokenGroups;
    public static TokenInformationClass TokenPrivileges;
    public static TokenInformationClass TokenOwner;
    public static TokenInformationClass TokenPrimaryGroup;
    public static TokenInformationClass TokenDefaultDacl;
    public static TokenInformationClass TokenSource;
    public static TokenInformationClass TokenType;
    public static TokenInformationClass TokenImpersonationLevel;
    public static TokenInformationClass TokenStatistics;
    public static TokenInformationClass TokenRestrictedSids;
    public static TokenInformationClass TokenSessionId;
    public static TokenInformationClass TokenGroupsAndPrivileges;
    public static TokenInformationClass TokenSessionReference;
    public static TokenInformationClass TokenSandBoxInert;
    public static TokenInformationClass TokenAuditPolicy;
    public static TokenInformationClass TokenOrigin;
    public static TokenInformationClass TokenElevationType;
    public static TokenInformationClass TokenLinkedToken;
    public static TokenInformationClass TokenElevation;
    public static TokenInformationClass TokenHasRestrictions;
    public static TokenInformationClass TokenAccessInformation;
    public static TokenInformationClass TokenVirtualizationAllowed;
    public static TokenInformationClass TokenVirtualizationEnabled;
    public static TokenInformationClass TokenIntegrityLevel;
    public static TokenInformationClass TokenUIAccess;
    public static TokenInformationClass TokenMandatoryPolicy;
    public static TokenInformationClass TokenLogonSid;
    public static TokenInformationClass TokenIsAppContainer;
    public static TokenInformationClass TokenCapabilities;
    public static TokenInformationClass TokenAppContainerSid;
    public static TokenInformationClass TokenAppContainerNumber;
    public static TokenInformationClass TokenUserClaimAttributes;
    public static TokenInformationClass TokenDeviceClaimAttributes;
    public static TokenInformationClass TokenRestrictedUserClaimAttributes;
    public static TokenInformationClass TokenRestrictedDeviceClaimAttributes;
    public static TokenInformationClass TokenDeviceGroups;
    public static TokenInformationClass TokenRestrictedDeviceGroups;
    public static TokenInformationClass MaxTokenInfoClass;
}
internal enum System.Security.Principal.TokenType : Enum {
    public int value__;
    public static TokenType TokenPrimary;
    public static TokenType TokenImpersonation;
}
public enum System.Security.Principal.WellKnownSidType : Enum {
    public int value__;
    public static WellKnownSidType NullSid;
    public static WellKnownSidType WorldSid;
    public static WellKnownSidType LocalSid;
    public static WellKnownSidType CreatorOwnerSid;
    public static WellKnownSidType CreatorGroupSid;
    public static WellKnownSidType CreatorOwnerServerSid;
    public static WellKnownSidType CreatorGroupServerSid;
    public static WellKnownSidType NTAuthoritySid;
    public static WellKnownSidType DialupSid;
    public static WellKnownSidType NetworkSid;
    public static WellKnownSidType BatchSid;
    public static WellKnownSidType InteractiveSid;
    public static WellKnownSidType ServiceSid;
    public static WellKnownSidType AnonymousSid;
    public static WellKnownSidType ProxySid;
    public static WellKnownSidType EnterpriseControllersSid;
    public static WellKnownSidType SelfSid;
    public static WellKnownSidType AuthenticatedUserSid;
    public static WellKnownSidType RestrictedCodeSid;
    public static WellKnownSidType TerminalServerSid;
    public static WellKnownSidType RemoteLogonIdSid;
    public static WellKnownSidType LogonIdsSid;
    public static WellKnownSidType LocalSystemSid;
    public static WellKnownSidType LocalServiceSid;
    public static WellKnownSidType NetworkServiceSid;
    public static WellKnownSidType BuiltinDomainSid;
    public static WellKnownSidType BuiltinAdministratorsSid;
    public static WellKnownSidType BuiltinUsersSid;
    public static WellKnownSidType BuiltinGuestsSid;
    public static WellKnownSidType BuiltinPowerUsersSid;
    public static WellKnownSidType BuiltinAccountOperatorsSid;
    public static WellKnownSidType BuiltinSystemOperatorsSid;
    public static WellKnownSidType BuiltinPrintOperatorsSid;
    public static WellKnownSidType BuiltinBackupOperatorsSid;
    public static WellKnownSidType BuiltinReplicatorSid;
    public static WellKnownSidType BuiltinPreWindows2000CompatibleAccessSid;
    public static WellKnownSidType BuiltinRemoteDesktopUsersSid;
    public static WellKnownSidType BuiltinNetworkConfigurationOperatorsSid;
    public static WellKnownSidType AccountAdministratorSid;
    public static WellKnownSidType AccountGuestSid;
    public static WellKnownSidType AccountKrbtgtSid;
    public static WellKnownSidType AccountDomainAdminsSid;
    public static WellKnownSidType AccountDomainUsersSid;
    public static WellKnownSidType AccountDomainGuestsSid;
    public static WellKnownSidType AccountComputersSid;
    public static WellKnownSidType AccountControllersSid;
    public static WellKnownSidType AccountCertAdminsSid;
    public static WellKnownSidType AccountSchemaAdminsSid;
    public static WellKnownSidType AccountEnterpriseAdminsSid;
    public static WellKnownSidType AccountPolicyAdminsSid;
    public static WellKnownSidType AccountRasAndIasServersSid;
    public static WellKnownSidType NtlmAuthenticationSid;
    public static WellKnownSidType DigestAuthenticationSid;
    public static WellKnownSidType SChannelAuthenticationSid;
    public static WellKnownSidType ThisOrganizationSid;
    public static WellKnownSidType OtherOrganizationSid;
    public static WellKnownSidType BuiltinIncomingForestTrustBuildersSid;
    public static WellKnownSidType BuiltinPerformanceMonitoringUsersSid;
    public static WellKnownSidType BuiltinPerformanceLoggingUsersSid;
    public static WellKnownSidType BuiltinAuthorizationAccessSid;
    public static WellKnownSidType WinBuiltinTerminalServerLicenseServersSid;
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This member has been depcreated and is only maintained for backwards compatability. WellKnownSidType values greater than MaxDefined may be defined in future releases.")]
public static WellKnownSidType MaxDefined;
    public static WellKnownSidType WinBuiltinDCOMUsersSid;
    public static WellKnownSidType WinBuiltinIUsersSid;
    public static WellKnownSidType WinIUserSid;
    public static WellKnownSidType WinBuiltinCryptoOperatorsSid;
    public static WellKnownSidType WinUntrustedLabelSid;
    public static WellKnownSidType WinLowLabelSid;
    public static WellKnownSidType WinMediumLabelSid;
    public static WellKnownSidType WinHighLabelSid;
    public static WellKnownSidType WinSystemLabelSid;
    public static WellKnownSidType WinWriteRestrictedCodeSid;
    public static WellKnownSidType WinCreatorOwnerRightsSid;
    public static WellKnownSidType WinCacheablePrincipalsGroupSid;
    public static WellKnownSidType WinNonCacheablePrincipalsGroupSid;
    public static WellKnownSidType WinEnterpriseReadonlyControllersSid;
    public static WellKnownSidType WinAccountReadonlyControllersSid;
    public static WellKnownSidType WinBuiltinEventLogReadersGroup;
    public static WellKnownSidType WinNewEnterpriseReadonlyControllersSid;
    public static WellKnownSidType WinBuiltinCertSvcDComAccessGroup;
    public static WellKnownSidType WinMediumPlusLabelSid;
    public static WellKnownSidType WinLocalLogonSid;
    public static WellKnownSidType WinConsoleLogonSid;
    public static WellKnownSidType WinThisOrganizationCertificateSid;
    public static WellKnownSidType WinApplicationPackageAuthoritySid;
    public static WellKnownSidType WinBuiltinAnyPackageSid;
    public static WellKnownSidType WinCapabilityInternetClientSid;
    public static WellKnownSidType WinCapabilityInternetClientServerSid;
    public static WellKnownSidType WinCapabilityPrivateNetworkClientServerSid;
    public static WellKnownSidType WinCapabilityPicturesLibrarySid;
    public static WellKnownSidType WinCapabilityVideosLibrarySid;
    public static WellKnownSidType WinCapabilityMusicLibrarySid;
    public static WellKnownSidType WinCapabilityDocumentsLibrarySid;
    public static WellKnownSidType WinCapabilitySharedUserCertificatesSid;
    public static WellKnownSidType WinCapabilityEnterpriseAuthenticationSid;
    public static WellKnownSidType WinCapabilityRemovableStorageSid;
}
internal static class System.Security.Principal.Win32 : object {
    internal static SafeLsaPolicyHandle LsaOpenPolicy(string systemName, PolicyRights rights);
    internal static Byte[] ConvertIntPtrSidToByteArraySid(IntPtr binaryForm);
    internal static int CreateSidFromString(string stringSid, Byte[]& resultSid);
    internal static int CreateWellKnownSid(WellKnownSidType sidType, SecurityIdentifier domainSid, Byte[]& resultSid);
    internal static bool IsEqualDomainSid(SecurityIdentifier sid1, SecurityIdentifier sid2);
    internal static void InitializeReferencedDomainsPointer(SafeLsaMemoryHandle referencedDomains);
    internal static int GetWindowsAccountDomainSid(SecurityIdentifier sid, SecurityIdentifier& resultSid);
    internal static bool IsWellKnownSid(SecurityIdentifier sid, WellKnownSidType type);
}
[ComVisibleAttribute("True")]
public enum System.Security.Principal.WindowsAccountType : Enum {
    public int value__;
    public static WindowsAccountType Normal;
    public static WindowsAccountType Guest;
    public static WindowsAccountType System;
    public static WindowsAccountType Anonymous;
}
public enum System.Security.Principal.WindowsBuiltInRole : Enum {
    public int value__;
    public static WindowsBuiltInRole Administrator;
    public static WindowsBuiltInRole User;
    public static WindowsBuiltInRole Guest;
    public static WindowsBuiltInRole PowerUser;
    public static WindowsBuiltInRole AccountOperator;
    public static WindowsBuiltInRole SystemOperator;
    public static WindowsBuiltInRole PrintOperator;
    public static WindowsBuiltInRole BackupOperator;
    public static WindowsBuiltInRole Replicator;
}
public class System.Security.Principal.WindowsIdentity : ClaimsIdentity {
    private string _name;
    private SecurityIdentifier _owner;
    private SecurityIdentifier _user;
    private IdentityReferenceCollection _groups;
    private SafeAccessTokenHandle _safeTokenHandle;
    private string _authType;
    private int _isAuthenticated;
    private TokenImpersonationLevel modreq(System.Runtime.CompilerServices.IsVolatile) _impersonationLevel;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _impersonationLevelInitialized;
    public static string DefaultIssuer;
    private string _issuerName;
    private object _claimsIntiailizedLock;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _claimsInitialized;
    private List`1<Claim> _deviceClaims;
    private List`1<Claim> _userClaims;
    private static bool s_ignoreWindows8Properties;
    private static AsyncLocal`1<SafeAccessTokenHandle> s_currentImpersonatedToken;
    public string AuthenticationType { get; }
    public TokenImpersonationLevel ImpersonationLevel { get; }
    public bool IsAuthenticated { get; }
    public bool IsGuest { get; }
    public bool IsSystem { get; }
    public bool IsAnonymous { get; }
    public string Name { get; }
    public SecurityIdentifier Owner { get; }
    public SecurityIdentifier User { get; }
    public IdentityReferenceCollection Groups { get; }
    public SafeAccessTokenHandle AccessToken { get; }
    public IntPtr Token { get; }
    public IEnumerable`1<Claim> UserClaims { get; }
    public IEnumerable`1<Claim> DeviceClaims { get; }
    public IEnumerable`1<Claim> Claims { get; }
    public WindowsIdentity(IntPtr userToken);
    public WindowsIdentity(IntPtr userToken, string type);
    public WindowsIdentity(IntPtr userToken, string type, WindowsAccountType acctType);
    public WindowsIdentity(IntPtr userToken, string type, WindowsAccountType acctType, bool isAuthenticated);
    protected WindowsIdentity(WindowsIdentity identity);
    private WindowsIdentity(IntPtr userToken, string authType, int isAuthenticated);
    public WindowsIdentity(string sUserPrincipalName);
    public WindowsIdentity(SerializationInfo info, StreamingContext context);
    private static WindowsIdentity();
    private static SafeLsaHandle ConnectToLsa();
    private static int LookupAuthenticationPackage(SafeLsaHandle lsaHandle, string packageName);
    private static SafeAccessTokenHandle DuplicateAccessToken(IntPtr accessToken);
    private static SafeAccessTokenHandle DuplicateAccessToken(SafeAccessTokenHandle accessToken);
    private void CreateFromToken(IntPtr userToken);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender);
    public static WindowsIdentity GetCurrent();
    public static WindowsIdentity GetCurrent(bool ifImpersonating);
    public static WindowsIdentity GetCurrent(TokenAccessLevels desiredAccess);
    public static WindowsIdentity GetAnonymous();
    public sealed virtual string get_AuthenticationType();
    public TokenImpersonationLevel get_ImpersonationLevel();
    public virtual bool get_IsAuthenticated();
    private bool CheckNtTokenForSid(SecurityIdentifier sid);
    public virtual bool get_IsGuest();
    public virtual bool get_IsSystem();
    public virtual bool get_IsAnonymous();
    public virtual string get_Name();
    internal string GetName();
    public SecurityIdentifier get_Owner();
    public SecurityIdentifier get_User();
    public IdentityReferenceCollection get_Groups();
    public SafeAccessTokenHandle get_AccessToken();
    public virtual IntPtr get_Token();
    public static void RunImpersonated(SafeAccessTokenHandle safeAccessTokenHandle, Action action);
    public static T RunImpersonated(SafeAccessTokenHandle safeAccessTokenHandle, Func`1<T> func);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    private static void RunImpersonatedInternal(SafeAccessTokenHandle token, Action action);
    private static void CurrentImpersonatedTokenChanged(AsyncLocalValueChangedArgs`1<SafeAccessTokenHandle> args);
    internal static WindowsIdentity GetCurrentInternal(TokenAccessLevels desiredAccess, bool threadOnly);
    private static int GetHRForWin32Error(int dwLastError);
    private static Exception GetExceptionFromNtStatus(int status);
    private static SafeAccessTokenHandle GetCurrentToken(TokenAccessLevels desiredAccess, bool threadOnly, Boolean& isImpersonating, Int32& hr);
    private static SafeAccessTokenHandle GetCurrentProcessToken(TokenAccessLevels desiredAccess, Int32& hr);
    private T GetTokenInformation(TokenInformationClass tokenInformationClass);
    private static LUID GetLogonAuthId(SafeAccessTokenHandle safeTokenHandle);
    private static SafeLocalAllocHandle GetTokenInformation(SafeAccessTokenHandle tokenHandle, TokenInformationClass tokenInformationClass, bool nullOnInvalidParam);
    private static string GetAuthType(WindowsIdentity identity);
    public virtual ClaimsIdentity Clone();
    public virtual IEnumerable`1<Claim> get_UserClaims();
    public virtual IEnumerable`1<Claim> get_DeviceClaims();
    [IteratorStateMachineAttribute("System.Security.Principal.WindowsIdentity/<get_Claims>d__84")]
public virtual IEnumerable`1<Claim> get_Claims();
    private void InitializeClaims();
    private void AddGroupSidClaims(List`1<Claim> instanceClaims);
    private void AddPrimarySidClaim(List`1<Claim> instanceClaims);
    private void AddDeviceGroupSidClaims(List`1<Claim> instanceClaims, TokenInformationClass tokenInformationClass);
    private void AddTokenClaims(List`1<Claim> instanceClaims, TokenInformationClass tokenInformationClass, string propertyValue);
    [CompilerGeneratedAttribute]
private void <GetName>b__51_0();
    [DebuggerHiddenAttribute]
[CompilerGeneratedAttribute]
private IEnumerable`1<Claim> <>n__0();
}
public class System.Security.Principal.WindowsPrincipal : ClaimsPrincipal {
    private WindowsIdentity _identity;
    public IIdentity Identity { get; }
    public IEnumerable`1<Claim> UserClaims { get; }
    public IEnumerable`1<Claim> DeviceClaims { get; }
    public WindowsPrincipal(WindowsIdentity ntIdentity);
    public virtual IIdentity get_Identity();
    public virtual bool IsInRole(string role);
    [IteratorStateMachineAttribute("System.Security.Principal.WindowsPrincipal/<get_UserClaims>d__7")]
public virtual IEnumerable`1<Claim> get_UserClaims();
    [IteratorStateMachineAttribute("System.Security.Principal.WindowsPrincipal/<get_DeviceClaims>d__9")]
public virtual IEnumerable`1<Claim> get_DeviceClaims();
    public virtual bool IsInRole(WindowsBuiltInRole role);
    public virtual bool IsInRole(int rid);
    public virtual bool IsInRole(SecurityIdentifier sid);
    private static IPrincipal GetDefaultInstance();
}
internal enum System.Security.Principal.WinSecurityContext : Enum {
    public int value__;
    public static WinSecurityContext Thread;
    public static WinSecurityContext Process;
    public static WinSecurityContext Both;
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Arg_EmptyCollection { get; }
    internal static string Arg_EnumIllegalVal { get; }
    internal static string Argument_ImpersonateUser { get; }
    internal static string Argument_ImproperType { get; }
    internal static string Argument_InvalidImpersonationToken { get; }
    internal static string Argument_InvalidValue { get; }
    internal static string Argument_TokenZero { get; }
    internal static string ArgumentOutOfRange_ArrayTooSmall { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string Argument_StringZeroLength { get; }
    internal static string IdentityReference_AccountNameTooLong { get; }
    internal static string IdentityReference_CannotCreateLogonIdsSid { get; }
    internal static string IdentityReference_DomainNameTooLong { get; }
    internal static string IdentityReference_DomainSidRequired { get; }
    internal static string IdentityReference_IdentifierAuthorityTooLarge { get; }
    internal static string IdentityReference_IdentityNotMapped { get; }
    internal static string IdentityReference_InvalidNumberOfSubauthorities { get; }
    internal static string IdentityReference_InvalidSidRevision { get; }
    internal static string IdentityReference_MustBeIdentityReference { get; }
    internal static string IdentityReference_NotAWindowsDomain { get; }
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Arg_EmptyCollection();
    internal static string get_Arg_EnumIllegalVal();
    internal static string get_Argument_ImpersonateUser();
    internal static string get_Argument_ImproperType();
    internal static string get_Argument_InvalidImpersonationToken();
    internal static string get_Argument_InvalidValue();
    internal static string get_Argument_TokenZero();
    internal static string get_ArgumentOutOfRange_ArrayTooSmall();
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_Argument_StringZeroLength();
    internal static string get_IdentityReference_AccountNameTooLong();
    internal static string get_IdentityReference_CannotCreateLogonIdsSid();
    internal static string get_IdentityReference_DomainNameTooLong();
    internal static string get_IdentityReference_DomainSidRequired();
    internal static string get_IdentityReference_IdentifierAuthorityTooLarge();
    internal static string get_IdentityReference_IdentityNotMapped();
    internal static string get_IdentityReference_InvalidNumberOfSubauthorities();
    internal static string get_IdentityReference_InvalidSidRevision();
    internal static string get_IdentityReference_MustBeIdentityReference();
    internal static string get_IdentityReference_NotAWindowsDomain();
}
