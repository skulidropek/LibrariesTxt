internal static class DataSetUtil : object {
    private static Type s_stackOverflowType;
    private static Type s_outOfMemoryType;
    private static Type s_threadAbortType;
    private static Type s_nullReferenceType;
    private static Type s_accessViolationType;
    private static Type s_securityType;
    private static DataSetUtil();
    internal static void CheckArgumentNull(T argumentValue, string argumentName);
    private static T TraceException(string trace, T e);
    private static T TraceExceptionAsReturnValue(T e);
    internal static ArgumentException Argument(string message);
    internal static ArgumentNullException ArgumentNull(string message);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string message, string parameterName);
    internal static InvalidCastException InvalidCast(string message);
    internal static InvalidOperationException InvalidOperation(string message);
    internal static NotSupportedException NotSupported(string message);
    internal static ArgumentOutOfRangeException InvalidEnumerationValue(Type type, int value);
    internal static ArgumentOutOfRangeException InvalidDataRowState(DataRowState value);
    internal static ArgumentOutOfRangeException InvalidLoadOption(LoadOption value);
    internal static bool IsCatchableExceptionType(Exception e);
}
internal static class FxResources.System.Data.Common.SR : object {
}
public enum System.Data.AcceptRejectRule : Enum {
    public int value__;
    public static AcceptRejectRule None;
    public static AcceptRejectRule Cascade;
}
internal enum System.Data.Aggregate : Enum {
    public int value__;
    public static Aggregate None;
    public static Aggregate Sum;
    public static Aggregate Avg;
    public static Aggregate Min;
    public static Aggregate Max;
    public static Aggregate Count;
    public static Aggregate StDev;
    public static Aggregate Var;
}
internal class System.Data.AggregateNode : ExpressionNode {
    private AggregateType _type;
    private Aggregate _aggregate;
    private bool _local;
    private string _relationName;
    private string _columnName;
    private DataTable _childTable;
    private DataColumn _column;
    private DataRelation _relation;
    internal AggregateNode(DataTable table, FunctionId aggregateType, string columnName);
    internal AggregateNode(DataTable table, FunctionId aggregateType, string columnName, bool local, string relationName);
    internal virtual void Bind(DataTable table, List`1<DataColumn> list);
    internal static void Bind(DataRelation relation, List`1<DataColumn> list);
    internal virtual object Eval();
    internal virtual object Eval(DataRow row, DataRowVersion version);
    internal virtual object Eval(Int32[] records);
    internal virtual bool IsConstant();
    internal virtual bool IsTableConstant();
    internal virtual bool HasLocalAggregate();
    internal virtual bool HasRemoteAggregate();
    internal virtual bool DependsOn(DataColumn column);
    internal virtual ExpressionNode Optimize();
}
internal enum System.Data.AggregateType : Enum {
    public int value__;
    public static AggregateType None;
    public static AggregateType Sum;
    public static AggregateType Mean;
    public static AggregateType Min;
    public static AggregateType Max;
    public static AggregateType First;
    public static AggregateType Count;
    public static AggregateType Var;
    public static AggregateType StDev;
}
internal class System.Data.AutoIncrementBigInteger : AutoIncrementValue {
    private BigInteger _current;
    private long _seed;
    private BigInteger _step;
    internal object Current { get; internal set; }
    internal Type DataType { get; }
    internal long Seed { get; internal set; }
    internal long Step { get; internal set; }
    internal virtual object get_Current();
    internal virtual void set_Current(object value);
    internal virtual Type get_DataType();
    internal virtual long get_Seed();
    internal virtual void set_Seed(long value);
    internal virtual long get_Step();
    internal virtual void set_Step(long value);
    internal virtual void MoveAfter();
    internal virtual void SetCurrent(object value, IFormatProvider formatProvider);
    internal virtual void SetCurrentAndIncrement(object value);
    private bool BoundaryCheck(BigInteger value);
}
internal class System.Data.AutoIncrementInt64 : AutoIncrementValue {
    private long _current;
    private long _seed;
    private long _step;
    internal object Current { get; internal set; }
    internal Type DataType { get; }
    internal long Seed { get; internal set; }
    internal long Step { get; internal set; }
    internal virtual object get_Current();
    internal virtual void set_Current(object value);
    internal virtual Type get_DataType();
    internal virtual long get_Seed();
    internal virtual void set_Seed(long value);
    internal virtual long get_Step();
    internal virtual void set_Step(long value);
    internal virtual void MoveAfter();
    internal virtual void SetCurrent(object value, IFormatProvider formatProvider);
    internal virtual void SetCurrentAndIncrement(object value);
    private bool BoundaryCheck(BigInteger value);
}
internal abstract class System.Data.AutoIncrementValue : object {
    [CompilerGeneratedAttribute]
private bool <Auto>k__BackingField;
    internal bool Auto { get; internal set; }
    internal object Current { get; internal set; }
    internal long Seed { get; internal set; }
    internal long Step { get; internal set; }
    internal Type DataType { get; }
    [CompilerGeneratedAttribute]
internal bool get_Auto();
    [CompilerGeneratedAttribute]
internal void set_Auto(bool value);
    internal abstract virtual object get_Current();
    internal abstract virtual void set_Current(object value);
    internal abstract virtual long get_Seed();
    internal abstract virtual void set_Seed(long value);
    internal abstract virtual long get_Step();
    internal abstract virtual void set_Step(long value);
    internal abstract virtual Type get_DataType();
    internal abstract virtual void SetCurrent(object value, IFormatProvider formatProvider);
    internal abstract virtual void SetCurrentAndIncrement(object value);
    internal abstract virtual void MoveAfter();
    internal AutoIncrementValue Clone();
}
internal class System.Data.BinaryNode : ExpressionNode {
    internal int _op;
    internal ExpressionNode _left;
    internal ExpressionNode _right;
    internal BinaryNode(DataTable table, int op, ExpressionNode left, ExpressionNode right);
    internal virtual void Bind(DataTable table, List`1<DataColumn> list);
    internal virtual object Eval();
    internal virtual object Eval(DataRow row, DataRowVersion version);
    internal virtual object Eval(Int32[] recordNos);
    internal virtual bool IsConstant();
    internal virtual bool IsTableConstant();
    internal virtual bool HasLocalAggregate();
    internal virtual bool HasRemoteAggregate();
    internal virtual bool DependsOn(DataColumn column);
    internal virtual ExpressionNode Optimize();
    internal void SetTypeMismatchError(int op, Type left, Type right);
    private static object Eval(ExpressionNode expr, DataRow row, DataRowVersion version, Int32[] recordNos);
    internal int BinaryCompare(object vLeft, object vRight, StorageType resultType, int op);
    internal int BinaryCompare(object vLeft, object vRight, StorageType resultType, int op, CompareInfo comparer);
    private object EvalBinaryOp(int op, ExpressionNode left, ExpressionNode right, DataRow row, DataRowVersion version, Int32[] recordNos);
    private DataTypePrecedence GetPrecedence(StorageType storageType);
    private static StorageType GetPrecedenceType(DataTypePrecedence code);
    private bool IsMixed(StorageType left, StorageType right);
    private bool IsMixedSql(StorageType left, StorageType right);
    internal StorageType ResultType(StorageType left, StorageType right, bool lc, bool rc, int op);
    internal StorageType ResultSqlType(StorageType left, StorageType right, bool lc, bool rc, int op);
    private int SqlResultType(int typeCode);
}
internal class System.Data.ChildForeignKeyConstraintEnumerator : ForeignKeyConstraintEnumerator {
    private DataTable _table;
    public ChildForeignKeyConstraintEnumerator(DataSet dataSet, DataTable inTable);
    protected virtual bool IsValidCandidate(Constraint constraint);
}
internal class System.Data.ColumnTypeConverter : TypeConverter {
    private static Type[] s_types;
    private StandardValuesCollection _values;
    private static ColumnTypeConverter();
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual StandardValuesCollection GetStandardValues(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context);
    public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context);
}
[FlagsAttribute]
public enum System.Data.CommandBehavior : Enum {
    public int value__;
    public static CommandBehavior Default;
    public static CommandBehavior SingleResult;
    public static CommandBehavior SchemaOnly;
    public static CommandBehavior KeyInfo;
    public static CommandBehavior SingleRow;
    public static CommandBehavior SequentialAccess;
    public static CommandBehavior CloseConnection;
}
public enum System.Data.CommandType : Enum {
    public int value__;
    public static CommandType Text;
    public static CommandType StoredProcedure;
    public static CommandType TableDirect;
}
internal static class System.Data.Common.ADP : object {
    private static Task`1<bool> _trueTask;
    private static Task`1<bool> _falseTask;
    private static Type s_stackOverflowType;
    private static Type s_outOfMemoryType;
    private static Type s_threadAbortType;
    private static Type s_nullReferenceType;
    private static Type s_accessViolationType;
    private static Type s_securityType;
    internal static Task`1<bool> TrueTask { get; }
    internal static Task`1<bool> FalseTask { get; }
    private static ADP();
    internal static Task`1<T> CreatedTaskWithCancellation();
    internal static void TraceExceptionForCapture(Exception e);
    internal static DataException Data(string message);
    internal static void CheckArgumentLength(string value, string parameterName);
    internal static void CheckArgumentLength(Array value, string parameterName);
    internal static ArgumentOutOfRangeException InvalidAcceptRejectRule(AcceptRejectRule value);
    internal static ArgumentOutOfRangeException InvalidCatalogLocation(CatalogLocation value);
    internal static ArgumentOutOfRangeException InvalidConflictOptions(ConflictOption value);
    internal static ArgumentOutOfRangeException InvalidDataRowState(DataRowState value);
    internal static ArgumentOutOfRangeException InvalidLoadOption(LoadOption value);
    internal static ArgumentOutOfRangeException InvalidMissingMappingAction(MissingMappingAction value);
    internal static ArgumentOutOfRangeException InvalidMissingSchemaAction(MissingSchemaAction value);
    internal static ArgumentOutOfRangeException InvalidRule(Rule value);
    internal static ArgumentOutOfRangeException InvalidSchemaType(SchemaType value);
    internal static ArgumentOutOfRangeException InvalidStatementType(StatementType value);
    internal static ArgumentOutOfRangeException InvalidUpdateStatus(UpdateStatus value);
    internal static ArgumentOutOfRangeException NotSupportedStatementType(StatementType value, string method);
    internal static ArgumentException InvalidKeyname(string parameterName);
    internal static ArgumentException InvalidValue(string parameterName);
    internal static Exception WrongType(Type got, Type expected);
    internal static Exception CollectionUniqueValue(Type itemType, string propertyName, string propertyValue);
    internal static InvalidOperationException MissingSelectCommand(string method);
    private static InvalidOperationException DataMapping(string error);
    internal static InvalidOperationException ColumnSchemaExpression(string srcColumn, string cacheColumn);
    internal static InvalidOperationException ColumnSchemaMismatch(string srcColumn, Type srcType, DataColumn column);
    internal static InvalidOperationException ColumnSchemaMissing(string cacheColumn, string tableName, string srcColumn);
    internal static InvalidOperationException MissingColumnMapping(string srcColumn);
    internal static InvalidOperationException MissingTableSchema(string cacheTable, string srcTable);
    internal static InvalidOperationException MissingTableMapping(string srcTable);
    internal static InvalidOperationException MissingTableMappingDestination(string dstTable);
    internal static Exception InvalidSourceColumn(string parameter);
    internal static Exception ColumnsAddNullAttempt(string parameter);
    internal static Exception ColumnsDataSetColumn(string cacheColumn);
    internal static Exception ColumnsIndexInt32(int index, IColumnMappingCollection collection);
    internal static Exception ColumnsIndexSource(string srcColumn);
    internal static Exception ColumnsIsNotParent(ICollection collection);
    internal static Exception ColumnsIsParent(ICollection collection);
    internal static Exception ColumnsUniqueSourceColumn(string srcColumn);
    internal static Exception NotADataColumnMapping(object value);
    internal static Exception InvalidSourceTable(string parameter);
    internal static Exception TablesAddNullAttempt(string parameter);
    internal static Exception TablesDataSetTable(string cacheTable);
    internal static Exception TablesIndexInt32(int index, ITableMappingCollection collection);
    internal static Exception TablesIsNotParent(ICollection collection);
    internal static Exception TablesIsParent(ICollection collection);
    internal static Exception TablesSourceIndex(string srcTable);
    internal static Exception TablesUniqueSourceTable(string srcTable);
    internal static Exception NotADataTableMapping(object value);
    internal static InvalidOperationException UpdateConnectionRequired(StatementType statementType, bool isRowUpdatingCommand);
    internal static InvalidOperationException ConnectionRequired_Res(string method);
    internal static InvalidOperationException UpdateOpenConnectionRequired(StatementType statementType, bool isRowUpdatingCommand, ConnectionState state);
    internal static ArgumentException UnwantedStatementType(StatementType statementType);
    internal static Exception FillSchemaRequiresSourceTableName(string parameter);
    internal static Exception InvalidMaxRecords(string parameter, int max);
    internal static Exception InvalidStartRecord(string parameter, int start);
    internal static Exception FillRequires(string parameter);
    internal static Exception FillRequiresSourceTableName(string parameter);
    internal static Exception FillChapterAutoIncrement();
    internal static InvalidOperationException MissingDataReaderFieldType(int index);
    internal static InvalidOperationException OnlyOneTableForStartRecordOrMaxRecords();
    internal static ArgumentNullException UpdateRequiresNonNullDataSet(string parameter);
    internal static InvalidOperationException UpdateRequiresSourceTable(string defaultSrcTableName);
    internal static InvalidOperationException UpdateRequiresSourceTableName(string srcTable);
    internal static ArgumentNullException UpdateRequiresDataTable(string parameter);
    internal static Exception UpdateConcurrencyViolation(StatementType statementType, int affected, int expected, DataRow[] dataRows);
    internal static InvalidOperationException UpdateRequiresCommand(StatementType statementType, bool isRowUpdatingCommand);
    internal static ArgumentException UpdateMismatchRowTable(int i);
    internal static DataException RowUpdatedErrors();
    internal static DataException RowUpdatingErrors();
    internal static InvalidOperationException ResultsNotAllowedDuringBatch();
    internal static InvalidOperationException DynamicSQLJoinUnsupported();
    internal static InvalidOperationException DynamicSQLNoTableInfo();
    internal static InvalidOperationException DynamicSQLNoKeyInfoDelete();
    internal static InvalidOperationException DynamicSQLNoKeyInfoUpdate();
    internal static InvalidOperationException DynamicSQLNoKeyInfoRowVersionDelete();
    internal static InvalidOperationException DynamicSQLNoKeyInfoRowVersionUpdate();
    internal static InvalidOperationException DynamicSQLNestedQuote(string name, string quote);
    internal static InvalidOperationException NoQuoteChange();
    internal static InvalidOperationException MissingSourceCommand();
    internal static InvalidOperationException MissingSourceCommandConnection();
    internal static DataRow[] SelectAdapterRows(DataTable dataTable, bool sorted);
    internal static void BuildSchemaTableInfoTableNames(String[] columnNameArray);
    private static int GenerateUniqueName(Dictionary`2<string, int> hash, String& columnName, int index, int uniqueIndex);
    internal static int SrcCompare(string strA, string strB);
    internal static Task`1<bool> get_TrueTask();
    internal static Task`1<bool> get_FalseTask();
    private static void TraceException(string trace, Exception e);
    internal static void TraceExceptionAsReturnValue(Exception e);
    internal static void TraceExceptionWithoutRethrow(Exception e);
    internal static ArgumentException Argument(string error);
    internal static ArgumentException Argument(string error, Exception inner);
    internal static ArgumentException Argument(string error, string parameter);
    internal static ArgumentNullException ArgumentNull(string parameter);
    internal static ArgumentNullException ArgumentNull(string parameter, string error);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string parameterName);
    internal static ArgumentOutOfRangeException ArgumentOutOfRange(string message, string parameterName);
    internal static IndexOutOfRangeException IndexOutOfRange(string error);
    internal static InvalidCastException InvalidCast(string error);
    internal static InvalidCastException InvalidCast(string error, Exception inner);
    internal static InvalidOperationException InvalidOperation(string error);
    internal static NotSupportedException NotSupported();
    internal static NotSupportedException NotSupported(string error);
    internal static ArgumentOutOfRangeException NotSupportedEnumerationValue(Type type, string value, string method);
    internal static InvalidOperationException DataAdapter(string error);
    private static InvalidOperationException Provider(string error);
    internal static void CheckArgumentNull(object value, string parameterName);
    internal static bool IsCatchableExceptionType(Exception e);
    internal static bool IsCatchableOrSecurityExceptionType(Exception e);
    internal static ArgumentOutOfRangeException InvalidEnumerationValue(Type type, int value);
    internal static ArgumentException ConnectionStringSyntax(int index);
    internal static ArgumentException KeywordNotSupported(string keyword);
    internal static ArgumentException ConvertFailed(Type fromType, Type toType, Exception innerException);
    internal static ArgumentException CollectionRemoveInvalidObject(Type itemType, ICollection collection);
    internal static ArgumentNullException CollectionNullValue(string parameter, Type collection, Type itemType);
    internal static IndexOutOfRangeException CollectionIndexInt32(int index, Type collection, int count);
    internal static IndexOutOfRangeException CollectionIndexString(Type itemType, string propertyName, string propertyValue, Type collection);
    internal static InvalidCastException CollectionInvalidType(Type collection, Type itemType, object invalidValue);
    private static string ConnectionStateMsg(ConnectionState state);
    internal static Exception StreamClosed(string method);
    internal static string BuildQuotedString(string quotePrefix, string quoteSuffix, string unQuotedString);
    internal static string AppendQuotedString(StringBuilder buffer, string quotePrefix, string quoteSuffix, string unQuotedString);
    internal static ArgumentException ParametersIsNotParent(Type parameterType, ICollection collection);
    internal static ArgumentException ParametersIsParent(Type parameterType, ICollection collection);
    internal static Exception InternalError(InternalErrorCode internalError);
    internal static Exception DataReaderClosed(string method);
    internal static ArgumentOutOfRangeException InvalidSourceBufferIndex(int maxLen, long srcOffset, string parameterName);
    internal static ArgumentOutOfRangeException InvalidDestinationBufferIndex(int maxLen, int dstOffset, string parameterName);
    internal static IndexOutOfRangeException InvalidBufferSizeOrIndex(int numBytes, int bufferIndex);
    internal static Exception InvalidDataLength(long length);
    internal static bool CompareInsensitiveInvariant(string strvalue, string strconst);
    internal static int DstCompare(string strA, string strB);
    internal static bool IsNull(object value);
    internal static Exception InvalidSeekOrigin(string parameterName);
}
internal class System.Data.Common.BigIntegerStorage : DataStorage {
    private BigInteger[] _values;
    internal BigIntegerStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    internal static BigInteger ConvertToBigInteger(object value, IFormatProvider formatProvider);
    internal static object ConvertFromBigInteger(BigInteger value, Type type, IFormatProvider formatProvider);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.BooleanStorage : DataStorage {
    private Boolean[] _values;
    internal BooleanStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.ByteStorage : DataStorage {
    private Byte[] _values;
    internal ByteStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
public enum System.Data.Common.CatalogLocation : Enum {
    public int value__;
    public static CatalogLocation Start;
    public static CatalogLocation End;
}
internal class System.Data.Common.CharStorage : DataStorage {
    private Char[] _values;
    internal CharStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
public class System.Data.Common.DataAdapter : Component {
    private static object s_eventFillError;
    private bool _acceptChangesDuringUpdate;
    private bool _acceptChangesDuringUpdateAfterInsert;
    private bool _continueUpdateOnError;
    private bool _hasFillErrorHandler;
    private bool _returnProviderSpecificTypes;
    private bool _acceptChangesDuringFill;
    private LoadOption _fillLoadOption;
    private MissingMappingAction _missingMappingAction;
    private MissingSchemaAction _missingSchemaAction;
    private DataTableMappingCollection _tableMappings;
    private static int s_objectTypeCount;
    internal int _objectID;
    [DefaultValueAttribute("True")]
public bool AcceptChangesDuringFill { get; public set; }
    [DefaultValueAttribute("True")]
public bool AcceptChangesDuringUpdate { get; public set; }
    [DefaultValueAttribute("False")]
public bool ContinueUpdateOnError { get; public set; }
    [RefreshPropertiesAttribute("1")]
public LoadOption FillLoadOption { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MissingMappingAction MissingMappingAction { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MissingSchemaAction MissingSchemaAction { get; public set; }
    internal int ObjectID { get; }
    [DefaultValueAttribute("False")]
public bool ReturnProviderSpecificTypes { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public DataTableMappingCollection TableMappings { get; }
    private ITableMappingCollection System.Data.IDataAdapter.TableMappings { get; }
    protected DataAdapter(DataAdapter from);
    private static DataAdapter();
    public bool get_AcceptChangesDuringFill();
    public void set_AcceptChangesDuringFill(bool value);
    [EditorBrowsableAttribute("1")]
public virtual bool ShouldSerializeAcceptChangesDuringFill();
    public bool get_AcceptChangesDuringUpdate();
    public void set_AcceptChangesDuringUpdate(bool value);
    public bool get_ContinueUpdateOnError();
    public void set_ContinueUpdateOnError(bool value);
    public LoadOption get_FillLoadOption();
    public void set_FillLoadOption(LoadOption value);
    [EditorBrowsableAttribute("1")]
public void ResetFillLoadOption();
    [EditorBrowsableAttribute("1")]
public virtual bool ShouldSerializeFillLoadOption();
    public sealed virtual MissingMappingAction get_MissingMappingAction();
    public sealed virtual void set_MissingMappingAction(MissingMappingAction value);
    public sealed virtual MissingSchemaAction get_MissingSchemaAction();
    public sealed virtual void set_MissingSchemaAction(MissingSchemaAction value);
    internal int get_ObjectID();
    public virtual bool get_ReturnProviderSpecificTypes();
    public virtual void set_ReturnProviderSpecificTypes(bool value);
    public DataTableMappingCollection get_TableMappings();
    private sealed virtual override ITableMappingCollection System.Data.IDataAdapter.get_TableMappings();
    protected virtual bool ShouldSerializeTableMappings();
    protected bool HasTableMappings();
    public void add_FillError(FillErrorEventHandler value);
    public void remove_FillError(FillErrorEventHandler value);
    [ObsoleteAttribute("CloneInternals() has been deprecated.  Use the DataAdapter(DataAdapter from) constructor.  https://go.microsoft.com/fwlink/?linkid=14202")]
protected virtual DataAdapter CloneInternals();
    private void CloneFrom(DataAdapter from);
    protected virtual DataTableMappingCollection CreateTableMappings();
    protected virtual void Dispose(bool disposing);
    public virtual DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType);
    protected virtual DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType, string srcTable, IDataReader dataReader);
    protected virtual DataTable FillSchema(DataTable dataTable, SchemaType schemaType, IDataReader dataReader);
    internal object FillSchemaFromReader(DataSet dataset, DataTable datatable, SchemaType schemaType, string srcTable, IDataReader dataReader);
    public virtual int Fill(DataSet dataSet);
    protected virtual int Fill(DataSet dataSet, string srcTable, IDataReader dataReader, int startRecord, int maxRecords);
    protected virtual int Fill(DataTable dataTable, IDataReader dataReader);
    protected virtual int Fill(DataTable[] dataTables, IDataReader dataReader, int startRecord, int maxRecords);
    internal int FillFromReader(DataSet dataset, DataTable datatable, string srcTable, DataReaderContainer dataReader, int startRecord, int maxRecords, DataColumn parentChapterColumn, object parentChapterValue);
    private int FillLoadDataRowChunk(SchemaMapping mapping, int startRecord, int maxRecords);
    private int FillLoadDataRow(SchemaMapping mapping);
    private SchemaMapping FillMappingInternal(DataSet dataset, DataTable datatable, string srcTable, DataReaderContainer dataReader, int schemaCount, DataColumn parentChapterColumn, object parentChapterValue);
    private SchemaMapping FillMapping(DataSet dataset, DataTable datatable, string srcTable, DataReaderContainer dataReader, int schemaCount, DataColumn parentChapterColumn, object parentChapterValue);
    private bool FillNextResult(DataReaderContainer dataReader);
    [EditorBrowsableAttribute("2")]
public virtual IDataParameter[] GetFillParameters();
    internal DataTableMapping GetTableMappingBySchemaAction(string sourceTableName, string dataSetTableName, MissingMappingAction mappingAction);
    internal int IndexOfDataSetTable(string dataSetTable);
    protected virtual void OnFillError(FillErrorEventArgs value);
    private void OnFillErrorHandler(Exception e, DataTable dataTable, Object[] dataValues);
    public virtual int Update(DataSet dataSet);
    private static DataTable[] AddDataTableToArray(DataTable[] tables, DataTable newTable);
    private static string GetSourceTableName(string srcTable, int index);
}
[TypeConverterAttribute("System.Data.Common.DataColumnMapping/DataColumnMappingConverter")]
public class System.Data.Common.DataColumnMapping : MarshalByRefObject {
    private DataColumnMappingCollection _parent;
    private string _dataSetColumnName;
    private string _sourceColumnName;
    [DefaultValueAttribute("")]
public string DataSetColumn { get; public set; }
    internal DataColumnMappingCollection Parent { get; internal set; }
    [DefaultValueAttribute("")]
public string SourceColumn { get; public set; }
    public DataColumnMapping(string sourceColumn, string dataSetColumn);
    public sealed virtual string get_DataSetColumn();
    public sealed virtual void set_DataSetColumn(string value);
    internal DataColumnMappingCollection get_Parent();
    internal void set_Parent(DataColumnMappingCollection value);
    public sealed virtual string get_SourceColumn();
    public sealed virtual void set_SourceColumn(string value);
    private sealed virtual override object System.ICloneable.Clone();
    [EditorBrowsableAttribute("2")]
public DataColumn GetDataColumnBySchemaAction(DataTable dataTable, Type dataType, MissingSchemaAction schemaAction);
    [EditorBrowsableAttribute("2")]
public static DataColumn GetDataColumnBySchemaAction(string sourceColumn, string dataSetColumn, DataTable dataTable, Type dataType, MissingSchemaAction schemaAction);
    internal static DataColumn CreateDataColumnBySchemaAction(string sourceColumn, string dataSetColumn, DataTable dataTable, Type dataType, MissingSchemaAction schemaAction);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class System.Data.Common.DataColumnMappingCollection : MarshalByRefObject {
    private List`1<DataColumnMapping> _items;
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    private object System.Data.IColumnMappingCollection.Item { get; private set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public int Count { get; }
    private Type ItemType { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataColumnMapping Item { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataColumnMapping Item { get; public set; }
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override object System.Data.IColumnMappingCollection.get_Item(string index);
    private sealed virtual override void System.Data.IColumnMappingCollection.set_Item(string index, object value);
    private sealed virtual override IColumnMapping System.Data.IColumnMappingCollection.Add(string sourceColumnName, string dataSetColumnName);
    private sealed virtual override IColumnMapping System.Data.IColumnMappingCollection.GetByDataSetColumn(string dataSetColumnName);
    public sealed virtual int get_Count();
    private Type get_ItemType();
    public DataColumnMapping get_Item(int index);
    public void set_Item(int index, DataColumnMapping value);
    public DataColumnMapping get_Item(string sourceColumn);
    public void set_Item(string sourceColumn, DataColumnMapping value);
    public sealed virtual int Add(object value);
    private DataColumnMapping Add(DataColumnMapping value);
    public DataColumnMapping Add(string sourceColumn, string dataSetColumn);
    public void AddRange(DataColumnMapping[] values);
    public void AddRange(Array values);
    private void AddEnumerableRange(IEnumerable values, bool doClone);
    private void AddWithoutEvents(DataColumnMapping value);
    private List`1<DataColumnMapping> ArrayList();
    public sealed virtual void Clear();
    private void ClearWithoutEvents();
    public sealed virtual bool Contains(string value);
    public sealed virtual bool Contains(object value);
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(DataColumnMapping[] array, int index);
    public DataColumnMapping GetByDataSetColumn(string value);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual int IndexOf(object value);
    public sealed virtual int IndexOf(string sourceColumn);
    public int IndexOfDataSetColumn(string dataSetColumn);
    public sealed virtual void Insert(int index, object value);
    public void Insert(int index, DataColumnMapping value);
    private void RangeCheck(int index);
    private int RangeCheck(string sourceColumn);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void RemoveAt(string sourceColumn);
    private void RemoveIndex(int index);
    public sealed virtual void Remove(object value);
    public void Remove(DataColumnMapping value);
    private void Replace(int index, DataColumnMapping newValue);
    private void ValidateType(object value);
    private void Validate(int index, DataColumnMapping value);
    internal void ValidateSourceColumn(int index, string value);
    [EditorBrowsableAttribute("2")]
public static DataColumn GetDataColumn(DataColumnMappingCollection columnMappings, string sourceColumn, Type dataType, DataTable dataTable, MissingMappingAction mappingAction, MissingSchemaAction schemaAction);
    [EditorBrowsableAttribute("2")]
public static DataColumnMapping GetColumnMappingBySchemaAction(DataColumnMappingCollection columnMappings, string sourceColumn, MissingMappingAction mappingAction);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Common.DataRecordInternal : DbDataRecord {
    private SchemaInfo[] _schemaInfo;
    private Object[] _values;
    private PropertyDescriptorCollection _propertyDescriptors;
    private FieldNameLookup _fieldNameLookup;
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    internal DataRecordInternal(SchemaInfo[] schemaInfo, Object[] values, PropertyDescriptorCollection descriptors, FieldNameLookup fieldNameLookup);
    public virtual int get_FieldCount();
    public virtual int GetValues(Object[] values);
    public virtual string GetName(int i);
    public virtual object GetValue(int i);
    public virtual string GetDataTypeName(int i);
    public virtual Type GetFieldType(int i);
    public virtual int GetOrdinal(string name);
    public virtual object get_Item(int i);
    public virtual object get_Item(string name);
    public virtual bool GetBoolean(int i);
    public virtual byte GetByte(int i);
    public virtual long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    public virtual char GetChar(int i);
    public virtual long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length);
    public virtual Guid GetGuid(int i);
    public virtual short GetInt16(int i);
    public virtual int GetInt32(int i);
    public virtual long GetInt64(int i);
    public virtual float GetFloat(int i);
    public virtual double GetDouble(int i);
    public virtual string GetString(int i);
    public virtual decimal GetDecimal(int i);
    public virtual DateTime GetDateTime(int i);
    public virtual bool IsDBNull(int i);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
internal abstract class System.Data.Common.DataStorage : object {
    private static Type[] s_storageClassType;
    internal DataColumn _column;
    internal DataTable _table;
    internal Type _dataType;
    internal StorageType _storageTypeCode;
    private BitArray _dbNullBits;
    private object _defaultValue;
    internal object _nullValue;
    internal bool _isCloneable;
    internal bool _isCustomDefinedType;
    internal bool _isStringType;
    internal bool _isValueType;
    private static Func`2<Type, Tuple`4<bool, bool, bool, bool>> s_inspectTypeForInterfaces;
    private static ConcurrentDictionary`2<Type, Tuple`4<bool, bool, bool, bool>> s_typeImplementsInterface;
    internal DataSetDateTime DateTimeMode { get; }
    internal IFormatProvider FormatProvider { get; }
    protected DataStorage(DataColumn column, Type type, object defaultValue, StorageType storageType);
    protected DataStorage(DataColumn column, Type type, object defaultValue, object nullValue, StorageType storageType);
    protected DataStorage(DataColumn column, Type type, object defaultValue, object nullValue, bool isICloneable, StorageType storageType);
    private static DataStorage();
    internal DataSetDateTime get_DateTimeMode();
    internal IFormatProvider get_FormatProvider();
    public virtual object Aggregate(Int32[] recordNos, AggregateType kind);
    public object AggregateCount(Int32[] recordNos);
    protected int CompareBits(int recordNo1, int recordNo2);
    public abstract virtual int Compare(int recordNo1, int recordNo2);
    public abstract virtual int CompareValueTo(int recordNo1, object value);
    public virtual object ConvertValue(object value);
    protected void CopyBits(int srcRecordNo, int dstRecordNo);
    public abstract virtual void Copy(int recordNo1, int recordNo2);
    public abstract virtual object Get(int recordNo);
    protected object GetBits(int recordNo);
    public virtual int GetStringLength(int record);
    protected bool HasValue(int recordNo);
    public virtual bool IsNull(int recordNo);
    public abstract virtual void Set(int recordNo, object value);
    protected void SetNullBit(int recordNo, bool flag);
    public virtual void SetCapacity(int capacity);
    public abstract virtual object ConvertXmlToObject(string s);
    public virtual object ConvertXmlToObject(XmlReader xmlReader, XmlRootAttribute xmlAttrib);
    public abstract virtual string ConvertObjectToXml(object value);
    public virtual void ConvertObjectToXml(object value, XmlWriter xmlWriter, XmlRootAttribute xmlAttrib);
    public static DataStorage CreateStorage(DataColumn column, Type dataType, StorageType typeCode);
    internal static StorageType GetStorageType(Type dataType);
    internal static Type GetTypeStorage(StorageType storageType);
    internal static bool IsTypeCustomType(Type type);
    internal static bool IsTypeCustomType(StorageType typeCode);
    internal static bool IsSqlType(StorageType storageType);
    public static bool IsSqlType(Type dataType);
    private static bool DetermineIfValueType(StorageType typeCode, Type dataType);
    internal static void ImplementsInterfaces(StorageType typeCode, Type dataType, Boolean& sqlType, Boolean& nullable, Boolean& xmlSerializable, Boolean& changeTracking, Boolean& revertibleChangeTracking);
    private static Tuple`4<bool, bool, bool, bool> InspectTypeForInterfaces(Type dataType);
    internal static bool ImplementsINullableValue(StorageType typeCode, Type dataType);
    public static bool IsObjectNull(object value);
    public static bool IsObjectSqlNull(object value);
    internal object GetEmptyStorageInternal(int recordCount);
    internal void CopyValueInternal(int record, object store, BitArray nullbits, int storeIndex);
    internal void SetStorageInternal(object store, BitArray nullbits);
    protected abstract virtual object GetEmptyStorage(int recordCount);
    protected abstract virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected abstract virtual void SetStorage(object store, BitArray nullbits);
    protected void SetNullStorage(BitArray nullbits);
    internal static Type GetType(string value);
    internal static string GetQualifiedName(Type type);
}
[TypeConverterAttribute("System.Data.Common.DataTableMapping/DataTableMappingConverter")]
public class System.Data.Common.DataTableMapping : MarshalByRefObject {
    private DataTableMappingCollection _parent;
    private DataColumnMappingCollection _columnMappings;
    private string _dataSetTableName;
    private string _sourceTableName;
    private IColumnMappingCollection System.Data.ITableMapping.ColumnMappings { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public DataColumnMappingCollection ColumnMappings { get; }
    [DefaultValueAttribute("")]
public string DataSetTable { get; public set; }
    internal DataTableMappingCollection Parent { get; internal set; }
    [DefaultValueAttribute("")]
public string SourceTable { get; public set; }
    public DataTableMapping(string sourceTable, string dataSetTable);
    public DataTableMapping(string sourceTable, string dataSetTable, DataColumnMapping[] columnMappings);
    private sealed virtual override IColumnMappingCollection System.Data.ITableMapping.get_ColumnMappings();
    public DataColumnMappingCollection get_ColumnMappings();
    public sealed virtual string get_DataSetTable();
    public sealed virtual void set_DataSetTable(string value);
    internal DataTableMappingCollection get_Parent();
    internal void set_Parent(DataTableMappingCollection value);
    public sealed virtual string get_SourceTable();
    public sealed virtual void set_SourceTable(string value);
    private sealed virtual override object System.ICloneable.Clone();
    [EditorBrowsableAttribute("2")]
public DataColumn GetDataColumn(string sourceColumn, Type dataType, DataTable dataTable, MissingMappingAction mappingAction, MissingSchemaAction schemaAction);
    [EditorBrowsableAttribute("2")]
public DataColumnMapping GetColumnMappingBySchemaAction(string sourceColumn, MissingMappingAction mappingAction);
    [EditorBrowsableAttribute("2")]
public DataTable GetDataTableBySchemaAction(DataSet dataSet, MissingSchemaAction schemaAction);
    public virtual string ToString();
}
[ListBindableAttribute("False")]
[DefaultMemberAttribute("Item")]
public class System.Data.Common.DataTableMappingCollection : MarshalByRefObject {
    private List`1<DataTableMapping> _items;
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    private object System.Data.ITableMappingCollection.Item { get; private set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int Count { get; }
    private Type ItemType { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public DataTableMapping Item { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataTableMapping Item { get; public set; }
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override object System.Data.ITableMappingCollection.get_Item(string index);
    private sealed virtual override void System.Data.ITableMappingCollection.set_Item(string index, object value);
    private sealed virtual override ITableMapping System.Data.ITableMappingCollection.Add(string sourceTableName, string dataSetTableName);
    private sealed virtual override ITableMapping System.Data.ITableMappingCollection.GetByDataSetTable(string dataSetTableName);
    public sealed virtual int get_Count();
    private Type get_ItemType();
    public DataTableMapping get_Item(int index);
    public void set_Item(int index, DataTableMapping value);
    public DataTableMapping get_Item(string sourceTable);
    public void set_Item(string sourceTable, DataTableMapping value);
    public sealed virtual int Add(object value);
    private DataTableMapping Add(DataTableMapping value);
    public void AddRange(DataTableMapping[] values);
    public void AddRange(Array values);
    private void AddEnumerableRange(IEnumerable values, bool doClone);
    public DataTableMapping Add(string sourceTable, string dataSetTable);
    private void AddWithoutEvents(DataTableMapping value);
    private List`1<DataTableMapping> ArrayList();
    public sealed virtual void Clear();
    private void ClearWithoutEvents();
    public sealed virtual bool Contains(string value);
    public sealed virtual bool Contains(object value);
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(DataTableMapping[] array, int index);
    public DataTableMapping GetByDataSetTable(string dataSetTable);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual int IndexOf(object value);
    public sealed virtual int IndexOf(string sourceTable);
    public int IndexOfDataSetTable(string dataSetTable);
    public sealed virtual void Insert(int index, object value);
    public void Insert(int index, DataTableMapping value);
    private void RangeCheck(int index);
    private int RangeCheck(string sourceTable);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void RemoveAt(string sourceTable);
    private void RemoveIndex(int index);
    public sealed virtual void Remove(object value);
    public void Remove(DataTableMapping value);
    private void Replace(int index, DataTableMapping newValue);
    private void ValidateType(object value);
    private void Validate(int index, DataTableMapping value);
    internal void ValidateSourceTable(int index, string value);
    [EditorBrowsableAttribute("2")]
public static DataTableMapping GetTableMappingBySchemaAction(DataTableMappingCollection tableMappings, string sourceTable, string dataSetTable, MissingMappingAction mappingAction);
}
internal class System.Data.Common.DateTimeOffsetStorage : DataStorage {
    private static DateTimeOffset s_defaultValue;
    private DateTimeOffset[] _values;
    internal DateTimeOffsetStorage(DataColumn column);
    private static DateTimeOffsetStorage();
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.DateTimeStorage : DataStorage {
    private static DateTime s_defaultValue;
    private DateTime[] _values;
    internal DateTimeStorage(DataColumn column);
    private static DateTimeStorage();
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Data.Common.DbColumn : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <AllowDBNull>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseCatalogName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseSchemaName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseServerName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseTableName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ColumnName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ColumnOrdinal>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <ColumnSize>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsAliased>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsAutoIncrement>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsExpression>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsHidden>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsKey>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsLong>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsUnique>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <NumericPrecision>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <NumericScale>k__BackingField;
    [CompilerGeneratedAttribute]
private string <UdtAssemblyQualifiedName>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <DataType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DataTypeName>k__BackingField;
    public Nullable`1<bool> AllowDBNull { get; protected set; }
    public string BaseCatalogName { get; protected set; }
    public string BaseColumnName { get; protected set; }
    public string BaseSchemaName { get; protected set; }
    public string BaseServerName { get; protected set; }
    public string BaseTableName { get; protected set; }
    public string ColumnName { get; protected set; }
    public Nullable`1<int> ColumnOrdinal { get; protected set; }
    public Nullable`1<int> ColumnSize { get; protected set; }
    public Nullable`1<bool> IsAliased { get; protected set; }
    public Nullable`1<bool> IsAutoIncrement { get; protected set; }
    public Nullable`1<bool> IsExpression { get; protected set; }
    public Nullable`1<bool> IsHidden { get; protected set; }
    public Nullable`1<bool> IsIdentity { get; protected set; }
    public Nullable`1<bool> IsKey { get; protected set; }
    public Nullable`1<bool> IsLong { get; protected set; }
    public Nullable`1<bool> IsReadOnly { get; protected set; }
    public Nullable`1<bool> IsUnique { get; protected set; }
    public Nullable`1<int> NumericPrecision { get; protected set; }
    public Nullable`1<int> NumericScale { get; protected set; }
    public string UdtAssemblyQualifiedName { get; protected set; }
    public Type DataType { get; protected set; }
    public string DataTypeName { get; protected set; }
    public object Item { get; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_AllowDBNull();
    [CompilerGeneratedAttribute]
protected void set_AllowDBNull(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public string get_BaseCatalogName();
    [CompilerGeneratedAttribute]
protected void set_BaseCatalogName(string value);
    [CompilerGeneratedAttribute]
public string get_BaseColumnName();
    [CompilerGeneratedAttribute]
protected void set_BaseColumnName(string value);
    [CompilerGeneratedAttribute]
public string get_BaseSchemaName();
    [CompilerGeneratedAttribute]
protected void set_BaseSchemaName(string value);
    [CompilerGeneratedAttribute]
public string get_BaseServerName();
    [CompilerGeneratedAttribute]
protected void set_BaseServerName(string value);
    [CompilerGeneratedAttribute]
public string get_BaseTableName();
    [CompilerGeneratedAttribute]
protected void set_BaseTableName(string value);
    [CompilerGeneratedAttribute]
public string get_ColumnName();
    [CompilerGeneratedAttribute]
protected void set_ColumnName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ColumnOrdinal();
    [CompilerGeneratedAttribute]
protected void set_ColumnOrdinal(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_ColumnSize();
    [CompilerGeneratedAttribute]
protected void set_ColumnSize(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsAliased();
    [CompilerGeneratedAttribute]
protected void set_IsAliased(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsAutoIncrement();
    [CompilerGeneratedAttribute]
protected void set_IsAutoIncrement(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsExpression();
    [CompilerGeneratedAttribute]
protected void set_IsExpression(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsHidden();
    [CompilerGeneratedAttribute]
protected void set_IsHidden(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsIdentity();
    [CompilerGeneratedAttribute]
protected void set_IsIdentity(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsKey();
    [CompilerGeneratedAttribute]
protected void set_IsKey(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsLong();
    [CompilerGeneratedAttribute]
protected void set_IsLong(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsReadOnly();
    [CompilerGeneratedAttribute]
protected void set_IsReadOnly(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsUnique();
    [CompilerGeneratedAttribute]
protected void set_IsUnique(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_NumericPrecision();
    [CompilerGeneratedAttribute]
protected void set_NumericPrecision(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_NumericScale();
    [CompilerGeneratedAttribute]
protected void set_NumericScale(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_UdtAssemblyQualifiedName();
    [CompilerGeneratedAttribute]
protected void set_UdtAssemblyQualifiedName(string value);
    [CompilerGeneratedAttribute]
public Type get_DataType();
    [CompilerGeneratedAttribute]
protected void set_DataType(Type value);
    [CompilerGeneratedAttribute]
public string get_DataTypeName();
    [CompilerGeneratedAttribute]
protected void set_DataTypeName(string value);
    public virtual object get_Item(string property);
}
public abstract class System.Data.Common.DbCommand : Component {
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("")]
public string CommandText { get; public set; }
    public int CommandTimeout { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public CommandType CommandType { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public DbConnection Connection { get; public set; }
    private IDbConnection System.Data.IDbCommand.Connection { get; private set; }
    protected DbConnection DbConnection { get; protected set; }
    protected DbParameterCollection DbParameterCollection { get; }
    protected DbTransaction DbTransaction { get; protected set; }
    [EditorBrowsableAttribute("1")]
[DefaultValueAttribute("True")]
[DesignOnlyAttribute("True")]
[BrowsableAttribute("False")]
public bool DesignTimeVisible { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DbParameterCollection Parameters { get; }
    private IDataParameterCollection System.Data.IDbCommand.Parameters { get; }
    [DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public DbTransaction Transaction { get; public set; }
    private IDbTransaction System.Data.IDbCommand.Transaction { get; private set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public UpdateRowSource UpdatedRowSource { get; public set; }
    public abstract virtual string get_CommandText();
    public abstract virtual void set_CommandText(string value);
    public abstract virtual int get_CommandTimeout();
    public abstract virtual void set_CommandTimeout(int value);
    public abstract virtual CommandType get_CommandType();
    public abstract virtual void set_CommandType(CommandType value);
    public DbConnection get_Connection();
    public void set_Connection(DbConnection value);
    private sealed virtual override IDbConnection System.Data.IDbCommand.get_Connection();
    private sealed virtual override void System.Data.IDbCommand.set_Connection(IDbConnection value);
    protected abstract virtual DbConnection get_DbConnection();
    protected abstract virtual void set_DbConnection(DbConnection value);
    protected abstract virtual DbParameterCollection get_DbParameterCollection();
    protected abstract virtual DbTransaction get_DbTransaction();
    protected abstract virtual void set_DbTransaction(DbTransaction value);
    public abstract virtual bool get_DesignTimeVisible();
    public abstract virtual void set_DesignTimeVisible(bool value);
    public DbParameterCollection get_Parameters();
    private sealed virtual override IDataParameterCollection System.Data.IDbCommand.get_Parameters();
    public DbTransaction get_Transaction();
    public void set_Transaction(DbTransaction value);
    private sealed virtual override IDbTransaction System.Data.IDbCommand.get_Transaction();
    private sealed virtual override void System.Data.IDbCommand.set_Transaction(IDbTransaction value);
    public abstract virtual UpdateRowSource get_UpdatedRowSource();
    public abstract virtual void set_UpdatedRowSource(UpdateRowSource value);
    internal void CancelIgnoreFailure();
    public abstract virtual void Cancel();
    public DbParameter CreateParameter();
    private sealed virtual override IDbDataParameter System.Data.IDbCommand.CreateParameter();
    protected abstract virtual DbParameter CreateDbParameter();
    protected abstract virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    public abstract virtual int ExecuteNonQuery();
    public DbDataReader ExecuteReader();
    private sealed virtual override IDataReader System.Data.IDbCommand.ExecuteReader();
    public DbDataReader ExecuteReader(CommandBehavior behavior);
    private sealed virtual override IDataReader System.Data.IDbCommand.ExecuteReader(CommandBehavior behavior);
    public Task`1<int> ExecuteNonQueryAsync();
    public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    public Task`1<DbDataReader> ExecuteReaderAsync();
    public Task`1<DbDataReader> ExecuteReaderAsync(CancellationToken cancellationToken);
    public Task`1<DbDataReader> ExecuteReaderAsync(CommandBehavior behavior);
    public Task`1<DbDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public Task`1<object> ExecuteScalarAsync();
    public virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    public abstract virtual object ExecuteScalar();
    public abstract virtual void Prepare();
    public virtual Task PrepareAsync(CancellationToken cancellationToken);
    public virtual ValueTask DisposeAsync();
}
public abstract class System.Data.Common.DbCommandBuilder : Component {
    private DbDataAdapter _dataAdapter;
    private DbCommand _insertCommand;
    private DbCommand _updateCommand;
    private DbCommand _deleteCommand;
    private MissingMappingAction _missingMappingAction;
    private ConflictOption _conflictDetection;
    private bool _setAllValues;
    private bool _hasPartialPrimaryKey;
    private DataTable _dbSchemaTable;
    private DbSchemaRow[] _dbSchemaRows;
    private String[] _sourceColumnNames;
    private ParameterNames _parameterNames;
    private string _quotedBaseTableName;
    private CatalogLocation _catalogLocation;
    private string _catalogSeparator;
    private string _schemaSeparator;
    private string _quotePrefix;
    private string _quoteSuffix;
    private string _parameterNamePattern;
    private string _parameterMarkerFormat;
    private int _parameterNameMaxLength;
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ConflictOption ConflictOption { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public CatalogLocation CatalogLocation { get; public set; }
    [DefaultValueAttribute(".")]
public string CatalogSeparator { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public DbDataAdapter DataAdapter { get; public set; }
    internal int ParameterNameMaxLength { get; }
    internal string ParameterNamePattern { get; }
    private string QuotedBaseTableName { get; }
    [DefaultValueAttribute("")]
public string QuotePrefix { get; public set; }
    [DefaultValueAttribute("")]
public string QuoteSuffix { get; public set; }
    [DefaultValueAttribute(".")]
public string SchemaSeparator { get; public set; }
    [DefaultValueAttribute("False")]
public bool SetAllValues { get; public set; }
    private DbCommand InsertCommand { get; private set; }
    private DbCommand UpdateCommand { get; private set; }
    private DbCommand DeleteCommand { get; private set; }
    public virtual ConflictOption get_ConflictOption();
    public virtual void set_ConflictOption(ConflictOption value);
    public virtual CatalogLocation get_CatalogLocation();
    public virtual void set_CatalogLocation(CatalogLocation value);
    public virtual string get_CatalogSeparator();
    public virtual void set_CatalogSeparator(string value);
    public DbDataAdapter get_DataAdapter();
    public void set_DataAdapter(DbDataAdapter value);
    internal int get_ParameterNameMaxLength();
    internal string get_ParameterNamePattern();
    private string get_QuotedBaseTableName();
    public virtual string get_QuotePrefix();
    public virtual void set_QuotePrefix(string value);
    public virtual string get_QuoteSuffix();
    public virtual void set_QuoteSuffix(string value);
    public virtual string get_SchemaSeparator();
    public virtual void set_SchemaSeparator(string value);
    public bool get_SetAllValues();
    public void set_SetAllValues(bool value);
    private DbCommand get_InsertCommand();
    private void set_InsertCommand(DbCommand value);
    private DbCommand get_UpdateCommand();
    private void set_UpdateCommand(DbCommand value);
    private DbCommand get_DeleteCommand();
    private void set_DeleteCommand(DbCommand value);
    private void BuildCache(bool closeConnection, DataRow dataRow, bool useColumnsForParameterNames);
    protected virtual DataTable GetSchemaTable(DbCommand sourceCommand);
    private void BuildInformation(DataTable schemaTable);
    private DbCommand BuildDeleteCommand(DataTableMapping mappings, DataRow dataRow);
    private DbCommand BuildInsertCommand(DataTableMapping mappings, DataRow dataRow);
    private DbCommand BuildUpdateCommand(DataTableMapping mappings, DataRow dataRow);
    private int BuildWhereClause(DataTableMapping mappings, DataRow dataRow, StringBuilder builder, DbCommand command, int parameterCount, bool isUpdate);
    private string CreateParameterForNullTest(DbCommand command, string parameterName, string sourceColumn, DataRowVersion version, int parameterCount, object value, DbSchemaRow row, StatementType statementType, bool whereClause);
    private string CreateParameterForValue(DbCommand command, string parameterName, string sourceColumn, DataRowVersion version, int parameterCount, object value, DbSchemaRow row, StatementType statementType, bool whereClause);
    protected virtual void Dispose(bool disposing);
    private DataTableMapping GetTableMapping(DataRow dataRow);
    private string GetBaseParameterName(int index);
    private string GetOriginalParameterName(int index);
    private string GetNullParameterName(int index);
    private DbCommand GetSelectCommand();
    public DbCommand GetInsertCommand();
    public DbCommand GetInsertCommand(bool useColumnsForParameterNames);
    internal DbCommand GetInsertCommand(DataRow dataRow, bool useColumnsForParameterNames);
    public DbCommand GetUpdateCommand();
    public DbCommand GetUpdateCommand(bool useColumnsForParameterNames);
    internal DbCommand GetUpdateCommand(DataRow dataRow, bool useColumnsForParameterNames);
    public DbCommand GetDeleteCommand();
    public DbCommand GetDeleteCommand(bool useColumnsForParameterNames);
    internal DbCommand GetDeleteCommand(DataRow dataRow, bool useColumnsForParameterNames);
    private object GetColumnValue(DataRow row, string columnName, DataTableMapping mappings, DataRowVersion version);
    private object GetColumnValue(DataRow row, DataColumn column, DataRowVersion version);
    private DataColumn GetDataColumn(string columnName, DataTableMapping tablemapping, DataRow row);
    private static DbParameter GetNextParameter(DbCommand command, int pcount);
    private bool IncludeInInsertValues(DbSchemaRow row);
    private bool IncludeInUpdateSet(DbSchemaRow row);
    private bool IncludeInWhereClause(DbSchemaRow row, bool isUpdate);
    private bool IncrementWhereCount(DbSchemaRow row);
    protected virtual DbCommand InitializeCommand(DbCommand command);
    private string QuotedColumn(string column);
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    public virtual void RefreshSchema();
    private static void RemoveExtraParameters(DbCommand command, int usedParameterCount);
    protected void RowUpdatingHandler(RowUpdatingEventArgs rowUpdatingEvent);
    private void RowUpdatingHandlerBuilder(RowUpdatingEventArgs rowUpdatingEvent);
    public virtual string UnquoteIdentifier(string quotedIdentifier);
    protected abstract virtual void ApplyParameterInfo(DbParameter parameter, DataRow row, StatementType statementType, bool whereClause);
    protected abstract virtual string GetParameterName(int parameterOrdinal);
    protected abstract virtual string GetParameterName(string parameterName);
    protected abstract virtual string GetParameterPlaceholder(int parameterOrdinal);
    protected abstract virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
}
public abstract class System.Data.Common.DbConnection : Component {
    internal bool _suppressStateChangeForReconnection;
    [CompilerGeneratedAttribute]
private StateChangeEventHandler StateChange;
    [RefreshPropertiesAttribute("1")]
[SettingsBindableAttribute("True")]
[DefaultValueAttribute("")]
[RecommendedAsConfigurableAttribute("True")]
public string ConnectionString { get; public set; }
    public int ConnectionTimeout { get; }
    public string Database { get; }
    public string DataSource { get; }
    protected DbProviderFactory DbProviderFactory { get; }
    internal DbProviderFactory ProviderFactory { get; }
    [BrowsableAttribute("False")]
public string ServerVersion { get; }
    [BrowsableAttribute("False")]
public ConnectionState State { get; }
    public abstract virtual string get_ConnectionString();
    public abstract virtual void set_ConnectionString(string value);
    public virtual int get_ConnectionTimeout();
    public abstract virtual string get_Database();
    public abstract virtual string get_DataSource();
    protected virtual DbProviderFactory get_DbProviderFactory();
    internal DbProviderFactory get_ProviderFactory();
    public abstract virtual string get_ServerVersion();
    public abstract virtual ConnectionState get_State();
    [CompilerGeneratedAttribute]
public virtual void add_StateChange(StateChangeEventHandler value);
    [CompilerGeneratedAttribute]
public virtual void remove_StateChange(StateChangeEventHandler value);
    protected abstract virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    public DbTransaction BeginTransaction();
    public DbTransaction BeginTransaction(IsolationLevel isolationLevel);
    private sealed virtual override IDbTransaction System.Data.IDbConnection.BeginTransaction();
    private sealed virtual override IDbTransaction System.Data.IDbConnection.BeginTransaction(IsolationLevel isolationLevel);
    protected virtual ValueTask`1<DbTransaction> BeginDbTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken);
    public ValueTask`1<DbTransaction> BeginTransactionAsync(CancellationToken cancellationToken);
    public ValueTask`1<DbTransaction> BeginTransactionAsync(IsolationLevel isolationLevel, CancellationToken cancellationToken);
    public abstract virtual void Close();
    public virtual Task CloseAsync();
    public virtual ValueTask DisposeAsync();
    public abstract virtual void ChangeDatabase(string databaseName);
    public virtual Task ChangeDatabaseAsync(string databaseName, CancellationToken cancellationToken);
    public DbCommand CreateCommand();
    private sealed virtual override IDbCommand System.Data.IDbConnection.CreateCommand();
    protected abstract virtual DbCommand CreateDbCommand();
    public virtual void EnlistTransaction(Transaction transaction);
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    public virtual DataTable GetSchema(string collectionName, String[] restrictionValues);
    protected virtual void OnStateChange(StateChangeEventArgs stateChange);
    public abstract virtual void Open();
    public Task OpenAsync();
    public virtual Task OpenAsync(CancellationToken cancellationToken);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.Common.DbConnectionOptions : object {
    internal bool _useOdbcRules;
    internal bool _hasUserIdKeyword;
    private static Regex s_connectionStringValidKeyRegex;
    private static Regex s_connectionStringValidValueRegex;
    private static Regex s_connectionStringQuoteValueRegex;
    private static Regex s_connectionStringQuoteOdbcValueRegex;
    private string _usersConnectionString;
    private Dictionary`2<string, string> _parsetable;
    internal NameValuePair _keyChain;
    internal bool _hasPasswordKeyword;
    public DbConnectionOptions(string connectionString, Dictionary`2<string, string> synonyms, bool useOdbcRules);
    private static DbConnectionOptions();
    internal static void AppendKeyValuePairBuilder(StringBuilder builder, string keyName, string keyValue, bool useOdbcRules);
    internal static void ValidateKeyValuePair(string keyword, string value);
    private static string GetKeyName(StringBuilder buffer);
    private static string GetKeyValue(StringBuilder buffer, bool trimWhitespace);
    internal static int GetKeyValuePair(string connectionString, int currentPosition, StringBuilder buffer, bool useOdbcRules, String& keyname, String& keyvalue);
    private static bool IsValueValidInternal(string keyvalue);
    private static bool IsKeyNameValid(string keyname);
    private static NameValuePair ParseInternal(Dictionary`2<string, string> parsetable, string connectionString, bool buildChain, Dictionary`2<string, string> synonyms, bool firstKey);
}
[DefaultMemberAttribute("Item")]
public class System.Data.Common.DbConnectionStringBuilder : object {
    private Dictionary`2<string, object> _currentValues;
    private string _connectionString;
    private PropertyDescriptorCollection _propertyDescriptors;
    private bool _browsableConnectionString;
    private bool _useOdbcRules;
    private static int s_objectTypeCount;
    internal int _objectID;
    private ICollection Collection { get; }
    private IDictionary Dictionary { get; }
    private Dictionary`2<string, object> CurrentValues { get; }
    private object System.Collections.IDictionary.Item { get; private set; }
    [BrowsableAttribute("False")]
public object Item { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[DesignOnlyAttribute("True")]
[EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
public bool BrowsableConnectionString { get; public set; }
    [RefreshPropertiesAttribute("1")]
public string ConnectionString { get; public set; }
    [BrowsableAttribute("False")]
public int Count { get; }
    [BrowsableAttribute("False")]
public bool IsReadOnly { get; }
    [BrowsableAttribute("False")]
public bool IsFixedSize { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    [BrowsableAttribute("False")]
public ICollection Keys { get; }
    internal int ObjectID { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    [BrowsableAttribute("False")]
public ICollection Values { get; }
    public DbConnectionStringBuilder(bool useOdbcRules);
    private ICollection get_Collection();
    private IDictionary get_Dictionary();
    private Dictionary`2<string, object> get_CurrentValues();
    private sealed virtual override object System.Collections.IDictionary.get_Item(object keyword);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object keyword, object value);
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    public bool get_BrowsableConnectionString();
    public void set_BrowsableConnectionString(bool value);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public virtual bool get_IsFixedSize();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public virtual ICollection get_Keys();
    internal int get_ObjectID();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public virtual ICollection get_Values();
    internal virtual string ConvertValueToString(object value);
    private sealed virtual override void System.Collections.IDictionary.Add(object keyword, object value);
    public void Add(string keyword, object value);
    public static void AppendKeyValuePair(StringBuilder builder, string keyword, string value);
    public static void AppendKeyValuePair(StringBuilder builder, string keyword, string value, bool useOdbcRules);
    public virtual void Clear();
    protected internal void ClearPropertyDescriptors();
    private sealed virtual override bool System.Collections.IDictionary.Contains(object keyword);
    public virtual bool ContainsKey(string keyword);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public virtual bool EquivalentTo(DbConnectionStringBuilder connectionStringBuilder);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private string ObjectToString(object keyword);
    private sealed virtual override void System.Collections.IDictionary.Remove(object keyword);
    public virtual bool Remove(string keyword);
    public virtual bool ShouldSerialize(string keyword);
    public virtual string ToString();
    public virtual bool TryGetValue(string keyword, Object& value);
    internal Attribute[] GetAttributesFromCollection(AttributeCollection collection);
    private PropertyDescriptorCollection GetProperties();
    protected virtual void GetProperties(Hashtable propertyDescriptors);
    private PropertyDescriptorCollection GetProperties(Attribute[] attributes);
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
internal class System.Data.Common.DbConnectionStringBuilderDescriptor : PropertyDescriptor {
    [CompilerGeneratedAttribute]
private bool <RefreshOnChange>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <ComponentType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsReadOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private Type <PropertyType>k__BackingField;
    internal bool RefreshOnChange { get; }
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    internal DbConnectionStringBuilderDescriptor(string propertyName, Type componentType, Type propertyType, bool isReadOnly, Attribute[] attributes);
    [CompilerGeneratedAttribute]
internal bool get_RefreshOnChange();
    [CompilerGeneratedAttribute]
public virtual Type get_ComponentType();
    [CompilerGeneratedAttribute]
public virtual bool get_IsReadOnly();
    [CompilerGeneratedAttribute]
public virtual Type get_PropertyType();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
internal static class System.Data.Common.DbConnectionStringBuilderUtil : object {
    internal static string ConvertToString(object value);
}
public abstract class System.Data.Common.DbDataAdapter : DataAdapter {
    public static string DefaultSourceTableName;
    internal static object s_parameterValueNonNullValue;
    internal static object s_parameterValueNullValue;
    private IDbCommand _deleteCommand;
    private IDbCommand _insertCommand;
    private IDbCommand _selectCommand;
    private IDbCommand _updateCommand;
    private CommandBehavior _fillCommandBehavior;
    private IDbDataAdapter _IDbDataAdapter { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public DbCommand DeleteCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; private set; }
    protected internal CommandBehavior FillCommandBehavior { get; protected internal set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public DbCommand InsertCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; private set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public DbCommand SelectCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; private set; }
    [DefaultValueAttribute("1")]
public int UpdateBatchSize { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DbCommand UpdateCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; private set; }
    private MissingMappingAction UpdateMappingAction { get; }
    private MissingSchemaAction UpdateSchemaAction { get; }
    protected DbDataAdapter(DbDataAdapter adapter);
    private static DbDataAdapter();
    private IDbDataAdapter get__IDbDataAdapter();
    public DbCommand get_DeleteCommand();
    public void set_DeleteCommand(DbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_DeleteCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_DeleteCommand(IDbCommand value);
    protected internal CommandBehavior get_FillCommandBehavior();
    protected internal void set_FillCommandBehavior(CommandBehavior value);
    public DbCommand get_InsertCommand();
    public void set_InsertCommand(DbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_InsertCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_InsertCommand(IDbCommand value);
    public DbCommand get_SelectCommand();
    public void set_SelectCommand(DbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_SelectCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_SelectCommand(IDbCommand value);
    public virtual int get_UpdateBatchSize();
    public virtual void set_UpdateBatchSize(int value);
    public DbCommand get_UpdateCommand();
    public void set_UpdateCommand(DbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_UpdateCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_UpdateCommand(IDbCommand value);
    private MissingMappingAction get_UpdateMappingAction();
    private MissingSchemaAction get_UpdateSchemaAction();
    protected virtual int AddToBatch(IDbCommand command);
    protected virtual void ClearBatch();
    private sealed virtual override object System.ICloneable.Clone();
    private void CloneFrom(DbDataAdapter from);
    private IDbCommand CloneCommand(IDbCommand command);
    protected virtual RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual void Dispose(bool disposing);
    protected virtual int ExecuteBatch();
    public DataTable FillSchema(DataTable dataTable, SchemaType schemaType);
    public virtual DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType);
    public DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType, string srcTable);
    protected virtual DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType, IDbCommand command, string srcTable, CommandBehavior behavior);
    protected virtual DataTable FillSchema(DataTable dataTable, SchemaType schemaType, IDbCommand command, CommandBehavior behavior);
    private object FillSchemaInternal(DataSet dataset, DataTable datatable, SchemaType schemaType, IDbCommand command, string srcTable, CommandBehavior behavior);
    public virtual int Fill(DataSet dataSet);
    public int Fill(DataSet dataSet, string srcTable);
    public int Fill(DataSet dataSet, int startRecord, int maxRecords, string srcTable);
    protected virtual int Fill(DataSet dataSet, int startRecord, int maxRecords, string srcTable, IDbCommand command, CommandBehavior behavior);
    public int Fill(DataTable dataTable);
    public int Fill(int startRecord, int maxRecords, DataTable[] dataTables);
    protected virtual int Fill(DataTable dataTable, IDbCommand command, CommandBehavior behavior);
    protected virtual int Fill(DataTable[] dataTables, int startRecord, int maxRecords, IDbCommand command, CommandBehavior behavior);
    private int FillInternal(DataSet dataset, DataTable[] datatables, int startRecord, int maxRecords, string srcTable, IDbCommand command, CommandBehavior behavior);
    protected virtual IDataParameter GetBatchedParameter(int commandIdentifier, int parameterIndex);
    protected virtual bool GetBatchedRecordsAffected(int commandIdentifier, Int32& recordsAffected, Exception& error);
    [EditorBrowsableAttribute("2")]
public virtual IDataParameter[] GetFillParameters();
    internal DataTableMapping GetTableMapping(DataTable dataTable);
    protected virtual void InitializeBatching();
    protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
    protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
    private void ParameterInput(IDataParameterCollection parameters, StatementType typeIndex, DataRow row, DataTableMapping mappings);
    private void ParameterOutput(IDataParameter parameter, DataRow row, DataTableMapping mappings, MissingMappingAction missingMapping, MissingSchemaAction missingSchema);
    private void ParameterOutput(IDataParameterCollection parameters, DataRow row, DataTableMapping mappings);
    protected virtual void TerminateBatching();
    public virtual int Update(DataSet dataSet);
    public int Update(DataRow[] dataRows);
    public int Update(DataTable dataTable);
    public int Update(DataSet dataSet, string srcTable);
    protected virtual int Update(DataRow[] dataRows, DataTableMapping tableMapping);
    private void UpdateBatchExecute(BatchCommandInfo[] batchCommands, int commandCount, RowUpdatedEventArgs rowUpdatedEvent);
    private ConnectionState UpdateConnectionOpen(IDbConnection connection, StatementType statementType, IDbConnection[] connections, ConnectionState[] connectionStates, bool useSelectConnectionState);
    private int UpdateFromDataTable(DataTable dataTable, DataTableMapping tableMapping);
    private void UpdateRowExecute(RowUpdatedEventArgs rowUpdatedEvent, IDbCommand dataCommand, StatementType cmdIndex);
    private int UpdatedRowStatus(RowUpdatedEventArgs rowUpdatedEvent, BatchCommandInfo[] batchCommands, int commandCount);
    private int UpdatedRowStatusContinue(RowUpdatedEventArgs rowUpdatedEvent, BatchCommandInfo[] batchCommands, int commandCount);
    private int UpdatedRowStatusErrors(RowUpdatedEventArgs rowUpdatedEvent, BatchCommandInfo[] batchCommands, int commandCount);
    private int UpdatedRowStatusSkip(BatchCommandInfo[] batchCommands, int commandCount);
    private void UpdatingRowStatusErrors(RowUpdatingEventArgs rowUpdatedEvent, DataRow dataRow);
    private static IDbConnection GetConnection1(DbDataAdapter adapter);
    private static IDbConnection GetConnection3(DbDataAdapter adapter, IDbCommand command, string method);
    private static IDbConnection GetConnection4(DbDataAdapter adapter, IDbCommand command, StatementType statementType, bool isCommandFromRowUpdating);
    private static DataRowVersion GetParameterSourceVersion(StatementType statementType, IDataParameter parameter);
    private static void QuietClose(IDbConnection connection, ConnectionState originalState);
    private static void QuietOpen(IDbConnection connection, ConnectionState& originalState);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Data.Common.DbDataReader : MarshalByRefObject {
    public int Depth { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public int VisibleFieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public abstract virtual int get_Depth();
    public abstract virtual int get_FieldCount();
    public abstract virtual bool get_HasRows();
    public abstract virtual bool get_IsClosed();
    public abstract virtual int get_RecordsAffected();
    public virtual int get_VisibleFieldCount();
    public abstract virtual object get_Item(int ordinal);
    public abstract virtual object get_Item(string name);
    public virtual void Close();
    public virtual Task CloseAsync();
    [EditorBrowsableAttribute("1")]
public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual ValueTask DisposeAsync();
    public abstract virtual string GetDataTypeName(int ordinal);
    [EditorBrowsableAttribute("1")]
public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual Type GetFieldType(int ordinal);
    public abstract virtual string GetName(int ordinal);
    public abstract virtual int GetOrdinal(string name);
    public virtual DataTable GetSchemaTable();
    public abstract virtual bool GetBoolean(int ordinal);
    public abstract virtual byte GetByte(int ordinal);
    public abstract virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public abstract virtual char GetChar(int ordinal);
    public abstract virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    [EditorBrowsableAttribute("1")]
public DbDataReader GetData(int ordinal);
    private sealed virtual override IDataReader System.Data.IDataRecord.GetData(int ordinal);
    protected virtual DbDataReader GetDbDataReader(int ordinal);
    public abstract virtual DateTime GetDateTime(int ordinal);
    public abstract virtual decimal GetDecimal(int ordinal);
    public abstract virtual double GetDouble(int ordinal);
    public abstract virtual float GetFloat(int ordinal);
    public abstract virtual Guid GetGuid(int ordinal);
    public abstract virtual short GetInt16(int ordinal);
    public abstract virtual int GetInt32(int ordinal);
    public abstract virtual long GetInt64(int ordinal);
    [EditorBrowsableAttribute("1")]
public virtual Type GetProviderSpecificFieldType(int ordinal);
    [EditorBrowsableAttribute("1")]
public virtual object GetProviderSpecificValue(int ordinal);
    [EditorBrowsableAttribute("1")]
public virtual int GetProviderSpecificValues(Object[] values);
    public abstract virtual string GetString(int ordinal);
    public virtual Stream GetStream(int ordinal);
    public virtual TextReader GetTextReader(int ordinal);
    public abstract virtual object GetValue(int ordinal);
    public virtual T GetFieldValue(int ordinal);
    public Task`1<T> GetFieldValueAsync(int ordinal);
    public virtual Task`1<T> GetFieldValueAsync(int ordinal, CancellationToken cancellationToken);
    public abstract virtual int GetValues(Object[] values);
    public abstract virtual bool IsDBNull(int ordinal);
    public Task`1<bool> IsDBNullAsync(int ordinal);
    public virtual Task`1<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken);
    public abstract virtual bool NextResult();
    public abstract virtual bool Read();
    public Task`1<bool> ReadAsync();
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    public Task`1<bool> NextResultAsync();
    public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
}
[ExtensionAttribute]
public static class System.Data.Common.DbDataReaderExtensions : object {
    [ExtensionAttribute]
public static ReadOnlyCollection`1<DbColumn> GetColumnSchema(DbDataReader reader);
    [ExtensionAttribute]
public static bool CanGetColumnSchema(DbDataReader reader);
    private static ReadOnlyCollection`1<DbColumn> GetColumnSchemaCompatibility(DbDataReader reader);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Data.Common.DbDataRecord : object {
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public abstract virtual int get_FieldCount();
    public abstract virtual object get_Item(int i);
    public abstract virtual object get_Item(string name);
    public abstract virtual bool GetBoolean(int i);
    public abstract virtual byte GetByte(int i);
    public abstract virtual long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    public abstract virtual char GetChar(int i);
    public abstract virtual long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length);
    public sealed virtual IDataReader GetData(int i);
    protected virtual DbDataReader GetDbDataReader(int i);
    public abstract virtual string GetDataTypeName(int i);
    public abstract virtual DateTime GetDateTime(int i);
    public abstract virtual decimal GetDecimal(int i);
    public abstract virtual double GetDouble(int i);
    public abstract virtual Type GetFieldType(int i);
    public abstract virtual float GetFloat(int i);
    public abstract virtual Guid GetGuid(int i);
    public abstract virtual short GetInt16(int i);
    public abstract virtual int GetInt32(int i);
    public abstract virtual long GetInt64(int i);
    public abstract virtual string GetName(int i);
    public abstract virtual int GetOrdinal(string name);
    public abstract virtual string GetString(int i);
    public abstract virtual object GetValue(int i);
    public abstract virtual int GetValues(Object[] values);
    public abstract virtual bool IsDBNull(int i);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
public abstract class System.Data.Common.DbDataSourceEnumerator : object {
    public abstract virtual DataTable GetDataSources();
}
public class System.Data.Common.DbEnumerator : object {
    internal IDataReader _reader;
    internal DbDataRecord _current;
    internal SchemaInfo[] _schemaInfo;
    internal PropertyDescriptorCollection _descriptors;
    private FieldNameLookup _fieldNameLookup;
    private bool _closeReader;
    public object Current { get; }
    public DbEnumerator(IDataReader reader);
    public DbEnumerator(IDataReader reader, bool closeReader);
    public DbEnumerator(DbDataReader reader);
    public DbEnumerator(DbDataReader reader, bool closeReader);
    public sealed virtual object get_Current();
    public sealed virtual bool MoveNext();
    [EditorBrowsableAttribute("1")]
public sealed virtual void Reset();
    private void BuildSchemaInfo();
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public abstract class System.Data.Common.DbException : ExternalException {
    protected DbException(string message);
    protected DbException(string message, Exception innerException);
    protected DbException(string message, int errorCode);
    protected DbException(SerializationInfo info, StreamingContext context);
}
public static class System.Data.Common.DbMetaDataCollectionNames : object {
    public static string MetaDataCollections;
    public static string DataSourceInformation;
    public static string DataTypes;
    public static string Restrictions;
    public static string ReservedWords;
    private static DbMetaDataCollectionNames();
}
public static class System.Data.Common.DbMetaDataColumnNames : object {
    public static string CollectionName;
    public static string ColumnSize;
    public static string CompositeIdentifierSeparatorPattern;
    public static string CreateFormat;
    public static string CreateParameters;
    public static string DataSourceProductName;
    public static string DataSourceProductVersion;
    public static string DataType;
    public static string DataSourceProductVersionNormalized;
    public static string GroupByBehavior;
    public static string IdentifierCase;
    public static string IdentifierPattern;
    public static string IsAutoIncrementable;
    public static string IsBestMatch;
    public static string IsCaseSensitive;
    public static string IsConcurrencyType;
    public static string IsFixedLength;
    public static string IsFixedPrecisionScale;
    public static string IsLiteralSupported;
    public static string IsLong;
    public static string IsNullable;
    public static string IsSearchable;
    public static string IsSearchableWithLike;
    public static string IsUnsigned;
    public static string LiteralPrefix;
    public static string LiteralSuffix;
    public static string MaximumScale;
    public static string MinimumScale;
    public static string NumberOfIdentifierParts;
    public static string NumberOfRestrictions;
    public static string OrderByColumnsInSelect;
    public static string ParameterMarkerFormat;
    public static string ParameterMarkerPattern;
    public static string ParameterNameMaxLength;
    public static string ParameterNamePattern;
    public static string ProviderDbType;
    public static string QuotedIdentifierCase;
    public static string QuotedIdentifierPattern;
    public static string ReservedWord;
    public static string StatementSeparatorPattern;
    public static string StringLiteralPattern;
    public static string SupportedJoinOperators;
    public static string TypeName;
    private static DbMetaDataColumnNames();
}
public abstract class System.Data.Common.DbParameter : MarshalByRefObject {
    [RefreshPropertiesAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public DbType DbType { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[RefreshPropertiesAttribute("1")]
public ParameterDirection Direction { get; public set; }
    [EditorBrowsableAttribute("1")]
[DesignOnlyAttribute("True")]
[BrowsableAttribute("False")]
public bool IsNullable { get; public set; }
    [DefaultValueAttribute("")]
public string ParameterName { get; public set; }
    private byte System.Data.IDbDataParameter.Precision { get; private set; }
    private byte System.Data.IDbDataParameter.Scale { get; private set; }
    public byte Precision { get; public set; }
    public byte Scale { get; public set; }
    public int Size { get; public set; }
    [DefaultValueAttribute("")]
public string SourceColumn { get; public set; }
    [EditorBrowsableAttribute("2")]
[RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("False")]
public bool SourceColumnNullMapping { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataRowVersion SourceVersion { get; public set; }
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("")]
public object Value { get; public set; }
    public abstract virtual DbType get_DbType();
    public abstract virtual void set_DbType(DbType value);
    [EditorBrowsableAttribute("2")]
public abstract virtual void ResetDbType();
    public abstract virtual ParameterDirection get_Direction();
    public abstract virtual void set_Direction(ParameterDirection value);
    public abstract virtual bool get_IsNullable();
    public abstract virtual void set_IsNullable(bool value);
    public abstract virtual string get_ParameterName();
    public abstract virtual void set_ParameterName(string value);
    private sealed virtual override byte System.Data.IDbDataParameter.get_Precision();
    private sealed virtual override void System.Data.IDbDataParameter.set_Precision(byte value);
    private sealed virtual override byte System.Data.IDbDataParameter.get_Scale();
    private sealed virtual override void System.Data.IDbDataParameter.set_Scale(byte value);
    public virtual byte get_Precision();
    public virtual void set_Precision(byte value);
    public virtual byte get_Scale();
    public virtual void set_Scale(byte value);
    public abstract virtual int get_Size();
    public abstract virtual void set_Size(int value);
    public abstract virtual string get_SourceColumn();
    public abstract virtual void set_SourceColumn(string value);
    public abstract virtual bool get_SourceColumnNullMapping();
    public abstract virtual void set_SourceColumnNullMapping(bool value);
    public virtual DataRowVersion get_SourceVersion();
    public virtual void set_SourceVersion(DataRowVersion value);
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Data.Common.DbParameterCollection : MarshalByRefObject {
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public int Count { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public bool IsFixedSize { get; }
    [BrowsableAttribute("False")]
[EditorBrowsableAttribute("1")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsReadOnly { get; }
    [EditorBrowsableAttribute("1")]
[BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool IsSynchronized { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public object SyncRoot { get; }
    private object System.Collections.IList.Item { get; private set; }
    private object System.Data.IDataParameterCollection.Item { get; private set; }
    public DbParameter Item { get; public set; }
    public DbParameter Item { get; public set; }
    public abstract virtual int get_Count();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSynchronized();
    public abstract virtual object get_SyncRoot();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override object System.Data.IDataParameterCollection.get_Item(string parameterName);
    private sealed virtual override void System.Data.IDataParameterCollection.set_Item(string parameterName, object value);
    public DbParameter get_Item(int index);
    public void set_Item(int index, DbParameter value);
    public DbParameter get_Item(string parameterName);
    public void set_Item(string parameterName, DbParameter value);
    public abstract virtual int Add(object value);
    public abstract virtual void AddRange(Array values);
    public abstract virtual bool Contains(object value);
    public abstract virtual bool Contains(string value);
    public abstract virtual void CopyTo(Array array, int index);
    public abstract virtual void Clear();
    [EditorBrowsableAttribute("1")]
public abstract virtual IEnumerator GetEnumerator();
    protected abstract virtual DbParameter GetParameter(int index);
    protected abstract virtual DbParameter GetParameter(string parameterName);
    public abstract virtual int IndexOf(object value);
    public abstract virtual int IndexOf(string parameterName);
    public abstract virtual void Insert(int index, object value);
    public abstract virtual void Remove(object value);
    public abstract virtual void RemoveAt(int index);
    public abstract virtual void RemoveAt(string parameterName);
    protected abstract virtual void SetParameter(int index, DbParameter value);
    protected abstract virtual void SetParameter(string parameterName, DbParameter value);
}
public static class System.Data.Common.DbProviderFactories : object {
    private static ConcurrentDictionary`2<string, ProviderRegistration> _registeredFactories;
    private static DbProviderFactories();
    public static bool TryGetFactory(string providerInvariantName, DbProviderFactory& factory);
    public static DbProviderFactory GetFactory(string providerInvariantName);
    public static DbProviderFactory GetFactory(DataRow providerRow);
    public static DbProviderFactory GetFactory(DbConnection connection);
    public static DataTable GetFactoryClasses();
    public static IEnumerable`1<string> GetProviderInvariantNames();
    public static void RegisterFactory(string providerInvariantName, string factoryTypeAssemblyQualifiedName);
    public static void RegisterFactory(string providerInvariantName, Type providerFactoryClass);
    public static void RegisterFactory(string providerInvariantName, DbProviderFactory factory);
    public static bool UnregisterFactory(string providerInvariantName);
    private static DbProviderFactory GetFactory(string providerInvariantName, bool throwOnError);
    private static DbProviderFactory GetFactoryInstance(Type providerFactoryClass);
    private static Type GetProviderTypeFromTypeName(string assemblyQualifiedName);
}
public abstract class System.Data.Common.DbProviderFactory : object {
    private Nullable`1<bool> _canCreateDataAdapter;
    private Nullable`1<bool> _canCreateCommandBuilder;
    public bool CanCreateDataSourceEnumerator { get; }
    public bool CanCreateDataAdapter { get; }
    public bool CanCreateCommandBuilder { get; }
    public virtual bool get_CanCreateDataSourceEnumerator();
    public virtual bool get_CanCreateDataAdapter();
    public virtual bool get_CanCreateCommandBuilder();
    public virtual DbCommand CreateCommand();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual DbParameter CreateParameter();
    public virtual DbDataSourceEnumerator CreateDataSourceEnumerator();
}
[AttributeUsageAttribute("128")]
public class System.Data.Common.DbProviderSpecificTypePropertyAttribute : Attribute {
    [CompilerGeneratedAttribute]
private bool <IsProviderSpecificTypeProperty>k__BackingField;
    public bool IsProviderSpecificTypeProperty { get; }
    public DbProviderSpecificTypePropertyAttribute(bool isProviderSpecificTypeProperty);
    [CompilerGeneratedAttribute]
public bool get_IsProviderSpecificTypeProperty();
}
internal class System.Data.Common.DbSchemaRow : object {
    private DbSchemaTable _schemaTable;
    private DataRow _dataRow;
    internal DataRow DataRow { get; }
    internal string ColumnName { get; }
    internal int Size { get; }
    internal string BaseColumnName { get; }
    internal string BaseServerName { get; }
    internal string BaseCatalogName { get; }
    internal string BaseSchemaName { get; }
    internal string BaseTableName { get; }
    internal bool IsAutoIncrement { get; }
    internal bool IsUnique { get; }
    internal bool IsRowVersion { get; }
    internal bool IsKey { get; }
    internal bool IsExpression { get; }
    internal bool IsHidden { get; }
    internal bool IsLong { get; }
    internal bool IsReadOnly { get; }
    internal Type DataType { get; }
    internal bool AllowDBNull { get; }
    internal int UnsortedIndex { get; }
    internal DbSchemaRow(DbSchemaTable schemaTable, DataRow dataRow);
    internal static DbSchemaRow[] GetSortedSchemaRows(DataTable dataTable, bool returnProviderSpecificTypes);
    internal DataRow get_DataRow();
    internal string get_ColumnName();
    internal int get_Size();
    internal string get_BaseColumnName();
    internal string get_BaseServerName();
    internal string get_BaseCatalogName();
    internal string get_BaseSchemaName();
    internal string get_BaseTableName();
    internal bool get_IsAutoIncrement();
    internal bool get_IsUnique();
    internal bool get_IsRowVersion();
    internal bool get_IsKey();
    internal bool get_IsExpression();
    internal bool get_IsHidden();
    internal bool get_IsLong();
    internal bool get_IsReadOnly();
    internal Type get_DataType();
    internal bool get_AllowDBNull();
    internal int get_UnsortedIndex();
}
internal class System.Data.Common.DbSchemaTable : object {
    private static String[] s_DBCOLUMN_NAME;
    internal DataTable _dataTable;
    private DataColumnCollection _columns;
    private DataColumn[] _columnCache;
    private bool _returnProviderSpecificTypes;
    internal DataColumn ColumnName { get; }
    internal DataColumn Size { get; }
    internal DataColumn BaseServerName { get; }
    internal DataColumn BaseColumnName { get; }
    internal DataColumn BaseTableName { get; }
    internal DataColumn BaseCatalogName { get; }
    internal DataColumn BaseSchemaName { get; }
    internal DataColumn IsAutoIncrement { get; }
    internal DataColumn IsUnique { get; }
    internal DataColumn IsKey { get; }
    internal DataColumn IsRowVersion { get; }
    internal DataColumn AllowDBNull { get; }
    internal DataColumn IsExpression { get; }
    internal DataColumn IsHidden { get; }
    internal DataColumn IsLong { get; }
    internal DataColumn IsReadOnly { get; }
    internal DataColumn UnsortedIndex { get; }
    internal DataColumn DataType { get; }
    internal DbSchemaTable(DataTable dataTable, bool returnProviderSpecificTypes);
    private static DbSchemaTable();
    internal DataColumn get_ColumnName();
    internal DataColumn get_Size();
    internal DataColumn get_BaseServerName();
    internal DataColumn get_BaseColumnName();
    internal DataColumn get_BaseTableName();
    internal DataColumn get_BaseCatalogName();
    internal DataColumn get_BaseSchemaName();
    internal DataColumn get_IsAutoIncrement();
    internal DataColumn get_IsUnique();
    internal DataColumn get_IsKey();
    internal DataColumn get_IsRowVersion();
    internal DataColumn get_AllowDBNull();
    internal DataColumn get_IsExpression();
    internal DataColumn get_IsHidden();
    internal DataColumn get_IsLong();
    internal DataColumn get_IsReadOnly();
    internal DataColumn get_UnsortedIndex();
    internal DataColumn get_DataType();
    private DataColumn CachedDataColumn(ColumnEnum column);
    private DataColumn CachedDataColumn(ColumnEnum column, ColumnEnum column2);
}
public abstract class System.Data.Common.DbTransaction : MarshalByRefObject {
    public DbConnection Connection { get; }
    private IDbConnection System.Data.IDbTransaction.Connection { get; }
    protected DbConnection DbConnection { get; }
    public IsolationLevel IsolationLevel { get; }
    public DbConnection get_Connection();
    private sealed virtual override IDbConnection System.Data.IDbTransaction.get_Connection();
    protected abstract virtual DbConnection get_DbConnection();
    public abstract virtual IsolationLevel get_IsolationLevel();
    public abstract virtual void Commit();
    public virtual Task CommitAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual ValueTask DisposeAsync();
    public abstract virtual void Rollback();
    public virtual Task RollbackAsync(CancellationToken cancellationToken);
}
internal class System.Data.Common.DecimalStorage : DataStorage {
    private static decimal s_defaultValue;
    private Decimal[] _values;
    internal DecimalStorage(DataColumn column);
    private static DecimalStorage();
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.DoubleStorage : DataStorage {
    private Double[] _values;
    internal DoubleStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
public enum System.Data.Common.GroupByBehavior : Enum {
    public int value__;
    public static GroupByBehavior Unknown;
    public static GroupByBehavior NotSupported;
    public static GroupByBehavior Unrelated;
    public static GroupByBehavior MustContainAll;
    public static GroupByBehavior ExactMatch;
}
public interface System.Data.Common.IDbColumnSchemaGenerator {
    public abstract virtual ReadOnlyCollection`1<DbColumn> GetColumnSchema();
}
public enum System.Data.Common.IdentifierCase : Enum {
    public int value__;
    public static IdentifierCase Unknown;
    public static IdentifierCase Insensitive;
    public static IdentifierCase Sensitive;
}
internal class System.Data.Common.Int16Storage : DataStorage {
    private Int16[] _values;
    internal Int16Storage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.Int32Storage : DataStorage {
    private Int32[] _values;
    internal Int32Storage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.Int64Storage : DataStorage {
    private Int64[] _values;
    internal Int64Storage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.LoadAdapter : DataAdapter {
    internal int FillFromReader(DataTable[] dataTables, IDataReader dataReader, int startRecord, int maxRecords);
}
internal class System.Data.Common.NameValuePair : object {
    private string _name;
    private string _value;
    private int _length;
    private NameValuePair _next;
    internal string Name { get; }
    internal string Value { get; }
    internal NameValuePair Next { get; internal set; }
    internal NameValuePair(string name, string value, int length);
    internal string get_Name();
    internal string get_Value();
    internal NameValuePair get_Next();
    internal void set_Next(NameValuePair value);
}
internal class System.Data.Common.ObjectStorage : DataStorage {
    private static object s_defaultValue;
    private Object[] _values;
    private bool _implementsIXmlSerializable;
    private static object s_tempAssemblyCacheLock;
    private static Dictionary`2<KeyValuePair`2<Type, XmlRootAttribute>, XmlSerializer> s_tempAssemblyCache;
    private static XmlSerializerFactory s_serializerFactory;
    internal ObjectStorage(DataColumn column, Type type);
    private static ObjectStorage();
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo1, object value);
    private int CompareTo(object valueNo1, object valueNo2);
    private int CompareWithFamilies(object valueNo1, object valueNo2);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int recordNo);
    private Families GetFamily(Type dataType);
    public virtual bool IsNull(int record);
    public virtual void Set(int recordNo, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual object ConvertXmlToObject(XmlReader xmlReader, XmlRootAttribute xmlAttrib);
    public virtual string ConvertObjectToXml(object value);
    public virtual void ConvertObjectToXml(object value, XmlWriter xmlWriter, XmlRootAttribute xmlAttrib);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
    internal static void VerifyIDynamicMetaObjectProvider(Type type);
    internal static XmlSerializer GetXmlSerializer(Type type);
    internal static XmlSerializer GetXmlSerializer(Type type, XmlRootAttribute attribute);
}
public class System.Data.Common.RowUpdatedEventArgs : EventArgs {
    private IDbCommand _command;
    private StatementType _statementType;
    private DataTableMapping _tableMapping;
    private Exception _errors;
    private DataRow _dataRow;
    private DataRow[] _dataRows;
    private UpdateStatus _status;
    private int _recordsAffected;
    public IDbCommand Command { get; }
    public Exception Errors { get; public set; }
    public int RecordsAffected { get; }
    public DataRow Row { get; }
    internal DataRow[] Rows { get; }
    public int RowCount { get; }
    public StatementType StatementType { get; }
    public UpdateStatus Status { get; public set; }
    public DataTableMapping TableMapping { get; }
    public RowUpdatedEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public IDbCommand get_Command();
    public Exception get_Errors();
    public void set_Errors(Exception value);
    public int get_RecordsAffected();
    public DataRow get_Row();
    internal DataRow[] get_Rows();
    public int get_RowCount();
    public StatementType get_StatementType();
    public UpdateStatus get_Status();
    public void set_Status(UpdateStatus value);
    public DataTableMapping get_TableMapping();
    internal void AdapterInit(DataRow[] dataRows);
    internal void AdapterInit(int recordsAffected);
    public void CopyToRows(DataRow[] array);
    public void CopyToRows(DataRow[] array, int arrayIndex);
}
public class System.Data.Common.RowUpdatingEventArgs : EventArgs {
    private IDbCommand _command;
    private StatementType _statementType;
    private DataTableMapping _tableMapping;
    private Exception _errors;
    private DataRow _dataRow;
    private UpdateStatus _status;
    protected IDbCommand BaseCommand { get; protected set; }
    public IDbCommand Command { get; public set; }
    public Exception Errors { get; public set; }
    public DataRow Row { get; }
    public StatementType StatementType { get; }
    public UpdateStatus Status { get; public set; }
    public DataTableMapping TableMapping { get; }
    public RowUpdatingEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual IDbCommand get_BaseCommand();
    protected virtual void set_BaseCommand(IDbCommand value);
    public IDbCommand get_Command();
    public void set_Command(IDbCommand value);
    public Exception get_Errors();
    public void set_Errors(Exception value);
    public DataRow get_Row();
    public StatementType get_StatementType();
    public UpdateStatus get_Status();
    public void set_Status(UpdateStatus value);
    public DataTableMapping get_TableMapping();
}
internal class System.Data.Common.SByteStorage : DataStorage {
    private SByte[] _values;
    public SByteStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SchemaInfo : ValueType {
    public string name;
    public string typeName;
    public Type type;
}
public static class System.Data.Common.SchemaTableColumn : object {
    public static string ColumnName;
    public static string ColumnOrdinal;
    public static string ColumnSize;
    public static string NumericPrecision;
    public static string NumericScale;
    public static string DataType;
    public static string ProviderType;
    public static string NonVersionedProviderType;
    public static string IsLong;
    public static string AllowDBNull;
    public static string IsAliased;
    public static string IsExpression;
    public static string IsKey;
    public static string IsUnique;
    public static string BaseSchemaName;
    public static string BaseTableName;
    public static string BaseColumnName;
    private static SchemaTableColumn();
}
public static class System.Data.Common.SchemaTableOptionalColumn : object {
    public static string ProviderSpecificDataType;
    public static string IsAutoIncrement;
    public static string IsHidden;
    public static string IsReadOnly;
    public static string IsRowVersion;
    public static string BaseServerName;
    public static string BaseCatalogName;
    public static string AutoIncrementSeed;
    public static string AutoIncrementStep;
    public static string DefaultValue;
    public static string Expression;
    public static string BaseTableNamespace;
    public static string BaseColumnNamespace;
    public static string ColumnMapping;
    private static SchemaTableOptionalColumn();
}
internal class System.Data.Common.SingleStorage : DataStorage {
    private Single[] _values;
    public SingleStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlBinaryStorage : DataStorage {
    private SqlBinary[] _values;
    public SqlBinaryStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlBooleanStorage : DataStorage {
    private SqlBoolean[] _values;
    public SqlBooleanStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlBytesStorage : DataStorage {
    private SqlBytes[] _values;
    public SqlBytesStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlByteStorage : DataStorage {
    private SqlByte[] _values;
    public SqlByteStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlCharsStorage : DataStorage {
    private SqlChars[] _values;
    public SqlCharsStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal static class System.Data.Common.SqlConvert : object {
    public static SqlByte ConvertToSqlByte(object value);
    public static SqlInt16 ConvertToSqlInt16(object value);
    public static SqlInt32 ConvertToSqlInt32(object value);
    public static SqlInt64 ConvertToSqlInt64(object value);
    public static SqlDouble ConvertToSqlDouble(object value);
    public static SqlDecimal ConvertToSqlDecimal(object value);
    public static SqlSingle ConvertToSqlSingle(object value);
    public static SqlMoney ConvertToSqlMoney(object value);
    public static SqlDateTime ConvertToSqlDateTime(object value);
    public static SqlBoolean ConvertToSqlBoolean(object value);
    public static SqlGuid ConvertToSqlGuid(object value);
    public static SqlBinary ConvertToSqlBinary(object value);
    public static SqlString ConvertToSqlString(object value);
    public static SqlChars ConvertToSqlChars(object value);
    public static SqlBytes ConvertToSqlBytes(object value);
    public static DateTimeOffset ConvertStringToDateTimeOffset(string value, IFormatProvider formatProvider);
    public static object ChangeTypeForDefaultValue(object value, Type type, IFormatProvider formatProvider);
    public static object ChangeType2(object value, StorageType stype, Type type, IFormatProvider formatProvider);
    public static object ChangeTypeForXML(object value, Type type);
}
internal class System.Data.Common.SqlDateTimeStorage : DataStorage {
    private SqlDateTime[] _values;
    public SqlDateTimeStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlDecimalStorage : DataStorage {
    private SqlDecimal[] _values;
    public SqlDecimalStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlDoubleStorage : DataStorage {
    private SqlDouble[] _values;
    public SqlDoubleStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlGuidStorage : DataStorage {
    private SqlGuid[] _values;
    public SqlGuidStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlInt16Storage : DataStorage {
    private SqlInt16[] _values;
    public SqlInt16Storage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlInt32Storage : DataStorage {
    private SqlInt32[] _values;
    public SqlInt32Storage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlInt64Storage : DataStorage {
    private SqlInt64[] _values;
    public SqlInt64Storage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlMoneyStorage : DataStorage {
    private SqlMoney[] _values;
    public SqlMoneyStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlSingleStorage : DataStorage {
    private SqlSingle[] _values;
    public SqlSingleStorage(DataColumn column);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlStringStorage : DataStorage {
    private SqlString[] _values;
    public SqlStringStorage(DataColumn column);
    public virtual object Aggregate(Int32[] recordNos, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public int Compare(SqlString valueNo1, SqlString valueNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual int GetStringLength(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.SqlUdtStorage : DataStorage {
    private Object[] _values;
    private bool _implementsIXmlSerializable;
    private bool _implementsIComparable;
    private static ConcurrentDictionary`2<Type, object> s_typeToNull;
    public SqlUdtStorage(DataColumn column, Type type);
    private SqlUdtStorage(DataColumn column, Type type, object nullValue);
    private static SqlUdtStorage();
    internal static object GetStaticNullForUdtType(Type type);
    public virtual bool IsNull(int record);
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo1, object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int recordNo);
    public virtual void Set(int recordNo, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual object ConvertXmlToObject(XmlReader xmlReader, XmlRootAttribute xmlAttrib);
    public virtual string ConvertObjectToXml(object value);
    public virtual void ConvertObjectToXml(object value, XmlWriter xmlWriter, XmlRootAttribute xmlAttrib);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal enum System.Data.Common.StorageType : Enum {
    public int value__;
    public static StorageType Empty;
    public static StorageType Object;
    public static StorageType DBNull;
    public static StorageType Boolean;
    public static StorageType Char;
    public static StorageType SByte;
    public static StorageType Byte;
    public static StorageType Int16;
    public static StorageType UInt16;
    public static StorageType Int32;
    public static StorageType UInt32;
    public static StorageType Int64;
    public static StorageType UInt64;
    public static StorageType Single;
    public static StorageType Double;
    public static StorageType Decimal;
    public static StorageType DateTime;
    public static StorageType TimeSpan;
    public static StorageType String;
    public static StorageType Guid;
    public static StorageType ByteArray;
    public static StorageType CharArray;
    public static StorageType Type;
    public static StorageType DateTimeOffset;
    public static StorageType BigInteger;
    public static StorageType Uri;
    public static StorageType SqlBinary;
    public static StorageType SqlBoolean;
    public static StorageType SqlByte;
    public static StorageType SqlBytes;
    public static StorageType SqlChars;
    public static StorageType SqlDateTime;
    public static StorageType SqlDecimal;
    public static StorageType SqlDouble;
    public static StorageType SqlGuid;
    public static StorageType SqlInt16;
    public static StorageType SqlInt32;
    public static StorageType SqlInt64;
    public static StorageType SqlMoney;
    public static StorageType SqlSingle;
    public static StorageType SqlString;
}
internal class System.Data.Common.StringStorage : DataStorage {
    private String[] _values;
    public StringStorage(DataColumn column);
    public virtual object Aggregate(Int32[] recordNos, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int recordNo);
    public virtual int GetStringLength(int record);
    public virtual bool IsNull(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
[FlagsAttribute]
public enum System.Data.Common.SupportedJoinOperators : Enum {
    public int value__;
    public static SupportedJoinOperators None;
    public static SupportedJoinOperators Inner;
    public static SupportedJoinOperators LeftOuter;
    public static SupportedJoinOperators RightOuter;
    public static SupportedJoinOperators FullOuter;
}
internal class System.Data.Common.TimeSpanStorage : DataStorage {
    private static TimeSpan s_defaultValue;
    private TimeSpan[] _values;
    public TimeSpanStorage(DataColumn column);
    private static TimeSpanStorage();
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    private static TimeSpan ConvertToTimeSpan(object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.UInt16Storage : DataStorage {
    private static ushort s_defaultValue;
    private UInt16[] _values;
    public UInt16Storage(DataColumn column);
    private static UInt16Storage();
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.UInt32Storage : DataStorage {
    private static UInt32 s_defaultValue;
    private UInt32[] _values;
    public UInt32Storage(DataColumn column);
    private static UInt32Storage();
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
internal class System.Data.Common.UInt64Storage : DataStorage {
    private static ulong s_defaultValue;
    private UInt64[] _values;
    public UInt64Storage(DataColumn column);
    private static UInt64Storage();
    public virtual object Aggregate(Int32[] records, AggregateType kind);
    public virtual int Compare(int recordNo1, int recordNo2);
    public virtual int CompareValueTo(int recordNo, object value);
    public virtual object ConvertValue(object value);
    public virtual void Copy(int recordNo1, int recordNo2);
    public virtual object Get(int record);
    public virtual void Set(int record, object value);
    public virtual void SetCapacity(int capacity);
    public virtual object ConvertXmlToObject(string s);
    public virtual string ConvertObjectToXml(object value);
    protected virtual object GetEmptyStorage(int recordCount);
    protected virtual void CopyValue(int record, object store, BitArray nullbits, int storeIndex);
    protected virtual void SetStorage(object store, BitArray nullbits);
}
public enum System.Data.ConflictOption : Enum {
    public int value__;
    public static ConflictOption CompareAllSearchableValues;
    public static ConflictOption CompareRowVersion;
    public static ConflictOption OverwriteChanges;
}
[FlagsAttribute]
public enum System.Data.ConnectionState : Enum {
    public int value__;
    public static ConnectionState Closed;
    public static ConnectionState Open;
    public static ConnectionState Connecting;
    public static ConnectionState Executing;
    public static ConnectionState Fetching;
    public static ConnectionState Broken;
}
internal class System.Data.ConstNode : ExpressionNode {
    internal object _val;
    internal ConstNode(DataTable table, ValueType type, object constant);
    internal ConstNode(DataTable table, ValueType type, object constant, bool fParseQuotes);
    internal virtual void Bind(DataTable table, List`1<DataColumn> list);
    internal virtual object Eval();
    internal virtual object Eval(DataRow row, DataRowVersion version);
    internal virtual object Eval(Int32[] recordNos);
    internal virtual bool IsConstant();
    internal virtual bool IsTableConstant();
    internal virtual bool HasLocalAggregate();
    internal virtual bool HasRemoteAggregate();
    internal virtual ExpressionNode Optimize();
    private object SmallestDecimal(object constant);
    private object SmallestNumeric(object constant);
}
[DefaultPropertyAttribute("ConstraintName")]
[TypeConverterAttribute("System.Data.ConstraintConverter")]
public abstract class System.Data.Constraint : object {
    private string _schemaName;
    private bool _inCollection;
    private DataSet _dataSet;
    internal string _name;
    internal PropertyCollection _extendedProperties;
    [DefaultValueAttribute("")]
public string ConstraintName { get; public set; }
    internal string SchemaName { get; internal set; }
    internal bool InCollection { get; internal set; }
    public DataTable Table { get; }
    [BrowsableAttribute("False")]
public PropertyCollection ExtendedProperties { get; }
    [CLSCompliantAttribute("False")]
protected DataSet _DataSet { get; }
    public virtual string get_ConstraintName();
    public virtual void set_ConstraintName(string value);
    internal string get_SchemaName();
    internal void set_SchemaName(string value);
    internal virtual bool get_InCollection();
    internal virtual void set_InCollection(bool value);
    public abstract virtual DataTable get_Table();
    public PropertyCollection get_ExtendedProperties();
    internal abstract virtual bool ContainsColumn(DataColumn column);
    internal abstract virtual bool CanEnableConstraint();
    internal abstract virtual Constraint Clone(DataSet destination);
    internal abstract virtual Constraint Clone(DataSet destination, bool ignoreNSforTableLookup);
    internal void CheckConstraint();
    internal abstract virtual void CheckCanAddToCollection(ConstraintCollection constraint);
    internal abstract virtual bool CanBeRemovedFromCollection(ConstraintCollection constraint, bool fThrowException);
    internal abstract virtual void CheckConstraint(DataRow row, DataRowAction action);
    internal abstract virtual void CheckState();
    protected void CheckStateForProperty();
    protected virtual DataSet get__DataSet();
    protected internal void SetDataSet(DataSet dataSet);
    internal abstract virtual bool IsConstraintViolated();
    public virtual string ToString();
}
[DefaultEventAttribute("CollectionChanged")]
[DefaultMemberAttribute("Item")]
public class System.Data.ConstraintCollection : InternalDataCollectionBase {
    private DataTable _table;
    private ArrayList _list;
    private int _defaultNameIndex;
    private CollectionChangeEventHandler _onCollectionChanged;
    private Constraint[] _delayLoadingConstraints;
    private bool _fLoadForeignKeyConstraintsOnly;
    protected ArrayList List { get; }
    public Constraint Item { get; }
    internal DataTable Table { get; }
    public Constraint Item { get; }
    internal ConstraintCollection(DataTable table);
    protected virtual ArrayList get_List();
    public Constraint get_Item(int index);
    internal DataTable get_Table();
    public Constraint get_Item(string name);
    public void Add(Constraint constraint);
    internal void Add(Constraint constraint, bool addUniqueWhenAddingForeign);
    public Constraint Add(string name, DataColumn[] columns, bool primaryKey);
    public Constraint Add(string name, DataColumn column, bool primaryKey);
    public Constraint Add(string name, DataColumn primaryKeyColumn, DataColumn foreignKeyColumn);
    public Constraint Add(string name, DataColumn[] primaryKeyColumns, DataColumn[] foreignKeyColumns);
    public void AddRange(Constraint[] constraints);
    private void AddUniqueConstraint(UniqueConstraint constraint);
    private void AddForeignKeyConstraint(ForeignKeyConstraint constraint);
    private bool AutoGenerated(Constraint constraint);
    public void add_CollectionChanged(CollectionChangeEventHandler value);
    public void remove_CollectionChanged(CollectionChangeEventHandler value);
    private void ArrayAdd(Constraint constraint);
    private void ArrayRemove(Constraint constraint);
    internal string AssignName();
    private void BaseAdd(Constraint constraint);
    private void BaseGroupSwitch(Constraint[] oldArray, int oldLength, Constraint[] newArray, int newLength);
    private void BaseRemove(Constraint constraint);
    public bool CanRemove(Constraint constraint);
    internal bool CanRemove(Constraint constraint, bool fThrowException);
    public void Clear();
    public bool Contains(string name);
    internal bool Contains(string name, bool caseSensitive);
    public void CopyTo(Constraint[] array, int index);
    internal Constraint FindConstraint(Constraint constraint);
    internal UniqueConstraint FindKeyConstraint(DataColumn[] columns);
    internal UniqueConstraint FindKeyConstraint(DataColumn column);
    internal ForeignKeyConstraint FindForeignKeyConstraint(DataColumn[] parentColumns, DataColumn[] childColumns);
    private static bool CompareArrays(DataColumn[] a1, DataColumn[] a2);
    public int IndexOf(Constraint constraint);
    public int IndexOf(string constraintName);
    internal int InternalIndexOf(string constraintName);
    private string MakeName(int index);
    private void OnCollectionChanged(CollectionChangeEventArgs ccevent);
    internal void RegisterName(string name);
    public void Remove(Constraint constraint);
    public void RemoveAt(int index);
    public void Remove(string name);
    internal void UnregisterName(string name);
    internal void FinishInitConstraints();
}
internal class System.Data.ConstraintConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
internal class System.Data.ConstraintEnumerator : object {
    private IEnumerator _tables;
    private IEnumerator _constraints;
    private Constraint _currentObject;
    protected Constraint CurrentObject { get; }
    public ConstraintEnumerator(DataSet dataSet);
    public bool GetNext();
    public Constraint GetConstraint();
    protected virtual bool IsValidCandidate(Constraint constraint);
    protected Constraint get_CurrentObject();
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.ConstraintException : DataException {
    protected ConstraintException(SerializationInfo info, StreamingContext context);
    public ConstraintException(string s);
    public ConstraintException(string message, Exception innerException);
}
internal class System.Data.ConstraintTable : object {
    public DataTable table;
    public XmlSchemaIdentityConstraint constraint;
    public ConstraintTable(DataTable t, XmlSchemaIdentityConstraint c);
}
[DesignTimeVisibleAttribute("False")]
[ToolboxItemAttribute("False")]
[DefaultMemberAttribute("Item")]
[DefaultPropertyAttribute("ColumnName")]
public class System.Data.DataColumn : MarshalByValueComponent {
    private bool _allowNull;
    private string _caption;
    private string _columnName;
    private Type _dataType;
    private StorageType _storageType;
    internal object _defaultValue;
    private DataSetDateTime _dateTimeMode;
    private DataExpression _expression;
    private int _maxLength;
    private int _ordinal;
    private bool _readOnly;
    internal Index _sortIndex;
    internal DataTable _table;
    private bool _unique;
    internal MappingType _columnMapping;
    internal int _hashCode;
    internal int _errors;
    private bool _isSqlType;
    private bool _implementsINullable;
    private bool _implementsIChangeTracking;
    private bool _implementsIRevertibleChangeTracking;
    private bool _implementsIXMLSerializable;
    private bool _defaultValueIsNull;
    internal List`1<DataColumn> _dependentColumns;
    internal PropertyCollection _extendedProperties;
    private DataStorage _storage;
    private AutoIncrementValue _autoInc;
    internal string _columnUri;
    private string _columnPrefix;
    internal string _encodedColumnName;
    internal SimpleType _simpleType;
    private static int s_objectTypeCount;
    private int _objectID;
    [CompilerGeneratedAttribute]
private string <XmlDataType>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanging;
    [DefaultValueAttribute("True")]
public bool AllowDBNull { get; public set; }
    [DefaultValueAttribute("False")]
[RefreshPropertiesAttribute("1")]
public bool AutoIncrement { get; public set; }
    internal object AutoIncrementCurrent { get; internal set; }
    internal AutoIncrementValue AutoInc { get; }
    [DefaultValueAttribute("0")]
public long AutoIncrementSeed { get; public set; }
    [DefaultValueAttribute("1")]
public long AutoIncrementStep { get; public set; }
    public string Caption { get; public set; }
    [DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
public string ColumnName { get; public set; }
    internal string EncodedColumnName { get; }
    internal IFormatProvider FormatProvider { get; }
    internal CultureInfo Locale { get; }
    internal int ObjectID { get; }
    [DefaultValueAttribute("")]
public string Prefix { get; public set; }
    internal bool Computed { get; }
    internal DataExpression DataExpression { get; }
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[TypeConverterAttribute("System.Data.ColumnTypeConverter")]
public Type DataType { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[RefreshPropertiesAttribute("1")]
public DataSetDateTime DateTimeMode { get; public set; }
    [TypeConverterAttribute("System.Data.DefaultValueTypeConverter")]
public object DefaultValue { get; public set; }
    internal bool DefaultValueIsNull { get; }
    [RefreshPropertiesAttribute("1")]
[DefaultValueAttribute("")]
public string Expression { get; public set; }
    [BrowsableAttribute("False")]
public PropertyCollection ExtendedProperties { get; }
    internal bool HasData { get; }
    internal bool ImplementsINullable { get; }
    internal bool ImplementsIChangeTracking { get; }
    internal bool ImplementsIRevertibleChangeTracking { get; }
    internal bool IsValueType { get; }
    internal bool IsSqlType { get; }
    [DefaultValueAttribute("-1")]
public int MaxLength { get; public set; }
    public string Namespace { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public int Ordinal { get; }
    [DefaultValueAttribute("False")]
public bool ReadOnly { get; public set; }
    [DebuggerBrowsableAttribute("0")]
private Index SortIndex { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataTable Table { get; }
    internal object Item { get; internal set; }
    [DesignerSerializationVisibilityAttribute("0")]
[DefaultValueAttribute("False")]
public bool Unique { get; public set; }
    internal string XmlDataType { get; internal set; }
    internal SimpleType SimpleType { get; internal set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MappingType ColumnMapping { get; public set; }
    internal bool IsCustomType { get; }
    internal bool ImplementsIXMLSerializable { get; }
    public DataColumn(string columnName);
    public DataColumn(string columnName, Type dataType);
    public DataColumn(string columnName, Type dataType, string expr);
    public DataColumn(string columnName, Type dataType, string expr, MappingType type);
    private void UpdateColumnType(Type type, StorageType typeCode);
    public bool get_AllowDBNull();
    public void set_AllowDBNull(bool value);
    public bool get_AutoIncrement();
    public void set_AutoIncrement(bool value);
    internal object get_AutoIncrementCurrent();
    internal void set_AutoIncrementCurrent(object value);
    internal AutoIncrementValue get_AutoInc();
    public long get_AutoIncrementSeed();
    public void set_AutoIncrementSeed(long value);
    public long get_AutoIncrementStep();
    public void set_AutoIncrementStep(long value);
    public string get_Caption();
    public void set_Caption(string value);
    public string get_ColumnName();
    public void set_ColumnName(string value);
    internal string get_EncodedColumnName();
    internal IFormatProvider get_FormatProvider();
    internal CultureInfo get_Locale();
    internal int get_ObjectID();
    public string get_Prefix();
    public void set_Prefix(string value);
    internal string GetColumnValueAsString(DataRow row, DataRowVersion version);
    internal bool get_Computed();
    internal DataExpression get_DataExpression();
    public Type get_DataType();
    public void set_DataType(Type value);
    public DataSetDateTime get_DateTimeMode();
    public void set_DateTimeMode(DataSetDateTime value);
    public object get_DefaultValue();
    public void set_DefaultValue(object value);
    internal bool get_DefaultValueIsNull();
    internal void BindExpression();
    public string get_Expression();
    public void set_Expression(string value);
    public PropertyCollection get_ExtendedProperties();
    internal bool get_HasData();
    internal bool get_ImplementsINullable();
    internal bool get_ImplementsIChangeTracking();
    internal bool get_ImplementsIRevertibleChangeTracking();
    internal bool get_IsValueType();
    internal bool get_IsSqlType();
    private void SetMaxLengthSimpleType();
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public int get_Ordinal();
    public void SetOrdinal(int ordinal);
    internal void SetOrdinalInternal(int ordinal);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    private Index get_SortIndex();
    public DataTable get_Table();
    internal void SetTable(DataTable table);
    private DataRow GetDataRow(int index);
    internal object get_Item(int record);
    internal void set_Item(int record, object value);
    internal void InitializeRecord(int record);
    internal void SetValue(int record, object value);
    internal void FreeRecord(int record);
    public bool get_Unique();
    public void set_Unique(bool value);
    internal void InternalUnique(bool value);
    [CompilerGeneratedAttribute]
internal string get_XmlDataType();
    [CompilerGeneratedAttribute]
internal void set_XmlDataType(string value);
    internal SimpleType get_SimpleType();
    internal void set_SimpleType(SimpleType value);
    public virtual MappingType get_ColumnMapping();
    public virtual void set_ColumnMapping(MappingType value);
    [CompilerGeneratedAttribute]
internal void add_PropertyChanging(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_PropertyChanging(PropertyChangedEventHandler value);
    internal void CheckColumnConstraint(DataRow row, DataRowAction action);
    internal bool CheckMaxLength();
    internal void CheckMaxLength(DataRow dr);
    protected internal void CheckNotAllowNull();
    internal void CheckNullable(DataRow row);
    protected void CheckUnique();
    internal int Compare(int record1, int record2);
    internal bool CompareValueTo(int record1, object value, bool checkType);
    internal int CompareValueTo(int record1, object value);
    internal object ConvertValue(object value);
    internal void Copy(int srcRecordNo, int dstRecordNo);
    internal DataColumn Clone();
    internal object GetAggregateValue(Int32[] records, AggregateType kind);
    private int GetStringLength(int record);
    internal void Init(int record);
    internal static bool IsAutoIncrementType(Type dataType);
    internal bool get_IsCustomType();
    internal bool IsValueCustomTypeInstance(object value);
    internal bool get_ImplementsIXMLSerializable();
    internal bool IsNull(int record);
    internal bool IsInRelation();
    internal bool IsMaxLengthViolated();
    internal bool IsNotAllowDBNullViolated();
    internal void FinishInitInProgress();
    protected virtual void OnPropertyChanging(PropertyChangedEventArgs pcevent);
    protected internal void RaisePropertyChanging(string name);
    private void InsureStorage();
    internal void SetCapacity(int capacity);
    internal void OnSetDataSet();
    public virtual string ToString();
    internal object ConvertXmlToObject(string s);
    internal object ConvertXmlToObject(XmlReader xmlReader, XmlRootAttribute xmlAttrib);
    internal string ConvertObjectToXml(object value);
    internal void ConvertObjectToXml(object value, XmlWriter xmlWriter, XmlRootAttribute xmlAttrib);
    internal object GetEmptyColumnStore(int recordCount);
    internal void CopyValueIntoStore(int record, object store, BitArray nullbits, int storeIndex);
    internal void SetStorage(object store, BitArray nullbits);
    internal void AddDependentColumn(DataColumn expressionColumn);
    internal void RemoveDependentColumn(DataColumn expressionColumn);
    internal void HandleDependentColumnList(DataExpression oldExpression, DataExpression newExpression);
}
public class System.Data.DataColumnChangeEventArgs : EventArgs {
    private DataColumn _column;
    [CompilerGeneratedAttribute]
private DataRow <Row>k__BackingField;
    [CompilerGeneratedAttribute]
private object <ProposedValue>k__BackingField;
    public DataColumn Column { get; }
    public DataRow Row { get; }
    public object ProposedValue { get; public set; }
    internal DataColumnChangeEventArgs(DataRow row);
    public DataColumnChangeEventArgs(DataRow row, DataColumn column, object value);
    public DataColumn get_Column();
    [CompilerGeneratedAttribute]
public DataRow get_Row();
    [CompilerGeneratedAttribute]
public object get_ProposedValue();
    [CompilerGeneratedAttribute]
public void set_ProposedValue(object value);
    internal void InitializeColumnChangeEvent(DataColumn column, object value);
}
public class System.Data.DataColumnChangeEventHandler : MulticastDelegate {
    public DataColumnChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataColumnChangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataColumnChangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultEventAttribute("CollectionChanged")]
[DefaultMemberAttribute("Item")]
public class System.Data.DataColumnCollection : InternalDataCollectionBase {
    private DataTable _table;
    private ArrayList _list;
    private int _defaultNameIndex;
    private DataColumn[] _delayedAddRangeColumns;
    private Dictionary`2<string, DataColumn> _columnFromName;
    private bool _fInClear;
    private DataColumn[] _columnsImplementingIChangeTracking;
    private int _nColumnsImplementingIChangeTracking;
    private int _nColumnsImplementingIRevertibleChangeTracking;
    [CompilerGeneratedAttribute]
private CollectionChangeEventHandler CollectionChanged;
    [CompilerGeneratedAttribute]
private CollectionChangeEventHandler CollectionChanging;
    [CompilerGeneratedAttribute]
private CollectionChangeEventHandler ColumnPropertyChanged;
    protected ArrayList List { get; }
    internal DataColumn[] ColumnsImplementingIChangeTracking { get; }
    internal int ColumnsImplementingIChangeTrackingCount { get; }
    internal int ColumnsImplementingIRevertibleChangeTrackingCount { get; }
    public DataColumn Item { get; }
    public DataColumn Item { get; }
    internal DataColumn Item { get; }
    internal DataColumnCollection(DataTable table);
    protected virtual ArrayList get_List();
    internal DataColumn[] get_ColumnsImplementingIChangeTracking();
    internal int get_ColumnsImplementingIChangeTrackingCount();
    internal int get_ColumnsImplementingIRevertibleChangeTrackingCount();
    public DataColumn get_Item(int index);
    public DataColumn get_Item(string name);
    internal DataColumn get_Item(string name, string ns);
    internal void EnsureAdditionalCapacity(int capacity);
    public void Add(DataColumn column);
    internal void AddAt(int index, DataColumn column);
    public void AddRange(DataColumn[] columns);
    public DataColumn Add(string columnName, Type type, string expression);
    public DataColumn Add(string columnName, Type type);
    public DataColumn Add(string columnName);
    public DataColumn Add();
    [CompilerGeneratedAttribute]
public void add_CollectionChanged(CollectionChangeEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_CollectionChanged(CollectionChangeEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_CollectionChanging(CollectionChangeEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_CollectionChanging(CollectionChangeEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_ColumnPropertyChanged(CollectionChangeEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_ColumnPropertyChanged(CollectionChangeEventHandler value);
    private void ArrayAdd(DataColumn column);
    private void ArrayAdd(int index, DataColumn column);
    private void ArrayRemove(DataColumn column);
    internal string AssignName();
    private void BaseAdd(DataColumn column);
    private void BaseGroupSwitch(DataColumn[] oldArray, int oldLength, DataColumn[] newArray, int newLength);
    private void BaseRemove(DataColumn column);
    public bool CanRemove(DataColumn column);
    internal bool CanRemove(DataColumn column, bool fThrowException);
    private void CheckIChangeTracking(DataColumn column);
    public void Clear();
    public bool Contains(string name);
    internal bool Contains(string name, bool caseSensitive);
    public void CopyTo(DataColumn[] array, int index);
    public int IndexOf(DataColumn column);
    public int IndexOf(string columnName);
    internal int IndexOfCaseInsensitive(string name);
    internal void FinishInitCollection();
    private string MakeName(int index);
    internal void MoveTo(DataColumn column, int newPosition);
    private void OnCollectionChanged(CollectionChangeEventArgs ccevent);
    private void OnCollectionChanging(CollectionChangeEventArgs ccevent);
    internal void OnColumnPropertyChanged(CollectionChangeEventArgs ccevent);
    internal void RegisterColumnName(string name, DataColumn column);
    internal bool CanRegisterName(string name);
    public void Remove(DataColumn column);
    public void RemoveAt(int index);
    public void Remove(string name);
    internal void UnregisterName(string name);
    private void AddColumnsImplementingIChangeTrackingList(DataColumn dataColumn);
    private void RemoveColumnsImplementingIChangeTrackingList(DataColumn dataColumn);
}
internal class System.Data.DataColumnPropertyDescriptor : PropertyDescriptor {
    [CompilerGeneratedAttribute]
private DataColumn <Column>k__BackingField;
    public AttributeCollection Attributes { get; }
    internal DataColumn Column { get; }
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    public bool IsBrowsable { get; }
    internal DataColumnPropertyDescriptor(DataColumn dataColumn);
    public virtual AttributeCollection get_Attributes();
    [CompilerGeneratedAttribute]
internal DataColumn get_Column();
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
    public virtual bool get_IsBrowsable();
}
[EventSourceAttribute]
internal class System.Data.DataCommonEventSource : EventSource {
    internal static DataCommonEventSource Log;
    private static long s_nextScopeId;
    private static DataCommonEventSource();
    [EventAttribute("1")]
internal void Trace(string message);
    [NonEventAttribute]
internal void Trace(string format, T0 arg0);
    [NonEventAttribute]
internal void Trace(string format, T0 arg0, T1 arg1);
    [NonEventAttribute]
internal void Trace(string format, T0 arg0, T1 arg1, T2 arg2);
    [NonEventAttribute]
internal void Trace(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3);
    [NonEventAttribute]
internal void Trace(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    [NonEventAttribute]
internal void Trace(string format, T0 arg0, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);
    [EventAttribute("2")]
internal long EnterScope(string message);
    [NonEventAttribute]
internal long EnterScope(string format, T1 arg1);
    [NonEventAttribute]
internal long EnterScope(string format, T1 arg1, T2 arg2);
    [NonEventAttribute]
internal long EnterScope(string format, T1 arg1, T2 arg2, T3 arg3);
    [NonEventAttribute]
internal long EnterScope(string format, T1 arg1, T2 arg2, T3 arg3, T4 arg4);
    [EventAttribute("3")]
internal void ExitScope(long scopeId);
}
internal class System.Data.DataError : object {
    private string _rowError;
    private int _count;
    private ColumnError[] _errorList;
    internal string Text { get; internal set; }
    internal bool HasErrors { get; }
    internal DataError(string rowError);
    internal string get_Text();
    internal void set_Text(string value);
    internal bool get_HasErrors();
    internal void SetColumnError(DataColumn column, string error);
    internal string GetColumnError(DataColumn column);
    internal void Clear(DataColumn column);
    internal void Clear();
    internal DataColumn[] GetColumnsInError();
    private void SetText(string errorText);
    internal int IndexOf(DataColumn column);
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.DataException : SystemException {
    protected DataException(SerializationInfo info, StreamingContext context);
    public DataException(string s);
    public DataException(string s, Exception innerException);
}
internal class System.Data.DataExpression : object {
    internal string _originalExpression;
    private bool _parsed;
    private bool _bound;
    private ExpressionNode _expr;
    private DataTable _table;
    private StorageType _storageType;
    private Type _dataType;
    private DataColumn[] _dependency;
    internal string Expression { get; }
    internal ExpressionNode ExpressionNode { get; }
    internal bool HasValue { get; }
    internal DataExpression(DataTable table, string expression);
    internal DataExpression(DataTable table, string expression, Type type);
    internal string get_Expression();
    internal ExpressionNode get_ExpressionNode();
    internal bool get_HasValue();
    internal void Bind(DataTable table);
    internal bool DependsOn(DataColumn column);
    internal object Evaluate();
    internal object Evaluate(DataRow row, DataRowVersion version);
    internal object Evaluate(DataRow[] rows);
    internal object Evaluate(DataRow[] rows, DataRowVersion version);
    public sealed virtual bool Invoke(DataRow row, DataRowVersion version);
    internal DataColumn[] GetDependency();
    internal bool IsTableAggregate();
    internal static bool IsUnknown(object value);
    internal bool HasLocalAggregate();
    internal bool HasRemoteAggregate();
    internal static bool ToBoolean(object value);
}
[IsReadOnlyAttribute]
internal class System.Data.DataKey : ValueType {
    private DataColumn[] _columns;
    internal DataColumn[] ColumnsReference { get; }
    internal bool HasValue { get; }
    internal DataTable Table { get; }
    internal DataKey(DataColumn[] columns, bool copyColumns);
    internal DataColumn[] get_ColumnsReference();
    internal bool get_HasValue();
    internal DataTable get_Table();
    internal void CheckState();
    internal bool ColumnsEqual(DataKey key);
    internal static bool ColumnsEqual(DataColumn[] column1, DataColumn[] column2);
    internal bool ContainsColumn(DataColumn column);
    public virtual int GetHashCode();
    public virtual bool Equals(object value);
    internal bool Equals(DataKey value);
    internal String[] GetColumnNames();
    internal IndexField[] GetIndexDesc();
    internal Object[] GetKeyValues(int record);
    internal Index GetSortIndex();
    internal Index GetSortIndex(DataViewRowState recordStates);
    internal bool RecordsEqual(int record1, int record2);
    internal DataColumn[] ToArray();
}
[ExtensionAttribute]
public static class System.Data.DataReaderExtensions : object {
    [ExtensionAttribute]
public static bool GetBoolean(DbDataReader reader, string name);
    [ExtensionAttribute]
public static byte GetByte(DbDataReader reader, string name);
    [ExtensionAttribute]
public static long GetBytes(DbDataReader reader, string name, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    [ExtensionAttribute]
public static char GetChar(DbDataReader reader, string name);
    [ExtensionAttribute]
public static long GetChars(DbDataReader reader, string name, long dataOffset, Char[] buffer, int bufferOffset, int length);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static DbDataReader GetData(DbDataReader reader, string name);
    [ExtensionAttribute]
public static string GetDataTypeName(DbDataReader reader, string name);
    [ExtensionAttribute]
public static DateTime GetDateTime(DbDataReader reader, string name);
    [ExtensionAttribute]
public static decimal GetDecimal(DbDataReader reader, string name);
    [ExtensionAttribute]
public static double GetDouble(DbDataReader reader, string name);
    [ExtensionAttribute]
public static Type GetFieldType(DbDataReader reader, string name);
    [ExtensionAttribute]
public static T GetFieldValue(DbDataReader reader, string name);
    [ExtensionAttribute]
public static Task`1<T> GetFieldValueAsync(DbDataReader reader, string name, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static float GetFloat(DbDataReader reader, string name);
    [ExtensionAttribute]
public static Guid GetGuid(DbDataReader reader, string name);
    [ExtensionAttribute]
public static short GetInt16(DbDataReader reader, string name);
    [ExtensionAttribute]
public static int GetInt32(DbDataReader reader, string name);
    [ExtensionAttribute]
public static long GetInt64(DbDataReader reader, string name);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static Type GetProviderSpecificFieldType(DbDataReader reader, string name);
    [ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static object GetProviderSpecificValue(DbDataReader reader, string name);
    [ExtensionAttribute]
public static Stream GetStream(DbDataReader reader, string name);
    [ExtensionAttribute]
public static string GetString(DbDataReader reader, string name);
    [ExtensionAttribute]
public static TextReader GetTextReader(DbDataReader reader, string name);
    [ExtensionAttribute]
public static object GetValue(DbDataReader reader, string name);
    [ExtensionAttribute]
public static bool IsDBNull(DbDataReader reader, string name);
    [ExtensionAttribute]
public static Task`1<bool> IsDBNullAsync(DbDataReader reader, string name, CancellationToken cancellationToken);
    private static void AssertNotNull(DbDataReader reader);
}
[TypeConverterAttribute("System.Data.RelationshipConverter")]
[DefaultPropertyAttribute("RelationName")]
public class System.Data.DataRelation : object {
    private DataSet _dataSet;
    internal PropertyCollection _extendedProperties;
    internal string _relationName;
    private DataKey _childKey;
    private DataKey _parentKey;
    private UniqueConstraint _parentKeyConstraint;
    private ForeignKeyConstraint _childKeyConstraint;
    internal String[] _parentColumnNames;
    internal String[] _childColumnNames;
    internal string _parentTableName;
    internal string _childTableName;
    internal string _parentTableNamespace;
    internal string _childTableNamespace;
    internal bool _nested;
    internal bool _createConstraints;
    private bool _checkMultipleNested;
    private static int s_objectTypeCount;
    private int _objectID;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanging;
    public DataColumn[] ChildColumns { get; }
    internal DataColumn[] ChildColumnsReference { get; }
    internal DataKey ChildKey { get; }
    public DataTable ChildTable { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public DataSet DataSet { get; }
    internal String[] ParentColumnNames { get; }
    internal String[] ChildColumnNames { get; }
    public DataColumn[] ParentColumns { get; }
    internal DataColumn[] ParentColumnsReference { get; }
    internal DataKey ParentKey { get; }
    public DataTable ParentTable { get; }
    [DefaultValueAttribute("")]
public string RelationName { get; public set; }
    [DefaultValueAttribute("False")]
public bool Nested { get; public set; }
    public UniqueConstraint ParentKeyConstraint { get; }
    public ForeignKeyConstraint ChildKeyConstraint { get; }
    [BrowsableAttribute("False")]
public PropertyCollection ExtendedProperties { get; }
    internal bool CheckMultipleNested { get; internal set; }
    internal int ObjectID { get; }
    public DataRelation(string relationName, DataColumn parentColumn, DataColumn childColumn);
    public DataRelation(string relationName, DataColumn parentColumn, DataColumn childColumn, bool createConstraints);
    public DataRelation(string relationName, DataColumn[] parentColumns, DataColumn[] childColumns);
    public DataRelation(string relationName, DataColumn[] parentColumns, DataColumn[] childColumns, bool createConstraints);
    [BrowsableAttribute("False")]
public DataRelation(string relationName, string parentTableName, string childTableName, String[] parentColumnNames, String[] childColumnNames, bool nested);
    [BrowsableAttribute("False")]
public DataRelation(string relationName, string parentTableName, string parentTableNamespace, string childTableName, string childTableNamespace, String[] parentColumnNames, String[] childColumnNames, bool nested);
    public virtual DataColumn[] get_ChildColumns();
    internal DataColumn[] get_ChildColumnsReference();
    internal DataKey get_ChildKey();
    public virtual DataTable get_ChildTable();
    public virtual DataSet get_DataSet();
    internal String[] get_ParentColumnNames();
    internal String[] get_ChildColumnNames();
    private static bool IsKeyNull(Object[] values);
    internal static DataRow[] GetChildRows(DataKey parentKey, DataKey childKey, DataRow parentRow, DataRowVersion version);
    internal static DataRow[] GetParentRows(DataKey parentKey, DataKey childKey, DataRow childRow, DataRowVersion version);
    internal static DataRow GetParentRow(DataKey parentKey, DataKey childKey, DataRow childRow, DataRowVersion version);
    internal void SetDataSet(DataSet dataSet);
    public virtual DataColumn[] get_ParentColumns();
    internal DataColumn[] get_ParentColumnsReference();
    internal DataKey get_ParentKey();
    public virtual DataTable get_ParentTable();
    public virtual string get_RelationName();
    public virtual void set_RelationName(string value);
    internal void CheckNamespaceValidityForNestedRelations(string ns);
    internal void CheckNestedRelations();
    public virtual bool get_Nested();
    public virtual void set_Nested(bool value);
    public virtual UniqueConstraint get_ParentKeyConstraint();
    internal void SetParentKeyConstraint(UniqueConstraint value);
    public virtual ForeignKeyConstraint get_ChildKeyConstraint();
    public PropertyCollection get_ExtendedProperties();
    internal bool get_CheckMultipleNested();
    internal void set_CheckMultipleNested(bool value);
    internal void SetChildKeyConstraint(ForeignKeyConstraint value);
    [CompilerGeneratedAttribute]
internal void add_PropertyChanging(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_PropertyChanging(PropertyChangedEventHandler value);
    internal void CheckState();
    protected void CheckStateForProperty();
    private void Create(string relationName, DataColumn[] parentColumns, DataColumn[] childColumns, bool createConstraints);
    internal DataRelation Clone(DataSet destination);
    protected internal void OnPropertyChanging(PropertyChangedEventArgs pcevent);
    protected internal void RaisePropertyChanging(string name);
    public virtual string ToString();
    internal void ValidateMultipleNestedRelations();
    private bool IsAutoGenerated(DataColumn col);
    internal int get_ObjectID();
}
[DefaultPropertyAttribute("Table")]
[DefaultEventAttribute("CollectionChanged")]
[DefaultMemberAttribute("Item")]
public abstract class System.Data.DataRelationCollection : InternalDataCollectionBase {
    private DataRelation _inTransition;
    private int _defaultNameIndex;
    private CollectionChangeEventHandler _onCollectionChangedDelegate;
    private CollectionChangeEventHandler _onCollectionChangingDelegate;
    private static int s_objectTypeCount;
    private int _objectID;
    internal int ObjectID { get; }
    public DataRelation Item { get; }
    public DataRelation Item { get; }
    internal int get_ObjectID();
    public abstract virtual DataRelation get_Item(int index);
    public abstract virtual DataRelation get_Item(string name);
    public void Add(DataRelation relation);
    public virtual void AddRange(DataRelation[] relations);
    public virtual DataRelation Add(string name, DataColumn[] parentColumns, DataColumn[] childColumns);
    public virtual DataRelation Add(string name, DataColumn[] parentColumns, DataColumn[] childColumns, bool createConstraints);
    public virtual DataRelation Add(DataColumn[] parentColumns, DataColumn[] childColumns);
    public virtual DataRelation Add(string name, DataColumn parentColumn, DataColumn childColumn);
    public virtual DataRelation Add(string name, DataColumn parentColumn, DataColumn childColumn, bool createConstraints);
    public virtual DataRelation Add(DataColumn parentColumn, DataColumn childColumn);
    protected virtual void AddCore(DataRelation relation);
    public void add_CollectionChanged(CollectionChangeEventHandler value);
    public void remove_CollectionChanged(CollectionChangeEventHandler value);
    internal void add_CollectionChanging(CollectionChangeEventHandler value);
    internal void remove_CollectionChanging(CollectionChangeEventHandler value);
    internal string AssignName();
    public virtual void Clear();
    public virtual bool Contains(string name);
    public void CopyTo(DataRelation[] array, int index);
    public virtual int IndexOf(DataRelation relation);
    public virtual int IndexOf(string relationName);
    internal int InternalIndexOf(string name);
    protected abstract virtual DataSet GetDataSet();
    private string MakeName(int index);
    protected virtual void OnCollectionChanged(CollectionChangeEventArgs ccevent);
    protected virtual void OnCollectionChanging(CollectionChangeEventArgs ccevent);
    internal void RegisterName(string name);
    public virtual bool CanRemove(DataRelation relation);
    public void Remove(DataRelation relation);
    public void RemoveAt(int index);
    public void Remove(string name);
    protected virtual void RemoveCore(DataRelation relation);
    internal void UnregisterName(string name);
}
internal class System.Data.DataRelationPropertyDescriptor : PropertyDescriptor {
    [CompilerGeneratedAttribute]
private DataRelation <Relation>k__BackingField;
    internal DataRelation Relation { get; }
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    internal DataRelationPropertyDescriptor(DataRelation dataRelation);
    [CompilerGeneratedAttribute]
internal DataRelation get_Relation();
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
[DefaultMemberAttribute("Item")]
public class System.Data.DataRow : object {
    private DataTable _table;
    private DataColumnCollection _columns;
    internal int _oldRecord;
    internal int _newRecord;
    internal int _tempRecord;
    internal long _rowID;
    internal DataRowAction _action;
    internal bool _inChangingEvent;
    internal bool _inDeletingEvent;
    internal bool _inCascade;
    private DataColumn _lastChangedColumn;
    private int _countColumnChange;
    private DataError _error;
    private object _element;
    private int _rbTreeNodeId;
    private static int s_objectTypeCount;
    internal int _objectID;
    internal XmlBoundElement Element { get; internal set; }
    internal DataColumn LastChangedColumn { get; internal set; }
    internal bool HasPropertyChanged { get; }
    internal int RBTreeNodeId { get; internal set; }
    public string RowError { get; public set; }
    internal long rowID { get; internal set; }
    public DataRowState RowState { get; }
    public DataTable Table { get; }
    public object Item { get; public set; }
    public object Item { get; public set; }
    public object Item { get; public set; }
    public object Item { get; }
    public object Item { get; }
    public object Item { get; }
    public Object[] ItemArray { get; public set; }
    public bool HasErrors { get; }
    protected internal DataRow(DataRowBuilder builder);
    internal XmlBoundElement get_Element();
    internal void set_Element(XmlBoundElement value);
    internal DataColumn get_LastChangedColumn();
    internal void set_LastChangedColumn(DataColumn value);
    internal bool get_HasPropertyChanged();
    internal int get_RBTreeNodeId();
    internal void set_RBTreeNodeId(int value);
    public string get_RowError();
    public void set_RowError(string value);
    private void RowErrorChanged();
    internal long get_rowID();
    internal void set_rowID(long value);
    public DataRowState get_RowState();
    public DataTable get_Table();
    public object get_Item(int columnIndex);
    public void set_Item(int columnIndex, object value);
    internal void CheckForLoops(DataRelation rel);
    internal int GetNestedParentCount();
    public object get_Item(string columnName);
    public void set_Item(string columnName, object value);
    public object get_Item(DataColumn column);
    public void set_Item(DataColumn column, object value);
    public object get_Item(int columnIndex, DataRowVersion version);
    public object get_Item(string columnName, DataRowVersion version);
    public object get_Item(DataColumn column, DataRowVersion version);
    public Object[] get_ItemArray();
    public void set_ItemArray(Object[] value);
    public void AcceptChanges();
    [EditorBrowsableAttribute("2")]
public void BeginEdit();
    private bool BeginEditInternal();
    [EditorBrowsableAttribute("2")]
public void CancelEdit();
    private void CheckColumn(DataColumn column);
    internal void CheckInTable();
    public void Delete();
    [EditorBrowsableAttribute("2")]
public void EndEdit();
    public void SetColumnError(int columnIndex, string error);
    public void SetColumnError(string columnName, string error);
    public void SetColumnError(DataColumn column, string error);
    public string GetColumnError(int columnIndex);
    public string GetColumnError(string columnName);
    public string GetColumnError(DataColumn column);
    public void ClearErrors();
    internal void ClearError(DataColumn column);
    public bool get_HasErrors();
    public DataColumn[] GetColumnsInError();
    public DataRow[] GetChildRows(string relationName);
    public DataRow[] GetChildRows(string relationName, DataRowVersion version);
    public DataRow[] GetChildRows(DataRelation relation);
    public DataRow[] GetChildRows(DataRelation relation, DataRowVersion version);
    internal DataColumn GetDataColumn(string columnName);
    public DataRow GetParentRow(string relationName);
    public DataRow GetParentRow(string relationName, DataRowVersion version);
    public DataRow GetParentRow(DataRelation relation);
    public DataRow GetParentRow(DataRelation relation, DataRowVersion version);
    internal DataRow GetNestedParentRow(DataRowVersion version);
    public DataRow[] GetParentRows(string relationName);
    public DataRow[] GetParentRows(string relationName, DataRowVersion version);
    public DataRow[] GetParentRows(DataRelation relation);
    public DataRow[] GetParentRows(DataRelation relation, DataRowVersion version);
    internal Object[] GetColumnValues(DataColumn[] columns);
    internal Object[] GetColumnValues(DataColumn[] columns, DataRowVersion version);
    internal Object[] GetKeyValues(DataKey key);
    internal Object[] GetKeyValues(DataKey key, DataRowVersion version);
    internal int GetCurrentRecordNo();
    internal int GetDefaultRecord();
    internal int GetOriginalRecordNo();
    private int GetProposedRecordNo();
    internal int GetRecordFromVersion(DataRowVersion version);
    internal DataRowVersion GetDefaultRowVersion(DataViewRowState viewState);
    internal DataViewRowState GetRecordState(int record);
    internal bool HasKeyChanged(DataKey key);
    internal bool HasKeyChanged(DataKey key, DataRowVersion version1, DataRowVersion version2);
    public bool HasVersion(DataRowVersion version);
    internal bool HasChanges();
    internal bool HaveValuesChanged(DataColumn[] columns);
    internal bool HaveValuesChanged(DataColumn[] columns, DataRowVersion version1, DataRowVersion version2);
    public bool IsNull(int columnIndex);
    public bool IsNull(string columnName);
    public bool IsNull(DataColumn column);
    public bool IsNull(DataColumn column, DataRowVersion version);
    public void RejectChanges();
    internal void ResetLastChangedColumn();
    internal void SetKeyValues(DataKey key, Object[] keyValues);
    protected void SetNull(DataColumn column);
    internal void SetNestedParentRow(DataRow parentRow, bool setNonNested);
    public void SetParentRow(DataRow parentRow);
    public void SetParentRow(DataRow parentRow, DataRelation relation);
    internal void SetParentRowToDBNull();
    internal void SetParentRowToDBNull(DataRelation relation);
    public void SetAdded();
    public void SetModified();
    internal int CopyValuesIntoStore(ArrayList storeList, ArrayList nullbitList, int storeIndex);
}
[FlagsAttribute]
public enum System.Data.DataRowAction : Enum {
    public int value__;
    public static DataRowAction Nothing;
    public static DataRowAction Delete;
    public static DataRowAction Change;
    public static DataRowAction Rollback;
    public static DataRowAction Commit;
    public static DataRowAction Add;
    public static DataRowAction ChangeOriginal;
    public static DataRowAction ChangeCurrentAndOriginal;
}
public class System.Data.DataRowBuilder : object {
    internal DataTable _table;
    internal int _record;
    internal DataRowBuilder(DataTable table, int record);
}
public class System.Data.DataRowChangeEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DataRow <Row>k__BackingField;
    [CompilerGeneratedAttribute]
private DataRowAction <Action>k__BackingField;
    public DataRow Row { get; }
    public DataRowAction Action { get; }
    public DataRowChangeEventArgs(DataRow row, DataRowAction action);
    [CompilerGeneratedAttribute]
public DataRow get_Row();
    [CompilerGeneratedAttribute]
public DataRowAction get_Action();
}
public class System.Data.DataRowChangeEventHandler : MulticastDelegate {
    public DataRowChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataRowChangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataRowChangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class System.Data.DataRowCollection : InternalDataCollectionBase {
    private DataTable _table;
    private DataRowTree _list;
    internal int _nullInList;
    public int Count { get; }
    public DataRow Item { get; }
    internal DataRowCollection(DataTable table);
    public virtual int get_Count();
    public DataRow get_Item(int index);
    public void Add(DataRow row);
    public void InsertAt(DataRow row, int pos);
    internal void DiffInsertAt(DataRow row, int pos);
    public int IndexOf(DataRow row);
    internal DataRow AddWithColumnEvents(Object[] values);
    public DataRow Add(Object[] values);
    internal void ArrayAdd(DataRow row);
    internal void ArrayInsert(DataRow row, int pos);
    internal void ArrayClear();
    internal void ArrayRemove(DataRow row);
    public DataRow Find(object key);
    public DataRow Find(Object[] keys);
    public void Clear();
    public bool Contains(object key);
    public bool Contains(Object[] keys);
    public virtual void CopyTo(Array ar, int index);
    public void CopyTo(DataRow[] array, int index);
    public virtual IEnumerator GetEnumerator();
    public void Remove(DataRow row);
    public void RemoveAt(int index);
}
public static class System.Data.DataRowComparer : object {
    public static DataRowComparer`1<DataRow> Default { get; }
    public static DataRowComparer`1<DataRow> get_Default();
    internal static bool AreEqual(object a, object b);
    private static bool AreElementEqual(object a, object b);
    private static bool CompareArray(Array a, Array b);
    private static bool CompareEquatableArray(TElem[] a, TElem[] b);
}
public class System.Data.DataRowComparer`1 : object {
    private static DataRowComparer`1<TRow> s_instance;
    public static DataRowComparer`1<TRow> Default { get; }
    private static DataRowComparer`1();
    public static DataRowComparer`1<TRow> get_Default();
    public sealed virtual bool Equals(TRow leftRow, TRow rightRow);
    public sealed virtual int GetHashCode(TRow row);
}
internal class System.Data.DataRowCreatedEventHandler : MulticastDelegate {
    public DataRowCreatedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataRow r);
    public virtual IAsyncResult BeginInvoke(object sender, DataRow r, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ExtensionAttribute]
public static class System.Data.DataRowExtensions : object {
    [ExtensionAttribute]
public static T Field(DataRow row, string columnName);
    [ExtensionAttribute]
public static T Field(DataRow row, DataColumn column);
    [ExtensionAttribute]
public static T Field(DataRow row, int columnIndex);
    [ExtensionAttribute]
public static T Field(DataRow row, int columnIndex, DataRowVersion version);
    [ExtensionAttribute]
public static T Field(DataRow row, string columnName, DataRowVersion version);
    [ExtensionAttribute]
public static T Field(DataRow row, DataColumn column, DataRowVersion version);
    [ExtensionAttribute]
public static void SetField(DataRow row, int columnIndex, T value);
    [ExtensionAttribute]
public static void SetField(DataRow row, string columnName, T value);
    [ExtensionAttribute]
public static void SetField(DataRow row, DataColumn column, T value);
}
[FlagsAttribute]
public enum System.Data.DataRowState : Enum {
    public int value__;
    public static DataRowState Detached;
    public static DataRowState Unchanged;
    public static DataRowState Added;
    public static DataRowState Deleted;
    public static DataRowState Modified;
}
public enum System.Data.DataRowVersion : Enum {
    public int value__;
    public static DataRowVersion Original;
    public static DataRowVersion Current;
    public static DataRowVersion Proposed;
    public static DataRowVersion Default;
}
[DefaultMemberAttribute("Item")]
public class System.Data.DataRowView : object {
    private DataView _dataView;
    private DataRow _row;
    private bool _delayBeginEdit;
    private static PropertyDescriptorCollection s_zeroPropertyDescriptorCollection;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanged;
    public DataView DataView { get; }
    public object Item { get; public set; }
    public object Item { get; public set; }
    private string System.ComponentModel.IDataErrorInfo.Item { get; }
    private string System.ComponentModel.IDataErrorInfo.Error { get; }
    public DataRowVersion RowVersion { get; }
    private DataRowVersion RowVersionDefault { get; }
    public DataRow Row { get; }
    public bool IsNew { get; }
    public bool IsEdit { get; }
    internal DataRowView(DataView dataView, DataRow row);
    private static DataRowView();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public DataView get_DataView();
    public object get_Item(int ndx);
    public void set_Item(int ndx, object value);
    public object get_Item(string property);
    public void set_Item(string property, object value);
    private sealed virtual override string System.ComponentModel.IDataErrorInfo.get_Item(string colName);
    private sealed virtual override string System.ComponentModel.IDataErrorInfo.get_Error();
    public DataRowVersion get_RowVersion();
    private DataRowVersion get_RowVersionDefault();
    internal int GetRecord();
    internal bool HasRecord();
    internal object GetColumnValue(DataColumn column);
    internal void SetColumnValue(DataColumn column, object value);
    public DataView CreateChildView(DataRelation relation, bool followParent);
    public DataView CreateChildView(DataRelation relation);
    public DataView CreateChildView(string relationName, bool followParent);
    public DataView CreateChildView(string relationName);
    public DataRow get_Row();
    public sealed virtual void BeginEdit();
    public sealed virtual void CancelEdit();
    public sealed virtual void EndEdit();
    public bool get_IsNew();
    public bool get_IsEdit();
    public void Delete();
    [CompilerGeneratedAttribute]
public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    internal void RaisePropertyChangedEvent(string propName);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
[DefaultPropertyAttribute("DataSetName")]
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
[XmlRootAttribute("DataSet")]
[XmlSchemaProviderAttribute("GetDataSetSchema")]
public class System.Data.DataSet : MarshalByValueComponent {
    private DataViewManager _defaultViewManager;
    private DataTableCollection _tableCollection;
    private DataRelationCollection _relationCollection;
    internal PropertyCollection _extendedProperties;
    private string _dataSetName;
    private string _datasetPrefix;
    internal string _namespaceURI;
    private bool _enforceConstraints;
    private bool _caseSensitive;
    private CultureInfo _culture;
    private bool _cultureUserSet;
    internal bool _fInReadXml;
    internal bool _fInLoadDiffgram;
    internal bool _fTopLevelTable;
    internal bool _fInitInProgress;
    internal bool _fEnableCascading;
    internal bool _fIsSchemaLoading;
    private bool _fBoundToDocument;
    internal string _mainTableName;
    private SerializationFormat _remotingFormat;
    private object _defaultViewManagerLock;
    private static int s_objectTypeCount;
    private int _objectID;
    private static XmlSchemaComplexType s_schemaTypeForWSDL;
    internal bool _useDataSetSchemaOnly;
    internal bool _udtIsWrapped;
    [CompilerGeneratedAttribute]
private PropertyChangedEventHandler PropertyChanging;
    [CompilerGeneratedAttribute]
private MergeFailedEventHandler MergeFailed;
    [CompilerGeneratedAttribute]
private DataRowCreatedEventHandler DataRowCreated;
    [CompilerGeneratedAttribute]
private DataSetClearEventhandler ClearFunctionCalled;
    [CompilerGeneratedAttribute]
private EventHandler Initialized;
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SerializationFormat RemotingFormat { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public SchemaSerializationMode SchemaSerializationMode { get; public set; }
    [DefaultValueAttribute("False")]
public bool CaseSensitive { get; public set; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    [BrowsableAttribute("False")]
public DataViewManager DefaultViewManager { get; }
    [DefaultValueAttribute("True")]
public bool EnforceConstraints { get; public set; }
    [DefaultValueAttribute("")]
public string DataSetName { get; public set; }
    [DefaultValueAttribute("")]
public string Namespace { get; public set; }
    [DefaultValueAttribute("")]
public string Prefix { get; public set; }
    [BrowsableAttribute("False")]
public PropertyCollection ExtendedProperties { get; }
    [BrowsableAttribute("False")]
public bool HasErrors { get; }
    [BrowsableAttribute("False")]
public bool IsInitialized { get; }
    public CultureInfo Locale { get; public set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public ISite Site { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public DataRelationCollection Relations { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public DataTableCollection Tables { get; }
    internal bool FBoundToDocument { get; internal set; }
    internal string MainTableName { get; internal set; }
    internal int ObjectID { get; }
    public DataSet(string dataSetName);
    protected DataSet(SerializationInfo info, StreamingContext context);
    protected DataSet(SerializationInfo info, StreamingContext context, bool ConstructSchema);
    private static DataSet();
    public SerializationFormat get_RemotingFormat();
    public void set_RemotingFormat(SerializationFormat value);
    public virtual SchemaSerializationMode get_SchemaSerializationMode();
    public virtual void set_SchemaSerializationMode(SchemaSerializationMode value);
    protected bool IsBinarySerialized(SerializationInfo info, StreamingContext context);
    protected SchemaSerializationMode DetermineSchemaSerializationMode(SerializationInfo info, StreamingContext context);
    protected SchemaSerializationMode DetermineSchemaSerializationMode(XmlReader reader);
    protected void GetSerializationData(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    protected virtual void InitializeDerivedDataSet();
    private void SerializeDataSet(SerializationInfo info, StreamingContext context, SerializationFormat remotingFormat);
    internal void DeserializeDataSet(SerializationInfo info, StreamingContext context, SerializationFormat remotingFormat, SchemaSerializationMode schemaSerializationMode);
    private void DeserializeDataSetSchema(SerializationInfo info, StreamingContext context, SerializationFormat remotingFormat, SchemaSerializationMode schemaSerializationMode);
    private void DeserializeDataSetData(SerializationInfo info, StreamingContext context, SerializationFormat remotingFormat);
    private void SerializeDataSetProperties(SerializationInfo info, StreamingContext context);
    private void DeserializeDataSetProperties(SerializationInfo info, StreamingContext context);
    private void SerializeRelations(SerializationInfo info, StreamingContext context);
    private void DeserializeRelations(SerializationInfo info, StreamingContext context);
    internal void FailedEnableConstraints();
    public bool get_CaseSensitive();
    public void set_CaseSensitive(bool value);
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    public DataViewManager get_DefaultViewManager();
    public bool get_EnforceConstraints();
    public void set_EnforceConstraints(bool value);
    internal void RestoreEnforceConstraints(bool value);
    internal void EnableConstraints();
    public string get_DataSetName();
    public void set_DataSetName(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_Prefix();
    public void set_Prefix(string value);
    public PropertyCollection get_ExtendedProperties();
    public bool get_HasErrors();
    public sealed virtual bool get_IsInitialized();
    public CultureInfo get_Locale();
    public void set_Locale(CultureInfo value);
    internal void SetLocaleValue(CultureInfo value, bool userSet);
    internal bool ShouldSerializeLocale();
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    public DataRelationCollection get_Relations();
    protected virtual bool ShouldSerializeRelations();
    public DataTableCollection get_Tables();
    protected virtual bool ShouldSerializeTables();
    internal bool get_FBoundToDocument();
    internal void set_FBoundToDocument(bool value);
    public void AcceptChanges();
    [CompilerGeneratedAttribute]
internal void add_PropertyChanging(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_PropertyChanging(PropertyChangedEventHandler value);
    [CompilerGeneratedAttribute]
public void add_MergeFailed(MergeFailedEventHandler value);
    [CompilerGeneratedAttribute]
public void remove_MergeFailed(MergeFailedEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_DataRowCreated(DataRowCreatedEventHandler value);
    [CompilerGeneratedAttribute]
internal void remove_DataRowCreated(DataRowCreatedEventHandler value);
    [CompilerGeneratedAttribute]
internal void add_ClearFunctionCalled(DataSetClearEventhandler value);
    [CompilerGeneratedAttribute]
internal void remove_ClearFunctionCalled(DataSetClearEventhandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Initialized(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Initialized(EventHandler value);
    public sealed virtual void BeginInit();
    public sealed virtual void EndInit();
    public void Clear();
    public virtual DataSet Clone();
    public DataSet Copy();
    internal int EstimatedXmlStringSize();
    public DataSet GetChanges();
    public DataSet GetChanges(DataRowState rowStates);
    private void MarkModifiedRows(TableChanges[] bitMatrix, DataRowState rowStates);
    private void MarkRelatedRowsAsModified(TableChanges[] bitMatrix, DataRow row);
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    internal string GetRemotingDiffGram(DataTable table);
    public string GetXml();
    public string GetXmlSchema();
    internal string GetXmlSchemaForRemoting(DataTable table);
    public bool HasChanges();
    public bool HasChanges(DataRowState rowStates);
    public void InferXmlSchema(XmlReader reader, String[] nsArray);
    public void InferXmlSchema(Stream stream, String[] nsArray);
    public void InferXmlSchema(TextReader reader, String[] nsArray);
    public void InferXmlSchema(string fileName, String[] nsArray);
    public void ReadXmlSchema(XmlReader reader);
    internal void ReadXmlSchema(XmlReader reader, bool denyResolving);
    internal bool MoveToElement(XmlReader reader, int depth);
    private static void MoveToElement(XmlReader reader);
    internal void ReadEndElement(XmlReader reader);
    internal void ReadXSDSchema(XmlReader reader, bool denyResolving);
    internal void ReadXDRSchema(XmlReader reader);
    public void ReadXmlSchema(Stream stream);
    public void ReadXmlSchema(TextReader reader);
    public void ReadXmlSchema(string fileName);
    public void WriteXmlSchema(Stream stream);
    public void WriteXmlSchema(Stream stream, Converter`2<Type, string> multipleTargetConverter);
    public void WriteXmlSchema(string fileName);
    public void WriteXmlSchema(string fileName, Converter`2<Type, string> multipleTargetConverter);
    public void WriteXmlSchema(TextWriter writer);
    public void WriteXmlSchema(TextWriter writer, Converter`2<Type, string> multipleTargetConverter);
    public void WriteXmlSchema(XmlWriter writer);
    public void WriteXmlSchema(XmlWriter writer, Converter`2<Type, string> multipleTargetConverter);
    private void WriteXmlSchema(string fileName, SchemaFormat schemaFormat, Converter`2<Type, string> multipleTargetConverter);
    private void WriteXmlSchema(Stream stream, SchemaFormat schemaFormat, Converter`2<Type, string> multipleTargetConverter);
    private void WriteXmlSchema(TextWriter writer, SchemaFormat schemaFormat, Converter`2<Type, string> multipleTargetConverter);
    private void WriteXmlSchema(XmlWriter writer, SchemaFormat schemaFormat, Converter`2<Type, string> multipleTargetConverter);
    public XmlReadMode ReadXml(XmlReader reader);
    internal XmlReadMode ReadXml(XmlReader reader, bool denyResolving);
    public XmlReadMode ReadXml(Stream stream);
    public XmlReadMode ReadXml(TextReader reader);
    public XmlReadMode ReadXml(string fileName);
    internal void InferSchema(XmlDocument xdoc, String[] excludedNamespaces, XmlReadMode mode);
    private bool IsEmpty();
    private void ReadXmlDiffgram(XmlReader reader);
    public XmlReadMode ReadXml(XmlReader reader, XmlReadMode mode);
    internal XmlReadMode ReadXml(XmlReader reader, XmlReadMode mode, bool denyResolving);
    public XmlReadMode ReadXml(Stream stream, XmlReadMode mode);
    public XmlReadMode ReadXml(TextReader reader, XmlReadMode mode);
    public XmlReadMode ReadXml(string fileName, XmlReadMode mode);
    public void WriteXml(Stream stream);
    public void WriteXml(TextWriter writer);
    public void WriteXml(XmlWriter writer);
    public void WriteXml(string fileName);
    public void WriteXml(Stream stream, XmlWriteMode mode);
    public void WriteXml(TextWriter writer, XmlWriteMode mode);
    public void WriteXml(XmlWriter writer, XmlWriteMode mode);
    public void WriteXml(string fileName, XmlWriteMode mode);
    public void Merge(DataSet dataSet);
    public void Merge(DataSet dataSet, bool preserveChanges);
    public void Merge(DataSet dataSet, bool preserveChanges, MissingSchemaAction missingSchemaAction);
    public void Merge(DataTable table);
    public void Merge(DataTable table, bool preserveChanges, MissingSchemaAction missingSchemaAction);
    public void Merge(DataRow[] rows);
    public void Merge(DataRow[] rows, bool preserveChanges, MissingSchemaAction missingSchemaAction);
    protected virtual void OnPropertyChanging(PropertyChangedEventArgs pcevent);
    internal void OnMergeFailed(MergeFailedEventArgs mfevent);
    internal void RaiseMergeFailed(DataTable table, string conflict, MissingSchemaAction missingSchemaAction);
    internal void OnDataRowCreated(DataRow row);
    internal void OnClearFunctionCalled(DataTable table);
    private void OnInitialized();
    protected internal virtual void OnRemoveTable(DataTable table);
    internal void OnRemovedTable(DataTable table);
    protected virtual void OnRemoveRelation(DataRelation relation);
    internal void OnRemoveRelationHack(DataRelation relation);
    protected internal void RaisePropertyChanging(string name);
    internal DataTable[] TopLevelTables();
    internal DataTable[] TopLevelTables(bool forSchema);
    public virtual void RejectChanges();
    public virtual void Reset();
    internal bool ValidateCaseConstraint();
    internal bool ValidateLocaleConstraint();
    internal DataTable FindTable(DataTable baseTable, PropertyDescriptor[] props, int propStart);
    protected virtual void ReadXmlSerializable(XmlReader reader);
    protected virtual XmlSchema GetSchemaSerializable();
    public static XmlSchemaComplexType GetDataSetSchema(XmlSchemaSet schemaSet);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public virtual void Load(IDataReader reader, LoadOption loadOption, FillErrorEventHandler errorHandler, DataTable[] tables);
    public void Load(IDataReader reader, LoadOption loadOption, DataTable[] tables);
    public void Load(IDataReader reader, LoadOption loadOption, String[] tables);
    public DataTableReader CreateDataReader();
    public DataTableReader CreateDataReader(DataTable[] dataTables);
    internal string get_MainTableName();
    internal void set_MainTableName(string value);
    internal int get_ObjectID();
}
internal class System.Data.DataSetClearEventhandler : MulticastDelegate {
    public DataSetClearEventhandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataTable table);
    public virtual IAsyncResult BeginInvoke(object sender, DataTable table, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Data.DataSetDateTime : Enum {
    public int value__;
    public static DataSetDateTime Local;
    public static DataSetDateTime Unspecified;
    public static DataSetDateTime UnspecifiedLocal;
    public static DataSetDateTime Utc;
}
[AttributeUsageAttribute("32767")]
[ObsoleteAttribute("DataSysDescriptionAttribute has been deprecated.  https://go.microsoft.com/fwlink/?linkid=14202", "False")]
public class System.Data.DataSysDescriptionAttribute : DescriptionAttribute {
    private bool _replaced;
    public string Description { get; }
    [ObsoleteAttribute("DataSysDescriptionAttribute has been deprecated.  https://go.microsoft.com/fwlink/?linkid=14202", "False")]
public DataSysDescriptionAttribute(string description);
    public virtual string get_Description();
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
[DesignTimeVisibleAttribute("False")]
[DefaultPropertyAttribute("TableName")]
[DefaultEventAttribute("RowChanging")]
[XmlSchemaProviderAttribute("GetDataTableSchema")]
[ToolboxItemAttribute("False")]
public class System.Data.DataTable : MarshalByValueComponent {
    private DataSet _dataSet;
    private DataView _defaultView;
    internal long _nextRowID;
    internal DataRowCollection _rowCollection;
    internal DataColumnCollection _columnCollection;
    private ConstraintCollection _constraintCollection;
    private int _elementColumnCount;
    internal DataRelationCollection _parentRelationsCollection;
    internal DataRelationCollection _childRelationsCollection;
    internal RecordManager _recordManager;
    internal List`1<Index> _indexes;
    private List`1<Index> _shadowIndexes;
    private int _shadowCount;
    internal PropertyCollection _extendedProperties;
    private string _tableName;
    internal string _tableNamespace;
    private string _tablePrefix;
    internal DataExpression _displayExpression;
    internal bool _fNestedInDataset;
    private CultureInfo _culture;
    private bool _cultureUserSet;
    private CompareInfo _compareInfo;
    private CompareOptions _compareFlags;
    private IFormatProvider _formatProvider;
    private StringComparer _hashCodeProvider;
    private bool _caseSensitive;
    private bool _caseSensitiveUserSet;
    internal string _encodedTableName;
    internal DataColumn _xmlText;
    internal DataColumn _colUnique;
    internal decimal _minOccurs;
    internal decimal _maxOccurs;
    internal bool _repeatableElement;
    private object _typeName;
    internal UniqueConstraint _primaryKey;
    internal IndexField[] _primaryIndex;
    private DataColumn[] _delayedSetPrimaryKey;
    private Index _loadIndex;
    private Index _loadIndexwithOriginalAdded;
    private Index _loadIndexwithCurrentDeleted;
    private int _suspendIndexEvents;
    private bool _savedEnforceConstraints;
    private bool _inDataLoad;
    private bool _initialLoad;
    private bool _schemaLoading;
    private bool _enforceConstraints;
    internal bool _suspendEnforceConstraints;
    protected internal bool fInitInProgress;
    private bool _inLoad;
    internal bool _fInLoadDiffgram;
    private byte _isTypedDataTable;
    private DataRow[] _emptyDataRowArray;
    private PropertyDescriptorCollection _propertyDescriptorCollectionCache;
    private DataRelation[] _nestedParentRelations;
    internal List`1<DataColumn> _dependentColumns;
    private bool _mergingData;
    private DataRowChangeEventHandler _onRowChangedDelegate;
    private DataRowChangeEventHandler _onRowChangingDelegate;
    private DataRowChangeEventHandler _onRowDeletingDelegate;
    private DataRowChangeEventHandler _onRowDeletedDelegate;
    private DataColumnChangeEventHandler _onColumnChangedDelegate;
    private DataColumnChangeEventHandler _onColumnChangingDelegate;
    private DataTableClearEventHandler _onTableClearingDelegate;
    private DataTableClearEventHandler _onTableClearedDelegate;
    private DataTableNewRowEventHandler _onTableNewRowDelegate;
    private PropertyChangedEventHandler _onPropertyChangingDelegate;
    private EventHandler _onInitialized;
    private DataRowBuilder _rowBuilder;
    internal List`1<DataView> _delayedViews;
    private List`1<DataViewListener> _dataViewListeners;
    internal Hashtable _rowDiffId;
    internal ReaderWriterLockSlim _indexesLock;
    internal int _ukColumnPositionForInference;
    private SerializationFormat _remotingFormat;
    private static int s_objectTypeCount;
    private int _objectID;
    public bool CaseSensitive { get; public set; }
    internal bool AreIndexEventsSuspended { get; }
    [BrowsableAttribute("False")]
public bool IsInitialized { get; }
    private bool IsTypedDataTable { get; }
    internal bool SelfNested { get; }
    [DebuggerBrowsableAttribute("0")]
internal List`1<Index> LiveIndexes { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SerializationFormat RemotingFormat { get; public set; }
    internal int UKColumnPositionForInference { get; internal set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public DataRelationCollection ChildRelations { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public DataColumnCollection Columns { get; }
    private CompareInfo CompareInfo { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public ConstraintCollection Constraints { get; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public DataSet DataSet { get; }
    [BrowsableAttribute("False")]
public DataView DefaultView { get; }
    [DefaultValueAttribute("")]
public string DisplayExpression { get; public set; }
    internal string DisplayExpressionInternal { get; }
    internal bool EnforceConstraints { get; internal set; }
    internal bool SuspendEnforceConstraints { get; internal set; }
    [BrowsableAttribute("False")]
public PropertyCollection ExtendedProperties { get; }
    internal IFormatProvider FormatProvider { get; }
    [BrowsableAttribute("False")]
public bool HasErrors { get; }
    public CultureInfo Locale { get; public set; }
    [DefaultValueAttribute("50")]
public int MinimumCapacity { get; public set; }
    internal int RecordCapacity { get; }
    internal int ElementColumnCount { get; internal set; }
    [DesignerSerializationVisibilityAttribute("0")]
[BrowsableAttribute("False")]
public DataRelationCollection ParentRelations { get; }
    internal bool MergingData { get; internal set; }
    internal DataRelation[] NestedParentRelations { get; }
    internal bool SchemaLoading { get; }
    internal int NestedParentsCount { get; }
    [TypeConverterAttribute("System.Data.PrimaryKeyTypeConverter")]
public DataColumn[] PrimaryKey { get; public set; }
    [BrowsableAttribute("False")]
public DataRowCollection Rows { get; }
    [DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
public string TableName { get; public set; }
    internal string EncodedTableName { get; }
    public string Namespace { get; public set; }
    [DefaultValueAttribute("")]
public string Prefix { get; public set; }
    internal DataColumn XmlText { get; internal set; }
    internal decimal MaxOccurs { get; internal set; }
    internal decimal MinOccurs { get; internal set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ISite Site { get; public set; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    internal bool NeedColumnChangeEvents { get; }
    internal XmlQualifiedName TypeName { get; internal set; }
    internal Hashtable RowDiffId { get; }
    internal int ObjectID { get; }
    public DataTable(string tableName);
    public DataTable(string tableName, string tableNamespace);
    protected DataTable(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    private void SerializeDataTable(SerializationInfo info, StreamingContext context, bool isSingleTable, SerializationFormat remotingFormat);
    internal void DeserializeDataTable(SerializationInfo info, StreamingContext context, bool isSingleTable, SerializationFormat remotingFormat);
    internal void SerializeTableSchema(SerializationInfo info, StreamingContext context, bool isSingleTable);
    internal void DeserializeTableSchema(SerializationInfo info, StreamingContext context, bool isSingleTable);
    internal void SerializeConstraints(SerializationInfo info, StreamingContext context, int serIndex, bool allConstraints);
    internal void DeserializeConstraints(SerializationInfo info, StreamingContext context, int serIndex, bool allConstraints);
    internal void SerializeExpressionColumns(SerializationInfo info, StreamingContext context, int serIndex);
    internal void DeserializeExpressionColumns(SerializationInfo info, StreamingContext context, int serIndex);
    internal void SerializeTableData(SerializationInfo info, StreamingContext context, int serIndex);
    internal void DeserializeTableData(SerializationInfo info, StreamingContext context, int serIndex);
    private DataRowState ConvertToRowState(BitArray bitStates, int bitIndex);
    internal void GetRowAndColumnErrors(int rowIndex, Hashtable rowErrors, Hashtable colErrors);
    private void ConvertToRowError(int rowIndex, Hashtable rowErrors, Hashtable colErrors);
    public bool get_CaseSensitive();
    public void set_CaseSensitive(bool value);
    internal bool get_AreIndexEventsSuspended();
    internal void RestoreIndexEvents(bool forceReset);
    internal void SuspendIndexEvents();
    public sealed virtual bool get_IsInitialized();
    private bool get_IsTypedDataTable();
    internal bool SetCaseSensitiveValue(bool isCaseSensitive, bool userSet, bool resetIndexes);
    internal bool ShouldSerializeCaseSensitive();
    internal bool get_SelfNested();
    internal List`1<Index> get_LiveIndexes();
    public SerializationFormat get_RemotingFormat();
    public void set_RemotingFormat(SerializationFormat value);
    internal int get_UKColumnPositionForInference();
    internal void set_UKColumnPositionForInference(int value);
    public DataRelationCollection get_ChildRelations();
    public DataColumnCollection get_Columns();
    private CompareInfo get_CompareInfo();
    public ConstraintCollection get_Constraints();
    private void ResetConstraints();
    public DataSet get_DataSet();
    internal void SetDataSet(DataSet dataSet);
    public DataView get_DefaultView();
    public string get_DisplayExpression();
    public void set_DisplayExpression(string value);
    internal string get_DisplayExpressionInternal();
    internal bool get_EnforceConstraints();
    internal void set_EnforceConstraints(bool value);
    internal bool get_SuspendEnforceConstraints();
    internal void set_SuspendEnforceConstraints(bool value);
    internal void EnableConstraints();
    public PropertyCollection get_ExtendedProperties();
    internal IFormatProvider get_FormatProvider();
    public bool get_HasErrors();
    public CultureInfo get_Locale();
    public void set_Locale(CultureInfo value);
    internal bool SetLocaleValue(CultureInfo culture, bool userSet, bool resetIndexes);
    internal bool ShouldSerializeLocale();
    public int get_MinimumCapacity();
    public void set_MinimumCapacity(int value);
    internal int get_RecordCapacity();
    internal int get_ElementColumnCount();
    internal void set_ElementColumnCount(int value);
    public DataRelationCollection get_ParentRelations();
    internal bool get_MergingData();
    internal void set_MergingData(bool value);
    internal DataRelation[] get_NestedParentRelations();
    internal bool get_SchemaLoading();
    internal void CacheNestedParent();
    private DataRelation[] FindNestedParentRelations();
    internal int get_NestedParentsCount();
    public DataColumn[] get_PrimaryKey();
    public void set_PrimaryKey(DataColumn[] value);
    public DataRowCollection get_Rows();
    public string get_TableName();
    public void set_TableName(string value);
    internal string get_EncodedTableName();
    private string GetInheritedNamespace(List`1<DataTable> visitedTables);
    public string get_Namespace();
    public void set_Namespace(string value);
    internal bool IsNamespaceInherited();
    internal void CheckCascadingNamespaceConflict(string realNamespace);
    internal void CheckNamespaceValidityForNestedRelations(string realNamespace);
    internal void CheckNamespaceValidityForNestedParentRelations(string ns, DataTable parentTable);
    internal void DoRaiseNamespaceChange();
    public virtual void BeginInit();
    public virtual void EndInit();
    public string get_Prefix();
    public void set_Prefix(string value);
    internal DataColumn get_XmlText();
    internal void set_XmlText(DataColumn value);
    internal decimal get_MaxOccurs();
    internal void set_MaxOccurs(decimal value);
    internal decimal get_MinOccurs();
    internal void set_MinOccurs(decimal value);
    internal void SetKeyValues(DataKey key, Object[] keyValues, int record);
    internal DataRow FindByIndex(Index ndx, Object[] key);
    internal DataRow FindMergeTarget(DataRow row, DataKey key, Index ndx);
    private void SetMergeRecords(DataRow row, int newRecord, int oldRecord, DataRowAction action);
    internal DataRow MergeRow(DataRow row, DataRow targetRow, bool preserveChanges, Index idxSearch);
    public void AcceptChanges();
    protected virtual DataTable CreateInstance();
    public virtual DataTable Clone();
    internal DataTable Clone(DataSet cloneDS);
    private DataTable IncrementalCloneTo(DataTable sourceTable, DataTable targetTable);
    private DataTable CloneHierarchy(DataTable sourceTable, DataSet ds, Hashtable visitedMap);
    private DataTable CloneTo(DataTable clone, DataSet cloneDS, bool skipExpressionColumns);
    public DataTable Copy();
    public void add_ColumnChanging(DataColumnChangeEventHandler value);
    public void remove_ColumnChanging(DataColumnChangeEventHandler value);
    public void add_ColumnChanged(DataColumnChangeEventHandler value);
    public void remove_ColumnChanged(DataColumnChangeEventHandler value);
    public sealed virtual void add_Initialized(EventHandler value);
    public sealed virtual void remove_Initialized(EventHandler value);
    internal void add_PropertyChanging(PropertyChangedEventHandler value);
    internal void remove_PropertyChanging(PropertyChangedEventHandler value);
    public void add_RowChanged(DataRowChangeEventHandler value);
    public void remove_RowChanged(DataRowChangeEventHandler value);
    public void add_RowChanging(DataRowChangeEventHandler value);
    public void remove_RowChanging(DataRowChangeEventHandler value);
    public void add_RowDeleting(DataRowChangeEventHandler value);
    public void remove_RowDeleting(DataRowChangeEventHandler value);
    public void add_RowDeleted(DataRowChangeEventHandler value);
    public void remove_RowDeleted(DataRowChangeEventHandler value);
    public void add_TableClearing(DataTableClearEventHandler value);
    public void remove_TableClearing(DataTableClearEventHandler value);
    public void add_TableCleared(DataTableClearEventHandler value);
    public void remove_TableCleared(DataTableClearEventHandler value);
    public void add_TableNewRow(DataTableNewRowEventHandler value);
    public void remove_TableNewRow(DataTableNewRowEventHandler value);
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    internal DataRow AddRecords(int oldRecord, int newRecord);
    internal void AddRow(DataRow row);
    internal void AddRow(DataRow row, int proposedID);
    internal void InsertRow(DataRow row, int proposedID, int pos);
    internal void InsertRow(DataRow row, long proposedID, int pos, bool fireEvent);
    internal void CheckNotModifying(DataRow row);
    public void Clear();
    internal void Clear(bool clearAll);
    internal void CascadeAll(DataRow row, DataRowAction action);
    internal void CommitRow(DataRow row);
    internal int Compare(string s1, string s2);
    internal int Compare(string s1, string s2, CompareInfo comparer);
    internal int IndexOf(string s1, string s2);
    internal bool IsSuffix(string s1, string s2);
    public object Compute(string expression, string filter);
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    internal void CopyRow(DataTable table, DataRow row);
    internal void DeleteRow(DataRow row);
    private void CheckPrimaryKey();
    internal DataRow FindByPrimaryKey(Object[] values);
    internal DataRow FindByPrimaryKey(object value);
    private DataRow FindRow(DataKey key, Object[] values);
    private DataRow FindRow(DataKey key, object value);
    internal string FormatSortString(IndexField[] indexDesc);
    internal void FreeRecord(Int32& record);
    public DataTable GetChanges();
    public DataTable GetChanges(DataRowState rowStates);
    public DataRow[] GetErrors();
    internal Index GetIndex(IndexField[] indexDesc);
    internal Index GetIndex(string sort, DataViewRowState recordStates, IFilter rowFilter);
    internal Index GetIndex(IndexField[] indexDesc, DataViewRowState recordStates, IFilter rowFilter);
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    internal List`1<DataViewListener> GetListeners();
    internal int GetSpecialHashCode(string name);
    public void ImportRow(DataRow row);
    internal void InsertRow(DataRow row, long proposedID);
    private IndexField[] NewIndexDesc(DataKey key);
    internal int NewRecord();
    internal int NewUninitializedRecord();
    internal int NewRecordFromArray(Object[] value);
    internal int NewRecord(int sourceRecord);
    internal DataRow NewEmptyRow();
    private DataRow NewUninitializedRow();
    public DataRow NewRow();
    internal DataRow CreateEmptyRow();
    private void NewRowCreated(DataRow row);
    internal DataRow NewRow(int record);
    protected virtual DataRow NewRowFromBuilder(DataRowBuilder builder);
    protected virtual Type GetRowType();
    protected internal DataRow[] NewRowArray(int size);
    internal bool get_NeedColumnChangeEvents();
    protected internal virtual void OnColumnChanging(DataColumnChangeEventArgs e);
    protected internal virtual void OnColumnChanged(DataColumnChangeEventArgs e);
    protected virtual void OnPropertyChanging(PropertyChangedEventArgs pcevent);
    internal void OnRemoveColumnInternal(DataColumn column);
    protected virtual void OnRemoveColumn(DataColumn column);
    private DataRowChangeEventArgs OnRowChanged(DataRowChangeEventArgs args, DataRow eRow, DataRowAction eAction);
    private DataRowChangeEventArgs OnRowChanging(DataRowChangeEventArgs args, DataRow eRow, DataRowAction eAction);
    protected virtual void OnRowChanged(DataRowChangeEventArgs e);
    protected virtual void OnRowChanging(DataRowChangeEventArgs e);
    protected virtual void OnRowDeleting(DataRowChangeEventArgs e);
    protected virtual void OnRowDeleted(DataRowChangeEventArgs e);
    protected virtual void OnTableCleared(DataTableClearEventArgs e);
    protected virtual void OnTableClearing(DataTableClearEventArgs e);
    protected virtual void OnTableNewRow(DataTableNewRowEventArgs e);
    private void OnInitialized();
    internal IndexField[] ParseSortString(string sortString);
    internal void RaisePropertyChanging(string name);
    internal void RecordChanged(int record);
    internal void RecordChanged(Int32[] oldIndex, Int32[] newIndex);
    internal void RecordStateChanged(int record, DataViewRowState oldState, DataViewRowState newState);
    internal void RecordStateChanged(int record1, DataViewRowState oldState1, DataViewRowState newState1, int record2, DataViewRowState oldState2, DataViewRowState newState2);
    internal Int32[] RemoveRecordFromIndexes(DataRow row, DataRowVersion version);
    internal Int32[] InsertRecordToIndexes(DataRow row, DataRowVersion version);
    internal void SilentlySetValue(DataRow dr, DataColumn dc, DataRowVersion version, object newValue);
    public void RejectChanges();
    internal void RemoveRow(DataRow row, bool check);
    public virtual void Reset();
    internal void ResetIndexes();
    internal void ResetInternalIndexes(DataColumn column);
    internal void RollbackRow(DataRow row);
    private DataRowChangeEventArgs RaiseRowChanged(DataRowChangeEventArgs args, DataRow eRow, DataRowAction eAction);
    private DataRowChangeEventArgs RaiseRowChanging(DataRowChangeEventArgs args, DataRow eRow, DataRowAction eAction);
    private DataRowChangeEventArgs RaiseRowChanging(DataRowChangeEventArgs args, DataRow eRow, DataRowAction eAction, bool fireEvent);
    public DataRow[] Select();
    public DataRow[] Select(string filterExpression);
    public DataRow[] Select(string filterExpression, string sort);
    public DataRow[] Select(string filterExpression, string sort, DataViewRowState recordStates);
    internal void SetNewRecord(DataRow row, int proposedRecord, DataRowAction action, bool isInMerge, bool fireEvent, bool suppressEnsurePropertyChanged);
    private void SetNewRecordWorker(DataRow row, int proposedRecord, DataRowAction action, bool isInMerge, bool suppressEnsurePropertyChanged, int position, bool fireEvent, Exception& deferredException);
    internal void SetOldRecord(DataRow row, int proposedRecord);
    private void RestoreShadowIndexes();
    private void SetShadowIndexes();
    internal void ShadowIndexCopy();
    public virtual string ToString();
    public void BeginLoadData();
    public void EndLoadData();
    public DataRow LoadDataRow(Object[] values, bool fAcceptChanges);
    public DataRow LoadDataRow(Object[] values, LoadOption loadOption);
    internal DataRow UpdatingAdd(Object[] values);
    internal bool UpdatingCurrent(DataRow row, DataRowAction action);
    internal DataColumn AddUniqueKey(int position);
    internal DataColumn AddUniqueKey();
    internal DataColumn AddForeignKey(DataColumn parentKey);
    internal void UpdatePropertyDescriptorCollectionCache();
    internal PropertyDescriptorCollection GetPropertyDescriptorCollection(Attribute[] attributes);
    internal XmlQualifiedName get_TypeName();
    internal void set_TypeName(XmlQualifiedName value);
    public void Merge(DataTable table);
    public void Merge(DataTable table, bool preserveChanges);
    public void Merge(DataTable table, bool preserveChanges, MissingSchemaAction missingSchemaAction);
    public void Load(IDataReader reader);
    public void Load(IDataReader reader, LoadOption loadOption);
    public virtual void Load(IDataReader reader, LoadOption loadOption, FillErrorEventHandler errorHandler);
    private DataRow LoadRow(Object[] values, LoadOption loadOption, Index searchIndex);
    private void SetDataRowWithLoadOption(DataRow dataRow, int recordNo, LoadOption loadOption, bool checkReadOnly);
    public DataTableReader CreateDataReader();
    public void WriteXml(Stream stream);
    public void WriteXml(Stream stream, bool writeHierarchy);
    public void WriteXml(TextWriter writer);
    public void WriteXml(TextWriter writer, bool writeHierarchy);
    public void WriteXml(XmlWriter writer);
    public void WriteXml(XmlWriter writer, bool writeHierarchy);
    public void WriteXml(string fileName);
    public void WriteXml(string fileName, bool writeHierarchy);
    public void WriteXml(Stream stream, XmlWriteMode mode);
    public void WriteXml(Stream stream, XmlWriteMode mode, bool writeHierarchy);
    public void WriteXml(TextWriter writer, XmlWriteMode mode);
    public void WriteXml(TextWriter writer, XmlWriteMode mode, bool writeHierarchy);
    public void WriteXml(XmlWriter writer, XmlWriteMode mode);
    public void WriteXml(XmlWriter writer, XmlWriteMode mode, bool writeHierarchy);
    public void WriteXml(string fileName, XmlWriteMode mode);
    public void WriteXml(string fileName, XmlWriteMode mode, bool writeHierarchy);
    public void WriteXmlSchema(Stream stream);
    public void WriteXmlSchema(Stream stream, bool writeHierarchy);
    public void WriteXmlSchema(TextWriter writer);
    public void WriteXmlSchema(TextWriter writer, bool writeHierarchy);
    private bool CheckForClosureOnExpressions(DataTable dt, bool writeHierarchy);
    private bool CheckForClosureOnExpressionTables(List`1<DataTable> tableList);
    public void WriteXmlSchema(XmlWriter writer);
    public void WriteXmlSchema(XmlWriter writer, bool writeHierarchy);
    public void WriteXmlSchema(string fileName);
    public void WriteXmlSchema(string fileName, bool writeHierarchy);
    public XmlReadMode ReadXml(Stream stream);
    public XmlReadMode ReadXml(TextReader reader);
    public XmlReadMode ReadXml(string fileName);
    public XmlReadMode ReadXml(XmlReader reader);
    private void RestoreConstraint(bool originalEnforceConstraint);
    private bool IsEmptyXml(XmlReader reader);
    internal XmlReadMode ReadXml(XmlReader reader, bool denyResolving);
    internal XmlReadMode ReadXml(XmlReader reader, XmlReadMode mode, bool denyResolving);
    internal void ReadEndElement(XmlReader reader);
    internal void ReadXDRSchema(XmlReader reader);
    internal bool MoveToElement(XmlReader reader, int depth);
    private void ReadXmlDiffgram(XmlReader reader);
    internal void ReadXSDSchema(XmlReader reader, bool denyResolving);
    public void ReadXmlSchema(Stream stream);
    public void ReadXmlSchema(TextReader reader);
    public void ReadXmlSchema(string fileName);
    public void ReadXmlSchema(XmlReader reader);
    internal void ReadXmlSchema(XmlReader reader, bool denyResolving);
    private void CreateTableList(DataTable currentTable, List`1<DataTable> tableList);
    private void CreateRelationList(List`1<DataTable> tableList, List`1<DataRelation> relationList);
    public static XmlSchemaComplexType GetDataTableSchema(XmlSchemaSet schemaSet);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    protected virtual XmlSchema GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    protected virtual void ReadXmlSerializable(XmlReader reader);
    internal Hashtable get_RowDiffId();
    internal int get_ObjectID();
    internal void AddDependentColumn(DataColumn expressionColumn);
    internal void RemoveDependentColumn(DataColumn expressionColumn);
    internal void EvaluateExpressions();
    internal void EvaluateExpressions(DataRow row, DataRowAction action, List`1<DataRow> cachedRows);
    internal void EvaluateExpressions(DataColumn column);
    internal void EvaluateDependentExpressions(DataColumn column);
    internal void EvaluateDependentExpressions(List`1<DataColumn> columns, DataRow row, DataRowVersion version, List`1<DataRow> cachedRows);
}
public class System.Data.DataTableClearEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DataTable <Table>k__BackingField;
    public DataTable Table { get; }
    public string TableName { get; }
    public string TableNamespace { get; }
    public DataTableClearEventArgs(DataTable dataTable);
    [CompilerGeneratedAttribute]
public DataTable get_Table();
    public string get_TableName();
    public string get_TableNamespace();
}
public class System.Data.DataTableClearEventHandler : MulticastDelegate {
    public DataTableClearEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataTableClearEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataTableClearEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
[DefaultEventAttribute("CollectionChanged")]
public class System.Data.DataTableCollection : InternalDataCollectionBase {
    private DataSet _dataSet;
    private ArrayList _list;
    private int _defaultNameIndex;
    private DataTable[] _delayedAddRangeTables;
    private CollectionChangeEventHandler _onCollectionChangedDelegate;
    private CollectionChangeEventHandler _onCollectionChangingDelegate;
    private static int s_objectTypeCount;
    private int _objectID;
    protected ArrayList List { get; }
    internal int ObjectID { get; }
    public DataTable Item { get; }
    public DataTable Item { get; }
    public DataTable Item { get; }
    internal DataTableCollection(DataSet dataSet);
    protected virtual ArrayList get_List();
    internal int get_ObjectID();
    public DataTable get_Item(int index);
    public DataTable get_Item(string name);
    public DataTable get_Item(string name, string tableNamespace);
    internal DataTable GetTable(string name, string ns);
    internal DataTable GetTableSmart(string name, string ns);
    public void Add(DataTable table);
    public void AddRange(DataTable[] tables);
    public DataTable Add(string name);
    public DataTable Add(string name, string tableNamespace);
    public DataTable Add();
    public void add_CollectionChanged(CollectionChangeEventHandler value);
    public void remove_CollectionChanged(CollectionChangeEventHandler value);
    public void add_CollectionChanging(CollectionChangeEventHandler value);
    public void remove_CollectionChanging(CollectionChangeEventHandler value);
    private void ArrayAdd(DataTable table);
    internal string AssignName();
    private void BaseAdd(DataTable table);
    private void BaseGroupSwitch(DataTable[] oldArray, int oldLength, DataTable[] newArray, int newLength);
    private void BaseRemove(DataTable table);
    public bool CanRemove(DataTable table);
    internal bool CanRemove(DataTable table, bool fThrowException);
    public void Clear();
    public bool Contains(string name);
    public bool Contains(string name, string tableNamespace);
    internal bool Contains(string name, string tableNamespace, bool checkProperty, bool caseSensitive);
    internal bool Contains(string name, bool caseSensitive);
    public void CopyTo(DataTable[] array, int index);
    public int IndexOf(DataTable table);
    public int IndexOf(string tableName);
    public int IndexOf(string tableName, string tableNamespace);
    internal int IndexOf(string tableName, string tableNamespace, bool chekforNull);
    internal void ReplaceFromInference(List`1<DataTable> tableList);
    internal int InternalIndexOf(string tableName);
    internal int InternalIndexOf(string tableName, string tableNamespace);
    internal void FinishInitCollection();
    private string MakeName(int index);
    private void OnCollectionChanged(CollectionChangeEventArgs ccevent);
    private void OnCollectionChanging(CollectionChangeEventArgs ccevent);
    internal void RegisterName(string name, string tbNamespace);
    public void Remove(DataTable table);
    public void RemoveAt(int index);
    public void Remove(string name);
    public void Remove(string name, string tableNamespace);
    internal void UnregisterName(string name);
}
[ExtensionAttribute]
public static class System.Data.DataTableExtensions : object {
    [ExtensionAttribute]
public static EnumerableRowCollection`1<DataRow> AsEnumerable(DataTable source);
    [ExtensionAttribute]
public static DataTable CopyToDataTable(IEnumerable`1<T> source);
    [ExtensionAttribute]
public static void CopyToDataTable(IEnumerable`1<T> source, DataTable table, LoadOption options);
    [ExtensionAttribute]
public static void CopyToDataTable(IEnumerable`1<T> source, DataTable table, LoadOption options, FillErrorEventHandler errorHandler);
    private static DataTable LoadTableFromEnumerable(IEnumerable`1<T> source, DataTable table, Nullable`1<LoadOption> options, FillErrorEventHandler errorHandler);
    [ExtensionAttribute]
public static DataView AsDataView(DataTable table);
    [ExtensionAttribute]
public static DataView AsDataView(EnumerableRowCollection`1<T> source);
}
public class System.Data.DataTableNewRowEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DataRow <Row>k__BackingField;
    public DataRow Row { get; }
    public DataTableNewRowEventArgs(DataRow dataRow);
    [CompilerGeneratedAttribute]
public DataRow get_Row();
}
public class System.Data.DataTableNewRowEventHandler : MulticastDelegate {
    public DataTableNewRowEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataTableNewRowEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataTableNewRowEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Data.DataTablePropertyDescriptor : PropertyDescriptor {
    [CompilerGeneratedAttribute]
private DataTable <Table>k__BackingField;
    public DataTable Table { get; }
    public Type ComponentType { get; }
    public bool IsReadOnly { get; }
    public Type PropertyType { get; }
    internal DataTablePropertyDescriptor(DataTable dataTable);
    [CompilerGeneratedAttribute]
public DataTable get_Table();
    public virtual Type get_ComponentType();
    public virtual bool get_IsReadOnly();
    public virtual Type get_PropertyType();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public virtual bool CanResetValue(object component);
    public virtual object GetValue(object component);
    public virtual void ResetValue(object component);
    public virtual void SetValue(object component, object value);
    public virtual bool ShouldSerializeValue(object component);
}
[DefaultMemberAttribute("Item")]
public class System.Data.DataTableReader : DbDataReader {
    private DataTable[] _tables;
    private bool _isOpen;
    private DataTable _schemaTable;
    private int _tableCounter;
    private int _rowCounter;
    private DataTable _currentDataTable;
    private DataRow _currentDataRow;
    private bool _hasRows;
    private bool _reachEORows;
    private bool _currentRowRemoved;
    private bool _schemaIsChanged;
    private bool _started;
    private bool _readerIsInvalid;
    private DataTableReaderListener _listener;
    private bool _tableCleared;
    private bool ReaderIsInvalid { get; private set; }
    private bool IsSchemaChanged { get; private set; }
    internal DataTable CurrentDataTable { get; }
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public bool HasRows { get; }
    public object Item { get; }
    public object Item { get; }
    public int FieldCount { get; }
    public DataTableReader(DataTable dataTable);
    public DataTableReader(DataTable[] dataTables);
    private bool get_ReaderIsInvalid();
    private void set_ReaderIsInvalid(bool value);
    private bool get_IsSchemaChanged();
    private void set_IsSchemaChanged(bool value);
    internal DataTable get_CurrentDataTable();
    private void Init();
    public virtual void Close();
    public virtual DataTable GetSchemaTable();
    public virtual bool NextResult();
    public virtual bool Read();
    public virtual int get_Depth();
    public virtual bool get_IsClosed();
    public virtual int get_RecordsAffected();
    public virtual bool get_HasRows();
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    public virtual int get_FieldCount();
    public virtual Type GetProviderSpecificFieldType(int ordinal);
    public virtual object GetProviderSpecificValue(int ordinal);
    public virtual int GetProviderSpecificValues(Object[] values);
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long dataIndex, Char[] buffer, int bufferIndex, int length);
    public virtual string GetDataTypeName(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual Type GetFieldType(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual string GetString(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int ordinal);
    public virtual IEnumerator GetEnumerator();
    internal static DataTable GetSchemaTableFromDataTable(DataTable table);
    private void ValidateOpen(string caller);
    private void ValidateReader();
    private void ValidateState(string caller);
    private void ValidateRow(int rowPosition);
    internal void SchemaChanged();
    internal void DataTableCleared();
    internal void DataChanged(DataRowChangeEventArgs args);
}
internal class System.Data.DataTableReaderListener : object {
    private DataTable _currentDataTable;
    private bool _isSubscribed;
    private WeakReference _readerWeak;
    internal DataTableReaderListener(DataTableReader reader);
    internal void CleanUp();
    internal void UpdataTable(DataTable datatable);
    private void SubscribeEvents();
    private void UnSubscribeEvents();
    private void DataTableCleared(object sender, DataTableClearEventArgs e);
    private void SchemaChanged(object sender, CollectionChangeEventArgs e);
    private void DataChanged(object sender, DataRowChangeEventArgs args);
}
internal class System.Data.DataTableTypeConverter : ReferenceConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
}
internal class System.Data.DataTextReader : XmlReader {
    private XmlReader _xmlreader;
    public XmlReaderSettings Settings { get; }
    public XmlNodeType NodeType { get; }
    public string Name { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Prefix { get; }
    public bool HasValue { get; }
    public string Value { get; }
    public int Depth { get; }
    public string BaseURI { get; }
    public bool IsEmptyElement { get; }
    public bool IsDefault { get; }
    public char QuoteChar { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    public int AttributeCount { get; }
    public bool EOF { get; }
    public ReadState ReadState { get; }
    public XmlNameTable NameTable { get; }
    public bool CanResolveEntity { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    private DataTextReader(XmlReader input);
    internal static XmlReader CreateReader(XmlReader xr);
    public virtual XmlReaderSettings get_Settings();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Name();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Prefix();
    public virtual bool get_HasValue();
    public virtual string get_Value();
    public virtual int get_Depth();
    public virtual string get_BaseURI();
    public virtual bool get_IsEmptyElement();
    public virtual bool get_IsDefault();
    public virtual char get_QuoteChar();
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual int get_AttributeCount();
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual string GetAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToElement();
    public virtual bool ReadAttributeValue();
    public virtual bool Read();
    public virtual bool get_EOF();
    public virtual void Close();
    public virtual ReadState get_ReadState();
    public virtual void Skip();
    public virtual XmlNameTable get_NameTable();
    public virtual string LookupNamespace(string prefix);
    public virtual bool get_CanResolveEntity();
    public virtual void ResolveEntity();
    public virtual bool get_CanReadBinaryContent();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual bool get_CanReadValueChunk();
    public virtual string ReadString();
}
internal class System.Data.DataTextWriter : XmlWriter {
    private XmlWriter _xmltextWriter;
    internal Stream BaseStream { get; }
    public WriteState WriteState { get; }
    public XmlSpace XmlSpace { get; }
    public string XmlLang { get; }
    private DataTextWriter(XmlWriter w);
    internal static XmlWriter CreateWriter(XmlWriter xw);
    internal Stream get_BaseStream();
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteEndDocument();
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteEndElement();
    public virtual void WriteFullEndElement();
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteEndAttribute();
    public virtual void WriteCData(string text);
    public virtual void WriteComment(string text);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteEntityRef(string name);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteWhitespace(string ws);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void WriteBinHex(Byte[] buffer, int index, int count);
    public virtual WriteState get_WriteState();
    public virtual void Close();
    public virtual void Flush();
    public virtual void WriteName(string name);
    public virtual void WriteQualifiedName(string localName, string ns);
    public virtual string LookupPrefix(string ns);
    public virtual XmlSpace get_XmlSpace();
    public virtual string get_XmlLang();
    public virtual void WriteNmToken(string name);
}
[DefaultPropertyAttribute("Table")]
[DefaultMemberAttribute("Item")]
[DefaultEventAttribute("PositionChanged")]
public class System.Data.DataView : MarshalByValueComponent {
    private DataViewManager _dataViewManager;
    private DataTable _table;
    private bool _locked;
    private Index _index;
    private Dictionary`2<string, Index> _findIndexes;
    private string _sort;
    private Comparison`1<DataRow> _comparison;
    private IFilter _rowFilter;
    private DataViewRowState _recordStates;
    private bool _shouldOpen;
    private bool _open;
    private bool _allowNew;
    private bool _allowEdit;
    private bool _allowDelete;
    private bool _applyDefaultSort;
    internal DataRow _addNewRow;
    private ListChangedEventArgs _addNewMoved;
    private ListChangedEventHandler _onListChanged;
    internal static ListChangedEventArgs s_resetEventArgs;
    private DataTable _delayedTable;
    private string _delayedRowFilter;
    private string _delayedSort;
    private DataViewRowState _delayedRecordStates;
    private bool _fInitInProgress;
    private bool _fEndInitInProgress;
    private Dictionary`2<DataRow, DataRowView> _rowViewCache;
    private Dictionary`2<DataRow, DataRowView> _rowViewBuffer;
    private DataViewListener _dvListener;
    private static int s_objectTypeCount;
    private int _objectID;
    [CompilerGeneratedAttribute]
private EventHandler Initialized;
    [DefaultValueAttribute("True")]
public bool AllowDelete { get; public set; }
    [DefaultValueAttribute("False")]
[RefreshPropertiesAttribute("1")]
public bool ApplyDefaultSort { get; public set; }
    [DefaultValueAttribute("True")]
public bool AllowEdit { get; public set; }
    [DefaultValueAttribute("True")]
public bool AllowNew { get; public set; }
    [BrowsableAttribute("False")]
public int Count { get; }
    private int CountFromIndex { get; }
    [BrowsableAttribute("False")]
public DataViewManager DataViewManager { get; }
    [BrowsableAttribute("False")]
public bool IsInitialized { get; }
    [BrowsableAttribute("False")]
protected bool IsOpen { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    [DefaultValueAttribute("")]
public string RowFilter { get; public set; }
    internal Predicate`1<DataRow> RowPredicate { get; internal set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataViewRowState RowStateFilter { get; public set; }
    [DefaultValueAttribute("")]
public string Sort { get; public set; }
    internal Comparison`1<DataRow> SortComparison { get; internal set; }
    private object System.Collections.ICollection.SyncRoot { get; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.Data.DataTableTypeConverter")]
[RefreshPropertiesAttribute("1")]
public DataTable Table { get; public set; }
    private object System.Collections.IList.Item { get; private set; }
    public DataRowView Item { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private string System.ComponentModel.IBindingListView.Filter { get; private set; }
    private ListSortDescriptionCollection System.ComponentModel.IBindingListView.SortDescriptions { get; }
    private bool System.ComponentModel.IBindingListView.SupportsAdvancedSorting { get; }
    private bool System.ComponentModel.IBindingListView.SupportsFiltering { get; }
    internal int ObjectID { get; }
    internal DataView(DataTable table, bool locked);
    public DataView(DataTable table);
    public DataView(DataTable table, string RowFilter, string Sort, DataViewRowState RowState);
    internal DataView(DataTable table, Predicate`1<DataRow> predicate, Comparison`1<DataRow> comparison, DataViewRowState RowState);
    private static DataView();
    public bool get_AllowDelete();
    public void set_AllowDelete(bool value);
    public bool get_ApplyDefaultSort();
    public void set_ApplyDefaultSort(bool value);
    public bool get_AllowEdit();
    public void set_AllowEdit(bool value);
    public bool get_AllowNew();
    public void set_AllowNew(bool value);
    public sealed virtual int get_Count();
    private int get_CountFromIndex();
    public DataViewManager get_DataViewManager();
    public sealed virtual bool get_IsInitialized();
    protected bool get_IsOpen();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    public virtual string get_RowFilter();
    public virtual void set_RowFilter(string value);
    internal Predicate`1<DataRow> get_RowPredicate();
    internal void set_RowPredicate(Predicate`1<DataRow> value);
    public DataViewRowState get_RowStateFilter();
    public void set_RowStateFilter(DataViewRowState value);
    public string get_Sort();
    public void set_Sort(string value);
    internal Comparison`1<DataRow> get_SortComparison();
    internal void set_SortComparison(Comparison`1<DataRow> value);
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public DataTable get_Table();
    public void set_Table(DataTable value);
    private sealed virtual override object System.Collections.IList.get_Item(int recordIndex);
    private sealed virtual override void System.Collections.IList.set_Item(int recordIndex, object value);
    public DataRowView get_Item(int recordIndex);
    public virtual DataRowView AddNew();
    public sealed virtual void BeginInit();
    public sealed virtual void EndInit();
    private void CheckOpen();
    private void CheckSort(string sort);
    protected void Close();
    public sealed virtual void CopyTo(Array array, int index);
    private void CopyTo(DataRowView[] array, int index);
    public void Delete(int index);
    internal void Delete(DataRow row);
    protected virtual void Dispose(bool disposing);
    public int Find(object key);
    internal virtual int FindByKey(object key);
    public int Find(Object[] key);
    internal virtual int FindByKey(Object[] key);
    public DataRowView[] FindRows(object key);
    public DataRowView[] FindRows(Object[] key);
    internal virtual DataRowView[] FindRowsByKey(Object[] key);
    internal Range FindRecords(ComparisonBySelector`2<TKey, TRow> comparison, TKey key);
    internal DataRowView[] GetDataRowViewFromRange(Range range);
    internal void FinishAddNew(bool success);
    public sealed virtual IEnumerator GetEnumerator();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    internal int IndexOf(DataRowView rowview);
    private int IndexOfDataRowView(DataRowView rowview);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    internal Index GetFindIndex(string column, bool keepIndex);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    internal PropertyDescriptor GetSortProperty();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_Initialized(EventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_Initialized(EventHandler value);
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override void System.ComponentModel.IBindingListView.ApplySort(ListSortDescriptionCollection sorts);
    private string CreateSortString(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override void System.ComponentModel.IBindingListView.RemoveFilter();
    private sealed virtual override string System.ComponentModel.IBindingListView.get_Filter();
    private sealed virtual override void System.ComponentModel.IBindingListView.set_Filter(string value);
    private sealed virtual override ListSortDescriptionCollection System.ComponentModel.IBindingListView.get_SortDescriptions();
    internal ListSortDescriptionCollection GetSortDescriptions();
    private sealed virtual override bool System.ComponentModel.IBindingListView.get_SupportsAdvancedSorting();
    private sealed virtual override bool System.ComponentModel.IBindingListView.get_SupportsFiltering();
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    internal virtual IFilter GetFilter();
    private int GetRecord(int recordIndex);
    internal DataRow GetRow(int index);
    private DataRowView GetRowView(int record);
    private DataRowView GetRowView(DataRow dr);
    protected virtual void IndexListChanged(object sender, ListChangedEventArgs e);
    internal void IndexListChangedInternal(ListChangedEventArgs e);
    internal void MaintainDataView(ListChangedType changedType, DataRow row, bool trackAddRemove);
    protected virtual void OnListChanged(ListChangedEventArgs e);
    private void OnInitialized();
    protected void Open();
    protected void Reset();
    internal void ResetRowViewCache();
    internal void SetDataViewManager(DataViewManager dataViewManager);
    internal virtual void SetIndex(string newSort, DataViewRowState newRowStates, IFilter newRowFilter);
    internal void SetIndex2(string newSort, DataViewRowState newRowStates, IFilter newRowFilter, bool fireEvent);
    protected void UpdateIndex();
    protected virtual void UpdateIndex(bool force);
    internal void UpdateIndex(bool force, bool fireEvent);
    internal void ChildRelationCollectionChanged(object sender, CollectionChangeEventArgs e);
    internal void ParentRelationCollectionChanged(object sender, CollectionChangeEventArgs e);
    protected virtual void ColumnCollectionChanged(object sender, CollectionChangeEventArgs e);
    internal void ColumnCollectionChangedInternal(object sender, CollectionChangeEventArgs e);
    public DataTable ToTable();
    public DataTable ToTable(string tableName);
    public DataTable ToTable(bool distinct, String[] columnNames);
    public DataTable ToTable(string tableName, bool distinct, String[] columnNames);
    private bool RowExist(List`1<Object[]> arraylist, Object[] objectArray);
    public virtual bool Equals(DataView view);
    internal int get_ObjectID();
}
internal class System.Data.DataViewListener : object {
    private WeakReference _dvWeak;
    private DataTable _table;
    private Index _index;
    internal int _objectID;
    internal DataViewListener(DataView dv);
    private void ChildRelationCollectionChanged(object sender, CollectionChangeEventArgs e);
    private void ParentRelationCollectionChanged(object sender, CollectionChangeEventArgs e);
    private void ColumnCollectionChanged(object sender, CollectionChangeEventArgs e);
    internal void MaintainDataView(ListChangedType changedType, DataRow row, bool trackAddRemove);
    internal void IndexListChanged(ListChangedEventArgs e);
    internal void RegisterMetaDataEvents(DataTable table);
    internal void UnregisterMetaDataEvents();
    private void UnregisterMetaDataEvents(bool updateListeners);
    internal void RegisterListChangedEvent(Index index);
    internal void UnregisterListChangedEvent();
    private void CleanUp(bool updateListeners);
    private void RegisterListener(DataTable table);
}
public class System.Data.DataViewManager : MarshalByValueComponent {
    private DataViewSettingCollection _dataViewSettingsCollection;
    private DataSet _dataSet;
    private DataViewManagerListItemTypeDescriptor _item;
    private bool _locked;
    internal int _nViews;
    private static NotSupportedException s_notSupported;
    [CompilerGeneratedAttribute]
private ListChangedEventHandler ListChanged;
    [DefaultValueAttribute("")]
public DataSet DataSet { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public DataViewSettingCollection DataViewSettings { get; }
    public string DataViewSettingCollectionString { get; public set; }
    private int System.Collections.ICollection.Count { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    public DataViewManager(DataSet dataSet);
    internal DataViewManager(DataSet dataSet, bool locked);
    private static DataViewManager();
    public DataSet get_DataSet();
    public void set_DataSet(DataSet value);
    public DataViewSettingCollection get_DataViewSettings();
    public string get_DataViewSettingCollectionString();
    public void set_DataViewSettingCollectionString(string value);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    [CompilerGeneratedAttribute]
public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    public DataView CreateDataView(DataTable table);
    protected virtual void OnListChanged(ListChangedEventArgs e);
    protected virtual void TableCollectionChanged(object sender, CollectionChangeEventArgs e);
    protected virtual void RelationCollectionChanged(object sender, CollectionChangeEventArgs e);
}
internal class System.Data.DataViewManagerListItemTypeDescriptor : object {
    private DataViewManager _dataViewManager;
    private PropertyDescriptorCollection _propsCollection;
    internal DataViewManagerListItemTypeDescriptor(DataViewManager dataViewManager);
    internal void Reset();
    internal DataView GetDataView(DataTable table);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
[FlagsAttribute]
public enum System.Data.DataViewRowState : Enum {
    public int value__;
    public static DataViewRowState None;
    public static DataViewRowState Unchanged;
    public static DataViewRowState Added;
    public static DataViewRowState Deleted;
    public static DataViewRowState ModifiedCurrent;
    public static DataViewRowState ModifiedOriginal;
    public static DataViewRowState OriginalRows;
    public static DataViewRowState CurrentRows;
}
[TypeConverterAttribute("System.ComponentModel.ExpandableObjectConverter")]
public class System.Data.DataViewSetting : object {
    private DataViewManager _dataViewManager;
    private DataTable _table;
    private string _sort;
    private string _rowFilter;
    private DataViewRowState _rowStateFilter;
    private bool _applyDefaultSort;
    public bool ApplyDefaultSort { get; public set; }
    [BrowsableAttribute("False")]
public DataViewManager DataViewManager { get; }
    [BrowsableAttribute("False")]
public DataTable Table { get; }
    public string RowFilter { get; public set; }
    public DataViewRowState RowStateFilter { get; public set; }
    public string Sort { get; public set; }
    public bool get_ApplyDefaultSort();
    public void set_ApplyDefaultSort(bool value);
    public DataViewManager get_DataViewManager();
    internal void SetDataViewManager(DataViewManager dataViewManager);
    public DataTable get_Table();
    internal void SetDataTable(DataTable table);
    public string get_RowFilter();
    public void set_RowFilter(string value);
    public DataViewRowState get_RowStateFilter();
    public void set_RowStateFilter(DataViewRowState value);
    public string get_Sort();
    public void set_Sort(string value);
}
[DefaultMemberAttribute("Item")]
public class System.Data.DataViewSettingCollection : object {
    private DataViewManager _dataViewManager;
    private Hashtable _list;
    public DataViewSetting Item { get; public set; }
    public DataViewSetting Item { get; }
    public DataViewSetting Item { get; public set; }
    [BrowsableAttribute("False")]
public int Count { get; }
    [BrowsableAttribute("False")]
public bool IsReadOnly { get; }
    [BrowsableAttribute("False")]
public bool IsSynchronized { get; }
    [BrowsableAttribute("False")]
public object SyncRoot { get; }
    internal DataViewSettingCollection(DataViewManager dataViewManager);
    public virtual DataViewSetting get_Item(DataTable table);
    public virtual void set_Item(DataTable table, DataViewSetting value);
    private DataTable GetTable(string tableName);
    private DataTable GetTable(int index);
    public virtual DataViewSetting get_Item(string tableName);
    public virtual DataViewSetting get_Item(int index);
    public virtual void set_Item(int index, DataViewSetting value);
    public sealed virtual void CopyTo(Array ar, int index);
    public void CopyTo(DataViewSetting[] ar, int index);
    public virtual int get_Count();
    public sealed virtual IEnumerator GetEnumerator();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    internal void Remove(DataTable table);
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.DBConcurrencyException : SystemException {
    private DataRow[] _dataRows;
    public DataRow Row { get; public set; }
    public int RowCount { get; }
    public DBConcurrencyException(string message);
    public DBConcurrencyException(string message, Exception inner);
    public DBConcurrencyException(string message, Exception inner, DataRow[] dataRows);
    private DBConcurrencyException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public DataRow get_Row();
    public void set_Row(DataRow value);
    public int get_RowCount();
    public void CopyToRows(DataRow[] array);
    public void CopyToRows(DataRow[] array, int arrayIndex);
}
public enum System.Data.DbType : Enum {
    public int value__;
    public static DbType AnsiString;
    public static DbType Binary;
    public static DbType Byte;
    public static DbType Boolean;
    public static DbType Currency;
    public static DbType Date;
    public static DbType DateTime;
    public static DbType Decimal;
    public static DbType Double;
    public static DbType Guid;
    public static DbType Int16;
    public static DbType Int32;
    public static DbType Int64;
    public static DbType Object;
    public static DbType SByte;
    public static DbType Single;
    public static DbType String;
    public static DbType Time;
    public static DbType UInt16;
    public static DbType UInt32;
    public static DbType UInt64;
    public static DbType VarNumeric;
    public static DbType AnsiStringFixedLength;
    public static DbType StringFixedLength;
    public static DbType Xml;
    public static DbType DateTime2;
    public static DbType DateTimeOffset;
}
internal class System.Data.DefaultValueTypeConverter : StringConverter {
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.DeletedRowInaccessibleException : DataException {
    protected DeletedRowInaccessibleException(SerializationInfo info, StreamingContext context);
    public DeletedRowInaccessibleException(string s);
    public DeletedRowInaccessibleException(string message, Exception innerException);
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.DuplicateNameException : DataException {
    protected DuplicateNameException(SerializationInfo info, StreamingContext context);
    public DuplicateNameException(string s);
    public DuplicateNameException(string message, Exception innerException);
}
public abstract class System.Data.EnumerableRowCollection : object {
    internal Type ElementType { get; }
    internal DataTable Table { get; }
    internal abstract virtual Type get_ElementType();
    internal abstract virtual DataTable get_Table();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Data.EnumerableRowCollection`1 : EnumerableRowCollection {
    private DataTable _table;
    private IEnumerable`1<TRow> _enumerableRows;
    private List`1<Func`2<TRow, bool>> _listOfPredicates;
    private SortExpressionBuilder`1<TRow> _sortExpression;
    private Func`2<TRow, TRow> _selector;
    internal Type ElementType { get; }
    internal IEnumerable`1<TRow> EnumerableRows { get; }
    internal DataTable Table { get; }
    internal EnumerableRowCollection`1(IEnumerable`1<TRow> enumerableRows, bool isDataViewable, DataTable table);
    internal EnumerableRowCollection`1(DataTable table);
    internal EnumerableRowCollection`1(EnumerableRowCollection`1<TRow> source, IEnumerable`1<TRow> enumerableRows, Func`2<TRow, TRow> selector);
    internal virtual Type get_ElementType();
    internal IEnumerable`1<TRow> get_EnumerableRows();
    internal virtual DataTable get_Table();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IEnumerator`1<TRow> GetEnumerator();
    internal LinqDataView GetLinqDataView();
    internal void AddPredicate(Func`2<TRow, bool> pred);
    internal void AddSortExpression(Func`2<TRow, TKey> keySelector, bool isDescending, bool isOrderBy);
    internal void AddSortExpression(Func`2<TRow, TKey> keySelector, IComparer`1<TKey> comparer, bool isDescending, bool isOrderBy);
}
[ExtensionAttribute]
public static class System.Data.EnumerableRowCollectionExtensions : object {
    [ExtensionAttribute]
public static EnumerableRowCollection`1<TRow> Where(EnumerableRowCollection`1<TRow> source, Func`2<TRow, bool> predicate);
    [ExtensionAttribute]
public static OrderedEnumerableRowCollection`1<TRow> OrderBy(EnumerableRowCollection`1<TRow> source, Func`2<TRow, TKey> keySelector);
    [ExtensionAttribute]
public static OrderedEnumerableRowCollection`1<TRow> OrderBy(EnumerableRowCollection`1<TRow> source, Func`2<TRow, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static OrderedEnumerableRowCollection`1<TRow> OrderByDescending(EnumerableRowCollection`1<TRow> source, Func`2<TRow, TKey> keySelector);
    [ExtensionAttribute]
public static OrderedEnumerableRowCollection`1<TRow> OrderByDescending(EnumerableRowCollection`1<TRow> source, Func`2<TRow, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static OrderedEnumerableRowCollection`1<TRow> ThenBy(OrderedEnumerableRowCollection`1<TRow> source, Func`2<TRow, TKey> keySelector);
    [ExtensionAttribute]
public static OrderedEnumerableRowCollection`1<TRow> ThenBy(OrderedEnumerableRowCollection`1<TRow> source, Func`2<TRow, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static OrderedEnumerableRowCollection`1<TRow> ThenByDescending(OrderedEnumerableRowCollection`1<TRow> source, Func`2<TRow, TKey> keySelector);
    [ExtensionAttribute]
public static OrderedEnumerableRowCollection`1<TRow> ThenByDescending(OrderedEnumerableRowCollection`1<TRow> source, Func`2<TRow, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static EnumerableRowCollection`1<S> Select(EnumerableRowCollection`1<TRow> source, Func`2<TRow, S> selector);
    [ExtensionAttribute]
public static EnumerableRowCollection`1<TResult> Cast(EnumerableRowCollection source);
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.EvaluateException : InvalidExpressionException {
    protected EvaluateException(SerializationInfo info, StreamingContext context);
    public EvaluateException(string s);
    public EvaluateException(string message, Exception innerException);
}
internal static class System.Data.ExceptionBuilder : object {
    private static void TraceException(string trace, Exception e);
    internal static Exception TraceExceptionAsReturnValue(Exception e);
    internal static Exception TraceExceptionForCapture(Exception e);
    internal static Exception TraceExceptionWithoutRethrow(Exception e);
    internal static Exception _Argument(string error);
    internal static Exception _Argument(string paramName, string error);
    internal static Exception _Argument(string error, Exception innerException);
    private static Exception _ArgumentNull(string paramName, string msg);
    internal static Exception _ArgumentOutOfRange(string paramName, string msg);
    private static Exception _IndexOutOfRange(string error);
    private static Exception _InvalidOperation(string error);
    private static Exception _InvalidEnumArgumentException(string error);
    private static Exception _InvalidEnumArgumentException(T value);
    private static void ThrowDataException(string error, Exception innerException);
    private static Exception _Data(string error);
    private static Exception _Constraint(string error);
    private static Exception _InvalidConstraint(string error);
    private static Exception _DeletedRowInaccessible(string error);
    private static Exception _DuplicateName(string error);
    private static Exception _InRowChangingEvent(string error);
    private static Exception _MissingPrimaryKey(string error);
    private static Exception _NoNullAllowed(string error);
    private static Exception _ReadOnly(string error);
    private static Exception _RowNotInTable(string error);
    private static Exception _VersionNotFound(string error);
    public static Exception ArgumentNull(string paramName);
    public static Exception ArgumentOutOfRange(string paramName);
    public static Exception BadObjectPropertyAccess(string error);
    public static Exception ArgumentContainsNull(string paramName);
    public static Exception TypeNotAllowed(Type type);
    public static Exception CannotModifyCollection();
    public static Exception CaseInsensitiveNameConflict(string name);
    public static Exception NamespaceNameConflict(string name);
    public static Exception InvalidOffsetLength();
    public static Exception ColumnNotInTheTable(string column, string table);
    public static Exception ColumnNotInAnyTable();
    public static Exception ColumnOutOfRange(int index);
    public static Exception ColumnOutOfRange(string column);
    public static Exception CannotAddColumn1(string column);
    public static Exception CannotAddColumn2(string column);
    public static Exception CannotAddColumn3();
    public static Exception CannotAddColumn4(string column);
    public static Exception CannotAddDuplicate(string column);
    public static Exception CannotAddDuplicate2(string table);
    public static Exception CannotAddDuplicate3(string table);
    public static Exception CannotRemoveColumn();
    public static Exception CannotRemovePrimaryKey();
    public static Exception CannotRemoveChildKey(string relation);
    public static Exception CannotRemoveConstraint(string constraint, string table);
    public static Exception CannotRemoveExpression(string column, string expression);
    public static Exception ColumnNotInTheUnderlyingTable(string column, string table);
    public static Exception InvalidOrdinal(string name, int ordinal);
    public static Exception AddPrimaryKeyConstraint();
    public static Exception NoConstraintName();
    public static Exception ConstraintViolation(string constraint);
    public static Exception ConstraintNotInTheTable(string constraint);
    public static string KeysToString(Object[] keys);
    public static string UniqueConstraintViolationText(DataColumn[] columns, Object[] values);
    public static Exception ConstraintViolation(DataColumn[] columns, Object[] values);
    public static Exception ConstraintOutOfRange(int index);
    public static Exception DuplicateConstraint(string constraint);
    public static Exception DuplicateConstraintName(string constraint);
    public static Exception NeededForForeignKeyConstraint(UniqueConstraint key, ForeignKeyConstraint fk);
    public static Exception UniqueConstraintViolation();
    public static Exception ConstraintForeignTable();
    public static Exception ConstraintParentValues();
    public static Exception ConstraintAddFailed(DataTable table);
    public static Exception ConstraintRemoveFailed();
    public static Exception FailedCascadeDelete(string constraint);
    public static Exception FailedCascadeUpdate(string constraint);
    public static Exception FailedClearParentTable(string table, string constraint, string childTable);
    public static Exception ForeignKeyViolation(string constraint, Object[] keys);
    public static Exception RemoveParentRow(ForeignKeyConstraint constraint);
    public static string MaxLengthViolationText(string columnName);
    public static string NotAllowDBNullViolationText(string columnName);
    public static Exception CantAddConstraintToMultipleNestedTable(string tableName);
    public static Exception AutoIncrementAndExpression();
    public static Exception AutoIncrementAndDefaultValue();
    public static Exception AutoIncrementSeed();
    public static Exception CantChangeDataType();
    public static Exception NullDataType();
    public static Exception ColumnNameRequired();
    public static Exception DefaultValueAndAutoIncrement();
    public static Exception DefaultValueDataType(string column, Type defaultType, Type columnType, Exception inner);
    public static Exception DefaultValueColumnDataType(string column, Type defaultType, Type columnType, Exception inner);
    public static Exception ExpressionAndUnique();
    public static Exception ExpressionAndReadOnly();
    public static Exception ExpressionAndConstraint(DataColumn column, Constraint constraint);
    public static Exception ExpressionInConstraint(DataColumn column);
    public static Exception ExpressionCircular();
    public static Exception NonUniqueValues(string column);
    public static Exception NullKeyValues(string column);
    public static Exception NullValues(string column);
    public static Exception ReadOnlyAndExpression();
    public static Exception ReadOnly(string column);
    public static Exception UniqueAndExpression();
    public static Exception SetFailed(object value, DataColumn column, Type type, Exception innerException);
    public static Exception CannotSetToNull(DataColumn column);
    public static Exception LongerThanMaxLength(DataColumn column);
    public static Exception CannotSetMaxLength(DataColumn column, int value);
    public static Exception CannotSetMaxLength2(DataColumn column);
    public static Exception CannotSetSimpleContentType(string columnName, Type type);
    public static Exception CannotSetSimpleContent(string columnName, Type type);
    public static Exception CannotChangeNamespace(string columnName);
    public static Exception HasToBeStringType(DataColumn column);
    public static Exception AutoIncrementCannotSetIfHasData(string typeName);
    public static Exception INullableUDTwithoutStaticNull(string typeName);
    public static Exception IComparableNotImplemented(string typeName);
    public static Exception UDTImplementsIChangeTrackingButnotIRevertible(string typeName);
    public static Exception SetAddedAndModifiedCalledOnnonUnchanged();
    public static Exception InvalidDataColumnMapping(Type type);
    public static Exception CannotSetDateTimeModeForNonDateTimeColumns();
    public static Exception InvalidDateTimeMode(DataSetDateTime mode);
    public static Exception CantChangeDateTimeMode(DataSetDateTime oldValue, DataSetDateTime newValue);
    public static Exception ColumnTypeNotSupported();
    public static Exception SetFailed(string name);
    public static Exception SetDataSetFailed();
    public static Exception SetRowStateFilter();
    public static Exception CanNotSetDataSet();
    public static Exception CanNotUseDataViewManager();
    public static Exception CanNotSetTable();
    public static Exception CanNotUse();
    public static Exception CanNotBindTable();
    public static Exception SetTable();
    public static Exception SetIListObject();
    public static Exception AddNewNotAllowNull();
    public static Exception NotOpen();
    public static Exception CreateChildView();
    public static Exception CanNotDelete();
    public static Exception CanNotEdit();
    public static Exception GetElementIndex(int index);
    public static Exception AddExternalObject();
    public static Exception CanNotClear();
    public static Exception InsertExternalObject();
    public static Exception RemoveExternalObject();
    public static Exception PropertyNotFound(string property, string table);
    public static Exception ColumnToSortIsOutOfRange(string column);
    public static Exception KeyTableMismatch();
    public static Exception KeyNoColumns();
    public static Exception KeyTooManyColumns(int cols);
    public static Exception KeyDuplicateColumns(string columnName);
    public static Exception RelationDataSetMismatch();
    public static Exception NoRelationName();
    public static Exception ColumnsTypeMismatch();
    public static Exception KeyLengthMismatch();
    public static Exception KeyLengthZero();
    public static Exception ForeignRelation();
    public static Exception KeyColumnsIdentical();
    public static Exception RelationForeignTable(string t1, string t2);
    public static Exception GetParentRowTableMismatch(string t1, string t2);
    public static Exception SetParentRowTableMismatch(string t1, string t2);
    public static Exception RelationForeignRow();
    public static Exception RelationNestedReadOnly();
    public static Exception TableCantBeNestedInTwoTables(string tableName);
    public static Exception LoopInNestedRelations(string tableName);
    public static Exception RelationDoesNotExist();
    public static Exception ParentRowNotInTheDataSet();
    public static Exception ParentOrChildColumnsDoNotHaveDataSet();
    public static Exception InValidNestedRelation(string childTableName);
    public static Exception InvalidParentNamespaceinNestedRelation(string childTableName);
    public static Exception RowNotInTheDataSet();
    public static Exception RowNotInTheTable();
    public static Exception EditInRowChanging();
    public static Exception EndEditInRowChanging();
    public static Exception BeginEditInRowChanging();
    public static Exception CancelEditInRowChanging();
    public static Exception DeleteInRowDeleting();
    public static Exception ValueArrayLength();
    public static Exception NoCurrentData();
    public static Exception NoOriginalData();
    public static Exception NoProposedData();
    public static Exception RowRemovedFromTheTable();
    public static Exception DeletedRowInaccessible();
    public static Exception RowAlreadyDeleted();
    public static Exception RowEmpty();
    public static Exception InvalidRowVersion();
    public static Exception RowOutOfRange();
    public static Exception RowOutOfRange(int index);
    public static Exception RowInsertOutOfRange(int index);
    public static Exception RowInsertTwice(int index, string tableName);
    public static Exception RowInsertMissing(string tableName);
    public static Exception RowAlreadyRemoved();
    public static Exception MultipleParents();
    public static Exception InvalidRowState(DataRowState state);
    public static Exception InvalidRowBitPattern();
    internal static Exception SetDataSetNameToEmpty();
    internal static Exception SetDataSetNameConflicting(string name);
    public static Exception DataSetUnsupportedSchema(string ns);
    public static Exception MergeMissingDefinition(string obj);
    public static Exception TablesInDifferentSets();
    public static Exception RelationAlreadyExists();
    public static Exception RowAlreadyInOtherCollection();
    public static Exception RowAlreadyInTheCollection();
    public static Exception TableMissingPrimaryKey();
    public static Exception RecordStateRange();
    public static Exception IndexKeyLength(int length, int keyLength);
    public static Exception RemovePrimaryKey(DataTable table);
    public static Exception RelationAlreadyInOtherDataSet();
    public static Exception RelationAlreadyInTheDataSet();
    public static Exception RelationNotInTheDataSet(string relation);
    public static Exception RelationOutOfRange(object index);
    public static Exception DuplicateRelation(string relation);
    public static Exception RelationTableNull();
    public static Exception RelationDataSetNull();
    public static Exception RelationTableWasRemoved();
    public static Exception ParentTableMismatch();
    public static Exception ChildTableMismatch();
    public static Exception EnforceConstraint();
    public static Exception CaseLocaleMismatch();
    public static Exception CannotChangeCaseLocale();
    public static Exception CannotChangeCaseLocale(Exception innerException);
    public static Exception CannotChangeSchemaSerializationMode();
    public static Exception InvalidSchemaSerializationMode(Type enumType, string mode);
    public static Exception InvalidRemotingFormat(SerializationFormat mode);
    public static Exception TableForeignPrimaryKey();
    public static Exception TableCannotAddToSimpleContent();
    public static Exception NoTableName();
    public static Exception MultipleTextOnlyColumns();
    public static Exception InvalidSortString(string sort);
    public static Exception DuplicateTableName(string table);
    public static Exception DuplicateTableName2(string table, string ns);
    public static Exception SelfnestedDatasetConflictingName(string table);
    public static Exception DatasetConflictingName(string table);
    public static Exception TableAlreadyInOtherDataSet();
    public static Exception TableAlreadyInTheDataSet();
    public static Exception TableOutOfRange(int index);
    public static Exception TableNotInTheDataSet(string table);
    public static Exception TableInRelation();
    public static Exception TableInConstraint(DataTable table, Constraint constraint);
    public static Exception CanNotSerializeDataTableHierarchy();
    public static Exception CanNotRemoteDataTable();
    public static Exception CanNotSetRemotingFormat();
    public static Exception CanNotSerializeDataTableWithEmptyName();
    public static Exception TableNotFound(string tableName);
    public static Exception AggregateException(AggregateType aggregateType, Type type);
    public static Exception InvalidStorageType(TypeCode typecode);
    public static Exception RangeArgument(int min, int max);
    public static Exception NullRange();
    public static Exception NegativeMinimumCapacity();
    public static Exception ProblematicChars(char charValue);
    public static Exception StorageSetFailed();
    public static Exception SimpleTypeNotSupported();
    public static Exception MissingAttribute(string attribute);
    public static Exception MissingAttribute(string element, string attribute);
    public static Exception InvalidAttributeValue(string name, string value);
    public static Exception AttributeValues(string name, string value1, string value2);
    public static Exception ElementTypeNotFound(string name);
    public static Exception RelationParentNameMissing(string rel);
    public static Exception RelationChildNameMissing(string rel);
    public static Exception RelationTableKeyMissing(string rel);
    public static Exception RelationChildKeyMissing(string rel);
    public static Exception UndefinedDatatype(string name);
    public static Exception DatatypeNotDefined();
    public static Exception MismatchKeyLength();
    public static Exception InvalidField(string name);
    public static Exception InvalidSelector(string name);
    public static Exception CircularComplexType(string name);
    public static Exception CannotInstantiateAbstract(string name);
    public static Exception InvalidKey(string name);
    public static Exception DiffgramMissingTable(string name);
    public static Exception DiffgramMissingSQL();
    public static Exception DuplicateConstraintRead(string str);
    public static Exception ColumnTypeConflict(string name);
    public static Exception CannotConvert(string name, string type);
    public static Exception MissingRefer(string name);
    public static Exception InvalidPrefix(string name);
    public static Exception CanNotDeserializeObjectType();
    public static Exception IsDataSetAttributeMissingInSchema();
    public static Exception TooManyIsDataSetAttributesInSchema();
    public static Exception NestedCircular(string name);
    public static Exception MultipleParentRows(string tableQName);
    public static Exception PolymorphismNotSupported(string typeName);
    public static Exception DataTableInferenceNotSupported();
    internal static void ThrowMultipleTargetConverter(Exception innerException);
    public static Exception DuplicateDeclaration(string name);
    public static Exception FoundEntity();
    public static Exception MergeFailed(string name);
    public static Exception ConvertFailed(Type type1, Type type2);
    public static Exception InvalidDataTableReader(string tableName);
    public static Exception DataTableReaderSchemaIsInvalid(string tableName);
    public static Exception CannotCreateDataReaderOnEmptyDataSet();
    public static Exception DataTableReaderArgumentIsEmpty();
    public static Exception ArgumentContainsNullValue();
    public static Exception InvalidCurrentRowInDataTableReader();
    public static Exception EmptyDataTableReader(string tableName);
    internal static Exception InvalidDuplicateNamedSimpleTypeDelaration(string stName, string errorStr);
    internal static Exception InternalRBTreeError(RBTreeError internalError);
    public static Exception EnumeratorModified();
}
internal abstract class System.Data.ExpressionNode : object {
    private DataTable _table;
    internal IFormatProvider FormatProvider { get; }
    internal bool IsSqlColumn { get; }
    protected DataTable table { get; }
    protected ExpressionNode(DataTable table);
    internal IFormatProvider get_FormatProvider();
    internal virtual bool get_IsSqlColumn();
    protected DataTable get_table();
    protected void BindTable(DataTable table);
    internal abstract virtual void Bind(DataTable table, List`1<DataColumn> list);
    internal abstract virtual object Eval();
    internal abstract virtual object Eval(DataRow row, DataRowVersion version);
    internal abstract virtual object Eval(Int32[] recordNos);
    internal abstract virtual bool IsConstant();
    internal abstract virtual bool IsTableConstant();
    internal abstract virtual bool HasLocalAggregate();
    internal abstract virtual bool HasRemoteAggregate();
    internal abstract virtual ExpressionNode Optimize();
    internal virtual bool DependsOn(DataColumn column);
    internal static bool IsInteger(StorageType type);
    internal static bool IsIntegerSql(StorageType type);
    internal static bool IsSigned(StorageType type);
    internal static bool IsSignedSql(StorageType type);
    internal static bool IsUnsigned(StorageType type);
    internal static bool IsUnsignedSql(StorageType type);
    internal static bool IsNumeric(StorageType type);
    internal static bool IsNumericSql(StorageType type);
    internal static bool IsFloat(StorageType type);
    internal static bool IsFloatSql(StorageType type);
}
internal class System.Data.ExpressionParser : object {
    private static ReservedWords[] s_reservedwords;
    private char _escape;
    private char _decimalSeparator;
    private char _listSeparator;
    private char _exponentL;
    private char _exponentU;
    internal Char[] _text;
    internal int _pos;
    internal int _start;
    internal Tokens _token;
    internal int _op;
    internal OperatorInfo[] _ops;
    internal int _topOperator;
    internal int _topNode;
    private DataTable _table;
    internal ExpressionNode[] _nodeStack;
    internal int _prevOperand;
    internal ExpressionNode _expression;
    internal ExpressionParser(DataTable table);
    private static ExpressionParser();
    internal void LoadExpression(string data);
    internal void StartScan();
    internal ExpressionNode Parse();
    private ExpressionNode ParseAggregateArgument(FunctionId aggregate);
    private ExpressionNode NodePop();
    private ExpressionNode NodePeek();
    private void NodePush(ExpressionNode node);
    private void BuildExpression(int pri);
    internal void CheckToken(Tokens token);
    internal Tokens Scan();
    private void ScanNumeric();
    private void ScanName();
    private void ScanName(char chEnd, char esc, string charsToEscape);
    private void ScanDate();
    private void ScanBinaryConstant();
    private void ScanReserved();
    private void ScanString(char escape);
    internal void ScanToken(Tokens token);
    private void ScanWhite();
    private bool IsWhiteSpace(char ch);
    private bool IsAlphaNumeric(char ch);
    private bool IsDigit(char ch);
    private bool IsAlpha(char ch);
}
internal class System.Data.ExprException : object {
    private static OverflowException _Overflow(string error);
    private static InvalidExpressionException _Expr(string error);
    private static SyntaxErrorException _Syntax(string error);
    private static EvaluateException _Eval(string error);
    private static EvaluateException _Eval(string error, Exception innerException);
    public static Exception InvokeArgument();
    public static Exception NYI(string moreinfo);
    public static Exception MissingOperand(OperatorInfo before);
    public static Exception MissingOperator(string token);
    public static Exception TypeMismatch(string expr);
    public static Exception FunctionArgumentOutOfRange(string arg, string func);
    public static Exception ExpressionTooComplex();
    public static Exception UnboundName(string name);
    public static Exception InvalidString(string str);
    public static Exception UndefinedFunction(string name);
    public static Exception SyntaxError();
    public static Exception FunctionArgumentCount(string name);
    public static Exception MissingRightParen();
    public static Exception UnknownToken(string token, int position);
    public static Exception UnknownToken(Tokens tokExpected, Tokens tokCurr, int position);
    public static Exception DatatypeConvertion(Type type1, Type type2);
    public static Exception DatavalueConvertion(object value, Type type, Exception innerException);
    public static Exception InvalidName(string name);
    public static Exception InvalidDate(string date);
    public static Exception NonConstantArgument();
    public static Exception InvalidPattern(string pat);
    public static Exception InWithoutParentheses();
    public static Exception InWithoutList();
    public static Exception InvalidIsSyntax();
    public static Exception Overflow(Type type);
    public static Exception ArgumentType(string function, int arg, Type type);
    public static Exception ArgumentTypeInteger(string function, int arg);
    public static Exception TypeMismatchInBinop(int op, Type type1, Type type2);
    public static Exception AmbiguousBinop(int op, Type type1, Type type2);
    public static Exception UnsupportedOperator(int op);
    public static Exception InvalidNameBracketing(string name);
    public static Exception MissingOperandBefore(string op);
    public static Exception TooManyRightParentheses();
    public static Exception UnresolvedRelation(string name, string expr);
    internal static EvaluateException BindFailure(string relationName);
    public static Exception AggregateArgument();
    public static Exception AggregateUnbound(string expr);
    public static Exception EvalNoContext();
    public static Exception ExpressionUnbound(string expr);
    public static Exception ComputeNotAggregate(string expr);
    public static Exception FilterConvertion(string expr);
    public static Exception LookupArgument();
    public static Exception InvalidType(string typeName);
    public static Exception InvalidHoursArgument();
    public static Exception InvalidMinutesArgument();
    public static Exception InvalidTimeZoneRange();
    public static Exception MismatchKindandTimeSpan();
    public static Exception UnsupportedDataType(Type type);
}
public class System.Data.FillErrorEventArgs : EventArgs {
    private bool _continueFlag;
    private DataTable _dataTable;
    private Exception _errors;
    private Object[] _values;
    public bool Continue { get; public set; }
    public DataTable DataTable { get; }
    public Exception Errors { get; public set; }
    public Object[] Values { get; }
    public FillErrorEventArgs(DataTable dataTable, Object[] values);
    public bool get_Continue();
    public void set_Continue(bool value);
    public DataTable get_DataTable();
    public Exception get_Errors();
    public void set_Errors(Exception value);
    public Object[] get_Values();
}
public class System.Data.FillErrorEventHandler : MulticastDelegate {
    public FillErrorEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FillErrorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FillErrorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultPropertyAttribute("ConstraintName")]
public class System.Data.ForeignKeyConstraint : Constraint {
    internal Rule _deleteRule;
    internal Rule _updateRule;
    internal AcceptRejectRule _acceptRejectRule;
    private DataKey _childKey;
    private DataKey _parentKey;
    internal string _constraintName;
    internal String[] _parentColumnNames;
    internal String[] _childColumnNames;
    internal string _parentTableName;
    internal string _parentTableNamespace;
    internal DataKey ChildKey { get; }
    [ReadOnlyAttribute("True")]
public DataColumn[] Columns { get; }
    [ReadOnlyAttribute("True")]
public DataTable Table { get; }
    internal String[] ParentColumnNames { get; }
    internal String[] ChildColumnNames { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public AcceptRejectRule AcceptRejectRule { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public Rule DeleteRule { get; public set; }
    [ReadOnlyAttribute("True")]
public DataColumn[] RelatedColumns { get; }
    internal DataColumn[] RelatedColumnsReference { get; }
    internal DataKey ParentKey { get; }
    [ReadOnlyAttribute("True")]
public DataTable RelatedTable { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public Rule UpdateRule { get; public set; }
    public ForeignKeyConstraint(DataColumn parentColumn, DataColumn childColumn);
    public ForeignKeyConstraint(string constraintName, DataColumn parentColumn, DataColumn childColumn);
    public ForeignKeyConstraint(DataColumn[] parentColumns, DataColumn[] childColumns);
    public ForeignKeyConstraint(string constraintName, DataColumn[] parentColumns, DataColumn[] childColumns);
    [BrowsableAttribute("False")]
public ForeignKeyConstraint(string constraintName, string parentTableName, String[] parentColumnNames, String[] childColumnNames, AcceptRejectRule acceptRejectRule, Rule deleteRule, Rule updateRule);
    [BrowsableAttribute("False")]
public ForeignKeyConstraint(string constraintName, string parentTableName, string parentTableNamespace, String[] parentColumnNames, String[] childColumnNames, AcceptRejectRule acceptRejectRule, Rule deleteRule, Rule updateRule);
    internal DataKey get_ChildKey();
    public virtual DataColumn[] get_Columns();
    public virtual DataTable get_Table();
    internal String[] get_ParentColumnNames();
    internal String[] get_ChildColumnNames();
    internal virtual void CheckCanAddToCollection(ConstraintCollection constraints);
    internal virtual bool CanBeRemovedFromCollection(ConstraintCollection constraints, bool fThrowException);
    internal bool IsKeyNull(Object[] values);
    internal virtual bool IsConstraintViolated();
    internal virtual bool CanEnableConstraint();
    internal void CascadeCommit(DataRow row);
    internal void CascadeDelete(DataRow row);
    internal void CascadeRollback(DataRow row);
    internal void CascadeUpdate(DataRow row);
    internal void CheckCanClearParentTable(DataTable table);
    internal void CheckCanRemoveParentRow(DataRow row);
    internal void CheckCascade(DataRow row, DataRowAction action);
    internal virtual void CheckConstraint(DataRow childRow, DataRowAction action);
    private void NonVirtualCheckState();
    internal virtual void CheckState();
    public virtual AcceptRejectRule get_AcceptRejectRule();
    public virtual void set_AcceptRejectRule(AcceptRejectRule value);
    internal virtual bool ContainsColumn(DataColumn column);
    internal virtual Constraint Clone(DataSet destination);
    internal virtual Constraint Clone(DataSet destination, bool ignorNSforTableLookup);
    internal ForeignKeyConstraint Clone(DataTable destination);
    private void Create(string relationName, DataColumn[] parentColumns, DataColumn[] childColumns);
    public virtual Rule get_DeleteRule();
    public virtual void set_DeleteRule(Rule value);
    public virtual bool Equals(object key);
    public virtual int GetHashCode();
    public virtual DataColumn[] get_RelatedColumns();
    internal DataColumn[] get_RelatedColumnsReference();
    internal DataKey get_ParentKey();
    internal DataRelation FindParentRelation();
    public virtual DataTable get_RelatedTable();
    public virtual Rule get_UpdateRule();
    public virtual void set_UpdateRule(Rule value);
}
internal class System.Data.ForeignKeyConstraintEnumerator : ConstraintEnumerator {
    public ForeignKeyConstraintEnumerator(DataSet dataSet);
    protected virtual bool IsValidCandidate(Constraint constraint);
    public ForeignKeyConstraint GetForeignKeyConstraint();
}
internal class System.Data.Function : object {
    internal string _name;
    internal FunctionId _id;
    internal Type _result;
    internal bool _isValidateArguments;
    internal bool _isVariantArgumentList;
    internal int _argumentCount;
    internal Type[] _parameters;
    internal static String[] s_functionName;
    internal Function(string name, FunctionId id, Type result, bool IsValidateArguments, bool IsVariantArgumentList, int argumentCount, Type a1, Type a2, Type a3);
    private static Function();
}
internal enum System.Data.FunctionId : Enum {
    public int value__;
    public static FunctionId none;
    public static FunctionId Ascii;
    public static FunctionId Char;
    public static FunctionId Charindex;
    public static FunctionId Difference;
    public static FunctionId Len;
    public static FunctionId Lower;
    public static FunctionId LTrim;
    public static FunctionId Patindex;
    public static FunctionId Replicate;
    public static FunctionId Reverse;
    public static FunctionId Right;
    public static FunctionId RTrim;
    public static FunctionId Soundex;
    public static FunctionId Space;
    public static FunctionId Str;
    public static FunctionId Stuff;
    public static FunctionId Substring;
    public static FunctionId Upper;
    public static FunctionId IsNull;
    public static FunctionId Iif;
    public static FunctionId Convert;
    public static FunctionId cInt;
    public static FunctionId cBool;
    public static FunctionId cDate;
    public static FunctionId cDbl;
    public static FunctionId cStr;
    public static FunctionId Abs;
    public static FunctionId Acos;
    public static FunctionId In;
    public static FunctionId Trim;
    public static FunctionId Sum;
    public static FunctionId Avg;
    public static FunctionId Min;
    public static FunctionId Max;
    public static FunctionId Count;
    public static FunctionId StDev;
    public static FunctionId Var;
    public static FunctionId DateTimeOffset;
}
internal class System.Data.FunctionNode : ExpressionNode {
    internal string _name;
    internal int _info;
    internal int _argumentCount;
    internal ExpressionNode[] _arguments;
    private TypeLimiter _capturedLimiter;
    private static Function[] s_funcs;
    internal FunctionId Aggregate { get; }
    internal bool IsAggregate { get; }
    internal FunctionNode(DataTable table, string name);
    private static FunctionNode();
    internal void AddArgument(ExpressionNode argument);
    internal virtual void Bind(DataTable table, List`1<DataColumn> list);
    internal virtual object Eval();
    internal virtual object Eval(DataRow row, DataRowVersion version);
    internal virtual object Eval(Int32[] recordNos);
    internal virtual bool IsConstant();
    internal virtual bool IsTableConstant();
    internal virtual bool HasLocalAggregate();
    internal virtual bool HasRemoteAggregate();
    internal virtual bool DependsOn(DataColumn column);
    internal virtual ExpressionNode Optimize();
    private Type GetDataType(ExpressionNode node);
    private object EvalFunction(FunctionId id, Object[] argumentValues, DataRow row, DataRowVersion version);
    internal FunctionId get_Aggregate();
    internal bool get_IsAggregate();
    internal void Check();
}
public interface System.Data.IColumnMapping {
    public string DataSetColumn { get; public set; }
    public string SourceColumn { get; public set; }
    public abstract virtual string get_DataSetColumn();
    public abstract virtual void set_DataSetColumn(string value);
    public abstract virtual string get_SourceColumn();
    public abstract virtual void set_SourceColumn(string value);
}
[DefaultMemberAttribute("Item")]
public interface System.Data.IColumnMappingCollection {
    public object Item { get; public set; }
    public abstract virtual object get_Item(string index);
    public abstract virtual void set_Item(string index, object value);
    public abstract virtual IColumnMapping Add(string sourceColumnName, string dataSetColumnName);
    public abstract virtual bool Contains(string sourceColumnName);
    public abstract virtual IColumnMapping GetByDataSetColumn(string dataSetColumnName);
    public abstract virtual int IndexOf(string sourceColumnName);
    public abstract virtual void RemoveAt(string sourceColumnName);
}
public interface System.Data.IDataAdapter {
    public MissingMappingAction MissingMappingAction { get; public set; }
    public MissingSchemaAction MissingSchemaAction { get; public set; }
    public ITableMappingCollection TableMappings { get; }
    public abstract virtual MissingMappingAction get_MissingMappingAction();
    public abstract virtual void set_MissingMappingAction(MissingMappingAction value);
    public abstract virtual MissingSchemaAction get_MissingSchemaAction();
    public abstract virtual void set_MissingSchemaAction(MissingSchemaAction value);
    public abstract virtual ITableMappingCollection get_TableMappings();
    public abstract virtual DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType);
    public abstract virtual int Fill(DataSet dataSet);
    public abstract virtual IDataParameter[] GetFillParameters();
    public abstract virtual int Update(DataSet dataSet);
}
public interface System.Data.IDataParameter {
    public DbType DbType { get; public set; }
    public ParameterDirection Direction { get; public set; }
    public bool IsNullable { get; }
    public string ParameterName { get; public set; }
    public string SourceColumn { get; public set; }
    public DataRowVersion SourceVersion { get; public set; }
    public object Value { get; public set; }
    public abstract virtual DbType get_DbType();
    public abstract virtual void set_DbType(DbType value);
    public abstract virtual ParameterDirection get_Direction();
    public abstract virtual void set_Direction(ParameterDirection value);
    public abstract virtual bool get_IsNullable();
    public abstract virtual string get_ParameterName();
    public abstract virtual void set_ParameterName(string value);
    public abstract virtual string get_SourceColumn();
    public abstract virtual void set_SourceColumn(string value);
    public abstract virtual DataRowVersion get_SourceVersion();
    public abstract virtual void set_SourceVersion(DataRowVersion value);
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
}
[DefaultMemberAttribute("Item")]
public interface System.Data.IDataParameterCollection {
    public object Item { get; public set; }
    public abstract virtual object get_Item(string parameterName);
    public abstract virtual void set_Item(string parameterName, object value);
    public abstract virtual bool Contains(string parameterName);
    public abstract virtual int IndexOf(string parameterName);
    public abstract virtual void RemoveAt(string parameterName);
}
public interface System.Data.IDataReader {
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public abstract virtual int get_Depth();
    public abstract virtual bool get_IsClosed();
    public abstract virtual int get_RecordsAffected();
    public abstract virtual void Close();
    public abstract virtual DataTable GetSchemaTable();
    public abstract virtual bool NextResult();
    public abstract virtual bool Read();
}
[DefaultMemberAttribute("Item")]
public interface System.Data.IDataRecord {
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public abstract virtual int get_FieldCount();
    public abstract virtual object get_Item(int i);
    public abstract virtual object get_Item(string name);
    public abstract virtual string GetName(int i);
    public abstract virtual string GetDataTypeName(int i);
    public abstract virtual Type GetFieldType(int i);
    public abstract virtual object GetValue(int i);
    public abstract virtual int GetValues(Object[] values);
    public abstract virtual int GetOrdinal(string name);
    public abstract virtual bool GetBoolean(int i);
    public abstract virtual byte GetByte(int i);
    public abstract virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    public abstract virtual char GetChar(int i);
    public abstract virtual long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    public abstract virtual Guid GetGuid(int i);
    public abstract virtual short GetInt16(int i);
    public abstract virtual int GetInt32(int i);
    public abstract virtual long GetInt64(int i);
    public abstract virtual float GetFloat(int i);
    public abstract virtual double GetDouble(int i);
    public abstract virtual string GetString(int i);
    public abstract virtual decimal GetDecimal(int i);
    public abstract virtual DateTime GetDateTime(int i);
    public abstract virtual IDataReader GetData(int i);
    public abstract virtual bool IsDBNull(int i);
}
public interface System.Data.IDbCommand {
    public IDbConnection Connection { get; public set; }
    public IDbTransaction Transaction { get; public set; }
    public string CommandText { get; public set; }
    public int CommandTimeout { get; public set; }
    public CommandType CommandType { get; public set; }
    public IDataParameterCollection Parameters { get; }
    public UpdateRowSource UpdatedRowSource { get; public set; }
    public abstract virtual IDbConnection get_Connection();
    public abstract virtual void set_Connection(IDbConnection value);
    public abstract virtual IDbTransaction get_Transaction();
    public abstract virtual void set_Transaction(IDbTransaction value);
    public abstract virtual string get_CommandText();
    public abstract virtual void set_CommandText(string value);
    public abstract virtual int get_CommandTimeout();
    public abstract virtual void set_CommandTimeout(int value);
    public abstract virtual CommandType get_CommandType();
    public abstract virtual void set_CommandType(CommandType value);
    public abstract virtual IDataParameterCollection get_Parameters();
    public abstract virtual void Prepare();
    public abstract virtual UpdateRowSource get_UpdatedRowSource();
    public abstract virtual void set_UpdatedRowSource(UpdateRowSource value);
    public abstract virtual void Cancel();
    public abstract virtual IDbDataParameter CreateParameter();
    public abstract virtual int ExecuteNonQuery();
    public abstract virtual IDataReader ExecuteReader();
    public abstract virtual IDataReader ExecuteReader(CommandBehavior behavior);
    public abstract virtual object ExecuteScalar();
}
public interface System.Data.IDbConnection {
    public string ConnectionString { get; public set; }
    public int ConnectionTimeout { get; }
    public string Database { get; }
    public ConnectionState State { get; }
    public abstract virtual string get_ConnectionString();
    public abstract virtual void set_ConnectionString(string value);
    public abstract virtual int get_ConnectionTimeout();
    public abstract virtual string get_Database();
    public abstract virtual ConnectionState get_State();
    public abstract virtual IDbTransaction BeginTransaction();
    public abstract virtual IDbTransaction BeginTransaction(IsolationLevel il);
    public abstract virtual void Close();
    public abstract virtual void ChangeDatabase(string databaseName);
    public abstract virtual IDbCommand CreateCommand();
    public abstract virtual void Open();
}
public interface System.Data.IDbDataAdapter {
    public IDbCommand SelectCommand { get; public set; }
    public IDbCommand InsertCommand { get; public set; }
    public IDbCommand UpdateCommand { get; public set; }
    public IDbCommand DeleteCommand { get; public set; }
    public abstract virtual IDbCommand get_SelectCommand();
    public abstract virtual void set_SelectCommand(IDbCommand value);
    public abstract virtual IDbCommand get_InsertCommand();
    public abstract virtual void set_InsertCommand(IDbCommand value);
    public abstract virtual IDbCommand get_UpdateCommand();
    public abstract virtual void set_UpdateCommand(IDbCommand value);
    public abstract virtual IDbCommand get_DeleteCommand();
    public abstract virtual void set_DeleteCommand(IDbCommand value);
}
public interface System.Data.IDbDataParameter {
    public byte Precision { get; public set; }
    public byte Scale { get; public set; }
    public int Size { get; public set; }
    public abstract virtual byte get_Precision();
    public abstract virtual void set_Precision(byte value);
    public abstract virtual byte get_Scale();
    public abstract virtual void set_Scale(byte value);
    public abstract virtual int get_Size();
    public abstract virtual void set_Size(int value);
}
public interface System.Data.IDbTransaction {
    public IDbConnection Connection { get; }
    public IsolationLevel IsolationLevel { get; }
    public abstract virtual IDbConnection get_Connection();
    public abstract virtual IsolationLevel get_IsolationLevel();
    public abstract virtual void Commit();
    public abstract virtual void Rollback();
}
internal interface System.Data.IFilter {
    public abstract virtual bool Invoke(DataRow row, DataRowVersion version);
}
internal class System.Data.Index : object {
    private DataTable _table;
    internal IndexField[] _indexFields;
    private Comparison`1<DataRow> _comparison;
    private DataViewRowState _recordStates;
    private WeakReference _rowFilter;
    private IndexTree _records;
    private int _recordCount;
    private int _refCount;
    private Listeners`1<DataViewListener> _listeners;
    private bool _suspendEvents;
    private bool _isSharable;
    private bool _hasRemoteAggregate;
    private static int s_objectTypeCount;
    private int _objectID;
    internal bool HasRemoteAggregate { get; }
    internal int ObjectID { get; }
    public DataViewRowState RecordStates { get; }
    public IFilter RowFilter { get; }
    public bool HasDuplicates { get; }
    public int RecordCount { get; }
    public bool IsSharable { get; }
    public int RefCount { get; }
    private bool DoListChanged { get; }
    internal DataTable Table { get; }
    public Index(DataTable table, IndexField[] indexFields, DataViewRowState recordStates, IFilter rowFilter);
    public Index(DataTable table, Comparison`1<DataRow> comparison, DataViewRowState recordStates, IFilter rowFilter);
    private Index(DataTable table, IndexField[] indexFields, Comparison`1<DataRow> comparison, DataViewRowState recordStates, IFilter rowFilter);
    private static IndexField[] GetAllFields(DataColumnCollection columns);
    public bool Equal(IndexField[] indexDesc, DataViewRowState recordStates, IFilter rowFilter);
    internal bool get_HasRemoteAggregate();
    internal int get_ObjectID();
    public DataViewRowState get_RecordStates();
    public IFilter get_RowFilter();
    public int GetRecord(int recordIndex);
    public bool get_HasDuplicates();
    public int get_RecordCount();
    public bool get_IsSharable();
    private bool AcceptRecord(int record);
    private bool AcceptRecord(int record, IFilter filter);
    internal void ListChangedAdd(DataViewListener listener);
    internal void ListChangedRemove(DataViewListener listener);
    public int get_RefCount();
    public void AddRef();
    public int RemoveRef();
    private void ApplyChangeAction(int record, int action, int changeRecord);
    public bool CheckUnique();
    private int CompareRecords(int record1, int record2);
    private int CompareDataRows(int record1, int record2);
    private int CompareDuplicateRecords(int record1, int record2);
    private int CompareRecordToKey(int record1, Object[] vals);
    public void DeleteRecordFromIndex(int recordIndex);
    private void DeleteRecord(int recordIndex);
    private void DeleteRecord(int recordIndex, bool fireEvent);
    public RBTreeEnumerator<int> GetEnumerator(int startIndex);
    public int GetIndex(int record);
    private int GetIndex(int record, int changeRecord);
    public Object[] GetUniqueKeyValues();
    public int FindRecord(int record);
    public int FindRecordByKey(object key);
    public int FindRecordByKey(Object[] key);
    private int FindNodeByKey(object originalKey);
    private int FindNodeByKeys(Object[] originalKey);
    private int FindNodeByKeyRecord(int record);
    internal Range FindRecords(ComparisonBySelector`2<TKey, TRow> comparison, TKey key);
    private Range GetRangeFromNode(int nodeId);
    public Range FindRecords(object key);
    public Range FindRecords(Object[] key);
    internal void FireResetEvent();
    private int GetChangeAction(DataViewRowState oldState, DataViewRowState newState);
    private static int GetReplaceAction(DataViewRowState oldState);
    public DataRow GetRow(int i);
    public DataRow[] GetRows(Object[] values);
    public DataRow[] GetRows(Range range);
    private void InitRecords(IFilter filter);
    public int InsertRecordToIndex(int record);
    private int InsertRecord(int record, bool fireEvent);
    public bool IsKeyInIndex(object key);
    public bool IsKeyInIndex(Object[] key);
    public bool IsKeyRecordInIndex(int record);
    private bool get_DoListChanged();
    private void OnListChanged(ListChangedType changedType, int newIndex, int oldIndex);
    private void OnListChanged(ListChangedType changedType, int index);
    private void OnListChanged(ListChangedEventArgs e);
    private void MaintainDataView(ListChangedType changedType, int record, bool trackAddRemove);
    public void Reset();
    public void RecordChanged(int record);
    public void RecordChanged(int oldIndex, int newIndex);
    public void RecordStateChanged(int record, DataViewRowState oldState, DataViewRowState newState);
    public void RecordStateChanged(int oldRecord, DataViewRowState oldOldState, DataViewRowState oldNewState, int newRecord, DataViewRowState newOldState, DataViewRowState newNewState);
    internal DataTable get_Table();
    private void GetUniqueKeyValues(List`1<Object[]> list, int curNodeId);
    internal static int IndexOfReference(List`1<T> list, T item);
}
[IsReadOnlyAttribute]
internal class System.Data.IndexField : ValueType {
    public DataColumn Column;
    public bool IsDescending;
    internal IndexField(DataColumn column, bool isDescending);
    public static bool op_Equality(IndexField if1, IndexField if2);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.InRowChangingEventException : DataException {
    protected InRowChangingEventException(SerializationInfo info, StreamingContext context);
    public InRowChangingEventException(string s);
    public InRowChangingEventException(string message, Exception innerException);
}
public class System.Data.InternalDataCollectionBase : object {
    internal static CollectionChangeEventArgs s_refreshEventArgs;
    [BrowsableAttribute("False")]
public int Count { get; }
    [BrowsableAttribute("False")]
public bool IsReadOnly { get; }
    [BrowsableAttribute("False")]
public bool IsSynchronized { get; }
    [BrowsableAttribute("False")]
public object SyncRoot { get; }
    protected ArrayList List { get; }
    private static InternalDataCollectionBase();
    public virtual int get_Count();
    public virtual void CopyTo(Array ar, int index);
    public virtual IEnumerator GetEnumerator();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    internal int NamesEqual(string s1, string s2, bool fCaseSensitive, CultureInfo locale);
    public sealed virtual object get_SyncRoot();
    protected virtual ArrayList get_List();
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.InvalidConstraintException : DataException {
    protected InvalidConstraintException(SerializationInfo info, StreamingContext context);
    public InvalidConstraintException(string s);
    public InvalidConstraintException(string message, Exception innerException);
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.InvalidExpressionException : DataException {
    protected InvalidExpressionException(SerializationInfo info, StreamingContext context);
    public InvalidExpressionException(string s);
    public InvalidExpressionException(string message, Exception innerException);
}
public enum System.Data.IsolationLevel : Enum {
    public int value__;
    public static IsolationLevel Unspecified;
    public static IsolationLevel Chaos;
    public static IsolationLevel ReadUncommitted;
    public static IsolationLevel ReadCommitted;
    public static IsolationLevel RepeatableRead;
    public static IsolationLevel Serializable;
    public static IsolationLevel Snapshot;
}
public interface System.Data.ITableMapping {
    public IColumnMappingCollection ColumnMappings { get; }
    public string DataSetTable { get; public set; }
    public string SourceTable { get; public set; }
    public abstract virtual IColumnMappingCollection get_ColumnMappings();
    public abstract virtual string get_DataSetTable();
    public abstract virtual void set_DataSetTable(string value);
    public abstract virtual string get_SourceTable();
    public abstract virtual void set_SourceTable(string value);
}
[DefaultMemberAttribute("Item")]
public interface System.Data.ITableMappingCollection {
    public object Item { get; public set; }
    public abstract virtual object get_Item(string index);
    public abstract virtual void set_Item(string index, object value);
    public abstract virtual ITableMapping Add(string sourceTableName, string dataSetTableName);
    public abstract virtual bool Contains(string sourceTableName);
    public abstract virtual ITableMapping GetByDataSetTable(string dataSetTableName);
    public abstract virtual int IndexOf(string sourceTableName);
    public abstract virtual void RemoveAt(string sourceTableName);
}
public enum System.Data.KeyRestrictionBehavior : Enum {
    public int value__;
    public static KeyRestrictionBehavior AllowOnly;
    public static KeyRestrictionBehavior PreventUsage;
}
internal class System.Data.LikeNode : BinaryNode {
    private int _kind;
    private string _pattern;
    internal LikeNode(DataTable table, int op, ExpressionNode left, ExpressionNode right);
    internal virtual object Eval(DataRow row, DataRowVersion version);
    internal string AnalyzePattern(string pat);
}
internal class System.Data.LinqDataView : DataView {
    internal Func`3<object, DataRow, int> comparerKeyRow;
    internal SortExpressionBuilder`1<DataRow> sortExpressionBuilder;
    public string RowFilter { get; public set; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private ListSortDescriptionCollection System.ComponentModel.IBindingListView.SortDescriptions { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    internal LinqDataView(DataTable table, SortExpressionBuilder`1<DataRow> sortExpressionBuilder);
    internal LinqDataView(DataTable table, Predicate`1<DataRow> predicate_system, Comparison`1<DataRow> comparison, Func`3<object, DataRow, int> comparerKeyRow, SortExpressionBuilder`1<DataRow> sortExpressionBuilder);
    public virtual string get_RowFilter();
    public virtual void set_RowFilter(string value);
    internal virtual int FindByKey(object key);
    internal virtual int FindByKey(Object[] key);
    internal virtual DataRowView[] FindRowsByKey(Object[] key);
    internal virtual void SetIndex(string newSort, DataViewRowState newRowStates, IFilter newRowFilter);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override ListSortDescriptionCollection System.ComponentModel.IBindingListView.get_SortDescriptions();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
}
internal class System.Data.Listeners`1 : object {
    private List`1<TElem> _listeners;
    private Func`2<TElem, TElem, bool> _filter;
    private int _objectID;
    private int _listenerReaderCount;
    internal bool HasListeners { get; }
    internal Listeners`1(int ObjectID, Func`2<TElem, TElem, bool> notifyFilter);
    internal bool get_HasListeners();
    internal void Add(TElem listener);
    internal int IndexOfReference(TElem listener);
    internal void Remove(TElem listener);
    internal void Notify(T1 arg1, T2 arg2, T3 arg3, Action`4<TElem, TElem, T1, T2, T3> action);
    private void RemoveNullListeners(int nullIndex);
}
public enum System.Data.LoadOption : Enum {
    public int value__;
    public static LoadOption OverwriteChanges;
    public static LoadOption PreserveChanges;
    public static LoadOption Upsert;
}
internal class System.Data.LookupNode : ExpressionNode {
    private string _relationName;
    private string _columnName;
    private DataColumn _column;
    private DataRelation _relation;
    internal LookupNode(DataTable table, string columnName, string relationName);
    internal virtual void Bind(DataTable table, List`1<DataColumn> list);
    internal virtual object Eval();
    internal virtual object Eval(DataRow row, DataRowVersion version);
    internal virtual object Eval(Int32[] recordNos);
    internal virtual bool IsConstant();
    internal virtual bool IsTableConstant();
    internal virtual bool HasLocalAggregate();
    internal virtual bool HasRemoteAggregate();
    internal virtual bool DependsOn(DataColumn column);
    internal virtual ExpressionNode Optimize();
}
public enum System.Data.MappingType : Enum {
    public int value__;
    public static MappingType Element;
    public static MappingType Attribute;
    public static MappingType SimpleContent;
    public static MappingType Hidden;
}
public class System.Data.MergeFailedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private DataTable <Table>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Conflict>k__BackingField;
    public DataTable Table { get; }
    public string Conflict { get; }
    public MergeFailedEventArgs(DataTable table, string conflict);
    [CompilerGeneratedAttribute]
public DataTable get_Table();
    [CompilerGeneratedAttribute]
public string get_Conflict();
}
public class System.Data.MergeFailedEventHandler : MulticastDelegate {
    public MergeFailedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MergeFailedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MergeFailedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class System.Data.Merger : object {
    private DataSet _dataSet;
    private DataTable _dataTable;
    private bool _preserveChanges;
    private MissingSchemaAction _missingSchemaAction;
    private bool _isStandAlonetable;
    private bool _IgnoreNSforTableLookup;
    internal Merger(DataSet dataSet, bool preserveChanges, MissingSchemaAction missingSchemaAction);
    internal Merger(DataTable dataTable, bool preserveChanges, MissingSchemaAction missingSchemaAction);
    internal void MergeDataSet(DataSet source);
    internal void MergeTable(DataTable src);
    private void MergeTable(DataTable src, DataTable dst);
    internal void MergeRows(DataRow[] rows);
    private DataTable MergeSchema(DataTable table);
    private void MergeTableData(DataTable src);
    private void MergeConstraints(DataSet source);
    private void MergeConstraints(DataTable table);
    private void MergeRelation(DataRelation relation);
    private void MergeExtendedProperties(PropertyCollection src, PropertyCollection dst);
    private DataKey GetSrcKey(DataTable src, DataTable dst);
}
public enum System.Data.MissingMappingAction : Enum {
    public int value__;
    public static MissingMappingAction Passthrough;
    public static MissingMappingAction Ignore;
    public static MissingMappingAction Error;
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.MissingPrimaryKeyException : DataException {
    protected MissingPrimaryKeyException(SerializationInfo info, StreamingContext context);
    public MissingPrimaryKeyException(string s);
    public MissingPrimaryKeyException(string message, Exception innerException);
}
public enum System.Data.MissingSchemaAction : Enum {
    public int value__;
    public static MissingSchemaAction Add;
    public static MissingSchemaAction Ignore;
    public static MissingSchemaAction Error;
    public static MissingSchemaAction AddWithKey;
}
internal class System.Data.NameNode : ExpressionNode {
    internal string _name;
    internal bool _found;
    internal DataColumn _column;
    internal bool IsSqlColumn { get; }
    internal NameNode(DataTable table, Char[] text, int start, int pos);
    internal NameNode(DataTable table, string name);
    internal virtual bool get_IsSqlColumn();
    internal virtual void Bind(DataTable table, List`1<DataColumn> list);
    internal virtual object Eval();
    internal virtual object Eval(DataRow row, DataRowVersion version);
    internal virtual object Eval(Int32[] records);
    internal virtual bool IsConstant();
    internal virtual bool IsTableConstant();
    internal virtual bool HasLocalAggregate();
    internal virtual bool HasRemoteAggregate();
    internal virtual bool DependsOn(DataColumn column);
    internal virtual ExpressionNode Optimize();
    internal static string ParseName(Char[] text, int start, int pos);
}
internal class System.Data.NewDiffgramGen : object {
    internal XmlDocument _doc;
    internal DataSet _ds;
    internal DataTable _dt;
    internal XmlWriter _xmlw;
    private bool _fBefore;
    private bool _fErrors;
    internal Hashtable _rowsOrder;
    private ArrayList _tables;
    private bool _writeHierarchy;
    internal NewDiffgramGen(DataSet ds);
    internal NewDiffgramGen(DataTable dt, bool writeHierarchy);
    private void CreateTableHierarchy(DataTable dt);
    private void DoAssignments(ArrayList tables);
    private bool EmptyData();
    internal void Save(XmlWriter xmlw);
    internal void Save(XmlWriter xmlw, DataTable table);
    private void GenerateTable(DataTable table);
    private void GenerateTableErrors(DataTable table);
    private void GenerateRow(DataRow row);
    private void GenerateColumn(DataRow row, DataColumn col, DataRowVersion version);
    internal static string QualifiedName(string prefix, string name);
}
internal enum System.Data.Nodes : Enum {
    public int value__;
    public static Nodes Noop;
    public static Nodes Unop;
    public static Nodes UnopSpec;
    public static Nodes Binop;
    public static Nodes BinopSpec;
    public static Nodes Zop;
    public static Nodes Call;
    public static Nodes Const;
    public static Nodes Name;
    public static Nodes Paren;
    public static Nodes Conv;
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.NoNullAllowedException : DataException {
    protected NoNullAllowedException(SerializationInfo info, StreamingContext context);
    public NoNullAllowedException(string s);
    public NoNullAllowedException(string message, Exception innerException);
}
internal class System.Data.OperatorInfo : object {
    internal Nodes _type;
    internal int _op;
    internal int _priority;
    internal OperatorInfo(Nodes type, int op, int pri);
}
internal class System.Data.Operators : object {
    private static Int32[] s_priority;
    private static String[] s_looks;
    private static Operators();
    internal static bool IsArithmetical(int op);
    internal static bool IsLogical(int op);
    internal static bool IsRelational(int op);
    internal static int Priority(int op);
    internal static string ToString(int op);
}
public class System.Data.OrderedEnumerableRowCollection`1 : EnumerableRowCollection`1<TRow> {
    internal OrderedEnumerableRowCollection`1(EnumerableRowCollection`1<TRow> enumerableTable, IEnumerable`1<TRow> enumerableRows);
}
public enum System.Data.ParameterDirection : Enum {
    public int value__;
    public static ParameterDirection Input;
    public static ParameterDirection Output;
    public static ParameterDirection InputOutput;
    public static ParameterDirection ReturnValue;
}
internal class System.Data.ParentForeignKeyConstraintEnumerator : ForeignKeyConstraintEnumerator {
    private DataTable _table;
    public ParentForeignKeyConstraintEnumerator(DataSet dataSet, DataTable inTable);
    protected virtual bool IsValidCandidate(Constraint constraint);
}
internal class System.Data.PrimaryKeyTypeConverter : ReferenceConverter {
    public virtual bool GetPropertiesSupported(ITypeDescriptorContext context);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.PropertyCollection : Hashtable {
    protected PropertyCollection(SerializationInfo info, StreamingContext context);
    public virtual object Clone();
}
internal abstract class System.Data.ProviderBase.DataReaderContainer : object {
    protected IDataReader _dataReader;
    protected int _fieldCount;
    internal int FieldCount { get; }
    internal bool ReturnProviderSpecificTypes { get; }
    protected int VisibleFieldCount { get; }
    protected DataReaderContainer(IDataReader dataReader);
    internal static DataReaderContainer Create(IDataReader dataReader, bool returnProviderSpecificTypes);
    internal int get_FieldCount();
    internal abstract virtual bool get_ReturnProviderSpecificTypes();
    protected abstract virtual int get_VisibleFieldCount();
    internal abstract virtual Type GetFieldType(int ordinal);
    internal abstract virtual int GetValues(Object[] values);
    internal string GetName(int ordinal);
    internal DataTable GetSchemaTable();
    internal bool NextResult();
    internal bool Read();
}
internal class System.Data.ProviderBase.FieldNameLookup : object {
    private Hashtable _fieldNameLookup;
    private String[] _fieldNames;
    private CompareInfo _compareInfo;
    private int _defaultLocaleID;
    public FieldNameLookup(IDataRecord reader, int defaultLocaleID);
    public int GetOrdinal(string fieldName);
    public int IndexOf(string fieldName);
    private int LinearIndexOf(string fieldName, CompareOptions compareOptions);
    private void GenerateLookup();
}
internal class System.Data.ProviderBase.SchemaMapping : object {
    private DataSet _dataSet;
    private DataTable _dataTable;
    private DataAdapter _adapter;
    private DataReaderContainer _dataReader;
    private DataTable _schemaTable;
    private DataTableMapping _tableMapping;
    private String[] _fieldNames;
    private Object[] _readerDataValues;
    private Object[] _mappedDataValues;
    private Int32[] _indexMap;
    private Boolean[] _chapterMap;
    private Int32[] _xmlMap;
    private int _mappedMode;
    private int _mappedLength;
    private LoadOption _loadOption;
    internal DataReaderContainer DataReader { get; }
    internal DataTable DataTable { get; }
    internal Object[] DataValues { get; }
    internal SchemaMapping(DataAdapter adapter, DataSet dataset, DataTable datatable, DataReaderContainer dataReader, bool keyInfo, SchemaType schemaType, string sourceTableName, bool gettingData, DataColumn parentChapterColumn, object parentChapterValue);
    internal DataReaderContainer get_DataReader();
    internal DataTable get_DataTable();
    internal Object[] get_DataValues();
    internal void ApplyToDataRow(DataRow dataRow);
    private void MappedChapterIndex();
    private void MappedChapter();
    private void MappedIndex();
    private void MappedValues();
    private Object[] GetMappedValues();
    internal void LoadDataRowWithClear();
    internal void LoadDataRow();
    private void FreeDataRowChapters();
    internal int LoadDataRowChapters(DataRow dataRow);
    private Int32[] CreateIndexMap(int count, int index);
    private static String[] GenerateFieldNames(DataReaderContainer dataReader);
    private DataColumn[] ResizeColumnArray(DataColumn[] rgcol, int len);
    private void AddItemToAllowRollback(List`1& items, object value);
    private void RollbackAddedItems(List`1<object> items);
    private Object[] SetupSchemaWithoutKeyInfo(MissingMappingAction mappingAction, MissingSchemaAction schemaAction, bool gettingData, DataColumn parentChapterColumn, object chapterValue);
    private Object[] SetupSchemaWithKeyInfo(MissingMappingAction mappingAction, MissingSchemaAction schemaAction, bool gettingData, DataColumn parentChapterColumn, object chapterValue);
    private void AddAdditionalProperties(DataColumn targetColumn, DataRow schemaRow);
    private void AddRelation(DataColumn parentChapterColumn, DataColumn chapterColumn);
    private Object[] SetupMapping(int count, DataColumnCollection columnCollection, DataColumn chapterColumn, object chapterValue);
}
internal class System.Data.Range : ValueType {
    private int _min;
    private int _max;
    private bool _isNotNull;
    public int Count { get; }
    public bool IsNull { get; }
    public int Max { get; }
    public int Min { get; }
    public Range(int min, int max);
    public int get_Count();
    public bool get_IsNull();
    public int get_Max();
    public int get_Min();
    internal void CheckNull();
}
[DefaultMemberAttribute("Item")]
internal abstract class System.Data.RBTree`1 : object {
    private TreePage[] _pageTable;
    private Int32[] _pageTableMap;
    private int _inUsePageCount;
    private int _nextFreePageLine;
    public int root;
    private int _version;
    private int _inUseNodeCount;
    private int _inUseSatelliteTreeCount;
    private TreeAccessMethod _accessMethod;
    public int Count { get; }
    public bool HasDuplicates { get; }
    public K Item { get; }
    protected RBTree`1(TreeAccessMethod accessMethod);
    protected abstract virtual int CompareNode(K record1, K record2);
    protected abstract virtual int CompareSateliteTreeNode(K record1, K record2);
    private void InitTree();
    private void FreePage(TreePage<K> page);
    private TreePage<K> AllocPage(int size);
    private void MarkPageFull(TreePage<K> page);
    private void MarkPageFree(TreePage<K> page);
    private static int GetIntValueFromBitMap(UInt32 bitMap);
    private void FreeNode(int nodeId);
    private int GetIndexOfPageWithFreeSlot(bool allocatedPage);
    public int get_Count();
    public bool get_HasDuplicates();
    private int GetNewNode(K key);
    private int Successor(int x_id);
    private bool Successor(Int32& nodeId, Int32& mainTreeNodeId);
    private int Minimum(int x_id);
    private int LeftRotate(int root_id, int x_id, int mainTreeNode);
    private int RightRotate(int root_id, int x_id, int mainTreeNode);
    private int RBInsert(int root_id, int x_id, int mainTreeNodeID, int position, bool append);
    public void UpdateNodeKey(K currentKey, K newKey);
    public K DeleteByIndex(int i);
    public int RBDelete(int z_id);
    private int RBDeleteX(int root_id, int z_id, int mainTreeNodeID);
    private int RBDeleteFixup(int root_id, int x_id, int px_id, int mainTreeNodeID);
    private int SearchSubTree(int root_id, K key);
    public int Search(K key);
    public K get_Item(int index);
    private NodePath<K> GetNodeByKey(K key);
    public int GetIndexByKey(K key);
    public int GetIndexByNode(int node);
    private int GetIndexByNodePath(NodePath<K> path);
    private int ComputeIndexByNode(int nodeId);
    private int ComputeIndexWithSatelliteByNode(int nodeId);
    private NodePath<K> GetNodeByIndex(int userIndex);
    private int ComputeNodeByIndex(int index, Int32& satelliteRootId);
    private int ComputeNodeByIndex(int x_id, int index);
    public int Insert(K item);
    public int Add(K item);
    public sealed virtual IEnumerator GetEnumerator();
    public int IndexOf(int nodeId, K item);
    public int Insert(int position, K item);
    public int InsertAt(int position, K item, bool append);
    public void RemoveAt(int position);
    public void Clear();
    public void CopyTo(Array array, int index);
    public void CopyTo(K[] array, int index);
    private void SetRight(int nodeId, int rightNodeId);
    private void SetLeft(int nodeId, int leftNodeId);
    private void SetParent(int nodeId, int parentNodeId);
    private void SetColor(int nodeId, NodeColor<K> color);
    private void SetKey(int nodeId, K key);
    private void SetNext(int nodeId, int nextNodeId);
    private void SetSubTreeSize(int nodeId, int size);
    private void IncreaseSize(int nodeId);
    private void RecomputeSize(int nodeId);
    private void DecreaseSize(int nodeId);
    public int Right(int nodeId);
    public int Left(int nodeId);
    public int Parent(int nodeId);
    private NodeColor<K> color(int nodeId);
    public int Next(int nodeId);
    public int SubTreeSize(int nodeId);
    public K Key(int nodeId);
}
internal enum System.Data.RBTreeError : Enum {
    public int value__;
    public static RBTreeError InvalidPageSize;
    public static RBTreeError PagePositionInSlotInUse;
    public static RBTreeError NoFreeSlots;
    public static RBTreeError InvalidStateinInsert;
    public static RBTreeError InvalidNextSizeInDelete;
    public static RBTreeError InvalidStateinDelete;
    public static RBTreeError InvalidNodeSizeinDelete;
    public static RBTreeError InvalidStateinEndDelete;
    public static RBTreeError CannotRotateInvalidsuccessorNodeinDelete;
    public static RBTreeError IndexOutOFRangeinGetNodeByIndex;
    public static RBTreeError RBDeleteFixup;
    public static RBTreeError UnsupportedAccessMethod1;
    public static RBTreeError UnsupportedAccessMethod2;
    public static RBTreeError UnsupportedAccessMethodInNonNillRootSubtree;
    public static RBTreeError AttachedNodeWithZerorbTreeNodeId;
    public static RBTreeError CompareNodeInDataRowTree;
    public static RBTreeError CompareSateliteTreeNodeInDataRowTree;
    public static RBTreeError NestedSatelliteTreeEnumerator;
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.ReadOnlyException : DataException {
    protected ReadOnlyException(SerializationInfo info, StreamingContext context);
    public ReadOnlyException(string s);
    public ReadOnlyException(string message, Exception innerException);
}
[DefaultMemberAttribute("Item")]
internal class System.Data.RecordManager : object {
    private DataTable _table;
    private int _lastFreeRecord;
    private int _minimumCapacity;
    private int _recordCapacity;
    private List`1<int> _freeRecordList;
    private DataRow[] _rows;
    internal int LastFreeRecord { get; }
    internal int MinimumCapacity { get; internal set; }
    internal int RecordCapacity { get; internal set; }
    internal DataRow Item { get; internal set; }
    internal RecordManager(DataTable table);
    private void GrowRecordCapacity();
    internal int get_LastFreeRecord();
    internal int get_MinimumCapacity();
    internal void set_MinimumCapacity(int value);
    internal int get_RecordCapacity();
    internal void set_RecordCapacity(int value);
    internal static int NewCapacity(int capacity);
    private int NormalizedMinimumCapacity(int capacity);
    internal int NewRecordBase();
    internal void FreeRecord(Int32& record);
    internal void Clear(bool clearAll);
    internal DataRow get_Item(int record);
    internal void set_Item(int record, DataRow value);
    internal int ImportRecord(DataTable src, int record);
    internal int CopyRecord(DataTable src, int record, int copy);
    internal void SetRowCache(DataRow[] newRows);
}
internal class System.Data.RelatedView : DataView {
    private Nullable`1<DataKey> _parentKey;
    private DataKey _childKey;
    private DataRowView _parentRowView;
    private Object[] _filterValues;
    public RelatedView(DataColumn[] columns, Object[] values);
    public RelatedView(DataRowView parentRowView, DataKey parentKey, DataColumn[] childKeyColumns);
    private Object[] GetParentValues();
    public sealed virtual bool Invoke(DataRow row, DataRowVersion version);
    internal virtual IFilter GetFilter();
    public virtual DataRowView AddNew();
    internal virtual void SetIndex(string newSort, DataViewRowState newRowStates, IFilter newRowFilter);
    public virtual bool Equals(DataView dv);
    private bool CompareArray(Object[] value1, Object[] value2);
}
internal class System.Data.RelationshipConverter : ExpandableObjectConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.RowNotInTableException : DataException {
    protected RowNotInTableException(SerializationInfo info, StreamingContext context);
    public RowNotInTableException(string s);
    public RowNotInTableException(string message, Exception innerException);
}
public enum System.Data.Rule : Enum {
    public int value__;
    public static Rule None;
    public static Rule Cascade;
    public static Rule SetNull;
    public static Rule SetDefault;
}
internal enum System.Data.SchemaFormat : Enum {
    public int value__;
    public static SchemaFormat Public;
    public static SchemaFormat Remoting;
    public static SchemaFormat WebService;
    public static SchemaFormat RemotingSkipSchema;
    public static SchemaFormat WebServiceSkipSchema;
}
public enum System.Data.SchemaSerializationMode : Enum {
    public int value__;
    public static SchemaSerializationMode IncludeSchema;
    public static SchemaSerializationMode ExcludeSchema;
}
public enum System.Data.SchemaType : Enum {
    public int value__;
    public static SchemaType Source;
    public static SchemaType Mapped;
}
internal class System.Data.Select : object {
    private DataTable _table;
    private IndexField[] _indexFields;
    private DataViewRowState _recordStates;
    private DataExpression _rowFilter;
    private ExpressionNode _expression;
    private Index _index;
    private Int32[] _records;
    private int _recordCount;
    private ExpressionNode _linearExpression;
    private bool _candidatesForBinarySearch;
    private ColumnInfo[] _candidateColumns;
    private int _nCandidates;
    private int _matchedCandidates;
    public Select(DataTable table, string filterExpression, string sort, DataViewRowState recordStates);
    private bool IsSupportedOperator(int op);
    private void AnalyzeExpression(BinaryNode expr);
    private bool CompareSortIndexDesc(IndexField[] fields);
    private bool FindSortIndex();
    private int CompareClosestCandidateIndexDesc(IndexField[] fields);
    private bool FindClosestCandidateIndex();
    private void InitCandidateColumns();
    private void CreateIndex();
    private bool IsOperatorIn(ExpressionNode enode);
    private void BuildLinearExpression();
    public DataRow[] SelectRows();
    public DataRow[] GetRows();
    private bool AcceptRecord(int record);
    private int Eval(BinaryNode expr, DataRow row, DataRowVersion version);
    private int Evaluate(int record);
    private int FindFirstMatchingRecord();
    private int FindLastMatchingRecord(int lo);
    private Range GetBinaryFilteredRecords();
    private Int32[] GetLinearFilteredRecords(Range range);
    private DataRow[] GetLinearFilteredRows(Range range);
    private int CompareRecords(int record1, int record2);
    private void Sort(int left, int right);
}
public enum System.Data.SerializationFormat : Enum {
    public int value__;
    public static SerializationFormat Xml;
    public static SerializationFormat Binary;
}
internal class System.Data.SimpleType : object {
    private string _baseType;
    private SimpleType _baseSimpleType;
    private XmlQualifiedName _xmlBaseType;
    private string _name;
    private int _length;
    private int _minLength;
    private int _maxLength;
    private string _pattern;
    private string _ns;
    private string _maxExclusive;
    private string _maxInclusive;
    private string _minExclusive;
    private string _minInclusive;
    internal string _enumeration;
    internal string BaseType { get; }
    internal XmlQualifiedName XmlBaseType { get; }
    internal string Name { get; }
    internal string Namespace { get; }
    internal int Length { get; }
    internal int MaxLength { get; internal set; }
    internal SimpleType BaseSimpleType { get; }
    public string SimpleTypeQualifiedName { get; }
    internal SimpleType(string baseType);
    internal SimpleType(XmlSchemaSimpleType node);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    internal void LoadTypeValues(XmlSchemaSimpleType node);
    internal bool IsPlainString();
    internal string get_BaseType();
    internal XmlQualifiedName get_XmlBaseType();
    internal string get_Name();
    internal string get_Namespace();
    internal int get_Length();
    internal int get_MaxLength();
    internal void set_MaxLength(int value);
    internal SimpleType get_BaseSimpleType();
    public string get_SimpleTypeQualifiedName();
    internal string QualifiedName(string name);
    internal XmlNode ToNode(XmlDocument dc, Hashtable prefixes, bool inRemoting);
    internal static SimpleType CreateEnumeratedType(string values);
    internal static SimpleType CreateByteArrayType(string encoding);
    internal static SimpleType CreateLimitedStringType(int length);
    internal static SimpleType CreateSimpleType(StorageType typeCode, Type type);
    internal string HasConflictingDefinition(SimpleType otherSimpleType);
    internal bool CanHaveMaxLength();
    internal void ConvertToAnnonymousSimpleType();
}
internal class System.Data.SortExpressionBuilder`1 : object {
    private LinkedList`1<Func`2<T, object>> _selectors;
    private LinkedList`1<Comparison`1<object>> _comparers;
    private LinkedListNode`1<Func`2<T, object>> _currentSelector;
    private LinkedListNode`1<Comparison`1<object>> _currentComparer;
    internal int Count { get; }
    internal void Add(Func`2<T, object> keySelector, Comparison`1<object> compare, bool isOrderBy);
    public List`1<object> Select(T row);
    public sealed virtual int Compare(List`1<object> a, List`1<object> b);
    internal int get_Count();
    internal SortExpressionBuilder`1<T> Clone();
    internal SortExpressionBuilder`1<TResult> CloneCast();
}
public enum System.Data.SqlDbType : Enum {
    public int value__;
    public static SqlDbType BigInt;
    public static SqlDbType Binary;
    public static SqlDbType Bit;
    public static SqlDbType Char;
    public static SqlDbType DateTime;
    public static SqlDbType Decimal;
    public static SqlDbType Float;
    public static SqlDbType Image;
    public static SqlDbType Int;
    public static SqlDbType Money;
    public static SqlDbType NChar;
    public static SqlDbType NText;
    public static SqlDbType NVarChar;
    public static SqlDbType Real;
    public static SqlDbType UniqueIdentifier;
    public static SqlDbType SmallDateTime;
    public static SqlDbType SmallInt;
    public static SqlDbType SmallMoney;
    public static SqlDbType Text;
    public static SqlDbType Timestamp;
    public static SqlDbType TinyInt;
    public static SqlDbType VarBinary;
    public static SqlDbType VarChar;
    public static SqlDbType Variant;
    public static SqlDbType Xml;
    public static SqlDbType Udt;
    public static SqlDbType Structured;
    public static SqlDbType Date;
    public static SqlDbType Time;
    public static SqlDbType DateTime2;
    public static SqlDbType DateTimeOffset;
}
internal enum System.Data.SqlTypes.EComparison : Enum {
    public int value__;
    public static EComparison LT;
    public static EComparison LE;
    public static EComparison EQ;
    public static EComparison GE;
    public static EComparison GT;
    public static EComparison NE;
}
public interface System.Data.SqlTypes.INullable {
    public bool IsNull { get; }
    public abstract virtual bool get_IsNull();
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.SqlTypes.SqlAlreadyFilledException : SqlTypeException {
    public SqlAlreadyFilledException(string message);
    public SqlAlreadyFilledException(string message, Exception e);
    private SqlAlreadyFilledException(SerializationInfo si, StreamingContext sc);
}
[DefaultMemberAttribute("Item")]
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlBinary : ValueType {
    private Byte[] _value;
    public static SqlBinary Null;
    public bool IsNull { get; }
    public Byte[] Value { get; }
    public byte Item { get; }
    public int Length { get; }
    private SqlBinary(bool fNull);
    public SqlBinary(Byte[] value);
    private static SqlBinary();
    public sealed virtual bool get_IsNull();
    public Byte[] get_Value();
    public byte get_Item(int index);
    public int get_Length();
    public static SqlBinary op_Implicit(Byte[] x);
    public static Byte[] op_Explicit(SqlBinary x);
    public virtual string ToString();
    public static SqlBinary op_Addition(SqlBinary x, SqlBinary y);
    private static EComparison PerformCompareByte(Byte[] x, Byte[] y);
    public static SqlBinary op_Explicit(SqlGuid x);
    public static SqlBoolean op_Equality(SqlBinary x, SqlBinary y);
    public static SqlBoolean op_Inequality(SqlBinary x, SqlBinary y);
    public static SqlBoolean op_LessThan(SqlBinary x, SqlBinary y);
    public static SqlBoolean op_GreaterThan(SqlBinary x, SqlBinary y);
    public static SqlBoolean op_LessThanOrEqual(SqlBinary x, SqlBinary y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlBinary x, SqlBinary y);
    public static SqlBinary Add(SqlBinary x, SqlBinary y);
    public static SqlBinary Concat(SqlBinary x, SqlBinary y);
    public static SqlBoolean Equals(SqlBinary x, SqlBinary y);
    public static SqlBoolean NotEquals(SqlBinary x, SqlBinary y);
    public static SqlBoolean LessThan(SqlBinary x, SqlBinary y);
    public static SqlBoolean GreaterThan(SqlBinary x, SqlBinary y);
    public static SqlBoolean LessThanOrEqual(SqlBinary x, SqlBinary y);
    public static SqlBoolean GreaterThanOrEqual(SqlBinary x, SqlBinary y);
    public SqlGuid ToSqlGuid();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlBinary value);
    public virtual bool Equals(object value);
    internal static int HashByteArray(Byte[] rgbValue, int length);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlBoolean : ValueType {
    private byte m_value;
    public static SqlBoolean True;
    public static SqlBoolean False;
    public static SqlBoolean Null;
    public static SqlBoolean Zero;
    public static SqlBoolean One;
    public bool IsNull { get; }
    public bool Value { get; }
    public bool IsTrue { get; }
    public bool IsFalse { get; }
    public byte ByteValue { get; }
    public SqlBoolean(bool value);
    public SqlBoolean(int value);
    private SqlBoolean(int value, bool fNull);
    private static SqlBoolean();
    public sealed virtual bool get_IsNull();
    public bool get_Value();
    public bool get_IsTrue();
    public bool get_IsFalse();
    public static SqlBoolean op_Implicit(bool x);
    public static bool op_Explicit(SqlBoolean x);
    public static SqlBoolean op_LogicalNot(SqlBoolean x);
    public static bool op_True(SqlBoolean x);
    public static bool op_False(SqlBoolean x);
    public static SqlBoolean op_BitwiseAnd(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_BitwiseOr(SqlBoolean x, SqlBoolean y);
    public byte get_ByteValue();
    public virtual string ToString();
    public static SqlBoolean Parse(string s);
    public static SqlBoolean op_OnesComplement(SqlBoolean x);
    public static SqlBoolean op_ExclusiveOr(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_Explicit(SqlByte x);
    public static SqlBoolean op_Explicit(SqlInt16 x);
    public static SqlBoolean op_Explicit(SqlInt32 x);
    public static SqlBoolean op_Explicit(SqlInt64 x);
    public static SqlBoolean op_Explicit(SqlDouble x);
    public static SqlBoolean op_Explicit(SqlSingle x);
    public static SqlBoolean op_Explicit(SqlMoney x);
    public static SqlBoolean op_Explicit(SqlDecimal x);
    public static SqlBoolean op_Explicit(SqlString x);
    public static SqlBoolean op_Equality(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_Inequality(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_LessThan(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_GreaterThan(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_LessThanOrEqual(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean OnesComplement(SqlBoolean x);
    public static SqlBoolean And(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean Or(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean Xor(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean Equals(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean NotEquals(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean GreaterThan(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean LessThan(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean GreaterThanOrEquals(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean LessThanOrEquals(SqlBoolean x, SqlBoolean y);
    public SqlByte ToSqlByte();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlDecimal ToSqlDecimal();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlBoolean value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[XmlSchemaProviderAttribute("GetXsdType")]
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.SqlTypes.SqlByte : ValueType {
    private bool m_fNotNull;
    private byte m_value;
    private static int s_iBitNotByteMax;
    public static SqlByte Null;
    public static SqlByte Zero;
    public static SqlByte MinValue;
    public static SqlByte MaxValue;
    public bool IsNull { get; }
    public byte Value { get; }
    private SqlByte(bool fNull);
    public SqlByte(byte value);
    private static SqlByte();
    public sealed virtual bool get_IsNull();
    public byte get_Value();
    public static SqlByte op_Implicit(byte x);
    public static byte op_Explicit(SqlByte x);
    public virtual string ToString();
    public static SqlByte Parse(string s);
    public static SqlByte op_OnesComplement(SqlByte x);
    public static SqlByte op_Addition(SqlByte x, SqlByte y);
    public static SqlByte op_Subtraction(SqlByte x, SqlByte y);
    public static SqlByte op_Multiply(SqlByte x, SqlByte y);
    public static SqlByte op_Division(SqlByte x, SqlByte y);
    public static SqlByte op_Modulus(SqlByte x, SqlByte y);
    public static SqlByte op_BitwiseAnd(SqlByte x, SqlByte y);
    public static SqlByte op_BitwiseOr(SqlByte x, SqlByte y);
    public static SqlByte op_ExclusiveOr(SqlByte x, SqlByte y);
    public static SqlByte op_Explicit(SqlBoolean x);
    public static SqlByte op_Explicit(SqlMoney x);
    public static SqlByte op_Explicit(SqlInt16 x);
    public static SqlByte op_Explicit(SqlInt32 x);
    public static SqlByte op_Explicit(SqlInt64 x);
    public static SqlByte op_Explicit(SqlSingle x);
    public static SqlByte op_Explicit(SqlDouble x);
    public static SqlByte op_Explicit(SqlDecimal x);
    public static SqlByte op_Explicit(SqlString x);
    public static SqlBoolean op_Equality(SqlByte x, SqlByte y);
    public static SqlBoolean op_Inequality(SqlByte x, SqlByte y);
    public static SqlBoolean op_LessThan(SqlByte x, SqlByte y);
    public static SqlBoolean op_GreaterThan(SqlByte x, SqlByte y);
    public static SqlBoolean op_LessThanOrEqual(SqlByte x, SqlByte y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlByte x, SqlByte y);
    public static SqlByte OnesComplement(SqlByte x);
    public static SqlByte Add(SqlByte x, SqlByte y);
    public static SqlByte Subtract(SqlByte x, SqlByte y);
    public static SqlByte Multiply(SqlByte x, SqlByte y);
    public static SqlByte Divide(SqlByte x, SqlByte y);
    public static SqlByte Mod(SqlByte x, SqlByte y);
    public static SqlByte Modulus(SqlByte x, SqlByte y);
    public static SqlByte BitwiseAnd(SqlByte x, SqlByte y);
    public static SqlByte BitwiseOr(SqlByte x, SqlByte y);
    public static SqlByte Xor(SqlByte x, SqlByte y);
    public static SqlBoolean Equals(SqlByte x, SqlByte y);
    public static SqlBoolean NotEquals(SqlByte x, SqlByte y);
    public static SqlBoolean LessThan(SqlByte x, SqlByte y);
    public static SqlBoolean GreaterThan(SqlByte x, SqlByte y);
    public static SqlBoolean LessThanOrEqual(SqlByte x, SqlByte y);
    public static SqlBoolean GreaterThanOrEqual(SqlByte x, SqlByte y);
    public SqlBoolean ToSqlBoolean();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlDecimal ToSqlDecimal();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlByte value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[XmlSchemaProviderAttribute("GetXsdType")]
[DefaultMemberAttribute("Item")]
public class System.Data.SqlTypes.SqlBytes : object {
    internal Byte[] _rgbBuf;
    private long _lCurLen;
    internal Stream _stream;
    private SqlBytesCharsState _state;
    private Byte[] _rgbWorkBuf;
    public bool IsNull { get; }
    public Byte[] Buffer { get; }
    public long Length { get; }
    public long MaxLength { get; }
    public Byte[] Value { get; }
    public byte Item { get; public set; }
    public StorageState Storage { get; }
    public Stream Stream { get; public set; }
    public static SqlBytes Null { get; }
    public SqlBytes(Byte[] buffer);
    public SqlBytes(SqlBinary value);
    public SqlBytes(Stream s);
    public sealed virtual bool get_IsNull();
    public Byte[] get_Buffer();
    public long get_Length();
    public long get_MaxLength();
    public Byte[] get_Value();
    public byte get_Item(long offset);
    public void set_Item(long offset, byte value);
    public StorageState get_Storage();
    public Stream get_Stream();
    public void set_Stream(Stream value);
    public void SetNull();
    public void SetLength(long value);
    public long Read(long offset, Byte[] buffer, int offsetInBuffer, int count);
    public void Write(long offset, Byte[] buffer, int offsetInBuffer, int count);
    public SqlBinary ToSqlBinary();
    public static SqlBinary op_Explicit(SqlBytes value);
    public static SqlBytes op_Explicit(SqlBinary value);
    private void CopyStreamToBuffer();
    internal bool FStream();
    private void SetBuffer(Byte[] buffer);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader r);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    public static SqlBytes get_Null();
}
internal enum System.Data.SqlTypes.SqlBytesCharsState : Enum {
    public int value__;
    public static SqlBytesCharsState Null;
    public static SqlBytesCharsState Buffer;
    public static SqlBytesCharsState Stream;
}
[DefaultMemberAttribute("Item")]
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlChars : object {
    internal Char[] _rgchBuf;
    private long _lCurLen;
    internal SqlStreamChars _stream;
    private SqlBytesCharsState _state;
    private Char[] _rgchWorkBuf;
    public bool IsNull { get; }
    public Char[] Buffer { get; }
    public long Length { get; }
    public long MaxLength { get; }
    public Char[] Value { get; }
    public char Item { get; public set; }
    public StorageState Storage { get; }
    public static SqlChars Null { get; }
    public SqlChars(Char[] buffer);
    public SqlChars(SqlString value);
    public sealed virtual bool get_IsNull();
    public Char[] get_Buffer();
    public long get_Length();
    public long get_MaxLength();
    public Char[] get_Value();
    public char get_Item(long offset);
    public void set_Item(long offset, char value);
    public StorageState get_Storage();
    public void SetNull();
    public void SetLength(long value);
    public long Read(long offset, Char[] buffer, int offsetInBuffer, int count);
    public void Write(long offset, Char[] buffer, int offsetInBuffer, int count);
    public SqlString ToSqlString();
    public static SqlString op_Explicit(SqlChars value);
    public static SqlChars op_Explicit(SqlString value);
    internal bool FStream();
    private void CopyStreamToBuffer();
    private void SetBuffer(Char[] buffer);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader r);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    public static SqlChars get_Null();
}
[FlagsAttribute]
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public enum System.Data.SqlTypes.SqlCompareOptions : Enum {
    public int value__;
    public static SqlCompareOptions None;
    public static SqlCompareOptions IgnoreCase;
    public static SqlCompareOptions IgnoreNonSpace;
    public static SqlCompareOptions IgnoreKanaType;
    public static SqlCompareOptions IgnoreWidth;
    public static SqlCompareOptions BinarySort;
    public static SqlCompareOptions BinarySort2;
}
[XmlSchemaProviderAttribute("GetXsdType")]
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.SqlTypes.SqlDateTime : ValueType {
    private bool m_fNotNull;
    private int m_day;
    private int m_time;
    private static double s_SQLTicksPerMillisecond;
    public static int SQLTicksPerSecond;
    public static int SQLTicksPerMinute;
    public static int SQLTicksPerHour;
    private static int s_SQLTicksPerDay;
    private static long s_ticksPerSecond;
    private static DateTime s_SQLBaseDate;
    private static long s_SQLBaseDateTicks;
    private static int s_minYear;
    private static int s_maxYear;
    private static int s_minDay;
    private static int s_maxDay;
    private static int s_minTime;
    private static int s_maxTime;
    private static int s_dayBase;
    private static Int32[] s_daysToMonth365;
    private static Int32[] s_daysToMonth366;
    private static DateTime s_minDateTime;
    private static DateTime s_maxDateTime;
    private static TimeSpan s_minTimeSpan;
    private static TimeSpan s_maxTimeSpan;
    private static string s_ISO8601_DateTimeFormat;
    private static String[] s_dateTimeFormats;
    public static SqlDateTime MinValue;
    public static SqlDateTime MaxValue;
    public static SqlDateTime Null;
    public bool IsNull { get; }
    public DateTime Value { get; }
    public int DayTicks { get; }
    public int TimeTicks { get; }
    private SqlDateTime(bool fNull);
    public SqlDateTime(DateTime value);
    public SqlDateTime(int year, int month, int day);
    public SqlDateTime(int year, int month, int day, int hour, int minute, int second);
    public SqlDateTime(int year, int month, int day, int hour, int minute, int second, double millisecond);
    public SqlDateTime(int year, int month, int day, int hour, int minute, int second, int bilisecond);
    public SqlDateTime(int dayTicks, int timeTicks);
    private static SqlDateTime();
    public sealed virtual bool get_IsNull();
    private static TimeSpan ToTimeSpan(SqlDateTime value);
    private static DateTime ToDateTime(SqlDateTime value);
    private static SqlDateTime FromTimeSpan(TimeSpan value);
    private static SqlDateTime FromDateTime(DateTime value);
    public DateTime get_Value();
    public int get_DayTicks();
    public int get_TimeTicks();
    public static SqlDateTime op_Implicit(DateTime value);
    public static DateTime op_Explicit(SqlDateTime x);
    public virtual string ToString();
    public static SqlDateTime Parse(string s);
    public static SqlDateTime op_Addition(SqlDateTime x, TimeSpan t);
    public static SqlDateTime op_Subtraction(SqlDateTime x, TimeSpan t);
    public static SqlDateTime Add(SqlDateTime x, TimeSpan t);
    public static SqlDateTime Subtract(SqlDateTime x, TimeSpan t);
    public static SqlDateTime op_Explicit(SqlString x);
    private static bool IsLeapYear(int year);
    public static SqlBoolean op_Equality(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean op_Inequality(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean op_LessThan(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean op_GreaterThan(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean op_LessThanOrEqual(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean Equals(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean NotEquals(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean LessThan(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean GreaterThan(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean LessThanOrEqual(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean GreaterThanOrEqual(SqlDateTime x, SqlDateTime y);
    public SqlString ToSqlString();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlDateTime value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlDecimal : ValueType {
    internal byte _bStatus;
    internal byte _bLen;
    internal byte _bPrec;
    internal byte _bScale;
    internal UInt32 _data1;
    internal UInt32 _data2;
    internal UInt32 _data3;
    internal UInt32 _data4;
    private static byte s_NUMERIC_MAX_PRECISION;
    public static byte MaxPrecision;
    public static byte MaxScale;
    private static byte s_bNullMask;
    private static byte s_bIsNull;
    private static byte s_bNotNull;
    private static byte s_bReverseNullMask;
    private static byte s_bSignMask;
    private static byte s_bPositive;
    private static byte s_bNegative;
    private static byte s_bReverseSignMask;
    private static UInt32 s_uiZero;
    private static int s_cNumeMax;
    private static long s_lInt32Base;
    private static ulong s_ulInt32Base;
    private static ulong s_ulInt32BaseForMod;
    internal static ulong s_llMax;
    private static UInt32 s_ulBase10;
    private static double s_DUINT_BASE;
    private static double s_DUINT_BASE2;
    private static double s_DUINT_BASE3;
    private static double s_DMAX_NUME;
    private static UInt32 s_DBL_DIG;
    private static byte s_cNumeDivScaleMin;
    private static UInt32[] s_rgulShiftBase;
    private static UInt32[] s_decimalHelpersLo;
    private static UInt32[] s_decimalHelpersMid;
    private static UInt32[] s_decimalHelpersHi;
    private static UInt32[] s_decimalHelpersHiHi;
    private static Byte[] s_rgCLenFromPrec;
    private static UInt32 s_ulT1;
    private static UInt32 s_ulT2;
    private static UInt32 s_ulT3;
    private static UInt32 s_ulT4;
    private static UInt32 s_ulT5;
    private static UInt32 s_ulT6;
    private static UInt32 s_ulT7;
    private static UInt32 s_ulT8;
    private static UInt32 s_ulT9;
    private static ulong s_dwlT10;
    private static ulong s_dwlT11;
    private static ulong s_dwlT12;
    private static ulong s_dwlT13;
    private static ulong s_dwlT14;
    private static ulong s_dwlT15;
    private static ulong s_dwlT16;
    private static ulong s_dwlT17;
    private static ulong s_dwlT18;
    private static ulong s_dwlT19;
    public static SqlDecimal Null;
    public static SqlDecimal MinValue;
    public static SqlDecimal MaxValue;
    public bool IsNull { get; }
    public decimal Value { get; }
    public bool IsPositive { get; }
    public byte Precision { get; }
    public byte Scale { get; }
    public Int32[] Data { get; }
    public Byte[] BinData { get; }
    private SqlDecimal(bool fNull);
    public SqlDecimal(decimal value);
    public SqlDecimal(int value);
    public SqlDecimal(long value);
    public SqlDecimal(byte bPrecision, byte bScale, bool fPositive, Int32[] bits);
    public SqlDecimal(byte bPrecision, byte bScale, bool fPositive, int data1, int data2, int data3, int data4);
    public SqlDecimal(double dVal);
    private SqlDecimal(UInt32[] rglData, byte bLen, byte bPrec, byte bScale, bool fPositive);
    private static SqlDecimal();
    private byte CalculatePrecision();
    private bool VerifyPrecision(byte precision);
    public sealed virtual bool get_IsNull();
    public decimal get_Value();
    public bool get_IsPositive();
    private void SetPositive();
    private void SetSignBit(bool fPositive);
    public byte get_Precision();
    public byte get_Scale();
    public Int32[] get_Data();
    public Byte[] get_BinData();
    public virtual string ToString();
    public static SqlDecimal Parse(string s);
    public double ToDouble();
    private decimal ToDecimal();
    public static SqlDecimal op_Implicit(decimal x);
    public static SqlDecimal op_Explicit(double x);
    public static SqlDecimal op_Implicit(long x);
    public static decimal op_Explicit(SqlDecimal x);
    public static SqlDecimal op_UnaryNegation(SqlDecimal x);
    public static SqlDecimal op_Addition(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal op_Subtraction(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal op_Multiply(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal op_Division(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal op_Explicit(SqlBoolean x);
    public static SqlDecimal op_Implicit(SqlByte x);
    public static SqlDecimal op_Implicit(SqlInt16 x);
    public static SqlDecimal op_Implicit(SqlInt32 x);
    public static SqlDecimal op_Implicit(SqlInt64 x);
    public static SqlDecimal op_Implicit(SqlMoney x);
    public static SqlDecimal op_Explicit(SqlSingle x);
    public static SqlDecimal op_Explicit(SqlDouble x);
    public static SqlDecimal op_Explicit(SqlString x);
    private static void ZeroToMaxLen(UInt32[] rgulData, int cUI4sCur);
    private static byte CLenFromPrec(byte bPrec);
    private bool FZero();
    private bool FGt10_38();
    private bool FGt10_38(UInt32[] rglData);
    private static byte BGetPrecUI4(UInt32 value);
    private static byte BGetPrecUI8(ulong dwlVal);
    private void AddULong(UInt32 ulAdd);
    private void MultByULong(UInt32 uiMultiplier);
    private UInt32 DivByULong(UInt32 iDivisor);
    internal void AdjustScale(int digits, bool fRound);
    public static SqlDecimal AdjustScale(SqlDecimal n, int digits, bool fRound);
    public static SqlDecimal ConvertToPrecScale(SqlDecimal n, int precision, int scale);
    private int LAbsCmp(SqlDecimal snumOp);
    private static void MpMove(UInt32[] rgulS, int ciulS, UInt32[] rgulD, Int32& ciulD);
    private static void MpSet(UInt32[] rgulD, Int32& ciulD, UInt32 iulN);
    private static void MpNormalize(UInt32[] rgulU, Int32& ciulU);
    private static void MpMul1(UInt32[] piulD, Int32& ciulD, UInt32 iulX);
    private static void MpDiv1(UInt32[] rgulU, Int32& ciulU, UInt32 iulD, UInt32& iulR);
    internal static ulong DWL(UInt32 lo, UInt32 hi);
    private static UInt32 HI(ulong x);
    private static UInt32 LO(ulong x);
    private static void MpDiv(UInt32[] rgulU, int ciulU, UInt32[] rgulD, int ciulD, UInt32[] rgulQ, Int32& ciulQ, UInt32[] rgulR, Int32& ciulR);
    private EComparison CompareNm(SqlDecimal snumOp);
    private static void CheckValidPrecScale(byte bPrec, byte bScale);
    private static void CheckValidPrecScale(int iPrec, int iScale);
    public static SqlBoolean op_Equality(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean op_Inequality(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean op_LessThan(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean op_GreaterThan(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean op_LessThanOrEqual(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal Add(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal Subtract(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal Multiply(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal Divide(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean Equals(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean NotEquals(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean LessThan(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean GreaterThan(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean LessThanOrEqual(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean GreaterThanOrEqual(SqlDecimal x, SqlDecimal y);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    private static char ChFromDigit(UInt32 uiDigit);
    private void StoreFromWorkingArray(UInt32[] rguiData);
    private void SetToZero();
    private void MakeInteger(Boolean& fFraction);
    public static SqlDecimal Abs(SqlDecimal n);
    public static SqlDecimal Ceiling(SqlDecimal n);
    public static SqlDecimal Floor(SqlDecimal n);
    public static SqlInt32 Sign(SqlDecimal n);
    private static SqlDecimal Round(SqlDecimal n, int lPosition, bool fTruncate);
    public static SqlDecimal Round(SqlDecimal n, int position);
    public static SqlDecimal Truncate(SqlDecimal n, int position);
    public static SqlDecimal Power(SqlDecimal n, double exp);
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlDecimal value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlDouble : ValueType {
    private bool m_fNotNull;
    private double m_value;
    public static SqlDouble Null;
    public static SqlDouble Zero;
    public static SqlDouble MinValue;
    public static SqlDouble MaxValue;
    public bool IsNull { get; }
    public double Value { get; }
    private SqlDouble(bool fNull);
    public SqlDouble(double value);
    private static SqlDouble();
    public sealed virtual bool get_IsNull();
    public double get_Value();
    public static SqlDouble op_Implicit(double x);
    public static double op_Explicit(SqlDouble x);
    public virtual string ToString();
    public static SqlDouble Parse(string s);
    public static SqlDouble op_UnaryNegation(SqlDouble x);
    public static SqlDouble op_Addition(SqlDouble x, SqlDouble y);
    public static SqlDouble op_Subtraction(SqlDouble x, SqlDouble y);
    public static SqlDouble op_Multiply(SqlDouble x, SqlDouble y);
    public static SqlDouble op_Division(SqlDouble x, SqlDouble y);
    public static SqlDouble op_Explicit(SqlBoolean x);
    public static SqlDouble op_Implicit(SqlByte x);
    public static SqlDouble op_Implicit(SqlInt16 x);
    public static SqlDouble op_Implicit(SqlInt32 x);
    public static SqlDouble op_Implicit(SqlInt64 x);
    public static SqlDouble op_Implicit(SqlSingle x);
    public static SqlDouble op_Implicit(SqlMoney x);
    public static SqlDouble op_Implicit(SqlDecimal x);
    public static SqlDouble op_Explicit(SqlString x);
    public static SqlBoolean op_Equality(SqlDouble x, SqlDouble y);
    public static SqlBoolean op_Inequality(SqlDouble x, SqlDouble y);
    public static SqlBoolean op_LessThan(SqlDouble x, SqlDouble y);
    public static SqlBoolean op_GreaterThan(SqlDouble x, SqlDouble y);
    public static SqlBoolean op_LessThanOrEqual(SqlDouble x, SqlDouble y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlDouble x, SqlDouble y);
    public static SqlDouble Add(SqlDouble x, SqlDouble y);
    public static SqlDouble Subtract(SqlDouble x, SqlDouble y);
    public static SqlDouble Multiply(SqlDouble x, SqlDouble y);
    public static SqlDouble Divide(SqlDouble x, SqlDouble y);
    public static SqlBoolean Equals(SqlDouble x, SqlDouble y);
    public static SqlBoolean NotEquals(SqlDouble x, SqlDouble y);
    public static SqlBoolean LessThan(SqlDouble x, SqlDouble y);
    public static SqlBoolean GreaterThan(SqlDouble x, SqlDouble y);
    public static SqlBoolean LessThanOrEqual(SqlDouble x, SqlDouble y);
    public static SqlBoolean GreaterThanOrEqual(SqlDouble x, SqlDouble y);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlDecimal ToSqlDecimal();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlDouble value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[XmlSchemaProviderAttribute("GetXsdType")]
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.SqlTypes.SqlGuid : ValueType {
    private static int s_sizeOfGuid;
    private static Int32[] s_rgiGuidOrder;
    private Byte[] m_value;
    public static SqlGuid Null;
    public bool IsNull { get; }
    public Guid Value { get; }
    private SqlGuid(bool fNull);
    public SqlGuid(Byte[] value);
    public SqlGuid(string s);
    public SqlGuid(Guid g);
    public SqlGuid(int a, short b, short c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k);
    private static SqlGuid();
    public sealed virtual bool get_IsNull();
    public Guid get_Value();
    public static SqlGuid op_Implicit(Guid x);
    public static Guid op_Explicit(SqlGuid x);
    public Byte[] ToByteArray();
    public virtual string ToString();
    public static SqlGuid Parse(string s);
    private static EComparison Compare(SqlGuid x, SqlGuid y);
    public static SqlGuid op_Explicit(SqlString x);
    public static SqlGuid op_Explicit(SqlBinary x);
    public static SqlBoolean op_Equality(SqlGuid x, SqlGuid y);
    public static SqlBoolean op_Inequality(SqlGuid x, SqlGuid y);
    public static SqlBoolean op_LessThan(SqlGuid x, SqlGuid y);
    public static SqlBoolean op_GreaterThan(SqlGuid x, SqlGuid y);
    public static SqlBoolean op_LessThanOrEqual(SqlGuid x, SqlGuid y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlGuid x, SqlGuid y);
    public static SqlBoolean Equals(SqlGuid x, SqlGuid y);
    public static SqlBoolean NotEquals(SqlGuid x, SqlGuid y);
    public static SqlBoolean LessThan(SqlGuid x, SqlGuid y);
    public static SqlBoolean GreaterThan(SqlGuid x, SqlGuid y);
    public static SqlBoolean LessThanOrEqual(SqlGuid x, SqlGuid y);
    public static SqlBoolean GreaterThanOrEqual(SqlGuid x, SqlGuid y);
    public SqlString ToSqlString();
    public SqlBinary ToSqlBinary();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlGuid value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlInt16 : ValueType {
    private bool m_fNotNull;
    private short m_value;
    private static int s_MASKI2;
    public static SqlInt16 Null;
    public static SqlInt16 Zero;
    public static SqlInt16 MinValue;
    public static SqlInt16 MaxValue;
    public bool IsNull { get; }
    public short Value { get; }
    private SqlInt16(bool fNull);
    public SqlInt16(short value);
    private static SqlInt16();
    public sealed virtual bool get_IsNull();
    public short get_Value();
    public static SqlInt16 op_Implicit(short x);
    public static short op_Explicit(SqlInt16 x);
    public virtual string ToString();
    public static SqlInt16 Parse(string s);
    public static SqlInt16 op_UnaryNegation(SqlInt16 x);
    public static SqlInt16 op_OnesComplement(SqlInt16 x);
    public static SqlInt16 op_Addition(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_Subtraction(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_Multiply(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_Division(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_Modulus(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_BitwiseAnd(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_BitwiseOr(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_ExclusiveOr(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_Explicit(SqlBoolean x);
    public static SqlInt16 op_Implicit(SqlByte x);
    public static SqlInt16 op_Explicit(SqlInt32 x);
    public static SqlInt16 op_Explicit(SqlInt64 x);
    public static SqlInt16 op_Explicit(SqlSingle x);
    public static SqlInt16 op_Explicit(SqlDouble x);
    public static SqlInt16 op_Explicit(SqlMoney x);
    public static SqlInt16 op_Explicit(SqlDecimal x);
    public static SqlInt16 op_Explicit(SqlString x);
    public static SqlBoolean op_Equality(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean op_Inequality(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean op_LessThan(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean op_GreaterThan(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean op_LessThanOrEqual(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 OnesComplement(SqlInt16 x);
    public static SqlInt16 Add(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 Subtract(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 Multiply(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 Divide(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 Mod(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 Modulus(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 BitwiseAnd(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 BitwiseOr(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 Xor(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean Equals(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean NotEquals(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean LessThan(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean GreaterThan(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean LessThanOrEqual(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean GreaterThanOrEqual(SqlInt16 x, SqlInt16 y);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDouble ToSqlDouble();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlDecimal ToSqlDecimal();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlInt16 value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[XmlSchemaProviderAttribute("GetXsdType")]
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.SqlTypes.SqlInt32 : ValueType {
    private bool m_fNotNull;
    private int m_value;
    private static long s_iIntMin;
    private static long s_lBitNotIntMax;
    public static SqlInt32 Null;
    public static SqlInt32 Zero;
    public static SqlInt32 MinValue;
    public static SqlInt32 MaxValue;
    public bool IsNull { get; }
    public int Value { get; }
    private SqlInt32(bool fNull);
    public SqlInt32(int value);
    private static SqlInt32();
    public sealed virtual bool get_IsNull();
    public int get_Value();
    public static SqlInt32 op_Implicit(int x);
    public static int op_Explicit(SqlInt32 x);
    public virtual string ToString();
    public static SqlInt32 Parse(string s);
    public static SqlInt32 op_UnaryNegation(SqlInt32 x);
    public static SqlInt32 op_OnesComplement(SqlInt32 x);
    public static SqlInt32 op_Addition(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_Subtraction(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_Multiply(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_Division(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_Modulus(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_BitwiseAnd(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_BitwiseOr(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_ExclusiveOr(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_Explicit(SqlBoolean x);
    public static SqlInt32 op_Implicit(SqlByte x);
    public static SqlInt32 op_Implicit(SqlInt16 x);
    public static SqlInt32 op_Explicit(SqlInt64 x);
    public static SqlInt32 op_Explicit(SqlSingle x);
    public static SqlInt32 op_Explicit(SqlDouble x);
    public static SqlInt32 op_Explicit(SqlMoney x);
    public static SqlInt32 op_Explicit(SqlDecimal x);
    public static SqlInt32 op_Explicit(SqlString x);
    private static bool SameSignInt(int x, int y);
    public static SqlBoolean op_Equality(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean op_Inequality(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean op_LessThan(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean op_GreaterThan(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean op_LessThanOrEqual(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 OnesComplement(SqlInt32 x);
    public static SqlInt32 Add(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 Subtract(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 Multiply(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 Divide(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 Mod(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 Modulus(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 BitwiseAnd(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 BitwiseOr(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 Xor(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean Equals(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean NotEquals(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean LessThan(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean GreaterThan(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean LessThanOrEqual(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean GreaterThanOrEqual(SqlInt32 x, SqlInt32 y);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlDecimal ToSqlDecimal();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlInt32 value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[XmlSchemaProviderAttribute("GetXsdType")]
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.SqlTypes.SqlInt64 : ValueType {
    private bool m_fNotNull;
    private long m_value;
    private static long s_lLowIntMask;
    private static long s_lHighIntMask;
    public static SqlInt64 Null;
    public static SqlInt64 Zero;
    public static SqlInt64 MinValue;
    public static SqlInt64 MaxValue;
    public bool IsNull { get; }
    public long Value { get; }
    private SqlInt64(bool fNull);
    public SqlInt64(long value);
    private static SqlInt64();
    public sealed virtual bool get_IsNull();
    public long get_Value();
    public static SqlInt64 op_Implicit(long x);
    public static long op_Explicit(SqlInt64 x);
    public virtual string ToString();
    public static SqlInt64 Parse(string s);
    public static SqlInt64 op_UnaryNegation(SqlInt64 x);
    public static SqlInt64 op_OnesComplement(SqlInt64 x);
    public static SqlInt64 op_Addition(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_Subtraction(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_Multiply(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_Division(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_Modulus(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_BitwiseAnd(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_BitwiseOr(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_ExclusiveOr(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_Explicit(SqlBoolean x);
    public static SqlInt64 op_Implicit(SqlByte x);
    public static SqlInt64 op_Implicit(SqlInt16 x);
    public static SqlInt64 op_Implicit(SqlInt32 x);
    public static SqlInt64 op_Explicit(SqlSingle x);
    public static SqlInt64 op_Explicit(SqlDouble x);
    public static SqlInt64 op_Explicit(SqlMoney x);
    public static SqlInt64 op_Explicit(SqlDecimal x);
    public static SqlInt64 op_Explicit(SqlString x);
    private static bool SameSignLong(long x, long y);
    public static SqlBoolean op_Equality(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean op_Inequality(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean op_LessThan(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean op_GreaterThan(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean op_LessThanOrEqual(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 OnesComplement(SqlInt64 x);
    public static SqlInt64 Add(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 Subtract(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 Multiply(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 Divide(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 Mod(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 Modulus(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 BitwiseAnd(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 BitwiseOr(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 Xor(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean Equals(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean NotEquals(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean LessThan(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean GreaterThan(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean LessThanOrEqual(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean GreaterThanOrEqual(SqlInt64 x, SqlInt64 y);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlMoney ToSqlMoney();
    public SqlDecimal ToSqlDecimal();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlInt64 value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlMoney : ValueType {
    private bool _fNotNull;
    private long _value;
    internal static int s_iMoneyScale;
    private static long s_lTickBase;
    private static double s_dTickBase;
    private static long s_minLong;
    private static long s_maxLong;
    public static SqlMoney Null;
    public static SqlMoney Zero;
    public static SqlMoney MinValue;
    public static SqlMoney MaxValue;
    public bool IsNull { get; }
    public decimal Value { get; }
    private SqlMoney(bool fNull);
    internal SqlMoney(long value, int ignored);
    public SqlMoney(int value);
    public SqlMoney(long value);
    public SqlMoney(decimal value);
    public SqlMoney(double value);
    private static SqlMoney();
    public sealed virtual bool get_IsNull();
    public decimal get_Value();
    public decimal ToDecimal();
    public long ToInt64();
    public int ToInt32();
    public double ToDouble();
    public static SqlMoney op_Implicit(decimal x);
    public static SqlMoney op_Explicit(double x);
    public static SqlMoney op_Implicit(long x);
    public static decimal op_Explicit(SqlMoney x);
    public virtual string ToString();
    public static SqlMoney Parse(string s);
    public static SqlMoney op_UnaryNegation(SqlMoney x);
    public static SqlMoney op_Addition(SqlMoney x, SqlMoney y);
    public static SqlMoney op_Subtraction(SqlMoney x, SqlMoney y);
    public static SqlMoney op_Multiply(SqlMoney x, SqlMoney y);
    public static SqlMoney op_Division(SqlMoney x, SqlMoney y);
    public static SqlMoney op_Explicit(SqlBoolean x);
    public static SqlMoney op_Implicit(SqlByte x);
    public static SqlMoney op_Implicit(SqlInt16 x);
    public static SqlMoney op_Implicit(SqlInt32 x);
    public static SqlMoney op_Implicit(SqlInt64 x);
    public static SqlMoney op_Explicit(SqlSingle x);
    public static SqlMoney op_Explicit(SqlDouble x);
    public static SqlMoney op_Explicit(SqlDecimal x);
    public static SqlMoney op_Explicit(SqlString x);
    public static SqlBoolean op_Equality(SqlMoney x, SqlMoney y);
    public static SqlBoolean op_Inequality(SqlMoney x, SqlMoney y);
    public static SqlBoolean op_LessThan(SqlMoney x, SqlMoney y);
    public static SqlBoolean op_GreaterThan(SqlMoney x, SqlMoney y);
    public static SqlBoolean op_LessThanOrEqual(SqlMoney x, SqlMoney y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlMoney x, SqlMoney y);
    public static SqlMoney Add(SqlMoney x, SqlMoney y);
    public static SqlMoney Subtract(SqlMoney x, SqlMoney y);
    public static SqlMoney Multiply(SqlMoney x, SqlMoney y);
    public static SqlMoney Divide(SqlMoney x, SqlMoney y);
    public static SqlBoolean Equals(SqlMoney x, SqlMoney y);
    public static SqlBoolean NotEquals(SqlMoney x, SqlMoney y);
    public static SqlBoolean LessThan(SqlMoney x, SqlMoney y);
    public static SqlBoolean GreaterThan(SqlMoney x, SqlMoney y);
    public static SqlBoolean LessThanOrEqual(SqlMoney x, SqlMoney y);
    public static SqlBoolean GreaterThanOrEqual(SqlMoney x, SqlMoney y);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlDecimal ToSqlDecimal();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlMoney value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.SqlTypes.SqlNotFilledException : SqlTypeException {
    public SqlNotFilledException(string message);
    public SqlNotFilledException(string message, Exception e);
    private SqlNotFilledException(SerializationInfo si, StreamingContext sc);
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.SqlTypes.SqlNullValueException : SqlTypeException {
    public SqlNullValueException(string message);
    public SqlNullValueException(string message, Exception e);
    private SqlNullValueException(SerializationInfo si, StreamingContext sc);
    private static SerializationInfo SqlNullValueExceptionSerialization(SerializationInfo si, StreamingContext sc);
}
internal static class System.Data.SqlTypes.SQLResource : object {
    internal static string NullString { get; }
    internal static string ArithOverflowMessage { get; }
    internal static string DivideByZeroMessage { get; }
    internal static string NullValueMessage { get; }
    internal static string TruncationMessage { get; }
    internal static string DateTimeOverflowMessage { get; }
    internal static string ConcatDiffCollationMessage { get; }
    internal static string CompareDiffCollationMessage { get; }
    internal static string ConversionOverflowMessage { get; }
    internal static string InvalidDateTimeMessage { get; }
    internal static string TimeZoneSpecifiedMessage { get; }
    internal static string InvalidArraySizeMessage { get; }
    internal static string InvalidPrecScaleMessage { get; }
    internal static string FormatMessage { get; }
    internal static string NotFilledMessage { get; }
    internal static string AlreadyFilledMessage { get; }
    internal static string ClosedXmlReaderMessage { get; }
    internal static string get_NullString();
    internal static string get_ArithOverflowMessage();
    internal static string get_DivideByZeroMessage();
    internal static string get_NullValueMessage();
    internal static string get_TruncationMessage();
    internal static string get_DateTimeOverflowMessage();
    internal static string get_ConcatDiffCollationMessage();
    internal static string get_CompareDiffCollationMessage();
    internal static string get_ConversionOverflowMessage();
    internal static string get_InvalidDateTimeMessage();
    internal static string get_TimeZoneSpecifiedMessage();
    internal static string get_InvalidArraySizeMessage();
    internal static string get_InvalidPrecScaleMessage();
    internal static string get_FormatMessage();
    internal static string get_NotFilledMessage();
    internal static string get_AlreadyFilledMessage();
    internal static string get_ClosedXmlReaderMessage();
    internal static string InvalidOpStreamClosed(string method);
    internal static string InvalidOpStreamNonWritable(string method);
    internal static string InvalidOpStreamNonReadable(string method);
    internal static string InvalidOpStreamNonSeekable(string method);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlSingle : ValueType {
    private bool _fNotNull;
    private float _value;
    public static SqlSingle Null;
    public static SqlSingle Zero;
    public static SqlSingle MinValue;
    public static SqlSingle MaxValue;
    public bool IsNull { get; }
    public float Value { get; }
    private SqlSingle(bool fNull);
    public SqlSingle(float value);
    public SqlSingle(double value);
    private static SqlSingle();
    public sealed virtual bool get_IsNull();
    public float get_Value();
    public static SqlSingle op_Implicit(float x);
    public static float op_Explicit(SqlSingle x);
    public virtual string ToString();
    public static SqlSingle Parse(string s);
    public static SqlSingle op_UnaryNegation(SqlSingle x);
    public static SqlSingle op_Addition(SqlSingle x, SqlSingle y);
    public static SqlSingle op_Subtraction(SqlSingle x, SqlSingle y);
    public static SqlSingle op_Multiply(SqlSingle x, SqlSingle y);
    public static SqlSingle op_Division(SqlSingle x, SqlSingle y);
    public static SqlSingle op_Explicit(SqlBoolean x);
    public static SqlSingle op_Implicit(SqlByte x);
    public static SqlSingle op_Implicit(SqlInt16 x);
    public static SqlSingle op_Implicit(SqlInt32 x);
    public static SqlSingle op_Implicit(SqlInt64 x);
    public static SqlSingle op_Implicit(SqlMoney x);
    public static SqlSingle op_Implicit(SqlDecimal x);
    public static SqlSingle op_Explicit(SqlDouble x);
    public static SqlSingle op_Explicit(SqlString x);
    public static SqlBoolean op_Equality(SqlSingle x, SqlSingle y);
    public static SqlBoolean op_Inequality(SqlSingle x, SqlSingle y);
    public static SqlBoolean op_LessThan(SqlSingle x, SqlSingle y);
    public static SqlBoolean op_GreaterThan(SqlSingle x, SqlSingle y);
    public static SqlBoolean op_LessThanOrEqual(SqlSingle x, SqlSingle y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlSingle x, SqlSingle y);
    public static SqlSingle Add(SqlSingle x, SqlSingle y);
    public static SqlSingle Subtract(SqlSingle x, SqlSingle y);
    public static SqlSingle Multiply(SqlSingle x, SqlSingle y);
    public static SqlSingle Divide(SqlSingle x, SqlSingle y);
    public static SqlBoolean Equals(SqlSingle x, SqlSingle y);
    public static SqlBoolean NotEquals(SqlSingle x, SqlSingle y);
    public static SqlBoolean LessThan(SqlSingle x, SqlSingle y);
    public static SqlBoolean GreaterThan(SqlSingle x, SqlSingle y);
    public static SqlBoolean LessThanOrEqual(SqlSingle x, SqlSingle y);
    public static SqlBoolean GreaterThanOrEqual(SqlSingle x, SqlSingle y);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlDecimal ToSqlDecimal();
    public SqlString ToSqlString();
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlSingle value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
internal class System.Data.SqlTypes.SqlStreamChars : object {
    private SqlChars _sqlchars;
    private long _lPosition;
    public long Length { get; }
    public long Position { get; }
    public long get_Length();
    public long get_Position();
    public long Seek(long offset, SeekOrigin origin);
    public int Read(Char[] buffer, int offset, int count);
    public void Write(Char[] buffer, int offset, int count);
    public void SetLength(long value);
    private bool FClosed();
    private void CheckIfStreamClosed(string methodname);
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlString : ValueType {
    private string m_value;
    private CompareInfo m_cmpInfo;
    private int m_lcid;
    private SqlCompareOptions m_flag;
    private bool m_fNotNull;
    public static SqlString Null;
    internal static UnicodeEncoding s_unicodeEncoding;
    public static int IgnoreCase;
    public static int IgnoreWidth;
    public static int IgnoreNonSpace;
    public static int IgnoreKanaType;
    public static int BinarySort;
    public static int BinarySort2;
    private static SqlCompareOptions s_iDefaultFlag;
    private static CompareOptions s_iValidCompareOptionMask;
    internal static SqlCompareOptions s_iValidSqlCompareOptionMask;
    internal static int s_lcidUSEnglish;
    private static int s_lcidBinary;
    public bool IsNull { get; }
    public string Value { get; }
    public int LCID { get; }
    public CultureInfo CultureInfo { get; }
    public CompareInfo CompareInfo { get; }
    public SqlCompareOptions SqlCompareOptions { get; }
    private SqlString(bool fNull);
    public SqlString(int lcid, SqlCompareOptions compareOptions, Byte[] data, int index, int count, bool fUnicode);
    public SqlString(int lcid, SqlCompareOptions compareOptions, Byte[] data, bool fUnicode);
    public SqlString(int lcid, SqlCompareOptions compareOptions, Byte[] data, int index, int count);
    public SqlString(int lcid, SqlCompareOptions compareOptions, Byte[] data);
    public SqlString(string data, int lcid, SqlCompareOptions compareOptions);
    public SqlString(string data, int lcid);
    public SqlString(string data);
    private SqlString(int lcid, SqlCompareOptions compareOptions, string data, CompareInfo cmpInfo);
    private static SqlString();
    public sealed virtual bool get_IsNull();
    public string get_Value();
    public int get_LCID();
    public CultureInfo get_CultureInfo();
    private void SetCompareInfo();
    public CompareInfo get_CompareInfo();
    public SqlCompareOptions get_SqlCompareOptions();
    public static SqlString op_Implicit(string x);
    public static string op_Explicit(SqlString x);
    public virtual string ToString();
    public Byte[] GetUnicodeBytes();
    public Byte[] GetNonUnicodeBytes();
    public static SqlString op_Addition(SqlString x, SqlString y);
    private static int StringCompare(SqlString x, SqlString y);
    private static SqlBoolean Compare(SqlString x, SqlString y, EComparison ecExpectedResult);
    public static SqlString op_Explicit(SqlBoolean x);
    public static SqlString op_Explicit(SqlByte x);
    public static SqlString op_Explicit(SqlInt16 x);
    public static SqlString op_Explicit(SqlInt32 x);
    public static SqlString op_Explicit(SqlInt64 x);
    public static SqlString op_Explicit(SqlSingle x);
    public static SqlString op_Explicit(SqlDouble x);
    public static SqlString op_Explicit(SqlDecimal x);
    public static SqlString op_Explicit(SqlMoney x);
    public static SqlString op_Explicit(SqlDateTime x);
    public static SqlString op_Explicit(SqlGuid x);
    public SqlString Clone();
    public static SqlBoolean op_Equality(SqlString x, SqlString y);
    public static SqlBoolean op_Inequality(SqlString x, SqlString y);
    public static SqlBoolean op_LessThan(SqlString x, SqlString y);
    public static SqlBoolean op_GreaterThan(SqlString x, SqlString y);
    public static SqlBoolean op_LessThanOrEqual(SqlString x, SqlString y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlString x, SqlString y);
    public static SqlString Concat(SqlString x, SqlString y);
    public static SqlString Add(SqlString x, SqlString y);
    public static SqlBoolean Equals(SqlString x, SqlString y);
    public static SqlBoolean NotEquals(SqlString x, SqlString y);
    public static SqlBoolean LessThan(SqlString x, SqlString y);
    public static SqlBoolean GreaterThan(SqlString x, SqlString y);
    public static SqlBoolean LessThanOrEqual(SqlString x, SqlString y);
    public static SqlBoolean GreaterThanOrEqual(SqlString x, SqlString y);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDateTime ToSqlDateTime();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlDecimal ToSqlDecimal();
    public SqlSingle ToSqlSingle();
    public SqlGuid ToSqlGuid();
    private static void ValidateSqlCompareOptions(SqlCompareOptions compareOptions);
    public static CompareOptions CompareOptionsFromSqlCompareOptions(SqlCompareOptions compareOptions);
    private bool FBinarySort();
    private static int CompareBinary(SqlString x, SqlString y);
    private static int CompareBinary2(SqlString x, SqlString y);
    public sealed virtual int CompareTo(object value);
    public int CompareTo(SqlString value);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.SqlTypes.SqlTruncateException : SqlTypeException {
    public SqlTruncateException(string message);
    public SqlTruncateException(string message, Exception e);
    private SqlTruncateException(SerializationInfo si, StreamingContext sc);
    private static SerializationInfo SqlTruncateExceptionSerialization(SerializationInfo si, StreamingContext sc);
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.SqlTypes.SqlTypeException : SystemException {
    public SqlTypeException(string message);
    public SqlTypeException(string message, Exception e);
    protected SqlTypeException(SerializationInfo si, StreamingContext sc);
    private static SerializationInfo SqlTypeExceptionSerialization(SerializationInfo si, StreamingContext sc);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlXml : object {
    private static Func`4<Stream, XmlReaderSettings, XmlParserContext, XmlReader> s_sqlReaderDelegate;
    private static XmlReaderSettings s_defaultXmlReaderSettings;
    private static XmlReaderSettings s_defaultXmlReaderSettingsCloseInput;
    private static MethodInfo s_createSqlReaderMethodInfo;
    private MethodInfo _createSqlReaderMethodInfo;
    private bool _fNotNull;
    private Stream _stream;
    private bool _firstCreateReader;
    private static MethodInfo CreateSqlReaderMethodInfo { get; }
    public bool IsNull { get; }
    public string Value { get; }
    public static SqlXml Null { get; }
    private SqlXml(bool fNull);
    public SqlXml(XmlReader value);
    public SqlXml(Stream value);
    private static SqlXml();
    public XmlReader CreateReader();
    internal static XmlReader CreateSqlXmlReader(Stream stream, bool closeInput, bool throwTargetInvocationExceptions);
    private static Func`4<Stream, XmlReaderSettings, XmlParserContext, XmlReader> CreateSqlReaderDelegate();
    private static MethodInfo get_CreateSqlReaderMethodInfo();
    public sealed virtual bool get_IsNull();
    public string get_Value();
    public static SqlXml get_Null();
    private void SetNull();
    private Stream CreateMemoryStreamFromXmlReader(XmlReader reader);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader r);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
}
internal class System.Data.SqlTypes.SqlXmlStreamWrapper : Stream {
    private Stream _stream;
    private long _lPosition;
    private bool _isClosed;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal SqlXmlStreamWrapper(Stream stream);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual void WriteByte(byte value);
    public virtual void SetLength(long value);
    public virtual void Flush();
    protected virtual void Dispose(bool disposing);
    private void ThrowIfStreamCannotSeek(string method);
    private void ThrowIfStreamCannotRead(string method);
    private void ThrowIfStreamCannotWrite(string method);
    private void ThrowIfStreamClosed(string method);
    private bool IsStreamClosed();
}
public enum System.Data.SqlTypes.StorageState : Enum {
    public int value__;
    public static StorageState Buffer;
    public static StorageState Stream;
    public static StorageState UnmanagedBuffer;
}
internal class System.Data.SqlTypes.StreamOnSqlBytes : Stream {
    private SqlBytes _sb;
    private long _lPosition;
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public long Length { get; }
    public long Position { get; public set; }
    internal StreamOnSqlBytes(SqlBytes sb);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual void WriteByte(byte value);
    public virtual void SetLength(long value);
    public virtual void Flush();
    protected virtual void Dispose(bool disposing);
    private bool FClosed();
    private void CheckIfStreamClosed(string methodname);
}
public class System.Data.StateChangeEventArgs : EventArgs {
    private ConnectionState _originalState;
    private ConnectionState _currentState;
    public ConnectionState CurrentState { get; }
    public ConnectionState OriginalState { get; }
    public StateChangeEventArgs(ConnectionState originalState, ConnectionState currentState);
    public ConnectionState get_CurrentState();
    public ConnectionState get_OriginalState();
}
public class System.Data.StateChangeEventHandler : MulticastDelegate {
    public StateChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, StateChangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, StateChangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.StatementCompletedEventArgs : EventArgs {
    [CompilerGeneratedAttribute]
private int <RecordCount>k__BackingField;
    public int RecordCount { get; }
    public StatementCompletedEventArgs(int recordCount);
    [CompilerGeneratedAttribute]
public int get_RecordCount();
}
public class System.Data.StatementCompletedEventHandler : MulticastDelegate {
    public StatementCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, StatementCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, StatementCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Data.StatementType : Enum {
    public int value__;
    public static StatementType Select;
    public static StatementType Insert;
    public static StatementType Update;
    public static StatementType Delete;
    public static StatementType Batch;
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.StrongTypingException : DataException {
    protected StrongTypingException(SerializationInfo info, StreamingContext context);
    public StrongTypingException(string message);
    public StrongTypingException(string s, Exception innerException);
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.SyntaxErrorException : InvalidExpressionException {
    protected SyntaxErrorException(SerializationInfo info, StreamingContext context);
    public SyntaxErrorException(string s);
    public SyntaxErrorException(string message, Exception innerException);
}
internal enum System.Data.Tokens : Enum {
    public int value__;
    public static Tokens None;
    public static Tokens Name;
    public static Tokens Numeric;
    public static Tokens Decimal;
    public static Tokens Float;
    public static Tokens BinaryConst;
    public static Tokens StringConst;
    public static Tokens Date;
    public static Tokens ListSeparator;
    public static Tokens LeftParen;
    public static Tokens RightParen;
    public static Tokens ZeroOp;
    public static Tokens UnaryOp;
    public static Tokens BinaryOp;
    public static Tokens Child;
    public static Tokens Parent;
    public static Tokens Dot;
    public static Tokens Unknown;
    public static Tokens EOS;
}
internal enum System.Data.TreeAccessMethod : Enum {
    public int value__;
    public static TreeAccessMethod KEY_SEARCH_AND_INDEX;
    public static TreeAccessMethod INDEX_ONLY;
}
public abstract class System.Data.TypedTableBase`1 : DataTable {
    protected TypedTableBase`1(SerializationInfo info, StreamingContext context);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public EnumerableRowCollection`1<TResult> Cast();
}
[ExtensionAttribute]
public static class System.Data.TypedTableBaseExtensions : object {
    [ExtensionAttribute]
public static EnumerableRowCollection`1<TRow> Where(TypedTableBase`1<TRow> source, Func`2<TRow, bool> predicate);
    [ExtensionAttribute]
public static OrderedEnumerableRowCollection`1<TRow> OrderBy(TypedTableBase`1<TRow> source, Func`2<TRow, TKey> keySelector);
    [ExtensionAttribute]
public static OrderedEnumerableRowCollection`1<TRow> OrderBy(TypedTableBase`1<TRow> source, Func`2<TRow, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static OrderedEnumerableRowCollection`1<TRow> OrderByDescending(TypedTableBase`1<TRow> source, Func`2<TRow, TKey> keySelector);
    [ExtensionAttribute]
public static OrderedEnumerableRowCollection`1<TRow> OrderByDescending(TypedTableBase`1<TRow> source, Func`2<TRow, TKey> keySelector, IComparer`1<TKey> comparer);
    [ExtensionAttribute]
public static EnumerableRowCollection`1<S> Select(TypedTableBase`1<TRow> source, Func`2<TRow, S> selector);
    [ExtensionAttribute]
public static EnumerableRowCollection`1<TRow> AsEnumerable(TypedTableBase`1<TRow> source);
    [ExtensionAttribute]
public static TRow ElementAtOrDefault(TypedTableBase`1<TRow> source, int index);
}
internal class System.Data.TypeLimiter : object {
    [ThreadStaticAttribute]
private static Scope s_activeScope;
    private Scope m_instanceScope;
    private static bool IsTypeLimitingDisabled { get; }
    private TypeLimiter(Scope scope);
    private static bool get_IsTypeLimitingDisabled();
    public static TypeLimiter Capture();
    public static void EnsureTypeIsAllowed(Type type, TypeLimiter capturedLimiter);
    public static IDisposable EnterRestrictedScope(DataSet dataSet);
    public static IDisposable EnterRestrictedScope(DataTable dataTable);
    private static IEnumerable`1<Type> GetPreviouslyDeclaredDataTypes(DataTable dataTable);
    private static IEnumerable`1<Type> GetPreviouslyDeclaredDataTypes(DataSet dataSet);
}
internal class System.Data.UnaryNode : ExpressionNode {
    internal int _op;
    internal ExpressionNode _right;
    internal UnaryNode(DataTable table, int op, ExpressionNode right);
    internal virtual void Bind(DataTable table, List`1<DataColumn> list);
    internal virtual object Eval();
    internal virtual object Eval(DataRow row, DataRowVersion version);
    internal virtual object Eval(Int32[] recordNos);
    private object EvalUnaryOp(int op, object vl);
    internal virtual bool IsConstant();
    internal virtual bool IsTableConstant();
    internal virtual bool HasLocalAggregate();
    internal virtual bool HasRemoteAggregate();
    internal virtual bool DependsOn(DataColumn column);
    internal virtual ExpressionNode Optimize();
}
[DefaultPropertyAttribute("ConstraintName")]
public class System.Data.UniqueConstraint : Constraint {
    private DataKey _key;
    private Index _constraintIndex;
    internal bool _bPrimaryKey;
    internal string _constraintName;
    internal String[] _columnNames;
    internal String[] ColumnNames { get; }
    internal Index ConstraintIndex { get; }
    [ReadOnlyAttribute("True")]
public DataColumn[] Columns { get; }
    internal DataColumn[] ColumnsReference { get; }
    public bool IsPrimaryKey { get; }
    unknown bool InCollection {internal set; }
    internal DataKey Key { get; }
    [ReadOnlyAttribute("True")]
public DataTable Table { get; }
    public UniqueConstraint(string name, DataColumn column);
    public UniqueConstraint(DataColumn column);
    public UniqueConstraint(string name, DataColumn[] columns);
    public UniqueConstraint(DataColumn[] columns);
    [BrowsableAttribute("False")]
public UniqueConstraint(string name, String[] columnNames, bool isPrimaryKey);
    public UniqueConstraint(string name, DataColumn column, bool isPrimaryKey);
    public UniqueConstraint(DataColumn column, bool isPrimaryKey);
    public UniqueConstraint(string name, DataColumn[] columns, bool isPrimaryKey);
    public UniqueConstraint(DataColumn[] columns, bool isPrimaryKey);
    internal String[] get_ColumnNames();
    internal Index get_ConstraintIndex();
    internal void ConstraintIndexClear();
    internal void ConstraintIndexInitialize();
    internal virtual void CheckState();
    private void NonVirtualCheckState();
    internal virtual void CheckCanAddToCollection(ConstraintCollection constraints);
    internal virtual bool CanBeRemovedFromCollection(ConstraintCollection constraints, bool fThrowException);
    internal virtual bool CanEnableConstraint();
    internal virtual bool IsConstraintViolated();
    internal virtual void CheckConstraint(DataRow row, DataRowAction action);
    internal virtual bool ContainsColumn(DataColumn column);
    internal virtual Constraint Clone(DataSet destination);
    internal virtual Constraint Clone(DataSet destination, bool ignorNSforTableLookup);
    internal UniqueConstraint Clone(DataTable table);
    public virtual DataColumn[] get_Columns();
    internal DataColumn[] get_ColumnsReference();
    public bool get_IsPrimaryKey();
    private void Create(string constraintName, DataColumn[] columns);
    public virtual bool Equals(object key2);
    public virtual int GetHashCode();
    internal virtual void set_InCollection(bool value);
    internal DataKey get_Key();
    public virtual DataTable get_Table();
}
public enum System.Data.UpdateRowSource : Enum {
    public int value__;
    public static UpdateRowSource None;
    public static UpdateRowSource OutputParameters;
    public static UpdateRowSource FirstReturnedRecord;
    public static UpdateRowSource Both;
}
public enum System.Data.UpdateStatus : Enum {
    public int value__;
    public static UpdateStatus Continue;
    public static UpdateStatus ErrorsOccurred;
    public static UpdateStatus SkipCurrentRow;
    public static UpdateStatus SkipAllRemainingRows;
}
internal enum System.Data.ValueType : Enum {
    public int value__;
    public static ValueType Unknown;
    public static ValueType Null;
    public static ValueType Bool;
    public static ValueType Numeric;
    public static ValueType Str;
    public static ValueType Float;
    public static ValueType Decimal;
    public static ValueType Object;
    public static ValueType Date;
}
[TypeForwardedFromAttribute("System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
public class System.Data.VersionNotFoundException : DataException {
    protected VersionNotFoundException(SerializationInfo info, StreamingContext context);
    public VersionNotFoundException(string s);
    public VersionNotFoundException(string message, Exception innerException);
}
internal class System.Data.XDRSchema : XMLSchema {
    internal string _schemaName;
    internal string _schemaUri;
    internal XmlElement _schemaRoot;
    internal DataSet _ds;
    private static Char[] s_colonArray;
    private static NameType[] s_mapNameTypeXdr;
    private static NameType s_enumerationNameType;
    internal XDRSchema(DataSet ds, bool fInline);
    private static XDRSchema();
    internal void LoadSchema(XmlElement schemaRoot, DataSet ds);
    internal XmlElement FindTypeNode(XmlElement node);
    internal bool IsTextOnlyContent(XmlElement node);
    internal bool IsXDRField(XmlElement node, XmlElement typeNode);
    internal DataTable HandleTable(XmlElement node);
    private static NameType FindNameType(string name);
    private Type ParseDataType(string dt, string dtValues);
    internal string GetInstanceName(XmlElement node);
    internal void HandleColumn(XmlElement node, DataTable table);
    internal void GetMinMax(XmlElement elNode, Int32& minOccurs, Int32& maxOccurs);
    internal void GetMinMax(XmlElement elNode, bool isAttribute, Int32& minOccurs, Int32& maxOccurs);
    internal void HandleTypeNode(XmlElement typeNode, DataTable table, ArrayList tableChildren);
    internal DataTable InstantiateTable(DataSet dataSet, XmlElement node, XmlElement typeNode);
    internal DataTable InstantiateSimpleTable(DataSet dataSet, XmlElement node);
}
internal class System.Data.XmlDataLoader : object {
    private DataSet _dataSet;
    private XmlToDatasetMap _nodeToSchemaMap;
    private Hashtable _nodeToRowMap;
    private Stack _childRowsStack;
    private Hashtable _htableExcludedNS;
    private bool _fIsXdr;
    internal bool _isDiffgram;
    private XmlElement _topMostNode;
    private bool _ignoreSchema;
    private DataTable _dataTable;
    private bool _isTableLevel;
    private bool _fromInference;
    private XmlReader _dataReader;
    private object _XSD_XMLNS_NS;
    private object _XDR_SCHEMA;
    private object _XDRNS;
    private object _SQL_SYNC;
    private object _UPDGNS;
    private object _XSD_SCHEMA;
    private object _XSDNS;
    private object _DFFNS;
    private object _MSDNS;
    private object _DIFFID;
    private object _HASCHANGES;
    private object _ROWORDER;
    internal bool FromInference { get; internal set; }
    internal XmlDataLoader(DataSet dataset, bool IsXdr, bool ignoreSchema);
    internal XmlDataLoader(DataSet dataset, bool IsXdr, XmlElement topNode, bool ignoreSchema);
    internal XmlDataLoader(DataTable datatable, bool IsXdr, bool ignoreSchema);
    internal XmlDataLoader(DataTable datatable, bool IsXdr, XmlElement topNode, bool ignoreSchema);
    internal bool get_FromInference();
    internal void set_FromInference(bool value);
    private void AttachRows(DataRow parentRow, XmlNode parentElement);
    private int CountNonNSAttributes(XmlNode node);
    private string GetValueForTextOnlyColums(XmlNode n);
    private string GetInitialTextFromNodes(XmlNode& n);
    private DataColumn GetTextOnlyColumn(DataRow row);
    internal DataRow GetRowFromElement(XmlElement e);
    internal bool FColumnElement(XmlElement e);
    private bool FExcludedNamespace(string ns);
    private bool FIgnoreNamespace(XmlNode node);
    private bool FIgnoreNamespace(XmlReader node);
    internal bool IsTextLikeNode(XmlNodeType n);
    internal bool IsTextOnly(DataColumn c);
    internal void LoadData(XmlDocument xdoc);
    private void LoadRowData(DataRow row, XmlElement rowElement);
    private void LoadRows(DataRow parentRow, XmlNode parentElement);
    private void SetRowValueFromXmlText(DataRow row, DataColumn col, string xmlText);
    private void InitNameTable();
    internal void LoadData(XmlReader reader);
    private void LoadTopMostTable(DataTable table);
    private void LoadTable(DataTable table, bool isNested);
    private void LoadColumn(DataColumn column, Object[] foundColumns);
    private bool ProcessXsdSchema();
}
internal class System.Data.XmlDataTreeWriter : object {
    private XmlWriter _xmlw;
    private DataSet _ds;
    private DataTable _dt;
    private ArrayList _dTables;
    private DataTable[] _topLevelTables;
    private bool _fFromTable;
    private bool _isDiffgram;
    private Hashtable _rowsOrder;
    private bool _writeHierarchy;
    internal XmlDataTreeWriter(DataSet ds);
    internal XmlDataTreeWriter(DataTable dt, bool writeHierarchy);
    private DataTable[] CreateToplevelTables();
    private void CreateTablesHierarchy(DataTable dt);
    internal static bool RowHasErrors(DataRow row);
    internal void SaveDiffgramData(XmlWriter xw, Hashtable rowsOrder);
    internal void Save(XmlWriter xw, bool writeSchema);
    private ArrayList GetNestedChildRelations(DataRow row);
    internal void XmlDataRowWriter(DataRow row, string encodedTableName);
    internal static bool PreserveSpace(object value);
}
internal class System.Data.XMLDiffLoader : object {
    private ArrayList _tables;
    private DataSet _dataSet;
    private DataTable _dataTable;
    internal void LoadDiffGram(DataSet ds, XmlReader dataTextReader);
    private void CreateTablesHierarchy(DataTable dt);
    internal void LoadDiffGram(DataTable dt, XmlReader dataTextReader);
    internal void ProcessDiffs(DataSet ds, XmlReader ssync);
    internal void ProcessDiffs(ArrayList tableList, XmlReader ssync);
    internal void ProcessErrors(DataSet ds, XmlReader ssync);
    internal void ProcessErrors(ArrayList dt, XmlReader ssync);
    private DataTable GetTable(string tableName, string ns);
    private int ReadOldRowData(DataSet ds, DataTable& table, Int32& pos, XmlReader row);
    internal void SkipWhitespaces(XmlReader reader);
}
internal class System.Data.XmlIgnoreNamespaceReader : XmlNodeReader {
    private List`1<string> _namespacesToIgnore;
    internal XmlIgnoreNamespaceReader(XmlDocument xdoc, String[] namespacesToIgnore);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
}
public enum System.Data.XmlReadMode : Enum {
    public int value__;
    public static XmlReadMode Auto;
    public static XmlReadMode ReadSchema;
    public static XmlReadMode IgnoreSchema;
    public static XmlReadMode InferSchema;
    public static XmlReadMode DiffGram;
    public static XmlReadMode Fragment;
    public static XmlReadMode InferTypedSchema;
}
internal class System.Data.XMLSchema : object {
    internal static TypeConverter GetConverter(Type type);
    internal static void SetProperties(object instance, XmlAttributeCollection attrs);
    internal static bool FEqualIdentity(XmlNode node, string name, string ns);
    internal static bool GetBooleanAttribute(XmlElement element, string attrName, string attrNS, bool defVal);
    internal static string GenUniqueColumnName(string proposedName, DataTable table);
}
internal class System.Data.XmlToDatasetMap : object {
    private XmlNodeIdHashtable _tableSchemaMap;
    private TableSchemaInfo _lastTableSchemaInfo;
    public XmlToDatasetMap(DataSet dataSet, XmlNameTable nameTable);
    public XmlToDatasetMap(XmlNameTable nameTable, DataSet dataSet);
    public XmlToDatasetMap(DataTable dataTable, XmlNameTable nameTable);
    public XmlToDatasetMap(XmlNameTable nameTable, DataTable dataTable);
    internal static bool IsMappedColumn(DataColumn c);
    private TableSchemaInfo AddTableSchema(DataTable table, XmlNameTable nameTable);
    private TableSchemaInfo AddTableSchema(XmlNameTable nameTable, DataTable table);
    private bool AddColumnSchema(DataColumn col, XmlNameTable nameTable, XmlNodeIdHashtable columns);
    private bool AddColumnSchema(XmlNameTable nameTable, DataColumn col, XmlNodeIdHashtable columns);
    private void BuildIdentityMap(DataSet dataSet, XmlNameTable nameTable);
    private void BuildIdentityMap(XmlNameTable nameTable, DataSet dataSet);
    private void BuildIdentityMap(DataTable dataTable, XmlNameTable nameTable);
    private void BuildIdentityMap(XmlNameTable nameTable, DataTable dataTable);
    private ArrayList GetSelfAndDescendants(DataTable dt);
    public object GetColumnSchema(XmlNode node, bool fIgnoreNamespace);
    public object GetColumnSchema(DataTable table, XmlReader dataReader, bool fIgnoreNamespace);
    public object GetSchemaForNode(XmlNode node, bool fIgnoreNamespace);
    public DataTable GetTableForNode(XmlReader node, bool fIgnoreNamespace);
    private void HandleSpecialColumn(DataColumn col, XmlNameTable nameTable, XmlNodeIdHashtable columns);
}
internal class System.Data.XmlTreeGen : object {
    private ArrayList _constraintNames;
    private Hashtable _namespaces;
    private Hashtable _autogenerated;
    private Hashtable _prefixes;
    private DataSet _ds;
    private ArrayList _tables;
    private ArrayList _relations;
    private XmlDocument _dc;
    private XmlElement _sRoot;
    private int _prefixCount;
    private SchemaFormat _schFormat;
    private string _filePath;
    private string _fileName;
    private string _fileExt;
    private XmlElement _dsElement;
    private XmlElement _constraintSeparator;
    private Converter`2<Type, string> _targetConverter;
    internal XmlTreeGen(SchemaFormat format);
    internal static void AddExtendedProperties(PropertyCollection props, XmlElement node);
    internal static void AddExtendedProperties(PropertyCollection props, XmlElement node, Type type);
    internal void AddXdoProperties(object instance, XmlElement root, XmlDocument xd);
    internal void AddXdoProperty(PropertyDescriptor pd, object instance, XmlElement root, XmlDocument xd);
    internal static string XmlDataTypeName(Type type);
    private void GenerateConstraintNames(DataTable table, bool fromTable);
    private void GenerateConstraintNames(ArrayList tables);
    private void GenerateConstraintNames(DataSet ds);
    private static bool _PropsNotEmpty(PropertyCollection props);
    private bool HaveExtendedProperties(DataSet ds);
    internal void WriteSchemaRoot(XmlDocument xd, XmlElement rootSchema, string targetNamespace);
    internal static void ValidateColumnMapping(Type columnType);
    internal void SetupAutoGenerated(DataSet ds);
    internal void SetupAutoGenerated(ArrayList dt);
    internal void SetupAutoGenerated(DataTable dt);
    private void CreateTablesHierarchy(DataTable dt);
    private void CreateRelations(DataTable dt);
    private DataTable[] CreateToplevelTables();
    internal void SchemaTree(XmlDocument xd, XmlWriter xmlWriter, DataSet ds, DataTable dt, bool writeHierarchy);
    internal XmlElement SchemaTree(XmlDocument xd, DataTable dt);
    internal XmlElement FillDataSetElement(XmlDocument xd, DataSet ds, DataTable dt);
    internal void SetPath(XmlWriter xw);
    internal void Save(DataSet ds, XmlWriter xw);
    internal void Save(DataTable dt, XmlWriter xw);
    internal void Save(DataSet ds, DataTable dt, XmlWriter xw);
    internal void Save(DataSet ds, DataTable dt, XmlWriter xw, bool writeHierarchy);
    internal void Save(DataSet ds, DataTable dt, XmlWriter xw, bool writeHierarchy, Converter`2<Type, string> multipleTargetConverter);
    internal XmlElement HandleRelation(DataRelation rel, XmlDocument dc);
    private static XmlElement FindSimpleType(XmlElement schema, string name);
    internal XmlElement GetSchema(string NamespaceURI);
    internal void HandleColumnType(DataColumn col, XmlDocument dc, XmlElement root, XmlElement schema);
    internal void AddColumnProperties(DataColumn col, XmlElement root);
    private string FindTargetNamespace(DataTable table);
    internal XmlElement HandleColumn(DataColumn col, XmlDocument dc, XmlElement schema, bool fWriteOrdinal);
    internal static string TranslateAcceptRejectRule(AcceptRejectRule rule);
    internal static string TranslateRule(Rule rule);
    internal void AppendChildWithoutRef(XmlElement node, string Namespace, XmlElement el, string refString);
    internal XmlElement FindTypeNode(XmlElement node, string strType);
    internal XmlElement HandleTable(DataTable table, XmlDocument dc, XmlElement schema);
    private bool HasMixedColumns(DataTable table);
    internal static bool AutoGenerated(DataColumn col);
    internal static bool AutoGenerated(DataRelation rel);
    internal static bool AutoGenerated(UniqueConstraint unique);
    private bool AutoGenerated(ForeignKeyConstraint fk);
    internal static bool AutoGenerated(ForeignKeyConstraint fk, bool checkRelation);
    private bool IsAutoGenerated(object o);
    internal XmlElement HandleTable(DataTable table, XmlDocument dc, XmlElement schema, bool genNested);
    private void SetMSDataAttribute(XmlElement root, Type type);
}
public enum System.Data.XmlWriteMode : Enum {
    public int value__;
    public static XmlWriteMode WriteSchema;
    public static XmlWriteMode IgnoreSchema;
    public static XmlWriteMode DiffGram;
}
internal class System.Data.XSDSchema : XMLSchema {
    private XmlSchemaSet _schemaSet;
    private XmlSchemaElement _dsElement;
    private DataSet _ds;
    private string _schemaName;
    private ArrayList _columnExpressions;
    private Hashtable _constraintNodes;
    private ArrayList _refTables;
    private ArrayList _complexTypes;
    private XmlSchemaObjectCollection _annotations;
    private XmlSchemaObjectCollection _elements;
    private Hashtable _attributes;
    private Hashtable _elementsTable;
    private Hashtable _attributeGroups;
    private Hashtable _schemaTypes;
    private Hashtable _expressions;
    private Dictionary`2<DataTable, List`1<DataTable>> _tableDictionary;
    private Hashtable _udSimpleTypes;
    private Hashtable _existingSimpleTypeMap;
    private bool _fromInference;
    private static NameType[] s_mapNameTypeXsd;
    internal bool FromInference { get; internal set; }
    private static XSDSchema();
    internal bool get_FromInference();
    internal void set_FromInference(bool value);
    private void CollectElementsAnnotations(XmlSchema schema);
    private void CollectElementsAnnotations(XmlSchema schema, ArrayList schemaList);
    internal static string QualifiedName(string name);
    internal static void SetProperties(object instance, XmlAttribute[] attrs);
    private static void SetExtProperties(object instance, XmlAttribute[] attrs);
    private void HandleColumnExpression(object instance, XmlAttribute[] attrs);
    internal static string GetMsdataAttribute(XmlSchemaAnnotated node, string ln);
    private static void SetExtProperties(object instance, XmlAttributeCollection attrs);
    internal void HandleRefTableProperties(ArrayList RefTables, XmlSchemaElement element);
    internal void HandleRelation(XmlElement node, bool fNested);
    private bool HasAttributes(XmlSchemaObjectCollection attributes);
    private bool IsDatasetParticle(XmlSchemaParticle pt);
    private int DatasetElementCount(XmlSchemaObjectCollection elements);
    private XmlSchemaElement FindDatasetElement(XmlSchemaObjectCollection elements);
    public void LoadSchema(XmlSchemaSet schemaSet, DataTable dt);
    public void LoadSchema(XmlSchemaSet schemaSet, DataSet ds);
    private void HandleRelations(XmlSchemaAnnotation ann, bool fNested);
    internal XmlSchemaObjectCollection GetParticleItems(XmlSchemaParticle pt);
    internal void HandleParticle(XmlSchemaParticle pt, DataTable table, ArrayList tableChildren, bool isBase);
    internal void HandleAttributes(XmlSchemaObjectCollection attributes, DataTable table, bool isBase);
    private void HandleAttributeGroup(XmlSchemaAttributeGroup attributeGroup, DataTable table, bool isBase);
    internal void HandleComplexType(XmlSchemaComplexType ct, DataTable table, ArrayList tableChildren, bool isNillable);
    internal XmlSchemaParticle GetParticle(XmlSchemaComplexType ct);
    internal DataColumn FindField(DataTable table, string field);
    internal DataColumn[] BuildKey(XmlSchemaIdentityConstraint keyNode, DataTable table);
    internal bool GetBooleanAttribute(XmlSchemaAnnotated element, string attrName, bool defVal);
    internal string GetStringAttribute(XmlSchemaAnnotated element, string attrName, string defVal);
    internal static AcceptRejectRule TranslateAcceptRejectRule(string strRule);
    internal static Rule TranslateRule(string strRule);
    internal void HandleKeyref(XmlSchemaKeyref keyref);
    internal void HandleConstraint(XmlSchemaIdentityConstraint keyNode);
    internal DataTable InstantiateSimpleTable(XmlSchemaElement node);
    internal string GetInstanceName(XmlSchemaAnnotated node);
    internal DataTable InstantiateTable(XmlSchemaElement node, XmlSchemaComplexType typeNode, bool isRef);
    public static Type XsdtoClr(string xsdTypeName);
    private static NameType FindNameType(string name);
    private Type ParseDataType(string dt);
    internal static bool IsXsdType(string name);
    internal XmlSchemaAnnotated FindTypeNode(XmlSchemaAnnotated node);
    internal void HandleSimpleTypeSimpleContentColumn(XmlSchemaSimpleType typeNode, string strType, DataTable table, bool isBase, XmlAttribute[] attrs, bool isNillable);
    internal void HandleSimpleContentColumn(string strType, DataTable table, bool isBase, XmlAttribute[] attrs, bool isNillable);
    internal void HandleAttributeColumn(XmlSchemaAttribute attrib, DataTable table, bool isBase);
    internal void HandleElementColumn(XmlSchemaElement elem, DataTable table, bool isBase);
    internal void HandleDataSet(XmlSchemaElement node, bool isNewDataSet);
    private void AddTablesToList(List`1<DataTable> tableList, DataTable dt);
    private string GetPrefix(string ns);
    private string GetNamespaceFromPrefix(string prefix);
    private string GetTableNamespace(XmlSchemaIdentityConstraint key);
    private string GetTableName(XmlSchemaIdentityConstraint key);
    internal bool IsTable(XmlSchemaElement node);
    internal DataTable HandleTable(XmlSchemaElement node);
}
internal class System.Data.ZeroOpNode : ExpressionNode {
    internal int _op;
    internal ZeroOpNode(int op);
    internal virtual void Bind(DataTable table, List`1<DataColumn> list);
    internal virtual object Eval();
    internal virtual object Eval(DataRow row, DataRowVersion version);
    internal virtual object Eval(Int32[] recordNos);
    internal virtual bool IsConstant();
    internal virtual bool IsTableConstant();
    internal virtual bool HasLocalAggregate();
    internal virtual bool HasRemoteAggregate();
    internal virtual ExpressionNode Optimize();
}
internal static class System.LocalAppContextSwitches : object {
    private static int s_allowArbitraryTypeInstantiation;
    public static bool AllowArbitraryTypeInstantiation { get; }
    public static bool get_AllowArbitraryTypeInstantiation();
    internal static bool GetCachedSwitchValue(string switchName, Int32& cachedSwitchValue);
    private static bool GetCachedSwitchValueInternal(string switchName, Int32& cachedSwitchValue);
    private static bool GetSwitchDefaultValue(string switchName);
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string ADP_CollectionIndexString { get; }
    internal static string ADP_CollectionInvalidType { get; }
    internal static string ADP_CollectionIsNotParent { get; }
    internal static string ADP_CollectionNullValue { get; }
    internal static string ADP_CollectionRemoveInvalidObject { get; }
    internal static string ADP_CollectionUniqueValue { get; }
    internal static string ADP_ConnectionStateMsg_Closed { get; }
    internal static string ADP_ConnectionStateMsg_Connecting { get; }
    internal static string ADP_ConnectionStateMsg_Open { get; }
    internal static string ADP_ConnectionStateMsg_OpenExecuting { get; }
    internal static string ADP_ConnectionStateMsg_OpenFetching { get; }
    internal static string ADP_ConnectionStateMsg { get; }
    internal static string ADP_ConnectionStringSyntax { get; }
    internal static string ADP_DataReaderClosed { get; }
    internal static string ADP_EmptyString { get; }
    internal static string ADP_InvalidEnumerationValue { get; }
    internal static string ADP_InvalidKey { get; }
    internal static string ADP_InvalidValue { get; }
    internal static string Xml_SimpleTypeNotSupported { get; }
    internal static string Xml_MissingAttribute { get; }
    internal static string Xml_ValueOutOfRange { get; }
    internal static string Xml_AttributeValues { get; }
    internal static string Xml_RelationParentNameMissing { get; }
    internal static string Xml_RelationChildNameMissing { get; }
    internal static string Xml_RelationTableKeyMissing { get; }
    internal static string Xml_RelationChildKeyMissing { get; }
    internal static string Xml_UndefinedDatatype { get; }
    internal static string Xml_DatatypeNotDefined { get; }
    internal static string Xml_InvalidField { get; }
    internal static string Xml_InvalidSelector { get; }
    internal static string Xml_InvalidKey { get; }
    internal static string Xml_DuplicateConstraint { get; }
    internal static string Xml_CannotConvert { get; }
    internal static string Xml_MissingRefer { get; }
    internal static string Xml_MismatchKeyLength { get; }
    internal static string Xml_CircularComplexType { get; }
    internal static string Xml_CannotInstantiateAbstract { get; }
    internal static string Xml_MultipleTargetConverterError { get; }
    internal static string Xml_MultipleTargetConverterEmpty { get; }
    internal static string Xml_MergeDuplicateDeclaration { get; }
    internal static string Xml_MissingTable { get; }
    internal static string Xml_MissingSQL { get; }
    internal static string Xml_ColumnConflict { get; }
    internal static string Xml_InvalidPrefix_SpecialCharacters { get; }
    internal static string Xml_NestedCircular { get; }
    internal static string Xml_FoundEntity { get; }
    internal static string Xml_PolymorphismNotSupported { get; }
    internal static string Xml_CanNotDeserializeObjectType { get; }
    internal static string Xml_DataTableInferenceNotSupported { get; }
    internal static string Xml_MultipleParentRows { get; }
    internal static string Xml_IsDataSetAttributeMissingInSchema { get; }
    internal static string Xml_TooManyIsDataSetAttributesInSchema { get; }
    internal static string Xml_DynamicWithoutXmlSerializable { get; }
    internal static string Expr_NYI { get; }
    internal static string Expr_MissingOperand { get; }
    internal static string Expr_TypeMismatch { get; }
    internal static string Expr_ExpressionTooComplex { get; }
    internal static string Expr_UnboundName { get; }
    internal static string Expr_InvalidString { get; }
    internal static string Expr_UndefinedFunction { get; }
    internal static string Expr_Syntax { get; }
    internal static string Expr_FunctionArgumentCount { get; }
    internal static string Expr_MissingRightParen { get; }
    internal static string Expr_UnknownToken { get; }
    internal static string Expr_UnknownToken1 { get; }
    internal static string Expr_DatatypeConvertion { get; }
    internal static string Expr_DatavalueConvertion { get; }
    internal static string Expr_InvalidName { get; }
    internal static string Expr_InvalidDate { get; }
    internal static string Expr_NonConstantArgument { get; }
    internal static string Expr_InvalidPattern { get; }
    internal static string Expr_InWithoutParentheses { get; }
    internal static string Expr_ArgumentType { get; }
    internal static string Expr_ArgumentTypeInteger { get; }
    internal static string Expr_TypeMismatchInBinop { get; }
    internal static string Expr_AmbiguousBinop { get; }
    internal static string Expr_InWithoutList { get; }
    internal static string Expr_UnsupportedOperator { get; }
    internal static string Expr_InvalidNameBracketing { get; }
    internal static string Expr_MissingOperandBefore { get; }
    internal static string Expr_TooManyRightParentheses { get; }
    internal static string Expr_UnresolvedRelation { get; }
    internal static string Expr_AggregateArgument { get; }
    internal static string Expr_AggregateUnbound { get; }
    internal static string Expr_EvalNoContext { get; }
    internal static string Expr_ExpressionUnbound { get; }
    internal static string Expr_ComputeNotAggregate { get; }
    internal static string Expr_FilterConvertion { get; }
    internal static string Expr_InvalidType { get; }
    internal static string Expr_LookupArgument { get; }
    internal static string Expr_InvokeArgument { get; }
    internal static string Expr_ArgumentOutofRange { get; }
    internal static string Expr_IsSyntax { get; }
    internal static string Expr_Overflow { get; }
    internal static string Expr_BindFailure { get; }
    internal static string Expr_InvalidHoursArgument { get; }
    internal static string Expr_InvalidMinutesArgument { get; }
    internal static string Expr_InvalidTimeZoneRange { get; }
    internal static string Expr_MismatchKindandTimeSpan { get; }
    internal static string Expr_UnsupportedType { get; }
    internal static string Data_EnforceConstraints { get; }
    internal static string Data_CannotModifyCollection { get; }
    internal static string Data_CaseInsensitiveNameConflict { get; }
    internal static string Data_NamespaceNameConflict { get; }
    internal static string Data_InvalidOffsetLength { get; }
    internal static string Data_ArgumentOutOfRange { get; }
    internal static string Data_ArgumentNull { get; }
    internal static string Data_ArgumentContainsNull { get; }
    internal static string Data_TypeNotAllowed { get; }
    internal static string DataColumns_OutOfRange { get; }
    internal static string DataColumns_Add1 { get; }
    internal static string DataColumns_Add2 { get; }
    internal static string DataColumns_Add3 { get; }
    internal static string DataColumns_Add4 { get; }
    internal static string DataColumns_AddDuplicate { get; }
    internal static string DataColumns_AddDuplicate2 { get; }
    internal static string DataColumns_AddDuplicate3 { get; }
    internal static string DataColumns_Remove { get; }
    internal static string DataColumns_RemovePrimaryKey { get; }
    internal static string DataColumns_RemoveChildKey { get; }
    internal static string DataColumns_RemoveConstraint { get; }
    internal static string DataColumn_AutoIncrementAndExpression { get; }
    internal static string DataColumn_AutoIncrementAndDefaultValue { get; }
    internal static string DataColumn_DefaultValueAndAutoIncrement { get; }
    internal static string DataColumn_AutoIncrementSeed { get; }
    internal static string DataColumn_NameRequired { get; }
    internal static string DataColumn_ChangeDataType { get; }
    internal static string DataColumn_NullDataType { get; }
    internal static string DataColumn_DefaultValueDataType { get; }
    internal static string DataColumn_DefaultValueDataType1 { get; }
    internal static string DataColumn_DefaultValueColumnDataType { get; }
    internal static string DataColumn_ReadOnlyAndExpression { get; }
    internal static string DataColumn_UniqueAndExpression { get; }
    internal static string DataColumn_ExpressionAndUnique { get; }
    internal static string DataColumn_ExpressionAndReadOnly { get; }
    internal static string DataColumn_ExpressionAndConstraint { get; }
    internal static string DataColumn_ExpressionInConstraint { get; }
    internal static string DataColumn_ExpressionCircular { get; }
    internal static string DataColumn_NullKeyValues { get; }
    internal static string DataColumn_NullValues { get; }
    internal static string DataColumn_ReadOnly { get; }
    internal static string DataColumn_NonUniqueValues { get; }
    internal static string DataColumn_NotInTheTable { get; }
    internal static string DataColumn_NotInAnyTable { get; }
    internal static string DataColumn_SetFailed { get; }
    internal static string DataColumn_CannotSetToNull { get; }
    internal static string DataColumn_LongerThanMaxLength { get; }
    internal static string DataColumn_HasToBeStringType { get; }
    internal static string DataColumn_CannotSetMaxLength { get; }
    internal static string DataColumn_CannotSetMaxLength2 { get; }
    internal static string DataColumn_CannotSimpleContentType { get; }
    internal static string DataColumn_CannotSimpleContent { get; }
    internal static string DataColumn_ExceedMaxLength { get; }
    internal static string DataColumn_NotAllowDBNull { get; }
    internal static string DataColumn_CannotChangeNamespace { get; }
    internal static string DataColumn_AutoIncrementCannotSetIfHasData { get; }
    internal static string DataColumn_NotInTheUnderlyingTable { get; }
    internal static string DataColumn_InvalidDataColumnMapping { get; }
    internal static string DataColumn_CannotSetDateTimeModeForNonDateTimeColumns { get; }
    internal static string DataColumn_DateTimeMode { get; }
    internal static string DataColumn_INullableUDTwithoutStaticNull { get; }
    internal static string DataColumn_UDTImplementsIChangeTrackingButnotIRevertible { get; }
    internal static string DataColumn_SetAddedAndModifiedCalledOnNonUnchanged { get; }
    internal static string DataColumn_OrdinalExceedMaximun { get; }
    internal static string DataColumn_NullableTypesNotSupported { get; }
    internal static string DataConstraint_NoName { get; }
    internal static string DataConstraint_Violation { get; }
    internal static string DataConstraint_ViolationValue { get; }
    internal static string DataConstraint_NotInTheTable { get; }
    internal static string DataConstraint_OutOfRange { get; }
    internal static string DataConstraint_Duplicate { get; }
    internal static string DataConstraint_DuplicateName { get; }
    internal static string DataConstraint_UniqueViolation { get; }
    internal static string DataConstraint_ForeignTable { get; }
    internal static string DataConstraint_ParentValues { get; }
    internal static string DataConstraint_AddFailed { get; }
    internal static string DataConstraint_RemoveFailed { get; }
    internal static string DataConstraint_NeededForForeignKeyConstraint { get; }
    internal static string DataConstraint_CascadeDelete { get; }
    internal static string DataConstraint_CascadeUpdate { get; }
    internal static string DataConstraint_ClearParentTable { get; }
    internal static string DataConstraint_ForeignKeyViolation { get; }
    internal static string DataConstraint_BadObjectPropertyAccess { get; }
    internal static string DataConstraint_RemoveParentRow { get; }
    internal static string DataConstraint_AddPrimaryKeyConstraint { get; }
    internal static string DataConstraint_CantAddConstraintToMultipleNestedTable { get; }
    internal static string DataKey_TableMismatch { get; }
    internal static string DataKey_NoColumns { get; }
    internal static string DataKey_TooManyColumns { get; }
    internal static string DataKey_DuplicateColumns { get; }
    internal static string DataKey_RemovePrimaryKey { get; }
    internal static string DataKey_RemovePrimaryKey1 { get; }
    internal static string DataRelation_ColumnsTypeMismatch { get; }
    internal static string DataRelation_KeyColumnsIdentical { get; }
    internal static string DataRelation_KeyLengthMismatch { get; }
    internal static string DataRelation_KeyZeroLength { get; }
    internal static string DataRelation_ForeignRow { get; }
    internal static string DataRelation_NoName { get; }
    internal static string DataRelation_ForeignTable { get; }
    internal static string DataRelation_ForeignDataSet { get; }
    internal static string DataRelation_GetParentRowTableMismatch { get; }
    internal static string DataRelation_SetParentRowTableMismatch { get; }
    internal static string DataRelation_DataSetMismatch { get; }
    internal static string DataRelation_TablesInDifferentSets { get; }
    internal static string DataRelation_AlreadyExists { get; }
    internal static string DataRelation_DoesNotExist { get; }
    internal static string DataRelation_AlreadyInOtherDataSet { get; }
    internal static string DataRelation_AlreadyInTheDataSet { get; }
    internal static string DataRelation_DuplicateName { get; }
    internal static string DataRelation_NotInTheDataSet { get; }
    internal static string DataRelation_OutOfRange { get; }
    internal static string DataRelation_TableNull { get; }
    internal static string DataRelation_TableWasRemoved { get; }
    internal static string DataRelation_ChildTableMismatch { get; }
    internal static string DataRelation_ParentTableMismatch { get; }
    internal static string DataRelation_RelationNestedReadOnly { get; }
    internal static string DataRelation_TableCantBeNestedInTwoTables { get; }
    internal static string DataRelation_LoopInNestedRelations { get; }
    internal static string DataRelation_CaseLocaleMismatch { get; }
    internal static string DataRelation_ParentOrChildColumnsDoNotHaveDataSet { get; }
    internal static string DataRelation_InValidNestedRelation { get; }
    internal static string DataRelation_InValidNamespaceInNestedRelation { get; }
    internal static string DataRow_NotInTheDataSet { get; }
    internal static string DataRow_NotInTheTable { get; }
    internal static string DataRow_ParentRowNotInTheDataSet { get; }
    internal static string DataRow_EditInRowChanging { get; }
    internal static string DataRow_EndEditInRowChanging { get; }
    internal static string DataRow_BeginEditInRowChanging { get; }
    internal static string DataRow_CancelEditInRowChanging { get; }
    internal static string DataRow_DeleteInRowDeleting { get; }
    internal static string DataRow_ValuesArrayLength { get; }
    internal static string DataRow_NoCurrentData { get; }
    internal static string DataRow_NoOriginalData { get; }
    internal static string DataRow_NoProposedData { get; }
    internal static string DataRow_RemovedFromTheTable { get; }
    internal static string DataRow_DeletedRowInaccessible { get; }
    internal static string DataRow_InvalidVersion { get; }
    internal static string DataRow_OutOfRange { get; }
    internal static string DataRow_RowInsertOutOfRange { get; }
    internal static string DataRow_RowInsertMissing { get; }
    internal static string DataRow_RowOutOfRange { get; }
    internal static string DataRow_AlreadyInOtherCollection { get; }
    internal static string DataRow_AlreadyInTheCollection { get; }
    internal static string DataRow_AlreadyDeleted { get; }
    internal static string DataRow_Empty { get; }
    internal static string DataRow_AlreadyRemoved { get; }
    internal static string DataRow_MultipleParents { get; }
    internal static string DataRow_InvalidRowBitPattern { get; }
    internal static string DataSet_SetNameToEmpty { get; }
    internal static string DataSet_SetDataSetNameConflicting { get; }
    internal static string DataSet_UnsupportedSchema { get; }
    internal static string DataSet_CannotChangeCaseLocale { get; }
    internal static string DataSet_CannotChangeSchemaSerializationMode { get; }
    internal static string DataTable_ForeignPrimaryKey { get; }
    internal static string DataTable_CannotAddToSimpleContent { get; }
    internal static string DataTable_NoName { get; }
    internal static string DataTable_MultipleSimpleContentColumns { get; }
    internal static string DataTable_MissingPrimaryKey { get; }
    internal static string DataTable_InvalidSortString { get; }
    internal static string DataTable_CanNotSerializeDataTableHierarchy { get; }
    internal static string DataTable_CanNotRemoteDataTable { get; }
    internal static string DataTable_CanNotSetRemotingFormat { get; }
    internal static string DataTable_CanNotSerializeDataTableWithEmptyName { get; }
    internal static string DataTable_DuplicateName { get; }
    internal static string DataTable_DuplicateName2 { get; }
    internal static string DataTable_SelfnestedDatasetConflictingName { get; }
    internal static string DataTable_DatasetConflictingName { get; }
    internal static string DataTable_AlreadyInOtherDataSet { get; }
    internal static string DataTable_AlreadyInTheDataSet { get; }
    internal static string DataTable_NotInTheDataSet { get; }
    internal static string DataTable_OutOfRange { get; }
    internal static string DataTable_InRelation { get; }
    internal static string DataTable_InConstraint { get; }
    internal static string DataTable_TableNotFound { get; }
    internal static string DataMerge_MissingDefinition { get; }
    internal static string DataMerge_MissingConstraint { get; }
    internal static string DataMerge_DataTypeMismatch { get; }
    internal static string DataMerge_PrimaryKeyMismatch { get; }
    internal static string DataMerge_PrimaryKeyColumnsMismatch { get; }
    internal static string DataMerge_ReltionKeyColumnsMismatch { get; }
    internal static string DataMerge_MissingColumnDefinition { get; }
    internal static string DataIndex_RecordStateRange { get; }
    internal static string DataIndex_FindWithoutSortOrder { get; }
    internal static string DataIndex_KeyLength { get; }
    internal static string DataStorage_AggregateException { get; }
    internal static string DataStorage_InvalidStorageType { get; }
    internal static string DataStorage_ProblematicChars { get; }
    internal static string DataStorage_SetInvalidDataType { get; }
    internal static string DataStorage_IComparableNotDefined { get; }
    internal static string DataView_SetFailed { get; }
    internal static string DataView_SetDataSetFailed { get; }
    internal static string DataView_SetRowStateFilter { get; }
    internal static string DataView_SetTable { get; }
    internal static string DataView_CanNotSetDataSet { get; }
    internal static string DataView_CanNotUseDataViewManager { get; }
    internal static string DataView_CanNotSetTable { get; }
    internal static string DataView_CanNotUse { get; }
    internal static string DataView_CanNotBindTable { get; }
    internal static string DataView_SetIListObject { get; }
    internal static string DataView_AddNewNotAllowNull { get; }
    internal static string DataView_NotOpen { get; }
    internal static string DataView_CreateChildView { get; }
    internal static string DataView_CanNotDelete { get; }
    internal static string DataView_CanNotEdit { get; }
    internal static string DataView_GetElementIndex { get; }
    internal static string DataView_AddExternalObject { get; }
    internal static string DataView_CanNotClear { get; }
    internal static string DataView_InsertExternalObject { get; }
    internal static string DataView_RemoveExternalObject { get; }
    internal static string DataROWView_PropertyNotFound { get; }
    internal static string Range_Argument { get; }
    internal static string Range_NullRange { get; }
    internal static string RecordManager_MinimumCapacity { get; }
    internal static string SqlConvert_ConvertFailed { get; }
    internal static string DataSet_DefaultDataException { get; }
    internal static string DataSet_DefaultConstraintException { get; }
    internal static string DataSet_DefaultDeletedRowInaccessibleException { get; }
    internal static string DataSet_DefaultDuplicateNameException { get; }
    internal static string DataSet_DefaultInRowChangingEventException { get; }
    internal static string DataSet_DefaultInvalidConstraintException { get; }
    internal static string DataSet_DefaultMissingPrimaryKeyException { get; }
    internal static string DataSet_DefaultNoNullAllowedException { get; }
    internal static string DataSet_DefaultReadOnlyException { get; }
    internal static string DataSet_DefaultRowNotInTableException { get; }
    internal static string DataSet_DefaultVersionNotFoundException { get; }
    internal static string Load_ReadOnlyDataModified { get; }
    internal static string DataTableReader_InvalidDataTableReader { get; }
    internal static string DataTableReader_SchemaInvalidDataTableReader { get; }
    internal static string DataTableReader_CannotCreateDataReaderOnEmptyDataSet { get; }
    internal static string DataTableReader_DataTableReaderArgumentIsEmpty { get; }
    internal static string DataTableReader_ArgumentContainsNullValue { get; }
    internal static string DataTableReader_InvalidRowInDataTableReader { get; }
    internal static string DataTableReader_DataTableCleared { get; }
    internal static string RbTree_InvalidState { get; }
    internal static string RbTree_EnumerationBroken { get; }
    internal static string NamedSimpleType_InvalidDuplicateNamedSimpleTypeDelaration { get; }
    internal static string DataDom_Foliation { get; }
    internal static string DataDom_TableNameChange { get; }
    internal static string DataDom_TableNamespaceChange { get; }
    internal static string DataDom_ColumnNameChange { get; }
    internal static string DataDom_ColumnNamespaceChange { get; }
    internal static string DataDom_ColumnMappingChange { get; }
    internal static string DataDom_TableColumnsChange { get; }
    internal static string DataDom_DataSetTablesChange { get; }
    internal static string DataDom_DataSetNestedRelationsChange { get; }
    internal static string DataDom_DataSetNull { get; }
    internal static string DataDom_DataSetNameChange { get; }
    internal static string DataDom_CloneNode { get; }
    internal static string DataDom_MultipleLoad { get; }
    internal static string DataDom_MultipleDataSet { get; }
    internal static string DataDom_NotSupport_GetElementById { get; }
    internal static string DataDom_NotSupport_EntRef { get; }
    internal static string DataDom_NotSupport_Clear { get; }
    internal static string ADP_EmptyArray { get; }
    internal static string SQL_WrongType { get; }
    internal static string ADP_KeywordNotSupported { get; }
    internal static string ADP_InternalProviderError { get; }
    internal static string ADP_NoQuoteChange { get; }
    internal static string ADP_MissingSourceCommand { get; }
    internal static string ADP_MissingSourceCommandConnection { get; }
    internal static string ADP_ColumnSchemaExpression { get; }
    internal static string ADP_ColumnSchemaMismatch { get; }
    internal static string ADP_ColumnSchemaMissing1 { get; }
    internal static string ADP_ColumnSchemaMissing2 { get; }
    internal static string ADP_InvalidSourceColumn { get; }
    internal static string ADP_MissingColumnMapping { get; }
    internal static string ADP_NotSupportedEnumerationValue { get; }
    internal static string ADP_MissingTableSchema { get; }
    internal static string ADP_InvalidSourceTable { get; }
    internal static string ADP_MissingTableMapping { get; }
    internal static string ADP_ConnectionRequired_Insert { get; }
    internal static string ADP_ConnectionRequired_Update { get; }
    internal static string ADP_ConnectionRequired_Delete { get; }
    internal static string ADP_ConnectionRequired_Batch { get; }
    internal static string ADP_ConnectionRequired_Clone { get; }
    internal static string ADP_OpenConnectionRequired_Insert { get; }
    internal static string ADP_OpenConnectionRequired_Update { get; }
    internal static string ADP_OpenConnectionRequired_Delete { get; }
    internal static string ADP_OpenConnectionRequired_Clone { get; }
    internal static string ADP_MissingSelectCommand { get; }
    internal static string ADP_UnwantedStatementType { get; }
    internal static string ADP_FillSchemaRequiresSourceTableName { get; }
    internal static string ADP_FillRequiresSourceTableName { get; }
    internal static string ADP_FillChapterAutoIncrement { get; }
    internal static string ADP_MissingDataReaderFieldType { get; }
    internal static string ADP_OnlyOneTableForStartRecordOrMaxRecords { get; }
    internal static string ADP_UpdateRequiresSourceTable { get; }
    internal static string ADP_UpdateRequiresSourceTableName { get; }
    internal static string ADP_UpdateRequiresCommandClone { get; }
    internal static string ADP_UpdateRequiresCommandSelect { get; }
    internal static string ADP_UpdateRequiresCommandInsert { get; }
    internal static string ADP_UpdateRequiresCommandUpdate { get; }
    internal static string ADP_UpdateRequiresCommandDelete { get; }
    internal static string ADP_UpdateMismatchRowTable { get; }
    internal static string ADP_RowUpdatedErrors { get; }
    internal static string ADP_RowUpdatingErrors { get; }
    internal static string ADP_ResultsNotAllowedDuringBatch { get; }
    internal static string ADP_UpdateConcurrencyViolation_Update { get; }
    internal static string ADP_UpdateConcurrencyViolation_Delete { get; }
    internal static string ADP_UpdateConcurrencyViolation_Batch { get; }
    internal static string ADP_InvalidSourceBufferIndex { get; }
    internal static string ADP_InvalidDestinationBufferIndex { get; }
    internal static string ADP_StreamClosed { get; }
    internal static string ADP_InvalidSeekOrigin { get; }
    internal static string ADP_DynamicSQLJoinUnsupported { get; }
    internal static string ADP_DynamicSQLNoTableInfo { get; }
    internal static string ADP_DynamicSQLNoKeyInfoDelete { get; }
    internal static string ADP_DynamicSQLNoKeyInfoUpdate { get; }
    internal static string ADP_DynamicSQLNoKeyInfoRowVersionDelete { get; }
    internal static string ADP_DynamicSQLNoKeyInfoRowVersionUpdate { get; }
    internal static string ADP_DynamicSQLNestedQuote { get; }
    internal static string SQL_InvalidBufferSizeOrIndex { get; }
    internal static string SQL_InvalidDataLength { get; }
    internal static string SqlMisc_NullString { get; }
    internal static string SqlMisc_ArithOverflowMessage { get; }
    internal static string SqlMisc_DivideByZeroMessage { get; }
    internal static string SqlMisc_NullValueMessage { get; }
    internal static string SqlMisc_TruncationMessage { get; }
    internal static string SqlMisc_DateTimeOverflowMessage { get; }
    internal static string SqlMisc_ConcatDiffCollationMessage { get; }
    internal static string SqlMisc_CompareDiffCollationMessage { get; }
    internal static string SqlMisc_ConversionOverflowMessage { get; }
    internal static string SqlMisc_InvalidDateTimeMessage { get; }
    internal static string SqlMisc_TimeZoneSpecifiedMessage { get; }
    internal static string SqlMisc_InvalidArraySizeMessage { get; }
    internal static string SqlMisc_InvalidPrecScaleMessage { get; }
    internal static string SqlMisc_FormatMessage { get; }
    internal static string SqlMisc_SqlTypeMessage { get; }
    internal static string SqlMisc_NoBufferMessage { get; }
    internal static string SqlMisc_BufferInsufficientMessage { get; }
    internal static string SqlMisc_WriteNonZeroOffsetOnNullMessage { get; }
    internal static string SqlMisc_WriteOffsetLargerThanLenMessage { get; }
    internal static string SqlMisc_NotFilledMessage { get; }
    internal static string SqlMisc_AlreadyFilledMessage { get; }
    internal static string SqlMisc_ClosedXmlReaderMessage { get; }
    internal static string SqlMisc_InvalidOpStreamClosed { get; }
    internal static string SqlMisc_InvalidOpStreamNonWritable { get; }
    internal static string SqlMisc_InvalidOpStreamNonReadable { get; }
    internal static string SqlMisc_InvalidOpStreamNonSeekable { get; }
    internal static string ADP_DBConcurrencyExceptionMessage { get; }
    internal static string ADP_InvalidMaxRecords { get; }
    internal static string ADP_CollectionIndexInt32 { get; }
    internal static string ADP_MissingTableMappingDestination { get; }
    internal static string ADP_InvalidStartRecord { get; }
    internal static string DataDom_EnforceConstraintsShouldBeOff { get; }
    internal static string DataColumns_RemoveExpression { get; }
    internal static string DataRow_RowInsertTwice { get; }
    internal static string Xml_ElementTypeNotFound { get; }
    internal static string ADP_DbProviderFactories_InvariantNameNotFound { get; }
    internal static string ADP_DbProviderFactories_NoInstance { get; }
    internal static string ADP_DbProviderFactories_FactoryNotLoadable { get; }
    internal static string ADP_DbProviderFactories_NoAssemblyQualifiedName { get; }
    internal static string ADP_DbProviderFactories_NotAFactoryType { get; }
    internal static string DataSetLinq_InvalidEnumerationValue { get; }
    internal static string LDV_InvalidNumOfKeys { get; }
    internal static string LDVRowStateError { get; }
    internal static string ToLDVUnsupported { get; }
    internal static string DataSetLinq_EmptyDataRowSource { get; }
    internal static string DataSetLinq_NullDataRow { get; }
    internal static string DataSetLinq_CannotLoadDetachedRow { get; }
    internal static string DataSetLinq_CannotCompareDeletedRow { get; }
    internal static string DataSetLinq_CannotLoadDeletedRow { get; }
    internal static string DataSetLinq_NonNullableCast { get; }
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static ResourceManager get_ResourceManager();
    internal static string get_ADP_CollectionIndexString();
    internal static string get_ADP_CollectionInvalidType();
    internal static string get_ADP_CollectionIsNotParent();
    internal static string get_ADP_CollectionNullValue();
    internal static string get_ADP_CollectionRemoveInvalidObject();
    internal static string get_ADP_CollectionUniqueValue();
    internal static string get_ADP_ConnectionStateMsg_Closed();
    internal static string get_ADP_ConnectionStateMsg_Connecting();
    internal static string get_ADP_ConnectionStateMsg_Open();
    internal static string get_ADP_ConnectionStateMsg_OpenExecuting();
    internal static string get_ADP_ConnectionStateMsg_OpenFetching();
    internal static string get_ADP_ConnectionStateMsg();
    internal static string get_ADP_ConnectionStringSyntax();
    internal static string get_ADP_DataReaderClosed();
    internal static string get_ADP_EmptyString();
    internal static string get_ADP_InvalidEnumerationValue();
    internal static string get_ADP_InvalidKey();
    internal static string get_ADP_InvalidValue();
    internal static string get_Xml_SimpleTypeNotSupported();
    internal static string get_Xml_MissingAttribute();
    internal static string get_Xml_ValueOutOfRange();
    internal static string get_Xml_AttributeValues();
    internal static string get_Xml_RelationParentNameMissing();
    internal static string get_Xml_RelationChildNameMissing();
    internal static string get_Xml_RelationTableKeyMissing();
    internal static string get_Xml_RelationChildKeyMissing();
    internal static string get_Xml_UndefinedDatatype();
    internal static string get_Xml_DatatypeNotDefined();
    internal static string get_Xml_InvalidField();
    internal static string get_Xml_InvalidSelector();
    internal static string get_Xml_InvalidKey();
    internal static string get_Xml_DuplicateConstraint();
    internal static string get_Xml_CannotConvert();
    internal static string get_Xml_MissingRefer();
    internal static string get_Xml_MismatchKeyLength();
    internal static string get_Xml_CircularComplexType();
    internal static string get_Xml_CannotInstantiateAbstract();
    internal static string get_Xml_MultipleTargetConverterError();
    internal static string get_Xml_MultipleTargetConverterEmpty();
    internal static string get_Xml_MergeDuplicateDeclaration();
    internal static string get_Xml_MissingTable();
    internal static string get_Xml_MissingSQL();
    internal static string get_Xml_ColumnConflict();
    internal static string get_Xml_InvalidPrefix_SpecialCharacters();
    internal static string get_Xml_NestedCircular();
    internal static string get_Xml_FoundEntity();
    internal static string get_Xml_PolymorphismNotSupported();
    internal static string get_Xml_CanNotDeserializeObjectType();
    internal static string get_Xml_DataTableInferenceNotSupported();
    internal static string get_Xml_MultipleParentRows();
    internal static string get_Xml_IsDataSetAttributeMissingInSchema();
    internal static string get_Xml_TooManyIsDataSetAttributesInSchema();
    internal static string get_Xml_DynamicWithoutXmlSerializable();
    internal static string get_Expr_NYI();
    internal static string get_Expr_MissingOperand();
    internal static string get_Expr_TypeMismatch();
    internal static string get_Expr_ExpressionTooComplex();
    internal static string get_Expr_UnboundName();
    internal static string get_Expr_InvalidString();
    internal static string get_Expr_UndefinedFunction();
    internal static string get_Expr_Syntax();
    internal static string get_Expr_FunctionArgumentCount();
    internal static string get_Expr_MissingRightParen();
    internal static string get_Expr_UnknownToken();
    internal static string get_Expr_UnknownToken1();
    internal static string get_Expr_DatatypeConvertion();
    internal static string get_Expr_DatavalueConvertion();
    internal static string get_Expr_InvalidName();
    internal static string get_Expr_InvalidDate();
    internal static string get_Expr_NonConstantArgument();
    internal static string get_Expr_InvalidPattern();
    internal static string get_Expr_InWithoutParentheses();
    internal static string get_Expr_ArgumentType();
    internal static string get_Expr_ArgumentTypeInteger();
    internal static string get_Expr_TypeMismatchInBinop();
    internal static string get_Expr_AmbiguousBinop();
    internal static string get_Expr_InWithoutList();
    internal static string get_Expr_UnsupportedOperator();
    internal static string get_Expr_InvalidNameBracketing();
    internal static string get_Expr_MissingOperandBefore();
    internal static string get_Expr_TooManyRightParentheses();
    internal static string get_Expr_UnresolvedRelation();
    internal static string get_Expr_AggregateArgument();
    internal static string get_Expr_AggregateUnbound();
    internal static string get_Expr_EvalNoContext();
    internal static string get_Expr_ExpressionUnbound();
    internal static string get_Expr_ComputeNotAggregate();
    internal static string get_Expr_FilterConvertion();
    internal static string get_Expr_InvalidType();
    internal static string get_Expr_LookupArgument();
    internal static string get_Expr_InvokeArgument();
    internal static string get_Expr_ArgumentOutofRange();
    internal static string get_Expr_IsSyntax();
    internal static string get_Expr_Overflow();
    internal static string get_Expr_BindFailure();
    internal static string get_Expr_InvalidHoursArgument();
    internal static string get_Expr_InvalidMinutesArgument();
    internal static string get_Expr_InvalidTimeZoneRange();
    internal static string get_Expr_MismatchKindandTimeSpan();
    internal static string get_Expr_UnsupportedType();
    internal static string get_Data_EnforceConstraints();
    internal static string get_Data_CannotModifyCollection();
    internal static string get_Data_CaseInsensitiveNameConflict();
    internal static string get_Data_NamespaceNameConflict();
    internal static string get_Data_InvalidOffsetLength();
    internal static string get_Data_ArgumentOutOfRange();
    internal static string get_Data_ArgumentNull();
    internal static string get_Data_ArgumentContainsNull();
    internal static string get_Data_TypeNotAllowed();
    internal static string get_DataColumns_OutOfRange();
    internal static string get_DataColumns_Add1();
    internal static string get_DataColumns_Add2();
    internal static string get_DataColumns_Add3();
    internal static string get_DataColumns_Add4();
    internal static string get_DataColumns_AddDuplicate();
    internal static string get_DataColumns_AddDuplicate2();
    internal static string get_DataColumns_AddDuplicate3();
    internal static string get_DataColumns_Remove();
    internal static string get_DataColumns_RemovePrimaryKey();
    internal static string get_DataColumns_RemoveChildKey();
    internal static string get_DataColumns_RemoveConstraint();
    internal static string get_DataColumn_AutoIncrementAndExpression();
    internal static string get_DataColumn_AutoIncrementAndDefaultValue();
    internal static string get_DataColumn_DefaultValueAndAutoIncrement();
    internal static string get_DataColumn_AutoIncrementSeed();
    internal static string get_DataColumn_NameRequired();
    internal static string get_DataColumn_ChangeDataType();
    internal static string get_DataColumn_NullDataType();
    internal static string get_DataColumn_DefaultValueDataType();
    internal static string get_DataColumn_DefaultValueDataType1();
    internal static string get_DataColumn_DefaultValueColumnDataType();
    internal static string get_DataColumn_ReadOnlyAndExpression();
    internal static string get_DataColumn_UniqueAndExpression();
    internal static string get_DataColumn_ExpressionAndUnique();
    internal static string get_DataColumn_ExpressionAndReadOnly();
    internal static string get_DataColumn_ExpressionAndConstraint();
    internal static string get_DataColumn_ExpressionInConstraint();
    internal static string get_DataColumn_ExpressionCircular();
    internal static string get_DataColumn_NullKeyValues();
    internal static string get_DataColumn_NullValues();
    internal static string get_DataColumn_ReadOnly();
    internal static string get_DataColumn_NonUniqueValues();
    internal static string get_DataColumn_NotInTheTable();
    internal static string get_DataColumn_NotInAnyTable();
    internal static string get_DataColumn_SetFailed();
    internal static string get_DataColumn_CannotSetToNull();
    internal static string get_DataColumn_LongerThanMaxLength();
    internal static string get_DataColumn_HasToBeStringType();
    internal static string get_DataColumn_CannotSetMaxLength();
    internal static string get_DataColumn_CannotSetMaxLength2();
    internal static string get_DataColumn_CannotSimpleContentType();
    internal static string get_DataColumn_CannotSimpleContent();
    internal static string get_DataColumn_ExceedMaxLength();
    internal static string get_DataColumn_NotAllowDBNull();
    internal static string get_DataColumn_CannotChangeNamespace();
    internal static string get_DataColumn_AutoIncrementCannotSetIfHasData();
    internal static string get_DataColumn_NotInTheUnderlyingTable();
    internal static string get_DataColumn_InvalidDataColumnMapping();
    internal static string get_DataColumn_CannotSetDateTimeModeForNonDateTimeColumns();
    internal static string get_DataColumn_DateTimeMode();
    internal static string get_DataColumn_INullableUDTwithoutStaticNull();
    internal static string get_DataColumn_UDTImplementsIChangeTrackingButnotIRevertible();
    internal static string get_DataColumn_SetAddedAndModifiedCalledOnNonUnchanged();
    internal static string get_DataColumn_OrdinalExceedMaximun();
    internal static string get_DataColumn_NullableTypesNotSupported();
    internal static string get_DataConstraint_NoName();
    internal static string get_DataConstraint_Violation();
    internal static string get_DataConstraint_ViolationValue();
    internal static string get_DataConstraint_NotInTheTable();
    internal static string get_DataConstraint_OutOfRange();
    internal static string get_DataConstraint_Duplicate();
    internal static string get_DataConstraint_DuplicateName();
    internal static string get_DataConstraint_UniqueViolation();
    internal static string get_DataConstraint_ForeignTable();
    internal static string get_DataConstraint_ParentValues();
    internal static string get_DataConstraint_AddFailed();
    internal static string get_DataConstraint_RemoveFailed();
    internal static string get_DataConstraint_NeededForForeignKeyConstraint();
    internal static string get_DataConstraint_CascadeDelete();
    internal static string get_DataConstraint_CascadeUpdate();
    internal static string get_DataConstraint_ClearParentTable();
    internal static string get_DataConstraint_ForeignKeyViolation();
    internal static string get_DataConstraint_BadObjectPropertyAccess();
    internal static string get_DataConstraint_RemoveParentRow();
    internal static string get_DataConstraint_AddPrimaryKeyConstraint();
    internal static string get_DataConstraint_CantAddConstraintToMultipleNestedTable();
    internal static string get_DataKey_TableMismatch();
    internal static string get_DataKey_NoColumns();
    internal static string get_DataKey_TooManyColumns();
    internal static string get_DataKey_DuplicateColumns();
    internal static string get_DataKey_RemovePrimaryKey();
    internal static string get_DataKey_RemovePrimaryKey1();
    internal static string get_DataRelation_ColumnsTypeMismatch();
    internal static string get_DataRelation_KeyColumnsIdentical();
    internal static string get_DataRelation_KeyLengthMismatch();
    internal static string get_DataRelation_KeyZeroLength();
    internal static string get_DataRelation_ForeignRow();
    internal static string get_DataRelation_NoName();
    internal static string get_DataRelation_ForeignTable();
    internal static string get_DataRelation_ForeignDataSet();
    internal static string get_DataRelation_GetParentRowTableMismatch();
    internal static string get_DataRelation_SetParentRowTableMismatch();
    internal static string get_DataRelation_DataSetMismatch();
    internal static string get_DataRelation_TablesInDifferentSets();
    internal static string get_DataRelation_AlreadyExists();
    internal static string get_DataRelation_DoesNotExist();
    internal static string get_DataRelation_AlreadyInOtherDataSet();
    internal static string get_DataRelation_AlreadyInTheDataSet();
    internal static string get_DataRelation_DuplicateName();
    internal static string get_DataRelation_NotInTheDataSet();
    internal static string get_DataRelation_OutOfRange();
    internal static string get_DataRelation_TableNull();
    internal static string get_DataRelation_TableWasRemoved();
    internal static string get_DataRelation_ChildTableMismatch();
    internal static string get_DataRelation_ParentTableMismatch();
    internal static string get_DataRelation_RelationNestedReadOnly();
    internal static string get_DataRelation_TableCantBeNestedInTwoTables();
    internal static string get_DataRelation_LoopInNestedRelations();
    internal static string get_DataRelation_CaseLocaleMismatch();
    internal static string get_DataRelation_ParentOrChildColumnsDoNotHaveDataSet();
    internal static string get_DataRelation_InValidNestedRelation();
    internal static string get_DataRelation_InValidNamespaceInNestedRelation();
    internal static string get_DataRow_NotInTheDataSet();
    internal static string get_DataRow_NotInTheTable();
    internal static string get_DataRow_ParentRowNotInTheDataSet();
    internal static string get_DataRow_EditInRowChanging();
    internal static string get_DataRow_EndEditInRowChanging();
    internal static string get_DataRow_BeginEditInRowChanging();
    internal static string get_DataRow_CancelEditInRowChanging();
    internal static string get_DataRow_DeleteInRowDeleting();
    internal static string get_DataRow_ValuesArrayLength();
    internal static string get_DataRow_NoCurrentData();
    internal static string get_DataRow_NoOriginalData();
    internal static string get_DataRow_NoProposedData();
    internal static string get_DataRow_RemovedFromTheTable();
    internal static string get_DataRow_DeletedRowInaccessible();
    internal static string get_DataRow_InvalidVersion();
    internal static string get_DataRow_OutOfRange();
    internal static string get_DataRow_RowInsertOutOfRange();
    internal static string get_DataRow_RowInsertMissing();
    internal static string get_DataRow_RowOutOfRange();
    internal static string get_DataRow_AlreadyInOtherCollection();
    internal static string get_DataRow_AlreadyInTheCollection();
    internal static string get_DataRow_AlreadyDeleted();
    internal static string get_DataRow_Empty();
    internal static string get_DataRow_AlreadyRemoved();
    internal static string get_DataRow_MultipleParents();
    internal static string get_DataRow_InvalidRowBitPattern();
    internal static string get_DataSet_SetNameToEmpty();
    internal static string get_DataSet_SetDataSetNameConflicting();
    internal static string get_DataSet_UnsupportedSchema();
    internal static string get_DataSet_CannotChangeCaseLocale();
    internal static string get_DataSet_CannotChangeSchemaSerializationMode();
    internal static string get_DataTable_ForeignPrimaryKey();
    internal static string get_DataTable_CannotAddToSimpleContent();
    internal static string get_DataTable_NoName();
    internal static string get_DataTable_MultipleSimpleContentColumns();
    internal static string get_DataTable_MissingPrimaryKey();
    internal static string get_DataTable_InvalidSortString();
    internal static string get_DataTable_CanNotSerializeDataTableHierarchy();
    internal static string get_DataTable_CanNotRemoteDataTable();
    internal static string get_DataTable_CanNotSetRemotingFormat();
    internal static string get_DataTable_CanNotSerializeDataTableWithEmptyName();
    internal static string get_DataTable_DuplicateName();
    internal static string get_DataTable_DuplicateName2();
    internal static string get_DataTable_SelfnestedDatasetConflictingName();
    internal static string get_DataTable_DatasetConflictingName();
    internal static string get_DataTable_AlreadyInOtherDataSet();
    internal static string get_DataTable_AlreadyInTheDataSet();
    internal static string get_DataTable_NotInTheDataSet();
    internal static string get_DataTable_OutOfRange();
    internal static string get_DataTable_InRelation();
    internal static string get_DataTable_InConstraint();
    internal static string get_DataTable_TableNotFound();
    internal static string get_DataMerge_MissingDefinition();
    internal static string get_DataMerge_MissingConstraint();
    internal static string get_DataMerge_DataTypeMismatch();
    internal static string get_DataMerge_PrimaryKeyMismatch();
    internal static string get_DataMerge_PrimaryKeyColumnsMismatch();
    internal static string get_DataMerge_ReltionKeyColumnsMismatch();
    internal static string get_DataMerge_MissingColumnDefinition();
    internal static string get_DataIndex_RecordStateRange();
    internal static string get_DataIndex_FindWithoutSortOrder();
    internal static string get_DataIndex_KeyLength();
    internal static string get_DataStorage_AggregateException();
    internal static string get_DataStorage_InvalidStorageType();
    internal static string get_DataStorage_ProblematicChars();
    internal static string get_DataStorage_SetInvalidDataType();
    internal static string get_DataStorage_IComparableNotDefined();
    internal static string get_DataView_SetFailed();
    internal static string get_DataView_SetDataSetFailed();
    internal static string get_DataView_SetRowStateFilter();
    internal static string get_DataView_SetTable();
    internal static string get_DataView_CanNotSetDataSet();
    internal static string get_DataView_CanNotUseDataViewManager();
    internal static string get_DataView_CanNotSetTable();
    internal static string get_DataView_CanNotUse();
    internal static string get_DataView_CanNotBindTable();
    internal static string get_DataView_SetIListObject();
    internal static string get_DataView_AddNewNotAllowNull();
    internal static string get_DataView_NotOpen();
    internal static string get_DataView_CreateChildView();
    internal static string get_DataView_CanNotDelete();
    internal static string get_DataView_CanNotEdit();
    internal static string get_DataView_GetElementIndex();
    internal static string get_DataView_AddExternalObject();
    internal static string get_DataView_CanNotClear();
    internal static string get_DataView_InsertExternalObject();
    internal static string get_DataView_RemoveExternalObject();
    internal static string get_DataROWView_PropertyNotFound();
    internal static string get_Range_Argument();
    internal static string get_Range_NullRange();
    internal static string get_RecordManager_MinimumCapacity();
    internal static string get_SqlConvert_ConvertFailed();
    internal static string get_DataSet_DefaultDataException();
    internal static string get_DataSet_DefaultConstraintException();
    internal static string get_DataSet_DefaultDeletedRowInaccessibleException();
    internal static string get_DataSet_DefaultDuplicateNameException();
    internal static string get_DataSet_DefaultInRowChangingEventException();
    internal static string get_DataSet_DefaultInvalidConstraintException();
    internal static string get_DataSet_DefaultMissingPrimaryKeyException();
    internal static string get_DataSet_DefaultNoNullAllowedException();
    internal static string get_DataSet_DefaultReadOnlyException();
    internal static string get_DataSet_DefaultRowNotInTableException();
    internal static string get_DataSet_DefaultVersionNotFoundException();
    internal static string get_Load_ReadOnlyDataModified();
    internal static string get_DataTableReader_InvalidDataTableReader();
    internal static string get_DataTableReader_SchemaInvalidDataTableReader();
    internal static string get_DataTableReader_CannotCreateDataReaderOnEmptyDataSet();
    internal static string get_DataTableReader_DataTableReaderArgumentIsEmpty();
    internal static string get_DataTableReader_ArgumentContainsNullValue();
    internal static string get_DataTableReader_InvalidRowInDataTableReader();
    internal static string get_DataTableReader_DataTableCleared();
    internal static string get_RbTree_InvalidState();
    internal static string get_RbTree_EnumerationBroken();
    internal static string get_NamedSimpleType_InvalidDuplicateNamedSimpleTypeDelaration();
    internal static string get_DataDom_Foliation();
    internal static string get_DataDom_TableNameChange();
    internal static string get_DataDom_TableNamespaceChange();
    internal static string get_DataDom_ColumnNameChange();
    internal static string get_DataDom_ColumnNamespaceChange();
    internal static string get_DataDom_ColumnMappingChange();
    internal static string get_DataDom_TableColumnsChange();
    internal static string get_DataDom_DataSetTablesChange();
    internal static string get_DataDom_DataSetNestedRelationsChange();
    internal static string get_DataDom_DataSetNull();
    internal static string get_DataDom_DataSetNameChange();
    internal static string get_DataDom_CloneNode();
    internal static string get_DataDom_MultipleLoad();
    internal static string get_DataDom_MultipleDataSet();
    internal static string get_DataDom_NotSupport_GetElementById();
    internal static string get_DataDom_NotSupport_EntRef();
    internal static string get_DataDom_NotSupport_Clear();
    internal static string get_ADP_EmptyArray();
    internal static string get_SQL_WrongType();
    internal static string get_ADP_KeywordNotSupported();
    internal static string get_ADP_InternalProviderError();
    internal static string get_ADP_NoQuoteChange();
    internal static string get_ADP_MissingSourceCommand();
    internal static string get_ADP_MissingSourceCommandConnection();
    internal static string get_ADP_ColumnSchemaExpression();
    internal static string get_ADP_ColumnSchemaMismatch();
    internal static string get_ADP_ColumnSchemaMissing1();
    internal static string get_ADP_ColumnSchemaMissing2();
    internal static string get_ADP_InvalidSourceColumn();
    internal static string get_ADP_MissingColumnMapping();
    internal static string get_ADP_NotSupportedEnumerationValue();
    internal static string get_ADP_MissingTableSchema();
    internal static string get_ADP_InvalidSourceTable();
    internal static string get_ADP_MissingTableMapping();
    internal static string get_ADP_ConnectionRequired_Insert();
    internal static string get_ADP_ConnectionRequired_Update();
    internal static string get_ADP_ConnectionRequired_Delete();
    internal static string get_ADP_ConnectionRequired_Batch();
    internal static string get_ADP_ConnectionRequired_Clone();
    internal static string get_ADP_OpenConnectionRequired_Insert();
    internal static string get_ADP_OpenConnectionRequired_Update();
    internal static string get_ADP_OpenConnectionRequired_Delete();
    internal static string get_ADP_OpenConnectionRequired_Clone();
    internal static string get_ADP_MissingSelectCommand();
    internal static string get_ADP_UnwantedStatementType();
    internal static string get_ADP_FillSchemaRequiresSourceTableName();
    internal static string get_ADP_FillRequiresSourceTableName();
    internal static string get_ADP_FillChapterAutoIncrement();
    internal static string get_ADP_MissingDataReaderFieldType();
    internal static string get_ADP_OnlyOneTableForStartRecordOrMaxRecords();
    internal static string get_ADP_UpdateRequiresSourceTable();
    internal static string get_ADP_UpdateRequiresSourceTableName();
    internal static string get_ADP_UpdateRequiresCommandClone();
    internal static string get_ADP_UpdateRequiresCommandSelect();
    internal static string get_ADP_UpdateRequiresCommandInsert();
    internal static string get_ADP_UpdateRequiresCommandUpdate();
    internal static string get_ADP_UpdateRequiresCommandDelete();
    internal static string get_ADP_UpdateMismatchRowTable();
    internal static string get_ADP_RowUpdatedErrors();
    internal static string get_ADP_RowUpdatingErrors();
    internal static string get_ADP_ResultsNotAllowedDuringBatch();
    internal static string get_ADP_UpdateConcurrencyViolation_Update();
    internal static string get_ADP_UpdateConcurrencyViolation_Delete();
    internal static string get_ADP_UpdateConcurrencyViolation_Batch();
    internal static string get_ADP_InvalidSourceBufferIndex();
    internal static string get_ADP_InvalidDestinationBufferIndex();
    internal static string get_ADP_StreamClosed();
    internal static string get_ADP_InvalidSeekOrigin();
    internal static string get_ADP_DynamicSQLJoinUnsupported();
    internal static string get_ADP_DynamicSQLNoTableInfo();
    internal static string get_ADP_DynamicSQLNoKeyInfoDelete();
    internal static string get_ADP_DynamicSQLNoKeyInfoUpdate();
    internal static string get_ADP_DynamicSQLNoKeyInfoRowVersionDelete();
    internal static string get_ADP_DynamicSQLNoKeyInfoRowVersionUpdate();
    internal static string get_ADP_DynamicSQLNestedQuote();
    internal static string get_SQL_InvalidBufferSizeOrIndex();
    internal static string get_SQL_InvalidDataLength();
    internal static string get_SqlMisc_NullString();
    internal static string get_SqlMisc_ArithOverflowMessage();
    internal static string get_SqlMisc_DivideByZeroMessage();
    internal static string get_SqlMisc_NullValueMessage();
    internal static string get_SqlMisc_TruncationMessage();
    internal static string get_SqlMisc_DateTimeOverflowMessage();
    internal static string get_SqlMisc_ConcatDiffCollationMessage();
    internal static string get_SqlMisc_CompareDiffCollationMessage();
    internal static string get_SqlMisc_ConversionOverflowMessage();
    internal static string get_SqlMisc_InvalidDateTimeMessage();
    internal static string get_SqlMisc_TimeZoneSpecifiedMessage();
    internal static string get_SqlMisc_InvalidArraySizeMessage();
    internal static string get_SqlMisc_InvalidPrecScaleMessage();
    internal static string get_SqlMisc_FormatMessage();
    internal static string get_SqlMisc_SqlTypeMessage();
    internal static string get_SqlMisc_NoBufferMessage();
    internal static string get_SqlMisc_BufferInsufficientMessage();
    internal static string get_SqlMisc_WriteNonZeroOffsetOnNullMessage();
    internal static string get_SqlMisc_WriteOffsetLargerThanLenMessage();
    internal static string get_SqlMisc_NotFilledMessage();
    internal static string get_SqlMisc_AlreadyFilledMessage();
    internal static string get_SqlMisc_ClosedXmlReaderMessage();
    internal static string get_SqlMisc_InvalidOpStreamClosed();
    internal static string get_SqlMisc_InvalidOpStreamNonWritable();
    internal static string get_SqlMisc_InvalidOpStreamNonReadable();
    internal static string get_SqlMisc_InvalidOpStreamNonSeekable();
    internal static string get_ADP_DBConcurrencyExceptionMessage();
    internal static string get_ADP_InvalidMaxRecords();
    internal static string get_ADP_CollectionIndexInt32();
    internal static string get_ADP_MissingTableMappingDestination();
    internal static string get_ADP_InvalidStartRecord();
    internal static string get_DataDom_EnforceConstraintsShouldBeOff();
    internal static string get_DataColumns_RemoveExpression();
    internal static string get_DataRow_RowInsertTwice();
    internal static string get_Xml_ElementTypeNotFound();
    internal static string get_ADP_DbProviderFactories_InvariantNameNotFound();
    internal static string get_ADP_DbProviderFactories_NoInstance();
    internal static string get_ADP_DbProviderFactories_FactoryNotLoadable();
    internal static string get_ADP_DbProviderFactories_NoAssemblyQualifiedName();
    internal static string get_ADP_DbProviderFactories_NotAFactoryType();
    internal static string get_DataSetLinq_InvalidEnumerationValue();
    internal static string get_LDV_InvalidNumOfKeys();
    internal static string get_LDVRowStateError();
    internal static string get_ToLDVUnsupported();
    internal static string get_DataSetLinq_EmptyDataRowSource();
    internal static string get_DataSetLinq_NullDataRow();
    internal static string get_DataSetLinq_CannotLoadDetachedRow();
    internal static string get_DataSetLinq_CannotCompareDeletedRow();
    internal static string get_DataSetLinq_CannotLoadDeletedRow();
    internal static string get_DataSetLinq_NonNullableCast();
}
internal abstract class System.Xml.BaseRegionIterator : BaseTreeIterator {
    internal BaseRegionIterator(DataSetMapper mapper);
}
internal abstract class System.Xml.BaseTreeIterator : object {
    protected DataSetMapper mapper;
    internal XmlNode CurrentNode { get; }
    internal BaseTreeIterator(DataSetMapper mapper);
    internal abstract virtual XmlNode get_CurrentNode();
    internal abstract virtual bool Next();
    internal abstract virtual bool NextRight();
    internal bool NextRowElement();
    internal bool NextRightRowElement();
    internal bool OnRowElement();
}
internal class System.Xml.DataDocumentXPathNavigator : XPathNavigator {
    private XPathNodePointer _curNode;
    private XmlDataDocument _doc;
    private XPathNodePointer _temp;
    internal XPathNodePointer CurNode { get; }
    internal XmlDataDocument Document { get; }
    public XPathNodeType NodeType { get; }
    public string LocalName { get; }
    public string NamespaceURI { get; }
    public string Name { get; }
    public string Prefix { get; }
    public string Value { get; }
    public string BaseURI { get; }
    public string XmlLang { get; }
    public bool IsEmptyElement { get; }
    public XmlNameTable NameTable { get; }
    public bool HasAttributes { get; }
    public bool HasChildren { get; }
    internal DataDocumentXPathNavigator(XmlDataDocument doc, XmlNode node);
    private DataDocumentXPathNavigator(DataDocumentXPathNavigator other);
    public virtual XPathNavigator Clone();
    internal XPathNodePointer get_CurNode();
    internal XmlDataDocument get_Document();
    public virtual XPathNodeType get_NodeType();
    public virtual string get_LocalName();
    public virtual string get_NamespaceURI();
    public virtual string get_Name();
    public virtual string get_Prefix();
    public virtual string get_Value();
    public virtual string get_BaseURI();
    public virtual string get_XmlLang();
    public virtual bool get_IsEmptyElement();
    public virtual XmlNameTable get_NameTable();
    public virtual bool get_HasAttributes();
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual string GetNamespace(string name);
    public virtual bool MoveToNamespace(string name);
    public virtual bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope);
    public virtual bool MoveToNextNamespace(XPathNamespaceScope namespaceScope);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool MoveToNext();
    public virtual bool MoveToPrevious();
    public virtual bool MoveToFirst();
    public virtual bool get_HasChildren();
    public virtual bool MoveToFirstChild();
    public virtual bool MoveToParent();
    public virtual void MoveToRoot();
    public virtual bool MoveTo(XPathNavigator other);
    public virtual bool MoveToId(string id);
    public virtual bool IsSamePosition(XPathNavigator other);
    private sealed virtual override XmlNode System.Xml.IHasXmlNode.GetNode();
    public virtual XmlNodeOrder ComparePosition(XPathNavigator other);
}
internal class System.Xml.DataPointer : object {
    private XmlDataDocument _doc;
    private XmlNode _node;
    private DataColumn _column;
    private bool _fOnValue;
    private bool _bNeedFoliate;
    private bool _isInUse;
    private DataRow Row { get; }
    internal int AttributeCount { get; }
    internal XmlNodeType NodeType { get; }
    internal string LocalName { get; }
    internal string NamespaceURI { get; }
    internal string Name { get; }
    internal string Prefix { get; }
    internal string Value { get; }
    internal bool IsEmptyElement { get; }
    internal bool IsDefault { get; }
    internal string PublicId { get; }
    internal string SystemId { get; }
    internal string InternalSubset { get; }
    internal XmlDeclaration Declaration { get; }
    internal string Encoding { get; }
    internal string Standalone { get; }
    internal string Version { get; }
    internal DataPointer(XmlDataDocument doc, XmlNode node);
    internal DataPointer(DataPointer pointer);
    internal void AddPointer();
    private XmlBoundElement GetRowElement();
    private DataRow get_Row();
    private static bool IsFoliated(XmlNode node);
    internal void MoveTo(DataPointer pointer);
    private void MoveTo(XmlNode node);
    private void MoveTo(XmlNode node, DataColumn column, bool fOnValue);
    private DataColumn NextColumn(DataRow row, DataColumn col, bool fAttribute, bool fNulls);
    private DataColumn NthColumn(DataRow row, bool fAttribute, int iColumn, bool fNulls);
    private int ColumnCount(DataRow row, bool fAttribute, bool fNulls);
    internal bool MoveToFirstChild();
    internal bool MoveToNextSibling();
    internal bool MoveToParent();
    internal bool MoveToOwnerElement();
    internal int get_AttributeCount();
    internal bool MoveToAttribute(int i);
    internal XmlNodeType get_NodeType();
    internal string get_LocalName();
    internal string get_NamespaceURI();
    internal string get_Name();
    private bool IsLocalNameEmpty(XmlNodeType nt);
    internal string get_Prefix();
    internal string get_Value();
    private sealed virtual override bool System.Xml.IXmlDataVirtualNode.IsOnNode(XmlNode nodeToCheck);
    internal XmlNode GetNode();
    internal bool get_IsEmptyElement();
    internal bool get_IsDefault();
    private sealed virtual override void System.Xml.IXmlDataVirtualNode.OnFoliated(XmlNode foliatedNode);
    internal void RealFoliate();
    internal string get_PublicId();
    internal string get_SystemId();
    internal string get_InternalSubset();
    internal XmlDeclaration get_Declaration();
    internal string get_Encoding();
    internal string get_Standalone();
    internal string get_Version();
    private sealed virtual override bool System.Xml.IXmlDataVirtualNode.IsInUse();
    internal void SetNoLongerUse();
}
internal class System.Xml.DataSetMapper : object {
    private Hashtable _tableSchemaMap;
    private Hashtable _columnSchemaMap;
    private XmlDataDocument _doc;
    private DataSet _dataSet;
    internal void SetupMapping(XmlDataDocument xd, DataSet ds);
    internal bool IsMapped();
    internal DataTable SearchMatchingTableSchema(string localName, string namespaceURI);
    internal DataTable SearchMatchingTableSchema(XmlBoundElement rowElem, XmlBoundElement elem);
    internal DataColumn GetColumnSchemaForNode(XmlBoundElement rowElem, XmlNode node);
    internal DataTable GetTableSchemaForElement(XmlBoundElement be);
    internal static bool IsNotMapped(DataColumn c);
    internal DataRow GetRowFromElement(XmlElement e);
    internal DataRow GetRowFromElement(XmlBoundElement be);
    internal bool GetRegion(XmlNode node, XmlBoundElement& rowElem);
    internal bool IsRegionRadical(XmlBoundElement rowElem);
    private void AddTableSchema(DataTable table);
    private void AddColumnSchema(DataColumn col);
    private static object GetIdentity(string localName, string namespaceURI);
    private bool IsNextColumn(DataColumnCollection columns, Int32& iColumn, DataColumn col);
}
internal enum System.Xml.ElementState : Enum {
    public int value__;
    public static ElementState None;
    public static ElementState Defoliated;
    public static ElementState WeakFoliation;
    public static ElementState StrongFoliation;
    public static ElementState Foliating;
    public static ElementState Defoliating;
}
internal interface System.Xml.IXmlDataVirtualNode {
    public abstract virtual bool IsOnNode(XmlNode nodeToCheck);
    public abstract virtual bool IsInUse();
    public abstract virtual void OnFoliated(XmlNode foliatedNode);
}
internal class System.Xml.RegionIterator : BaseRegionIterator {
    private XmlBoundElement _rowElement;
    private XmlNode _currentNode;
    internal XmlNode CurrentNode { get; }
    internal RegionIterator(XmlBoundElement rowElement);
    internal virtual XmlNode get_CurrentNode();
    internal virtual bool Next();
    internal virtual bool NextRight();
    internal bool NextInitialTextLikeNodes(String& value);
    private static string GetInitialTextFromNodes(XmlNode& n);
}
internal class System.Xml.TreeIterator : BaseTreeIterator {
    private XmlNode _nodeTop;
    private XmlNode _currentNode;
    internal XmlNode CurrentNode { get; }
    internal TreeIterator(XmlNode nodeTop);
    internal virtual XmlNode get_CurrentNode();
    internal virtual bool Next();
    internal virtual bool NextRight();
}
internal class System.Xml.XmlBoundElement : XmlElement {
    private DataRow _row;
    private ElementState _state;
    public XmlAttributeCollection Attributes { get; }
    public bool HasAttributes { get; }
    public XmlNode FirstChild { get; }
    internal XmlNode SafeFirstChild { get; }
    public XmlNode LastChild { get; }
    public XmlNode PreviousSibling { get; }
    internal XmlNode SafePreviousSibling { get; }
    public XmlNode NextSibling { get; }
    internal XmlNode SafeNextSibling { get; }
    public bool HasChildNodes { get; }
    public string InnerXml { get; public set; }
    internal DataRow Row { get; internal set; }
    internal bool IsFoliated { get; }
    internal ElementState ElementState { get; internal set; }
    internal XmlBoundElement(string prefix, string localName, string namespaceURI, XmlDocument doc);
    public virtual XmlAttributeCollection get_Attributes();
    public virtual bool get_HasAttributes();
    public virtual XmlNode get_FirstChild();
    internal XmlNode get_SafeFirstChild();
    public virtual XmlNode get_LastChild();
    public virtual XmlNode get_PreviousSibling();
    internal XmlNode get_SafePreviousSibling();
    public virtual XmlNode get_NextSibling();
    internal XmlNode get_SafeNextSibling();
    public virtual bool get_HasChildNodes();
    public virtual XmlNode InsertBefore(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode InsertAfter(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode ReplaceChild(XmlNode newChild, XmlNode oldChild);
    public virtual XmlNode AppendChild(XmlNode newChild);
    internal void RemoveAllChildren();
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    internal DataRow get_Row();
    internal void set_Row(DataRow value);
    internal bool get_IsFoliated();
    internal ElementState get_ElementState();
    internal void set_ElementState(ElementState value);
    internal void Foliate(ElementState newState);
    private void AutoFoliate();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
    private void WriteRootBoundElementTo(DataPointer dp, XmlWriter w);
    private static void WriteBoundElementTo(DataPointer dp, XmlWriter w);
    private static void WriteBoundElementContentTo(DataPointer dp, XmlWriter w);
    private static void WriteTo(DataPointer dp, XmlWriter w);
    public virtual XmlNodeList GetElementsByTagName(string name);
}
[ObsoleteAttribute("XmlDataDocument class will be removed in a future release.")]
public class System.Xml.XmlDataDocument : XmlDocument {
    private DataSet _dataSet;
    private DataSetMapper _mapper;
    internal Hashtable _pointers;
    private int _countAddPointer;
    private ArrayList _columnChangeList;
    private DataRowState _rollbackState;
    private bool _fBoundToDataSet;
    private bool _fBoundToDocument;
    private bool _fDataRowCreatedSpecial;
    private bool _ignoreXmlEvents;
    private bool _ignoreDataSetEvents;
    private bool _isFoliationEnabled;
    private bool _optimizeStorage;
    private ElementState _autoFoliationState;
    private bool _fAssociateDataRow;
    private object _foliationLock;
    private bool _bForceExpandEntity;
    internal XmlAttribute _attrXml;
    internal bool _bLoadFromDataSet;
    internal bool _bHasXSINIL;
    internal ElementState AutoFoliationState { get; internal set; }
    public DataSet DataSet { get; }
    internal bool IgnoreXmlEvents { get; internal set; }
    internal bool IgnoreDataSetEvents { get; internal set; }
    internal bool IsFoliationEnabled { get; internal set; }
    internal DataSetMapper Mapper { get; }
    public XmlDataDocument(DataSet dataset);
    internal XmlDataDocument(XmlImplementation imp);
    internal void AddPointer(IXmlDataVirtualNode pointer);
    private void AttachDataSet(DataSet ds);
    internal void SyncRows(DataRow parentRow, XmlNode node, bool fAddRowsToTable);
    internal void SyncTree(XmlNode node);
    internal ElementState get_AutoFoliationState();
    internal void set_AutoFoliationState(ElementState value);
    private void BindForLoad();
    private void Bind(bool fLoadFromDataSet);
    internal void Bind(DataRow r, XmlBoundElement e);
    private void BindSpecialListeners();
    private void UnBindSpecialListeners();
    private void BindListeners();
    private void BindToDataSet();
    private void BindToDocument();
    private void BindToTable(DataTable t);
    public virtual XmlElement CreateElement(string prefix, string localName, string namespaceURI);
    public virtual XmlEntityReference CreateEntityReference(string name);
    public DataSet get_DataSet();
    private void DefoliateRegion(XmlBoundElement rowElem);
    private XmlElement EnsureDocumentElement();
    private XmlElement EnsureNonRowDocumentElement();
    private XmlElement DemoteDocumentElement();
    private void EnsurePopulatedMode();
    private void FixNestedChildren(DataRow row, XmlElement rowElement);
    internal void Foliate(XmlBoundElement node, ElementState newState);
    private void Foliate(XmlElement element);
    private void FoliateIfDataPointers(DataRow row, XmlElement rowElement);
    private void EnsureFoliation(XmlBoundElement rowElem, ElementState foliation);
    private void ForceFoliation(XmlBoundElement node, ElementState newState);
    private XmlNode GetColumnInsertAfterLocation(DataRow row, DataColumn col, XmlBoundElement rowElement);
    private ArrayList GetNestedChildRelations(DataRow row);
    private DataRow GetNestedParent(DataRow row);
    private static DataRelation GetNestedParentRelation(DataRow row);
    private DataColumn GetTextOnlyColumn(DataRow row);
    public DataRow GetRowFromElement(XmlElement e);
    private XmlNode GetRowInsertBeforeLocation(DataRow row, XmlElement rowElement, XmlNode parentElement);
    public XmlElement GetElementFromRow(DataRow r);
    internal bool HasPointers(XmlNode node);
    internal bool get_IgnoreXmlEvents();
    internal void set_IgnoreXmlEvents(bool value);
    internal bool get_IgnoreDataSetEvents();
    internal void set_IgnoreDataSetEvents(bool value);
    private bool IsFoliated(XmlElement element);
    private bool IsFoliated(XmlBoundElement be);
    internal bool get_IsFoliationEnabled();
    internal void set_IsFoliationEnabled(bool value);
    internal XmlNode CloneTree(DataPointer other);
    private XmlNode CloneTreeInternal(DataPointer other);
    public virtual XmlNode CloneNode(bool deep);
    private XmlNode CloneNode(DataPointer dp);
    internal static bool IsTextLikeNode(XmlNode n);
    internal bool IsNotMapped(DataColumn c);
    private bool IsSame(DataColumn c, int recNo1, int recNo2);
    internal bool IsTextOnly(DataColumn c);
    public virtual void Load(string filename);
    public virtual void Load(Stream inStream);
    public virtual void Load(TextReader txtReader);
    public virtual void Load(XmlReader reader);
    private void LoadDataSetFromTree();
    private void LoadTreeFromDataSet(DataSet ds);
    private void LoadRows(XmlBoundElement rowElem, XmlNode node);
    internal DataSetMapper get_Mapper();
    internal void OnDataRowCreated(object oDataSet, DataRow row);
    internal void OnClearCalled(object oDataSet, DataTable table);
    internal void OnDataRowCreatedSpecial(object oDataSet, DataRow row);
    internal void OnNewRow(DataRow row);
    private XmlBoundElement AttachBoundElementToDataRow(DataRow row);
    private bool NeedXSI_NilAttr(DataRow row);
    private void OnAddRow(DataRow row);
    private void OnColumnValueChanged(DataRow row, DataColumn col, XmlBoundElement rowElement);
    private void OnColumnChanged(object sender, DataColumnChangeEventArgs args);
    private void OnColumnValuesChanged(DataRow row, XmlBoundElement rowElement);
    private void OnDeleteRow(DataRow row, XmlBoundElement rowElement);
    private void OnDeletingRow(DataRow row, XmlBoundElement rowElement);
    private void OnFoliated(XmlNode node);
    private DataColumn FindAssociatedParentColumn(DataRelation relation, DataColumn childCol);
    private void OnNestedParentChange(DataRow child, XmlBoundElement childElement, DataColumn childCol);
    private void OnNodeChanged(object sender, XmlNodeChangedEventArgs args);
    private void OnNodeChanging(object sender, XmlNodeChangedEventArgs args);
    private void OnNodeInserted(object sender, XmlNodeChangedEventArgs args);
    private void OnNodeInserting(object sender, XmlNodeChangedEventArgs args);
    private void OnNodeRemoved(object sender, XmlNodeChangedEventArgs args);
    private void OnNodeRemoving(object sender, XmlNodeChangedEventArgs args);
    private void OnNodeRemovedFromTree(XmlNode node, XmlNode oldParent);
    private void OnNodeRemovedFromFragment(XmlNode node, XmlNode oldParent);
    private void OnRowChanged(object sender, DataRowChangeEventArgs args);
    private void OnRowChanging(object sender, DataRowChangeEventArgs args);
    private void OnDataSetPropertyChanging(object oDataSet, PropertyChangedEventArgs args);
    private void OnColumnPropertyChanging(object oColumn, PropertyChangedEventArgs args);
    private void OnTablePropertyChanging(object oTable, PropertyChangedEventArgs args);
    private void OnTableColumnsChanging(object oColumnsCollection, CollectionChangeEventArgs args);
    private void OnDataSetTablesChanging(object oTablesCollection, CollectionChangeEventArgs args);
    private void OnDataSetRelationsChanging(object oRelationsCollection, CollectionChangeEventArgs args);
    private void OnRelationPropertyChanging(object oRelationsCollection, PropertyChangedEventArgs args);
    private void OnUndeleteRow(DataRow row, XmlElement rowElement);
    private void PromoteChild(XmlNode child, XmlNode prevSibling);
    private void PromoteInnerRegions(XmlNode parent);
    private void PromoteNonValueChildren(XmlNode parent);
    private void RemoveInitialTextNodes(XmlNode node);
    private void ReplaceInitialChildText(XmlNode parent, string value);
    internal XmlNode SafeFirstChild(XmlNode n);
    internal XmlNode SafeNextSibling(XmlNode n);
    internal XmlNode SafePreviousSibling(XmlNode n);
    internal static void SetRowValueToNull(DataRow row, DataColumn col);
    internal static void SetRowValueFromXmlText(DataRow row, DataColumn col, string xmlText);
    private void SynchronizeRowFromRowElement(XmlBoundElement rowElement);
    private void SynchronizeRowFromRowElement(XmlBoundElement rowElement, ArrayList rowElemList);
    private void SynchronizeRowFromRowElementEx(XmlBoundElement rowElement, ArrayList rowElemList);
    private void UpdateAllColumns(DataRow row, XmlBoundElement rowElement);
    private void Init();
    private void Init(DataSet ds);
    private bool IsConnected(XmlNode node);
    private static void SetNestedParentRow(DataRow childRow, DataRow parentRow);
    private void OnNodeInsertedInTree(XmlNode node);
    private void OnNodeInsertedInFragment(XmlNode node);
    private void OnRowElementInsertedInTree(XmlBoundElement rowElem, ArrayList rowElemList);
    private void EnsureDisconnectedDataRow(XmlBoundElement rowElem);
    private void OnNonRowElementInsertedInTree(XmlNode node, XmlBoundElement rowElement, ArrayList rowElemList);
    private void OnNonRowElementInsertedInFragment(XmlNode node, XmlBoundElement rowElement, ArrayList rowElemList);
    private void SetNestedParentRegion(XmlBoundElement childRowElem);
    private void SetNestedParentRegion(XmlBoundElement childRowElem, XmlBoundElement parentRowElem);
    internal static bool IsTextNode(XmlNodeType nt);
    protected virtual XPathNavigator CreateNavigator(XmlNode node);
    public virtual XmlElement GetElementById(string elemId);
    public virtual XmlNodeList GetElementsByTagName(string name);
    private DataTable[] OrderTables(DataSet ds);
    private bool IsSelfRelatedDataTable(DataTable rootTable);
    private bool TablesAreOrdered(DataSet ds);
}
internal class System.Xml.XmlDataImplementation : XmlImplementation {
    public virtual XmlDocument CreateDocument();
}
internal class System.Xml.XPathNodePointer : object {
    private WeakReference _owner;
    private XmlDataDocument _doc;
    private XmlNode _node;
    private DataColumn _column;
    private bool _fOnValue;
    internal XmlBoundElement _parentOfNS;
    internal static Int32[] s_xmlNodeType_To_XpathNodeType_Map;
    private bool _bNeedFoliate;
    internal bool IsEmptyElement { get; }
    internal XPathNodeType NodeType { get; }
    internal string LocalName { get; }
    internal string Name { get; }
    internal string NamespaceURI { get; }
    internal string Prefix { get; }
    internal string Value { get; }
    internal string InnerText { get; }
    internal string BaseURI { get; }
    internal string XmlLang { get; }
    private DataRow Row { get; }
    internal int AttributeCount { get; }
    internal bool HasChildren { get; }
    internal XmlNode Node { get; }
    internal XmlDataDocument Document { get; }
    private static XPathNodePointer();
    internal XPathNodePointer(DataDocumentXPathNavigator owner, XmlDataDocument doc, XmlNode node);
    internal XPathNodePointer(DataDocumentXPathNavigator owner, XPathNodePointer pointer);
    private XPathNodePointer(DataDocumentXPathNavigator owner, XmlDataDocument doc, XmlNode node, DataColumn c, bool bOnValue, XmlBoundElement parentOfNS);
    private XPathNodeType DecideXPNodeTypeForTextNodes(XmlNode node);
    private XPathNodeType ConvertNodeType(XmlNode node);
    private bool IsNamespaceNode(XmlNodeType nt, string ns);
    internal XPathNodePointer Clone(DataDocumentXPathNavigator owner);
    internal bool get_IsEmptyElement();
    internal XPathNodeType get_NodeType();
    internal string get_LocalName();
    internal string get_Name();
    internal string get_NamespaceURI();
    internal string get_Prefix();
    internal string get_Value();
    internal string get_InnerText();
    internal string get_BaseURI();
    internal string get_XmlLang();
    private XmlBoundElement GetRowElement();
    private DataRow get_Row();
    internal bool MoveTo(XPathNodePointer pointer);
    private void MoveTo(XmlNode node);
    private void MoveTo(XmlNode node, DataColumn column, bool fOnValue);
    private bool IsFoliated(XmlNode node);
    private int ColumnCount(DataRow row, bool fAttribute);
    internal int get_AttributeCount();
    internal DataColumn NextColumn(DataRow row, DataColumn col, bool fAttribute);
    internal DataColumn PreviousColumn(DataRow row, DataColumn col, bool fAttribute);
    internal bool MoveToAttribute(string localName, string namespaceURI);
    internal bool MoveToNextAttribute(bool bFirst);
    private bool IsValidChild(XmlNode parent, XmlNode child);
    private bool IsValidChild(XmlNode parent, DataColumn c);
    internal bool MoveToNextSibling();
    internal bool MoveToPreviousSibling();
    internal bool MoveToFirst();
    internal bool get_HasChildren();
    internal bool MoveToFirstChild();
    internal bool MoveToParent();
    private XmlNode GetParent(XmlNode node);
    internal void MoveToRoot();
    internal bool IsSamePosition(XPathNodePointer pointer);
    private XmlNodeOrder CompareNamespacePosition(XPathNodePointer other);
    private static XmlNode GetRoot(XmlNode node, Int32& depth);
    internal XmlNodeOrder ComparePosition(XPathNodePointer other);
    internal XmlNode get_Node();
    private sealed virtual override bool System.Xml.IXmlDataVirtualNode.IsOnNode(XmlNode nodeToCheck);
    private sealed virtual override void System.Xml.IXmlDataVirtualNode.OnFoliated(XmlNode foliatedNode);
    private void RealFoliate();
    private string GetNamespace(XmlBoundElement be, string name);
    internal string GetNamespace(string name);
    internal bool MoveToNamespace(string name);
    private bool MoveToNextNamespace(XmlBoundElement be, DataColumn col, XmlAttribute curAttr);
    internal bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope);
    private bool DuplicateNS(XmlBoundElement endElem, string lname);
    internal bool MoveToNextNamespace(XPathNamespaceScope namespaceScope);
    internal XmlDataDocument get_Document();
    private sealed virtual override bool System.Xml.IXmlDataVirtualNode.IsInUse();
}
