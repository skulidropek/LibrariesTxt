internal static class FxResources.System.Diagnostics.DiagnosticSource.SR : object {
}
public class System.Diagnostics.Activity : object {
    private static IEnumerable`1<KeyValuePair`2<string, string>> s_emptyBaggageTags;
    private static string s_uniqSuffix;
    private static long s_currentRootId;
    private static ActivityIdFormat s_defaultIdFormat;
    [CompilerGeneratedAttribute]
private static bool <ForceDefaultIdFormat>k__BackingField;
    private string _traceState;
    private State _state;
    private int _currentChildId;
    private string _id;
    private string _rootId;
    private string _parentId;
    private string _parentSpanId;
    private string _traceId;
    private string _spanId;
    private byte _w3CIdFlags;
    private KeyValueListNode _tags;
    private KeyValueListNode _baggage;
    [CompilerGeneratedAttribute]
private string <OperationName>k__BackingField;
    [CompilerGeneratedAttribute]
private Activity <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <Duration>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartTimeUtc>k__BackingField;
    private static AsyncLocal`1<Activity> s_current;
    public static bool ForceDefaultIdFormat { get; public set; }
    public string OperationName { get; }
    public Activity Parent { get; private set; }
    public TimeSpan Duration { get; private set; }
    public DateTime StartTimeUtc { get; private set; }
    public string Id { get; }
    public string ParentId { get; }
    public string RootId { get; }
    public IEnumerable`1<KeyValuePair`2<string, string>> Tags { get; }
    public IEnumerable`1<KeyValuePair`2<string, string>> Baggage { get; }
    public string TraceStateString { get; public set; }
    public ActivitySpanId SpanId { get; }
    public ActivityTraceId TraceId { get; }
    public bool Recorded { get; }
    public ActivityTraceFlags ActivityTraceFlags { get; public set; }
    public ActivitySpanId ParentSpanId { get; }
    public static ActivityIdFormat DefaultIdFormat { get; public set; }
    private bool W3CIdFlagsSet { get; }
    private bool IsFinished { get; private set; }
    public ActivityIdFormat IdFormat { get; private set; }
    public static Activity Current { get; public set; }
    public Activity(string operationName);
    private static Activity();
    [CompilerGeneratedAttribute]
public static bool get_ForceDefaultIdFormat();
    [CompilerGeneratedAttribute]
public static void set_ForceDefaultIdFormat(bool value);
    [CompilerGeneratedAttribute]
public string get_OperationName();
    [CompilerGeneratedAttribute]
public Activity get_Parent();
    [CompilerGeneratedAttribute]
private void set_Parent(Activity value);
    [CompilerGeneratedAttribute]
public TimeSpan get_Duration();
    [CompilerGeneratedAttribute]
private void set_Duration(TimeSpan value);
    [CompilerGeneratedAttribute]
public DateTime get_StartTimeUtc();
    [CompilerGeneratedAttribute]
private void set_StartTimeUtc(DateTime value);
    public string get_Id();
    public string get_ParentId();
    public string get_RootId();
    public IEnumerable`1<KeyValuePair`2<string, string>> get_Tags();
    public IEnumerable`1<KeyValuePair`2<string, string>> get_Baggage();
    public string GetBaggageItem(string key);
    public Activity AddTag(string key, string value);
    public Activity AddBaggage(string key, string value);
    public Activity SetParentId(string parentId);
    public Activity SetParentId(ActivityTraceId traceId, ActivitySpanId spanId, ActivityTraceFlags activityTraceFlags);
    public Activity SetStartTime(DateTime startTimeUtc);
    public Activity SetEndTime(DateTime endTimeUtc);
    public Activity Start();
    public void Stop();
    public string get_TraceStateString();
    public void set_TraceStateString(string value);
    public ActivitySpanId get_SpanId();
    public ActivityTraceId get_TraceId();
    public bool get_Recorded();
    public ActivityTraceFlags get_ActivityTraceFlags();
    public void set_ActivityTraceFlags(ActivityTraceFlags value);
    public ActivitySpanId get_ParentSpanId();
    public static ActivityIdFormat get_DefaultIdFormat();
    public static void set_DefaultIdFormat(ActivityIdFormat value);
    public Activity SetIdFormat(ActivityIdFormat format);
    private static bool IsW3CId(string id);
    private void GenerateW3CId();
    private static void NotifyError(Exception exception);
    private string GenerateHierarchicalId();
    private string GetRootId(string id);
    private string AppendSuffix(string parentId, string suffix, char delimiter);
    private static long GetRandomNumber();
    private static bool ValidateSetCurrent(Activity activity);
    private bool TrySetTraceIdFromParent();
    private void TrySetTraceFlagsFromParent();
    private bool get_W3CIdFlagsSet();
    private bool get_IsFinished();
    private void set_IsFinished(bool value);
    public ActivityIdFormat get_IdFormat();
    private void set_IdFormat(ActivityIdFormat value);
    public static Activity get_Current();
    public static void set_Current(Activity value);
    private static void SetCurrent(Activity activity);
    internal static DateTime GetUtcNow();
    private static string GenerateRootId();
    [IteratorStateMachineAttribute("System.Diagnostics.Activity/<<get_Tags>g__Iterate|44_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<KeyValuePair`2<string, string>> <get_Tags>g__Iterate|44_0(KeyValueListNode tags);
    [IteratorStateMachineAttribute("System.Diagnostics.Activity/<<get_Baggage>g__Iterate|46_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<KeyValuePair`2<string, string>> <get_Baggage>g__Iterate|46_0(Activity activity);
}
public enum System.Diagnostics.ActivityIdFormat : Enum {
    public int value__;
    public static ActivityIdFormat Unknown;
    public static ActivityIdFormat Hierarchical;
    public static ActivityIdFormat W3C;
}
[IsReadOnlyAttribute]
public class System.Diagnostics.ActivitySpanId : ValueType {
    private string _hexString;
    internal ActivitySpanId(string hexString);
    private ActivitySpanId(ReadOnlySpan`1<byte> idData);
    public static ActivitySpanId CreateRandom();
    public static ActivitySpanId CreateFromBytes(ReadOnlySpan`1<byte> idData);
    public static ActivitySpanId CreateFromUtf8String(ReadOnlySpan`1<byte> idData);
    public static ActivitySpanId CreateFromString(ReadOnlySpan`1<char> idData);
    public string ToHexString();
    public virtual string ToString();
    public static bool op_Equality(ActivitySpanId spanId1, ActivitySpanId spandId2);
    public static bool op_Inequality(ActivitySpanId spanId1, ActivitySpanId spandId2);
    public sealed virtual bool Equals(ActivitySpanId spanId);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void CopyTo(Span`1<byte> destination);
}
[FlagsAttribute]
public enum System.Diagnostics.ActivityTraceFlags : Enum {
    public int value__;
    public static ActivityTraceFlags None;
    public static ActivityTraceFlags Recorded;
}
[IsReadOnlyAttribute]
public class System.Diagnostics.ActivityTraceId : ValueType {
    private string _hexString;
    internal ActivityTraceId(string hexString);
    private ActivityTraceId(ReadOnlySpan`1<byte> idData);
    public static ActivityTraceId CreateRandom();
    public static ActivityTraceId CreateFromBytes(ReadOnlySpan`1<byte> idData);
    public static ActivityTraceId CreateFromUtf8String(ReadOnlySpan`1<byte> idData);
    public static ActivityTraceId CreateFromString(ReadOnlySpan`1<char> idData);
    public string ToHexString();
    public virtual string ToString();
    public static bool op_Equality(ActivityTraceId traceId1, ActivityTraceId traceId2);
    public static bool op_Inequality(ActivityTraceId traceId1, ActivityTraceId traceId2);
    public sealed virtual bool Equals(ActivityTraceId traceId);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void CopyTo(Span`1<byte> destination);
    internal static void SetToRandomBytes(Span`1<byte> outBytes);
    internal static string SpanToHexString(ReadOnlySpan`1<byte> bytes);
    internal static void SetSpanFromHexChars(ReadOnlySpan`1<char> charData, Span`1<byte> outBytes);
    internal static byte HexByteFromChars(char char1, char char2);
    private static byte HexDigitToBinary(char c);
    private static char BinaryToHexDigit(int val);
    internal static void ByteToHexDigits(Span`1<char> outChars, byte val);
    internal static bool IsLowerCaseHexAndNotAllZeros(ReadOnlySpan`1<char> idData);
    private static bool IsHexadecimalLowercaseChar(char c);
}
public class System.Diagnostics.DiagnosticListener : DiagnosticSource {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private DiagnosticSubscription modreq(System.Runtime.CompilerServices.IsVolatile) _subscriptions;
    private DiagnosticListener _next;
    private bool _disposed;
    private static DiagnosticListener s_allListeners;
    private static AllListenerObservable s_allListenerObservable;
    private static object s_allListenersLock;
    public static IObservable`1<DiagnosticListener> AllListeners { get; }
    public string Name { get; private set; }
    public DiagnosticListener(string name);
    private static DiagnosticListener();
    public static IObservable`1<DiagnosticListener> get_AllListeners();
    public virtual IDisposable Subscribe(IObserver`1<KeyValuePair`2<string, object>> observer, Predicate`1<string> isEnabled);
    public virtual IDisposable Subscribe(IObserver`1<KeyValuePair`2<string, object>> observer, Func`4<string, object, object, bool> isEnabled);
    public virtual IDisposable Subscribe(IObserver`1<KeyValuePair`2<string, object>> observer);
    public virtual void Dispose();
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    public virtual string ToString();
    public bool IsEnabled();
    public virtual bool IsEnabled(string name);
    public virtual bool IsEnabled(string name, object arg1, object arg2);
    public virtual void Write(string name, object value);
    private IDisposable SubscribeInternal(IObserver`1<KeyValuePair`2<string, object>> observer, Predicate`1<string> isEnabled1Arg, Func`4<string, object, object, bool> isEnabled3Arg, Action`2<Activity, object> onActivityImport, Action`2<Activity, object> onActivityExport);
    public virtual void OnActivityImport(Activity activity, object payload);
    public virtual void OnActivityExport(Activity activity, object payload);
    public virtual IDisposable Subscribe(IObserver`1<KeyValuePair`2<string, object>> observer, Func`4<string, object, object, bool> isEnabled, Action`2<Activity, object> onActivityImport, Action`2<Activity, object> onActivityExport);
    [CompilerGeneratedAttribute]
private bool <Subscribe>b__3_0(string name);
    [CompilerGeneratedAttribute]
private bool <Subscribe>b__27_0(string name);
}
public abstract class System.Diagnostics.DiagnosticSource : object {
    public abstract virtual void Write(string name, object value);
    public abstract virtual bool IsEnabled(string name);
    public virtual bool IsEnabled(string name, object arg1, object arg2);
    public Activity StartActivity(Activity activity, object args);
    public void StopActivity(Activity activity, object args);
    public virtual void OnActivityImport(Activity activity, object payload);
    public virtual void OnActivityExport(Activity activity, object payload);
}
[EventSourceAttribute]
internal class System.Diagnostics.DiagnosticSourceEventSource : EventSource {
    public static DiagnosticSourceEventSource Logger;
    private string AspNetCoreHostingKeywordValue;
    private string EntityFrameworkCoreCommandsKeywordValue;
    private Boolean modreq(System.Runtime.CompilerServices.IsVolatile) _false;
    private FilterAndTransform _specs;
    private static DiagnosticSourceEventSource();
    [EventAttribute("1")]
public void Message(string Message);
    [EventAttribute("2")]
private void Event(string SourceName, string EventName, IEnumerable`1<KeyValuePair`2<string, string>> Arguments);
    [EventAttribute("3")]
private void EventJson(string SourceName, string EventName, string ArgmentsJson);
    [EventAttribute("4")]
private void Activity1Start(string SourceName, string EventName, IEnumerable`1<KeyValuePair`2<string, string>> Arguments);
    [EventAttribute("5")]
private void Activity1Stop(string SourceName, string EventName, IEnumerable`1<KeyValuePair`2<string, string>> Arguments);
    [EventAttribute("6")]
private void Activity2Start(string SourceName, string EventName, IEnumerable`1<KeyValuePair`2<string, string>> Arguments);
    [EventAttribute("7")]
private void Activity2Stop(string SourceName, string EventName, IEnumerable`1<KeyValuePair`2<string, string>> Arguments);
    [EventAttribute("8")]
private void RecursiveActivity1Start(string SourceName, string EventName, IEnumerable`1<KeyValuePair`2<string, string>> Arguments);
    [EventAttribute("9")]
private void RecursiveActivity1Stop(string SourceName, string EventName, IEnumerable`1<KeyValuePair`2<string, string>> Arguments);
    [EventAttribute("10")]
private void NewDiagnosticListener(string SourceName);
    [NonEventAttribute]
protected virtual void OnEventCommand(EventCommandEventArgs command);
    private static string NewLineSeparate(string str1, string str2);
    [NonEventAttribute]
private void BreakPointWithDebuggerFuncEval();
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string ActivityIdFormatInvalid { get; }
    internal static string ActivityNotStarted { get; }
    internal static string ActivityStartAlreadyStarted { get; }
    internal static string EndTimeNotUtc { get; }
    internal static string OperationNameInvalid { get; }
    internal static string ParentIdAlreadySet { get; }
    internal static string ParentIdInvalid { get; }
    internal static string SetFormatOnStartedActivity { get; }
    internal static string SetParentIdOnActivityWithParent { get; }
    internal static string StartTimeNotUtc { get; }
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static ResourceManager get_ResourceManager();
    internal static string get_ActivityIdFormatInvalid();
    internal static string get_ActivityNotStarted();
    internal static string get_ActivityStartAlreadyStarted();
    internal static string get_EndTimeNotUtc();
    internal static string get_OperationNameInvalid();
    internal static string get_ParentIdAlreadySet();
    internal static string get_ParentIdInvalid();
    internal static string get_SetFormatOnStartedActivity();
    internal static string get_SetParentIdOnActivityWithParent();
    internal static string get_StartTimeNotUtc();
}
