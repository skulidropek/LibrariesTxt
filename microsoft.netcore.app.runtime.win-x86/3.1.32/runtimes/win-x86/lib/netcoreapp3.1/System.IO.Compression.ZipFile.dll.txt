internal static class FxResources.System.IO.Compression.ZipFile.SR : object {
}
public static class System.IO.Compression.ZipFile : object {
    public static ZipArchive OpenRead(string archiveFileName);
    public static ZipArchive Open(string archiveFileName, ZipArchiveMode mode);
    public static ZipArchive Open(string archiveFileName, ZipArchiveMode mode, Encoding entryNameEncoding);
    public static void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName);
    public static void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, CompressionLevel compressionLevel, bool includeBaseDirectory);
    public static void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, CompressionLevel compressionLevel, bool includeBaseDirectory, Encoding entryNameEncoding);
    private static void DoCreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, Nullable`1<CompressionLevel> compressionLevel, bool includeBaseDirectory, Encoding entryNameEncoding);
    public static void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName);
    public static void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, bool overwriteFiles);
    public static void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, Encoding entryNameEncoding);
    public static void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, Encoding entryNameEncoding, bool overwriteFiles);
}
[EditorBrowsableAttribute("1")]
[ExtensionAttribute]
public static class System.IO.Compression.ZipFileExtensions : object {
    [ExtensionAttribute]
public static ZipArchiveEntry CreateEntryFromFile(ZipArchive destination, string sourceFileName, string entryName);
    [ExtensionAttribute]
public static ZipArchiveEntry CreateEntryFromFile(ZipArchive destination, string sourceFileName, string entryName, CompressionLevel compressionLevel);
    [ExtensionAttribute]
internal static ZipArchiveEntry DoCreateEntryFromFile(ZipArchive destination, string sourceFileName, string entryName, Nullable`1<CompressionLevel> compressionLevel);
    [ExtensionAttribute]
public static void ExtractToDirectory(ZipArchive source, string destinationDirectoryName);
    [ExtensionAttribute]
public static void ExtractToDirectory(ZipArchive source, string destinationDirectoryName, bool overwriteFiles);
    [ExtensionAttribute]
public static void ExtractToFile(ZipArchiveEntry source, string destinationFileName);
    [ExtensionAttribute]
public static void ExtractToFile(ZipArchiveEntry source, string destinationFileName, bool overwrite);
    [ExtensionAttribute]
internal static void ExtractRelativeToDirectory(ZipArchiveEntry source, string destinationDirectoryName, bool overwrite);
}
internal static class System.IO.Compression.ZipFileUtils : object {
    public static string EntryFromPath(string entry, int offset, int length, Char[]& buffer, bool appendPathSeparator);
    public static void EnsureCapacity(Char[]& buffer, int min);
    public static bool IsDirEmpty(DirectoryInfo possiblyEmptyDir);
}
internal static class System.IO.PathInternal : object {
    private static bool s_isCaseSensitive;
    internal static StringComparison StringComparison { get; }
    private static PathInternal();
    internal static StringComparison get_StringComparison();
    private static bool GetIsCaseSensitive();
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string IO_DirectoryNameWithData { get; }
    internal static string IO_ExtractingResultsInOutside { get; }
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static ResourceManager get_ResourceManager();
    internal static string get_IO_DirectoryNameWithData();
    internal static string get_IO_ExtractingResultsInOutside();
}
