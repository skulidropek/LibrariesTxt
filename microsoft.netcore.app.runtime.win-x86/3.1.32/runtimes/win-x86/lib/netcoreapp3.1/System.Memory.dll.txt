internal static class FxResources.System.Memory.SR : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class System.Buffers.ArrayBufferWriter`1 : object {
    private T[] _buffer;
    private int _index;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ReadOnlyMemory`1<T> WrittenMemory { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ReadOnlySpan`1<T> WrittenSpan { get; }
    public int WrittenCount { get; }
    public int Capacity { get; }
    public int FreeCapacity { get; }
    public ArrayBufferWriter`1(int initialCapacity);
    public ReadOnlyMemory`1<T> get_WrittenMemory();
    public ReadOnlySpan`1<T> get_WrittenSpan();
    public int get_WrittenCount();
    public int get_Capacity();
    public int get_FreeCapacity();
    public void Clear();
    public sealed virtual void Advance(int count);
    public sealed virtual Memory`1<T> GetMemory(int sizeHint);
    public sealed virtual Span`1<T> GetSpan(int sizeHint);
    private void CheckAndResizeBuffer(int sizeHint);
    private static void ThrowInvalidOperationException_AdvancedTooFar(int capacity);
}
internal class System.Buffers.ArrayMemoryPool`1 : MemoryPool`1<T> {
    public int MaxBufferSize { get; }
    public sealed virtual int get_MaxBufferSize();
    public sealed virtual IMemoryOwner`1<T> Rent(int minimumBufferSize);
    protected sealed virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.Buffers.BuffersExtensions : object {
    [ExtensionAttribute]
public static Nullable`1<SequencePosition> PositionOf(ReadOnlySequence`1& source, T value);
    private static Nullable`1<SequencePosition> PositionOfMultiSegment(ReadOnlySequence`1& source, T value);
    [ExtensionAttribute]
[NullableContextAttribute("2")]
public static void CopyTo(ReadOnlySequence`1& source, Span`1<T> destination);
    private static void CopyToMultiSegment(ReadOnlySequence`1& sequence, Span`1<T> destination);
    [ExtensionAttribute]
public static T[] ToArray(ReadOnlySequence`1& sequence);
    [ExtensionAttribute]
public static void Write(IBufferWriter`1<T> writer, ReadOnlySpan`1<T> value);
    private static void WriteMultiSegment(IBufferWriter`1<T> writer, ReadOnlySpan`1& source, Span`1<T> destination);
}
[NullableContextAttribute("2")]
public interface System.Buffers.IBufferWriter`1 {
    public abstract virtual void Advance(int count);
    public abstract virtual Memory`1<T> GetMemory(int sizeHint);
    public abstract virtual Span`1<T> GetSpan(int sizeHint);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
public abstract class System.Buffers.MemoryPool`1 : object {
    private static ArrayMemoryPool`1<T> s_shared;
    public static MemoryPool`1<T> Shared { get; }
    public int MaxBufferSize { get; }
    private static MemoryPool`1();
    public static MemoryPool`1<T> get_Shared();
    public abstract virtual IMemoryOwner`1<T> Rent(int minBufferSize);
    public abstract virtual int get_MaxBufferSize();
    public sealed virtual void Dispose();
    protected abstract virtual void Dispose(bool disposing);
}
internal static class System.Buffers.ReadOnlySequence : object {
    public static int SegmentToSequenceStart(int startIndex);
    public static int SegmentToSequenceEnd(int endIndex);
    public static int ArrayToSequenceStart(int startIndex);
    public static int ArrayToSequenceEnd(int endIndex);
    public static int MemoryManagerToSequenceStart(int startIndex);
    public static int MemoryManagerToSequenceEnd(int endIndex);
    public static int StringToSequenceStart(int startIndex);
    public static int StringToSequenceEnd(int endIndex);
}
[NullableAttribute("0")]
[DebuggerTypeProxyAttribute("System.Buffers.ReadOnlySequenceDebugView`1")]
[IsReadOnlyAttribute]
[DebuggerDisplayAttribute("{ToString(),raw}")]
[NullableContextAttribute("1")]
public class System.Buffers.ReadOnlySequence`1 : ValueType {
    [AllowNullAttribute]
private object _startObject;
    [AllowNullAttribute]
private object _endObject;
    private int _startInteger;
    private int _endInteger;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public static ReadOnlySequence`1<T> Empty;
    public long Length { get; }
    public bool IsEmpty { get; }
    public bool IsSingleSegment { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ReadOnlyMemory`1<T> First { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ReadOnlySpan`1<T> FirstSpan { get; }
    public SequencePosition Start { get; }
    public SequencePosition End { get; }
    private ReadOnlySequence`1(object startSegment, int startIndexAndFlags, object endSegment, int endIndexAndFlags);
    public ReadOnlySequence`1(ReadOnlySequenceSegment`1<T> startSegment, int startIndex, ReadOnlySequenceSegment`1<T> endSegment, int endIndex);
    public ReadOnlySequence`1(T[] array);
    public ReadOnlySequence`1(T[] array, int start, int length);
    public ReadOnlySequence`1(ReadOnlyMemory`1<T> memory);
    private static ReadOnlySequence`1();
    public long get_Length();
    public bool get_IsEmpty();
    public bool get_IsSingleSegment();
    public ReadOnlyMemory`1<T> get_First();
    public ReadOnlySpan`1<T> get_FirstSpan();
    public SequencePosition get_Start();
    public SequencePosition get_End();
    public ReadOnlySequence`1<T> Slice(long start, long length);
    public ReadOnlySequence`1<T> Slice(long start, SequencePosition end);
    public ReadOnlySequence`1<T> Slice(SequencePosition start, long length);
    public ReadOnlySequence`1<T> Slice(int start, int length);
    public ReadOnlySequence`1<T> Slice(int start, SequencePosition end);
    public ReadOnlySequence`1<T> Slice(SequencePosition start, int length);
    public ReadOnlySequence`1<T> Slice(SequencePosition start, SequencePosition end);
    public ReadOnlySequence`1<T> Slice(SequencePosition start);
    public ReadOnlySequence`1<T> Slice(long start);
    public virtual string ToString();
    [NullableContextAttribute("0")]
public Enumerator<T> GetEnumerator();
    public SequencePosition GetPosition(long offset);
    public SequencePosition GetPosition(long offset, SequencePosition origin);
    public bool TryGet(SequencePosition& position, ReadOnlyMemory`1& memory, bool advance);
    internal bool TryGetBuffer(SequencePosition& position, ReadOnlyMemory`1& memory, SequencePosition& next);
    private ReadOnlyMemory`1<T> GetFirstBuffer();
    private ReadOnlyMemory`1<T> GetFirstBufferSlow(object startObject, bool isMultiSegment);
    private ReadOnlySpan`1<T> GetFirstSpan();
    private ReadOnlySpan`1<T> GetFirstSpanSlow(object startObject, bool isMultiSegment);
    internal SequencePosition Seek(long offset, ExceptionArgument exceptionArgument);
    private SequencePosition Seek(SequencePosition& start, long offset);
    private static SequencePosition SeekMultiSegment(ReadOnlySequenceSegment`1<T> currentSegment, object endObject, int endIndex, long offset, ExceptionArgument argument);
    private void BoundsCheck(SequencePosition& position, bool positionIsNotNull);
    private void BoundsCheck(UInt32 sliceStartIndex, object sliceStartObject, UInt32 sliceEndIndex, object sliceEndObject);
    private static SequencePosition GetEndPosition(ReadOnlySequenceSegment`1<T> startSegment, object startObject, int startIndex, object endObject, int endIndex, long length);
    private SequenceType<T> GetSequenceType();
    private static int GetIndex(SequencePosition& position);
    private static int GetIndex(int Integer);
    private ReadOnlySequence`1<T> SliceImpl(SequencePosition& start, SequencePosition& end);
    private ReadOnlySequence`1<T> SliceImpl(SequencePosition& start);
    private long GetLength();
    internal bool TryGetReadOnlySequenceSegment(ReadOnlySequenceSegment`1& startSegment, Int32& startIndex, ReadOnlySequenceSegment`1& endSegment, Int32& endIndex);
    internal bool TryGetArray(ArraySegment`1& segment);
    internal bool TryGetString(String& text, Int32& start, Int32& length);
    private static bool InRange(UInt32 value, UInt32 start, UInt32 end);
    private static bool InRange(ulong value, ulong start, ulong end);
    internal void GetFirstSpan(ReadOnlySpan`1& first, SequencePosition& next);
    private static ReadOnlySpan`1<T> GetFirstSpanSlow(object startObject, int startIndex, int endIndex, bool hasMultipleSegments);
}
internal class System.Buffers.ReadOnlySequenceDebugView`1 : object {
    private T[] _array;
    private ReadOnlySequenceDebugViewSegments<T> _segments;
    public ReadOnlySequenceDebugViewSegments<T> BufferSegments { get; }
    [DebuggerBrowsableAttribute("3")]
public T[] Items { get; }
    public ReadOnlySequenceDebugView`1(ReadOnlySequence`1<T> sequence);
    public ReadOnlySequenceDebugViewSegments<T> get_BufferSegments();
    public T[] get_Items();
}
public abstract class System.Buffers.ReadOnlySequenceSegment`1 : object {
    [CompilerGeneratedAttribute]
private ReadOnlyMemory`1<T> <Memory>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlySequenceSegment`1<T> <Next>k__BackingField;
    [CompilerGeneratedAttribute]
private long <RunningIndex>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ReadOnlyMemory`1<T> Memory { get; protected set; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ReadOnlySequenceSegment`1<T> Next { get; protected set; }
    public long RunningIndex { get; protected set; }
    [CompilerGeneratedAttribute]
public ReadOnlyMemory`1<T> get_Memory();
    [CompilerGeneratedAttribute]
protected void set_Memory(ReadOnlyMemory`1<T> value);
    [CompilerGeneratedAttribute]
public ReadOnlySequenceSegment`1<T> get_Next();
    [CompilerGeneratedAttribute]
protected void set_Next(ReadOnlySequenceSegment`1<T> value);
    [CompilerGeneratedAttribute]
public long get_RunningIndex();
    [CompilerGeneratedAttribute]
protected void set_RunningIndex(long value);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
public class System.Buffers.SequenceReader`1 : ValueType {
    private SequencePosition _currentPosition;
    private SequencePosition _nextPosition;
    private bool _moreData;
    private long _length;
    [CompilerGeneratedAttribute]
private ReadOnlySequence`1<T> <Sequence>k__BackingField;
    [CompilerGeneratedAttribute]
private ReadOnlySpan`1<T> <CurrentSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CurrentSpanIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Consumed>k__BackingField;
    public bool End { get; }
    public ReadOnlySequence`1<T> Sequence { get; }
    public SequencePosition Position { get; }
    public ReadOnlySpan`1<T> CurrentSpan { get; private set; }
    public int CurrentSpanIndex { get; private set; }
    public ReadOnlySpan`1<T> UnreadSpan { get; }
    public long Consumed { get; private set; }
    public long Remaining { get; }
    public long Length { get; }
    public SequenceReader`1(ReadOnlySequence`1<T> sequence);
    [IsReadOnlyAttribute]
public bool get_End();
    [IsReadOnlyAttribute]
[CompilerGeneratedAttribute]
public ReadOnlySequence`1<T> get_Sequence();
    [IsReadOnlyAttribute]
public SequencePosition get_Position();
    [CompilerGeneratedAttribute]
[IsReadOnlyAttribute]
public ReadOnlySpan`1<T> get_CurrentSpan();
    [CompilerGeneratedAttribute]
private void set_CurrentSpan(ReadOnlySpan`1<T> value);
    [CompilerGeneratedAttribute]
[IsReadOnlyAttribute]
public int get_CurrentSpanIndex();
    [CompilerGeneratedAttribute]
private void set_CurrentSpanIndex(int value);
    [IsReadOnlyAttribute]
public ReadOnlySpan`1<T> get_UnreadSpan();
    [CompilerGeneratedAttribute]
[IsReadOnlyAttribute]
public long get_Consumed();
    [CompilerGeneratedAttribute]
private void set_Consumed(long value);
    [IsReadOnlyAttribute]
public long get_Remaining();
    [IsReadOnlyAttribute]
public long get_Length();
    [IsReadOnlyAttribute]
public bool TryPeek(T& value);
    public bool TryRead(T& value);
    public void Rewind(long count);
    private void RetreatToPreviousSpan(long consumed);
    private void ResetReader();
    private void GetNextSpan();
    public void Advance(long count);
    internal void AdvanceCurrentSpan(long count);
    private void AdvanceToNextSpan(long count);
    [IsReadOnlyAttribute]
public bool TryCopyTo(Span`1<T> destination);
    [IsReadOnlyAttribute]
internal bool TryCopyMultisegment(Span`1<T> destination);
    public bool TryReadTo(ReadOnlySpan`1& span, T delimiter, bool advancePastDelimiter);
    private bool TryReadToSlow(ReadOnlySpan`1& span, T delimiter, bool advancePastDelimiter);
    public bool TryReadTo(ReadOnlySpan`1& span, T delimiter, T delimiterEscape, bool advancePastDelimiter);
    private bool TryReadToSlow(ReadOnlySpan`1& span, T delimiter, T delimiterEscape, int index, bool advancePastDelimiter);
    private bool TryReadToSlow(ReadOnlySequence`1& sequence, T delimiter, T delimiterEscape, int index, bool advancePastDelimiter);
    public bool TryReadTo(ReadOnlySequence`1& sequence, T delimiter, bool advancePastDelimiter);
    private bool TryReadToInternal(ReadOnlySequence`1& sequence, T delimiter, bool advancePastDelimiter, int skip);
    public bool TryReadTo(ReadOnlySequence`1& sequence, T delimiter, T delimiterEscape, bool advancePastDelimiter);
    public bool TryReadToAny(ReadOnlySpan`1& span, ReadOnlySpan`1<T> delimiters, bool advancePastDelimiter);
    private bool TryReadToAnySlow(ReadOnlySpan`1& span, ReadOnlySpan`1<T> delimiters, bool advancePastDelimiter);
    public bool TryReadToAny(ReadOnlySequence`1& sequence, ReadOnlySpan`1<T> delimiters, bool advancePastDelimiter);
    private bool TryReadToAnyInternal(ReadOnlySequence`1& sequence, ReadOnlySpan`1<T> delimiters, bool advancePastDelimiter, int skip);
    public bool TryReadTo(ReadOnlySequence`1& sequence, ReadOnlySpan`1<T> delimiter, bool advancePastDelimiter);
    public bool TryAdvanceTo(T delimiter, bool advancePastDelimiter);
    public bool TryAdvanceToAny(ReadOnlySpan`1<T> delimiters, bool advancePastDelimiter);
    public long AdvancePast(T value);
    public long AdvancePastAny(ReadOnlySpan`1<T> values);
    public long AdvancePastAny(T value0, T value1, T value2, T value3);
    public long AdvancePastAny(T value0, T value1, T value2);
    public long AdvancePastAny(T value0, T value1);
    public bool IsNext(T next, bool advancePast);
    public bool IsNext(ReadOnlySpan`1<T> next, bool advancePast);
    private bool IsNextSlow(ReadOnlySpan`1<T> next, bool advancePast);
}
[ExtensionAttribute]
public static class System.Buffers.SequenceReaderExtensions : object {
    [ExtensionAttribute]
internal static bool TryRead(SequenceReader`1& reader, T& value);
    private static bool TryReadMultisegment(SequenceReader`1& reader, T& value);
    [ExtensionAttribute]
public static bool TryReadLittleEndian(SequenceReader`1& reader, Int16& value);
    [ExtensionAttribute]
public static bool TryReadBigEndian(SequenceReader`1& reader, Int16& value);
    private static bool TryReadReverseEndianness(SequenceReader`1& reader, Int16& value);
    [ExtensionAttribute]
public static bool TryReadLittleEndian(SequenceReader`1& reader, Int32& value);
    [ExtensionAttribute]
public static bool TryReadBigEndian(SequenceReader`1& reader, Int32& value);
    private static bool TryReadReverseEndianness(SequenceReader`1& reader, Int32& value);
    [ExtensionAttribute]
public static bool TryReadLittleEndian(SequenceReader`1& reader, Int64& value);
    [ExtensionAttribute]
public static bool TryReadBigEndian(SequenceReader`1& reader, Int64& value);
    private static bool TryReadReverseEndianness(SequenceReader`1& reader, Int64& value);
}
public static class System.Buffers.Text.Base64 : object {
    private static ReadOnlySpan`1<sbyte> s_decodingMap { get; }
    private static ReadOnlySpan`1<sbyte> s_sseDecodePackBytesMask { get; }
    private static ReadOnlySpan`1<sbyte> s_sseDecodeLutLo { get; }
    private static ReadOnlySpan`1<sbyte> s_sseDecodeLutHi { get; }
    private static ReadOnlySpan`1<sbyte> s_sseDecodeLutShift { get; }
    private static ReadOnlySpan`1<sbyte> s_avxDecodePackBytesInLaneMask { get; }
    private static ReadOnlySpan`1<sbyte> s_avxDecodePackLanesControl { get; }
    private static ReadOnlySpan`1<sbyte> s_avxDecodeLutLo { get; }
    private static ReadOnlySpan`1<sbyte> s_avxDecodeLutHi { get; }
    private static ReadOnlySpan`1<sbyte> s_avxDecodeLutShift { get; }
    private static ReadOnlySpan`1<byte> s_encodingMap { get; }
    private static ReadOnlySpan`1<sbyte> s_sseEncodeShuffleVec { get; }
    private static ReadOnlySpan`1<sbyte> s_sseEncodeLut { get; }
    private static ReadOnlySpan`1<sbyte> s_avxEncodePermuteVec { get; }
    private static ReadOnlySpan`1<sbyte> s_avxEncodeShuffleVec { get; }
    private static ReadOnlySpan`1<sbyte> s_avxEncodeLut { get; }
    private static TVector ReadVector(ReadOnlySpan`1<sbyte> data);
    public static OperationStatus DecodeFromUtf8(ReadOnlySpan`1<byte> utf8, Span`1<byte> bytes, Int32& bytesConsumed, Int32& bytesWritten, bool isFinalBlock);
    public static int GetMaxDecodedFromUtf8Length(int length);
    public static OperationStatus DecodeFromUtf8InPlace(Span`1<byte> buffer, Int32& bytesWritten);
    private static void Avx2Decode(Byte*& srcBytes, Byte*& destBytes, Byte* srcEnd, int sourceLength, int destLength, Byte* srcStart, Byte* destStart);
    private static void Ssse3Decode(Byte*& srcBytes, Byte*& destBytes, Byte* srcEnd, int sourceLength, int destLength, Byte* srcStart, Byte* destStart);
    private static int Decode(Byte* encodedBytes, SByte& decodingMap);
    private static void WriteThreeLowOrderBytes(Byte* destination, int value);
    private static ReadOnlySpan`1<sbyte> get_s_decodingMap();
    private static ReadOnlySpan`1<sbyte> get_s_sseDecodePackBytesMask();
    private static ReadOnlySpan`1<sbyte> get_s_sseDecodeLutLo();
    private static ReadOnlySpan`1<sbyte> get_s_sseDecodeLutHi();
    private static ReadOnlySpan`1<sbyte> get_s_sseDecodeLutShift();
    private static ReadOnlySpan`1<sbyte> get_s_avxDecodePackBytesInLaneMask();
    private static ReadOnlySpan`1<sbyte> get_s_avxDecodePackLanesControl();
    private static ReadOnlySpan`1<sbyte> get_s_avxDecodeLutLo();
    private static ReadOnlySpan`1<sbyte> get_s_avxDecodeLutHi();
    private static ReadOnlySpan`1<sbyte> get_s_avxDecodeLutShift();
    public static OperationStatus EncodeToUtf8(ReadOnlySpan`1<byte> bytes, Span`1<byte> utf8, Int32& bytesConsumed, Int32& bytesWritten, bool isFinalBlock);
    public static int GetMaxEncodedToUtf8Length(int length);
    public static OperationStatus EncodeToUtf8InPlace(Span`1<byte> buffer, int dataLength, Int32& bytesWritten);
    private static void Avx2Encode(Byte*& srcBytes, Byte*& destBytes, Byte* srcEnd, int sourceLength, int destLength, Byte* srcStart, Byte* destStart);
    private static void Ssse3Encode(Byte*& srcBytes, Byte*& destBytes, Byte* srcEnd, int sourceLength, int destLength, Byte* srcStart, Byte* destStart);
    private static UInt32 Encode(Byte* threeBytes, Byte& encodingMap);
    private static UInt32 EncodeAndPadOne(Byte* twoBytes, Byte& encodingMap);
    private static UInt32 EncodeAndPadTwo(Byte* oneByte, Byte& encodingMap);
    private static ReadOnlySpan`1<byte> get_s_encodingMap();
    private static ReadOnlySpan`1<sbyte> get_s_sseEncodeShuffleVec();
    private static ReadOnlySpan`1<sbyte> get_s_sseEncodeLut();
    private static ReadOnlySpan`1<sbyte> get_s_avxEncodePermuteVec();
    private static ReadOnlySpan`1<sbyte> get_s_avxEncodeShuffleVec();
    private static ReadOnlySpan`1<sbyte> get_s_avxEncodeLut();
}
internal enum System.ExceptionArgument : Enum {
    public int value__;
    public static ExceptionArgument length;
    public static ExceptionArgument start;
    public static ExceptionArgument minimumBufferSize;
    public static ExceptionArgument elementIndex;
    public static ExceptionArgument comparable;
    public static ExceptionArgument comparer;
    public static ExceptionArgument destination;
    public static ExceptionArgument offset;
    public static ExceptionArgument startSegment;
    public static ExceptionArgument endSegment;
    public static ExceptionArgument startIndex;
    public static ExceptionArgument endIndex;
    public static ExceptionArgument array;
    public static ExceptionArgument culture;
    public static ExceptionArgument manager;
    public static ExceptionArgument count;
    public static ExceptionArgument writer;
}
internal static class System.Numerics.Hashing.HashHelpers : object {
    public static int RandomSeed;
    private static HashHelpers();
    public static int Combine(int h1, int h2);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsUnmanagedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5198")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[AttributeUsageAttribute("2")]
[EmbeddedAttribute]
[CompilerGeneratedAttribute]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class System.Runtime.InteropServices.SequenceMarshal : object {
    public static bool TryGetReadOnlySequenceSegment(ReadOnlySequence`1<T> sequence, ReadOnlySequenceSegment`1& startSegment, Int32& startIndex, ReadOnlySequenceSegment`1& endSegment, Int32& endIndex);
    public static bool TryGetArray(ReadOnlySequence`1<T> sequence, ArraySegment`1& segment);
    public static bool TryGetReadOnlyMemory(ReadOnlySequence`1<T> sequence, ReadOnlyMemory`1& memory);
    internal static bool TryGetString(ReadOnlySequence`1<char> sequence, String& text, Int32& start, Int32& length);
    [NullableContextAttribute("0")]
public static bool TryRead(SequenceReader`1& reader, T& value);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class System.SequencePosition : ValueType {
    private object _object;
    private int _integer;
    public SequencePosition(object object, int integer);
    [EditorBrowsableAttribute("1")]
public object GetObject();
    [EditorBrowsableAttribute("1")]
public int GetInteger();
    public sealed virtual bool Equals(SequencePosition other);
    [EditorBrowsableAttribute("1")]
public virtual bool Equals(object obj);
    [EditorBrowsableAttribute("1")]
public virtual int GetHashCode();
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string EndPositionNotReached { get; }
    internal static string BufferWriterAdvancedTooFar { get; }
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static ResourceManager get_ResourceManager();
    internal static string get_EndPositionNotReached();
    internal static string get_BufferWriterAdvancedTooFar();
}
internal static class System.ThrowHelper : object {
    internal static void ThrowArgumentNullException(ExceptionArgument argument);
    private static Exception CreateArgumentNullException(ExceptionArgument argument);
    internal static void ThrowArgumentOutOfRangeException(ExceptionArgument argument);
    private static Exception CreateArgumentOutOfRangeException(ExceptionArgument argument);
    internal static void ThrowInvalidOperationException();
    private static Exception CreateInvalidOperationException();
    internal static void ThrowInvalidOperationException_EndPositionNotReached();
    private static Exception CreateInvalidOperationException_EndPositionNotReached();
    internal static void ThrowArgumentOutOfRangeException_PositionOutOfRange();
    private static Exception CreateArgumentOutOfRangeException_PositionOutOfRange();
    internal static void ThrowArgumentOutOfRangeException_OffsetOutOfRange();
    private static Exception CreateArgumentOutOfRangeException_OffsetOutOfRange();
    internal static void ThrowObjectDisposedException_ArrayMemoryPoolBuffer();
    private static Exception CreateObjectDisposedException_ArrayMemoryPoolBuffer();
    public static void ThrowArgumentValidationException(ReadOnlySequenceSegment`1<T> startSegment, int startIndex, ReadOnlySequenceSegment`1<T> endSegment);
    private static Exception CreateArgumentValidationException(ReadOnlySequenceSegment`1<T> startSegment, int startIndex, ReadOnlySequenceSegment`1<T> endSegment);
    public static void ThrowArgumentValidationException(Array array, int start);
    private static Exception CreateArgumentValidationException(Array array, int start);
    public static void ThrowStartOrEndArgumentValidationException(long start);
    private static Exception CreateStartOrEndArgumentValidationException(long start);
}
