internal static class FxResources.System.Runtime.Extensions.SR : object {
}
internal static class Interop : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("2")]
[TypeForwardedFromAttribute("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
[NullableAttribute("0")]
public class System.AppDomainUnloadedException : SystemException {
    public AppDomainUnloadedException(string message);
    public AppDomainUnloadedException(string message, Exception innerException);
    [NullableContextAttribute("1")]
protected AppDomainUnloadedException(SerializationInfo info, StreamingContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.ApplicationId : object {
    private Byte[] _publicKeyToken;
    [CompilerGeneratedAttribute]
private string <Culture>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProcessorArchitecture>k__BackingField;
    [CompilerGeneratedAttribute]
private Version <Version>k__BackingField;
    [NullableAttribute("2")]
public string Culture { get; }
    public string Name { get; }
    [NullableAttribute("2")]
public string ProcessorArchitecture { get; }
    public Version Version { get; }
    public Byte[] PublicKeyToken { get; }
    public ApplicationId(Byte[] publicKeyToken, string name, Version version, string processorArchitecture, string culture);
    [CompilerGeneratedAttribute]
[NullableContextAttribute("2")]
public string get_Culture();
    [CompilerGeneratedAttribute]
public string get_Name();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
public string get_ProcessorArchitecture();
    [CompilerGeneratedAttribute]
public Version get_Version();
    public Byte[] get_PublicKeyToken();
    public ApplicationId Copy();
    public virtual string ToString();
    private static void EncodeHexString(Byte[] sArray, ValueStringBuilder& stringBuilder);
    [NullableContextAttribute("2")]
public virtual bool Equals(object o);
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
internal static char <EncodeHexString>g__HexDigit|18_0(int num);
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
public class System.CodeDom.Compiler.IndentedTextWriter : TextWriter {
    private TextWriter _writer;
    private string _tabString;
    private int _indentLevel;
    private bool _tabsPending;
    public static string DefaultTabString;
    public Encoding Encoding { get; }
    public string NewLine { get; public set; }
    public int Indent { get; public set; }
    public TextWriter InnerWriter { get; }
    public IndentedTextWriter(TextWriter writer);
    public IndentedTextWriter(TextWriter writer, string tabString);
    public virtual Encoding get_Encoding();
    public virtual string get_NewLine();
    public virtual void set_NewLine(string value);
    public int get_Indent();
    public void set_Indent(int value);
    public TextWriter get_InnerWriter();
    public virtual void Close();
    public virtual void Flush();
    protected virtual void OutputTabs();
    [NullableContextAttribute("2")]
public virtual void Write(string s);
    public virtual void Write(bool value);
    public virtual void Write(char value);
    [NullableContextAttribute("2")]
public virtual void Write(Char[] buffer);
    public virtual void Write(Char[] buffer, int index, int count);
    public virtual void Write(double value);
    public virtual void Write(float value);
    public virtual void Write(int value);
    public virtual void Write(long value);
    [NullableContextAttribute("2")]
public virtual void Write(object value);
    public virtual void Write(string format, object arg0);
    [NullableContextAttribute("2")]
public virtual void Write(string format, object arg0, object arg1);
    public virtual void Write(string format, Object[] arg);
    [NullableContextAttribute("2")]
public void WriteLineNoTabs(string s);
    [NullableContextAttribute("2")]
public virtual void WriteLine(string s);
    public virtual void WriteLine();
    public virtual void WriteLine(bool value);
    public virtual void WriteLine(char value);
    [NullableContextAttribute("2")]
public virtual void WriteLine(Char[] buffer);
    public virtual void WriteLine(Char[] buffer, int index, int count);
    public virtual void WriteLine(double value);
    public virtual void WriteLine(float value);
    public virtual void WriteLine(int value);
    public virtual void WriteLine(long value);
    [NullableContextAttribute("2")]
public virtual void WriteLine(object value);
    public virtual void WriteLine(string format, object arg0);
    [NullableContextAttribute("2")]
public virtual void WriteLine(string format, object arg0, object arg1);
    public virtual void WriteLine(string format, Object[] arg);
    [CLSCompliantAttribute("False")]
public virtual void WriteLine(UInt32 value);
}
public abstract class System.ContextBoundObject : MarshalByRefObject {
}
[NullableAttribute("0")]
[TypeForwardedFromAttribute("mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
[NullableContextAttribute("2")]
public class System.ContextMarshalException : SystemException {
    public ContextMarshalException(string message);
    public ContextMarshalException(string message, Exception inner);
    [NullableContextAttribute("1")]
protected ContextMarshalException(SerializationInfo info, StreamingContext context);
}
[AttributeUsageAttribute("256")]
public class System.ContextStaticAttribute : Attribute {
}
public class System.Diagnostics.Stopwatch : object {
    private long _elapsed;
    private long _startTimeStamp;
    private bool _isRunning;
    public static long Frequency;
    public static bool IsHighResolution;
    private static double s_tickFrequency;
    public bool IsRunning { get; }
    public TimeSpan Elapsed { get; }
    public long ElapsedMilliseconds { get; }
    public long ElapsedTicks { get; }
    private static Stopwatch();
    public void Start();
    [NullableContextAttribute("1")]
public static Stopwatch StartNew();
    public void Stop();
    public void Reset();
    public void Restart();
    public bool get_IsRunning();
    public TimeSpan get_Elapsed();
    public long get_ElapsedMilliseconds();
    public long get_ElapsedTicks();
    public static long GetTimestamp();
    private long GetRawElapsedTicks();
    private long GetElapsedDateTimeTicks();
    private static long QueryPerformanceFrequency();
    private static long QueryPerformanceCounter();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.BufferedStream : Stream {
    private Stream _stream;
    private Byte[] _buffer;
    private int _bufferSize;
    private int _readPos;
    private int _readLen;
    private int _writePos;
    private Task`1<int> _lastSyncCompletedReadTask;
    private SemaphoreSlim _asyncActiveSemaphore;
    public Stream UnderlyingStream { get; }
    public int BufferSize { get; }
    public bool CanRead { get; }
    public bool CanWrite { get; }
    public bool CanSeek { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public BufferedStream(Stream stream);
    public BufferedStream(Stream stream, int bufferSize);
    internal SemaphoreSlim LazyEnsureAsyncActiveSemaphoreInitialized();
    private void EnsureNotClosed();
    private void EnsureCanSeek();
    private void EnsureCanRead();
    private void EnsureCanWrite();
    private void EnsureShadowBufferAllocated();
    private void EnsureBufferAllocated();
    public Stream get_UnderlyingStream();
    public int get_BufferSize();
    public virtual bool get_CanRead();
    public virtual bool get_CanWrite();
    public virtual bool get_CanSeek();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
    [AsyncStateMachineAttribute("System.IO.BufferedStream/<DisposeAsync>d__35")]
public virtual ValueTask DisposeAsync();
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.IO.BufferedStream/<FlushAsyncInternal>d__38")]
private Task FlushAsyncInternal(CancellationToken cancellationToken);
    private void FlushRead();
    private void ClearReadBufferBeforeWrite();
    private void FlushWrite();
    [AsyncStateMachineAttribute("System.IO.BufferedStream/<FlushWriteAsync>d__42")]
private Task FlushWriteAsync(CancellationToken cancellationToken);
    private int ReadFromBuffer(Byte[] array, int offset, int count);
    private int ReadFromBuffer(Span`1<byte> destination);
    private int ReadFromBuffer(Byte[] array, int offset, int count, Exception& error);
    public virtual int Read(Byte[] array, int offset, int count);
    [NullableContextAttribute("0")]
public virtual int Read(Span`1<byte> destination);
    private Task`1<int> LastSyncCompletedReadTask(int val);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<byte> buffer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.IO.BufferedStream/<ReadFromUnderlyingStreamAsync>d__51")]
private ValueTask`1<int> ReadFromUnderlyingStreamAsync(Memory`1<byte> buffer, CancellationToken cancellationToken, int bytesAlreadySatisfied, Task semaphoreLockTask);
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual int ReadByte();
    private int ReadByteSlow();
    private void WriteToBuffer(Byte[] array, Int32& offset, Int32& count);
    private int WriteToBuffer(ReadOnlySpan`1<byte> buffer);
    public virtual void Write(Byte[] array, int offset, int count);
    [NullableContextAttribute("0")]
public virtual void Write(ReadOnlySpan`1<byte> buffer);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public virtual ValueTask WriteAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.IO.BufferedStream/<WriteToUnderlyingStreamAsync>d__63")]
private Task WriteToUnderlyingStreamAsync(ReadOnlyMemory`1<byte> buffer, CancellationToken cancellationToken, Task semaphoreLockTask);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual void WriteByte(byte value);
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void CopyTo(Stream destination, int bufferSize);
    public virtual Task CopyToAsync(Stream destination, int bufferSize, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("System.IO.BufferedStream/<CopyToAsyncCore>d__71")]
private Task CopyToAsyncCore(Stream destination, int bufferSize, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[TypeForwardedFromAttribute("System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]
[NullableAttribute("0")]
public class System.IO.InvalidDataException : SystemException {
    public InvalidDataException(string message);
    public InvalidDataException(string message, Exception innerException);
    private InvalidDataException(SerializationInfo info, StreamingContext context);
}
internal static class System.IO.StreamHelpers : object {
    public static void ValidateCopyToArgs(Stream source, Stream destination, int bufferSize);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.StringReader : TextReader {
    private string _s;
    private int _pos;
    private int _length;
    public StringReader(string s);
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
    public virtual int Peek();
    public virtual int Read();
    public virtual int Read(Char[] buffer, int index, int count);
    [NullableContextAttribute("0")]
public virtual int Read(Span`1<char> buffer);
    [NullableContextAttribute("0")]
public virtual int ReadBlock(Span`1<char> buffer);
    public virtual string ReadToEnd();
    [NullableContextAttribute("2")]
public virtual string ReadLine();
    public virtual Task`1<string> ReadLineAsync();
    public virtual Task`1<string> ReadToEndAsync();
    public virtual Task`1<int> ReadBlockAsync(Char[] buffer, int index, int count);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<int> ReadBlockAsync(Memory`1<char> buffer, CancellationToken cancellationToken);
    public virtual Task`1<int> ReadAsync(Char[] buffer, int index, int count);
    [NullableContextAttribute("0")]
public virtual ValueTask`1<int> ReadAsync(Memory`1<char> buffer, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.IO.StringWriter : TextWriter {
    private static UnicodeEncoding modreq(System.Runtime.CompilerServices.IsVolatile) s_encoding;
    private StringBuilder _sb;
    private bool _isOpen;
    public Encoding Encoding { get; }
    [NullableContextAttribute("2")]
public StringWriter(IFormatProvider formatProvider);
    public StringWriter(StringBuilder sb);
    public StringWriter(StringBuilder sb, IFormatProvider formatProvider);
    private static StringWriter();
    public virtual void Close();
    protected virtual void Dispose(bool disposing);
    public virtual Encoding get_Encoding();
    public virtual StringBuilder GetStringBuilder();
    public virtual void Write(char value);
    public virtual void Write(Char[] buffer, int index, int count);
    [NullableContextAttribute("0")]
public virtual void Write(ReadOnlySpan`1<char> buffer);
    [NullableContextAttribute("2")]
public virtual void Write(string value);
    [NullableContextAttribute("2")]
public virtual void Write(StringBuilder value);
    [NullableContextAttribute("0")]
public virtual void WriteLine(ReadOnlySpan`1<char> buffer);
    [NullableContextAttribute("2")]
public virtual void WriteLine(StringBuilder value);
    public virtual Task WriteAsync(char value);
    public virtual Task WriteAsync(string value);
    public virtual Task WriteAsync(Char[] buffer, int index, int count);
    [NullableContextAttribute("0")]
public virtual Task WriteAsync(ReadOnlyMemory`1<char> buffer, CancellationToken cancellationToken);
    public virtual Task WriteAsync(StringBuilder value, CancellationToken cancellationToken);
    public virtual Task WriteLineAsync(char value);
    public virtual Task WriteLineAsync(string value);
    public virtual Task WriteLineAsync(StringBuilder value, CancellationToken cancellationToken);
    public virtual Task WriteLineAsync(Char[] buffer, int index, int count);
    [NullableContextAttribute("0")]
public virtual Task WriteLineAsync(ReadOnlyMemory`1<char> buffer, CancellationToken cancellationToken);
    public virtual Task FlushAsync();
    public virtual string ToString();
}
public enum System.LoaderOptimization : Enum {
    public int value__;
    [ObsoleteAttribute("This method has been deprecated. Please use Assembly.Load() instead. https://go.microsoft.com/fwlink/?linkid=14202")]
public static LoaderOptimization DisallowBindings;
    [ObsoleteAttribute("This method has been deprecated. Please use Assembly.Load() instead. https://go.microsoft.com/fwlink/?linkid=14202")]
public static LoaderOptimization DomainMask;
    public static LoaderOptimization MultiDomain;
    public static LoaderOptimization MultiDomainHost;
    public static LoaderOptimization NotSpecified;
    public static LoaderOptimization SingleDomain;
}
[AttributeUsageAttribute("64")]
public class System.LoaderOptimizationAttribute : Attribute {
    private byte _val;
    public LoaderOptimization Value { get; }
    public LoaderOptimizationAttribute(byte value);
    public LoaderOptimizationAttribute(LoaderOptimization value);
    public LoaderOptimization get_Value();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class System.Net.WebUtility : object {
    public static string HtmlEncode(string value);
    [NullableContextAttribute("1")]
public static void HtmlEncode(string value, TextWriter output);
    private static void HtmlEncode(ReadOnlySpan`1<char> input, ValueStringBuilder& output);
    public static string HtmlDecode(string value);
    [NullableContextAttribute("1")]
public static void HtmlDecode(string value, TextWriter output);
    private static void HtmlDecode(ReadOnlySpan`1<char> input, ValueStringBuilder& output);
    private static int IndexOfHtmlEncodingChars(ReadOnlySpan`1<char> input);
    private static void GetEncodedBytes(Byte[] originalBytes, int offset, int count, Byte[] expandedBytes);
    public static string UrlEncode(string value);
    public static Byte[] UrlEncodeToBytes(Byte[] value, int offset, int count);
    private static string UrlDecodeInternal(string value, Encoding encoding);
    private static Byte[] UrlDecodeInternal(Byte[] bytes, int offset, int count);
    public static string UrlDecode(string encodedValue);
    public static Byte[] UrlDecodeToBytes(Byte[] encodedValue, int offset, int count);
    private static void ConvertSmpToUtf16(UInt32 smpChar, Char& leadingSurrogate, Char& trailingSurrogate);
    private static int GetNextUnicodeScalarValueFromUtf16Surrogate(ReadOnlySpan`1<char> input, Int32& index);
    private static int HexToInt(char h);
    private static char IntToHex(int n);
    private static bool IsUrlSafeChar(char ch);
    private static bool ValidateUrlEncodingParameters(Byte[] bytes, int offset, int count);
    private static int IndexOfHtmlDecodingChars(ReadOnlySpan`1<char> input);
}
public class System.Reflection.AssemblyNameProxy : MarshalByRefObject {
    [NullableContextAttribute("1")]
public AssemblyName GetAssemblyName(string assemblyFile);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[AttributeUsageAttribute("5198")]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
[CompilerGeneratedAttribute]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[NullableAttribute("0")]
[NullableContextAttribute("2")]
public class System.Runtime.CompilerServices.SwitchExpressionException : InvalidOperationException {
    [CompilerGeneratedAttribute]
private object <UnmatchedValue>k__BackingField;
    public object UnmatchedValue { get; }
    [NullableAttribute("1")]
public string Message { get; }
    public SwitchExpressionException(Exception innerException);
    public SwitchExpressionException(object unmatchedValue);
    private SwitchExpressionException(SerializationInfo info, StreamingContext context);
    public SwitchExpressionException(string message);
    public SwitchExpressionException(string message, Exception innerException);
    [CompilerGeneratedAttribute]
public object get_UnmatchedValue();
    [NullableContextAttribute("1")]
public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    [NullableContextAttribute("1")]
public virtual string get_Message();
}
[NullableAttribute("0")]
[NullableContextAttribute("1")]
public static class System.Runtime.ProfileOptimization : object {
    public static void SetProfileRoot(string directoryPath);
    public static void StartProfile(string profile);
}
[AttributeUsageAttribute("5887")]
public class System.Runtime.Versioning.ComponentGuaranteesAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ComponentGuaranteesOptions <Guarantees>k__BackingField;
    public ComponentGuaranteesOptions Guarantees { get; }
    public ComponentGuaranteesAttribute(ComponentGuaranteesOptions guarantees);
    [CompilerGeneratedAttribute]
public ComponentGuaranteesOptions get_Guarantees();
}
[FlagsAttribute]
public enum System.Runtime.Versioning.ComponentGuaranteesOptions : Enum {
    public int value__;
    public static ComponentGuaranteesOptions None;
    public static ComponentGuaranteesOptions Exchange;
    public static ComponentGuaranteesOptions Stable;
    public static ComponentGuaranteesOptions SideBySide;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class System.Runtime.Versioning.FrameworkName : object {
    private string _identifier;
    private Version _version;
    private string _profile;
    private string _fullName;
    private static Char[] s_componentSplitSeparator;
    public string Identifier { get; }
    public Version Version { get; }
    public string Profile { get; }
    public string FullName { get; }
    public FrameworkName(string identifier, Version version);
    public FrameworkName(string identifier, Version version, string profile);
    public FrameworkName(string frameworkName);
    private static FrameworkName();
    public string get_Identifier();
    public Version get_Version();
    public string get_Profile();
    public string get_FullName();
    [NullableContextAttribute("2")]
public virtual bool Equals(object obj);
    [NullableContextAttribute("2")]
public sealed virtual bool Equals(FrameworkName other);
    public virtual int GetHashCode();
    public virtual string ToString();
    [NullableContextAttribute("2")]
public static bool op_Equality(FrameworkName left, FrameworkName right);
    [NullableContextAttribute("2")]
public static bool op_Inequality(FrameworkName left, FrameworkName right);
}
[ConditionalAttribute("RESOURCE_ANNOTATION_WORK")]
[AttributeUsageAttribute("224")]
public class System.Runtime.Versioning.ResourceConsumptionAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ResourceScope <ResourceScope>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceScope <ConsumptionScope>k__BackingField;
    public ResourceScope ResourceScope { get; }
    public ResourceScope ConsumptionScope { get; }
    public ResourceConsumptionAttribute(ResourceScope resourceScope);
    public ResourceConsumptionAttribute(ResourceScope resourceScope, ResourceScope consumptionScope);
    [CompilerGeneratedAttribute]
public ResourceScope get_ResourceScope();
    [CompilerGeneratedAttribute]
public ResourceScope get_ConsumptionScope();
}
[ConditionalAttribute("RESOURCE_ANNOTATION_WORK")]
[AttributeUsageAttribute("480")]
public class System.Runtime.Versioning.ResourceExposureAttribute : Attribute {
    [CompilerGeneratedAttribute]
private ResourceScope <ResourceExposureLevel>k__BackingField;
    public ResourceScope ResourceExposureLevel { get; }
    public ResourceExposureAttribute(ResourceScope exposureLevel);
    [CompilerGeneratedAttribute]
public ResourceScope get_ResourceExposureLevel();
}
[FlagsAttribute]
public enum System.Runtime.Versioning.ResourceScope : Enum {
    public int value__;
    public static ResourceScope None;
    public static ResourceScope Machine;
    public static ResourceScope Process;
    public static ResourceScope AppDomain;
    public static ResourceScope Library;
    public static ResourceScope Private;
    public static ResourceScope Assembly;
}
[FlagsAttribute]
internal enum System.Runtime.Versioning.SxSRequirements : Enum {
    public int value__;
    public static SxSRequirements None;
    public static SxSRequirements AppDomainID;
    public static SxSRequirements ProcessID;
    public static SxSRequirements CLRInstanceID;
    public static SxSRequirements AssemblyName;
    public static SxSRequirements TypeName;
}
public static class System.Runtime.Versioning.VersioningHelper : object {
    [NullableContextAttribute("1")]
public static string MakeVersionSafeName(string name, ResourceScope from, ResourceScope to);
    [NullableContextAttribute("2")]
public static string MakeVersionSafeName(string name, ResourceScope from, ResourceScope to, Type type);
    private static string GetCLRInstanceString();
    private static SxSRequirements GetRequirements(ResourceScope consumeAsScope, ResourceScope calleeScope);
    private static int GetCurrentProcessId();
}
[AttributeUsageAttribute("109")]
public abstract class System.Security.Permissions.CodeAccessSecurityAttribute : SecurityAttribute {
    protected CodeAccessSecurityAttribute(SecurityAction action);
}
public enum System.Security.Permissions.SecurityAction : Enum {
    public int value__;
    public static SecurityAction Assert;
    public static SecurityAction Demand;
    [ObsoleteAttribute("Deny is obsolete and will be removed in a future release of the .NET Framework. See https://go.microsoft.com/fwlink/?LinkID=155570 for more information.")]
public static SecurityAction Deny;
    public static SecurityAction InheritanceDemand;
    public static SecurityAction LinkDemand;
    public static SecurityAction PermitOnly;
    [ObsoleteAttribute("Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See https://go.microsoft.com/fwlink/?LinkID=155570 for more information.")]
public static SecurityAction RequestMinimum;
    [ObsoleteAttribute("Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See https://go.microsoft.com/fwlink/?LinkID=155570 for more information.")]
public static SecurityAction RequestOptional;
    [ObsoleteAttribute("Assembly level declarative security is obsolete and is no longer enforced by the CLR by default. See https://go.microsoft.com/fwlink/?LinkID=155570 for more information.")]
public static SecurityAction RequestRefuse;
}
[AttributeUsageAttribute("109")]
public abstract class System.Security.Permissions.SecurityAttribute : Attribute {
    [CompilerGeneratedAttribute]
private SecurityAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Unrestricted>k__BackingField;
    public SecurityAction Action { get; public set; }
    public bool Unrestricted { get; public set; }
    protected SecurityAttribute(SecurityAction action);
    [CompilerGeneratedAttribute]
public SecurityAction get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(SecurityAction value);
    [CompilerGeneratedAttribute]
public bool get_Unrestricted();
    [CompilerGeneratedAttribute]
public void set_Unrestricted(bool value);
    [NullableContextAttribute("2")]
public abstract virtual IPermission CreatePermission();
}
[AttributeUsageAttribute("109")]
public class System.Security.Permissions.SecurityPermissionAttribute : CodeAccessSecurityAttribute {
    [CompilerGeneratedAttribute]
private bool <Assertion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BindingRedirects>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ControlAppDomain>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ControlDomainPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ControlEvidence>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ControlPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ControlPrincipal>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ControlThread>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Execution>k__BackingField;
    [CompilerGeneratedAttribute]
private SecurityPermissionFlag <Flags>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Infrastructure>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <RemotingConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SerializationFormatter>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SkipVerification>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UnmanagedCode>k__BackingField;
    public bool Assertion { get; public set; }
    public bool BindingRedirects { get; public set; }
    public bool ControlAppDomain { get; public set; }
    public bool ControlDomainPolicy { get; public set; }
    public bool ControlEvidence { get; public set; }
    public bool ControlPolicy { get; public set; }
    public bool ControlPrincipal { get; public set; }
    public bool ControlThread { get; public set; }
    public bool Execution { get; public set; }
    public SecurityPermissionFlag Flags { get; public set; }
    public bool Infrastructure { get; public set; }
    public bool RemotingConfiguration { get; public set; }
    public bool SerializationFormatter { get; public set; }
    public bool SkipVerification { get; public set; }
    public bool UnmanagedCode { get; public set; }
    public SecurityPermissionAttribute(SecurityAction action);
    [CompilerGeneratedAttribute]
public bool get_Assertion();
    [CompilerGeneratedAttribute]
public void set_Assertion(bool value);
    [CompilerGeneratedAttribute]
public bool get_BindingRedirects();
    [CompilerGeneratedAttribute]
public void set_BindingRedirects(bool value);
    [CompilerGeneratedAttribute]
public bool get_ControlAppDomain();
    [CompilerGeneratedAttribute]
public void set_ControlAppDomain(bool value);
    [CompilerGeneratedAttribute]
public bool get_ControlDomainPolicy();
    [CompilerGeneratedAttribute]
public void set_ControlDomainPolicy(bool value);
    [CompilerGeneratedAttribute]
public bool get_ControlEvidence();
    [CompilerGeneratedAttribute]
public void set_ControlEvidence(bool value);
    [CompilerGeneratedAttribute]
public bool get_ControlPolicy();
    [CompilerGeneratedAttribute]
public void set_ControlPolicy(bool value);
    [CompilerGeneratedAttribute]
public bool get_ControlPrincipal();
    [CompilerGeneratedAttribute]
public void set_ControlPrincipal(bool value);
    [CompilerGeneratedAttribute]
public bool get_ControlThread();
    [CompilerGeneratedAttribute]
public void set_ControlThread(bool value);
    [CompilerGeneratedAttribute]
public bool get_Execution();
    [CompilerGeneratedAttribute]
public void set_Execution(bool value);
    [CompilerGeneratedAttribute]
public SecurityPermissionFlag get_Flags();
    [CompilerGeneratedAttribute]
public void set_Flags(SecurityPermissionFlag value);
    [CompilerGeneratedAttribute]
public bool get_Infrastructure();
    [CompilerGeneratedAttribute]
public void set_Infrastructure(bool value);
    [CompilerGeneratedAttribute]
public bool get_RemotingConfiguration();
    [CompilerGeneratedAttribute]
public void set_RemotingConfiguration(bool value);
    [CompilerGeneratedAttribute]
public bool get_SerializationFormatter();
    [CompilerGeneratedAttribute]
public void set_SerializationFormatter(bool value);
    [CompilerGeneratedAttribute]
public bool get_SkipVerification();
    [CompilerGeneratedAttribute]
public void set_SkipVerification(bool value);
    [CompilerGeneratedAttribute]
public bool get_UnmanagedCode();
    [CompilerGeneratedAttribute]
public void set_UnmanagedCode(bool value);
    [NullableContextAttribute("2")]
public virtual IPermission CreatePermission();
}
[FlagsAttribute]
public enum System.Security.Permissions.SecurityPermissionFlag : Enum {
    public int value__;
    public static SecurityPermissionFlag AllFlags;
    public static SecurityPermissionFlag Assertion;
    public static SecurityPermissionFlag BindingRedirects;
    public static SecurityPermissionFlag ControlAppDomain;
    public static SecurityPermissionFlag ControlDomainPolicy;
    public static SecurityPermissionFlag ControlEvidence;
    public static SecurityPermissionFlag ControlPolicy;
    public static SecurityPermissionFlag ControlPrincipal;
    public static SecurityPermissionFlag ControlThread;
    public static SecurityPermissionFlag Execution;
    public static SecurityPermissionFlag Infrastructure;
    public static SecurityPermissionFlag NoFlags;
    public static SecurityPermissionFlag RemotingConfiguration;
    public static SecurityPermissionFlag SerializationFormatter;
    public static SecurityPermissionFlag SkipVerification;
    public static SecurityPermissionFlag UnmanagedCode;
}
internal static class System.SR : object {
    private static ResourceManager s_resourceManager;
    internal static ResourceManager ResourceManager { get; }
    internal static string Argument_EmptyApplicationName { get; }
    internal static string Argument_FrameworkNameMissingVersion { get; }
    internal static string Argument_FrameworkNameInvalid { get; }
    internal static string Argument_FrameworkNameInvalidVersion { get; }
    internal static string Argument_FrameworkNameTooShort { get; }
    internal static string net_emptystringcall { get; }
    internal static string ArgumentOutOfRange_NeedNonNegNum { get; }
    internal static string ArgumentOutOfRange_MustBePositive { get; }
    internal static string Argument_BadResourceScopeTypeBits { get; }
    internal static string Argument_BadResourceScopeVisibilityBits { get; }
    internal static string ArgumentNull_TypeRequiredByResourceScope { get; }
    internal static string Argument_ResourceScopeWrongDirection { get; }
    internal static string Arg_AppDomainUnloadedException { get; }
    internal static string Arg_SwitchExpressionException { get; }
    internal static string Arg_ContextMarshalException { get; }
    internal static string Argument_InvalidOffLen { get; }
    internal static string GenericInvalidData { get; }
    internal static string ArgumentNull_Buffer { get; }
    internal static string NotSupported_CannotWriteToBufferedStreamIfReadBufferCannotBeFlushed { get; }
    internal static string NotSupported_UnseekableStream { get; }
    internal static string NotSupported_UnreadableStream { get; }
    internal static string NotSupported_UnwritableStream { get; }
    internal static string ObjectDisposed_StreamClosed { get; }
    internal static string ArgumentOutOfRange_NeedPosNum { get; }
    internal static string ObjectDisposed_WriterClosed { get; }
    internal static string ObjectDisposed_ReaderClosed { get; }
    internal static string SwitchExpressionException_UnmatchedValue { get; }
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    internal static ResourceManager get_ResourceManager();
    internal static string get_Argument_EmptyApplicationName();
    internal static string get_Argument_FrameworkNameMissingVersion();
    internal static string get_Argument_FrameworkNameInvalid();
    internal static string get_Argument_FrameworkNameInvalidVersion();
    internal static string get_Argument_FrameworkNameTooShort();
    internal static string get_net_emptystringcall();
    internal static string get_ArgumentOutOfRange_NeedNonNegNum();
    internal static string get_ArgumentOutOfRange_MustBePositive();
    internal static string get_Argument_BadResourceScopeTypeBits();
    internal static string get_Argument_BadResourceScopeVisibilityBits();
    internal static string get_ArgumentNull_TypeRequiredByResourceScope();
    internal static string get_Argument_ResourceScopeWrongDirection();
    internal static string get_Arg_AppDomainUnloadedException();
    internal static string get_Arg_SwitchExpressionException();
    internal static string get_Arg_ContextMarshalException();
    internal static string get_Argument_InvalidOffLen();
    internal static string get_GenericInvalidData();
    internal static string get_ArgumentNull_Buffer();
    internal static string get_NotSupported_CannotWriteToBufferedStreamIfReadBufferCannotBeFlushed();
    internal static string get_NotSupported_UnseekableStream();
    internal static string get_NotSupported_UnreadableStream();
    internal static string get_NotSupported_UnwritableStream();
    internal static string get_ObjectDisposed_StreamClosed();
    internal static string get_ArgumentOutOfRange_NeedPosNum();
    internal static string get_ObjectDisposed_WriterClosed();
    internal static string get_ObjectDisposed_ReaderClosed();
    internal static string get_SwitchExpressionException_UnmatchedValue();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class System.StringNormalizationExtensions : object {
    [ExtensionAttribute]
public static bool IsNormalized(string strInput);
    [ExtensionAttribute]
public static bool IsNormalized(string strInput, NormalizationForm normalizationForm);
    [ExtensionAttribute]
public static string Normalize(string strInput);
    [ExtensionAttribute]
public static string Normalize(string strInput, NormalizationForm normalizationForm);
}
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[DefaultMemberAttribute("Item")]
[IsByRefLikeAttribute]
internal class System.Text.ValueStringBuilder : ValueType {
    private Char[] _arrayToReturnToPool;
    private Span`1<char> _chars;
    private int _pos;
    public int Length { get; public set; }
    public ValueStringBuilder(Span`1<char> initialBuffer);
    public ValueStringBuilder(int initialCapacity);
    public int get_Length();
    public void set_Length(int value);
    public virtual string ToString();
    public ReadOnlySpan`1<char> AsSpan();
    public void Append(char c);
    public void Append(string s);
    private void AppendSlow(string s);
    public void Append(ReadOnlySpan`1<char> value);
    public Span`1<char> AppendSpan(int length);
    private void GrowAndAppend(char c);
    private void Grow(int additionalCapacityBeyondPos);
    public void Dispose();
}
internal static class System.Threading.Tasks.TaskToApm : object {
    public static IAsyncResult Begin(Task task, AsyncCallback callback, object state);
    public static void End(IAsyncResult asyncResult);
    public static TResult End(IAsyncResult asyncResult);
    private static void InvokeCallbackWhenTaskCompletes(Task antecedent, AsyncCallback callback, IAsyncResult asyncResult);
}
