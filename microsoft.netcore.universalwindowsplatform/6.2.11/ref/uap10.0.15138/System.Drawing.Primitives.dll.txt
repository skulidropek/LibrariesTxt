public class System.Drawing.Color : ValueType {
    public static Color Empty;
    public byte A { get; }
    public static Color AliceBlue { get; }
    public static Color AntiqueWhite { get; }
    public static Color Aqua { get; }
    public static Color Aquamarine { get; }
    public static Color Azure { get; }
    public byte B { get; }
    public static Color Beige { get; }
    public static Color Bisque { get; }
    public static Color Black { get; }
    public static Color BlanchedAlmond { get; }
    public static Color Blue { get; }
    public static Color BlueViolet { get; }
    public static Color Brown { get; }
    public static Color BurlyWood { get; }
    public static Color CadetBlue { get; }
    public static Color Chartreuse { get; }
    public static Color Chocolate { get; }
    public static Color Coral { get; }
    public static Color CornflowerBlue { get; }
    public static Color Cornsilk { get; }
    public static Color Crimson { get; }
    public static Color Cyan { get; }
    public static Color DarkBlue { get; }
    public static Color DarkCyan { get; }
    public static Color DarkGoldenrod { get; }
    public static Color DarkGray { get; }
    public static Color DarkGreen { get; }
    public static Color DarkKhaki { get; }
    public static Color DarkMagenta { get; }
    public static Color DarkOliveGreen { get; }
    public static Color DarkOrange { get; }
    public static Color DarkOrchid { get; }
    public static Color DarkRed { get; }
    public static Color DarkSalmon { get; }
    public static Color DarkSeaGreen { get; }
    public static Color DarkSlateBlue { get; }
    public static Color DarkSlateGray { get; }
    public static Color DarkTurquoise { get; }
    public static Color DarkViolet { get; }
    public static Color DeepPink { get; }
    public static Color DeepSkyBlue { get; }
    public static Color DimGray { get; }
    public static Color DodgerBlue { get; }
    public static Color Firebrick { get; }
    public static Color FloralWhite { get; }
    public static Color ForestGreen { get; }
    public static Color Fuchsia { get; }
    public byte G { get; }
    public static Color Gainsboro { get; }
    public static Color GhostWhite { get; }
    public static Color Gold { get; }
    public static Color Goldenrod { get; }
    public static Color Gray { get; }
    public static Color Green { get; }
    public static Color GreenYellow { get; }
    public static Color Honeydew { get; }
    public static Color HotPink { get; }
    public static Color IndianRed { get; }
    public static Color Indigo { get; }
    public bool IsEmpty { get; }
    public bool IsKnownColor { get; }
    public bool IsNamedColor { get; }
    public bool IsSystemColor { get; }
    public static Color Ivory { get; }
    public static Color Khaki { get; }
    public static Color Lavender { get; }
    public static Color LavenderBlush { get; }
    public static Color LawnGreen { get; }
    public static Color LemonChiffon { get; }
    public static Color LightBlue { get; }
    public static Color LightCoral { get; }
    public static Color LightCyan { get; }
    public static Color LightGoldenrodYellow { get; }
    public static Color LightGray { get; }
    public static Color LightGreen { get; }
    public static Color LightPink { get; }
    public static Color LightSalmon { get; }
    public static Color LightSeaGreen { get; }
    public static Color LightSkyBlue { get; }
    public static Color LightSlateGray { get; }
    public static Color LightSteelBlue { get; }
    public static Color LightYellow { get; }
    public static Color Lime { get; }
    public static Color LimeGreen { get; }
    public static Color Linen { get; }
    public static Color Magenta { get; }
    public static Color Maroon { get; }
    public static Color MediumAquamarine { get; }
    public static Color MediumBlue { get; }
    public static Color MediumOrchid { get; }
    public static Color MediumPurple { get; }
    public static Color MediumSeaGreen { get; }
    public static Color MediumSlateBlue { get; }
    public static Color MediumSpringGreen { get; }
    public static Color MediumTurquoise { get; }
    public static Color MediumVioletRed { get; }
    public static Color MidnightBlue { get; }
    public static Color MintCream { get; }
    public static Color MistyRose { get; }
    public static Color Moccasin { get; }
    public string Name { get; }
    public static Color NavajoWhite { get; }
    public static Color Navy { get; }
    public static Color OldLace { get; }
    public static Color Olive { get; }
    public static Color OliveDrab { get; }
    public static Color Orange { get; }
    public static Color OrangeRed { get; }
    public static Color Orchid { get; }
    public static Color PaleGoldenrod { get; }
    public static Color PaleGreen { get; }
    public static Color PaleTurquoise { get; }
    public static Color PaleVioletRed { get; }
    public static Color PapayaWhip { get; }
    public static Color PeachPuff { get; }
    public static Color Peru { get; }
    public static Color Pink { get; }
    public static Color Plum { get; }
    public static Color PowderBlue { get; }
    public static Color Purple { get; }
    public byte R { get; }
    public static Color Red { get; }
    public static Color RosyBrown { get; }
    public static Color RoyalBlue { get; }
    public static Color SaddleBrown { get; }
    public static Color Salmon { get; }
    public static Color SandyBrown { get; }
    public static Color SeaGreen { get; }
    public static Color SeaShell { get; }
    public static Color Sienna { get; }
    public static Color Silver { get; }
    public static Color SkyBlue { get; }
    public static Color SlateBlue { get; }
    public static Color SlateGray { get; }
    public static Color Snow { get; }
    public static Color SpringGreen { get; }
    public static Color SteelBlue { get; }
    public static Color Tan { get; }
    public static Color Teal { get; }
    public static Color Thistle { get; }
    public static Color Tomato { get; }
    public static Color Transparent { get; }
    public static Color Turquoise { get; }
    public static Color Violet { get; }
    public static Color Wheat { get; }
    public static Color White { get; }
    public static Color WhiteSmoke { get; }
    public static Color Yellow { get; }
    public static Color YellowGreen { get; }
    public byte get_A();
    public static Color get_AliceBlue();
    public static Color get_AntiqueWhite();
    public static Color get_Aqua();
    public static Color get_Aquamarine();
    public static Color get_Azure();
    public byte get_B();
    public static Color get_Beige();
    public static Color get_Bisque();
    public static Color get_Black();
    public static Color get_BlanchedAlmond();
    public static Color get_Blue();
    public static Color get_BlueViolet();
    public static Color get_Brown();
    public static Color get_BurlyWood();
    public static Color get_CadetBlue();
    public static Color get_Chartreuse();
    public static Color get_Chocolate();
    public static Color get_Coral();
    public static Color get_CornflowerBlue();
    public static Color get_Cornsilk();
    public static Color get_Crimson();
    public static Color get_Cyan();
    public static Color get_DarkBlue();
    public static Color get_DarkCyan();
    public static Color get_DarkGoldenrod();
    public static Color get_DarkGray();
    public static Color get_DarkGreen();
    public static Color get_DarkKhaki();
    public static Color get_DarkMagenta();
    public static Color get_DarkOliveGreen();
    public static Color get_DarkOrange();
    public static Color get_DarkOrchid();
    public static Color get_DarkRed();
    public static Color get_DarkSalmon();
    public static Color get_DarkSeaGreen();
    public static Color get_DarkSlateBlue();
    public static Color get_DarkSlateGray();
    public static Color get_DarkTurquoise();
    public static Color get_DarkViolet();
    public static Color get_DeepPink();
    public static Color get_DeepSkyBlue();
    public static Color get_DimGray();
    public static Color get_DodgerBlue();
    public static Color get_Firebrick();
    public static Color get_FloralWhite();
    public static Color get_ForestGreen();
    public static Color get_Fuchsia();
    public byte get_G();
    public static Color get_Gainsboro();
    public static Color get_GhostWhite();
    public static Color get_Gold();
    public static Color get_Goldenrod();
    public static Color get_Gray();
    public static Color get_Green();
    public static Color get_GreenYellow();
    public static Color get_Honeydew();
    public static Color get_HotPink();
    public static Color get_IndianRed();
    public static Color get_Indigo();
    public bool get_IsEmpty();
    public bool get_IsKnownColor();
    public bool get_IsNamedColor();
    public bool get_IsSystemColor();
    public static Color get_Ivory();
    public static Color get_Khaki();
    public static Color get_Lavender();
    public static Color get_LavenderBlush();
    public static Color get_LawnGreen();
    public static Color get_LemonChiffon();
    public static Color get_LightBlue();
    public static Color get_LightCoral();
    public static Color get_LightCyan();
    public static Color get_LightGoldenrodYellow();
    public static Color get_LightGray();
    public static Color get_LightGreen();
    public static Color get_LightPink();
    public static Color get_LightSalmon();
    public static Color get_LightSeaGreen();
    public static Color get_LightSkyBlue();
    public static Color get_LightSlateGray();
    public static Color get_LightSteelBlue();
    public static Color get_LightYellow();
    public static Color get_Lime();
    public static Color get_LimeGreen();
    public static Color get_Linen();
    public static Color get_Magenta();
    public static Color get_Maroon();
    public static Color get_MediumAquamarine();
    public static Color get_MediumBlue();
    public static Color get_MediumOrchid();
    public static Color get_MediumPurple();
    public static Color get_MediumSeaGreen();
    public static Color get_MediumSlateBlue();
    public static Color get_MediumSpringGreen();
    public static Color get_MediumTurquoise();
    public static Color get_MediumVioletRed();
    public static Color get_MidnightBlue();
    public static Color get_MintCream();
    public static Color get_MistyRose();
    public static Color get_Moccasin();
    public string get_Name();
    public static Color get_NavajoWhite();
    public static Color get_Navy();
    public static Color get_OldLace();
    public static Color get_Olive();
    public static Color get_OliveDrab();
    public static Color get_Orange();
    public static Color get_OrangeRed();
    public static Color get_Orchid();
    public static Color get_PaleGoldenrod();
    public static Color get_PaleGreen();
    public static Color get_PaleTurquoise();
    public static Color get_PaleVioletRed();
    public static Color get_PapayaWhip();
    public static Color get_PeachPuff();
    public static Color get_Peru();
    public static Color get_Pink();
    public static Color get_Plum();
    public static Color get_PowderBlue();
    public static Color get_Purple();
    public byte get_R();
    public static Color get_Red();
    public static Color get_RosyBrown();
    public static Color get_RoyalBlue();
    public static Color get_SaddleBrown();
    public static Color get_Salmon();
    public static Color get_SandyBrown();
    public static Color get_SeaGreen();
    public static Color get_SeaShell();
    public static Color get_Sienna();
    public static Color get_Silver();
    public static Color get_SkyBlue();
    public static Color get_SlateBlue();
    public static Color get_SlateGray();
    public static Color get_Snow();
    public static Color get_SpringGreen();
    public static Color get_SteelBlue();
    public static Color get_Tan();
    public static Color get_Teal();
    public static Color get_Thistle();
    public static Color get_Tomato();
    public static Color get_Transparent();
    public static Color get_Turquoise();
    public static Color get_Violet();
    public static Color get_Wheat();
    public static Color get_White();
    public static Color get_WhiteSmoke();
    public static Color get_Yellow();
    public static Color get_YellowGreen();
    public sealed virtual bool Equals(Color other);
    public virtual bool Equals(object obj);
    public static Color FromArgb(int argb);
    public static Color FromArgb(int alpha, Color baseColor);
    public static Color FromArgb(int red, int green, int blue);
    public static Color FromArgb(int alpha, int red, int green, int blue);
    public static Color FromKnownColor(KnownColor color);
    public static Color FromName(string name);
    public float GetBrightness();
    public virtual int GetHashCode();
    public float GetHue();
    public float GetSaturation();
    public static bool op_Equality(Color left, Color right);
    public static bool op_Inequality(Color left, Color right);
    public int ToArgb();
    public KnownColor ToKnownColor();
    public virtual string ToString();
}
public enum System.Drawing.KnownColor : Enum {
    public int value__;
    public static KnownColor ActiveBorder;
    public static KnownColor ActiveCaption;
    public static KnownColor ActiveCaptionText;
    public static KnownColor AliceBlue;
    public static KnownColor AntiqueWhite;
    public static KnownColor AppWorkspace;
    public static KnownColor Aqua;
    public static KnownColor Aquamarine;
    public static KnownColor Azure;
    public static KnownColor Beige;
    public static KnownColor Bisque;
    public static KnownColor Black;
    public static KnownColor BlanchedAlmond;
    public static KnownColor Blue;
    public static KnownColor BlueViolet;
    public static KnownColor Brown;
    public static KnownColor BurlyWood;
    public static KnownColor ButtonFace;
    public static KnownColor ButtonHighlight;
    public static KnownColor ButtonShadow;
    public static KnownColor CadetBlue;
    public static KnownColor Chartreuse;
    public static KnownColor Chocolate;
    public static KnownColor Control;
    public static KnownColor ControlDark;
    public static KnownColor ControlDarkDark;
    public static KnownColor ControlLight;
    public static KnownColor ControlLightLight;
    public static KnownColor ControlText;
    public static KnownColor Coral;
    public static KnownColor CornflowerBlue;
    public static KnownColor Cornsilk;
    public static KnownColor Crimson;
    public static KnownColor Cyan;
    public static KnownColor DarkBlue;
    public static KnownColor DarkCyan;
    public static KnownColor DarkGoldenrod;
    public static KnownColor DarkGray;
    public static KnownColor DarkGreen;
    public static KnownColor DarkKhaki;
    public static KnownColor DarkMagenta;
    public static KnownColor DarkOliveGreen;
    public static KnownColor DarkOrange;
    public static KnownColor DarkOrchid;
    public static KnownColor DarkRed;
    public static KnownColor DarkSalmon;
    public static KnownColor DarkSeaGreen;
    public static KnownColor DarkSlateBlue;
    public static KnownColor DarkSlateGray;
    public static KnownColor DarkTurquoise;
    public static KnownColor DarkViolet;
    public static KnownColor DeepPink;
    public static KnownColor DeepSkyBlue;
    public static KnownColor Desktop;
    public static KnownColor DimGray;
    public static KnownColor DodgerBlue;
    public static KnownColor Firebrick;
    public static KnownColor FloralWhite;
    public static KnownColor ForestGreen;
    public static KnownColor Fuchsia;
    public static KnownColor Gainsboro;
    public static KnownColor GhostWhite;
    public static KnownColor Gold;
    public static KnownColor Goldenrod;
    public static KnownColor GradientActiveCaption;
    public static KnownColor GradientInactiveCaption;
    public static KnownColor Gray;
    public static KnownColor GrayText;
    public static KnownColor Green;
    public static KnownColor GreenYellow;
    public static KnownColor Highlight;
    public static KnownColor HighlightText;
    public static KnownColor Honeydew;
    public static KnownColor HotPink;
    public static KnownColor HotTrack;
    public static KnownColor InactiveBorder;
    public static KnownColor InactiveCaption;
    public static KnownColor InactiveCaptionText;
    public static KnownColor IndianRed;
    public static KnownColor Indigo;
    public static KnownColor Info;
    public static KnownColor InfoText;
    public static KnownColor Ivory;
    public static KnownColor Khaki;
    public static KnownColor Lavender;
    public static KnownColor LavenderBlush;
    public static KnownColor LawnGreen;
    public static KnownColor LemonChiffon;
    public static KnownColor LightBlue;
    public static KnownColor LightCoral;
    public static KnownColor LightCyan;
    public static KnownColor LightGoldenrodYellow;
    public static KnownColor LightGray;
    public static KnownColor LightGreen;
    public static KnownColor LightPink;
    public static KnownColor LightSalmon;
    public static KnownColor LightSeaGreen;
    public static KnownColor LightSkyBlue;
    public static KnownColor LightSlateGray;
    public static KnownColor LightSteelBlue;
    public static KnownColor LightYellow;
    public static KnownColor Lime;
    public static KnownColor LimeGreen;
    public static KnownColor Linen;
    public static KnownColor Magenta;
    public static KnownColor Maroon;
    public static KnownColor MediumAquamarine;
    public static KnownColor MediumBlue;
    public static KnownColor MediumOrchid;
    public static KnownColor MediumPurple;
    public static KnownColor MediumSeaGreen;
    public static KnownColor MediumSlateBlue;
    public static KnownColor MediumSpringGreen;
    public static KnownColor MediumTurquoise;
    public static KnownColor MediumVioletRed;
    public static KnownColor Menu;
    public static KnownColor MenuBar;
    public static KnownColor MenuHighlight;
    public static KnownColor MenuText;
    public static KnownColor MidnightBlue;
    public static KnownColor MintCream;
    public static KnownColor MistyRose;
    public static KnownColor Moccasin;
    public static KnownColor NavajoWhite;
    public static KnownColor Navy;
    public static KnownColor OldLace;
    public static KnownColor Olive;
    public static KnownColor OliveDrab;
    public static KnownColor Orange;
    public static KnownColor OrangeRed;
    public static KnownColor Orchid;
    public static KnownColor PaleGoldenrod;
    public static KnownColor PaleGreen;
    public static KnownColor PaleTurquoise;
    public static KnownColor PaleVioletRed;
    public static KnownColor PapayaWhip;
    public static KnownColor PeachPuff;
    public static KnownColor Peru;
    public static KnownColor Pink;
    public static KnownColor Plum;
    public static KnownColor PowderBlue;
    public static KnownColor Purple;
    public static KnownColor Red;
    public static KnownColor RosyBrown;
    public static KnownColor RoyalBlue;
    public static KnownColor SaddleBrown;
    public static KnownColor Salmon;
    public static KnownColor SandyBrown;
    public static KnownColor ScrollBar;
    public static KnownColor SeaGreen;
    public static KnownColor SeaShell;
    public static KnownColor Sienna;
    public static KnownColor Silver;
    public static KnownColor SkyBlue;
    public static KnownColor SlateBlue;
    public static KnownColor SlateGray;
    public static KnownColor Snow;
    public static KnownColor SpringGreen;
    public static KnownColor SteelBlue;
    public static KnownColor Tan;
    public static KnownColor Teal;
    public static KnownColor Thistle;
    public static KnownColor Tomato;
    public static KnownColor Transparent;
    public static KnownColor Turquoise;
    public static KnownColor Violet;
    public static KnownColor Wheat;
    public static KnownColor White;
    public static KnownColor WhiteSmoke;
    public static KnownColor Window;
    public static KnownColor WindowFrame;
    public static KnownColor WindowText;
    public static KnownColor Yellow;
    public static KnownColor YellowGreen;
}
public class System.Drawing.Point : ValueType {
    public static Point Empty;
    [BrowsableAttribute("False")]
public bool IsEmpty { get; }
    public int X { get; public set; }
    public int Y { get; public set; }
    public Point(Size sz);
    public Point(int dw);
    public Point(int x, int y);
    public bool get_IsEmpty();
    public int get_X();
    public void set_X(int value);
    public int get_Y();
    public void set_Y(int value);
    public static Point Add(Point pt, Size sz);
    public static Point Ceiling(PointF value);
    public sealed virtual bool Equals(Point other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void Offset(Point p);
    public void Offset(int dx, int dy);
    public static Point op_Addition(Point pt, Size sz);
    public static bool op_Equality(Point left, Point right);
    public static Size op_Explicit(Point p);
    public static PointF op_Implicit(Point p);
    public static bool op_Inequality(Point left, Point right);
    public static Point op_Subtraction(Point pt, Size sz);
    public static Point Round(PointF value);
    public static Point Subtract(Point pt, Size sz);
    public virtual string ToString();
    public static Point Truncate(PointF value);
}
public class System.Drawing.PointF : ValueType {
    public static PointF Empty;
    [BrowsableAttribute("False")]
public bool IsEmpty { get; }
    public float X { get; public set; }
    public float Y { get; public set; }
    public PointF(float x, float y);
    public bool get_IsEmpty();
    public float get_X();
    public void set_X(float value);
    public float get_Y();
    public void set_Y(float value);
    public static PointF Add(PointF pt, Size sz);
    public static PointF Add(PointF pt, SizeF sz);
    public sealed virtual bool Equals(PointF other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static PointF op_Addition(PointF pt, Size sz);
    public static PointF op_Addition(PointF pt, SizeF sz);
    public static bool op_Equality(PointF left, PointF right);
    public static bool op_Inequality(PointF left, PointF right);
    public static PointF op_Subtraction(PointF pt, Size sz);
    public static PointF op_Subtraction(PointF pt, SizeF sz);
    public static PointF Subtract(PointF pt, Size sz);
    public static PointF Subtract(PointF pt, SizeF sz);
    public virtual string ToString();
}
public class System.Drawing.Rectangle : ValueType {
    public static Rectangle Empty;
    [BrowsableAttribute("False")]
public int Bottom { get; }
    public int Height { get; public set; }
    [BrowsableAttribute("False")]
public bool IsEmpty { get; }
    [BrowsableAttribute("False")]
public int Left { get; }
    [BrowsableAttribute("False")]
public Point Location { get; public set; }
    [BrowsableAttribute("False")]
public int Right { get; }
    [BrowsableAttribute("False")]
public Size Size { get; public set; }
    [BrowsableAttribute("False")]
public int Top { get; }
    public int Width { get; public set; }
    public int X { get; public set; }
    public int Y { get; public set; }
    public Rectangle(Point location, Size size);
    public Rectangle(int x, int y, int width, int height);
    public int get_Bottom();
    public int get_Height();
    public void set_Height(int value);
    public bool get_IsEmpty();
    public int get_Left();
    public Point get_Location();
    public void set_Location(Point value);
    public int get_Right();
    public Size get_Size();
    public void set_Size(Size value);
    public int get_Top();
    public int get_Width();
    public void set_Width(int value);
    public int get_X();
    public void set_X(int value);
    public int get_Y();
    public void set_Y(int value);
    public static Rectangle Ceiling(RectangleF value);
    public bool Contains(Point pt);
    public bool Contains(Rectangle rect);
    public bool Contains(int x, int y);
    public sealed virtual bool Equals(Rectangle other);
    public virtual bool Equals(object obj);
    public static Rectangle FromLTRB(int left, int top, int right, int bottom);
    public virtual int GetHashCode();
    public static Rectangle Inflate(Rectangle rect, int x, int y);
    public void Inflate(Size size);
    public void Inflate(int width, int height);
    public void Intersect(Rectangle rect);
    public static Rectangle Intersect(Rectangle a, Rectangle b);
    public bool IntersectsWith(Rectangle rect);
    public void Offset(Point pos);
    public void Offset(int x, int y);
    public static bool op_Equality(Rectangle left, Rectangle right);
    public static bool op_Inequality(Rectangle left, Rectangle right);
    public static Rectangle Round(RectangleF value);
    public virtual string ToString();
    public static Rectangle Truncate(RectangleF value);
    public static Rectangle Union(Rectangle a, Rectangle b);
}
public class System.Drawing.RectangleF : ValueType {
    public static RectangleF Empty;
    [BrowsableAttribute("False")]
public float Bottom { get; }
    public float Height { get; public set; }
    [BrowsableAttribute("False")]
public bool IsEmpty { get; }
    [BrowsableAttribute("False")]
public float Left { get; }
    [BrowsableAttribute("False")]
public PointF Location { get; public set; }
    [BrowsableAttribute("False")]
public float Right { get; }
    [BrowsableAttribute("False")]
public SizeF Size { get; public set; }
    [BrowsableAttribute("False")]
public float Top { get; }
    public float Width { get; public set; }
    public float X { get; public set; }
    public float Y { get; public set; }
    public RectangleF(PointF location, SizeF size);
    public RectangleF(float x, float y, float width, float height);
    public float get_Bottom();
    public float get_Height();
    public void set_Height(float value);
    public bool get_IsEmpty();
    public float get_Left();
    public PointF get_Location();
    public void set_Location(PointF value);
    public float get_Right();
    public SizeF get_Size();
    public void set_Size(SizeF value);
    public float get_Top();
    public float get_Width();
    public void set_Width(float value);
    public float get_X();
    public void set_X(float value);
    public float get_Y();
    public void set_Y(float value);
    public bool Contains(PointF pt);
    public bool Contains(RectangleF rect);
    public bool Contains(float x, float y);
    public sealed virtual bool Equals(RectangleF other);
    public virtual bool Equals(object obj);
    public static RectangleF FromLTRB(float left, float top, float right, float bottom);
    public virtual int GetHashCode();
    public static RectangleF Inflate(RectangleF rect, float x, float y);
    public void Inflate(SizeF size);
    public void Inflate(float x, float y);
    public void Intersect(RectangleF rect);
    public static RectangleF Intersect(RectangleF a, RectangleF b);
    public bool IntersectsWith(RectangleF rect);
    public void Offset(PointF pos);
    public void Offset(float x, float y);
    public static bool op_Equality(RectangleF left, RectangleF right);
    public static RectangleF op_Implicit(Rectangle r);
    public static bool op_Inequality(RectangleF left, RectangleF right);
    public virtual string ToString();
    public static RectangleF Union(RectangleF a, RectangleF b);
}
public class System.Drawing.Size : ValueType {
    public static Size Empty;
    public int Height { get; public set; }
    [BrowsableAttribute("False")]
public bool IsEmpty { get; }
    public int Width { get; public set; }
    public Size(Point pt);
    public Size(int width, int height);
    public int get_Height();
    public void set_Height(int value);
    public bool get_IsEmpty();
    public int get_Width();
    public void set_Width(int value);
    public static Size Add(Size sz1, Size sz2);
    public static Size Ceiling(SizeF value);
    public sealed virtual bool Equals(Size other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static Size op_Addition(Size sz1, Size sz2);
    public static Size op_Multiply(int left, Size right);
    public static Size op_Multiply(Size left, int right);
    public static SizeF op_Multiply(float left, Size right);
    public static SizeF op_Multiply(Size left, float right);
    public static Size op_Division(Size left, int right);
    public static SizeF op_Division(Size left, float right);
    public static bool op_Equality(Size sz1, Size sz2);
    public static Point op_Explicit(Size size);
    public static SizeF op_Implicit(Size p);
    public static bool op_Inequality(Size sz1, Size sz2);
    public static Size op_Subtraction(Size sz1, Size sz2);
    public static Size Round(SizeF value);
    public static Size Subtract(Size sz1, Size sz2);
    public virtual string ToString();
    public static Size Truncate(SizeF value);
}
public class System.Drawing.SizeF : ValueType {
    public static SizeF Empty;
    public float Height { get; public set; }
    [BrowsableAttribute("False")]
public bool IsEmpty { get; }
    public float Width { get; public set; }
    public SizeF(PointF pt);
    public SizeF(SizeF size);
    public SizeF(float width, float height);
    public float get_Height();
    public void set_Height(float value);
    public bool get_IsEmpty();
    public float get_Width();
    public void set_Width(float value);
    public static SizeF Add(SizeF sz1, SizeF sz2);
    public sealed virtual bool Equals(SizeF other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static SizeF op_Addition(SizeF sz1, SizeF sz2);
    public static bool op_Equality(SizeF sz1, SizeF sz2);
    public static PointF op_Explicit(SizeF size);
    public static bool op_Inequality(SizeF sz1, SizeF sz2);
    public static SizeF op_Subtraction(SizeF sz1, SizeF sz2);
    public static SizeF Subtract(SizeF sz1, SizeF sz2);
    public static SizeF op_Multiply(float left, SizeF right);
    public static SizeF op_Multiply(SizeF left, float right);
    public static SizeF op_Division(SizeF left, float right);
    public PointF ToPointF();
    public Size ToSize();
    public virtual string ToString();
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
