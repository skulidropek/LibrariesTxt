public interface System.IO.IsolatedStorage.INormalizeForIsolatedStorage {
    public abstract virtual object Normalize();
}
public abstract class System.IO.IsolatedStorage.IsolatedStorage : MarshalByRefObject {
    public object ApplicationIdentity { get; }
    public object AssemblyIdentity { get; }
    public long AvailableFreeSpace { get; }
    [CLSCompliantAttribute("False")]
[ObsoleteAttribute("IsolatedStorage.CurrentSize has been deprecated because it is not CLS Compliant.  To get the current size use IsolatedStorage.UsedSize")]
public ulong CurrentSize { get; }
    public object DomainIdentity { get; }
    [CLSCompliantAttribute("False")]
[ObsoleteAttribute("IsolatedStorage.MaximumSize has been deprecated because it is not CLS Compliant.  To get the maximum size use IsolatedStorage.Quota")]
public ulong MaximumSize { get; }
    public long Quota { get; }
    public IsolatedStorageScope Scope { get; }
    protected char SeparatorExternal { get; }
    protected char SeparatorInternal { get; }
    public long UsedSize { get; }
    public object get_ApplicationIdentity();
    public object get_AssemblyIdentity();
    public virtual long get_AvailableFreeSpace();
    public virtual ulong get_CurrentSize();
    public object get_DomainIdentity();
    public virtual ulong get_MaximumSize();
    public virtual long get_Quota();
    public IsolatedStorageScope get_Scope();
    protected virtual char get_SeparatorExternal();
    protected virtual char get_SeparatorInternal();
    public virtual long get_UsedSize();
    public virtual bool IncreaseQuotaTo(long newQuotaSize);
    protected void InitStore(IsolatedStorageScope scope, Type appEvidenceType);
    protected void InitStore(IsolatedStorageScope scope, Type domainEvidenceType, Type assemblyEvidenceType);
    public abstract virtual void Remove();
}
public class System.IO.IsolatedStorage.IsolatedStorageException : Exception {
    public IsolatedStorageException(string message);
    public IsolatedStorageException(string message, Exception inner);
    protected IsolatedStorageException(SerializationInfo info, StreamingContext context);
}
public class System.IO.IsolatedStorage.IsolatedStorageFile : IsolatedStorage {
    public long AvailableFreeSpace { get; }
    [CLSCompliantAttribute("False")]
[ObsoleteAttribute("IsolatedStorageFile.CurrentSize has been deprecated because it is not CLS Compliant.  To get the current size use IsolatedStorageFile.UsedSize")]
public ulong CurrentSize { get; }
    public static bool IsEnabled { get; }
    [CLSCompliantAttribute("False")]
[ObsoleteAttribute("IsolatedStorageFile.MaximumSize has been deprecated because it is not CLS Compliant.  To get the maximum size use IsolatedStorageFile.Quota")]
public ulong MaximumSize { get; }
    public long Quota { get; }
    public long UsedSize { get; }
    public virtual long get_AvailableFreeSpace();
    public virtual ulong get_CurrentSize();
    public static bool get_IsEnabled();
    public virtual ulong get_MaximumSize();
    public virtual long get_Quota();
    public virtual long get_UsedSize();
    public void Close();
    public void CopyFile(string sourceFileName, string destinationFileName);
    public void CopyFile(string sourceFileName, string destinationFileName, bool overwrite);
    public void CreateDirectory(string dir);
    public IsolatedStorageFileStream CreateFile(string path);
    public void DeleteDirectory(string dir);
    public void DeleteFile(string file);
    public bool DirectoryExists(string path);
    public sealed virtual void Dispose();
    public bool FileExists(string path);
    protected virtual override void Finalize();
    public DateTimeOffset GetCreationTime(string path);
    public String[] GetDirectoryNames();
    public String[] GetDirectoryNames(string searchPattern);
    public static IEnumerator GetEnumerator(IsolatedStorageScope scope);
    public String[] GetFileNames();
    public String[] GetFileNames(string searchPattern);
    public DateTimeOffset GetLastAccessTime(string path);
    public DateTimeOffset GetLastWriteTime(string path);
    public static IsolatedStorageFile GetMachineStoreForApplication();
    public static IsolatedStorageFile GetMachineStoreForAssembly();
    public static IsolatedStorageFile GetMachineStoreForDomain();
    public static IsolatedStorageFile GetStore(IsolatedStorageScope scope, object applicationIdentity);
    public static IsolatedStorageFile GetStore(IsolatedStorageScope scope, object domainIdentity, object assemblyIdentity);
    public static IsolatedStorageFile GetStore(IsolatedStorageScope scope, Type applicationEvidenceType);
    public static IsolatedStorageFile GetStore(IsolatedStorageScope scope, Type domainEvidenceType, Type assemblyEvidenceType);
    public static IsolatedStorageFile GetUserStoreForApplication();
    public static IsolatedStorageFile GetUserStoreForAssembly();
    public static IsolatedStorageFile GetUserStoreForDomain();
    public static IsolatedStorageFile GetUserStoreForSite();
    public virtual bool IncreaseQuotaTo(long newQuotaSize);
    public void MoveDirectory(string sourceDirectoryName, string destinationDirectoryName);
    public void MoveFile(string sourceFileName, string destinationFileName);
    public IsolatedStorageFileStream OpenFile(string path, FileMode mode);
    public IsolatedStorageFileStream OpenFile(string path, FileMode mode, FileAccess access);
    public IsolatedStorageFileStream OpenFile(string path, FileMode mode, FileAccess access, FileShare share);
    public virtual void Remove();
    public static void Remove(IsolatedStorageScope scope);
}
public class System.IO.IsolatedStorage.IsolatedStorageFileStream : FileStream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    [ObsoleteAttribute("This property has been deprecated.  Please use IsolatedStorageFileStream's SafeFileHandle property instead.  http://go.microsoft.com/fwlink/?linkid=14202")]
public IntPtr Handle { get; }
    public bool IsAsync { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public SafeFileHandle SafeFileHandle { get; }
    public IsolatedStorageFileStream(string path, FileMode mode);
    public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access);
    public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, FileShare share);
    public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize);
    public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, FileShare share, int bufferSize, IsolatedStorageFile isf);
    public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, FileShare share, IsolatedStorageFile isf);
    public IsolatedStorageFileStream(string path, FileMode mode, FileAccess access, IsolatedStorageFile isf);
    public IsolatedStorageFileStream(string path, FileMode mode, IsolatedStorageFile isf);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public virtual IntPtr get_Handle();
    public virtual bool get_IsAsync();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    public virtual SafeFileHandle get_SafeFileHandle();
    public virtual IAsyncResult BeginRead(Byte[] buffer, int offset, int numBytes, AsyncCallback userCallback, object stateObject);
    public virtual IAsyncResult BeginWrite(Byte[] buffer, int offset, int numBytes, AsyncCallback userCallback, object stateObject);
    protected virtual void Dispose(bool disposing);
    public virtual int EndRead(IAsyncResult asyncResult);
    public virtual void EndWrite(IAsyncResult asyncResult);
    public virtual void Flush();
    public virtual void Flush(bool flushToDisk);
    public virtual void Lock(long position, long length);
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Unlock(long position, long length);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual void WriteByte(byte value);
}
[FlagsAttribute]
public enum System.IO.IsolatedStorage.IsolatedStorageScope : Enum {
    public int value__;
    public static IsolatedStorageScope Application;
    public static IsolatedStorageScope Assembly;
    public static IsolatedStorageScope Domain;
    public static IsolatedStorageScope Machine;
    public static IsolatedStorageScope None;
    public static IsolatedStorageScope Roaming;
    public static IsolatedStorageScope User;
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
