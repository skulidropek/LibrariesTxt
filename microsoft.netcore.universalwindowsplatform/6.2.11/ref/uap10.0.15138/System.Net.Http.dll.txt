public class System.Net.Http.ByteArrayContent : HttpContent {
    public ByteArrayContent(Byte[] content);
    public ByteArrayContent(Byte[] content, int offset, int count);
    protected virtual Task`1<Stream> CreateContentReadStreamAsync();
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected internal virtual bool TryComputeLength(Int64& length);
}
public enum System.Net.Http.ClientCertificateOption : Enum {
    public int value__;
    public static ClientCertificateOption Automatic;
    public static ClientCertificateOption Manual;
}
public abstract class System.Net.Http.DelegatingHandler : HttpMessageHandler {
    public HttpMessageHandler InnerHandler { get; public set; }
    protected DelegatingHandler(HttpMessageHandler innerHandler);
    public HttpMessageHandler get_InnerHandler();
    public void set_InnerHandler(HttpMessageHandler value);
    protected virtual void Dispose(bool disposing);
    protected internal virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
public class System.Net.Http.FormUrlEncodedContent : ByteArrayContent {
    public FormUrlEncodedContent(IEnumerable`1<KeyValuePair`2<string, string>> nameValueCollection);
}
public class System.Net.Http.Headers.AuthenticationHeaderValue : object {
    public string Parameter { get; }
    public string Scheme { get; }
    public AuthenticationHeaderValue(string scheme);
    public AuthenticationHeaderValue(string scheme, string parameter);
    public string get_Parameter();
    public string get_Scheme();
    public virtual bool Equals(object obj);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual int GetHashCode();
    public static AuthenticationHeaderValue Parse(string input);
    public virtual string ToString();
    public static bool TryParse(string input, AuthenticationHeaderValue& parsedValue);
}
public class System.Net.Http.Headers.CacheControlHeaderValue : object {
    public ICollection`1<NameValueHeaderValue> Extensions { get; }
    public Nullable`1<TimeSpan> MaxAge { get; public set; }
    public bool MaxStale { get; public set; }
    public Nullable`1<TimeSpan> MaxStaleLimit { get; public set; }
    public Nullable`1<TimeSpan> MinFresh { get; public set; }
    public bool MustRevalidate { get; public set; }
    public bool NoCache { get; public set; }
    public ICollection`1<string> NoCacheHeaders { get; }
    public bool NoStore { get; public set; }
    public bool NoTransform { get; public set; }
    public bool OnlyIfCached { get; public set; }
    public bool Private { get; public set; }
    public ICollection`1<string> PrivateHeaders { get; }
    public bool ProxyRevalidate { get; public set; }
    public bool Public { get; public set; }
    public Nullable`1<TimeSpan> SharedMaxAge { get; public set; }
    public ICollection`1<NameValueHeaderValue> get_Extensions();
    public Nullable`1<TimeSpan> get_MaxAge();
    public void set_MaxAge(Nullable`1<TimeSpan> value);
    public bool get_MaxStale();
    public void set_MaxStale(bool value);
    public Nullable`1<TimeSpan> get_MaxStaleLimit();
    public void set_MaxStaleLimit(Nullable`1<TimeSpan> value);
    public Nullable`1<TimeSpan> get_MinFresh();
    public void set_MinFresh(Nullable`1<TimeSpan> value);
    public bool get_MustRevalidate();
    public void set_MustRevalidate(bool value);
    public bool get_NoCache();
    public void set_NoCache(bool value);
    public ICollection`1<string> get_NoCacheHeaders();
    public bool get_NoStore();
    public void set_NoStore(bool value);
    public bool get_NoTransform();
    public void set_NoTransform(bool value);
    public bool get_OnlyIfCached();
    public void set_OnlyIfCached(bool value);
    public bool get_Private();
    public void set_Private(bool value);
    public ICollection`1<string> get_PrivateHeaders();
    public bool get_ProxyRevalidate();
    public void set_ProxyRevalidate(bool value);
    public bool get_Public();
    public void set_Public(bool value);
    public Nullable`1<TimeSpan> get_SharedMaxAge();
    public void set_SharedMaxAge(Nullable`1<TimeSpan> value);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static CacheControlHeaderValue Parse(string input);
    public virtual string ToString();
    public static bool TryParse(string input, CacheControlHeaderValue& parsedValue);
}
public class System.Net.Http.Headers.ContentDispositionHeaderValue : object {
    public Nullable`1<DateTimeOffset> CreationDate { get; public set; }
    public string DispositionType { get; public set; }
    public string FileName { get; public set; }
    public string FileNameStar { get; public set; }
    public Nullable`1<DateTimeOffset> ModificationDate { get; public set; }
    public string Name { get; public set; }
    public ICollection`1<NameValueHeaderValue> Parameters { get; }
    public Nullable`1<DateTimeOffset> ReadDate { get; public set; }
    public Nullable`1<long> Size { get; public set; }
    protected ContentDispositionHeaderValue(ContentDispositionHeaderValue source);
    public ContentDispositionHeaderValue(string dispositionType);
    public Nullable`1<DateTimeOffset> get_CreationDate();
    public void set_CreationDate(Nullable`1<DateTimeOffset> value);
    public string get_DispositionType();
    public void set_DispositionType(string value);
    public string get_FileName();
    public void set_FileName(string value);
    public string get_FileNameStar();
    public void set_FileNameStar(string value);
    public Nullable`1<DateTimeOffset> get_ModificationDate();
    public void set_ModificationDate(Nullable`1<DateTimeOffset> value);
    public string get_Name();
    public void set_Name(string value);
    public ICollection`1<NameValueHeaderValue> get_Parameters();
    public Nullable`1<DateTimeOffset> get_ReadDate();
    public void set_ReadDate(Nullable`1<DateTimeOffset> value);
    public Nullable`1<long> get_Size();
    public void set_Size(Nullable`1<long> value);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static ContentDispositionHeaderValue Parse(string input);
    public virtual string ToString();
    public static bool TryParse(string input, ContentDispositionHeaderValue& parsedValue);
}
public class System.Net.Http.Headers.ContentRangeHeaderValue : object {
    public Nullable`1<long> From { get; }
    public bool HasLength { get; }
    public bool HasRange { get; }
    public Nullable`1<long> Length { get; }
    public Nullable`1<long> To { get; }
    public string Unit { get; public set; }
    public ContentRangeHeaderValue(long length);
    public ContentRangeHeaderValue(long from, long to);
    public ContentRangeHeaderValue(long from, long to, long length);
    public Nullable`1<long> get_From();
    public bool get_HasLength();
    public bool get_HasRange();
    public Nullable`1<long> get_Length();
    public Nullable`1<long> get_To();
    public string get_Unit();
    public void set_Unit(string value);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static ContentRangeHeaderValue Parse(string input);
    public virtual string ToString();
    public static bool TryParse(string input, ContentRangeHeaderValue& parsedValue);
}
public class System.Net.Http.Headers.EntityTagHeaderValue : object {
    public static EntityTagHeaderValue Any { get; }
    public bool IsWeak { get; }
    public string Tag { get; }
    public EntityTagHeaderValue(string tag);
    public EntityTagHeaderValue(string tag, bool isWeak);
    public static EntityTagHeaderValue get_Any();
    public bool get_IsWeak();
    public string get_Tag();
    private sealed virtual override object System.ICloneable.Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static EntityTagHeaderValue Parse(string input);
    public virtual string ToString();
    public static bool TryParse(string input, EntityTagHeaderValue& parsedValue);
}
public class System.Net.Http.Headers.HttpContentHeaders : HttpHeaders {
    public ICollection`1<string> Allow { get; }
    public ContentDispositionHeaderValue ContentDisposition { get; public set; }
    public ICollection`1<string> ContentEncoding { get; }
    public ICollection`1<string> ContentLanguage { get; }
    public Nullable`1<long> ContentLength { get; public set; }
    public Uri ContentLocation { get; public set; }
    public Byte[] ContentMD5 { get; public set; }
    public ContentRangeHeaderValue ContentRange { get; public set; }
    public MediaTypeHeaderValue ContentType { get; public set; }
    public Nullable`1<DateTimeOffset> Expires { get; public set; }
    public Nullable`1<DateTimeOffset> LastModified { get; public set; }
    public ICollection`1<string> get_Allow();
    public ContentDispositionHeaderValue get_ContentDisposition();
    public void set_ContentDisposition(ContentDispositionHeaderValue value);
    public ICollection`1<string> get_ContentEncoding();
    public ICollection`1<string> get_ContentLanguage();
    public Nullable`1<long> get_ContentLength();
    public void set_ContentLength(Nullable`1<long> value);
    public Uri get_ContentLocation();
    public void set_ContentLocation(Uri value);
    public Byte[] get_ContentMD5();
    public void set_ContentMD5(Byte[] value);
    public ContentRangeHeaderValue get_ContentRange();
    public void set_ContentRange(ContentRangeHeaderValue value);
    public MediaTypeHeaderValue get_ContentType();
    public void set_ContentType(MediaTypeHeaderValue value);
    public Nullable`1<DateTimeOffset> get_Expires();
    public void set_Expires(Nullable`1<DateTimeOffset> value);
    public Nullable`1<DateTimeOffset> get_LastModified();
    public void set_LastModified(Nullable`1<DateTimeOffset> value);
}
public abstract class System.Net.Http.Headers.HttpHeaders : object {
    public void Add(string name, IEnumerable`1<string> values);
    public void Add(string name, string value);
    public void Clear();
    public bool Contains(string name);
    public sealed virtual IEnumerator`1<KeyValuePair`2<string, IEnumerable`1<string>>> GetEnumerator();
    public IEnumerable`1<string> GetValues(string name);
    public bool Remove(string name);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
    public bool TryAddWithoutValidation(string name, IEnumerable`1<string> values);
    public bool TryAddWithoutValidation(string name, string value);
    public bool TryGetValues(string name, IEnumerable`1& values);
}
public class System.Net.Http.Headers.HttpHeaderValueCollection`1 : object {
    public int Count { get; }
    public bool IsReadOnly { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(T item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(T item);
    public sealed virtual void CopyTo(T[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<T> GetEnumerator();
    public void ParseAdd(string input);
    public sealed virtual bool Remove(T item);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual string ToString();
    public bool TryParseAdd(string input);
}
public class System.Net.Http.Headers.HttpRequestHeaders : HttpHeaders {
    public HttpHeaderValueCollection`1<MediaTypeWithQualityHeaderValue> Accept { get; }
    public HttpHeaderValueCollection`1<StringWithQualityHeaderValue> AcceptCharset { get; }
    public HttpHeaderValueCollection`1<StringWithQualityHeaderValue> AcceptEncoding { get; }
    public HttpHeaderValueCollection`1<StringWithQualityHeaderValue> AcceptLanguage { get; }
    public AuthenticationHeaderValue Authorization { get; public set; }
    public CacheControlHeaderValue CacheControl { get; public set; }
    public HttpHeaderValueCollection`1<string> Connection { get; }
    public Nullable`1<bool> ConnectionClose { get; public set; }
    public Nullable`1<DateTimeOffset> Date { get; public set; }
    public HttpHeaderValueCollection`1<NameValueWithParametersHeaderValue> Expect { get; }
    public Nullable`1<bool> ExpectContinue { get; public set; }
    public string From { get; public set; }
    public string Host { get; public set; }
    public HttpHeaderValueCollection`1<EntityTagHeaderValue> IfMatch { get; }
    public Nullable`1<DateTimeOffset> IfModifiedSince { get; public set; }
    public HttpHeaderValueCollection`1<EntityTagHeaderValue> IfNoneMatch { get; }
    public RangeConditionHeaderValue IfRange { get; public set; }
    public Nullable`1<DateTimeOffset> IfUnmodifiedSince { get; public set; }
    public Nullable`1<int> MaxForwards { get; public set; }
    public HttpHeaderValueCollection`1<NameValueHeaderValue> Pragma { get; }
    public AuthenticationHeaderValue ProxyAuthorization { get; public set; }
    public RangeHeaderValue Range { get; public set; }
    public Uri Referrer { get; public set; }
    public HttpHeaderValueCollection`1<TransferCodingWithQualityHeaderValue> TE { get; }
    public HttpHeaderValueCollection`1<string> Trailer { get; }
    public HttpHeaderValueCollection`1<TransferCodingHeaderValue> TransferEncoding { get; }
    public Nullable`1<bool> TransferEncodingChunked { get; public set; }
    public HttpHeaderValueCollection`1<ProductHeaderValue> Upgrade { get; }
    public HttpHeaderValueCollection`1<ProductInfoHeaderValue> UserAgent { get; }
    public HttpHeaderValueCollection`1<ViaHeaderValue> Via { get; }
    public HttpHeaderValueCollection`1<WarningHeaderValue> Warning { get; }
    public HttpHeaderValueCollection`1<MediaTypeWithQualityHeaderValue> get_Accept();
    public HttpHeaderValueCollection`1<StringWithQualityHeaderValue> get_AcceptCharset();
    public HttpHeaderValueCollection`1<StringWithQualityHeaderValue> get_AcceptEncoding();
    public HttpHeaderValueCollection`1<StringWithQualityHeaderValue> get_AcceptLanguage();
    public AuthenticationHeaderValue get_Authorization();
    public void set_Authorization(AuthenticationHeaderValue value);
    public CacheControlHeaderValue get_CacheControl();
    public void set_CacheControl(CacheControlHeaderValue value);
    public HttpHeaderValueCollection`1<string> get_Connection();
    public Nullable`1<bool> get_ConnectionClose();
    public void set_ConnectionClose(Nullable`1<bool> value);
    public Nullable`1<DateTimeOffset> get_Date();
    public void set_Date(Nullable`1<DateTimeOffset> value);
    public HttpHeaderValueCollection`1<NameValueWithParametersHeaderValue> get_Expect();
    public Nullable`1<bool> get_ExpectContinue();
    public void set_ExpectContinue(Nullable`1<bool> value);
    public string get_From();
    public void set_From(string value);
    public string get_Host();
    public void set_Host(string value);
    public HttpHeaderValueCollection`1<EntityTagHeaderValue> get_IfMatch();
    public Nullable`1<DateTimeOffset> get_IfModifiedSince();
    public void set_IfModifiedSince(Nullable`1<DateTimeOffset> value);
    public HttpHeaderValueCollection`1<EntityTagHeaderValue> get_IfNoneMatch();
    public RangeConditionHeaderValue get_IfRange();
    public void set_IfRange(RangeConditionHeaderValue value);
    public Nullable`1<DateTimeOffset> get_IfUnmodifiedSince();
    public void set_IfUnmodifiedSince(Nullable`1<DateTimeOffset> value);
    public Nullable`1<int> get_MaxForwards();
    public void set_MaxForwards(Nullable`1<int> value);
    public HttpHeaderValueCollection`1<NameValueHeaderValue> get_Pragma();
    public AuthenticationHeaderValue get_ProxyAuthorization();
    public void set_ProxyAuthorization(AuthenticationHeaderValue value);
    public RangeHeaderValue get_Range();
    public void set_Range(RangeHeaderValue value);
    public Uri get_Referrer();
    public void set_Referrer(Uri value);
    public HttpHeaderValueCollection`1<TransferCodingWithQualityHeaderValue> get_TE();
    public HttpHeaderValueCollection`1<string> get_Trailer();
    public HttpHeaderValueCollection`1<TransferCodingHeaderValue> get_TransferEncoding();
    public Nullable`1<bool> get_TransferEncodingChunked();
    public void set_TransferEncodingChunked(Nullable`1<bool> value);
    public HttpHeaderValueCollection`1<ProductHeaderValue> get_Upgrade();
    public HttpHeaderValueCollection`1<ProductInfoHeaderValue> get_UserAgent();
    public HttpHeaderValueCollection`1<ViaHeaderValue> get_Via();
    public HttpHeaderValueCollection`1<WarningHeaderValue> get_Warning();
}
public class System.Net.Http.Headers.HttpResponseHeaders : HttpHeaders {
    public HttpHeaderValueCollection`1<string> AcceptRanges { get; }
    public Nullable`1<TimeSpan> Age { get; public set; }
    public CacheControlHeaderValue CacheControl { get; public set; }
    public HttpHeaderValueCollection`1<string> Connection { get; }
    public Nullable`1<bool> ConnectionClose { get; public set; }
    public Nullable`1<DateTimeOffset> Date { get; public set; }
    public EntityTagHeaderValue ETag { get; public set; }
    public Uri Location { get; public set; }
    public HttpHeaderValueCollection`1<NameValueHeaderValue> Pragma { get; }
    public HttpHeaderValueCollection`1<AuthenticationHeaderValue> ProxyAuthenticate { get; }
    public RetryConditionHeaderValue RetryAfter { get; public set; }
    public HttpHeaderValueCollection`1<ProductInfoHeaderValue> Server { get; }
    public HttpHeaderValueCollection`1<string> Trailer { get; }
    public HttpHeaderValueCollection`1<TransferCodingHeaderValue> TransferEncoding { get; }
    public Nullable`1<bool> TransferEncodingChunked { get; public set; }
    public HttpHeaderValueCollection`1<ProductHeaderValue> Upgrade { get; }
    public HttpHeaderValueCollection`1<string> Vary { get; }
    public HttpHeaderValueCollection`1<ViaHeaderValue> Via { get; }
    public HttpHeaderValueCollection`1<WarningHeaderValue> Warning { get; }
    public HttpHeaderValueCollection`1<AuthenticationHeaderValue> WwwAuthenticate { get; }
    public HttpHeaderValueCollection`1<string> get_AcceptRanges();
    public Nullable`1<TimeSpan> get_Age();
    public void set_Age(Nullable`1<TimeSpan> value);
    public CacheControlHeaderValue get_CacheControl();
    public void set_CacheControl(CacheControlHeaderValue value);
    public HttpHeaderValueCollection`1<string> get_Connection();
    public Nullable`1<bool> get_ConnectionClose();
    public void set_ConnectionClose(Nullable`1<bool> value);
    public Nullable`1<DateTimeOffset> get_Date();
    public void set_Date(Nullable`1<DateTimeOffset> value);
    public EntityTagHeaderValue get_ETag();
    public void set_ETag(EntityTagHeaderValue value);
    public Uri get_Location();
    public void set_Location(Uri value);
    public HttpHeaderValueCollection`1<NameValueHeaderValue> get_Pragma();
    public HttpHeaderValueCollection`1<AuthenticationHeaderValue> get_ProxyAuthenticate();
    public RetryConditionHeaderValue get_RetryAfter();
    public void set_RetryAfter(RetryConditionHeaderValue value);
    public HttpHeaderValueCollection`1<ProductInfoHeaderValue> get_Server();
    public HttpHeaderValueCollection`1<string> get_Trailer();
    public HttpHeaderValueCollection`1<TransferCodingHeaderValue> get_TransferEncoding();
    public Nullable`1<bool> get_TransferEncodingChunked();
    public void set_TransferEncodingChunked(Nullable`1<bool> value);
    public HttpHeaderValueCollection`1<ProductHeaderValue> get_Upgrade();
    public HttpHeaderValueCollection`1<string> get_Vary();
    public HttpHeaderValueCollection`1<ViaHeaderValue> get_Via();
    public HttpHeaderValueCollection`1<WarningHeaderValue> get_Warning();
    public HttpHeaderValueCollection`1<AuthenticationHeaderValue> get_WwwAuthenticate();
}
public class System.Net.Http.Headers.MediaTypeHeaderValue : object {
    public string CharSet { get; public set; }
    public string MediaType { get; public set; }
    public ICollection`1<NameValueHeaderValue> Parameters { get; }
    protected MediaTypeHeaderValue(MediaTypeHeaderValue source);
    public MediaTypeHeaderValue(string mediaType);
    public string get_CharSet();
    public void set_CharSet(string value);
    public string get_MediaType();
    public void set_MediaType(string value);
    public ICollection`1<NameValueHeaderValue> get_Parameters();
    private sealed virtual override object System.ICloneable.Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static MediaTypeHeaderValue Parse(string input);
    public virtual string ToString();
    public static bool TryParse(string input, MediaTypeHeaderValue& parsedValue);
}
public class System.Net.Http.Headers.MediaTypeWithQualityHeaderValue : MediaTypeHeaderValue {
    public Nullable`1<double> Quality { get; public set; }
    public MediaTypeWithQualityHeaderValue(string mediaType);
    public MediaTypeWithQualityHeaderValue(string mediaType, double quality);
    public Nullable`1<double> get_Quality();
    public void set_Quality(Nullable`1<double> value);
    private sealed virtual override object System.ICloneable.Clone();
    public static MediaTypeWithQualityHeaderValue Parse(string input);
    public static bool TryParse(string input, MediaTypeWithQualityHeaderValue& parsedValue);
}
public class System.Net.Http.Headers.NameValueHeaderValue : object {
    public string Name { get; }
    public string Value { get; public set; }
    protected NameValueHeaderValue(NameValueHeaderValue source);
    public NameValueHeaderValue(string name);
    public NameValueHeaderValue(string name, string value);
    public string get_Name();
    public string get_Value();
    public void set_Value(string value);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static NameValueHeaderValue Parse(string input);
    public virtual string ToString();
    public static bool TryParse(string input, NameValueHeaderValue& parsedValue);
}
public class System.Net.Http.Headers.NameValueWithParametersHeaderValue : NameValueHeaderValue {
    public ICollection`1<NameValueHeaderValue> Parameters { get; }
    protected NameValueWithParametersHeaderValue(NameValueWithParametersHeaderValue source);
    public NameValueWithParametersHeaderValue(string name);
    public NameValueWithParametersHeaderValue(string name, string value);
    public ICollection`1<NameValueHeaderValue> get_Parameters();
    private sealed virtual override object System.ICloneable.Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static NameValueWithParametersHeaderValue Parse(string input);
    public virtual string ToString();
    public static bool TryParse(string input, NameValueWithParametersHeaderValue& parsedValue);
}
public class System.Net.Http.Headers.ProductHeaderValue : object {
    public string Name { get; }
    public string Version { get; }
    public ProductHeaderValue(string name);
    public ProductHeaderValue(string name, string version);
    public string get_Name();
    public string get_Version();
    private sealed virtual override object System.ICloneable.Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static ProductHeaderValue Parse(string input);
    public virtual string ToString();
    public static bool TryParse(string input, ProductHeaderValue& parsedValue);
}
public class System.Net.Http.Headers.ProductInfoHeaderValue : object {
    public string Comment { get; }
    public ProductHeaderValue Product { get; }
    public ProductInfoHeaderValue(ProductHeaderValue product);
    public ProductInfoHeaderValue(string comment);
    public ProductInfoHeaderValue(string productName, string productVersion);
    public string get_Comment();
    public ProductHeaderValue get_Product();
    private sealed virtual override object System.ICloneable.Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static ProductInfoHeaderValue Parse(string input);
    public virtual string ToString();
    public static bool TryParse(string input, ProductInfoHeaderValue& parsedValue);
}
public class System.Net.Http.Headers.RangeConditionHeaderValue : object {
    public Nullable`1<DateTimeOffset> Date { get; }
    public EntityTagHeaderValue EntityTag { get; }
    public RangeConditionHeaderValue(DateTimeOffset date);
    public RangeConditionHeaderValue(EntityTagHeaderValue entityTag);
    public RangeConditionHeaderValue(string entityTag);
    public Nullable`1<DateTimeOffset> get_Date();
    public EntityTagHeaderValue get_EntityTag();
    private sealed virtual override object System.ICloneable.Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static RangeConditionHeaderValue Parse(string input);
    public virtual string ToString();
    public static bool TryParse(string input, RangeConditionHeaderValue& parsedValue);
}
public class System.Net.Http.Headers.RangeHeaderValue : object {
    public ICollection`1<RangeItemHeaderValue> Ranges { get; }
    public string Unit { get; public set; }
    public RangeHeaderValue(Nullable`1<long> from, Nullable`1<long> to);
    public ICollection`1<RangeItemHeaderValue> get_Ranges();
    public string get_Unit();
    public void set_Unit(string value);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static RangeHeaderValue Parse(string input);
    public virtual string ToString();
    public static bool TryParse(string input, RangeHeaderValue& parsedValue);
}
public class System.Net.Http.Headers.RangeItemHeaderValue : object {
    public Nullable`1<long> From { get; }
    public Nullable`1<long> To { get; }
    public RangeItemHeaderValue(Nullable`1<long> from, Nullable`1<long> to);
    public Nullable`1<long> get_From();
    public Nullable`1<long> get_To();
    private sealed virtual override object System.ICloneable.Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public virtual string ToString();
}
public class System.Net.Http.Headers.RetryConditionHeaderValue : object {
    public Nullable`1<DateTimeOffset> Date { get; }
    public Nullable`1<TimeSpan> Delta { get; }
    public RetryConditionHeaderValue(DateTimeOffset date);
    public RetryConditionHeaderValue(TimeSpan delta);
    public Nullable`1<DateTimeOffset> get_Date();
    public Nullable`1<TimeSpan> get_Delta();
    private sealed virtual override object System.ICloneable.Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static RetryConditionHeaderValue Parse(string input);
    public virtual string ToString();
    public static bool TryParse(string input, RetryConditionHeaderValue& parsedValue);
}
public class System.Net.Http.Headers.StringWithQualityHeaderValue : object {
    public Nullable`1<double> Quality { get; }
    public string Value { get; }
    public StringWithQualityHeaderValue(string value);
    public StringWithQualityHeaderValue(string value, double quality);
    public Nullable`1<double> get_Quality();
    public string get_Value();
    private sealed virtual override object System.ICloneable.Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static StringWithQualityHeaderValue Parse(string input);
    public virtual string ToString();
    public static bool TryParse(string input, StringWithQualityHeaderValue& parsedValue);
}
public class System.Net.Http.Headers.TransferCodingHeaderValue : object {
    public ICollection`1<NameValueHeaderValue> Parameters { get; }
    public string Value { get; }
    protected TransferCodingHeaderValue(TransferCodingHeaderValue source);
    public TransferCodingHeaderValue(string value);
    public ICollection`1<NameValueHeaderValue> get_Parameters();
    public string get_Value();
    private sealed virtual override object System.ICloneable.Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static TransferCodingHeaderValue Parse(string input);
    public virtual string ToString();
    public static bool TryParse(string input, TransferCodingHeaderValue& parsedValue);
}
public class System.Net.Http.Headers.TransferCodingWithQualityHeaderValue : TransferCodingHeaderValue {
    public Nullable`1<double> Quality { get; public set; }
    public TransferCodingWithQualityHeaderValue(string value);
    public TransferCodingWithQualityHeaderValue(string value, double quality);
    public Nullable`1<double> get_Quality();
    public void set_Quality(Nullable`1<double> value);
    private sealed virtual override object System.ICloneable.Clone();
    public static TransferCodingWithQualityHeaderValue Parse(string input);
    public static bool TryParse(string input, TransferCodingWithQualityHeaderValue& parsedValue);
}
public class System.Net.Http.Headers.ViaHeaderValue : object {
    public string Comment { get; }
    public string ProtocolName { get; }
    public string ProtocolVersion { get; }
    public string ReceivedBy { get; }
    public ViaHeaderValue(string protocolVersion, string receivedBy);
    public ViaHeaderValue(string protocolVersion, string receivedBy, string protocolName);
    public ViaHeaderValue(string protocolVersion, string receivedBy, string protocolName, string comment);
    public string get_Comment();
    public string get_ProtocolName();
    public string get_ProtocolVersion();
    public string get_ReceivedBy();
    private sealed virtual override object System.ICloneable.Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static ViaHeaderValue Parse(string input);
    public virtual string ToString();
    public static bool TryParse(string input, ViaHeaderValue& parsedValue);
}
public class System.Net.Http.Headers.WarningHeaderValue : object {
    public string Agent { get; }
    public int Code { get; }
    public Nullable`1<DateTimeOffset> Date { get; }
    public string Text { get; }
    public WarningHeaderValue(int code, string agent, string text);
    public WarningHeaderValue(int code, string agent, string text, DateTimeOffset date);
    public string get_Agent();
    public int get_Code();
    public Nullable`1<DateTimeOffset> get_Date();
    public string get_Text();
    private sealed virtual override object System.ICloneable.Clone();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static WarningHeaderValue Parse(string input);
    public virtual string ToString();
    public static bool TryParse(string input, WarningHeaderValue& parsedValue);
}
public class System.Net.Http.HttpClient : HttpMessageInvoker {
    public Uri BaseAddress { get; public set; }
    public HttpRequestHeaders DefaultRequestHeaders { get; }
    public long MaxResponseContentBufferSize { get; public set; }
    public TimeSpan Timeout { get; public set; }
    public HttpClient(HttpMessageHandler handler);
    public HttpClient(HttpMessageHandler handler, bool disposeHandler);
    public Uri get_BaseAddress();
    public void set_BaseAddress(Uri value);
    public HttpRequestHeaders get_DefaultRequestHeaders();
    public long get_MaxResponseContentBufferSize();
    public void set_MaxResponseContentBufferSize(long value);
    public TimeSpan get_Timeout();
    public void set_Timeout(TimeSpan value);
    public void CancelPendingRequests();
    public Task`1<HttpResponseMessage> DeleteAsync(string requestUri);
    public Task`1<HttpResponseMessage> DeleteAsync(string requestUri, CancellationToken cancellationToken);
    public Task`1<HttpResponseMessage> DeleteAsync(Uri requestUri);
    public Task`1<HttpResponseMessage> DeleteAsync(Uri requestUri, CancellationToken cancellationToken);
    protected virtual void Dispose(bool disposing);
    public Task`1<HttpResponseMessage> GetAsync(string requestUri);
    public Task`1<HttpResponseMessage> GetAsync(string requestUri, HttpCompletionOption completionOption);
    public Task`1<HttpResponseMessage> GetAsync(string requestUri, HttpCompletionOption completionOption, CancellationToken cancellationToken);
    public Task`1<HttpResponseMessage> GetAsync(string requestUri, CancellationToken cancellationToken);
    public Task`1<HttpResponseMessage> GetAsync(Uri requestUri);
    public Task`1<HttpResponseMessage> GetAsync(Uri requestUri, HttpCompletionOption completionOption);
    public Task`1<HttpResponseMessage> GetAsync(Uri requestUri, HttpCompletionOption completionOption, CancellationToken cancellationToken);
    public Task`1<HttpResponseMessage> GetAsync(Uri requestUri, CancellationToken cancellationToken);
    public Task`1<Byte[]> GetByteArrayAsync(string requestUri);
    public Task`1<Byte[]> GetByteArrayAsync(Uri requestUri);
    public Task`1<Stream> GetStreamAsync(string requestUri);
    public Task`1<Stream> GetStreamAsync(Uri requestUri);
    public Task`1<string> GetStringAsync(string requestUri);
    public Task`1<string> GetStringAsync(Uri requestUri);
    public Task`1<HttpResponseMessage> PostAsync(string requestUri, HttpContent content);
    public Task`1<HttpResponseMessage> PostAsync(string requestUri, HttpContent content, CancellationToken cancellationToken);
    public Task`1<HttpResponseMessage> PostAsync(Uri requestUri, HttpContent content);
    public Task`1<HttpResponseMessage> PostAsync(Uri requestUri, HttpContent content, CancellationToken cancellationToken);
    public Task`1<HttpResponseMessage> PutAsync(string requestUri, HttpContent content);
    public Task`1<HttpResponseMessage> PutAsync(string requestUri, HttpContent content, CancellationToken cancellationToken);
    public Task`1<HttpResponseMessage> PutAsync(Uri requestUri, HttpContent content);
    public Task`1<HttpResponseMessage> PutAsync(Uri requestUri, HttpContent content, CancellationToken cancellationToken);
    public Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request);
    public Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, HttpCompletionOption completionOption);
    public Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationToken cancellationToken);
    public virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
public class System.Net.Http.HttpClientHandler : HttpMessageHandler {
    public bool AllowAutoRedirect { get; public set; }
    public DecompressionMethods AutomaticDecompression { get; public set; }
    public bool CheckCertificateRevocationList { get; public set; }
    public ClientCertificateOption ClientCertificateOptions { get; public set; }
    public X509CertificateCollection ClientCertificates { get; }
    public CookieContainer CookieContainer { get; public set; }
    public ICredentials Credentials { get; public set; }
    public static Func`5<HttpRequestMessage, X509Certificate2, X509Chain, SslPolicyErrors, bool> DangerousAcceptAnyServerCertificateValidator { get; }
    public ICredentials DefaultProxyCredentials { get; public set; }
    public int MaxAutomaticRedirections { get; public set; }
    public int MaxConnectionsPerServer { get; public set; }
    public long MaxRequestContentBufferSize { get; public set; }
    public int MaxResponseHeadersLength { get; public set; }
    public bool PreAuthenticate { get; public set; }
    public IDictionary`2<string, object> Properties { get; }
    public IWebProxy Proxy { get; public set; }
    public Func`5<HttpRequestMessage, X509Certificate2, X509Chain, SslPolicyErrors, bool> ServerCertificateCustomValidationCallback { get; public set; }
    public SslProtocols SslProtocols { get; public set; }
    public bool SupportsAutomaticDecompression { get; }
    public bool SupportsProxy { get; }
    public bool SupportsRedirectConfiguration { get; }
    public bool UseCookies { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    public bool UseProxy { get; public set; }
    public bool get_AllowAutoRedirect();
    public void set_AllowAutoRedirect(bool value);
    public DecompressionMethods get_AutomaticDecompression();
    public void set_AutomaticDecompression(DecompressionMethods value);
    public bool get_CheckCertificateRevocationList();
    public void set_CheckCertificateRevocationList(bool value);
    public ClientCertificateOption get_ClientCertificateOptions();
    public void set_ClientCertificateOptions(ClientCertificateOption value);
    public X509CertificateCollection get_ClientCertificates();
    public CookieContainer get_CookieContainer();
    public void set_CookieContainer(CookieContainer value);
    public ICredentials get_Credentials();
    public void set_Credentials(ICredentials value);
    public static Func`5<HttpRequestMessage, X509Certificate2, X509Chain, SslPolicyErrors, bool> get_DangerousAcceptAnyServerCertificateValidator();
    public ICredentials get_DefaultProxyCredentials();
    public void set_DefaultProxyCredentials(ICredentials value);
    public int get_MaxAutomaticRedirections();
    public void set_MaxAutomaticRedirections(int value);
    public int get_MaxConnectionsPerServer();
    public void set_MaxConnectionsPerServer(int value);
    public long get_MaxRequestContentBufferSize();
    public void set_MaxRequestContentBufferSize(long value);
    public int get_MaxResponseHeadersLength();
    public void set_MaxResponseHeadersLength(int value);
    public bool get_PreAuthenticate();
    public void set_PreAuthenticate(bool value);
    public IDictionary`2<string, object> get_Properties();
    public IWebProxy get_Proxy();
    public void set_Proxy(IWebProxy value);
    public Func`5<HttpRequestMessage, X509Certificate2, X509Chain, SslPolicyErrors, bool> get_ServerCertificateCustomValidationCallback();
    public void set_ServerCertificateCustomValidationCallback(Func`5<HttpRequestMessage, X509Certificate2, X509Chain, SslPolicyErrors, bool> value);
    public SslProtocols get_SslProtocols();
    public void set_SslProtocols(SslProtocols value);
    public virtual bool get_SupportsAutomaticDecompression();
    public virtual bool get_SupportsProxy();
    public virtual bool get_SupportsRedirectConfiguration();
    public bool get_UseCookies();
    public void set_UseCookies(bool value);
    public bool get_UseDefaultCredentials();
    public void set_UseDefaultCredentials(bool value);
    public bool get_UseProxy();
    public void set_UseProxy(bool value);
    protected virtual void Dispose(bool disposing);
    protected internal virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
public enum System.Net.Http.HttpCompletionOption : Enum {
    public int value__;
    public static HttpCompletionOption ResponseContentRead;
    public static HttpCompletionOption ResponseHeadersRead;
}
public abstract class System.Net.Http.HttpContent : object {
    public HttpContentHeaders Headers { get; }
    public HttpContentHeaders get_Headers();
    public Task CopyToAsync(Stream stream);
    public Task CopyToAsync(Stream stream, TransportContext context);
    protected virtual Task`1<Stream> CreateContentReadStreamAsync();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public Task LoadIntoBufferAsync();
    public Task LoadIntoBufferAsync(long maxBufferSize);
    public Task`1<Byte[]> ReadAsByteArrayAsync();
    public Task`1<Stream> ReadAsStreamAsync();
    public Task`1<string> ReadAsStringAsync();
    protected abstract virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected internal abstract virtual bool TryComputeLength(Int64& length);
}
public abstract class System.Net.Http.HttpMessageHandler : object {
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected internal abstract virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
public class System.Net.Http.HttpMessageInvoker : object {
    public HttpMessageInvoker(HttpMessageHandler handler);
    public HttpMessageInvoker(HttpMessageHandler handler, bool disposeHandler);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
public class System.Net.Http.HttpMethod : object {
    public static HttpMethod Delete { get; }
    public static HttpMethod Get { get; }
    public static HttpMethod Head { get; }
    public string Method { get; }
    public static HttpMethod Options { get; }
    public static HttpMethod Post { get; }
    public static HttpMethod Put { get; }
    public static HttpMethod Trace { get; }
    public HttpMethod(string method);
    public static HttpMethod get_Delete();
    public static HttpMethod get_Get();
    public static HttpMethod get_Head();
    public string get_Method();
    public static HttpMethod get_Options();
    public static HttpMethod get_Post();
    public static HttpMethod get_Put();
    public static HttpMethod get_Trace();
    public sealed virtual bool Equals(HttpMethod other);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public static bool op_Equality(HttpMethod left, HttpMethod right);
    public static bool op_Inequality(HttpMethod left, HttpMethod right);
    public virtual string ToString();
}
public class System.Net.Http.HttpRequestException : Exception {
    public HttpRequestException(string message);
    public HttpRequestException(string message, Exception inner);
}
public class System.Net.Http.HttpRequestMessage : object {
    public HttpContent Content { get; public set; }
    public HttpRequestHeaders Headers { get; }
    public HttpMethod Method { get; public set; }
    public IDictionary`2<string, object> Properties { get; }
    public Uri RequestUri { get; public set; }
    public Version Version { get; public set; }
    public HttpRequestMessage(HttpMethod method, string requestUri);
    public HttpRequestMessage(HttpMethod method, Uri requestUri);
    public HttpContent get_Content();
    public void set_Content(HttpContent value);
    public HttpRequestHeaders get_Headers();
    public HttpMethod get_Method();
    public void set_Method(HttpMethod value);
    public IDictionary`2<string, object> get_Properties();
    public Uri get_RequestUri();
    public void set_RequestUri(Uri value);
    public Version get_Version();
    public void set_Version(Version value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual string ToString();
}
public class System.Net.Http.HttpResponseMessage : object {
    public HttpContent Content { get; public set; }
    public HttpResponseHeaders Headers { get; }
    public bool IsSuccessStatusCode { get; }
    public string ReasonPhrase { get; public set; }
    public HttpRequestMessage RequestMessage { get; public set; }
    public HttpStatusCode StatusCode { get; public set; }
    public Version Version { get; public set; }
    public HttpResponseMessage(HttpStatusCode statusCode);
    public HttpContent get_Content();
    public void set_Content(HttpContent value);
    public HttpResponseHeaders get_Headers();
    public bool get_IsSuccessStatusCode();
    public string get_ReasonPhrase();
    public void set_ReasonPhrase(string value);
    public HttpRequestMessage get_RequestMessage();
    public void set_RequestMessage(HttpRequestMessage value);
    public HttpStatusCode get_StatusCode();
    public void set_StatusCode(HttpStatusCode value);
    public Version get_Version();
    public void set_Version(Version value);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public HttpResponseMessage EnsureSuccessStatusCode();
    public virtual string ToString();
}
public abstract class System.Net.Http.MessageProcessingHandler : DelegatingHandler {
    protected MessageProcessingHandler(HttpMessageHandler innerHandler);
    protected abstract virtual HttpRequestMessage ProcessRequest(HttpRequestMessage request, CancellationToken cancellationToken);
    protected abstract virtual HttpResponseMessage ProcessResponse(HttpResponseMessage response, CancellationToken cancellationToken);
    protected internal sealed virtual Task`1<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken);
}
public class System.Net.Http.MultipartContent : HttpContent {
    public MultipartContent(string subtype);
    public MultipartContent(string subtype, string boundary);
    public virtual void Add(HttpContent content);
    protected virtual void Dispose(bool disposing);
    public sealed virtual IEnumerator`1<HttpContent> GetEnumerator();
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    protected internal virtual bool TryComputeLength(Int64& length);
}
public class System.Net.Http.MultipartFormDataContent : MultipartContent {
    public MultipartFormDataContent(string boundary);
    public virtual void Add(HttpContent content);
    public void Add(HttpContent content, string name);
    public void Add(HttpContent content, string name, string fileName);
}
public class System.Net.Http.StreamContent : HttpContent {
    public StreamContent(Stream content);
    public StreamContent(Stream content, int bufferSize);
    protected virtual Task`1<Stream> CreateContentReadStreamAsync();
    protected virtual void Dispose(bool disposing);
    protected virtual Task SerializeToStreamAsync(Stream stream, TransportContext context);
    protected internal virtual bool TryComputeLength(Int64& length);
}
public class System.Net.Http.StringContent : ByteArrayContent {
    public StringContent(string content);
    public StringContent(string content, Encoding encoding);
    public StringContent(string content, Encoding encoding, string mediaType);
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
