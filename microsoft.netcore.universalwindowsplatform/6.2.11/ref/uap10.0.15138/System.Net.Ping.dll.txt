public enum System.Net.NetworkInformation.IPStatus : Enum {
    public int value__;
    public static IPStatus BadDestination;
    public static IPStatus BadHeader;
    public static IPStatus BadOption;
    public static IPStatus BadRoute;
    public static IPStatus DestinationHostUnreachable;
    public static IPStatus DestinationNetworkUnreachable;
    public static IPStatus DestinationPortUnreachable;
    public static IPStatus DestinationProhibited;
    public static IPStatus DestinationProtocolUnreachable;
    public static IPStatus DestinationScopeMismatch;
    public static IPStatus DestinationUnreachable;
    public static IPStatus HardwareError;
    public static IPStatus IcmpError;
    public static IPStatus NoResources;
    public static IPStatus PacketTooBig;
    public static IPStatus ParameterProblem;
    public static IPStatus SourceQuench;
    public static IPStatus Success;
    public static IPStatus TimedOut;
    public static IPStatus TimeExceeded;
    public static IPStatus TtlExpired;
    public static IPStatus TtlReassemblyTimeExceeded;
    public static IPStatus Unknown;
    public static IPStatus UnrecognizedNextHeader;
}
public class System.Net.NetworkInformation.Ping : Component {
    public void add_PingCompleted(PingCompletedEventHandler value);
    public void remove_PingCompleted(PingCompletedEventHandler value);
    protected virtual void Dispose(bool disposing);
    protected void OnPingCompleted(PingCompletedEventArgs e);
    public PingReply Send(string hostNameOrAddress);
    public PingReply Send(string hostNameOrAddress, int timeout);
    public PingReply Send(IPAddress address);
    public PingReply Send(IPAddress address, int timeout);
    public PingReply Send(string hostNameOrAddress, int timeout, Byte[] buffer);
    public PingReply Send(IPAddress address, int timeout, Byte[] buffer);
    public PingReply Send(string hostNameOrAddress, int timeout, Byte[] buffer, PingOptions options);
    public PingReply Send(IPAddress address, int timeout, Byte[] buffer, PingOptions options);
    public void SendAsync(string hostNameOrAddress, object userToken);
    public void SendAsync(string hostNameOrAddress, int timeout, object userToken);
    public void SendAsync(IPAddress address, object userToken);
    public void SendAsync(IPAddress address, int timeout, object userToken);
    public void SendAsync(string hostNameOrAddress, int timeout, Byte[] buffer, object userToken);
    public void SendAsync(IPAddress address, int timeout, Byte[] buffer, object userToken);
    public void SendAsync(string hostNameOrAddress, int timeout, Byte[] buffer, PingOptions options, object userToken);
    public void SendAsync(IPAddress address, int timeout, Byte[] buffer, PingOptions options, object userToken);
    public void SendAsyncCancel();
    public Task`1<PingReply> SendPingAsync(IPAddress address);
    public Task`1<PingReply> SendPingAsync(IPAddress address, int timeout);
    public Task`1<PingReply> SendPingAsync(IPAddress address, int timeout, Byte[] buffer);
    public Task`1<PingReply> SendPingAsync(IPAddress address, int timeout, Byte[] buffer, PingOptions options);
    public Task`1<PingReply> SendPingAsync(string hostNameOrAddress);
    public Task`1<PingReply> SendPingAsync(string hostNameOrAddress, int timeout);
    public Task`1<PingReply> SendPingAsync(string hostNameOrAddress, int timeout, Byte[] buffer);
    public Task`1<PingReply> SendPingAsync(string hostNameOrAddress, int timeout, Byte[] buffer, PingOptions options);
}
public class System.Net.NetworkInformation.PingCompletedEventArgs : AsyncCompletedEventArgs {
    [CompilerGeneratedAttribute]
private PingReply <Reply>k__BackingField;
    public PingReply Reply { get; }
    [CompilerGeneratedAttribute]
public PingReply get_Reply();
}
public class System.Net.NetworkInformation.PingCompletedEventHandler : MulticastDelegate {
    public PingCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PingCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PingCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Net.NetworkInformation.PingException : InvalidOperationException {
    public PingException(string message);
    public PingException(string message, Exception innerException);
    protected PingException(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
public class System.Net.NetworkInformation.PingOptions : object {
    public bool DontFragment { get; public set; }
    public int Ttl { get; public set; }
    public PingOptions(int ttl, bool dontFragment);
    public bool get_DontFragment();
    public void set_DontFragment(bool value);
    public int get_Ttl();
    public void set_Ttl(int value);
}
public class System.Net.NetworkInformation.PingReply : object {
    public IPAddress Address { get; }
    public Byte[] Buffer { get; }
    public PingOptions Options { get; }
    public long RoundtripTime { get; }
    public IPStatus Status { get; }
    public IPAddress get_Address();
    public Byte[] get_Buffer();
    public PingOptions get_Options();
    public long get_RoundtripTime();
    public IPStatus get_Status();
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
