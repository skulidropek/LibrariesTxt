public class System.Net.AuthenticationManager : object {
    public static ICredentialPolicy CredentialPolicy { get; public set; }
    public static StringDictionary CustomTargetNameDictionary { get; }
    public static IEnumerator RegisteredModules { get; }
    public static ICredentialPolicy get_CredentialPolicy();
    public static void set_CredentialPolicy(ICredentialPolicy value);
    public static StringDictionary get_CustomTargetNameDictionary();
    public static Authorization Authenticate(string challenge, WebRequest request, ICredentials credentials);
    public static Authorization PreAuthenticate(WebRequest request, ICredentials credentials);
    public static void Register(IAuthenticationModule authenticationModule);
    public static void Unregister(IAuthenticationModule authenticationModule);
    public static void Unregister(string authenticationScheme);
    public static IEnumerator get_RegisteredModules();
}
public class System.Net.Authorization : object {
    public string Message { get; }
    public string ConnectionGroupId { get; }
    public bool Complete { get; }
    public String[] ProtectionRealm { get; public set; }
    public bool MutuallyAuthenticated { get; public set; }
    public Authorization(string token);
    public Authorization(string token, bool finished);
    public Authorization(string token, bool finished, string connectionGroupId);
    public string get_Message();
    public string get_ConnectionGroupId();
    public bool get_Complete();
    public String[] get_ProtectionRealm();
    public void set_ProtectionRealm(String[] value);
    public bool get_MutuallyAuthenticated();
    public void set_MutuallyAuthenticated(bool value);
}
public enum System.Net.Cache.HttpCacheAgeControl : Enum {
    public int value__;
    public static HttpCacheAgeControl None;
    public static HttpCacheAgeControl MinFresh;
    public static HttpCacheAgeControl MaxAge;
    public static HttpCacheAgeControl MaxStale;
    public static HttpCacheAgeControl MaxAgeAndMinFresh;
    public static HttpCacheAgeControl MaxAgeAndMaxStale;
}
public enum System.Net.Cache.HttpRequestCacheLevel : Enum {
    public int value__;
    public static HttpRequestCacheLevel Default;
    public static HttpRequestCacheLevel BypassCache;
    public static HttpRequestCacheLevel CacheOnly;
    public static HttpRequestCacheLevel CacheIfAvailable;
    public static HttpRequestCacheLevel Revalidate;
    public static HttpRequestCacheLevel Reload;
    public static HttpRequestCacheLevel NoCacheNoStore;
    public static HttpRequestCacheLevel CacheOrNextCacheOnly;
    public static HttpRequestCacheLevel Refresh;
}
public class System.Net.Cache.HttpRequestCachePolicy : RequestCachePolicy {
    public HttpRequestCacheLevel Level { get; }
    public DateTime CacheSyncDate { get; }
    public TimeSpan MaxAge { get; }
    public TimeSpan MinFresh { get; }
    public TimeSpan MaxStale { get; }
    public HttpRequestCachePolicy(DateTime cacheSyncDate);
    public HttpRequestCachePolicy(HttpRequestCacheLevel level);
    public HttpRequestCachePolicy(HttpCacheAgeControl cacheAgeControl, TimeSpan ageOrFreshOrStale);
    public HttpRequestCachePolicy(HttpCacheAgeControl cacheAgeControl, TimeSpan maxAge, TimeSpan freshOrStale);
    public HttpRequestCachePolicy(HttpCacheAgeControl cacheAgeControl, TimeSpan maxAge, TimeSpan freshOrStale, DateTime cacheSyncDate);
    public HttpRequestCacheLevel get_Level();
    public DateTime get_CacheSyncDate();
    public TimeSpan get_MaxAge();
    public TimeSpan get_MinFresh();
    public TimeSpan get_MaxStale();
    public virtual string ToString();
}
public class System.Net.FileWebRequest : WebRequest {
    public string ConnectionGroupName { get; public set; }
    public long ContentLength { get; public set; }
    public string ContentType { get; public set; }
    public ICredentials Credentials { get; public set; }
    public WebHeaderCollection Headers { get; }
    public string Method { get; public set; }
    public bool PreAuthenticate { get; public set; }
    public IWebProxy Proxy { get; public set; }
    public int Timeout { get; public set; }
    public Uri RequestUri { get; }
    public bool UseDefaultCredentials { get; public set; }
    [ObsoleteAttribute("Serialization is obsoleted for this type. http://go.microsoft.com/fwlink/?linkid=14202")]
protected FileWebRequest(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public virtual string get_ConnectionGroupName();
    public virtual void set_ConnectionGroupName(string value);
    public virtual long get_ContentLength();
    public virtual void set_ContentLength(long value);
    public virtual string get_ContentType();
    public virtual void set_ContentType(string value);
    public virtual ICredentials get_Credentials();
    public virtual void set_Credentials(ICredentials value);
    public virtual WebHeaderCollection get_Headers();
    public virtual string get_Method();
    public virtual void set_Method(string value);
    public virtual bool get_PreAuthenticate();
    public virtual void set_PreAuthenticate(bool value);
    public virtual IWebProxy get_Proxy();
    public virtual void set_Proxy(IWebProxy value);
    public virtual int get_Timeout();
    public virtual void set_Timeout(int value);
    public virtual Uri get_RequestUri();
    public virtual bool get_UseDefaultCredentials();
    public virtual void set_UseDefaultCredentials(bool value);
    public virtual void Abort();
    public virtual IAsyncResult BeginGetRequestStream(AsyncCallback callback, object state);
    public virtual IAsyncResult BeginGetResponse(AsyncCallback callback, object state);
    public virtual Stream EndGetRequestStream(IAsyncResult asyncResult);
    public virtual WebResponse EndGetResponse(IAsyncResult asyncResult);
    public virtual Stream GetRequestStream();
    public virtual WebResponse GetResponse();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
    protected virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
public class System.Net.FileWebResponse : WebResponse {
    public long ContentLength { get; }
    public string ContentType { get; }
    public WebHeaderCollection Headers { get; }
    public bool SupportsHeaders { get; }
    public Uri ResponseUri { get; }
    [ObsoleteAttribute("Serialization is obsoleted for this type. http://go.microsoft.com/fwlink/?linkid=14202")]
protected FileWebResponse(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public virtual long get_ContentLength();
    public virtual string get_ContentType();
    public virtual WebHeaderCollection get_Headers();
    public virtual bool get_SupportsHeaders();
    public virtual Uri get_ResponseUri();
    public virtual void Close();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
    protected virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public virtual Stream GetResponseStream();
}
public enum System.Net.FtpStatusCode : Enum {
    public int value__;
    public static FtpStatusCode Undefined;
    public static FtpStatusCode RestartMarker;
    public static FtpStatusCode ServiceTemporarilyNotAvailable;
    public static FtpStatusCode DataAlreadyOpen;
    public static FtpStatusCode OpeningData;
    public static FtpStatusCode CommandOK;
    public static FtpStatusCode CommandExtraneous;
    public static FtpStatusCode DirectoryStatus;
    public static FtpStatusCode FileStatus;
    public static FtpStatusCode SystemType;
    public static FtpStatusCode SendUserCommand;
    public static FtpStatusCode ClosingControl;
    public static FtpStatusCode ClosingData;
    public static FtpStatusCode EnteringPassive;
    public static FtpStatusCode LoggedInProceed;
    public static FtpStatusCode ServerWantsSecureSession;
    public static FtpStatusCode FileActionOK;
    public static FtpStatusCode PathnameCreated;
    public static FtpStatusCode SendPasswordCommand;
    public static FtpStatusCode NeedLoginAccount;
    public static FtpStatusCode FileCommandPending;
    public static FtpStatusCode ServiceNotAvailable;
    public static FtpStatusCode CantOpenData;
    public static FtpStatusCode ConnectionClosed;
    public static FtpStatusCode ActionNotTakenFileUnavailableOrBusy;
    public static FtpStatusCode ActionAbortedLocalProcessingError;
    public static FtpStatusCode ActionNotTakenInsufficientSpace;
    public static FtpStatusCode CommandSyntaxError;
    public static FtpStatusCode ArgumentSyntaxError;
    public static FtpStatusCode CommandNotImplemented;
    public static FtpStatusCode BadCommandSequence;
    public static FtpStatusCode NotLoggedIn;
    public static FtpStatusCode AccountNeeded;
    public static FtpStatusCode ActionNotTakenFileUnavailable;
    public static FtpStatusCode ActionAbortedUnknownPageType;
    public static FtpStatusCode FileActionAborted;
    public static FtpStatusCode ActionNotTakenFilenameNotAllowed;
}
public class System.Net.FtpWebRequest : WebRequest {
    public X509CertificateCollection ClientCertificates { get; public set; }
    public string ConnectionGroupName { get; public set; }
    public long ContentLength { get; public set; }
    public long ContentOffset { get; public set; }
    public string ContentType { get; public set; }
    public ICredentials Credentials { get; public set; }
    public WebHeaderCollection Headers { get; public set; }
    public string Method { get; public set; }
    public bool PreAuthenticate { get; public set; }
    public IWebProxy Proxy { get; public set; }
    public string RenameTo { get; public set; }
    public int Timeout { get; public set; }
    public bool EnableSsl { get; public set; }
    public bool UsePassive { get; public set; }
    public bool UseBinary { get; public set; }
    public bool KeepAlive { get; public set; }
    public int ReadWriteTimeout { get; public set; }
    public ServicePoint ServicePoint { get; }
    public static RequestCachePolicy DefaultCachePolicy { get; public set; }
    public Uri RequestUri { get; }
    public bool UseDefaultCredentials { get; public set; }
    public X509CertificateCollection get_ClientCertificates();
    public void set_ClientCertificates(X509CertificateCollection value);
    public virtual string get_ConnectionGroupName();
    public virtual void set_ConnectionGroupName(string value);
    public virtual long get_ContentLength();
    public virtual void set_ContentLength(long value);
    public long get_ContentOffset();
    public void set_ContentOffset(long value);
    public virtual string get_ContentType();
    public virtual void set_ContentType(string value);
    public virtual ICredentials get_Credentials();
    public virtual void set_Credentials(ICredentials value);
    public virtual WebHeaderCollection get_Headers();
    public virtual void set_Headers(WebHeaderCollection value);
    public virtual string get_Method();
    public virtual void set_Method(string value);
    public virtual bool get_PreAuthenticate();
    public virtual void set_PreAuthenticate(bool value);
    public virtual IWebProxy get_Proxy();
    public virtual void set_Proxy(IWebProxy value);
    public string get_RenameTo();
    public void set_RenameTo(string value);
    public virtual int get_Timeout();
    public virtual void set_Timeout(int value);
    public bool get_EnableSsl();
    public void set_EnableSsl(bool value);
    public bool get_UsePassive();
    public void set_UsePassive(bool value);
    public bool get_UseBinary();
    public void set_UseBinary(bool value);
    public bool get_KeepAlive();
    public void set_KeepAlive(bool value);
    public int get_ReadWriteTimeout();
    public void set_ReadWriteTimeout(int value);
    public ServicePoint get_ServicePoint();
    public static RequestCachePolicy get_DefaultCachePolicy();
    public static void set_DefaultCachePolicy(RequestCachePolicy value);
    public virtual Uri get_RequestUri();
    public virtual bool get_UseDefaultCredentials();
    public virtual void set_UseDefaultCredentials(bool value);
    public virtual void Abort();
    public virtual IAsyncResult BeginGetRequestStream(AsyncCallback callback, object state);
    public virtual IAsyncResult BeginGetResponse(AsyncCallback callback, object state);
    public virtual Stream EndGetRequestStream(IAsyncResult asyncResult);
    public virtual WebResponse EndGetResponse(IAsyncResult asyncResult);
    public virtual Stream GetRequestStream();
    public virtual WebResponse GetResponse();
}
public class System.Net.FtpWebResponse : WebResponse {
    public long ContentLength { get; }
    public string ContentType { get; }
    public WebHeaderCollection Headers { get; }
    public bool SupportsHeaders { get; }
    public Uri ResponseUri { get; }
    public string BannerMessage { get; }
    public string ExitMessage { get; }
    public string WelcomeMessage { get; }
    public FtpStatusCode StatusCode { get; }
    public string StatusDescription { get; }
    public DateTime LastModified { get; }
    public virtual long get_ContentLength();
    public virtual string get_ContentType();
    public virtual WebHeaderCollection get_Headers();
    public virtual bool get_SupportsHeaders();
    public virtual Uri get_ResponseUri();
    public virtual void Close();
    public virtual Stream GetResponseStream();
    public string get_BannerMessage();
    public string get_ExitMessage();
    public string get_WelcomeMessage();
    public FtpStatusCode get_StatusCode();
    public string get_StatusDescription();
    public DateTime get_LastModified();
}
[ObsoleteAttribute("This class has been deprecated. Please use WebRequest.DefaultWebProxy instead to access and set the global default proxy. Use 'null' instead of GetEmptyWebProxy. http://go.microsoft.com/fwlink/?linkid=14202")]
public class System.Net.GlobalProxySelection : object {
    public static IWebProxy Select { get; public set; }
    public static IWebProxy get_Select();
    public static void set_Select(IWebProxy value);
    public static IWebProxy GetEmptyWebProxy();
}
public class System.Net.HttpContinueDelegate : MulticastDelegate {
    public HttpContinueDelegate(object object, IntPtr method);
    public virtual void Invoke(int StatusCode, WebHeaderCollection httpHeaders);
    public virtual IAsyncResult BeginInvoke(int StatusCode, WebHeaderCollection httpHeaders, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Net.HttpWebRequest : WebRequest {
    [CompilerGeneratedAttribute]
private RemoteCertificateValidationCallback <ServerCertificateValidationCallback>k__BackingField;
    public string Accept { get; public set; }
    public bool AllowReadStreamBuffering { get; public set; }
    public string ContentType { get; public set; }
    public int ContinueTimeout { get; public set; }
    public CookieContainer CookieContainer { get; public set; }
    public ICredentials Credentials { get; public set; }
    public bool HaveResponse { get; }
    public WebHeaderCollection Headers { get; public set; }
    public string Method { get; public set; }
    public Uri RequestUri { get; }
    public bool SupportsCookieContainer { get; }
    public bool UseDefaultCredentials { get; public set; }
    public bool AllowWriteStreamBuffering { get; public set; }
    public bool AllowAutoRedirect { get; public set; }
    public Uri Address { get; }
    public DecompressionMethods AutomaticDecompression { get; public set; }
    public DateTime Date { get; public set; }
    public static int DefaultMaximumResponseHeadersLength { get; public set; }
    public static int DefaultMaximumErrorResponseLength { get; public set; }
    public X509CertificateCollection ClientCertificates { get; public set; }
    public string Expect { get; public set; }
    public DateTime IfModifiedSince { get; public set; }
    public bool KeepAlive { get; public set; }
    public int MaximumAutomaticRedirections { get; public set; }
    public int MaximumResponseHeadersLength { get; public set; }
    public string MediaType { get; public set; }
    public bool Pipelined { get; public set; }
    public Version ProtocolVersion { get; public set; }
    public int ReadWriteTimeout { get; public set; }
    public string Referer { get; public set; }
    public bool SendChunked { get; public set; }
    public ServicePoint ServicePoint { get; }
    public string TransferEncoding { get; public set; }
    public string UserAgent { get; public set; }
    public bool UnsafeAuthenticatedConnectionSharing { get; public set; }
    public string Host { get; public set; }
    public string ConnectionGroupName { get; public set; }
    public RemoteCertificateValidationCallback ServerCertificateValidationCallback { get; public set; }
    public HttpContinueDelegate ContinueDelegate { get; public set; }
    public string Connection { get; public set; }
    public IWebProxy Proxy { get; public set; }
    public static RequestCachePolicy DefaultCachePolicy { get; public set; }
    public bool PreAuthenticate { get; public set; }
    public int Timeout { get; public set; }
    public long ContentLength { get; public set; }
    [ObsoleteAttribute("Serialization is obsoleted for this type.  http://go.microsoft.com/fwlink/?linkid=14202")]
protected HttpWebRequest(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public string get_Accept();
    public void set_Accept(string value);
    public virtual bool get_AllowReadStreamBuffering();
    public virtual void set_AllowReadStreamBuffering(bool value);
    public virtual string get_ContentType();
    public virtual void set_ContentType(string value);
    public int get_ContinueTimeout();
    public void set_ContinueTimeout(int value);
    public virtual CookieContainer get_CookieContainer();
    public virtual void set_CookieContainer(CookieContainer value);
    public virtual ICredentials get_Credentials();
    public virtual void set_Credentials(ICredentials value);
    public virtual bool get_HaveResponse();
    public virtual WebHeaderCollection get_Headers();
    public virtual void set_Headers(WebHeaderCollection value);
    public virtual string get_Method();
    public virtual void set_Method(string value);
    public virtual Uri get_RequestUri();
    public virtual bool get_SupportsCookieContainer();
    public virtual bool get_UseDefaultCredentials();
    public virtual void set_UseDefaultCredentials(bool value);
    public virtual void Abort();
    public virtual IAsyncResult BeginGetRequestStream(AsyncCallback callback, object state);
    public virtual IAsyncResult BeginGetResponse(AsyncCallback callback, object state);
    public virtual Stream EndGetRequestStream(IAsyncResult asyncResult);
    public Stream EndGetRequestStream(IAsyncResult asyncResult, TransportContext& context);
    public virtual WebResponse EndGetResponse(IAsyncResult asyncResult);
    public virtual WebResponse GetResponse();
    public virtual bool get_AllowWriteStreamBuffering();
    public virtual void set_AllowWriteStreamBuffering(bool value);
    public virtual bool get_AllowAutoRedirect();
    public virtual void set_AllowAutoRedirect(bool value);
    public Uri get_Address();
    public DecompressionMethods get_AutomaticDecompression();
    public void set_AutomaticDecompression(DecompressionMethods value);
    public DateTime get_Date();
    public void set_Date(DateTime value);
    public static int get_DefaultMaximumResponseHeadersLength();
    public static void set_DefaultMaximumResponseHeadersLength(int value);
    public static int get_DefaultMaximumErrorResponseLength();
    public static void set_DefaultMaximumErrorResponseLength(int value);
    public X509CertificateCollection get_ClientCertificates();
    public void set_ClientCertificates(X509CertificateCollection value);
    public string get_Expect();
    public void set_Expect(string value);
    public DateTime get_IfModifiedSince();
    public void set_IfModifiedSince(DateTime value);
    public bool get_KeepAlive();
    public void set_KeepAlive(bool value);
    public int get_MaximumAutomaticRedirections();
    public void set_MaximumAutomaticRedirections(int value);
    public int get_MaximumResponseHeadersLength();
    public void set_MaximumResponseHeadersLength(int value);
    public string get_MediaType();
    public void set_MediaType(string value);
    public Stream GetRequestStream(TransportContext& context);
    public bool get_Pipelined();
    public void set_Pipelined(bool value);
    public Version get_ProtocolVersion();
    public void set_ProtocolVersion(Version value);
    public int get_ReadWriteTimeout();
    public void set_ReadWriteTimeout(int value);
    public string get_Referer();
    public void set_Referer(string value);
    public bool get_SendChunked();
    public void set_SendChunked(bool value);
    public ServicePoint get_ServicePoint();
    public string get_TransferEncoding();
    public void set_TransferEncoding(string value);
    public string get_UserAgent();
    public void set_UserAgent(string value);
    public bool get_UnsafeAuthenticatedConnectionSharing();
    public void set_UnsafeAuthenticatedConnectionSharing(bool value);
    public virtual Stream GetRequestStream();
    public void AddRange(int range);
    public void AddRange(int from, int to);
    public void AddRange(long range);
    public void AddRange(long from, long to);
    public void AddRange(string rangeSpecifier, int range);
    public void AddRange(string rangeSpecifier, int from, int to);
    public void AddRange(string rangeSpecifier, long range);
    public void AddRange(string rangeSpecifier, long from, long to);
    public string get_Host();
    public void set_Host(string value);
    public virtual string get_ConnectionGroupName();
    public virtual void set_ConnectionGroupName(string value);
    [CompilerGeneratedAttribute]
public RemoteCertificateValidationCallback get_ServerCertificateValidationCallback();
    [CompilerGeneratedAttribute]
public void set_ServerCertificateValidationCallback(RemoteCertificateValidationCallback value);
    public HttpContinueDelegate get_ContinueDelegate();
    public void set_ContinueDelegate(HttpContinueDelegate value);
    public string get_Connection();
    public void set_Connection(string value);
    public virtual IWebProxy get_Proxy();
    public virtual void set_Proxy(IWebProxy value);
    public static RequestCachePolicy get_DefaultCachePolicy();
    public static void set_DefaultCachePolicy(RequestCachePolicy value);
    public virtual bool get_PreAuthenticate();
    public virtual void set_PreAuthenticate(bool value);
    public virtual int get_Timeout();
    public virtual void set_Timeout(int value);
    public virtual long get_ContentLength();
    public virtual void set_ContentLength(long value);
    [ObsoleteAttribute("Serialization is obsoleted for this type.  http://go.microsoft.com/fwlink/?linkid=14202")]
private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
    [ObsoleteAttribute("Serialization is obsoleted for this type.  http://go.microsoft.com/fwlink/?linkid=14202")]
protected virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
public class System.Net.HttpWebResponse : WebResponse {
    public long ContentLength { get; }
    public string ContentType { get; }
    public CookieCollection Cookies { get; public set; }
    public WebHeaderCollection Headers { get; }
    public string Method { get; }
    public Uri ResponseUri { get; }
    public HttpStatusCode StatusCode { get; }
    public string StatusDescription { get; }
    public bool SupportsHeaders { get; }
    public Version ProtocolVersion { get; }
    public DateTime LastModified { get; }
    public string ContentEncoding { get; }
    public string CharacterSet { get; }
    public string Server { get; }
    public bool IsMutuallyAuthenticated { get; }
    [ObsoleteAttribute("Serialization is obsoleted for this type.  http://go.microsoft.com/fwlink/?linkid=14202")]
protected HttpWebResponse(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public virtual long get_ContentLength();
    public virtual string get_ContentType();
    public virtual CookieCollection get_Cookies();
    public virtual void set_Cookies(CookieCollection value);
    public virtual WebHeaderCollection get_Headers();
    public virtual string get_Method();
    public virtual Uri get_ResponseUri();
    public virtual HttpStatusCode get_StatusCode();
    public virtual string get_StatusDescription();
    public virtual bool get_SupportsHeaders();
    protected virtual void Dispose(bool disposing);
    public virtual Stream GetResponseStream();
    public string GetResponseHeader(string headerName);
    public Version get_ProtocolVersion();
    public DateTime get_LastModified();
    public string get_ContentEncoding();
    public string get_CharacterSet();
    public string get_Server();
    public virtual void Close();
    public virtual bool get_IsMutuallyAuthenticated();
    [ObsoleteAttribute("Serialization is obsoleted for this type.  http://go.microsoft.com/fwlink/?linkid=14202")]
private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
    [ObsoleteAttribute("Serialization is obsoleted for this type.  http://go.microsoft.com/fwlink/?linkid=14202")]
protected virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
public interface System.Net.IAuthenticationModule {
    public bool CanPreAuthenticate { get; }
    public string AuthenticationType { get; }
    public abstract virtual Authorization Authenticate(string challenge, WebRequest request, ICredentials credentials);
    public abstract virtual Authorization PreAuthenticate(WebRequest request, ICredentials credentials);
    public abstract virtual bool get_CanPreAuthenticate();
    public abstract virtual string get_AuthenticationType();
}
public interface System.Net.ICredentialPolicy {
    public abstract virtual bool ShouldSendCredential(Uri challengeUri, WebRequest request, NetworkCredential credential, IAuthenticationModule authenticationModule);
}
public interface System.Net.IWebRequestCreate {
    public abstract virtual WebRequest Create(Uri uri);
}
public class System.Net.ProtocolViolationException : InvalidOperationException {
    public ProtocolViolationException(string message);
    protected ProtocolViolationException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
public class System.Net.WebException : InvalidOperationException {
    public WebResponse Response { get; }
    public WebExceptionStatus Status { get; }
    public WebException(string message);
    public WebException(string message, Exception innerException);
    public WebException(string message, Exception innerException, WebExceptionStatus status, WebResponse response);
    public WebException(string message, WebExceptionStatus status);
    protected WebException(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public WebResponse get_Response();
    public WebExceptionStatus get_Status();
    public virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
public enum System.Net.WebExceptionStatus : Enum {
    public int value__;
    public static WebExceptionStatus CacheEntryNotFound;
    public static WebExceptionStatus ConnectFailure;
    public static WebExceptionStatus ConnectionClosed;
    public static WebExceptionStatus KeepAliveFailure;
    public static WebExceptionStatus MessageLengthLimitExceeded;
    public static WebExceptionStatus NameResolutionFailure;
    public static WebExceptionStatus Pending;
    public static WebExceptionStatus PipelineFailure;
    public static WebExceptionStatus ProtocolError;
    public static WebExceptionStatus ProxyNameResolutionFailure;
    public static WebExceptionStatus ReceiveFailure;
    public static WebExceptionStatus RequestCanceled;
    public static WebExceptionStatus RequestProhibitedByCachePolicy;
    public static WebExceptionStatus RequestProhibitedByProxy;
    public static WebExceptionStatus SecureChannelFailure;
    public static WebExceptionStatus SendFailure;
    public static WebExceptionStatus ServerProtocolViolation;
    public static WebExceptionStatus Success;
    public static WebExceptionStatus Timeout;
    public static WebExceptionStatus TrustFailure;
    public static WebExceptionStatus UnknownError;
}
public abstract class System.Net.WebRequest : MarshalByRefObject {
    public AuthenticationLevel AuthenticationLevel { get; public set; }
    public long ContentLength { get; public set; }
    public string ContentType { get; public set; }
    public RequestCachePolicy CachePolicy { get; public set; }
    public string ConnectionGroupName { get; public set; }
    public ICredentials Credentials { get; public set; }
    public static RequestCachePolicy DefaultCachePolicy { get; public set; }
    public static IWebProxy DefaultWebProxy { get; public set; }
    public WebHeaderCollection Headers { get; public set; }
    public TokenImpersonationLevel ImpersonationLevel { get; public set; }
    public string Method { get; public set; }
    public bool PreAuthenticate { get; public set; }
    public IWebProxy Proxy { get; public set; }
    public Uri RequestUri { get; }
    public int Timeout { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    protected WebRequest(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public AuthenticationLevel get_AuthenticationLevel();
    public void set_AuthenticationLevel(AuthenticationLevel value);
    public virtual long get_ContentLength();
    public virtual void set_ContentLength(long value);
    public virtual string get_ContentType();
    public virtual void set_ContentType(string value);
    public virtual RequestCachePolicy get_CachePolicy();
    public virtual void set_CachePolicy(RequestCachePolicy value);
    public virtual string get_ConnectionGroupName();
    public virtual void set_ConnectionGroupName(string value);
    public virtual ICredentials get_Credentials();
    public virtual void set_Credentials(ICredentials value);
    public static RequestCachePolicy get_DefaultCachePolicy();
    public static void set_DefaultCachePolicy(RequestCachePolicy value);
    public static IWebProxy get_DefaultWebProxy();
    public static void set_DefaultWebProxy(IWebProxy value);
    public virtual WebHeaderCollection get_Headers();
    public virtual void set_Headers(WebHeaderCollection value);
    public TokenImpersonationLevel get_ImpersonationLevel();
    public void set_ImpersonationLevel(TokenImpersonationLevel value);
    public virtual string get_Method();
    public virtual void set_Method(string value);
    public virtual bool get_PreAuthenticate();
    public virtual void set_PreAuthenticate(bool value);
    public virtual IWebProxy get_Proxy();
    public virtual void set_Proxy(IWebProxy value);
    public virtual Uri get_RequestUri();
    public virtual int get_Timeout();
    public virtual void set_Timeout(int value);
    public virtual bool get_UseDefaultCredentials();
    public virtual void set_UseDefaultCredentials(bool value);
    public virtual void Abort();
    public virtual IAsyncResult BeginGetRequestStream(AsyncCallback callback, object state);
    public virtual IAsyncResult BeginGetResponse(AsyncCallback callback, object state);
    public static WebRequest Create(string requestUriString);
    public static WebRequest Create(Uri requestUri);
    public static WebRequest CreateDefault(Uri requestUri);
    public static HttpWebRequest CreateHttp(string requestUriString);
    public static HttpWebRequest CreateHttp(Uri requestUri);
    public virtual Stream EndGetRequestStream(IAsyncResult asyncResult);
    public virtual WebResponse EndGetResponse(IAsyncResult asyncResult);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
    protected virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public virtual Stream GetRequestStream();
    public virtual Task`1<Stream> GetRequestStreamAsync();
    public virtual WebResponse GetResponse();
    public virtual Task`1<WebResponse> GetResponseAsync();
    public static IWebProxy GetSystemWebProxy();
    public static bool RegisterPrefix(string prefix, IWebRequestCreate creator);
}
public static class System.Net.WebRequestMethods : object {
}
public abstract class System.Net.WebResponse : MarshalByRefObject {
    public long ContentLength { get; public set; }
    public string ContentType { get; public set; }
    public WebHeaderCollection Headers { get; }
    public bool IsFromCache { get; }
    public bool IsMutuallyAuthenticated { get; }
    public Uri ResponseUri { get; }
    public bool SupportsHeaders { get; }
    protected WebResponse(SerializationInfo serializationInfo, StreamingContext streamingContext);
    public virtual long get_ContentLength();
    public virtual void set_ContentLength(long value);
    public virtual string get_ContentType();
    public virtual void set_ContentType(string value);
    public virtual WebHeaderCollection get_Headers();
    public virtual bool get_IsFromCache();
    public virtual bool get_IsMutuallyAuthenticated();
    public virtual Uri get_ResponseUri();
    public virtual bool get_SupportsHeaders();
    public virtual void Close();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual Stream GetResponseStream();
    protected virtual void GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo serializationInfo, StreamingContext streamingContext);
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
