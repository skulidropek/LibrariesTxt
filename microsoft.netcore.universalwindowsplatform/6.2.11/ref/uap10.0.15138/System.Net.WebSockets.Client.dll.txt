public class System.Net.WebSockets.ClientWebSocket : WebSocket {
    public Nullable`1<WebSocketCloseStatus> CloseStatus { get; }
    public string CloseStatusDescription { get; }
    public ClientWebSocketOptions Options { get; }
    public WebSocketState State { get; }
    public string SubProtocol { get; }
    public virtual Nullable`1<WebSocketCloseStatus> get_CloseStatus();
    public virtual string get_CloseStatusDescription();
    public ClientWebSocketOptions get_Options();
    public virtual WebSocketState get_State();
    public virtual string get_SubProtocol();
    public virtual void Abort();
    public virtual Task CloseAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public virtual Task CloseOutputAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken);
    public Task ConnectAsync(Uri uri, CancellationToken cancellationToken);
    public virtual void Dispose();
    public virtual Task`1<WebSocketReceiveResult> ReceiveAsync(ArraySegment`1<byte> buffer, CancellationToken cancellationToken);
    public virtual Task SendAsync(ArraySegment`1<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken);
}
public class System.Net.WebSockets.ClientWebSocketOptions : object {
    public X509CertificateCollection ClientCertificates { get; public set; }
    public CookieContainer Cookies { get; public set; }
    public ICredentials Credentials { get; public set; }
    public TimeSpan KeepAliveInterval { get; public set; }
    public IWebProxy Proxy { get; public set; }
    public bool UseDefaultCredentials { get; public set; }
    public X509CertificateCollection get_ClientCertificates();
    public void set_ClientCertificates(X509CertificateCollection value);
    public CookieContainer get_Cookies();
    public void set_Cookies(CookieContainer value);
    public ICredentials get_Credentials();
    public void set_Credentials(ICredentials value);
    public TimeSpan get_KeepAliveInterval();
    public void set_KeepAliveInterval(TimeSpan value);
    public IWebProxy get_Proxy();
    public void set_Proxy(IWebProxy value);
    public bool get_UseDefaultCredentials();
    public void set_UseDefaultCredentials(bool value);
    public void AddSubProtocol(string subProtocol);
    public void SetBuffer(int receiveBufferSize, int sendBufferSize);
    public void SetBuffer(int receiveBufferSize, int sendBufferSize, ArraySegment`1<byte> buffer);
    public void SetRequestHeader(string headerName, string headerValue);
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
