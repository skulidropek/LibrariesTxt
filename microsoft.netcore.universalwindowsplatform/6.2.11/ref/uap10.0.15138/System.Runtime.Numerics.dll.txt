public class System.Numerics.BigInteger : ValueType {
    public bool IsEven { get; }
    public bool IsOne { get; }
    public bool IsPowerOfTwo { get; }
    public bool IsZero { get; }
    public static BigInteger MinusOne { get; }
    public static BigInteger One { get; }
    public int Sign { get; }
    public static BigInteger Zero { get; }
    [CLSCompliantAttribute("False")]
public BigInteger(Byte[] value);
    public BigInteger(decimal value);
    public BigInteger(double value);
    public BigInteger(int value);
    public BigInteger(long value);
    public BigInteger(float value);
    [CLSCompliantAttribute("False")]
public BigInteger(UInt32 value);
    [CLSCompliantAttribute("False")]
public BigInteger(ulong value);
    public bool get_IsEven();
    public bool get_IsOne();
    public bool get_IsPowerOfTwo();
    public bool get_IsZero();
    public static BigInteger get_MinusOne();
    public static BigInteger get_One();
    public int get_Sign();
    public static BigInteger get_Zero();
    public static BigInteger Abs(BigInteger value);
    public static BigInteger Add(BigInteger left, BigInteger right);
    public static int Compare(BigInteger left, BigInteger right);
    public int CompareTo(long other);
    public sealed virtual int CompareTo(object obj);
    public sealed virtual int CompareTo(BigInteger other);
    [CLSCompliantAttribute("False")]
public int CompareTo(ulong other);
    public static BigInteger Divide(BigInteger dividend, BigInteger divisor);
    public static BigInteger DivRem(BigInteger dividend, BigInteger divisor, BigInteger& remainder);
    public bool Equals(long other);
    public sealed virtual bool Equals(BigInteger other);
    public virtual bool Equals(object obj);
    [CLSCompliantAttribute("False")]
public bool Equals(ulong other);
    public virtual int GetHashCode();
    public static BigInteger GreatestCommonDivisor(BigInteger left, BigInteger right);
    public static double Log(BigInteger value);
    public static double Log(BigInteger value, double baseValue);
    public static double Log10(BigInteger value);
    public static BigInteger Max(BigInteger left, BigInteger right);
    public static BigInteger Min(BigInteger left, BigInteger right);
    public static BigInteger ModPow(BigInteger value, BigInteger exponent, BigInteger modulus);
    public static BigInteger Multiply(BigInteger left, BigInteger right);
    public static BigInteger Negate(BigInteger value);
    public static BigInteger op_Addition(BigInteger left, BigInteger right);
    public static BigInteger op_BitwiseAnd(BigInteger left, BigInteger right);
    public static BigInteger op_BitwiseOr(BigInteger left, BigInteger right);
    public static BigInteger op_Decrement(BigInteger value);
    public static BigInteger op_Division(BigInteger dividend, BigInteger divisor);
    public static bool op_Equality(long left, BigInteger right);
    public static bool op_Equality(BigInteger left, long right);
    public static bool op_Equality(BigInteger left, BigInteger right);
    [CLSCompliantAttribute("False")]
public static bool op_Equality(BigInteger left, ulong right);
    [CLSCompliantAttribute("False")]
public static bool op_Equality(ulong left, BigInteger right);
    public static BigInteger op_ExclusiveOr(BigInteger left, BigInteger right);
    public static BigInteger op_Explicit(decimal value);
    public static BigInteger op_Explicit(double value);
    public static byte op_Explicit(BigInteger value);
    public static decimal op_Explicit(BigInteger value);
    public static double op_Explicit(BigInteger value);
    public static short op_Explicit(BigInteger value);
    public static int op_Explicit(BigInteger value);
    public static long op_Explicit(BigInteger value);
    [CLSCompliantAttribute("False")]
public static sbyte op_Explicit(BigInteger value);
    public static float op_Explicit(BigInteger value);
    [CLSCompliantAttribute("False")]
public static ushort op_Explicit(BigInteger value);
    [CLSCompliantAttribute("False")]
public static UInt32 op_Explicit(BigInteger value);
    [CLSCompliantAttribute("False")]
public static ulong op_Explicit(BigInteger value);
    public static BigInteger op_Explicit(float value);
    public static bool op_GreaterThan(long left, BigInteger right);
    public static bool op_GreaterThan(BigInteger left, long right);
    public static bool op_GreaterThan(BigInteger left, BigInteger right);
    [CLSCompliantAttribute("False")]
public static bool op_GreaterThan(BigInteger left, ulong right);
    [CLSCompliantAttribute("False")]
public static bool op_GreaterThan(ulong left, BigInteger right);
    public static bool op_GreaterThanOrEqual(long left, BigInteger right);
    public static bool op_GreaterThanOrEqual(BigInteger left, long right);
    public static bool op_GreaterThanOrEqual(BigInteger left, BigInteger right);
    [CLSCompliantAttribute("False")]
public static bool op_GreaterThanOrEqual(BigInteger left, ulong right);
    [CLSCompliantAttribute("False")]
public static bool op_GreaterThanOrEqual(ulong left, BigInteger right);
    public static BigInteger op_Implicit(byte value);
    public static BigInteger op_Implicit(short value);
    public static BigInteger op_Implicit(int value);
    public static BigInteger op_Implicit(long value);
    [CLSCompliantAttribute("False")]
public static BigInteger op_Implicit(sbyte value);
    [CLSCompliantAttribute("False")]
public static BigInteger op_Implicit(ushort value);
    [CLSCompliantAttribute("False")]
public static BigInteger op_Implicit(UInt32 value);
    [CLSCompliantAttribute("False")]
public static BigInteger op_Implicit(ulong value);
    public static BigInteger op_Increment(BigInteger value);
    public static bool op_Inequality(long left, BigInteger right);
    public static bool op_Inequality(BigInteger left, long right);
    public static bool op_Inequality(BigInteger left, BigInteger right);
    [CLSCompliantAttribute("False")]
public static bool op_Inequality(BigInteger left, ulong right);
    [CLSCompliantAttribute("False")]
public static bool op_Inequality(ulong left, BigInteger right);
    public static BigInteger op_LeftShift(BigInteger value, int shift);
    public static bool op_LessThan(long left, BigInteger right);
    public static bool op_LessThan(BigInteger left, long right);
    public static bool op_LessThan(BigInteger left, BigInteger right);
    [CLSCompliantAttribute("False")]
public static bool op_LessThan(BigInteger left, ulong right);
    [CLSCompliantAttribute("False")]
public static bool op_LessThan(ulong left, BigInteger right);
    public static bool op_LessThanOrEqual(long left, BigInteger right);
    public static bool op_LessThanOrEqual(BigInteger left, long right);
    public static bool op_LessThanOrEqual(BigInteger left, BigInteger right);
    [CLSCompliantAttribute("False")]
public static bool op_LessThanOrEqual(BigInteger left, ulong right);
    [CLSCompliantAttribute("False")]
public static bool op_LessThanOrEqual(ulong left, BigInteger right);
    public static BigInteger op_Modulus(BigInteger dividend, BigInteger divisor);
    public static BigInteger op_Multiply(BigInteger left, BigInteger right);
    public static BigInteger op_OnesComplement(BigInteger value);
    public static BigInteger op_RightShift(BigInteger value, int shift);
    public static BigInteger op_Subtraction(BigInteger left, BigInteger right);
    public static BigInteger op_UnaryNegation(BigInteger value);
    public static BigInteger op_UnaryPlus(BigInteger value);
    public static BigInteger Parse(string value);
    public static BigInteger Parse(string value, NumberStyles style);
    public static BigInteger Parse(string value, NumberStyles style, IFormatProvider provider);
    public static BigInteger Parse(string value, IFormatProvider provider);
    public static BigInteger Pow(BigInteger value, int exponent);
    public static BigInteger Remainder(BigInteger dividend, BigInteger divisor);
    public static BigInteger Subtract(BigInteger left, BigInteger right);
    public Byte[] ToByteArray();
    public virtual string ToString();
    public string ToString(IFormatProvider provider);
    public string ToString(string format);
    public sealed virtual string ToString(string format, IFormatProvider provider);
    public static bool TryParse(string value, NumberStyles style, IFormatProvider provider, BigInteger& result);
    public static bool TryParse(string value, BigInteger& result);
}
public class System.Numerics.Complex : ValueType {
    public static Complex ImaginaryOne;
    public static Complex One;
    public static Complex Zero;
    public double Imaginary { get; }
    public double Magnitude { get; }
    public double Phase { get; }
    public double Real { get; }
    public Complex(double real, double imaginary);
    public double get_Imaginary();
    public double get_Magnitude();
    public double get_Phase();
    public double get_Real();
    public static double Abs(Complex value);
    public static Complex Acos(Complex value);
    public static Complex Add(Complex left, Complex right);
    public static Complex Asin(Complex value);
    public static Complex Atan(Complex value);
    public static Complex Conjugate(Complex value);
    public static Complex Cos(Complex value);
    public static Complex Cosh(Complex value);
    public static Complex Divide(Complex dividend, Complex divisor);
    public sealed virtual bool Equals(Complex value);
    public virtual bool Equals(object obj);
    public static Complex Exp(Complex value);
    public static Complex FromPolarCoordinates(double magnitude, double phase);
    public virtual int GetHashCode();
    public static Complex Log(Complex value);
    public static Complex Log(Complex value, double baseValue);
    public static Complex Log10(Complex value);
    public static Complex Multiply(Complex left, Complex right);
    public static Complex Negate(Complex value);
    public static Complex op_Addition(Complex left, Complex right);
    public static Complex op_Division(Complex left, Complex right);
    public static bool op_Equality(Complex left, Complex right);
    public static Complex op_Explicit(decimal value);
    public static Complex op_Explicit(BigInteger value);
    public static Complex op_Implicit(byte value);
    public static Complex op_Implicit(double value);
    public static Complex op_Implicit(short value);
    public static Complex op_Implicit(int value);
    public static Complex op_Implicit(long value);
    [CLSCompliantAttribute("False")]
public static Complex op_Implicit(sbyte value);
    public static Complex op_Implicit(float value);
    [CLSCompliantAttribute("False")]
public static Complex op_Implicit(ushort value);
    [CLSCompliantAttribute("False")]
public static Complex op_Implicit(UInt32 value);
    [CLSCompliantAttribute("False")]
public static Complex op_Implicit(ulong value);
    public static bool op_Inequality(Complex left, Complex right);
    public static Complex op_Multiply(Complex left, Complex right);
    public static Complex op_Subtraction(Complex left, Complex right);
    public static Complex op_UnaryNegation(Complex value);
    public static Complex Pow(Complex value, double power);
    public static Complex Pow(Complex value, Complex power);
    public static Complex Reciprocal(Complex value);
    public static Complex Sin(Complex value);
    public static Complex Sinh(Complex value);
    public static Complex Sqrt(Complex value);
    public static Complex Subtract(Complex left, Complex right);
    public static Complex Tan(Complex value);
    public static Complex Tanh(Complex value);
    public virtual string ToString();
    public string ToString(IFormatProvider provider);
    public string ToString(string format);
    public sealed virtual string ToString(string format, IFormatProvider provider);
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
