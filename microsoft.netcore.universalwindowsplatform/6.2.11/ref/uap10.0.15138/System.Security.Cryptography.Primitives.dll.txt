[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
public abstract class System.Security.Cryptography.AsymmetricAlgorithm : object {
    protected int KeySizeValue;
    protected KeySizes[] LegalKeySizesValue;
    public string KeyExchangeAlgorithm { get; }
    public int KeySize { get; public set; }
    public KeySizes[] LegalKeySizes { get; }
    public string SignatureAlgorithm { get; }
    public virtual string get_KeyExchangeAlgorithm();
    public virtual int get_KeySize();
    public virtual void set_KeySize(int value);
    public virtual KeySizes[] get_LegalKeySizes();
    public static AsymmetricAlgorithm Create();
    public static AsymmetricAlgorithm Create(string algName);
    public virtual string get_SignatureAlgorithm();
    public void Clear();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual void FromXmlString(string xmlString);
    public virtual string ToXmlString(bool includePrivateParameters);
}
public enum System.Security.Cryptography.CipherMode : Enum {
    public int value__;
    public static CipherMode CBC;
    [EditorBrowsableAttribute("1")]
public static CipherMode CFB;
    public static CipherMode CTS;
    public static CipherMode ECB;
    [EditorBrowsableAttribute("1")]
public static CipherMode OFB;
}
public class System.Security.Cryptography.CryptographicUnexpectedOperationException : CryptographicException {
    protected CryptographicUnexpectedOperationException(SerializationInfo info, StreamingContext context);
    public CryptographicUnexpectedOperationException(string message);
    public CryptographicUnexpectedOperationException(string message, Exception inner);
    public CryptographicUnexpectedOperationException(string format, string insert);
}
public class System.Security.Cryptography.CryptoStream : Stream {
    public bool CanRead { get; }
    public bool CanSeek { get; }
    public bool CanWrite { get; }
    public bool HasFlushedFinalBlock { get; }
    public long Length { get; }
    public long Position { get; public set; }
    public CryptoStream(Stream stream, ICryptoTransform transform, CryptoStreamMode mode);
    public CryptoStream(Stream stream, ICryptoTransform transform, CryptoStreamMode mode, bool leaveOpen);
    public virtual bool get_CanRead();
    public virtual bool get_CanSeek();
    public virtual bool get_CanWrite();
    public void Clear();
    public bool get_HasFlushedFinalBlock();
    public virtual long get_Length();
    public virtual long get_Position();
    public virtual void set_Position(long value);
    protected virtual void Dispose(bool disposing);
    public virtual void Flush();
    public virtual Task FlushAsync(CancellationToken cancellationToken);
    public void FlushFinalBlock();
    public virtual int Read(Byte[] buffer, int offset, int count);
    public virtual Task`1<int> ReadAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual int ReadByte();
    public virtual long Seek(long offset, SeekOrigin origin);
    public virtual void SetLength(long value);
    public virtual void Write(Byte[] buffer, int offset, int count);
    public virtual Task WriteAsync(Byte[] buffer, int offset, int count, CancellationToken cancellationToken);
    public virtual void WriteByte(byte value);
}
public enum System.Security.Cryptography.CryptoStreamMode : Enum {
    public int value__;
    public static CryptoStreamMode Read;
    public static CryptoStreamMode Write;
}
public abstract class System.Security.Cryptography.HashAlgorithm : object {
    protected internal Byte[] HashValue;
    protected int HashSizeValue;
    protected int State;
    public bool CanReuseTransform { get; }
    public bool CanTransformMultipleBlocks { get; }
    public Byte[] Hash { get; }
    public int HashSize { get; }
    public int InputBlockSize { get; }
    public int OutputBlockSize { get; }
    public virtual bool get_CanReuseTransform();
    public virtual bool get_CanTransformMultipleBlocks();
    public virtual Byte[] get_Hash();
    public virtual int get_HashSize();
    public virtual int get_InputBlockSize();
    public virtual int get_OutputBlockSize();
    public void Clear();
    public Byte[] ComputeHash(Byte[] buffer);
    public Byte[] ComputeHash(Byte[] buffer, int offset, int count);
    public Byte[] ComputeHash(Stream inputStream);
    public static HashAlgorithm Create();
    public static HashAlgorithm Create(string hashName);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    protected abstract virtual void HashCore(Byte[] array, int ibStart, int cbSize);
    protected abstract virtual Byte[] HashFinal();
    public abstract virtual void Initialize();
    public sealed virtual int TransformBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public sealed virtual Byte[] TransformFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
}
public class System.Security.Cryptography.HashAlgorithmName : ValueType {
    public static HashAlgorithmName MD5 { get; }
    public string Name { get; }
    public static HashAlgorithmName SHA1 { get; }
    public static HashAlgorithmName SHA256 { get; }
    public static HashAlgorithmName SHA384 { get; }
    public static HashAlgorithmName SHA512 { get; }
    public HashAlgorithmName(string name);
    public static HashAlgorithmName get_MD5();
    public string get_Name();
    public static HashAlgorithmName get_SHA1();
    public static HashAlgorithmName get_SHA256();
    public static HashAlgorithmName get_SHA384();
    public static HashAlgorithmName get_SHA512();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(HashAlgorithmName other);
    public virtual int GetHashCode();
    public static bool op_Equality(HashAlgorithmName left, HashAlgorithmName right);
    public static bool op_Inequality(HashAlgorithmName left, HashAlgorithmName right);
    public virtual string ToString();
}
public abstract class System.Security.Cryptography.HMAC : KeyedHashAlgorithm {
    protected int BlockSizeValue { get; protected set; }
    public string HashName { get; public set; }
    public Byte[] Key { get; public set; }
    protected int get_BlockSizeValue();
    protected void set_BlockSizeValue(int value);
    public string get_HashName();
    public void set_HashName(string value);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    public static HMAC Create();
    public static HMAC Create(string algorithmName);
    protected virtual void Dispose(bool disposing);
    protected virtual void HashCore(Byte[] rgb, int ib, int cb);
    protected virtual Byte[] HashFinal();
    public virtual void Initialize();
}
public interface System.Security.Cryptography.ICryptoTransform {
    public bool CanReuseTransform { get; }
    public bool CanTransformMultipleBlocks { get; }
    public int InputBlockSize { get; }
    public int OutputBlockSize { get; }
    public abstract virtual bool get_CanReuseTransform();
    public abstract virtual bool get_CanTransformMultipleBlocks();
    public abstract virtual int get_InputBlockSize();
    public abstract virtual int get_OutputBlockSize();
    public abstract virtual int TransformBlock(Byte[] inputBuffer, int inputOffset, int inputCount, Byte[] outputBuffer, int outputOffset);
    public abstract virtual Byte[] TransformFinalBlock(Byte[] inputBuffer, int inputOffset, int inputCount);
}
public abstract class System.Security.Cryptography.KeyedHashAlgorithm : HashAlgorithm {
    protected Byte[] KeyValue;
    public Byte[] Key { get; public set; }
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    public static KeyedHashAlgorithm Create();
    public static KeyedHashAlgorithm Create(string algName);
    protected virtual void Dispose(bool disposing);
}
public class System.Security.Cryptography.KeySizes : object {
    public int MaxSize { get; }
    public int MinSize { get; }
    public int SkipSize { get; }
    public KeySizes(int minSize, int maxSize, int skipSize);
    public int get_MaxSize();
    public int get_MinSize();
    public int get_SkipSize();
}
public enum System.Security.Cryptography.PaddingMode : Enum {
    public int value__;
    public static PaddingMode None;
    public static PaddingMode PKCS7;
    public static PaddingMode Zeros;
    public static PaddingMode ANSIX923;
    public static PaddingMode ISO10126;
}
public abstract class System.Security.Cryptography.SymmetricAlgorithm : object {
    protected int FeedbackSizeValue;
    protected int BlockSizeValue;
    protected Byte[] IVValue;
    protected int KeySizeValue;
    protected Byte[] KeyValue;
    protected KeySizes[] LegalBlockSizesValue;
    protected KeySizes[] LegalKeySizesValue;
    protected CipherMode ModeValue;
    protected PaddingMode PaddingValue;
    public int FeedbackSize { get; public set; }
    public int BlockSize { get; public set; }
    public Byte[] IV { get; public set; }
    public Byte[] Key { get; public set; }
    public int KeySize { get; public set; }
    public KeySizes[] LegalBlockSizes { get; }
    public KeySizes[] LegalKeySizes { get; }
    public CipherMode Mode { get; public set; }
    public PaddingMode Padding { get; public set; }
    public virtual int get_FeedbackSize();
    public virtual void set_FeedbackSize(int value);
    public virtual int get_BlockSize();
    public virtual void set_BlockSize(int value);
    public virtual Byte[] get_IV();
    public virtual void set_IV(Byte[] value);
    public virtual Byte[] get_Key();
    public virtual void set_Key(Byte[] value);
    public virtual int get_KeySize();
    public virtual void set_KeySize(int value);
    public virtual KeySizes[] get_LegalBlockSizes();
    public virtual KeySizes[] get_LegalKeySizes();
    public virtual CipherMode get_Mode();
    public virtual void set_Mode(CipherMode value);
    public virtual PaddingMode get_Padding();
    public virtual void set_Padding(PaddingMode value);
    public static SymmetricAlgorithm Create();
    public static SymmetricAlgorithm Create(string algName);
    public virtual ICryptoTransform CreateDecryptor();
    public abstract virtual ICryptoTransform CreateDecryptor(Byte[] rgbKey, Byte[] rgbIV);
    public virtual ICryptoTransform CreateEncryptor();
    public abstract virtual ICryptoTransform CreateEncryptor(Byte[] rgbKey, Byte[] rgbIV);
    public void Clear();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual void GenerateIV();
    public abstract virtual void GenerateKey();
    public bool ValidKeySize(int bitLength);
}
