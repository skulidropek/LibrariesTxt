[EditorBrowsableAttribute("1")]
public static class Microsoft.CSharp.RuntimeBinder.Binder : object {
    public static CallSiteBinder BinaryOperation(CSharpBinderFlags flags, ExpressionType operation, Type context, IEnumerable`1<CSharpArgumentInfo> argumentInfo);
    public static CallSiteBinder Convert(CSharpBinderFlags flags, Type type, Type context);
    public static CallSiteBinder GetIndex(CSharpBinderFlags flags, Type context, IEnumerable`1<CSharpArgumentInfo> argumentInfo);
    public static CallSiteBinder GetMember(CSharpBinderFlags flags, string name, Type context, IEnumerable`1<CSharpArgumentInfo> argumentInfo);
    public static CallSiteBinder Invoke(CSharpBinderFlags flags, Type context, IEnumerable`1<CSharpArgumentInfo> argumentInfo);
    public static CallSiteBinder InvokeConstructor(CSharpBinderFlags flags, Type context, IEnumerable`1<CSharpArgumentInfo> argumentInfo);
    public static CallSiteBinder InvokeMember(CSharpBinderFlags flags, string name, IEnumerable`1<Type> typeArguments, Type context, IEnumerable`1<CSharpArgumentInfo> argumentInfo);
    public static CallSiteBinder IsEvent(CSharpBinderFlags flags, string name, Type context);
    public static CallSiteBinder SetIndex(CSharpBinderFlags flags, Type context, IEnumerable`1<CSharpArgumentInfo> argumentInfo);
    public static CallSiteBinder SetMember(CSharpBinderFlags flags, string name, Type context, IEnumerable`1<CSharpArgumentInfo> argumentInfo);
    public static CallSiteBinder UnaryOperation(CSharpBinderFlags flags, ExpressionType operation, Type context, IEnumerable`1<CSharpArgumentInfo> argumentInfo);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo : object {
    public static CSharpArgumentInfo Create(CSharpArgumentInfoFlags flags, string name);
}
[EditorBrowsableAttribute("1")]
[FlagsAttribute]
public enum Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfoFlags : Enum {
    public int value__;
    public static CSharpArgumentInfoFlags Constant;
    public static CSharpArgumentInfoFlags IsOut;
    public static CSharpArgumentInfoFlags IsRef;
    public static CSharpArgumentInfoFlags IsStaticType;
    public static CSharpArgumentInfoFlags NamedArgument;
    public static CSharpArgumentInfoFlags None;
    public static CSharpArgumentInfoFlags UseCompileTimeType;
}
[EditorBrowsableAttribute("1")]
[FlagsAttribute]
public enum Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags : Enum {
    public int value__;
    public static CSharpBinderFlags BinaryOperationLogical;
    public static CSharpBinderFlags CheckedContext;
    public static CSharpBinderFlags ConvertArrayIndex;
    public static CSharpBinderFlags ConvertExplicit;
    public static CSharpBinderFlags InvokeSimpleName;
    public static CSharpBinderFlags InvokeSpecialName;
    public static CSharpBinderFlags None;
    public static CSharpBinderFlags ResultDiscarded;
    public static CSharpBinderFlags ResultIndexed;
    public static CSharpBinderFlags ValueFromCompoundAssignment;
}
public class Microsoft.CSharp.RuntimeBinder.RuntimeBinderException : Exception {
    public RuntimeBinderException(string message);
    public RuntimeBinderException(string message, Exception innerException);
    protected RuntimeBinderException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.CSharp.RuntimeBinder.RuntimeBinderInternalCompilerException : Exception {
    public RuntimeBinderInternalCompilerException(string message);
    public RuntimeBinderInternalCompilerException(string message, Exception innerException);
    protected RuntimeBinderInternalCompilerException(SerializationInfo info, StreamingContext context);
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
