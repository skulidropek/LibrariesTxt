public enum Microsoft.VisualBasic.CallType : Enum {
    public int value__;
    public static CallType Get;
    public static CallType Let;
    public static CallType Method;
    public static CallType Set;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.Conversions : object {
    public static object ChangeType(object Expression, Type TargetType);
    public static bool ToBoolean(object Value);
    public static bool ToBoolean(string Value);
    public static byte ToByte(object Value);
    public static byte ToByte(string Value);
    public static char ToChar(object Value);
    public static char ToChar(string Value);
    public static Char[] ToCharArrayRankOne(object Value);
    public static Char[] ToCharArrayRankOne(string Value);
    public static DateTime ToDate(object Value);
    public static DateTime ToDate(string Value);
    public static decimal ToDecimal(bool Value);
    public static decimal ToDecimal(object Value);
    public static decimal ToDecimal(string Value);
    public static double ToDouble(object Value);
    public static double ToDouble(string Value);
    public static T ToGenericParameter(object Value);
    public static int ToInteger(object Value);
    public static int ToInteger(string Value);
    public static long ToLong(object Value);
    public static long ToLong(string Value);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(object Value);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(string Value);
    public static short ToShort(object Value);
    public static short ToShort(string Value);
    public static float ToSingle(object Value);
    public static float ToSingle(string Value);
    public static string ToString(bool Value);
    public static string ToString(byte Value);
    public static string ToString(char Value);
    public static string ToString(DateTime Value);
    public static string ToString(decimal Value);
    public static string ToString(double Value);
    public static string ToString(short Value);
    public static string ToString(int Value);
    public static string ToString(long Value);
    public static string ToString(object Value);
    public static string ToString(float Value);
    [CLSCompliantAttribute("False")]
public static string ToString(UInt32 Value);
    [CLSCompliantAttribute("False")]
public static string ToString(ulong Value);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInteger(object Value);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInteger(string Value);
    [CLSCompliantAttribute("False")]
public static ulong ToULong(object Value);
    [CLSCompliantAttribute("False")]
public static ulong ToULong(string Value);
    [CLSCompliantAttribute("False")]
public static ushort ToUShort(object Value);
    [CLSCompliantAttribute("False")]
public static ushort ToUShort(string Value);
}
[AttributeUsageAttribute("4")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute : Attribute {
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.IncompleteInitialization : Exception {
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.NewLateBinding : object {
    public static object LateCall(object Instance, Type Type, string MemberName, Object[] Arguments, String[] ArgumentNames, Type[] TypeArguments, Boolean[] CopyBack, bool IgnoreReturn);
    public static object LateGet(object Instance, Type Type, string MemberName, Object[] Arguments, String[] ArgumentNames, Type[] TypeArguments, Boolean[] CopyBack);
    public static object LateIndexGet(object Instance, Object[] Arguments, String[] ArgumentNames);
    public static void LateIndexSet(object Instance, Object[] Arguments, String[] ArgumentNames);
    public static void LateIndexSetComplex(object Instance, Object[] Arguments, String[] ArgumentNames, bool OptimisticSet, bool RValueBase);
    public static void LateSet(object Instance, Type Type, string MemberName, Object[] Arguments, String[] ArgumentNames, Type[] TypeArguments);
    public static void LateSet(object Instance, Type Type, string MemberName, Object[] Arguments, String[] ArgumentNames, Type[] TypeArguments, bool OptimisticSet, bool RValueBase, CallType CallType);
    public static void LateSetComplex(object Instance, Type Type, string MemberName, Object[] Arguments, String[] ArgumentNames, Type[] TypeArguments, bool OptimisticSet, bool RValueBase);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.ObjectFlowControl : object {
    public static void CheckForSyncLockOnValueType(object Expression);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.Operators : object {
    public static object AddObject(object Left, object Right);
    public static object AndObject(object Left, object Right);
    public static object CompareObjectEqual(object Left, object Right, bool TextCompare);
    public static object CompareObjectGreater(object Left, object Right, bool TextCompare);
    public static object CompareObjectGreaterEqual(object Left, object Right, bool TextCompare);
    public static object CompareObjectLess(object Left, object Right, bool TextCompare);
    public static object CompareObjectLessEqual(object Left, object Right, bool TextCompare);
    public static object CompareObjectNotEqual(object Left, object Right, bool TextCompare);
    public static int CompareString(string Left, string Right, bool TextCompare);
    public static object ConcatenateObject(object Left, object Right);
    public static bool ConditionalCompareObjectEqual(object Left, object Right, bool TextCompare);
    public static bool ConditionalCompareObjectGreater(object Left, object Right, bool TextCompare);
    public static bool ConditionalCompareObjectGreaterEqual(object Left, object Right, bool TextCompare);
    public static bool ConditionalCompareObjectLess(object Left, object Right, bool TextCompare);
    public static bool ConditionalCompareObjectLessEqual(object Left, object Right, bool TextCompare);
    public static bool ConditionalCompareObjectNotEqual(object Left, object Right, bool TextCompare);
    public static object DivideObject(object Left, object Right);
    public static object ExponentObject(object Left, object Right);
    public static object IntDivideObject(object Left, object Right);
    public static object LeftShiftObject(object Operand, object Amount);
    public static object ModObject(object Left, object Right);
    public static object MultiplyObject(object Left, object Right);
    public static object NegateObject(object Operand);
    public static object NotObject(object Operand);
    public static object OrObject(object Left, object Right);
    public static object PlusObject(object Operand);
    public static object RightShiftObject(object Operand, object Amount);
    public static object SubtractObject(object Left, object Right);
    public static object XorObject(object Left, object Right);
}
[AttributeUsageAttribute("2048")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute : Attribute {
}
[AttributeUsageAttribute("4")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.OptionTextAttribute : Attribute {
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.ProjectData : object {
    [SecuritySafeCriticalAttribute]
public static void ClearProjectError();
    [SecuritySafeCriticalAttribute]
public static void SetProjectError(Exception ex);
    [SecuritySafeCriticalAttribute]
public static void SetProjectError(Exception ex, int lErl);
}
[AttributeUsageAttribute("4")]
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute : Attribute {
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag : object {
    public short State;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.VisualBasic.CompilerServices.Utils : object {
    public static Array CopyArray(Array arySrc, Array aryDest);
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Constants : object {
    public static string vbBack;
    public static string vbCr;
    public static string vbCrLf;
    public static string vbFormFeed;
    public static string vbLf;
    [ObsoleteAttribute("For a carriage return and line feed, use vbCrLf.  For the current platform's newline, use System.Environment.NewLine.")]
public static string vbNewLine;
    public static string vbNullChar;
    public static string vbNullString;
    public static string vbTab;
    public static string vbVerticalTab;
}
[AttributeUsageAttribute("4")]
public class Microsoft.VisualBasic.HideModuleNameAttribute : Attribute {
}
[StandardModuleAttribute]
public class Microsoft.VisualBasic.Strings : object {
    public static int AscW(char String);
    public static int AscW(string String);
    public static char ChrW(int CharCode);
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
