public enum System.Data.AcceptRejectRule : Enum {
    public int value__;
    public static AcceptRejectRule Cascade;
    public static AcceptRejectRule None;
}
[FlagsAttribute]
public enum System.Data.CommandBehavior : Enum {
    public int value__;
    public static CommandBehavior CloseConnection;
    public static CommandBehavior Default;
    public static CommandBehavior KeyInfo;
    public static CommandBehavior SchemaOnly;
    public static CommandBehavior SequentialAccess;
    public static CommandBehavior SingleResult;
    public static CommandBehavior SingleRow;
}
public enum System.Data.CommandType : Enum {
    public int value__;
    public static CommandType StoredProcedure;
    public static CommandType TableDirect;
    public static CommandType Text;
}
public enum System.Data.Common.CatalogLocation : Enum {
    public int value__;
    public static CatalogLocation End;
    public static CatalogLocation Start;
}
public class System.Data.Common.DataAdapter : Component {
    [DefaultValueAttribute("True")]
public bool AcceptChangesDuringFill { get; public set; }
    [DefaultValueAttribute("True")]
public bool AcceptChangesDuringUpdate { get; public set; }
    [DefaultValueAttribute("False")]
public bool ContinueUpdateOnError { get; public set; }
    [RefreshPropertiesAttribute("1")]
public LoadOption FillLoadOption { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MissingMappingAction MissingMappingAction { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MissingSchemaAction MissingSchemaAction { get; public set; }
    [DefaultValueAttribute("False")]
public bool ReturnProviderSpecificTypes { get; public set; }
    private ITableMappingCollection System.Data.IDataAdapter.TableMappings { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public DataTableMappingCollection TableMappings { get; }
    protected DataAdapter(DataAdapter from);
    public bool get_AcceptChangesDuringFill();
    public void set_AcceptChangesDuringFill(bool value);
    public bool get_AcceptChangesDuringUpdate();
    public void set_AcceptChangesDuringUpdate(bool value);
    public bool get_ContinueUpdateOnError();
    public void set_ContinueUpdateOnError(bool value);
    public LoadOption get_FillLoadOption();
    public void set_FillLoadOption(LoadOption value);
    public sealed virtual MissingMappingAction get_MissingMappingAction();
    public sealed virtual void set_MissingMappingAction(MissingMappingAction value);
    public sealed virtual MissingSchemaAction get_MissingSchemaAction();
    public sealed virtual void set_MissingSchemaAction(MissingSchemaAction value);
    public virtual bool get_ReturnProviderSpecificTypes();
    public virtual void set_ReturnProviderSpecificTypes(bool value);
    private sealed virtual override ITableMappingCollection System.Data.IDataAdapter.get_TableMappings();
    public DataTableMappingCollection get_TableMappings();
    public void add_FillError(FillErrorEventHandler value);
    public void remove_FillError(FillErrorEventHandler value);
    [ObsoleteAttribute("CloneInternals() has been deprecated.  Use the DataAdapter(DataAdapter from) constructor.  http://go.microsoft.com/fwlink/?linkid=14202")]
protected virtual DataAdapter CloneInternals();
    protected virtual DataTableMappingCollection CreateTableMappings();
    protected virtual void Dispose(bool disposing);
    public virtual int Fill(DataSet dataSet);
    protected virtual int Fill(DataSet dataSet, string srcTable, IDataReader dataReader, int startRecord, int maxRecords);
    protected virtual int Fill(DataTable dataTable, IDataReader dataReader);
    protected virtual int Fill(DataTable[] dataTables, IDataReader dataReader, int startRecord, int maxRecords);
    public virtual DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType);
    protected virtual DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType, string srcTable, IDataReader dataReader);
    protected virtual DataTable FillSchema(DataTable dataTable, SchemaType schemaType, IDataReader dataReader);
    [EditorBrowsableAttribute("2")]
public virtual IDataParameter[] GetFillParameters();
    protected bool HasTableMappings();
    protected virtual void OnFillError(FillErrorEventArgs value);
    [EditorBrowsableAttribute("1")]
public void ResetFillLoadOption();
    [EditorBrowsableAttribute("1")]
public virtual bool ShouldSerializeAcceptChangesDuringFill();
    [EditorBrowsableAttribute("1")]
public virtual bool ShouldSerializeFillLoadOption();
    protected virtual bool ShouldSerializeTableMappings();
    public virtual int Update(DataSet dataSet);
}
public class System.Data.Common.DataColumnMapping : MarshalByRefObject {
    [DefaultValueAttribute("")]
public string DataSetColumn { get; public set; }
    [DefaultValueAttribute("")]
public string SourceColumn { get; public set; }
    public DataColumnMapping(string sourceColumn, string dataSetColumn);
    public sealed virtual string get_DataSetColumn();
    public sealed virtual void set_DataSetColumn(string value);
    public sealed virtual string get_SourceColumn();
    public sealed virtual void set_SourceColumn(string value);
    [EditorBrowsableAttribute("2")]
public DataColumn GetDataColumnBySchemaAction(DataTable dataTable, Type dataType, MissingSchemaAction schemaAction);
    [EditorBrowsableAttribute("2")]
public static DataColumn GetDataColumnBySchemaAction(string sourceColumn, string dataSetColumn, DataTable dataTable, Type dataType, MissingSchemaAction schemaAction);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
public class System.Data.Common.DataColumnMappingCollection : MarshalByRefObject {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int Count { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataColumnMapping Item { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataColumnMapping Item { get; public set; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private object System.Data.IColumnMappingCollection.Item { get; private set; }
    public sealed virtual int get_Count();
    public DataColumnMapping get_Item(int index);
    public void set_Item(int index, DataColumnMapping value);
    public DataColumnMapping get_Item(string sourceColumn);
    public void set_Item(string sourceColumn, DataColumnMapping value);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override object System.Data.IColumnMappingCollection.get_Item(string index);
    private sealed virtual override void System.Data.IColumnMappingCollection.set_Item(string index, object value);
    public sealed virtual int Add(object value);
    public DataColumnMapping Add(string sourceColumn, string dataSetColumn);
    public void AddRange(Array values);
    public void AddRange(DataColumnMapping[] values);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual bool Contains(string value);
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(DataColumnMapping[] array, int index);
    public DataColumnMapping GetByDataSetColumn(string value);
    [EditorBrowsableAttribute("2")]
public static DataColumnMapping GetColumnMappingBySchemaAction(DataColumnMappingCollection columnMappings, string sourceColumn, MissingMappingAction mappingAction);
    [EditorBrowsableAttribute("2")]
public static DataColumn GetDataColumn(DataColumnMappingCollection columnMappings, string sourceColumn, Type dataType, DataTable dataTable, MissingMappingAction mappingAction, MissingSchemaAction schemaAction);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual int IndexOf(object value);
    public sealed virtual int IndexOf(string sourceColumn);
    public int IndexOfDataSetColumn(string dataSetColumn);
    public void Insert(int index, DataColumnMapping value);
    public sealed virtual void Insert(int index, object value);
    public void Remove(DataColumnMapping value);
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void RemoveAt(string sourceColumn);
    private sealed virtual override IColumnMapping System.Data.IColumnMappingCollection.Add(string sourceColumnName, string dataSetColumnName);
    private sealed virtual override IColumnMapping System.Data.IColumnMappingCollection.GetByDataSetColumn(string dataSetColumnName);
}
public class System.Data.Common.DataTableMapping : MarshalByRefObject {
    [DesignerSerializationVisibilityAttribute("2")]
public DataColumnMappingCollection ColumnMappings { get; }
    [DefaultValueAttribute("")]
public string DataSetTable { get; public set; }
    [DefaultValueAttribute("")]
public string SourceTable { get; public set; }
    private IColumnMappingCollection System.Data.ITableMapping.ColumnMappings { get; }
    public DataTableMapping(string sourceTable, string dataSetTable);
    public DataTableMapping(string sourceTable, string dataSetTable, DataColumnMapping[] columnMappings);
    public DataColumnMappingCollection get_ColumnMappings();
    public sealed virtual string get_DataSetTable();
    public sealed virtual void set_DataSetTable(string value);
    public sealed virtual string get_SourceTable();
    public sealed virtual void set_SourceTable(string value);
    private sealed virtual override IColumnMappingCollection System.Data.ITableMapping.get_ColumnMappings();
    [EditorBrowsableAttribute("2")]
public DataColumnMapping GetColumnMappingBySchemaAction(string sourceColumn, MissingMappingAction mappingAction);
    [EditorBrowsableAttribute("2")]
public DataColumn GetDataColumn(string sourceColumn, Type dataType, DataTable dataTable, MissingMappingAction mappingAction, MissingSchemaAction schemaAction);
    [EditorBrowsableAttribute("2")]
public DataTable GetDataTableBySchemaAction(DataSet dataSet, MissingSchemaAction schemaAction);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
[ListBindableAttribute("False")]
public class System.Data.Common.DataTableMappingCollection : MarshalByRefObject {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int Count { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataTableMapping Item { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataTableMapping Item { get; public set; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private object System.Data.ITableMappingCollection.Item { get; private set; }
    public sealed virtual int get_Count();
    public DataTableMapping get_Item(int index);
    public void set_Item(int index, DataTableMapping value);
    public DataTableMapping get_Item(string sourceTable);
    public void set_Item(string sourceTable, DataTableMapping value);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override object System.Data.ITableMappingCollection.get_Item(string index);
    private sealed virtual override void System.Data.ITableMappingCollection.set_Item(string index, object value);
    public sealed virtual int Add(object value);
    public DataTableMapping Add(string sourceTable, string dataSetTable);
    public void AddRange(Array values);
    public void AddRange(DataTableMapping[] values);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(object value);
    public sealed virtual bool Contains(string value);
    public sealed virtual void CopyTo(Array array, int index);
    public void CopyTo(DataTableMapping[] array, int index);
    public DataTableMapping GetByDataSetTable(string dataSetTable);
    public sealed virtual IEnumerator GetEnumerator();
    [EditorBrowsableAttribute("2")]
public static DataTableMapping GetTableMappingBySchemaAction(DataTableMappingCollection tableMappings, string sourceTable, string dataSetTable, MissingMappingAction mappingAction);
    public sealed virtual int IndexOf(object value);
    public sealed virtual int IndexOf(string sourceTable);
    public int IndexOfDataSetTable(string dataSetTable);
    public void Insert(int index, DataTableMapping value);
    public sealed virtual void Insert(int index, object value);
    public void Remove(DataTableMapping value);
    public sealed virtual void Remove(object value);
    public sealed virtual void RemoveAt(int index);
    public sealed virtual void RemoveAt(string sourceTable);
    private sealed virtual override ITableMapping System.Data.ITableMappingCollection.Add(string sourceTableName, string dataSetTableName);
    private sealed virtual override ITableMapping System.Data.ITableMappingCollection.GetByDataSetTable(string dataSetTableName);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Data.Common.DbColumn : object {
    public Nullable`1<bool> AllowDBNull { get; protected set; }
    public string BaseCatalogName { get; protected set; }
    public string BaseColumnName { get; protected set; }
    public string BaseSchemaName { get; protected set; }
    public string BaseServerName { get; protected set; }
    public string BaseTableName { get; protected set; }
    public string ColumnName { get; protected set; }
    public Nullable`1<int> ColumnOrdinal { get; protected set; }
    public Nullable`1<int> ColumnSize { get; protected set; }
    public Nullable`1<bool> IsAliased { get; protected set; }
    public Nullable`1<bool> IsAutoIncrement { get; protected set; }
    public Nullable`1<bool> IsExpression { get; protected set; }
    public Nullable`1<bool> IsHidden { get; protected set; }
    public Nullable`1<bool> IsIdentity { get; protected set; }
    public Nullable`1<bool> IsKey { get; protected set; }
    public Nullable`1<bool> IsLong { get; protected set; }
    public Nullable`1<bool> IsReadOnly { get; protected set; }
    public Nullable`1<bool> IsUnique { get; protected set; }
    public Nullable`1<int> NumericPrecision { get; protected set; }
    public Nullable`1<int> NumericScale { get; protected set; }
    public string UdtAssemblyQualifiedName { get; protected set; }
    public Type DataType { get; protected set; }
    public string DataTypeName { get; protected set; }
    public object Item { get; }
    public Nullable`1<bool> get_AllowDBNull();
    protected void set_AllowDBNull(Nullable`1<bool> value);
    public string get_BaseCatalogName();
    protected void set_BaseCatalogName(string value);
    public string get_BaseColumnName();
    protected void set_BaseColumnName(string value);
    public string get_BaseSchemaName();
    protected void set_BaseSchemaName(string value);
    public string get_BaseServerName();
    protected void set_BaseServerName(string value);
    public string get_BaseTableName();
    protected void set_BaseTableName(string value);
    public string get_ColumnName();
    protected void set_ColumnName(string value);
    public Nullable`1<int> get_ColumnOrdinal();
    protected void set_ColumnOrdinal(Nullable`1<int> value);
    public Nullable`1<int> get_ColumnSize();
    protected void set_ColumnSize(Nullable`1<int> value);
    public Nullable`1<bool> get_IsAliased();
    protected void set_IsAliased(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsAutoIncrement();
    protected void set_IsAutoIncrement(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsExpression();
    protected void set_IsExpression(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsHidden();
    protected void set_IsHidden(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsIdentity();
    protected void set_IsIdentity(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsKey();
    protected void set_IsKey(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsLong();
    protected void set_IsLong(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsReadOnly();
    protected void set_IsReadOnly(Nullable`1<bool> value);
    public Nullable`1<bool> get_IsUnique();
    protected void set_IsUnique(Nullable`1<bool> value);
    public Nullable`1<int> get_NumericPrecision();
    protected void set_NumericPrecision(Nullable`1<int> value);
    public Nullable`1<int> get_NumericScale();
    protected void set_NumericScale(Nullable`1<int> value);
    public string get_UdtAssemblyQualifiedName();
    protected void set_UdtAssemblyQualifiedName(string value);
    public Type get_DataType();
    protected void set_DataType(Type value);
    public string get_DataTypeName();
    protected void set_DataTypeName(string value);
    public virtual object get_Item(string property);
}
public abstract class System.Data.Common.DbCommand : Component {
    [DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
public string CommandText { get; public set; }
    public int CommandTimeout { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[RefreshPropertiesAttribute("1")]
public CommandType CommandType { get; public set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public DbConnection Connection { get; public set; }
    protected DbConnection DbConnection { get; protected set; }
    protected DbParameterCollection DbParameterCollection { get; }
    protected DbTransaction DbTransaction { get; protected set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("True")]
[DesignOnlyAttribute("True")]
[EditorBrowsableAttribute("1")]
public bool DesignTimeVisible { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DbParameterCollection Parameters { get; }
    private IDbConnection System.Data.IDbCommand.Connection { get; private set; }
    private IDataParameterCollection System.Data.IDbCommand.Parameters { get; }
    private IDbTransaction System.Data.IDbCommand.Transaction { get; private set; }
    [BrowsableAttribute("False")]
[DefaultValueAttribute("")]
[DesignerSerializationVisibilityAttribute("0")]
public DbTransaction Transaction { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public UpdateRowSource UpdatedRowSource { get; public set; }
    public abstract virtual string get_CommandText();
    public abstract virtual void set_CommandText(string value);
    public abstract virtual int get_CommandTimeout();
    public abstract virtual void set_CommandTimeout(int value);
    public abstract virtual CommandType get_CommandType();
    public abstract virtual void set_CommandType(CommandType value);
    public DbConnection get_Connection();
    public void set_Connection(DbConnection value);
    protected abstract virtual DbConnection get_DbConnection();
    protected abstract virtual void set_DbConnection(DbConnection value);
    protected abstract virtual DbParameterCollection get_DbParameterCollection();
    protected abstract virtual DbTransaction get_DbTransaction();
    protected abstract virtual void set_DbTransaction(DbTransaction value);
    public abstract virtual bool get_DesignTimeVisible();
    public abstract virtual void set_DesignTimeVisible(bool value);
    public DbParameterCollection get_Parameters();
    private sealed virtual override IDbConnection System.Data.IDbCommand.get_Connection();
    private sealed virtual override void System.Data.IDbCommand.set_Connection(IDbConnection value);
    private sealed virtual override IDataParameterCollection System.Data.IDbCommand.get_Parameters();
    private sealed virtual override IDbTransaction System.Data.IDbCommand.get_Transaction();
    private sealed virtual override void System.Data.IDbCommand.set_Transaction(IDbTransaction value);
    public DbTransaction get_Transaction();
    public void set_Transaction(DbTransaction value);
    public abstract virtual UpdateRowSource get_UpdatedRowSource();
    public abstract virtual void set_UpdatedRowSource(UpdateRowSource value);
    public abstract virtual void Cancel();
    protected abstract virtual DbParameter CreateDbParameter();
    public DbParameter CreateParameter();
    protected abstract virtual DbDataReader ExecuteDbDataReader(CommandBehavior behavior);
    protected virtual Task`1<DbDataReader> ExecuteDbDataReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public abstract virtual int ExecuteNonQuery();
    public Task`1<int> ExecuteNonQueryAsync();
    public virtual Task`1<int> ExecuteNonQueryAsync(CancellationToken cancellationToken);
    public DbDataReader ExecuteReader();
    public DbDataReader ExecuteReader(CommandBehavior behavior);
    public Task`1<DbDataReader> ExecuteReaderAsync();
    public Task`1<DbDataReader> ExecuteReaderAsync(CommandBehavior behavior);
    public Task`1<DbDataReader> ExecuteReaderAsync(CommandBehavior behavior, CancellationToken cancellationToken);
    public Task`1<DbDataReader> ExecuteReaderAsync(CancellationToken cancellationToken);
    public abstract virtual object ExecuteScalar();
    public Task`1<object> ExecuteScalarAsync();
    public virtual Task`1<object> ExecuteScalarAsync(CancellationToken cancellationToken);
    public abstract virtual void Prepare();
    private sealed virtual override IDbDataParameter System.Data.IDbCommand.CreateParameter();
    private sealed virtual override IDataReader System.Data.IDbCommand.ExecuteReader();
    private sealed virtual override IDataReader System.Data.IDbCommand.ExecuteReader(CommandBehavior behavior);
}
public abstract class System.Data.Common.DbCommandBuilder : Component {
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public CatalogLocation CatalogLocation { get; public set; }
    [DefaultValueAttribute(".")]
public string CatalogSeparator { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public ConflictOption ConflictOption { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DbDataAdapter DataAdapter { get; public set; }
    [DefaultValueAttribute("")]
public string QuotePrefix { get; public set; }
    [DefaultValueAttribute("")]
public string QuoteSuffix { get; public set; }
    [DefaultValueAttribute(".")]
public string SchemaSeparator { get; public set; }
    [DefaultValueAttribute("False")]
public bool SetAllValues { get; public set; }
    public virtual CatalogLocation get_CatalogLocation();
    public virtual void set_CatalogLocation(CatalogLocation value);
    public virtual string get_CatalogSeparator();
    public virtual void set_CatalogSeparator(string value);
    public virtual ConflictOption get_ConflictOption();
    public virtual void set_ConflictOption(ConflictOption value);
    public DbDataAdapter get_DataAdapter();
    public void set_DataAdapter(DbDataAdapter value);
    public virtual string get_QuotePrefix();
    public virtual void set_QuotePrefix(string value);
    public virtual string get_QuoteSuffix();
    public virtual void set_QuoteSuffix(string value);
    public virtual string get_SchemaSeparator();
    public virtual void set_SchemaSeparator(string value);
    public bool get_SetAllValues();
    public void set_SetAllValues(bool value);
    protected abstract virtual void ApplyParameterInfo(DbParameter parameter, DataRow row, StatementType statementType, bool whereClause);
    protected virtual void Dispose(bool disposing);
    public DbCommand GetDeleteCommand();
    public DbCommand GetDeleteCommand(bool useColumnsForParameterNames);
    public DbCommand GetInsertCommand();
    public DbCommand GetInsertCommand(bool useColumnsForParameterNames);
    protected abstract virtual string GetParameterName(int parameterOrdinal);
    protected abstract virtual string GetParameterName(string parameterName);
    protected abstract virtual string GetParameterPlaceholder(int parameterOrdinal);
    protected virtual DataTable GetSchemaTable(DbCommand sourceCommand);
    public DbCommand GetUpdateCommand();
    public DbCommand GetUpdateCommand(bool useColumnsForParameterNames);
    protected virtual DbCommand InitializeCommand(DbCommand command);
    public virtual string QuoteIdentifier(string unquotedIdentifier);
    public virtual void RefreshSchema();
    protected void RowUpdatingHandler(RowUpdatingEventArgs rowUpdatingEvent);
    protected abstract virtual void SetRowUpdatingHandler(DbDataAdapter adapter);
    public virtual string UnquoteIdentifier(string quotedIdentifier);
}
public abstract class System.Data.Common.DbConnection : Component {
    [DefaultValueAttribute("")]
[RecommendedAsConfigurableAttribute("True")]
[RefreshPropertiesAttribute("1")]
[SettingsBindableAttribute("True")]
public string ConnectionString { get; public set; }
    public int ConnectionTimeout { get; }
    public string Database { get; }
    public string DataSource { get; }
    protected DbProviderFactory DbProviderFactory { get; }
    [BrowsableAttribute("False")]
public string ServerVersion { get; }
    [BrowsableAttribute("False")]
public ConnectionState State { get; }
    public abstract virtual string get_ConnectionString();
    public abstract virtual void set_ConnectionString(string value);
    public virtual int get_ConnectionTimeout();
    public abstract virtual string get_Database();
    public abstract virtual string get_DataSource();
    protected virtual DbProviderFactory get_DbProviderFactory();
    public abstract virtual string get_ServerVersion();
    public abstract virtual ConnectionState get_State();
    public virtual void add_StateChange(StateChangeEventHandler value);
    public virtual void remove_StateChange(StateChangeEventHandler value);
    protected abstract virtual DbTransaction BeginDbTransaction(IsolationLevel isolationLevel);
    public DbTransaction BeginTransaction();
    public DbTransaction BeginTransaction(IsolationLevel isolationLevel);
    public abstract virtual void ChangeDatabase(string databaseName);
    public abstract virtual void Close();
    public DbCommand CreateCommand();
    protected abstract virtual DbCommand CreateDbCommand();
    public virtual void EnlistTransaction(Transaction transaction);
    public virtual DataTable GetSchema();
    public virtual DataTable GetSchema(string collectionName);
    public virtual DataTable GetSchema(string collectionName, String[] restrictionValues);
    protected virtual void OnStateChange(StateChangeEventArgs stateChange);
    public abstract virtual void Open();
    public Task OpenAsync();
    public virtual Task OpenAsync(CancellationToken cancellationToken);
    private sealed virtual override IDbTransaction System.Data.IDbConnection.BeginTransaction();
    private sealed virtual override IDbTransaction System.Data.IDbConnection.BeginTransaction(IsolationLevel isolationLevel);
    private sealed virtual override IDbCommand System.Data.IDbConnection.CreateCommand();
}
[DefaultMemberAttribute("Item")]
public class System.Data.Common.DbConnectionStringBuilder : object {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[DesignOnlyAttribute("True")]
[EditorBrowsableAttribute("1")]
public bool BrowsableConnectionString { get; public set; }
    [RefreshPropertiesAttribute("1")]
public string ConnectionString { get; public set; }
    [BrowsableAttribute("False")]
public int Count { get; }
    [BrowsableAttribute("False")]
public bool IsFixedSize { get; }
    [BrowsableAttribute("False")]
public bool IsReadOnly { get; }
    [BrowsableAttribute("False")]
public object Item { get; public set; }
    [BrowsableAttribute("False")]
public ICollection Keys { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private object System.Collections.IDictionary.Item { get; private set; }
    [BrowsableAttribute("False")]
public ICollection Values { get; }
    public DbConnectionStringBuilder(bool useOdbcRules);
    public bool get_BrowsableConnectionString();
    public void set_BrowsableConnectionString(bool value);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public virtual int get_Count();
    public virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public virtual object get_Item(string keyword);
    public virtual void set_Item(string keyword, object value);
    public virtual ICollection get_Keys();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override object System.Collections.IDictionary.get_Item(object keyword);
    private sealed virtual override void System.Collections.IDictionary.set_Item(object keyword, object value);
    public virtual ICollection get_Values();
    public void Add(string keyword, object value);
    public static void AppendKeyValuePair(StringBuilder builder, string keyword, string value);
    public static void AppendKeyValuePair(StringBuilder builder, string keyword, string value, bool useOdbcRules);
    public virtual void Clear();
    protected internal void ClearPropertyDescriptors();
    public virtual bool ContainsKey(string keyword);
    public virtual bool EquivalentTo(DbConnectionStringBuilder connectionStringBuilder);
    protected virtual void GetProperties(Hashtable propertyDescriptors);
    public virtual bool Remove(string keyword);
    public virtual bool ShouldSerialize(string keyword);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override void System.Collections.IDictionary.Add(object keyword, object value);
    private sealed virtual override bool System.Collections.IDictionary.Contains(object keyword);
    private sealed virtual override IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator();
    private sealed virtual override void System.Collections.IDictionary.Remove(object keyword);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
    public virtual string ToString();
    public virtual bool TryGetValue(string keyword, Object& value);
}
public abstract class System.Data.Common.DbDataAdapter : DataAdapter {
    public static string DefaultSourceTableName;
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DbCommand DeleteCommand { get; public set; }
    protected internal CommandBehavior FillCommandBehavior { get; protected internal set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DbCommand InsertCommand { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DbCommand SelectCommand { get; public set; }
    private IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; private set; }
    private IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; private set; }
    private IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; private set; }
    private IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; private set; }
    [DefaultValueAttribute("1")]
public int UpdateBatchSize { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DbCommand UpdateCommand { get; public set; }
    protected DbDataAdapter(DbDataAdapter adapter);
    public DbCommand get_DeleteCommand();
    public void set_DeleteCommand(DbCommand value);
    protected internal CommandBehavior get_FillCommandBehavior();
    protected internal void set_FillCommandBehavior(CommandBehavior value);
    public DbCommand get_InsertCommand();
    public void set_InsertCommand(DbCommand value);
    public DbCommand get_SelectCommand();
    public void set_SelectCommand(DbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_DeleteCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_DeleteCommand(IDbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_InsertCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_InsertCommand(IDbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_SelectCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_SelectCommand(IDbCommand value);
    private sealed virtual override IDbCommand System.Data.IDbDataAdapter.get_UpdateCommand();
    private sealed virtual override void System.Data.IDbDataAdapter.set_UpdateCommand(IDbCommand value);
    public virtual int get_UpdateBatchSize();
    public virtual void set_UpdateBatchSize(int value);
    public DbCommand get_UpdateCommand();
    public void set_UpdateCommand(DbCommand value);
    protected virtual int AddToBatch(IDbCommand command);
    protected virtual void ClearBatch();
    protected virtual RowUpdatedEventArgs CreateRowUpdatedEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual RowUpdatingEventArgs CreateRowUpdatingEvent(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual void Dispose(bool disposing);
    protected virtual int ExecuteBatch();
    public virtual int Fill(DataSet dataSet);
    public int Fill(DataSet dataSet, int startRecord, int maxRecords, string srcTable);
    protected virtual int Fill(DataSet dataSet, int startRecord, int maxRecords, string srcTable, IDbCommand command, CommandBehavior behavior);
    public int Fill(DataSet dataSet, string srcTable);
    public int Fill(DataTable dataTable);
    protected virtual int Fill(DataTable dataTable, IDbCommand command, CommandBehavior behavior);
    protected virtual int Fill(DataTable[] dataTables, int startRecord, int maxRecords, IDbCommand command, CommandBehavior behavior);
    public int Fill(int startRecord, int maxRecords, DataTable[] dataTables);
    public virtual DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType);
    protected virtual DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType, IDbCommand command, string srcTable, CommandBehavior behavior);
    public DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType, string srcTable);
    public DataTable FillSchema(DataTable dataTable, SchemaType schemaType);
    protected virtual DataTable FillSchema(DataTable dataTable, SchemaType schemaType, IDbCommand command, CommandBehavior behavior);
    protected virtual IDataParameter GetBatchedParameter(int commandIdentifier, int parameterIndex);
    protected virtual bool GetBatchedRecordsAffected(int commandIdentifier, Int32& recordsAffected, Exception& error);
    [EditorBrowsableAttribute("2")]
public virtual IDataParameter[] GetFillParameters();
    protected virtual void InitializeBatching();
    protected virtual void OnRowUpdated(RowUpdatedEventArgs value);
    protected virtual void OnRowUpdating(RowUpdatingEventArgs value);
    private sealed virtual override object System.ICloneable.Clone();
    protected virtual void TerminateBatching();
    public int Update(DataRow[] dataRows);
    protected virtual int Update(DataRow[] dataRows, DataTableMapping tableMapping);
    public virtual int Update(DataSet dataSet);
    public int Update(DataSet dataSet, string srcTable);
    public int Update(DataTable dataTable);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Data.Common.DbDataReader : MarshalByRefObject {
    public int Depth { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public object Item { get; }
    public object Item { get; }
    public int RecordsAffected { get; }
    public int VisibleFieldCount { get; }
    public abstract virtual int get_Depth();
    public abstract virtual int get_FieldCount();
    public abstract virtual bool get_HasRows();
    public abstract virtual bool get_IsClosed();
    public abstract virtual object get_Item(int ordinal);
    public abstract virtual object get_Item(string name);
    public abstract virtual int get_RecordsAffected();
    public virtual int get_VisibleFieldCount();
    public virtual void Close();
    [EditorBrowsableAttribute("1")]
public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual bool GetBoolean(int ordinal);
    public abstract virtual byte GetByte(int ordinal);
    public abstract virtual long GetBytes(int ordinal, long dataOffset, Byte[] buffer, int bufferOffset, int length);
    public abstract virtual char GetChar(int ordinal);
    public abstract virtual long GetChars(int ordinal, long dataOffset, Char[] buffer, int bufferOffset, int length);
    [EditorBrowsableAttribute("1")]
public DbDataReader GetData(int ordinal);
    public abstract virtual string GetDataTypeName(int ordinal);
    public abstract virtual DateTime GetDateTime(int ordinal);
    protected virtual DbDataReader GetDbDataReader(int ordinal);
    public abstract virtual decimal GetDecimal(int ordinal);
    public abstract virtual double GetDouble(int ordinal);
    [EditorBrowsableAttribute("1")]
public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual Type GetFieldType(int ordinal);
    public virtual T GetFieldValue(int ordinal);
    public Task`1<T> GetFieldValueAsync(int ordinal);
    public virtual Task`1<T> GetFieldValueAsync(int ordinal, CancellationToken cancellationToken);
    public abstract virtual float GetFloat(int ordinal);
    public abstract virtual Guid GetGuid(int ordinal);
    public abstract virtual short GetInt16(int ordinal);
    public abstract virtual int GetInt32(int ordinal);
    public abstract virtual long GetInt64(int ordinal);
    public abstract virtual string GetName(int ordinal);
    public abstract virtual int GetOrdinal(string name);
    [EditorBrowsableAttribute("1")]
public virtual Type GetProviderSpecificFieldType(int ordinal);
    [EditorBrowsableAttribute("1")]
public virtual object GetProviderSpecificValue(int ordinal);
    [EditorBrowsableAttribute("1")]
public virtual int GetProviderSpecificValues(Object[] values);
    public virtual DataTable GetSchemaTable();
    public virtual Stream GetStream(int ordinal);
    public abstract virtual string GetString(int ordinal);
    public virtual TextReader GetTextReader(int ordinal);
    public abstract virtual object GetValue(int ordinal);
    public abstract virtual int GetValues(Object[] values);
    public abstract virtual bool IsDBNull(int ordinal);
    public Task`1<bool> IsDBNullAsync(int ordinal);
    public virtual Task`1<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken);
    public abstract virtual bool NextResult();
    public Task`1<bool> NextResultAsync();
    public virtual Task`1<bool> NextResultAsync(CancellationToken cancellationToken);
    public abstract virtual bool Read();
    public Task`1<bool> ReadAsync();
    public virtual Task`1<bool> ReadAsync(CancellationToken cancellationToken);
    private sealed virtual override IDataReader System.Data.IDataRecord.GetData(int ordinal);
}
[ExtensionAttribute]
public static class System.Data.Common.DbDataReaderExtensions : object {
    [ExtensionAttribute]
public static ReadOnlyCollection`1<DbColumn> GetColumnSchema(DbDataReader reader);
    [ExtensionAttribute]
public static bool CanGetColumnSchema(DbDataReader reader);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Data.Common.DbDataRecord : object {
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public abstract virtual int get_FieldCount();
    public abstract virtual object get_Item(int i);
    public abstract virtual object get_Item(string name);
    public abstract virtual bool GetBoolean(int i);
    public abstract virtual byte GetByte(int i);
    public abstract virtual long GetBytes(int i, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    public abstract virtual char GetChar(int i);
    public abstract virtual long GetChars(int i, long dataIndex, Char[] buffer, int bufferIndex, int length);
    public sealed virtual IDataReader GetData(int i);
    public abstract virtual string GetDataTypeName(int i);
    public abstract virtual DateTime GetDateTime(int i);
    protected virtual DbDataReader GetDbDataReader(int i);
    public abstract virtual decimal GetDecimal(int i);
    public abstract virtual double GetDouble(int i);
    public abstract virtual Type GetFieldType(int i);
    public abstract virtual float GetFloat(int i);
    public abstract virtual Guid GetGuid(int i);
    public abstract virtual short GetInt16(int i);
    public abstract virtual int GetInt32(int i);
    public abstract virtual long GetInt64(int i);
    public abstract virtual string GetName(int i);
    public abstract virtual int GetOrdinal(string name);
    public abstract virtual string GetString(int i);
    public abstract virtual object GetValue(int i);
    public abstract virtual int GetValues(Object[] values);
    public abstract virtual bool IsDBNull(int i);
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
public abstract class System.Data.Common.DbDataSourceEnumerator : object {
    public abstract virtual DataTable GetDataSources();
}
public class System.Data.Common.DbEnumerator : object {
    public object Current { get; }
    public DbEnumerator(DbDataReader reader);
    public DbEnumerator(DbDataReader reader, bool closeReader);
    public DbEnumerator(IDataReader reader);
    public DbEnumerator(IDataReader reader, bool closeReader);
    public sealed virtual object get_Current();
    public sealed virtual bool MoveNext();
    [EditorBrowsableAttribute("1")]
public sealed virtual void Reset();
}
public abstract class System.Data.Common.DbException : ExternalException {
    protected DbException(SerializationInfo info, StreamingContext context);
    protected DbException(string message);
    protected DbException(string message, Exception innerException);
    protected DbException(string message, int errorCode);
}
public static class System.Data.Common.DbMetaDataCollectionNames : object {
    public static string DataSourceInformation;
    public static string DataTypes;
    public static string MetaDataCollections;
    public static string ReservedWords;
    public static string Restrictions;
}
public static class System.Data.Common.DbMetaDataColumnNames : object {
    public static string CollectionName;
    public static string ColumnSize;
    public static string CompositeIdentifierSeparatorPattern;
    public static string CreateFormat;
    public static string CreateParameters;
    public static string DataSourceProductName;
    public static string DataSourceProductVersion;
    public static string DataSourceProductVersionNormalized;
    public static string DataType;
    public static string GroupByBehavior;
    public static string IdentifierCase;
    public static string IdentifierPattern;
    public static string IsAutoIncrementable;
    public static string IsBestMatch;
    public static string IsCaseSensitive;
    public static string IsConcurrencyType;
    public static string IsFixedLength;
    public static string IsFixedPrecisionScale;
    public static string IsLiteralSupported;
    public static string IsLong;
    public static string IsNullable;
    public static string IsSearchable;
    public static string IsSearchableWithLike;
    public static string IsUnsigned;
    public static string LiteralPrefix;
    public static string LiteralSuffix;
    public static string MaximumScale;
    public static string MinimumScale;
    public static string NumberOfIdentifierParts;
    public static string NumberOfRestrictions;
    public static string OrderByColumnsInSelect;
    public static string ParameterMarkerFormat;
    public static string ParameterMarkerPattern;
    public static string ParameterNameMaxLength;
    public static string ParameterNamePattern;
    public static string ProviderDbType;
    public static string QuotedIdentifierCase;
    public static string QuotedIdentifierPattern;
    public static string ReservedWord;
    public static string StatementSeparatorPattern;
    public static string StringLiteralPattern;
    public static string SupportedJoinOperators;
    public static string TypeName;
}
public abstract class System.Data.Common.DbParameter : MarshalByRefObject {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[RefreshPropertiesAttribute("1")]
public DbType DbType { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[RefreshPropertiesAttribute("1")]
public ParameterDirection Direction { get; public set; }
    [BrowsableAttribute("False")]
[DesignOnlyAttribute("True")]
[EditorBrowsableAttribute("1")]
public bool IsNullable { get; public set; }
    [DefaultValueAttribute("")]
public string ParameterName { get; public set; }
    public byte Precision { get; public set; }
    public byte Scale { get; public set; }
    public int Size { get; public set; }
    [DefaultValueAttribute("")]
public string SourceColumn { get; public set; }
    [DefaultValueAttribute("False")]
[EditorBrowsableAttribute("2")]
[RefreshPropertiesAttribute("1")]
public bool SourceColumnNullMapping { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataRowVersion SourceVersion { get; public set; }
    private byte System.Data.IDbDataParameter.Precision { get; private set; }
    private byte System.Data.IDbDataParameter.Scale { get; private set; }
    [DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
public object Value { get; public set; }
    public abstract virtual DbType get_DbType();
    public abstract virtual void set_DbType(DbType value);
    public abstract virtual ParameterDirection get_Direction();
    public abstract virtual void set_Direction(ParameterDirection value);
    public abstract virtual bool get_IsNullable();
    public abstract virtual void set_IsNullable(bool value);
    public abstract virtual string get_ParameterName();
    public abstract virtual void set_ParameterName(string value);
    public virtual byte get_Precision();
    public virtual void set_Precision(byte value);
    public virtual byte get_Scale();
    public virtual void set_Scale(byte value);
    public abstract virtual int get_Size();
    public abstract virtual void set_Size(int value);
    public abstract virtual string get_SourceColumn();
    public abstract virtual void set_SourceColumn(string value);
    public abstract virtual bool get_SourceColumnNullMapping();
    public abstract virtual void set_SourceColumnNullMapping(bool value);
    public virtual DataRowVersion get_SourceVersion();
    public virtual void set_SourceVersion(DataRowVersion value);
    private sealed virtual override byte System.Data.IDbDataParameter.get_Precision();
    private sealed virtual override void System.Data.IDbDataParameter.set_Precision(byte value);
    private sealed virtual override byte System.Data.IDbDataParameter.get_Scale();
    private sealed virtual override void System.Data.IDbDataParameter.set_Scale(byte value);
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
    [EditorBrowsableAttribute("2")]
public abstract virtual void ResetDbType();
}
[DefaultMemberAttribute("Item")]
public abstract class System.Data.Common.DbParameterCollection : MarshalByRefObject {
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int Count { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public bool IsFixedSize { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public bool IsReadOnly { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public bool IsSynchronized { get; }
    public DbParameter Item { get; public set; }
    public DbParameter Item { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
[EditorBrowsableAttribute("1")]
public object SyncRoot { get; }
    private object System.Collections.IList.Item { get; private set; }
    private object System.Data.IDataParameterCollection.Item { get; private set; }
    public abstract virtual int get_Count();
    public virtual bool get_IsFixedSize();
    public virtual bool get_IsReadOnly();
    public virtual bool get_IsSynchronized();
    public DbParameter get_Item(int index);
    public void set_Item(int index, DbParameter value);
    public DbParameter get_Item(string parameterName);
    public void set_Item(string parameterName, DbParameter value);
    public abstract virtual object get_SyncRoot();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override object System.Data.IDataParameterCollection.get_Item(string parameterName);
    private sealed virtual override void System.Data.IDataParameterCollection.set_Item(string parameterName, object value);
    public abstract virtual int Add(object value);
    public abstract virtual void AddRange(Array values);
    public abstract virtual void Clear();
    public abstract virtual bool Contains(object value);
    public abstract virtual bool Contains(string value);
    public abstract virtual void CopyTo(Array array, int index);
    [EditorBrowsableAttribute("1")]
public abstract virtual IEnumerator GetEnumerator();
    protected abstract virtual DbParameter GetParameter(int index);
    protected abstract virtual DbParameter GetParameter(string parameterName);
    public abstract virtual int IndexOf(object value);
    public abstract virtual int IndexOf(string parameterName);
    public abstract virtual void Insert(int index, object value);
    public abstract virtual void Remove(object value);
    public abstract virtual void RemoveAt(int index);
    public abstract virtual void RemoveAt(string parameterName);
    protected abstract virtual void SetParameter(int index, DbParameter value);
    protected abstract virtual void SetParameter(string parameterName, DbParameter value);
}
public abstract class System.Data.Common.DbProviderFactory : object {
    public bool CanCreateDataSourceEnumerator { get; }
    public virtual bool get_CanCreateDataSourceEnumerator();
    public virtual DbCommand CreateCommand();
    public virtual DbCommandBuilder CreateCommandBuilder();
    public virtual DbConnection CreateConnection();
    public virtual DbConnectionStringBuilder CreateConnectionStringBuilder();
    public virtual DbDataAdapter CreateDataAdapter();
    public virtual DbDataSourceEnumerator CreateDataSourceEnumerator();
    public virtual DbParameter CreateParameter();
}
[AttributeUsageAttribute("128")]
public class System.Data.Common.DbProviderSpecificTypePropertyAttribute : Attribute {
    public bool IsProviderSpecificTypeProperty { get; }
    public DbProviderSpecificTypePropertyAttribute(bool isProviderSpecificTypeProperty);
    public bool get_IsProviderSpecificTypeProperty();
}
public abstract class System.Data.Common.DbTransaction : MarshalByRefObject {
    public DbConnection Connection { get; }
    protected DbConnection DbConnection { get; }
    public IsolationLevel IsolationLevel { get; }
    private IDbConnection System.Data.IDbTransaction.Connection { get; }
    public DbConnection get_Connection();
    protected abstract virtual DbConnection get_DbConnection();
    public abstract virtual IsolationLevel get_IsolationLevel();
    private sealed virtual override IDbConnection System.Data.IDbTransaction.get_Connection();
    public abstract virtual void Commit();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual void Rollback();
}
public enum System.Data.Common.GroupByBehavior : Enum {
    public int value__;
    public static GroupByBehavior ExactMatch;
    public static GroupByBehavior MustContainAll;
    public static GroupByBehavior NotSupported;
    public static GroupByBehavior Unknown;
    public static GroupByBehavior Unrelated;
}
public interface System.Data.Common.IDbColumnSchemaGenerator {
    public abstract virtual ReadOnlyCollection`1<DbColumn> GetColumnSchema();
}
public enum System.Data.Common.IdentifierCase : Enum {
    public int value__;
    public static IdentifierCase Insensitive;
    public static IdentifierCase Sensitive;
    public static IdentifierCase Unknown;
}
public class System.Data.Common.RowUpdatedEventArgs : EventArgs {
    public IDbCommand Command { get; }
    public Exception Errors { get; public set; }
    public int RecordsAffected { get; }
    public DataRow Row { get; }
    public int RowCount { get; }
    public StatementType StatementType { get; }
    public UpdateStatus Status { get; public set; }
    public DataTableMapping TableMapping { get; }
    public RowUpdatedEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    public IDbCommand get_Command();
    public Exception get_Errors();
    public void set_Errors(Exception value);
    public int get_RecordsAffected();
    public DataRow get_Row();
    public int get_RowCount();
    public StatementType get_StatementType();
    public UpdateStatus get_Status();
    public void set_Status(UpdateStatus value);
    public DataTableMapping get_TableMapping();
    public void CopyToRows(DataRow[] array);
    public void CopyToRows(DataRow[] array, int arrayIndex);
}
public class System.Data.Common.RowUpdatingEventArgs : EventArgs {
    protected IDbCommand BaseCommand { get; protected set; }
    public IDbCommand Command { get; public set; }
    public Exception Errors { get; public set; }
    public DataRow Row { get; }
    public StatementType StatementType { get; }
    public UpdateStatus Status { get; public set; }
    public DataTableMapping TableMapping { get; }
    public RowUpdatingEventArgs(DataRow dataRow, IDbCommand command, StatementType statementType, DataTableMapping tableMapping);
    protected virtual IDbCommand get_BaseCommand();
    protected virtual void set_BaseCommand(IDbCommand value);
    public IDbCommand get_Command();
    public void set_Command(IDbCommand value);
    public Exception get_Errors();
    public void set_Errors(Exception value);
    public DataRow get_Row();
    public StatementType get_StatementType();
    public UpdateStatus get_Status();
    public void set_Status(UpdateStatus value);
    public DataTableMapping get_TableMapping();
}
public static class System.Data.Common.SchemaTableColumn : object {
    public static string AllowDBNull;
    public static string BaseColumnName;
    public static string BaseSchemaName;
    public static string BaseTableName;
    public static string ColumnName;
    public static string ColumnOrdinal;
    public static string ColumnSize;
    public static string DataType;
    public static string IsAliased;
    public static string IsExpression;
    public static string IsKey;
    public static string IsLong;
    public static string IsUnique;
    public static string NonVersionedProviderType;
    public static string NumericPrecision;
    public static string NumericScale;
    public static string ProviderType;
}
public static class System.Data.Common.SchemaTableOptionalColumn : object {
    public static string AutoIncrementSeed;
    public static string AutoIncrementStep;
    public static string BaseCatalogName;
    public static string BaseColumnNamespace;
    public static string BaseServerName;
    public static string BaseTableNamespace;
    public static string ColumnMapping;
    public static string DefaultValue;
    public static string Expression;
    public static string IsAutoIncrement;
    public static string IsHidden;
    public static string IsReadOnly;
    public static string IsRowVersion;
    public static string ProviderSpecificDataType;
}
[FlagsAttribute]
public enum System.Data.Common.SupportedJoinOperators : Enum {
    public int value__;
    public static SupportedJoinOperators FullOuter;
    public static SupportedJoinOperators Inner;
    public static SupportedJoinOperators LeftOuter;
    public static SupportedJoinOperators None;
    public static SupportedJoinOperators RightOuter;
}
public enum System.Data.ConflictOption : Enum {
    public int value__;
    public static ConflictOption CompareAllSearchableValues;
    public static ConflictOption CompareRowVersion;
    public static ConflictOption OverwriteChanges;
}
[FlagsAttribute]
public enum System.Data.ConnectionState : Enum {
    public int value__;
    public static ConnectionState Broken;
    public static ConnectionState Closed;
    public static ConnectionState Connecting;
    public static ConnectionState Executing;
    public static ConnectionState Fetching;
    public static ConnectionState Open;
}
[DefaultPropertyAttribute("ConstraintName")]
public abstract class System.Data.Constraint : object {
    [CLSCompliantAttribute("False")]
protected DataSet _DataSet { get; }
    [DefaultValueAttribute("")]
public string ConstraintName { get; public set; }
    [BrowsableAttribute("False")]
public PropertyCollection ExtendedProperties { get; }
    public DataTable Table { get; }
    protected virtual DataSet get__DataSet();
    public virtual string get_ConstraintName();
    public virtual void set_ConstraintName(string value);
    public PropertyCollection get_ExtendedProperties();
    public abstract virtual DataTable get_Table();
    protected void CheckStateForProperty();
    protected internal void SetDataSet(DataSet dataSet);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
[DefaultEventAttribute("CollectionChanged")]
public class System.Data.ConstraintCollection : InternalDataCollectionBase {
    public Constraint Item { get; }
    public Constraint Item { get; }
    protected ArrayList List { get; }
    public Constraint get_Item(int index);
    public Constraint get_Item(string name);
    protected virtual ArrayList get_List();
    public void add_CollectionChanged(CollectionChangeEventHandler value);
    public void remove_CollectionChanged(CollectionChangeEventHandler value);
    public void Add(Constraint constraint);
    public Constraint Add(string name, DataColumn column, bool primaryKey);
    public Constraint Add(string name, DataColumn primaryKeyColumn, DataColumn foreignKeyColumn);
    public Constraint Add(string name, DataColumn[] columns, bool primaryKey);
    public Constraint Add(string name, DataColumn[] primaryKeyColumns, DataColumn[] foreignKeyColumns);
    public void AddRange(Constraint[] constraints);
    public bool CanRemove(Constraint constraint);
    public void Clear();
    public bool Contains(string name);
    public void CopyTo(Constraint[] array, int index);
    public int IndexOf(Constraint constraint);
    public int IndexOf(string constraintName);
    public void Remove(Constraint constraint);
    public void Remove(string name);
    public void RemoveAt(int index);
}
public class System.Data.ConstraintException : DataException {
    protected ConstraintException(SerializationInfo info, StreamingContext context);
    public ConstraintException(string s);
    public ConstraintException(string message, Exception innerException);
}
[DefaultPropertyAttribute("ColumnName")]
[DesignTimeVisibleAttribute("False")]
[ToolboxItemAttribute("False")]
public class System.Data.DataColumn : MarshalByValueComponent {
    [DefaultValueAttribute("True")]
public bool AllowDBNull { get; public set; }
    [DefaultValueAttribute("False")]
[RefreshPropertiesAttribute("1")]
public bool AutoIncrement { get; public set; }
    [DefaultValueAttribute("0")]
public long AutoIncrementSeed { get; public set; }
    [DefaultValueAttribute("1")]
public long AutoIncrementStep { get; public set; }
    public string Caption { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MappingType ColumnMapping { get; public set; }
    [DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
public string ColumnName { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[RefreshPropertiesAttribute("1")]
public Type DataType { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[RefreshPropertiesAttribute("1")]
public DataSetDateTime DateTimeMode { get; public set; }
    public object DefaultValue { get; public set; }
    [DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
public string Expression { get; public set; }
    [BrowsableAttribute("False")]
public PropertyCollection ExtendedProperties { get; }
    [DefaultValueAttribute("-1")]
public int MaxLength { get; public set; }
    public string Namespace { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public int Ordinal { get; }
    [DefaultValueAttribute("")]
public string Prefix { get; public set; }
    [DefaultValueAttribute("False")]
public bool ReadOnly { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataTable Table { get; }
    [DefaultValueAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public bool Unique { get; public set; }
    public DataColumn(string columnName);
    public DataColumn(string columnName, Type dataType);
    public DataColumn(string columnName, Type dataType, string expr);
    public DataColumn(string columnName, Type dataType, string expr, MappingType type);
    public bool get_AllowDBNull();
    public void set_AllowDBNull(bool value);
    public bool get_AutoIncrement();
    public void set_AutoIncrement(bool value);
    public long get_AutoIncrementSeed();
    public void set_AutoIncrementSeed(long value);
    public long get_AutoIncrementStep();
    public void set_AutoIncrementStep(long value);
    public string get_Caption();
    public void set_Caption(string value);
    public virtual MappingType get_ColumnMapping();
    public virtual void set_ColumnMapping(MappingType value);
    public string get_ColumnName();
    public void set_ColumnName(string value);
    public Type get_DataType();
    public void set_DataType(Type value);
    public DataSetDateTime get_DateTimeMode();
    public void set_DateTimeMode(DataSetDateTime value);
    public object get_DefaultValue();
    public void set_DefaultValue(object value);
    public string get_Expression();
    public void set_Expression(string value);
    public PropertyCollection get_ExtendedProperties();
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public int get_Ordinal();
    public string get_Prefix();
    public void set_Prefix(string value);
    public bool get_ReadOnly();
    public void set_ReadOnly(bool value);
    public DataTable get_Table();
    public bool get_Unique();
    public void set_Unique(bool value);
    protected internal void CheckNotAllowNull();
    protected void CheckUnique();
    protected virtual void OnPropertyChanging(PropertyChangedEventArgs pcevent);
    protected internal void RaisePropertyChanging(string name);
    public void SetOrdinal(int ordinal);
    public virtual string ToString();
}
public class System.Data.DataColumnChangeEventArgs : EventArgs {
    public DataColumn Column { get; }
    public object ProposedValue { get; public set; }
    public DataRow Row { get; }
    public DataColumnChangeEventArgs(DataRow row, DataColumn column, object value);
    public DataColumn get_Column();
    public object get_ProposedValue();
    public void set_ProposedValue(object value);
    public DataRow get_Row();
}
public class System.Data.DataColumnChangeEventHandler : MulticastDelegate {
    public DataColumnChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataColumnChangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataColumnChangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
[DefaultEventAttribute("CollectionChanged")]
public class System.Data.DataColumnCollection : InternalDataCollectionBase {
    public DataColumn Item { get; }
    public DataColumn Item { get; }
    protected ArrayList List { get; }
    public DataColumn get_Item(int index);
    public DataColumn get_Item(string name);
    protected virtual ArrayList get_List();
    public void add_CollectionChanged(CollectionChangeEventHandler value);
    public void remove_CollectionChanged(CollectionChangeEventHandler value);
    public DataColumn Add();
    public void Add(DataColumn column);
    public DataColumn Add(string columnName);
    public DataColumn Add(string columnName, Type type);
    public DataColumn Add(string columnName, Type type, string expression);
    public void AddRange(DataColumn[] columns);
    public bool CanRemove(DataColumn column);
    public void Clear();
    public bool Contains(string name);
    public void CopyTo(DataColumn[] array, int index);
    public int IndexOf(DataColumn column);
    public int IndexOf(string columnName);
    public void Remove(DataColumn column);
    public void Remove(string name);
    public void RemoveAt(int index);
}
public class System.Data.DataException : SystemException {
    protected DataException(SerializationInfo info, StreamingContext context);
    public DataException(string s);
    public DataException(string s, Exception innerException);
}
[DefaultPropertyAttribute("RelationName")]
public class System.Data.DataRelation : object {
    public DataColumn[] ChildColumns { get; }
    public ForeignKeyConstraint ChildKeyConstraint { get; }
    public DataTable ChildTable { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataSet DataSet { get; }
    [BrowsableAttribute("False")]
public PropertyCollection ExtendedProperties { get; }
    [DefaultValueAttribute("False")]
public bool Nested { get; public set; }
    public DataColumn[] ParentColumns { get; }
    public UniqueConstraint ParentKeyConstraint { get; }
    public DataTable ParentTable { get; }
    [DefaultValueAttribute("")]
public string RelationName { get; public set; }
    public DataRelation(string relationName, DataColumn parentColumn, DataColumn childColumn);
    public DataRelation(string relationName, DataColumn parentColumn, DataColumn childColumn, bool createConstraints);
    public DataRelation(string relationName, DataColumn[] parentColumns, DataColumn[] childColumns);
    public DataRelation(string relationName, DataColumn[] parentColumns, DataColumn[] childColumns, bool createConstraints);
    [BrowsableAttribute("False")]
public DataRelation(string relationName, string parentTableName, string parentTableNamespace, string childTableName, string childTableNamespace, String[] parentColumnNames, String[] childColumnNames, bool nested);
    [BrowsableAttribute("False")]
public DataRelation(string relationName, string parentTableName, string childTableName, String[] parentColumnNames, String[] childColumnNames, bool nested);
    public virtual DataColumn[] get_ChildColumns();
    public virtual ForeignKeyConstraint get_ChildKeyConstraint();
    public virtual DataTable get_ChildTable();
    public virtual DataSet get_DataSet();
    public PropertyCollection get_ExtendedProperties();
    public virtual bool get_Nested();
    public virtual void set_Nested(bool value);
    public virtual DataColumn[] get_ParentColumns();
    public virtual UniqueConstraint get_ParentKeyConstraint();
    public virtual DataTable get_ParentTable();
    public virtual string get_RelationName();
    public virtual void set_RelationName(string value);
    protected void CheckStateForProperty();
    protected internal void OnPropertyChanging(PropertyChangedEventArgs pcevent);
    protected internal void RaisePropertyChanging(string name);
    public virtual string ToString();
}
[DefaultMemberAttribute("Item")]
[DefaultEventAttribute("CollectionChanged")]
[DefaultPropertyAttribute("Table")]
public abstract class System.Data.DataRelationCollection : InternalDataCollectionBase {
    public DataRelation Item { get; }
    public DataRelation Item { get; }
    public abstract virtual DataRelation get_Item(int index);
    public abstract virtual DataRelation get_Item(string name);
    public void add_CollectionChanged(CollectionChangeEventHandler value);
    public void remove_CollectionChanged(CollectionChangeEventHandler value);
    public virtual DataRelation Add(DataColumn parentColumn, DataColumn childColumn);
    public virtual DataRelation Add(DataColumn[] parentColumns, DataColumn[] childColumns);
    public void Add(DataRelation relation);
    public virtual DataRelation Add(string name, DataColumn parentColumn, DataColumn childColumn);
    public virtual DataRelation Add(string name, DataColumn parentColumn, DataColumn childColumn, bool createConstraints);
    public virtual DataRelation Add(string name, DataColumn[] parentColumns, DataColumn[] childColumns);
    public virtual DataRelation Add(string name, DataColumn[] parentColumns, DataColumn[] childColumns, bool createConstraints);
    protected virtual void AddCore(DataRelation relation);
    public virtual void AddRange(DataRelation[] relations);
    public virtual bool CanRemove(DataRelation relation);
    public virtual void Clear();
    public virtual bool Contains(string name);
    public void CopyTo(DataRelation[] array, int index);
    protected abstract virtual DataSet GetDataSet();
    public virtual int IndexOf(DataRelation relation);
    public virtual int IndexOf(string relationName);
    protected virtual void OnCollectionChanged(CollectionChangeEventArgs ccevent);
    protected virtual void OnCollectionChanging(CollectionChangeEventArgs ccevent);
    public void Remove(DataRelation relation);
    public void Remove(string name);
    public void RemoveAt(int index);
    protected virtual void RemoveCore(DataRelation relation);
}
[DefaultMemberAttribute("Item")]
public class System.Data.DataRow : object {
    public bool HasErrors { get; }
    public object Item { get; public set; }
    public object Item { get; }
    public object Item { get; public set; }
    public object Item { get; }
    public object Item { get; public set; }
    public object Item { get; }
    public Object[] ItemArray { get; public set; }
    public string RowError { get; public set; }
    public DataRowState RowState { get; }
    public DataTable Table { get; }
    protected internal DataRow(DataRowBuilder builder);
    public bool get_HasErrors();
    public object get_Item(DataColumn column);
    public void set_Item(DataColumn column, object value);
    public object get_Item(DataColumn column, DataRowVersion version);
    public object get_Item(int columnIndex);
    public void set_Item(int columnIndex, object value);
    public object get_Item(int columnIndex, DataRowVersion version);
    public object get_Item(string columnName);
    public void set_Item(string columnName, object value);
    public object get_Item(string columnName, DataRowVersion version);
    public Object[] get_ItemArray();
    public void set_ItemArray(Object[] value);
    public string get_RowError();
    public void set_RowError(string value);
    public DataRowState get_RowState();
    public DataTable get_Table();
    public void AcceptChanges();
    [EditorBrowsableAttribute("2")]
public void BeginEdit();
    [EditorBrowsableAttribute("2")]
public void CancelEdit();
    public void ClearErrors();
    public void Delete();
    [EditorBrowsableAttribute("2")]
public void EndEdit();
    public DataRow[] GetChildRows(DataRelation relation);
    public DataRow[] GetChildRows(DataRelation relation, DataRowVersion version);
    public DataRow[] GetChildRows(string relationName);
    public DataRow[] GetChildRows(string relationName, DataRowVersion version);
    public string GetColumnError(DataColumn column);
    public string GetColumnError(int columnIndex);
    public string GetColumnError(string columnName);
    public DataColumn[] GetColumnsInError();
    public DataRow GetParentRow(DataRelation relation);
    public DataRow GetParentRow(DataRelation relation, DataRowVersion version);
    public DataRow GetParentRow(string relationName);
    public DataRow GetParentRow(string relationName, DataRowVersion version);
    public DataRow[] GetParentRows(DataRelation relation);
    public DataRow[] GetParentRows(DataRelation relation, DataRowVersion version);
    public DataRow[] GetParentRows(string relationName);
    public DataRow[] GetParentRows(string relationName, DataRowVersion version);
    public bool HasVersion(DataRowVersion version);
    public bool IsNull(DataColumn column);
    public bool IsNull(DataColumn column, DataRowVersion version);
    public bool IsNull(int columnIndex);
    public bool IsNull(string columnName);
    public void RejectChanges();
    public void SetAdded();
    public void SetColumnError(DataColumn column, string error);
    public void SetColumnError(int columnIndex, string error);
    public void SetColumnError(string columnName, string error);
    public void SetModified();
    protected void SetNull(DataColumn column);
    public void SetParentRow(DataRow parentRow);
    public void SetParentRow(DataRow parentRow, DataRelation relation);
}
[FlagsAttribute]
public enum System.Data.DataRowAction : Enum {
    public int value__;
    public static DataRowAction Add;
    public static DataRowAction Change;
    public static DataRowAction ChangeCurrentAndOriginal;
    public static DataRowAction ChangeOriginal;
    public static DataRowAction Commit;
    public static DataRowAction Delete;
    public static DataRowAction Nothing;
    public static DataRowAction Rollback;
}
public class System.Data.DataRowBuilder : object {
}
public class System.Data.DataRowChangeEventArgs : EventArgs {
    public DataRowAction Action { get; }
    public DataRow Row { get; }
    public DataRowChangeEventArgs(DataRow row, DataRowAction action);
    public DataRowAction get_Action();
    public DataRow get_Row();
}
public class System.Data.DataRowChangeEventHandler : MulticastDelegate {
    public DataRowChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataRowChangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataRowChangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class System.Data.DataRowCollection : InternalDataCollectionBase {
    public int Count { get; }
    public DataRow Item { get; }
    public virtual int get_Count();
    public DataRow get_Item(int index);
    public void Add(DataRow row);
    public DataRow Add(Object[] values);
    public void Clear();
    public bool Contains(object key);
    public bool Contains(Object[] keys);
    public virtual void CopyTo(Array ar, int index);
    public void CopyTo(DataRow[] array, int index);
    public DataRow Find(object key);
    public DataRow Find(Object[] keys);
    public virtual IEnumerator GetEnumerator();
    public int IndexOf(DataRow row);
    public void InsertAt(DataRow row, int pos);
    public void Remove(DataRow row);
    public void RemoveAt(int index);
}
[FlagsAttribute]
public enum System.Data.DataRowState : Enum {
    public int value__;
    public static DataRowState Added;
    public static DataRowState Deleted;
    public static DataRowState Detached;
    public static DataRowState Modified;
    public static DataRowState Unchanged;
}
public enum System.Data.DataRowVersion : Enum {
    public int value__;
    public static DataRowVersion Current;
    public static DataRowVersion Default;
    public static DataRowVersion Original;
    public static DataRowVersion Proposed;
}
[DefaultMemberAttribute("Item")]
public class System.Data.DataRowView : object {
    public DataView DataView { get; }
    public bool IsEdit { get; }
    public bool IsNew { get; }
    public object Item { get; public set; }
    public object Item { get; public set; }
    public DataRow Row { get; }
    public DataRowVersion RowVersion { get; }
    private string System.ComponentModel.IDataErrorInfo.Error { get; }
    private string System.ComponentModel.IDataErrorInfo.Item { get; }
    public DataView get_DataView();
    public bool get_IsEdit();
    public bool get_IsNew();
    public object get_Item(int ndx);
    public void set_Item(int ndx, object value);
    public object get_Item(string property);
    public void set_Item(string property, object value);
    public DataRow get_Row();
    public DataRowVersion get_RowVersion();
    private sealed virtual override string System.ComponentModel.IDataErrorInfo.get_Error();
    private sealed virtual override string System.ComponentModel.IDataErrorInfo.get_Item(string colName);
    public sealed virtual void add_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void remove_PropertyChanged(PropertyChangedEventHandler value);
    public sealed virtual void BeginEdit();
    public sealed virtual void CancelEdit();
    public DataView CreateChildView(DataRelation relation);
    public DataView CreateChildView(DataRelation relation, bool followParent);
    public DataView CreateChildView(string relationName);
    public DataView CreateChildView(string relationName, bool followParent);
    public void Delete();
    public sealed virtual void EndEdit();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    private sealed virtual override AttributeCollection System.ComponentModel.ICustomTypeDescriptor.GetAttributes();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetClassName();
    private sealed virtual override string System.ComponentModel.ICustomTypeDescriptor.GetComponentName();
    private sealed virtual override TypeConverter System.ComponentModel.ICustomTypeDescriptor.GetConverter();
    private sealed virtual override EventDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent();
    private sealed virtual override PropertyDescriptor System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty();
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetEditor(Type editorBaseType);
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents();
    private sealed virtual override EventDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetEvents(Attribute[] attributes);
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ICustomTypeDescriptor.GetProperties(Attribute[] attributes);
    private sealed virtual override object System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(PropertyDescriptor pd);
}
[DefaultPropertyAttribute("DataSetName")]
[ToolboxItemAttribute("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
[XmlSchemaProviderAttribute("GetDataSetSchema")]
public class System.Data.DataSet : MarshalByValueComponent {
    [DefaultValueAttribute("False")]
public bool CaseSensitive { get; public set; }
    [DefaultValueAttribute("")]
public string DataSetName { get; public set; }
    [BrowsableAttribute("False")]
public DataViewManager DefaultViewManager { get; }
    [DefaultValueAttribute("True")]
public bool EnforceConstraints { get; public set; }
    [BrowsableAttribute("False")]
public PropertyCollection ExtendedProperties { get; }
    [BrowsableAttribute("False")]
public bool HasErrors { get; }
    [BrowsableAttribute("False")]
public bool IsInitialized { get; }
    public CultureInfo Locale { get; public set; }
    [DefaultValueAttribute("")]
public string Namespace { get; public set; }
    [DefaultValueAttribute("")]
public string Prefix { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public DataRelationCollection Relations { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SerializationFormat RemotingFormat { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public SchemaSerializationMode SchemaSerializationMode { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ISite Site { get; public set; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public DataTableCollection Tables { get; }
    protected DataSet(SerializationInfo info, StreamingContext context);
    protected DataSet(SerializationInfo info, StreamingContext context, bool ConstructSchema);
    public DataSet(string dataSetName);
    public bool get_CaseSensitive();
    public void set_CaseSensitive(bool value);
    public string get_DataSetName();
    public void set_DataSetName(string value);
    public DataViewManager get_DefaultViewManager();
    public bool get_EnforceConstraints();
    public void set_EnforceConstraints(bool value);
    public PropertyCollection get_ExtendedProperties();
    public bool get_HasErrors();
    public sealed virtual bool get_IsInitialized();
    public CultureInfo get_Locale();
    public void set_Locale(CultureInfo value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_Prefix();
    public void set_Prefix(string value);
    public DataRelationCollection get_Relations();
    public SerializationFormat get_RemotingFormat();
    public void set_RemotingFormat(SerializationFormat value);
    public virtual SchemaSerializationMode get_SchemaSerializationMode();
    public virtual void set_SchemaSerializationMode(SchemaSerializationMode value);
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    public DataTableCollection get_Tables();
    public sealed virtual void add_Initialized(EventHandler value);
    public sealed virtual void remove_Initialized(EventHandler value);
    public void add_MergeFailed(MergeFailedEventHandler value);
    public void remove_MergeFailed(MergeFailedEventHandler value);
    public void AcceptChanges();
    public sealed virtual void BeginInit();
    public void Clear();
    public virtual DataSet Clone();
    public DataSet Copy();
    public DataTableReader CreateDataReader();
    public DataTableReader CreateDataReader(DataTable[] dataTables);
    protected SchemaSerializationMode DetermineSchemaSerializationMode(SerializationInfo info, StreamingContext context);
    protected SchemaSerializationMode DetermineSchemaSerializationMode(XmlReader reader);
    public sealed virtual void EndInit();
    public DataSet GetChanges();
    public DataSet GetChanges(DataRowState rowStates);
    public static XmlSchemaComplexType GetDataSetSchema(XmlSchemaSet schemaSet);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    protected virtual XmlSchema GetSchemaSerializable();
    protected void GetSerializationData(SerializationInfo info, StreamingContext context);
    public string GetXml();
    public string GetXmlSchema();
    public bool HasChanges();
    public bool HasChanges(DataRowState rowStates);
    public void InferXmlSchema(Stream stream, String[] nsArray);
    public void InferXmlSchema(TextReader reader, String[] nsArray);
    public void InferXmlSchema(string fileName, String[] nsArray);
    public void InferXmlSchema(XmlReader reader, String[] nsArray);
    protected virtual void InitializeDerivedDataSet();
    protected bool IsBinarySerialized(SerializationInfo info, StreamingContext context);
    public void Load(IDataReader reader, LoadOption loadOption, DataTable[] tables);
    public virtual void Load(IDataReader reader, LoadOption loadOption, FillErrorEventHandler errorHandler, DataTable[] tables);
    public void Load(IDataReader reader, LoadOption loadOption, String[] tables);
    public void Merge(DataRow[] rows);
    public void Merge(DataRow[] rows, bool preserveChanges, MissingSchemaAction missingSchemaAction);
    public void Merge(DataSet dataSet);
    public void Merge(DataSet dataSet, bool preserveChanges);
    public void Merge(DataSet dataSet, bool preserveChanges, MissingSchemaAction missingSchemaAction);
    public void Merge(DataTable table);
    public void Merge(DataTable table, bool preserveChanges, MissingSchemaAction missingSchemaAction);
    protected virtual void OnPropertyChanging(PropertyChangedEventArgs pcevent);
    protected virtual void OnRemoveRelation(DataRelation relation);
    protected internal virtual void OnRemoveTable(DataTable table);
    protected internal void RaisePropertyChanging(string name);
    public XmlReadMode ReadXml(Stream stream);
    public XmlReadMode ReadXml(Stream stream, XmlReadMode mode);
    public XmlReadMode ReadXml(TextReader reader);
    public XmlReadMode ReadXml(TextReader reader, XmlReadMode mode);
    public XmlReadMode ReadXml(string fileName);
    public XmlReadMode ReadXml(string fileName, XmlReadMode mode);
    public XmlReadMode ReadXml(XmlReader reader);
    public XmlReadMode ReadXml(XmlReader reader, XmlReadMode mode);
    public void ReadXmlSchema(Stream stream);
    public void ReadXmlSchema(TextReader reader);
    public void ReadXmlSchema(string fileName);
    public void ReadXmlSchema(XmlReader reader);
    protected virtual void ReadXmlSerializable(XmlReader reader);
    public virtual void RejectChanges();
    public virtual void Reset();
    protected virtual bool ShouldSerializeRelations();
    protected virtual bool ShouldSerializeTables();
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public void WriteXml(Stream stream);
    public void WriteXml(Stream stream, XmlWriteMode mode);
    public void WriteXml(TextWriter writer);
    public void WriteXml(TextWriter writer, XmlWriteMode mode);
    public void WriteXml(string fileName);
    public void WriteXml(string fileName, XmlWriteMode mode);
    public void WriteXml(XmlWriter writer);
    public void WriteXml(XmlWriter writer, XmlWriteMode mode);
    public void WriteXmlSchema(Stream stream);
    public void WriteXmlSchema(Stream stream, Converter`2<Type, string> multipleTargetConverter);
    public void WriteXmlSchema(TextWriter writer);
    public void WriteXmlSchema(TextWriter writer, Converter`2<Type, string> multipleTargetConverter);
    public void WriteXmlSchema(string fileName);
    public void WriteXmlSchema(string fileName, Converter`2<Type, string> multipleTargetConverter);
    public void WriteXmlSchema(XmlWriter writer);
    public void WriteXmlSchema(XmlWriter writer, Converter`2<Type, string> multipleTargetConverter);
}
public enum System.Data.DataSetDateTime : Enum {
    public int value__;
    public static DataSetDateTime Local;
    public static DataSetDateTime Unspecified;
    public static DataSetDateTime UnspecifiedLocal;
    public static DataSetDateTime Utc;
}
[AttributeUsageAttribute("32767")]
[ObsoleteAttribute("DataSysDescriptionAttribute has been deprecated.  http://go.microsoft.com/fwlink/?linkid=14202", "False")]
public class System.Data.DataSysDescriptionAttribute : DescriptionAttribute {
    public string Description { get; }
    [ObsoleteAttribute("DataSysDescriptionAttribute has been deprecated.  http://go.microsoft.com/fwlink/?linkid=14202", "False")]
public DataSysDescriptionAttribute(string description);
    public virtual string get_Description();
}
[DefaultEventAttribute("RowChanging")]
[DefaultPropertyAttribute("TableName")]
[DesignTimeVisibleAttribute("False")]
[ToolboxItemAttribute("False")]
[XmlSchemaProviderAttribute("GetDataTableSchema")]
public class System.Data.DataTable : MarshalByValueComponent {
    protected internal bool fInitInProgress;
    public bool CaseSensitive { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataRelationCollection ChildRelations { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public DataColumnCollection Columns { get; }
    [DesignerSerializationVisibilityAttribute("2")]
public ConstraintCollection Constraints { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataSet DataSet { get; }
    [BrowsableAttribute("False")]
public DataView DefaultView { get; }
    [DefaultValueAttribute("")]
public string DisplayExpression { get; public set; }
    [BrowsableAttribute("False")]
public PropertyCollection ExtendedProperties { get; }
    [BrowsableAttribute("False")]
public bool HasErrors { get; }
    [BrowsableAttribute("False")]
public bool IsInitialized { get; }
    public CultureInfo Locale { get; public set; }
    [DefaultValueAttribute("50")]
public int MinimumCapacity { get; public set; }
    public string Namespace { get; public set; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public DataRelationCollection ParentRelations { get; }
    [DefaultValueAttribute("")]
public string Prefix { get; public set; }
    public DataColumn[] PrimaryKey { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SerializationFormat RemotingFormat { get; public set; }
    [BrowsableAttribute("False")]
public DataRowCollection Rows { get; }
    [BrowsableAttribute("False")]
[DesignerSerializationVisibilityAttribute("0")]
public ISite Site { get; public set; }
    private bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    [DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
public string TableName { get; public set; }
    protected DataTable(SerializationInfo info, StreamingContext context);
    public DataTable(string tableName);
    public DataTable(string tableName, string tableNamespace);
    public bool get_CaseSensitive();
    public void set_CaseSensitive(bool value);
    public DataRelationCollection get_ChildRelations();
    public DataColumnCollection get_Columns();
    public ConstraintCollection get_Constraints();
    public DataSet get_DataSet();
    public DataView get_DefaultView();
    public string get_DisplayExpression();
    public void set_DisplayExpression(string value);
    public PropertyCollection get_ExtendedProperties();
    public bool get_HasErrors();
    public sealed virtual bool get_IsInitialized();
    public CultureInfo get_Locale();
    public void set_Locale(CultureInfo value);
    public int get_MinimumCapacity();
    public void set_MinimumCapacity(int value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public DataRelationCollection get_ParentRelations();
    public string get_Prefix();
    public void set_Prefix(string value);
    public DataColumn[] get_PrimaryKey();
    public void set_PrimaryKey(DataColumn[] value);
    public SerializationFormat get_RemotingFormat();
    public void set_RemotingFormat(SerializationFormat value);
    public DataRowCollection get_Rows();
    public virtual ISite get_Site();
    public virtual void set_Site(ISite value);
    private sealed virtual override bool System.ComponentModel.IListSource.get_ContainsListCollection();
    public string get_TableName();
    public void set_TableName(string value);
    public void add_ColumnChanged(DataColumnChangeEventHandler value);
    public void remove_ColumnChanged(DataColumnChangeEventHandler value);
    public void add_ColumnChanging(DataColumnChangeEventHandler value);
    public void remove_ColumnChanging(DataColumnChangeEventHandler value);
    public sealed virtual void add_Initialized(EventHandler value);
    public sealed virtual void remove_Initialized(EventHandler value);
    public void add_RowChanged(DataRowChangeEventHandler value);
    public void remove_RowChanged(DataRowChangeEventHandler value);
    public void add_RowChanging(DataRowChangeEventHandler value);
    public void remove_RowChanging(DataRowChangeEventHandler value);
    public void add_RowDeleted(DataRowChangeEventHandler value);
    public void remove_RowDeleted(DataRowChangeEventHandler value);
    public void add_RowDeleting(DataRowChangeEventHandler value);
    public void remove_RowDeleting(DataRowChangeEventHandler value);
    public void add_TableCleared(DataTableClearEventHandler value);
    public void remove_TableCleared(DataTableClearEventHandler value);
    public void add_TableClearing(DataTableClearEventHandler value);
    public void remove_TableClearing(DataTableClearEventHandler value);
    public void add_TableNewRow(DataTableNewRowEventHandler value);
    public void remove_TableNewRow(DataTableNewRowEventHandler value);
    public void AcceptChanges();
    public virtual void BeginInit();
    public void BeginLoadData();
    public void Clear();
    public virtual DataTable Clone();
    public object Compute(string expression, string filter);
    public DataTable Copy();
    public DataTableReader CreateDataReader();
    protected virtual DataTable CreateInstance();
    public virtual void EndInit();
    public void EndLoadData();
    public DataTable GetChanges();
    public DataTable GetChanges(DataRowState rowStates);
    public static XmlSchemaComplexType GetDataTableSchema(XmlSchemaSet schemaSet);
    public DataRow[] GetErrors();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    protected virtual Type GetRowType();
    protected virtual XmlSchema GetSchema();
    public void ImportRow(DataRow row);
    public void Load(IDataReader reader);
    public void Load(IDataReader reader, LoadOption loadOption);
    public virtual void Load(IDataReader reader, LoadOption loadOption, FillErrorEventHandler errorHandler);
    public DataRow LoadDataRow(Object[] values, bool fAcceptChanges);
    public DataRow LoadDataRow(Object[] values, LoadOption loadOption);
    public void Merge(DataTable table);
    public void Merge(DataTable table, bool preserveChanges);
    public void Merge(DataTable table, bool preserveChanges, MissingSchemaAction missingSchemaAction);
    public DataRow NewRow();
    protected internal DataRow[] NewRowArray(int size);
    protected virtual DataRow NewRowFromBuilder(DataRowBuilder builder);
    protected internal virtual void OnColumnChanged(DataColumnChangeEventArgs e);
    protected internal virtual void OnColumnChanging(DataColumnChangeEventArgs e);
    protected virtual void OnPropertyChanging(PropertyChangedEventArgs pcevent);
    protected virtual void OnRemoveColumn(DataColumn column);
    protected virtual void OnRowChanged(DataRowChangeEventArgs e);
    protected virtual void OnRowChanging(DataRowChangeEventArgs e);
    protected virtual void OnRowDeleted(DataRowChangeEventArgs e);
    protected virtual void OnRowDeleting(DataRowChangeEventArgs e);
    protected virtual void OnTableCleared(DataTableClearEventArgs e);
    protected virtual void OnTableClearing(DataTableClearEventArgs e);
    protected virtual void OnTableNewRow(DataTableNewRowEventArgs e);
    public XmlReadMode ReadXml(Stream stream);
    public XmlReadMode ReadXml(TextReader reader);
    public XmlReadMode ReadXml(string fileName);
    public XmlReadMode ReadXml(XmlReader reader);
    public void ReadXmlSchema(Stream stream);
    public void ReadXmlSchema(TextReader reader);
    public void ReadXmlSchema(string fileName);
    public void ReadXmlSchema(XmlReader reader);
    protected virtual void ReadXmlSerializable(XmlReader reader);
    public void RejectChanges();
    public virtual void Reset();
    public DataRow[] Select();
    public DataRow[] Select(string filterExpression);
    public DataRow[] Select(string filterExpression, string sort);
    public DataRow[] Select(string filterExpression, string sort, DataViewRowState recordStates);
    private sealed virtual override IList System.ComponentModel.IListSource.GetList();
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public virtual string ToString();
    public void WriteXml(Stream stream);
    public void WriteXml(Stream stream, bool writeHierarchy);
    public void WriteXml(Stream stream, XmlWriteMode mode);
    public void WriteXml(Stream stream, XmlWriteMode mode, bool writeHierarchy);
    public void WriteXml(TextWriter writer);
    public void WriteXml(TextWriter writer, bool writeHierarchy);
    public void WriteXml(TextWriter writer, XmlWriteMode mode);
    public void WriteXml(TextWriter writer, XmlWriteMode mode, bool writeHierarchy);
    public void WriteXml(string fileName);
    public void WriteXml(string fileName, bool writeHierarchy);
    public void WriteXml(string fileName, XmlWriteMode mode);
    public void WriteXml(string fileName, XmlWriteMode mode, bool writeHierarchy);
    public void WriteXml(XmlWriter writer);
    public void WriteXml(XmlWriter writer, bool writeHierarchy);
    public void WriteXml(XmlWriter writer, XmlWriteMode mode);
    public void WriteXml(XmlWriter writer, XmlWriteMode mode, bool writeHierarchy);
    public void WriteXmlSchema(Stream stream);
    public void WriteXmlSchema(Stream stream, bool writeHierarchy);
    public void WriteXmlSchema(TextWriter writer);
    public void WriteXmlSchema(TextWriter writer, bool writeHierarchy);
    public void WriteXmlSchema(string fileName);
    public void WriteXmlSchema(string fileName, bool writeHierarchy);
    public void WriteXmlSchema(XmlWriter writer);
    public void WriteXmlSchema(XmlWriter writer, bool writeHierarchy);
}
public class System.Data.DataTableClearEventArgs : EventArgs {
    public DataTable Table { get; }
    public string TableName { get; }
    public string TableNamespace { get; }
    public DataTableClearEventArgs(DataTable dataTable);
    public DataTable get_Table();
    public string get_TableName();
    public string get_TableNamespace();
}
public class System.Data.DataTableClearEventHandler : MulticastDelegate {
    public DataTableClearEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataTableClearEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataTableClearEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
[DefaultEventAttribute("CollectionChanged")]
[ListBindableAttribute("False")]
public class System.Data.DataTableCollection : InternalDataCollectionBase {
    public DataTable Item { get; }
    public DataTable Item { get; }
    public DataTable Item { get; }
    protected ArrayList List { get; }
    public DataTable get_Item(int index);
    public DataTable get_Item(string name);
    public DataTable get_Item(string name, string tableNamespace);
    protected virtual ArrayList get_List();
    public void add_CollectionChanged(CollectionChangeEventHandler value);
    public void remove_CollectionChanged(CollectionChangeEventHandler value);
    public void add_CollectionChanging(CollectionChangeEventHandler value);
    public void remove_CollectionChanging(CollectionChangeEventHandler value);
    public DataTable Add();
    public void Add(DataTable table);
    public DataTable Add(string name);
    public DataTable Add(string name, string tableNamespace);
    public void AddRange(DataTable[] tables);
    public bool CanRemove(DataTable table);
    public void Clear();
    public bool Contains(string name);
    public bool Contains(string name, string tableNamespace);
    public void CopyTo(DataTable[] array, int index);
    public int IndexOf(DataTable table);
    public int IndexOf(string tableName);
    public int IndexOf(string tableName, string tableNamespace);
    public void Remove(DataTable table);
    public void Remove(string name);
    public void Remove(string name, string tableNamespace);
    public void RemoveAt(int index);
}
public class System.Data.DataTableNewRowEventArgs : EventArgs {
    public DataRow Row { get; }
    public DataTableNewRowEventArgs(DataRow dataRow);
    public DataRow get_Row();
}
public class System.Data.DataTableNewRowEventHandler : MulticastDelegate {
    public DataTableNewRowEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, DataTableNewRowEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, DataTableNewRowEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class System.Data.DataTableReader : DbDataReader {
    public int Depth { get; }
    public int FieldCount { get; }
    public bool HasRows { get; }
    public bool IsClosed { get; }
    public object Item { get; }
    public object Item { get; }
    public int RecordsAffected { get; }
    public DataTableReader(DataTable dataTable);
    public DataTableReader(DataTable[] dataTables);
    public virtual int get_Depth();
    public virtual int get_FieldCount();
    public virtual bool get_HasRows();
    public virtual bool get_IsClosed();
    public virtual object get_Item(int ordinal);
    public virtual object get_Item(string name);
    public virtual int get_RecordsAffected();
    public virtual void Close();
    public virtual bool GetBoolean(int ordinal);
    public virtual byte GetByte(int ordinal);
    public virtual long GetBytes(int ordinal, long dataIndex, Byte[] buffer, int bufferIndex, int length);
    public virtual char GetChar(int ordinal);
    public virtual long GetChars(int ordinal, long dataIndex, Char[] buffer, int bufferIndex, int length);
    public virtual string GetDataTypeName(int ordinal);
    public virtual DateTime GetDateTime(int ordinal);
    public virtual decimal GetDecimal(int ordinal);
    public virtual double GetDouble(int ordinal);
    public virtual IEnumerator GetEnumerator();
    public virtual Type GetFieldType(int ordinal);
    public virtual float GetFloat(int ordinal);
    public virtual Guid GetGuid(int ordinal);
    public virtual short GetInt16(int ordinal);
    public virtual int GetInt32(int ordinal);
    public virtual long GetInt64(int ordinal);
    public virtual string GetName(int ordinal);
    public virtual int GetOrdinal(string name);
    public virtual Type GetProviderSpecificFieldType(int ordinal);
    public virtual object GetProviderSpecificValue(int ordinal);
    public virtual int GetProviderSpecificValues(Object[] values);
    public virtual DataTable GetSchemaTable();
    public virtual string GetString(int ordinal);
    public virtual object GetValue(int ordinal);
    public virtual int GetValues(Object[] values);
    public virtual bool IsDBNull(int ordinal);
    public virtual bool NextResult();
    public virtual bool Read();
}
[DefaultMemberAttribute("Item")]
[DefaultEventAttribute("PositionChanged")]
[DefaultPropertyAttribute("Table")]
public class System.Data.DataView : MarshalByValueComponent {
    [DefaultValueAttribute("True")]
public bool AllowDelete { get; public set; }
    [DefaultValueAttribute("True")]
public bool AllowEdit { get; public set; }
    [DefaultValueAttribute("True")]
public bool AllowNew { get; public set; }
    [DefaultValueAttribute("False")]
[RefreshPropertiesAttribute("1")]
public bool ApplyDefaultSort { get; public set; }
    [BrowsableAttribute("False")]
public int Count { get; }
    [BrowsableAttribute("False")]
public DataViewManager DataViewManager { get; }
    [BrowsableAttribute("False")]
public bool IsInitialized { get; }
    [BrowsableAttribute("False")]
protected bool IsOpen { get; }
    public DataRowView Item { get; }
    [DefaultValueAttribute("")]
public string RowFilter { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public DataViewRowState RowStateFilter { get; public set; }
    [DefaultValueAttribute("")]
public string Sort { get; public set; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    private string System.ComponentModel.IBindingListView.Filter { get; private set; }
    private ListSortDescriptionCollection System.ComponentModel.IBindingListView.SortDescriptions { get; }
    private bool System.ComponentModel.IBindingListView.SupportsAdvancedSorting { get; }
    private bool System.ComponentModel.IBindingListView.SupportsFiltering { get; }
    [DefaultValueAttribute("")]
[RefreshPropertiesAttribute("1")]
public DataTable Table { get; public set; }
    public DataView(DataTable table);
    public DataView(DataTable table, string RowFilter, string Sort, DataViewRowState RowState);
    public bool get_AllowDelete();
    public void set_AllowDelete(bool value);
    public bool get_AllowEdit();
    public void set_AllowEdit(bool value);
    public bool get_AllowNew();
    public void set_AllowNew(bool value);
    public bool get_ApplyDefaultSort();
    public void set_ApplyDefaultSort(bool value);
    public sealed virtual int get_Count();
    public DataViewManager get_DataViewManager();
    public sealed virtual bool get_IsInitialized();
    protected bool get_IsOpen();
    public DataRowView get_Item(int recordIndex);
    public virtual string get_RowFilter();
    public virtual void set_RowFilter(string value);
    public DataViewRowState get_RowStateFilter();
    public void set_RowStateFilter(DataViewRowState value);
    public string get_Sort();
    public void set_Sort(string value);
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int recordIndex);
    private sealed virtual override void System.Collections.IList.set_Item(int recordIndex, object value);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    private sealed virtual override string System.ComponentModel.IBindingListView.get_Filter();
    private sealed virtual override void System.ComponentModel.IBindingListView.set_Filter(string value);
    private sealed virtual override ListSortDescriptionCollection System.ComponentModel.IBindingListView.get_SortDescriptions();
    private sealed virtual override bool System.ComponentModel.IBindingListView.get_SupportsAdvancedSorting();
    private sealed virtual override bool System.ComponentModel.IBindingListView.get_SupportsFiltering();
    public DataTable get_Table();
    public void set_Table(DataTable value);
    public sealed virtual void add_Initialized(EventHandler value);
    public sealed virtual void remove_Initialized(EventHandler value);
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    public virtual DataRowView AddNew();
    public sealed virtual void BeginInit();
    protected void Close();
    protected virtual void ColumnCollectionChanged(object sender, CollectionChangeEventArgs e);
    public sealed virtual void CopyTo(Array array, int index);
    public void Delete(int index);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void EndInit();
    public virtual bool Equals(DataView view);
    public int Find(object key);
    public int Find(Object[] key);
    public DataRowView[] FindRows(object key);
    public DataRowView[] FindRows(Object[] key);
    public sealed virtual IEnumerator GetEnumerator();
    protected virtual void IndexListChanged(object sender, ListChangedEventArgs e);
    protected virtual void OnListChanged(ListChangedEventArgs e);
    protected void Open();
    protected void Reset();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override void System.ComponentModel.IBindingListView.ApplySort(ListSortDescriptionCollection sorts);
    private sealed virtual override void System.ComponentModel.IBindingListView.RemoveFilter();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    public DataTable ToTable();
    public DataTable ToTable(bool distinct, String[] columnNames);
    public DataTable ToTable(string tableName);
    public DataTable ToTable(string tableName, bool distinct, String[] columnNames);
    protected void UpdateIndex();
    protected virtual void UpdateIndex(bool force);
}
public class System.Data.DataViewManager : MarshalByValueComponent {
    [DefaultValueAttribute("")]
public DataSet DataSet { get; public set; }
    public string DataViewSettingCollectionString { get; public set; }
    [DesignerSerializationVisibilityAttribute("2")]
public DataViewSettingCollection DataViewSettings { get; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    private bool System.Collections.IList.IsFixedSize { get; }
    private bool System.Collections.IList.IsReadOnly { get; }
    private object System.Collections.IList.Item { get; private set; }
    private bool System.ComponentModel.IBindingList.AllowEdit { get; }
    private bool System.ComponentModel.IBindingList.AllowNew { get; }
    private bool System.ComponentModel.IBindingList.AllowRemove { get; }
    private bool System.ComponentModel.IBindingList.IsSorted { get; }
    private ListSortDirection System.ComponentModel.IBindingList.SortDirection { get; }
    private PropertyDescriptor System.ComponentModel.IBindingList.SortProperty { get; }
    private bool System.ComponentModel.IBindingList.SupportsChangeNotification { get; }
    private bool System.ComponentModel.IBindingList.SupportsSearching { get; }
    private bool System.ComponentModel.IBindingList.SupportsSorting { get; }
    public DataViewManager(DataSet dataSet);
    public DataSet get_DataSet();
    public void set_DataSet(DataSet value);
    public string get_DataViewSettingCollectionString();
    public void set_DataViewSettingCollectionString(string value);
    public DataViewSettingCollection get_DataViewSettings();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    private sealed virtual override bool System.Collections.IList.get_IsFixedSize();
    private sealed virtual override bool System.Collections.IList.get_IsReadOnly();
    private sealed virtual override object System.Collections.IList.get_Item(int index);
    private sealed virtual override void System.Collections.IList.set_Item(int index, object value);
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowEdit();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowNew();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_AllowRemove();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_IsSorted();
    private sealed virtual override ListSortDirection System.ComponentModel.IBindingList.get_SortDirection();
    private sealed virtual override PropertyDescriptor System.ComponentModel.IBindingList.get_SortProperty();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsChangeNotification();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSearching();
    private sealed virtual override bool System.ComponentModel.IBindingList.get_SupportsSorting();
    public sealed virtual void add_ListChanged(ListChangedEventHandler value);
    public sealed virtual void remove_ListChanged(ListChangedEventHandler value);
    public DataView CreateDataView(DataTable table);
    protected virtual void OnListChanged(ListChangedEventArgs e);
    protected virtual void RelationCollectionChanged(object sender, CollectionChangeEventArgs e);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override int System.Collections.IList.Add(object value);
    private sealed virtual override void System.Collections.IList.Clear();
    private sealed virtual override bool System.Collections.IList.Contains(object value);
    private sealed virtual override int System.Collections.IList.IndexOf(object value);
    private sealed virtual override void System.Collections.IList.Insert(int index, object value);
    private sealed virtual override void System.Collections.IList.Remove(object value);
    private sealed virtual override void System.Collections.IList.RemoveAt(int index);
    private sealed virtual override void System.ComponentModel.IBindingList.AddIndex(PropertyDescriptor property);
    private sealed virtual override object System.ComponentModel.IBindingList.AddNew();
    private sealed virtual override void System.ComponentModel.IBindingList.ApplySort(PropertyDescriptor property, ListSortDirection direction);
    private sealed virtual override int System.ComponentModel.IBindingList.Find(PropertyDescriptor property, object key);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveIndex(PropertyDescriptor property);
    private sealed virtual override void System.ComponentModel.IBindingList.RemoveSort();
    private sealed virtual override PropertyDescriptorCollection System.ComponentModel.ITypedList.GetItemProperties(PropertyDescriptor[] listAccessors);
    private sealed virtual override string System.ComponentModel.ITypedList.GetListName(PropertyDescriptor[] listAccessors);
    protected virtual void TableCollectionChanged(object sender, CollectionChangeEventArgs e);
}
[FlagsAttribute]
public enum System.Data.DataViewRowState : Enum {
    public int value__;
    public static DataViewRowState Added;
    public static DataViewRowState CurrentRows;
    public static DataViewRowState Deleted;
    public static DataViewRowState ModifiedCurrent;
    public static DataViewRowState ModifiedOriginal;
    public static DataViewRowState None;
    public static DataViewRowState OriginalRows;
    public static DataViewRowState Unchanged;
}
public class System.Data.DataViewSetting : object {
    public bool ApplyDefaultSort { get; public set; }
    [BrowsableAttribute("False")]
public DataViewManager DataViewManager { get; }
    public string RowFilter { get; public set; }
    public DataViewRowState RowStateFilter { get; public set; }
    public string Sort { get; public set; }
    [BrowsableAttribute("False")]
public DataTable Table { get; }
    public bool get_ApplyDefaultSort();
    public void set_ApplyDefaultSort(bool value);
    public DataViewManager get_DataViewManager();
    public string get_RowFilter();
    public void set_RowFilter(string value);
    public DataViewRowState get_RowStateFilter();
    public void set_RowStateFilter(DataViewRowState value);
    public string get_Sort();
    public void set_Sort(string value);
    public DataTable get_Table();
}
[DefaultMemberAttribute("Item")]
public class System.Data.DataViewSettingCollection : object {
    [BrowsableAttribute("False")]
public int Count { get; }
    [BrowsableAttribute("False")]
public bool IsReadOnly { get; }
    [BrowsableAttribute("False")]
public bool IsSynchronized { get; }
    public DataViewSetting Item { get; public set; }
    public DataViewSetting Item { get; public set; }
    public DataViewSetting Item { get; }
    [BrowsableAttribute("False")]
public object SyncRoot { get; }
    public virtual int get_Count();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    public virtual DataViewSetting get_Item(DataTable table);
    public virtual void set_Item(DataTable table, DataViewSetting value);
    public virtual DataViewSetting get_Item(int index);
    public virtual void set_Item(int index, DataViewSetting value);
    public virtual DataViewSetting get_Item(string tableName);
    public sealed virtual object get_SyncRoot();
    public sealed virtual void CopyTo(Array ar, int index);
    public void CopyTo(DataViewSetting[] ar, int index);
    public sealed virtual IEnumerator GetEnumerator();
}
public class System.Data.DBConcurrencyException : SystemException {
    public DataRow Row { get; public set; }
    public int RowCount { get; }
    public DBConcurrencyException(string message);
    public DBConcurrencyException(string message, Exception inner);
    public DBConcurrencyException(string message, Exception inner, DataRow[] dataRows);
    public DataRow get_Row();
    public void set_Row(DataRow value);
    public int get_RowCount();
    public void CopyToRows(DataRow[] array);
    public void CopyToRows(DataRow[] array, int arrayIndex);
    public virtual void GetObjectData(SerializationInfo si, StreamingContext context);
}
public enum System.Data.DbType : Enum {
    public int value__;
    public static DbType AnsiString;
    public static DbType AnsiStringFixedLength;
    public static DbType Binary;
    public static DbType Boolean;
    public static DbType Byte;
    public static DbType Currency;
    public static DbType Date;
    public static DbType DateTime;
    public static DbType DateTime2;
    public static DbType DateTimeOffset;
    public static DbType Decimal;
    public static DbType Double;
    public static DbType Guid;
    public static DbType Int16;
    public static DbType Int32;
    public static DbType Int64;
    public static DbType Object;
    public static DbType SByte;
    public static DbType Single;
    public static DbType String;
    public static DbType StringFixedLength;
    public static DbType Time;
    public static DbType UInt16;
    public static DbType UInt32;
    public static DbType UInt64;
    public static DbType VarNumeric;
    public static DbType Xml;
}
public class System.Data.DeletedRowInaccessibleException : DataException {
    protected DeletedRowInaccessibleException(SerializationInfo info, StreamingContext context);
    public DeletedRowInaccessibleException(string s);
    public DeletedRowInaccessibleException(string message, Exception innerException);
}
public class System.Data.DuplicateNameException : DataException {
    protected DuplicateNameException(SerializationInfo info, StreamingContext context);
    public DuplicateNameException(string s);
    public DuplicateNameException(string message, Exception innerException);
}
public class System.Data.EvaluateException : InvalidExpressionException {
    protected EvaluateException(SerializationInfo info, StreamingContext context);
    public EvaluateException(string s);
    public EvaluateException(string message, Exception innerException);
}
public class System.Data.FillErrorEventArgs : EventArgs {
    public bool Continue { get; public set; }
    public DataTable DataTable { get; }
    public Exception Errors { get; public set; }
    public Object[] Values { get; }
    public FillErrorEventArgs(DataTable dataTable, Object[] values);
    public bool get_Continue();
    public void set_Continue(bool value);
    public DataTable get_DataTable();
    public Exception get_Errors();
    public void set_Errors(Exception value);
    public Object[] get_Values();
}
public class System.Data.FillErrorEventHandler : MulticastDelegate {
    public FillErrorEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, FillErrorEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, FillErrorEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultPropertyAttribute("ConstraintName")]
public class System.Data.ForeignKeyConstraint : Constraint {
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public AcceptRejectRule AcceptRejectRule { get; public set; }
    [ReadOnlyAttribute("True")]
public DataColumn[] Columns { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public Rule DeleteRule { get; public set; }
    [ReadOnlyAttribute("True")]
public DataColumn[] RelatedColumns { get; }
    [ReadOnlyAttribute("True")]
public DataTable RelatedTable { get; }
    [ReadOnlyAttribute("True")]
public DataTable Table { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public Rule UpdateRule { get; public set; }
    public ForeignKeyConstraint(DataColumn parentColumn, DataColumn childColumn);
    public ForeignKeyConstraint(DataColumn[] parentColumns, DataColumn[] childColumns);
    public ForeignKeyConstraint(string constraintName, DataColumn parentColumn, DataColumn childColumn);
    public ForeignKeyConstraint(string constraintName, DataColumn[] parentColumns, DataColumn[] childColumns);
    [BrowsableAttribute("False")]
public ForeignKeyConstraint(string constraintName, string parentTableName, string parentTableNamespace, String[] parentColumnNames, String[] childColumnNames, AcceptRejectRule acceptRejectRule, Rule deleteRule, Rule updateRule);
    [BrowsableAttribute("False")]
public ForeignKeyConstraint(string constraintName, string parentTableName, String[] parentColumnNames, String[] childColumnNames, AcceptRejectRule acceptRejectRule, Rule deleteRule, Rule updateRule);
    public virtual AcceptRejectRule get_AcceptRejectRule();
    public virtual void set_AcceptRejectRule(AcceptRejectRule value);
    public virtual DataColumn[] get_Columns();
    public virtual Rule get_DeleteRule();
    public virtual void set_DeleteRule(Rule value);
    public virtual DataColumn[] get_RelatedColumns();
    public virtual DataTable get_RelatedTable();
    public virtual DataTable get_Table();
    public virtual Rule get_UpdateRule();
    public virtual void set_UpdateRule(Rule value);
    public virtual bool Equals(object key);
    public virtual int GetHashCode();
}
public interface System.Data.IColumnMapping {
    public string DataSetColumn { get; public set; }
    public string SourceColumn { get; public set; }
    public abstract virtual string get_DataSetColumn();
    public abstract virtual void set_DataSetColumn(string value);
    public abstract virtual string get_SourceColumn();
    public abstract virtual void set_SourceColumn(string value);
}
[DefaultMemberAttribute("Item")]
public interface System.Data.IColumnMappingCollection {
    public object Item { get; public set; }
    public abstract virtual object get_Item(string index);
    public abstract virtual void set_Item(string index, object value);
    public abstract virtual IColumnMapping Add(string sourceColumnName, string dataSetColumnName);
    public abstract virtual bool Contains(string sourceColumnName);
    public abstract virtual IColumnMapping GetByDataSetColumn(string dataSetColumnName);
    public abstract virtual int IndexOf(string sourceColumnName);
    public abstract virtual void RemoveAt(string sourceColumnName);
}
public interface System.Data.IDataAdapter {
    public MissingMappingAction MissingMappingAction { get; public set; }
    public MissingSchemaAction MissingSchemaAction { get; public set; }
    public ITableMappingCollection TableMappings { get; }
    public abstract virtual MissingMappingAction get_MissingMappingAction();
    public abstract virtual void set_MissingMappingAction(MissingMappingAction value);
    public abstract virtual MissingSchemaAction get_MissingSchemaAction();
    public abstract virtual void set_MissingSchemaAction(MissingSchemaAction value);
    public abstract virtual ITableMappingCollection get_TableMappings();
    public abstract virtual int Fill(DataSet dataSet);
    public abstract virtual DataTable[] FillSchema(DataSet dataSet, SchemaType schemaType);
    public abstract virtual IDataParameter[] GetFillParameters();
    public abstract virtual int Update(DataSet dataSet);
}
public interface System.Data.IDataParameter {
    public DbType DbType { get; public set; }
    public ParameterDirection Direction { get; public set; }
    public bool IsNullable { get; }
    public string ParameterName { get; public set; }
    public string SourceColumn { get; public set; }
    public DataRowVersion SourceVersion { get; public set; }
    public object Value { get; public set; }
    public abstract virtual DbType get_DbType();
    public abstract virtual void set_DbType(DbType value);
    public abstract virtual ParameterDirection get_Direction();
    public abstract virtual void set_Direction(ParameterDirection value);
    public abstract virtual bool get_IsNullable();
    public abstract virtual string get_ParameterName();
    public abstract virtual void set_ParameterName(string value);
    public abstract virtual string get_SourceColumn();
    public abstract virtual void set_SourceColumn(string value);
    public abstract virtual DataRowVersion get_SourceVersion();
    public abstract virtual void set_SourceVersion(DataRowVersion value);
    public abstract virtual object get_Value();
    public abstract virtual void set_Value(object value);
}
[DefaultMemberAttribute("Item")]
public interface System.Data.IDataParameterCollection {
    public object Item { get; public set; }
    public abstract virtual object get_Item(string parameterName);
    public abstract virtual void set_Item(string parameterName, object value);
    public abstract virtual bool Contains(string parameterName);
    public abstract virtual int IndexOf(string parameterName);
    public abstract virtual void RemoveAt(string parameterName);
}
public interface System.Data.IDataReader {
    public int Depth { get; }
    public bool IsClosed { get; }
    public int RecordsAffected { get; }
    public abstract virtual int get_Depth();
    public abstract virtual bool get_IsClosed();
    public abstract virtual int get_RecordsAffected();
    public abstract virtual void Close();
    public abstract virtual DataTable GetSchemaTable();
    public abstract virtual bool NextResult();
    public abstract virtual bool Read();
}
[DefaultMemberAttribute("Item")]
public interface System.Data.IDataRecord {
    public int FieldCount { get; }
    public object Item { get; }
    public object Item { get; }
    public abstract virtual int get_FieldCount();
    public abstract virtual object get_Item(int i);
    public abstract virtual object get_Item(string name);
    public abstract virtual bool GetBoolean(int i);
    public abstract virtual byte GetByte(int i);
    public abstract virtual long GetBytes(int i, long fieldOffset, Byte[] buffer, int bufferoffset, int length);
    public abstract virtual char GetChar(int i);
    public abstract virtual long GetChars(int i, long fieldoffset, Char[] buffer, int bufferoffset, int length);
    public abstract virtual IDataReader GetData(int i);
    public abstract virtual string GetDataTypeName(int i);
    public abstract virtual DateTime GetDateTime(int i);
    public abstract virtual decimal GetDecimal(int i);
    public abstract virtual double GetDouble(int i);
    public abstract virtual Type GetFieldType(int i);
    public abstract virtual float GetFloat(int i);
    public abstract virtual Guid GetGuid(int i);
    public abstract virtual short GetInt16(int i);
    public abstract virtual int GetInt32(int i);
    public abstract virtual long GetInt64(int i);
    public abstract virtual string GetName(int i);
    public abstract virtual int GetOrdinal(string name);
    public abstract virtual string GetString(int i);
    public abstract virtual object GetValue(int i);
    public abstract virtual int GetValues(Object[] values);
    public abstract virtual bool IsDBNull(int i);
}
public interface System.Data.IDbCommand {
    public string CommandText { get; public set; }
    public int CommandTimeout { get; public set; }
    public CommandType CommandType { get; public set; }
    public IDbConnection Connection { get; public set; }
    public IDataParameterCollection Parameters { get; }
    public IDbTransaction Transaction { get; public set; }
    public UpdateRowSource UpdatedRowSource { get; public set; }
    public abstract virtual string get_CommandText();
    public abstract virtual void set_CommandText(string value);
    public abstract virtual int get_CommandTimeout();
    public abstract virtual void set_CommandTimeout(int value);
    public abstract virtual CommandType get_CommandType();
    public abstract virtual void set_CommandType(CommandType value);
    public abstract virtual IDbConnection get_Connection();
    public abstract virtual void set_Connection(IDbConnection value);
    public abstract virtual IDataParameterCollection get_Parameters();
    public abstract virtual IDbTransaction get_Transaction();
    public abstract virtual void set_Transaction(IDbTransaction value);
    public abstract virtual UpdateRowSource get_UpdatedRowSource();
    public abstract virtual void set_UpdatedRowSource(UpdateRowSource value);
    public abstract virtual void Cancel();
    public abstract virtual IDbDataParameter CreateParameter();
    public abstract virtual int ExecuteNonQuery();
    public abstract virtual IDataReader ExecuteReader();
    public abstract virtual IDataReader ExecuteReader(CommandBehavior behavior);
    public abstract virtual object ExecuteScalar();
    public abstract virtual void Prepare();
}
public interface System.Data.IDbConnection {
    public string ConnectionString { get; public set; }
    public int ConnectionTimeout { get; }
    public string Database { get; }
    public ConnectionState State { get; }
    public abstract virtual string get_ConnectionString();
    public abstract virtual void set_ConnectionString(string value);
    public abstract virtual int get_ConnectionTimeout();
    public abstract virtual string get_Database();
    public abstract virtual ConnectionState get_State();
    public abstract virtual IDbTransaction BeginTransaction();
    public abstract virtual IDbTransaction BeginTransaction(IsolationLevel il);
    public abstract virtual void ChangeDatabase(string databaseName);
    public abstract virtual void Close();
    public abstract virtual IDbCommand CreateCommand();
    public abstract virtual void Open();
}
public interface System.Data.IDbDataAdapter {
    public IDbCommand DeleteCommand { get; public set; }
    public IDbCommand InsertCommand { get; public set; }
    public IDbCommand SelectCommand { get; public set; }
    public IDbCommand UpdateCommand { get; public set; }
    public abstract virtual IDbCommand get_DeleteCommand();
    public abstract virtual void set_DeleteCommand(IDbCommand value);
    public abstract virtual IDbCommand get_InsertCommand();
    public abstract virtual void set_InsertCommand(IDbCommand value);
    public abstract virtual IDbCommand get_SelectCommand();
    public abstract virtual void set_SelectCommand(IDbCommand value);
    public abstract virtual IDbCommand get_UpdateCommand();
    public abstract virtual void set_UpdateCommand(IDbCommand value);
}
public interface System.Data.IDbDataParameter {
    public byte Precision { get; public set; }
    public byte Scale { get; public set; }
    public int Size { get; public set; }
    public abstract virtual byte get_Precision();
    public abstract virtual void set_Precision(byte value);
    public abstract virtual byte get_Scale();
    public abstract virtual void set_Scale(byte value);
    public abstract virtual int get_Size();
    public abstract virtual void set_Size(int value);
}
public interface System.Data.IDbTransaction {
    public IDbConnection Connection { get; }
    public IsolationLevel IsolationLevel { get; }
    public abstract virtual IDbConnection get_Connection();
    public abstract virtual IsolationLevel get_IsolationLevel();
    public abstract virtual void Commit();
    public abstract virtual void Rollback();
}
public class System.Data.InRowChangingEventException : DataException {
    protected InRowChangingEventException(SerializationInfo info, StreamingContext context);
    public InRowChangingEventException(string s);
    public InRowChangingEventException(string message, Exception innerException);
}
public class System.Data.InternalDataCollectionBase : object {
    [BrowsableAttribute("False")]
public int Count { get; }
    [BrowsableAttribute("False")]
public bool IsReadOnly { get; }
    [BrowsableAttribute("False")]
public bool IsSynchronized { get; }
    protected ArrayList List { get; }
    [BrowsableAttribute("False")]
public object SyncRoot { get; }
    public virtual int get_Count();
    public bool get_IsReadOnly();
    public sealed virtual bool get_IsSynchronized();
    protected virtual ArrayList get_List();
    public sealed virtual object get_SyncRoot();
    public virtual void CopyTo(Array ar, int index);
    public virtual IEnumerator GetEnumerator();
}
public class System.Data.InvalidConstraintException : DataException {
    protected InvalidConstraintException(SerializationInfo info, StreamingContext context);
    public InvalidConstraintException(string s);
    public InvalidConstraintException(string message, Exception innerException);
}
public class System.Data.InvalidExpressionException : DataException {
    protected InvalidExpressionException(SerializationInfo info, StreamingContext context);
    public InvalidExpressionException(string s);
    public InvalidExpressionException(string message, Exception innerException);
}
public enum System.Data.IsolationLevel : Enum {
    public int value__;
    public static IsolationLevel Chaos;
    public static IsolationLevel ReadCommitted;
    public static IsolationLevel ReadUncommitted;
    public static IsolationLevel RepeatableRead;
    public static IsolationLevel Serializable;
    public static IsolationLevel Snapshot;
    public static IsolationLevel Unspecified;
}
public interface System.Data.ITableMapping {
    public IColumnMappingCollection ColumnMappings { get; }
    public string DataSetTable { get; public set; }
    public string SourceTable { get; public set; }
    public abstract virtual IColumnMappingCollection get_ColumnMappings();
    public abstract virtual string get_DataSetTable();
    public abstract virtual void set_DataSetTable(string value);
    public abstract virtual string get_SourceTable();
    public abstract virtual void set_SourceTable(string value);
}
[DefaultMemberAttribute("Item")]
public interface System.Data.ITableMappingCollection {
    public object Item { get; public set; }
    public abstract virtual object get_Item(string index);
    public abstract virtual void set_Item(string index, object value);
    public abstract virtual ITableMapping Add(string sourceTableName, string dataSetTableName);
    public abstract virtual bool Contains(string sourceTableName);
    public abstract virtual ITableMapping GetByDataSetTable(string dataSetTableName);
    public abstract virtual int IndexOf(string sourceTableName);
    public abstract virtual void RemoveAt(string sourceTableName);
}
public enum System.Data.KeyRestrictionBehavior : Enum {
    public int value__;
    public static KeyRestrictionBehavior AllowOnly;
    public static KeyRestrictionBehavior PreventUsage;
}
public enum System.Data.LoadOption : Enum {
    public int value__;
    public static LoadOption OverwriteChanges;
    public static LoadOption PreserveChanges;
    public static LoadOption Upsert;
}
public enum System.Data.MappingType : Enum {
    public int value__;
    public static MappingType Attribute;
    public static MappingType Element;
    public static MappingType Hidden;
    public static MappingType SimpleContent;
}
public class System.Data.MergeFailedEventArgs : EventArgs {
    public string Conflict { get; }
    public DataTable Table { get; }
    public MergeFailedEventArgs(DataTable table, string conflict);
    public string get_Conflict();
    public DataTable get_Table();
}
public class System.Data.MergeFailedEventHandler : MulticastDelegate {
    public MergeFailedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, MergeFailedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, MergeFailedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Data.MissingMappingAction : Enum {
    public int value__;
    public static MissingMappingAction Error;
    public static MissingMappingAction Ignore;
    public static MissingMappingAction Passthrough;
}
public class System.Data.MissingPrimaryKeyException : DataException {
    protected MissingPrimaryKeyException(SerializationInfo info, StreamingContext context);
    public MissingPrimaryKeyException(string s);
    public MissingPrimaryKeyException(string message, Exception innerException);
}
public enum System.Data.MissingSchemaAction : Enum {
    public int value__;
    public static MissingSchemaAction Add;
    public static MissingSchemaAction AddWithKey;
    public static MissingSchemaAction Error;
    public static MissingSchemaAction Ignore;
}
public class System.Data.NoNullAllowedException : DataException {
    protected NoNullAllowedException(SerializationInfo info, StreamingContext context);
    public NoNullAllowedException(string s);
    public NoNullAllowedException(string message, Exception innerException);
}
public enum System.Data.ParameterDirection : Enum {
    public int value__;
    public static ParameterDirection Input;
    public static ParameterDirection InputOutput;
    public static ParameterDirection Output;
    public static ParameterDirection ReturnValue;
}
public class System.Data.PropertyCollection : Hashtable {
    protected PropertyCollection(SerializationInfo info, StreamingContext context);
    public virtual object Clone();
}
public class System.Data.ReadOnlyException : DataException {
    protected ReadOnlyException(SerializationInfo info, StreamingContext context);
    public ReadOnlyException(string s);
    public ReadOnlyException(string message, Exception innerException);
}
public class System.Data.RowNotInTableException : DataException {
    protected RowNotInTableException(SerializationInfo info, StreamingContext context);
    public RowNotInTableException(string s);
    public RowNotInTableException(string message, Exception innerException);
}
public enum System.Data.Rule : Enum {
    public int value__;
    public static Rule Cascade;
    public static Rule None;
    public static Rule SetDefault;
    public static Rule SetNull;
}
public enum System.Data.SchemaSerializationMode : Enum {
    public int value__;
    public static SchemaSerializationMode ExcludeSchema;
    public static SchemaSerializationMode IncludeSchema;
}
public enum System.Data.SchemaType : Enum {
    public int value__;
    public static SchemaType Mapped;
    public static SchemaType Source;
}
public enum System.Data.SerializationFormat : Enum {
    public int value__;
    public static SerializationFormat Binary;
    public static SerializationFormat Xml;
}
public enum System.Data.SqlDbType : Enum {
    public int value__;
    public static SqlDbType BigInt;
    public static SqlDbType Binary;
    public static SqlDbType Bit;
    public static SqlDbType Char;
    public static SqlDbType Date;
    public static SqlDbType DateTime;
    public static SqlDbType DateTime2;
    public static SqlDbType DateTimeOffset;
    public static SqlDbType Decimal;
    public static SqlDbType Float;
    public static SqlDbType Image;
    public static SqlDbType Int;
    public static SqlDbType Money;
    public static SqlDbType NChar;
    public static SqlDbType NText;
    public static SqlDbType NVarChar;
    public static SqlDbType Real;
    public static SqlDbType SmallDateTime;
    public static SqlDbType SmallInt;
    public static SqlDbType SmallMoney;
    public static SqlDbType Structured;
    public static SqlDbType Text;
    public static SqlDbType Time;
    public static SqlDbType Timestamp;
    public static SqlDbType TinyInt;
    public static SqlDbType Udt;
    public static SqlDbType UniqueIdentifier;
    public static SqlDbType VarBinary;
    public static SqlDbType VarChar;
    public static SqlDbType Variant;
    public static SqlDbType Xml;
}
public interface System.Data.SqlTypes.INullable {
    public bool IsNull { get; }
    public abstract virtual bool get_IsNull();
}
public class System.Data.SqlTypes.SqlAlreadyFilledException : SqlTypeException {
    public SqlAlreadyFilledException(string message);
    public SqlAlreadyFilledException(string message, Exception e);
}
[DefaultMemberAttribute("Item")]
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlBinary : ValueType {
    public static SqlBinary Null;
    public bool IsNull { get; }
    public byte Item { get; }
    public int Length { get; }
    public Byte[] Value { get; }
    public SqlBinary(Byte[] value);
    public sealed virtual bool get_IsNull();
    public byte get_Item(int index);
    public int get_Length();
    public Byte[] get_Value();
    public static SqlBinary Add(SqlBinary x, SqlBinary y);
    public int CompareTo(SqlBinary value);
    public sealed virtual int CompareTo(object value);
    public static SqlBinary Concat(SqlBinary x, SqlBinary y);
    public static SqlBoolean Equals(SqlBinary x, SqlBinary y);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
    public static SqlBoolean GreaterThan(SqlBinary x, SqlBinary y);
    public static SqlBoolean GreaterThanOrEqual(SqlBinary x, SqlBinary y);
    public static SqlBoolean LessThan(SqlBinary x, SqlBinary y);
    public static SqlBoolean LessThanOrEqual(SqlBinary x, SqlBinary y);
    public static SqlBoolean NotEquals(SqlBinary x, SqlBinary y);
    public static SqlBinary op_Addition(SqlBinary x, SqlBinary y);
    public static SqlBoolean op_Equality(SqlBinary x, SqlBinary y);
    public static Byte[] op_Explicit(SqlBinary x);
    public static SqlBinary op_Explicit(SqlGuid x);
    public static SqlBoolean op_GreaterThan(SqlBinary x, SqlBinary y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlBinary x, SqlBinary y);
    public static SqlBinary op_Implicit(Byte[] x);
    public static SqlBoolean op_Inequality(SqlBinary x, SqlBinary y);
    public static SqlBoolean op_LessThan(SqlBinary x, SqlBinary y);
    public static SqlBoolean op_LessThanOrEqual(SqlBinary x, SqlBinary y);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public SqlGuid ToSqlGuid();
    public virtual string ToString();
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlBoolean : ValueType {
    public static SqlBoolean False;
    public static SqlBoolean Null;
    public static SqlBoolean One;
    public static SqlBoolean True;
    public static SqlBoolean Zero;
    public byte ByteValue { get; }
    public bool IsFalse { get; }
    public bool IsNull { get; }
    public bool IsTrue { get; }
    public bool Value { get; }
    public SqlBoolean(bool value);
    public SqlBoolean(int value);
    public byte get_ByteValue();
    public bool get_IsFalse();
    public sealed virtual bool get_IsNull();
    public bool get_IsTrue();
    public bool get_Value();
    public static SqlBoolean And(SqlBoolean x, SqlBoolean y);
    public int CompareTo(SqlBoolean value);
    public sealed virtual int CompareTo(object value);
    public static SqlBoolean Equals(SqlBoolean x, SqlBoolean y);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
    public static SqlBoolean GreaterThan(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean GreaterThanOrEquals(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean LessThan(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean LessThanOrEquals(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean NotEquals(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean OnesComplement(SqlBoolean x);
    public static SqlBoolean op_BitwiseAnd(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_BitwiseOr(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_Equality(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_ExclusiveOr(SqlBoolean x, SqlBoolean y);
    public static bool op_Explicit(SqlBoolean x);
    public static SqlBoolean op_Explicit(SqlByte x);
    public static SqlBoolean op_Explicit(SqlDecimal x);
    public static SqlBoolean op_Explicit(SqlDouble x);
    public static SqlBoolean op_Explicit(SqlInt16 x);
    public static SqlBoolean op_Explicit(SqlInt32 x);
    public static SqlBoolean op_Explicit(SqlInt64 x);
    public static SqlBoolean op_Explicit(SqlMoney x);
    public static SqlBoolean op_Explicit(SqlSingle x);
    public static SqlBoolean op_Explicit(SqlString x);
    public static bool op_False(SqlBoolean x);
    public static SqlBoolean op_GreaterThan(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_Implicit(bool x);
    public static SqlBoolean op_Inequality(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_LessThan(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_LessThanOrEqual(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean op_LogicalNot(SqlBoolean x);
    public static SqlBoolean op_OnesComplement(SqlBoolean x);
    public static bool op_True(SqlBoolean x);
    public static SqlBoolean Or(SqlBoolean x, SqlBoolean y);
    public static SqlBoolean Parse(string s);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public SqlByte ToSqlByte();
    public SqlDecimal ToSqlDecimal();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public virtual string ToString();
    public static SqlBoolean Xor(SqlBoolean x, SqlBoolean y);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlByte : ValueType {
    public static SqlByte MaxValue;
    public static SqlByte MinValue;
    public static SqlByte Null;
    public static SqlByte Zero;
    public bool IsNull { get; }
    public byte Value { get; }
    public SqlByte(byte value);
    public sealed virtual bool get_IsNull();
    public byte get_Value();
    public static SqlByte Add(SqlByte x, SqlByte y);
    public static SqlByte BitwiseAnd(SqlByte x, SqlByte y);
    public static SqlByte BitwiseOr(SqlByte x, SqlByte y);
    public int CompareTo(SqlByte value);
    public sealed virtual int CompareTo(object value);
    public static SqlByte Divide(SqlByte x, SqlByte y);
    public static SqlBoolean Equals(SqlByte x, SqlByte y);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
    public static SqlBoolean GreaterThan(SqlByte x, SqlByte y);
    public static SqlBoolean GreaterThanOrEqual(SqlByte x, SqlByte y);
    public static SqlBoolean LessThan(SqlByte x, SqlByte y);
    public static SqlBoolean LessThanOrEqual(SqlByte x, SqlByte y);
    public static SqlByte Mod(SqlByte x, SqlByte y);
    public static SqlByte Modulus(SqlByte x, SqlByte y);
    public static SqlByte Multiply(SqlByte x, SqlByte y);
    public static SqlBoolean NotEquals(SqlByte x, SqlByte y);
    public static SqlByte OnesComplement(SqlByte x);
    public static SqlByte op_Addition(SqlByte x, SqlByte y);
    public static SqlByte op_BitwiseAnd(SqlByte x, SqlByte y);
    public static SqlByte op_BitwiseOr(SqlByte x, SqlByte y);
    public static SqlByte op_Division(SqlByte x, SqlByte y);
    public static SqlBoolean op_Equality(SqlByte x, SqlByte y);
    public static SqlByte op_ExclusiveOr(SqlByte x, SqlByte y);
    public static SqlByte op_Explicit(SqlBoolean x);
    public static byte op_Explicit(SqlByte x);
    public static SqlByte op_Explicit(SqlDecimal x);
    public static SqlByte op_Explicit(SqlDouble x);
    public static SqlByte op_Explicit(SqlInt16 x);
    public static SqlByte op_Explicit(SqlInt32 x);
    public static SqlByte op_Explicit(SqlInt64 x);
    public static SqlByte op_Explicit(SqlMoney x);
    public static SqlByte op_Explicit(SqlSingle x);
    public static SqlByte op_Explicit(SqlString x);
    public static SqlBoolean op_GreaterThan(SqlByte x, SqlByte y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlByte x, SqlByte y);
    public static SqlByte op_Implicit(byte x);
    public static SqlBoolean op_Inequality(SqlByte x, SqlByte y);
    public static SqlBoolean op_LessThan(SqlByte x, SqlByte y);
    public static SqlBoolean op_LessThanOrEqual(SqlByte x, SqlByte y);
    public static SqlByte op_Modulus(SqlByte x, SqlByte y);
    public static SqlByte op_Multiply(SqlByte x, SqlByte y);
    public static SqlByte op_OnesComplement(SqlByte x);
    public static SqlByte op_Subtraction(SqlByte x, SqlByte y);
    public static SqlByte Parse(string s);
    public static SqlByte Subtract(SqlByte x, SqlByte y);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public SqlBoolean ToSqlBoolean();
    public SqlDecimal ToSqlDecimal();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public virtual string ToString();
    public static SqlByte Xor(SqlByte x, SqlByte y);
}
[DefaultMemberAttribute("Item")]
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlBytes : object {
    public Byte[] Buffer { get; }
    public bool IsNull { get; }
    public byte Item { get; public set; }
    public long Length { get; }
    public long MaxLength { get; }
    public static SqlBytes Null { get; }
    public StorageState Storage { get; }
    public Stream Stream { get; public set; }
    public Byte[] Value { get; }
    public SqlBytes(Byte[] buffer);
    public SqlBytes(SqlBinary value);
    public SqlBytes(Stream s);
    public Byte[] get_Buffer();
    public sealed virtual bool get_IsNull();
    public byte get_Item(long offset);
    public void set_Item(long offset, byte value);
    public long get_Length();
    public long get_MaxLength();
    public static SqlBytes get_Null();
    public StorageState get_Storage();
    public Stream get_Stream();
    public void set_Stream(Stream value);
    public Byte[] get_Value();
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
    public static SqlBytes op_Explicit(SqlBinary value);
    public static SqlBinary op_Explicit(SqlBytes value);
    public long Read(long offset, Byte[] buffer, int offsetInBuffer, int count);
    public void SetLength(long value);
    public void SetNull();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader r);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public SqlBinary ToSqlBinary();
    public void Write(long offset, Byte[] buffer, int offsetInBuffer, int count);
}
[DefaultMemberAttribute("Item")]
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlChars : object {
    public Char[] Buffer { get; }
    public bool IsNull { get; }
    public char Item { get; public set; }
    public long Length { get; }
    public long MaxLength { get; }
    public static SqlChars Null { get; }
    public StorageState Storage { get; }
    public Char[] Value { get; }
    public SqlChars(Char[] buffer);
    public SqlChars(SqlString value);
    public Char[] get_Buffer();
    public sealed virtual bool get_IsNull();
    public char get_Item(long offset);
    public void set_Item(long offset, char value);
    public long get_Length();
    public long get_MaxLength();
    public static SqlChars get_Null();
    public StorageState get_Storage();
    public Char[] get_Value();
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
    public static SqlString op_Explicit(SqlChars value);
    public static SqlChars op_Explicit(SqlString value);
    public long Read(long offset, Char[] buffer, int offsetInBuffer, int count);
    public void SetLength(long value);
    public void SetNull();
    private sealed virtual override void System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo info, StreamingContext context);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader r);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public SqlString ToSqlString();
    public void Write(long offset, Char[] buffer, int offsetInBuffer, int count);
}
[FlagsAttribute]
public enum System.Data.SqlTypes.SqlCompareOptions : Enum {
    public int value__;
    public static SqlCompareOptions BinarySort;
    public static SqlCompareOptions BinarySort2;
    public static SqlCompareOptions IgnoreCase;
    public static SqlCompareOptions IgnoreKanaType;
    public static SqlCompareOptions IgnoreNonSpace;
    public static SqlCompareOptions IgnoreWidth;
    public static SqlCompareOptions None;
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlDateTime : ValueType {
    public static SqlDateTime MaxValue;
    public static SqlDateTime MinValue;
    public static SqlDateTime Null;
    public static int SQLTicksPerHour;
    public static int SQLTicksPerMinute;
    public static int SQLTicksPerSecond;
    public int DayTicks { get; }
    public bool IsNull { get; }
    public int TimeTicks { get; }
    public DateTime Value { get; }
    public SqlDateTime(DateTime value);
    public SqlDateTime(int dayTicks, int timeTicks);
    public SqlDateTime(int year, int month, int day);
    public SqlDateTime(int year, int month, int day, int hour, int minute, int second);
    public SqlDateTime(int year, int month, int day, int hour, int minute, int second, double millisecond);
    public SqlDateTime(int year, int month, int day, int hour, int minute, int second, int bilisecond);
    public int get_DayTicks();
    public sealed virtual bool get_IsNull();
    public int get_TimeTicks();
    public DateTime get_Value();
    public static SqlDateTime Add(SqlDateTime x, TimeSpan t);
    public int CompareTo(SqlDateTime value);
    public sealed virtual int CompareTo(object value);
    public static SqlBoolean Equals(SqlDateTime x, SqlDateTime y);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
    public static SqlBoolean GreaterThan(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean GreaterThanOrEqual(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean LessThan(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean LessThanOrEqual(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean NotEquals(SqlDateTime x, SqlDateTime y);
    public static SqlDateTime op_Addition(SqlDateTime x, TimeSpan t);
    public static SqlBoolean op_Equality(SqlDateTime x, SqlDateTime y);
    public static DateTime op_Explicit(SqlDateTime x);
    public static SqlDateTime op_Explicit(SqlString x);
    public static SqlBoolean op_GreaterThan(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlDateTime x, SqlDateTime y);
    public static SqlDateTime op_Implicit(DateTime value);
    public static SqlBoolean op_Inequality(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean op_LessThan(SqlDateTime x, SqlDateTime y);
    public static SqlBoolean op_LessThanOrEqual(SqlDateTime x, SqlDateTime y);
    public static SqlDateTime op_Subtraction(SqlDateTime x, TimeSpan t);
    public static SqlDateTime Parse(string s);
    public static SqlDateTime Subtract(SqlDateTime x, TimeSpan t);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public SqlString ToSqlString();
    public virtual string ToString();
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlDecimal : ValueType {
    public static byte MaxPrecision;
    public static byte MaxScale;
    public static SqlDecimal MaxValue;
    public static SqlDecimal MinValue;
    public static SqlDecimal Null;
    public Byte[] BinData { get; }
    public Int32[] Data { get; }
    public bool IsNull { get; }
    public bool IsPositive { get; }
    public byte Precision { get; }
    public byte Scale { get; }
    public decimal Value { get; }
    public SqlDecimal(byte bPrecision, byte bScale, bool fPositive, int data1, int data2, int data3, int data4);
    public SqlDecimal(byte bPrecision, byte bScale, bool fPositive, Int32[] bits);
    public SqlDecimal(decimal value);
    public SqlDecimal(double dVal);
    public SqlDecimal(int value);
    public SqlDecimal(long value);
    public Byte[] get_BinData();
    public Int32[] get_Data();
    public sealed virtual bool get_IsNull();
    public bool get_IsPositive();
    public byte get_Precision();
    public byte get_Scale();
    public decimal get_Value();
    public static SqlDecimal Abs(SqlDecimal n);
    public static SqlDecimal Add(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal AdjustScale(SqlDecimal n, int digits, bool fRound);
    public static SqlDecimal Ceiling(SqlDecimal n);
    public int CompareTo(SqlDecimal value);
    public sealed virtual int CompareTo(object value);
    public static SqlDecimal ConvertToPrecScale(SqlDecimal n, int precision, int scale);
    public static SqlDecimal Divide(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean Equals(SqlDecimal x, SqlDecimal y);
    public virtual bool Equals(object value);
    public static SqlDecimal Floor(SqlDecimal n);
    public virtual int GetHashCode();
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
    public static SqlBoolean GreaterThan(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean GreaterThanOrEqual(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean LessThan(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean LessThanOrEqual(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal Multiply(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean NotEquals(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal op_Addition(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal op_Division(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean op_Equality(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal op_Explicit(SqlBoolean x);
    public static decimal op_Explicit(SqlDecimal x);
    public static SqlDecimal op_Explicit(SqlDouble x);
    public static SqlDecimal op_Explicit(SqlSingle x);
    public static SqlDecimal op_Explicit(SqlString x);
    public static SqlDecimal op_Explicit(double x);
    public static SqlBoolean op_GreaterThan(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal op_Implicit(SqlByte x);
    public static SqlDecimal op_Implicit(SqlInt16 x);
    public static SqlDecimal op_Implicit(SqlInt32 x);
    public static SqlDecimal op_Implicit(SqlInt64 x);
    public static SqlDecimal op_Implicit(SqlMoney x);
    public static SqlDecimal op_Implicit(decimal x);
    public static SqlDecimal op_Implicit(long x);
    public static SqlBoolean op_Inequality(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean op_LessThan(SqlDecimal x, SqlDecimal y);
    public static SqlBoolean op_LessThanOrEqual(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal op_Multiply(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal op_Subtraction(SqlDecimal x, SqlDecimal y);
    public static SqlDecimal op_UnaryNegation(SqlDecimal x);
    public static SqlDecimal Parse(string s);
    public static SqlDecimal Power(SqlDecimal n, double exp);
    public static SqlDecimal Round(SqlDecimal n, int position);
    public static SqlInt32 Sign(SqlDecimal n);
    public static SqlDecimal Subtract(SqlDecimal x, SqlDecimal y);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public double ToDouble();
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public virtual string ToString();
    public static SqlDecimal Truncate(SqlDecimal n, int position);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlDouble : ValueType {
    public static SqlDouble MaxValue;
    public static SqlDouble MinValue;
    public static SqlDouble Null;
    public static SqlDouble Zero;
    public bool IsNull { get; }
    public double Value { get; }
    public SqlDouble(double value);
    public sealed virtual bool get_IsNull();
    public double get_Value();
    public static SqlDouble Add(SqlDouble x, SqlDouble y);
    public int CompareTo(SqlDouble value);
    public sealed virtual int CompareTo(object value);
    public static SqlDouble Divide(SqlDouble x, SqlDouble y);
    public static SqlBoolean Equals(SqlDouble x, SqlDouble y);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
    public static SqlBoolean GreaterThan(SqlDouble x, SqlDouble y);
    public static SqlBoolean GreaterThanOrEqual(SqlDouble x, SqlDouble y);
    public static SqlBoolean LessThan(SqlDouble x, SqlDouble y);
    public static SqlBoolean LessThanOrEqual(SqlDouble x, SqlDouble y);
    public static SqlDouble Multiply(SqlDouble x, SqlDouble y);
    public static SqlBoolean NotEquals(SqlDouble x, SqlDouble y);
    public static SqlDouble op_Addition(SqlDouble x, SqlDouble y);
    public static SqlDouble op_Division(SqlDouble x, SqlDouble y);
    public static SqlBoolean op_Equality(SqlDouble x, SqlDouble y);
    public static SqlDouble op_Explicit(SqlBoolean x);
    public static double op_Explicit(SqlDouble x);
    public static SqlDouble op_Explicit(SqlString x);
    public static SqlBoolean op_GreaterThan(SqlDouble x, SqlDouble y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlDouble x, SqlDouble y);
    public static SqlDouble op_Implicit(SqlByte x);
    public static SqlDouble op_Implicit(SqlDecimal x);
    public static SqlDouble op_Implicit(SqlInt16 x);
    public static SqlDouble op_Implicit(SqlInt32 x);
    public static SqlDouble op_Implicit(SqlInt64 x);
    public static SqlDouble op_Implicit(SqlMoney x);
    public static SqlDouble op_Implicit(SqlSingle x);
    public static SqlDouble op_Implicit(double x);
    public static SqlBoolean op_Inequality(SqlDouble x, SqlDouble y);
    public static SqlBoolean op_LessThan(SqlDouble x, SqlDouble y);
    public static SqlBoolean op_LessThanOrEqual(SqlDouble x, SqlDouble y);
    public static SqlDouble op_Multiply(SqlDouble x, SqlDouble y);
    public static SqlDouble op_Subtraction(SqlDouble x, SqlDouble y);
    public static SqlDouble op_UnaryNegation(SqlDouble x);
    public static SqlDouble Parse(string s);
    public static SqlDouble Subtract(SqlDouble x, SqlDouble y);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDecimal ToSqlDecimal();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public virtual string ToString();
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlGuid : ValueType {
    public static SqlGuid Null;
    public bool IsNull { get; }
    public Guid Value { get; }
    public SqlGuid(Byte[] value);
    public SqlGuid(Guid g);
    public SqlGuid(int a, short b, short c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k);
    public SqlGuid(string s);
    public sealed virtual bool get_IsNull();
    public Guid get_Value();
    public int CompareTo(SqlGuid value);
    public sealed virtual int CompareTo(object value);
    public static SqlBoolean Equals(SqlGuid x, SqlGuid y);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
    public static SqlBoolean GreaterThan(SqlGuid x, SqlGuid y);
    public static SqlBoolean GreaterThanOrEqual(SqlGuid x, SqlGuid y);
    public static SqlBoolean LessThan(SqlGuid x, SqlGuid y);
    public static SqlBoolean LessThanOrEqual(SqlGuid x, SqlGuid y);
    public static SqlBoolean NotEquals(SqlGuid x, SqlGuid y);
    public static SqlBoolean op_Equality(SqlGuid x, SqlGuid y);
    public static SqlGuid op_Explicit(SqlBinary x);
    public static Guid op_Explicit(SqlGuid x);
    public static SqlGuid op_Explicit(SqlString x);
    public static SqlBoolean op_GreaterThan(SqlGuid x, SqlGuid y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlGuid x, SqlGuid y);
    public static SqlGuid op_Implicit(Guid x);
    public static SqlBoolean op_Inequality(SqlGuid x, SqlGuid y);
    public static SqlBoolean op_LessThan(SqlGuid x, SqlGuid y);
    public static SqlBoolean op_LessThanOrEqual(SqlGuid x, SqlGuid y);
    public static SqlGuid Parse(string s);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public Byte[] ToByteArray();
    public SqlBinary ToSqlBinary();
    public SqlString ToSqlString();
    public virtual string ToString();
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlInt16 : ValueType {
    public static SqlInt16 MaxValue;
    public static SqlInt16 MinValue;
    public static SqlInt16 Null;
    public static SqlInt16 Zero;
    public bool IsNull { get; }
    public short Value { get; }
    public SqlInt16(short value);
    public sealed virtual bool get_IsNull();
    public short get_Value();
    public static SqlInt16 Add(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 BitwiseAnd(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 BitwiseOr(SqlInt16 x, SqlInt16 y);
    public int CompareTo(SqlInt16 value);
    public sealed virtual int CompareTo(object value);
    public static SqlInt16 Divide(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean Equals(SqlInt16 x, SqlInt16 y);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
    public static SqlBoolean GreaterThan(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean GreaterThanOrEqual(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean LessThan(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean LessThanOrEqual(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 Mod(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 Modulus(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 Multiply(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean NotEquals(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 OnesComplement(SqlInt16 x);
    public static SqlInt16 op_Addition(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_BitwiseAnd(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_BitwiseOr(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_Division(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean op_Equality(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_ExclusiveOr(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_Explicit(SqlBoolean x);
    public static SqlInt16 op_Explicit(SqlDecimal x);
    public static SqlInt16 op_Explicit(SqlDouble x);
    public static short op_Explicit(SqlInt16 x);
    public static SqlInt16 op_Explicit(SqlInt32 x);
    public static SqlInt16 op_Explicit(SqlInt64 x);
    public static SqlInt16 op_Explicit(SqlMoney x);
    public static SqlInt16 op_Explicit(SqlSingle x);
    public static SqlInt16 op_Explicit(SqlString x);
    public static SqlBoolean op_GreaterThan(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_Implicit(SqlByte x);
    public static SqlInt16 op_Implicit(short x);
    public static SqlBoolean op_Inequality(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean op_LessThan(SqlInt16 x, SqlInt16 y);
    public static SqlBoolean op_LessThanOrEqual(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_Modulus(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_Multiply(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_OnesComplement(SqlInt16 x);
    public static SqlInt16 op_Subtraction(SqlInt16 x, SqlInt16 y);
    public static SqlInt16 op_UnaryNegation(SqlInt16 x);
    public static SqlInt16 Parse(string s);
    public static SqlInt16 Subtract(SqlInt16 x, SqlInt16 y);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDecimal ToSqlDecimal();
    public SqlDouble ToSqlDouble();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public virtual string ToString();
    public static SqlInt16 Xor(SqlInt16 x, SqlInt16 y);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlInt32 : ValueType {
    public static SqlInt32 MaxValue;
    public static SqlInt32 MinValue;
    public static SqlInt32 Null;
    public static SqlInt32 Zero;
    public bool IsNull { get; }
    public int Value { get; }
    public SqlInt32(int value);
    public sealed virtual bool get_IsNull();
    public int get_Value();
    public static SqlInt32 Add(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 BitwiseAnd(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 BitwiseOr(SqlInt32 x, SqlInt32 y);
    public int CompareTo(SqlInt32 value);
    public sealed virtual int CompareTo(object value);
    public static SqlInt32 Divide(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean Equals(SqlInt32 x, SqlInt32 y);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
    public static SqlBoolean GreaterThan(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean GreaterThanOrEqual(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean LessThan(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean LessThanOrEqual(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 Mod(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 Modulus(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 Multiply(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean NotEquals(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 OnesComplement(SqlInt32 x);
    public static SqlInt32 op_Addition(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_BitwiseAnd(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_BitwiseOr(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_Division(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean op_Equality(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_ExclusiveOr(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_Explicit(SqlBoolean x);
    public static SqlInt32 op_Explicit(SqlDecimal x);
    public static SqlInt32 op_Explicit(SqlDouble x);
    public static int op_Explicit(SqlInt32 x);
    public static SqlInt32 op_Explicit(SqlInt64 x);
    public static SqlInt32 op_Explicit(SqlMoney x);
    public static SqlInt32 op_Explicit(SqlSingle x);
    public static SqlInt32 op_Explicit(SqlString x);
    public static SqlBoolean op_GreaterThan(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_Implicit(SqlByte x);
    public static SqlInt32 op_Implicit(SqlInt16 x);
    public static SqlInt32 op_Implicit(int x);
    public static SqlBoolean op_Inequality(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean op_LessThan(SqlInt32 x, SqlInt32 y);
    public static SqlBoolean op_LessThanOrEqual(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_Modulus(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_Multiply(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_OnesComplement(SqlInt32 x);
    public static SqlInt32 op_Subtraction(SqlInt32 x, SqlInt32 y);
    public static SqlInt32 op_UnaryNegation(SqlInt32 x);
    public static SqlInt32 Parse(string s);
    public static SqlInt32 Subtract(SqlInt32 x, SqlInt32 y);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDecimal ToSqlDecimal();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public virtual string ToString();
    public static SqlInt32 Xor(SqlInt32 x, SqlInt32 y);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlInt64 : ValueType {
    public static SqlInt64 MaxValue;
    public static SqlInt64 MinValue;
    public static SqlInt64 Null;
    public static SqlInt64 Zero;
    public bool IsNull { get; }
    public long Value { get; }
    public SqlInt64(long value);
    public sealed virtual bool get_IsNull();
    public long get_Value();
    public static SqlInt64 Add(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 BitwiseAnd(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 BitwiseOr(SqlInt64 x, SqlInt64 y);
    public int CompareTo(SqlInt64 value);
    public sealed virtual int CompareTo(object value);
    public static SqlInt64 Divide(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean Equals(SqlInt64 x, SqlInt64 y);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
    public static SqlBoolean GreaterThan(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean GreaterThanOrEqual(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean LessThan(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean LessThanOrEqual(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 Mod(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 Modulus(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 Multiply(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean NotEquals(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 OnesComplement(SqlInt64 x);
    public static SqlInt64 op_Addition(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_BitwiseAnd(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_BitwiseOr(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_Division(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean op_Equality(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_ExclusiveOr(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_Explicit(SqlBoolean x);
    public static SqlInt64 op_Explicit(SqlDecimal x);
    public static SqlInt64 op_Explicit(SqlDouble x);
    public static long op_Explicit(SqlInt64 x);
    public static SqlInt64 op_Explicit(SqlMoney x);
    public static SqlInt64 op_Explicit(SqlSingle x);
    public static SqlInt64 op_Explicit(SqlString x);
    public static SqlBoolean op_GreaterThan(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_Implicit(SqlByte x);
    public static SqlInt64 op_Implicit(SqlInt16 x);
    public static SqlInt64 op_Implicit(SqlInt32 x);
    public static SqlInt64 op_Implicit(long x);
    public static SqlBoolean op_Inequality(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean op_LessThan(SqlInt64 x, SqlInt64 y);
    public static SqlBoolean op_LessThanOrEqual(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_Modulus(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_Multiply(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_OnesComplement(SqlInt64 x);
    public static SqlInt64 op_Subtraction(SqlInt64 x, SqlInt64 y);
    public static SqlInt64 op_UnaryNegation(SqlInt64 x);
    public static SqlInt64 Parse(string s);
    public static SqlInt64 Subtract(SqlInt64 x, SqlInt64 y);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDecimal ToSqlDecimal();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlMoney ToSqlMoney();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public virtual string ToString();
    public static SqlInt64 Xor(SqlInt64 x, SqlInt64 y);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlMoney : ValueType {
    public static SqlMoney MaxValue;
    public static SqlMoney MinValue;
    public static SqlMoney Null;
    public static SqlMoney Zero;
    public bool IsNull { get; }
    public decimal Value { get; }
    public SqlMoney(decimal value);
    public SqlMoney(double value);
    public SqlMoney(int value);
    public SqlMoney(long value);
    public sealed virtual bool get_IsNull();
    public decimal get_Value();
    public static SqlMoney Add(SqlMoney x, SqlMoney y);
    public int CompareTo(SqlMoney value);
    public sealed virtual int CompareTo(object value);
    public static SqlMoney Divide(SqlMoney x, SqlMoney y);
    public static SqlBoolean Equals(SqlMoney x, SqlMoney y);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
    public static SqlBoolean GreaterThan(SqlMoney x, SqlMoney y);
    public static SqlBoolean GreaterThanOrEqual(SqlMoney x, SqlMoney y);
    public static SqlBoolean LessThan(SqlMoney x, SqlMoney y);
    public static SqlBoolean LessThanOrEqual(SqlMoney x, SqlMoney y);
    public static SqlMoney Multiply(SqlMoney x, SqlMoney y);
    public static SqlBoolean NotEquals(SqlMoney x, SqlMoney y);
    public static SqlMoney op_Addition(SqlMoney x, SqlMoney y);
    public static SqlMoney op_Division(SqlMoney x, SqlMoney y);
    public static SqlBoolean op_Equality(SqlMoney x, SqlMoney y);
    public static SqlMoney op_Explicit(SqlBoolean x);
    public static SqlMoney op_Explicit(SqlDecimal x);
    public static SqlMoney op_Explicit(SqlDouble x);
    public static decimal op_Explicit(SqlMoney x);
    public static SqlMoney op_Explicit(SqlSingle x);
    public static SqlMoney op_Explicit(SqlString x);
    public static SqlMoney op_Explicit(double x);
    public static SqlBoolean op_GreaterThan(SqlMoney x, SqlMoney y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlMoney x, SqlMoney y);
    public static SqlMoney op_Implicit(SqlByte x);
    public static SqlMoney op_Implicit(SqlInt16 x);
    public static SqlMoney op_Implicit(SqlInt32 x);
    public static SqlMoney op_Implicit(SqlInt64 x);
    public static SqlMoney op_Implicit(decimal x);
    public static SqlMoney op_Implicit(long x);
    public static SqlBoolean op_Inequality(SqlMoney x, SqlMoney y);
    public static SqlBoolean op_LessThan(SqlMoney x, SqlMoney y);
    public static SqlBoolean op_LessThanOrEqual(SqlMoney x, SqlMoney y);
    public static SqlMoney op_Multiply(SqlMoney x, SqlMoney y);
    public static SqlMoney op_Subtraction(SqlMoney x, SqlMoney y);
    public static SqlMoney op_UnaryNegation(SqlMoney x);
    public static SqlMoney Parse(string s);
    public static SqlMoney Subtract(SqlMoney x, SqlMoney y);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public decimal ToDecimal();
    public double ToDouble();
    public int ToInt32();
    public long ToInt64();
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDecimal ToSqlDecimal();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlSingle ToSqlSingle();
    public SqlString ToSqlString();
    public virtual string ToString();
}
public class System.Data.SqlTypes.SqlNotFilledException : SqlTypeException {
    public SqlNotFilledException(string message);
    public SqlNotFilledException(string message, Exception e);
}
public class System.Data.SqlTypes.SqlNullValueException : SqlTypeException {
    public SqlNullValueException(string message);
    public SqlNullValueException(string message, Exception e);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlSingle : ValueType {
    public static SqlSingle MaxValue;
    public static SqlSingle MinValue;
    public static SqlSingle Null;
    public static SqlSingle Zero;
    public bool IsNull { get; }
    public float Value { get; }
    public SqlSingle(double value);
    public SqlSingle(float value);
    public sealed virtual bool get_IsNull();
    public float get_Value();
    public static SqlSingle Add(SqlSingle x, SqlSingle y);
    public int CompareTo(SqlSingle value);
    public sealed virtual int CompareTo(object value);
    public static SqlSingle Divide(SqlSingle x, SqlSingle y);
    public static SqlBoolean Equals(SqlSingle x, SqlSingle y);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
    public static SqlBoolean GreaterThan(SqlSingle x, SqlSingle y);
    public static SqlBoolean GreaterThanOrEqual(SqlSingle x, SqlSingle y);
    public static SqlBoolean LessThan(SqlSingle x, SqlSingle y);
    public static SqlBoolean LessThanOrEqual(SqlSingle x, SqlSingle y);
    public static SqlSingle Multiply(SqlSingle x, SqlSingle y);
    public static SqlBoolean NotEquals(SqlSingle x, SqlSingle y);
    public static SqlSingle op_Addition(SqlSingle x, SqlSingle y);
    public static SqlSingle op_Division(SqlSingle x, SqlSingle y);
    public static SqlBoolean op_Equality(SqlSingle x, SqlSingle y);
    public static SqlSingle op_Explicit(SqlBoolean x);
    public static SqlSingle op_Explicit(SqlDouble x);
    public static float op_Explicit(SqlSingle x);
    public static SqlSingle op_Explicit(SqlString x);
    public static SqlBoolean op_GreaterThan(SqlSingle x, SqlSingle y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlSingle x, SqlSingle y);
    public static SqlSingle op_Implicit(SqlByte x);
    public static SqlSingle op_Implicit(SqlDecimal x);
    public static SqlSingle op_Implicit(SqlInt16 x);
    public static SqlSingle op_Implicit(SqlInt32 x);
    public static SqlSingle op_Implicit(SqlInt64 x);
    public static SqlSingle op_Implicit(SqlMoney x);
    public static SqlSingle op_Implicit(float x);
    public static SqlBoolean op_Inequality(SqlSingle x, SqlSingle y);
    public static SqlBoolean op_LessThan(SqlSingle x, SqlSingle y);
    public static SqlBoolean op_LessThanOrEqual(SqlSingle x, SqlSingle y);
    public static SqlSingle op_Multiply(SqlSingle x, SqlSingle y);
    public static SqlSingle op_Subtraction(SqlSingle x, SqlSingle y);
    public static SqlSingle op_UnaryNegation(SqlSingle x);
    public static SqlSingle Parse(string s);
    public static SqlSingle Subtract(SqlSingle x, SqlSingle y);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDecimal ToSqlDecimal();
    public SqlDouble ToSqlDouble();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlString ToSqlString();
    public virtual string ToString();
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlString : ValueType {
    public static int BinarySort;
    public static int BinarySort2;
    public static int IgnoreCase;
    public static int IgnoreKanaType;
    public static int IgnoreNonSpace;
    public static int IgnoreWidth;
    public static SqlString Null;
    public CompareInfo CompareInfo { get; }
    public CultureInfo CultureInfo { get; }
    public bool IsNull { get; }
    public int LCID { get; }
    public SqlCompareOptions SqlCompareOptions { get; }
    public string Value { get; }
    public SqlString(int lcid, SqlCompareOptions compareOptions, Byte[] data);
    public SqlString(int lcid, SqlCompareOptions compareOptions, Byte[] data, bool fUnicode);
    public SqlString(int lcid, SqlCompareOptions compareOptions, Byte[] data, int index, int count);
    public SqlString(int lcid, SqlCompareOptions compareOptions, Byte[] data, int index, int count, bool fUnicode);
    public SqlString(string data);
    public SqlString(string data, int lcid);
    public SqlString(string data, int lcid, SqlCompareOptions compareOptions);
    public CompareInfo get_CompareInfo();
    public CultureInfo get_CultureInfo();
    public sealed virtual bool get_IsNull();
    public int get_LCID();
    public SqlCompareOptions get_SqlCompareOptions();
    public string get_Value();
    public static SqlString Add(SqlString x, SqlString y);
    public SqlString Clone();
    public static CompareOptions CompareOptionsFromSqlCompareOptions(SqlCompareOptions compareOptions);
    public int CompareTo(SqlString value);
    public sealed virtual int CompareTo(object value);
    public static SqlString Concat(SqlString x, SqlString y);
    public static SqlBoolean Equals(SqlString x, SqlString y);
    public virtual bool Equals(object value);
    public virtual int GetHashCode();
    public Byte[] GetNonUnicodeBytes();
    public Byte[] GetUnicodeBytes();
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
    public static SqlBoolean GreaterThan(SqlString x, SqlString y);
    public static SqlBoolean GreaterThanOrEqual(SqlString x, SqlString y);
    public static SqlBoolean LessThan(SqlString x, SqlString y);
    public static SqlBoolean LessThanOrEqual(SqlString x, SqlString y);
    public static SqlBoolean NotEquals(SqlString x, SqlString y);
    public static SqlString op_Addition(SqlString x, SqlString y);
    public static SqlBoolean op_Equality(SqlString x, SqlString y);
    public static SqlString op_Explicit(SqlBoolean x);
    public static SqlString op_Explicit(SqlByte x);
    public static SqlString op_Explicit(SqlDateTime x);
    public static SqlString op_Explicit(SqlDecimal x);
    public static SqlString op_Explicit(SqlDouble x);
    public static SqlString op_Explicit(SqlGuid x);
    public static SqlString op_Explicit(SqlInt16 x);
    public static SqlString op_Explicit(SqlInt32 x);
    public static SqlString op_Explicit(SqlInt64 x);
    public static SqlString op_Explicit(SqlMoney x);
    public static SqlString op_Explicit(SqlSingle x);
    public static string op_Explicit(SqlString x);
    public static SqlBoolean op_GreaterThan(SqlString x, SqlString y);
    public static SqlBoolean op_GreaterThanOrEqual(SqlString x, SqlString y);
    public static SqlString op_Implicit(string x);
    public static SqlBoolean op_Inequality(SqlString x, SqlString y);
    public static SqlBoolean op_LessThan(SqlString x, SqlString y);
    public static SqlBoolean op_LessThanOrEqual(SqlString x, SqlString y);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader reader);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
    public SqlBoolean ToSqlBoolean();
    public SqlByte ToSqlByte();
    public SqlDateTime ToSqlDateTime();
    public SqlDecimal ToSqlDecimal();
    public SqlDouble ToSqlDouble();
    public SqlGuid ToSqlGuid();
    public SqlInt16 ToSqlInt16();
    public SqlInt32 ToSqlInt32();
    public SqlInt64 ToSqlInt64();
    public SqlMoney ToSqlMoney();
    public SqlSingle ToSqlSingle();
    public virtual string ToString();
}
public class System.Data.SqlTypes.SqlTruncateException : SqlTypeException {
    public SqlTruncateException(string message);
    public SqlTruncateException(string message, Exception e);
}
public class System.Data.SqlTypes.SqlTypeException : SystemException {
    protected SqlTypeException(SerializationInfo si, StreamingContext sc);
    public SqlTypeException(string message);
    public SqlTypeException(string message, Exception e);
}
[XmlSchemaProviderAttribute("GetXsdType")]
public class System.Data.SqlTypes.SqlXml : object {
    public bool IsNull { get; }
    public static SqlXml Null { get; }
    public string Value { get; }
    public SqlXml(Stream value);
    public SqlXml(XmlReader value);
    public sealed virtual bool get_IsNull();
    public static SqlXml get_Null();
    public string get_Value();
    public XmlReader CreateReader();
    public static XmlQualifiedName GetXsdType(XmlSchemaSet schemaSet);
    private sealed virtual override XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema();
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.ReadXml(XmlReader r);
    private sealed virtual override void System.Xml.Serialization.IXmlSerializable.WriteXml(XmlWriter writer);
}
public enum System.Data.SqlTypes.StorageState : Enum {
    public int value__;
    public static StorageState Buffer;
    public static StorageState Stream;
    public static StorageState UnmanagedBuffer;
}
public class System.Data.StateChangeEventArgs : EventArgs {
    public ConnectionState CurrentState { get; }
    public ConnectionState OriginalState { get; }
    public StateChangeEventArgs(ConnectionState originalState, ConnectionState currentState);
    public ConnectionState get_CurrentState();
    public ConnectionState get_OriginalState();
}
public class System.Data.StateChangeEventHandler : MulticastDelegate {
    public StateChangeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, StateChangeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, StateChangeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Data.StatementCompletedEventArgs : EventArgs {
    public int RecordCount { get; }
    public StatementCompletedEventArgs(int recordCount);
    public int get_RecordCount();
}
public class System.Data.StatementCompletedEventHandler : MulticastDelegate {
    public StatementCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, StatementCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, StatementCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.Data.StatementType : Enum {
    public int value__;
    public static StatementType Batch;
    public static StatementType Delete;
    public static StatementType Insert;
    public static StatementType Select;
    public static StatementType Update;
}
public class System.Data.StrongTypingException : DataException {
    protected StrongTypingException(SerializationInfo info, StreamingContext context);
    public StrongTypingException(string message);
    public StrongTypingException(string s, Exception innerException);
}
public class System.Data.SyntaxErrorException : InvalidExpressionException {
    protected SyntaxErrorException(SerializationInfo info, StreamingContext context);
    public SyntaxErrorException(string s);
    public SyntaxErrorException(string message, Exception innerException);
}
[DefaultPropertyAttribute("ConstraintName")]
public class System.Data.UniqueConstraint : Constraint {
    [ReadOnlyAttribute("True")]
public DataColumn[] Columns { get; }
    public bool IsPrimaryKey { get; }
    [ReadOnlyAttribute("True")]
public DataTable Table { get; }
    public UniqueConstraint(DataColumn column);
    public UniqueConstraint(DataColumn column, bool isPrimaryKey);
    public UniqueConstraint(DataColumn[] columns);
    public UniqueConstraint(DataColumn[] columns, bool isPrimaryKey);
    public UniqueConstraint(string name, DataColumn column);
    public UniqueConstraint(string name, DataColumn column, bool isPrimaryKey);
    public UniqueConstraint(string name, DataColumn[] columns);
    public UniqueConstraint(string name, DataColumn[] columns, bool isPrimaryKey);
    [BrowsableAttribute("False")]
public UniqueConstraint(string name, String[] columnNames, bool isPrimaryKey);
    public virtual DataColumn[] get_Columns();
    public bool get_IsPrimaryKey();
    public virtual DataTable get_Table();
    public virtual bool Equals(object key2);
    public virtual int GetHashCode();
}
public enum System.Data.UpdateRowSource : Enum {
    public int value__;
    public static UpdateRowSource Both;
    public static UpdateRowSource FirstReturnedRecord;
    public static UpdateRowSource None;
    public static UpdateRowSource OutputParameters;
}
public enum System.Data.UpdateStatus : Enum {
    public int value__;
    public static UpdateStatus Continue;
    public static UpdateStatus ErrorsOccurred;
    public static UpdateStatus SkipAllRemainingRows;
    public static UpdateStatus SkipCurrentRow;
}
public class System.Data.VersionNotFoundException : DataException {
    protected VersionNotFoundException(SerializationInfo info, StreamingContext context);
    public VersionNotFoundException(string s);
    public VersionNotFoundException(string message, Exception innerException);
}
public enum System.Data.XmlReadMode : Enum {
    public int value__;
    public static XmlReadMode Auto;
    public static XmlReadMode DiffGram;
    public static XmlReadMode Fragment;
    public static XmlReadMode IgnoreSchema;
    public static XmlReadMode InferSchema;
    public static XmlReadMode InferTypedSchema;
    public static XmlReadMode ReadSchema;
}
public enum System.Data.XmlWriteMode : Enum {
    public int value__;
    public static XmlWriteMode DiffGram;
    public static XmlWriteMode IgnoreSchema;
    public static XmlWriteMode WriteSchema;
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
