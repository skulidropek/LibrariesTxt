public enum System.IO.Ports.Handshake : Enum {
    public int value__;
    public static Handshake None;
    public static Handshake RequestToSend;
    public static Handshake RequestToSendXOnXOff;
    public static Handshake XOnXOff;
}
public enum System.IO.Ports.Parity : Enum {
    public int value__;
    public static Parity Even;
    public static Parity Mark;
    public static Parity None;
    public static Parity Odd;
    public static Parity Space;
}
public enum System.IO.Ports.SerialData : Enum {
    public int value__;
    public static SerialData Chars;
    public static SerialData Eof;
}
public class System.IO.Ports.SerialDataReceivedEventArgs : EventArgs {
    public SerialData EventType { get; }
    public SerialData get_EventType();
}
public class System.IO.Ports.SerialDataReceivedEventHandler : MulticastDelegate {
    public SerialDataReceivedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SerialDataReceivedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SerialDataReceivedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.IO.Ports.SerialError : Enum {
    public int value__;
    public static SerialError Frame;
    public static SerialError Overrun;
    public static SerialError RXOver;
    public static SerialError RXParity;
    public static SerialError TXFull;
}
public class System.IO.Ports.SerialErrorReceivedEventArgs : EventArgs {
    public SerialError EventType { get; }
    public SerialError get_EventType();
}
public class System.IO.Ports.SerialErrorReceivedEventHandler : MulticastDelegate {
    public SerialErrorReceivedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SerialErrorReceivedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SerialErrorReceivedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public enum System.IO.Ports.SerialPinChange : Enum {
    public int value__;
    public static SerialPinChange Break;
    public static SerialPinChange CDChanged;
    public static SerialPinChange CtsChanged;
    public static SerialPinChange DsrChanged;
    public static SerialPinChange Ring;
}
public class System.IO.Ports.SerialPinChangedEventArgs : EventArgs {
    public SerialPinChange EventType { get; }
    public SerialPinChange get_EventType();
}
public class System.IO.Ports.SerialPinChangedEventHandler : MulticastDelegate {
    public SerialPinChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, SerialPinChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, SerialPinChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.IO.Ports.SerialPort : Component {
    public static int InfiniteTimeout;
    public Stream BaseStream { get; }
    public int BaudRate { get; public set; }
    public bool BreakState { get; public set; }
    public int BytesToRead { get; }
    public int BytesToWrite { get; }
    public bool CDHolding { get; }
    public bool CtsHolding { get; }
    public int DataBits { get; public set; }
    public bool DiscardNull { get; public set; }
    public bool DsrHolding { get; }
    public bool DtrEnable { get; public set; }
    public Encoding Encoding { get; public set; }
    public Handshake Handshake { get; public set; }
    public bool IsOpen { get; }
    public string NewLine { get; public set; }
    public Parity Parity { get; public set; }
    public byte ParityReplace { get; public set; }
    public string PortName { get; public set; }
    public int ReadBufferSize { get; public set; }
    public int ReadTimeout { get; public set; }
    public int ReceivedBytesThreshold { get; public set; }
    public bool RtsEnable { get; public set; }
    public StopBits StopBits { get; public set; }
    public int WriteBufferSize { get; public set; }
    public int WriteTimeout { get; public set; }
    public SerialPort(IContainer container);
    public SerialPort(string portName);
    public SerialPort(string portName, int baudRate);
    public SerialPort(string portName, int baudRate, Parity parity);
    public SerialPort(string portName, int baudRate, Parity parity, int dataBits);
    public SerialPort(string portName, int baudRate, Parity parity, int dataBits, StopBits stopBits);
    public Stream get_BaseStream();
    public int get_BaudRate();
    public void set_BaudRate(int value);
    public bool get_BreakState();
    public void set_BreakState(bool value);
    public int get_BytesToRead();
    public int get_BytesToWrite();
    public bool get_CDHolding();
    public bool get_CtsHolding();
    public int get_DataBits();
    public void set_DataBits(int value);
    public bool get_DiscardNull();
    public void set_DiscardNull(bool value);
    public bool get_DsrHolding();
    public bool get_DtrEnable();
    public void set_DtrEnable(bool value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public Handshake get_Handshake();
    public void set_Handshake(Handshake value);
    public bool get_IsOpen();
    public string get_NewLine();
    public void set_NewLine(string value);
    public Parity get_Parity();
    public void set_Parity(Parity value);
    public byte get_ParityReplace();
    public void set_ParityReplace(byte value);
    public string get_PortName();
    public void set_PortName(string value);
    public int get_ReadBufferSize();
    public void set_ReadBufferSize(int value);
    public int get_ReadTimeout();
    public void set_ReadTimeout(int value);
    public int get_ReceivedBytesThreshold();
    public void set_ReceivedBytesThreshold(int value);
    public bool get_RtsEnable();
    public void set_RtsEnable(bool value);
    public StopBits get_StopBits();
    public void set_StopBits(StopBits value);
    public int get_WriteBufferSize();
    public void set_WriteBufferSize(int value);
    public int get_WriteTimeout();
    public void set_WriteTimeout(int value);
    public void add_DataReceived(SerialDataReceivedEventHandler value);
    public void remove_DataReceived(SerialDataReceivedEventHandler value);
    public void add_ErrorReceived(SerialErrorReceivedEventHandler value);
    public void remove_ErrorReceived(SerialErrorReceivedEventHandler value);
    public void add_PinChanged(SerialPinChangedEventHandler value);
    public void remove_PinChanged(SerialPinChangedEventHandler value);
    public void Close();
    public void DiscardInBuffer();
    public void DiscardOutBuffer();
    protected virtual void Dispose(bool disposing);
    public static String[] GetPortNames();
    public void Open();
    public int Read(Byte[] buffer, int offset, int count);
    public int Read(Char[] buffer, int offset, int count);
    public int ReadByte();
    public int ReadChar();
    public string ReadExisting();
    public string ReadLine();
    public string ReadTo(string value);
    public void Write(Byte[] buffer, int offset, int count);
    public void Write(Char[] buffer, int offset, int count);
    public void Write(string text);
    public void WriteLine(string text);
}
public enum System.IO.Ports.StopBits : Enum {
    public int value__;
    public static StopBits None;
    public static StopBits One;
    public static StopBits OnePointFive;
    public static StopBits Two;
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
