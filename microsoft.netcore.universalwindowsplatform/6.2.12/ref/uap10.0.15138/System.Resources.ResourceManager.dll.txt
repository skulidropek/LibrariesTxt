public interface System.Resources.IResourceReader {
    public abstract virtual void Close();
    public abstract virtual IDictionaryEnumerator GetEnumerator();
}
[EditorBrowsableAttribute("1")]
public class System.Resources.MissingManifestResourceException : SystemException {
    public MissingManifestResourceException(string message);
    public MissingManifestResourceException(string message, Exception inner);
    protected MissingManifestResourceException(SerializationInfo info, StreamingContext context);
}
public class System.Resources.MissingSatelliteAssemblyException : SystemException {
    public string CultureName { get; }
    public MissingSatelliteAssemblyException(string message);
    public MissingSatelliteAssemblyException(string message, string cultureName);
    public MissingSatelliteAssemblyException(string message, Exception inner);
    protected MissingSatelliteAssemblyException(SerializationInfo info, StreamingContext context);
    public string get_CultureName();
}
[AttributeUsageAttribute("1")]
[EditorBrowsableAttribute("1")]
public class System.Resources.NeutralResourcesLanguageAttribute : Attribute {
    public string CultureName { get; }
    public UltimateResourceFallbackLocation Location { get; }
    public NeutralResourcesLanguageAttribute(string cultureName);
    public NeutralResourcesLanguageAttribute(string cultureName, UltimateResourceFallbackLocation location);
    public string get_CultureName();
    public UltimateResourceFallbackLocation get_Location();
}
[EditorBrowsableAttribute("1")]
public class System.Resources.ResourceManager : object {
    public static int HeaderVersionNumber;
    public static int MagicNumber;
    protected Assembly MainAssembly;
    public string BaseName { get; }
    public bool IgnoreCase { get; public set; }
    public Type ResourceSetType { get; }
    protected UltimateResourceFallbackLocation FallbackLocation { get; protected set; }
    public ResourceManager(string baseName, Assembly assembly);
    public ResourceManager(string baseName, Assembly assembly, Type usingResourceSet);
    public ResourceManager(Type resourceSource);
    public virtual string get_BaseName();
    public virtual bool get_IgnoreCase();
    public virtual void set_IgnoreCase(bool value);
    public virtual Type get_ResourceSetType();
    protected static CultureInfo GetNeutralResourcesLanguage(Assembly a);
    public virtual object GetObject(string name);
    public virtual object GetObject(string name, CultureInfo culture);
    protected virtual string GetResourceFileName(CultureInfo culture);
    public virtual ResourceSet GetResourceSet(CultureInfo culture, bool createIfNotExists, bool tryParents);
    protected static Version GetSatelliteContractVersion(Assembly a);
    public UnmanagedMemoryStream GetStream(string name);
    public UnmanagedMemoryStream GetStream(string name, CultureInfo culture);
    public virtual string GetString(string name);
    public virtual string GetString(string name, CultureInfo culture);
    protected virtual ResourceSet InternalGetResourceSet(CultureInfo culture, bool createIfNotExists, bool tryParents);
    public virtual void ReleaseAllResources();
    protected UltimateResourceFallbackLocation get_FallbackLocation();
    protected void set_FallbackLocation(UltimateResourceFallbackLocation value);
    public static ResourceManager CreateFileBasedResourceManager(string baseName, string resourceDir, Type usingResourceSet);
}
public class System.Resources.ResourceReader : object {
    public ResourceReader(Stream stream);
    public ResourceReader(string fileName);
    public sealed virtual void Close();
    public sealed virtual void Dispose();
    public void GetResourceData(string resourceName, String& resourceType, Byte[]& resourceData);
    public sealed virtual IDictionaryEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Resources.ResourceSet : object {
    public ResourceSet(Stream stream);
    public ResourceSet(string fileName);
    public ResourceSet(IResourceReader reader);
    public virtual void Close();
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public virtual Type GetDefaultReader();
    public virtual Type GetDefaultWriter();
    public virtual IDictionaryEnumerator GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public virtual object GetObject(string name);
    public virtual object GetObject(string name, bool ignoreCase);
    public virtual string GetString(string name);
    public virtual string GetString(string name, bool ignoreCase);
    protected virtual void ReadResources();
}
[AttributeUsageAttribute("1")]
[EditorBrowsableAttribute("1")]
public class System.Resources.SatelliteContractVersionAttribute : Attribute {
    public string Version { get; }
    public SatelliteContractVersionAttribute(string version);
    public string get_Version();
}
public enum System.Resources.UltimateResourceFallbackLocation : Enum {
    public int value__;
    public static UltimateResourceFallbackLocation MainAssembly;
    public static UltimateResourceFallbackLocation Satellite;
}
[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
