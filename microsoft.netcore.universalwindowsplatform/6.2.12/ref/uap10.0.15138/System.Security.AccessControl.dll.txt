[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
[FlagsAttribute]
public enum System.Security.AccessControl.AccessControlActions : Enum {
    public int value__;
    public static AccessControlActions Change;
    public static AccessControlActions None;
    public static AccessControlActions View;
}
public enum System.Security.AccessControl.AccessControlModification : Enum {
    public int value__;
    public static AccessControlModification Add;
    public static AccessControlModification Remove;
    public static AccessControlModification RemoveAll;
    public static AccessControlModification RemoveSpecific;
    public static AccessControlModification Reset;
    public static AccessControlModification Set;
}
[FlagsAttribute]
public enum System.Security.AccessControl.AccessControlSections : Enum {
    public int value__;
    public static AccessControlSections Access;
    public static AccessControlSections All;
    public static AccessControlSections Audit;
    public static AccessControlSections Group;
    public static AccessControlSections None;
    public static AccessControlSections Owner;
}
public enum System.Security.AccessControl.AccessControlType : Enum {
    public int value__;
    public static AccessControlType Allow;
    public static AccessControlType Deny;
}
public abstract class System.Security.AccessControl.AccessRule : AuthorizationRule {
    public AccessControlType AccessControlType { get; }
    protected AccessRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public AccessControlType get_AccessControlType();
}
public class System.Security.AccessControl.AccessRule`1 : AccessRule {
    public T Rights { get; }
    public AccessRule`1(IdentityReference identity, T rights, AccessControlType type);
    public AccessRule`1(IdentityReference identity, T rights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public AccessRule`1(string identity, T rights, AccessControlType type);
    public AccessRule`1(string identity, T rights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public T get_Rights();
}
public class System.Security.AccessControl.AceEnumerator : object {
    public GenericAce Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public GenericAce get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual bool MoveNext();
    public sealed virtual void Reset();
}
[FlagsAttribute]
public enum System.Security.AccessControl.AceFlags : Enum {
    public byte value__;
    public static AceFlags AuditFlags;
    public static AceFlags ContainerInherit;
    public static AceFlags FailedAccess;
    public static AceFlags InheritanceFlags;
    public static AceFlags Inherited;
    public static AceFlags InheritOnly;
    public static AceFlags None;
    public static AceFlags NoPropagateInherit;
    public static AceFlags ObjectInherit;
    public static AceFlags SuccessfulAccess;
}
public enum System.Security.AccessControl.AceQualifier : Enum {
    public int value__;
    public static AceQualifier AccessAllowed;
    public static AceQualifier AccessDenied;
    public static AceQualifier SystemAlarm;
    public static AceQualifier SystemAudit;
}
public enum System.Security.AccessControl.AceType : Enum {
    public byte value__;
    public static AceType AccessAllowed;
    public static AceType AccessAllowedCallback;
    public static AceType AccessAllowedCallbackObject;
    public static AceType AccessAllowedCompound;
    public static AceType AccessAllowedObject;
    public static AceType AccessDenied;
    public static AceType AccessDeniedCallback;
    public static AceType AccessDeniedCallbackObject;
    public static AceType AccessDeniedObject;
    public static AceType MaxDefinedAceType;
    public static AceType SystemAlarm;
    public static AceType SystemAlarmCallback;
    public static AceType SystemAlarmCallbackObject;
    public static AceType SystemAlarmObject;
    public static AceType SystemAudit;
    public static AceType SystemAuditCallback;
    public static AceType SystemAuditCallbackObject;
    public static AceType SystemAuditObject;
}
[FlagsAttribute]
public enum System.Security.AccessControl.AuditFlags : Enum {
    public int value__;
    public static AuditFlags Failure;
    public static AuditFlags None;
    public static AuditFlags Success;
}
public abstract class System.Security.AccessControl.AuditRule : AuthorizationRule {
    public AuditFlags AuditFlags { get; }
    protected AuditRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags auditFlags);
    public AuditFlags get_AuditFlags();
}
public class System.Security.AccessControl.AuditRule`1 : AuditRule {
    public T Rights { get; }
    public AuditRule`1(IdentityReference identity, T rights, AuditFlags flags);
    public AuditRule`1(IdentityReference identity, T rights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    public AuditRule`1(string identity, T rights, AuditFlags flags);
    public AuditRule`1(string identity, T rights, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    public T get_Rights();
}
public abstract class System.Security.AccessControl.AuthorizationRule : object {
    protected internal int AccessMask { get; }
    public IdentityReference IdentityReference { get; }
    public InheritanceFlags InheritanceFlags { get; }
    public bool IsInherited { get; }
    public PropagationFlags PropagationFlags { get; }
    protected internal AuthorizationRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags);
    protected internal int get_AccessMask();
    public IdentityReference get_IdentityReference();
    public InheritanceFlags get_InheritanceFlags();
    public bool get_IsInherited();
    public PropagationFlags get_PropagationFlags();
}
[DefaultMemberAttribute("Item")]
public class System.Security.AccessControl.AuthorizationRuleCollection : ReadOnlyCollectionBase {
    public AuthorizationRule Item { get; }
    public AuthorizationRule get_Item(int index);
    public void AddRule(AuthorizationRule rule);
    public void CopyTo(AuthorizationRule[] rules, int index);
}
public class System.Security.AccessControl.CommonAce : QualifiedAce {
    public int BinaryLength { get; }
    public CommonAce(AceFlags flags, AceQualifier qualifier, int accessMask, SecurityIdentifier sid, bool isCallback, Byte[] opaque);
    public virtual int get_BinaryLength();
    public virtual void GetBinaryForm(Byte[] binaryForm, int offset);
    public static int MaxOpaqueLength(bool isCallback);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Security.AccessControl.CommonAcl : GenericAcl {
    public int BinaryLength { get; }
    public int Count { get; }
    public bool IsCanonical { get; }
    public bool IsContainer { get; }
    public bool IsDS { get; }
    public GenericAce Item { get; public set; }
    public byte Revision { get; }
    public sealed virtual int get_BinaryLength();
    public sealed virtual int get_Count();
    public bool get_IsCanonical();
    public bool get_IsContainer();
    public bool get_IsDS();
    public sealed virtual GenericAce get_Item(int index);
    public sealed virtual void set_Item(int index, GenericAce value);
    public sealed virtual byte get_Revision();
    public sealed virtual void GetBinaryForm(Byte[] binaryForm, int offset);
    public void Purge(SecurityIdentifier sid);
    public void RemoveInheritedAces();
}
public abstract class System.Security.AccessControl.CommonObjectSecurity : ObjectSecurity {
    protected CommonObjectSecurity(bool isContainer);
    protected void AddAccessRule(AccessRule rule);
    protected void AddAuditRule(AuditRule rule);
    public AuthorizationRuleCollection GetAccessRules(bool includeExplicit, bool includeInherited, Type targetType);
    public AuthorizationRuleCollection GetAuditRules(bool includeExplicit, bool includeInherited, Type targetType);
    protected virtual bool ModifyAccess(AccessControlModification modification, AccessRule rule, Boolean& modified);
    protected virtual bool ModifyAudit(AccessControlModification modification, AuditRule rule, Boolean& modified);
    protected bool RemoveAccessRule(AccessRule rule);
    protected void RemoveAccessRuleAll(AccessRule rule);
    protected void RemoveAccessRuleSpecific(AccessRule rule);
    protected bool RemoveAuditRule(AuditRule rule);
    protected void RemoveAuditRuleAll(AuditRule rule);
    protected void RemoveAuditRuleSpecific(AuditRule rule);
    protected void ResetAccessRule(AccessRule rule);
    protected void SetAccessRule(AccessRule rule);
    protected void SetAuditRule(AuditRule rule);
}
public class System.Security.AccessControl.CommonSecurityDescriptor : GenericSecurityDescriptor {
    public ControlFlags ControlFlags { get; }
    public DiscretionaryAcl DiscretionaryAcl { get; public set; }
    public SecurityIdentifier Group { get; public set; }
    public bool IsContainer { get; }
    public bool IsDiscretionaryAclCanonical { get; }
    public bool IsDS { get; }
    public bool IsSystemAclCanonical { get; }
    public SecurityIdentifier Owner { get; public set; }
    public SystemAcl SystemAcl { get; public set; }
    public CommonSecurityDescriptor(bool isContainer, bool isDS, Byte[] binaryForm, int offset);
    public CommonSecurityDescriptor(bool isContainer, bool isDS, ControlFlags flags, SecurityIdentifier owner, SecurityIdentifier group, SystemAcl systemAcl, DiscretionaryAcl discretionaryAcl);
    public CommonSecurityDescriptor(bool isContainer, bool isDS, RawSecurityDescriptor rawSecurityDescriptor);
    public CommonSecurityDescriptor(bool isContainer, bool isDS, string sddlForm);
    public virtual ControlFlags get_ControlFlags();
    public DiscretionaryAcl get_DiscretionaryAcl();
    public void set_DiscretionaryAcl(DiscretionaryAcl value);
    public virtual SecurityIdentifier get_Group();
    public virtual void set_Group(SecurityIdentifier value);
    public bool get_IsContainer();
    public bool get_IsDiscretionaryAclCanonical();
    public bool get_IsDS();
    public bool get_IsSystemAclCanonical();
    public virtual SecurityIdentifier get_Owner();
    public virtual void set_Owner(SecurityIdentifier value);
    public SystemAcl get_SystemAcl();
    public void set_SystemAcl(SystemAcl value);
    public void AddDiscretionaryAcl(byte revision, int trusted);
    public void AddSystemAcl(byte revision, int trusted);
    public void PurgeAccessControl(SecurityIdentifier sid);
    public void PurgeAudit(SecurityIdentifier sid);
    public void SetDiscretionaryAclProtection(bool isProtected, bool preserveInheritance);
    public void SetSystemAclProtection(bool isProtected, bool preserveInheritance);
}
public class System.Security.AccessControl.CompoundAce : KnownAce {
    public int BinaryLength { get; }
    public CompoundAceType CompoundAceType { get; public set; }
    public CompoundAce(AceFlags flags, int accessMask, CompoundAceType compoundAceType, SecurityIdentifier sid);
    public virtual int get_BinaryLength();
    public CompoundAceType get_CompoundAceType();
    public void set_CompoundAceType(CompoundAceType value);
    public virtual void GetBinaryForm(Byte[] binaryForm, int offset);
}
public enum System.Security.AccessControl.CompoundAceType : Enum {
    public int value__;
    public static CompoundAceType Impersonation;
}
[FlagsAttribute]
public enum System.Security.AccessControl.ControlFlags : Enum {
    public int value__;
    public static ControlFlags DiscretionaryAclAutoInherited;
    public static ControlFlags DiscretionaryAclAutoInheritRequired;
    public static ControlFlags DiscretionaryAclDefaulted;
    public static ControlFlags DiscretionaryAclPresent;
    public static ControlFlags DiscretionaryAclProtected;
    public static ControlFlags DiscretionaryAclUntrusted;
    public static ControlFlags GroupDefaulted;
    public static ControlFlags None;
    public static ControlFlags OwnerDefaulted;
    public static ControlFlags RMControlValid;
    public static ControlFlags SelfRelative;
    public static ControlFlags ServerSecurity;
    public static ControlFlags SystemAclAutoInherited;
    public static ControlFlags SystemAclAutoInheritRequired;
    public static ControlFlags SystemAclDefaulted;
    public static ControlFlags SystemAclPresent;
    public static ControlFlags SystemAclProtected;
}
public class System.Security.AccessControl.CustomAce : GenericAce {
    public static int MaxOpaqueLength;
    public int BinaryLength { get; }
    public int OpaqueLength { get; }
    public CustomAce(AceType type, AceFlags flags, Byte[] opaque);
    public virtual int get_BinaryLength();
    public int get_OpaqueLength();
    public virtual void GetBinaryForm(Byte[] binaryForm, int offset);
    public Byte[] GetOpaque();
    public void SetOpaque(Byte[] opaque);
}
public class System.Security.AccessControl.DiscretionaryAcl : CommonAcl {
    public DiscretionaryAcl(bool isContainer, bool isDS, byte revision, int capacity);
    public DiscretionaryAcl(bool isContainer, bool isDS, int capacity);
    public DiscretionaryAcl(bool isContainer, bool isDS, RawAcl rawAcl);
    public void AddAccess(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags);
    public void AddAccess(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType);
    public void AddAccess(AccessControlType accessType, SecurityIdentifier sid, ObjectAccessRule rule);
    public bool RemoveAccess(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags);
    public bool RemoveAccess(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType);
    public bool RemoveAccess(AccessControlType accessType, SecurityIdentifier sid, ObjectAccessRule rule);
    public void RemoveAccessSpecific(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags);
    public void RemoveAccessSpecific(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType);
    public void RemoveAccessSpecific(AccessControlType accessType, SecurityIdentifier sid, ObjectAccessRule rule);
    public void SetAccess(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags);
    public void SetAccess(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType);
    public void SetAccess(AccessControlType accessType, SecurityIdentifier sid, ObjectAccessRule rule);
}
public abstract class System.Security.AccessControl.GenericAce : object {
    public AceFlags AceFlags { get; public set; }
    public AceType AceType { get; }
    public AuditFlags AuditFlags { get; }
    public int BinaryLength { get; }
    public InheritanceFlags InheritanceFlags { get; }
    public bool IsInherited { get; }
    public PropagationFlags PropagationFlags { get; }
    public AceFlags get_AceFlags();
    public void set_AceFlags(AceFlags value);
    public AceType get_AceType();
    public AuditFlags get_AuditFlags();
    public abstract virtual int get_BinaryLength();
    public InheritanceFlags get_InheritanceFlags();
    public bool get_IsInherited();
    public PropagationFlags get_PropagationFlags();
    public GenericAce Copy();
    public static GenericAce CreateFromBinaryForm(Byte[] binaryForm, int offset);
    public sealed virtual bool Equals(object o);
    public abstract virtual void GetBinaryForm(Byte[] binaryForm, int offset);
    public sealed virtual int GetHashCode();
    public static bool op_Equality(GenericAce left, GenericAce right);
    public static bool op_Inequality(GenericAce left, GenericAce right);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Security.AccessControl.GenericAcl : object {
    public static byte AclRevision;
    public static byte AclRevisionDS;
    public static int MaxBinaryLength;
    public int BinaryLength { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public GenericAce Item { get; public set; }
    public byte Revision { get; }
    public object SyncRoot { get; }
    public abstract virtual int get_BinaryLength();
    public abstract virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public abstract virtual GenericAce get_Item(int index);
    public abstract virtual void set_Item(int index, GenericAce value);
    public abstract virtual byte get_Revision();
    public virtual object get_SyncRoot();
    public void CopyTo(GenericAce[] array, int index);
    public abstract virtual void GetBinaryForm(Byte[] binaryForm, int offset);
    public AceEnumerator GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public abstract class System.Security.AccessControl.GenericSecurityDescriptor : object {
    public int BinaryLength { get; }
    public ControlFlags ControlFlags { get; }
    public SecurityIdentifier Group { get; public set; }
    public SecurityIdentifier Owner { get; public set; }
    public static byte Revision { get; }
    public int get_BinaryLength();
    public abstract virtual ControlFlags get_ControlFlags();
    public abstract virtual SecurityIdentifier get_Group();
    public abstract virtual void set_Group(SecurityIdentifier value);
    public abstract virtual SecurityIdentifier get_Owner();
    public abstract virtual void set_Owner(SecurityIdentifier value);
    public static byte get_Revision();
    public void GetBinaryForm(Byte[] binaryForm, int offset);
    public string GetSddlForm(AccessControlSections includeSections);
    public static bool IsSddlConversionSupported();
}
[FlagsAttribute]
public enum System.Security.AccessControl.InheritanceFlags : Enum {
    public int value__;
    public static InheritanceFlags ContainerInherit;
    public static InheritanceFlags None;
    public static InheritanceFlags ObjectInherit;
}
public abstract class System.Security.AccessControl.KnownAce : GenericAce {
    public int AccessMask { get; public set; }
    public SecurityIdentifier SecurityIdentifier { get; public set; }
    public int get_AccessMask();
    public void set_AccessMask(int value);
    public SecurityIdentifier get_SecurityIdentifier();
    public void set_SecurityIdentifier(SecurityIdentifier value);
}
public abstract class System.Security.AccessControl.NativeObjectSecurity : CommonObjectSecurity {
    protected NativeObjectSecurity(bool isContainer, ResourceType resourceType);
    protected NativeObjectSecurity(bool isContainer, ResourceType resourceType, SafeHandle handle, AccessControlSections includeSections);
    protected NativeObjectSecurity(bool isContainer, ResourceType resourceType, SafeHandle handle, AccessControlSections includeSections, ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext);
    protected NativeObjectSecurity(bool isContainer, ResourceType resourceType, ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext);
    protected NativeObjectSecurity(bool isContainer, ResourceType resourceType, string name, AccessControlSections includeSections);
    protected NativeObjectSecurity(bool isContainer, ResourceType resourceType, string name, AccessControlSections includeSections, ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext);
    protected sealed virtual void Persist(SafeHandle handle, AccessControlSections includeSections);
    protected void Persist(SafeHandle handle, AccessControlSections includeSections, object exceptionContext);
    protected sealed virtual void Persist(string name, AccessControlSections includeSections);
    protected void Persist(string name, AccessControlSections includeSections, object exceptionContext);
}
public abstract class System.Security.AccessControl.ObjectAccessRule : AccessRule {
    public Guid InheritedObjectType { get; }
    public ObjectAceFlags ObjectFlags { get; }
    public Guid ObjectType { get; }
    protected ObjectAccessRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, Guid objectType, Guid inheritedObjectType, AccessControlType type);
    public Guid get_InheritedObjectType();
    public ObjectAceFlags get_ObjectFlags();
    public Guid get_ObjectType();
}
public class System.Security.AccessControl.ObjectAce : QualifiedAce {
    public int BinaryLength { get; }
    public Guid InheritedObjectAceType { get; public set; }
    public ObjectAceFlags ObjectAceFlags { get; public set; }
    public Guid ObjectAceType { get; public set; }
    public ObjectAce(AceFlags aceFlags, AceQualifier qualifier, int accessMask, SecurityIdentifier sid, ObjectAceFlags flags, Guid type, Guid inheritedType, bool isCallback, Byte[] opaque);
    public virtual int get_BinaryLength();
    public Guid get_InheritedObjectAceType();
    public void set_InheritedObjectAceType(Guid value);
    public ObjectAceFlags get_ObjectAceFlags();
    public void set_ObjectAceFlags(ObjectAceFlags value);
    public Guid get_ObjectAceType();
    public void set_ObjectAceType(Guid value);
    public virtual void GetBinaryForm(Byte[] binaryForm, int offset);
    public static int MaxOpaqueLength(bool isCallback);
}
[FlagsAttribute]
public enum System.Security.AccessControl.ObjectAceFlags : Enum {
    public int value__;
    public static ObjectAceFlags InheritedObjectAceTypePresent;
    public static ObjectAceFlags None;
    public static ObjectAceFlags ObjectAceTypePresent;
}
public abstract class System.Security.AccessControl.ObjectAuditRule : AuditRule {
    public Guid InheritedObjectType { get; }
    public ObjectAceFlags ObjectFlags { get; }
    public Guid ObjectType { get; }
    protected ObjectAuditRule(IdentityReference identity, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, Guid objectType, Guid inheritedObjectType, AuditFlags auditFlags);
    public Guid get_InheritedObjectType();
    public ObjectAceFlags get_ObjectFlags();
    public Guid get_ObjectType();
}
public abstract class System.Security.AccessControl.ObjectSecurity : object {
    public Type AccessRightType { get; }
    protected bool AccessRulesModified { get; protected set; }
    public Type AccessRuleType { get; }
    public bool AreAccessRulesCanonical { get; }
    public bool AreAccessRulesProtected { get; }
    public bool AreAuditRulesCanonical { get; }
    public bool AreAuditRulesProtected { get; }
    protected bool AuditRulesModified { get; protected set; }
    public Type AuditRuleType { get; }
    protected bool GroupModified { get; protected set; }
    protected bool IsContainer { get; }
    protected bool IsDS { get; }
    protected bool OwnerModified { get; protected set; }
    protected ObjectSecurity(bool isContainer, bool isDS);
    protected ObjectSecurity(CommonSecurityDescriptor securityDescriptor);
    public abstract virtual Type get_AccessRightType();
    protected bool get_AccessRulesModified();
    protected void set_AccessRulesModified(bool value);
    public abstract virtual Type get_AccessRuleType();
    public bool get_AreAccessRulesCanonical();
    public bool get_AreAccessRulesProtected();
    public bool get_AreAuditRulesCanonical();
    public bool get_AreAuditRulesProtected();
    protected bool get_AuditRulesModified();
    protected void set_AuditRulesModified(bool value);
    public abstract virtual Type get_AuditRuleType();
    protected bool get_GroupModified();
    protected void set_GroupModified(bool value);
    protected bool get_IsContainer();
    protected bool get_IsDS();
    protected bool get_OwnerModified();
    protected void set_OwnerModified(bool value);
    public abstract virtual AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public abstract virtual AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    public IdentityReference GetGroup(Type targetType);
    public IdentityReference GetOwner(Type targetType);
    public Byte[] GetSecurityDescriptorBinaryForm();
    public string GetSecurityDescriptorSddlForm(AccessControlSections includeSections);
    public static bool IsSddlConversionSupported();
    protected abstract virtual bool ModifyAccess(AccessControlModification modification, AccessRule rule, Boolean& modified);
    public virtual bool ModifyAccessRule(AccessControlModification modification, AccessRule rule, Boolean& modified);
    protected abstract virtual bool ModifyAudit(AccessControlModification modification, AuditRule rule, Boolean& modified);
    public virtual bool ModifyAuditRule(AccessControlModification modification, AuditRule rule, Boolean& modified);
    protected virtual void Persist(bool enableOwnershipPrivilege, string name, AccessControlSections includeSections);
    protected virtual void Persist(SafeHandle handle, AccessControlSections includeSections);
    protected virtual void Persist(string name, AccessControlSections includeSections);
    public virtual void PurgeAccessRules(IdentityReference identity);
    public virtual void PurgeAuditRules(IdentityReference identity);
    protected void ReadLock();
    protected void ReadUnlock();
    public void SetAccessRuleProtection(bool isProtected, bool preserveInheritance);
    public void SetAuditRuleProtection(bool isProtected, bool preserveInheritance);
    public void SetGroup(IdentityReference identity);
    public void SetOwner(IdentityReference identity);
    public void SetSecurityDescriptorBinaryForm(Byte[] binaryForm);
    public void SetSecurityDescriptorBinaryForm(Byte[] binaryForm, AccessControlSections includeSections);
    public void SetSecurityDescriptorSddlForm(string sddlForm);
    public void SetSecurityDescriptorSddlForm(string sddlForm, AccessControlSections includeSections);
    protected void WriteLock();
    protected void WriteUnlock();
}
public abstract class System.Security.AccessControl.ObjectSecurity`1 : NativeObjectSecurity {
    public Type AccessRightType { get; }
    public Type AccessRuleType { get; }
    public Type AuditRuleType { get; }
    protected ObjectSecurity`1(bool isContainer, ResourceType resourceType);
    protected ObjectSecurity`1(bool isContainer, ResourceType resourceType, SafeHandle safeHandle, AccessControlSections includeSections);
    protected ObjectSecurity`1(bool isContainer, ResourceType resourceType, SafeHandle safeHandle, AccessControlSections includeSections, ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext);
    protected ObjectSecurity`1(bool isContainer, ResourceType resourceType, string name, AccessControlSections includeSections);
    protected ObjectSecurity`1(bool isContainer, ResourceType resourceType, string name, AccessControlSections includeSections, ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext);
    public virtual Type get_AccessRightType();
    public virtual Type get_AccessRuleType();
    public virtual Type get_AuditRuleType();
    public virtual AccessRule AccessRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AccessControlType type);
    public virtual void AddAccessRule(AccessRule`1<T> rule);
    public virtual void AddAuditRule(AuditRule`1<T> rule);
    public virtual AuditRule AuditRuleFactory(IdentityReference identityReference, int accessMask, bool isInherited, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, AuditFlags flags);
    protected internal void Persist(SafeHandle handle);
    protected internal void Persist(string name);
    public virtual bool RemoveAccessRule(AccessRule`1<T> rule);
    public virtual void RemoveAccessRuleAll(AccessRule`1<T> rule);
    public virtual void RemoveAccessRuleSpecific(AccessRule`1<T> rule);
    public virtual bool RemoveAuditRule(AuditRule`1<T> rule);
    public virtual void RemoveAuditRuleAll(AuditRule`1<T> rule);
    public virtual void RemoveAuditRuleSpecific(AuditRule`1<T> rule);
    public virtual void ResetAccessRule(AccessRule`1<T> rule);
    public virtual void SetAccessRule(AccessRule`1<T> rule);
    public virtual void SetAuditRule(AuditRule`1<T> rule);
}
public class System.Security.AccessControl.PrivilegeNotHeldException : UnauthorizedAccessException {
    public string PrivilegeName { get; }
    public PrivilegeNotHeldException(string privilege);
    public PrivilegeNotHeldException(string privilege, Exception inner);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_PrivilegeName();
}
[FlagsAttribute]
public enum System.Security.AccessControl.PropagationFlags : Enum {
    public int value__;
    public static PropagationFlags InheritOnly;
    public static PropagationFlags None;
    public static PropagationFlags NoPropagateInherit;
}
public abstract class System.Security.AccessControl.QualifiedAce : KnownAce {
    public AceQualifier AceQualifier { get; }
    public bool IsCallback { get; }
    public int OpaqueLength { get; }
    public AceQualifier get_AceQualifier();
    public bool get_IsCallback();
    public int get_OpaqueLength();
    public Byte[] GetOpaque();
    public void SetOpaque(Byte[] opaque);
}
[DefaultMemberAttribute("Item")]
public class System.Security.AccessControl.RawAcl : GenericAcl {
    public int BinaryLength { get; }
    public int Count { get; }
    public GenericAce Item { get; public set; }
    public byte Revision { get; }
    public RawAcl(byte revision, int capacity);
    public RawAcl(Byte[] binaryForm, int offset);
    public virtual int get_BinaryLength();
    public virtual int get_Count();
    public virtual GenericAce get_Item(int index);
    public virtual void set_Item(int index, GenericAce value);
    public virtual byte get_Revision();
    public virtual void GetBinaryForm(Byte[] binaryForm, int offset);
    public void InsertAce(int index, GenericAce ace);
    public void RemoveAce(int index);
}
public class System.Security.AccessControl.RawSecurityDescriptor : GenericSecurityDescriptor {
    public ControlFlags ControlFlags { get; }
    public RawAcl DiscretionaryAcl { get; public set; }
    public SecurityIdentifier Group { get; public set; }
    public SecurityIdentifier Owner { get; public set; }
    public byte ResourceManagerControl { get; public set; }
    public RawAcl SystemAcl { get; public set; }
    public RawSecurityDescriptor(Byte[] binaryForm, int offset);
    public RawSecurityDescriptor(ControlFlags flags, SecurityIdentifier owner, SecurityIdentifier group, RawAcl systemAcl, RawAcl discretionaryAcl);
    public RawSecurityDescriptor(string sddlForm);
    public virtual ControlFlags get_ControlFlags();
    public RawAcl get_DiscretionaryAcl();
    public void set_DiscretionaryAcl(RawAcl value);
    public virtual SecurityIdentifier get_Group();
    public virtual void set_Group(SecurityIdentifier value);
    public virtual SecurityIdentifier get_Owner();
    public virtual void set_Owner(SecurityIdentifier value);
    public byte get_ResourceManagerControl();
    public void set_ResourceManagerControl(byte value);
    public RawAcl get_SystemAcl();
    public void set_SystemAcl(RawAcl value);
    public void SetFlags(ControlFlags flags);
}
public enum System.Security.AccessControl.ResourceType : Enum {
    public int value__;
    public static ResourceType DSObject;
    public static ResourceType DSObjectAll;
    public static ResourceType FileObject;
    public static ResourceType KernelObject;
    public static ResourceType LMShare;
    public static ResourceType Printer;
    public static ResourceType ProviderDefined;
    public static ResourceType RegistryKey;
    public static ResourceType RegistryWow6432Key;
    public static ResourceType Service;
    public static ResourceType Unknown;
    public static ResourceType WindowObject;
    public static ResourceType WmiGuidObject;
}
[FlagsAttribute]
public enum System.Security.AccessControl.SecurityInfos : Enum {
    public int value__;
    public static SecurityInfos DiscretionaryAcl;
    public static SecurityInfos Group;
    public static SecurityInfos Owner;
    public static SecurityInfos SystemAcl;
}
public class System.Security.AccessControl.SystemAcl : CommonAcl {
    public SystemAcl(bool isContainer, bool isDS, byte revision, int capacity);
    public SystemAcl(bool isContainer, bool isDS, int capacity);
    public SystemAcl(bool isContainer, bool isDS, RawAcl rawAcl);
    public void AddAudit(AuditFlags auditFlags, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags);
    public void AddAudit(AuditFlags auditFlags, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType);
    public void AddAudit(SecurityIdentifier sid, ObjectAuditRule rule);
    public bool RemoveAudit(AuditFlags auditFlags, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags);
    public bool RemoveAudit(AuditFlags auditFlags, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType);
    public bool RemoveAudit(SecurityIdentifier sid, ObjectAuditRule rule);
    public void RemoveAuditSpecific(AuditFlags auditFlags, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags);
    public void RemoveAuditSpecific(AuditFlags auditFlags, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType);
    public void RemoveAuditSpecific(SecurityIdentifier sid, ObjectAuditRule rule);
    public void SetAudit(AuditFlags auditFlags, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags);
    public void SetAudit(AuditFlags auditFlags, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType);
    public void SetAudit(SecurityIdentifier sid, ObjectAuditRule rule);
}
