[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
public class System.ServiceModel.BasicHttpBinding : HttpBindingBase {
    public BasicHttpSecurity Security { get; public set; }
    public BasicHttpBinding(BasicHttpSecurityMode securityMode);
    public BasicHttpSecurity get_Security();
    public void set_Security(BasicHttpSecurity value);
    public virtual IChannelFactory`1<TChannel> BuildChannelFactory(BindingParameterCollection parameters);
    public virtual BindingElementCollection CreateBindingElements();
}
public enum System.ServiceModel.BasicHttpMessageCredentialType : Enum {
    public int value__;
    public static BasicHttpMessageCredentialType Certificate;
    public static BasicHttpMessageCredentialType UserName;
}
public class System.ServiceModel.BasicHttpsBinding : HttpBindingBase {
    public BasicHttpsSecurity Security { get; public set; }
    public BasicHttpsBinding(BasicHttpsSecurityMode securityMode);
    public BasicHttpsSecurity get_Security();
    public void set_Security(BasicHttpsSecurity value);
    public virtual IChannelFactory`1<TChannel> BuildChannelFactory(BindingParameterCollection parameters);
    public virtual BindingElementCollection CreateBindingElements();
}
public class System.ServiceModel.BasicHttpSecurity : object {
    public BasicHttpSecurityMode Mode { get; public set; }
    public HttpTransportSecurity Transport { get; public set; }
    public BasicHttpSecurityMode get_Mode();
    public void set_Mode(BasicHttpSecurityMode value);
    public HttpTransportSecurity get_Transport();
    public void set_Transport(HttpTransportSecurity value);
}
public enum System.ServiceModel.BasicHttpSecurityMode : Enum {
    public int value__;
    public static BasicHttpSecurityMode None;
    public static BasicHttpSecurityMode Transport;
    public static BasicHttpSecurityMode Message;
    public static BasicHttpSecurityMode TransportWithMessageCredential;
    public static BasicHttpSecurityMode TransportCredentialOnly;
}
public class System.ServiceModel.BasicHttpsSecurity : object {
    public BasicHttpsSecurityMode Mode { get; public set; }
    public HttpTransportSecurity Transport { get; public set; }
    public BasicHttpsSecurityMode get_Mode();
    public void set_Mode(BasicHttpsSecurityMode value);
    public HttpTransportSecurity get_Transport();
    public void set_Transport(HttpTransportSecurity value);
}
public enum System.ServiceModel.BasicHttpsSecurityMode : Enum {
    public int value__;
    public static BasicHttpsSecurityMode Transport;
    public static BasicHttpsSecurityMode TransportWithMessageCredential;
}
public class System.ServiceModel.Channels.HttpRequestMessageProperty : object {
    public WebHeaderCollection Headers { get; }
    public string Method { get; public set; }
    public static string Name { get; }
    public string QueryString { get; public set; }
    public bool SuppressEntityBody { get; public set; }
    public WebHeaderCollection get_Headers();
    public string get_Method();
    public void set_Method(string value);
    public static string get_Name();
    public string get_QueryString();
    public void set_QueryString(string value);
    public bool get_SuppressEntityBody();
    public void set_SuppressEntityBody(bool value);
    private sealed virtual override IMessageProperty System.ServiceModel.Channels.IMessageProperty.CreateCopy();
}
public class System.ServiceModel.Channels.HttpResponseMessageProperty : object {
    public WebHeaderCollection Headers { get; }
    public static string Name { get; }
    public HttpStatusCode StatusCode { get; public set; }
    public string StatusDescription { get; public set; }
    public WebHeaderCollection get_Headers();
    public static string get_Name();
    public HttpStatusCode get_StatusCode();
    public void set_StatusCode(HttpStatusCode value);
    public string get_StatusDescription();
    public void set_StatusDescription(string value);
    private sealed virtual override IMessageProperty System.ServiceModel.Channels.IMessageProperty.CreateCopy();
}
public class System.ServiceModel.Channels.HttpsTransportBindingElement : HttpTransportBindingElement {
    public bool RequireClientCertificate { get; public set; }
    public string Scheme { get; }
    protected HttpsTransportBindingElement(HttpsTransportBindingElement elementToBeCloned);
    public bool get_RequireClientCertificate();
    public void set_RequireClientCertificate(bool value);
    public virtual string get_Scheme();
    public virtual IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context);
    public virtual BindingElement Clone();
    public virtual T GetProperty(BindingContext context);
}
public class System.ServiceModel.Channels.HttpTransportBindingElement : TransportBindingElement {
    [DefaultValueAttribute("False")]
public bool AllowCookies { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public AuthenticationSchemes AuthenticationScheme { get; public set; }
    [DefaultValueAttribute("False")]
public bool BypassProxyOnLocal { get; public set; }
    [DefaultValueAttribute("65536")]
public int MaxBufferSize { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.UriTypeConverter")]
public Uri ProxyAddress { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public AuthenticationSchemes ProxyAuthenticationScheme { get; public set; }
    public string Scheme { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TransferMode TransferMode { get; public set; }
    public WebSocketTransportSettings WebSocketSettings { get; public set; }
    [DefaultValueAttribute("True")]
public bool UseDefaultWebProxy { get; public set; }
    [DefaultValueAttribute("True")]
public bool KeepAliveEnabled { get; public set; }
    protected HttpTransportBindingElement(HttpTransportBindingElement elementToBeCloned);
    public bool get_AllowCookies();
    public void set_AllowCookies(bool value);
    public AuthenticationSchemes get_AuthenticationScheme();
    public void set_AuthenticationScheme(AuthenticationSchemes value);
    public bool get_BypassProxyOnLocal();
    public void set_BypassProxyOnLocal(bool value);
    public int get_MaxBufferSize();
    public void set_MaxBufferSize(int value);
    public Uri get_ProxyAddress();
    public void set_ProxyAddress(Uri value);
    public AuthenticationSchemes get_ProxyAuthenticationScheme();
    public void set_ProxyAuthenticationScheme(AuthenticationSchemes value);
    public virtual string get_Scheme();
    public TransferMode get_TransferMode();
    public void set_TransferMode(TransferMode value);
    public WebSocketTransportSettings get_WebSocketSettings();
    public void set_WebSocketSettings(WebSocketTransportSettings value);
    public bool get_UseDefaultWebProxy();
    public void set_UseDefaultWebProxy(bool value);
    public bool get_KeepAliveEnabled();
    public void set_KeepAliveEnabled(bool value);
    public virtual IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context);
    public virtual bool CanBuildChannelFactory(BindingContext context);
    public virtual BindingElement Clone();
    public virtual T GetProperty(BindingContext context);
}
public interface System.ServiceModel.Channels.IHttpCookieContainerManager {
    public CookieContainer CookieContainer { get; public set; }
    public abstract virtual CookieContainer get_CookieContainer();
    public abstract virtual void set_CookieContainer(CookieContainer value);
}
public class System.ServiceModel.Channels.WebSocketTransportSettings : object {
    public static string BinaryMessageReceivedAction;
    public static string TextMessageReceivedAction;
    [DefaultValueAttribute("False")]
public bool DisablePayloadMasking { get; public set; }
    [DefaultValueAttribute("System.TimeSpan", "00:00:00")]
public TimeSpan KeepAliveInterval { get; public set; }
    [DefaultValueAttribute("")]
public string SubProtocol { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public WebSocketTransportUsage TransportUsage { get; public set; }
    public bool get_DisablePayloadMasking();
    public void set_DisablePayloadMasking(bool value);
    public TimeSpan get_KeepAliveInterval();
    public void set_KeepAliveInterval(TimeSpan value);
    public string get_SubProtocol();
    public void set_SubProtocol(string value);
    public WebSocketTransportUsage get_TransportUsage();
    public void set_TransportUsage(WebSocketTransportUsage value);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(WebSocketTransportSettings other);
    public virtual int GetHashCode();
}
public enum System.ServiceModel.Channels.WebSocketTransportUsage : Enum {
    public int value__;
    public static WebSocketTransportUsage Always;
    public static WebSocketTransportUsage Never;
    public static WebSocketTransportUsage WhenDuplex;
}
public abstract class System.ServiceModel.HttpBindingBase : Binding {
    [DefaultValueAttribute("False")]
public bool AllowCookies { get; public set; }
    [DefaultValueAttribute("False")]
public bool BypassProxyOnLocal { get; public set; }
    public EnvelopeVersion EnvelopeVersion { get; }
    [DefaultValueAttribute("524288")]
public long MaxBufferPoolSize { get; public set; }
    [DefaultValueAttribute("65536")]
public int MaxBufferSize { get; public set; }
    [DefaultValueAttribute("65536")]
public long MaxReceivedMessageSize { get; public set; }
    [DefaultValueAttribute("")]
[TypeConverterAttribute("System.UriTypeConverter")]
public Uri ProxyAddress { get; public set; }
    public XmlDictionaryReaderQuotas ReaderQuotas { get; public set; }
    public string Scheme { get; }
    public Encoding TextEncoding { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TransferMode TransferMode { get; public set; }
    [DefaultValueAttribute("True")]
public bool UseDefaultWebProxy { get; public set; }
    public bool get_AllowCookies();
    public void set_AllowCookies(bool value);
    public bool get_BypassProxyOnLocal();
    public void set_BypassProxyOnLocal(bool value);
    public EnvelopeVersion get_EnvelopeVersion();
    public long get_MaxBufferPoolSize();
    public void set_MaxBufferPoolSize(long value);
    public int get_MaxBufferSize();
    public void set_MaxBufferSize(int value);
    public long get_MaxReceivedMessageSize();
    public void set_MaxReceivedMessageSize(long value);
    public Uri get_ProxyAddress();
    public void set_ProxyAddress(Uri value);
    public XmlDictionaryReaderQuotas get_ReaderQuotas();
    public void set_ReaderQuotas(XmlDictionaryReaderQuotas value);
    public virtual string get_Scheme();
    public Encoding get_TextEncoding();
    public void set_TextEncoding(Encoding value);
    public TransferMode get_TransferMode();
    public void set_TransferMode(TransferMode value);
    public bool get_UseDefaultWebProxy();
    public void set_UseDefaultWebProxy(bool value);
}
public enum System.ServiceModel.HttpClientCredentialType : Enum {
    public int value__;
    public static HttpClientCredentialType Basic;
    public static HttpClientCredentialType Certificate;
    public static HttpClientCredentialType Digest;
    public static HttpClientCredentialType InheritedFromHost;
    public static HttpClientCredentialType None;
    public static HttpClientCredentialType Ntlm;
    public static HttpClientCredentialType Windows;
}
public enum System.ServiceModel.HttpProxyCredentialType : Enum {
    public int value__;
    public static HttpProxyCredentialType None;
    public static HttpProxyCredentialType Basic;
    public static HttpProxyCredentialType Digest;
    public static HttpProxyCredentialType Ntlm;
    public static HttpProxyCredentialType Windows;
}
public class System.ServiceModel.HttpTransportSecurity : object {
    public HttpClientCredentialType ClientCredentialType { get; public set; }
    public HttpProxyCredentialType ProxyCredentialType { get; public set; }
    public HttpClientCredentialType get_ClientCredentialType();
    public void set_ClientCredentialType(HttpClientCredentialType value);
    public HttpProxyCredentialType get_ProxyCredentialType();
    public void set_ProxyCredentialType(HttpProxyCredentialType value);
}
public class System.ServiceModel.NetHttpBinding : HttpBindingBase {
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public NetHttpMessageEncoding MessageEncoding { get; public set; }
    public BasicHttpSecurity Security { get; public set; }
    public WebSocketTransportSettings WebSocketSettings { get; }
    public NetHttpBinding(BasicHttpSecurityMode securityMode);
    public NetHttpBinding(string configurationName);
    public NetHttpMessageEncoding get_MessageEncoding();
    public void set_MessageEncoding(NetHttpMessageEncoding value);
    public BasicHttpSecurity get_Security();
    public void set_Security(BasicHttpSecurity value);
    public WebSocketTransportSettings get_WebSocketSettings();
    public virtual IChannelFactory`1<TChannel> BuildChannelFactory(BindingParameterCollection parameters);
    public virtual BindingElementCollection CreateBindingElements();
}
public enum System.ServiceModel.NetHttpMessageEncoding : Enum {
    public int value__;
    public static NetHttpMessageEncoding Binary;
    public static NetHttpMessageEncoding Text;
    public static NetHttpMessageEncoding Mtom;
}
public class System.ServiceModel.NetHttpsBinding : HttpBindingBase {
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public NetHttpMessageEncoding MessageEncoding { get; public set; }
    public BasicHttpsSecurity Security { get; public set; }
    public WebSocketTransportSettings WebSocketSettings { get; }
    public NetHttpsBinding(BasicHttpsSecurityMode securityMode);
    public NetHttpMessageEncoding get_MessageEncoding();
    public void set_MessageEncoding(NetHttpMessageEncoding value);
    public BasicHttpsSecurity get_Security();
    public void set_Security(BasicHttpsSecurity value);
    public WebSocketTransportSettings get_WebSocketSettings();
    public virtual IChannelFactory`1<TChannel> BuildChannelFactory(BindingParameterCollection parameters);
    public virtual BindingElementCollection CreateBindingElements();
}
