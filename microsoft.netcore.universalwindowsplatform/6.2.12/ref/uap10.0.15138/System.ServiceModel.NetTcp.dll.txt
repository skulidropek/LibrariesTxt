[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
public abstract class System.ServiceModel.Channels.ConnectionOrientedTransportBindingElement : TransportBindingElement {
    [DefaultValueAttribute("8192")]
public int ConnectionBufferSize { get; public set; }
    [DefaultValueAttribute("65536")]
public int MaxBufferSize { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TransferMode TransferMode { get; public set; }
    public int get_ConnectionBufferSize();
    public void set_ConnectionBufferSize(int value);
    public int get_MaxBufferSize();
    public void set_MaxBufferSize(int value);
    public TransferMode get_TransferMode();
    public void set_TransferMode(TransferMode value);
    public virtual bool CanBuildChannelFactory(BindingContext context);
    public virtual T GetProperty(BindingContext context);
}
public class System.ServiceModel.Channels.SslStreamSecurityBindingElement : BindingElement {
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SslProtocols SslProtocols { get; public set; }
    public SslProtocols get_SslProtocols();
    public void set_SslProtocols(SslProtocols value);
    public virtual IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context);
    public virtual bool CanBuildChannelFactory(BindingContext context);
    public virtual BindingElement Clone();
    public virtual T GetProperty(BindingContext context);
}
public class System.ServiceModel.Channels.TcpConnectionPoolSettings : object {
    public string GroupName { get; public set; }
    public TimeSpan IdleTimeout { get; public set; }
    public TimeSpan LeaseTimeout { get; public set; }
    public int MaxOutboundConnectionsPerEndpoint { get; public set; }
    public string get_GroupName();
    public void set_GroupName(string value);
    public TimeSpan get_IdleTimeout();
    public void set_IdleTimeout(TimeSpan value);
    public TimeSpan get_LeaseTimeout();
    public void set_LeaseTimeout(TimeSpan value);
    public int get_MaxOutboundConnectionsPerEndpoint();
    public void set_MaxOutboundConnectionsPerEndpoint(int value);
}
public class System.ServiceModel.Channels.TcpTransportBindingElement : ConnectionOrientedTransportBindingElement {
    public TcpConnectionPoolSettings ConnectionPoolSettings { get; }
    public string Scheme { get; }
    protected TcpTransportBindingElement(TcpTransportBindingElement elementToBeCloned);
    public TcpConnectionPoolSettings get_ConnectionPoolSettings();
    public virtual string get_Scheme();
    public virtual IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context);
    public virtual BindingElement Clone();
    public virtual T GetProperty(BindingContext context);
}
public class System.ServiceModel.Channels.WindowsStreamSecurityBindingElement : BindingElement {
    public virtual IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context);
    public virtual bool CanBuildChannelFactory(BindingContext context);
    public virtual BindingElement Clone();
    public virtual T GetProperty(BindingContext context);
}
public class System.ServiceModel.MessageSecurityOverTcp : object {
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public MessageCredentialType ClientCredentialType { get; public set; }
    public MessageCredentialType get_ClientCredentialType();
    public void set_ClientCredentialType(MessageCredentialType value);
}
public class System.ServiceModel.NetTcpBinding : Binding {
    public EnvelopeVersion EnvelopeVersion { get; }
    [DefaultValueAttribute("524288")]
public long MaxBufferPoolSize { get; public set; }
    [DefaultValueAttribute("65536")]
public int MaxBufferSize { get; public set; }
    [DefaultValueAttribute("65536")]
public long MaxReceivedMessageSize { get; public set; }
    public XmlDictionaryReaderQuotas ReaderQuotas { get; public set; }
    public string Scheme { get; }
    public NetTcpSecurity Security { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TransferMode TransferMode { get; public set; }
    public NetTcpBinding(SecurityMode securityMode);
    public NetTcpBinding(string configurationName);
    public EnvelopeVersion get_EnvelopeVersion();
    public long get_MaxBufferPoolSize();
    public void set_MaxBufferPoolSize(long value);
    public int get_MaxBufferSize();
    public void set_MaxBufferSize(int value);
    public long get_MaxReceivedMessageSize();
    public void set_MaxReceivedMessageSize(long value);
    public XmlDictionaryReaderQuotas get_ReaderQuotas();
    public void set_ReaderQuotas(XmlDictionaryReaderQuotas value);
    public virtual string get_Scheme();
    public NetTcpSecurity get_Security();
    public void set_Security(NetTcpSecurity value);
    public TransferMode get_TransferMode();
    public void set_TransferMode(TransferMode value);
    public virtual BindingElementCollection CreateBindingElements();
}
public class System.ServiceModel.NetTcpSecurity : object {
    public MessageSecurityOverTcp Message { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SecurityMode Mode { get; public set; }
    public TcpTransportSecurity Transport { get; public set; }
    public MessageSecurityOverTcp get_Message();
    public void set_Message(MessageSecurityOverTcp value);
    public SecurityMode get_Mode();
    public void set_Mode(SecurityMode value);
    public TcpTransportSecurity get_Transport();
    public void set_Transport(TcpTransportSecurity value);
}
public enum System.ServiceModel.TcpClientCredentialType : Enum {
    public int value__;
    public static TcpClientCredentialType Certificate;
    public static TcpClientCredentialType None;
    public static TcpClientCredentialType Windows;
}
public class System.ServiceModel.TcpTransportSecurity : object {
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public TcpClientCredentialType ClientCredentialType { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
public SslProtocols SslProtocols { get; public set; }
    public TcpClientCredentialType get_ClientCredentialType();
    public void set_ClientCredentialType(TcpClientCredentialType value);
    public SslProtocols get_SslProtocols();
    public void set_SslProtocols(SslProtocols value);
}
