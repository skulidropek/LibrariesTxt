[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
public enum System.Xml.ConformanceLevel : Enum {
    public int value__;
    public static ConformanceLevel Auto;
    public static ConformanceLevel Document;
    public static ConformanceLevel Fragment;
}
public enum System.Xml.DtdProcessing : Enum {
    public int value__;
    public static DtdProcessing Ignore;
    public static DtdProcessing Parse;
    public static DtdProcessing Prohibit;
}
public enum System.Xml.EntityHandling : Enum {
    public int value__;
    public static EntityHandling ExpandCharEntities;
    public static EntityHandling ExpandEntities;
}
public enum System.Xml.Formatting : Enum {
    public int value__;
    public static Formatting Indented;
    public static Formatting None;
}
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
public interface System.Xml.IApplicationResourceStreamResolver {
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", "True")]
public abstract virtual Stream GetApplicationResourceStream(Uri relativeUri);
}
public interface System.Xml.IHasXmlNode {
    public abstract virtual XmlNode GetNode();
}
public interface System.Xml.IXmlLineInfo {
    public int LineNumber { get; }
    public int LinePosition { get; }
    public abstract virtual int get_LineNumber();
    public abstract virtual int get_LinePosition();
    public abstract virtual bool HasLineInfo();
}
public interface System.Xml.IXmlNamespaceResolver {
    public abstract virtual IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    public abstract virtual string LookupNamespace(string prefix);
    public abstract virtual string LookupPrefix(string namespaceName);
}
[FlagsAttribute]
public enum System.Xml.NamespaceHandling : Enum {
    public int value__;
    public static NamespaceHandling Default;
    public static NamespaceHandling OmitDuplicates;
}
public class System.Xml.NameTable : XmlNameTable {
    public virtual string Add(Char[] key, int start, int len);
    public virtual string Add(string key);
    public virtual string Get(Char[] key, int start, int len);
    public virtual string Get(string value);
}
public enum System.Xml.NewLineHandling : Enum {
    public int value__;
    public static NewLineHandling Entitize;
    public static NewLineHandling None;
    public static NewLineHandling Replace;
}
public enum System.Xml.ReadState : Enum {
    public int value__;
    public static ReadState Closed;
    public static ReadState EndOfFile;
    public static ReadState Error;
    public static ReadState Initial;
    public static ReadState Interactive;
}
[FlagsAttribute]
public enum System.Xml.Resolvers.XmlKnownDtds : Enum {
    public int value__;
    public static XmlKnownDtds All;
    public static XmlKnownDtds None;
    public static XmlKnownDtds Rss091;
    public static XmlKnownDtds Xhtml10;
}
public class System.Xml.Resolvers.XmlPreloadedResolver : XmlResolver {
    unknown ICredentials Credentials {public set; }
    public IEnumerable`1<Uri> PreloadedUris { get; }
    public XmlPreloadedResolver(XmlKnownDtds preloadedDtds);
    public XmlPreloadedResolver(XmlResolver fallbackResolver);
    public XmlPreloadedResolver(XmlResolver fallbackResolver, XmlKnownDtds preloadedDtds);
    public XmlPreloadedResolver(XmlResolver fallbackResolver, XmlKnownDtds preloadedDtds, IEqualityComparer`1<Uri> uriComparer);
    public virtual void set_Credentials(ICredentials value);
    public IEnumerable`1<Uri> get_PreloadedUris();
    public void Add(Uri uri, Byte[] value);
    public void Add(Uri uri, Byte[] value, int offset, int count);
    public void Add(Uri uri, Stream value);
    public void Add(Uri uri, string value);
    public virtual object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn);
    public virtual Task`1<object> GetEntityAsync(Uri absoluteUri, string role, Type ofObjectToReturn);
    public void Remove(Uri uri);
    public virtual Uri ResolveUri(Uri baseUri, string relativeUri);
    public virtual bool SupportsType(Uri absoluteUri, Type type);
}
public interface System.Xml.Schema.IXmlSchemaInfo {
    public bool IsDefault { get; }
    public bool IsNil { get; }
    public XmlSchemaSimpleType MemberType { get; }
    public XmlSchemaAttribute SchemaAttribute { get; }
    public XmlSchemaElement SchemaElement { get; }
    public XmlSchemaType SchemaType { get; }
    public XmlSchemaValidity Validity { get; }
    public abstract virtual bool get_IsDefault();
    public abstract virtual bool get_IsNil();
    public abstract virtual XmlSchemaSimpleType get_MemberType();
    public abstract virtual XmlSchemaAttribute get_SchemaAttribute();
    public abstract virtual XmlSchemaElement get_SchemaElement();
    public abstract virtual XmlSchemaType get_SchemaType();
    public abstract virtual XmlSchemaValidity get_Validity();
}
public class System.Xml.Schema.ValidationEventArgs : EventArgs {
    public XmlSchemaException Exception { get; }
    public string Message { get; }
    public XmlSeverityType Severity { get; }
    public XmlSchemaException get_Exception();
    public string get_Message();
    public XmlSeverityType get_Severity();
}
public class System.Xml.Schema.ValidationEventHandler : MulticastDelegate {
    public ValidationEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, ValidationEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, ValidationEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Xml.Schema.XmlAtomicValue : XPathItem {
    public bool IsNode { get; }
    public object TypedValue { get; }
    public string Value { get; }
    public bool ValueAsBoolean { get; }
    public DateTime ValueAsDateTime { get; }
    public double ValueAsDouble { get; }
    public int ValueAsInt { get; }
    public long ValueAsLong { get; }
    public Type ValueType { get; }
    public XmlSchemaType XmlType { get; }
    public virtual bool get_IsNode();
    public virtual object get_TypedValue();
    public virtual string get_Value();
    public virtual bool get_ValueAsBoolean();
    public virtual DateTime get_ValueAsDateTime();
    public virtual double get_ValueAsDouble();
    public virtual int get_ValueAsInt();
    public virtual long get_ValueAsLong();
    public virtual Type get_ValueType();
    public virtual XmlSchemaType get_XmlType();
    public XmlAtomicValue Clone();
    private sealed virtual override object System.ICloneable.Clone();
    public virtual string ToString();
    public virtual object ValueAs(Type type, IXmlNamespaceResolver nsResolver);
}
[XmlRootAttribute("schema")]
public class System.Xml.Schema.XmlSchema : XmlSchemaObject {
    public static string InstanceNamespace;
    public static string Namespace;
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[XmlAttributeAttribute("attributeFormDefault")]
public XmlSchemaForm AttributeFormDefault { get; public set; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable AttributeGroups { get; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable Attributes { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[XmlAttributeAttribute("blockDefault")]
public XmlSchemaDerivationMethod BlockDefault { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[XmlAttributeAttribute("elementFormDefault")]
public XmlSchemaForm ElementFormDefault { get; public set; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable Elements { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[XmlAttributeAttribute("finalDefault")]
public XmlSchemaDerivationMethod FinalDefault { get; public set; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable Groups { get; }
    [XmlAttributeAttribute("id")]
public string Id { get; public set; }
    [XmlElementAttribute("import", "System.Xml.Schema.XmlSchemaImport")]
[XmlElementAttribute("include", "System.Xml.Schema.XmlSchemaInclude")]
[XmlElementAttribute("redefine", "System.Xml.Schema.XmlSchemaRedefine")]
public XmlSchemaObjectCollection Includes { get; }
    [XmlIgnoreAttribute]
public bool IsCompiled { get; }
    [XmlElementAttribute("annotation", "System.Xml.Schema.XmlSchemaAnnotation")]
[XmlElementAttribute("attribute", "System.Xml.Schema.XmlSchemaAttribute")]
[XmlElementAttribute("attributeGroup", "System.Xml.Schema.XmlSchemaAttributeGroup")]
[XmlElementAttribute("complexType", "System.Xml.Schema.XmlSchemaComplexType")]
[XmlElementAttribute("element", "System.Xml.Schema.XmlSchemaElement")]
[XmlElementAttribute("group", "System.Xml.Schema.XmlSchemaGroup")]
[XmlElementAttribute("notation", "System.Xml.Schema.XmlSchemaNotation")]
[XmlElementAttribute("simpleType", "System.Xml.Schema.XmlSchemaSimpleType")]
public XmlSchemaObjectCollection Items { get; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable Notations { get; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable SchemaTypes { get; }
    [XmlAttributeAttribute("targetNamespace")]
public string TargetNamespace { get; public set; }
    [XmlAnyAttributeAttribute]
public XmlAttribute[] UnhandledAttributes { get; public set; }
    [XmlAttributeAttribute("version")]
public string Version { get; public set; }
    public XmlSchemaForm get_AttributeFormDefault();
    public void set_AttributeFormDefault(XmlSchemaForm value);
    public XmlSchemaObjectTable get_AttributeGroups();
    public XmlSchemaObjectTable get_Attributes();
    public XmlSchemaDerivationMethod get_BlockDefault();
    public void set_BlockDefault(XmlSchemaDerivationMethod value);
    public XmlSchemaForm get_ElementFormDefault();
    public void set_ElementFormDefault(XmlSchemaForm value);
    public XmlSchemaObjectTable get_Elements();
    public XmlSchemaDerivationMethod get_FinalDefault();
    public void set_FinalDefault(XmlSchemaDerivationMethod value);
    public XmlSchemaObjectTable get_Groups();
    public string get_Id();
    public void set_Id(string value);
    public XmlSchemaObjectCollection get_Includes();
    public bool get_IsCompiled();
    public XmlSchemaObjectCollection get_Items();
    public XmlSchemaObjectTable get_Notations();
    public XmlSchemaObjectTable get_SchemaTypes();
    public string get_TargetNamespace();
    public void set_TargetNamespace(string value);
    public XmlAttribute[] get_UnhandledAttributes();
    public void set_UnhandledAttributes(XmlAttribute[] value);
    public string get_Version();
    public void set_Version(string value);
    [ObsoleteAttribute("Use System.Xml.Schema.XmlSchemaSet for schema compilation and validation. http://go.microsoft.com/fwlink/?linkid=14202")]
public void Compile(ValidationEventHandler validationEventHandler);
    [ObsoleteAttribute("Use System.Xml.Schema.XmlSchemaSet for schema compilation and validation. http://go.microsoft.com/fwlink/?linkid=14202")]
public void Compile(ValidationEventHandler validationEventHandler, XmlResolver resolver);
    public static XmlSchema Read(Stream stream, ValidationEventHandler validationEventHandler);
    public static XmlSchema Read(TextReader reader, ValidationEventHandler validationEventHandler);
    public static XmlSchema Read(XmlReader reader, ValidationEventHandler validationEventHandler);
    public void Write(Stream stream);
    public void Write(Stream stream, XmlNamespaceManager namespaceManager);
    public void Write(TextWriter writer);
    public void Write(TextWriter writer, XmlNamespaceManager namespaceManager);
    public void Write(XmlWriter writer);
    public void Write(XmlWriter writer, XmlNamespaceManager namespaceManager);
}
public class System.Xml.Schema.XmlSchemaAll : XmlSchemaGroupBase {
    [XmlElementAttribute("element", "System.Xml.Schema.XmlSchemaElement")]
public XmlSchemaObjectCollection Items { get; }
    public virtual XmlSchemaObjectCollection get_Items();
}
public class System.Xml.Schema.XmlSchemaAnnotated : XmlSchemaObject {
    [XmlElementAttribute("annotation", "System.Xml.Schema.XmlSchemaAnnotation")]
public XmlSchemaAnnotation Annotation { get; public set; }
    [XmlAttributeAttribute("id")]
public string Id { get; public set; }
    [XmlAnyAttributeAttribute]
public XmlAttribute[] UnhandledAttributes { get; public set; }
    public XmlSchemaAnnotation get_Annotation();
    public void set_Annotation(XmlSchemaAnnotation value);
    public string get_Id();
    public void set_Id(string value);
    public XmlAttribute[] get_UnhandledAttributes();
    public void set_UnhandledAttributes(XmlAttribute[] value);
}
public class System.Xml.Schema.XmlSchemaAnnotation : XmlSchemaObject {
    [XmlAttributeAttribute("id")]
public string Id { get; public set; }
    [XmlElementAttribute("appinfo", "System.Xml.Schema.XmlSchemaAppInfo")]
[XmlElementAttribute("documentation", "System.Xml.Schema.XmlSchemaDocumentation")]
public XmlSchemaObjectCollection Items { get; }
    [XmlAnyAttributeAttribute]
public XmlAttribute[] UnhandledAttributes { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    public XmlSchemaObjectCollection get_Items();
    public XmlAttribute[] get_UnhandledAttributes();
    public void set_UnhandledAttributes(XmlAttribute[] value);
}
public class System.Xml.Schema.XmlSchemaAny : XmlSchemaParticle {
    [XmlAttributeAttribute("namespace")]
public string Namespace { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[XmlAttributeAttribute("processContents")]
public XmlSchemaContentProcessing ProcessContents { get; public set; }
    public string get_Namespace();
    public void set_Namespace(string value);
    public XmlSchemaContentProcessing get_ProcessContents();
    public void set_ProcessContents(XmlSchemaContentProcessing value);
}
public class System.Xml.Schema.XmlSchemaAnyAttribute : XmlSchemaAnnotated {
    [XmlAttributeAttribute("namespace")]
public string Namespace { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[XmlAttributeAttribute("processContents")]
public XmlSchemaContentProcessing ProcessContents { get; public set; }
    public string get_Namespace();
    public void set_Namespace(string value);
    public XmlSchemaContentProcessing get_ProcessContents();
    public void set_ProcessContents(XmlSchemaContentProcessing value);
}
public class System.Xml.Schema.XmlSchemaAppInfo : XmlSchemaObject {
    [XmlAnyElementAttribute]
[XmlTextAttribute]
public XmlNode[] Markup { get; public set; }
    [XmlAttributeAttribute("source")]
public string Source { get; public set; }
    public XmlNode[] get_Markup();
    public void set_Markup(XmlNode[] value);
    public string get_Source();
    public void set_Source(string value);
}
public class System.Xml.Schema.XmlSchemaAttribute : XmlSchemaAnnotated {
    [XmlIgnoreAttribute]
public XmlSchemaSimpleType AttributeSchemaType { get; }
    [ObsoleteAttribute("This property has been deprecated. Please use AttributeSchemaType property that returns a strongly typed attribute type. http://go.microsoft.com/fwlink/?linkid=14202")]
[XmlIgnoreAttribute]
public object AttributeType { get; }
    [DefaultValueAttribute("")]
[XmlAttributeAttribute("default")]
public string DefaultValue { get; public set; }
    [DefaultValueAttribute("")]
[XmlAttributeAttribute("fixed")]
public string FixedValue { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[XmlAttributeAttribute("form")]
public XmlSchemaForm Form { get; public set; }
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlIgnoreAttribute]
public XmlQualifiedName QualifiedName { get; }
    [XmlAttributeAttribute("ref")]
public XmlQualifiedName RefName { get; public set; }
    [XmlElementAttribute("simpleType")]
public XmlSchemaSimpleType SchemaType { get; public set; }
    [XmlAttributeAttribute("type")]
public XmlQualifiedName SchemaTypeName { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[XmlAttributeAttribute("use")]
public XmlSchemaUse Use { get; public set; }
    public XmlSchemaSimpleType get_AttributeSchemaType();
    public object get_AttributeType();
    public string get_DefaultValue();
    public void set_DefaultValue(string value);
    public string get_FixedValue();
    public void set_FixedValue(string value);
    public XmlSchemaForm get_Form();
    public void set_Form(XmlSchemaForm value);
    public string get_Name();
    public void set_Name(string value);
    public XmlQualifiedName get_QualifiedName();
    public XmlQualifiedName get_RefName();
    public void set_RefName(XmlQualifiedName value);
    public XmlSchemaSimpleType get_SchemaType();
    public void set_SchemaType(XmlSchemaSimpleType value);
    public XmlQualifiedName get_SchemaTypeName();
    public void set_SchemaTypeName(XmlQualifiedName value);
    public XmlSchemaUse get_Use();
    public void set_Use(XmlSchemaUse value);
}
public class System.Xml.Schema.XmlSchemaAttributeGroup : XmlSchemaAnnotated {
    [XmlElementAttribute("anyAttribute")]
public XmlSchemaAnyAttribute AnyAttribute { get; public set; }
    [XmlElementAttribute("attribute", "System.Xml.Schema.XmlSchemaAttribute")]
[XmlElementAttribute("attributeGroup", "System.Xml.Schema.XmlSchemaAttributeGroupRef")]
public XmlSchemaObjectCollection Attributes { get; }
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlIgnoreAttribute]
public XmlQualifiedName QualifiedName { get; }
    [XmlIgnoreAttribute]
public XmlSchemaAttributeGroup RedefinedAttributeGroup { get; }
    public XmlSchemaAnyAttribute get_AnyAttribute();
    public void set_AnyAttribute(XmlSchemaAnyAttribute value);
    public XmlSchemaObjectCollection get_Attributes();
    public string get_Name();
    public void set_Name(string value);
    public XmlQualifiedName get_QualifiedName();
    public XmlSchemaAttributeGroup get_RedefinedAttributeGroup();
}
public class System.Xml.Schema.XmlSchemaAttributeGroupRef : XmlSchemaAnnotated {
    [XmlAttributeAttribute("ref")]
public XmlQualifiedName RefName { get; public set; }
    public XmlQualifiedName get_RefName();
    public void set_RefName(XmlQualifiedName value);
}
public class System.Xml.Schema.XmlSchemaChoice : XmlSchemaGroupBase {
    [XmlElementAttribute("any", "System.Xml.Schema.XmlSchemaAny")]
[XmlElementAttribute("choice", "System.Xml.Schema.XmlSchemaChoice")]
[XmlElementAttribute("element", "System.Xml.Schema.XmlSchemaElement")]
[XmlElementAttribute("group", "System.Xml.Schema.XmlSchemaGroupRef")]
[XmlElementAttribute("sequence", "System.Xml.Schema.XmlSchemaSequence")]
public XmlSchemaObjectCollection Items { get; }
    public virtual XmlSchemaObjectCollection get_Items();
}
[DefaultMemberAttribute("Item")]
[ObsoleteAttribute("Use System.Xml.Schema.XmlSchemaSet for schema compilation and validation. http://go.microsoft.com/fwlink/?linkid=14202")]
public class System.Xml.Schema.XmlSchemaCollection : object {
    public int Count { get; }
    public XmlSchema Item { get; }
    public XmlNameTable NameTable { get; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public XmlSchemaCollection(XmlNameTable nametable);
    public int get_Count();
    public XmlSchema get_Item(string ns);
    public XmlNameTable get_NameTable();
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public void add_ValidationEventHandler(ValidationEventHandler value);
    public void remove_ValidationEventHandler(ValidationEventHandler value);
    public XmlSchema Add(string ns, string uri);
    public XmlSchema Add(string ns, XmlReader reader);
    public XmlSchema Add(string ns, XmlReader reader, XmlResolver resolver);
    public XmlSchema Add(XmlSchema schema);
    public XmlSchema Add(XmlSchema schema, XmlResolver resolver);
    public void Add(XmlSchemaCollection schema);
    public bool Contains(string ns);
    public bool Contains(XmlSchema schema);
    public void CopyTo(XmlSchema[] array, int index);
    public XmlSchemaCollectionEnumerator GetEnumerator();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
public class System.Xml.Schema.XmlSchemaCollectionEnumerator : object {
    public XmlSchema Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public XmlSchema get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public bool MoveNext();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
}
public class System.Xml.Schema.XmlSchemaCompilationSettings : object {
    public bool EnableUpaCheck { get; public set; }
    public bool get_EnableUpaCheck();
    public void set_EnableUpaCheck(bool value);
}
public class System.Xml.Schema.XmlSchemaComplexContent : XmlSchemaContentModel {
    [XmlElementAttribute("extension", "System.Xml.Schema.XmlSchemaComplexContentExtension")]
[XmlElementAttribute("restriction", "System.Xml.Schema.XmlSchemaComplexContentRestriction")]
public XmlSchemaContent Content { get; public set; }
    [XmlAttributeAttribute("mixed")]
public bool IsMixed { get; public set; }
    public virtual XmlSchemaContent get_Content();
    public virtual void set_Content(XmlSchemaContent value);
    public bool get_IsMixed();
    public void set_IsMixed(bool value);
}
public class System.Xml.Schema.XmlSchemaComplexContentExtension : XmlSchemaContent {
    [XmlElementAttribute("anyAttribute")]
public XmlSchemaAnyAttribute AnyAttribute { get; public set; }
    [XmlElementAttribute("attribute", "System.Xml.Schema.XmlSchemaAttribute")]
[XmlElementAttribute("attributeGroup", "System.Xml.Schema.XmlSchemaAttributeGroupRef")]
public XmlSchemaObjectCollection Attributes { get; }
    [XmlAttributeAttribute("base")]
public XmlQualifiedName BaseTypeName { get; public set; }
    [XmlElementAttribute("all", "System.Xml.Schema.XmlSchemaAll")]
[XmlElementAttribute("choice", "System.Xml.Schema.XmlSchemaChoice")]
[XmlElementAttribute("group", "System.Xml.Schema.XmlSchemaGroupRef")]
[XmlElementAttribute("sequence", "System.Xml.Schema.XmlSchemaSequence")]
public XmlSchemaParticle Particle { get; public set; }
    public XmlSchemaAnyAttribute get_AnyAttribute();
    public void set_AnyAttribute(XmlSchemaAnyAttribute value);
    public XmlSchemaObjectCollection get_Attributes();
    public XmlQualifiedName get_BaseTypeName();
    public void set_BaseTypeName(XmlQualifiedName value);
    public XmlSchemaParticle get_Particle();
    public void set_Particle(XmlSchemaParticle value);
}
public class System.Xml.Schema.XmlSchemaComplexContentRestriction : XmlSchemaContent {
    [XmlElementAttribute("anyAttribute")]
public XmlSchemaAnyAttribute AnyAttribute { get; public set; }
    [XmlElementAttribute("attribute", "System.Xml.Schema.XmlSchemaAttribute")]
[XmlElementAttribute("attributeGroup", "System.Xml.Schema.XmlSchemaAttributeGroupRef")]
public XmlSchemaObjectCollection Attributes { get; }
    [XmlAttributeAttribute("base")]
public XmlQualifiedName BaseTypeName { get; public set; }
    [XmlElementAttribute("all", "System.Xml.Schema.XmlSchemaAll")]
[XmlElementAttribute("choice", "System.Xml.Schema.XmlSchemaChoice")]
[XmlElementAttribute("group", "System.Xml.Schema.XmlSchemaGroupRef")]
[XmlElementAttribute("sequence", "System.Xml.Schema.XmlSchemaSequence")]
public XmlSchemaParticle Particle { get; public set; }
    public XmlSchemaAnyAttribute get_AnyAttribute();
    public void set_AnyAttribute(XmlSchemaAnyAttribute value);
    public XmlSchemaObjectCollection get_Attributes();
    public XmlQualifiedName get_BaseTypeName();
    public void set_BaseTypeName(XmlQualifiedName value);
    public XmlSchemaParticle get_Particle();
    public void set_Particle(XmlSchemaParticle value);
}
public class System.Xml.Schema.XmlSchemaComplexType : XmlSchemaType {
    [XmlElementAttribute("anyAttribute")]
public XmlSchemaAnyAttribute AnyAttribute { get; public set; }
    [XmlElementAttribute("attribute", "System.Xml.Schema.XmlSchemaAttribute")]
[XmlElementAttribute("attributeGroup", "System.Xml.Schema.XmlSchemaAttributeGroupRef")]
public XmlSchemaObjectCollection Attributes { get; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable AttributeUses { get; }
    [XmlIgnoreAttribute]
public XmlSchemaAnyAttribute AttributeWildcard { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[XmlAttributeAttribute("block")]
public XmlSchemaDerivationMethod Block { get; public set; }
    [XmlIgnoreAttribute]
public XmlSchemaDerivationMethod BlockResolved { get; }
    [XmlElementAttribute("complexContent", "System.Xml.Schema.XmlSchemaComplexContent")]
[XmlElementAttribute("simpleContent", "System.Xml.Schema.XmlSchemaSimpleContent")]
public XmlSchemaContentModel ContentModel { get; public set; }
    [XmlIgnoreAttribute]
public XmlSchemaContentType ContentType { get; }
    [XmlIgnoreAttribute]
public XmlSchemaParticle ContentTypeParticle { get; }
    [DefaultValueAttribute("False")]
[XmlAttributeAttribute("abstract")]
public bool IsAbstract { get; public set; }
    [DefaultValueAttribute("False")]
[XmlAttributeAttribute("mixed")]
public bool IsMixed { get; public set; }
    [XmlElementAttribute("all", "System.Xml.Schema.XmlSchemaAll")]
[XmlElementAttribute("choice", "System.Xml.Schema.XmlSchemaChoice")]
[XmlElementAttribute("group", "System.Xml.Schema.XmlSchemaGroupRef")]
[XmlElementAttribute("sequence", "System.Xml.Schema.XmlSchemaSequence")]
public XmlSchemaParticle Particle { get; public set; }
    public XmlSchemaAnyAttribute get_AnyAttribute();
    public void set_AnyAttribute(XmlSchemaAnyAttribute value);
    public XmlSchemaObjectCollection get_Attributes();
    public XmlSchemaObjectTable get_AttributeUses();
    public XmlSchemaAnyAttribute get_AttributeWildcard();
    public XmlSchemaDerivationMethod get_Block();
    public void set_Block(XmlSchemaDerivationMethod value);
    public XmlSchemaDerivationMethod get_BlockResolved();
    public XmlSchemaContentModel get_ContentModel();
    public void set_ContentModel(XmlSchemaContentModel value);
    public XmlSchemaContentType get_ContentType();
    public XmlSchemaParticle get_ContentTypeParticle();
    public bool get_IsAbstract();
    public void set_IsAbstract(bool value);
    public virtual bool get_IsMixed();
    public virtual void set_IsMixed(bool value);
    public XmlSchemaParticle get_Particle();
    public void set_Particle(XmlSchemaParticle value);
}
public abstract class System.Xml.Schema.XmlSchemaContent : XmlSchemaAnnotated {
}
public abstract class System.Xml.Schema.XmlSchemaContentModel : XmlSchemaAnnotated {
    [XmlIgnoreAttribute]
public XmlSchemaContent Content { get; public set; }
    public abstract virtual XmlSchemaContent get_Content();
    public abstract virtual void set_Content(XmlSchemaContent value);
}
public enum System.Xml.Schema.XmlSchemaContentProcessing : Enum {
    public int value__;
    [XmlEnumAttribute("lax")]
public static XmlSchemaContentProcessing Lax;
    [XmlIgnoreAttribute]
public static XmlSchemaContentProcessing None;
    [XmlEnumAttribute("skip")]
public static XmlSchemaContentProcessing Skip;
    [XmlEnumAttribute("strict")]
public static XmlSchemaContentProcessing Strict;
}
public enum System.Xml.Schema.XmlSchemaContentType : Enum {
    public int value__;
    public static XmlSchemaContentType ElementOnly;
    public static XmlSchemaContentType Empty;
    public static XmlSchemaContentType Mixed;
    public static XmlSchemaContentType TextOnly;
}
public abstract class System.Xml.Schema.XmlSchemaDatatype : object {
    public XmlTokenizedType TokenizedType { get; }
    public XmlTypeCode TypeCode { get; }
    public Type ValueType { get; }
    public XmlSchemaDatatypeVariety Variety { get; }
    public abstract virtual XmlTokenizedType get_TokenizedType();
    public virtual XmlTypeCode get_TypeCode();
    public abstract virtual Type get_ValueType();
    public virtual XmlSchemaDatatypeVariety get_Variety();
    public virtual object ChangeType(object value, Type targetType);
    public virtual object ChangeType(object value, Type targetType, IXmlNamespaceResolver namespaceResolver);
    public virtual bool IsDerivedFrom(XmlSchemaDatatype datatype);
    public abstract virtual object ParseValue(string s, XmlNameTable nameTable, IXmlNamespaceResolver nsmgr);
}
public enum System.Xml.Schema.XmlSchemaDatatypeVariety : Enum {
    public int value__;
    public static XmlSchemaDatatypeVariety Atomic;
    public static XmlSchemaDatatypeVariety List;
    public static XmlSchemaDatatypeVariety Union;
}
[FlagsAttribute]
public enum System.Xml.Schema.XmlSchemaDerivationMethod : Enum {
    public int value__;
    [XmlEnumAttribute("#all")]
public static XmlSchemaDerivationMethod All;
    [XmlEnumAttribute("")]
public static XmlSchemaDerivationMethod Empty;
    [XmlEnumAttribute("extension")]
public static XmlSchemaDerivationMethod Extension;
    [XmlEnumAttribute("list")]
public static XmlSchemaDerivationMethod List;
    [XmlIgnoreAttribute]
public static XmlSchemaDerivationMethod None;
    [XmlEnumAttribute("restriction")]
public static XmlSchemaDerivationMethod Restriction;
    [XmlEnumAttribute("substitution")]
public static XmlSchemaDerivationMethod Substitution;
    [XmlEnumAttribute("union")]
public static XmlSchemaDerivationMethod Union;
}
public class System.Xml.Schema.XmlSchemaDocumentation : XmlSchemaObject {
    [XmlAttributeAttribute("xml:lang")]
public string Language { get; public set; }
    [XmlAnyElementAttribute]
[XmlTextAttribute]
public XmlNode[] Markup { get; public set; }
    [XmlAttributeAttribute("source")]
public string Source { get; public set; }
    public string get_Language();
    public void set_Language(string value);
    public XmlNode[] get_Markup();
    public void set_Markup(XmlNode[] value);
    public string get_Source();
    public void set_Source(string value);
}
public class System.Xml.Schema.XmlSchemaElement : XmlSchemaParticle {
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[XmlAttributeAttribute("block")]
public XmlSchemaDerivationMethod Block { get; public set; }
    [XmlIgnoreAttribute]
public XmlSchemaDerivationMethod BlockResolved { get; }
    [XmlElementAttribute("key", "System.Xml.Schema.XmlSchemaKey")]
[XmlElementAttribute("keyref", "System.Xml.Schema.XmlSchemaKeyref")]
[XmlElementAttribute("unique", "System.Xml.Schema.XmlSchemaUnique")]
public XmlSchemaObjectCollection Constraints { get; }
    [DefaultValueAttribute("")]
[XmlAttributeAttribute("default")]
public string DefaultValue { get; public set; }
    [XmlIgnoreAttribute]
public XmlSchemaType ElementSchemaType { get; }
    [ObsoleteAttribute("This property has been deprecated. Please use ElementSchemaType property that returns a strongly typed element type. http://go.microsoft.com/fwlink/?linkid=14202")]
[XmlIgnoreAttribute]
public object ElementType { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[XmlAttributeAttribute("final")]
public XmlSchemaDerivationMethod Final { get; public set; }
    [XmlIgnoreAttribute]
public XmlSchemaDerivationMethod FinalResolved { get; }
    [DefaultValueAttribute("")]
[XmlAttributeAttribute("fixed")]
public string FixedValue { get; public set; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[XmlAttributeAttribute("form")]
public XmlSchemaForm Form { get; public set; }
    [DefaultValueAttribute("False")]
[XmlAttributeAttribute("abstract")]
public bool IsAbstract { get; public set; }
    [DefaultValueAttribute("False")]
[XmlAttributeAttribute("nillable")]
public bool IsNillable { get; public set; }
    [DefaultValueAttribute("")]
[XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlIgnoreAttribute]
public XmlQualifiedName QualifiedName { get; }
    [XmlAttributeAttribute("ref")]
public XmlQualifiedName RefName { get; public set; }
    [XmlElementAttribute("complexType", "System.Xml.Schema.XmlSchemaComplexType")]
[XmlElementAttribute("simpleType", "System.Xml.Schema.XmlSchemaSimpleType")]
public XmlSchemaType SchemaType { get; public set; }
    [XmlAttributeAttribute("type")]
public XmlQualifiedName SchemaTypeName { get; public set; }
    [XmlAttributeAttribute("substitutionGroup")]
public XmlQualifiedName SubstitutionGroup { get; public set; }
    public XmlSchemaDerivationMethod get_Block();
    public void set_Block(XmlSchemaDerivationMethod value);
    public XmlSchemaDerivationMethod get_BlockResolved();
    public XmlSchemaObjectCollection get_Constraints();
    public string get_DefaultValue();
    public void set_DefaultValue(string value);
    public XmlSchemaType get_ElementSchemaType();
    public object get_ElementType();
    public XmlSchemaDerivationMethod get_Final();
    public void set_Final(XmlSchemaDerivationMethod value);
    public XmlSchemaDerivationMethod get_FinalResolved();
    public string get_FixedValue();
    public void set_FixedValue(string value);
    public XmlSchemaForm get_Form();
    public void set_Form(XmlSchemaForm value);
    public bool get_IsAbstract();
    public void set_IsAbstract(bool value);
    public bool get_IsNillable();
    public void set_IsNillable(bool value);
    public string get_Name();
    public void set_Name(string value);
    public XmlQualifiedName get_QualifiedName();
    public XmlQualifiedName get_RefName();
    public void set_RefName(XmlQualifiedName value);
    public XmlSchemaType get_SchemaType();
    public void set_SchemaType(XmlSchemaType value);
    public XmlQualifiedName get_SchemaTypeName();
    public void set_SchemaTypeName(XmlQualifiedName value);
    public XmlQualifiedName get_SubstitutionGroup();
    public void set_SubstitutionGroup(XmlQualifiedName value);
}
public class System.Xml.Schema.XmlSchemaEnumerationFacet : XmlSchemaFacet {
}
public class System.Xml.Schema.XmlSchemaException : SystemException {
    public int LineNumber { get; }
    public int LinePosition { get; }
    public string Message { get; }
    public XmlSchemaObject SourceSchemaObject { get; }
    public string SourceUri { get; }
    protected XmlSchemaException(SerializationInfo info, StreamingContext context);
    public XmlSchemaException(string message);
    public XmlSchemaException(string message, Exception innerException);
    public XmlSchemaException(string message, Exception innerException, int lineNumber, int linePosition);
    public int get_LineNumber();
    public int get_LinePosition();
    public virtual string get_Message();
    public XmlSchemaObject get_SourceSchemaObject();
    public string get_SourceUri();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public abstract class System.Xml.Schema.XmlSchemaExternal : XmlSchemaObject {
    [XmlAttributeAttribute("id")]
public string Id { get; public set; }
    [XmlIgnoreAttribute]
public XmlSchema Schema { get; public set; }
    [XmlAttributeAttribute("schemaLocation")]
public string SchemaLocation { get; public set; }
    [XmlAnyAttributeAttribute]
public XmlAttribute[] UnhandledAttributes { get; public set; }
    public string get_Id();
    public void set_Id(string value);
    public XmlSchema get_Schema();
    public void set_Schema(XmlSchema value);
    public string get_SchemaLocation();
    public void set_SchemaLocation(string value);
    public XmlAttribute[] get_UnhandledAttributes();
    public void set_UnhandledAttributes(XmlAttribute[] value);
}
public abstract class System.Xml.Schema.XmlSchemaFacet : XmlSchemaAnnotated {
    [DefaultValueAttribute("False")]
[XmlAttributeAttribute("fixed")]
public bool IsFixed { get; public set; }
    [XmlAttributeAttribute("value")]
public string Value { get; public set; }
    public virtual bool get_IsFixed();
    public virtual void set_IsFixed(bool value);
    public string get_Value();
    public void set_Value(string value);
}
public enum System.Xml.Schema.XmlSchemaForm : Enum {
    public int value__;
    [XmlIgnoreAttribute]
public static XmlSchemaForm None;
    [XmlEnumAttribute("qualified")]
public static XmlSchemaForm Qualified;
    [XmlEnumAttribute("unqualified")]
public static XmlSchemaForm Unqualified;
}
public class System.Xml.Schema.XmlSchemaFractionDigitsFacet : XmlSchemaNumericFacet {
}
public class System.Xml.Schema.XmlSchemaGroup : XmlSchemaAnnotated {
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlElementAttribute("all", "System.Xml.Schema.XmlSchemaAll")]
[XmlElementAttribute("choice", "System.Xml.Schema.XmlSchemaChoice")]
[XmlElementAttribute("sequence", "System.Xml.Schema.XmlSchemaSequence")]
public XmlSchemaGroupBase Particle { get; public set; }
    [XmlIgnoreAttribute]
public XmlQualifiedName QualifiedName { get; }
    public string get_Name();
    public void set_Name(string value);
    public XmlSchemaGroupBase get_Particle();
    public void set_Particle(XmlSchemaGroupBase value);
    public XmlQualifiedName get_QualifiedName();
}
public abstract class System.Xml.Schema.XmlSchemaGroupBase : XmlSchemaParticle {
    [XmlIgnoreAttribute]
public XmlSchemaObjectCollection Items { get; }
    public abstract virtual XmlSchemaObjectCollection get_Items();
}
public class System.Xml.Schema.XmlSchemaGroupRef : XmlSchemaParticle {
    [XmlIgnoreAttribute]
public XmlSchemaGroupBase Particle { get; }
    [XmlAttributeAttribute("ref")]
public XmlQualifiedName RefName { get; public set; }
    public XmlSchemaGroupBase get_Particle();
    public XmlQualifiedName get_RefName();
    public void set_RefName(XmlQualifiedName value);
}
public class System.Xml.Schema.XmlSchemaIdentityConstraint : XmlSchemaAnnotated {
    [XmlElementAttribute("field", "System.Xml.Schema.XmlSchemaXPath")]
public XmlSchemaObjectCollection Fields { get; }
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlIgnoreAttribute]
public XmlQualifiedName QualifiedName { get; }
    [XmlElementAttribute("selector", "System.Xml.Schema.XmlSchemaXPath")]
public XmlSchemaXPath Selector { get; public set; }
    public XmlSchemaObjectCollection get_Fields();
    public string get_Name();
    public void set_Name(string value);
    public XmlQualifiedName get_QualifiedName();
    public XmlSchemaXPath get_Selector();
    public void set_Selector(XmlSchemaXPath value);
}
public class System.Xml.Schema.XmlSchemaImport : XmlSchemaExternal {
    [XmlElementAttribute("annotation", "System.Xml.Schema.XmlSchemaAnnotation")]
public XmlSchemaAnnotation Annotation { get; public set; }
    [XmlAttributeAttribute("namespace")]
public string Namespace { get; public set; }
    public XmlSchemaAnnotation get_Annotation();
    public void set_Annotation(XmlSchemaAnnotation value);
    public string get_Namespace();
    public void set_Namespace(string value);
}
public class System.Xml.Schema.XmlSchemaInclude : XmlSchemaExternal {
    [XmlElementAttribute("annotation", "System.Xml.Schema.XmlSchemaAnnotation")]
public XmlSchemaAnnotation Annotation { get; public set; }
    public XmlSchemaAnnotation get_Annotation();
    public void set_Annotation(XmlSchemaAnnotation value);
}
public class System.Xml.Schema.XmlSchemaInference : object {
    public InferenceOption Occurrence { get; public set; }
    public InferenceOption TypeInference { get; public set; }
    public InferenceOption get_Occurrence();
    public void set_Occurrence(InferenceOption value);
    public InferenceOption get_TypeInference();
    public void set_TypeInference(InferenceOption value);
    public XmlSchemaSet InferSchema(XmlReader instanceDocument);
    public XmlSchemaSet InferSchema(XmlReader instanceDocument, XmlSchemaSet schemas);
}
public class System.Xml.Schema.XmlSchemaInferenceException : XmlSchemaException {
    protected XmlSchemaInferenceException(SerializationInfo info, StreamingContext context);
    public XmlSchemaInferenceException(string message);
    public XmlSchemaInferenceException(string message, Exception innerException);
    public XmlSchemaInferenceException(string message, Exception innerException, int lineNumber, int linePosition);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Xml.Schema.XmlSchemaInfo : object {
    public XmlSchemaContentType ContentType { get; public set; }
    public bool IsDefault { get; public set; }
    public bool IsNil { get; public set; }
    public XmlSchemaSimpleType MemberType { get; public set; }
    public XmlSchemaAttribute SchemaAttribute { get; public set; }
    public XmlSchemaElement SchemaElement { get; public set; }
    public XmlSchemaType SchemaType { get; public set; }
    public XmlSchemaValidity Validity { get; public set; }
    public XmlSchemaContentType get_ContentType();
    public void set_ContentType(XmlSchemaContentType value);
    public sealed virtual bool get_IsDefault();
    public void set_IsDefault(bool value);
    public sealed virtual bool get_IsNil();
    public void set_IsNil(bool value);
    public sealed virtual XmlSchemaSimpleType get_MemberType();
    public void set_MemberType(XmlSchemaSimpleType value);
    public sealed virtual XmlSchemaAttribute get_SchemaAttribute();
    public void set_SchemaAttribute(XmlSchemaAttribute value);
    public sealed virtual XmlSchemaElement get_SchemaElement();
    public void set_SchemaElement(XmlSchemaElement value);
    public sealed virtual XmlSchemaType get_SchemaType();
    public void set_SchemaType(XmlSchemaType value);
    public sealed virtual XmlSchemaValidity get_Validity();
    public void set_Validity(XmlSchemaValidity value);
}
public class System.Xml.Schema.XmlSchemaKey : XmlSchemaIdentityConstraint {
}
public class System.Xml.Schema.XmlSchemaKeyref : XmlSchemaIdentityConstraint {
    [XmlAttributeAttribute("refer")]
public XmlQualifiedName Refer { get; public set; }
    public XmlQualifiedName get_Refer();
    public void set_Refer(XmlQualifiedName value);
}
public class System.Xml.Schema.XmlSchemaLengthFacet : XmlSchemaNumericFacet {
}
public class System.Xml.Schema.XmlSchemaMaxExclusiveFacet : XmlSchemaFacet {
}
public class System.Xml.Schema.XmlSchemaMaxInclusiveFacet : XmlSchemaFacet {
}
public class System.Xml.Schema.XmlSchemaMaxLengthFacet : XmlSchemaNumericFacet {
}
public class System.Xml.Schema.XmlSchemaMinExclusiveFacet : XmlSchemaFacet {
}
public class System.Xml.Schema.XmlSchemaMinInclusiveFacet : XmlSchemaFacet {
}
public class System.Xml.Schema.XmlSchemaMinLengthFacet : XmlSchemaNumericFacet {
}
public class System.Xml.Schema.XmlSchemaNotation : XmlSchemaAnnotated {
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlAttributeAttribute("public")]
public string Public { get; public set; }
    [XmlAttributeAttribute("system")]
public string System { get; public set; }
    public string get_Name();
    public void set_Name(string value);
    public string get_Public();
    public void set_Public(string value);
    public string get_System();
    public void set_System(string value);
}
public abstract class System.Xml.Schema.XmlSchemaNumericFacet : XmlSchemaFacet {
}
public abstract class System.Xml.Schema.XmlSchemaObject : object {
    [XmlIgnoreAttribute]
public int LineNumber { get; public set; }
    [XmlIgnoreAttribute]
public int LinePosition { get; public set; }
    [XmlNamespaceDeclarationsAttribute]
public XmlSerializerNamespaces Namespaces { get; public set; }
    [XmlIgnoreAttribute]
public XmlSchemaObject Parent { get; public set; }
    [XmlIgnoreAttribute]
public string SourceUri { get; public set; }
    public int get_LineNumber();
    public void set_LineNumber(int value);
    public int get_LinePosition();
    public void set_LinePosition(int value);
    public XmlSerializerNamespaces get_Namespaces();
    public void set_Namespaces(XmlSerializerNamespaces value);
    public XmlSchemaObject get_Parent();
    public void set_Parent(XmlSchemaObject value);
    public string get_SourceUri();
    public void set_SourceUri(string value);
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Schema.XmlSchemaObjectCollection : CollectionBase {
    public XmlSchemaObject Item { get; public set; }
    public XmlSchemaObjectCollection(XmlSchemaObject parent);
    public virtual XmlSchemaObject get_Item(int index);
    public virtual void set_Item(int index, XmlSchemaObject value);
    public int Add(XmlSchemaObject item);
    public bool Contains(XmlSchemaObject item);
    public void CopyTo(XmlSchemaObject[] array, int index);
    public XmlSchemaObjectEnumerator GetEnumerator();
    public int IndexOf(XmlSchemaObject item);
    public void Insert(int index, XmlSchemaObject item);
    protected virtual void OnClear();
    protected virtual void OnInsert(int index, object item);
    protected virtual void OnRemove(int index, object item);
    protected virtual void OnSet(int index, object oldValue, object newValue);
    public void Remove(XmlSchemaObject item);
}
public class System.Xml.Schema.XmlSchemaObjectEnumerator : object {
    public XmlSchemaObject Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public XmlSchemaObject get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public bool MoveNext();
    public void Reset();
    private sealed virtual override bool System.Collections.IEnumerator.MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Schema.XmlSchemaObjectTable : object {
    public int Count { get; }
    public XmlSchemaObject Item { get; }
    public ICollection Names { get; }
    public ICollection Values { get; }
    public int get_Count();
    public XmlSchemaObject get_Item(XmlQualifiedName name);
    public ICollection get_Names();
    public ICollection get_Values();
    public bool Contains(XmlQualifiedName name);
    public IDictionaryEnumerator GetEnumerator();
}
public abstract class System.Xml.Schema.XmlSchemaParticle : XmlSchemaAnnotated {
    [XmlIgnoreAttribute]
public decimal MaxOccurs { get; public set; }
    [XmlAttributeAttribute("maxOccurs")]
public string MaxOccursString { get; public set; }
    [XmlIgnoreAttribute]
public decimal MinOccurs { get; public set; }
    [XmlAttributeAttribute("minOccurs")]
public string MinOccursString { get; public set; }
    public decimal get_MaxOccurs();
    public void set_MaxOccurs(decimal value);
    public string get_MaxOccursString();
    public void set_MaxOccursString(string value);
    public decimal get_MinOccurs();
    public void set_MinOccurs(decimal value);
    public string get_MinOccursString();
    public void set_MinOccursString(string value);
}
public class System.Xml.Schema.XmlSchemaPatternFacet : XmlSchemaFacet {
}
public class System.Xml.Schema.XmlSchemaRedefine : XmlSchemaExternal {
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable AttributeGroups { get; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable Groups { get; }
    [XmlElementAttribute("annotation", "System.Xml.Schema.XmlSchemaAnnotation")]
[XmlElementAttribute("attributeGroup", "System.Xml.Schema.XmlSchemaAttributeGroup")]
[XmlElementAttribute("complexType", "System.Xml.Schema.XmlSchemaComplexType")]
[XmlElementAttribute("group", "System.Xml.Schema.XmlSchemaGroup")]
[XmlElementAttribute("simpleType", "System.Xml.Schema.XmlSchemaSimpleType")]
public XmlSchemaObjectCollection Items { get; }
    [XmlIgnoreAttribute]
public XmlSchemaObjectTable SchemaTypes { get; }
    public XmlSchemaObjectTable get_AttributeGroups();
    public XmlSchemaObjectTable get_Groups();
    public XmlSchemaObjectCollection get_Items();
    public XmlSchemaObjectTable get_SchemaTypes();
}
public class System.Xml.Schema.XmlSchemaSequence : XmlSchemaGroupBase {
    [XmlElementAttribute("any", "System.Xml.Schema.XmlSchemaAny")]
[XmlElementAttribute("choice", "System.Xml.Schema.XmlSchemaChoice")]
[XmlElementAttribute("element", "System.Xml.Schema.XmlSchemaElement")]
[XmlElementAttribute("group", "System.Xml.Schema.XmlSchemaGroupRef")]
[XmlElementAttribute("sequence", "System.Xml.Schema.XmlSchemaSequence")]
public XmlSchemaObjectCollection Items { get; }
    public virtual XmlSchemaObjectCollection get_Items();
}
public class System.Xml.Schema.XmlSchemaSet : object {
    public XmlSchemaCompilationSettings CompilationSettings { get; public set; }
    public int Count { get; }
    public XmlSchemaObjectTable GlobalAttributes { get; }
    public XmlSchemaObjectTable GlobalElements { get; }
    public XmlSchemaObjectTable GlobalTypes { get; }
    public bool IsCompiled { get; }
    public XmlNameTable NameTable { get; }
    unknown XmlResolver XmlResolver {public set; }
    public XmlSchemaSet(XmlNameTable nameTable);
    public XmlSchemaCompilationSettings get_CompilationSettings();
    public void set_CompilationSettings(XmlSchemaCompilationSettings value);
    public int get_Count();
    public XmlSchemaObjectTable get_GlobalAttributes();
    public XmlSchemaObjectTable get_GlobalElements();
    public XmlSchemaObjectTable get_GlobalTypes();
    public bool get_IsCompiled();
    public XmlNameTable get_NameTable();
    public void set_XmlResolver(XmlResolver value);
    public void add_ValidationEventHandler(ValidationEventHandler value);
    public void remove_ValidationEventHandler(ValidationEventHandler value);
    public XmlSchema Add(string targetNamespace, string schemaUri);
    public XmlSchema Add(string targetNamespace, XmlReader schemaDocument);
    public XmlSchema Add(XmlSchema schema);
    public void Add(XmlSchemaSet schemas);
    public void Compile();
    public bool Contains(string targetNamespace);
    public bool Contains(XmlSchema schema);
    public void CopyTo(XmlSchema[] schemas, int index);
    public XmlSchema Remove(XmlSchema schema);
    public bool RemoveRecursive(XmlSchema schemaToRemove);
    public XmlSchema Reprocess(XmlSchema schema);
    public ICollection Schemas();
    public ICollection Schemas(string targetNamespace);
}
public class System.Xml.Schema.XmlSchemaSimpleContent : XmlSchemaContentModel {
    [XmlElementAttribute("extension", "System.Xml.Schema.XmlSchemaSimpleContentExtension")]
[XmlElementAttribute("restriction", "System.Xml.Schema.XmlSchemaSimpleContentRestriction")]
public XmlSchemaContent Content { get; public set; }
    public virtual XmlSchemaContent get_Content();
    public virtual void set_Content(XmlSchemaContent value);
}
public class System.Xml.Schema.XmlSchemaSimpleContentExtension : XmlSchemaContent {
    [XmlElementAttribute("anyAttribute")]
public XmlSchemaAnyAttribute AnyAttribute { get; public set; }
    [XmlElementAttribute("attribute", "System.Xml.Schema.XmlSchemaAttribute")]
[XmlElementAttribute("attributeGroup", "System.Xml.Schema.XmlSchemaAttributeGroupRef")]
public XmlSchemaObjectCollection Attributes { get; }
    [XmlAttributeAttribute("base")]
public XmlQualifiedName BaseTypeName { get; public set; }
    public XmlSchemaAnyAttribute get_AnyAttribute();
    public void set_AnyAttribute(XmlSchemaAnyAttribute value);
    public XmlSchemaObjectCollection get_Attributes();
    public XmlQualifiedName get_BaseTypeName();
    public void set_BaseTypeName(XmlQualifiedName value);
}
public class System.Xml.Schema.XmlSchemaSimpleContentRestriction : XmlSchemaContent {
    [XmlElementAttribute("anyAttribute")]
public XmlSchemaAnyAttribute AnyAttribute { get; public set; }
    [XmlElementAttribute("attribute", "System.Xml.Schema.XmlSchemaAttribute")]
[XmlElementAttribute("attributeGroup", "System.Xml.Schema.XmlSchemaAttributeGroupRef")]
public XmlSchemaObjectCollection Attributes { get; }
    [XmlElementAttribute("simpleType", "System.Xml.Schema.XmlSchemaSimpleType")]
public XmlSchemaSimpleType BaseType { get; public set; }
    [XmlAttributeAttribute("base")]
public XmlQualifiedName BaseTypeName { get; public set; }
    [XmlElementAttribute("enumeration", "System.Xml.Schema.XmlSchemaEnumerationFacet")]
[XmlElementAttribute("fractionDigits", "System.Xml.Schema.XmlSchemaFractionDigitsFacet")]
[XmlElementAttribute("length", "System.Xml.Schema.XmlSchemaLengthFacet")]
[XmlElementAttribute("maxExclusive", "System.Xml.Schema.XmlSchemaMaxExclusiveFacet")]
[XmlElementAttribute("maxInclusive", "System.Xml.Schema.XmlSchemaMaxInclusiveFacet")]
[XmlElementAttribute("maxLength", "System.Xml.Schema.XmlSchemaMaxLengthFacet")]
[XmlElementAttribute("minExclusive", "System.Xml.Schema.XmlSchemaMinExclusiveFacet")]
[XmlElementAttribute("minInclusive", "System.Xml.Schema.XmlSchemaMinInclusiveFacet")]
[XmlElementAttribute("minLength", "System.Xml.Schema.XmlSchemaMinLengthFacet")]
[XmlElementAttribute("pattern", "System.Xml.Schema.XmlSchemaPatternFacet")]
[XmlElementAttribute("totalDigits", "System.Xml.Schema.XmlSchemaTotalDigitsFacet")]
[XmlElementAttribute("whiteSpace", "System.Xml.Schema.XmlSchemaWhiteSpaceFacet")]
public XmlSchemaObjectCollection Facets { get; }
    public XmlSchemaAnyAttribute get_AnyAttribute();
    public void set_AnyAttribute(XmlSchemaAnyAttribute value);
    public XmlSchemaObjectCollection get_Attributes();
    public XmlSchemaSimpleType get_BaseType();
    public void set_BaseType(XmlSchemaSimpleType value);
    public XmlQualifiedName get_BaseTypeName();
    public void set_BaseTypeName(XmlQualifiedName value);
    public XmlSchemaObjectCollection get_Facets();
}
public class System.Xml.Schema.XmlSchemaSimpleType : XmlSchemaType {
    [XmlElementAttribute("list", "System.Xml.Schema.XmlSchemaSimpleTypeList")]
[XmlElementAttribute("restriction", "System.Xml.Schema.XmlSchemaSimpleTypeRestriction")]
[XmlElementAttribute("union", "System.Xml.Schema.XmlSchemaSimpleTypeUnion")]
public XmlSchemaSimpleTypeContent Content { get; public set; }
    public XmlSchemaSimpleTypeContent get_Content();
    public void set_Content(XmlSchemaSimpleTypeContent value);
}
public abstract class System.Xml.Schema.XmlSchemaSimpleTypeContent : XmlSchemaAnnotated {
}
public class System.Xml.Schema.XmlSchemaSimpleTypeList : XmlSchemaSimpleTypeContent {
    [XmlIgnoreAttribute]
public XmlSchemaSimpleType BaseItemType { get; public set; }
    [XmlElementAttribute("simpleType", "System.Xml.Schema.XmlSchemaSimpleType")]
public XmlSchemaSimpleType ItemType { get; public set; }
    [XmlAttributeAttribute("itemType")]
public XmlQualifiedName ItemTypeName { get; public set; }
    public XmlSchemaSimpleType get_BaseItemType();
    public void set_BaseItemType(XmlSchemaSimpleType value);
    public XmlSchemaSimpleType get_ItemType();
    public void set_ItemType(XmlSchemaSimpleType value);
    public XmlQualifiedName get_ItemTypeName();
    public void set_ItemTypeName(XmlQualifiedName value);
}
public class System.Xml.Schema.XmlSchemaSimpleTypeRestriction : XmlSchemaSimpleTypeContent {
    [XmlElementAttribute("simpleType", "System.Xml.Schema.XmlSchemaSimpleType")]
public XmlSchemaSimpleType BaseType { get; public set; }
    [XmlAttributeAttribute("base")]
public XmlQualifiedName BaseTypeName { get; public set; }
    [XmlElementAttribute("enumeration", "System.Xml.Schema.XmlSchemaEnumerationFacet")]
[XmlElementAttribute("fractionDigits", "System.Xml.Schema.XmlSchemaFractionDigitsFacet")]
[XmlElementAttribute("length", "System.Xml.Schema.XmlSchemaLengthFacet")]
[XmlElementAttribute("maxExclusive", "System.Xml.Schema.XmlSchemaMaxExclusiveFacet")]
[XmlElementAttribute("maxInclusive", "System.Xml.Schema.XmlSchemaMaxInclusiveFacet")]
[XmlElementAttribute("maxLength", "System.Xml.Schema.XmlSchemaMaxLengthFacet")]
[XmlElementAttribute("minExclusive", "System.Xml.Schema.XmlSchemaMinExclusiveFacet")]
[XmlElementAttribute("minInclusive", "System.Xml.Schema.XmlSchemaMinInclusiveFacet")]
[XmlElementAttribute("minLength", "System.Xml.Schema.XmlSchemaMinLengthFacet")]
[XmlElementAttribute("pattern", "System.Xml.Schema.XmlSchemaPatternFacet")]
[XmlElementAttribute("totalDigits", "System.Xml.Schema.XmlSchemaTotalDigitsFacet")]
[XmlElementAttribute("whiteSpace", "System.Xml.Schema.XmlSchemaWhiteSpaceFacet")]
public XmlSchemaObjectCollection Facets { get; }
    public XmlSchemaSimpleType get_BaseType();
    public void set_BaseType(XmlSchemaSimpleType value);
    public XmlQualifiedName get_BaseTypeName();
    public void set_BaseTypeName(XmlQualifiedName value);
    public XmlSchemaObjectCollection get_Facets();
}
public class System.Xml.Schema.XmlSchemaSimpleTypeUnion : XmlSchemaSimpleTypeContent {
    [XmlIgnoreAttribute]
public XmlSchemaSimpleType[] BaseMemberTypes { get; }
    [XmlElementAttribute("simpleType", "System.Xml.Schema.XmlSchemaSimpleType")]
public XmlSchemaObjectCollection BaseTypes { get; }
    [XmlAttributeAttribute("memberTypes")]
public XmlQualifiedName[] MemberTypes { get; public set; }
    public XmlSchemaSimpleType[] get_BaseMemberTypes();
    public XmlSchemaObjectCollection get_BaseTypes();
    public XmlQualifiedName[] get_MemberTypes();
    public void set_MemberTypes(XmlQualifiedName[] value);
}
public class System.Xml.Schema.XmlSchemaTotalDigitsFacet : XmlSchemaNumericFacet {
}
public class System.Xml.Schema.XmlSchemaType : XmlSchemaAnnotated {
    [ObsoleteAttribute("This property has been deprecated. Please use BaseXmlSchemaType property that returns a strongly typed base schema type. http://go.microsoft.com/fwlink/?linkid=14202")]
[XmlIgnoreAttribute]
public object BaseSchemaType { get; }
    [XmlIgnoreAttribute]
public XmlSchemaType BaseXmlSchemaType { get; }
    [XmlIgnoreAttribute]
public XmlSchemaDatatype Datatype { get; }
    [XmlIgnoreAttribute]
public XmlSchemaDerivationMethod DerivedBy { get; }
    [DefaultValueAttribute("Mono.Cecil.CustomAttributeArgument")]
[XmlAttributeAttribute("final")]
public XmlSchemaDerivationMethod Final { get; public set; }
    [XmlIgnoreAttribute]
public XmlSchemaDerivationMethod FinalResolved { get; }
    [XmlIgnoreAttribute]
public bool IsMixed { get; public set; }
    [XmlAttributeAttribute("name")]
public string Name { get; public set; }
    [XmlIgnoreAttribute]
public XmlQualifiedName QualifiedName { get; }
    [XmlIgnoreAttribute]
public XmlTypeCode TypeCode { get; }
    public object get_BaseSchemaType();
    public XmlSchemaType get_BaseXmlSchemaType();
    public XmlSchemaDatatype get_Datatype();
    public XmlSchemaDerivationMethod get_DerivedBy();
    public XmlSchemaDerivationMethod get_Final();
    public void set_Final(XmlSchemaDerivationMethod value);
    public XmlSchemaDerivationMethod get_FinalResolved();
    public virtual bool get_IsMixed();
    public virtual void set_IsMixed(bool value);
    public string get_Name();
    public void set_Name(string value);
    public XmlQualifiedName get_QualifiedName();
    public XmlTypeCode get_TypeCode();
    public static XmlSchemaComplexType GetBuiltInComplexType(XmlTypeCode typeCode);
    public static XmlSchemaComplexType GetBuiltInComplexType(XmlQualifiedName qualifiedName);
    public static XmlSchemaSimpleType GetBuiltInSimpleType(XmlTypeCode typeCode);
    public static XmlSchemaSimpleType GetBuiltInSimpleType(XmlQualifiedName qualifiedName);
    public static bool IsDerivedFrom(XmlSchemaType derivedType, XmlSchemaType baseType, XmlSchemaDerivationMethod except);
}
public class System.Xml.Schema.XmlSchemaUnique : XmlSchemaIdentityConstraint {
}
public enum System.Xml.Schema.XmlSchemaUse : Enum {
    public int value__;
    [XmlIgnoreAttribute]
public static XmlSchemaUse None;
    [XmlEnumAttribute("optional")]
public static XmlSchemaUse Optional;
    [XmlEnumAttribute("prohibited")]
public static XmlSchemaUse Prohibited;
    [XmlEnumAttribute("required")]
public static XmlSchemaUse Required;
}
public class System.Xml.Schema.XmlSchemaValidationException : XmlSchemaException {
    public object SourceObject { get; }
    protected XmlSchemaValidationException(SerializationInfo info, StreamingContext context);
    public XmlSchemaValidationException(string message);
    public XmlSchemaValidationException(string message, Exception innerException);
    public XmlSchemaValidationException(string message, Exception innerException, int lineNumber, int linePosition);
    public object get_SourceObject();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    protected internal void SetSourceObject(object sourceObject);
}
[FlagsAttribute]
public enum System.Xml.Schema.XmlSchemaValidationFlags : Enum {
    public int value__;
    public static XmlSchemaValidationFlags AllowXmlAttributes;
    public static XmlSchemaValidationFlags None;
    public static XmlSchemaValidationFlags ProcessIdentityConstraints;
    public static XmlSchemaValidationFlags ProcessInlineSchema;
    public static XmlSchemaValidationFlags ProcessSchemaLocation;
    public static XmlSchemaValidationFlags ReportValidationWarnings;
}
public class System.Xml.Schema.XmlSchemaValidator : object {
    public IXmlLineInfo LineInfoProvider { get; public set; }
    public Uri SourceUri { get; public set; }
    public object ValidationEventSender { get; public set; }
    unknown XmlResolver XmlResolver {public set; }
    public XmlSchemaValidator(XmlNameTable nameTable, XmlSchemaSet schemas, IXmlNamespaceResolver namespaceResolver, XmlSchemaValidationFlags validationFlags);
    public IXmlLineInfo get_LineInfoProvider();
    public void set_LineInfoProvider(IXmlLineInfo value);
    public Uri get_SourceUri();
    public void set_SourceUri(Uri value);
    public object get_ValidationEventSender();
    public void set_ValidationEventSender(object value);
    public void set_XmlResolver(XmlResolver value);
    public void add_ValidationEventHandler(ValidationEventHandler value);
    public void remove_ValidationEventHandler(ValidationEventHandler value);
    public void AddSchema(XmlSchema schema);
    public void EndValidation();
    public XmlSchemaAttribute[] GetExpectedAttributes();
    public XmlSchemaParticle[] GetExpectedParticles();
    public void GetUnspecifiedDefaultAttributes(ArrayList defaultAttributes);
    public void Initialize();
    public void Initialize(XmlSchemaObject partialValidationType);
    public void SkipToEndElement(XmlSchemaInfo schemaInfo);
    public object ValidateAttribute(string localName, string namespaceUri, string attributeValue, XmlSchemaInfo schemaInfo);
    public object ValidateAttribute(string localName, string namespaceUri, XmlValueGetter attributeValue, XmlSchemaInfo schemaInfo);
    public void ValidateElement(string localName, string namespaceUri, XmlSchemaInfo schemaInfo);
    public void ValidateElement(string localName, string namespaceUri, XmlSchemaInfo schemaInfo, string xsiType, string xsiNil, string xsiSchemaLocation, string xsiNoNamespaceSchemaLocation);
    public object ValidateEndElement(XmlSchemaInfo schemaInfo);
    public object ValidateEndElement(XmlSchemaInfo schemaInfo, object typedValue);
    public void ValidateEndOfAttributes(XmlSchemaInfo schemaInfo);
    public void ValidateText(string elementValue);
    public void ValidateText(XmlValueGetter elementValue);
    public void ValidateWhitespace(string elementValue);
    public void ValidateWhitespace(XmlValueGetter elementValue);
}
public enum System.Xml.Schema.XmlSchemaValidity : Enum {
    public int value__;
    public static XmlSchemaValidity Invalid;
    public static XmlSchemaValidity NotKnown;
    public static XmlSchemaValidity Valid;
}
public class System.Xml.Schema.XmlSchemaWhiteSpaceFacet : XmlSchemaFacet {
}
public class System.Xml.Schema.XmlSchemaXPath : XmlSchemaAnnotated {
    [DefaultValueAttribute("")]
[XmlAttributeAttribute("xpath")]
public string XPath { get; public set; }
    public string get_XPath();
    public void set_XPath(string value);
}
public enum System.Xml.Schema.XmlSeverityType : Enum {
    public int value__;
    public static XmlSeverityType Error;
    public static XmlSeverityType Warning;
}
public enum System.Xml.Schema.XmlTypeCode : Enum {
    public int value__;
    public static XmlTypeCode AnyAtomicType;
    public static XmlTypeCode AnyUri;
    public static XmlTypeCode Attribute;
    public static XmlTypeCode Base64Binary;
    public static XmlTypeCode Boolean;
    public static XmlTypeCode Byte;
    public static XmlTypeCode Comment;
    public static XmlTypeCode Date;
    public static XmlTypeCode DateTime;
    public static XmlTypeCode DayTimeDuration;
    public static XmlTypeCode Decimal;
    public static XmlTypeCode Document;
    public static XmlTypeCode Double;
    public static XmlTypeCode Duration;
    public static XmlTypeCode Element;
    public static XmlTypeCode Entity;
    public static XmlTypeCode Float;
    public static XmlTypeCode GDay;
    public static XmlTypeCode GMonth;
    public static XmlTypeCode GMonthDay;
    public static XmlTypeCode GYear;
    public static XmlTypeCode GYearMonth;
    public static XmlTypeCode HexBinary;
    public static XmlTypeCode Id;
    public static XmlTypeCode Idref;
    public static XmlTypeCode Int;
    public static XmlTypeCode Integer;
    public static XmlTypeCode Item;
    public static XmlTypeCode Language;
    public static XmlTypeCode Long;
    public static XmlTypeCode Name;
    public static XmlTypeCode Namespace;
    public static XmlTypeCode NCName;
    public static XmlTypeCode NegativeInteger;
    public static XmlTypeCode NmToken;
    public static XmlTypeCode Node;
    public static XmlTypeCode None;
    public static XmlTypeCode NonNegativeInteger;
    public static XmlTypeCode NonPositiveInteger;
    public static XmlTypeCode NormalizedString;
    public static XmlTypeCode Notation;
    public static XmlTypeCode PositiveInteger;
    public static XmlTypeCode ProcessingInstruction;
    public static XmlTypeCode QName;
    public static XmlTypeCode Short;
    public static XmlTypeCode String;
    public static XmlTypeCode Text;
    public static XmlTypeCode Time;
    public static XmlTypeCode Token;
    public static XmlTypeCode UnsignedByte;
    public static XmlTypeCode UnsignedInt;
    public static XmlTypeCode UnsignedLong;
    public static XmlTypeCode UnsignedShort;
    public static XmlTypeCode UntypedAtomic;
    public static XmlTypeCode YearMonthDuration;
}
public class System.Xml.Schema.XmlValueGetter : MulticastDelegate {
    public XmlValueGetter(object object, IntPtr method);
    public virtual object Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public interface System.Xml.Serialization.IXmlSerializable {
    [EditorBrowsableAttribute("1")]
public abstract virtual XmlSchema GetSchema();
    public abstract virtual void ReadXml(XmlReader reader);
    public abstract virtual void WriteXml(XmlWriter writer);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlAnyAttributeAttribute : Attribute {
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlAnyElementAttribute : Attribute {
    public string Name { get; public set; }
    public string Namespace { get; public set; }
    public int Order { get; public set; }
    public XmlAnyElementAttribute(string name);
    public XmlAnyElementAttribute(string name, string ns);
    public string get_Name();
    public void set_Name(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public int get_Order();
    public void set_Order(int value);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlAttributeAttribute : Attribute {
    public string AttributeName { get; public set; }
    public string DataType { get; public set; }
    public XmlSchemaForm Form { get; public set; }
    public string Namespace { get; public set; }
    public Type Type { get; public set; }
    public XmlAttributeAttribute(string attributeName);
    public XmlAttributeAttribute(string attributeName, Type type);
    public XmlAttributeAttribute(Type type);
    public string get_AttributeName();
    public void set_AttributeName(string value);
    public string get_DataType();
    public void set_DataType(string value);
    public XmlSchemaForm get_Form();
    public void set_Form(XmlSchemaForm value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public Type get_Type();
    public void set_Type(Type value);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlElementAttribute : Attribute {
    public string DataType { get; public set; }
    public string ElementName { get; public set; }
    public XmlSchemaForm Form { get; public set; }
    public bool IsNullable { get; public set; }
    public string Namespace { get; public set; }
    public int Order { get; public set; }
    public Type Type { get; public set; }
    public XmlElementAttribute(string elementName);
    public XmlElementAttribute(string elementName, Type type);
    public XmlElementAttribute(Type type);
    public string get_DataType();
    public void set_DataType(string value);
    public string get_ElementName();
    public void set_ElementName(string value);
    public XmlSchemaForm get_Form();
    public void set_Form(XmlSchemaForm value);
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public int get_Order();
    public void set_Order(int value);
    public Type get_Type();
    public void set_Type(Type value);
}
[AttributeUsageAttribute("256")]
public class System.Xml.Serialization.XmlEnumAttribute : Attribute {
    public string Name { get; public set; }
    public XmlEnumAttribute(string name);
    public string get_Name();
    public void set_Name(string value);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlIgnoreAttribute : Attribute {
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlNamespaceDeclarationsAttribute : Attribute {
}
[AttributeUsageAttribute("9244")]
public class System.Xml.Serialization.XmlRootAttribute : Attribute {
    public string DataType { get; public set; }
    public string ElementName { get; public set; }
    public bool IsNullable { get; public set; }
    public string Namespace { get; public set; }
    public XmlRootAttribute(string elementName);
    public string get_DataType();
    public void set_DataType(string value);
    public string get_ElementName();
    public void set_ElementName(string value);
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
    public string get_Namespace();
    public void set_Namespace(string value);
}
[AttributeUsageAttribute("1036")]
public class System.Xml.Serialization.XmlSchemaProviderAttribute : Attribute {
    public bool IsAny { get; public set; }
    public string MethodName { get; }
    public XmlSchemaProviderAttribute(string methodName);
    public bool get_IsAny();
    public void set_IsAny(bool value);
    public string get_MethodName();
}
public class System.Xml.Serialization.XmlSerializerNamespaces : object {
    public int Count { get; }
    public XmlSerializerNamespaces(XmlSerializerNamespaces namespaces);
    public XmlSerializerNamespaces(XmlQualifiedName[] namespaces);
    public int get_Count();
    public void Add(string prefix, string ns);
    public XmlQualifiedName[] ToArray();
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlTextAttribute : Attribute {
    public string DataType { get; public set; }
    public Type Type { get; public set; }
    public XmlTextAttribute(Type type);
    public string get_DataType();
    public void set_DataType(string value);
    public Type get_Type();
    public void set_Type(Type value);
}
public enum System.Xml.ValidationType : Enum {
    public int value__;
    [ObsoleteAttribute("Validation type should be specified as DTD or Schema.")]
public static ValidationType Auto;
    public static ValidationType DTD;
    public static ValidationType None;
    public static ValidationType Schema;
    [ObsoleteAttribute("XDR Validation through XmlValidatingReader is obsoleted")]
public static ValidationType XDR;
}
public enum System.Xml.WhitespaceHandling : Enum {
    public int value__;
    public static WhitespaceHandling All;
    public static WhitespaceHandling None;
    public static WhitespaceHandling Significant;
}
public enum System.Xml.WriteState : Enum {
    public int value__;
    public static WriteState Attribute;
    public static WriteState Closed;
    public static WriteState Content;
    public static WriteState Element;
    public static WriteState Error;
    public static WriteState Prolog;
    public static WriteState Start;
}
public class System.Xml.XmlAttribute : XmlNode {
    public string BaseURI { get; }
    unknown string InnerText {public set; }
    unknown string InnerXml {public set; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceURI { get; }
    public XmlNodeType NodeType { get; }
    public XmlDocument OwnerDocument { get; }
    public XmlElement OwnerElement { get; }
    public XmlNode ParentNode { get; }
    public string Prefix { get; public set; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public bool Specified { get; }
    public string Value { get; public set; }
    protected internal XmlAttribute(string prefix, string localName, string namespaceURI, XmlDocument doc);
    public virtual string get_BaseURI();
    public virtual void set_InnerText(string value);
    public virtual void set_InnerXml(string value);
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual string get_NamespaceURI();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlDocument get_OwnerDocument();
    public virtual XmlElement get_OwnerElement();
    public virtual XmlNode get_ParentNode();
    public virtual string get_Prefix();
    public virtual void set_Prefix(string value);
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual bool get_Specified();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual XmlNode AppendChild(XmlNode newChild);
    public virtual XmlNode CloneNode(bool deep);
    public virtual XmlNode InsertAfter(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode InsertBefore(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode PrependChild(XmlNode newChild);
    public virtual XmlNode RemoveChild(XmlNode oldChild);
    public virtual XmlNode ReplaceChild(XmlNode newChild, XmlNode oldChild);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
}
[DefaultMemberAttribute("ItemOf")]
public class System.Xml.XmlAttributeCollection : XmlNamedNodeMap {
    public XmlAttribute ItemOf { get; }
    public XmlAttribute ItemOf { get; }
    public XmlAttribute ItemOf { get; }
    private int System.Collections.ICollection.Count { get; }
    private bool System.Collections.ICollection.IsSynchronized { get; }
    private object System.Collections.ICollection.SyncRoot { get; }
    public XmlAttribute get_ItemOf(int i);
    public XmlAttribute get_ItemOf(string name);
    public XmlAttribute get_ItemOf(string localName, string namespaceURI);
    private sealed virtual override int System.Collections.ICollection.get_Count();
    private sealed virtual override bool System.Collections.ICollection.get_IsSynchronized();
    private sealed virtual override object System.Collections.ICollection.get_SyncRoot();
    public XmlAttribute Append(XmlAttribute node);
    public void CopyTo(XmlAttribute[] array, int index);
    public XmlAttribute InsertAfter(XmlAttribute newNode, XmlAttribute refNode);
    public XmlAttribute InsertBefore(XmlAttribute newNode, XmlAttribute refNode);
    public XmlAttribute Prepend(XmlAttribute node);
    public XmlAttribute Remove(XmlAttribute node);
    public void RemoveAll();
    public XmlAttribute RemoveAt(int i);
    public virtual XmlNode SetNamedItem(XmlNode node);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
}
public class System.Xml.XmlCDataSection : XmlCharacterData {
    public string LocalName { get; }
    public string Name { get; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public XmlNode PreviousText { get; }
    protected internal XmlCDataSection(string data, XmlDocument doc);
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlNode get_PreviousText();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
}
public abstract class System.Xml.XmlCharacterData : XmlLinkedNode {
    public string Data { get; public set; }
    public string InnerText { get; public set; }
    public int Length { get; }
    public string Value { get; public set; }
    protected internal XmlCharacterData(string data, XmlDocument doc);
    public virtual string get_Data();
    public virtual void set_Data(string value);
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public virtual int get_Length();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual void AppendData(string strData);
    public virtual void DeleteData(int offset, int count);
    public virtual void InsertData(int offset, string strData);
    public virtual void ReplaceData(int offset, int count, string strData);
    public virtual string Substring(int offset, int count);
}
public class System.Xml.XmlComment : XmlCharacterData {
    public string LocalName { get; }
    public string Name { get; }
    public XmlNodeType NodeType { get; }
    protected internal XmlComment(string comment, XmlDocument doc);
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
}
public class System.Xml.XmlConvert : object {
    public static string DecodeName(string name);
    public static string EncodeLocalName(string name);
    public static string EncodeName(string name);
    public static string EncodeNmToken(string name);
    public static bool IsNCNameChar(char ch);
    public static bool IsPublicIdChar(char ch);
    public static bool IsStartNCNameChar(char ch);
    public static bool IsWhitespaceChar(char ch);
    public static bool IsXmlChar(char ch);
    public static bool IsXmlSurrogatePair(char lowChar, char highChar);
    public static bool ToBoolean(string s);
    public static byte ToByte(string s);
    public static char ToChar(string s);
    [ObsoleteAttribute("Use XmlConvert.ToDateTime() that takes in XmlDateTimeSerializationMode")]
public static DateTime ToDateTime(string s);
    public static DateTime ToDateTime(string s, string format);
    public static DateTime ToDateTime(string s, String[] formats);
    public static DateTime ToDateTime(string s, XmlDateTimeSerializationMode dateTimeOption);
    public static DateTimeOffset ToDateTimeOffset(string s);
    public static DateTimeOffset ToDateTimeOffset(string s, string format);
    public static DateTimeOffset ToDateTimeOffset(string s, String[] formats);
    public static decimal ToDecimal(string s);
    public static double ToDouble(string s);
    public static Guid ToGuid(string s);
    public static short ToInt16(string s);
    public static int ToInt32(string s);
    public static long ToInt64(string s);
    [CLSCompliantAttribute("False")]
public static sbyte ToSByte(string s);
    public static float ToSingle(string s);
    public static string ToString(bool value);
    public static string ToString(byte value);
    public static string ToString(char value);
    [ObsoleteAttribute("Use XmlConvert.ToString() that takes in XmlDateTimeSerializationMode")]
public static string ToString(DateTime value);
    public static string ToString(DateTime value, string format);
    public static string ToString(DateTime value, XmlDateTimeSerializationMode dateTimeOption);
    public static string ToString(DateTimeOffset value);
    public static string ToString(DateTimeOffset value, string format);
    public static string ToString(decimal value);
    public static string ToString(double value);
    public static string ToString(Guid value);
    public static string ToString(short value);
    public static string ToString(int value);
    public static string ToString(long value);
    [CLSCompliantAttribute("False")]
public static string ToString(sbyte value);
    public static string ToString(float value);
    public static string ToString(TimeSpan value);
    [CLSCompliantAttribute("False")]
public static string ToString(ushort value);
    [CLSCompliantAttribute("False")]
public static string ToString(UInt32 value);
    [CLSCompliantAttribute("False")]
public static string ToString(ulong value);
    public static TimeSpan ToTimeSpan(string s);
    [CLSCompliantAttribute("False")]
public static ushort ToUInt16(string s);
    [CLSCompliantAttribute("False")]
public static UInt32 ToUInt32(string s);
    [CLSCompliantAttribute("False")]
public static ulong ToUInt64(string s);
    public static string VerifyName(string name);
    public static string VerifyNCName(string name);
    public static string VerifyNMTOKEN(string name);
    public static string VerifyPublicId(string publicId);
    public static string VerifyTOKEN(string token);
    public static string VerifyWhitespace(string content);
    public static string VerifyXmlChars(string content);
}
public enum System.Xml.XmlDateTimeSerializationMode : Enum {
    public int value__;
    public static XmlDateTimeSerializationMode Local;
    public static XmlDateTimeSerializationMode RoundtripKind;
    public static XmlDateTimeSerializationMode Unspecified;
    public static XmlDateTimeSerializationMode Utc;
}
public class System.Xml.XmlDeclaration : XmlLinkedNode {
    public string Encoding { get; public set; }
    public string InnerText { get; public set; }
    public string LocalName { get; }
    public string Name { get; }
    public XmlNodeType NodeType { get; }
    public string Standalone { get; public set; }
    public string Value { get; public set; }
    public string Version { get; }
    protected internal XmlDeclaration(string version, string encoding, string standalone, XmlDocument doc);
    public string get_Encoding();
    public void set_Encoding(string value);
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual XmlNodeType get_NodeType();
    public string get_Standalone();
    public void set_Standalone(string value);
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public string get_Version();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
}
public class System.Xml.XmlDocument : XmlNode {
    public string BaseURI { get; }
    public XmlElement DocumentElement { get; }
    public XmlDocumentType DocumentType { get; }
    public XmlImplementation Implementation { get; }
    unknown string InnerText {public set; }
    public string InnerXml { get; public set; }
    public bool IsReadOnly { get; }
    public string LocalName { get; }
    public string Name { get; }
    public XmlNameTable NameTable { get; }
    public XmlNodeType NodeType { get; }
    public XmlDocument OwnerDocument { get; }
    public XmlNode ParentNode { get; }
    public bool PreserveWhitespace { get; public set; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public XmlSchemaSet Schemas { get; public set; }
    unknown XmlResolver XmlResolver {public set; }
    protected internal XmlDocument(XmlImplementation imp);
    public XmlDocument(XmlNameTable nt);
    public virtual string get_BaseURI();
    public XmlElement get_DocumentElement();
    public virtual XmlDocumentType get_DocumentType();
    public XmlImplementation get_Implementation();
    public virtual void set_InnerText(string value);
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual bool get_IsReadOnly();
    public virtual string get_LocalName();
    public virtual string get_Name();
    public XmlNameTable get_NameTable();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlDocument get_OwnerDocument();
    public virtual XmlNode get_ParentNode();
    public bool get_PreserveWhitespace();
    public void set_PreserveWhitespace(bool value);
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public XmlSchemaSet get_Schemas();
    public void set_Schemas(XmlSchemaSet value);
    public virtual void set_XmlResolver(XmlResolver value);
    public void add_NodeChanged(XmlNodeChangedEventHandler value);
    public void remove_NodeChanged(XmlNodeChangedEventHandler value);
    public void add_NodeChanging(XmlNodeChangedEventHandler value);
    public void remove_NodeChanging(XmlNodeChangedEventHandler value);
    public void add_NodeInserted(XmlNodeChangedEventHandler value);
    public void remove_NodeInserted(XmlNodeChangedEventHandler value);
    public void add_NodeInserting(XmlNodeChangedEventHandler value);
    public void remove_NodeInserting(XmlNodeChangedEventHandler value);
    public void add_NodeRemoved(XmlNodeChangedEventHandler value);
    public void remove_NodeRemoved(XmlNodeChangedEventHandler value);
    public void add_NodeRemoving(XmlNodeChangedEventHandler value);
    public void remove_NodeRemoving(XmlNodeChangedEventHandler value);
    public virtual XmlNode CloneNode(bool deep);
    public XmlAttribute CreateAttribute(string name);
    public XmlAttribute CreateAttribute(string qualifiedName, string namespaceURI);
    public virtual XmlAttribute CreateAttribute(string prefix, string localName, string namespaceURI);
    public virtual XmlCDataSection CreateCDataSection(string data);
    public virtual XmlComment CreateComment(string data);
    protected internal virtual XmlAttribute CreateDefaultAttribute(string prefix, string localName, string namespaceURI);
    public virtual XmlDocumentFragment CreateDocumentFragment();
    public virtual XmlDocumentType CreateDocumentType(string name, string publicId, string systemId, string internalSubset);
    public XmlElement CreateElement(string name);
    public XmlElement CreateElement(string qualifiedName, string namespaceURI);
    public virtual XmlElement CreateElement(string prefix, string localName, string namespaceURI);
    public virtual XmlEntityReference CreateEntityReference(string name);
    public virtual XPathNavigator CreateNavigator();
    protected internal virtual XPathNavigator CreateNavigator(XmlNode node);
    public virtual XmlNode CreateNode(string nodeTypeString, string name, string namespaceURI);
    public virtual XmlNode CreateNode(XmlNodeType type, string name, string namespaceURI);
    public virtual XmlNode CreateNode(XmlNodeType type, string prefix, string name, string namespaceURI);
    public virtual XmlProcessingInstruction CreateProcessingInstruction(string target, string data);
    public virtual XmlSignificantWhitespace CreateSignificantWhitespace(string text);
    public virtual XmlText CreateTextNode(string text);
    public virtual XmlWhitespace CreateWhitespace(string text);
    public virtual XmlDeclaration CreateXmlDeclaration(string version, string encoding, string standalone);
    public virtual XmlElement GetElementById(string elementId);
    public virtual XmlNodeList GetElementsByTagName(string name);
    public virtual XmlNodeList GetElementsByTagName(string localName, string namespaceURI);
    public virtual XmlNode ImportNode(XmlNode node, bool deep);
    public virtual void Load(Stream inStream);
    public virtual void Load(TextReader txtReader);
    public virtual void Load(string filename);
    public virtual void Load(XmlReader reader);
    public virtual void LoadXml(string xml);
    public virtual XmlNode ReadNode(XmlReader reader);
    public virtual void Save(Stream outStream);
    public virtual void Save(TextWriter writer);
    public virtual void Save(string filename);
    public virtual void Save(XmlWriter w);
    public void Validate(ValidationEventHandler validationEventHandler);
    public void Validate(ValidationEventHandler validationEventHandler, XmlNode nodeToValidate);
    public virtual void WriteContentTo(XmlWriter xw);
    public virtual void WriteTo(XmlWriter w);
}
public class System.Xml.XmlDocumentFragment : XmlNode {
    public string InnerXml { get; public set; }
    public string LocalName { get; }
    public string Name { get; }
    public XmlNodeType NodeType { get; }
    public XmlDocument OwnerDocument { get; }
    public XmlNode ParentNode { get; }
    protected internal XmlDocumentFragment(XmlDocument ownerDocument);
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlDocument get_OwnerDocument();
    public virtual XmlNode get_ParentNode();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
}
public class System.Xml.XmlDocumentType : XmlLinkedNode {
    public XmlNamedNodeMap Entities { get; }
    public string InternalSubset { get; }
    public bool IsReadOnly { get; }
    public string LocalName { get; }
    public string Name { get; }
    public XmlNodeType NodeType { get; }
    public XmlNamedNodeMap Notations { get; }
    public string PublicId { get; }
    public string SystemId { get; }
    protected internal XmlDocumentType(string name, string publicId, string systemId, string internalSubset, XmlDocument doc);
    public XmlNamedNodeMap get_Entities();
    public string get_InternalSubset();
    public virtual bool get_IsReadOnly();
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual XmlNodeType get_NodeType();
    public XmlNamedNodeMap get_Notations();
    public string get_PublicId();
    public string get_SystemId();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
}
public class System.Xml.XmlElement : XmlLinkedNode {
    public XmlAttributeCollection Attributes { get; }
    public bool HasAttributes { get; }
    public string InnerText { get; public set; }
    public string InnerXml { get; public set; }
    public bool IsEmpty { get; public set; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceURI { get; }
    public XmlNode NextSibling { get; }
    public XmlNodeType NodeType { get; }
    public XmlDocument OwnerDocument { get; }
    public XmlNode ParentNode { get; }
    public string Prefix { get; public set; }
    public IXmlSchemaInfo SchemaInfo { get; }
    protected internal XmlElement(string prefix, string localName, string namespaceURI, XmlDocument doc);
    public virtual XmlAttributeCollection get_Attributes();
    public virtual bool get_HasAttributes();
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public bool get_IsEmpty();
    public void set_IsEmpty(bool value);
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual string get_NamespaceURI();
    public virtual XmlNode get_NextSibling();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlDocument get_OwnerDocument();
    public virtual XmlNode get_ParentNode();
    public virtual string get_Prefix();
    public virtual void set_Prefix(string value);
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual XmlNode CloneNode(bool deep);
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual XmlAttribute GetAttributeNode(string name);
    public virtual XmlAttribute GetAttributeNode(string localName, string namespaceURI);
    public virtual XmlNodeList GetElementsByTagName(string name);
    public virtual XmlNodeList GetElementsByTagName(string localName, string namespaceURI);
    public virtual bool HasAttribute(string name);
    public virtual bool HasAttribute(string localName, string namespaceURI);
    public virtual void RemoveAll();
    public virtual void RemoveAllAttributes();
    public virtual void RemoveAttribute(string name);
    public virtual void RemoveAttribute(string localName, string namespaceURI);
    public virtual XmlNode RemoveAttributeAt(int i);
    public virtual XmlAttribute RemoveAttributeNode(string localName, string namespaceURI);
    public virtual XmlAttribute RemoveAttributeNode(XmlAttribute oldAttr);
    public virtual void SetAttribute(string name, string value);
    public virtual string SetAttribute(string localName, string namespaceURI, string value);
    public virtual XmlAttribute SetAttributeNode(string localName, string namespaceURI);
    public virtual XmlAttribute SetAttributeNode(XmlAttribute newAttr);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
}
public class System.Xml.XmlEntity : XmlNode {
    public string BaseURI { get; }
    public string InnerText { get; public set; }
    public string InnerXml { get; public set; }
    public bool IsReadOnly { get; }
    public string LocalName { get; }
    public string Name { get; }
    public XmlNodeType NodeType { get; }
    public string NotationName { get; }
    public string OuterXml { get; }
    public string PublicId { get; }
    public string SystemId { get; }
    public virtual string get_BaseURI();
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual bool get_IsReadOnly();
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual XmlNodeType get_NodeType();
    public string get_NotationName();
    public virtual string get_OuterXml();
    public string get_PublicId();
    public string get_SystemId();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
}
public class System.Xml.XmlEntityReference : XmlLinkedNode {
    public string BaseURI { get; }
    public bool IsReadOnly { get; }
    public string LocalName { get; }
    public string Name { get; }
    public XmlNodeType NodeType { get; }
    public string Value { get; public set; }
    protected internal XmlEntityReference(string name, XmlDocument doc);
    public virtual string get_BaseURI();
    public virtual bool get_IsReadOnly();
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
}
public class System.Xml.XmlException : SystemException {
    public int LineNumber { get; }
    public int LinePosition { get; }
    public string Message { get; }
    public string SourceUri { get; }
    protected XmlException(SerializationInfo info, StreamingContext context);
    public XmlException(string message);
    public XmlException(string message, Exception innerException);
    public XmlException(string message, Exception innerException, int lineNumber, int linePosition);
    public int get_LineNumber();
    public int get_LinePosition();
    public virtual string get_Message();
    public string get_SourceUri();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public class System.Xml.XmlImplementation : object {
    public XmlImplementation(XmlNameTable nt);
    public virtual XmlDocument CreateDocument();
    public bool HasFeature(string strFeature, string strVersion);
}
public abstract class System.Xml.XmlLinkedNode : XmlNode {
    public XmlNode NextSibling { get; }
    public XmlNode PreviousSibling { get; }
    public virtual XmlNode get_NextSibling();
    public virtual XmlNode get_PreviousSibling();
}
public class System.Xml.XmlNamedNodeMap : object {
    public int Count { get; }
    public virtual int get_Count();
    public virtual IEnumerator GetEnumerator();
    public virtual XmlNode GetNamedItem(string name);
    public virtual XmlNode GetNamedItem(string localName, string namespaceURI);
    public virtual XmlNode Item(int index);
    public virtual XmlNode RemoveNamedItem(string name);
    public virtual XmlNode RemoveNamedItem(string localName, string namespaceURI);
    public virtual XmlNode SetNamedItem(XmlNode node);
}
public class System.Xml.XmlNamespaceManager : object {
    public string DefaultNamespace { get; }
    public XmlNameTable NameTable { get; }
    public XmlNamespaceManager(XmlNameTable nameTable);
    public virtual string get_DefaultNamespace();
    public virtual XmlNameTable get_NameTable();
    public virtual void AddNamespace(string prefix, string uri);
    public virtual IEnumerator GetEnumerator();
    public virtual IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    public virtual bool HasNamespace(string prefix);
    public virtual string LookupNamespace(string prefix);
    public virtual string LookupPrefix(string uri);
    public virtual bool PopScope();
    public virtual void PushScope();
    public virtual void RemoveNamespace(string prefix, string uri);
}
public enum System.Xml.XmlNamespaceScope : Enum {
    public int value__;
    public static XmlNamespaceScope All;
    public static XmlNamespaceScope ExcludeXml;
    public static XmlNamespaceScope Local;
}
public abstract class System.Xml.XmlNameTable : object {
    public abstract virtual string Add(Char[] array, int offset, int length);
    public abstract virtual string Add(string array);
    public abstract virtual string Get(Char[] array, int offset, int length);
    public abstract virtual string Get(string array);
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("{debuggerDisplayProxy}")]
public abstract class System.Xml.XmlNode : object {
    public XmlAttributeCollection Attributes { get; }
    public string BaseURI { get; }
    public XmlNodeList ChildNodes { get; }
    public XmlNode FirstChild { get; }
    public bool HasChildNodes { get; }
    public string InnerText { get; public set; }
    public string InnerXml { get; public set; }
    public bool IsReadOnly { get; }
    public XmlElement Item { get; }
    public XmlElement Item { get; }
    public XmlNode LastChild { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceURI { get; }
    public XmlNode NextSibling { get; }
    public XmlNodeType NodeType { get; }
    public string OuterXml { get; }
    public XmlDocument OwnerDocument { get; }
    public XmlNode ParentNode { get; }
    public string Prefix { get; public set; }
    public XmlNode PreviousSibling { get; }
    public XmlNode PreviousText { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public string Value { get; public set; }
    public virtual XmlAttributeCollection get_Attributes();
    public virtual string get_BaseURI();
    public virtual XmlNodeList get_ChildNodes();
    public virtual XmlNode get_FirstChild();
    public virtual bool get_HasChildNodes();
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual bool get_IsReadOnly();
    public virtual XmlElement get_Item(string name);
    public virtual XmlElement get_Item(string localname, string ns);
    public virtual XmlNode get_LastChild();
    public abstract virtual string get_LocalName();
    public abstract virtual string get_Name();
    public virtual string get_NamespaceURI();
    public virtual XmlNode get_NextSibling();
    public abstract virtual XmlNodeType get_NodeType();
    public virtual string get_OuterXml();
    public virtual XmlDocument get_OwnerDocument();
    public virtual XmlNode get_ParentNode();
    public virtual string get_Prefix();
    public virtual void set_Prefix(string value);
    public virtual XmlNode get_PreviousSibling();
    public virtual XmlNode get_PreviousText();
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual XmlNode AppendChild(XmlNode newChild);
    public virtual XmlNode Clone();
    public abstract virtual XmlNode CloneNode(bool deep);
    public virtual XPathNavigator CreateNavigator();
    public IEnumerator GetEnumerator();
    public virtual string GetNamespaceOfPrefix(string prefix);
    public virtual string GetPrefixOfNamespace(string namespaceURI);
    public virtual XmlNode InsertAfter(XmlNode newChild, XmlNode refChild);
    public virtual XmlNode InsertBefore(XmlNode newChild, XmlNode refChild);
    public virtual void Normalize();
    public virtual XmlNode PrependChild(XmlNode newChild);
    public virtual void RemoveAll();
    public virtual XmlNode RemoveChild(XmlNode oldChild);
    public virtual XmlNode ReplaceChild(XmlNode newChild, XmlNode oldChild);
    public XmlNodeList SelectNodes(string xpath);
    public XmlNodeList SelectNodes(string xpath, XmlNamespaceManager nsmgr);
    public XmlNode SelectSingleNode(string xpath);
    public XmlNode SelectSingleNode(string xpath, XmlNamespaceManager nsmgr);
    public virtual bool Supports(string feature, string version);
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    private sealed virtual override object System.ICloneable.Clone();
    public abstract virtual void WriteContentTo(XmlWriter w);
    public abstract virtual void WriteTo(XmlWriter w);
}
public enum System.Xml.XmlNodeChangedAction : Enum {
    public int value__;
    public static XmlNodeChangedAction Change;
    public static XmlNodeChangedAction Insert;
    public static XmlNodeChangedAction Remove;
}
public class System.Xml.XmlNodeChangedEventArgs : EventArgs {
    public XmlNodeChangedAction Action { get; }
    public XmlNode NewParent { get; }
    public string NewValue { get; }
    public XmlNode Node { get; }
    public XmlNode OldParent { get; }
    public string OldValue { get; }
    public XmlNodeChangedEventArgs(XmlNode node, XmlNode oldParent, XmlNode newParent, string oldValue, string newValue, XmlNodeChangedAction action);
    public XmlNodeChangedAction get_Action();
    public XmlNode get_NewParent();
    public string get_NewValue();
    public XmlNode get_Node();
    public XmlNode get_OldParent();
    public string get_OldValue();
}
public class System.Xml.XmlNodeChangedEventHandler : MulticastDelegate {
    public XmlNodeChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XmlNodeChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XmlNodeChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("ItemOf")]
public abstract class System.Xml.XmlNodeList : object {
    public int Count { get; }
    public XmlNode ItemOf { get; }
    public abstract virtual int get_Count();
    public virtual XmlNode get_ItemOf(int i);
    public abstract virtual IEnumerator GetEnumerator();
    public abstract virtual XmlNode Item(int index);
    protected virtual void PrivateDisposeNodeList();
    private sealed virtual override void System.IDisposable.Dispose();
}
public enum System.Xml.XmlNodeOrder : Enum {
    public int value__;
    public static XmlNodeOrder After;
    public static XmlNodeOrder Before;
    public static XmlNodeOrder Same;
    public static XmlNodeOrder Unknown;
}
public class System.Xml.XmlNodeReader : XmlReader {
    public int AttributeCount { get; }
    public string BaseURI { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanResolveEntity { get; }
    public int Depth { get; }
    public bool EOF { get; }
    public bool HasAttributes { get; }
    public bool HasValue { get; }
    public bool IsDefault { get; }
    public bool IsEmptyElement { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceURI { get; }
    public XmlNameTable NameTable { get; }
    public XmlNodeType NodeType { get; }
    public string Prefix { get; }
    public ReadState ReadState { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public string Value { get; }
    public string XmlLang { get; }
    public XmlSpace XmlSpace { get; }
    public XmlNodeReader(XmlNode node);
    public virtual int get_AttributeCount();
    public virtual string get_BaseURI();
    public virtual bool get_CanReadBinaryContent();
    public virtual bool get_CanResolveEntity();
    public virtual int get_Depth();
    public virtual bool get_EOF();
    public virtual bool get_HasAttributes();
    public virtual bool get_HasValue();
    public virtual bool get_IsDefault();
    public virtual bool get_IsEmptyElement();
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual string get_NamespaceURI();
    public virtual XmlNameTable get_NameTable();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Prefix();
    public virtual ReadState get_ReadState();
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual string get_Value();
    public virtual string get_XmlLang();
    public virtual XmlSpace get_XmlSpace();
    public virtual void Close();
    public virtual string GetAttribute(int attributeIndex);
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual string LookupNamespace(string prefix);
    public virtual void MoveToAttribute(int attributeIndex);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string name, string namespaceURI);
    public virtual bool MoveToElement();
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool Read();
    public virtual bool ReadAttributeValue();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual string ReadString();
    public virtual void ResolveEntity();
    public virtual void Skip();
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
}
public enum System.Xml.XmlNodeType : Enum {
    public int value__;
    public static XmlNodeType Attribute;
    public static XmlNodeType CDATA;
    public static XmlNodeType Comment;
    public static XmlNodeType Document;
    public static XmlNodeType DocumentFragment;
    public static XmlNodeType DocumentType;
    public static XmlNodeType Element;
    public static XmlNodeType EndElement;
    public static XmlNodeType EndEntity;
    public static XmlNodeType Entity;
    public static XmlNodeType EntityReference;
    public static XmlNodeType None;
    public static XmlNodeType Notation;
    public static XmlNodeType ProcessingInstruction;
    public static XmlNodeType SignificantWhitespace;
    public static XmlNodeType Text;
    public static XmlNodeType Whitespace;
    public static XmlNodeType XmlDeclaration;
}
public class System.Xml.XmlNotation : XmlNode {
    public string InnerXml { get; public set; }
    public bool IsReadOnly { get; }
    public string LocalName { get; }
    public string Name { get; }
    public XmlNodeType NodeType { get; }
    public string OuterXml { get; }
    public string PublicId { get; }
    public string SystemId { get; }
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public virtual bool get_IsReadOnly();
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_OuterXml();
    public string get_PublicId();
    public string get_SystemId();
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
}
public enum System.Xml.XmlOutputMethod : Enum {
    public int value__;
    public static XmlOutputMethod AutoDetect;
    public static XmlOutputMethod Html;
    public static XmlOutputMethod Text;
    public static XmlOutputMethod Xml;
}
public class System.Xml.XmlParserContext : object {
    public string BaseURI { get; public set; }
    public string DocTypeName { get; public set; }
    public Encoding Encoding { get; public set; }
    public string InternalSubset { get; public set; }
    public XmlNamespaceManager NamespaceManager { get; public set; }
    public XmlNameTable NameTable { get; public set; }
    public string PublicId { get; public set; }
    public string SystemId { get; public set; }
    public string XmlLang { get; public set; }
    public XmlSpace XmlSpace { get; public set; }
    public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string docTypeName, string pubId, string sysId, string internalSubset, string baseURI, string xmlLang, XmlSpace xmlSpace);
    public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string docTypeName, string pubId, string sysId, string internalSubset, string baseURI, string xmlLang, XmlSpace xmlSpace, Encoding enc);
    public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string xmlLang, XmlSpace xmlSpace);
    public XmlParserContext(XmlNameTable nt, XmlNamespaceManager nsMgr, string xmlLang, XmlSpace xmlSpace, Encoding enc);
    public string get_BaseURI();
    public void set_BaseURI(string value);
    public string get_DocTypeName();
    public void set_DocTypeName(string value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public string get_InternalSubset();
    public void set_InternalSubset(string value);
    public XmlNamespaceManager get_NamespaceManager();
    public void set_NamespaceManager(XmlNamespaceManager value);
    public XmlNameTable get_NameTable();
    public void set_NameTable(XmlNameTable value);
    public string get_PublicId();
    public void set_PublicId(string value);
    public string get_SystemId();
    public void set_SystemId(string value);
    public string get_XmlLang();
    public void set_XmlLang(string value);
    public XmlSpace get_XmlSpace();
    public void set_XmlSpace(XmlSpace value);
}
public class System.Xml.XmlProcessingInstruction : XmlLinkedNode {
    public string Data { get; public set; }
    public string InnerText { get; public set; }
    public string LocalName { get; }
    public string Name { get; }
    public XmlNodeType NodeType { get; }
    public string Target { get; }
    public string Value { get; public set; }
    protected internal XmlProcessingInstruction(string target, string data, XmlDocument doc);
    public string get_Data();
    public void set_Data(string value);
    public virtual string get_InnerText();
    public virtual void set_InnerText(string value);
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual XmlNodeType get_NodeType();
    public string get_Target();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
}
public class System.Xml.XmlQualifiedName : object {
    public static XmlQualifiedName Empty;
    public bool IsEmpty { get; }
    public string Name { get; }
    public string Namespace { get; }
    public XmlQualifiedName(string name);
    public XmlQualifiedName(string name, string ns);
    public bool get_IsEmpty();
    public string get_Name();
    public string get_Namespace();
    public virtual bool Equals(object other);
    public virtual int GetHashCode();
    public static bool op_Equality(XmlQualifiedName a, XmlQualifiedName b);
    public static bool op_Inequality(XmlQualifiedName a, XmlQualifiedName b);
    public virtual string ToString();
    public static string ToString(string name, string ns);
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("{debuggerDisplayProxy}")]
[DebuggerDisplayAttribute("{debuggerDisplayProxy}")]
public abstract class System.Xml.XmlReader : object {
    public int AttributeCount { get; }
    public string BaseURI { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    public bool CanResolveEntity { get; }
    public int Depth { get; }
    public bool EOF { get; }
    public bool HasAttributes { get; }
    public bool HasValue { get; }
    public bool IsDefault { get; }
    public bool IsEmptyElement { get; }
    public string Item { get; }
    public string Item { get; }
    public string Item { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceURI { get; }
    public XmlNameTable NameTable { get; }
    public XmlNodeType NodeType { get; }
    public string Prefix { get; }
    public char QuoteChar { get; }
    public ReadState ReadState { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public XmlReaderSettings Settings { get; }
    public string Value { get; }
    public Type ValueType { get; }
    public string XmlLang { get; }
    public XmlSpace XmlSpace { get; }
    public abstract virtual int get_AttributeCount();
    public abstract virtual string get_BaseURI();
    public virtual bool get_CanReadBinaryContent();
    public virtual bool get_CanReadValueChunk();
    public virtual bool get_CanResolveEntity();
    public abstract virtual int get_Depth();
    public abstract virtual bool get_EOF();
    public virtual bool get_HasAttributes();
    public virtual bool get_HasValue();
    public virtual bool get_IsDefault();
    public abstract virtual bool get_IsEmptyElement();
    public virtual string get_Item(int i);
    public virtual string get_Item(string name);
    public virtual string get_Item(string name, string namespaceURI);
    public abstract virtual string get_LocalName();
    public virtual string get_Name();
    public abstract virtual string get_NamespaceURI();
    public abstract virtual XmlNameTable get_NameTable();
    public abstract virtual XmlNodeType get_NodeType();
    public abstract virtual string get_Prefix();
    public virtual char get_QuoteChar();
    public abstract virtual ReadState get_ReadState();
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual XmlReaderSettings get_Settings();
    public abstract virtual string get_Value();
    public virtual Type get_ValueType();
    public virtual string get_XmlLang();
    public virtual XmlSpace get_XmlSpace();
    public virtual void Close();
    public static XmlReader Create(Stream input);
    public static XmlReader Create(Stream input, XmlReaderSettings settings);
    public static XmlReader Create(Stream input, XmlReaderSettings settings, string baseUri);
    public static XmlReader Create(Stream input, XmlReaderSettings settings, XmlParserContext inputContext);
    public static XmlReader Create(TextReader input);
    public static XmlReader Create(TextReader input, XmlReaderSettings settings);
    public static XmlReader Create(TextReader input, XmlReaderSettings settings, string baseUri);
    public static XmlReader Create(TextReader input, XmlReaderSettings settings, XmlParserContext inputContext);
    public static XmlReader Create(string inputUri);
    public static XmlReader Create(string inputUri, XmlReaderSettings settings);
    public static XmlReader Create(string inputUri, XmlReaderSettings settings, XmlParserContext inputContext);
    public static XmlReader Create(XmlReader reader, XmlReaderSettings settings);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual string GetAttribute(int i);
    public abstract virtual string GetAttribute(string name);
    public abstract virtual string GetAttribute(string name, string namespaceURI);
    public virtual Task`1<string> GetValueAsync();
    public static bool IsName(string str);
    public static bool IsNameToken(string str);
    public virtual bool IsStartElement();
    public virtual bool IsStartElement(string name);
    public virtual bool IsStartElement(string localname, string ns);
    public abstract virtual string LookupNamespace(string prefix);
    public virtual void MoveToAttribute(int i);
    public abstract virtual bool MoveToAttribute(string name);
    public abstract virtual bool MoveToAttribute(string name, string ns);
    public virtual XmlNodeType MoveToContent();
    [DebuggerStepThroughAttribute]
public virtual Task`1<XmlNodeType> MoveToContentAsync();
    public abstract virtual bool MoveToElement();
    public abstract virtual bool MoveToFirstAttribute();
    public abstract virtual bool MoveToNextAttribute();
    public abstract virtual bool Read();
    public virtual Task`1<bool> ReadAsync();
    public abstract virtual bool ReadAttributeValue();
    public virtual object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    [DebuggerStepThroughAttribute]
public virtual Task`1<object> ReadContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadContentAsBase64Async(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadContentAsBinHexAsync(Byte[] buffer, int index, int count);
    public virtual bool ReadContentAsBoolean();
    public virtual DateTime ReadContentAsDateTime();
    public virtual DateTimeOffset ReadContentAsDateTimeOffset();
    public virtual decimal ReadContentAsDecimal();
    public virtual double ReadContentAsDouble();
    public virtual float ReadContentAsFloat();
    public virtual int ReadContentAsInt();
    public virtual long ReadContentAsLong();
    public virtual object ReadContentAsObject();
    [DebuggerStepThroughAttribute]
public virtual Task`1<object> ReadContentAsObjectAsync();
    public virtual string ReadContentAsString();
    public virtual Task`1<string> ReadContentAsStringAsync();
    public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver, string localName, string namespaceURI);
    [DebuggerStepThroughAttribute]
public virtual Task`1<object> ReadElementContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadElementContentAsBase64Async(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual Task`1<int> ReadElementContentAsBinHexAsync(Byte[] buffer, int index, int count);
    public virtual bool ReadElementContentAsBoolean();
    public virtual bool ReadElementContentAsBoolean(string localName, string namespaceURI);
    public virtual DateTime ReadElementContentAsDateTime();
    public virtual DateTime ReadElementContentAsDateTime(string localName, string namespaceURI);
    public virtual decimal ReadElementContentAsDecimal();
    public virtual decimal ReadElementContentAsDecimal(string localName, string namespaceURI);
    public virtual double ReadElementContentAsDouble();
    public virtual double ReadElementContentAsDouble(string localName, string namespaceURI);
    public virtual float ReadElementContentAsFloat();
    public virtual float ReadElementContentAsFloat(string localName, string namespaceURI);
    public virtual int ReadElementContentAsInt();
    public virtual int ReadElementContentAsInt(string localName, string namespaceURI);
    public virtual long ReadElementContentAsLong();
    public virtual long ReadElementContentAsLong(string localName, string namespaceURI);
    public virtual object ReadElementContentAsObject();
    public virtual object ReadElementContentAsObject(string localName, string namespaceURI);
    [DebuggerStepThroughAttribute]
public virtual Task`1<object> ReadElementContentAsObjectAsync();
    public virtual string ReadElementContentAsString();
    public virtual string ReadElementContentAsString(string localName, string namespaceURI);
    [DebuggerStepThroughAttribute]
public virtual Task`1<string> ReadElementContentAsStringAsync();
    [EditorBrowsableAttribute("1")]
public virtual string ReadElementString();
    [EditorBrowsableAttribute("1")]
public virtual string ReadElementString(string name);
    [EditorBrowsableAttribute("1")]
public virtual string ReadElementString(string localname, string ns);
    public virtual void ReadEndElement();
    public virtual string ReadInnerXml();
    [DebuggerStepThroughAttribute]
public virtual Task`1<string> ReadInnerXmlAsync();
    public virtual string ReadOuterXml();
    [DebuggerStepThroughAttribute]
public virtual Task`1<string> ReadOuterXmlAsync();
    public virtual void ReadStartElement();
    public virtual void ReadStartElement(string name);
    public virtual void ReadStartElement(string localname, string ns);
    [EditorBrowsableAttribute("1")]
public virtual string ReadString();
    public virtual XmlReader ReadSubtree();
    public virtual bool ReadToDescendant(string name);
    public virtual bool ReadToDescendant(string localName, string namespaceURI);
    public virtual bool ReadToFollowing(string name);
    public virtual bool ReadToFollowing(string localName, string namespaceURI);
    public virtual bool ReadToNextSibling(string name);
    public virtual bool ReadToNextSibling(string localName, string namespaceURI);
    public virtual int ReadValueChunk(Char[] buffer, int index, int count);
    public virtual Task`1<int> ReadValueChunkAsync(Char[] buffer, int index, int count);
    public abstract virtual void ResolveEntity();
    public virtual void Skip();
    public virtual Task SkipAsync();
}
public class System.Xml.XmlReaderSettings : object {
    public bool Async { get; public set; }
    public bool CheckCharacters { get; public set; }
    public bool CloseInput { get; public set; }
    public ConformanceLevel ConformanceLevel { get; public set; }
    public DtdProcessing DtdProcessing { get; public set; }
    public bool IgnoreComments { get; public set; }
    public bool IgnoreProcessingInstructions { get; public set; }
    public bool IgnoreWhitespace { get; public set; }
    public int LineNumberOffset { get; public set; }
    public int LinePositionOffset { get; public set; }
    public long MaxCharactersFromEntities { get; public set; }
    public long MaxCharactersInDocument { get; public set; }
    public XmlNameTable NameTable { get; public set; }
    [ObsoleteAttribute("Use XmlReaderSettings.DtdProcessing property instead.")]
public bool ProhibitDtd { get; public set; }
    public XmlSchemaSet Schemas { get; public set; }
    public XmlSchemaValidationFlags ValidationFlags { get; public set; }
    public ValidationType ValidationType { get; public set; }
    unknown XmlResolver XmlResolver {public set; }
    public bool get_Async();
    public void set_Async(bool value);
    public bool get_CheckCharacters();
    public void set_CheckCharacters(bool value);
    public bool get_CloseInput();
    public void set_CloseInput(bool value);
    public ConformanceLevel get_ConformanceLevel();
    public void set_ConformanceLevel(ConformanceLevel value);
    public DtdProcessing get_DtdProcessing();
    public void set_DtdProcessing(DtdProcessing value);
    public bool get_IgnoreComments();
    public void set_IgnoreComments(bool value);
    public bool get_IgnoreProcessingInstructions();
    public void set_IgnoreProcessingInstructions(bool value);
    public bool get_IgnoreWhitespace();
    public void set_IgnoreWhitespace(bool value);
    public int get_LineNumberOffset();
    public void set_LineNumberOffset(int value);
    public int get_LinePositionOffset();
    public void set_LinePositionOffset(int value);
    public long get_MaxCharactersFromEntities();
    public void set_MaxCharactersFromEntities(long value);
    public long get_MaxCharactersInDocument();
    public void set_MaxCharactersInDocument(long value);
    public XmlNameTable get_NameTable();
    public void set_NameTable(XmlNameTable value);
    public bool get_ProhibitDtd();
    public void set_ProhibitDtd(bool value);
    public XmlSchemaSet get_Schemas();
    public void set_Schemas(XmlSchemaSet value);
    public XmlSchemaValidationFlags get_ValidationFlags();
    public void set_ValidationFlags(XmlSchemaValidationFlags value);
    public ValidationType get_ValidationType();
    public void set_ValidationType(ValidationType value);
    public void set_XmlResolver(XmlResolver value);
    public void add_ValidationEventHandler(ValidationEventHandler value);
    public void remove_ValidationEventHandler(ValidationEventHandler value);
    public XmlReaderSettings Clone();
    public void Reset();
}
public abstract class System.Xml.XmlResolver : object {
    unknown ICredentials Credentials {public set; }
    public virtual void set_Credentials(ICredentials value);
    public abstract virtual object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn);
    public virtual Task`1<object> GetEntityAsync(Uri absoluteUri, string role, Type ofObjectToReturn);
    public virtual Uri ResolveUri(Uri baseUri, string relativeUri);
    public virtual bool SupportsType(Uri absoluteUri, Type type);
}
public class System.Xml.XmlSecureResolver : XmlResolver {
    unknown ICredentials Credentials {public set; }
    public XmlSecureResolver(XmlResolver resolver, string securityUrl);
    public virtual void set_Credentials(ICredentials value);
    public virtual object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn);
    public virtual Task`1<object> GetEntityAsync(Uri absoluteUri, string role, Type ofObjectToReturn);
    public virtual Uri ResolveUri(Uri baseUri, string relativeUri);
}
public class System.Xml.XmlSignificantWhitespace : XmlCharacterData {
    public string LocalName { get; }
    public string Name { get; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public XmlNode PreviousText { get; }
    public string Value { get; public set; }
    protected internal XmlSignificantWhitespace(string strData, XmlDocument doc);
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlNode get_PreviousText();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
}
public enum System.Xml.XmlSpace : Enum {
    public int value__;
    public static XmlSpace Default;
    public static XmlSpace None;
    public static XmlSpace Preserve;
}
public class System.Xml.XmlText : XmlCharacterData {
    public string LocalName { get; }
    public string Name { get; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public XmlNode PreviousText { get; }
    public string Value { get; public set; }
    protected internal XmlText(string strData, XmlDocument doc);
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlNode get_PreviousText();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual XmlNode CloneNode(bool deep);
    public virtual XmlText SplitText(int offset);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
}
[EditorBrowsableAttribute("1")]
public class System.Xml.XmlTextReader : XmlReader {
    public int AttributeCount { get; }
    public string BaseURI { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    public bool CanResolveEntity { get; }
    public int Depth { get; }
    public DtdProcessing DtdProcessing { get; public set; }
    public Encoding Encoding { get; }
    public EntityHandling EntityHandling { get; public set; }
    public bool EOF { get; }
    public bool HasValue { get; }
    public bool IsDefault { get; }
    public bool IsEmptyElement { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public string LocalName { get; }
    public string Name { get; }
    public bool Namespaces { get; public set; }
    public string NamespaceURI { get; }
    public XmlNameTable NameTable { get; }
    public XmlNodeType NodeType { get; }
    public bool Normalization { get; public set; }
    public string Prefix { get; }
    [ObsoleteAttribute("Use DtdProcessing property instead.")]
public bool ProhibitDtd { get; public set; }
    public char QuoteChar { get; }
    public ReadState ReadState { get; }
    public string Value { get; }
    public WhitespaceHandling WhitespaceHandling { get; public set; }
    public string XmlLang { get; }
    unknown XmlResolver XmlResolver {public set; }
    public XmlSpace XmlSpace { get; }
    public XmlTextReader(Stream input);
    public XmlTextReader(Stream input, XmlNameTable nt);
    public XmlTextReader(Stream xmlFragment, XmlNodeType fragType, XmlParserContext context);
    public XmlTextReader(TextReader input);
    public XmlTextReader(TextReader input, XmlNameTable nt);
    public XmlTextReader(string url);
    public XmlTextReader(string url, Stream input);
    public XmlTextReader(string url, Stream input, XmlNameTable nt);
    public XmlTextReader(string url, TextReader input);
    public XmlTextReader(string url, TextReader input, XmlNameTable nt);
    public XmlTextReader(string url, XmlNameTable nt);
    public XmlTextReader(string xmlFragment, XmlNodeType fragType, XmlParserContext context);
    protected XmlTextReader(XmlNameTable nt);
    public virtual int get_AttributeCount();
    public virtual string get_BaseURI();
    public virtual bool get_CanReadBinaryContent();
    public virtual bool get_CanReadValueChunk();
    public virtual bool get_CanResolveEntity();
    public virtual int get_Depth();
    public DtdProcessing get_DtdProcessing();
    public void set_DtdProcessing(DtdProcessing value);
    public Encoding get_Encoding();
    public EntityHandling get_EntityHandling();
    public void set_EntityHandling(EntityHandling value);
    public virtual bool get_EOF();
    public virtual bool get_HasValue();
    public virtual bool get_IsDefault();
    public virtual bool get_IsEmptyElement();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    public virtual string get_LocalName();
    public virtual string get_Name();
    public bool get_Namespaces();
    public void set_Namespaces(bool value);
    public virtual string get_NamespaceURI();
    public virtual XmlNameTable get_NameTable();
    public virtual XmlNodeType get_NodeType();
    public bool get_Normalization();
    public void set_Normalization(bool value);
    public virtual string get_Prefix();
    public bool get_ProhibitDtd();
    public void set_ProhibitDtd(bool value);
    public virtual char get_QuoteChar();
    public virtual ReadState get_ReadState();
    public virtual string get_Value();
    public WhitespaceHandling get_WhitespaceHandling();
    public void set_WhitespaceHandling(WhitespaceHandling value);
    public virtual string get_XmlLang();
    public void set_XmlResolver(XmlResolver value);
    public virtual XmlSpace get_XmlSpace();
    public virtual void Close();
    public virtual string GetAttribute(int i);
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string localName, string namespaceURI);
    public IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    public TextReader GetRemainder();
    public sealed virtual bool HasLineInfo();
    public virtual string LookupNamespace(string prefix);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual bool MoveToElement();
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool Read();
    public virtual bool ReadAttributeValue();
    public int ReadBase64(Byte[] array, int offset, int len);
    public int ReadBinHex(Byte[] array, int offset, int len);
    public int ReadChars(Char[] buffer, int index, int count);
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual string ReadString();
    public void ResetState();
    public virtual void ResolveEntity();
    public virtual void Skip();
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
}
[EditorBrowsableAttribute("1")]
public class System.Xml.XmlTextWriter : XmlWriter {
    public Stream BaseStream { get; }
    public Formatting Formatting { get; public set; }
    public int Indentation { get; public set; }
    public char IndentChar { get; public set; }
    public bool Namespaces { get; public set; }
    public char QuoteChar { get; public set; }
    public WriteState WriteState { get; }
    public string XmlLang { get; }
    public XmlSpace XmlSpace { get; }
    public XmlTextWriter(Stream w, Encoding encoding);
    public XmlTextWriter(TextWriter w);
    public XmlTextWriter(string filename, Encoding encoding);
    public Stream get_BaseStream();
    public Formatting get_Formatting();
    public void set_Formatting(Formatting value);
    public int get_Indentation();
    public void set_Indentation(int value);
    public char get_IndentChar();
    public void set_IndentChar(char value);
    public bool get_Namespaces();
    public void set_Namespaces(bool value);
    public char get_QuoteChar();
    public void set_QuoteChar(char value);
    public virtual WriteState get_WriteState();
    public virtual string get_XmlLang();
    public virtual XmlSpace get_XmlSpace();
    public virtual void Close();
    public virtual void Flush();
    public virtual string LookupPrefix(string ns);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual void WriteBinHex(Byte[] buffer, int index, int count);
    public virtual void WriteCData(string text);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteComment(string text);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteEndAttribute();
    public virtual void WriteEndDocument();
    public virtual void WriteEndElement();
    public virtual void WriteEntityRef(string name);
    public virtual void WriteFullEndElement();
    public virtual void WriteName(string name);
    public virtual void WriteNmToken(string name);
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteQualifiedName(string localName, string ns);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteRaw(string data);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteWhitespace(string ws);
}
public enum System.Xml.XmlTokenizedType : Enum {
    public int value__;
    public static XmlTokenizedType CDATA;
    public static XmlTokenizedType ENTITIES;
    public static XmlTokenizedType ENTITY;
    public static XmlTokenizedType ENUMERATION;
    public static XmlTokenizedType ID;
    public static XmlTokenizedType IDREF;
    public static XmlTokenizedType IDREFS;
    public static XmlTokenizedType NCName;
    public static XmlTokenizedType NMTOKEN;
    public static XmlTokenizedType NMTOKENS;
    public static XmlTokenizedType None;
    public static XmlTokenizedType NOTATION;
    public static XmlTokenizedType QName;
}
public class System.Xml.XmlUrlResolver : XmlResolver {
    unknown RequestCachePolicy CachePolicy {public set; }
    unknown ICredentials Credentials {public set; }
    unknown IWebProxy Proxy {public set; }
    public void set_CachePolicy(RequestCachePolicy value);
    public virtual void set_Credentials(ICredentials value);
    public void set_Proxy(IWebProxy value);
    public virtual object GetEntity(Uri absoluteUri, string role, Type ofObjectToReturn);
    public virtual Task`1<object> GetEntityAsync(Uri absoluteUri, string role, Type ofObjectToReturn);
    public virtual Uri ResolveUri(Uri baseUri, string relativeUri);
}
[ObsoleteAttribute("Use XmlReader created by XmlReader.Create() method using appropriate XmlReaderSettings instead. http://go.microsoft.com/fwlink/?linkid=14202")]
public class System.Xml.XmlValidatingReader : XmlReader {
    public int AttributeCount { get; }
    public string BaseURI { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanResolveEntity { get; }
    public int Depth { get; }
    public Encoding Encoding { get; }
    public EntityHandling EntityHandling { get; public set; }
    public bool EOF { get; }
    public bool HasValue { get; }
    public bool IsDefault { get; }
    public bool IsEmptyElement { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public string LocalName { get; }
    public string Name { get; }
    public bool Namespaces { get; public set; }
    public string NamespaceURI { get; }
    public XmlNameTable NameTable { get; }
    public XmlNodeType NodeType { get; }
    public string Prefix { get; }
    public char QuoteChar { get; }
    public XmlReader Reader { get; }
    public ReadState ReadState { get; }
    public XmlSchemaCollection Schemas { get; }
    public object SchemaType { get; }
    public ValidationType ValidationType { get; public set; }
    public string Value { get; }
    public string XmlLang { get; }
    unknown XmlResolver XmlResolver {public set; }
    public XmlSpace XmlSpace { get; }
    public XmlValidatingReader(Stream xmlFragment, XmlNodeType fragType, XmlParserContext context);
    public XmlValidatingReader(string xmlFragment, XmlNodeType fragType, XmlParserContext context);
    public XmlValidatingReader(XmlReader reader);
    public virtual int get_AttributeCount();
    public virtual string get_BaseURI();
    public virtual bool get_CanReadBinaryContent();
    public virtual bool get_CanResolveEntity();
    public virtual int get_Depth();
    public Encoding get_Encoding();
    public EntityHandling get_EntityHandling();
    public void set_EntityHandling(EntityHandling value);
    public virtual bool get_EOF();
    public virtual bool get_HasValue();
    public virtual bool get_IsDefault();
    public virtual bool get_IsEmptyElement();
    public sealed virtual int get_LineNumber();
    public sealed virtual int get_LinePosition();
    public virtual string get_LocalName();
    public virtual string get_Name();
    public bool get_Namespaces();
    public void set_Namespaces(bool value);
    public virtual string get_NamespaceURI();
    public virtual XmlNameTable get_NameTable();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Prefix();
    public virtual char get_QuoteChar();
    public XmlReader get_Reader();
    public virtual ReadState get_ReadState();
    public XmlSchemaCollection get_Schemas();
    public object get_SchemaType();
    public ValidationType get_ValidationType();
    public void set_ValidationType(ValidationType value);
    public virtual string get_Value();
    public virtual string get_XmlLang();
    public void set_XmlResolver(XmlResolver value);
    public virtual XmlSpace get_XmlSpace();
    public void add_ValidationEventHandler(ValidationEventHandler value);
    public void remove_ValidationEventHandler(ValidationEventHandler value);
    public virtual void Close();
    public virtual string GetAttribute(int i);
    public virtual string GetAttribute(string name);
    public virtual string GetAttribute(string localName, string namespaceURI);
    public sealed virtual bool HasLineInfo();
    public virtual string LookupNamespace(string prefix);
    public virtual void MoveToAttribute(int i);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual bool MoveToElement();
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool Read();
    public virtual bool ReadAttributeValue();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadElementContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual string ReadString();
    public object ReadTypedValue();
    public virtual void ResolveEntity();
    private sealed virtual override IDictionary`2<string, string> System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(XmlNamespaceScope scope);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix);
    private sealed virtual override string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName);
}
public class System.Xml.XmlWhitespace : XmlCharacterData {
    public string LocalName { get; }
    public string Name { get; }
    public XmlNodeType NodeType { get; }
    public XmlNode ParentNode { get; }
    public XmlNode PreviousText { get; }
    public string Value { get; public set; }
    protected internal XmlWhitespace(string strData, XmlDocument doc);
    public virtual string get_LocalName();
    public virtual string get_Name();
    public virtual XmlNodeType get_NodeType();
    public virtual XmlNode get_ParentNode();
    public virtual XmlNode get_PreviousText();
    public virtual string get_Value();
    public virtual void set_Value(string value);
    public virtual XmlNode CloneNode(bool deep);
    public virtual void WriteContentTo(XmlWriter w);
    public virtual void WriteTo(XmlWriter w);
}
public abstract class System.Xml.XmlWriter : object {
    public XmlWriterSettings Settings { get; }
    public WriteState WriteState { get; }
    public string XmlLang { get; }
    public XmlSpace XmlSpace { get; }
    public virtual XmlWriterSettings get_Settings();
    public abstract virtual WriteState get_WriteState();
    public virtual string get_XmlLang();
    public virtual XmlSpace get_XmlSpace();
    public virtual void Close();
    public static XmlWriter Create(Stream output);
    public static XmlWriter Create(Stream output, XmlWriterSettings settings);
    public static XmlWriter Create(TextWriter output);
    public static XmlWriter Create(TextWriter output, XmlWriterSettings settings);
    public static XmlWriter Create(string outputFileName);
    public static XmlWriter Create(string outputFileName, XmlWriterSettings settings);
    public static XmlWriter Create(StringBuilder output);
    public static XmlWriter Create(StringBuilder output, XmlWriterSettings settings);
    public static XmlWriter Create(XmlWriter output);
    public static XmlWriter Create(XmlWriter output, XmlWriterSettings settings);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
    public abstract virtual void Flush();
    public virtual Task FlushAsync();
    public abstract virtual string LookupPrefix(string ns);
    public virtual void WriteAttributes(XmlReader reader, bool defattr);
    [DebuggerStepThroughAttribute]
public virtual Task WriteAttributesAsync(XmlReader reader, bool defattr);
    public void WriteAttributeString(string localName, string value);
    public void WriteAttributeString(string localName, string ns, string value);
    public void WriteAttributeString(string prefix, string localName, string ns, string value);
    public Task WriteAttributeStringAsync(string prefix, string localName, string ns, string value);
    public abstract virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual Task WriteBase64Async(Byte[] buffer, int index, int count);
    public virtual void WriteBinHex(Byte[] buffer, int index, int count);
    public virtual Task WriteBinHexAsync(Byte[] buffer, int index, int count);
    public abstract virtual void WriteCData(string text);
    public virtual Task WriteCDataAsync(string text);
    public abstract virtual void WriteCharEntity(char ch);
    public virtual Task WriteCharEntityAsync(char ch);
    public abstract virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual Task WriteCharsAsync(Char[] buffer, int index, int count);
    public abstract virtual void WriteComment(string text);
    public virtual Task WriteCommentAsync(string text);
    public abstract virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset);
    public void WriteElementString(string localName, string value);
    public void WriteElementString(string localName, string ns, string value);
    public void WriteElementString(string prefix, string localName, string ns, string value);
    [DebuggerStepThroughAttribute]
public Task WriteElementStringAsync(string prefix, string localName, string ns, string value);
    public abstract virtual void WriteEndAttribute();
    protected internal virtual Task WriteEndAttributeAsync();
    public abstract virtual void WriteEndDocument();
    public virtual Task WriteEndDocumentAsync();
    public abstract virtual void WriteEndElement();
    public virtual Task WriteEndElementAsync();
    public abstract virtual void WriteEntityRef(string name);
    public virtual Task WriteEntityRefAsync(string name);
    public abstract virtual void WriteFullEndElement();
    public virtual Task WriteFullEndElementAsync();
    public virtual void WriteName(string name);
    public virtual Task WriteNameAsync(string name);
    public virtual void WriteNmToken(string name);
    public virtual Task WriteNmTokenAsync(string name);
    public virtual void WriteNode(XmlReader reader, bool defattr);
    public virtual void WriteNode(XPathNavigator navigator, bool defattr);
    public virtual Task WriteNodeAsync(XmlReader reader, bool defattr);
    [DebuggerStepThroughAttribute]
public virtual Task WriteNodeAsync(XPathNavigator navigator, bool defattr);
    public abstract virtual void WriteProcessingInstruction(string name, string text);
    public virtual Task WriteProcessingInstructionAsync(string name, string text);
    public virtual void WriteQualifiedName(string localName, string ns);
    [DebuggerStepThroughAttribute]
public virtual Task WriteQualifiedNameAsync(string localName, string ns);
    public abstract virtual void WriteRaw(Char[] buffer, int index, int count);
    public abstract virtual void WriteRaw(string data);
    public virtual Task WriteRawAsync(Char[] buffer, int index, int count);
    public virtual Task WriteRawAsync(string data);
    public void WriteStartAttribute(string localName);
    public void WriteStartAttribute(string localName, string ns);
    public abstract virtual void WriteStartAttribute(string prefix, string localName, string ns);
    protected internal virtual Task WriteStartAttributeAsync(string prefix, string localName, string ns);
    public abstract virtual void WriteStartDocument();
    public abstract virtual void WriteStartDocument(bool standalone);
    public virtual Task WriteStartDocumentAsync();
    public virtual Task WriteStartDocumentAsync(bool standalone);
    public void WriteStartElement(string localName);
    public void WriteStartElement(string localName, string ns);
    public abstract virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual Task WriteStartElementAsync(string prefix, string localName, string ns);
    public abstract virtual void WriteString(string text);
    public virtual Task WriteStringAsync(string text);
    public abstract virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual Task WriteSurrogateCharEntityAsync(char lowChar, char highChar);
    public virtual void WriteValue(bool value);
    public virtual void WriteValue(DateTime value);
    public virtual void WriteValue(DateTimeOffset value);
    public virtual void WriteValue(decimal value);
    public virtual void WriteValue(double value);
    public virtual void WriteValue(int value);
    public virtual void WriteValue(long value);
    public virtual void WriteValue(object value);
    public virtual void WriteValue(float value);
    public virtual void WriteValue(string value);
    public abstract virtual void WriteWhitespace(string ws);
    public virtual Task WriteWhitespaceAsync(string ws);
}
public class System.Xml.XmlWriterSettings : object {
    public bool Async { get; public set; }
    public bool CheckCharacters { get; public set; }
    public bool CloseOutput { get; public set; }
    public ConformanceLevel ConformanceLevel { get; public set; }
    public bool DoNotEscapeUriAttributes { get; public set; }
    public Encoding Encoding { get; public set; }
    public bool Indent { get; public set; }
    public string IndentChars { get; public set; }
    public NamespaceHandling NamespaceHandling { get; public set; }
    public string NewLineChars { get; public set; }
    public NewLineHandling NewLineHandling { get; public set; }
    public bool NewLineOnAttributes { get; public set; }
    public bool OmitXmlDeclaration { get; public set; }
    public XmlOutputMethod OutputMethod { get; }
    public bool WriteEndDocumentOnClose { get; public set; }
    public bool get_Async();
    public void set_Async(bool value);
    public bool get_CheckCharacters();
    public void set_CheckCharacters(bool value);
    public bool get_CloseOutput();
    public void set_CloseOutput(bool value);
    public ConformanceLevel get_ConformanceLevel();
    public void set_ConformanceLevel(ConformanceLevel value);
    public bool get_DoNotEscapeUriAttributes();
    public void set_DoNotEscapeUriAttributes(bool value);
    public Encoding get_Encoding();
    public void set_Encoding(Encoding value);
    public bool get_Indent();
    public void set_Indent(bool value);
    public string get_IndentChars();
    public void set_IndentChars(string value);
    public NamespaceHandling get_NamespaceHandling();
    public void set_NamespaceHandling(NamespaceHandling value);
    public string get_NewLineChars();
    public void set_NewLineChars(string value);
    public NewLineHandling get_NewLineHandling();
    public void set_NewLineHandling(NewLineHandling value);
    public bool get_NewLineOnAttributes();
    public void set_NewLineOnAttributes(bool value);
    public bool get_OmitXmlDeclaration();
    public void set_OmitXmlDeclaration(bool value);
    public XmlOutputMethod get_OutputMethod();
    public bool get_WriteEndDocumentOnClose();
    public void set_WriteEndDocumentOnClose(bool value);
    public XmlWriterSettings Clone();
    public void Reset();
}
public interface System.Xml.XPath.IXPathNavigable {
    public abstract virtual XPathNavigator CreateNavigator();
}
public enum System.Xml.XPath.XmlCaseOrder : Enum {
    public int value__;
    public static XmlCaseOrder LowerFirst;
    public static XmlCaseOrder None;
    public static XmlCaseOrder UpperFirst;
}
public enum System.Xml.XPath.XmlDataType : Enum {
    public int value__;
    public static XmlDataType Number;
    public static XmlDataType Text;
}
public enum System.Xml.XPath.XmlSortOrder : Enum {
    public int value__;
    public static XmlSortOrder Ascending;
    public static XmlSortOrder Descending;
}
public abstract class System.Xml.XPath.XPathExpression : object {
    public string Expression { get; }
    public XPathResultType ReturnType { get; }
    public abstract virtual string get_Expression();
    public abstract virtual XPathResultType get_ReturnType();
    public abstract virtual void AddSort(object expr, IComparer comparer);
    public abstract virtual void AddSort(object expr, XmlSortOrder order, XmlCaseOrder caseOrder, string lang, XmlDataType dataType);
    public abstract virtual XPathExpression Clone();
    public static XPathExpression Compile(string xpath);
    public static XPathExpression Compile(string xpath, IXmlNamespaceResolver nsResolver);
    public abstract virtual void SetContext(IXmlNamespaceResolver nsResolver);
    public abstract virtual void SetContext(XmlNamespaceManager nsManager);
}
public abstract class System.Xml.XPath.XPathItem : object {
    public bool IsNode { get; }
    public object TypedValue { get; }
    public string Value { get; }
    public bool ValueAsBoolean { get; }
    public DateTime ValueAsDateTime { get; }
    public double ValueAsDouble { get; }
    public int ValueAsInt { get; }
    public long ValueAsLong { get; }
    public Type ValueType { get; }
    public XmlSchemaType XmlType { get; }
    public abstract virtual bool get_IsNode();
    public abstract virtual object get_TypedValue();
    public abstract virtual string get_Value();
    public abstract virtual bool get_ValueAsBoolean();
    public abstract virtual DateTime get_ValueAsDateTime();
    public abstract virtual double get_ValueAsDouble();
    public abstract virtual int get_ValueAsInt();
    public abstract virtual long get_ValueAsLong();
    public abstract virtual Type get_ValueType();
    public abstract virtual XmlSchemaType get_XmlType();
    public virtual object ValueAs(Type returnType);
    public abstract virtual object ValueAs(Type returnType, IXmlNamespaceResolver nsResolver);
}
public enum System.Xml.XPath.XPathNamespaceScope : Enum {
    public int value__;
    public static XPathNamespaceScope All;
    public static XPathNamespaceScope ExcludeXml;
    public static XPathNamespaceScope Local;
}
public abstract class System.Xml.XPath.XPathNavigator : XPathItem {
    public string BaseURI { get; }
    public bool CanEdit { get; }
    public bool HasAttributes { get; }
    public bool HasChildren { get; }
    public string InnerXml { get; public set; }
    public bool IsEmptyElement { get; }
    public bool IsNode { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceURI { get; }
    public XmlNameTable NameTable { get; }
    public static IEqualityComparer NavigatorComparer { get; }
    public XPathNodeType NodeType { get; }
    public string OuterXml { get; public set; }
    public string Prefix { get; }
    public IXmlSchemaInfo SchemaInfo { get; }
    public object TypedValue { get; }
    public object UnderlyingObject { get; }
    public bool ValueAsBoolean { get; }
    public DateTime ValueAsDateTime { get; }
    public double ValueAsDouble { get; }
    public int ValueAsInt { get; }
    public long ValueAsLong { get; }
    public Type ValueType { get; }
    public string XmlLang { get; }
    public XmlSchemaType XmlType { get; }
    public abstract virtual string get_BaseURI();
    public virtual bool get_CanEdit();
    public virtual bool get_HasAttributes();
    public virtual bool get_HasChildren();
    public virtual string get_InnerXml();
    public virtual void set_InnerXml(string value);
    public abstract virtual bool get_IsEmptyElement();
    public sealed virtual bool get_IsNode();
    public abstract virtual string get_LocalName();
    public abstract virtual string get_Name();
    public abstract virtual string get_NamespaceURI();
    public abstract virtual XmlNameTable get_NameTable();
    public static IEqualityComparer get_NavigatorComparer();
    public abstract virtual XPathNodeType get_NodeType();
    public virtual string get_OuterXml();
    public virtual void set_OuterXml(string value);
    public abstract virtual string get_Prefix();
    public virtual IXmlSchemaInfo get_SchemaInfo();
    public virtual object get_TypedValue();
    public virtual object get_UnderlyingObject();
    public virtual bool get_ValueAsBoolean();
    public virtual DateTime get_ValueAsDateTime();
    public virtual double get_ValueAsDouble();
    public virtual int get_ValueAsInt();
    public virtual long get_ValueAsLong();
    public virtual Type get_ValueType();
    public virtual string get_XmlLang();
    public virtual XmlSchemaType get_XmlType();
    public virtual XmlWriter AppendChild();
    public virtual void AppendChild(string newChild);
    public virtual void AppendChild(XmlReader newChild);
    public virtual void AppendChild(XPathNavigator newChild);
    public virtual void AppendChildElement(string prefix, string localName, string namespaceURI, string value);
    public virtual bool CheckValidity(XmlSchemaSet schemas, ValidationEventHandler validationEventHandler);
    public abstract virtual XPathNavigator Clone();
    public virtual XmlNodeOrder ComparePosition(XPathNavigator nav);
    public virtual XPathExpression Compile(string xpath);
    public virtual void CreateAttribute(string prefix, string localName, string namespaceURI, string value);
    public virtual XmlWriter CreateAttributes();
    public virtual XPathNavigator CreateNavigator();
    public virtual void DeleteRange(XPathNavigator lastSiblingToDelete);
    public virtual void DeleteSelf();
    public virtual object Evaluate(string xpath);
    public virtual object Evaluate(string xpath, IXmlNamespaceResolver resolver);
    public virtual object Evaluate(XPathExpression expr);
    public virtual object Evaluate(XPathExpression expr, XPathNodeIterator context);
    public virtual string GetAttribute(string localName, string namespaceURI);
    public virtual string GetNamespace(string name);
    public virtual IDictionary`2<string, string> GetNamespacesInScope(XmlNamespaceScope scope);
    public virtual XmlWriter InsertAfter();
    public virtual void InsertAfter(string newSibling);
    public virtual void InsertAfter(XmlReader newSibling);
    public virtual void InsertAfter(XPathNavigator newSibling);
    public virtual XmlWriter InsertBefore();
    public virtual void InsertBefore(string newSibling);
    public virtual void InsertBefore(XmlReader newSibling);
    public virtual void InsertBefore(XPathNavigator newSibling);
    public virtual void InsertElementAfter(string prefix, string localName, string namespaceURI, string value);
    public virtual void InsertElementBefore(string prefix, string localName, string namespaceURI, string value);
    public virtual bool IsDescendant(XPathNavigator nav);
    public abstract virtual bool IsSamePosition(XPathNavigator other);
    public virtual string LookupNamespace(string prefix);
    public virtual string LookupPrefix(string namespaceURI);
    public virtual bool Matches(string xpath);
    public virtual bool Matches(XPathExpression expr);
    public abstract virtual bool MoveTo(XPathNavigator other);
    public virtual bool MoveToAttribute(string localName, string namespaceURI);
    public virtual bool MoveToChild(string localName, string namespaceURI);
    public virtual bool MoveToChild(XPathNodeType type);
    public virtual bool MoveToFirst();
    public abstract virtual bool MoveToFirstAttribute();
    public abstract virtual bool MoveToFirstChild();
    public bool MoveToFirstNamespace();
    public abstract virtual bool MoveToFirstNamespace(XPathNamespaceScope namespaceScope);
    public virtual bool MoveToFollowing(string localName, string namespaceURI);
    public virtual bool MoveToFollowing(string localName, string namespaceURI, XPathNavigator end);
    public virtual bool MoveToFollowing(XPathNodeType type);
    public virtual bool MoveToFollowing(XPathNodeType type, XPathNavigator end);
    public abstract virtual bool MoveToId(string id);
    public virtual bool MoveToNamespace(string name);
    public abstract virtual bool MoveToNext();
    public virtual bool MoveToNext(string localName, string namespaceURI);
    public virtual bool MoveToNext(XPathNodeType type);
    public abstract virtual bool MoveToNextAttribute();
    public bool MoveToNextNamespace();
    public abstract virtual bool MoveToNextNamespace(XPathNamespaceScope namespaceScope);
    public abstract virtual bool MoveToParent();
    public abstract virtual bool MoveToPrevious();
    public virtual void MoveToRoot();
    public virtual XmlWriter PrependChild();
    public virtual void PrependChild(string newChild);
    public virtual void PrependChild(XmlReader newChild);
    public virtual void PrependChild(XPathNavigator newChild);
    public virtual void PrependChildElement(string prefix, string localName, string namespaceURI, string value);
    public virtual XmlReader ReadSubtree();
    public virtual XmlWriter ReplaceRange(XPathNavigator lastSiblingToReplace);
    public virtual void ReplaceSelf(string newNode);
    public virtual void ReplaceSelf(XmlReader newNode);
    public virtual void ReplaceSelf(XPathNavigator newNode);
    public virtual XPathNodeIterator Select(string xpath);
    public virtual XPathNodeIterator Select(string xpath, IXmlNamespaceResolver resolver);
    public virtual XPathNodeIterator Select(XPathExpression expr);
    public virtual XPathNodeIterator SelectAncestors(string name, string namespaceURI, bool matchSelf);
    public virtual XPathNodeIterator SelectAncestors(XPathNodeType type, bool matchSelf);
    public virtual XPathNodeIterator SelectChildren(string name, string namespaceURI);
    public virtual XPathNodeIterator SelectChildren(XPathNodeType type);
    public virtual XPathNodeIterator SelectDescendants(string name, string namespaceURI, bool matchSelf);
    public virtual XPathNodeIterator SelectDescendants(XPathNodeType type, bool matchSelf);
    public virtual XPathNavigator SelectSingleNode(string xpath);
    public virtual XPathNavigator SelectSingleNode(string xpath, IXmlNamespaceResolver resolver);
    public virtual XPathNavigator SelectSingleNode(XPathExpression expression);
    public virtual void SetTypedValue(object typedValue);
    public virtual void SetValue(string value);
    private sealed virtual override object System.ICloneable.Clone();
    public virtual string ToString();
    public virtual object ValueAs(Type returnType, IXmlNamespaceResolver nsResolver);
    public virtual void WriteSubtree(XmlWriter writer);
}
[DebuggerDisplayAttribute("Position={CurrentPosition}, Current={debuggerDisplayProxy}")]
public abstract class System.Xml.XPath.XPathNodeIterator : object {
    public int Count { get; }
    public XPathNavigator Current { get; }
    public int CurrentPosition { get; }
    public virtual int get_Count();
    public abstract virtual XPathNavigator get_Current();
    public abstract virtual int get_CurrentPosition();
    public abstract virtual XPathNodeIterator Clone();
    public virtual IEnumerator GetEnumerator();
    public abstract virtual bool MoveNext();
    private sealed virtual override object System.ICloneable.Clone();
}
public enum System.Xml.XPath.XPathNodeType : Enum {
    public int value__;
    public static XPathNodeType All;
    public static XPathNodeType Attribute;
    public static XPathNodeType Comment;
    public static XPathNodeType Element;
    public static XPathNodeType Namespace;
    public static XPathNodeType ProcessingInstruction;
    public static XPathNodeType Root;
    public static XPathNodeType SignificantWhitespace;
    public static XPathNodeType Text;
    public static XPathNodeType Whitespace;
}
public enum System.Xml.XPath.XPathResultType : Enum {
    public int value__;
    public static XPathResultType Any;
    public static XPathResultType Boolean;
    public static XPathResultType Error;
    public static XPathResultType Navigator;
    public static XPathResultType NodeSet;
    public static XPathResultType Number;
    public static XPathResultType String;
}
public interface System.Xml.Xsl.IXsltContextFunction {
    public XPathResultType[] ArgTypes { get; }
    public int Maxargs { get; }
    public int Minargs { get; }
    public XPathResultType ReturnType { get; }
    public abstract virtual XPathResultType[] get_ArgTypes();
    public abstract virtual int get_Maxargs();
    public abstract virtual int get_Minargs();
    public abstract virtual XPathResultType get_ReturnType();
    public abstract virtual object Invoke(XsltContext xsltContext, Object[] args, XPathNavigator docContext);
}
public interface System.Xml.Xsl.IXsltContextVariable {
    public bool IsLocal { get; }
    public bool IsParam { get; }
    public XPathResultType VariableType { get; }
    public abstract virtual bool get_IsLocal();
    public abstract virtual bool get_IsParam();
    public abstract virtual XPathResultType get_VariableType();
    public abstract virtual object Evaluate(XsltContext xsltContext);
}
public class System.Xml.Xsl.XslCompiledTransform : object {
    public XmlWriterSettings OutputSettings { get; }
    public XslCompiledTransform(bool enableDebug);
    public XmlWriterSettings get_OutputSettings();
    public void Load(MethodInfo executeMethod, Byte[] queryData, Type[] earlyBoundTypes);
    public void Load(string stylesheetUri);
    public void Load(string stylesheetUri, XsltSettings settings, XmlResolver stylesheetResolver);
    public void Load(Type compiledStylesheet);
    public void Load(XmlReader stylesheet);
    public void Load(XmlReader stylesheet, XsltSettings settings, XmlResolver stylesheetResolver);
    public void Load(IXPathNavigable stylesheet);
    public void Load(IXPathNavigable stylesheet, XsltSettings settings, XmlResolver stylesheetResolver);
    public void Transform(string inputUri, string resultsFile);
    public void Transform(string inputUri, XmlWriter results);
    public void Transform(string inputUri, XsltArgumentList arguments, Stream results);
    public void Transform(string inputUri, XsltArgumentList arguments, TextWriter results);
    public void Transform(string inputUri, XsltArgumentList arguments, XmlWriter results);
    public void Transform(XmlReader input, XmlWriter results);
    public void Transform(XmlReader input, XsltArgumentList arguments, Stream results);
    public void Transform(XmlReader input, XsltArgumentList arguments, TextWriter results);
    public void Transform(XmlReader input, XsltArgumentList arguments, XmlWriter results);
    public void Transform(XmlReader input, XsltArgumentList arguments, XmlWriter results, XmlResolver documentResolver);
    public void Transform(IXPathNavigable input, XmlWriter results);
    public void Transform(IXPathNavigable input, XsltArgumentList arguments, Stream results);
    public void Transform(IXPathNavigable input, XsltArgumentList arguments, TextWriter results);
    public void Transform(IXPathNavigable input, XsltArgumentList arguments, XmlWriter results);
    public void Transform(IXPathNavigable input, XsltArgumentList arguments, XmlWriter results, XmlResolver documentResolver);
}
public class System.Xml.Xsl.XsltArgumentList : object {
    public void add_XsltMessageEncountered(XsltMessageEncounteredEventHandler value);
    public void remove_XsltMessageEncountered(XsltMessageEncounteredEventHandler value);
    public void AddExtensionObject(string namespaceUri, object extension);
    public void AddParam(string name, string namespaceUri, object parameter);
    public void Clear();
    public object GetExtensionObject(string namespaceUri);
    public object GetParam(string name, string namespaceUri);
    public object RemoveExtensionObject(string namespaceUri);
    public object RemoveParam(string name, string namespaceUri);
}
public class System.Xml.Xsl.XsltCompileException : XsltException {
    public XsltCompileException(Exception inner, string sourceUri, int lineNumber, int linePosition);
    protected XsltCompileException(SerializationInfo info, StreamingContext context);
    public XsltCompileException(string message);
    public XsltCompileException(string message, Exception innerException);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public abstract class System.Xml.Xsl.XsltContext : XmlNamespaceManager {
    public bool Whitespace { get; }
    protected XsltContext(NameTable table);
    public abstract virtual bool get_Whitespace();
    public abstract virtual int CompareDocument(string baseUri, string nextbaseUri);
    public abstract virtual bool PreserveWhitespace(XPathNavigator node);
    public abstract virtual IXsltContextFunction ResolveFunction(string prefix, string name, XPathResultType[] ArgTypes);
    public abstract virtual IXsltContextVariable ResolveVariable(string prefix, string name);
}
public class System.Xml.Xsl.XsltException : SystemException {
    public int LineNumber { get; }
    public int LinePosition { get; }
    public string Message { get; }
    public string SourceUri { get; }
    protected XsltException(SerializationInfo info, StreamingContext context);
    public XsltException(string message);
    public XsltException(string message, Exception innerException);
    public virtual int get_LineNumber();
    public virtual int get_LinePosition();
    public virtual string get_Message();
    public virtual string get_SourceUri();
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
}
public abstract class System.Xml.Xsl.XsltMessageEncounteredEventArgs : EventArgs {
    public string Message { get; }
    public abstract virtual string get_Message();
}
public class System.Xml.Xsl.XsltMessageEncounteredEventHandler : MulticastDelegate {
    public XsltMessageEncounteredEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XsltMessageEncounteredEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XsltMessageEncounteredEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[ObsoleteAttribute("This class has been deprecated. Please use System.Xml.Xsl.XslCompiledTransform instead. http://go.microsoft.com/fwlink/?linkid=14202")]
public class System.Xml.Xsl.XslTransform : object {
    unknown XmlResolver XmlResolver {public set; }
    public void set_XmlResolver(XmlResolver value);
    public void Load(string url);
    public void Load(string url, XmlResolver resolver);
    public void Load(XmlReader stylesheet);
    public void Load(XmlReader stylesheet, XmlResolver resolver);
    public void Load(IXPathNavigable stylesheet);
    public void Load(IXPathNavigable stylesheet, XmlResolver resolver);
    public void Load(XPathNavigator stylesheet);
    public void Load(XPathNavigator stylesheet, XmlResolver resolver);
    public void Transform(string inputfile, string outputfile);
    public void Transform(string inputfile, string outputfile, XmlResolver resolver);
    public XmlReader Transform(IXPathNavigable input, XsltArgumentList args);
    public void Transform(IXPathNavigable input, XsltArgumentList args, Stream output);
    public void Transform(IXPathNavigable input, XsltArgumentList args, Stream output, XmlResolver resolver);
    public void Transform(IXPathNavigable input, XsltArgumentList args, TextWriter output);
    public void Transform(IXPathNavigable input, XsltArgumentList args, TextWriter output, XmlResolver resolver);
    public XmlReader Transform(IXPathNavigable input, XsltArgumentList args, XmlResolver resolver);
    public void Transform(IXPathNavigable input, XsltArgumentList args, XmlWriter output);
    public void Transform(IXPathNavigable input, XsltArgumentList args, XmlWriter output, XmlResolver resolver);
    public XmlReader Transform(XPathNavigator input, XsltArgumentList args);
    public void Transform(XPathNavigator input, XsltArgumentList args, Stream output);
    public void Transform(XPathNavigator input, XsltArgumentList args, Stream output, XmlResolver resolver);
    public void Transform(XPathNavigator input, XsltArgumentList args, TextWriter output);
    public void Transform(XPathNavigator input, XsltArgumentList args, TextWriter output, XmlResolver resolver);
    public XmlReader Transform(XPathNavigator input, XsltArgumentList args, XmlResolver resolver);
    public void Transform(XPathNavigator input, XsltArgumentList args, XmlWriter output);
    public void Transform(XPathNavigator input, XsltArgumentList args, XmlWriter output, XmlResolver resolver);
}
public class System.Xml.Xsl.XsltSettings : object {
    public static XsltSettings Default { get; }
    public bool EnableDocumentFunction { get; public set; }
    public bool EnableScript { get; public set; }
    public static XsltSettings TrustedXslt { get; }
    public XsltSettings(bool enableDocumentFunction, bool enableScript);
    public static XsltSettings get_Default();
    public bool get_EnableDocumentFunction();
    public void set_EnableDocumentFunction(bool value);
    public bool get_EnableScript();
    public void set_EnableScript(bool value);
    public static XsltSettings get_TrustedXslt();
}
