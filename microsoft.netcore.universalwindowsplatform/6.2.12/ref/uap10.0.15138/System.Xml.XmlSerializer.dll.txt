[AttributeUsageAttribute("32767")]
internal class System.Runtime.CompilerServices.__BlockReflectionAttribute : Attribute {
}
[FlagsAttribute]
public enum System.Xml.Serialization.CodeGenerationOptions : Enum {
    public int value__;
    public static CodeGenerationOptions EnableDataBinding;
    public static CodeGenerationOptions GenerateNewAsync;
    public static CodeGenerationOptions GenerateOldAsync;
    public static CodeGenerationOptions GenerateOrder;
    public static CodeGenerationOptions GenerateProperties;
    public static CodeGenerationOptions None;
}
public class System.Xml.Serialization.CodeIdentifier : object {
    public static string MakeCamel(string identifier);
    public static string MakePascal(string identifier);
    public static string MakeValid(string identifier);
}
public class System.Xml.Serialization.CodeIdentifiers : object {
    public bool UseCamelCasing { get; public set; }
    public CodeIdentifiers(bool caseSensitive);
    public bool get_UseCamelCasing();
    public void set_UseCamelCasing(bool value);
    public void Add(string identifier, object value);
    public void AddReserved(string identifier);
    public string AddUnique(string identifier, object value);
    public void Clear();
    public bool IsInUse(string identifier);
    public string MakeRightCase(string identifier);
    public string MakeUnique(string identifier);
    public void Remove(string identifier);
    public void RemoveReserved(string identifier);
    public object ToArray(Type type);
}
public class System.Xml.Serialization.ImportContext : object {
    public bool ShareTypes { get; }
    public CodeIdentifiers TypeIdentifiers { get; }
    public StringCollection Warnings { get; }
    public ImportContext(CodeIdentifiers identifiers, bool shareTypes);
    public bool get_ShareTypes();
    public CodeIdentifiers get_TypeIdentifiers();
    public StringCollection get_Warnings();
}
public interface System.Xml.Serialization.IXmlTextParser {
    public bool Normalized { get; public set; }
    public WhitespaceHandling WhitespaceHandling { get; public set; }
    public abstract virtual bool get_Normalized();
    public abstract virtual void set_Normalized(bool value);
    public abstract virtual WhitespaceHandling get_WhitespaceHandling();
    public abstract virtual void set_WhitespaceHandling(WhitespaceHandling value);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.SoapAttributeAttribute : Attribute {
    public string AttributeName { get; public set; }
    public string DataType { get; public set; }
    public string Namespace { get; public set; }
    public SoapAttributeAttribute(string attributeName);
    public string get_AttributeName();
    public void set_AttributeName(string value);
    public string get_DataType();
    public void set_DataType(string value);
    public string get_Namespace();
    public void set_Namespace(string value);
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Serialization.SoapAttributeOverrides : object {
    public SoapAttributes Item { get; }
    public SoapAttributes Item { get; }
    public SoapAttributes get_Item(Type type);
    public SoapAttributes get_Item(Type type, string member);
    public void Add(Type type, string member, SoapAttributes attributes);
    public void Add(Type type, SoapAttributes attributes);
}
public class System.Xml.Serialization.SoapAttributes : object {
    public SoapAttributeAttribute SoapAttribute { get; public set; }
    public object SoapDefaultValue { get; public set; }
    public SoapElementAttribute SoapElement { get; public set; }
    public SoapEnumAttribute SoapEnum { get; public set; }
    public bool SoapIgnore { get; public set; }
    public SoapTypeAttribute SoapType { get; public set; }
    public SoapAttributes(ICustomAttributeProvider provider);
    public SoapAttributeAttribute get_SoapAttribute();
    public void set_SoapAttribute(SoapAttributeAttribute value);
    public object get_SoapDefaultValue();
    public void set_SoapDefaultValue(object value);
    public SoapElementAttribute get_SoapElement();
    public void set_SoapElement(SoapElementAttribute value);
    public SoapEnumAttribute get_SoapEnum();
    public void set_SoapEnum(SoapEnumAttribute value);
    public bool get_SoapIgnore();
    public void set_SoapIgnore(bool value);
    public SoapTypeAttribute get_SoapType();
    public void set_SoapType(SoapTypeAttribute value);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.SoapElementAttribute : Attribute {
    public string DataType { get; public set; }
    public string ElementName { get; public set; }
    public bool IsNullable { get; public set; }
    public SoapElementAttribute(string elementName);
    public string get_DataType();
    public void set_DataType(string value);
    public string get_ElementName();
    public void set_ElementName(string value);
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
}
[AttributeUsageAttribute("256")]
public class System.Xml.Serialization.SoapEnumAttribute : Attribute {
    public string Name { get; public set; }
    public SoapEnumAttribute(string name);
    public string get_Name();
    public void set_Name(string value);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.SoapIgnoreAttribute : Attribute {
}
[AttributeUsageAttribute("1100")]
public class System.Xml.Serialization.SoapIncludeAttribute : Attribute {
    public Type Type { get; public set; }
    public SoapIncludeAttribute(Type type);
    public Type get_Type();
    public void set_Type(Type value);
}
public class System.Xml.Serialization.SoapReflectionImporter : object {
    public SoapReflectionImporter(string defaultNamespace);
    public SoapReflectionImporter(SoapAttributeOverrides attributeOverrides);
    public SoapReflectionImporter(SoapAttributeOverrides attributeOverrides, string defaultNamespace);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool writeAccessors);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool writeAccessors, bool validate);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool writeAccessors, bool validate, XmlMappingAccess access);
    public XmlTypeMapping ImportTypeMapping(Type type);
    public XmlTypeMapping ImportTypeMapping(Type type, string defaultNamespace);
    public void IncludeType(Type type);
    public void IncludeTypes(ICustomAttributeProvider provider);
}
public class System.Xml.Serialization.SoapSchemaMember : object {
    public string MemberName { get; public set; }
    public XmlQualifiedName MemberType { get; public set; }
    public string get_MemberName();
    public void set_MemberName(string value);
    public XmlQualifiedName get_MemberType();
    public void set_MemberType(XmlQualifiedName value);
}
[AttributeUsageAttribute("1052")]
public class System.Xml.Serialization.SoapTypeAttribute : Attribute {
    public bool IncludeInSchema { get; public set; }
    public string Namespace { get; public set; }
    public string TypeName { get; public set; }
    public SoapTypeAttribute(string typeName);
    public SoapTypeAttribute(string typeName, string ns);
    public bool get_IncludeInSchema();
    public void set_IncludeInSchema(bool value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_TypeName();
    public void set_TypeName(string value);
}
public class System.Xml.Serialization.UnreferencedObjectEventArgs : EventArgs {
    public string UnreferencedId { get; }
    public object UnreferencedObject { get; }
    public UnreferencedObjectEventArgs(object o, string id);
    public string get_UnreferencedId();
    public object get_UnreferencedObject();
}
public class System.Xml.Serialization.UnreferencedObjectEventHandler : MulticastDelegate {
    public UnreferencedObjectEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, UnreferencedObjectEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, UnreferencedObjectEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Serialization.XmlAnyElementAttributes : CollectionBase {
    public XmlAnyElementAttribute Item { get; public set; }
    public XmlAnyElementAttribute get_Item(int index);
    public void set_Item(int index, XmlAnyElementAttribute value);
    public int Add(XmlAnyElementAttribute attribute);
    public bool Contains(XmlAnyElementAttribute attribute);
    public void CopyTo(XmlAnyElementAttribute[] array, int index);
    public int IndexOf(XmlAnyElementAttribute attribute);
    public void Insert(int index, XmlAnyElementAttribute attribute);
    public void Remove(XmlAnyElementAttribute attribute);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlArrayAttribute : Attribute {
    public string ElementName { get; public set; }
    public XmlSchemaForm Form { get; public set; }
    public bool IsNullable { get; public set; }
    public string Namespace { get; public set; }
    public int Order { get; public set; }
    public XmlArrayAttribute(string elementName);
    public string get_ElementName();
    public void set_ElementName(string value);
    public XmlSchemaForm get_Form();
    public void set_Form(XmlSchemaForm value);
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public int get_Order();
    public void set_Order(int value);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlArrayItemAttribute : Attribute {
    public string DataType { get; public set; }
    public string ElementName { get; public set; }
    public XmlSchemaForm Form { get; public set; }
    public bool IsNullable { get; public set; }
    public string Namespace { get; public set; }
    public int NestingLevel { get; public set; }
    public Type Type { get; public set; }
    public XmlArrayItemAttribute(string elementName);
    public XmlArrayItemAttribute(string elementName, Type type);
    public XmlArrayItemAttribute(Type type);
    public string get_DataType();
    public void set_DataType(string value);
    public string get_ElementName();
    public void set_ElementName(string value);
    public XmlSchemaForm get_Form();
    public void set_Form(XmlSchemaForm value);
    public bool get_IsNullable();
    public void set_IsNullable(bool value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public int get_NestingLevel();
    public void set_NestingLevel(int value);
    public Type get_Type();
    public void set_Type(Type value);
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Serialization.XmlArrayItemAttributes : CollectionBase {
    public XmlArrayItemAttribute Item { get; public set; }
    public XmlArrayItemAttribute get_Item(int index);
    public void set_Item(int index, XmlArrayItemAttribute value);
    public int Add(XmlArrayItemAttribute attribute);
    public bool Contains(XmlArrayItemAttribute attribute);
    public void CopyTo(XmlArrayItemAttribute[] array, int index);
    public int IndexOf(XmlArrayItemAttribute attribute);
    public void Insert(int index, XmlArrayItemAttribute attribute);
    public void Remove(XmlArrayItemAttribute attribute);
}
public class System.Xml.Serialization.XmlAttributeEventArgs : EventArgs {
    public XmlAttribute Attr { get; }
    public string ExpectedAttributes { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public object ObjectBeingDeserialized { get; }
    public XmlAttribute get_Attr();
    public string get_ExpectedAttributes();
    public int get_LineNumber();
    public int get_LinePosition();
    public object get_ObjectBeingDeserialized();
}
public class System.Xml.Serialization.XmlAttributeEventHandler : MulticastDelegate {
    public XmlAttributeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XmlAttributeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XmlAttributeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Serialization.XmlAttributeOverrides : object {
    public XmlAttributes Item { get; }
    public XmlAttributes Item { get; }
    public XmlAttributes get_Item(Type type);
    public XmlAttributes get_Item(Type type, string member);
    public void Add(Type type, string member, XmlAttributes attributes);
    public void Add(Type type, XmlAttributes attributes);
}
public class System.Xml.Serialization.XmlAttributes : object {
    public XmlAnyAttributeAttribute XmlAnyAttribute { get; public set; }
    public XmlAnyElementAttributes XmlAnyElements { get; }
    public XmlArrayAttribute XmlArray { get; public set; }
    public XmlArrayItemAttributes XmlArrayItems { get; }
    public XmlAttributeAttribute XmlAttribute { get; public set; }
    public XmlChoiceIdentifierAttribute XmlChoiceIdentifier { get; }
    public object XmlDefaultValue { get; public set; }
    public XmlElementAttributes XmlElements { get; }
    public XmlEnumAttribute XmlEnum { get; public set; }
    public bool XmlIgnore { get; public set; }
    public bool Xmlns { get; public set; }
    public XmlRootAttribute XmlRoot { get; public set; }
    public XmlTextAttribute XmlText { get; public set; }
    public XmlTypeAttribute XmlType { get; public set; }
    public XmlAttributes(ICustomAttributeProvider provider);
    public XmlAnyAttributeAttribute get_XmlAnyAttribute();
    public void set_XmlAnyAttribute(XmlAnyAttributeAttribute value);
    public XmlAnyElementAttributes get_XmlAnyElements();
    public XmlArrayAttribute get_XmlArray();
    public void set_XmlArray(XmlArrayAttribute value);
    public XmlArrayItemAttributes get_XmlArrayItems();
    public XmlAttributeAttribute get_XmlAttribute();
    public void set_XmlAttribute(XmlAttributeAttribute value);
    public XmlChoiceIdentifierAttribute get_XmlChoiceIdentifier();
    public object get_XmlDefaultValue();
    public void set_XmlDefaultValue(object value);
    public XmlElementAttributes get_XmlElements();
    public XmlEnumAttribute get_XmlEnum();
    public void set_XmlEnum(XmlEnumAttribute value);
    public bool get_XmlIgnore();
    public void set_XmlIgnore(bool value);
    public bool get_Xmlns();
    public void set_Xmlns(bool value);
    public XmlRootAttribute get_XmlRoot();
    public void set_XmlRoot(XmlRootAttribute value);
    public XmlTextAttribute get_XmlText();
    public void set_XmlText(XmlTextAttribute value);
    public XmlTypeAttribute get_XmlType();
    public void set_XmlType(XmlTypeAttribute value);
}
[AttributeUsageAttribute("10624")]
public class System.Xml.Serialization.XmlChoiceIdentifierAttribute : Attribute {
    public string MemberName { get; public set; }
    public XmlChoiceIdentifierAttribute(string name);
    public string get_MemberName();
    public void set_MemberName(string value);
}
public class System.Xml.Serialization.XmlDeserializationEvents : ValueType {
    public XmlAttributeEventHandler OnUnknownAttribute { get; public set; }
    public XmlElementEventHandler OnUnknownElement { get; public set; }
    public XmlNodeEventHandler OnUnknownNode { get; public set; }
    public UnreferencedObjectEventHandler OnUnreferencedObject { get; public set; }
    public XmlAttributeEventHandler get_OnUnknownAttribute();
    public void set_OnUnknownAttribute(XmlAttributeEventHandler value);
    public XmlElementEventHandler get_OnUnknownElement();
    public void set_OnUnknownElement(XmlElementEventHandler value);
    public XmlNodeEventHandler get_OnUnknownNode();
    public void set_OnUnknownNode(XmlNodeEventHandler value);
    public UnreferencedObjectEventHandler get_OnUnreferencedObject();
    public void set_OnUnreferencedObject(UnreferencedObjectEventHandler value);
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Serialization.XmlElementAttributes : CollectionBase {
    public XmlElementAttribute Item { get; public set; }
    public XmlElementAttribute get_Item(int index);
    public void set_Item(int index, XmlElementAttribute value);
    public int Add(XmlElementAttribute attribute);
    public bool Contains(XmlElementAttribute attribute);
    public void CopyTo(XmlElementAttribute[] array, int index);
    public int IndexOf(XmlElementAttribute attribute);
    public void Insert(int index, XmlElementAttribute attribute);
    public void Remove(XmlElementAttribute attribute);
}
public class System.Xml.Serialization.XmlElementEventArgs : EventArgs {
    public XmlElement Element { get; }
    public string ExpectedElements { get; }
    public int LineNumber { get; }
    public int LinePosition { get; }
    public object ObjectBeingDeserialized { get; }
    public XmlElement get_Element();
    public string get_ExpectedElements();
    public int get_LineNumber();
    public int get_LinePosition();
    public object get_ObjectBeingDeserialized();
}
public class System.Xml.Serialization.XmlElementEventHandler : MulticastDelegate {
    public XmlElementEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XmlElementEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XmlElementEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[AttributeUsageAttribute("1100")]
public class System.Xml.Serialization.XmlIncludeAttribute : Attribute {
    public Type Type { get; public set; }
    public XmlIncludeAttribute(Type type);
    public Type get_Type();
    public void set_Type(Type value);
}
public abstract class System.Xml.Serialization.XmlMapping : object {
    public string ElementName { get; }
    public string Namespace { get; }
    public string XsdElementName { get; }
    public string get_ElementName();
    public string get_Namespace();
    public string get_XsdElementName();
    public void SetKey(string key);
}
[FlagsAttribute]
public enum System.Xml.Serialization.XmlMappingAccess : Enum {
    public int value__;
    public static XmlMappingAccess None;
    public static XmlMappingAccess Read;
    public static XmlMappingAccess Write;
}
public class System.Xml.Serialization.XmlMemberMapping : object {
    public bool Any { get; }
    public bool CheckSpecified { get; }
    public string ElementName { get; }
    public string MemberName { get; }
    public string Namespace { get; }
    public string TypeFullName { get; }
    public string TypeName { get; }
    public string TypeNamespace { get; }
    public string XsdElementName { get; }
    public bool get_Any();
    public bool get_CheckSpecified();
    public string get_ElementName();
    public string get_MemberName();
    public string get_Namespace();
    public string get_TypeFullName();
    public string get_TypeName();
    public string get_TypeNamespace();
    public string get_XsdElementName();
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Serialization.XmlMembersMapping : XmlMapping {
    public int Count { get; }
    public XmlMemberMapping Item { get; }
    public string TypeName { get; }
    public string TypeNamespace { get; }
    public int get_Count();
    public XmlMemberMapping get_Item(int index);
    public string get_TypeName();
    public string get_TypeNamespace();
}
public class System.Xml.Serialization.XmlNodeEventArgs : EventArgs {
    public int LineNumber { get; }
    public int LinePosition { get; }
    public string LocalName { get; }
    public string Name { get; }
    public string NamespaceURI { get; }
    public XmlNodeType NodeType { get; }
    public object ObjectBeingDeserialized { get; }
    public string Text { get; }
    public int get_LineNumber();
    public int get_LinePosition();
    public string get_LocalName();
    public string get_Name();
    public string get_NamespaceURI();
    public XmlNodeType get_NodeType();
    public object get_ObjectBeingDeserialized();
    public string get_Text();
}
public class System.Xml.Serialization.XmlNodeEventHandler : MulticastDelegate {
    public XmlNodeEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, XmlNodeEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, XmlNodeEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Xml.Serialization.XmlReflectionImporter : object {
    public XmlReflectionImporter(string defaultNamespace);
    public XmlReflectionImporter(XmlAttributeOverrides attributeOverrides);
    public XmlReflectionImporter(XmlAttributeOverrides attributeOverrides, string defaultNamespace);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool rpc);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool rpc, bool openModel);
    public XmlMembersMapping ImportMembersMapping(string elementName, string ns, XmlReflectionMember[] members, bool hasWrapperElement, bool rpc, bool openModel, XmlMappingAccess access);
    public XmlTypeMapping ImportTypeMapping(Type type);
    public XmlTypeMapping ImportTypeMapping(Type type, string defaultNamespace);
    public XmlTypeMapping ImportTypeMapping(Type type, XmlRootAttribute root);
    public XmlTypeMapping ImportTypeMapping(Type type, XmlRootAttribute root, string defaultNamespace);
    public void IncludeType(Type type);
    public void IncludeTypes(ICustomAttributeProvider provider);
}
public class System.Xml.Serialization.XmlReflectionMember : object {
    public bool IsReturnValue { get; public set; }
    public string MemberName { get; public set; }
    public Type MemberType { get; public set; }
    public bool OverrideIsNullable { get; public set; }
    public SoapAttributes SoapAttributes { get; public set; }
    public XmlAttributes XmlAttributes { get; public set; }
    public bool get_IsReturnValue();
    public void set_IsReturnValue(bool value);
    public string get_MemberName();
    public void set_MemberName(string value);
    public Type get_MemberType();
    public void set_MemberType(Type value);
    public bool get_OverrideIsNullable();
    public void set_OverrideIsNullable(bool value);
    public SoapAttributes get_SoapAttributes();
    public void set_SoapAttributes(SoapAttributes value);
    public XmlAttributes get_XmlAttributes();
    public void set_XmlAttributes(XmlAttributes value);
}
public class System.Xml.Serialization.XmlSchemaEnumerator : object {
    public XmlSchema Current { get; }
    private object System.Collections.IEnumerator.Current { get; }
    public XmlSchemaEnumerator(XmlSchemas list);
    public sealed virtual XmlSchema get_Current();
    private sealed virtual override object System.Collections.IEnumerator.get_Current();
    public sealed virtual void Dispose();
    public sealed virtual bool MoveNext();
    private sealed virtual override void System.Collections.IEnumerator.Reset();
}
public class System.Xml.Serialization.XmlSchemaExporter : object {
    public XmlSchemaExporter(XmlSchemas schemas);
    public string ExportAnyType(string ns);
    public string ExportAnyType(XmlMembersMapping members);
    public void ExportMembersMapping(XmlMembersMapping xmlMembersMapping);
    public void ExportMembersMapping(XmlMembersMapping xmlMembersMapping, bool exportEnclosingType);
    public XmlQualifiedName ExportTypeMapping(XmlMembersMapping xmlMembersMapping);
    public void ExportTypeMapping(XmlTypeMapping xmlTypeMapping);
}
public class System.Xml.Serialization.XmlSchemaImporter : object {
    public XmlSchemaImporter(XmlSchemas schemas);
    public XmlSchemaImporter(XmlSchemas schemas, CodeIdentifiers typeIdentifiers);
    public XmlMembersMapping ImportAnyType(XmlQualifiedName typeName, string elementName);
    public XmlTypeMapping ImportDerivedTypeMapping(XmlQualifiedName name, Type baseType);
    public XmlTypeMapping ImportDerivedTypeMapping(XmlQualifiedName name, Type baseType, bool baseTypeCanBeIndirect);
    public XmlMembersMapping ImportMembersMapping(string name, string ns, SoapSchemaMember[] members);
    public XmlMembersMapping ImportMembersMapping(XmlQualifiedName name);
    public XmlMembersMapping ImportMembersMapping(XmlQualifiedName[] names);
    public XmlMembersMapping ImportMembersMapping(XmlQualifiedName[] names, Type baseType, bool baseTypeCanBeIndirect);
    public XmlTypeMapping ImportSchemaType(XmlQualifiedName typeName);
    public XmlTypeMapping ImportSchemaType(XmlQualifiedName typeName, Type baseType);
    public XmlTypeMapping ImportSchemaType(XmlQualifiedName typeName, Type baseType, bool baseTypeCanBeIndirect);
    public XmlTypeMapping ImportTypeMapping(XmlQualifiedName name);
}
[DefaultMemberAttribute("Item")]
public class System.Xml.Serialization.XmlSchemas : CollectionBase {
    public bool IsCompiled { get; }
    public XmlSchema Item { get; public set; }
    public XmlSchema Item { get; }
    public bool get_IsCompiled();
    public XmlSchema get_Item(int index);
    public void set_Item(int index, XmlSchema value);
    public XmlSchema get_Item(string ns);
    public int Add(XmlSchema schema);
    public int Add(XmlSchema schema, Uri baseUri);
    public void Add(XmlSchemas schemas);
    public void AddReference(XmlSchema schema);
    public void Compile(ValidationEventHandler handler, bool fullCompile);
    public bool Contains(string targetNamespace);
    public bool Contains(XmlSchema schema);
    public void CopyTo(XmlSchema[] array, int index);
    public object Find(XmlQualifiedName name, Type type);
    public IList GetSchemas(string ns);
    public int IndexOf(XmlSchema schema);
    public void Insert(int index, XmlSchema schema);
    public static bool IsDataSet(XmlSchema schema);
    protected virtual void OnClear();
    protected virtual void OnInsert(int index, object value);
    protected virtual void OnRemove(int index, object value);
    protected virtual void OnSet(int index, object oldValue, object newValue);
    public void Remove(XmlSchema schema);
    private sealed virtual override IEnumerator`1<XmlSchema> System.Collections.Generic.IEnumerable<System.Xml.Schema.XmlSchema>.GetEnumerator();
}
public class System.Xml.Serialization.XmlSerializationCollectionFixupCallback : MulticastDelegate {
    public XmlSerializationCollectionFixupCallback(object object, IntPtr method);
    public virtual void Invoke(object collection, object collectionItems);
    public virtual IAsyncResult BeginInvoke(object collection, object collectionItems, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Xml.Serialization.XmlSerializationFixupCallback : MulticastDelegate {
    public XmlSerializationFixupCallback(object object, IntPtr method);
    public virtual void Invoke(object fixup);
    public virtual IAsyncResult BeginInvoke(object fixup, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class System.Xml.Serialization.XmlSerializationGeneratedCode : object {
}
public class System.Xml.Serialization.XmlSerializationReadCallback : MulticastDelegate {
    public XmlSerializationReadCallback(object object, IntPtr method);
    public virtual object Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual object EndInvoke(IAsyncResult result);
}
public abstract class System.Xml.Serialization.XmlSerializationReader : XmlSerializationGeneratedCode {
    protected bool DecodeName { get; protected set; }
    protected XmlDocument Document { get; }
    protected bool IsReturnValue { get; protected set; }
    protected XmlReader Reader { get; }
    protected int ReaderCount { get; }
    protected bool get_DecodeName();
    protected void set_DecodeName(bool value);
    protected XmlDocument get_Document();
    protected bool get_IsReturnValue();
    protected void set_IsReturnValue(bool value);
    protected XmlReader get_Reader();
    protected int get_ReaderCount();
    protected void AddFixup(CollectionFixup fixup);
    protected void AddFixup(Fixup fixup);
    protected void AddReadCallback(string name, string ns, Type type, XmlSerializationReadCallback read);
    protected void AddTarget(string id, object o);
    protected void CheckReaderCount(Int32& whileIterations, Int32& readerCount);
    protected string CollapseWhitespace(string value);
    protected Exception CreateAbstractTypeException(string name, string ns);
    protected Exception CreateBadDerivationException(string xsdDerived, string nsDerived, string xsdBase, string nsBase, string clrDerived, string clrBase);
    protected Exception CreateCtorHasSecurityException(string typeName);
    protected Exception CreateInaccessibleConstructorException(string typeName);
    protected Exception CreateInvalidCastException(Type type, object value);
    protected Exception CreateInvalidCastException(Type type, object value, string id);
    protected Exception CreateMissingIXmlSerializableType(string name, string ns, string clrType);
    protected Exception CreateReadOnlyCollectionException(string name);
    protected Exception CreateUnknownConstantException(string value, Type enumType);
    protected Exception CreateUnknownNodeException();
    protected Exception CreateUnknownTypeException(XmlQualifiedName type);
    protected Array EnsureArrayIndex(Array a, int index, Type elementType);
    protected void FixupArrayRefs(object fixup);
    protected int GetArrayLength(string name, string ns);
    protected bool GetNullAttr();
    protected object GetTarget(string id);
    protected XmlQualifiedName GetXsiType();
    protected abstract virtual void InitCallbacks();
    protected abstract virtual void InitIDs();
    protected bool IsXmlnsAttribute(string name);
    protected void ParseWsdlArrayType(XmlAttribute attr);
    protected XmlQualifiedName ReadElementQualifiedName();
    protected void ReadEndElement();
    protected bool ReadNull();
    protected XmlQualifiedName ReadNullableQualifiedName();
    protected string ReadNullableString();
    protected bool ReadReference(String& fixupReference);
    protected object ReadReferencedElement();
    protected object ReadReferencedElement(string name, string ns);
    protected void ReadReferencedElements();
    protected object ReadReferencingElement(string name, string ns, bool elementCanBeType, String& fixupReference);
    protected object ReadReferencingElement(string name, string ns, String& fixupReference);
    protected object ReadReferencingElement(String& fixupReference);
    protected IXmlSerializable ReadSerializable(IXmlSerializable serializable);
    protected IXmlSerializable ReadSerializable(IXmlSerializable serializable, bool wrappedAny);
    protected string ReadString(string value);
    protected string ReadString(string value, bool trim);
    protected object ReadTypedNull(XmlQualifiedName type);
    protected object ReadTypedPrimitive(XmlQualifiedName type);
    protected XmlDocument ReadXmlDocument(bool wrapped);
    protected XmlNode ReadXmlNode(bool wrapped);
    protected void Referenced(object o);
    protected static Assembly ResolveDynamicAssembly(string assemblyFullName);
    protected Array ShrinkArray(Array a, int length, Type elementType, bool isNullable);
    protected Byte[] ToByteArrayBase64(bool isNull);
    protected static Byte[] ToByteArrayBase64(string value);
    protected Byte[] ToByteArrayHex(bool isNull);
    protected static Byte[] ToByteArrayHex(string value);
    protected static char ToChar(string value);
    protected static DateTime ToDate(string value);
    protected static DateTime ToDateTime(string value);
    protected static long ToEnum(string value, Hashtable h, string typeName);
    protected static DateTime ToTime(string value);
    protected static string ToXmlName(string value);
    protected static string ToXmlNCName(string value);
    protected static string ToXmlNmToken(string value);
    protected static string ToXmlNmTokens(string value);
    protected XmlQualifiedName ToXmlQualifiedName(string value);
    protected void UnknownAttribute(object o, XmlAttribute attr);
    protected void UnknownAttribute(object o, XmlAttribute attr, string qnames);
    protected void UnknownElement(object o, XmlElement elem);
    protected void UnknownElement(object o, XmlElement elem, string qnames);
    protected void UnknownNode(object o);
    protected void UnknownNode(object o, string qnames);
    protected void UnreferencedObject(string id, object o);
}
public class System.Xml.Serialization.XmlSerializationWriteCallback : MulticastDelegate {
    public XmlSerializationWriteCallback(object object, IntPtr method);
    public virtual void Invoke(object o);
    public virtual IAsyncResult BeginInvoke(object o, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public abstract class System.Xml.Serialization.XmlSerializationWriter : XmlSerializationGeneratedCode {
    protected bool EscapeName { get; protected set; }
    protected ArrayList Namespaces { get; protected set; }
    protected XmlWriter Writer { get; protected set; }
    protected bool get_EscapeName();
    protected void set_EscapeName(bool value);
    protected ArrayList get_Namespaces();
    protected void set_Namespaces(ArrayList value);
    protected XmlWriter get_Writer();
    protected void set_Writer(XmlWriter value);
    protected void AddWriteCallback(Type type, string typeName, string typeNs, XmlSerializationWriteCallback callback);
    protected Exception CreateChoiceIdentifierValueException(string value, string identifier, string name, string ns);
    protected Exception CreateInvalidAnyTypeException(object o);
    protected Exception CreateInvalidAnyTypeException(Type type);
    protected Exception CreateInvalidChoiceIdentifierValueException(string type, string identifier);
    protected Exception CreateInvalidEnumValueException(object value, string typeName);
    protected Exception CreateMismatchChoiceException(string value, string elementName, string enumValue);
    protected Exception CreateUnknownAnyElementException(string name, string ns);
    protected Exception CreateUnknownTypeException(object o);
    protected Exception CreateUnknownTypeException(Type type);
    protected static Byte[] FromByteArrayBase64(Byte[] value);
    protected static string FromByteArrayHex(Byte[] value);
    protected static string FromChar(char value);
    protected static string FromDate(DateTime value);
    protected static string FromDateTime(DateTime value);
    protected static string FromEnum(long value, String[] values, Int64[] ids);
    protected static string FromEnum(long value, String[] values, Int64[] ids, string typeName);
    protected static string FromTime(DateTime value);
    protected static string FromXmlName(string name);
    protected static string FromXmlNCName(string ncName);
    protected static string FromXmlNmToken(string nmToken);
    protected static string FromXmlNmTokens(string nmTokens);
    protected string FromXmlQualifiedName(XmlQualifiedName xmlQualifiedName);
    protected string FromXmlQualifiedName(XmlQualifiedName xmlQualifiedName, bool ignoreEmpty);
    protected abstract virtual void InitCallbacks();
    protected static Assembly ResolveDynamicAssembly(string assemblyFullName);
    protected void TopLevelElement();
    protected void WriteAttribute(string localName, Byte[] value);
    protected void WriteAttribute(string localName, string value);
    protected void WriteAttribute(string localName, string ns, Byte[] value);
    protected void WriteAttribute(string localName, string ns, string value);
    protected void WriteAttribute(string prefix, string localName, string ns, string value);
    protected void WriteElementEncoded(XmlNode node, string name, string ns, bool isNullable, bool any);
    protected void WriteElementLiteral(XmlNode node, string name, string ns, bool isNullable, bool any);
    protected void WriteElementQualifiedName(string localName, string ns, XmlQualifiedName value);
    protected void WriteElementQualifiedName(string localName, string ns, XmlQualifiedName value, XmlQualifiedName xsiType);
    protected void WriteElementQualifiedName(string localName, XmlQualifiedName value);
    protected void WriteElementQualifiedName(string localName, XmlQualifiedName value, XmlQualifiedName xsiType);
    protected void WriteElementString(string localName, string value);
    protected void WriteElementString(string localName, string ns, string value);
    protected void WriteElementString(string localName, string ns, string value, XmlQualifiedName xsiType);
    protected void WriteElementString(string localName, string value, XmlQualifiedName xsiType);
    protected void WriteElementStringRaw(string localName, Byte[] value);
    protected void WriteElementStringRaw(string localName, Byte[] value, XmlQualifiedName xsiType);
    protected void WriteElementStringRaw(string localName, string value);
    protected void WriteElementStringRaw(string localName, string ns, Byte[] value);
    protected void WriteElementStringRaw(string localName, string ns, Byte[] value, XmlQualifiedName xsiType);
    protected void WriteElementStringRaw(string localName, string ns, string value);
    protected void WriteElementStringRaw(string localName, string ns, string value, XmlQualifiedName xsiType);
    protected void WriteElementStringRaw(string localName, string value, XmlQualifiedName xsiType);
    protected void WriteEmptyTag(string name);
    protected void WriteEmptyTag(string name, string ns);
    protected void WriteEndElement();
    protected void WriteEndElement(object o);
    protected void WriteId(object o);
    protected void WriteNamespaceDeclarations(XmlSerializerNamespaces xmlns);
    protected void WriteNullableQualifiedNameEncoded(string name, string ns, XmlQualifiedName value, XmlQualifiedName xsiType);
    protected void WriteNullableQualifiedNameLiteral(string name, string ns, XmlQualifiedName value);
    protected void WriteNullableStringEncoded(string name, string ns, string value, XmlQualifiedName xsiType);
    protected void WriteNullableStringEncodedRaw(string name, string ns, Byte[] value, XmlQualifiedName xsiType);
    protected void WriteNullableStringEncodedRaw(string name, string ns, string value, XmlQualifiedName xsiType);
    protected void WriteNullableStringLiteral(string name, string ns, string value);
    protected void WriteNullableStringLiteralRaw(string name, string ns, Byte[] value);
    protected void WriteNullableStringLiteralRaw(string name, string ns, string value);
    protected void WriteNullTagEncoded(string name);
    protected void WriteNullTagEncoded(string name, string ns);
    protected void WriteNullTagLiteral(string name);
    protected void WriteNullTagLiteral(string name, string ns);
    protected void WritePotentiallyReferencingElement(string n, string ns, object o);
    protected void WritePotentiallyReferencingElement(string n, string ns, object o, Type ambientType);
    protected void WritePotentiallyReferencingElement(string n, string ns, object o, Type ambientType, bool suppressReference);
    protected void WritePotentiallyReferencingElement(string n, string ns, object o, Type ambientType, bool suppressReference, bool isNullable);
    protected void WriteReferencedElements();
    protected void WriteReferencingElement(string n, string ns, object o);
    protected void WriteReferencingElement(string n, string ns, object o, bool isNullable);
    protected void WriteRpcResult(string name, string ns);
    protected void WriteSerializable(IXmlSerializable serializable, string name, string ns, bool isNullable);
    protected void WriteSerializable(IXmlSerializable serializable, string name, string ns, bool isNullable, bool wrapped);
    protected void WriteStartDocument();
    protected void WriteStartElement(string name);
    protected void WriteStartElement(string name, string ns);
    protected void WriteStartElement(string name, string ns, bool writePrefixed);
    protected void WriteStartElement(string name, string ns, object o);
    protected void WriteStartElement(string name, string ns, object o, bool writePrefixed);
    protected void WriteStartElement(string name, string ns, object o, bool writePrefixed, XmlSerializerNamespaces xmlns);
    protected void WriteTypedPrimitive(string name, string ns, object o, bool xsiType);
    protected void WriteValue(Byte[] value);
    protected void WriteValue(string value);
    protected void WriteXmlAttribute(XmlNode node);
    protected void WriteXmlAttribute(XmlNode node, object container);
    protected void WriteXsiType(string name, string ns);
}
public class System.Xml.Serialization.XmlSerializer : object {
    public XmlSerializer(Type type);
    public XmlSerializer(Type type, string defaultNamespace);
    public XmlSerializer(Type type, Type[] extraTypes);
    public XmlSerializer(Type type, XmlAttributeOverrides overrides);
    public XmlSerializer(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace);
    public XmlSerializer(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace, string location);
    public XmlSerializer(Type type, XmlRootAttribute root);
    public XmlSerializer(XmlTypeMapping xmlTypeMapping);
    public void add_UnknownAttribute(XmlAttributeEventHandler value);
    public void remove_UnknownAttribute(XmlAttributeEventHandler value);
    public void add_UnknownElement(XmlElementEventHandler value);
    public void remove_UnknownElement(XmlElementEventHandler value);
    public void add_UnknownNode(XmlNodeEventHandler value);
    public void remove_UnknownNode(XmlNodeEventHandler value);
    public void add_UnreferencedObject(UnreferencedObjectEventHandler value);
    public void remove_UnreferencedObject(UnreferencedObjectEventHandler value);
    public virtual bool CanDeserialize(XmlReader xmlReader);
    protected virtual XmlSerializationReader CreateReader();
    protected virtual XmlSerializationWriter CreateWriter();
    public object Deserialize(Stream stream);
    public object Deserialize(TextReader textReader);
    protected virtual object Deserialize(XmlSerializationReader reader);
    public object Deserialize(XmlReader xmlReader);
    public object Deserialize(XmlReader xmlReader, string encodingStyle);
    public object Deserialize(XmlReader xmlReader, string encodingStyle, XmlDeserializationEvents events);
    public object Deserialize(XmlReader xmlReader, XmlDeserializationEvents events);
    public static XmlSerializer[] FromMappings(XmlMapping[] mappings);
    public static XmlSerializer[] FromMappings(XmlMapping[] mappings, Type type);
    public static XmlSerializer[] FromTypes(Type[] types);
    public static string GetXmlSerializerAssemblyName(Type type);
    public static string GetXmlSerializerAssemblyName(Type type, string defaultNamespace);
    public void Serialize(Stream stream, object o);
    public void Serialize(Stream stream, object o, XmlSerializerNamespaces namespaces);
    public void Serialize(TextWriter textWriter, object o);
    public void Serialize(TextWriter textWriter, object o, XmlSerializerNamespaces namespaces);
    protected virtual void Serialize(object o, XmlSerializationWriter writer);
    public void Serialize(XmlWriter xmlWriter, object o);
    public void Serialize(XmlWriter xmlWriter, object o, XmlSerializerNamespaces namespaces);
    public void Serialize(XmlWriter xmlWriter, object o, XmlSerializerNamespaces namespaces, string encodingStyle);
    public void Serialize(XmlWriter xmlWriter, object o, XmlSerializerNamespaces namespaces, string encodingStyle, string id);
}
[AttributeUsageAttribute("1052")]
public class System.Xml.Serialization.XmlSerializerAssemblyAttribute : Attribute {
    public string AssemblyName { get; public set; }
    public string CodeBase { get; public set; }
    public XmlSerializerAssemblyAttribute(string assemblyName);
    public XmlSerializerAssemblyAttribute(string assemblyName, string codeBase);
    public string get_AssemblyName();
    public void set_AssemblyName(string value);
    public string get_CodeBase();
    public void set_CodeBase(string value);
}
public class System.Xml.Serialization.XmlSerializerFactory : object {
    public XmlSerializer CreateSerializer(Type type);
    public XmlSerializer CreateSerializer(Type type, string defaultNamespace);
    public XmlSerializer CreateSerializer(Type type, Type[] extraTypes);
    public XmlSerializer CreateSerializer(Type type, XmlAttributeOverrides overrides);
    public XmlSerializer CreateSerializer(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace);
    public XmlSerializer CreateSerializer(Type type, XmlAttributeOverrides overrides, Type[] extraTypes, XmlRootAttribute root, string defaultNamespace, string location);
    public XmlSerializer CreateSerializer(Type type, XmlRootAttribute root);
    public XmlSerializer CreateSerializer(XmlTypeMapping xmlTypeMapping);
}
public abstract class System.Xml.Serialization.XmlSerializerImplementation : object {
    public XmlSerializationReader Reader { get; }
    public Hashtable ReadMethods { get; }
    public Hashtable TypedSerializers { get; }
    public Hashtable WriteMethods { get; }
    public XmlSerializationWriter Writer { get; }
    public virtual XmlSerializationReader get_Reader();
    public virtual Hashtable get_ReadMethods();
    public virtual Hashtable get_TypedSerializers();
    public virtual Hashtable get_WriteMethods();
    public virtual XmlSerializationWriter get_Writer();
    public virtual bool CanSerialize(Type type);
    public virtual XmlSerializer GetSerializer(Type type);
}
[AttributeUsageAttribute("1")]
public class System.Xml.Serialization.XmlSerializerVersionAttribute : Attribute {
    public string Namespace { get; public set; }
    public string ParentAssemblyId { get; public set; }
    public Type Type { get; public set; }
    public string Version { get; public set; }
    public XmlSerializerVersionAttribute(Type type);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_ParentAssemblyId();
    public void set_ParentAssemblyId(string value);
    public Type get_Type();
    public void set_Type(Type value);
    public string get_Version();
    public void set_Version(string value);
}
[AttributeUsageAttribute("1052")]
public class System.Xml.Serialization.XmlTypeAttribute : Attribute {
    public bool AnonymousType { get; public set; }
    public bool IncludeInSchema { get; public set; }
    public string Namespace { get; public set; }
    public string TypeName { get; public set; }
    public XmlTypeAttribute(string typeName);
    public bool get_AnonymousType();
    public void set_AnonymousType(bool value);
    public bool get_IncludeInSchema();
    public void set_IncludeInSchema(bool value);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_TypeName();
    public void set_TypeName(string value);
}
public class System.Xml.Serialization.XmlTypeMapping : XmlMapping {
    public string TypeFullName { get; }
    public string TypeName { get; }
    public string XsdTypeName { get; }
    public string XsdTypeNamespace { get; }
    public string get_TypeFullName();
    public string get_TypeName();
    public string get_XsdTypeName();
    public string get_XsdTypeNamespace();
}
