internal static class FXAssembly : object {
    internal static string Version;
}
internal class Microsoft.Build.BuildEngine.AndExpressionNode : OperatorExpressionNode {
    internal bool PossibleAndCollision { get; internal set; }
    internal virtual bool BoolEvaluate(ConditionEvaluationState state);
    internal virtual void set_PossibleAndCollision(bool value);
    internal virtual bool get_PossibleAndCollision();
}
internal abstract class Microsoft.Build.BuildEngine.BaseConsoleLogger : object {
    internal LoggerVerbosity verbosity;
    internal DateTime buildStarted;
    internal WriteHandler write;
    internal ColorSetter setColor;
    internal ColorResetter resetColor;
    internal bool skipProjectStartedText;
    internal static int tabWidth;
    internal int currentIndentLevel;
    internal static String[] newLines;
    internal static string projectSeparatorLine;
    internal string loggerParameters;
    internal static Char[] parameterDelimiters;
    internal bool showPerfSummary;
    internal bool showItemAndPropertyList;
    protected bool showOnlyWarnings;
    protected bool showOnlyErrors;
    internal bool ignoreLoggerErrors;
    internal bool runningWithCharacterFileType;
    internal int numberOfProcessors;
    internal int errorCount;
    internal int warningCount;
    internal ArrayList errorList;
    internal ArrayList warningList;
    internal Hashtable projectPerformanceCounters;
    internal Hashtable targetPerformanceCounters;
    internal Hashtable taskPerformanceCounters;
    public LoggerVerbosity Verbosity { get; public set; }
    public string Parameters { get; public set; }
    internal bool SkipProjectStartedText { get; internal set; }
    internal bool ShowSummary { get; internal set; }
    protected WriteHandler WriteHandler { get; protected set; }
    private static BaseConsoleLogger();
    public sealed virtual LoggerVerbosity get_Verbosity();
    public sealed virtual void set_Verbosity(LoggerVerbosity value);
    public sealed virtual string get_Parameters();
    public sealed virtual void set_Parameters(string value);
    internal bool get_SkipProjectStartedText();
    internal void set_SkipProjectStartedText(bool value);
    internal bool get_ShowSummary();
    internal void set_ShowSummary(bool value);
    protected WriteHandler get_WriteHandler();
    protected void set_WriteHandler(WriteHandler value);
    public void ParseParameters();
    internal string IndentString(string s, int indent);
    internal static String[] SplitStringOnNewLines(string s);
    internal void WriteNewLine();
    internal void WriteLinePrettyFromResource(string resourceString, Object[] args);
    internal void WriteLinePrettyFromResource(int indentLevel, string resourceString, Object[] args);
    internal void WritePretty(string formattedString);
    internal void ShowPerfSummary();
    internal void WritePretty(int indentLevel, string formattedString);
    internal void WriteLinePretty(string formattedString);
    internal void WriteLinePretty(int indentLevel, string formattedString);
    internal void IsRunningWithCharacterFileType();
    internal bool IsVerbosityAtLeast(LoggerVerbosity checkVerbosity);
    internal static void SetColor(ConsoleColor c);
    internal static ConsoleColor TransformColor(ConsoleColor foreground, ConsoleColor background);
    internal static void DontSetColor(ConsoleColor c);
    internal static void DontResetColor();
    internal void InitializeConsoleMethods(LoggerVerbosity logverbosity, WriteHandler logwriter, ColorSetter colorSet, ColorResetter colorReset);
    internal void WriteProperties(ArrayList properties);
    internal ArrayList ExtractPropertyList(IEnumerable properties);
    internal virtual void OutputProperties(ArrayList list);
    internal void WriteItems(SortedList itemTypes);
    internal SortedList ExtractItemList(IEnumerable items);
    internal virtual void OutputItems(string itemType, ArrayList itemTypeList);
    internal static PerformanceCounter GetPerformanceCounter(string scopeName, Hashtable& table);
    internal void DisplayCounters(Hashtable counters);
    public virtual void Shutdown();
    internal abstract virtual void ResetConsoleLoggerState();
    public virtual void Initialize(IEventSource eventSource, int nodeCount);
    public virtual void Initialize(IEventSource eventSource);
    internal virtual bool ApplyParameter(string parameterName, string parameterValue);
    public abstract virtual void BuildStartedHandler(object sender, BuildStartedEventArgs e);
    public abstract virtual void BuildFinishedHandler(object sender, BuildFinishedEventArgs e);
    public abstract virtual void ProjectStartedHandler(object sender, ProjectStartedEventArgs e);
    public abstract virtual void ProjectFinishedHandler(object sender, ProjectFinishedEventArgs e);
    public abstract virtual void TargetStartedHandler(object sender, TargetStartedEventArgs e);
    public abstract virtual void TargetFinishedHandler(object sender, TargetFinishedEventArgs e);
    public abstract virtual void TaskStartedHandler(object sender, TaskStartedEventArgs e);
    public abstract virtual void TaskFinishedHandler(object sender, TaskFinishedEventArgs e);
    public abstract virtual void ErrorHandler(object sender, BuildErrorEventArgs e);
    public abstract virtual void WarningHandler(object sender, BuildWarningEventArgs e);
    public abstract virtual void MessageHandler(object sender, BuildMessageEventArgs e);
    public abstract virtual void CustomEventHandler(object sender, CustomBuildEventArgs e);
}
internal static class Microsoft.Build.BuildEngine.BatchingEngine : object {
    internal static ArrayList PrepareBatchingBuckets(XmlNode parentNode, List`1<string> batchableObjectParameters, Lookup lookup);
    internal static ArrayList PrepareBatchingBuckets(XmlNode parentNode, List`1<string> batchableObjectParameters, Lookup lookup, string implicitBatchableItemType);
}
internal class Microsoft.Build.BuildEngine.BuildEventManager : object {
    private static BuildEventManager();
    internal void AddProjectStartedEvent(ProjectStartedEventArgs e);
    internal void AddTargetStartedEvent(TargetStartedEventArgs e);
    internal List`1<ProjectStartedEventMinimumFields> GetProjectCallStack(BuildEventContext e);
    internal void SetErrorWarningFlagOnCallStack(BuildEventContext e);
    internal String[] ProjectCallStackFromProject(BuildEventContext e);
    internal ProjectStartedEventMinimumFields GetProjectStartedEvent(BuildEventContext e);
    internal TargetStartedEventMinimumFields GetTargetStartedEvent(BuildEventContext e);
    internal void RemoveProjectStartedEvent(BuildEventContext e);
    internal void RemoveTargetStartedEvent(BuildEventContext e);
}
[DebuggerDisplayAttribute("BuildItem (Name = { Name }, Include = { Include }, FinalItemSpec = { FinalItemSpec }, Condition = { Condition } )")]
public class Microsoft.Build.BuildEngine.BuildItem : object {
    public bool IsImported { get; }
    public string Name { get; public set; }
    internal ItemDefinitionLibrary ItemDefinitionLibrary { get; internal set; }
    public string Include { get; public set; }
    public ICollection MetadataNames { get; }
    public int MetadataCount { get; }
    public ICollection CustomMetadataNames { get; }
    public int CustomMetadataCount { get; }
    internal XmlAttribute IncludeAttribute { get; }
    public string Exclude { get; public set; }
    internal XmlAttribute ExcludeAttribute { get; }
    public string Condition { get; public set; }
    internal XmlAttribute ConditionAttribute { get; }
    internal XmlElement ItemElement { get; }
    internal string FinalItemSpecEscaped { get; }
    public string FinalItemSpec { get; }
    internal string EvaluatedItemSpec { get; }
    internal BuildItemGroup ParentPersistedItemGroup { get; internal set; }
    internal BuildItem ParentPersistedItem { get; internal set; }
    internal BuildItemGroup ChildItems { get; }
    internal bool IsUninitializedItem { get; }
    internal bool IsPartOfProjectManifest { get; }
    internal bool IsBackedByXml { get; }
    internal bool IsBackedUp { get; }
    internal BuildItem(XmlDocument ownerDocument, string name, string include, ItemDefinitionLibrary itemDefinitionLibrary);
    public BuildItem(string itemName, string itemInclude);
    internal BuildItem(XmlElement itemElement, bool importedFromAnotherProject, ItemDefinitionLibrary itemDefinitionLibrary);
    internal BuildItem(XmlElement itemElement, bool importedFromAnotherProject, bool isPartOfProjectManifest, ItemDefinitionLibrary itemDefinitionLibrary);
    public BuildItem(string itemName, ITaskItem taskItem);
    internal void WriteToStream(BinaryWriter writer);
    internal void CreateFromStream(BinaryReader reader);
    public bool get_IsImported();
    public string get_Name();
    public void set_Name(string value);
    internal ItemDefinitionLibrary get_ItemDefinitionLibrary();
    internal void set_ItemDefinitionLibrary(ItemDefinitionLibrary value);
    public string get_Include();
    public void set_Include(string value);
    public ICollection get_MetadataNames();
    public int get_MetadataCount();
    public ICollection get_CustomMetadataNames();
    public int get_CustomMetadataCount();
    internal XmlAttribute get_IncludeAttribute();
    public string get_Exclude();
    public void set_Exclude(string value);
    internal XmlAttribute get_ExcludeAttribute();
    public string get_Condition();
    public void set_Condition(string value);
    internal XmlAttribute get_ConditionAttribute();
    internal XmlElement get_ItemElement();
    internal string get_FinalItemSpecEscaped();
    public string get_FinalItemSpec();
    internal string get_EvaluatedItemSpec();
    internal BuildItemGroup get_ParentPersistedItemGroup();
    internal void set_ParentPersistedItemGroup(BuildItemGroup value);
    internal BuildItem get_ParentPersistedItem();
    internal void set_ParentPersistedItem(BuildItem value);
    internal BuildItemGroup get_ChildItems();
    internal bool get_IsUninitializedItem();
    internal bool get_IsPartOfProjectManifest();
    internal bool get_IsBackedByXml();
    internal bool get_IsBackedUp();
    internal IDictionary CloneCustomMetadata();
    internal void SetEvaluatedItemSpecEscaped(string evaluatedItemSpecValueEscaped);
    internal void SetFinalItemSpecEscaped(string finalItemSpecValueEscaped);
    internal string ExtractRecursivePortionOfFinalItemSpecDirectory();
    internal BuildItemGroup Evaluate(Expander expander, string baseDirectory, bool expandMetadata, ParserOptions parserOptions, EngineLoggingServices loggingServices, BuildEventContext buildEventContext);
    internal static BuildItem CreateClonedParentedItem(BuildItem childItem, BuildItem parentItem);
    internal void EvaluateAllItemMetadata(Expander expander, ParserOptions parserOptions, EngineLoggingServices loggingServices, BuildEventContext buildEventContext);
    public bool HasMetadata(string metadataName);
    public string GetMetadata(string metadataName);
    public string GetEvaluatedMetadata(string metadataName);
    internal string GetEvaluatedMetadataEscaped(string metadataName);
    internal List`1<string> GetAllCustomMetadataNames();
    internal int GetCustomMetadataCount();
    public void CopyCustomMetadataTo(BuildItem destinationItem);
    internal void CloneVirtualMetadata();
    internal void ImportVirtualMetadataFrom(BuildItem itemToCopyFrom);
    internal IDictionary GetAllCustomEvaluatedMetadata();
    public void SetMetadata(string metadataName, string metadataValue, bool treatMetadataValueAsLiteral);
    internal void SetVirtualMetadata(string metadataName, string metadataValue);
    internal void RevertToPersistedMetadata();
    public void SetMetadata(string metadataName, string metadataValue);
    public void RemoveMetadata(string metadataName);
    internal bool NewItemSpecMatchesExistingWildcard(string newItemSpec);
    internal void SplitChildItemIfNecessary();
    public BuildItem Clone();
    internal void UpdateBackingXml(BuildItemGroupChildXml backingXml);
    internal BuildItem VirtualClone();
    internal BuildItem VirtualClone(bool removeReferences);
    internal static ITaskItem[] ConvertBuildItemArrayToTaskItems(BuildItem[] originalItems);
    internal static BuildItem[] ConvertTaskItemArrayToBuildItems(ITaskItem[] originalItems);
}
internal class Microsoft.Build.BuildEngine.BuildItemCacheEntry : CacheEntry {
    internal BuildItem[] BuildItems { get; internal set; }
    internal BuildItemCacheEntry(string name, BuildItem[] buildItems);
    internal BuildItem[] get_BuildItems();
    internal void set_BuildItems(BuildItem[] value);
    internal virtual bool IsEquivalent(CacheEntry other);
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader);
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("BuildItemGroup (Count = { Count }, Condition = { Condition })")]
public class Microsoft.Build.BuildEngine.BuildItemGroup : object {
    public bool IsImported { get; }
    public string Condition { get; public set; }
    internal XmlElement ItemGroupElement { get; }
    internal Project ParentProject { get; }
    public int Count { get; }
    public BuildItem Item { get; }
    internal List`1<BuildItem> Items { get; }
    internal GroupingCollection ParentCollection { get; internal set; }
    internal XmlElement ParentElement { get; }
    internal bool IsPersisted { get; }
    internal bool IsBackedUp { get; }
    internal BuildItemGroup(XmlElement itemGroupElement, bool importedFromAnotherProject, Project parentProject);
    internal BuildItemGroup(XmlDocument ownerDocument, bool importedFromAnotherProject, Project parentProject);
    public bool get_IsImported();
    public string get_Condition();
    public void set_Condition(string value);
    internal XmlElement get_ItemGroupElement();
    internal Project get_ParentProject();
    internal void ClearParentProject();
    public int get_Count();
    public BuildItem get_Item(int index);
    internal List`1<BuildItem> get_Items();
    internal GroupingCollection get_ParentCollection();
    internal void set_ParentCollection(GroupingCollection value);
    internal XmlElement get_ParentElement();
    public BuildItem[] ToArray();
    public sealed virtual IEnumerator GetEnumerator();
    internal void ImportItems(BuildItemGroup itemsToImport);
    internal void RemoveItems(BuildItemGroup itemsToRemove);
    internal void RemoveItemsWithBackup(BuildItemGroup itemsToRemove);
    internal BuildItem ModifyItemAfterCloningUsingVirtualMetadata(BuildItem item, Dictionary`2<string, string> metadata);
    internal void ModifyItemsUsingVirtualMetadata(Dictionary`2<BuildItem, Dictionary`2<string, string>> modifies);
    internal void EnsureCapacity(int capacity);
    internal void AddExistingItem(BuildItem itemToAdd);
    internal void AddExistingItemAt(int index, BuildItem itemToAdd);
    internal void AddItem(BuildItem itemToAdd);
    public BuildItem AddNewItem(string itemName, string itemInclude);
    public BuildItem AddNewItem(string itemName, string itemInclude, bool treatItemIncludeAsLiteral);
    internal void RemoveItemWithBackup(BuildItem itemToRemove);
    public void RemoveItem(BuildItem itemToRemove);
    public void RemoveItemAt(int index);
    public BuildItemGroup Clone(bool deepClone);
    internal BuildItemGroup ShallowClone();
    public void Clear();
    internal void RemoveAllIntermediateItems();
    internal void BackupPersistedItems();
    internal bool get_IsPersisted();
    internal bool get_IsBackedUp();
    internal void Evaluate(BuildPropertyGroup existingProperties, Hashtable existingItemsByName, bool collectItemsIgnoringCondition, bool collectItemsRespectingCondition, ProcessingPass pass);
    internal static BuildItemGroup ExpandItemIntoItems(string baseDirectory, BuildItem originalItem, Expander expander, bool expandMetadata);
    internal static List`1<BuildItem> FindItemsMatchingSpecification(BuildItemGroup items, string specification, XmlAttribute attribute, Expander expander, string baseDirectory);
}
internal class Microsoft.Build.BuildEngine.BuildItemGroupChildXml : object {
    internal string Name { get; internal set; }
    internal string Include { get; internal set; }
    internal string Exclude { get; internal set; }
    internal string Remove { get; }
    internal string Condition { get; internal set; }
    internal XmlElement Element { get; }
    internal XmlAttribute IncludeAttribute { get; }
    internal XmlAttribute ExcludeAttribute { get; }
    internal XmlAttribute RemoveAttribute { get; }
    internal XmlAttribute ConditionAttribute { get; }
    internal ChildType ChildType { get; }
    internal BuildItemGroupChildXml(XmlDocument ownerDocument, string name, string include);
    internal BuildItemGroupChildXml(XmlElement element, ChildType childTypeExpected);
    internal string get_Name();
    internal void set_Name(string value);
    internal string get_Include();
    internal void set_Include(string value);
    internal string get_Exclude();
    internal void set_Exclude(string value);
    internal string get_Remove();
    internal string get_Condition();
    internal void set_Condition(string value);
    internal XmlElement get_Element();
    internal XmlAttribute get_IncludeAttribute();
    internal XmlAttribute get_ExcludeAttribute();
    internal XmlAttribute get_RemoveAttribute();
    internal XmlAttribute get_ConditionAttribute();
    internal ChildType get_ChildType();
    internal List`1<XmlElement> GetChildren();
    internal void RemoveChildrenByName(string name);
    internal bool SetChildValue(string name, string value);
}
public class Microsoft.Build.BuildEngine.BuildItemGroupCollection : object {
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    internal BuildItemGroup LastLocalItemGroup { get; }
    internal BuildItemGroupCollection(GroupingCollection groupingCollection);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    internal BuildItemGroup get_LastLocalItemGroup();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    internal void InsertAfter(BuildItemGroup newItemGroup, BuildItemGroup insertionPoint);
    internal void InsertAtEnd(BuildItemGroup newItemGroup);
    internal void RemoveItemGroup(BuildItemGroup itemGroup);
}
internal class Microsoft.Build.BuildEngine.BuildItemGroupProxy : object {
    public BuildItemGroupProxy(BuildItemGroup itemGroup);
    [IteratorStateMachineAttribute("Microsoft.Build.BuildEngine.BuildItemGroupProxy/<GetEnumerator>d__3")]
public sealed virtual IEnumerator GetEnumerator();
}
internal class Microsoft.Build.BuildEngine.BuildItemGroupXml : object {
    internal string Condition { get; internal set; }
    internal XmlElement ParentElement { get; }
    internal XmlElement Element { get; }
    internal XmlAttribute ConditionAttribute { get; }
    internal XmlDocument OwnerDocument { get; }
    internal BuildItemGroupXml(XmlElement element);
    internal BuildItemGroupXml(XmlDocument owner);
    internal string get_Condition();
    internal void set_Condition(string value);
    internal XmlElement get_ParentElement();
    internal XmlElement get_Element();
    internal XmlAttribute get_ConditionAttribute();
    internal XmlDocument get_OwnerDocument();
    internal List`1<XmlElement> GetChildren();
    internal void AppendChild(XmlElement child);
    internal void InsertAfter(XmlElement parent, XmlElement child, XmlElement reference);
    internal void InsertBefore(XmlElement parent, XmlElement child, XmlElement reference);
}
[DebuggerDisplayAttribute("BuildProperty (Name = { Name }, Value = { Value }, FinalValue = { FinalValue }, Condition = { Condition })")]
public class Microsoft.Build.BuildEngine.BuildProperty : object {
    public string Name { get; }
    public string Value { get; public set; }
    internal string FinalValueEscaped { get; }
    public string FinalValue { get; }
    internal PropertyType Type { get; internal set; }
    public bool IsImported { get; }
    public string Condition { get; public set; }
    internal XmlAttribute ConditionAttribute { get; }
    internal XmlElement PropertyElement { get; }
    internal BuildPropertyGroup ParentPersistedPropertyGroup { get; internal set; }
    internal BuildProperty(XmlElement propertyElement, PropertyType propertyType);
    internal BuildProperty(XmlDocument ownerDocument, string propertyName, string propertyValue, PropertyType propertyType);
    internal BuildProperty(string propertyName, string propertyValue, PropertyType propertyType);
    public BuildProperty(string propertyName, string propertyValue);
    private static BuildProperty();
    internal void WriteToStream(BinaryWriter writer);
    internal static BuildProperty CreateFromStream(BinaryReader reader);
    internal static void ClearInternTable();
    public string get_Name();
    public string get_Value();
    public void set_Value(string value);
    internal void SetValue(string value);
    internal string get_FinalValueEscaped();
    public string get_FinalValue();
    internal PropertyType get_Type();
    internal void set_Type(PropertyType value);
    public bool get_IsImported();
    public string get_Condition();
    public void set_Condition(string value);
    internal XmlAttribute get_ConditionAttribute();
    internal XmlElement get_PropertyElement();
    internal BuildPropertyGroup get_ParentPersistedPropertyGroup();
    internal void set_ParentPersistedPropertyGroup(BuildPropertyGroup value);
    internal void Evaluate(Expander expander);
    public BuildProperty Clone(bool deepClone);
    internal bool IsEquivalent(BuildProperty compareToProperty);
    public virtual string ToString();
    public static string op_Explicit(BuildProperty propertyToCast);
}
[DefaultMemberAttribute("Item")]
[DebuggerDisplayAttribute("BuildPropertyGroup (Count = { Count }, Condition = { Condition })")]
public class Microsoft.Build.BuildEngine.BuildPropertyGroup : object {
    public bool IsImported { get; }
    public string Condition { get; public set; }
    internal XmlAttribute ConditionAttribute { get; }
    internal XmlElement PropertyGroupElement { get; }
    internal Project ParentProject { get; internal set; }
    internal GroupingCollection ParentCollection { get; internal set; }
    internal XmlElement ParentElement { get; }
    public int Count { get; }
    internal string ImportedFromFilename { get; internal set; }
    public BuildProperty Item { get; public set; }
    public BuildPropertyGroup(Project parentProject);
    internal BuildPropertyGroup(Project parentProject, string importedFilename, string condition);
    internal BuildPropertyGroup(Project parentProject, XmlElement propertyGroupElement);
    internal BuildPropertyGroup(Project parentProject, XmlElement propertyGroupElement, bool isImported);
    internal BuildPropertyGroup(Project parentProject, XmlElement propertyGroupElement, PropertyType propertyType);
    internal BuildPropertyGroup(Project parentProject, XmlDocument ownerDocument, bool importedFromAnotherProject);
    internal void WriteToStream(BinaryWriter writer);
    internal void CreateFromStream(BinaryReader reader);
    public bool get_IsImported();
    public string get_Condition();
    public void set_Condition(string value);
    public void SetImportedPropertyGroupCondition(string condition);
    internal XmlAttribute get_ConditionAttribute();
    internal XmlElement get_PropertyGroupElement();
    internal Project get_ParentProject();
    internal void set_ParentProject(Project value);
    internal void ClearParentProject();
    internal GroupingCollection get_ParentCollection();
    internal void set_ParentCollection(GroupingCollection value);
    internal XmlElement get_ParentElement();
    public int get_Count();
    internal string get_ImportedFromFilename();
    internal void set_ImportedFromFilename(string value);
    public BuildProperty get_Item(string propertyName);
    public void set_Item(string propertyName, BuildProperty value);
    public sealed virtual IEnumerator GetEnumerator();
    internal BuildPropertyGroup ShallowClone();
    public BuildPropertyGroup Clone(bool deepClone);
    internal void ImportInitialProperties(BuildPropertyGroup environmentProperties, BuildPropertyGroup reservedProperties, BuildPropertyGroup toolsVersionDependentProperties, BuildPropertyGroup globalProperties);
    internal void SetProperty(BuildProperty newProperty);
    public void SetProperty(string propertyName, string propertyValue);
    public void SetProperty(string propertyName, string propertyValue, bool treatPropertyValueAsLiteral);
    public BuildProperty AddNewProperty(string propertyName, string propertyValue);
    public BuildProperty AddNewProperty(string propertyName, string propertyValue, bool treatPropertyValueAsLiteral);
    internal BuildProperty AddNewImportedProperty(string propertyName, string propertyValue, Project importedProject);
    internal void AddExistingProperty(BuildProperty propertyToAdd);
    internal void AddProperty(BuildProperty propertyToAdd);
    public void RemoveProperty(BuildProperty property);
    public void RemoveProperty(string propertyName);
    internal void EnsureNoReservedProperties();
    internal void RevertAllOutputProperties();
    internal void ImportProperties(BuildPropertyGroup sourceProperties);
    internal void ClearHelper(bool clearImportedPropertyGroup);
    internal void ClearImportedPropertyGroup();
    public void Clear();
    internal void MarkPropertyGroupAsDirty();
    internal void GatherEnvironmentVariables();
    internal bool IsEquivalent(BuildPropertyGroup compareToPropertyGroup);
    internal void Evaluate(BuildPropertyGroup evaluatedPropertyBag, Hashtable conditionedPropertiesTable, ProcessingPass pass);
}
public class Microsoft.Build.BuildEngine.BuildPropertyGroupCollection : object {
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    internal BuildPropertyGroup LastLocalPropertyGroup { get; }
    internal BuildPropertyGroupCollection(GroupingCollection groupingCollection);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    internal BuildPropertyGroup get_LastLocalPropertyGroup();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    internal void InsertAtBeginning(BuildPropertyGroup newPropertyGroup);
    internal void InsertAfter(BuildPropertyGroup newPropertyGroup, BuildPropertyGroup insertionPoint);
    internal void InsertAtEnd(BuildPropertyGroup newPropertyGroup);
    internal void RemovePropertyGroup(BuildPropertyGroup propertyGroup);
}
internal class Microsoft.Build.BuildEngine.BuildPropertyGroupProxy : object {
    public BuildPropertyGroupProxy(BuildPropertyGroup propertyGroup);
    [IteratorStateMachineAttribute("Microsoft.Build.BuildEngine.BuildPropertyGroupProxy/<GetEnumerator>d__3")]
public sealed virtual IEnumerator GetEnumerator();
}
[DebuggerDisplayAttribute("BuildRequest (Project={ProjectFileName}, Targets={System.String.Join(";", TargetNames)}, NodeIndex={NodeIndex}, HandleId={HandleId})")]
internal class Microsoft.Build.BuildEngine.BuildRequest : object {
    internal Engine ParentEngine { get; internal set; }
    internal IDictionary OutputsByTarget { get; internal set; }
    internal Hashtable ResultByTarget { get; }
    internal bool BuildSucceeded { get; internal set; }
    internal String[] TargetNames { get; }
    internal BuildSettings BuildSettings { get; internal set; }
    internal Project ProjectToBuild { get; internal set; }
    internal bool FireProjectStartedFinishedEvents { get; internal set; }
    internal int NodeIndex { get; internal set; }
    internal int HandleId { get; internal set; }
    internal int ParentHandleId { get; internal set; }
    internal int ProjectId { get; internal set; }
    internal int ParentRequestId { get; internal set; }
    internal string ProjectFileName { get; internal set; }
    internal BuildPropertyGroup GlobalProperties { get; internal set; }
    internal IDictionary GlobalPropertiesPassedByTask { get; }
    internal bool BuildCompleted { get; internal set; }
    internal int RequestId { get; internal set; }
    internal bool IsGeneratedRequest { get; }
    internal bool IsExternalRequest { get; internal set; }
    internal bool UnloadProjectsOnCompletion { get; }
    internal bool UseResultsCache { get; internal set; }
    internal string DefaultTargets { get; internal set; }
    internal string InitialTargets { get; internal set; }
    internal BuildEventContext ParentBuildEventContext { get; internal set; }
    internal string ToolsetVersion { get; internal set; }
    internal InvalidProjectFileException BuildException { get; internal set; }
    internal bool ToolsVersionPeekedFromProjectFile { get; internal set; }
    internal bool RestoredFromCache { get; }
    internal long StartTime { get; internal set; }
    internal long ProcessingStartTime { get; internal set; }
    internal long ProcessingTotalTime { get; internal set; }
    internal BuildRequest(int handleId, string projectFileName, String[] targetNames, BuildPropertyGroup globalProperties, string toolsetVersion, int requestId, bool useResultsCache, bool unloadProjectsOnCompletion);
    internal BuildRequest(int handleId, string projectFileName, String[] targetNames, IDictionary globalProperties, string toolsetVersion, int requestId, bool useResultsCache, bool unloadProjectsOnCompletion);
    internal Engine get_ParentEngine();
    internal void set_ParentEngine(Engine value);
    internal IDictionary get_OutputsByTarget();
    internal void set_OutputsByTarget(IDictionary value);
    internal Hashtable get_ResultByTarget();
    internal bool get_BuildSucceeded();
    internal void set_BuildSucceeded(bool value);
    internal String[] get_TargetNames();
    internal BuildSettings get_BuildSettings();
    internal void set_BuildSettings(BuildSettings value);
    internal Project get_ProjectToBuild();
    internal void set_ProjectToBuild(Project value);
    internal bool get_FireProjectStartedFinishedEvents();
    internal void set_FireProjectStartedFinishedEvents(bool value);
    internal int get_NodeIndex();
    internal void set_NodeIndex(int value);
    internal int get_HandleId();
    internal void set_HandleId(int value);
    internal int get_ParentHandleId();
    internal void set_ParentHandleId(int value);
    internal int get_ProjectId();
    internal void set_ProjectId(int value);
    internal int get_ParentRequestId();
    internal void set_ParentRequestId(int value);
    internal string get_ProjectFileName();
    internal void set_ProjectFileName(string value);
    internal BuildPropertyGroup get_GlobalProperties();
    internal void set_GlobalProperties(BuildPropertyGroup value);
    internal IDictionary get_GlobalPropertiesPassedByTask();
    internal bool get_BuildCompleted();
    internal void set_BuildCompleted(bool value);
    internal int get_RequestId();
    internal void set_RequestId(int value);
    internal bool get_IsGeneratedRequest();
    internal bool get_IsExternalRequest();
    internal void set_IsExternalRequest(bool value);
    internal bool get_UnloadProjectsOnCompletion();
    internal bool get_UseResultsCache();
    internal void set_UseResultsCache(bool value);
    internal string get_DefaultTargets();
    internal void set_DefaultTargets(string value);
    internal string get_InitialTargets();
    internal void set_InitialTargets(string value);
    internal BuildEventContext get_ParentBuildEventContext();
    internal void set_ParentBuildEventContext(BuildEventContext value);
    internal string get_ToolsetVersion();
    internal void set_ToolsetVersion(string value);
    internal InvalidProjectFileException get_BuildException();
    internal void set_BuildException(InvalidProjectFileException value);
    internal bool get_ToolsVersionPeekedFromProjectFile();
    internal void set_ToolsVersionPeekedFromProjectFile(bool value);
    internal bool get_RestoredFromCache();
    internal long get_StartTime();
    internal void set_StartTime(long value);
    internal long get_ProcessingStartTime();
    internal void set_ProcessingStartTime(long value);
    internal long get_ProcessingTotalTime();
    internal void set_ProcessingTotalTime(long value);
    internal void RestoreNonSerializedDefaults();
    internal void InitializeFromCachedResult(BuildResult cachedResult);
    internal BuildResult GetBuildResult();
    internal string GetTargetNamesList();
    internal void AddTaskExecutionTime(long executionTime);
    internal void WriteToStream(BinaryWriter writer);
    internal static BuildRequest CreateFromStream(BinaryReader reader);
}
internal class Microsoft.Build.BuildEngine.BuildResult : object {
    internal IDictionary OutputsByTarget { get; }
    internal Hashtable ResultByTarget { get; }
    internal bool EvaluationResult { get; }
    internal int HandleId { get; internal set; }
    internal int RequestId { get; internal set; }
    internal int ProjectId { get; }
    internal bool UseResultCache { get; }
    internal string DefaultTargets { get; }
    internal string InitialTargets { get; }
    internal int TotalTime { get; }
    internal int EngineTime { get; }
    internal int TaskTime { get; }
    internal BuildResult(IDictionary outputsByTarget, Hashtable resultByTarget, bool evaluationResult, int handleId, int requestId, int projectId, bool useResultCache, string defaultTargets, string initialTargets, int totalTime, int engineTime, int taskTime);
    internal BuildResult(BuildResult buildResultToCopy, bool deepCopy);
    internal IDictionary get_OutputsByTarget();
    internal Hashtable get_ResultByTarget();
    internal bool get_EvaluationResult();
    internal int get_HandleId();
    internal void set_HandleId(int value);
    internal int get_RequestId();
    internal void set_RequestId(int value);
    internal int get_ProjectId();
    internal bool get_UseResultCache();
    internal string get_DefaultTargets();
    internal string get_InitialTargets();
    internal int get_TotalTime();
    internal int get_EngineTime();
    internal int get_TaskTime();
    internal void ConvertToTaskItems();
    internal void WriteToStream(BinaryWriter writer);
    internal static BuildResult CreateFromStream(BinaryReader reader);
}
internal class Microsoft.Build.BuildEngine.BuildResultCacheEntry : BuildItemCacheEntry {
    internal bool BuildResult { get; internal set; }
    internal BuildResultCacheEntry(string name, BuildItem[] buildItems, bool buildResult);
    internal bool get_BuildResult();
    internal void set_BuildResult(bool value);
    internal virtual bool IsEquivalent(CacheEntry other);
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader);
}
[FlagsAttribute]
public enum Microsoft.Build.BuildEngine.BuildSettings : Enum {
    public int value__;
    public static BuildSettings None;
    public static BuildSettings DoNotResetPreviouslyBuiltTargets;
}
public class Microsoft.Build.BuildEngine.BuildTask : object {
    internal XmlElement TaskXmlElement { get; }
    public string Name { get; }
    public string Condition { get; public set; }
    public bool ContinueOnError { get; public set; }
    public Type Type { get; }
    public ITaskHost HostObject { get; public set; }
    internal Target ParentTarget { get; internal set; }
    internal BuildTask(XmlElement taskElement, Target parentTarget, bool importedFromAnotherProject);
    internal XmlElement get_TaskXmlElement();
    public string get_Name();
    public string get_Condition();
    public void set_Condition(string value);
    public bool get_ContinueOnError();
    public void set_ContinueOnError(bool value);
    public Type get_Type();
    public ITaskHost get_HostObject();
    public void set_HostObject(ITaskHost value);
    internal Target get_ParentTarget();
    internal void set_ParentTarget(Target value);
    public String[] GetParameterNames();
    public string GetParameterValue(string attributeName);
    public void SetParameterValue(string parameterName, string parameterValue, bool treatParameterValueAsLiteral);
    public void SetParameterValue(string parameterName, string parameterValue);
    public void AddOutputItem(string taskParameter, string itemName);
    internal void AddOutputItem(string taskParameter, string itemName, string condition);
    public void AddOutputProperty(string taskParameter, string propertyName);
    public bool Execute();
}
internal enum Microsoft.Build.BuildEngine.CacheContentType : Enum {
    public int value__;
    public static CacheContentType BuildResults;
    public static CacheContentType Items;
    public static CacheContentType Properties;
    public static CacheContentType LastContentTypeIndex;
}
internal abstract class Microsoft.Build.BuildEngine.CacheEntry : object {
    internal string Name { get; internal set; }
    protected CacheEntry(string name);
    internal string get_Name();
    internal void set_Name(string value);
    internal abstract virtual bool IsEquivalent(CacheEntry other);
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader);
}
internal static class Microsoft.Build.BuildEngine.CacheEntryCustomSerializer : object {
    internal static void WriteToStream(CacheEntry entry, BinaryWriter writer);
    internal static CacheEntry CreateFromStream(BinaryReader reader);
}
internal class Microsoft.Build.BuildEngine.CacheManager : object {
    internal CacheManager(string defaultVersion);
    internal CacheScope GetCacheScope(string scopeName, BuildPropertyGroup scopeProperties, string scopeToolsVersion, CacheContentType cacheContentType);
    internal void SetCacheEntries(CacheEntry[] entries, string scopeName, BuildPropertyGroup scopeProperties, string scopeToolsVersion, CacheContentType cacheContentType);
    internal CacheEntry[] GetCacheEntries(String[] names, string scopeName, BuildPropertyGroup scopeProperties, string scopeToolsVersion, CacheContentType cacheContentType);
    internal BuildResult GetCachedBuildResult(BuildRequest buildRequest, ArrayList& actuallyBuiltTargets);
    internal void ClearCacheScope(string projectName, BuildPropertyGroup buildPropertyGroup, string toolsVersion, CacheContentType cacheContentType);
    internal void ClearCache();
}
internal class Microsoft.Build.BuildEngine.CacheScope : object {
    internal BuildPropertyGroup ScopeProperties { get; }
    internal string ScopeName { get; }
    internal string ScopeToolsVersion { get; }
    internal CacheScope(string scopeName, BuildPropertyGroup scopeProperties, string scopeToolsVersion);
    private static CacheScope();
    internal BuildPropertyGroup get_ScopeProperties();
    internal string get_ScopeName();
    internal string get_ScopeToolsVersion();
    internal void AddCacheEntry(CacheEntry cacheEntry);
    internal void AddCacheEntries(CacheEntry[] cacheEntries);
    internal CacheEntry GetCacheEntry(string name);
    internal CacheEntry[] GetCacheEntries(String[] names);
    internal void ClearCacheEntry(string name);
    internal bool ContainsCacheEntry(string name);
    internal void AddCacheEntryForBuildResults(BuildResult buildResult);
    internal BuildResult GetCachedBuildResult(BuildRequest buildRequest, ArrayList& actuallyBuiltTargets);
}
internal class Microsoft.Build.BuildEngine.ChangeTraversalTypeCommand : EngineCommand {
    internal ChangeTraversalTypeCommand(bool breadthFirstTraversal, bool changeLocalTraversalOnly);
    internal virtual void Execute(Engine parentEngine);
}
internal static class Microsoft.Build.BuildEngine.CharacterUtilities : object {
    internal static bool IsNumberStart(char candidate);
    internal static bool IsSimpleStringStart(char candidate);
    internal static bool IsSimpleStringChar(char candidate);
    internal static bool IsHexAlphabetic(char candidate);
    internal static bool IsHexDigit(char candidate);
}
internal enum Microsoft.Build.BuildEngine.ChildType : Enum {
    public int value__;
    public static ChildType Invalid;
    public static ChildType BuildItemAdd;
    public static ChildType BuildItemRemove;
    public static ChildType BuildItemModify;
    public static ChildType Any;
}
internal class Microsoft.Build.BuildEngine.Choose : object {
    internal ArrayList Whens { get; }
    internal When Otherwise { get; }
    internal bool IsImported { get; }
    internal Choose(Project parentProject, GroupingCollection parentGroupingCollection, XmlElement chooseElement, bool importedFromAnotherProject, int nestingDepth);
    internal ArrayList get_Whens();
    internal When get_Otherwise();
    internal bool get_IsImported();
    internal void Evaluate(BuildPropertyGroup parentPropertyBag, bool ignoreCondition, bool honorCondition, Hashtable conditionedPropertiesTable, ProcessingPass pass);
}
public class Microsoft.Build.BuildEngine.ColorResetter : MulticastDelegate {
    public ColorResetter(object object, IntPtr method);
    public virtual void Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.Build.BuildEngine.ColorSetter : MulticastDelegate {
    public ColorSetter(object object, IntPtr method);
    public virtual void Invoke(ConsoleColor color);
    public virtual IAsyncResult BeginInvoke(ConsoleColor color, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Build.BuildEngine.ComparerContextNodeId`1 : object {
    public sealed virtual bool Equals(T x, T y);
    public sealed virtual int GetHashCode(T x);
}
internal class Microsoft.Build.BuildEngine.ComparerContextNodeIdTargetId`1 : object {
    public sealed virtual bool Equals(T x, T y);
    public sealed virtual int GetHashCode(T x);
}
internal class Microsoft.Build.BuildEngine.ConditionEvaluationState : ValueType {
    internal XmlAttribute conditionAttribute;
    internal Expander expanderToUse;
    internal Hashtable conditionedPropertiesInProject;
    internal string parsedCondition;
    internal ConditionEvaluationState(XmlAttribute conditionAttribute, Expander expanderToUse, Hashtable conditionedPropertiesInProject, string parsedCondition);
}
public class Microsoft.Build.BuildEngine.ConfigurableForwardingLogger : object {
    public LoggerVerbosity Verbosity { get; public set; }
    public string Parameters { get; public set; }
    public IEventRedirector BuildEventRedirector { get; public set; }
    public int NodeId { get; public set; }
    private static ConfigurableForwardingLogger();
    public sealed virtual LoggerVerbosity get_Verbosity();
    public sealed virtual void set_Verbosity(LoggerVerbosity value);
    public sealed virtual string get_Parameters();
    public sealed virtual void set_Parameters(string value);
    public sealed virtual IEventRedirector get_BuildEventRedirector();
    public sealed virtual void set_BuildEventRedirector(IEventRedirector value);
    public sealed virtual int get_NodeId();
    public sealed virtual void set_NodeId(int value);
    public virtual void Initialize(IEventSource eventSource);
    public sealed virtual void Initialize(IEventSource eventSource, int nodeCount);
    public virtual void Shutdown();
    protected virtual void ForwardToCentralLogger(BuildEventArgs e);
}
public class Microsoft.Build.BuildEngine.ConsoleLogger : object {
    public LoggerVerbosity Verbosity { get; public set; }
    public string Parameters { get; public set; }
    public bool SkipProjectStartedText { get; public set; }
    public bool ShowSummary { get; public set; }
    protected WriteHandler WriteHandler { get; protected set; }
    public ConsoleLogger(LoggerVerbosity verbosity);
    public ConsoleLogger(LoggerVerbosity verbosity, WriteHandler write, ColorSetter colorSet, ColorResetter colorReset);
    public sealed virtual LoggerVerbosity get_Verbosity();
    public sealed virtual void set_Verbosity(LoggerVerbosity value);
    public sealed virtual string get_Parameters();
    public sealed virtual void set_Parameters(string value);
    public bool get_SkipProjectStartedText();
    public void set_SkipProjectStartedText(bool value);
    public bool get_ShowSummary();
    public void set_ShowSummary(bool value);
    protected WriteHandler get_WriteHandler();
    protected void set_WriteHandler(WriteHandler value);
    public void ApplyParameter(string parameterName, string parameterValue);
    public virtual void Initialize(IEventSource eventSource);
    public virtual void Initialize(IEventSource eventSource, int nodeCount);
    public virtual void Shutdown();
    public void BuildStartedHandler(object sender, BuildStartedEventArgs e);
    public void BuildFinishedHandler(object sender, BuildFinishedEventArgs e);
    public void ProjectStartedHandler(object sender, ProjectStartedEventArgs e);
    public void ProjectFinishedHandler(object sender, ProjectFinishedEventArgs e);
    public void TargetStartedHandler(object sender, TargetStartedEventArgs e);
    public void TargetFinishedHandler(object sender, TargetFinishedEventArgs e);
    public void TaskStartedHandler(object sender, TaskStartedEventArgs e);
    public void TaskFinishedHandler(object sender, TaskFinishedEventArgs e);
    public void ErrorHandler(object sender, BuildErrorEventArgs e);
    public void WarningHandler(object sender, BuildWarningEventArgs e);
    public void MessageHandler(object sender, BuildMessageEventArgs e);
    public void CustomEventHandler(object sender, CustomBuildEventArgs e);
    internal static void SetColor(ConsoleColor c);
}
internal static class Microsoft.Build.BuildEngine.Constants : object {
    internal static string defaultToolsVersion;
    internal static string defaultFallbackToolsVersion;
    internal static string defaultSolutionWrapperProjectToolsVersion;
    internal static string defaultTargetCacheName;
    internal static string initialTargetCacheName;
    internal static string projectIdCacheName;
    internal static string programFilesx86;
    internal static string AssemblyVersion { get; }
    internal static string get_AssemblyVersion();
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.Build.BuildEngine.CopyOnWriteHashtable : object {
    internal bool IsShallowCopy { get; }
    public bool IsFixedSize { get; }
    public bool IsReadOnly { get; }
    public ICollection Keys { get; }
    public ICollection Values { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public object Item { get; public set; }
    internal CopyOnWriteHashtable(StringComparer stringComparer);
    internal CopyOnWriteHashtable(int capacity, StringComparer stringComparer);
    internal CopyOnWriteHashtable(IDictionary dictionary, StringComparer stringComparer);
    internal bool get_IsShallowCopy();
    public sealed virtual bool Contains(object key);
    public sealed virtual void Add(object key, object value);
    public sealed virtual void Clear();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual IDictionaryEnumerator GetEnumerator();
    public sealed virtual void Remove(object key);
    public sealed virtual bool get_IsFixedSize();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual ICollection get_Keys();
    public sealed virtual ICollection get_Values();
    public sealed virtual void CopyTo(Array array, int arrayIndex);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public bool ContainsKey(object key);
    public sealed virtual object get_Item(object key);
    public sealed virtual void set_Item(object key, object value);
    public sealed virtual object Clone();
}
internal class Microsoft.Build.BuildEngine.DependencyAnalysisLogDetail : object {
    internal OutofdateReason Reason { get; }
    public string InputItemName { get; }
    public string OutputItemName { get; }
    public string Input { get; }
    public string Output { get; }
    public DependencyAnalysisLogDetail(string input, string output, string inputItemName, string outputItemName, OutofdateReason reason);
    internal OutofdateReason get_Reason();
    public string get_InputItemName();
    public string get_OutputItemName();
    public string get_Input();
    public string get_Output();
}
internal enum Microsoft.Build.BuildEngine.DependencyAnalysisResult : Enum {
    public int value__;
    public static DependencyAnalysisResult SkipUpToDate;
    public static DependencyAnalysisResult SkipNoInputs;
    public static DependencyAnalysisResult SkipNoOutputs;
    public static DependencyAnalysisResult IncrementalBuild;
    public static DependencyAnalysisResult FullBuild;
}
public class Microsoft.Build.BuildEngine.DistributedFileLogger : object {
    internal FileLogger InternalFilelogger { get; }
    public IEventRedirector BuildEventRedirector { get; public set; }
    public int NodeId { get; public set; }
    public LoggerVerbosity Verbosity { get; public set; }
    public string Parameters { get; public set; }
    private static DistributedFileLogger();
    public sealed virtual void Initialize(IEventSource eventSource, int nodeCount);
    public sealed virtual void Initialize(IEventSource eventSource);
    public sealed virtual void Shutdown();
    internal FileLogger get_InternalFilelogger();
    public sealed virtual IEventRedirector get_BuildEventRedirector();
    public sealed virtual void set_BuildEventRedirector(IEventRedirector value);
    public sealed virtual int get_NodeId();
    public sealed virtual void set_NodeId(int value);
    public sealed virtual LoggerVerbosity get_Verbosity();
    public sealed virtual void set_Verbosity(LoggerVerbosity value);
    public sealed virtual string get_Parameters();
    public sealed virtual void set_Parameters(string value);
}
internal class Microsoft.Build.BuildEngine.DualQueue`1 : object {
    internal WaitHandle QueueReadyEvent { get; }
    internal WaitHandle QueueEmptyEvent { get; }
    internal int Count { get; }
    internal int WritingQueueCount { get; }
    internal WaitHandle get_QueueReadyEvent();
    internal WaitHandle get_QueueEmptyEvent();
    internal int get_Count();
    internal int get_WritingQueueCount();
    internal void Enqueue(T item);
    internal void EnqueueArray(T[] items);
    internal void Clear();
    internal T Dequeue();
    internal T Peek();
    internal bool Contains(T item);
}
[ObsoleteAttribute("This class has been deprecated. Please use Microsoft.Build.Evaluation.ProjectCollection from the Microsoft.Build assembly instead.")]
public class Microsoft.Build.BuildEngine.Engine : object {
    internal static bool debugMode;
    [ObsoleteAttribute("Avoid setting BinPath. If you were simply passing in the .NET Framework location as the BinPath, no other action is necessary. Otherwise, define Toolsets instead in the registry or config file, or by adding elements to the Engine's ToolsetCollection, in order to use a custom BinPath.")]
public string BinPath { get; public set; }
    public bool IsBuilding { get; }
    internal int NodeId { get; }
    internal static XmlDocument GlobalDummyXmlDoc { get; }
    internal String[] PropertyListToSerialize { get; }
    public static Engine GlobalEngine { get; }
    public static Version Version { get; }
    public BuildPropertyGroup GlobalProperties { get; public set; }
    internal BuildPropertyGroup EnvironmentProperties { get; }
    public bool BuildEnabled { get; public set; }
    internal Hashtable ImportedProjectsCache { get; }
    internal Hashtable ProjectsLoadedByHost { get; }
    internal Dictionary`2<string, ToolsetState> ToolsetStateMap { get; }
    public ToolsetCollection Toolsets { get; }
    internal EngineLoggingServices LoggingServices { get; internal set; }
    internal int EngineCpuCount { get; }
    internal EngineLoggingServices ExternalLoggingServices { get; internal set; }
    internal Scheduler Scheduler { get; }
    internal Router Router { get; }
    internal NodeManager NodeManager { get; }
    internal CacheManager CacheManager { get; }
    internal Introspector Introspector { get; }
    internal EngineCallback EngineCallback { get; }
    internal bool EnabledCentralLogging { get; }
    internal bool ProfileBuild { get; }
    internal ManualResetEvent FlushRequestEvent { get; }
    internal string StartupDirectory { get; }
    public string DefaultToolsVersion { get; public set; }
    public bool OnlyLogCriticalEvents { get; public set; }
    [ObsoleteAttribute("If you were simply passing in the .NET Framework location as the BinPath, just change to the parameterless Engine() constructor. Otherwise, you can define custom toolsets in the registry or config file, or by adding elements to the Engine's ToolsetCollection. Then use either the Engine() or Engine(ToolsetLocations) constructor instead.")]
public Engine(string binPath);
    public Engine(BuildPropertyGroup globalProperties);
    public Engine(ToolsetDefinitionLocations locations);
    public Engine(BuildPropertyGroup globalProperties, ToolsetDefinitionLocations locations);
    public Engine(BuildPropertyGroup globalProperties, ToolsetDefinitionLocations locations, int numberOfCpus, string localNodeProviderParameters);
    internal Engine(BuildPropertyGroup globalProperties, ToolsetDefinitionLocations locations, int numberOfCpus, bool isChildNode, int parentNodeId, string startupDirectory, string localNodeProviderParameters);
    internal Engine(int numberOfCpus, bool isChildNode, int parentNodeId, string localNodeProviderParameters, BuildPropertyGroup globalProperties, ToolsetDefinitionLocations locations);
    private static Engine();
    internal void SetEngineAbortTo(bool value);
    public string get_BinPath();
    public void set_BinPath(string value);
    public bool get_IsBuilding();
    internal int get_NodeId();
    internal static XmlDocument get_GlobalDummyXmlDoc();
    internal String[] get_PropertyListToSerialize();
    public static Engine get_GlobalEngine();
    public static Version get_Version();
    public BuildPropertyGroup get_GlobalProperties();
    public void set_GlobalProperties(BuildPropertyGroup value);
    internal BuildPropertyGroup get_EnvironmentProperties();
    internal int GetNextTaskId();
    internal int GetNextTargetId();
    internal int GetNextProjectId();
    internal int GetNextNodeId();
    public bool get_BuildEnabled();
    public void set_BuildEnabled(bool value);
    internal Hashtable get_ImportedProjectsCache();
    internal Hashtable get_ProjectsLoadedByHost();
    internal Dictionary`2<string, ToolsetState> get_ToolsetStateMap();
    public ToolsetCollection get_Toolsets();
    internal EngineLoggingServices get_LoggingServices();
    internal void set_LoggingServices(EngineLoggingServices value);
    internal int get_EngineCpuCount();
    internal EngineLoggingServices get_ExternalLoggingServices();
    internal void set_ExternalLoggingServices(EngineLoggingServices value);
    internal Scheduler get_Scheduler();
    internal Router get_Router();
    internal NodeManager get_NodeManager();
    internal CacheManager get_CacheManager();
    internal Introspector get_Introspector();
    internal EngineCallback get_EngineCallback();
    internal bool get_EnabledCentralLogging();
    internal bool get_ProfileBuild();
    internal ManualResetEvent get_FlushRequestEvent();
    internal string get_StartupDirectory();
    internal ITaskRegistry GetTaskRegistry(BuildEventContext buildEventContext, string toolsetVersion);
    internal void AddToolset(Toolset toolset);
    internal void UpdateToolsPath(string toolsVersion, string toolsPath);
    internal void PopulateToolsetStateMap(ToolsetDefinitionLocations locations);
    public string get_DefaultToolsVersion();
    public void set_DefaultToolsVersion(string value);
    public void RegisterLogger(ILogger logger);
    public void RegisterDistributedLogger(ILogger centralLogger, LoggerDescription forwardingLogger);
    internal void BeginEatingLoggingEvents();
    internal void EndEatingLoggingEvents();
    public void UnregisterAllLoggers();
    internal void UnregisterLoggersInternal(ArrayList loggersToUnregister);
    internal void EndingEngineExecution(bool buildResult, bool exitedDueToError);
    public void Shutdown();
    public Project CreateNewProject();
    public Project GetLoadedProject(string projectFullFileName);
    public void UnloadProject(Project project);
    internal void UnloadProject(Project project, bool unloadAllVersions);
    internal void OnRenameProject(Project project, string oldFullFileName, string newFullFileName);
    public void UnloadAllProjects();
    public bool get_OnlyLogCriticalEvents();
    public void set_OnlyLogCriticalEvents(bool value);
    public bool BuildProject(Project project);
    public bool BuildProject(Project project, string targetName);
    public bool BuildProject(Project project, String[] targetNames);
    public bool BuildProject(Project project, String[] targetNames, IDictionary targetOutputs);
    public bool BuildProject(Project project, String[] targetNames, IDictionary targetOutputs, BuildSettings buildFlags);
    internal BuildResult EngineBuildLoop(BuildRequest terminatingBuildRequest);
    internal void DecrementProjectsInProgress();
    public bool BuildProjectFile(string projectFile);
    public bool BuildProjectFile(string projectFile, string targetName);
    public bool BuildProjectFile(string projectFile, String[] targetNames);
    public bool BuildProjectFile(string projectFile, String[] targetNames, BuildPropertyGroup globalProperties);
    public bool BuildProjectFile(string projectFile, String[] targetNames, BuildPropertyGroup globalProperties, IDictionary targetOutputs);
    public bool BuildProjectFile(string projectFile, String[] targetNames, BuildPropertyGroup globalProperties, IDictionary targetOutputs, BuildSettings buildFlags);
    public bool BuildProjectFile(string projectFile, String[] targetNames, BuildPropertyGroup globalProperties, IDictionary targetOutputs, BuildSettings buildFlags, string toolsVersion);
    public bool BuildProjectFiles(String[] projectFiles, String[][] targetNamesPerProject, BuildPropertyGroup[] globalPropertiesPerProject, IDictionary[] targetOutputsPerProject, BuildSettings buildFlags, String[] toolsVersions);
    internal bool PostProjectEvaluationRequests(Project project, String[] projectFiles, String[][] targetNames, BuildPropertyGroup[] globalPropertiesPerProject, IDictionary[] targetOutputsPerProject, BuildSettings buildFlags, String[] toolVersions);
    internal void BuildProjectFileInternal(BuildRequest buildRequest);
    internal Project GetMatchingProject(Project existingProject, string projectFullPath, BuildPropertyGroup globalPropertiesToUse, string toolsVersion, String[] targetNames, BuildEventContext buildEventContext, bool toolsVersionPeekedFromProjectFile);
    internal BuildPropertyGroup MergeGlobalProperties(BuildPropertyGroup parentProjectGlobalProperties, BuildPropertyGroup postMergeProperties, string childProjectFile, IDictionary globalPropertiesPassedIntoTask);
    internal void PostBuildRequests(BuildRequest[] buildRequestArray);
    internal void PostBuildRequest(BuildRequest buildRequest);
    internal void PostTaskOutputUpdates(TaskExecutionContext executionContext);
    internal void PostEngineCommand(EngineCommand engineCommand);
    internal TaskExecutionContext GetTaskOutputUpdates();
    internal NodeStatus RequestStatus(int requestId);
    internal void PostNodeStatus(int postingNodeId, NodeStatus nodeStatus);
    internal void ResetPerBuildDataStructures();
}
internal class Microsoft.Build.BuildEngine.EngineCallback : object {
    internal static int invalidEngineHandle;
    internal static int inProcNode;
    internal static int parentNode;
    internal static int invalidNode;
    internal EngineCallback(Engine parentEngine);
    public sealed virtual void PostBuildRequestsToHost(BuildRequest[] buildRequests);
    public sealed virtual Exception PostCacheEntriesToHost(int nodeId, CacheEntry[] entries, string scopeName, BuildPropertyGroup scopeProperties, string scopeToolsVersion, CacheContentType cacheContentType);
    public sealed virtual CacheEntry[] GetCachedEntriesFromHost(int nodeId, String[] names, string scopeName, BuildPropertyGroup scopeProperties, string scopeToolsVersion, CacheContentType cacheContentType);
    internal void PostTaskOutputs(int handleId, bool taskExecutedSuccessfully, Exception thrownException, long executionTime);
    public sealed virtual void PostBuildResultToHost(BuildResult buildResult);
    public void SetCacheEntries(int handleId, CacheEntry[] entries, string cacheScope, string cacheKey, string cacheVersion, CacheContentType cacheContentType, bool localNodeOnly);
    public CacheEntry[] GetCacheEntries(int handleId, String[] names, string cacheScope, string cacheKey, string cacheVersion, CacheContentType cacheContentType, bool localNodeOnly);
    public sealed virtual void PostLoggingMessagesToHost(int nodeId, NodeLoggingEvent[] nodeLoggingEventArray);
    internal void GetLineColumnOfXmlNode(int handleId, Int32& lineNumber, Int32& columnNumber);
    internal ITaskRegistry GetEngineTaskRegistry(int handleId);
    internal ITaskRegistry GetProjectTaskRegistry(int handleId);
    internal string GetToolsPath(int handleId);
    public sealed virtual void PostStatus(int nodeId, NodeStatus nodeStatus, bool blockUntilSent);
    internal Engine GetParentEngine();
    internal Target[] GetListOfTargets(Int32[] handleIds);
    internal ExecutionContext GetExecutionContextFromHandleId(int handleId);
    internal TaskExecutionContext GetTaskContextFromHandleId(int handleId);
    internal RequestRoutingContext GetRoutingContextFromHandleId(int handleId);
    internal int CreateTaskContext(Project parentProject, Target parentTarget, ProjectBuildState buildContext, XmlElement taskNode, int nodeIndex, BuildEventContext taskContext);
    internal int CreateRoutingContext(int nodeIndex, int parentHandleId, int parentNodeIndex, int parentRequestId, CacheScope cacheScope, BuildRequest triggeringBuildRequest, BuildEventContext buildEventContext);
    internal void ClearContextState(int handleId);
}
internal class Microsoft.Build.BuildEngine.EngineCommand : object {
    internal virtual void Execute(Engine parentEngine);
}
internal class Microsoft.Build.BuildEngine.EngineFileUtilities : object {
    internal static String[] GetFileListEscaped(string directory, string filespec);
}
internal abstract class Microsoft.Build.BuildEngine.EngineLoggingServices : object {
    protected bool onlyLogCriticalEvents;
    protected bool flushBuildEventsImmediatly;
    protected DualQueue`1<BuildEventArgs> loggingQueueOfBuildEvents;
    protected DualQueue`1<NodeLoggingEvent> loggingQueueOfNodeEvents;
    protected EngineLoggingServices forwardingService;
    protected long lastFlushTime;
    protected bool requestedQueueFlush;
    protected ManualResetEvent flushRequestEvent;
    internal static int flushTimeoutInMS;
    internal static int flushTimeoutInTicks;
    internal static int flushQueueSize;
    internal bool OnlyLogCriticalEvents { get; internal set; }
    internal EngineLoggingServices ForwardingService { get; internal set; }
    internal bool FlushBuildEventsImmediatly { get; internal set; }
    protected void Initialize(ManualResetEvent flushRequestEventIn);
    internal void BeginEatingEvents();
    internal void EndEatingEvents();
    internal virtual void Shutdown();
    internal void PostLoggingEvent(BuildEventArgs e);
    internal void PostLoggingEvents(BuildEventArgs[] eventArray);
    internal void PostLoggingEvent(NodeLoggingEvent e);
    internal void PostLoggingEvents(NodeLoggingEvent[] eventArray);
    internal abstract virtual bool ProcessPostedLoggingEvents();
    internal virtual void ProcessBuildEvent(BuildEventArgs buildEventArgs);
    internal virtual bool NeedsFlush(long currentTickCount);
    internal void LogErrorEvent(BuildErrorEventArgs e);
    internal void LogMessageEvent(BuildMessageEventArgs e);
    internal void LogWarningEvent(BuildWarningEventArgs e);
    internal void LogCustomEvent(CustomBuildEventArgs e);
    internal virtual void LogComment(BuildEventContext buildEventContext, string messageResourceName, Object[] messageArgs);
    internal virtual void LogComment(BuildEventContext buildEventContext, MessageImportance importance, string messageResourceName, Object[] messageArgs);
    internal virtual void LogCommentFromText(BuildEventContext buildEventContext, MessageImportance importance, string message);
    internal virtual void LogError(BuildEventContext location, BuildEventFileInfo file, string messageResourceName, Object[] messageArgs);
    internal virtual void LogError(BuildEventContext buildEventContext, string subcategoryResourceName, BuildEventFileInfo file, string messageResourceName, Object[] messageArgs);
    internal virtual void LogErrorFromText(BuildEventContext buildEventContext, string subcategoryResourceName, string errorCode, string helpKeyword, BuildEventFileInfo file, string message);
    internal virtual void LogInvalidProjectFileError(BuildEventContext buildEventContext, InvalidProjectFileException invalidProjectFileException);
    internal virtual void LogFatalBuildError(BuildEventContext buildEventContext, Exception exception, BuildEventFileInfo file);
    internal virtual void LogFatalTaskError(BuildEventContext buildEventContext, Exception exception, BuildEventFileInfo file, string taskName);
    internal virtual void LogFatalError(BuildEventContext buildEventContext, Exception exception, BuildEventFileInfo file, string messageResourceName, Object[] messageArgs);
    internal virtual void LogTaskWarningFromException(BuildEventContext buildEventContext, Exception exception, BuildEventFileInfo file, string taskName);
    internal virtual void LogWarning(BuildEventContext buildEventContext, BuildEventFileInfo file, string messageResourceName, Object[] messageArgs);
    internal virtual void LogWarning(BuildEventContext buildEventContext, string subcategoryResourceName, BuildEventFileInfo file, string messageResourceName, Object[] messageArgs);
    internal virtual void LogWarningFromText(BuildEventContext buildEventContext, string subcategoryResourceName, string warningCode, string helpKeyword, BuildEventFileInfo file, string message);
    internal virtual void LogBuildStarted();
    internal virtual void LogBuildStarted(int loggerId);
    internal virtual void LogBuildFinished(bool success);
    internal virtual void LogBuildFinished(bool success, int loggerId);
    internal virtual void LogProjectStarted(int projectId, BuildEventContext parentBuildEventContext, BuildEventContext projectBuildEventContext, string projectFile, string targetNames, IEnumerable properties, IEnumerable items);
    internal virtual void LogProjectFinished(BuildEventContext buildEventContext, string projectFile, bool success);
    internal virtual void LogTargetStarted(BuildEventContext buildEventContext, string targetName, string projectFile, string projectFileOfTargetElement);
    internal virtual void LogTargetFinished(BuildEventContext buildEventContext, string targetName, string projectFile, string projectFileOfTargetElement, bool success);
    internal virtual void LogTaskStarted(BuildEventContext buildEventContext, string taskName, string projectFile, string projectFileOfTaskNode);
    internal virtual void LogTaskFinished(BuildEventContext buildEventContext, string taskName, string projectFile, string projectFileOfTaskNode, bool success);
    internal bool get_OnlyLogCriticalEvents();
    internal void set_OnlyLogCriticalEvents(bool value);
    internal EngineLoggingServices get_ForwardingService();
    internal void set_ForwardingService(EngineLoggingServices value);
    internal bool get_FlushBuildEventsImmediatly();
    internal void set_FlushBuildEventsImmediatly(bool value);
}
internal class Microsoft.Build.BuildEngine.EngineLoggingServicesInProc : EngineLoggingServices {
    internal static int CENTRAL_ENGINE_EVENTSOURCE;
    internal static int LOCAL_FORWARDING_EVENTSOURCE;
    internal static int ALL_PRIVATE_EVENTSOURCES;
    internal static int FIRST_AVAILABLE_LOGGERID;
    internal EngineLoggingServicesInProc(EventSource eventSource, bool onlyLogCriticalEvents, ManualResetEvent flushRequestEvent);
    internal virtual bool ProcessPostedLoggingEvents();
    internal virtual void ProcessBuildEvent(BuildEventArgs buildEventArgs);
    internal void RegisterEventSource(int loggerId, EventSource eventSource);
    internal void UnregisterEventSource(int loggerId);
    internal virtual void Shutdown();
}
internal class Microsoft.Build.BuildEngine.EngineLoggingServicesOutProc : EngineLoggingServices {
    protected object loggingQueueReadLock;
    internal EngineLoggingServicesOutProc(Node parentNode, ManualResetEvent flushRequestEvent);
    internal virtual bool ProcessPostedLoggingEvents();
    internal virtual void Shutdown();
    internal void ReportLoggingFailure(Exception e);
}
internal class Microsoft.Build.BuildEngine.EngineProxy : MarshalByRefObject {
    public bool ContinueOnError { get; }
    public int LineNumberOfTaskNode { get; }
    public int ColumnNumberOfTaskNode { get; }
    public string ProjectFileOfTaskNode { get; }
    internal BuildEventContext BuildEventContext { get; internal set; }
    public bool IsRunningMultipleNodes { get; }
    internal EngineProxy(TaskExecutionModule parentModule, int handleId, string parentProjectFullFileName, string projectFileOfTaskNode, EngineLoggingServices loggingServices, BuildEventContext buildEventContext);
    private static EngineProxy();
    public sealed virtual void LogErrorEvent(BuildErrorEventArgs e);
    public sealed virtual void LogWarningEvent(BuildWarningEventArgs e);
    public sealed virtual void LogMessageEvent(BuildMessageEventArgs e);
    public sealed virtual void LogCustomEvent(CustomBuildEventArgs e);
    public sealed virtual bool get_ContinueOnError();
    internal void UpdateContinueOnError(bool shouldContinueOnError);
    public sealed virtual int get_LineNumberOfTaskNode();
    public sealed virtual int get_ColumnNumberOfTaskNode();
    public sealed virtual string get_ProjectFileOfTaskNode();
    public sealed virtual bool BuildProjectFile(string projectFileName, String[] targetNames, IDictionary globalProperties, IDictionary targetOutputs);
    public sealed virtual bool BuildProjectFile(string projectFileName, String[] targetNames, IDictionary globalProperties, IDictionary targetOutputs, string toolsVersion);
    public sealed virtual bool BuildProjectFilesInParallel(String[] projectFileNames, String[] targetNames, IDictionary[] globalProperties, IDictionary[] targetOutputsPerProject, String[] toolsVersions, bool useResultsCache, bool unloadProjectsOnCompletion);
    public sealed virtual void Yield();
    public sealed virtual void Reacquire();
    public sealed virtual BuildEngineResult BuildProjectFilesInParallel(String[] projectFileNames, String[] targetNames, IDictionary[] globalProperties, IList`1[] removeGlobalProperties, String[] toolsVersions, bool returnTargetOutputs);
    public virtual object InitializeLifetimeService();
    internal void MarkAsInActive();
    internal BuildEventContext get_BuildEventContext();
    internal void set_BuildEventContext(BuildEventContext value);
    public sealed virtual bool get_IsRunningMultipleNodes();
}
internal class Microsoft.Build.BuildEngine.EqualExpressionNode : MultipleComparisonNode {
    protected virtual bool Compare(double left, double right);
    protected virtual bool Compare(bool left, bool right);
    protected virtual bool Compare(string left, string right);
}
internal class Microsoft.Build.BuildEngine.ErrorWarningSummaryDictionaryKey : object {
    internal BuildEventContext EntryPointContext { get; }
    internal string TargetName { get; }
    internal ErrorWarningSummaryDictionaryKey(BuildEventContext entryPoint, string targetName);
    private static ErrorWarningSummaryDictionaryKey();
    internal BuildEventContext get_EntryPointContext();
    internal string get_TargetName();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Microsoft.Build.BuildEngine.EventRedirector : object {
    internal EventRedirector(int loggerId, EngineLoggingServices loggingService);
    private sealed virtual override void Microsoft.Build.Framework.IEventRedirector.ForwardEvent(BuildEventArgs buildEvent);
}
internal class Microsoft.Build.BuildEngine.EventSource : MarshalByRefObject {
    internal void UnregisterAllLoggers();
    internal void RaiseMessageEvent(object sender, BuildMessageEventArgs e);
    internal void RaiseErrorEvent(object sender, BuildErrorEventArgs e);
    internal void RaiseWarningEvent(object sender, BuildWarningEventArgs e);
    internal void RaiseBuildStartedEvent(object sender, BuildStartedEventArgs e);
    internal void RaiseBuildFinishedEvent(object sender, BuildFinishedEventArgs e);
    internal void RaiseProjectStartedEvent(object sender, ProjectStartedEventArgs e);
    internal void RaiseProjectFinishedEvent(object sender, ProjectFinishedEventArgs e);
    internal void RaiseTargetStartedEvent(object sender, TargetStartedEventArgs e);
    internal void RaiseTargetFinishedEvent(object sender, TargetFinishedEventArgs e);
    internal void RaiseTaskStartedEvent(object sender, TaskStartedEventArgs e);
    internal void RaiseTaskFinishedEvent(object sender, TaskFinishedEventArgs e);
    internal void RaiseCustomEvent(object sender, CustomBuildEventArgs e);
    internal void RaiseStatusEvent(object sender, BuildStatusEventArgs e);
    internal void RaiseAnyEvent(object sender, BuildEventArgs e);
    internal void RaiseStronglyTypedEvent(BuildEventArgs e);
    [CompilerGeneratedAttribute]
public sealed virtual void add_MessageRaised(BuildMessageEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_MessageRaised(BuildMessageEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ErrorRaised(BuildErrorEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ErrorRaised(BuildErrorEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_WarningRaised(BuildWarningEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_WarningRaised(BuildWarningEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_BuildStarted(BuildStartedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_BuildStarted(BuildStartedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_BuildFinished(BuildFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_BuildFinished(BuildFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ProjectStarted(ProjectStartedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ProjectStarted(ProjectStartedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_ProjectFinished(ProjectFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_ProjectFinished(ProjectFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TargetStarted(TargetStartedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TargetStarted(TargetStartedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TargetFinished(TargetFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TargetFinished(TargetFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TaskStarted(TaskStartedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TaskStarted(TaskStartedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_TaskFinished(TaskFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_TaskFinished(TaskFinishedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_CustomEventRaised(CustomBuildEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_CustomEventRaised(CustomBuildEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StatusEventRaised(BuildStatusEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StatusEventRaised(BuildStatusEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_AnyEventRaised(AnyEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_AnyEventRaised(AnyEventHandler value);
}
internal class Microsoft.Build.BuildEngine.ExecutionContext : object {
    internal int HandleId { get; }
    internal int NodeIndex { get; }
    internal BuildEventContext BuildEventContext { get; }
    internal ExecutionContext(int handleId, int nodeIndex, BuildEventContext buildEventContext);
    internal int get_HandleId();
    internal int get_NodeIndex();
    internal BuildEventContext get_BuildEventContext();
}
internal class Microsoft.Build.BuildEngine.Expander : object {
    internal Dictionary`2<string, string> ItemMetadata { get; }
    internal Expander(BuildPropertyGroup properties);
    internal Expander(BuildPropertyGroup properties, string implicitMetadataItemType, Dictionary`2<string, string> unqualifiedItemMetadata);
    internal Expander(BuildPropertyGroup properties, Hashtable items);
    internal Expander(BuildPropertyGroup properties, Hashtable items, ExpanderOptions options);
    internal Expander(ReadOnlyLookup lookup, Dictionary`2<string, string> itemMetadata);
    internal Expander(ReadOnlyLookup lookup);
    internal Expander(ReadOnlyLookup lookup, Dictionary`2<string, string> itemMetadata, ExpanderOptions options);
    internal Expander(Expander expander, ExpanderOptions options);
    internal Expander(Expander expander, SpecificItemDefinitionLibrary itemDefinitionLibrary);
    private static Expander();
    internal Dictionary`2<string, string> get_ItemMetadata();
    internal void SetMetadataInMetadataTable(string itemType, string name, string value);
    internal List`1<BuildItem> ExpandAllIntoBuildItems(string expression, XmlAttribute expressionAttribute);
    internal List`1<TaskItem> ExpandAllIntoTaskItems(string expression, XmlAttribute expressionAttribute);
    internal string ExpandAllIntoString(XmlAttribute expressionAttribute);
    internal string ExpandAllIntoString(string expression, XmlNode expressionNode);
    internal string ExpandAllIntoStringLeaveEscaped(XmlAttribute expressionAttribute);
    internal string ExpandAllIntoStringLeaveEscaped(string expression, XmlNode expressionNode);
    internal List`1<string> ExpandAllIntoStringList(string expression, XmlNode expressionNode);
    internal List`1<string> ExpandAllIntoStringList(XmlAttribute expressionAttribute);
    internal List`1<string> ExpandAllIntoStringListLeaveEscaped(string expression, XmlNode expressionNode);
    internal List`1<string> ExpandAllIntoStringListLeaveEscaped(XmlAttribute expressionAttribute);
    internal string ExpandPropertiesLeaveEscaped(string sourceString, XmlNode sourceNode);
    internal string ExpandMetadataLeaveEscaped(string expression);
    internal BuildItemGroup ExpandSingleItemListExpressionIntoItemsLeaveEscaped(string singleItemVectorExpression, XmlAttribute itemVectorAttribute);
    internal BuildItemGroup ExpandSingleItemListExpressionIntoItemsLeaveEscaped(string singleItemVectorExpression, XmlAttribute itemVectorAttribute, Match& itemVectorMatch);
}
[FlagsAttribute]
internal enum Microsoft.Build.BuildEngine.ExpanderOptions : Enum {
    public int value__;
    public static ExpanderOptions Invalid;
    public static ExpanderOptions ExpandProperties;
    public static ExpanderOptions ExpandItems;
    public static ExpanderOptions ExpandPropertiesAndItems;
    public static ExpanderOptions ExpandMetadata;
    public static ExpanderOptions ExpandPropertiesAndMetadata;
    public static ExpanderOptions ExpandAll;
}
internal static class Microsoft.Build.BuildEngine.ExpressionShredder : object {
    internal static List`1<string> SplitSemiColonSeparatedList(string expression);
    internal static ItemsAndMetadataPair GetReferencedItemNamesAndMetadata(List`1<string> expressions);
    internal static bool ContainsMetadataExpressionOutsideTransform(string expression);
}
public class Microsoft.Build.BuildEngine.FileLogger : ConsoleLogger {
    private static FileLogger();
    public virtual void Initialize(IEventSource eventSource);
    public virtual void Initialize(IEventSource eventSource, int nodeCount);
    public virtual void Shutdown();
}
internal class Microsoft.Build.BuildEngine.FunctionCallExpressionNode : OperatorExpressionNode {
    internal FunctionCallExpressionNode(string functionName, ArrayList arguments);
    internal virtual bool BoolEvaluate(ConditionEvaluationState state);
}
internal static class Microsoft.Build.BuildEngine.FunctionConstants : object {
    internal static IDictionary`2<string, Tuple`2<string, Type>> AvailableStaticMethods { get; }
    internal static IDictionary`2<string, Tuple`2<string, Type>> get_AvailableStaticMethods();
    internal static void Reset_ForUnitTestsOnly();
}
internal abstract class Microsoft.Build.BuildEngine.GenericExpressionNode : object {
    internal bool PossibleAndCollision { get; internal set; }
    internal bool PossibleOrCollision { get; internal set; }
    internal abstract virtual bool CanBoolEvaluate(ConditionEvaluationState state);
    internal abstract virtual bool CanNumericEvaluate(ConditionEvaluationState state);
    internal abstract virtual bool BoolEvaluate(ConditionEvaluationState state);
    internal abstract virtual double NumericEvaluate(ConditionEvaluationState state);
    internal abstract virtual string GetExpandedValue(ConditionEvaluationState state);
    internal abstract virtual string GetUnexpandedValue(ConditionEvaluationState state);
    internal abstract virtual void ResetState();
    internal bool Evaluate(ConditionEvaluationState state);
    internal virtual void set_PossibleAndCollision(bool value);
    internal virtual bool get_PossibleAndCollision();
    internal virtual void set_PossibleOrCollision(bool value);
    internal virtual bool get_PossibleOrCollision();
    internal bool PotentialAndOrConflict();
    internal abstract virtual bool DetectOr();
    internal abstract virtual bool DetectAnd();
}
internal class Microsoft.Build.BuildEngine.GetFiles : MulticastDelegate {
    public GetFiles(object object, IntPtr method);
    public virtual String[] Invoke(string path, string pattern);
    public virtual IAsyncResult BeginInvoke(string path, string pattern, AsyncCallback callback, object object);
    public virtual String[] EndInvoke(IAsyncResult result);
}
internal class Microsoft.Build.BuildEngine.GreaterThanExpressionNode : NumericComparisonExpressionNode {
    protected virtual bool Compare(double left, double right);
}
internal class Microsoft.Build.BuildEngine.GreaterThanOrEqualExpressionNode : NumericComparisonExpressionNode {
    protected virtual bool Compare(double left, double right);
}
internal class Microsoft.Build.BuildEngine.GroupEnumeratorHelper : object {
    internal GroupEnumeratorHelper(GroupingCollection groupingCollection, ListType type);
    [IteratorStateMachineAttribute("Microsoft.Build.BuildEngine.GroupEnumeratorHelper/<GetEnumerator>d__4")]
public sealed virtual IEnumerator GetEnumerator();
}
internal class Microsoft.Build.BuildEngine.GroupingCollection : object {
    internal int PropertyGroupCount { get; }
    internal object SyncRoot { get; }
    internal bool IsSynchronized { get; }
    internal int ItemGroupCount { get; }
    internal GroupEnumeratorHelper PropertyGroupsTopLevelAndChooses { get; }
    internal GroupEnumeratorHelper ItemGroupsTopLevelAndChooses { get; }
    internal GroupEnumeratorHelper PropertyGroupsTopLevel { get; }
    internal GroupEnumeratorHelper ItemGroupsTopLevel { get; }
    internal GroupEnumeratorHelper PropertyGroupsAll { get; }
    internal GroupEnumeratorHelper ItemGroupsAll { get; }
    internal GroupEnumeratorHelper ChoosesTopLevel { get; }
    internal GroupingCollection(GroupingCollection parentGroupingCollection);
    internal void ChangePropertyGroupCount(int delta);
    internal int get_PropertyGroupCount();
    internal object get_SyncRoot();
    internal bool get_IsSynchronized();
    internal void PropertyCopyTo(Array array, int index);
    internal IEnumerator GetPropertyEnumerator();
    internal void ChangeItemGroupCount(int delta);
    internal int get_ItemGroupCount();
    internal void ItemCopyTo(Array array, int index);
    internal IEnumerator GetItemEnumerator();
    internal GroupEnumeratorHelper get_PropertyGroupsTopLevelAndChooses();
    internal GroupEnumeratorHelper get_ItemGroupsTopLevelAndChooses();
    internal GroupEnumeratorHelper get_PropertyGroupsTopLevel();
    internal GroupEnumeratorHelper get_ItemGroupsTopLevel();
    internal GroupEnumeratorHelper get_PropertyGroupsAll();
    internal GroupEnumeratorHelper get_ItemGroupsAll();
    internal GroupEnumeratorHelper get_ChoosesTopLevel();
    public sealed virtual IEnumerator GetEnumerator();
    internal void InsertAtBeginning(BuildPropertyGroup newPropertyGroup);
    internal void InsertAfter(BuildPropertyGroup newPropertyGroup, BuildPropertyGroup insertionPoint);
    internal void InsertAtEnd(BuildPropertyGroup newPropertyGroup);
    internal void RemovePropertyGroup(BuildPropertyGroup propertyGroup);
    internal void InsertAfter(BuildItemGroup newItemGroup, BuildItemGroup insertionPoint);
    internal void InsertAtEnd(BuildItemGroup newItemGroup);
    internal void RemoveItemGroup(BuildItemGroup itemGroupToRemove);
    internal void InsertAfter(IItemPropertyGrouping newGroup, IItemPropertyGrouping insertionPoint);
    internal void InsertAtEnd(IItemPropertyGrouping newGroup);
    internal void RemoveChoose(Choose choose);
    internal void Clear();
    internal void RemoveAllPropertyGroups();
    internal void RemoveAllPropertyGroupsByCondition(string condition, bool includeImportedPropertyGroups);
    internal void RemoveAllItemGroups();
    internal void RemoveAllItemGroupsByCondition(string condition);
    internal void RemoveItemsByName(string itemName);
}
internal static class Microsoft.Build.BuildEngine.HashTableUtility : object {
    internal static int Compare(Dictionary`2<string, string> h1, Dictionary`2<string, string> h2);
}
internal class Microsoft.Build.BuildEngine.HostBuildRequestCompletionEngineCommand : EngineCommand {
    internal virtual void Execute(Engine parentEngine);
}
internal interface Microsoft.Build.BuildEngine.IEngineCallback {
    public abstract virtual void PostBuildRequestsToHost(BuildRequest[] buildRequests);
    public abstract virtual void PostBuildResultToHost(BuildResult buildResult);
    public abstract virtual void PostLoggingMessagesToHost(int nodeId, NodeLoggingEvent[] nodeLoggingEventArray);
    public abstract virtual Exception PostCacheEntriesToHost(int nodeId, CacheEntry[] entries, string scopeName, BuildPropertyGroup scopeProperties, string scopeToolsVersion, CacheContentType cacheContentType);
    public abstract virtual CacheEntry[] GetCachedEntriesFromHost(int nodeId, String[] names, string scopeName, BuildPropertyGroup scopeProperties, string scopeToolsVersion, CacheContentType cacheContentType);
    public abstract virtual void PostStatus(int nodeId, NodeStatus nodeStatus, bool blockUntilSent);
}
internal interface Microsoft.Build.BuildEngine.IItemPropertyGrouping {
}
public class Microsoft.Build.BuildEngine.Import : object {
    internal Project ParentProject { get; internal set; }
    internal XmlElement ImportElement { get; }
    public bool IsImported { get; }
    public string ProjectPath { get; public set; }
    internal XmlAttribute ProjectPathAttribute { get; }
    public string EvaluatedProjectPath { get; }
    public string Condition { get; public set; }
    internal XmlAttribute ConditionAttribute { get; }
    internal Import(XmlElement importElement, Project parentProject, bool isImported);
    internal Project get_ParentProject();
    internal void set_ParentProject(Project value);
    internal XmlElement get_ImportElement();
    public bool get_IsImported();
    public string get_ProjectPath();
    public void set_ProjectPath(string value);
    internal XmlAttribute get_ProjectPathAttribute();
    public string get_EvaluatedProjectPath();
    public string get_Condition();
    public void set_Condition(string value);
    internal XmlAttribute get_ConditionAttribute();
    internal void SetEvaluatedProjectPath(string newEvaluatedProjectPath);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Build.BuildEngine.ImportCollection : object {
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    internal Project ParentProject { get; }
    internal Import Item { get; internal set; }
    internal ImportCollection(Project parentProject);
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    internal Project get_ParentProject();
    internal void Clear();
    internal Import get_Item(string index);
    internal void set_Item(string index, Import value);
    public void CopyTo(Import[] array, int index);
    public void AddNewImport(string projectFile, string condition);
    public void RemoveImport(Import importToRemove);
}
internal class Microsoft.Build.BuildEngine.ImportedProject : object {
    internal XmlDocument Xml { get; }
    internal ImportedProject(string projectFile);
    internal XmlDocument get_Xml();
    internal bool HasChangedOnDisk(string projectFile);
}
internal interface Microsoft.Build.BuildEngine.INodeDescription {
}
internal interface Microsoft.Build.BuildEngine.INodeProvider {
    public abstract virtual void Initialize(string configuration, IEngineCallback engineCallback, BuildPropertyGroup parentGlobalProperties, ToolsetDefinitionLocations toolsetSearchLocations, string startupDirectory);
    public abstract virtual INodeDescription[] QueryNodeDescriptions();
    public abstract virtual void AssignNodeIdentifiers(Int32[] nodeIdentifiers);
    public abstract virtual void RegisterNodeLogger(LoggerDescription loggerDescription);
    public abstract virtual void PostBuildRequestToNode(int nodeIndex, BuildRequest buildRequest);
    public abstract virtual void PostBuildResultToNode(int nodeIndex, BuildResult buildResult);
    public abstract virtual void RequestNodeStatus(int nodeIndex, int requestId);
    public abstract virtual void ShutdownNodes(NodeShutdownLevel nodeShutdownLevel);
    public abstract virtual void UpdateSettings(bool enableCentralizedLogging, bool enableOnlyLogCriticalEvents, bool useBreadFirstTraversal);
    public abstract virtual void PostIntrospectorCommand(int nodeIndex, TargetInProgessState child, TargetInProgessState parent);
}
public class Microsoft.Build.BuildEngine.InternalLoggerException : Exception {
    public BuildEventArgs BuildEventArgs { get; }
    public string ErrorCode { get; }
    public string HelpKeyword { get; }
    public bool InitializationException { get; }
    public InternalLoggerException(string message);
    public InternalLoggerException(string message, Exception innerException);
    internal InternalLoggerException(string message, Exception innerException, BuildEventArgs e, string errorCode, string helpKeyword, bool initializationException);
    private InternalLoggerException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public BuildEventArgs get_BuildEventArgs();
    public string get_ErrorCode();
    public string get_HelpKeyword();
    public bool get_InitializationException();
    internal static void Throw(Exception innerException, BuildEventArgs e, string messageResourceName, bool initializationException, String[] messageArgs);
}
internal static class Microsoft.Build.BuildEngine.IntrinsicFunctions : object {
    internal static double Add(double a, double b);
    internal static long Add(long a, long b);
    internal static double Subtract(double a, double b);
    internal static long Subtract(long a, long b);
    internal static double Multiply(double a, double b);
    internal static long Multiply(long a, long b);
    internal static double Divide(double a, double b);
    internal static long Divide(long a, long b);
    internal static double Modulo(double a, double b);
    internal static long Modulo(long a, long b);
    internal static string Escape(string unescaped);
    internal static string Unescape(string escaped);
    internal static int BitwiseOr(int first, int second);
    internal static int BitwiseAnd(int first, int second);
    internal static int BitwiseXor(int first, int second);
    internal static int BitwiseNot(int first);
    internal static object GetRegistryValue(string keyName, string valueName);
    internal static object GetRegistryValue(string keyName, string valueName, object defaultValue);
    internal static object GetRegistryValueFromView(string keyName, string valueName, object defaultValue, Object[] views);
    internal static string MakeRelative(string basePath, string path);
    internal static string GetDirectoryNameOfFileAbove(string startingDirectory, string fileName);
    internal static string ValueOrDefault(string conditionValue, string defaultValue);
    internal static bool DoesTaskHostExist(string runtime, string architecture);
    internal static List`1<string> __GetListTest();
}
internal class Microsoft.Build.BuildEngine.IntrinsicTask : object {
    internal IntrinsicTask(XmlElement taskNodeXmlElement, EngineLoggingServices loggingServices, BuildEventContext eventContext, string executionDirectory, ItemDefinitionLibrary itemDefinitionLibrary);
    internal void ExecuteTask(Lookup lookup);
    internal static bool IsIntrinsicTaskName(string name);
}
internal class Microsoft.Build.BuildEngine.Introspector : object {
    internal static int initialLoopTimeout;
    internal static int cycleBreakTimeout;
    internal static int maxLoopTimeout;
    internal static int nodeStatusReplyTimeout;
    internal Introspector(Engine parentEngine, ProjectManager projectManager, NodeManager nodeManager);
    internal int DetectDeadlock(int queueCounts, long lastLoopActivity, int currentTimeout);
    internal void SystemShutdown();
    internal void BreakCycle(TargetInProgessState child, TargetInProgessState parent);
    internal List`1<ProjectBuildState> FindConnectingContexts(TargetInProgessState child, TargetInProgessState parent, Target childTarget, List`1<ProjectBuildState> waitingStates, ProjectBuildState initiatingBuildContext);
}
public class Microsoft.Build.BuildEngine.InvalidProjectFileException : Exception {
    public string Message { get; }
    public string BaseMessage { get; }
    public string ProjectFile { get; }
    public int LineNumber { get; }
    public int ColumnNumber { get; }
    public int EndLineNumber { get; }
    public int EndColumnNumber { get; }
    public string ErrorSubcategory { get; }
    public string ErrorCode { get; }
    public string HelpKeyword { get; }
    internal bool HasBeenLogged { get; internal set; }
    public InvalidProjectFileException(string message);
    public InvalidProjectFileException(string message, Exception innerException);
    private InvalidProjectFileException(SerializationInfo info, StreamingContext context);
    public InvalidProjectFileException(XmlNode xmlNode, string message, string errorSubcategory, string errorCode, string helpKeyword);
    public InvalidProjectFileException(string projectFile, int lineNumber, int columnNumber, int endLineNumber, int endColumnNumber, string message, string errorSubcategory, string errorCode, string helpKeyword);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
    public string get_BaseMessage();
    public string get_ProjectFile();
    public int get_LineNumber();
    public int get_ColumnNumber();
    public int get_EndLineNumber();
    public int get_EndColumnNumber();
    public string get_ErrorSubcategory();
    public string get_ErrorCode();
    public string get_HelpKeyword();
    internal bool get_HasBeenLogged();
    internal void set_HasBeenLogged(bool value);
}
public class Microsoft.Build.BuildEngine.InvalidToolsetDefinitionException : Exception {
    public string ErrorCode { get; }
    public InvalidToolsetDefinitionException(string message);
    public InvalidToolsetDefinitionException(string message, Exception innerException);
    protected InvalidToolsetDefinitionException(SerializationInfo info, StreamingContext context);
    public InvalidToolsetDefinitionException(string message, string errorCode);
    public InvalidToolsetDefinitionException(string message, string errorCode, Exception innerException);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public string get_ErrorCode();
    internal static void Throw(string resourceName, Object[] args);
    internal static void Throw(Exception innerException, string resourceName, Object[] args);
}
internal interface Microsoft.Build.BuildEngine.ITaskRegistry {
    public abstract virtual void RegisterTask(UsingTask usingTask, Expander expander, EngineLoggingServices loggingServices, BuildEventContext context);
    public abstract virtual bool GetRegisteredTask(string taskName, string taskProjectFile, XmlNode taskNode, bool exactMatchRequired, EngineLoggingServices loggingServices, BuildEventContext context, LoadedType& taskClass);
    public abstract virtual void Clear();
}
internal class Microsoft.Build.BuildEngine.ItemBucket : object {
    internal Expander Expander { get; }
    internal int BucketSequenceNumber { get; }
    internal Lookup Lookup { get; }
    internal ItemBucket(ICollection itemNames, Dictionary`2<string, string> itemMetadata, Lookup lookup, int bucketSequenceNumber);
    public sealed virtual int CompareTo(object obj);
    internal static ItemBucket GetDummyBucketForComparisons(Dictionary`2<string, string> itemMetadata);
    internal Expander get_Expander();
    internal int get_BucketSequenceNumber();
    internal Lookup get_Lookup();
    internal void AddItem(BuildItem item);
}
internal class Microsoft.Build.BuildEngine.ItemDefinitionLibrary : object {
    internal bool IsEvaluated { get; }
    internal ItemDefinitionLibrary(Project parentProject);
    internal bool get_IsEvaluated();
    internal void Add(XmlElement element);
    internal void Evaluate(BuildPropertyGroup evaluatedProperties);
    internal string GetDefaultMetadataValue(string itemType, string metadataName);
    internal int GetDefaultedMetadataCount(string itemType);
    internal ICollection`1<string> GetDefaultedMetadataNames(string itemType);
    internal Dictionary`2<string, string> GetDefaultedMetadata(string itemType);
}
internal class Microsoft.Build.BuildEngine.ItemExpander : object {
    internal static string itemVectorPrefix;
    internal static Regex itemVectorPattern;
    internal static Regex listOfItemVectorsWithoutSeparatorsPattern;
    internal static string itemMetadataPrefix;
    internal static Regex itemMetadataPattern;
    internal static Regex nonTransformItemMetadataPattern;
    private static ItemExpander();
    internal static string ExpandEmbeddedItemVectors(string s, XmlNode parentNode, ReadOnlyLookup readOnlyLookup);
    internal static BuildItemGroup ItemizeItemVector(string itemVectorExpression, XmlNode parentNode, ReadOnlyLookup readOnlyLookup);
    internal static BuildItemGroup ItemizeItemVector(string itemVectorExpression, XmlNode parentNode, ReadOnlyLookup readOnlyLookup, Match& itemVectorMatch);
    internal static bool ExpressionContainsItemVector(string expression);
}
internal class Microsoft.Build.BuildEngine.ItemsAndMetadataPair : ValueType {
    private Hashtable items;
    private Dictionary`2<string, MetadataReference> metadata;
    internal Hashtable Items { get; internal set; }
    internal Dictionary`2<string, MetadataReference> Metadata { get; internal set; }
    internal ItemsAndMetadataPair(Hashtable items, Dictionary`2<string, MetadataReference> metadata);
    internal Hashtable get_Items();
    internal void set_Items(Hashtable value);
    internal Dictionary`2<string, MetadataReference> get_Metadata();
    internal void set_Metadata(Dictionary`2<string, MetadataReference> value);
}
internal class Microsoft.Build.BuildEngine.LessThanExpressionNode : NumericComparisonExpressionNode {
    protected virtual bool Compare(double left, double right);
}
internal class Microsoft.Build.BuildEngine.LessThanOrEqualExpressionNode : NumericComparisonExpressionNode {
    protected virtual bool Compare(double left, double right);
}
internal class Microsoft.Build.BuildEngine.LoadXmlFromPath : MulticastDelegate {
    public LoadXmlFromPath(object object, IntPtr method);
    public virtual XmlDocument Invoke(string path);
    public virtual IAsyncResult BeginInvoke(string path, AsyncCallback callback, object object);
    public virtual XmlDocument EndInvoke(IAsyncResult result);
}
internal abstract class Microsoft.Build.BuildEngine.LocalCallDescriptor : object {
    protected LocalCallType callType;
    internal int CallNumber { get; }
    internal LocalCallType CallType { get; }
    internal bool NeedsReply { get; }
    internal bool IsReply { get; }
    internal LocalCallDescriptor(LocalCallType callType);
    private static LocalCallDescriptor();
    internal int get_CallNumber();
    internal LocalCallType get_CallType();
    internal virtual bool get_NeedsReply();
    internal virtual bool get_IsReply();
    internal virtual void HostAction(IEngineCallback engineCallback, LocalNodeProvider nodeProvider, int nodeId);
    internal virtual void NodeAction(Node node, LocalNode localNode);
    internal virtual LocalReplyCallDescriptor ReplyFromHostAction();
    internal virtual object GetReplyData();
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader);
}
internal class Microsoft.Build.BuildEngine.LocalCallDescriptorForGettingCacheEntriesFromHost : LocalCallDescriptor {
    internal bool NeedsReply { get; }
    internal String[] Names { get; }
    internal string ScopeName { get; }
    internal BuildPropertyGroup ScopeProperties { get; }
    internal CacheContentType ContentType { get; }
    internal string ScopeToolsVersion { get; }
    internal LocalCallDescriptorForGettingCacheEntriesFromHost(String[] names, string scopeName, BuildPropertyGroup scopeProperties, string scopeToolsVersion, CacheContentType cacheContentType);
    internal virtual bool get_NeedsReply();
    internal String[] get_Names();
    internal string get_ScopeName();
    internal BuildPropertyGroup get_ScopeProperties();
    internal CacheContentType get_ContentType();
    internal string get_ScopeToolsVersion();
    internal virtual void HostAction(IEngineCallback engineCallback, LocalNodeProvider nodeProvider, int nodeId);
    internal virtual LocalReplyCallDescriptor ReplyFromHostAction();
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader);
}
internal class Microsoft.Build.BuildEngine.LocalCallDescriptorForInitializationComplete : LocalCallDescriptor {
    internal int ProcessId { get; }
    internal LocalCallDescriptorForInitializationComplete(int processId);
    internal virtual void HostAction(IEngineCallback engineCallback, LocalNodeProvider nodeProvider, int nodeId);
    internal int get_ProcessId();
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader);
}
internal class Microsoft.Build.BuildEngine.LocalCallDescriptorForInitializeNode : LocalCallDescriptor {
    internal Hashtable EnvironmentVariables { get; }
    internal LoggerDescription[] NodeLoggers { get; }
    internal int NodeId { get; }
    internal BuildPropertyGroup ParentGlobalProperties { get; }
    internal ToolsetDefinitionLocations ToolsetSearchLocations { get; }
    internal int ParentProcessId { get; }
    internal LocalCallDescriptorForInitializeNode(Hashtable environmentVariablesToSend, LoggerDescription[] nodeLoggers, int nodeId, BuildPropertyGroup parentGlobalProperties, ToolsetDefinitionLocations toolsetSearchLocations, int parentProcessId, string parentStartupDirectory);
    internal virtual void NodeAction(Node node, LocalNode localNode);
    internal Hashtable get_EnvironmentVariables();
    internal LoggerDescription[] get_NodeLoggers();
    internal int get_NodeId();
    internal BuildPropertyGroup get_ParentGlobalProperties();
    internal ToolsetDefinitionLocations get_ToolsetSearchLocations();
    internal int get_ParentProcessId();
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader);
}
internal class Microsoft.Build.BuildEngine.LocalCallDescriptorForPostBuildRequests : LocalCallDescriptor {
    internal BuildRequest[] BuildRequests { get; }
    internal LocalCallDescriptorForPostBuildRequests(BuildRequest[] buildRequests);
    internal LocalCallDescriptorForPostBuildRequests(BuildRequest buildRequest);
    internal virtual void HostAction(IEngineCallback engineCallback, LocalNodeProvider nodeProvider, int nodeId);
    internal virtual void NodeAction(Node node, LocalNode localNode);
    internal BuildRequest[] get_BuildRequests();
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader);
}
internal class Microsoft.Build.BuildEngine.LocalCallDescriptorForPostBuildResult : LocalCallDescriptor {
    internal BuildResult ResultOfBuild { get; }
    internal LocalCallDescriptorForPostBuildResult(BuildResult buildResult);
    internal virtual void HostAction(IEngineCallback engineCallback, LocalNodeProvider nodeProvider, int nodeId);
    internal virtual void NodeAction(Node node, LocalNode localNode);
    internal BuildResult get_ResultOfBuild();
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader);
}
internal class Microsoft.Build.BuildEngine.LocalCallDescriptorForPostingCacheEntriesToHost : LocalCallDescriptor {
    internal bool NeedsReply { get; }
    internal CacheEntry[] Entries { get; }
    internal string ScopeName { get; }
    internal CacheContentType ContentType { get; }
    internal BuildPropertyGroup ScopeProperties { get; }
    internal string ScopeToolsVersion { get; }
    internal LocalCallDescriptorForPostingCacheEntriesToHost(CacheEntry[] entries, string scopeName, BuildPropertyGroup scopeProperties, string scopeToolsVersion, CacheContentType cacheContentType);
    internal virtual bool get_NeedsReply();
    internal CacheEntry[] get_Entries();
    internal string get_ScopeName();
    internal CacheContentType get_ContentType();
    internal BuildPropertyGroup get_ScopeProperties();
    internal string get_ScopeToolsVersion();
    internal virtual void HostAction(IEngineCallback engineCallback, LocalNodeProvider nodeProvider, int nodeId);
    internal virtual LocalReplyCallDescriptor ReplyFromHostAction();
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader);
}
internal class Microsoft.Build.BuildEngine.LocalCallDescriptorForPostIntrospectorCommand : LocalCallDescriptor {
    internal LocalCallDescriptorForPostIntrospectorCommand(TargetInProgessState child, TargetInProgessState parent);
    internal virtual void NodeAction(Node node, LocalNode localNode);
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader);
}
internal class Microsoft.Build.BuildEngine.LocalCallDescriptorForPostLoggingMessagesToHost : LocalCallDescriptor {
    internal NodeLoggingEvent[] BuildEvents { get; }
    internal LocalCallDescriptorForPostLoggingMessagesToHost(NodeLoggingEvent[] buildEvents);
    internal virtual void HostAction(IEngineCallback engineCallback, LocalNodeProvider nodeProvider, int nodeId);
    internal NodeLoggingEvent[] get_BuildEvents();
    internal void WriteToStream(BinaryWriter writer, Hashtable loggingTypeCache);
    internal void CreateFromStream(BinaryReader reader, Hashtable loggingTypeCache);
}
internal class Microsoft.Build.BuildEngine.LocalCallDescriptorForPostStatus : LocalCallDescriptor {
    internal NodeStatus StatusOfNode { get; }
    internal LocalCallDescriptorForPostStatus(NodeStatus nodeStatus);
    internal virtual void HostAction(IEngineCallback engineCallback, LocalNodeProvider nodeProvider, int nodeId);
    internal NodeStatus get_StatusOfNode();
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader);
}
internal class Microsoft.Build.BuildEngine.LocalCallDescriptorForRequestStatus : LocalCallDescriptor {
    internal int RequestId { get; }
    internal LocalCallDescriptorForRequestStatus(int requestId);
    internal virtual void NodeAction(Node node, LocalNode localNode);
    internal int get_RequestId();
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader);
}
internal class Microsoft.Build.BuildEngine.LocalCallDescriptorForShutdownComplete : LocalCallDescriptor {
    internal NodeShutdownLevel ShutdownLevel { get; }
    internal LocalCallDescriptorForShutdownComplete(NodeShutdownLevel shutdownLevel, int totalTaskTime);
    internal virtual void HostAction(IEngineCallback engineCallback, LocalNodeProvider nodeProvider, int nodeId);
    internal NodeShutdownLevel get_ShutdownLevel();
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader);
}
internal class Microsoft.Build.BuildEngine.LocalCallDescriptorForShutdownNode : LocalCallDescriptor {
    internal bool ExitProcess { get; }
    internal NodeShutdownLevel ShutdownLevel { get; }
    internal LocalCallDescriptorForShutdownNode(NodeShutdownLevel shutdownLevel, bool exitProcess);
    internal virtual void NodeAction(Node node, LocalNode localNode);
    internal bool get_ExitProcess();
    internal NodeShutdownLevel get_ShutdownLevel();
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader);
}
internal class Microsoft.Build.BuildEngine.LocalCallDescriptorForUpdateNodeSettings : LocalCallDescriptor {
    internal bool LogOnlyCriticalEvents { get; }
    internal bool CentralizedLogging { get; }
    internal bool UseBreadthFirstTraversal { get; }
    internal LocalCallDescriptorForUpdateNodeSettings(bool enableLogOnlyCriticalEvents, bool enableCentralizedLogging, bool useBreadthFirstTraversal);
    internal virtual void NodeAction(Node node, LocalNode localNode);
    internal bool get_LogOnlyCriticalEvents();
    internal bool get_CentralizedLogging();
    internal bool get_UseBreadthFirstTraversal();
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader);
}
internal enum Microsoft.Build.BuildEngine.LocalCallType : Enum {
    public int value__;
    public static LocalCallType PostBuildRequests;
    public static LocalCallType PostBuildResult;
    public static LocalCallType PostLoggingMessagesToHost;
    public static LocalCallType UpdateNodeSettings;
    public static LocalCallType RequestStatus;
    public static LocalCallType PostStatus;
    public static LocalCallType InitializeNode;
    public static LocalCallType InitializationComplete;
    public static LocalCallType ShutdownNode;
    public static LocalCallType ShutdownComplete;
    public static LocalCallType PostIntrospectorCommand;
    public static LocalCallType GenericSingleObjectReply;
    public static LocalCallType PostCacheEntriesToHost;
    public static LocalCallType GetCacheEntriesFromHost;
}
public class Microsoft.Build.BuildEngine.LocalNode : object {
    internal static string DumpFileName { get; }
    private static LocalNode();
    internal LocalNode(int nodeNumberIn);
    internal static void DumpExceptionToFile(Exception ex);
    public static void StartLocalNodeServer(int nodeNumber);
    internal void ShutdownNode(NodeShutdownLevel shutdownLevel, bool exitProcess, bool noParentNotification);
    internal void Activate(Hashtable environmentVariables, LoggerDescription[] nodeLoggers, int nodeId, BuildPropertyGroup parentGlobalProperties, ToolsetDefinitionLocations toolsetSearchLocations, int parentId, string parentStartupDirectory);
    internal void ReportFatalCommunicationError(Exception originalException);
    internal void ReportNonFatalCommunicationError(Exception originalException);
    internal static string get_DumpFileName();
}
internal class Microsoft.Build.BuildEngine.LocalNodeCallback : object {
    internal LocalNodeCallback(ManualResetEvent exitCommunicationThreads, LocalNode localNode);
    internal void StartWriterThread(int nodeNumber);
    internal void PostMessageToParent(LocalCallDescriptor callDescriptor, bool waitForCompletion);
    internal void PostReplyFromParent(LocalReplyCallDescriptor reply);
    internal void Reset();
    internal Thread GetWriterThread();
    public sealed virtual void PostBuildRequestsToHost(BuildRequest[] buildRequests);
    public sealed virtual void PostBuildResultToHost(BuildResult buildResult);
    public sealed virtual void PostLoggingMessagesToHost(int nodeProviderId, NodeLoggingEvent[] nodeLoggingEventArray);
    public sealed virtual CacheEntry[] GetCachedEntriesFromHost(int nodeId, String[] names, string scopeName, BuildPropertyGroup scopeProperties, string scopeToolsVersion, CacheContentType cacheContentType);
    public sealed virtual Exception PostCacheEntriesToHost(int nodeId, CacheEntry[] entries, string scopeName, BuildPropertyGroup scopeProperties, string scopeToolsVersion, CacheContentType cacheContentType);
    public sealed virtual void PostStatus(int nodeId, NodeStatus nodeStatus, bool blockUntilSent);
}
internal class Microsoft.Build.BuildEngine.LocalNodeInfo : object {
    internal static int invalidProcessId;
    internal static int unInitializedProcessId;
    internal SharedMemory SharedMemoryToNode { get; internal set; }
    internal SharedMemory SharedMemoryFromNode { get; internal set; }
    internal DualQueue`1<LocalCallDescriptor> NodeCommandQueue { get; }
    internal DualQueue`1<LocalCallDescriptor> NodeHiPriCommandQueue { get; }
    internal LinkedList`1<BuildRequest> TargetList { get; internal set; }
    internal NodeState NodeState { get; internal set; }
    internal int NodeNumber { get; }
    internal int NodeId { get; internal set; }
    internal int ProcessId { get; internal set; }
    internal bool CommunicationFailed { get; internal set; }
    public bool ShutdownResponseReceived { get; public set; }
    internal LocalNodeInfo(int availableNodeNumberHint);
    internal SharedMemory get_SharedMemoryToNode();
    internal void set_SharedMemoryToNode(SharedMemory value);
    internal SharedMemory get_SharedMemoryFromNode();
    internal void set_SharedMemoryFromNode(SharedMemory value);
    internal DualQueue`1<LocalCallDescriptor> get_NodeCommandQueue();
    internal DualQueue`1<LocalCallDescriptor> get_NodeHiPriCommandQueue();
    internal LinkedList`1<BuildRequest> get_TargetList();
    internal void set_TargetList(LinkedList`1<BuildRequest> value);
    internal NodeState get_NodeState();
    internal void set_NodeState(NodeState value);
    internal int get_NodeNumber();
    internal int get_NodeId();
    internal void set_NodeId(int value);
    internal int get_ProcessId();
    internal void set_ProcessId(int value);
    internal bool get_CommunicationFailed();
    internal void set_CommunicationFailed(bool value);
    public bool get_ShutdownResponseReceived();
    public void set_ShutdownResponseReceived(bool value);
    internal bool CreateSharedMemoryBuffers();
    internal void ReleaseNode();
}
internal class Microsoft.Build.BuildEngine.LocalNodeProvider : object {
    private static LocalNodeProvider();
    public sealed virtual void Initialize(string configuration, IEngineCallback parentEngineCallback, BuildPropertyGroup parentGlobalPropertyGroup, ToolsetDefinitionLocations toolSetSearchLocations, string startupDirectory);
    public void ApplyParameter(string parameterName, string parameterValue);
    public sealed virtual INodeDescription[] QueryNodeDescriptions();
    public sealed virtual void AssignNodeIdentifiers(Int32[] nodeIds);
    public sealed virtual void RegisterNodeLogger(LoggerDescription loggerDescription);
    public sealed virtual void RequestNodeStatus(int nodeIndex, int requestId);
    public sealed virtual void PostBuildRequestToNode(int nodeIndex, BuildRequest buildRequest);
    public sealed virtual void PostBuildResultToNode(int nodeIndex, BuildResult buildResult);
    public sealed virtual void ShutdownNodes(NodeShutdownLevel nodeShutdownLevel);
    internal bool ReadyToShutdown();
    public sealed virtual void UpdateSettings(bool enableCentralizedLogging, bool enableOnlyLogCriticalEvents, bool useBreadthFirstTraversalSetting);
    public sealed virtual void PostIntrospectorCommand(int nodeIndex, TargetInProgessState child, TargetInProgessState parent);
    internal void RecordNodeResponse(int nodeId, NodeShutdownLevel shutdownLevel, int totalTaskTime);
    internal void SetNodeProcessId(int processId, int nodeId);
}
internal static class Microsoft.Build.BuildEngine.LocalNodeProviderGlobalNames : object {
    private static LocalNodeProviderGlobalNames();
    internal static string NodeActiveEventName(int nodeNumber);
    internal static string NodeInUseEventName(int nodeNumber);
    internal static string NodeErrorShutdownEventName(int nodeNumber);
    internal static string NodeReserveEventName(int nodeNumber);
    internal static string NodeInitiateActivationEventName(int nodeNumber);
    internal static string NodeActivedEventName(int nodeNumber);
    internal static string NodeInputMemoryName(int nodeNumber);
    internal static string NodeOutputMemoryName(int nodeNumber);
}
internal class Microsoft.Build.BuildEngine.LocalReplyCallDescriptor : LocalCallDescriptor {
    internal bool IsReply { get; }
    internal int RequestingCallNumber { get; }
    internal object ReplyData { get; }
    internal LocalReplyCallDescriptor(int requestingCallNumber, object replyData);
    private static LocalReplyCallDescriptor();
    internal virtual bool get_IsReply();
    internal virtual int get_RequestingCallNumber();
    internal object get_ReplyData();
    internal virtual void NodeAction(Node node, LocalNode localNode);
    internal virtual object GetReplyData();
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader);
}
internal static class Microsoft.Build.BuildEngine.LogFormatter : object {
    internal static string FormatLogTimeStamp(DateTime timeStamp);
    internal static string FormatTimeSpan(TimeSpan t);
}
public class Microsoft.Build.BuildEngine.LoggerDescription : object {
    internal int LoggerId { get; internal set; }
    internal string Name { get; }
    public string LoggerSwitchParameters { get; }
    public LoggerVerbosity Verbosity { get; }
    public LoggerDescription(string loggerClassName, string loggerAssemblyName, string loggerAssemblyFile, string loggerSwitchParameters, LoggerVerbosity verbosity);
    private static LoggerDescription();
    internal int get_LoggerId();
    internal void set_LoggerId(int value);
    internal string get_Name();
    public string get_LoggerSwitchParameters();
    public LoggerVerbosity get_Verbosity();
    internal IForwardingLogger CreateForwardingLogger();
    internal ILogger CreateLogger();
    internal void ConvertPathsToFullPaths();
    internal void WriteToStream(BinaryWriter writer);
    internal void CreateFromStream(BinaryReader reader);
}
internal class Microsoft.Build.BuildEngine.Lookup : object {
    internal ReadOnlyLookup ReadOnlyLookup { get; }
    internal Lookup(Hashtable itemsByName, BuildPropertyGroup properties, ItemDefinitionLibrary itemDefinitionLibrary);
    internal Lookup(Hashtable itemsByName, BuildItemGroup projectItems, BuildPropertyGroup properties, ItemDefinitionLibrary itemDefinitionLibrary);
    internal ReadOnlyLookup get_ReadOnlyLookup();
    internal List`1<string> GetPropertyOverrideMessages(Hashtable lookupHash);
    internal Lookup Clone();
    internal LookupEntry EnterScope();
    internal void LeaveScope();
    internal BuildProperty GetProperty(string name);
    internal BuildItemGroup GetItems(string name);
    internal void PopulateWithItems(string name, BuildItemGroup group);
    internal void PopulateWithItem(BuildItem item);
    internal void SetProperty(BuildProperty property);
    internal void AddNewItems(BuildItemGroup group);
    internal void AddNewItem(BuildItem item);
    internal void RemoveItems(List`1<BuildItem> items);
    internal void RemoveItem(BuildItem item);
    internal void ModifyItems(string name, BuildItemGroup group, Dictionary`2<string, string> metadataChanges);
}
internal class Microsoft.Build.BuildEngine.LookupEntry : object {
    internal Hashtable Items { get; internal set; }
    internal Hashtable Adds { get; internal set; }
    internal Hashtable Removes { get; internal set; }
    internal Dictionary`2<string, Dictionary`2<BuildItem, Dictionary`2<string, string>>> Modifies { get; internal set; }
    internal BuildPropertyGroup Properties { get; internal set; }
    internal BuildPropertyGroup PropertySets { get; internal set; }
    internal int ThreadIdThatEnteredScope { get; }
    internal bool TruncateLookupsAtThisScope { get; internal set; }
    internal LookupEntry(Hashtable items, BuildPropertyGroup properties);
    internal Hashtable get_Items();
    internal void set_Items(Hashtable value);
    internal Hashtable get_Adds();
    internal void set_Adds(Hashtable value);
    internal Hashtable get_Removes();
    internal void set_Removes(Hashtable value);
    internal Dictionary`2<string, Dictionary`2<BuildItem, Dictionary`2<string, string>>> get_Modifies();
    internal void set_Modifies(Dictionary`2<string, Dictionary`2<BuildItem, Dictionary`2<string, string>>> value);
    internal BuildPropertyGroup get_Properties();
    internal void set_Properties(BuildPropertyGroup value);
    internal BuildPropertyGroup get_PropertySets();
    internal void set_PropertySets(BuildPropertyGroup value);
    internal int get_ThreadIdThatEnteredScope();
    internal bool get_TruncateLookupsAtThisScope();
    internal void set_TruncateLookupsAtThisScope(bool value);
}
internal class Microsoft.Build.BuildEngine.MetadataReference : ValueType {
    internal string itemName;
    internal string metadataName;
    internal MetadataReference(string itemName, string metadataName);
}
internal abstract class Microsoft.Build.BuildEngine.MultipleComparisonNode : OperatorExpressionNode {
    protected abstract virtual bool Compare(double left, double right);
    protected abstract virtual bool Compare(bool left, bool right);
    protected abstract virtual bool Compare(string left, string right);
    internal virtual bool BoolEvaluate(ConditionEvaluationState state);
    internal virtual void ResetState();
}
internal static class Microsoft.Build.BuildEngine.NativeMethods : object {
    internal static IntPtr NullPtr;
    internal static IntPtr InvalidHandle;
    internal static UInt32 PAGE_READWRITE;
    internal static UInt32 FILE_MAP_ALL_ACCESS;
    internal static UInt32 NORMAL_PRIORITY_CLASS;
    internal static UInt32 CREATE_NO_WINDOW;
    internal static int STARTF_USESTDHANDLES;
    internal static UInt32 PAGE_SIZE;
    internal static int SECURITY_DESCRIPTOR_REVISION;
    internal static int ERROR_SUCCESS;
    internal static string ADMINONLYSDDL;
    private static NativeMethods();
    internal static bool CheckTokenMembership(IntPtr TokenHandle, IntPtr SidToCheck, Boolean& IsMember);
    internal static bool AllocateAndInitializeSid(IntPtr siaNtAuthority, byte nSubAuthorityCount, int dwSubAuthority0, int dwSubAuthority1, int dwSubAuthority2, int dwSubAuthority3, int dwSubAuthority4, int dwSubAuthority5, int dwSubAuthority6, int dwSubAuthority7, IntPtr& pSid);
    internal static IntPtr LocalFree(IntPtr hMem);
    internal static IntPtr FreeSid(IntPtr pSid);
    internal static bool IsUserAdministrator();
    internal static bool InitializeSecurityDescriptor(IntPtr pSecurityDescriptor, int dwRevision);
    internal static bool SetSecurityDescriptorDacl(IntPtr pSecurityDescriptor, bool bDaclPresent, IntPtr pDacl, bool bDaclDefaulted);
    internal static SafeFileHandle CreateFileMapping(IntPtr hFile, IntPtr lpFileMappingAttributes, UInt32 flProtect, UInt32 dwMaximumSizeHigh, UInt32 dwMaximumSizeLow, string lpName);
    internal static IntPtr MapViewOfFile(SafeFileHandle handle, UInt32 dwDesiredAccess, UInt32 dwFileOffsetHigh, UInt32 dwFileOffsetLow, IntPtr dwNumberOfBytesToMap);
    internal static bool UnmapViewOfFile(IntPtr lpBaseAddress);
    internal static bool CreateProcess(string lpApplicationName, string lpCommandLine, SECURITY_ATTRIBUTES& lpProcessAttributes, SECURITY_ATTRIBUTES& lpThreadAttributes, bool bInheritHandles, UInt32 dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, STARTUPINFO& lpStartupInfo, PROCESS_INFORMATION& lpProcessInformation);
    internal static bool ConvertStringSecurityDescriptorToSecurityDescriptor(string StringSecurityDescriptor, UInt32 SDRevision, IntPtr& SecurityDescriptor, UInt32& SecurityDescriptorSize);
}
internal class Microsoft.Build.BuildEngine.Node : object {
    internal Introspector Introspector { get; }
    internal int TotalTaskTime { get; }
    internal int NodeId { get; }
    internal Node(int nodeId, LoggerDescription[] nodeLoggers, IEngineCallback parentCallback, BuildPropertyGroup parentGlobalProperties, ToolsetDefinitionLocations toolsetSearchLocations, string parentStartupDirectory);
    internal Introspector get_Introspector();
    internal int get_TotalTaskTime();
    internal int get_NodeId();
    internal void PostBuildResultToHost(BuildResult buildResult);
    internal void PostBuildRequestToHost(BuildRequest currentRequest);
    internal Exception PostCacheEntriesToHost(CacheEntry[] entries, string scopeName, BuildPropertyGroup scopeProperties, string scopeToolsVersion, CacheContentType cacheContentType);
    internal CacheEntry[] GetCachedEntriesFromHost(String[] names, string scopeName, BuildPropertyGroup scopeProperties, string scopeToolsVersion, CacheContentType cacheContentType);
    internal void PostLoggingMessagesToHost(NodeLoggingEvent[] nodeLoggingEvents);
    internal void PostStatus(NodeStatus nodeStatus, bool blockUntilSent);
    internal void PostStatusThrow(NodeStatus nodeStatus, bool blockUntilSent);
    internal void PostBuildRequest(BuildRequest buildRequest);
    internal void PostBuildResult(BuildResult buildResult);
    internal void ShutdownNode(NodeShutdownLevel shutdownLevel);
    internal void UpdateNodeSettings(bool shouldLogOnlyCriticalEvents, bool enableCentralizedLogging, bool useBreadthFirstTraversal);
    internal void RequestStatus(int requestId);
    internal void ReportUnhandledError(Exception originalException);
    internal void ReportFatalCommunicationError(Exception originalException, TextWriter loggingStream);
}
internal class Microsoft.Build.BuildEngine.NodeLoggingEvent : object {
    internal BuildEventArgs BuildEvent { get; }
    internal int LoggerId { get; }
    internal NodeLoggingEvent(BuildEventArgs eventToLog);
    private static NodeLoggingEvent();
    internal BuildEventArgs get_BuildEvent();
    internal virtual int get_LoggerId();
    internal virtual void WriteToStream(BinaryWriter writer, Hashtable loggingTypeCache);
    internal virtual void CreateFromStream(BinaryReader reader, Hashtable loggingTypeCache);
}
internal class Microsoft.Build.BuildEngine.NodeLoggingEventWithLoggerId : NodeLoggingEvent {
    internal int LoggerId { get; }
    internal NodeLoggingEventWithLoggerId(BuildEventArgs eventToLog, int loggerId);
    internal virtual int get_LoggerId();
    internal virtual void WriteToStream(BinaryWriter writer, Hashtable loggingTypeCache);
    internal virtual void CreateFromStream(BinaryReader reader, Hashtable loggingTypeCache);
}
internal class Microsoft.Build.BuildEngine.NodeManager : object {
    internal TaskExecutionModule TaskExecutionModule { get; internal set; }
    internal int MaxNodeCount { get; }
    internal NodeManager(int cpuCount, bool childMode, Engine parentEngine);
    internal bool RegisterNodeProvider(INodeProvider nodeProviderToRegister);
    internal INodeDescription[] GetNodeDescriptions();
    internal void RegisterNodeLogger(LoggerDescription loggerDescription);
    internal NodeStatus[] RequestStatusForNodes(int responseTimeout);
    internal void PostNodeStatus(int nodeId, NodeStatus nodeStatus);
    internal void PostCycleNotification(int nodeId, TargetInProgessState child, TargetInProgessState parent);
    internal void ShutdownNodes(NodeShutdownLevel nodeShutdownLevel);
    internal void PostBuildResultToNode(int nodeIndex, BuildResult buildResult);
    internal void PostBuildRequestToNode(int nodeIndex, BuildRequest buildRequest);
    internal void ExecuteTask(TaskExecutionState taskState);
    internal void UpdateSettings(bool enableOutofProcLogging, bool enableOnlyLogCriticalEvents, bool useBreadthFirstTraversal);
    internal void ChangeNodeTraversalType(bool breadthFirstTraversal);
    internal TaskExecutionModule get_TaskExecutionModule();
    internal void set_TaskExecutionModule(TaskExecutionModule value);
    internal int get_MaxNodeCount();
}
internal class Microsoft.Build.BuildEngine.NodeRequestMapping : object {
    internal int HandleId { get; }
    internal int RequestId { get; }
    internal NodeRequestMapping(int handleId, int requestId, CacheScope resultsCache);
    internal int get_HandleId();
    internal int get_RequestId();
    internal void AddResultToCache(BuildResult buildResult);
}
internal class Microsoft.Build.BuildEngine.NodeStatus : object {
    internal static int UnrequestedStatus;
    internal long TimeSinceLastTaskActivity { get; }
    internal long TimeSinceLastLoopActivity { get; }
    internal long LastTaskActivity { get; }
    internal long LastLoopActivity { get; }
    internal bool IsActive { get; }
    internal bool HasExited { get; }
    internal int RequestId { get; }
    internal int QueueDepth { get; }
    internal TargetInProgessState[] StateOfInProgressTargets { get; internal set; }
    internal bool IsLaunchInProgress { get; }
    internal Exception UnhandledException { get; }
    internal bool TraversalType { get; }
    internal NodeStatus(int requestId, bool isActive, int queueDepth, long lastTaskActivityTimeStamp, long lastEngineActivityTimeStamp, bool isLaunchInProgress);
    internal NodeStatus(Exception unhandledException);
    internal NodeStatus(bool useBreadthFirstTraversal);
    internal NodeStatus(int requestId);
    private static NodeStatus();
    internal long get_TimeSinceLastTaskActivity();
    internal long get_TimeSinceLastLoopActivity();
    internal long get_LastTaskActivity();
    internal long get_LastLoopActivity();
    internal bool get_IsActive();
    internal bool get_HasExited();
    internal int get_RequestId();
    internal int get_QueueDepth();
    internal TargetInProgessState[] get_StateOfInProgressTargets();
    internal void set_StateOfInProgressTargets(TargetInProgessState[] value);
    internal bool get_IsLaunchInProgress();
    internal Exception get_UnhandledException();
    internal bool get_TraversalType();
    internal void WriteToStream(BinaryWriter writer);
    internal static NodeStatus CreateFromStream(BinaryReader reader);
}
internal class Microsoft.Build.BuildEngine.NotEqualExpressionNode : MultipleComparisonNode {
    protected virtual bool Compare(double left, double right);
    protected virtual bool Compare(bool left, bool right);
    protected virtual bool Compare(string left, string right);
}
internal class Microsoft.Build.BuildEngine.NotExpressionNode : OperatorExpressionNode {
    internal virtual bool BoolEvaluate(ConditionEvaluationState state);
    internal virtual bool CanBoolEvaluate(ConditionEvaluationState state);
    internal virtual string GetUnexpandedValue(ConditionEvaluationState state);
    internal virtual string GetExpandedValue(ConditionEvaluationState state);
}
internal class Microsoft.Build.BuildEngine.NullCentralLogger : object {
    public LoggerVerbosity Verbosity { get; public set; }
    public string Parameters { get; public set; }
    public sealed virtual LoggerVerbosity get_Verbosity();
    public sealed virtual void set_Verbosity(LoggerVerbosity value);
    public sealed virtual string get_Parameters();
    public sealed virtual void set_Parameters(string value);
    public sealed virtual void Initialize(IEventSource eventSource, int nodeCount);
    public void AnyEventRaisedHandler(object sender, BuildEventArgs e);
    public sealed virtual void Initialize(IEventSource eventSource);
    public sealed virtual void Shutdown();
}
internal abstract class Microsoft.Build.BuildEngine.NumericComparisonExpressionNode : OperatorExpressionNode {
    protected abstract virtual bool Compare(double left, double right);
    internal virtual bool BoolEvaluate(ConditionEvaluationState state);
}
internal class Microsoft.Build.BuildEngine.NumericExpressionNode : OperandExpressionNode {
    internal NumericExpressionNode(string value);
    internal virtual bool BoolEvaluate(ConditionEvaluationState state);
    internal virtual double NumericEvaluate(ConditionEvaluationState state);
    internal virtual bool CanBoolEvaluate(ConditionEvaluationState state);
    internal virtual bool CanNumericEvaluate(ConditionEvaluationState state);
    internal virtual string GetUnexpandedValue(ConditionEvaluationState state);
    internal virtual string GetExpandedValue(ConditionEvaluationState state);
    internal virtual void ResetState();
}
internal enum Microsoft.Build.BuildEngine.ObjectType : Enum {
    public int value__;
    public static ObjectType NetSerialization;
    public static ObjectType FrameMarker;
    public static ObjectType EndMarker;
    public static ObjectType PostBuildRequests;
    public static ObjectType PostBuildResult;
    public static ObjectType PostLoggingMessagesToHost;
    public static ObjectType UpdateNodeSettings;
    public static ObjectType RequestStatus;
    public static ObjectType PostStatus;
    public static ObjectType InitializeNode;
    public static ObjectType InitializationComplete;
    public static ObjectType ShutdownNode;
    public static ObjectType ShutdownComplete;
    public static ObjectType PostIntrospectorCommand;
    public static ObjectType GenericSingleObjectReply;
    public static ObjectType PostCacheEntriesToHost;
    public static ObjectType GetCacheEntriesFromHost;
}
internal abstract class Microsoft.Build.BuildEngine.OperandExpressionNode : GenericExpressionNode {
    internal virtual bool DetectAnd();
    internal virtual bool DetectOr();
}
internal abstract class Microsoft.Build.BuildEngine.OperatorExpressionNode : GenericExpressionNode {
    internal GenericExpressionNode LeftChild { get; internal set; }
    internal GenericExpressionNode RightChild { get; internal set; }
    internal virtual double NumericEvaluate(ConditionEvaluationState state);
    internal virtual bool CanBoolEvaluate(ConditionEvaluationState state);
    internal virtual bool CanNumericEvaluate(ConditionEvaluationState state);
    internal virtual string GetExpandedValue(ConditionEvaluationState state);
    internal virtual string GetUnexpandedValue(ConditionEvaluationState state);
    internal virtual void ResetState();
    internal void set_LeftChild(GenericExpressionNode value);
    internal GenericExpressionNode get_LeftChild();
    internal void set_RightChild(GenericExpressionNode value);
    internal GenericExpressionNode get_RightChild();
    internal virtual bool DetectAnd();
    internal virtual bool DetectOr();
}
internal class Microsoft.Build.BuildEngine.OrExpressionNode : OperatorExpressionNode {
    internal bool PossibleOrCollision { get; internal set; }
    internal virtual bool BoolEvaluate(ConditionEvaluationState state);
    internal virtual void set_PossibleOrCollision(bool value);
    internal virtual bool get_PossibleOrCollision();
}
internal enum Microsoft.Build.BuildEngine.OutofdateReason : Enum {
    public int value__;
    public static OutofdateReason MissingInput;
    public static OutofdateReason MissingOutput;
    public static OutofdateReason NewerInput;
}
internal class Microsoft.Build.BuildEngine.ParallelConsoleLogger : BaseConsoleLogger {
    public ParallelConsoleLogger(LoggerVerbosity verbosity);
    public ParallelConsoleLogger(LoggerVerbosity verbosity, WriteHandler write, ColorSetter colorSet, ColorResetter colorReset);
    private static ParallelConsoleLogger();
    internal virtual bool ApplyParameter(string parameterName, string parameterValue);
    public virtual void Initialize(IEventSource eventSource);
    internal virtual void ResetConsoleLoggerState();
    public virtual void BuildStartedHandler(object sender, BuildStartedEventArgs e);
    public virtual void BuildFinishedHandler(object sender, BuildFinishedEventArgs e);
    public virtual void ProjectStartedHandler(object sender, ProjectStartedEventArgs e);
    public virtual void ProjectFinishedHandler(object sender, ProjectFinishedEventArgs e);
    internal void WriteProperties(BuildEventArgs e, IEnumerable properties);
    internal virtual void OutputProperties(ArrayList list);
    internal void WriteItems(BuildEventArgs e, IEnumerable items);
    internal virtual void OutputItems(string itemType, ArrayList itemTypeList);
    public virtual void TargetStartedHandler(object sender, TargetStartedEventArgs e);
    public virtual void TargetFinishedHandler(object sender, TargetFinishedEventArgs e);
    public virtual void TaskStartedHandler(object sender, TaskStartedEventArgs e);
    public virtual void TaskFinishedHandler(object sender, TaskFinishedEventArgs e);
    public virtual void ErrorHandler(object sender, BuildErrorEventArgs e);
    public virtual void WarningHandler(object sender, BuildWarningEventArgs e);
    public virtual void MessageHandler(object sender, BuildMessageEventArgs e);
    public virtual void CustomEventHandler(object sender, CustomBuildEventArgs e);
    internal static MPPerformanceCounter GetPerformanceCounter(string scopeName, Hashtable& table);
}
internal class Microsoft.Build.BuildEngine.Parser : object {
    internal int errorPosition;
    internal BuildEventContext LogBuildEventContext { get; internal set; }
    internal EngineLoggingServices LoggingServices { get; internal set; }
    internal BuildEventContext get_LogBuildEventContext();
    internal void set_LogBuildEventContext(BuildEventContext value);
    internal void set_LoggingServices(EngineLoggingServices value);
    internal EngineLoggingServices get_LoggingServices();
    internal GenericExpressionNode Parse(string expression, XmlAttribute conditionAttributeRef, ParserOptions optionSettings);
}
[FlagsAttribute]
internal enum Microsoft.Build.BuildEngine.ParserOptions : Enum {
    public int value__;
    public static ParserOptions None;
    public static ParserOptions AllowProperties;
    public static ParserOptions AllowItemLists;
    public static ParserOptions AllowPropertiesAndItemLists;
    public static ParserOptions AllowItemMetadata;
    public static ParserOptions AllowPropertiesAndItemMetadata;
    public static ParserOptions AllowAll;
}
internal enum Microsoft.Build.BuildEngine.ProcessingPass : Enum {
    public int value__;
    public static ProcessingPass Pass1;
    public static ProcessingPass Pass2;
}
[ObsoleteAttribute("This class has been deprecated. Please use Microsoft.Build.Evaluation.Project from the Microsoft.Build assembly instead.")]
public class Microsoft.Build.BuildEngine.Project : object {
    internal BuildPropertyGroup evaluatedProperties;
    internal Hashtable evaluatedItemsByName;
    internal BuildItemGroup evaluatedItems;
    internal Hashtable evaluatedItemsByNameIgnoringCondition;
    internal BuildItemGroup evaluatedItemsIgnoringCondition;
    internal bool dirtyNeedToReevaluateGlobalWarningsAndErrors;
    internal static string PerThreadProjectDirectory { get; internal set; }
    internal ItemDefinitionLibrary ItemDefinitionLibrary { get; internal set; }
    internal bool HaveUsedInitialProjectContextId { get; internal set; }
    internal int Id { get; }
    internal Hashtable EvaluatedItemsByName { get; }
    public string FullFileName { get; public set; }
    public string DefaultTargets { get; public set; }
    internal String[] DefaultBuildTargets { get; }
    public string InitialTargets { get; public set; }
    public Engine ParentEngine { get; }
    internal bool IsLoadedByHost { get; internal set; }
    public bool IsValidated { get; public set; }
    internal bool IsBuilding { get; }
    public string SchemaFile { get; public set; }
    public bool BuildEnabled { get; public set; }
    public string ToolsVersion { get; internal set; }
    internal bool OverridingToolsVersion { get; }
    public string DefaultToolsVersion { get; public set; }
    public bool HasToolsVersionAttribute { get; }
    internal ITaskRegistry TaskRegistry { get; internal set; }
    internal string ProjectDirectory { get; }
    public BuildPropertyGroup GlobalProperties { get; public set; }
    internal BuildPropertyGroup EnvironmentProperties { get; internal set; }
    internal BuildPropertyGroup ReservedProperties { get; }
    public BuildPropertyGroup EvaluatedProperties { get; }
    internal BuildEventContext ProjectBuildEventContext { get; internal set; }
    public BuildItemGroup EvaluatedItems { get; }
    public BuildItemGroup EvaluatedItemsIgnoringCondition { get; }
    public BuildPropertyGroupCollection PropertyGroups { get; }
    public TargetCollection Targets { get; }
    public UsingTaskCollection UsingTasks { get; }
    public ImportCollection Imports { get; }
    public BuildItemGroupCollection ItemGroups { get; }
    public string Xml { get; }
    internal XmlDocument XmlDocument { get; }
    internal XmlElement ProjectElement { get; }
    internal bool IsReset { get; internal set; }
    internal Hashtable ConditionedProperties { get; }
    public bool IsDirty { get; }
    internal bool IsDirtyNeedToReevaluate { get; }
    public DateTime TimeOfLastDirty { get; }
    public Encoding Encoding { get; }
    internal ProjectLoadSettings LoadSettings { get; }
    public Project(Engine engine, string toolsVersion);
    public Project(Engine engine);
    internal static string get_PerThreadProjectDirectory();
    internal static void set_PerThreadProjectDirectory(string value);
    internal ItemDefinitionLibrary get_ItemDefinitionLibrary();
    internal void set_ItemDefinitionLibrary(ItemDefinitionLibrary value);
    internal bool get_HaveUsedInitialProjectContextId();
    internal void set_HaveUsedInitialProjectContextId(bool value);
    internal int get_Id();
    internal Hashtable get_EvaluatedItemsByName();
    public string get_FullFileName();
    public void set_FullFileName(string value);
    public string get_DefaultTargets();
    public void set_DefaultTargets(string value);
    internal String[] get_DefaultBuildTargets();
    public string get_InitialTargets();
    public void set_InitialTargets(string value);
    public Engine get_ParentEngine();
    internal bool get_IsLoadedByHost();
    internal void set_IsLoadedByHost(bool value);
    public bool get_IsValidated();
    public void set_IsValidated(bool value);
    internal bool get_IsBuilding();
    public string get_SchemaFile();
    public void set_SchemaFile(string value);
    public bool get_BuildEnabled();
    public void set_BuildEnabled(bool value);
    public string get_ToolsVersion();
    internal void set_ToolsVersion(string value);
    internal bool get_OverridingToolsVersion();
    public string get_DefaultToolsVersion();
    public void set_DefaultToolsVersion(string value);
    public bool get_HasToolsVersionAttribute();
    internal ITaskRegistry get_TaskRegistry();
    internal void set_TaskRegistry(ITaskRegistry value);
    internal string get_ProjectDirectory();
    public BuildPropertyGroup get_GlobalProperties();
    public void set_GlobalProperties(BuildPropertyGroup value);
    internal BuildPropertyGroup get_EnvironmentProperties();
    internal void set_EnvironmentProperties(BuildPropertyGroup value);
    internal BuildPropertyGroup get_ReservedProperties();
    public BuildPropertyGroup get_EvaluatedProperties();
    internal BuildEventContext get_ProjectBuildEventContext();
    internal void set_ProjectBuildEventContext(BuildEventContext value);
    public BuildItemGroup get_EvaluatedItems();
    public BuildItemGroup get_EvaluatedItemsIgnoringCondition();
    public BuildPropertyGroupCollection get_PropertyGroups();
    public TargetCollection get_Targets();
    public UsingTaskCollection get_UsingTasks();
    public ImportCollection get_Imports();
    public BuildItemGroupCollection get_ItemGroups();
    public string get_Xml();
    internal XmlDocument get_XmlDocument();
    internal XmlElement get_ProjectElement();
    internal bool get_IsReset();
    internal void set_IsReset(bool value);
    internal Hashtable get_ConditionedProperties();
    public bool get_IsDirty();
    internal bool get_IsDirtyNeedToReevaluate();
    public DateTime get_TimeOfLastDirty();
    public Encoding get_Encoding();
    internal ProjectLoadSettings get_LoadSettings();
    public string GetEvaluatedProperty(string propertyName);
    internal bool IsEquivalentToProject(string projectFullPath, BuildPropertyGroup projectGlobalProperties, string projectToolsVersion);
    internal void ClearParentEngine();
    public void MarkProjectAsDirty();
    internal void MarkProjectAsDirtyForReevaluation();
    internal void MarkProjectAsDirtyForSave();
    internal void MarkProjectAsDirtyForReprocessXml();
    public String[] GetConditionedPropertyValues(string propertyName);
    public BuildItemGroup GetEvaluatedItemsByName(string itemName);
    public BuildItemGroup GetEvaluatedItemsByNameIgnoringCondition(string itemName);
    public void ResetBuildStatus();
    public void Load(string projectFileName);
    public void Load(string projectFileName, ProjectLoadSettings projectLoadSettings);
    internal void Load(string projectFileName, BuildEventContext buildEventContext, ProjectLoadSettings projectLoadSettings);
    public void Load(TextReader textReader);
    public void Load(TextReader textReader, ProjectLoadSettings projectLoadSettings);
    public void LoadXml(string projectXml);
    public void LoadXml(string projectXml, ProjectLoadSettings projectLoadSettings);
    internal void LoadFromXmlDocument(XmlDocument projectXml, BuildEventContext buildEventContext, ProjectLoadSettings projectLoadSettings);
    public void Save(string projectFileName);
    public void Save(string projectFileName, Encoding encoding);
    public void Save(TextWriter textWriter);
    public BuildPropertyGroup AddNewPropertyGroup(bool insertAtEndOfProject);
    public void SetProperty(string propertyName, string propertyValue);
    public void SetProperty(string propertyName, string propertyValue, string condition);
    public void SetImportedProperty(string propertyName, string propertyValue, string condition, Project importProject);
    public void SetProperty(string propertyName, string propertyValue, string condition, PropertyPosition position);
    public void SetProperty(string propertyName, string propertyValue, string condition, PropertyPosition position, bool treatPropertyValueAsLiteral);
    public void SetImportedProperty(string propertyName, string propertyValue, string condition, Project importedProject, PropertyPosition position);
    public void SetImportedProperty(string propertyName, string propertyValue, string condition, Project importedProject, PropertyPosition position, bool treatPropertyValueAsLiteral);
    internal void SetPropertyAtHelper(string propertyName, string propertyValue, string condition, bool importedProperty, Project importedProject, PropertyPosition position);
    public void RemoveAllPropertyGroups();
    public void RemovePropertyGroupsWithMatchingCondition(string matchCondition, bool includeImportedPropertyGroups);
    public void RemovePropertyGroupsWithMatchingCondition(string matchCondition);
    public void RemovePropertyGroup(BuildPropertyGroup propertyGroupToRemove);
    public void RemoveImportedPropertyGroup(BuildPropertyGroup propertyGroupToRemove);
    public BuildItemGroup AddNewItemGroup();
    public BuildItem AddNewItem(string itemName, string itemInclude, bool treatItemIncludeAsLiteral);
    public BuildItem AddNewItem(string itemName, string itemInclude);
    public void RemoveAllItemGroups();
    public void RemoveItemGroupsWithMatchingCondition(string matchCondition);
    public void RemoveItemGroup(BuildItemGroup itemGroupToRemove);
    public void RemoveItemsByName(string itemName);
    public void RemoveItem(BuildItem itemToRemove);
    public void AddNewImport(string projectFile, string condition);
    public void AddNewUsingTaskFromAssemblyName(string taskName, string assemblyName);
    public void AddNewUsingTaskFromAssemblyFile(string taskName, string assemblyFile);
    public void SetProjectExtensions(string id, string content);
    public string GetProjectExtensions(string id);
    public bool Build();
    public bool Build(string targetName);
    public bool Build(String[] targetNames);
    public bool Build(String[] targetNames, IDictionary targetOutputs);
    public bool Build(String[] targetNames, IDictionary targetOutputs, BuildSettings buildFlags);
    internal void BuildInternal(BuildRequest buildRequest);
    internal void ContinueBuild(ProjectBuildState buildContext, TaskExecutionContext taskExecutionContext);
    internal void CalculateNextActionForProjectContext(ProjectBuildState buildContext);
    internal void OnRenameOfImportedFile(string oldFileName, string newFileName);
    internal void AddToItemListByNameIgnoringCondition(BuildItem item);
    internal void AddToItemListByName(BuildItem item);
    internal static bool IsSolutionFilename(string filename);
    internal static bool IsVCProjFilename(string filename);
}
[DebuggerDisplayAttribute("ProjectBuildState (NameOfTargetInProgress={NameOfTargetInProgress}, NameOfBlockingTarget={NameOfBlockingTarget}, BuildResult={BuildResult}, BuildComplete={BuildComplete})")]
internal class Microsoft.Build.BuildEngine.ProjectBuildState : object {
    internal BuildContextState CurrentBuildContextState { get; internal set; }
    internal bool BuildComplete { get; internal set; }
    internal bool BuildResult { get; internal set; }
    internal string NameOfBlockingTarget { get; }
    internal string NameOfTargetInProgress { get; }
    internal ArrayList TargetNamesToBuild { get; }
    internal BuildRequest BuildRequest { get; }
    internal BuildEventContext ProjectBuildEventContext { get; }
    internal ProjectBuildState(BuildRequest buildRequest, ArrayList targetNamesToBuild, BuildEventContext buildEventContext);
    internal BuildContextState get_CurrentBuildContextState();
    internal void set_CurrentBuildContextState(BuildContextState value);
    internal bool get_BuildComplete();
    internal void set_BuildComplete(bool value);
    internal bool get_BuildResult();
    internal void set_BuildResult(bool value);
    internal string get_NameOfBlockingTarget();
    internal string get_NameOfTargetInProgress();
    internal ArrayList get_TargetNamesToBuild();
    internal BuildRequest get_BuildRequest();
    internal string GetNextTarget();
    internal void RemoveBlockingTarget();
    internal void AddBlockingTarget(string targetName);
    internal void RecordBuildCompletion(bool result);
    internal void RecordBuildException();
    internal bool ContainsCycle(string name);
    internal bool ContainsBlockingTarget(string name);
    internal string GetParentTarget(string name);
    internal BuildEventContext get_ProjectBuildEventContext();
}
internal class Microsoft.Build.BuildEngine.ProjectFullKey : object {
    internal int ProjectKey { get; internal set; }
    internal int EntryPointKey { get; internal set; }
    internal ProjectFullKey(int projectKey, int entryPointKey);
    internal int get_ProjectKey();
    internal void set_ProjectKey(int value);
    internal int get_EntryPointKey();
    internal void set_EntryPointKey(int value);
    public string ToString(LoggerVerbosity verbosity);
    public virtual string ToString();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[FlagsAttribute]
public enum Microsoft.Build.BuildEngine.ProjectLoadSettings : Enum {
    public int value__;
    public static ProjectLoadSettings None;
    public static ProjectLoadSettings IgnoreMissingImports;
}
internal class Microsoft.Build.BuildEngine.ProjectManager : object {
    internal void AddProject(Project project);
    internal void RemoveProjects(string fullPath);
    internal void RemoveProject(Project project);
    internal Project GetProject(string projectFileFullPath, BuildPropertyGroup globalProperties, string toolsVersion);
    internal Project GetProject(int projectId);
    internal Project GetFirstProject(string projectFileFullPath);
    internal List`1<Project> GetInProgressProjects();
    internal void ResetBuildStatusForAllProjects();
    internal void Clear();
    internal void AddRemoteProject(string projectFileFullPath, BuildPropertyGroup globalProperties, string toolsVersion, int nodeIndex);
    internal int GetRemoteProject(string projectFileFullPath, BuildPropertyGroup globalProperties, string toolsVersion);
    internal bool HasProjectBeenLoaded(string projectFileFullPath, BuildPropertyGroup globalProperties, string toolsVersion);
    internal static void AddProject(Hashtable projectTable, Project project);
    internal static void AddProjectEntry(Hashtable projectEntryTable, string projectFileFullPath, BuildPropertyGroup globalProperties, string toolsVersion, int nodeIndex);
    internal static Project GetProject(Hashtable table, string projectFileFullPath, BuildPropertyGroup globalProperties, string toolsVersion);
    internal static ProjectEntry GetProjectEntry(Hashtable entryTable, string projectFileFullPath, BuildPropertyGroup globalProperties, string toolsVersion);
}
internal class Microsoft.Build.BuildEngine.ProjectSchemaValidationHandler : object {
    internal ProjectSchemaValidationHandler(BuildEventContext buildEventContext, EngineLoggingServices loggingServices, string binPath);
    internal void VerifyProjectFileSchema(string projectFile, string schemaFile);
    internal void VerifyProjectSchema(string projectXml, string schemaFile);
}
internal class Microsoft.Build.BuildEngine.ProjectStartedEventMinimumFields : object {
    internal DateTime TimeStamp { get; }
    internal int ProjectKey { get; }
    internal int EntryPointKey { get; }
    internal string FullProjectKey { get; }
    internal ProjectStartedEventMinimumFields ParentProjectStartedEvent { get; }
    internal string TargetNames { get; }
    internal int ProjectId { get; }
    internal string ProjectFile { get; }
    internal bool ShowProjectFinishedEvent { get; internal set; }
    internal bool ErrorInProject { get; internal set; }
    internal BuildEventContext ProjectBuildEventContext { get; }
    internal ProjectStartedEventMinimumFields(int projectKey, int entryPointKey, ProjectStartedEventArgs startedEvent, ProjectStartedEventMinimumFields parentProjectStartedEvent);
    internal DateTime get_TimeStamp();
    internal int get_ProjectKey();
    internal int get_EntryPointKey();
    internal string get_FullProjectKey();
    internal ProjectStartedEventMinimumFields get_ParentProjectStartedEvent();
    internal string get_TargetNames();
    internal int get_ProjectId();
    internal string get_ProjectFile();
    internal bool get_ShowProjectFinishedEvent();
    internal void set_ShowProjectFinishedEvent(bool value);
    internal bool get_ErrorInProject();
    internal void set_ErrorInProject(bool value);
    internal BuildEventContext get_ProjectBuildEventContext();
}
internal class Microsoft.Build.BuildEngine.ProjectXmlUtilities : object {
    internal static List`1<XmlElement> GetValidChildElements(XmlElement element);
    internal static void VerifyThrowProjectXmlElementChild(XmlNode childNode);
    internal static void VerifyThrowProjectNoChildElements(XmlElement element);
    internal static void ThrowProjectInvalidChildElement(XmlNode child);
    internal static void VerifyThrowElementName(XmlElement element, string expected);
    internal static void VerifyThrowProjectValidNameAndNamespace(XmlElement element);
    internal static void VerifyThrowProjectValidNamespace(XmlElement element);
    internal static void VerifyThrowProjectNoAttributes(XmlElement element);
    internal static void VerifyThrowProjectInvalidAttribute(bool condition, XmlAttribute attribute);
    internal static void ThrowProjectInvalidAttribute(XmlAttribute attribute);
    internal static XmlAttribute GetConditionAttribute(XmlElement element, bool verifySoleAttribute);
    internal static XmlAttribute SetOrRemoveAttribute(XmlElement element, string name, string value);
    internal static string GetAttributeValue(XmlAttribute attribute);
}
internal class Microsoft.Build.BuildEngine.PropertyCacheEntry : CacheEntry {
    internal string Value { get; internal set; }
    internal PropertyCacheEntry(string name, string value);
    internal string get_Value();
    internal void set_Value(string value);
    internal virtual bool IsEquivalent(CacheEntry other);
    internal virtual void WriteToStream(BinaryWriter writer);
    internal virtual void CreateFromStream(BinaryReader reader);
}
internal class Microsoft.Build.BuildEngine.PropertyDefinition : object {
    public string Name { get; }
    public string Value { get; }
    public string Source { get; }
    public PropertyDefinition(string name, string value, string source);
    public string get_Name();
    public string get_Value();
    public string get_Source();
}
public enum Microsoft.Build.BuildEngine.PropertyPosition : Enum {
    public int value__;
    public static PropertyPosition UseExistingOrCreateAfterLastPropertyGroup;
    public static PropertyPosition UseExistingOrCreateAfterLastImport;
}
internal enum Microsoft.Build.BuildEngine.PropertyType : Enum {
    public int value__;
    public static PropertyType NormalProperty;
    public static PropertyType ImportedProperty;
    public static PropertyType GlobalProperty;
    public static PropertyType ReservedProperty;
    public static PropertyType EnvironmentProperty;
    public static PropertyType OutputProperty;
}
internal class Microsoft.Build.BuildEngine.ProvidersNodeInformation : object {
    internal INodeProvider NodeProvider { get; }
    internal INodeDescription Description { get; }
    internal int NodeIndex { get; }
    internal int NodeId { get; }
    internal ProvidersNodeInformation(int nodeProviderNodeIndex, int nodeId, INodeDescription nodeProviderDescription, INodeProvider nodeProviderReference);
    internal INodeProvider get_NodeProvider();
    internal INodeDescription get_Description();
    internal int get_NodeIndex();
    internal int get_NodeId();
}
internal class Microsoft.Build.BuildEngine.ReadApplicationConfiguration : MulticastDelegate {
    public ReadApplicationConfiguration(object object, IntPtr method);
    public virtual Configuration Invoke();
    public virtual IAsyncResult BeginInvoke(AsyncCallback callback, object object);
    public virtual Configuration EndInvoke(IAsyncResult result);
}
internal class Microsoft.Build.BuildEngine.ReadOnlyLookup : object {
    internal ReadOnlyLookup(Lookup lookup);
    internal ReadOnlyLookup(Hashtable items, BuildPropertyGroup properties);
    internal BuildItemGroup GetItems(string name);
    internal BuildProperty GetProperty(string name);
}
internal class Microsoft.Build.BuildEngine.RegistryException : Exception {
    public RegistryException(string message);
    public RegistryException(string message, Exception innerException);
    public RegistryException(string message, string source);
    protected RegistryException(SerializationInfo info, StreamingContext context);
    public RegistryException(string message, string source, Exception innerException);
}
internal class Microsoft.Build.BuildEngine.RegistryKeyWrapper : object {
    public string Name { get; }
    protected RegistryKeyWrapper(RegistryKey wrappedKey, RegistryKey registryHive);
    internal RegistryKeyWrapper(string registryKeyPath);
    internal RegistryKeyWrapper(string registryKeyPath, RegistryKey registryHive);
    public virtual string get_Name();
    public virtual object GetValue(string name);
    public virtual String[] GetValueNames();
    public virtual String[] GetSubKeyNames();
    public virtual RegistryKeyWrapper OpenSubKey(string name);
    public virtual bool Exists();
}
public class Microsoft.Build.BuildEngine.RemoteErrorException : Exception {
    internal BuildEventContext BuildEventContext { get; }
    internal RemoteErrorException(string message, Exception innerException, BuildEventContext buildEventContext);
    private RemoteErrorException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    internal BuildEventContext get_BuildEventContext();
    internal static void Throw(Exception innerException, BuildEventContext buildEventContext, string messageResourceName, String[] messageArgs);
}
internal class Microsoft.Build.BuildEngine.ReportExceptionEngineCommand : EngineCommand {
    internal ReportExceptionEngineCommand(Exception e);
    internal virtual void Execute(Engine parentEngine);
}
internal class Microsoft.Build.BuildEngine.RequestRoutingContext : ExecutionContext {
    internal int ParentHandleId { get; }
    internal int ParentNodeIndex { get; }
    internal int ParentRequestId { get; }
    internal CacheScope CacheScope { get; }
    internal BuildRequest TriggeringBuildRequest { get; }
    internal RequestRoutingContext(int handleId, int nodeIndex, int parentHandleId, int parentNodeIndex, int parentRequestId, CacheScope cacheScope, BuildRequest triggeringBuildRequest, BuildEventContext buildEventContext);
    internal int get_ParentHandleId();
    internal int get_ParentNodeIndex();
    internal int get_ParentRequestId();
    internal CacheScope get_CacheScope();
    internal BuildRequest get_TriggeringBuildRequest();
}
internal class Microsoft.Build.BuildEngine.RequestStatusEngineCommand : EngineCommand {
    internal RequestStatusEngineCommand(int requestId);
    internal virtual void Execute(Engine parentEngine);
}
internal static class Microsoft.Build.BuildEngine.ReservedPropertyNames : object {
    internal static string projectDirectory;
    internal static string projectDirectoryNoRoot;
    internal static string projectFile;
    internal static string projectExtension;
    internal static string projectFullPath;
    internal static string projectName;
    internal static string binPath;
    internal static string projectDefaultTargets;
    internal static string extensionsPath;
    internal static string extensionsPath32;
    internal static string toolsPath;
    internal static string toolsVersion;
    internal static string startupDirectory;
    internal static string buildNodeCount;
    internal static string extensionsPathSuffix;
    internal static string programFiles32;
    internal static bool IsReservedProperty(string property);
}
internal class Microsoft.Build.BuildEngine.Router : object {
    internal bool ChildMode { get; internal set; }
    internal Node ParentNode { get; internal set; }
    internal bool SingleThreadedMode { get; }
    internal Router(Engine parentEngine, Scheduler scheduler);
    internal bool get_ChildMode();
    internal void set_ChildMode(bool value);
    internal Node get_ParentNode();
    internal void set_ParentNode(Node value);
    internal bool get_SingleThreadedMode();
    internal void PostDoneNotice(BuildRequest buildRequest);
    internal void PostDoneNotice(int nodeId, BuildResult buildResult);
    internal void PostBuildRequest(BuildRequest currentRequest, int nodeIndex);
}
internal class Microsoft.Build.BuildEngine.Scanner : object {
    internal Token CurrentToken { get; }
    internal string UnexpectedlyFound { get; }
    internal Scanner(string expressionToParse, ParserOptions options);
    private static Scanner();
    internal string GetErrorResource();
    internal bool IsNext(TokenType type);
    internal string IsNextString();
    internal Token get_CurrentToken();
    internal int GetErrorPosition();
    internal string get_UnexpectedlyFound();
    internal bool Advance();
}
internal class Microsoft.Build.BuildEngine.Scheduler : object {
    internal Scheduler(int nodeId, Engine parentEngine);
    internal void Initialize(INodeDescription[] nodeDescriptions);
    internal int CalculateNodeForBuildRequest(BuildRequest currentRequest, int nodeIndexCurrent);
    internal void NotifyOfSchedulingDecision(BuildRequest currentRequest, int nodeUsed);
    internal void NotifyOfBuildResult(int nodeId, BuildResult buildResult);
    internal void NotifyOfBuildRequest(int nodeIndex, BuildRequest currentRequest, int parentHandleId);
    internal void NotifyOfBlockedRequest(BuildRequest currentRequest);
    internal void NotifyOfUnblockedRequest(BuildRequest currentRequest);
    internal void NotifyOfBlockedNode(int nodeId);
    internal void DumpState();
}
[DebuggerDisplayAttribute("Record ({recordKey.handleId},{recordKey.requestId})")]
internal class Microsoft.Build.BuildEngine.ScheduleRecord : object {
    internal bool Blocked { get; internal set; }
    internal int EvaluationNode { get; }
    internal ScheduleRecordKey ParentKey { get; }
    internal ScheduleRecordKey RecordKey { get; }
    internal string ProjectName { get; }
    internal string ToolsVersion { get; }
    internal String[] TargetsBuild { get; }
    internal ScheduleRecord(ScheduleRecordKey recordKey, ScheduleRecordKey parentKey, int evaluationNode, string projectName, string toolsVersion, String[] targetsBuild);
    internal bool get_Blocked();
    internal void set_Blocked(bool value);
    internal int get_EvaluationNode();
    internal ScheduleRecordKey get_ParentKey();
    internal ScheduleRecordKey get_RecordKey();
    internal string get_ProjectName();
    internal string get_ToolsVersion();
    internal String[] get_TargetsBuild();
    internal void AddChildRecord(ScheduleRecord childRecord);
    internal void ReportChildCompleted(ScheduleRecordKey key);
}
[DebuggerDisplayAttribute("Key ({handleId},{requestId})")]
internal class Microsoft.Build.BuildEngine.ScheduleRecordKey : object {
    internal int HandleId { get; }
    internal int RequestId { get; }
    internal ScheduleRecordKey(int handleId, int requestId);
    internal int get_HandleId();
    internal int get_RequestId();
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
internal class Microsoft.Build.BuildEngine.SerialConsoleLogger : BaseConsoleLogger {
    internal FrameStack contextStack;
    public SerialConsoleLogger(LoggerVerbosity verbosity);
    public SerialConsoleLogger(LoggerVerbosity verbosity, WriteHandler write, ColorSetter colorSet, ColorResetter colorReset);
    internal virtual void ResetConsoleLoggerState();
    public virtual void BuildStartedHandler(object sender, BuildStartedEventArgs e);
    public virtual void BuildFinishedHandler(object sender, BuildFinishedEventArgs e);
    public virtual void ProjectStartedHandler(object sender, ProjectStartedEventArgs e);
    public virtual void ProjectFinishedHandler(object sender, ProjectFinishedEventArgs e);
    public virtual void TargetStartedHandler(object sender, TargetStartedEventArgs e);
    public virtual void TargetFinishedHandler(object sender, TargetFinishedEventArgs e);
    public virtual void TaskStartedHandler(object sender, TaskStartedEventArgs e);
    public virtual void TaskFinishedHandler(object sender, TaskFinishedEventArgs e);
    public virtual void ErrorHandler(object sender, BuildErrorEventArgs e);
    public virtual void WarningHandler(object sender, BuildWarningEventArgs e);
    public virtual void MessageHandler(object sender, BuildMessageEventArgs e);
    public virtual void CustomEventHandler(object sender, CustomBuildEventArgs e);
    internal void WriteProjectStarted();
}
internal class Microsoft.Build.BuildEngine.Shared.AspNetCompilerParameters : ValueType {
    internal string aspNetVirtualPath;
    internal string aspNetPhysicalPath;
    internal string aspNetTargetPath;
    internal string aspNetForce;
    internal string aspNetUpdateable;
    internal string aspNetDebug;
    internal string aspNetKeyFile;
    internal string aspNetKeyContainer;
    internal string aspNetDelaySign;
    internal string aspNetAPTCA;
    internal string aspNetFixedNames;
}
internal class Microsoft.Build.BuildEngine.Shared.AssemblyLoadInfo : object {
    public string AssemblyName { get; }
    public string AssemblyFile { get; }
    public AssemblyLoadInfo(string assemblyName, string assemblyFile);
    public string get_AssemblyName();
    public string get_AssemblyFile();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
}
internal class Microsoft.Build.BuildEngine.Shared.AssemblyNameExtension : object {
    internal string Name { get; }
    internal Version Version { get; }
    internal CultureInfo CultureInfo { get; }
    internal AssemblyName AssemblyName { get; }
    internal string FullName { get; }
    internal static AssemblyNameExtension UnnamedAssembly { get; }
    internal bool IsUnnamedAssembly { get; }
    internal AssemblyNameExtension(AssemblyName assemblyName);
    internal AssemblyNameExtension(string assemblyName);
    internal AssemblyNameExtension(string assemblyName, bool validate);
    private static AssemblyNameExtension();
    internal static AssemblyNameExtension GetAssemblyNameEx(string path);
    internal string get_Name();
    internal Version get_Version();
    internal void ReplaceVersion(Version version);
    internal CultureInfo get_CultureInfo();
    internal AssemblyName get_AssemblyName();
    internal string get_FullName();
    internal Byte[] GetPublicKeyToken();
    internal static AssemblyNameExtension get_UnnamedAssembly();
    internal int CompareTo(AssemblyNameExtension that);
    internal int GetHashCode();
    internal int CompareBaseNameTo(AssemblyNameExtension that);
    internal bool Equals(AssemblyNameExtension that);
    internal bool get_IsUnnamedAssembly();
    internal static string EscapeDisplayNameCharacters(string displayName);
    public virtual string ToString();
}
internal static class Microsoft.Build.BuildEngine.Shared.AssemblyResources : object {
    private static AssemblyResources();
    internal static void RegisterMSBuildExeResources(ResourceManager manager);
    internal static string GetString(string name);
    internal static string GetStringLookingInMSBuildExeResourcesFirst(string name);
}
internal class Microsoft.Build.BuildEngine.Shared.BuildEventFileInfo : object {
    internal string File { get; }
    internal int Line { get; }
    internal int Column { get; }
    internal int EndLine { get; }
    internal int EndColumn { get; }
    internal BuildEventFileInfo(string file);
    internal BuildEventFileInfo(string file, int line, int column);
    internal BuildEventFileInfo(string file, int line, int column, int endLine, int endColumn);
    internal BuildEventFileInfo(XmlException e);
    internal BuildEventFileInfo(XmlSchemaException e);
    internal string get_File();
    internal int get_Line();
    internal int get_Column();
    internal int get_EndLine();
    internal int get_EndColumn();
}
internal class Microsoft.Build.BuildEngine.Shared.ConfigurationInSolution : object {
    internal static char configurationPlatformSeparator;
    internal string ConfigurationName { get; }
    internal string PlatformName { get; }
    internal string FullName { get; }
    internal BuildItemGroup ProjectBuildItems { get; internal set; }
    internal ConfigurationInSolution(string configurationName, string platformName);
    internal string get_ConfigurationName();
    internal string get_PlatformName();
    internal string get_FullName();
    internal BuildItemGroup get_ProjectBuildItems();
    internal void set_ProjectBuildItems(BuildItemGroup value);
}
internal static class Microsoft.Build.BuildEngine.Shared.ConversionUtilities : object {
    internal static bool ConvertStringToBool(string parameterValue);
    internal static bool CanConvertStringToBool(string parameterValue);
    internal static double ConvertDecimalToDouble(string number);
    internal static double ConvertHexToDouble(string number);
    internal static double ConvertDecimalOrHexToDouble(string number);
    internal static bool ValidDecimalOrHexNumber(string number);
}
internal static class Microsoft.Build.BuildEngine.Shared.ErrorUtilities : object {
    internal static void LaunchMsBuildDebuggerOnFatalError();
    internal static void ThrowInternalError(string message);
    internal static void VerifyThrowNoAssert(bool condition, string unformattedMessage);
    internal static void VerifyThrow(bool condition, string unformattedMessage);
    internal static void VerifyThrow(bool condition, string unformattedMessage, object arg0);
    internal static void VerifyThrowNoAssert(bool condition, string unformattedMessage, object arg0, object arg1);
    internal static void VerifyThrow(bool condition, string unformattedMessage, object arg0, object arg1);
    internal static void VerifyThrow(bool condition, string unformattedMessage, object arg0, object arg1, object arg2);
    internal static void VerifyThrow(bool condition, string unformattedMessage, object arg0, object arg1, object arg2, object arg3);
    internal static void VerifyThrowInvalidOperation(bool condition, string resourceName);
    internal static void VerifyThrowInvalidOperation(bool condition, string resourceName, object arg0);
    internal static void VerifyThrowInvalidOperation(bool condition, string resourceName, object arg0, object arg1);
    internal static void VerifyThrowInvalidOperation(bool condition, string resourceName, object arg0, object arg1, object arg2);
    internal static void ThrowArgument(string resourceName, Object[] args);
    internal static void ThrowArgument(Exception innerException, string resourceName, Object[] args);
    internal static void VerifyThrowArgument(bool condition, string resourceName);
    internal static void VerifyThrowArgument(bool condition, string resourceName, object arg0);
    internal static void VerifyThrowArgument(bool condition, string resourceName, object arg0, object arg1);
    internal static void VerifyThrowArgument(bool condition, Exception innerException, string resourceName);
    internal static void VerifyThrowArgument(bool condition, Exception innerException, string resourceName, object arg0);
    internal static void VerifyThrowArgument(bool condition, Exception innerException, string resourceName, object arg0, object arg1);
    internal static void VerifyThrowArgumentOutOfRange(bool condition, string parameterName);
    internal static void VerifyThrowArgumentLength(string parameter, string parameterName);
    internal static void VerifyThrowArgumentNull(object parameter, string parameterName);
    internal static void VerifyThrowArgumentNull(object parameter, string parameterName, string resourceName);
    internal static void VerifyThrowArgumentArraysSameLength(Array parameter1, Array parameter2, string parameter1Name, string parameter2Name);
}
internal static class Microsoft.Build.BuildEngine.Shared.EscapingUtilities : object {
    private static EscapingUtilities();
    internal static string UnescapeAll(string escapedString);
    internal static string UnescapeAll(string escapedString, Boolean& escapingWasNecessary);
    internal static string Escape(string unescapedString);
    internal static bool ContainsEscapedWildcards(string escapedString);
}
internal static class Microsoft.Build.BuildEngine.Shared.EventArgsFormatting : object {
    private static EventArgsFormatting();
    internal static string EscapeCarriageReturn(string stringWithCarriageReturn);
    internal static string FormatEventMessage(BuildErrorEventArgs e);
    internal static string FormatEventMessage(BuildErrorEventArgs e, bool removeCarriageReturn);
    internal static string FormatEventMessage(BuildWarningEventArgs e);
    internal static string FormatEventMessage(BuildWarningEventArgs e, bool removeCarriageReturn);
    internal static string FormatEventMessage(string category, string subcategory, string message, string code, string file, int lineNumber, int endLineNumber, int columnNumber, int endColumnNumber, int threadId);
}
internal static class Microsoft.Build.BuildEngine.Shared.ExceptionHandling : object {
    internal static bool IsCriticalException(Exception e);
    internal static bool NotExpectedException(Exception e);
    internal static bool NotExpectedReflectionException(Exception e);
    internal static bool NotExpectedFunctionException(Exception e);
}
internal static class Microsoft.Build.BuildEngine.Shared.FileMatcher : object {
    internal static Char[] directorySeparatorCharacters;
    private static FileMatcher();
    internal static bool HasWildcards(string filespec);
    internal static string GetLongPathName(string path, GetFileSystemEntries getFileSystemEntries);
    internal static void SplitFileSpec(string filespec, String& fixedDirectoryPart, String& wildcardDirectoryPart, String& filenamePart, GetFileSystemEntries getFileSystemEntries);
    internal static bool IsDirectorySeparator(char c);
    internal static void RemoveProjectDirectory(String[] paths, string projectDirectory);
    internal static void GetFileSpecInfo(string filespec, Regex& regexFileMatch, Boolean& needsRecursion, Boolean& isLegalFileSpec, GetFileSystemEntries getFileSystemEntries);
    internal static Result FileMatch(string filespec, string fileToMatch);
    internal static Result FileMatch(string filespec, string fileToMatch, GetFileSystemEntries getFileSystemEntries);
    internal static String[] GetFiles(string projectDirectory, string filespec);
    internal static String[] GetFiles(string projectDirectory, string filespec, GetFileSystemEntries getFileSystemEntries, DirectoryExists directoryExists);
}
internal static class Microsoft.Build.BuildEngine.Shared.FileUtilities : object {
    internal static string FileTimeFormat;
    internal static string CurrentExecutablePath { get; }
    internal static string CurrentExecutableDirectory { get; }
    internal static string CurrentExecutableConfigurationFilePath { get; }
    internal static bool IsItemSpecModifier(string name);
    internal static bool IsDerivableItemSpecModifier(string name);
    internal static string GetItemSpecModifier(string currentDirectory, string itemSpec, string modifier, Hashtable& cachedModifiers);
    internal static string EnsureTrailingSlash(string fileSpec);
    internal static string EnsureNoLeadingSlash(string path);
    internal static string EnsureNoTrailingSlash(string path);
    internal static bool EndsWithSlash(string fileSpec);
    internal static bool IsSlash(char c);
    internal static string TrimAndStripAnyQuotes(string path);
    internal static string GetDirectory(string fileSpec);
    internal static bool HasExtension(string fileName, String[] allowedExtensions);
    internal static string get_CurrentExecutablePath();
    internal static string get_CurrentExecutableDirectory();
    internal static string get_CurrentExecutableConfigurationFilePath();
    internal static FileInfo GetFileInfoNoThrow(string filePath);
    internal static string GetCurrentDirectoryStaticBuffer(StringBuilder buffer);
    internal static bool IsVCProjFilename(string filename);
    internal static string MakeRelative(string basePath, string path);
}
internal static class Microsoft.Build.BuildEngine.Shared.FileUtilitiesRegex : object {
    internal static Regex DrivePattern;
    internal static Regex UNCPattern;
    private static FileUtilitiesRegex();
}
internal static class Microsoft.Build.BuildEngine.Shared.FrameworkLocationHelper : object {
    internal static string programFiles;
    internal static string programFiles32;
    internal static string programFilesReferenceAssemblyLocation;
    internal static string fullDotNetFrameworkRegistryKey;
    internal static string dotNetFrameworkSdkInstallKeyValueV11;
    internal static string dotNetFrameworkVersionFolderPrefixV11;
    internal static string dotNetFrameworkSdkInstallKeyValueV20;
    internal static string dotNetFrameworkVersionFolderPrefixV20;
    internal static string dotNetFrameworkVersionFolderPrefixV30;
    internal static string fullDotNetFrameworkSdkRegistryKeyV35;
    internal static string dotNetFrameworkSdkInstallKeyValueV35;
    internal static string dotNetFrameworkVersionFolderPrefixV35;
    internal static string secondaryDotNetFrameworkSdkInstallKeyValueV35;
    internal static string dotNetFrameworkVersionFolderPrefixV40;
    internal static string fullDotNetFrameworkSdkRegistryKeyV40;
    internal static string dotNetFrameworkSdkInstallKeyValueV40;
    internal static string secondaryDotNetFrameworkSdkInstallKeyValueV40;
    internal static string PathToDotNetFrameworkV11 { get; }
    internal static string PathToDotNetFrameworkV20 { get; }
    internal static string PathToDotNetFrameworkV30 { get; }
    internal static string PathToDotNetFrameworkV35 { get; }
    internal static string PathToDotNetFrameworkV40 { get; }
    internal static string PathToDotNetFrameworkSdkV11 { get; }
    internal static string PathToDotNetFrameworkSdkV20 { get; }
    internal static string PathToDotNetFrameworkSdkV35 { get; }
    internal static string PathToDotNetFrameworkSdkV40 { get; }
    internal static string PathToDotNetFrameworkReferenceAssembliesV30 { get; }
    internal static string PathToDotNetFrameworkReferenceAssembliesV35 { get; }
    internal static string PathToDotNetFrameworkReferenceAssembliesV40 { get; }
    private static FrameworkLocationHelper();
    internal static string get_PathToDotNetFrameworkV11();
    internal static string get_PathToDotNetFrameworkV20();
    internal static string get_PathToDotNetFrameworkV30();
    internal static string get_PathToDotNetFrameworkV35();
    internal static string get_PathToDotNetFrameworkV40();
    internal static string get_PathToDotNetFrameworkSdkV11();
    internal static string get_PathToDotNetFrameworkSdkV20();
    internal static string get_PathToDotNetFrameworkSdkV35();
    internal static string get_PathToDotNetFrameworkSdkV40();
    internal static string get_PathToDotNetFrameworkReferenceAssembliesV30();
    internal static string get_PathToDotNetFrameworkReferenceAssembliesV35();
    internal static string get_PathToDotNetFrameworkReferenceAssembliesV40();
    internal static string GetPathToDotNetFramework(Version version);
    internal static bool CheckForFrameworkInstallation(string registryEntryToCheckInstall, string registryValueToCheckInstall);
    internal static string FindDotNetFrameworkPath(string currentRuntimePath, string prefix, GetDirectories getDirectories);
    internal static string GenerateProgramFiles32();
    internal static string GenerateProgramFilesReferenceAssemblyRoot();
}
internal class Microsoft.Build.BuildEngine.Shared.GetDirectories : MulticastDelegate {
    public GetDirectories(object object, IntPtr method);
    public virtual String[] Invoke(string path, string pattern);
    public virtual IAsyncResult BeginInvoke(string path, string pattern, AsyncCallback callback, object object);
    public virtual String[] EndInvoke(IAsyncResult result);
}
internal class Microsoft.Build.BuildEngine.Shared.InternalErrorException : Exception {
    internal InternalErrorException(string message);
    internal InternalErrorException(string message, Exception innerException);
    private InternalErrorException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.Build.BuildEngine.Shared.LoadedType : object {
    internal Type Type { get; }
    internal AssemblyLoadInfo Assembly { get; }
    internal LoadedType(Type type, AssemblyLoadInfo assembly);
    public Dictionary`2<string, string> GetNamesOfPropertiesWithRequiredAttribute();
    public Dictionary`2<string, string> GetNamesOfPropertiesWithOutputAttribute();
    public PropertyInfo GetProperty(string propertyName);
    public bool HasLoadInSeparateAppDomainAttribute();
    internal Type get_Type();
    internal AssemblyLoadInfo get_Assembly();
}
internal static class Microsoft.Build.BuildEngine.Shared.NativeMethods : object {
    internal static UInt32 ERROR_INSUFFICIENT_BUFFER;
    internal static UInt32 STARTUP_LOADER_SAFEMODE;
    internal static UInt32 S_OK;
    internal static UInt32 RUNTIME_INFO_DONT_SHOW_ERROR_DIALOG;
    internal static UInt32 FILE_TYPE_CHAR;
    internal static int STD_OUTPUT_HANDLE;
    internal static HandleRef NullHandleRef;
    internal static IntPtr NullIntPtr;
    internal static int MAX_PATH;
    private static NativeMethods();
    internal static string FindOnPath(string filename);
    internal static int GetOEMCP();
    internal static bool FreeLibrary(IntPtr module);
    internal static IntPtr GetProcAddress(IntPtr module, string procName);
    internal static IntPtr LoadLibrary(string fileName);
    internal static UInt32 GetRequestedRuntimeInfo(string pExe, string pwszVersion, string pConfigurationFile, UInt32 startupFlags, UInt32 runtimeInfoFlags, StringBuilder pDirectory, int dwDirectory, UInt32& dwDirectoryLength, StringBuilder pVersion, int cchBuffer, UInt32& dwlength);
    internal static int GetModuleFileName(HandleRef hModule, StringBuilder buffer, int length);
    internal static IntPtr GetStdHandle(int nStdHandle);
    internal static UInt32 GetFileType(IntPtr hFile);
    internal static int GetCurrentDirectory(int nBufferLength, StringBuilder lpBuffer);
}
internal class Microsoft.Build.BuildEngine.Shared.ProjectConfigurationInSolution : ConfigurationInSolution {
    internal bool IncludeInBuild { get; }
    internal ProjectConfigurationInSolution(string configurationName, string platformName, bool includeInBuild);
    internal bool get_IncludeInBuild();
}
internal static class Microsoft.Build.BuildEngine.Shared.ProjectErrorUtilities : object {
    internal static void VerifyThrowInvalidProject(bool condition, XmlNode xmlNode, string resourceName);
    internal static void ThrowInvalidProject(XmlNode xmlNode, string resourceName, object arg0);
    internal static void VerifyThrowInvalidProject(bool condition, XmlNode xmlNode, string resourceName, object arg0);
    internal static void ThrowInvalidProject(XmlNode xmlNode, string resourceName, object arg0, object arg1);
    internal static void VerifyThrowInvalidProject(bool condition, XmlNode xmlNode, string resourceName, object arg0, object arg1);
    internal static void VerifyThrowInvalidProject(bool condition, XmlNode xmlNode, string resourceName, object arg0, object arg1, object arg2);
    internal static void VerifyThrowInvalidProject(bool condition, XmlNode xmlNode, string resourceName, object arg0, object arg1, object arg2, object arg3);
    internal static void VerifyThrowInvalidProject(bool condition, string errorSubCategoryResourceName, XmlNode xmlNode, string resourceName);
    internal static void VerifyThrowInvalidProject(bool condition, string errorSubCategoryResourceName, XmlNode xmlNode, string resourceName, object arg0);
    internal static void VerifyThrowInvalidProject(bool condition, string errorSubCategoryResourceName, XmlNode xmlNode, string resourceName, object arg0, object arg1);
    internal static void VerifyThrowInvalidProject(bool condition, string errorSubCategoryResourceName, XmlNode xmlNode, string resourceName, object arg0, object arg1, object arg2);
    internal static void VerifyThrowInvalidProject(bool condition, string errorSubCategoryResourceName, XmlNode xmlNode, string resourceName, object arg0, object arg1, object arg2, object arg3);
}
internal static class Microsoft.Build.BuildEngine.Shared.ProjectFileErrorUtilities : object {
    internal static void VerifyThrowInvalidProjectFile(bool condition, BuildEventFileInfo projectFile, string resourceName, Object[] args);
    internal static void VerifyThrowInvalidProjectFile(bool condition, string errorSubCategoryResourceName, BuildEventFileInfo projectFile, string resourceName, Object[] args);
}
internal class Microsoft.Build.BuildEngine.Shared.ProjectInSolution : object {
    internal static String[] projectNamesToDisambiguate;
    internal static int DependencyLevelUnknown;
    internal static int DependencyLevelBeingDetermined;
    internal SolutionProjectType ProjectType { get; internal set; }
    internal string ProjectName { get; internal set; }
    internal string RelativePath { get; internal set; }
    internal string AbsolutePath { get; }
    internal string ProjectGuid { get; internal set; }
    internal ArrayList Dependencies { get; }
    internal ArrayList ProjectReferences { get; }
    internal string ParentProjectGuid { get; internal set; }
    internal SolutionParser ParentSolution { get; internal set; }
    internal Hashtable AspNetConfigurations { get; internal set; }
    internal Dictionary`2<string, ProjectConfigurationInSolution> ProjectConfigurations { get; }
    internal int DependencyLevel { get; internal set; }
    internal bool IsStaticLibrary { get; internal set; }
    internal bool ChildReferencesGathered { get; internal set; }
    internal ProjectInSolution(SolutionParser solution);
    private static ProjectInSolution();
    internal SolutionProjectType get_ProjectType();
    internal void set_ProjectType(SolutionProjectType value);
    internal string get_ProjectName();
    internal void set_ProjectName(string value);
    internal string get_RelativePath();
    internal void set_RelativePath(string value);
    internal string get_AbsolutePath();
    internal string get_ProjectGuid();
    internal void set_ProjectGuid(string value);
    internal ArrayList get_Dependencies();
    internal ArrayList get_ProjectReferences();
    internal string get_ParentProjectGuid();
    internal void set_ParentProjectGuid(string value);
    internal SolutionParser get_ParentSolution();
    internal void set_ParentSolution(SolutionParser value);
    internal Hashtable get_AspNetConfigurations();
    internal void set_AspNetConfigurations(Hashtable value);
    internal Dictionary`2<string, ProjectConfigurationInSolution> get_ProjectConfigurations();
    internal int get_DependencyLevel();
    internal void set_DependencyLevel(int value);
    internal bool get_IsStaticLibrary();
    internal void set_IsStaticLibrary(bool value);
    internal bool get_ChildReferencesGathered();
    internal void set_ChildReferencesGathered(bool value);
    internal bool CanBeMSBuildProjectFile(String& errorMessage);
    internal string GetUniqueProjectName();
    internal static string DisambiguateProjectTargetName(string uniqueProjectName);
}
internal class Microsoft.Build.BuildEngine.Shared.ProjectWriter : XmlTextWriter {
    internal static string itemTypeOrMetadataNameSpecification;
    internal static Regex itemVectorTransformPattern;
    internal static Regex itemVectorTransformRawPattern;
    internal ProjectWriter(TextWriter w);
    internal ProjectWriter(Stream w, Encoding encoding);
    internal ProjectWriter(string filename, Encoding encoding);
    private static ProjectWriter();
    internal void Initialize(XmlDocument project, XmlDeclaration projectXmlDeclaration);
    public virtual void WriteStartDocument();
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteString(string text);
}
internal static class Microsoft.Build.BuildEngine.Shared.ResourceUtilities : object {
    private static ResourceUtilities();
    internal static string ExtractMessageCode(Regex messageCodePattern, string messageWithCode, String& code);
    internal static string FormatResourceString(String& code, String& helpKeyword, string resourceName, Object[] args);
    internal static string FormatResourceString(string resourceName, Object[] args);
    internal static string FormatString(string unformatted, Object[] args);
    internal static void VerifyResourceStringExists(string resourceName);
}
internal class Microsoft.Build.BuildEngine.Shared.SolutionParser : object {
    internal static int slnFileMinUpgradableVersion;
    internal static int slnFileMinVersion;
    internal static int slnFileMaxVersion;
    internal ArrayList SolutionParserWarnings { get; }
    internal ArrayList SolutionParserComments { get; }
    internal ArrayList SolutionParserErrorCodes { get; }
    internal int Version { get; }
    internal bool ContainsWebProjects { get; }
    internal ArrayList ProjectsInOrder { get; internal set; }
    internal Hashtable ProjectsByGuid { get; internal set; }
    internal string SolutionFile { get; internal set; }
    internal string SolutionFileDirectory { get; internal set; }
    internal StreamReader SolutionReader { get; internal set; }
    internal ProjectInSolution[] Projects { get; }
    internal List`1<ConfigurationInSolution> SolutionConfigurations { get; }
    private static SolutionParser();
    internal ArrayList get_SolutionParserWarnings();
    internal ArrayList get_SolutionParserComments();
    internal ArrayList get_SolutionParserErrorCodes();
    internal int get_Version();
    internal bool get_ContainsWebProjects();
    internal ArrayList get_ProjectsInOrder();
    internal void set_ProjectsInOrder(ArrayList value);
    internal Hashtable get_ProjectsByGuid();
    internal void set_ProjectsByGuid(Hashtable value);
    internal string get_SolutionFile();
    internal void set_SolutionFile(string value);
    internal string get_SolutionFileDirectory();
    internal void set_SolutionFileDirectory(string value);
    internal StreamReader get_SolutionReader();
    internal void set_SolutionReader(StreamReader value);
    internal ProjectInSolution[] get_Projects();
    internal List`1<ConfigurationInSolution> get_SolutionConfigurations();
    internal void ParseSolutionFile();
    internal void ParseSolution();
    internal void ParseEtpProject(ProjectInSolution etpProj);
    internal void ParseFirstProjectLine(string firstLine, ProjectInSolution proj);
    internal void ParseNestedProjects();
    internal void ParseSolutionConfigurations();
    internal Hashtable ParseProjectConfigurations();
    internal void ProcessProjectConfigurationSection(Hashtable rawProjectConfigurationsEntries);
    internal string GetDefaultConfigurationName();
    internal string GetDefaultPlatformName();
    internal string GetProjectUniqueNameByGuid(string projectGuid);
    internal string GetProjectRelativePathByGuid(string projectGuid);
}
internal enum Microsoft.Build.BuildEngine.Shared.SolutionProjectType : Enum {
    public int value__;
    public static SolutionProjectType Unknown;
    public static SolutionProjectType ManagedProject;
    public static SolutionProjectType VCProject;
    public static SolutionProjectType SolutionFolder;
    public static SolutionProjectType WebProject;
    public static SolutionProjectType EtpSubProject;
}
internal class Microsoft.Build.BuildEngine.Shared.TypeLoader : object {
    internal TypeLoader(TypeFilter isDesiredType);
    internal LoadedType Load(string typeName, AssemblyLoadInfo assembly);
    internal static bool IsPartialTypeNameMatch(string typeName1, string typeName2);
}
internal static class Microsoft.Build.BuildEngine.Shared.VisualStudioConstants : object {
    internal static int CurrentVisualStudioSolutionFileVersion;
    internal static string CurrentVisualStudioVersion;
}
internal static class Microsoft.Build.BuildEngine.Shared.XMakeAttributes : object {
    internal static string condition;
    internal static string executeTargets;
    internal static string name;
    internal static string msbuildVersion;
    internal static string xmlns;
    internal static string defaultTargets;
    internal static string initialTargets;
    internal static string dependsOnTargets;
    internal static string beforeTargets;
    internal static string afterTargets;
    internal static string include;
    internal static string exclude;
    internal static string remove;
    internal static string keepMetadata;
    internal static string removeMetadata;
    internal static string keepDuplicates;
    internal static string inputs;
    internal static string outputs;
    internal static string keepDuplicateOutputs;
    internal static string assemblyName;
    internal static string assemblyFile;
    internal static string taskName;
    internal static string continueOnError;
    internal static string project;
    internal static string taskParameter;
    internal static string itemName;
    internal static string propertyName;
    internal static string toolsVersion;
    internal static string requiredRuntime;
    internal static string requiredPlatform;
    internal static string runtime;
    internal static string msbuildRuntime;
    internal static string architecture;
    internal static string msbuildArchitecture;
    internal static string taskFactory;
    internal static string parameterType;
    internal static string required;
    internal static string output;
    internal static string defaultValue;
    internal static string evaluate;
    internal static string label;
    internal static string returns;
    internal static string defaultXmlNamespace;
    internal static bool IsSpecialTaskAttribute(string attribute);
    internal static bool IsBadlyCasedSpecialTaskAttribute(string attribute);
    internal static bool IsNonBatchingTargetAttribute(string attribute);
}
internal static class Microsoft.Build.BuildEngine.Shared.XMakeElements : object {
    internal static string project;
    internal static string visualStudioProject;
    internal static string target;
    internal static string propertyGroup;
    internal static string output;
    internal static string itemGroup;
    internal static string itemDefinitionGroup;
    internal static string usingTask;
    internal static string projectExtensions;
    internal static string onError;
    internal static string error;
    internal static string warning;
    internal static string message;
    internal static string import;
    internal static string importGroup;
    internal static string choose;
    internal static string when;
    internal static string otherwise;
    internal static string usingTaskParameterGroup;
    internal static string usingTaskParameter;
    internal static string usingTaskBody;
    internal static Char[] illegalTargetNameCharacters;
    internal static String[] illegalPropertyOrItemNames;
    internal static Hashtable IllegalItemPropertyNames { get; }
    private static XMakeElements();
    internal static bool IsValidTaskChildNode(XmlNode childNode);
    internal static Hashtable get_IllegalItemPropertyNames();
}
internal static class Microsoft.Build.BuildEngine.Shared.XmlUtilities : object {
    internal static XmlElement RenameXmlElement(XmlElement oldElement, string newElementName, string xmlNamespace);
    internal static string GetXmlNodeFile(XmlNode node, string defaultFile);
    internal static bool IsXmlRootElement(XmlNode node);
    internal static void VerifyThrowValidElementName(string name);
    internal static void VerifyThrowProjectValidElementName(XmlElement element);
    internal static bool IsValidElementName(string name);
    internal static int LocateFirstInvalidElementNameCharacter(string name);
    internal static string GetAttributeValueForElementFromFile(string projectFileName, string elementName, string attributeName);
    internal static bool IsValidInitialElementNameCharacter(char c);
    internal static bool IsValidSubsequentElementNameCharacter(char c);
}
internal class Microsoft.Build.BuildEngine.SharedMemory : object {
    internal bool IsUsable { get; }
    internal WaitHandle ReadFlag { get; }
    internal SharedMemory(string name, SharedMemoryType type, bool allowExistingMapping);
    protected virtual void Dispose(bool disposing);
    public sealed virtual void Dispose();
    protected virtual override void Finalize();
    internal bool get_IsUsable();
    internal WaitHandle get_ReadFlag();
    internal void Write(DualQueue`1<LocalCallDescriptor> objectsToWrite, DualQueue`1<LocalCallDescriptor> objectsToWriteHiPriority, bool blockUntilDone);
    internal IList Read();
    internal void Reset();
}
internal enum Microsoft.Build.BuildEngine.SharedMemoryType : Enum {
    public int value__;
    public static SharedMemoryType ReadOnly;
    public static SharedMemoryType WriteOnly;
}
[FlagsAttribute]
internal enum Microsoft.Build.BuildEngine.ShredderOptions : Enum {
    public int value__;
    public static ShredderOptions Invalid;
    public static ShredderOptions ItemTypes;
    public static ShredderOptions MetadataOutsideTransforms;
    public static ShredderOptions All;
}
public static class Microsoft.Build.BuildEngine.SolutionWrapperProject : object {
    public static string Generate(string solutionPath, string toolsVersionOverride, BuildEventContext projectBuildEventContext);
    internal static void Generate(SolutionParser solution, Project msbuildProject, string toolsVersionOverride, BuildEventContext projectBuildEventContext);
    internal static string DetermineWrapperProjectToolsVersion(string toolsVersionOverride);
    internal static BuildTask AddErrorWarningMessageElement(Target target, string elementType, bool treatAsLiteral, string textResourceName, Object[] args);
    internal static void AddPropertyGroupForSolutionConfiguration(Project msbuildProject, SolutionParser solution, ConfigurationInSolution solutionConfiguration);
    internal static string PredictActiveSolutionConfigurationName(SolutionParser solution, Engine parentEngine);
    internal static void ConvertVcToVcDependenciesToReferences(SolutionParser solution, Engine parentEngine, BuildEventContext projectBuildEventContext);
}
internal class Microsoft.Build.BuildEngine.SpecificItemDefinitionLibrary : object {
    internal string ItemType { get; }
    internal SpecificItemDefinitionLibrary(string itemType, ItemDefinitionLibrary itemDefinitionLibrary);
    internal string get_ItemType();
    internal string GetDefaultMetadataValue(string metadataName);
}
internal class Microsoft.Build.BuildEngine.StringExpressionNode : OperandExpressionNode {
    internal StringExpressionNode(string value);
    internal virtual bool BoolEvaluate(ConditionEvaluationState state);
    internal virtual double NumericEvaluate(ConditionEvaluationState state);
    internal virtual bool CanBoolEvaluate(ConditionEvaluationState state);
    internal virtual bool CanNumericEvaluate(ConditionEvaluationState state);
    internal virtual string GetUnexpandedValue(ConditionEvaluationState state);
    internal virtual string GetExpandedValue(ConditionEvaluationState state);
    internal virtual void ResetState();
}
[DebuggerDisplayAttribute("Target (Name = { Name }, Condition = { Condition })")]
public class Microsoft.Build.BuildEngine.Target : object {
    internal int Id { get; }
    public string Name { get; }
    public string DependsOnTargets { get; public set; }
    public string Inputs { get; public set; }
    public string Outputs { get; public set; }
    public string Condition { get; public set; }
    internal XmlAttribute ConditionAttribute { get; }
    internal XmlElement TargetElement { get; }
    internal XmlAttribute DependsOnTargetsAttribute { get; }
    internal string ProjectFileOfTargetElement { get; }
    internal Project ParentProject { get; internal set; }
    internal Engine ParentEngine { get; }
    public bool IsImported { get; }
    internal BuildState TargetBuildState { get; }
    internal TargetExecutionWrapper ExecutionState { get; }
    internal Target(XmlElement targetElement, Project project, bool importedFromAnotherProject);
    internal int get_Id();
    public string get_Name();
    public string get_DependsOnTargets();
    public void set_DependsOnTargets(string value);
    public string get_Inputs();
    public void set_Inputs(string value);
    public string get_Outputs();
    public void set_Outputs(string value);
    public string get_Condition();
    public void set_Condition(string value);
    internal XmlAttribute get_ConditionAttribute();
    internal XmlElement get_TargetElement();
    internal XmlAttribute get_DependsOnTargetsAttribute();
    internal string get_ProjectFileOfTargetElement();
    internal Project get_ParentProject();
    internal void set_ParentProject(Project value);
    internal Engine get_ParentEngine();
    internal List`1<string> GetBatchableTargetParameters();
    public bool get_IsImported();
    internal BuildState get_TargetBuildState();
    internal TargetExecutionWrapper get_ExecutionState();
    public sealed virtual IEnumerator GetEnumerator();
    internal void ResetBuildStatus();
    internal void UpdateTargetStateOnBuildCompletion(BuildState stateOfBuild, List`1<BuildItem> targetOutputItemList);
    internal void Build(ProjectBuildState buildContext);
    internal void ContinueBuild(ProjectBuildState buildContext, TaskExecutionContext taskExecutionContext);
    internal bool ExecuteOneTask(XmlElement taskNode, ITaskHost hostObject);
    internal void MarkTargetAsDirty();
    internal XmlAttribute SetOrRemoveTargetAttribute(string attributeName, string attributeValue);
    public BuildTask AddNewTask(string taskName);
    public void RemoveTask(BuildTask taskElement);
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Build.BuildEngine.TargetCollection : object {
    internal Project ParentProject { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public Target Item { get; }
    internal TargetCollection(Project parentProject);
    internal Project get_ParentProject();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public Target get_Item(string index);
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    internal void AddOverrideTarget(Target newTarget);
    public Target AddNewTarget(string targetName);
    public void RemoveTarget(Target targetToRemove);
    public bool Exists(string targetName);
    internal void Clear();
}
internal class Microsoft.Build.BuildEngine.TargetCycleDetector : object {
    internal TargetInProgessState CycleEdgeParent { get; }
    internal TargetInProgessState CycleEdgeChild { get; }
    internal TargetCycleDetector(EngineLoggingServices engineLoggingService, EngineCallback engineCallback);
    internal TargetInProgessState get_CycleEdgeParent();
    internal TargetInProgessState get_CycleEdgeChild();
    internal void AddTargetsToGraph(TargetInProgessState[] inprogressTargets);
    internal bool FindCycles();
}
internal class Microsoft.Build.BuildEngine.TargetDependencyAnalyzer : object {
    internal Target TargetToAnalyze { get; }
    internal TargetDependencyAnalyzer(string projectDirectory, Target targetToAnalyze, EngineLoggingServices loggingServices, BuildEventContext buildEventContext);
    internal Target get_TargetToAnalyze();
    internal DependencyAnalysisResult PerformDependencyAnalysis(ItemBucket bucket, Hashtable& changedTargetInputs, Hashtable& upToDateTargetInputs);
    internal static string GetFullBuildReason(DependencyAnalysisLogDetail logDetail);
    internal static bool IsAnyOutOfDate(DependencyAnalysisLogDetail& dependencyAnalysisDetailEntry, string projectDirectory, IList inputs, IList outputs);
}
[DebuggerDisplayAttribute("Target (Name = { Name }, State = { inProgressBuildState })")]
internal class Microsoft.Build.BuildEngine.TargetExecutionWrapper : object {
    internal ProjectBuildState InitiatingBuildContext { get; }
    internal bool BuildingRequiredTargets { get; }
    internal TargetExecutionWrapper(Target targetClass, ArrayList taskElementList, List`1<string> targetParameters, XmlElement targetElement, Expander expander, BuildEventContext targetBuildEventContext);
    internal ProjectBuildState get_InitiatingBuildContext();
    internal bool get_BuildingRequiredTargets();
    internal void ContinueBuild(ProjectBuildState buildContext, TaskExecutionContext taskExecutionContext);
    internal void NotifyBuildCompletion(BuildState stateOfBuild, ProjectBuildState errorContext);
    internal void SubmitNonIntrinsicTask(XmlElement taskNode, ITaskHost hostObject, ProjectBuildState buildContext);
    internal void AddWaitingBuildContext(ProjectBuildState buildContext);
    internal List`1<ProjectBuildState> GetWaitingBuildContexts();
    internal void NotifyWaitingTargets(ProjectBuildState errorContext);
}
internal class Microsoft.Build.BuildEngine.TargetInProgessState : object {
    internal TargetIdWrapper TargetId { get; }
    internal List`1<TargetIdWrapper> ParentTargets { get; }
    internal List`1<BuildRequest> ParentBuildRequests { get; }
    internal BuildRequest[] OutstandingBuildRequests { get; }
    internal TargetIdWrapper[] ParentTargetsForBuildRequests { get; internal set; }
    internal bool RequestedByHost { get; }
    internal string ProjectName { get; }
    internal TargetInProgessState(EngineCallback engineCallback, Target target, List`1<ProjectBuildState> waitingBuildStates, ProjectBuildState initiatingRequest, BuildRequest[] outstandingBuildRequests, string projectName);
    internal TargetIdWrapper get_TargetId();
    internal List`1<TargetIdWrapper> get_ParentTargets();
    internal List`1<BuildRequest> get_ParentBuildRequests();
    internal BuildRequest[] get_OutstandingBuildRequests();
    internal TargetIdWrapper[] get_ParentTargetsForBuildRequests();
    internal void set_ParentTargetsForBuildRequests(TargetIdWrapper[] value);
    internal bool get_RequestedByHost();
    internal string get_ProjectName();
    internal TargetIdWrapper FindParentTarget(EngineCallback engineCallback, ProjectBuildState buildContext, Target target, BuildRequest& parentRequest);
    internal bool CheckBuildContextForParentMatch(EngineCallback engineCallback, TargetIdWrapper parentId, Target target, ProjectBuildState projectBuildState);
    internal void WriteToStream(BinaryWriter writer);
    internal void CreateFromStream(BinaryReader reader);
}
internal class Microsoft.Build.BuildEngine.TargetStartedEventMinimumFields : object {
    internal DateTime TimeStamp { get; }
    internal string TargetName { get; }
    internal string TargetFile { get; }
    internal bool ShowTargetFinishedEvent { get; internal set; }
    internal bool ErrorInTarget { get; internal set; }
    internal BuildEventContext ProjectBuildEventContext { get; }
    internal TargetStartedEventMinimumFields(TargetStartedEventArgs startedEvent);
    internal DateTime get_TimeStamp();
    internal string get_TargetName();
    internal string get_TargetFile();
    internal bool get_ShowTargetFinishedEvent();
    internal void set_ShowTargetFinishedEvent(bool value);
    internal bool get_ErrorInTarget();
    internal void set_ErrorInTarget(bool value);
    internal BuildEventContext get_ProjectBuildEventContext();
}
internal class Microsoft.Build.BuildEngine.TaskEngine : object {
    internal LoadedType TaskClass { get; internal set; }
    public TaskEngine(XmlElement taskNodeXmlElement, ITaskHost hostObject, string projectFileOfTaskNode, string parentProjectFullFileName, EngineLoggingServices loggingServices, int handleId, TaskExecutionModule parentModule, BuildEventContext targetBuildEventContext);
    internal LoadedType get_TaskClass();
    internal void set_TaskClass(LoadedType value);
    internal bool FindTask();
    internal bool ExecuteTask(TaskExecutionMode howToExecuteTask, Lookup lookup);
    internal bool InitializeTask(ITask task, ItemBucket bucket, EngineProxy engineProxy);
    internal bool GatherGeneratedTaskOutputs(Lookup lookup, TaskOutput taskOutputSpecification, string taskParameterName, string itemName, string propertyName, ITask task);
    internal bool InitializeTaskScalarParameter(ITask task, XmlAttribute taskParameterAttribute, PropertyInfo parameter, Type parameterType, string parameterValue, ItemBucket bucket, Boolean& taskParameterSet);
    internal bool InitializeTaskVectorParameter(ITask task, XmlAttribute taskParameterAttribute, bool isRequired, PropertyInfo parameter, Type parameterType, string parameterValue, ItemBucket bucket, Boolean& taskParameterSet);
}
internal class Microsoft.Build.BuildEngine.TaskEngineAssemblyResolver : MarshalByRefObject {
    internal void Initialize(string taskAssemblyFileToResolve);
    internal void InstallHandler();
    internal void RemoveHandler();
    internal Assembly ResolveAssembly(object sender, ResolveEventArgs args);
    [SecurityCriticalAttribute]
public virtual object InitializeLifetimeService();
}
internal class Microsoft.Build.BuildEngine.TaskExecutionContext : ExecutionContext {
    internal bool TaskExecutedSuccessfully { get; }
    internal Exception ThrownException { get; }
    internal Project ParentProject { get; }
    internal Target ParentTarget { get; }
    internal ProjectBuildState BuildContext { get; }
    internal XmlElement TaskNode { get; }
    internal BuildRequest TriggeringBuildRequest { get; }
    internal TaskExecutionContext(Project parentProject, Target parentTarget, XmlElement taskNode, ProjectBuildState buildContext, int handleId, int nodeIndex, BuildEventContext taskBuildEventContext);
    internal bool get_TaskExecutedSuccessfully();
    internal Exception get_ThrownException();
    internal Project get_ParentProject();
    internal Target get_ParentTarget();
    internal ProjectBuildState get_BuildContext();
    internal XmlElement get_TaskNode();
    internal BuildRequest get_TriggeringBuildRequest();
    internal void SetTaskOutputs(bool taskExecutedSuccessfully, Exception thrownException, long executionTime);
}
[FlagsAttribute]
internal enum Microsoft.Build.BuildEngine.TaskExecutionMode : Enum {
    public int value__;
    public static TaskExecutionMode Invalid;
    public static TaskExecutionMode ExecuteTaskAndGatherOutputs;
    public static TaskExecutionMode InferOutputsOnly;
}
internal class Microsoft.Build.BuildEngine.TaskExecutionModule : object {
    internal bool IsRunningMultipleNodes { get; }
    internal bool UseBreadthFirstTraversal { get; internal set; }
    internal bool IsIdle { get; }
    internal long TaskExecutionTime { get; }
    internal TaskExecutionModule(EngineCallback engineCallback, TaskExecutionModuleMode moduleMode, bool profileExecution);
    private static TaskExecutionModule();
    internal bool get_IsRunningMultipleNodes();
    internal bool get_UseBreadthFirstTraversal();
    internal void set_UseBreadthFirstTraversal(bool value);
    internal bool get_IsIdle();
    internal long get_TaskExecutionTime();
    internal virtual void PostTaskOutputs(int handleId, bool taskExecutedSuccessfully, Exception thrownException, long executionTime);
    internal virtual bool BuildProjectFile(int handleId, String[] projectFileNames, String[] targetNames, IDictionary[] globalPropertiesPerProject, IDictionary[] targetOutputsPerProject, EngineLoggingServices loggingServices, String[] toolsVersions, bool useResultsCache, bool unloadProjectsOnCompletion, BuildEventContext taskContext);
    internal virtual void GetLineColumnOfXmlNode(int handleId, Int32& lineNumber, Int32& columnNumber);
    internal ITaskRegistry GetDefaultTasksRegistry(int handleId);
    internal ITaskRegistry GetProjectTasksRegistry(int handleId);
    internal string GetToolsPath(int handleId);
    internal bool RethrowTaskExceptions();
    public void ExecuteTask(TaskExecutionState taskState);
    internal int GetNextTaskId();
    internal void PostBuildResults(BuildResult buildResult);
    internal long LastTaskActivity();
    internal Int32[] GetWaitingTaskData(List`1<BuildRequest[]> outstandingRequests);
    internal void Shutdown();
    internal void IncrementOverallThreadCount();
    internal void DecrementOverallThreadCount();
    internal void DecrementActiveThreadCount();
    internal void WaitForZeroActiveThreadCount();
    internal TaskExecutionModuleMode GetExecutionModuleMode();
    internal TaskWorkerThread GetWorkerThread();
}
internal class Microsoft.Build.BuildEngine.TaskExecutionState : object {
    internal int HandleId { get; internal set; }
    internal EngineLoggingServices LoggingService { get; internal set; }
    internal TaskExecutionModule ParentModule { get; internal set; }
    internal string ExecutionDirectory { get; }
    internal bool ProfileExecution { get; internal set; }
    internal TaskExecutionState(TaskExecutionMode howToExecuteTask, Lookup lookupForInference, Lookup lookupForExecution, XmlElement taskXmlNode, ITaskHost hostObject, string projectFileOfTaskNode, string parentProjectFullFileName, string executionDirectory, int handleId, BuildEventContext buildEventContext);
    private static TaskExecutionState();
    internal int get_HandleId();
    internal void set_HandleId(int value);
    internal EngineLoggingServices get_LoggingService();
    internal void set_LoggingService(EngineLoggingServices value);
    internal TaskExecutionModule get_ParentModule();
    internal void set_ParentModule(TaskExecutionModule value);
    internal string get_ExecutionDirectory();
    internal bool get_ProfileExecution();
    internal void set_ProfileExecution(bool value);
    internal virtual void ExecuteTask();
    internal void NotifyOfWait(long waitStartTime);
    internal virtual bool TaskEngineExecuteTask(TaskEngine taskEngine, TaskExecutionMode howTaskShouldBeExecuted, Lookup lookup);
}
internal class Microsoft.Build.BuildEngine.TaskItem : MarshalByRefObject {
    internal BuildItem item;
    public string ItemSpec { get; public set; }
    public ICollection MetadataNames { get; }
    public int MetadataCount { get; }
    public ICollection CustomMetadataNames { get; }
    public int CustomMetadataCount { get; }
    internal TaskItem(string itemSpec);
    internal TaskItem(BuildItem item);
    public sealed virtual string get_ItemSpec();
    public sealed virtual void set_ItemSpec(string value);
    public sealed virtual ICollection get_MetadataNames();
    public sealed virtual int get_MetadataCount();
    public ICollection get_CustomMetadataNames();
    public int get_CustomMetadataCount();
    public sealed virtual string GetMetadata(string metadataName);
    public sealed virtual void SetMetadata(string metadataName, string metadataValue);
    public sealed virtual void RemoveMetadata(string metadataName);
    public sealed virtual void CopyMetadataTo(ITaskItem destinationItem);
    public sealed virtual IDictionary CloneCustomMetadata();
    public virtual string ToString();
    [SecurityCriticalAttribute]
public virtual object InitializeLifetimeService();
    public static string op_Explicit(TaskItem taskItemToCast);
}
internal class Microsoft.Build.BuildEngine.TaskOutput : object {
    internal bool IsItemVector { get; }
    internal bool IsProperty { get; }
    internal XmlAttribute TaskParameterAttribute { get; }
    internal XmlAttribute ItemNameAttribute { get; }
    internal XmlAttribute PropertyNameAttribute { get; }
    internal XmlAttribute ConditionAttribute { get; }
    internal TaskOutput(XmlElement node);
    internal bool get_IsItemVector();
    internal bool get_IsProperty();
    internal XmlAttribute get_TaskParameterAttribute();
    internal XmlAttribute get_ItemNameAttribute();
    internal XmlAttribute get_PropertyNameAttribute();
    internal XmlAttribute get_ConditionAttribute();
}
internal class Microsoft.Build.BuildEngine.TaskRegistry : object {
    internal Hashtable AllTaskDeclarations { get; }
    internal Hashtable get_AllTaskDeclarations();
    public sealed virtual void Clear();
    public sealed virtual bool GetRegisteredTask(string taskName, string taskProjectFile, XmlNode taskNode, bool exactMatchRequired, EngineLoggingServices loggingServices, BuildEventContext buildEventContext, LoadedType& taskClass);
    internal bool FindRegisteredTasks(string taskName, bool exactMatchRequired, Hashtable& registeredTasksFound);
    public sealed virtual void RegisterTask(UsingTask usingTask, Expander expander, EngineLoggingServices loggingServices, BuildEventContext buildEventContext);
}
internal class Microsoft.Build.BuildEngine.TaskWorkerThread : object {
    internal ManualResetEvent LocalDoneNoticeEvent { get; }
    internal int WorkItemCount { get; }
    internal TaskWorkerThread(TaskExecutionModule parentModule, bool profileExecution);
    internal ManualResetEvent get_LocalDoneNoticeEvent();
    internal int get_WorkItemCount();
    internal void ActivateThread();
    internal void WaitForResults(int handleId, BuildResult[] buildResults, BuildRequest[] buildRequests);
    internal Int32[] GetWaitingTasksData(List`1<BuildRequest[]> outstandingRequests);
    internal void PostWorkItem(TaskExecutionState workItem);
    internal void PostBuildResult(BuildResult buildResult);
    internal void Shutdown();
}
internal class Microsoft.Build.BuildEngine.Token : object {
    internal TokenType Type { get; }
    internal string String { get; }
    internal Token(TokenType type, string tokenString);
    internal bool IsToken(TokenType type);
    internal TokenType get_Type();
    internal string get_String();
}
public class Microsoft.Build.BuildEngine.Toolset : object {
    public string ToolsVersion { get; }
    public string ToolsPath { get; private set; }
    public BuildPropertyGroup BuildProperties { get; }
    public Toolset(string toolsVersion, string toolsPath);
    public Toolset(string toolsVersion, string toolsPath, BuildPropertyGroup buildProperties);
    public string get_ToolsVersion();
    public string get_ToolsPath();
    private void set_ToolsPath(string value);
    public BuildPropertyGroup get_BuildProperties();
    public Toolset Clone();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Build.BuildEngine.ToolsetCollection : object {
    public IEnumerable`1<string> ToolsVersions { get; }
    public Toolset Item { get; }
    public int Count { get; }
    public bool IsReadOnly { get; }
    internal ToolsetCollection(Engine parentEngine);
    public IEnumerable`1<string> get_ToolsVersions();
    public Toolset get_Item(string toolsVersion);
    public bool Contains(string toolsVersion);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual void Add(Toolset item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(Toolset item);
    public sealed virtual void CopyTo(Toolset[] array, int arrayIndex);
    public sealed virtual IEnumerator`1<Toolset> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual bool Remove(Toolset item);
}
internal class Microsoft.Build.BuildEngine.ToolsetConfigurationReader : ToolsetReader {
    protected IEnumerable`1<PropertyDefinition> ToolsVersions { get; }
    protected string DefaultToolsVersion { get; }
    internal ToolsetConfigurationReader(ReadApplicationConfiguration readApplicationConfiguration);
    [IteratorStateMachineAttribute("Microsoft.Build.BuildEngine.ToolsetConfigurationReader/<get_ToolsVersions>d__6")]
protected virtual IEnumerable`1<PropertyDefinition> get_ToolsVersions();
    protected virtual string get_DefaultToolsVersion();
    [IteratorStateMachineAttribute("Microsoft.Build.BuildEngine.ToolsetConfigurationReader/<GetPropertyDefinitions>d__9")]
protected virtual IEnumerable`1<PropertyDefinition> GetPropertyDefinitions(string toolsVersion);
}
internal class Microsoft.Build.BuildEngine.ToolsetConfigurationSection : ConfigurationSection {
    [ConfigurationPropertyAttribute("")]
public ToolsetElementCollection Toolsets { get; }
    [ConfigurationPropertyAttribute("default")]
public string Default { get; public set; }
    public ToolsetElementCollection get_Toolsets();
    public string get_Default();
    public void set_Default(string value);
}
[FlagsAttribute]
public enum Microsoft.Build.BuildEngine.ToolsetDefinitionLocations : Enum {
    public int value__;
    public static ToolsetDefinitionLocations None;
    public static ToolsetDefinitionLocations ConfigurationFile;
    public static ToolsetDefinitionLocations Registry;
}
internal class Microsoft.Build.BuildEngine.ToolsetElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("toolsVersion")]
public string toolsVersion { get; public set; }
    [ConfigurationPropertyAttribute("")]
public PropertyElementCollection PropertyElements { get; }
    public string get_toolsVersion();
    public void set_toolsVersion(string value);
    public PropertyElementCollection get_PropertyElements();
}
internal class Microsoft.Build.BuildEngine.ToolsetElementCollection : ConfigurationElementCollection {
    protected bool ThrowOnDuplicate { get; }
    public ConfigurationElementCollectionType CollectionType { get; }
    protected string ElementName { get; }
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual void BaseAdd(int index, ConfigurationElement element);
    protected virtual void BaseAdd(ConfigurationElement element);
    protected virtual object GetElementKey(ConfigurationElement element);
    protected virtual bool get_ThrowOnDuplicate();
    public virtual ConfigurationElementCollectionType get_CollectionType();
    protected virtual string get_ElementName();
    public ToolsetElement GetElement(string toolsVersion);
    public ToolsetElement GetElement(int index);
}
internal abstract class Microsoft.Build.BuildEngine.ToolsetReader : object {
    protected IEnumerable`1<PropertyDefinition> ToolsVersions { get; }
    protected string DefaultToolsVersion { get; }
    internal static string ReadAllToolsets(ToolsetCollection toolsets, BuildPropertyGroup globalProperties, BuildPropertyGroup initialProperties);
    internal static string ReadAllToolsets(ToolsetCollection toolsets, BuildPropertyGroup globalProperties, BuildPropertyGroup initialProperties, ToolsetDefinitionLocations locations);
    internal static string ReadAllToolsets(ToolsetCollection toolsets, ToolsetRegistryReader registryReader, ToolsetConfigurationReader configurationReader, BuildPropertyGroup globalProperties, BuildPropertyGroup initialProperties, ToolsetDefinitionLocations locations);
    internal string ReadToolsets(ToolsetCollection toolsets, BuildPropertyGroup globalProperties, BuildPropertyGroup initialProperties, bool accumulateProperties);
    protected abstract virtual IEnumerable`1<PropertyDefinition> get_ToolsVersions();
    protected abstract virtual string get_DefaultToolsVersion();
    protected abstract virtual IEnumerable`1<PropertyDefinition> GetPropertyDefinitions(string toolsVersion);
}
internal class Microsoft.Build.BuildEngine.ToolsetRegistryReader : ToolsetReader {
    protected IEnumerable`1<PropertyDefinition> ToolsVersions { get; }
    protected string DefaultToolsVersion { get; }
    internal ToolsetRegistryReader(RegistryKeyWrapper msbuildRegistryWrapper);
    [IteratorStateMachineAttribute("Microsoft.Build.BuildEngine.ToolsetRegistryReader/<get_ToolsVersions>d__5")]
protected virtual IEnumerable`1<PropertyDefinition> get_ToolsVersions();
    protected virtual string get_DefaultToolsVersion();
    [IteratorStateMachineAttribute("Microsoft.Build.BuildEngine.ToolsetRegistryReader/<GetPropertyDefinitions>d__8")]
protected virtual IEnumerable`1<PropertyDefinition> GetPropertyDefinitions(string toolsVersion);
}
internal class Microsoft.Build.BuildEngine.ToolsetState : object {
    internal Toolset Toolset { get; }
    internal string ToolsVersion { get; }
    internal string ToolsPath { get; }
    internal BuildPropertyGroup BuildProperties { get; }
    internal ToolsetState(Engine engine, Toolset toolset);
    internal ToolsetState(Engine engine, Toolset toolset, GetFiles getFiles, LoadXmlFromPath loadXmlFromPath);
    internal Toolset get_Toolset();
    internal string get_ToolsVersion();
    internal string get_ToolsPath();
    internal BuildPropertyGroup get_BuildProperties();
    internal ProjectSchemaValidationHandler SchemaValidator(BuildEventContext buildEventContext);
    internal ITaskRegistry GetTaskRegistry(BuildEventContext buildEventContext);
    internal void SetTaskRegistry(ITaskRegistry taskRegistry);
}
public class Microsoft.Build.BuildEngine.UsingTask : object {
    public bool IsImported { get; }
    public string TaskName { get; }
    internal XmlAttribute TaskNameAttribute { get; }
    public string AssemblyName { get; }
    internal XmlAttribute AssemblyNameAttribute { get; }
    public string AssemblyFile { get; }
    internal XmlAttribute AssemblyFileAttribute { get; }
    public string Condition { get; }
    internal XmlAttribute ConditionAttribute { get; }
    internal UsingTask(XmlElement usingTaskNode, bool isImported);
    public bool get_IsImported();
    public string get_TaskName();
    internal XmlAttribute get_TaskNameAttribute();
    public string get_AssemblyName();
    internal XmlAttribute get_AssemblyNameAttribute();
    public string get_AssemblyFile();
    internal XmlAttribute get_AssemblyFileAttribute();
    public string get_Condition();
    internal XmlAttribute get_ConditionAttribute();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.Build.BuildEngine.UsingTaskCollection : object {
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    internal UsingTask Item { get; }
    public sealed virtual IEnumerator GetEnumerator();
    public sealed virtual void CopyTo(Array array, int index);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    internal void Clear();
    internal void Add(UsingTask usingTask);
    internal UsingTask get_Item(int index);
    public void CopyTo(UsingTask[] array, int index);
}
public static class Microsoft.Build.BuildEngine.Utilities : object {
    private static Utilities();
    internal static void UpdateConditionedPropertiesTable(Hashtable conditionedPropertiesTable, string leftValue, string rightValueExpanded);
    internal static void GatherReferencedPropertyNames(string condition, XmlAttribute conditionAttribute, Expander expander, Hashtable conditionedPropertiesTable);
    internal static bool EvaluateCondition(string condition, XmlAttribute conditionAttribute, Expander expander, ParserOptions itemListOptions, Project parentProject);
    internal static bool EvaluateCondition(string condition, XmlAttribute conditionAttribute, Expander expander, ParserOptions itemListOptions, EngineLoggingServices loggingServices, BuildEventContext buildEventContext);
    internal static bool EvaluateCondition(string condition, XmlAttribute conditionAttribute, Expander expander, Hashtable conditionedPropertiesTable, ParserOptions itemListOptions, EngineLoggingServices loggingServices, BuildEventContext buildEventContext);
    internal static void SetXmlNodeInnerContents(XmlNode node, string s);
    internal static string GetXmlNodeInnerContents(XmlNode node);
    internal static string RemoveXmlNamespace(string xml);
    public static string Escape(string unescapedExpression);
    internal static BuildEventFileInfo CreateBuildEventFileInfo(XmlNode xmlNode, string defaultFile);
    internal static Hashtable CreateTableIfNecessary(Hashtable table);
    internal static Dictionary`2<string, V> CreateTableIfNecessary(Dictionary`2<string, V> table);
}
internal static class Microsoft.Build.BuildEngine.VCProjectParser : object {
    internal static List`1<string> GetReferencedProjectGuids(XmlDocument project);
    internal static bool IsStaticLibrary(XmlDocument project, string configurationName);
}
internal class Microsoft.Build.BuildEngine.VCWrapperProject : object {
    internal static string VCBuildLocationHint { get; }
    internal static BuildTask AddVCBuildTaskElement(Project msbuildProject, Target target, string solutionPath, string projectPath, string vcbuildTargetName, string platformName, string fullConfigurationName);
    internal static XmlDocument GenerateVCWrapperProject(Engine parentEngine, string vcProjectFilename, string toolsVersion);
    internal static string get_VCBuildLocationHint();
}
internal class Microsoft.Build.BuildEngine.When : object {
    internal string Condition { get; }
    internal XmlAttribute ConditionAttribute { get; }
    internal GroupingCollection PropertyAndItemLists { get; }
    internal When(Project parentProject, GroupingCollection parentGroupingCollection, XmlElement whenElement, bool importedFromAnotherProject, Options options, int nestingDepth);
    internal string get_Condition();
    internal XmlAttribute get_ConditionAttribute();
    internal GroupingCollection get_PropertyAndItemLists();
    internal bool EvaluateCondition(BuildPropertyGroup parentPropertyBag, Hashtable conditionedPropertiesTable);
    internal void Evaluate(BuildPropertyGroup parentPropertyBag, bool ignoreCondition, bool honorCondition, Hashtable conditionedPropertiesTable, ProcessingPass pass);
}
public class Microsoft.Build.BuildEngine.WriteHandler : MulticastDelegate {
    public WriteHandler(object object, IntPtr method);
    public virtual void Invoke(string message);
    public virtual IAsyncResult BeginInvoke(string message, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.Build.BuildEngine.WriteLinePrettyFromResourceDelegate : MulticastDelegate {
    public WriteLinePrettyFromResourceDelegate(object object, IntPtr method);
    public virtual void Invoke(int indentLevel, string resourceString, Object[] args);
    public virtual IAsyncResult BeginInvoke(int indentLevel, string resourceString, Object[] args, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal static class Microsoft.Build.BuildEngine.XmlSearcher : object {
    internal static bool GetLineColumnByNode(XmlNode xmlNodeToFind, Int32& foundLineNumber, Int32& foundColumnNumber);
    internal static bool GetElementAndAttributeNumber(XmlNode xmlNodeToFind, Int32& elementNumber, Int32& attributeNumber);
    internal static bool GetLineColumnByNodeNumber(string projectFile, int xmlElementNumberToSearchFor, int xmlAttributeNumberToSearchFor, Int32& foundLineNumber, Int32& foundColumnNumber);
}
internal class Microsoft.Internal.Performance.CodeMarkerExStartEnd : ValueType {
    private int _end;
    private Byte[] _aBuff;
    internal CodeMarkerExStartEnd(int begin, int end, Byte[] aBuff);
    internal CodeMarkerExStartEnd(int begin, int end, Guid guidData);
    internal CodeMarkerExStartEnd(int begin, int end, string stringData);
    internal CodeMarkerExStartEnd(int begin, int end, UInt32 uintData);
    internal CodeMarkerExStartEnd(int begin, int end, ulong ulongData);
    public sealed virtual void Dispose();
}
internal class Microsoft.Internal.Performance.CodeMarkers : object {
    public static CodeMarkers Instance;
    public bool IsEnabled { get; }
    private static CodeMarkers();
    public bool get_IsEnabled();
    public bool CodeMarker(int nTimerID);
    public bool CodeMarkerEx(int nTimerID, Byte[] aBuff);
    public bool CodeMarkerEx(int nTimerID, Guid guidData);
    public bool CodeMarkerEx(int nTimerID, string stringData);
    public bool CodeMarkerEx(int nTimerID, UInt32 uintData);
    public bool CodeMarkerEx(int nTimerID, ulong ulongData);
}
internal class Microsoft.Internal.Performance.CodeMarkerStartEnd : ValueType {
    private int _end;
    internal CodeMarkerStartEnd(int begin, int end);
    public sealed virtual void Dispose();
}
internal static class ThisAssembly : object {
    internal static string Title;
    internal static string Description;
    internal static string DefaultAlias;
    internal static string Copyright;
    internal static string Version;
    internal static string InformationalVersion;
    internal static string DailyBuildNumberStr;
    internal static string BuildRevisionStr;
    internal static int DailyBuildNumber;
}
