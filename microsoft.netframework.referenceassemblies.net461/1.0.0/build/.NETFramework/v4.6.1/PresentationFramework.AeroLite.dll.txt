public class Microsoft.Windows.Themes.DataGridHeaderBorder : Border {
    public static DependencyProperty IsHoveredProperty;
    public static DependencyProperty IsPressedProperty;
    public static DependencyProperty IsClickableProperty;
    public static DependencyProperty SortDirectionProperty;
    public static DependencyProperty IsSelectedProperty;
    public static DependencyProperty OrientationProperty;
    public static DependencyProperty SeparatorBrushProperty;
    public static DependencyProperty SeparatorVisibilityProperty;
    public bool IsHovered { get; public set; }
    public bool IsPressed { get; public set; }
    public bool IsClickable { get; public set; }
    public Nullable`1<ListSortDirection> SortDirection { get; public set; }
    public bool IsSelected { get; public set; }
    public Orientation Orientation { get; public set; }
    public Brush SeparatorBrush { get; public set; }
    public Visibility SeparatorVisibility { get; public set; }
    private static DataGridHeaderBorder();
    public bool get_IsHovered();
    public void set_IsHovered(bool value);
    public bool get_IsPressed();
    public void set_IsPressed(bool value);
    public bool get_IsClickable();
    public void set_IsClickable(bool value);
    public Nullable`1<ListSortDirection> get_SortDirection();
    public void set_SortDirection(Nullable`1<ListSortDirection> value);
    public bool get_IsSelected();
    public void set_IsSelected(bool value);
    public Orientation get_Orientation();
    public void set_Orientation(Orientation value);
    public Brush get_SeparatorBrush();
    public void set_SeparatorBrush(Brush value);
    public Visibility get_SeparatorVisibility();
    public void set_SeparatorVisibility(Visibility value);
    protected virtual Size MeasureOverride(Size constraint);
    protected virtual Size ArrangeOverride(Size arrangeSize);
    protected virtual void OnRender(DrawingContext dc);
}
public static class Microsoft.Windows.Themes.PlatformCulture : object {
    public static FlowDirection FlowDirection { get; }
    public static FlowDirection get_FlowDirection();
}
public class Microsoft.Windows.Themes.ProgressBarBrushConverter : object {
    public sealed virtual object Convert(Object[] values, Type targetType, object parameter, CultureInfo culture);
    public sealed virtual Object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture);
}
public class Microsoft.Windows.Themes.ScrollChrome : FrameworkElement {
    public static DependencyProperty ScrollGlyphProperty;
    public static DependencyProperty RenderMouseOverProperty;
    public static DependencyProperty RenderPressedProperty;
    public bool RenderMouseOver { get; public set; }
    public bool RenderPressed { get; public set; }
    private static ScrollChrome();
    public static ScrollGlyph GetScrollGlyph(DependencyObject element);
    public static void SetScrollGlyph(DependencyObject element, ScrollGlyph value);
    public bool get_RenderMouseOver();
    public void set_RenderMouseOver(bool value);
    public bool get_RenderPressed();
    public void set_RenderPressed(bool value);
    protected virtual Size MeasureOverride(Size availableSize);
    protected virtual Size ArrangeOverride(Size finalSize);
    protected virtual void OnRender(DrawingContext drawingContext);
}
public enum Microsoft.Windows.Themes.ScrollGlyph : Enum {
    public int value__;
    public static ScrollGlyph None;
    public static ScrollGlyph VerticalGripper;
    public static ScrollGlyph HorizontalGripper;
}
public class Microsoft.Windows.Themes.SystemDropShadowChrome : Decorator {
    public static DependencyProperty ColorProperty;
    public static DependencyProperty CornerRadiusProperty;
    public Color Color { get; public set; }
    public CornerRadius CornerRadius { get; public set; }
    private static SystemDropShadowChrome();
    public Color get_Color();
    public void set_Color(Color value);
    public CornerRadius get_CornerRadius();
    public void set_CornerRadius(CornerRadius value);
    protected virtual void OnRender(DrawingContext drawingContext);
}
