public class System.Configuration.AppSettingsSection : ConfigurationSection {
    protected internal ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("")]
public KeyValueConfigurationCollection Settings { get; }
    [ConfigurationPropertyAttribute("file")]
public string File { get; public set; }
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    protected internal virtual object GetRuntimeObject();
    public KeyValueConfigurationCollection get_Settings();
    public string get_File();
    public void set_File(string value);
    protected internal virtual void Reset(ConfigurationElement parentSection);
    protected internal virtual bool IsModified();
    protected internal virtual string SerializeSection(ConfigurationElement parentElement, string name, ConfigurationSaveMode saveMode);
    protected internal virtual void DeserializeElement(XmlReader reader, bool serializeCollectionKey);
}
public class System.Configuration.CallbackValidator : ConfigurationValidatorBase {
    public CallbackValidator(Type type, ValidatorCallback callback);
    public virtual bool CanValidate(Type type);
    public virtual void Validate(object value);
}
[AttributeUsageAttribute("128")]
public class System.Configuration.CallbackValidatorAttribute : ConfigurationValidatorAttribute {
    public ConfigurationValidatorBase ValidatorInstance { get; }
    public Type Type { get; public set; }
    public string CallbackMethodName { get; public set; }
    public virtual ConfigurationValidatorBase get_ValidatorInstance();
    public Type get_Type();
    public void set_Type(Type value);
    public string get_CallbackMethodName();
    public void set_CallbackMethodName(string value);
}
[DefaultMemberAttribute("Item")]
public class System.Configuration.CommaDelimitedStringCollection : StringCollection {
    public bool IsModified { get; }
    public bool IsReadOnly { get; }
    public string Item { get; public set; }
    public virtual string ToString();
    public void SetReadOnly();
    public bool get_IsModified();
    public bool get_IsReadOnly();
    public string get_Item(int index);
    public void set_Item(int index, string value);
    public void Add(string value);
    public void AddRange(String[] range);
    public void Clear();
    public void Insert(int index, string value);
    public void Remove(string value);
    public CommaDelimitedStringCollection Clone();
}
public class System.Configuration.CommaDelimitedStringCollectionConverter : ConfigurationConverterBase {
    public virtual object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type);
    public virtual object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data);
}
public class System.Configuration.Configuration : object {
    public AppSettingsSection AppSettings { get; }
    public ConnectionStringsSection ConnectionStrings { get; }
    public string FilePath { get; }
    public bool HasFile { get; }
    public ConfigurationLocationCollection Locations { get; }
    public ContextInformation EvaluationContext { get; }
    public ConfigurationSectionGroup RootSectionGroup { get; }
    public ConfigurationSectionCollection Sections { get; }
    public ConfigurationSectionGroupCollection SectionGroups { get; }
    public bool NamespaceDeclared { get; public set; }
    public Func`2<string, string> TypeStringTransformer { get; public set; }
    public Func`2<string, string> AssemblyStringTransformer { get; public set; }
    public FrameworkName TargetFramework { get; public set; }
    public AppSettingsSection get_AppSettings();
    public ConnectionStringsSection get_ConnectionStrings();
    public string get_FilePath();
    public bool get_HasFile();
    public ConfigurationLocationCollection get_Locations();
    public ContextInformation get_EvaluationContext();
    public ConfigurationSectionGroup get_RootSectionGroup();
    public ConfigurationSectionCollection get_Sections();
    public ConfigurationSectionGroupCollection get_SectionGroups();
    public ConfigurationSection GetSection(string sectionName);
    public ConfigurationSectionGroup GetSectionGroup(string sectionGroupName);
    public bool get_NamespaceDeclared();
    public void set_NamespaceDeclared(bool value);
    public void Save();
    public void Save(ConfigurationSaveMode saveMode);
    public void Save(ConfigurationSaveMode saveMode, bool forceSaveAll);
    public void SaveAs(string filename);
    public void SaveAs(string filename, ConfigurationSaveMode saveMode);
    public void SaveAs(string filename, ConfigurationSaveMode saveMode, bool forceSaveAll);
    public Func`2<string, string> get_TypeStringTransformer();
    public void set_TypeStringTransformer(Func`2<string, string> value);
    public Func`2<string, string> get_AssemblyStringTransformer();
    public void set_AssemblyStringTransformer(Func`2<string, string> value);
    public FrameworkName get_TargetFramework();
    public void set_TargetFramework(FrameworkName value);
}
public enum System.Configuration.ConfigurationAllowDefinition : Enum {
    public int value__;
    public static ConfigurationAllowDefinition MachineOnly;
    public static ConfigurationAllowDefinition MachineToWebRoot;
    public static ConfigurationAllowDefinition MachineToApplication;
    public static ConfigurationAllowDefinition Everywhere;
}
public enum System.Configuration.ConfigurationAllowExeDefinition : Enum {
    public int value__;
    public static ConfigurationAllowExeDefinition MachineOnly;
    public static ConfigurationAllowExeDefinition MachineToApplication;
    public static ConfigurationAllowExeDefinition MachineToRoamingUser;
    public static ConfigurationAllowExeDefinition MachineToLocalUser;
}
[AttributeUsageAttribute("132")]
public class System.Configuration.ConfigurationCollectionAttribute : Attribute {
    public Type ItemType { get; }
    public string AddItemName { get; public set; }
    public string RemoveItemName { get; public set; }
    public string ClearItemsName { get; public set; }
    public ConfigurationElementCollectionType CollectionType { get; public set; }
    public ConfigurationCollectionAttribute(Type itemType);
    public Type get_ItemType();
    public string get_AddItemName();
    public void set_AddItemName(string value);
    public string get_RemoveItemName();
    public void set_RemoveItemName(string value);
    public string get_ClearItemsName();
    public void set_ClearItemsName(string value);
    public ConfigurationElementCollectionType get_CollectionType();
    public void set_CollectionType(ConfigurationElementCollectionType value);
}
public abstract class System.Configuration.ConfigurationConverterBase : TypeConverter {
    public virtual bool CanConvertTo(ITypeDescriptorContext ctx, Type type);
    public virtual bool CanConvertFrom(ITypeDescriptorContext ctx, Type type);
}
[DefaultMemberAttribute("Item")]
public abstract class System.Configuration.ConfigurationElement : object {
    public ConfigurationLockCollection LockAttributes { get; }
    public ConfigurationLockCollection LockAllAttributesExcept { get; }
    public ConfigurationLockCollection LockElements { get; }
    public ConfigurationLockCollection LockAllElementsExcept { get; }
    public bool LockItem { get; public set; }
    protected internal object Item { get; protected internal set; }
    protected internal object Item { get; protected internal set; }
    protected internal ConfigurationPropertyCollection Properties { get; }
    public ElementInformation ElementInformation { get; }
    protected ContextInformation EvaluationContext { get; }
    protected internal ConfigurationElementProperty ElementProperty { get; }
    protected bool HasContext { get; }
    public Configuration CurrentConfiguration { get; }
    private static ConfigurationElement();
    protected internal virtual void Init();
    public ConfigurationLockCollection get_LockAttributes();
    public ConfigurationLockCollection get_LockAllAttributesExcept();
    public ConfigurationLockCollection get_LockElements();
    public ConfigurationLockCollection get_LockAllElementsExcept();
    public bool get_LockItem();
    public void set_LockItem(bool value);
    protected internal virtual bool IsModified();
    protected internal virtual void ResetModified();
    public virtual bool IsReadOnly();
    protected internal virtual void SetReadOnly();
    protected virtual void ListErrors(IList errorList);
    protected internal virtual void InitializeDefault();
    protected internal virtual void Reset(ConfigurationElement parentElement);
    public virtual bool Equals(object compareTo);
    public virtual int GetHashCode();
    protected internal object get_Item(ConfigurationProperty prop);
    protected internal void set_Item(ConfigurationProperty prop, object value);
    protected internal object get_Item(string propertyName);
    protected internal void set_Item(string propertyName, object value);
    protected void SetPropertyValue(ConfigurationProperty prop, object value, bool ignoreLocks);
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    protected internal virtual void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode);
    protected internal virtual bool SerializeToXmlElement(XmlWriter writer, string elementName);
    protected internal virtual bool SerializeElement(XmlWriter writer, bool serializeCollectionKey);
    protected internal virtual void DeserializeElement(XmlReader reader, bool serializeCollectionKey);
    protected virtual object OnRequiredPropertyNotFound(string name);
    protected virtual void PostDeserialize();
    protected virtual void PreSerialize(XmlWriter writer);
    protected virtual bool OnDeserializeUnrecognizedAttribute(string name, string value);
    protected virtual bool OnDeserializeUnrecognizedElement(string elementName, XmlReader reader);
    protected virtual string GetTransformedTypeString(string typeName);
    protected virtual string GetTransformedAssemblyString(string assemblyName);
    public ElementInformation get_ElementInformation();
    protected ContextInformation get_EvaluationContext();
    protected internal virtual ConfigurationElementProperty get_ElementProperty();
    protected bool get_HasContext();
    public Configuration get_CurrentConfiguration();
}
[DebuggerDisplayAttribute("Count = {Count}")]
public abstract class System.Configuration.ConfigurationElementCollection : ConfigurationElement {
    protected internal string AddElementName { get; protected internal set; }
    protected internal string RemoveElementName { get; protected internal set; }
    protected internal string ClearElementName { get; protected internal set; }
    public int Count { get; }
    public bool EmitClear { get; public set; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    protected string ElementName { get; }
    protected bool ThrowOnDuplicate { get; }
    public ConfigurationElementCollectionType CollectionType { get; }
    protected ConfigurationElementCollection(IComparer comparer);
    protected internal string get_AddElementName();
    protected internal void set_AddElementName(string value);
    protected internal string get_RemoveElementName();
    protected internal void set_RemoveElementName(string value);
    protected internal string get_ClearElementName();
    protected internal void set_ClearElementName(string value);
    protected internal virtual bool IsModified();
    protected internal virtual void ResetModified();
    public virtual bool IsReadOnly();
    protected internal virtual void SetReadOnly();
    public virtual bool Equals(object compareTo);
    public virtual int GetHashCode();
    protected internal virtual void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode);
    protected internal virtual void Reset(ConfigurationElement parentElement);
    public sealed virtual int get_Count();
    public bool get_EmitClear();
    public void set_EmitClear(bool value);
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public void CopyTo(ConfigurationElement[] array, int index);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array arr, int index);
    public sealed virtual IEnumerator GetEnumerator();
    protected virtual void BaseAdd(ConfigurationElement element);
    protected internal void BaseAdd(ConfigurationElement element, bool throwIfExists);
    protected int BaseIndexOf(ConfigurationElement element);
    protected virtual void BaseAdd(int index, ConfigurationElement element);
    protected internal void BaseRemove(object key);
    protected internal ConfigurationElement BaseGet(object key);
    protected internal bool BaseIsRemoved(object key);
    protected internal ConfigurationElement BaseGet(int index);
    protected internal Object[] BaseGetAllKeys();
    protected internal object BaseGetKey(int index);
    protected internal void BaseClear();
    protected internal void BaseRemoveAt(int index);
    protected internal virtual bool SerializeElement(XmlWriter writer, bool serializeCollectionKey);
    protected virtual bool OnDeserializeUnrecognizedElement(string elementName, XmlReader reader);
    protected virtual ConfigurationElement CreateNewElement(string elementName);
    protected abstract virtual ConfigurationElement CreateNewElement();
    protected abstract virtual object GetElementKey(ConfigurationElement element);
    protected virtual bool IsElementRemovable(ConfigurationElement element);
    protected virtual string get_ElementName();
    protected virtual bool IsElementName(string elementName);
    protected virtual bool get_ThrowOnDuplicate();
    public virtual ConfigurationElementCollectionType get_CollectionType();
}
public enum System.Configuration.ConfigurationElementCollectionType : Enum {
    public int value__;
    public static ConfigurationElementCollectionType BasicMap;
    public static ConfigurationElementCollectionType AddRemoveClearMap;
    public static ConfigurationElementCollectionType BasicMapAlternate;
    public static ConfigurationElementCollectionType AddRemoveClearMapAlternate;
}
public class System.Configuration.ConfigurationElementProperty : object {
    public ConfigurationValidatorBase Validator { get; }
    public ConfigurationElementProperty(ConfigurationValidatorBase validator);
    public ConfigurationValidatorBase get_Validator();
}
public class System.Configuration.ConfigurationErrorsException : ConfigurationException {
    public string Message { get; }
    public string BareMessage { get; }
    public string Filename { get; }
    public int Line { get; }
    public ICollection Errors { get; }
    public ConfigurationErrorsException(string message, Exception inner, string filename, int line);
    public ConfigurationErrorsException(string message);
    public ConfigurationErrorsException(string message, Exception inner);
    public ConfigurationErrorsException(string message, string filename, int line);
    public ConfigurationErrorsException(string message, XmlNode node);
    public ConfigurationErrorsException(string message, Exception inner, XmlNode node);
    public ConfigurationErrorsException(string message, XmlReader reader);
    public ConfigurationErrorsException(string message, Exception inner, XmlReader reader);
    protected ConfigurationErrorsException(SerializationInfo info, StreamingContext context);
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public virtual string get_Message();
    public virtual string get_BareMessage();
    public virtual string get_Filename();
    public virtual int get_Line();
    public ICollection get_Errors();
    public static int GetLineNumber(XmlNode node);
    public static string GetFilename(XmlNode node);
    public static int GetLineNumber(XmlReader reader);
    public static string GetFilename(XmlReader reader);
    internal static string SafeFilename(string filename);
}
public class System.Configuration.ConfigurationFileMap : object {
    public string MachineConfigFilename { get; public set; }
    public ConfigurationFileMap(string machineConfigFilename);
    public virtual object Clone();
    public string get_MachineConfigFilename();
    public void set_MachineConfigFilename(string value);
}
public class System.Configuration.ConfigurationLocation : object {
    public string Path { get; }
    public string get_Path();
    public Configuration OpenConfiguration();
}
[DefaultMemberAttribute("Item")]
public class System.Configuration.ConfigurationLocationCollection : ReadOnlyCollectionBase {
    public ConfigurationLocation Item { get; }
    public ConfigurationLocation get_Item(int index);
}
public class System.Configuration.ConfigurationLockCollection : object {
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public bool IsModified { get; }
    public string AttributeList { get; }
    public bool HasParentElements { get; }
    public void Add(string name);
    public void Remove(string name);
    public sealed virtual IEnumerator GetEnumerator();
    public void Clear();
    public bool Contains(string name);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public void CopyTo(String[] array, int index);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public bool get_IsModified();
    public bool IsReadOnly(string name);
    public string get_AttributeList();
    public void SetFromList(string attributeList);
    public bool get_HasParentElements();
}
public static class System.Configuration.ConfigurationManager : object {
    public static NameValueCollection AppSettings { get; }
    public static ConnectionStringSettingsCollection ConnectionStrings { get; }
    private static ConfigurationManager();
    public static NameValueCollection get_AppSettings();
    public static ConnectionStringSettingsCollection get_ConnectionStrings();
    public static object GetSection(string sectionName);
    public static void RefreshSection(string sectionName);
    public static Configuration OpenMachineConfiguration();
    public static Configuration OpenMappedMachineConfiguration(ConfigurationFileMap fileMap);
    public static Configuration OpenExeConfiguration(ConfigurationUserLevel userLevel);
    public static Configuration OpenExeConfiguration(string exePath);
    public static Configuration OpenMappedExeConfiguration(ExeConfigurationFileMap fileMap, ConfigurationUserLevel userLevel);
    public static Configuration OpenMappedExeConfiguration(ExeConfigurationFileMap fileMap, ConfigurationUserLevel userLevel, bool preLoad);
}
public class System.Configuration.ConfigurationPermission : CodeAccessPermission {
    public ConfigurationPermission(PermissionState state);
    public sealed virtual bool IsUnrestricted();
    public virtual IPermission Copy();
    public virtual IPermission Union(IPermission target);
    public virtual IPermission Intersect(IPermission target);
    public virtual bool IsSubsetOf(IPermission target);
    public virtual void FromXml(SecurityElement securityElement);
    public virtual SecurityElement ToXml();
}
[AttributeUsageAttribute("32767")]
public class System.Configuration.ConfigurationPermissionAttribute : CodeAccessSecurityAttribute {
    public ConfigurationPermissionAttribute(SecurityAction action);
    public virtual IPermission CreatePermission();
}
public class System.Configuration.ConfigurationProperty : object {
    public string Name { get; }
    public string Description { get; }
    public Type Type { get; }
    public object DefaultValue { get; }
    public bool IsRequired { get; }
    public bool IsKey { get; }
    public bool IsDefaultCollection { get; }
    public bool IsTypeStringTransformationRequired { get; }
    public bool IsAssemblyStringTransformationRequired { get; }
    public bool IsVersionCheckRequired { get; }
    public TypeConverter Converter { get; }
    public ConfigurationValidatorBase Validator { get; }
    public ConfigurationProperty(string name, Type type);
    public ConfigurationProperty(string name, Type type, object defaultValue);
    public ConfigurationProperty(string name, Type type, object defaultValue, ConfigurationPropertyOptions options);
    public ConfigurationProperty(string name, Type type, object defaultValue, TypeConverter typeConverter, ConfigurationValidatorBase validator, ConfigurationPropertyOptions options);
    public ConfigurationProperty(string name, Type type, object defaultValue, TypeConverter typeConverter, ConfigurationValidatorBase validator, ConfigurationPropertyOptions options, string description);
    private static ConfigurationProperty();
    public string get_Name();
    public string get_Description();
    public Type get_Type();
    public object get_DefaultValue();
    public bool get_IsRequired();
    public bool get_IsKey();
    public bool get_IsDefaultCollection();
    public bool get_IsTypeStringTransformationRequired();
    public bool get_IsAssemblyStringTransformationRequired();
    public bool get_IsVersionCheckRequired();
    public TypeConverter get_Converter();
    public ConfigurationValidatorBase get_Validator();
}
[AttributeUsageAttribute("128")]
public class System.Configuration.ConfigurationPropertyAttribute : Attribute {
    public string Name { get; }
    public object DefaultValue { get; public set; }
    public ConfigurationPropertyOptions Options { get; public set; }
    public bool IsDefaultCollection { get; public set; }
    public bool IsRequired { get; public set; }
    public bool IsKey { get; public set; }
    public ConfigurationPropertyAttribute(string name);
    private static ConfigurationPropertyAttribute();
    public string get_Name();
    public object get_DefaultValue();
    public void set_DefaultValue(object value);
    public ConfigurationPropertyOptions get_Options();
    public void set_Options(ConfigurationPropertyOptions value);
    public bool get_IsDefaultCollection();
    public void set_IsDefaultCollection(bool value);
    public bool get_IsRequired();
    public void set_IsRequired(bool value);
    public bool get_IsKey();
    public void set_IsKey(bool value);
}
[DefaultMemberAttribute("Item")]
public class System.Configuration.ConfigurationPropertyCollection : object {
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public ConfigurationProperty Item { get; }
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
    public void CopyTo(ConfigurationProperty[] array, int index);
    public sealed virtual IEnumerator GetEnumerator();
    public ConfigurationProperty get_Item(string name);
    public bool Contains(string name);
    public void Add(ConfigurationProperty property);
    public bool Remove(string name);
    public void Clear();
}
[FlagsAttribute]
public enum System.Configuration.ConfigurationPropertyOptions : Enum {
    public int value__;
    public static ConfigurationPropertyOptions None;
    public static ConfigurationPropertyOptions IsDefaultCollection;
    public static ConfigurationPropertyOptions IsRequired;
    public static ConfigurationPropertyOptions IsKey;
    public static ConfigurationPropertyOptions IsTypeStringTransformationRequired;
    public static ConfigurationPropertyOptions IsAssemblyStringTransformationRequired;
    public static ConfigurationPropertyOptions IsVersionCheckRequired;
}
public enum System.Configuration.ConfigurationSaveMode : Enum {
    public int value__;
    public static ConfigurationSaveMode Modified;
    public static ConfigurationSaveMode Minimal;
    public static ConfigurationSaveMode Full;
}
public abstract class System.Configuration.ConfigurationSection : ConfigurationElement {
    public SectionInformation SectionInformation { get; }
    public SectionInformation get_SectionInformation();
    protected internal virtual object GetRuntimeObject();
    protected internal virtual bool IsModified();
    protected internal virtual void ResetModified();
    protected internal virtual void DeserializeSection(XmlReader reader);
    protected internal virtual string SerializeSection(ConfigurationElement parentElement, string name, ConfigurationSaveMode saveMode);
    protected internal virtual bool ShouldSerializePropertyInTargetVersion(ConfigurationProperty property, string propertyName, FrameworkName targetFramework, ConfigurationElement parentConfigurationElement);
    protected internal virtual bool ShouldSerializeElementInTargetVersion(ConfigurationElement element, string elementName, FrameworkName targetFramework);
    protected internal virtual bool ShouldSerializeSectionInTargetVersion(FrameworkName targetFramework);
}
[DefaultMemberAttribute("Item")]
public class System.Configuration.ConfigurationSectionCollection : NameObjectCollectionBase {
    public ConfigurationSection Item { get; }
    public ConfigurationSection Item { get; }
    public int Count { get; }
    public KeysCollection Keys { get; }
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public ConfigurationSection get_Item(string name);
    public ConfigurationSection get_Item(int index);
    public void Add(string name, ConfigurationSection section);
    public void Clear();
    public virtual int get_Count();
    public void CopyTo(ConfigurationSection[] array, int index);
    public ConfigurationSection Get(int index);
    public ConfigurationSection Get(string name);
    [IteratorStateMachineAttribute("System.Configuration.ConfigurationSectionCollection/<GetEnumerator>d__17")]
public virtual IEnumerator GetEnumerator();
    public string GetKey(int index);
    public virtual KeysCollection get_Keys();
    public void Remove(string name);
    public void RemoveAt(int index);
}
public class System.Configuration.ConfigurationSectionGroup : object {
    public bool IsDeclared { get; }
    public bool IsDeclarationRequired { get; }
    public string SectionGroupName { get; }
    public string Name { get; }
    public string Type { get; public set; }
    public ConfigurationSectionCollection Sections { get; }
    public ConfigurationSectionGroupCollection SectionGroups { get; }
    public bool get_IsDeclared();
    public bool get_IsDeclarationRequired();
    public void ForceDeclaration();
    public void ForceDeclaration(bool force);
    public string get_SectionGroupName();
    public string get_Name();
    public string get_Type();
    public void set_Type(string value);
    public ConfigurationSectionCollection get_Sections();
    public ConfigurationSectionGroupCollection get_SectionGroups();
    protected internal virtual bool ShouldSerializeSectionGroupInTargetVersion(FrameworkName targetFramework);
}
[DefaultMemberAttribute("Item")]
public class System.Configuration.ConfigurationSectionGroupCollection : NameObjectCollectionBase {
    public ConfigurationSectionGroup Item { get; }
    public ConfigurationSectionGroup Item { get; }
    public int Count { get; }
    public KeysCollection Keys { get; }
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public ConfigurationSectionGroup get_Item(string name);
    public ConfigurationSectionGroup get_Item(int index);
    public void Add(string name, ConfigurationSectionGroup sectionGroup);
    public void Clear();
    public virtual int get_Count();
    public void CopyTo(ConfigurationSectionGroup[] array, int index);
    public ConfigurationSectionGroup Get(int index);
    public ConfigurationSectionGroup Get(string name);
    [IteratorStateMachineAttribute("System.Configuration.ConfigurationSectionGroupCollection/<GetEnumerator>d__17")]
public virtual IEnumerator GetEnumerator();
    public string GetKey(int index);
    public virtual KeysCollection get_Keys();
    public void Remove(string name);
    public void RemoveAt(int index);
}
public enum System.Configuration.ConfigurationUserLevel : Enum {
    public int value__;
    public static ConfigurationUserLevel None;
    public static ConfigurationUserLevel PerUserRoaming;
    public static ConfigurationUserLevel PerUserRoamingAndLocal;
}
[AttributeUsageAttribute("128")]
public class System.Configuration.ConfigurationValidatorAttribute : Attribute {
    public ConfigurationValidatorBase ValidatorInstance { get; }
    public Type ValidatorType { get; }
    public ConfigurationValidatorAttribute(Type validator);
    public virtual ConfigurationValidatorBase get_ValidatorInstance();
    public Type get_ValidatorType();
}
public abstract class System.Configuration.ConfigurationValidatorBase : object {
    public virtual bool CanValidate(Type type);
    public abstract virtual void Validate(object value);
}
public class System.Configuration.ConnectionStringSettings : ConfigurationElement {
    protected internal ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("connectionString")]
public string ConnectionString { get; public set; }
    [ConfigurationPropertyAttribute("providerName")]
public string ProviderName { get; public set; }
    private static ConnectionStringSettings();
    public ConnectionStringSettings(string name, string connectionString);
    public ConnectionStringSettings(string name, string connectionString, string providerName);
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public string get_Name();
    public void set_Name(string value);
    public string get_ConnectionString();
    public void set_ConnectionString(string value);
    public virtual string ToString();
    public string get_ProviderName();
    public void set_ProviderName(string value);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Configuration.ConnectionStringSettings")]
public class System.Configuration.ConnectionStringSettingsCollection : ConfigurationElementCollection {
    protected internal ConfigurationPropertyCollection Properties { get; }
    public ConnectionStringSettings Item { get; public set; }
    public ConnectionStringSettings Item { get; }
    private static ConnectionStringSettingsCollection();
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public ConnectionStringSettings get_Item(int index);
    public void set_Item(int index, ConnectionStringSettings value);
    public ConnectionStringSettings get_Item(string name);
    public int IndexOf(ConnectionStringSettings settings);
    protected virtual void BaseAdd(int index, ConfigurationElement element);
    public void Add(ConnectionStringSettings settings);
    public void Remove(ConnectionStringSettings settings);
    public void RemoveAt(int index);
    public void Remove(string name);
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public void Clear();
}
public class System.Configuration.ConnectionStringsSection : ConfigurationSection {
    protected internal ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("")]
public ConnectionStringSettingsCollection ConnectionStrings { get; }
    private static ConnectionStringsSection();
    protected internal virtual object GetRuntimeObject();
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public ConnectionStringSettingsCollection get_ConnectionStrings();
}
public class System.Configuration.ContextInformation : object {
    public object HostingContext { get; }
    public bool IsMachineLevel { get; }
    public object get_HostingContext();
    public bool get_IsMachineLevel();
    public object GetSection(string sectionName);
}
public class System.Configuration.DefaultSection : ConfigurationSection {
    protected internal ConfigurationPropertyCollection Properties { get; }
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    protected internal virtual bool IsModified();
    protected internal virtual void ResetModified();
    protected internal virtual void Reset(ConfigurationElement parentSection);
    protected internal virtual void DeserializeSection(XmlReader xmlReader);
    protected internal virtual string SerializeSection(ConfigurationElement parentSection, string name, ConfigurationSaveMode saveMode);
}
public class System.Configuration.DefaultValidator : ConfigurationValidatorBase {
    public virtual bool CanValidate(Type type);
    public virtual void Validate(object value);
}
public class System.Configuration.DpapiProtectedConfigurationProvider : ProtectedConfigurationProvider {
    public bool UseMachineProtection { get; }
    public virtual XmlNode Decrypt(XmlNode encryptedNode);
    public virtual XmlNode Encrypt(XmlNode node);
    public bool get_UseMachineProtection();
    public virtual void Initialize(string name, NameValueCollection configurationValues);
}
public class System.Configuration.ElementInformation : object {
    public PropertyInformationCollection Properties { get; }
    public bool IsPresent { get; }
    public bool IsLocked { get; }
    public bool IsCollection { get; }
    public string Source { get; }
    public int LineNumber { get; }
    public Type Type { get; }
    public ConfigurationValidatorBase Validator { get; }
    public ICollection Errors { get; }
    public PropertyInformationCollection get_Properties();
    public bool get_IsPresent();
    public bool get_IsLocked();
    public bool get_IsCollection();
    public string get_Source();
    public int get_LineNumber();
    public Type get_Type();
    public ConfigurationValidatorBase get_Validator();
    public ICollection get_Errors();
}
public class System.Configuration.ExeConfigurationFileMap : ConfigurationFileMap {
    public string ExeConfigFilename { get; public set; }
    public string RoamingUserConfigFilename { get; public set; }
    public string LocalUserConfigFilename { get; public set; }
    public ExeConfigurationFileMap(string machineConfigFileName);
    public virtual object Clone();
    public string get_ExeConfigFilename();
    public void set_ExeConfigFilename(string value);
    public string get_RoamingUserConfigFilename();
    public void set_RoamingUserConfigFilename(string value);
    public string get_LocalUserConfigFilename();
    public void set_LocalUserConfigFilename(string value);
}
public class System.Configuration.ExeContext : object {
    public ConfigurationUserLevel UserLevel { get; }
    public string ExePath { get; }
    public ConfigurationUserLevel get_UserLevel();
    public string get_ExePath();
}
public class System.Configuration.GenericEnumConverter : ConfigurationConverterBase {
    public GenericEnumConverter(Type typeEnum);
    public virtual object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type);
    public virtual object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data);
}
public class System.Configuration.IgnoreSection : ConfigurationSection {
    protected internal ConfigurationPropertyCollection Properties { get; }
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    protected internal virtual bool IsModified();
    protected internal virtual void ResetModified();
    protected internal virtual void Reset(ConfigurationElement parentSection);
    protected internal virtual void DeserializeSection(XmlReader xmlReader);
    protected internal virtual string SerializeSection(ConfigurationElement parentSection, string name, ConfigurationSaveMode saveMode);
}
public class System.Configuration.InfiniteIntConverter : ConfigurationConverterBase {
    public virtual object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type);
    public virtual object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data);
}
public class System.Configuration.InfiniteTimeSpanConverter : ConfigurationConverterBase {
    private static InfiniteTimeSpanConverter();
    public virtual object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type);
    public virtual object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data);
}
public class System.Configuration.IntegerValidator : ConfigurationValidatorBase {
    public IntegerValidator(int minValue, int maxValue);
    public IntegerValidator(int minValue, int maxValue, bool rangeIsExclusive);
    public IntegerValidator(int minValue, int maxValue, bool rangeIsExclusive, int resolution);
    public virtual bool CanValidate(Type type);
    public virtual void Validate(object value);
}
[AttributeUsageAttribute("128")]
public class System.Configuration.IntegerValidatorAttribute : ConfigurationValidatorAttribute {
    public ConfigurationValidatorBase ValidatorInstance { get; }
    public int MinValue { get; public set; }
    public int MaxValue { get; public set; }
    public bool ExcludeRange { get; public set; }
    public virtual ConfigurationValidatorBase get_ValidatorInstance();
    public int get_MinValue();
    public void set_MinValue(int value);
    public int get_MaxValue();
    public void set_MaxValue(int value);
    public bool get_ExcludeRange();
    public void set_ExcludeRange(bool value);
}
public class System.Configuration.Internal.DelegatingConfigHost : object {
    protected IInternalConfigHost Host { get; protected set; }
    public bool SupportsChangeNotifications { get; }
    public bool SupportsRefresh { get; }
    public bool SupportsPath { get; }
    public bool SupportsLocation { get; }
    public bool IsRemote { get; }
    protected IInternalConfigHost get_Host();
    protected void set_Host(IInternalConfigHost value);
    public virtual void Init(IInternalConfigRoot configRoot, Object[] hostInitParams);
    public virtual void InitForConfiguration(String& locationSubPath, String& configPath, String& locationConfigPath, IInternalConfigRoot configRoot, Object[] hostInitConfigurationParams);
    public virtual bool IsConfigRecordRequired(string configPath);
    public virtual bool IsInitDelayed(IInternalConfigRecord configRecord);
    public virtual void RequireCompleteInit(IInternalConfigRecord configRecord);
    public virtual bool IsSecondaryRoot(string configPath);
    public virtual string GetStreamName(string configPath);
    public virtual string GetStreamNameForConfigSource(string streamName, string configSource);
    public virtual object GetStreamVersion(string streamName);
    public virtual Stream OpenStreamForRead(string streamName);
    public virtual Stream OpenStreamForRead(string streamName, bool assertPermissions);
    public virtual Stream OpenStreamForWrite(string streamName, string templateStreamName, Object& writeContext);
    public virtual Stream OpenStreamForWrite(string streamName, string templateStreamName, Object& writeContext, bool assertPermissions);
    public virtual void WriteCompleted(string streamName, bool success, object writeContext);
    public virtual void WriteCompleted(string streamName, bool success, object writeContext, bool assertPermissions);
    public virtual void DeleteStream(string streamName);
    public virtual bool IsFile(string streamName);
    public virtual bool get_SupportsChangeNotifications();
    public virtual object StartMonitoringStreamForChanges(string streamName, StreamChangeCallback callback);
    public virtual void StopMonitoringStreamForChanges(string streamName, StreamChangeCallback callback);
    public virtual bool get_SupportsRefresh();
    public virtual bool get_SupportsPath();
    public virtual bool get_SupportsLocation();
    public virtual bool IsAboveApplication(string configPath);
    public virtual bool IsDefinitionAllowed(string configPath, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition);
    public virtual void VerifyDefinitionAllowed(string configPath, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition, IConfigErrorInfo errorInfo);
    public virtual string GetConfigPathFromLocationSubPath(string configPath, string locationSubPath);
    public virtual bool IsLocationApplicable(string configPath);
    public virtual bool IsTrustedConfigPath(string configPath);
    public virtual bool IsFullTrustSectionWithoutAptcaAllowed(IInternalConfigRecord configRecord);
    public virtual void GetRestrictedPermissions(IInternalConfigRecord configRecord, PermissionSet& permissionSet, Boolean& isHostReady);
    public virtual IDisposable Impersonate();
    public virtual bool PrefetchAll(string configPath, string streamName);
    public virtual bool PrefetchSection(string sectionGroupName, string sectionName);
    public virtual object CreateDeprecatedConfigContext(string configPath);
    public virtual object CreateConfigurationContext(string configPath, string locationSubPath);
    public virtual string DecryptSection(string encryptedXml, ProtectedConfigurationProvider protectionProvider, ProtectedConfigurationSection protectedConfigSection);
    public virtual string EncryptSection(string clearTextXml, ProtectedConfigurationProvider protectionProvider, ProtectedConfigurationSection protectedConfigSection);
    public virtual Type GetConfigType(string typeName, bool throwOnError);
    public virtual string GetConfigTypeName(Type t);
    public virtual bool get_IsRemote();
}
public interface System.Configuration.Internal.IConfigErrorInfo {
    public string Filename { get; }
    public int LineNumber { get; }
    public abstract virtual string get_Filename();
    public abstract virtual int get_LineNumber();
}
public interface System.Configuration.Internal.IConfigSystem {
    public IInternalConfigHost Host { get; }
    public IInternalConfigRoot Root { get; }
    public abstract virtual void Init(Type typeConfigHost, Object[] hostInitParams);
    public abstract virtual IInternalConfigHost get_Host();
    public abstract virtual IInternalConfigRoot get_Root();
}
[ComVisibleAttribute("False")]
public interface System.Configuration.Internal.IConfigurationManagerHelper {
    public abstract virtual void EnsureNetConfigLoaded();
}
[ComVisibleAttribute("False")]
public interface System.Configuration.Internal.IConfigurationManagerInternal {
    public bool SupportsUserConfig { get; }
    public bool SetConfigurationSystemInProgress { get; }
    public string MachineConfigPath { get; }
    public string ApplicationConfigUri { get; }
    public string ExeProductName { get; }
    public string ExeProductVersion { get; }
    public string ExeRoamingConfigDirectory { get; }
    public string ExeRoamingConfigPath { get; }
    public string ExeLocalConfigDirectory { get; }
    public string ExeLocalConfigPath { get; }
    public string UserConfigFilename { get; }
    public abstract virtual bool get_SupportsUserConfig();
    public abstract virtual bool get_SetConfigurationSystemInProgress();
    public abstract virtual string get_MachineConfigPath();
    public abstract virtual string get_ApplicationConfigUri();
    public abstract virtual string get_ExeProductName();
    public abstract virtual string get_ExeProductVersion();
    public abstract virtual string get_ExeRoamingConfigDirectory();
    public abstract virtual string get_ExeRoamingConfigPath();
    public abstract virtual string get_ExeLocalConfigDirectory();
    public abstract virtual string get_ExeLocalConfigPath();
    public abstract virtual string get_UserConfigFilename();
}
[ComVisibleAttribute("False")]
public interface System.Configuration.Internal.IInternalConfigClientHost {
    public abstract virtual bool IsExeConfig(string configPath);
    public abstract virtual bool IsRoamingUserConfig(string configPath);
    public abstract virtual bool IsLocalUserConfig(string configPath);
    public abstract virtual string GetExeConfigPath();
    public abstract virtual string GetRoamingUserConfigPath();
    public abstract virtual string GetLocalUserConfigPath();
}
[ComVisibleAttribute("False")]
public interface System.Configuration.Internal.IInternalConfigConfigurationFactory {
    public abstract virtual Configuration Create(Type typeConfigHost, Object[] hostInitConfigurationParams);
    public abstract virtual string NormalizeLocationSubPath(string subPath, IConfigErrorInfo errorInfo);
}
[ComVisibleAttribute("False")]
public interface System.Configuration.Internal.IInternalConfigHost {
    public bool SupportsChangeNotifications { get; }
    public bool SupportsRefresh { get; }
    public bool SupportsPath { get; }
    public bool SupportsLocation { get; }
    public bool IsRemote { get; }
    public abstract virtual void Init(IInternalConfigRoot configRoot, Object[] hostInitParams);
    public abstract virtual void InitForConfiguration(String& locationSubPath, String& configPath, String& locationConfigPath, IInternalConfigRoot configRoot, Object[] hostInitConfigurationParams);
    public abstract virtual bool IsConfigRecordRequired(string configPath);
    public abstract virtual bool IsInitDelayed(IInternalConfigRecord configRecord);
    public abstract virtual void RequireCompleteInit(IInternalConfigRecord configRecord);
    public abstract virtual bool IsSecondaryRoot(string configPath);
    public abstract virtual string GetStreamName(string configPath);
    public abstract virtual string GetStreamNameForConfigSource(string streamName, string configSource);
    public abstract virtual object GetStreamVersion(string streamName);
    public abstract virtual Stream OpenStreamForRead(string streamName);
    public abstract virtual Stream OpenStreamForRead(string streamName, bool assertPermissions);
    public abstract virtual Stream OpenStreamForWrite(string streamName, string templateStreamName, Object& writeContext);
    public abstract virtual Stream OpenStreamForWrite(string streamName, string templateStreamName, Object& writeContext, bool assertPermissions);
    public abstract virtual void WriteCompleted(string streamName, bool success, object writeContext);
    public abstract virtual void WriteCompleted(string streamName, bool success, object writeContext, bool assertPermissions);
    public abstract virtual void DeleteStream(string streamName);
    public abstract virtual bool IsFile(string streamName);
    public abstract virtual bool get_SupportsChangeNotifications();
    public abstract virtual object StartMonitoringStreamForChanges(string streamName, StreamChangeCallback callback);
    public abstract virtual void StopMonitoringStreamForChanges(string streamName, StreamChangeCallback callback);
    public abstract virtual bool get_SupportsRefresh();
    public abstract virtual bool get_SupportsPath();
    public abstract virtual bool get_SupportsLocation();
    public abstract virtual bool IsAboveApplication(string configPath);
    public abstract virtual string GetConfigPathFromLocationSubPath(string configPath, string locationSubPath);
    public abstract virtual bool IsLocationApplicable(string configPath);
    public abstract virtual bool IsDefinitionAllowed(string configPath, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition);
    public abstract virtual void VerifyDefinitionAllowed(string configPath, ConfigurationAllowDefinition allowDefinition, ConfigurationAllowExeDefinition allowExeDefinition, IConfigErrorInfo errorInfo);
    public abstract virtual bool IsTrustedConfigPath(string configPath);
    public abstract virtual bool IsFullTrustSectionWithoutAptcaAllowed(IInternalConfigRecord configRecord);
    public abstract virtual void GetRestrictedPermissions(IInternalConfigRecord configRecord, PermissionSet& permissionSet, Boolean& isHostReady);
    public abstract virtual IDisposable Impersonate();
    public abstract virtual bool PrefetchAll(string configPath, string streamName);
    public abstract virtual bool PrefetchSection(string sectionGroupName, string sectionName);
    public abstract virtual object CreateDeprecatedConfigContext(string configPath);
    public abstract virtual object CreateConfigurationContext(string configPath, string locationSubPath);
    public abstract virtual string DecryptSection(string encryptedXml, ProtectedConfigurationProvider protectionProvider, ProtectedConfigurationSection protectedConfigSection);
    public abstract virtual string EncryptSection(string clearTextXml, ProtectedConfigurationProvider protectionProvider, ProtectedConfigurationSection protectedConfigSection);
    public abstract virtual Type GetConfigType(string typeName, bool throwOnError);
    public abstract virtual string GetConfigTypeName(Type t);
    public abstract virtual bool get_IsRemote();
}
[ComVisibleAttribute("False")]
public interface System.Configuration.Internal.IInternalConfigRecord {
    public string ConfigPath { get; }
    public string StreamName { get; }
    public bool HasInitErrors { get; }
    public abstract virtual string get_ConfigPath();
    public abstract virtual string get_StreamName();
    public abstract virtual bool get_HasInitErrors();
    public abstract virtual void ThrowIfInitErrors();
    public abstract virtual object GetSection(string configKey);
    public abstract virtual object GetLkgSection(string configKey);
    public abstract virtual void RefreshSection(string configKey);
    public abstract virtual void Remove();
}
[ComVisibleAttribute("False")]
public interface System.Configuration.Internal.IInternalConfigRoot {
    public bool IsDesignTime { get; }
    public abstract virtual void Init(IInternalConfigHost host, bool isDesignTime);
    public abstract virtual bool get_IsDesignTime();
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConfigChanged(InternalConfigEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConfigChanged(InternalConfigEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ConfigRemoved(InternalConfigEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ConfigRemoved(InternalConfigEventHandler value);
    public abstract virtual object GetSection(string section, string configPath);
    public abstract virtual string GetUniqueConfigPath(string configPath);
    public abstract virtual IInternalConfigRecord GetUniqueConfigRecord(string configPath);
    public abstract virtual IInternalConfigRecord GetConfigRecord(string configPath);
    public abstract virtual void RemoveConfig(string configPath);
}
[ComVisibleAttribute("False")]
public interface System.Configuration.Internal.IInternalConfigSettingsFactory {
    public abstract virtual void SetConfigurationSystem(IInternalConfigSystem internalConfigSystem, bool initComplete);
    public abstract virtual void CompleteInit();
}
[ComVisibleAttribute("False")]
public interface System.Configuration.Internal.IInternalConfigSystem {
    public bool SupportsUserConfig { get; }
    public abstract virtual object GetSection(string configKey);
    public abstract virtual void RefreshConfig(string sectionName);
    public abstract virtual bool get_SupportsUserConfig();
}
public class System.Configuration.Internal.InternalConfigEventArgs : EventArgs {
    public string ConfigPath { get; public set; }
    public InternalConfigEventArgs(string configPath);
    public string get_ConfigPath();
    public void set_ConfigPath(string value);
}
public class System.Configuration.Internal.InternalConfigEventHandler : MulticastDelegate {
    public InternalConfigEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, InternalConfigEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, InternalConfigEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Configuration.Internal.StreamChangeCallback : MulticastDelegate {
    public StreamChangeCallback(object object, IntPtr method);
    public virtual void Invoke(string streamName);
    public virtual IAsyncResult BeginInvoke(string streamName, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Configuration.KeyValueConfigurationElement")]
public class System.Configuration.KeyValueConfigurationCollection : ConfigurationElementCollection {
    protected internal ConfigurationPropertyCollection Properties { get; }
    protected bool ThrowOnDuplicate { get; }
    public KeyValueConfigurationElement Item { get; }
    public String[] AllKeys { get; }
    private static KeyValueConfigurationCollection();
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    protected virtual bool get_ThrowOnDuplicate();
    public KeyValueConfigurationElement get_Item(string key);
    public String[] get_AllKeys();
    public void Add(KeyValueConfigurationElement keyValue);
    public void Add(string key, string value);
    public void Remove(string key);
    public void Clear();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
}
public class System.Configuration.KeyValueConfigurationElement : ConfigurationElement {
    protected internal ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("key")]
public string Key { get; }
    [ConfigurationPropertyAttribute("value")]
public string Value { get; public set; }
    private static KeyValueConfigurationElement();
    public KeyValueConfigurationElement(string key, string value);
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    protected internal virtual void Init();
    public string get_Key();
    public string get_Value();
    public void set_Value(string value);
}
public class System.Configuration.LongValidator : ConfigurationValidatorBase {
    public LongValidator(long minValue, long maxValue);
    public LongValidator(long minValue, long maxValue, bool rangeIsExclusive);
    public LongValidator(long minValue, long maxValue, bool rangeIsExclusive, long resolution);
    public virtual bool CanValidate(Type type);
    public virtual void Validate(object value);
}
[AttributeUsageAttribute("128")]
public class System.Configuration.LongValidatorAttribute : ConfigurationValidatorAttribute {
    public ConfigurationValidatorBase ValidatorInstance { get; }
    public long MinValue { get; public set; }
    public long MaxValue { get; public set; }
    public bool ExcludeRange { get; public set; }
    public virtual ConfigurationValidatorBase get_ValidatorInstance();
    public long get_MinValue();
    public void set_MinValue(long value);
    public long get_MaxValue();
    public void set_MaxValue(long value);
    public bool get_ExcludeRange();
    public void set_ExcludeRange(bool value);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Configuration.NameValueConfigurationElement")]
public class System.Configuration.NameValueConfigurationCollection : ConfigurationElementCollection {
    protected internal ConfigurationPropertyCollection Properties { get; }
    public NameValueConfigurationElement Item { get; public set; }
    public String[] AllKeys { get; }
    private static NameValueConfigurationCollection();
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public NameValueConfigurationElement get_Item(string name);
    public void set_Item(string name, NameValueConfigurationElement value);
    public String[] get_AllKeys();
    public void Add(NameValueConfigurationElement nameValue);
    public void Remove(NameValueConfigurationElement nameValue);
    public void Remove(string name);
    public void Clear();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
}
public class System.Configuration.NameValueConfigurationElement : ConfigurationElement {
    protected internal ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("name")]
public string Name { get; }
    [ConfigurationPropertyAttribute("value")]
public string Value { get; public set; }
    private static NameValueConfigurationElement();
    public NameValueConfigurationElement(string name, string value);
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public string get_Name();
    public string get_Value();
    public void set_Value(string value);
}
public enum System.Configuration.OverrideMode : Enum {
    public int value__;
    public static OverrideMode Inherit;
    public static OverrideMode Allow;
    public static OverrideMode Deny;
}
public class System.Configuration.PositiveTimeSpanValidator : ConfigurationValidatorBase {
    public virtual bool CanValidate(Type type);
    public virtual void Validate(object value);
}
[AttributeUsageAttribute("128")]
public class System.Configuration.PositiveTimeSpanValidatorAttribute : ConfigurationValidatorAttribute {
    public ConfigurationValidatorBase ValidatorInstance { get; }
    public virtual ConfigurationValidatorBase get_ValidatorInstance();
}
public class System.Configuration.PropertyInformation : object {
    public string Name { get; }
    public object Value { get; public set; }
    public object DefaultValue { get; }
    public PropertyValueOrigin ValueOrigin { get; }
    public bool IsModified { get; }
    public bool IsKey { get; }
    public bool IsRequired { get; }
    public bool IsLocked { get; }
    public string Source { get; }
    public int LineNumber { get; }
    public Type Type { get; }
    public ConfigurationValidatorBase Validator { get; }
    public TypeConverter Converter { get; }
    public string Description { get; }
    public string get_Name();
    public object get_Value();
    public void set_Value(object value);
    public object get_DefaultValue();
    public PropertyValueOrigin get_ValueOrigin();
    public bool get_IsModified();
    public bool get_IsKey();
    public bool get_IsRequired();
    public bool get_IsLocked();
    public string get_Source();
    public int get_LineNumber();
    public Type get_Type();
    public ConfigurationValidatorBase get_Validator();
    public TypeConverter get_Converter();
    public string get_Description();
}
[DefaultMemberAttribute("Item")]
public class System.Configuration.PropertyInformationCollection : NameObjectCollectionBase {
    public PropertyInformation Item { get; }
    public virtual void GetObjectData(SerializationInfo info, StreamingContext context);
    public PropertyInformation get_Item(string propertyName);
    public void CopyTo(PropertyInformation[] array, int index);
    [IteratorStateMachineAttribute("System.Configuration.PropertyInformationCollection/<GetEnumerator>d__8")]
public virtual IEnumerator GetEnumerator();
}
public enum System.Configuration.PropertyValueOrigin : Enum {
    public int value__;
    public static PropertyValueOrigin Default;
    public static PropertyValueOrigin Inherited;
    public static PropertyValueOrigin SetHere;
}
public static class System.Configuration.ProtectedConfiguration : object {
    public static string RsaProviderName;
    public static string DataProtectionProviderName;
    public static string ProtectedDataSectionName;
    public static ProtectedConfigurationProviderCollection Providers { get; }
    public static string DefaultProvider { get; }
    public static ProtectedConfigurationProviderCollection get_Providers();
    public static string get_DefaultProvider();
}
public abstract class System.Configuration.ProtectedConfigurationProvider : ProviderBase {
    public abstract virtual XmlNode Encrypt(XmlNode node);
    public abstract virtual XmlNode Decrypt(XmlNode encryptedNode);
}
[DefaultMemberAttribute("Item")]
public class System.Configuration.ProtectedConfigurationProviderCollection : ProviderCollection {
    public ProtectedConfigurationProvider Item { get; }
    public virtual void Add(ProviderBase provider);
    public ProtectedConfigurationProvider get_Item(string name);
}
public class System.Configuration.ProtectedConfigurationSection : ConfigurationSection {
    protected internal ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("providers")]
public ProviderSettingsCollection Providers { get; }
    [ConfigurationPropertyAttribute("defaultProvider")]
public string DefaultProvider { get; public set; }
    private static ProtectedConfigurationSection();
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public ProviderSettingsCollection get_Providers();
    public string get_DefaultProvider();
    public void set_DefaultProvider(string value);
}
public class System.Configuration.ProtectedProviderSettings : ConfigurationElement {
    protected internal ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("")]
public ProviderSettingsCollection Providers { get; }
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public ProviderSettingsCollection get_Providers();
}
public abstract class System.Configuration.Provider.ProviderBase : object {
    public string Name { get; }
    public string Description { get; }
    public virtual string get_Name();
    public virtual string get_Description();
    public virtual void Initialize(string name, NameValueCollection config);
}
[DefaultMemberAttribute("Item")]
public class System.Configuration.Provider.ProviderCollection : object {
    public ProviderBase Item { get; }
    public int Count { get; }
    public bool IsSynchronized { get; }
    public object SyncRoot { get; }
    public virtual void Add(ProviderBase provider);
    public void Remove(string name);
    public ProviderBase get_Item(string name);
    public sealed virtual IEnumerator GetEnumerator();
    public void SetReadOnly();
    public void Clear();
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsSynchronized();
    public sealed virtual object get_SyncRoot();
    public void CopyTo(ProviderBase[] array, int index);
    private sealed virtual override void System.Collections.ICollection.CopyTo(Array array, int index);
}
public class System.Configuration.Provider.ProviderException : Exception {
    public ProviderException(string message);
    public ProviderException(string message, Exception innerException);
    protected ProviderException(SerializationInfo info, StreamingContext context);
}
public class System.Configuration.ProviderSettings : ConfigurationElement {
    protected internal ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("name")]
public string Name { get; public set; }
    [ConfigurationPropertyAttribute("type")]
public string Type { get; public set; }
    public NameValueCollection Parameters { get; }
    public ProviderSettings(string name, string type);
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    protected internal virtual void Unmerge(ConfigurationElement sourceElement, ConfigurationElement parentElement, ConfigurationSaveMode saveMode);
    protected internal virtual void Reset(ConfigurationElement parentElement);
    protected internal virtual bool IsModified();
    public string get_Name();
    public void set_Name(string value);
    public string get_Type();
    public void set_Type(string value);
    public NameValueCollection get_Parameters();
    protected virtual bool OnDeserializeUnrecognizedAttribute(string name, string value);
}
[DefaultMemberAttribute("Item")]
[ConfigurationCollectionAttribute("System.Configuration.ProviderSettings")]
public class System.Configuration.ProviderSettingsCollection : ConfigurationElementCollection {
    protected internal ConfigurationPropertyCollection Properties { get; }
    public ProviderSettings Item { get; }
    public ProviderSettings Item { get; public set; }
    private static ProviderSettingsCollection();
    protected internal virtual ConfigurationPropertyCollection get_Properties();
    public void Add(ProviderSettings provider);
    public void Remove(string name);
    public void Clear();
    protected virtual ConfigurationElement CreateNewElement();
    protected virtual object GetElementKey(ConfigurationElement element);
    public ProviderSettings get_Item(string key);
    public ProviderSettings get_Item(int index);
    public void set_Item(int index, ProviderSettings value);
}
public class System.Configuration.RegexStringValidator : ConfigurationValidatorBase {
    public RegexStringValidator(string regex);
    public virtual bool CanValidate(Type type);
    public virtual void Validate(object value);
}
[AttributeUsageAttribute("128")]
public class System.Configuration.RegexStringValidatorAttribute : ConfigurationValidatorAttribute {
    public ConfigurationValidatorBase ValidatorInstance { get; }
    public string Regex { get; }
    public RegexStringValidatorAttribute(string regex);
    public virtual ConfigurationValidatorBase get_ValidatorInstance();
    public string get_Regex();
}
public class System.Configuration.RsaProtectedConfigurationProvider : ProtectedConfigurationProvider {
    public string KeyContainerName { get; }
    public string CspProviderName { get; }
    public bool UseMachineContainer { get; }
    public bool UseOAEP { get; }
    public bool UseFIPS { get; }
    public RSAParameters RsaPublicKey { get; }
    public virtual XmlNode Decrypt(XmlNode encryptedNode);
    public virtual XmlNode Encrypt(XmlNode node);
    public void AddKey(int keySize, bool exportable);
    public void DeleteKey();
    public void ImportKey(string xmlFileName, bool exportable);
    public void ExportKey(string xmlFileName, bool includePrivateParameters);
    public string get_KeyContainerName();
    public string get_CspProviderName();
    public bool get_UseMachineContainer();
    public bool get_UseOAEP();
    public bool get_UseFIPS();
    public virtual void Initialize(string name, NameValueCollection configurationValues);
    public RSAParameters get_RsaPublicKey();
}
public class System.Configuration.SectionInformation : object {
    public string SectionName { get; }
    public string Name { get; }
    public ConfigurationAllowDefinition AllowDefinition { get; public set; }
    public ConfigurationAllowExeDefinition AllowExeDefinition { get; public set; }
    public OverrideMode OverrideModeDefault { get; public set; }
    public bool AllowLocation { get; public set; }
    public bool AllowOverride { get; public set; }
    public OverrideMode OverrideMode { get; public set; }
    public OverrideMode OverrideModeEffective { get; }
    public string ConfigSource { get; public set; }
    public bool InheritInChildApplications { get; public set; }
    public bool IsDeclared { get; }
    public bool IsDeclarationRequired { get; }
    public bool IsLocked { get; }
    public bool IsProtected { get; }
    public ProtectedConfigurationProvider ProtectionProvider { get; }
    public bool RestartOnExternalChanges { get; public set; }
    public bool RequirePermission { get; public set; }
    public string Type { get; public set; }
    public bool ForceSave { get; public set; }
    public string get_SectionName();
    public string get_Name();
    public ConfigurationAllowDefinition get_AllowDefinition();
    public void set_AllowDefinition(ConfigurationAllowDefinition value);
    public ConfigurationAllowExeDefinition get_AllowExeDefinition();
    public void set_AllowExeDefinition(ConfigurationAllowExeDefinition value);
    public OverrideMode get_OverrideModeDefault();
    public void set_OverrideModeDefault(OverrideMode value);
    public bool get_AllowLocation();
    public void set_AllowLocation(bool value);
    public bool get_AllowOverride();
    public void set_AllowOverride(bool value);
    public OverrideMode get_OverrideMode();
    public void set_OverrideMode(OverrideMode value);
    public OverrideMode get_OverrideModeEffective();
    public string get_ConfigSource();
    public void set_ConfigSource(string value);
    public bool get_InheritInChildApplications();
    public void set_InheritInChildApplications(bool value);
    public bool get_IsDeclared();
    public bool get_IsDeclarationRequired();
    public void ForceDeclaration();
    public void ForceDeclaration(bool force);
    public bool get_IsLocked();
    public bool get_IsProtected();
    public ProtectedConfigurationProvider get_ProtectionProvider();
    public void ProtectSection(string protectionProvider);
    public void UnprotectSection();
    public bool get_RestartOnExternalChanges();
    public void set_RestartOnExternalChanges(bool value);
    public bool get_RequirePermission();
    public void set_RequirePermission(bool value);
    public string get_Type();
    public void set_Type(string value);
    public ConfigurationSection GetParentSection();
    public string GetRawXml();
    public void SetRawXml(string rawXml);
    public bool get_ForceSave();
    public void set_ForceSave(bool value);
    public void RevertToParent();
}
public class System.Configuration.StringValidator : ConfigurationValidatorBase {
    public StringValidator(int minLength);
    public StringValidator(int minLength, int maxLength);
    public StringValidator(int minLength, int maxLength, string invalidCharacters);
    public virtual bool CanValidate(Type type);
    public virtual void Validate(object value);
}
[AttributeUsageAttribute("128")]
public class System.Configuration.StringValidatorAttribute : ConfigurationValidatorAttribute {
    public ConfigurationValidatorBase ValidatorInstance { get; }
    public int MinLength { get; public set; }
    public int MaxLength { get; public set; }
    public string InvalidCharacters { get; public set; }
    public virtual ConfigurationValidatorBase get_ValidatorInstance();
    public int get_MinLength();
    public void set_MinLength(int value);
    public int get_MaxLength();
    public void set_MaxLength(int value);
    public string get_InvalidCharacters();
    public void set_InvalidCharacters(string value);
}
public class System.Configuration.SubclassTypeValidator : ConfigurationValidatorBase {
    public SubclassTypeValidator(Type baseClass);
    public virtual bool CanValidate(Type type);
    public virtual void Validate(object value);
}
[AttributeUsageAttribute("128")]
public class System.Configuration.SubclassTypeValidatorAttribute : ConfigurationValidatorAttribute {
    public ConfigurationValidatorBase ValidatorInstance { get; }
    public Type BaseClass { get; }
    public SubclassTypeValidatorAttribute(Type baseClass);
    public virtual ConfigurationValidatorBase get_ValidatorInstance();
    public Type get_BaseClass();
}
public class System.Configuration.TimeSpanMinutesConverter : ConfigurationConverterBase {
    public virtual object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type);
    public virtual object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data);
}
public class System.Configuration.TimeSpanMinutesOrInfiniteConverter : TimeSpanMinutesConverter {
    public virtual object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type);
    public virtual object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data);
}
public class System.Configuration.TimeSpanSecondsConverter : ConfigurationConverterBase {
    public virtual object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type);
    public virtual object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data);
}
public class System.Configuration.TimeSpanSecondsOrInfiniteConverter : TimeSpanSecondsConverter {
    public virtual object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type);
    public virtual object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data);
}
public class System.Configuration.TimeSpanValidator : ConfigurationValidatorBase {
    public TimeSpanValidator(TimeSpan minValue, TimeSpan maxValue);
    public TimeSpanValidator(TimeSpan minValue, TimeSpan maxValue, bool rangeIsExclusive);
    public TimeSpanValidator(TimeSpan minValue, TimeSpan maxValue, bool rangeIsExclusive, long resolutionInSeconds);
    public virtual bool CanValidate(Type type);
    public virtual void Validate(object value);
}
[AttributeUsageAttribute("128")]
public class System.Configuration.TimeSpanValidatorAttribute : ConfigurationValidatorAttribute {
    public static string TimeSpanMinValue;
    public static string TimeSpanMaxValue;
    public ConfigurationValidatorBase ValidatorInstance { get; }
    public TimeSpan MinValue { get; }
    public TimeSpan MaxValue { get; }
    public string MinValueString { get; public set; }
    public string MaxValueString { get; public set; }
    public bool ExcludeRange { get; public set; }
    public virtual ConfigurationValidatorBase get_ValidatorInstance();
    public TimeSpan get_MinValue();
    public TimeSpan get_MaxValue();
    public string get_MinValueString();
    public void set_MinValueString(string value);
    public string get_MaxValueString();
    public void set_MaxValueString(string value);
    public bool get_ExcludeRange();
    public void set_ExcludeRange(bool value);
}
public class System.Configuration.TypeNameConverter : ConfigurationConverterBase {
    public virtual object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type);
    public virtual object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data);
}
public class System.Configuration.ValidatorCallback : MulticastDelegate {
    public ValidatorCallback(object object, IntPtr method);
    public virtual void Invoke(object value);
    public virtual IAsyncResult BeginInvoke(object value, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class System.Configuration.WhiteSpaceTrimStringConverter : ConfigurationConverterBase {
    public virtual object ConvertTo(ITypeDescriptorContext ctx, CultureInfo ci, object value, Type type);
    public virtual object ConvertFrom(ITypeDescriptorContext ctx, CultureInfo ci, object data);
}
