internal class System.ServiceModel.Channels.ByteStreamBufferedMessageData : object {
    public ArraySegment`1<byte> Buffer { get; }
    public ByteStreamBufferedMessageData(ArraySegment`1<byte> buffer);
    public ByteStreamBufferedMessageData(ArraySegment`1<byte> buffer, BufferManager bufferManager);
    public ArraySegment`1<byte> get_Buffer();
    public void Open();
    public void Close();
    public Stream ToStream();
}
internal static class System.ServiceModel.Channels.ByteStreamConfigurationStrings : object {
    internal static string ReaderQuotas;
    internal static string BindingElementType;
}
public static class System.ServiceModel.Channels.ByteStreamMessage : object {
    public static Message CreateMessage(Stream stream);
    public static Message CreateMessage(ArraySegment`1<byte> buffer);
    public static Message CreateMessage(ArraySegment`1<byte> buffer, BufferManager bufferManager);
    internal static Message CreateMessage(Stream stream, XmlDictionaryReaderQuotas quotas, bool moveBodyReaderToContent);
    internal static Message CreateMessage(HttpRequestMessage httpRequestMessage, XmlDictionaryReaderQuotas quotas);
    internal static Message CreateMessage(HttpResponseMessage httpResponseMessage, XmlDictionaryReaderQuotas quotas);
    internal static Message CreateMessage(ByteStreamBufferedMessageData bufferedMessageData, XmlDictionaryReaderQuotas quotas, bool moveBodyReaderToContent);
    internal static bool IsInternalByteStreamMessage(Message message);
}
internal class System.ServiceModel.Channels.ByteStreamMessageEncoder : MessageEncoder {
    public string ContentType { get; }
    public string MediaType { get; }
    public MessageVersion MessageVersion { get; }
    public ByteStreamMessageEncoder(XmlDictionaryReaderQuotas quotas);
    private sealed virtual override void System.ServiceModel.Channels.IWebMessageEncoderHelper.EnableBodyReaderMoveToContent();
    public virtual string get_ContentType();
    public virtual string get_MediaType();
    public virtual MessageVersion get_MessageVersion();
    public virtual bool IsContentTypeSupported(string contentType);
    public virtual Message ReadMessage(Stream stream, int maxSizeOfHeaders, string contentType);
    public virtual Message ReadMessage(ArraySegment`1<byte> buffer, BufferManager bufferManager, string contentType);
    public virtual void WriteMessage(Message message, Stream stream);
    public virtual IAsyncResult BeginWriteMessage(Message message, Stream stream, AsyncCallback callback, object state);
    public virtual void EndWriteMessage(IAsyncResult result);
    public virtual ArraySegment`1<byte> WriteMessage(Message message, int maxMessageSize, BufferManager bufferManager, int messageOffset);
    public virtual string ToString();
    public sealed virtual Stream GetResponseMessageStream(Message message);
    private sealed virtual override string System.Runtime.Diagnostics.ITraceSourceStringProvider.GetSourceString();
}
internal class System.ServiceModel.Channels.ByteStreamMessageEncoderFactory : MessageEncoderFactory {
    public MessageEncoder Encoder { get; }
    public MessageVersion MessageVersion { get; }
    public ByteStreamMessageEncoderFactory(XmlDictionaryReaderQuotas quotas);
    public virtual MessageEncoder get_Encoder();
    public virtual MessageVersion get_MessageVersion();
}
public class System.ServiceModel.Channels.ByteStreamMessageEncodingBindingElement : MessageEncodingBindingElement {
    public MessageVersion MessageVersion { get; public set; }
    public XmlDictionaryReaderQuotas ReaderQuotas { get; public set; }
    public ByteStreamMessageEncodingBindingElement(XmlDictionaryReaderQuotas quota);
    public virtual MessageVersion get_MessageVersion();
    public virtual void set_MessageVersion(MessageVersion value);
    public XmlDictionaryReaderQuotas get_ReaderQuotas();
    public void set_ReaderQuotas(XmlDictionaryReaderQuotas value);
    public virtual bool CanBuildChannelFactory(BindingContext context);
    public virtual IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context);
    public virtual bool CanBuildChannelListener(BindingContext context);
    public virtual IChannelListener`1<TChannel> BuildChannelListener(BindingContext context);
    public virtual MessageEncoderFactory CreateMessageEncoderFactory();
    public virtual BindingElement Clone();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeMessageVersion();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeReaderQuotas();
}
internal static class System.ServiceModel.Channels.ByteStreamMessageUtility : object {
    public static string StreamElementName;
    public static string XmlNamespace;
    public static string XmlNamespaceNamespace;
    internal static string EncoderName;
    internal static void EnsureByteBoundaries(Byte[] buffer, int index, int count, bool isRead);
    internal static XmlDictionaryReaderQuotas EnsureQuotas(XmlDictionaryReaderQuotas quotas);
}
internal class System.ServiceModel.Channels.ClientUdpOutputChannel : UdpOutputChannel {
    public IPEndPoint RemoteEndPoint { get; private set; }
    public ClientUdpOutputChannel(ChannelManagerBase factory, IPEndPoint remoteEndPoint, MessageEncoder encoder, BufferManager bufferManager, UdpSocket[] sendSockets, UdpRetransmissionSettings retransmissionSettings, EndpointAddress to, Uri via, bool isMulticast);
    [CompilerGeneratedAttribute]
public IPEndPoint get_RemoteEndPoint();
    [CompilerGeneratedAttribute]
private void set_RemoteEndPoint(IPEndPoint value);
    protected virtual UdpSocket[] GetSendSockets(Message message, IPEndPoint& remoteEndPoint, Exception& exceptionToBeThrown);
    protected virtual void AddHeadersTo(Message message);
}
internal class System.ServiceModel.Channels.DuplicateMessageDetector : object {
    public DuplicateMessageDetector(int maxListLength);
    public bool IsDuplicate(ArraySegment`1<byte> msgBytes, String& hashString);
    public void RemoveEntry(string msgHash);
    public sealed virtual void Dispose();
}
internal static class System.ServiceModel.Channels.FxTrace : object {
    public static bool ShouldTraceCritical { get; }
    public static bool TracingEnabled { get; }
    public static bool ShouldTraceError { get; }
    public static bool ShouldTraceInformation { get; }
    public static bool ShouldTraceVerbose { get; }
    public static bool ShouldTraceWarning { get; }
    public static bool ShouldTraceCriticalToTraceSource { get; }
    public static bool ShouldTraceErrorToTraceSource { get; }
    public static bool ShouldTraceInformationToTraceSource { get; }
    public static bool ShouldTraceVerboseToTraceSource { get; }
    public static bool ShouldTraceWarningToTraceSource { get; }
    public static ExceptionTrace Exception { get; }
    public static EtwDiagnosticTrace Trace { get; }
    public static EventLogger EventLog { get; }
    private static FxTrace();
    [SecuritySafeCriticalAttribute]
public static void UpdateEventDefinitions(EventDescriptor[] eventDescriptors, UInt16[] end2EndEvents);
    public static bool IsEventEnabled(int index);
    public static bool get_ShouldTraceCritical();
    public static bool get_TracingEnabled();
    public static bool get_ShouldTraceError();
    public static bool get_ShouldTraceInformation();
    public static bool get_ShouldTraceVerbose();
    public static bool get_ShouldTraceWarning();
    public static bool get_ShouldTraceCriticalToTraceSource();
    public static bool get_ShouldTraceErrorToTraceSource();
    public static bool get_ShouldTraceInformationToTraceSource();
    public static bool get_ShouldTraceVerboseToTraceSource();
    public static bool get_ShouldTraceWarningToTraceSource();
    public static ExceptionTrace get_Exception();
    public static EtwDiagnosticTrace get_Trace();
    public static EventLogger get_EventLog();
}
[ExtensionAttribute]
public static class System.ServiceModel.Channels.HttpRequestMessageExtensionMethods : object {
    [ExtensionAttribute]
public static Message ToMessage(HttpRequestMessage httpRequestMessage);
}
[ExtensionAttribute]
public static class System.ServiceModel.Channels.HttpResponseMessageExtensionMethods : object {
    [ExtensionAttribute]
public static Message ToMessage(HttpResponseMessage httpResponseMessage);
}
internal interface System.ServiceModel.Channels.IUdpReceiveHandler {
    public int MaxReceivedMessageSize { get; }
    public abstract virtual int get_MaxReceivedMessageSize();
    public abstract virtual void HandleAsyncException(Exception exception);
    public abstract virtual bool HandleDataReceived(ArraySegment`1<byte> data, EndPoint remoteEndpoint, int interfaceIndex, Action onMessageDequeuedCallback);
}
[ExtensionAttribute]
public static class System.ServiceModel.Channels.MessageExtensionMethods : object {
    private static MessageExtensionMethods();
    [ExtensionAttribute]
public static HttpRequestMessage ToHttpRequestMessage(Message message);
    [ExtensionAttribute]
public static HttpResponseMessage ToHttpResponseMessage(Message message);
    [ExtensionAttribute]
internal static void ConfigureAsHttpMessage(Message message, HttpRequestMessage httpRequestMessage);
    [ExtensionAttribute]
internal static void ConfigureAsHttpMessage(Message message, HttpResponseMessage httpResponseMessage);
}
public class System.ServiceModel.Channels.NetworkInterfaceMessageProperty : object {
    public static string Name { get; }
    public int InterfaceIndex { get; private set; }
    public NetworkInterfaceMessageProperty(int interfaceIndex);
    public static string get_Name();
    [CompilerGeneratedAttribute]
public int get_InterfaceIndex();
    [CompilerGeneratedAttribute]
private void set_InterfaceIndex(int value);
    public static bool TryGet(Message message, NetworkInterfaceMessageProperty& property);
    public static bool TryGet(MessageProperties properties, NetworkInterfaceMessageProperty& property);
    public void AddTo(Message message);
    public void AddTo(MessageProperties properties);
}
internal class System.ServiceModel.Channels.ServerUdpDuplexChannel : UdpDuplexChannel {
    protected bool IgnoreSerializationException { get; }
    public ServerUdpDuplexChannel(UdpDuplexChannelListener listener, UdpSocket[] sockets, EndpointAddress localAddress, Uri via, bool isMulticast);
    protected virtual bool get_IgnoreSerializationException();
    internal virtual void HandleReceiveException(Exception ex);
}
internal class System.ServiceModel.Channels.ServerUdpOutputChannel : UdpOutputChannel {
    public ServerUdpOutputChannel(ChannelManagerBase factory, MessageEncoder encoder, BufferManager bufferManager, UdpSocket[] sendSockets, UdpRetransmissionSettings retransmissionSettings, Uri via, bool isMulticast);
    protected UdpSocket GetSendSocket(IPAddress address, Uri destination, Exception& exceptionToBeThrown);
    protected UdpSocket GetSendSocket(int interfaceIndex, Exception& exceptionToBeThrown);
    protected virtual UdpSocket[] GetSendSockets(Message message, IPEndPoint& remoteEndPoint, Exception& exceptionToBeThrown);
}
internal class System.ServiceModel.Channels.SR : object {
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string ArgumentNotInSetOfValidValues { get; }
    internal static string ByteStreamWriteStartElementAlreadyCalled { get; }
    internal static string MessageBodyIsStream { get; }
    internal static string XmlReaderClosed { get; }
    internal static string XmlUnexpectedEndElement { get; }
    internal static string XmlWriterClosed { get; }
    internal static string AsynchronousExceptionOccurred { get; }
    internal static string ExplicitListenUriModeRequiresPort { get; }
    internal static string GetByteArrayFromStreamContentNotAllowed { get; }
    internal static string GetByteArrayLengthFailed { get; }
    internal static string IcmpDestinationUnreachable { get; }
    internal static string IPv4OrIPv6Required { get; }
    internal static string ObjectNotOpen { get; }
    internal static string ToOrViaRequired { get; }
    internal static string UdpReceiveException { get; }
    internal static string UdpSendException { get; }
    internal static string UniquePortNotAvailable { get; }
    internal static string ValueMustBePositive { get; }
    internal static string TimeoutOutOfRange0 { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_ArgumentNotInSetOfValidValues();
    internal static string get_ByteStreamWriteStartElementAlreadyCalled();
    internal static string get_MessageBodyIsStream();
    internal static string get_XmlReaderClosed();
    internal static string get_XmlUnexpectedEndElement();
    internal static string get_XmlWriterClosed();
    internal static string get_AsynchronousExceptionOccurred();
    internal static string get_ExplicitListenUriModeRequiresPort();
    internal static string get_GetByteArrayFromStreamContentNotAllowed();
    internal static string get_GetByteArrayLengthFailed();
    internal static string get_IcmpDestinationUnreachable();
    internal static string get_IPv4OrIPv6Required();
    internal static string get_ObjectNotOpen();
    internal static string get_ToOrViaRequired();
    internal static string get_UdpReceiveException();
    internal static string get_UdpSendException();
    internal static string get_UniquePortNotAvailable();
    internal static string get_ValueMustBePositive();
    internal static string get_TimeoutOutOfRange0();
    internal static string SizeExceedsRemainingBufferSpace(object param0);
    internal static string ArgumentOutOfMinRange(object param0);
    internal static string ByteStreamReaderNotInByteStream(object param0);
    internal static string MaxReceivedMessageSizeExceeded(object param0);
    internal static string MaxSentMessageSizeExceeded(object param0);
    internal static string ObjectDisposed(object param0);
    internal static string XmlStartElementNameExpected(object param0, object param1);
    internal static string XmlWriterMustBeInElement(object param0);
    internal static string ByteStreamMessageEncoderMessageVersionNotSupported(object param0);
    internal static string OffsetExceedsBufferSize(object param0);
    internal static string ArgumentOutOfMinMaxRange(object param0, object param1);
    internal static string ByteStreamMessageGetTypeNotSupported(object param0);
    internal static string ChannelTypeNotSupported(object param0);
    internal static string DefaultPortRequiredForListenUriModeUnique(object param0);
    internal static string DnsResolveFailed(object param0);
    internal static string IcmpTimeExpired(object param0);
    internal static string PortNumberInvalid(object param0, object param1);
    internal static string PortNumberRequiredOnVia(object param0);
    internal static string Property1LessThanOrEqualToProperty2(object param0, object param1, object param2, object param3);
    internal static string RecycledMessageIdDuringRetransmission(object param0);
    internal static string RelativeUriNotAllowed(object param0);
    internal static string RemoteAddressUnreachableDueToIPVersionMismatch(object param0);
    internal static string RetransmissionRequiresAddressingOnMessage(object param0);
    internal static string SendTimedOut(object param0, object param1);
    internal static string SocketAddressAccessDenied(object param0);
    internal static string SocketAddressInUse(object param0);
    internal static string TimeoutOnOperation(object param0);
    internal static string ToAddressIsNotValid(object param0, object param1);
    internal static string UdpAdapterSpecifiedNotConnected(object param0, object param1);
    internal static string UdpAdapterSpecifiedNotSuitableForMulticast(object param0);
    internal static string UdpFailedToFindMulticastAdapter(object param0);
    internal static string UdpInterfaceIndexMatchNotFound(object param0);
    internal static string UdpMaxMessageSendSizeExceeded(object param0);
    internal static string NetworkInterfaceMessagePropertyMissing(object param0);
    internal static string UdpSendFailedInterfaceIndexMatchNotFound(object param0);
    internal static string UnsupportedUriHostNameType(object param0, object param1);
    internal static string UriSchemeNotSupported(object param0);
    internal static string ValueMustBeNonNegative(object param0);
    internal static string ViaUriIsNotValid(object param0, object param1);
    internal static string TransportRequiresAddressingOnEncoderForRetransmission(object param0, object param1, object param2);
    internal static string SizeMessagePropertyMissing(object param0);
    internal static string UriHostNameTypeNotSupportedByOS(object param0, object param1);
    internal static string ReceiveRequestTimedOut(object param0, object param1);
    internal static string ReceiveRequestTimedOutNoLocalAddress(object param0);
    internal static string ArgumentPropertyShouldNotBeNullError(object param0);
    internal static string MissingHttpMessageProperty(object param0, object param1);
    internal static string TransportRequiresAddressingOnEncoderForDuplicateDetection(object param0, object param1, object param2);
}
internal class System.ServiceModel.Channels.SynchronizedRandom : Random {
    protected object ThisLock { get; private set; }
    public SynchronizedRandom(int seed);
    [CompilerGeneratedAttribute]
protected object get_ThisLock();
    [CompilerGeneratedAttribute]
private void set_ThisLock(object value);
    public virtual int Next(int minValue, int maxValue);
    public virtual int Next();
    public virtual int Next(int maxValue);
    public virtual void NextBytes(Byte[] buffer);
    public virtual double NextDouble();
    protected virtual double Sample();
}
internal class System.ServiceModel.Channels.TD : object {
    internal static CultureInfo Culture { get; internal set; }
    private static TD();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static bool MaxPendingMessagesTotalSizeReachedIsEnabled();
    internal static void MaxPendingMessagesTotalSizeReached(EventTraceActivity eventTraceActivity, string messageID, long maxPendingMessagesTotalSize, string bindingElementTypeName);
    internal static bool ByteStreamMessageDecodingStartIsEnabled();
    internal static void ByteStreamMessageDecodingStart();
    internal static bool ByteStreamMessageEncodingStartIsEnabled();
    internal static void ByteStreamMessageEncodingStart(EventTraceActivity eventTraceActivity);
}
internal abstract class System.ServiceModel.Channels.UdpChannelBase`1 : InputQueueChannel`1<QueueItemType> {
    public EndpointAddress LocalAddress { get; private set; }
    public Uri Via { get; }
    private int System.ServiceModel.Channels.IUdpReceiveHandler.MaxReceivedMessageSize { get; }
    protected bool IgnoreSerializationException { get; }
    protected bool OwnsBufferManager { get; protected set; }
    protected DuplicateMessageDetector DuplicateDetector { get; protected set; }
    protected UdpSocketReceiveManager ReceiveManager { get; protected set; }
    protected BufferManager BufferManager { get; private set; }
    protected MessageEncoder Encoder { get; private set; }
    protected bool IsMulticast { get; private set; }
    protected UdpOutputChannel UdpOutputChannel { get; private set; }
    protected UdpSocket[] Sockets { get; private set; }
    protected UdpChannelBase`1(ChannelManagerBase channelManager, MessageEncoder encoder, BufferManager bufferManager, UdpSocket[] sockets, UdpRetransmissionSettings retransmissionSettings, long maxPendingMessagesTotalSize, EndpointAddress localAddress, Uri via, bool isMulticast, int maxReceivedMessageSize);
    [CompilerGeneratedAttribute]
public sealed virtual EndpointAddress get_LocalAddress();
    [CompilerGeneratedAttribute]
private void set_LocalAddress(EndpointAddress value);
    public sealed virtual Uri get_Via();
    private sealed virtual override int System.ServiceModel.Channels.IUdpReceiveHandler.get_MaxReceivedMessageSize();
    protected abstract virtual bool get_IgnoreSerializationException();
    [CompilerGeneratedAttribute]
protected bool get_OwnsBufferManager();
    [CompilerGeneratedAttribute]
protected void set_OwnsBufferManager(bool value);
    [CompilerGeneratedAttribute]
protected DuplicateMessageDetector get_DuplicateDetector();
    [CompilerGeneratedAttribute]
protected void set_DuplicateDetector(DuplicateMessageDetector value);
    [CompilerGeneratedAttribute]
protected UdpSocketReceiveManager get_ReceiveManager();
    [CompilerGeneratedAttribute]
protected void set_ReceiveManager(UdpSocketReceiveManager value);
    [CompilerGeneratedAttribute]
protected BufferManager get_BufferManager();
    [CompilerGeneratedAttribute]
private void set_BufferManager(BufferManager value);
    [CompilerGeneratedAttribute]
protected MessageEncoder get_Encoder();
    [CompilerGeneratedAttribute]
private void set_Encoder(MessageEncoder value);
    [CompilerGeneratedAttribute]
protected bool get_IsMulticast();
    [CompilerGeneratedAttribute]
private void set_IsMulticast(bool value);
    [CompilerGeneratedAttribute]
protected UdpOutputChannel get_UdpOutputChannel();
    [CompilerGeneratedAttribute]
private void set_UdpOutputChannel(UdpOutputChannel value);
    [CompilerGeneratedAttribute]
protected UdpSocket[] get_Sockets();
    [CompilerGeneratedAttribute]
private void set_Sockets(UdpSocket[] value);
    public virtual T GetProperty();
    private sealed virtual override bool System.ServiceModel.Channels.IUdpReceiveHandler.HandleDataReceived(ArraySegment`1<byte> data, EndPoint remoteEndpoint, int interfaceIndex, Action onMessageDequeuedCallback);
    private sealed virtual override void System.ServiceModel.Channels.IUdpReceiveHandler.HandleAsyncException(Exception ex);
    internal virtual void HandleReceiveException(Exception ex);
    internal bool TransferReceiveManagerOwnership(UdpSocketReceiveManager socketReceiveManager, DuplicateMessageDetector duplicateDetector);
    internal bool EnqueueMessage(Message message, int messageBufferSize, Action messageDequeuedCallback);
    internal abstract virtual void FinishEnqueueMessage(Message message, Action dequeuedCallback, bool canDispatchOnThisThread);
    protected virtual void AddHeadersTo(Message message);
    protected virtual void OnAbort();
    protected virtual IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnEndOpen(IAsyncResult result);
    protected virtual void OnOpen(TimeSpan timeout);
    protected virtual IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnEndClose(IAsyncResult result);
    protected virtual void OnClose(TimeSpan timeout);
    protected void SetOutputChannel(UdpOutputChannel udpOutputChannel);
    protected void Cleanup(bool aborting, TimeSpan timeout);
}
internal class System.ServiceModel.Channels.UdpChannelFactory`1 : ChannelFactoryBase`1<TChannel> {
    internal UdpChannelFactory`1(UdpTransportBindingElement transportBindingElement, BindingContext context);
    public virtual T GetProperty();
    protected virtual IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual TChannel OnCreateChannel(EndpointAddress to, Uri via);
    protected virtual void OnEndOpen(IAsyncResult result);
    protected virtual void OnOpen(TimeSpan timeout);
}
internal abstract class System.ServiceModel.Channels.UdpChannelListener`3 : ChannelListenerBase`1<ChannelInterfaceType> {
    public MessageEncoderFactory MessageEncoderFactory { get; }
    public Uri Uri { get; }
    protected TimeSpan DefaultReceiveTimeout { get; }
    protected TimeSpan DefaultSendTimeout { get; }
    internal BufferManager BufferManager { get; }
    internal UdpTransportBindingElement UdpTransportBindingElement { get; }
    internal List`1<UdpSocket> ListenSockets { get; }
    internal bool IsMulticast { get; }
    private int System.ServiceModel.Channels.IUdpReceiveHandler.MaxReceivedMessageSize { get; }
    internal UdpChannelListener`3(UdpTransportBindingElement udpTransportBindingElement, BindingContext context);
    public MessageEncoderFactory get_MessageEncoderFactory();
    public virtual Uri get_Uri();
    protected virtual TimeSpan get_DefaultReceiveTimeout();
    protected virtual TimeSpan get_DefaultSendTimeout();
    internal BufferManager get_BufferManager();
    internal UdpTransportBindingElement get_UdpTransportBindingElement();
    internal List`1<UdpSocket> get_ListenSockets();
    internal bool get_IsMulticast();
    private sealed virtual override int System.ServiceModel.Channels.IUdpReceiveHandler.get_MaxReceivedMessageSize();
    public virtual T GetProperty();
    private sealed virtual override void System.ServiceModel.Channels.IUdpReceiveHandler.HandleAsyncException(Exception ex);
    private sealed virtual override bool System.ServiceModel.Channels.IUdpReceiveHandler.HandleDataReceived(ArraySegment`1<byte> data, EndPoint remoteEndpoint, int interfaceIndex, Action onMessageDequeuedCallback);
    protected virtual Type GetCommunicationObjectType();
    protected virtual void OnAbort();
    protected virtual ChannelInterfaceType OnAcceptChannel(TimeSpan timeout);
    protected virtual IAsyncResult OnBeginAcceptChannel(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual IAsyncResult OnBeginWaitForChannel(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnClosing();
    protected virtual void OnClose(TimeSpan timeout);
    protected virtual ChannelInterfaceType OnEndAcceptChannel(IAsyncResult result);
    protected virtual void OnEndClose(IAsyncResult result);
    protected virtual void OnEndOpen(IAsyncResult result);
    protected virtual bool OnEndWaitForChannel(IAsyncResult result);
    protected virtual void OnOpen(TimeSpan timeout);
    protected virtual void OnOpened();
    protected virtual bool OnWaitForChannel(TimeSpan timeout);
    public abstract virtual TChannel CreateChannel();
}
internal static class System.ServiceModel.Channels.UdpConstants : object {
    public static int MaxMessageSizeOverIPv4;
    public static int MaxTimeToLive;
    public static long MinPendingMessagesTotalSize;
    public static int MinReceiveBufferSize;
    public static int MinTimeToLive;
    public static int PendingReceiveCountPerProcessor;
    public static string Scheme;
    public static string TimeSpanZero;
    public static string WsdlSoapUdpTransportUri;
    public static string WsdlSoapUdpTransportNamespace;
    public static string WsdlSoapUdpTransportPrefix;
    public static string RetransmissionEnabled;
}
internal abstract class System.ServiceModel.Channels.UdpDuplexChannel : UdpChannelBase`1<Message> {
    public EndpointAddress RemoteAddress { get; }
    protected UdpDuplexChannel(ChannelManagerBase channelMananger, MessageEncoder encoder, BufferManager bufferManager, UdpSocket[] sendSockets, UdpRetransmissionSettings retransmissionSettings, long maxPendingMessagesTotalSize, EndpointAddress localAddress, Uri via, bool isMulticast, int maxReceivedMessageSize);
    public virtual EndpointAddress get_RemoteAddress();
    public virtual T GetProperty();
    public sealed virtual IAsyncResult BeginSend(Message message, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginSend(Message message, TimeSpan timeout, AsyncCallback callback, object state);
    public sealed virtual void EndSend(IAsyncResult result);
    public sealed virtual void Send(Message message);
    public sealed virtual void Send(Message message, TimeSpan timeout);
    public sealed virtual Message Receive();
    public sealed virtual Message Receive(TimeSpan timeout);
    public sealed virtual IAsyncResult BeginReceive(AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginReceive(TimeSpan timeout, AsyncCallback callback, object state);
    public sealed virtual Message EndReceive(IAsyncResult result);
    public sealed virtual bool TryReceive(TimeSpan timeout, Message& message);
    public sealed virtual IAsyncResult BeginTryReceive(TimeSpan timeout, AsyncCallback callback, object state);
    public sealed virtual bool EndTryReceive(IAsyncResult result, Message& message);
    public sealed virtual bool WaitForMessage(TimeSpan timeout);
    public sealed virtual IAsyncResult BeginWaitForMessage(TimeSpan timeout, AsyncCallback callback, object state);
    public sealed virtual bool EndWaitForMessage(IAsyncResult result);
    internal virtual void FinishEnqueueMessage(Message message, Action dequeuedCallback, bool canDispatchOnThisThread);
}
internal class System.ServiceModel.Channels.UdpDuplexChannelListener : UdpChannelListener`3<IDuplexChannel, UdpDuplexChannel, Message> {
    public UdpDuplexChannelListener(UdpTransportBindingElement udpTransportBindingElement, BindingContext context);
    public virtual UdpDuplexChannel CreateChannel();
}
internal abstract class System.ServiceModel.Channels.UdpOutputChannel : OutputChannel {
    public EndpointAddress RemoteAddress { get; }
    public Uri Via { get; }
    internal bool IsMulticast { get; private set; }
    internal TimeSpan InternalSendTimeout { get; }
    protected BufferManager BufferManager { get; private set; }
    protected MessageEncoder Encoder { get; private set; }
    protected UdpSocket[] SendSockets { get; private set; }
    public UdpOutputChannel(ChannelManagerBase factory, MessageEncoder encoder, BufferManager bufferManager, UdpSocket[] sendSockets, UdpRetransmissionSettings retransmissionSettings, Uri via, bool isMulticast);
    public virtual EndpointAddress get_RemoteAddress();
    public virtual Uri get_Via();
    [CompilerGeneratedAttribute]
internal bool get_IsMulticast();
    [CompilerGeneratedAttribute]
private void set_IsMulticast(bool value);
    internal TimeSpan get_InternalSendTimeout();
    [CompilerGeneratedAttribute]
protected BufferManager get_BufferManager();
    [CompilerGeneratedAttribute]
private void set_BufferManager(BufferManager value);
    [CompilerGeneratedAttribute]
protected MessageEncoder get_Encoder();
    [CompilerGeneratedAttribute]
private void set_Encoder(MessageEncoder value);
    [CompilerGeneratedAttribute]
protected UdpSocket[] get_SendSockets();
    [CompilerGeneratedAttribute]
private void set_SendSockets(UdpSocket[] value);
    public virtual T GetProperty();
    internal void CancelRetransmission(UniqueId messageId);
    protected static void LogMessage(Message& message, ArraySegment`1<byte> messageData);
    protected virtual void AddHeadersTo(Message message);
    protected virtual IAsyncResult OnBeginSend(Message message, TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnEndSend(IAsyncResult result);
    protected virtual void OnSend(Message message, TimeSpan timeout);
    protected abstract virtual UdpSocket[] GetSendSockets(Message message, IPEndPoint& remoteEndPoint, Exception& exceptionToBeThrown);
    protected virtual void OnAbort();
    protected virtual IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnClose(TimeSpan timeout);
    protected virtual void OnEndClose(IAsyncResult result);
    protected virtual IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnEndOpen(IAsyncResult result);
    protected virtual void OnOpen(TimeSpan timeout);
    protected ArraySegment`1<byte> EncodeMessage(Message message);
    protected ObjectDisposedException CreateObjectDisposedException();
}
internal class System.ServiceModel.Channels.UdpReplyChannel : UdpChannelBase`1<RequestContext> {
    protected bool IgnoreSerializationException { get; }
    public UdpReplyChannel(UdpReplyChannelListener listener, UdpSocket[] sockets, EndpointAddress localAddress, Uri via, bool isMulticast);
    protected virtual bool get_IgnoreSerializationException();
    public virtual T GetProperty();
    public sealed virtual RequestContext ReceiveRequest();
    public sealed virtual RequestContext ReceiveRequest(TimeSpan timeout);
    public sealed virtual IAsyncResult BeginReceiveRequest(AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginReceiveRequest(TimeSpan timeout, AsyncCallback callback, object state);
    public sealed virtual RequestContext EndReceiveRequest(IAsyncResult result);
    public sealed virtual bool TryReceiveRequest(TimeSpan timeout, RequestContext& context);
    public sealed virtual IAsyncResult BeginTryReceiveRequest(TimeSpan timeout, AsyncCallback callback, object state);
    public sealed virtual bool EndTryReceiveRequest(IAsyncResult result, RequestContext& context);
    public sealed virtual bool WaitForRequest(TimeSpan timeout);
    public sealed virtual IAsyncResult BeginWaitForRequest(TimeSpan timeout, AsyncCallback callback, object state);
    public sealed virtual bool EndWaitForRequest(IAsyncResult result);
    internal virtual void FinishEnqueueMessage(Message message, Action dequeuedCallback, bool canDispatchOnThisThread);
}
internal class System.ServiceModel.Channels.UdpReplyChannelListener : UdpChannelListener`3<IReplyChannel, UdpReplyChannel, RequestContext> {
    public UdpReplyChannelListener(UdpTransportBindingElement udpTransportBindingElement, BindingContext context);
    public virtual UdpReplyChannel CreateChannel();
}
internal class System.ServiceModel.Channels.UdpRequestContext : RequestContextBase {
    public UdpRequestContext(UdpOutputChannel outputChannel, Message requestMessage);
    protected virtual void OnAbort();
    protected virtual IAsyncResult OnBeginReply(Message message, TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnClose(TimeSpan timeout);
    protected virtual void OnEndReply(IAsyncResult result);
    protected virtual void OnReply(Message message, TimeSpan timeout);
}
public class System.ServiceModel.Channels.UdpRetransmissionSettings : object {
    [DefaultValueAttribute("0")]
public int MaxUnicastRetransmitCount { get; public set; }
    [DefaultValueAttribute("0")]
public int MaxMulticastRetransmitCount { get; public set; }
    public TimeSpan DelayLowerBound { get; public set; }
    public TimeSpan DelayUpperBound { get; public set; }
    public TimeSpan MaxDelayPerRetransmission { get; public set; }
    internal bool Enabled { get; }
    public UdpRetransmissionSettings(int maxUnicastRetransmitCount, int maxMulticastRetransmitCount);
    public UdpRetransmissionSettings(int maxUnicastRetransmitCount, int maxMulticastRetransmitCount, TimeSpan delayLowerBound, TimeSpan delayUpperBound, TimeSpan maxDelayPerRetransmission);
    public int get_MaxUnicastRetransmitCount();
    public void set_MaxUnicastRetransmitCount(int value);
    public int get_MaxMulticastRetransmitCount();
    public void set_MaxMulticastRetransmitCount(int value);
    public TimeSpan get_DelayLowerBound();
    public void set_DelayLowerBound(TimeSpan value);
    public TimeSpan get_DelayUpperBound();
    public void set_DelayUpperBound(TimeSpan value);
    public TimeSpan get_MaxDelayPerRetransmission();
    public void set_MaxDelayPerRetransmission(TimeSpan value);
    public bool ShouldSerializeDelayLowerBound();
    public bool ShouldSerializeDelayUpperBound();
    public bool ShouldSerializeMaxDelayPerRetransmission();
    internal int GetDelayLowerBound();
    internal int GetDelayUpperBound();
    internal int GetMaxDelayPerRetransmission();
    internal bool get_Enabled();
    internal void ValidateSettings();
    internal UdpRetransmissionSettings Clone();
    internal bool IsMatch(UdpRetransmissionSettings udpRetransmissionSettings);
}
internal class System.ServiceModel.Channels.UdpSocket : object {
    public AddressFamily AddressFamily { get; }
    public int PendingReceiveCount { get; }
    internal int InterfaceIndex { get; private set; }
    internal bool IsDisposed { get; }
    internal object ThisLock { get; private set; }
    public UdpSocket(Socket socket, int interfaceIndex);
    public AddressFamily get_AddressFamily();
    public int get_PendingReceiveCount();
    [CompilerGeneratedAttribute]
internal int get_InterfaceIndex();
    [CompilerGeneratedAttribute]
private void set_InterfaceIndex(int value);
    internal bool get_IsDisposed();
    [CompilerGeneratedAttribute]
internal object get_ThisLock();
    [CompilerGeneratedAttribute]
private void set_ThisLock(object value);
    public IAsyncResult BeginReceiveFrom(Byte[] buffer, int offset, int size, EndPoint& remoteEndPoint, AsyncCallback callback, object state);
    public void Close();
    public ArraySegment`1<byte> EndReceiveFrom(IAsyncResult result, EndPoint& remoteEndPoint);
    internal EndPoint CreateIPAnyEndPoint();
    public void Open();
    public int SendTo(Byte[] buffer, int offset, int size, EndPoint remoteEndPoint);
    public IAsyncResult BeginSendTo(Byte[] buffer, int offset, int size, EndPoint remoteEndPoint, AsyncCallback callback, object state);
    public int EndSendTo(IAsyncResult result);
}
internal class System.ServiceModel.Channels.UdpSocketReceiveManager : object {
    internal UdpSocketReceiveManager(UdpSocket[] receiveSockets, int maxPendingReceivesPerSocket, BufferManager bufferManager, IUdpReceiveHandler receiveHandler);
    public void SetReceiveHandler(IUdpReceiveHandler handler);
    public void Close();
    public void Open();
}
public class System.ServiceModel.Channels.UdpTransportBindingElement : TransportBindingElement {
    [DefaultValueAttribute("0")]
public int DuplicateMessageHistoryLength { get; public set; }
    [DefaultValueAttribute("0")]
public long MaxPendingMessagesTotalSize { get; public set; }
    [DefaultValueAttribute("")]
public string MulticastInterfaceId { get; public set; }
    public UdpRetransmissionSettings RetransmissionSettings { get; public set; }
    public string Scheme { get; }
    [DefaultValueAttribute("65536")]
public int SocketReceiveBufferSize { get; public set; }
    [DefaultValueAttribute("1")]
public int TimeToLive { get; public set; }
    internal UdpTransportBindingElement(UdpTransportBindingElement other);
    public int get_DuplicateMessageHistoryLength();
    public void set_DuplicateMessageHistoryLength(int value);
    public long get_MaxPendingMessagesTotalSize();
    public void set_MaxPendingMessagesTotalSize(long value);
    [CompilerGeneratedAttribute]
public string get_MulticastInterfaceId();
    [CompilerGeneratedAttribute]
public void set_MulticastInterfaceId(string value);
    public UdpRetransmissionSettings get_RetransmissionSettings();
    public void set_RetransmissionSettings(UdpRetransmissionSettings value);
    public virtual string get_Scheme();
    public int get_SocketReceiveBufferSize();
    public void set_SocketReceiveBufferSize(int value);
    public int get_TimeToLive();
    public void set_TimeToLive(int value);
    public virtual IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context);
    public virtual IChannelListener`1<TChannel> BuildChannelListener(BindingContext context);
    public virtual bool CanBuildChannelFactory(BindingContext context);
    public virtual bool CanBuildChannelListener(BindingContext context);
    public virtual T GetProperty(BindingContext context);
    public virtual BindingElement Clone();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeRetransmissionSettings();
    private sealed virtual override void System.ServiceModel.Description.IWsdlExportExtension.ExportContract(WsdlExporter exporter, WsdlContractConversionContext context);
    private sealed virtual override void System.ServiceModel.Description.IWsdlExportExtension.ExportEndpoint(WsdlExporter exporter, WsdlEndpointConversionContext context);
    private sealed virtual override void System.ServiceModel.Description.IPolicyExportExtension.ExportPolicy(MetadataExporter exporter, PolicyConversionContext context);
    private sealed virtual override void System.ServiceModel.Channels.ITransportPolicyImport.ImportPolicy(MetadataImporter importer, PolicyConversionContext policyContext);
    internal virtual bool IsMatch(BindingElement b);
}
internal static class System.ServiceModel.Channels.UdpTransportBindingElementPolicy : object {
    internal static void ExportRetransmissionEnabledAssertion(UdpTransportBindingElement bindingElement, PolicyAssertionCollection assertions);
}
public class System.ServiceModel.Channels.UdpTransportImporter : object {
    public sealed virtual void BeforeImport(ServiceDescriptionCollection wsdlDocuments, XmlSchemaSet xmlSchemas, ICollection`1<XmlElement> policy);
    public sealed virtual void ImportPolicy(MetadataImporter importer, PolicyConversionContext context);
    public sealed virtual void ImportContract(WsdlImporter importer, WsdlContractConversionContext context);
    public sealed virtual void ImportEndpoint(WsdlImporter importer, WsdlEndpointConversionContext context);
}
internal static class System.ServiceModel.Channels.UdpUtility : object {
    public static Uri AppendRelativePath(Uri basepath, string relativePath);
    public static MessageEncoderFactory GetEncoder(BindingContext context);
    internal static bool CanIgnoreServerException(Exception ex);
    public static void CheckSocketSupport(Boolean& ipV4Supported, Boolean& ipV6Supported);
    public static bool TryGetLoopbackInterfaceIndex(NetworkInterface adapter, bool ipv4, Int32& interfaceIndex);
    public static UdpSocket CreateUnicastListenSocket(IPAddress ipAddress, Int32& port, int receiveBufferSize, int timeToLive);
    public static UdpSocket CreateListenSocket(IPAddress ipAddress, Int32& port, int receiveBufferSize, int timeToLive, int interfaceIndex, bool allowMulticastLoopback, bool isLoopbackAdapter);
    public static int CreateListenSocketsOnUniquePort(IPAddress ipv4Address, IPAddress ipv6Address, int receiveBufferSize, int timeToLive, UdpSocket& ipv4Socket, UdpSocket& ipv6Socket);
    public static void ValidateDuplicateDetectionAndRetransmittionSupport(MessageEncoderFactory messageEncoderFactory, bool retransmissionEnabled, bool duplicateDetectionEnabled);
    public static void ThrowIfNoSocketSupport();
    public static void ThrowOnUnsupportedHostNameType(Uri uri);
    public static NetworkInterface[] GetMulticastInterfaces(string multicastInterfaceIdentifier);
    public static bool IsMulticastAddress(IPAddress address);
    public static bool IsSuitableForMulticast(NetworkInterface networkInterface);
    public static bool IsSupportedHostNameType(UriHostNameType hostNameType);
    public static void ValidateBufferBounds(Byte[] buffer, int offset, int size);
    public static void ValidateBufferBounds(int bufferSize, int offset, int size);
    public static Exception WrapAsyncException(Exception ex);
    public static bool TryGetSocketError(Exception ex, SocketError& error);
    public static Message DecodeMessage(DuplicateMessageDetector duplicateDetector, MessageEncoder encoder, BufferManager bufferManager, ArraySegment`1<byte> data, IPEndPoint remoteEndPoint, int interfaceIndex, bool ignoreSerializationException, String& messageHash);
    public static int ComputeMessageBufferSize(int maxReceivedMessageSize);
}
internal class System.ServiceModel.Channels.XmlBufferedByteStreamReader : XmlByteStreamReader {
    public XmlBufferedByteStreamReader(ByteStreamBufferedMessageData bufferedMessageData, XmlDictionaryReaderQuotas quotas);
    private static XmlBufferedByteStreamReader();
    protected virtual void OnClose();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    protected virtual Byte[] OnToByteArray();
    protected virtual Stream OnToStream();
    public virtual bool TryGetBase64ContentLength(Int32& length);
}
internal abstract class System.ServiceModel.Channels.XmlByteStreamReader : XmlDictionaryReader {
    protected ReaderPosition position;
    protected XmlDictionaryReaderQuotas quotas;
    public int AttributeCount { get; }
    public string BaseURI { get; }
    public bool CanCanonicalize { get; }
    public bool CanReadBinaryContent { get; }
    public bool CanReadValueChunk { get; }
    public bool CanResolveEntity { get; }
    public int Depth { get; }
    public bool EOF { get; }
    public bool HasAttributes { get; }
    public bool HasValue { get; }
    public bool IsDefault { get; }
    public bool IsEmptyElement { get; }
    public string LocalName { get; }
    public XmlNameTable NameTable { get; }
    public string NamespaceURI { get; }
    public XmlNodeType NodeType { get; }
    public string Prefix { get; }
    public XmlDictionaryReaderQuotas Quotas { get; }
    public ReadState ReadState { get; }
    public string Value { get; }
    protected bool IsClosed { get; }
    protected XmlByteStreamReader(XmlDictionaryReaderQuotas quotas);
    public virtual int get_AttributeCount();
    public virtual string get_BaseURI();
    public virtual bool get_CanCanonicalize();
    public virtual bool get_CanReadBinaryContent();
    public virtual bool get_CanReadValueChunk();
    public virtual bool get_CanResolveEntity();
    public virtual int get_Depth();
    public virtual bool get_EOF();
    public virtual bool get_HasAttributes();
    public virtual bool get_HasValue();
    public virtual bool get_IsDefault();
    public virtual bool get_IsEmptyElement();
    public virtual string get_LocalName();
    public virtual void MoveToStartElement();
    public virtual XmlNameTable get_NameTable();
    public virtual string get_NamespaceURI();
    public virtual XmlNodeType get_NodeType();
    public virtual string get_Prefix();
    public virtual XmlDictionaryReaderQuotas get_Quotas();
    public virtual ReadState get_ReadState();
    public virtual string get_Value();
    public virtual void Close();
    protected bool get_IsClosed();
    protected virtual void OnClose();
    public virtual string GetAttribute(int i);
    public virtual string GetAttribute(string name, string namespaceURI);
    public virtual string GetAttribute(string name);
    public virtual string LookupNamespace(string prefix);
    public virtual bool MoveToAttribute(string name, string ns);
    public virtual bool MoveToAttribute(string name);
    public virtual bool MoveToElement();
    public virtual bool MoveToFirstAttribute();
    public virtual bool MoveToNextAttribute();
    public virtual bool Read();
    public virtual bool ReadAttributeValue();
    public abstract virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    public virtual int ReadContentAsBinHex(Byte[] buffer, int index, int count);
    public virtual void ResolveEntity();
    public Byte[] ToByteArray();
    protected abstract virtual Byte[] OnToByteArray();
    public Stream ToStream();
    protected abstract virtual Stream OnToStream();
    protected void EnsureInContent();
}
internal class System.ServiceModel.Channels.XmlByteStreamWriter : XmlDictionaryWriter {
    public WriteState WriteState { get; }
    public XmlWriterSettings Settings { get; }
    public XmlByteStreamWriter(Stream stream, bool ownsStream);
    public virtual WriteState get_WriteState();
    public virtual XmlWriterSettings get_Settings();
    public virtual void Close();
    public virtual void Flush();
    public virtual string LookupPrefix(string ns);
    public virtual void WriteBase64(Byte[] buffer, int index, int count);
    public virtual Task WriteBase64Async(Byte[] buffer, int index, int count);
    internal IAsyncResult BeginWriteBase64(Byte[] buffer, int index, int count, AsyncCallback callback, object state);
    internal void EndWriteBase64(IAsyncResult result);
    public virtual void WriteCData(string text);
    public virtual void WriteCharEntity(char ch);
    public virtual void WriteChars(Char[] buffer, int index, int count);
    public virtual void WriteComment(string text);
    public virtual void WriteDocType(string name, string pubid, string sysid, string subset);
    public virtual void WriteEndAttribute();
    public virtual void WriteEndDocument();
    public virtual void WriteEndElement();
    public virtual void WriteEntityRef(string name);
    public virtual void WriteFullEndElement();
    public virtual void WriteProcessingInstruction(string name, string text);
    public virtual void WriteRaw(string data);
    public virtual void WriteRaw(Char[] buffer, int index, int count);
    public virtual void WriteStartAttribute(string prefix, string localName, string ns);
    public virtual void WriteStartDocument(bool standalone);
    public virtual void WriteStartDocument();
    public virtual void WriteStartElement(string prefix, string localName, string ns);
    public virtual void WriteString(string text);
    public virtual void WriteSurrogateCharEntity(char lowChar, char highChar);
    public virtual void WriteWhitespace(string ws);
}
internal abstract class System.ServiceModel.Channels.XmlStreamedByteStreamReader : XmlByteStreamReader {
    protected XmlStreamedByteStreamReader(XmlDictionaryReaderQuotas quotas);
    public static XmlStreamedByteStreamReader Create(Stream stream, XmlDictionaryReaderQuotas quotas);
    public static XmlStreamedByteStreamReader Create(HttpRequestMessage httpRequestMessage, XmlDictionaryReaderQuotas quotas);
    public static XmlStreamedByteStreamReader Create(HttpResponseMessage httpResponseMessage, XmlDictionaryReaderQuotas quotas);
    protected virtual void OnClose();
    public virtual int ReadContentAsBase64(Byte[] buffer, int index, int count);
    protected virtual Byte[] OnToByteArray();
    protected virtual Stream OnToStream();
    protected abstract virtual Stream GetStream();
    protected abstract virtual void ReleaseStream();
    public virtual bool TryGetBase64ContentLength(Int32& length);
}
public class System.ServiceModel.Configuration.ByteStreamMessageEncodingElement : BindingElementExtensionElement {
    public Type BindingElementType { get; }
    [ConfigurationPropertyAttribute("readerQuotas")]
public XmlDictionaryReaderQuotasElement ReaderQuotas { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    public virtual Type get_BindingElementType();
    public XmlDictionaryReaderQuotasElement get_ReaderQuotas();
    public virtual void ApplyConfiguration(BindingElement bindingElement);
    public virtual void CopyFrom(ServiceModelExtensionElement from);
    protected internal virtual void InitializeFrom(BindingElement bindingElement);
    protected internal virtual BindingElement CreateBindingElement();
    protected virtual ConfigurationPropertyCollection get_Properties();
}
public class System.ServiceModel.Configuration.UdpBindingCollectionElement : StandardBindingCollectionElement`2<UdpBinding, UdpBindingElement> {
    internal static UdpBindingCollectionElement GetBindingCollectionElement();
}
public class System.ServiceModel.Configuration.UdpBindingElement : StandardBindingElement {
    protected Type BindingElementType { get; }
    [ConfigurationPropertyAttribute("duplicateMessageHistoryLength")]
[IntegerValidatorAttribute]
public int DuplicateMessageHistoryLength { get; public set; }
    [ConfigurationPropertyAttribute("maxBufferPoolSize")]
[LongValidatorAttribute]
public long MaxBufferPoolSize { get; public set; }
    [ConfigurationPropertyAttribute("maxRetransmitCount")]
[IntegerValidatorAttribute]
public int MaxRetransmitCount { get; public set; }
    [ConfigurationPropertyAttribute("maxPendingMessagesTotalSize")]
[LongValidatorAttribute]
public long MaxPendingMessagesTotalSize { get; public set; }
    [ConfigurationPropertyAttribute("maxReceivedMessageSize")]
[LongValidatorAttribute]
public long MaxReceivedMessageSize { get; public set; }
    [ConfigurationPropertyAttribute("multicastInterfaceId")]
[StringValidatorAttribute]
public string MulticastInterfaceId { get; public set; }
    [ConfigurationPropertyAttribute("readerQuotas")]
public XmlDictionaryReaderQuotasElement ReaderQuotas { get; }
    [ConfigurationPropertyAttribute("textEncoding")]
[TypeConverterAttribute("System.ServiceModel.Configuration.EncodingConverter")]
public Encoding TextEncoding { get; public set; }
    [ConfigurationPropertyAttribute("timeToLive")]
[IntegerValidatorAttribute]
public int TimeToLive { get; public set; }
    protected ConfigurationPropertyCollection Properties { get; }
    public UdpBindingElement(string name);
    protected virtual Type get_BindingElementType();
    public int get_DuplicateMessageHistoryLength();
    public void set_DuplicateMessageHistoryLength(int value);
    public long get_MaxBufferPoolSize();
    public void set_MaxBufferPoolSize(long value);
    public int get_MaxRetransmitCount();
    public void set_MaxRetransmitCount(int value);
    public long get_MaxPendingMessagesTotalSize();
    public void set_MaxPendingMessagesTotalSize(long value);
    public long get_MaxReceivedMessageSize();
    public void set_MaxReceivedMessageSize(long value);
    public string get_MulticastInterfaceId();
    public void set_MulticastInterfaceId(string value);
    public XmlDictionaryReaderQuotasElement get_ReaderQuotas();
    public Encoding get_TextEncoding();
    public void set_TextEncoding(Encoding value);
    public int get_TimeToLive();
    public void set_TimeToLive(int value);
    protected internal virtual void InitializeFrom(Binding binding);
    protected virtual void OnApplyConfiguration(Binding binding);
    protected virtual ConfigurationPropertyCollection get_Properties();
}
public class System.ServiceModel.Configuration.UdpRetransmissionSettingsElement : ServiceModelConfigurationElement {
    protected ConfigurationPropertyCollection Properties { get; }
    [ConfigurationPropertyAttribute("delayLowerBound")]
[TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
[ServiceModelTimeSpanValidatorAttribute]
public TimeSpan DelayLowerBound { get; public set; }
    [ConfigurationPropertyAttribute("delayUpperBound")]
[TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
[ServiceModelTimeSpanValidatorAttribute]
public TimeSpan DelayUpperBound { get; public set; }
    [ConfigurationPropertyAttribute("maxDelayPerRetransmission")]
[TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
[ServiceModelTimeSpanValidatorAttribute]
public TimeSpan MaxDelayPerRetransmission { get; public set; }
    [ConfigurationPropertyAttribute("maxMulticastRetransmitCount")]
[IntegerValidatorAttribute]
public int MaxMulticastRetransmitCount { get; public set; }
    [ConfigurationPropertyAttribute("maxUnicastRetransmitCount")]
[IntegerValidatorAttribute]
public int MaxUnicastRetransmitCount { get; public set; }
    protected virtual ConfigurationPropertyCollection get_Properties();
    internal void ApplyConfiguration(UdpRetransmissionSettings udpRetransmissionSettings);
    internal void InitializeFrom(UdpRetransmissionSettings udpRetransmissionSettings);
    public TimeSpan get_DelayLowerBound();
    public void set_DelayLowerBound(TimeSpan value);
    public TimeSpan get_DelayUpperBound();
    public void set_DelayUpperBound(TimeSpan value);
    public TimeSpan get_MaxDelayPerRetransmission();
    public void set_MaxDelayPerRetransmission(TimeSpan value);
    public int get_MaxMulticastRetransmitCount();
    public void set_MaxMulticastRetransmitCount(int value);
    public int get_MaxUnicastRetransmitCount();
    public void set_MaxUnicastRetransmitCount(int value);
}
internal static class System.ServiceModel.Configuration.UdpTransportConfigurationStrings : object {
    internal static string DuplicateMessageHistoryLength;
    internal static string MaxPendingMessagesTotalSize;
    internal static string MaxReceivedMessageSize;
    internal static string MaxBufferPoolSize;
    internal static string MulticastInterfaceId;
    internal static string SocketReceiveBufferSize;
    internal static string TimeToLive;
    internal static string RetransmissionSettings;
    internal static string DelayLowerBound;
    internal static string DelayUpperBound;
    internal static string MaxDelayPerRetransmission;
    internal static string MaxMulticastRetransmitCount;
    internal static string MaxUnicastRetransmitCount;
    internal static string UdpBindingElementName;
    internal static string MaxRetransmitCount;
    internal static string ReaderQuotas;
    internal static string TextEncoding;
}
public class System.ServiceModel.Configuration.UdpTransportElement : TransportElement {
    protected ConfigurationPropertyCollection Properties { get; }
    public Type BindingElementType { get; }
    [ConfigurationPropertyAttribute("duplicateMessageHistoryLength")]
[IntegerValidatorAttribute]
public int DuplicateMessageHistoryLength { get; public set; }
    [ConfigurationPropertyAttribute("maxPendingMessagesTotalSize")]
[LongValidatorAttribute]
public long MaxPendingMessagesTotalSize { get; public set; }
    [ConfigurationPropertyAttribute("multicastInterfaceId")]
[StringValidatorAttribute]
public string MulticastInterfaceId { get; public set; }
    [ConfigurationPropertyAttribute("socketReceiveBufferSize")]
[IntegerValidatorAttribute]
public int SocketReceiveBufferSize { get; public set; }
    [ConfigurationPropertyAttribute("timeToLive")]
[IntegerValidatorAttribute]
public int TimeToLive { get; public set; }
    [ConfigurationPropertyAttribute("retransmissionSettings")]
public UdpRetransmissionSettingsElement RetransmissionSettings { get; public set; }
    protected virtual ConfigurationPropertyCollection get_Properties();
    public virtual void ApplyConfiguration(BindingElement bindingElement);
    protected internal virtual void InitializeFrom(BindingElement bindingElement);
    public virtual Type get_BindingElementType();
    protected virtual TransportBindingElement CreateDefaultBindingElement();
    public int get_DuplicateMessageHistoryLength();
    public void set_DuplicateMessageHistoryLength(int value);
    public long get_MaxPendingMessagesTotalSize();
    public void set_MaxPendingMessagesTotalSize(long value);
    public string get_MulticastInterfaceId();
    public void set_MulticastInterfaceId(string value);
    public int get_SocketReceiveBufferSize();
    public void set_SocketReceiveBufferSize(int value);
    public int get_TimeToLive();
    public void set_TimeToLive(int value);
    public UdpRetransmissionSettingsElement get_RetransmissionSettings();
    public void set_RetransmissionSettings(UdpRetransmissionSettingsElement value);
}
public class System.ServiceModel.UdpBinding : Binding {
    [DefaultValueAttribute("0")]
public int DuplicateMessageHistoryLength { get; public set; }
    [DefaultValueAttribute("524288")]
public long MaxBufferPoolSize { get; public set; }
    [DefaultValueAttribute("0")]
public int MaxRetransmitCount { get; public set; }
    [DefaultValueAttribute("0")]
public long MaxPendingMessagesTotalSize { get; public set; }
    [DefaultValueAttribute("65536")]
public long MaxReceivedMessageSize { get; public set; }
    [DefaultValueAttribute("")]
public string MulticastInterfaceId { get; public set; }
    public XmlDictionaryReaderQuotas ReaderQuotas { get; public set; }
    [TypeConverterAttribute("System.ServiceModel.Configuration.EncodingConverter")]
public Encoding TextEncoding { get; public set; }
    [DefaultValueAttribute("1")]
public int TimeToLive { get; public set; }
    public string Scheme { get; }
    private bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously { get; }
    public UdpBinding(string configurationName);
    public int get_DuplicateMessageHistoryLength();
    public void set_DuplicateMessageHistoryLength(int value);
    public long get_MaxBufferPoolSize();
    public void set_MaxBufferPoolSize(long value);
    public int get_MaxRetransmitCount();
    public void set_MaxRetransmitCount(int value);
    public long get_MaxPendingMessagesTotalSize();
    public void set_MaxPendingMessagesTotalSize(long value);
    public long get_MaxReceivedMessageSize();
    public void set_MaxReceivedMessageSize(long value);
    public string get_MulticastInterfaceId();
    public void set_MulticastInterfaceId(string value);
    public XmlDictionaryReaderQuotas get_ReaderQuotas();
    public void set_ReaderQuotas(XmlDictionaryReaderQuotas value);
    public Encoding get_TextEncoding();
    public void set_TextEncoding(Encoding value);
    public int get_TimeToLive();
    public void set_TimeToLive(int value);
    public virtual string get_Scheme();
    public virtual BindingElementCollection CreateBindingElements();
    private sealed virtual override bool System.ServiceModel.Channels.IBindingRuntimePreferences.get_ReceiveSynchronously();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeReaderQuotas();
    [EditorBrowsableAttribute("1")]
public bool ShouldSerializeTextEncoding();
    internal static bool TryCreate(BindingElementCollection bindingElements, Binding& binding);
}
