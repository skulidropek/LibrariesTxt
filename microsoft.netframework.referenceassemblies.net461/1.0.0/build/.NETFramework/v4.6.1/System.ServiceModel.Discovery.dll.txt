internal static class System.ServiceModel.Channels.UdpConstants : object {
    public static int MaxMessageSizeOverIPv4;
    public static int MaxTimeToLive;
    public static int MinReceiveBufferSize;
    public static int MinTimeToLive;
    public static int PendingReceiveCountPerProcessor;
    public static string Scheme;
}
public class System.ServiceModel.Discovery.AnnouncementClient : object {
    public DiscoveryMessageSequenceGenerator MessageSequenceGenerator { get; public set; }
    public ChannelFactory ChannelFactory { get; }
    public ClientCredentials ClientCredentials { get; }
    public ServiceEndpoint Endpoint { get; }
    public IClientChannel InnerChannel { get; }
    private CommunicationState System.ServiceModel.ICommunicationObject.State { get; }
    public AnnouncementClient(string endpointConfigurationName);
    public AnnouncementClient(AnnouncementEndpoint announcementEndpoint);
    public void add_AnnounceOnlineCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void remove_AnnounceOnlineCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void add_AnnounceOfflineCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public void remove_AnnounceOfflineCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.add_Closed(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.remove_Closed(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.add_Closing(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.remove_Closing(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.add_Faulted(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.remove_Faulted(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.add_Opened(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.remove_Opened(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.add_Opening(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.remove_Opening(EventHandler value);
    public DiscoveryMessageSequenceGenerator get_MessageSequenceGenerator();
    public void set_MessageSequenceGenerator(DiscoveryMessageSequenceGenerator value);
    public ChannelFactory get_ChannelFactory();
    public ClientCredentials get_ClientCredentials();
    public ServiceEndpoint get_Endpoint();
    public IClientChannel get_InnerChannel();
    private sealed virtual override CommunicationState System.ServiceModel.ICommunicationObject.get_State();
    public void Open();
    public void AnnounceOnlineAsync(EndpointDiscoveryMetadata discoveryMetadata);
    public void AnnounceOnlineAsync(EndpointDiscoveryMetadata discoveryMetadata, object userState);
    public void AnnounceOfflineAsync(EndpointDiscoveryMetadata discoveryMetadata);
    public void AnnounceOfflineAsync(EndpointDiscoveryMetadata discoveryMetadata, object userState);
    public void AnnounceOnline(EndpointDiscoveryMetadata discoveryMetadata);
    public void AnnounceOffline(EndpointDiscoveryMetadata discoveryMetadata);
    public IAsyncResult BeginAnnounceOnline(EndpointDiscoveryMetadata discoveryMetadata, AsyncCallback callback, object state);
    public void EndAnnounceOnline(IAsyncResult result);
    public Task AnnounceOnlineTaskAsync(EndpointDiscoveryMetadata discoveryMetadata);
    public Task AnnounceOfflineTaskAsync(EndpointDiscoveryMetadata discoveryMetadata);
    public IAsyncResult BeginAnnounceOffline(EndpointDiscoveryMetadata discoveryMetadata, AsyncCallback callback, object state);
    public void EndAnnounceOffline(IAsyncResult result);
    public void Close();
    private sealed virtual override void System.ServiceModel.ICommunicationObject.Open();
    private sealed virtual override void System.ServiceModel.ICommunicationObject.Open(TimeSpan timeout);
    private sealed virtual override IAsyncResult System.ServiceModel.ICommunicationObject.BeginOpen(AsyncCallback callback, object state);
    private sealed virtual override IAsyncResult System.ServiceModel.ICommunicationObject.BeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.EndOpen(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.Close();
    private sealed virtual override void System.ServiceModel.ICommunicationObject.Close(TimeSpan timeout);
    private sealed virtual override IAsyncResult System.ServiceModel.ICommunicationObject.BeginClose(AsyncCallback callback, object state);
    private sealed virtual override IAsyncResult System.ServiceModel.ICommunicationObject.BeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.EndClose(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.Abort();
    private sealed virtual override void System.IDisposable.Dispose();
}
internal class System.ServiceModel.Discovery.AnnouncementDispatcherAsyncResult : AsyncResult {
    public AnnouncementDispatcherAsyncResult(Collection`1<AnnouncementEndpoint> endpoints, Collection`1<EndpointDiscoveryMetadata> metadatas, DiscoveryMessageSequenceGenerator discoveryMessageSequenceGenerator, bool online, AsyncCallback callback, object state);
    public void Start(TimeSpan timeout, bool canCompleteSynchronously);
    public void Cancel();
    public static void End(IAsyncResult result);
}
public class System.ServiceModel.Discovery.AnnouncementEndpoint : ServiceEndpoint {
    public TimeSpan MaxAnnouncementDelay { get; public set; }
    public DiscoveryVersion DiscoveryVersion { get; }
    public AnnouncementEndpoint(Binding binding, EndpointAddress address);
    public AnnouncementEndpoint(DiscoveryVersion discoveryVersion);
    public AnnouncementEndpoint(DiscoveryVersion discoveryVersion, Binding binding, EndpointAddress address);
    public TimeSpan get_MaxAnnouncementDelay();
    public void set_MaxAnnouncementDelay(TimeSpan value);
    public DiscoveryVersion get_DiscoveryVersion();
}
public class System.ServiceModel.Discovery.AnnouncementEventArgs : EventArgs {
    public DiscoveryMessageSequence MessageSequence { get; private set; }
    public EndpointDiscoveryMetadata EndpointDiscoveryMetadata { get; private set; }
    internal AnnouncementEventArgs(DiscoveryMessageSequence messageSequence, EndpointDiscoveryMetadata endpointDiscoveryMetadata);
    [CompilerGeneratedAttribute]
public DiscoveryMessageSequence get_MessageSequence();
    [CompilerGeneratedAttribute]
private void set_MessageSequence(DiscoveryMessageSequence value);
    [CompilerGeneratedAttribute]
public EndpointDiscoveryMetadata get_EndpointDiscoveryMetadata();
    [CompilerGeneratedAttribute]
private void set_EndpointDiscoveryMetadata(EndpointDiscoveryMetadata value);
}
internal class System.ServiceModel.Discovery.AnnouncementSendsAsyncResult : RandomDelaySendsAsyncResult {
    internal AnnouncementSendsAsyncResult(AnnouncementClient announcementClient, Collection`1<EndpointDiscoveryMetadata> publishedEndpoints, Collection`1<UniqueId> messageIds, bool online, TimeSpan maxDelay, Random random, AsyncCallback callback, object state);
    protected virtual IAsyncResult OnBeginSend(int index, TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnEndSend(IAsyncResult result);
    public static void End(IAsyncResult result);
}
[ServiceBehaviorAttribute]
public class System.ServiceModel.Discovery.AnnouncementService : object {
    public AnnouncementService(int duplicateMessageHistoryLength);
    [CompilerGeneratedAttribute]
public void add_OnlineAnnouncementReceived(EventHandler`1<AnnouncementEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OnlineAnnouncementReceived(EventHandler`1<AnnouncementEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_OfflineAnnouncementReceived(EventHandler`1<AnnouncementEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_OfflineAnnouncementReceived(EventHandler`1<AnnouncementEventArgs> value);
    private sealed virtual override void System.ServiceModel.Discovery.VersionApril2005.IAnnouncementContractApril2005.HelloOperation(HelloMessageApril2005 message);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.VersionApril2005.IAnnouncementContractApril2005.BeginHelloOperation(HelloMessageApril2005 message, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.VersionApril2005.IAnnouncementContractApril2005.EndHelloOperation(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.Discovery.VersionApril2005.IAnnouncementContractApril2005.ByeOperation(ByeMessageApril2005 message);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.VersionApril2005.IAnnouncementContractApril2005.BeginByeOperation(ByeMessageApril2005 message, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.VersionApril2005.IAnnouncementContractApril2005.EndByeOperation(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.Discovery.Version11.IAnnouncementContract11.HelloOperation(HelloMessage11 message);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.Version11.IAnnouncementContract11.BeginHelloOperation(HelloMessage11 message, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.Version11.IAnnouncementContract11.EndHelloOperation(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.Discovery.Version11.IAnnouncementContract11.ByeOperation(ByeMessage11 message);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.Version11.IAnnouncementContract11.BeginByeOperation(ByeMessage11 message, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.Version11.IAnnouncementContract11.EndByeOperation(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.Discovery.VersionCD1.IAnnouncementContractCD1.HelloOperation(HelloMessageCD1 message);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.VersionCD1.IAnnouncementContractCD1.BeginHelloOperation(HelloMessageCD1 message, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.VersionCD1.IAnnouncementContractCD1.EndHelloOperation(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.Discovery.VersionCD1.IAnnouncementContractCD1.ByeOperation(ByeMessageCD1 message);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.VersionCD1.IAnnouncementContractCD1.BeginByeOperation(ByeMessageCD1 message, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.VersionCD1.IAnnouncementContractCD1.EndByeOperation(IAsyncResult result);
    private sealed virtual override bool System.ServiceModel.Discovery.IAnnouncementServiceImplementation.IsDuplicate(UniqueId messageId);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.IAnnouncementServiceImplementation.OnBeginOnlineAnnouncement(DiscoveryMessageSequence messageSequence, EndpointDiscoveryMetadata endpointDiscoveryMetadata, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.IAnnouncementServiceImplementation.OnEndOnlineAnnouncement(IAsyncResult result);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.IAnnouncementServiceImplementation.OnBeginOfflineAnnouncement(DiscoveryMessageSequence messageSequence, EndpointDiscoveryMetadata endpointDiscoveryMetadata, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.IAnnouncementServiceImplementation.OnEndOfflineAnnouncement(IAsyncResult result);
    protected virtual IAsyncResult OnBeginOnlineAnnouncement(DiscoveryMessageSequence messageSequence, EndpointDiscoveryMetadata endpointDiscoveryMetadata, AsyncCallback callback, object state);
    protected virtual void OnEndOnlineAnnouncement(IAsyncResult result);
    protected virtual IAsyncResult OnBeginOfflineAnnouncement(DiscoveryMessageSequence messageSequence, EndpointDiscoveryMetadata endpointDiscoveryMetadata, AsyncCallback callback, object state);
    protected virtual void OnEndOfflineAnnouncement(IAsyncResult result);
}
internal abstract class System.ServiceModel.Discovery.AsyncOperationContext : object {
    public AsyncOperation AsyncOperation { get; public set; }
    public TimeSpan Duration { get; }
    public bool IsCompleted { get; }
    public bool IsSyncOperation { get; }
    public int MaxResults { get; }
    public UniqueId OperationId { get; }
    public object SyncRoot { get; }
    public object UserState { get; }
    public Nullable`1<DateTime> StartedAt { get; }
    internal AsyncOperationContext(UniqueId operationId, int maxResults, TimeSpan duration, object userState);
    public AsyncOperation get_AsyncOperation();
    public void set_AsyncOperation(AsyncOperation value);
    public TimeSpan get_Duration();
    public bool get_IsCompleted();
    public bool get_IsSyncOperation();
    public int get_MaxResults();
    public UniqueId get_OperationId();
    public object get_SyncRoot();
    public object get_UserState();
    public Nullable`1<DateTime> get_StartedAt();
    public void Complete();
    public void StartTimer(Action`1<object> waitCallback);
}
internal class System.ServiceModel.Discovery.AsyncOperationLifetimeManager : object {
    public bool IsAborted { get; }
    public bool IsClosed { get; }
    public bool get_IsAborted();
    public bool get_IsClosed();
    public bool TryAdd(AsyncOperationContext context);
    public AsyncOperationContext[] Abort();
    public bool TryLookup(UniqueId operationId, AsyncOperationContext& context);
    public bool TryLookup(UniqueId operationId, T& context);
    public T Remove(UniqueId operationId);
    public bool TryRemoveUnique(object userState, AsyncOperationContext& context);
    public void Close(TimeSpan timeout);
    public IAsyncResult BeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    public void EndClose(IAsyncResult result);
}
internal abstract class System.ServiceModel.Discovery.ByeOperationAsyncResult`1 : AsyncResult {
    internal ByeOperationAsyncResult`1(IAnnouncementServiceImplementation announcementServiceImpl, TMessage message, AsyncCallback callback, object state);
    private static ByeOperationAsyncResult`1();
    protected abstract virtual bool ValidateContent(TMessage message);
    protected abstract virtual DiscoveryMessageSequence GetMessageSequence(TMessage message);
    protected abstract virtual EndpointDiscoveryMetadata GetEndpointDiscoveryMetadata(TMessage message);
}
internal class System.ServiceModel.Discovery.CompiledScopeCriteria : object {
    public string CompiledScope { get; }
    public CompiledScopeCriteriaMatchBy MatchBy { get; }
    public CompiledScopeCriteria(string compiledScope, CompiledScopeCriteriaMatchBy matchBy);
    public string get_CompiledScope();
    public CompiledScopeCriteriaMatchBy get_MatchBy();
}
internal enum System.ServiceModel.Discovery.CompiledScopeCriteriaMatchBy : Enum {
    public int value__;
    public static CompiledScopeCriteriaMatchBy StartsWith;
    public static CompiledScopeCriteriaMatchBy Exact;
}
[ConfigurationCollectionAttribute("System.ServiceModel.Configuration.ChannelEndpointElement")]
public class System.ServiceModel.Discovery.Configuration.AnnouncementChannelEndpointElementCollection : ServiceModelConfigurationElementCollection`1<ChannelEndpointElement> {
    protected virtual object GetElementKey(ConfigurationElement element);
}
public class System.ServiceModel.Discovery.Configuration.AnnouncementEndpointCollectionElement : StandardEndpointCollectionElement`2<AnnouncementEndpoint, AnnouncementEndpointElement> {
}
public class System.ServiceModel.Discovery.Configuration.AnnouncementEndpointElement : StandardEndpointElement {
    [ConfigurationPropertyAttribute("maxAnnouncementDelay")]
[TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
[ServiceModelTimeSpanValidatorAttribute]
public TimeSpan MaxAnnouncementDelay { get; public set; }
    [ConfigurationPropertyAttribute("discoveryVersion")]
[TypeConverterAttribute("System.ServiceModel.Discovery.Configuration.DiscoveryVersionConverter")]
public DiscoveryVersion DiscoveryVersion { get; public set; }
    protected internal Type EndpointType { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    public TimeSpan get_MaxAnnouncementDelay();
    public void set_MaxAnnouncementDelay(TimeSpan value);
    public DiscoveryVersion get_DiscoveryVersion();
    public void set_DiscoveryVersion(DiscoveryVersion value);
    protected internal virtual Type get_EndpointType();
    protected virtual ConfigurationPropertyCollection get_Properties();
    protected internal virtual ServiceEndpoint CreateServiceEndpoint(ContractDescription contractDescription);
    protected internal virtual void InitializeFrom(ServiceEndpoint endpoint);
    protected virtual void OnInitializeAndValidate(ChannelEndpointElement channelEndpointElement);
    protected virtual void OnInitializeAndValidate(ServiceEndpointElement serviceEndpointElement);
    protected virtual void OnApplyConfiguration(ServiceEndpoint endpoint, ServiceEndpointElement serviceEndpointElement);
    protected virtual void OnApplyConfiguration(ServiceEndpoint endpoint, ChannelEndpointElement serviceEndpointElement);
}
internal class System.ServiceModel.Discovery.Configuration.ConfigurationDiscoveryEndpointProvider : DiscoveryEndpointProvider {
    public ConfigurationDiscoveryEndpointProvider(ChannelEndpointElement channelEndpointElement);
    public virtual DiscoveryEndpoint GetDiscoveryEndpoint();
}
internal static class System.ServiceModel.Discovery.Configuration.ConfigurationStrings : object {
    public static string AnnouncementEndpoints;
    public static string DiscoveryClient;
    public static string DiscoveryClientSettings;
    public static string DiscoveryVersion;
    public static string Duration;
    public static string Enabled;
    public static string Endpoint;
    public static string Extensions;
    public static string FindCriteria;
    public static string IsSystemEndpoint;
    public static string MaxAnnouncementDelay;
    public static string MaxResponseDelay;
    public static string MaxResults;
    public static string MulticastAddress;
    public static string Name;
    public static string Namespace;
    public static string DiscoveryMode;
    public static string Scopes;
    public static string Scope;
    public static string ScopeMatchBy;
    public static string Types;
    public static string UdpDiscoveryEndpoint;
    public static string TransportSettings;
    public static string DuplicateMessageHistoryLength;
    public static string MaxPendingMessageCount;
    public static string MaxReceivedMessageSize;
    public static string MaxBufferPoolSize;
    public static string MaxMulticastRetransmitCount;
    public static string MaxUnicastRetransmitCount;
    public static string MulticastInterfaceId;
    public static string SocketReceiveBufferSize;
    public static string TimeToLive;
    public static string TimeSpanZero;
}
internal class System.ServiceModel.Discovery.Configuration.ConfigurationUtility : object {
    public static ChannelEndpointElement GetDefaultDiscoveryEndpointElement();
    public static T LookupEndpoint(ChannelEndpointElement channelEndpointElement);
    internal static void InitializeAndValidateUdpChannelEndpointElement(ChannelEndpointElement channelEndpointElement);
    internal static void InitializeAndValidateUdpServiceEndpointElement(ServiceEndpointElement serviceEndpointElement);
    internal static TEndpoint LookupEndpointFromClientSection(string endpointConfigurationName);
}
public class System.ServiceModel.Discovery.Configuration.ContractTypeNameElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("namespace")]
public string Namespace { get; public set; }
    [ConfigurationPropertyAttribute("name")]
[StringValidatorAttribute]
public string Name { get; public set; }
    protected ConfigurationPropertyCollection Properties { get; }
    public ContractTypeNameElement(string name, string ns);
    public string get_Namespace();
    public void set_Namespace(string value);
    public string get_Name();
    public void set_Name(string value);
    protected virtual ConfigurationPropertyCollection get_Properties();
}
[ConfigurationCollectionAttribute("System.ServiceModel.Discovery.Configuration.ContractTypeNameElement")]
public class System.ServiceModel.Discovery.Configuration.ContractTypeNameElementCollection : ServiceModelConfigurationElementCollection`1<ContractTypeNameElement> {
    protected virtual object GetElementKey(ConfigurationElement element);
}
public class System.ServiceModel.Discovery.Configuration.DiscoveryClientElement : BindingElementExtensionElement {
    [ConfigurationPropertyAttribute("endpoint")]
public ChannelEndpointElement DiscoveryEndpoint { get; }
    [ConfigurationPropertyAttribute("findCriteria")]
public FindCriteriaElement FindCriteria { get; }
    public Type BindingElementType { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    public ChannelEndpointElement get_DiscoveryEndpoint();
    public FindCriteriaElement get_FindCriteria();
    public virtual Type get_BindingElementType();
    protected virtual ConfigurationPropertyCollection get_Properties();
    public virtual void ApplyConfiguration(BindingElement bindingElement);
    public virtual void CopyFrom(ServiceModelExtensionElement from);
    protected internal virtual BindingElement CreateBindingElement();
    protected internal virtual void InitializeFrom(BindingElement bindingElement);
}
public class System.ServiceModel.Discovery.Configuration.DiscoveryClientSettingsElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("endpoint")]
public ChannelEndpointElement DiscoveryEndpoint { get; }
    [ConfigurationPropertyAttribute("findCriteria")]
public FindCriteriaElement FindCriteria { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    public ChannelEndpointElement get_DiscoveryEndpoint();
    public FindCriteriaElement get_FindCriteria();
    protected virtual ConfigurationPropertyCollection get_Properties();
}
public class System.ServiceModel.Discovery.Configuration.DiscoveryEndpointCollectionElement : StandardEndpointCollectionElement`2<DiscoveryEndpoint, DiscoveryEndpointElement> {
}
public class System.ServiceModel.Discovery.Configuration.DiscoveryEndpointElement : StandardEndpointElement {
    [ConfigurationPropertyAttribute("maxResponseDelay")]
[TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
[ServiceModelTimeSpanValidatorAttribute]
public TimeSpan MaxResponseDelay { get; public set; }
    [ConfigurationPropertyAttribute("discoveryMode")]
public ServiceDiscoveryMode DiscoveryMode { get; public set; }
    [ConfigurationPropertyAttribute("discoveryVersion")]
[TypeConverterAttribute("System.ServiceModel.Discovery.Configuration.DiscoveryVersionConverter")]
public DiscoveryVersion DiscoveryVersion { get; public set; }
    protected internal Type EndpointType { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    public TimeSpan get_MaxResponseDelay();
    public void set_MaxResponseDelay(TimeSpan value);
    public ServiceDiscoveryMode get_DiscoveryMode();
    public void set_DiscoveryMode(ServiceDiscoveryMode value);
    public DiscoveryVersion get_DiscoveryVersion();
    public void set_DiscoveryVersion(DiscoveryVersion value);
    protected internal virtual Type get_EndpointType();
    protected virtual ConfigurationPropertyCollection get_Properties();
    protected internal virtual ServiceEndpoint CreateServiceEndpoint(ContractDescription contractDescription);
    protected internal virtual void InitializeFrom(ServiceEndpoint endpoint);
    protected virtual void OnInitializeAndValidate(ChannelEndpointElement channelEndpointElement);
    protected virtual void OnInitializeAndValidate(ServiceEndpointElement serviceEndpointElement);
    protected virtual void OnApplyConfiguration(ServiceEndpoint endpoint, ServiceEndpointElement serviceEndpointElement);
    protected virtual void OnApplyConfiguration(ServiceEndpoint endpoint, ChannelEndpointElement serviceEndpointElement);
}
public class System.ServiceModel.Discovery.Configuration.DiscoveryVersionConverter : TypeConverter {
    public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType);
    public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType);
    public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value);
    public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType);
}
public class System.ServiceModel.Discovery.Configuration.DynamicEndpointCollectionElement : StandardEndpointCollectionElement`2<DynamicEndpoint, DynamicEndpointElement> {
}
public class System.ServiceModel.Discovery.Configuration.DynamicEndpointElement : StandardEndpointElement {
    [ConfigurationPropertyAttribute("discoveryClientSettings")]
public DiscoveryClientSettingsElement DiscoveryClientSettings { get; }
    protected internal Type EndpointType { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    public DiscoveryClientSettingsElement get_DiscoveryClientSettings();
    protected internal virtual Type get_EndpointType();
    protected virtual ConfigurationPropertyCollection get_Properties();
    protected internal virtual ServiceEndpoint CreateServiceEndpoint(ContractDescription contractDescription);
    protected virtual void OnInitializeAndValidate(ChannelEndpointElement channelEndpointElement);
    protected virtual void OnInitializeAndValidate(ServiceEndpointElement serviceEndpointElement);
    protected virtual void OnApplyConfiguration(ServiceEndpoint endpoint, ServiceEndpointElement serviceEndpointElement);
    protected virtual void OnApplyConfiguration(ServiceEndpoint endpoint, ChannelEndpointElement serviceEndpointElement);
}
public class System.ServiceModel.Discovery.Configuration.EndpointDiscoveryElement : BehaviorExtensionElement {
    public Type BehaviorType { get; }
    [ConfigurationPropertyAttribute("enabled")]
public bool Enabled { get; public set; }
    [ConfigurationPropertyAttribute("types")]
public ContractTypeNameElementCollection ContractTypeNames { get; }
    [ConfigurationPropertyAttribute("scopes")]
public ScopeElementCollection Scopes { get; }
    [ConfigurationPropertyAttribute("extensions")]
public XmlElementElementCollection Extensions { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    public virtual Type get_BehaviorType();
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public ContractTypeNameElementCollection get_ContractTypeNames();
    public ScopeElementCollection get_Scopes();
    public XmlElementElementCollection get_Extensions();
    protected virtual ConfigurationPropertyCollection get_Properties();
    protected internal virtual object CreateBehavior();
}
public class System.ServiceModel.Discovery.Configuration.FindCriteriaElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("types")]
public ContractTypeNameElementCollection ContractTypeNames { get; }
    [ConfigurationPropertyAttribute("scopes")]
public ScopeElementCollection Scopes { get; }
    [ConfigurationPropertyAttribute("scopeMatchBy")]
public Uri ScopeMatchBy { get; public set; }
    [ConfigurationPropertyAttribute("extensions")]
public XmlElementElementCollection Extensions { get; }
    [ConfigurationPropertyAttribute("duration")]
[TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
[ServiceModelTimeSpanValidatorAttribute]
public TimeSpan Duration { get; public set; }
    [ConfigurationPropertyAttribute("maxResults")]
[IntegerValidatorAttribute]
public int MaxResults { get; public set; }
    protected ConfigurationPropertyCollection Properties { get; }
    public ContractTypeNameElementCollection get_ContractTypeNames();
    public ScopeElementCollection get_Scopes();
    public Uri get_ScopeMatchBy();
    public void set_ScopeMatchBy(Uri value);
    public XmlElementElementCollection get_Extensions();
    public TimeSpan get_Duration();
    public void set_Duration(TimeSpan value);
    public int get_MaxResults();
    public void set_MaxResults(int value);
    protected virtual ConfigurationPropertyCollection get_Properties();
    internal void ApplyConfiguration(FindCriteria findCriteria);
    internal void CopyFrom(FindCriteriaElement source);
}
public class System.ServiceModel.Discovery.Configuration.ScopeElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("scope")]
[CallbackValidatorAttribute]
public Uri Scope { get; public set; }
    protected ConfigurationPropertyCollection Properties { get; }
    public Uri get_Scope();
    public void set_Scope(Uri value);
    protected virtual ConfigurationPropertyCollection get_Properties();
    internal static void ScopeValidatorCallback(object scope);
}
[ConfigurationCollectionAttribute("System.ServiceModel.Discovery.Configuration.ScopeElement")]
public class System.ServiceModel.Discovery.Configuration.ScopeElementCollection : ServiceModelConfigurationElementCollection`1<ScopeElement> {
    protected virtual object GetElementKey(ConfigurationElement element);
}
public class System.ServiceModel.Discovery.Configuration.ServiceDiscoveryElement : BehaviorExtensionElement {
    [ConfigurationPropertyAttribute("announcementEndpoints")]
public AnnouncementChannelEndpointElementCollection AnnouncementEndpoints { get; }
    public Type BehaviorType { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    public AnnouncementChannelEndpointElementCollection get_AnnouncementEndpoints();
    public virtual Type get_BehaviorType();
    protected virtual ConfigurationPropertyCollection get_Properties();
    protected internal virtual object CreateBehavior();
}
public class System.ServiceModel.Discovery.Configuration.UdpAnnouncementEndpointCollectionElement : StandardEndpointCollectionElement`2<UdpAnnouncementEndpoint, UdpAnnouncementEndpointElement> {
}
public class System.ServiceModel.Discovery.Configuration.UdpAnnouncementEndpointElement : AnnouncementEndpointElement {
    [ConfigurationPropertyAttribute("maxAnnouncementDelay")]
[TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
[ServiceModelTimeSpanValidatorAttribute]
public TimeSpan MaxAnnouncementDelay { get; public set; }
    [ConfigurationPropertyAttribute("multicastAddress")]
public Uri MulticastAddress { get; public set; }
    [ConfigurationPropertyAttribute("transportSettings")]
public UdpTransportSettingsElement TransportSettings { get; }
    protected internal Type EndpointType { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    public TimeSpan get_MaxAnnouncementDelay();
    public void set_MaxAnnouncementDelay(TimeSpan value);
    public Uri get_MulticastAddress();
    public void set_MulticastAddress(Uri value);
    public UdpTransportSettingsElement get_TransportSettings();
    protected internal virtual Type get_EndpointType();
    protected virtual ConfigurationPropertyCollection get_Properties();
    protected internal virtual ServiceEndpoint CreateServiceEndpoint(ContractDescription contractDescription);
    protected internal virtual void InitializeFrom(ServiceEndpoint endpoint);
    protected virtual void OnInitializeAndValidate(ChannelEndpointElement channelEndpointElement);
    protected virtual void OnInitializeAndValidate(ServiceEndpointElement serviceEndpointElement);
    protected virtual void OnApplyConfiguration(ServiceEndpoint endpoint, ServiceEndpointElement serviceEndpointElement);
    protected virtual void OnApplyConfiguration(ServiceEndpoint endpoint, ChannelEndpointElement serviceEndpointElement);
}
public class System.ServiceModel.Discovery.Configuration.UdpDiscoveryEndpointCollectionElement : StandardEndpointCollectionElement`2<UdpDiscoveryEndpoint, UdpDiscoveryEndpointElement> {
}
public class System.ServiceModel.Discovery.Configuration.UdpDiscoveryEndpointElement : DiscoveryEndpointElement {
    [ConfigurationPropertyAttribute("maxResponseDelay")]
[TypeConverterAttribute("System.ServiceModel.Configuration.TimeSpanOrInfiniteConverter")]
[ServiceModelTimeSpanValidatorAttribute]
public TimeSpan MaxResponseDelay { get; public set; }
    [ConfigurationPropertyAttribute("discoveryMode")]
public ServiceDiscoveryMode DiscoveryMode { get; public set; }
    [ConfigurationPropertyAttribute("multicastAddress")]
public Uri MulticastAddress { get; public set; }
    [ConfigurationPropertyAttribute("transportSettings")]
public UdpTransportSettingsElement TransportSettings { get; }
    protected internal Type EndpointType { get; }
    protected ConfigurationPropertyCollection Properties { get; }
    public TimeSpan get_MaxResponseDelay();
    public void set_MaxResponseDelay(TimeSpan value);
    public ServiceDiscoveryMode get_DiscoveryMode();
    public void set_DiscoveryMode(ServiceDiscoveryMode value);
    public Uri get_MulticastAddress();
    public void set_MulticastAddress(Uri value);
    public UdpTransportSettingsElement get_TransportSettings();
    protected internal virtual Type get_EndpointType();
    protected virtual ConfigurationPropertyCollection get_Properties();
    protected internal virtual ServiceEndpoint CreateServiceEndpoint(ContractDescription contractDescription);
    protected internal virtual void InitializeFrom(ServiceEndpoint endpoint);
    protected virtual void OnInitializeAndValidate(ChannelEndpointElement channelEndpointElement);
    protected virtual void OnInitializeAndValidate(ServiceEndpointElement serviceEndpointElement);
    protected virtual void OnApplyConfiguration(ServiceEndpoint endpoint, ServiceEndpointElement serviceEndpointElement);
    protected virtual void OnApplyConfiguration(ServiceEndpoint endpoint, ChannelEndpointElement serviceEndpointElement);
}
public class System.ServiceModel.Discovery.Configuration.UdpTransportSettingsElement : ConfigurationElement {
    [ConfigurationPropertyAttribute("duplicateMessageHistoryLength")]
[IntegerValidatorAttribute]
public int DuplicateMessageHistoryLength { get; public set; }
    [ConfigurationPropertyAttribute("maxPendingMessageCount")]
[IntegerValidatorAttribute]
public int MaxPendingMessageCount { get; public set; }
    [ConfigurationPropertyAttribute("maxMulticastRetransmitCount")]
[IntegerValidatorAttribute]
public int MaxMulticastRetransmitCount { get; public set; }
    [ConfigurationPropertyAttribute("maxUnicastRetransmitCount")]
[IntegerValidatorAttribute]
public int MaxUnicastRetransmitCount { get; public set; }
    [ConfigurationPropertyAttribute("multicastInterfaceId")]
public string MulticastInterfaceId { get; public set; }
    [ConfigurationPropertyAttribute("socketReceiveBufferSize")]
[IntegerValidatorAttribute]
public int SocketReceiveBufferSize { get; public set; }
    [ConfigurationPropertyAttribute("timeToLive")]
[IntegerValidatorAttribute]
public int TimeToLive { get; public set; }
    [ConfigurationPropertyAttribute("maxReceivedMessageSize")]
[LongValidatorAttribute]
public long MaxReceivedMessageSize { get; public set; }
    [ConfigurationPropertyAttribute("maxBufferPoolSize")]
[LongValidatorAttribute]
public long MaxBufferPoolSize { get; public set; }
    protected ConfigurationPropertyCollection Properties { get; }
    public int get_DuplicateMessageHistoryLength();
    public void set_DuplicateMessageHistoryLength(int value);
    public int get_MaxPendingMessageCount();
    public void set_MaxPendingMessageCount(int value);
    public int get_MaxMulticastRetransmitCount();
    public void set_MaxMulticastRetransmitCount(int value);
    public int get_MaxUnicastRetransmitCount();
    public void set_MaxUnicastRetransmitCount(int value);
    public string get_MulticastInterfaceId();
    public void set_MulticastInterfaceId(string value);
    public int get_SocketReceiveBufferSize();
    public void set_SocketReceiveBufferSize(int value);
    public int get_TimeToLive();
    public void set_TimeToLive(int value);
    public long get_MaxReceivedMessageSize();
    public void set_MaxReceivedMessageSize(long value);
    public long get_MaxBufferPoolSize();
    public void set_MaxBufferPoolSize(long value);
    protected virtual ConfigurationPropertyCollection get_Properties();
    internal void ApplyConfiguration(UdpTransportSettings target);
    internal void InitializeFrom(UdpTransportSettings source);
}
internal class System.ServiceModel.Discovery.ContractTypeNameCollection : NonNullItemCollection`1<XmlQualifiedName> {
    protected virtual void InsertItem(int index, XmlQualifiedName item);
    protected virtual void SetItem(int index, XmlQualifiedName item);
}
internal class System.ServiceModel.Discovery.DefaultDiscoveryService : DiscoveryService {
    public DefaultDiscoveryService(DiscoveryServiceExtension discoveryServiceExtension, DiscoveryMessageSequenceGenerator discoveryMessageSequenceGenerator, int duplicateMessageHistoryLength);
    protected virtual IAsyncResult OnBeginFind(FindRequestContext findRequestContext, AsyncCallback callback, object state);
    protected virtual void OnEndFind(IAsyncResult result);
    protected virtual IAsyncResult OnBeginResolve(ResolveCriteria resolveCriteria, AsyncCallback callback, object state);
    protected virtual EndpointDiscoveryMetadata OnEndResolve(IAsyncResult result);
}
internal class System.ServiceModel.Discovery.DefaultDiscoveryServiceExtension : DiscoveryServiceExtension {
    public DefaultDiscoveryServiceExtension(int duplicateMessageHistoryLength);
    protected virtual DiscoveryService GetDiscoveryService();
}
internal class System.ServiceModel.Discovery.DiscoveryCallbackBehavior : object {
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.Validate(ServiceEndpoint endpoint);
}
public class System.ServiceModel.Discovery.DiscoveryClient : object {
    public ChannelFactory ChannelFactory { get; }
    public ClientCredentials ClientCredentials { get; }
    public ServiceEndpoint Endpoint { get; }
    public IClientChannel InnerChannel { get; }
    private CommunicationState System.ServiceModel.ICommunicationObject.State { get; }
    public DiscoveryClient(string endpointConfigurationName);
    public DiscoveryClient(DiscoveryEndpoint discoveryEndpoint);
    private static DiscoveryClient();
    [CompilerGeneratedAttribute]
public void add_FindCompleted(EventHandler`1<FindCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_FindCompleted(EventHandler`1<FindCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_FindProgressChanged(EventHandler`1<FindProgressChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_FindProgressChanged(EventHandler`1<FindProgressChangedEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ProxyAvailable(EventHandler`1<AnnouncementEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ProxyAvailable(EventHandler`1<AnnouncementEventArgs> value);
    [CompilerGeneratedAttribute]
public void add_ResolveCompleted(EventHandler`1<ResolveCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public void remove_ResolveCompleted(EventHandler`1<ResolveCompletedEventArgs> value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.add_Opening(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.remove_Opening(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.add_Opened(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.remove_Opened(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.add_Closing(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.remove_Closing(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.add_Closed(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.remove_Closed(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.add_Faulted(EventHandler value);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.remove_Faulted(EventHandler value);
    public ChannelFactory get_ChannelFactory();
    public ClientCredentials get_ClientCredentials();
    public ServiceEndpoint get_Endpoint();
    public IClientChannel get_InnerChannel();
    private sealed virtual override CommunicationState System.ServiceModel.ICommunicationObject.get_State();
    private sealed virtual override void System.ServiceModel.ICommunicationObject.Open();
    private sealed virtual override void System.ServiceModel.ICommunicationObject.Open(TimeSpan timeout);
    private sealed virtual override IAsyncResult System.ServiceModel.ICommunicationObject.BeginOpen(AsyncCallback callback, object state);
    private sealed virtual override IAsyncResult System.ServiceModel.ICommunicationObject.BeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.EndOpen(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.Close();
    private sealed virtual override void System.ServiceModel.ICommunicationObject.Close(TimeSpan timeout);
    private sealed virtual override IAsyncResult System.ServiceModel.ICommunicationObject.BeginClose(AsyncCallback callback, object state);
    private sealed virtual override IAsyncResult System.ServiceModel.ICommunicationObject.BeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.EndClose(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.ICommunicationObject.Abort();
    private sealed virtual override void System.IDisposable.Dispose();
    public void Open();
    public FindResponse Find(FindCriteria criteria);
    public void FindAsync(FindCriteria criteria);
    public void FindAsync(FindCriteria criteria, object userState);
    public Task`1<FindResponse> FindTaskAsync(FindCriteria criteria);
    public Task`1<FindResponse> FindTaskAsync(FindCriteria criteria, CancellationToken cancellationToken);
    public Task`1<ResolveResponse> ResolveTaskAsync(ResolveCriteria criteria);
    public Task`1<ResolveResponse> ResolveTaskAsync(ResolveCriteria criteria, CancellationToken cancellationToken);
    public ResolveResponse Resolve(ResolveCriteria criteria);
    public void ResolveAsync(ResolveCriteria criteria);
    public void ResolveAsync(ResolveCriteria criteria, object userState);
    public void CancelAsync(object userState);
    public void Close();
    private sealed virtual override void System.ServiceModel.Discovery.IDiscoveryInnerClientResponse.PostFindCompletedAndRemove(UniqueId operationId, bool cancelled, Exception error);
    private sealed virtual override void System.ServiceModel.Discovery.IDiscoveryInnerClientResponse.PostResolveCompletedAndRemove(UniqueId operationId, bool cancelled, Exception error);
    private sealed virtual override void System.ServiceModel.Discovery.IDiscoveryInnerClientResponse.ProbeMatchOperation(UniqueId relatesTo, DiscoveryMessageSequence discoveryMessageSequence, Collection`1<EndpointDiscoveryMetadata> endpointDiscoveryMetadataCollection, bool findCompleted);
    private sealed virtual override void System.ServiceModel.Discovery.IDiscoveryInnerClientResponse.ResolveMatchOperation(UniqueId relatesTo, DiscoveryMessageSequence discoveryMessageSequence, EndpointDiscoveryMetadata endpointDiscoveryMetadata);
    private sealed virtual override void System.ServiceModel.Discovery.IDiscoveryInnerClientResponse.HelloOperation(UniqueId relatesTo, DiscoveryMessageSequence proxyMessageSequence, EndpointDiscoveryMetadata proxyEndpointMetadata);
}
public class System.ServiceModel.Discovery.DiscoveryClientBindingElement : BindingElement {
    public static EndpointAddress DiscoveryEndpointAddress;
    public DiscoveryEndpointProvider DiscoveryEndpointProvider { get; public set; }
    public FindCriteria FindCriteria { get; public set; }
    public DiscoveryClientBindingElement(DiscoveryEndpointProvider discoveryEndpointProvider, FindCriteria findCriteria);
    private static DiscoveryClientBindingElement();
    public DiscoveryEndpointProvider get_DiscoveryEndpointProvider();
    public void set_DiscoveryEndpointProvider(DiscoveryEndpointProvider value);
    public FindCriteria get_FindCriteria();
    public void set_FindCriteria(FindCriteria value);
    public virtual bool CanBuildChannelFactory(BindingContext context);
    public virtual IChannelFactory`1<TChannel> BuildChannelFactory(BindingContext context);
    public virtual bool CanBuildChannelListener(BindingContext context);
    public virtual IChannelListener`1<TChannel> BuildChannelListener(BindingContext context);
    public virtual BindingElement Clone();
    public virtual T GetProperty(BindingContext context);
}
internal abstract class System.ServiceModel.Discovery.DiscoveryClientChannelBase`1 : ChannelBase {
    protected TChannel InnerChannel { get; }
    public DiscoveryClientChannelBase`1(ChannelManagerBase channelManagerBase, IChannelFactory`1<TChannel> innerChannelFactory, FindCriteria findCriteria, DiscoveryEndpointProvider discoveryEndpointProvider);
    protected TChannel get_InnerChannel();
    public virtual T GetProperty();
    protected virtual void OnOpen(TimeSpan timeout);
    protected virtual IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnEndOpen(IAsyncResult result);
    protected virtual void OnClosing();
    protected virtual void OnClose(TimeSpan timeout);
    protected virtual IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnEndClose(IAsyncResult result);
    protected virtual void OnAbort();
    public TChannel BuildChannel(TimeSpan timeout);
}
internal class System.ServiceModel.Discovery.DiscoveryClientChannelFactory`1 : ChannelFactoryBase`1<TChannel> {
    public DiscoveryClientChannelFactory`1(IChannelFactory`1<TChannel> innerChannelFactory, FindCriteria findCriteria, DiscoveryEndpointProvider discoveryEndpointProvider);
    protected virtual TChannel OnCreateChannel(EndpointAddress address, Uri via);
    public virtual T GetProperty();
    protected virtual IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnEndOpen(IAsyncResult result);
    protected virtual void OnOpen(TimeSpan timeout);
    protected virtual IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnEndClose(IAsyncResult result);
    protected virtual void OnClose(TimeSpan timeout);
    protected virtual void OnAbort();
}
internal class System.ServiceModel.Discovery.DiscoveryClientDuplexChannel`1 : DiscoveryClientOutputChannel`1<TChannel> {
    public EndpointAddress LocalAddress { get; }
    public DiscoveryClientDuplexChannel`1(ChannelManagerBase channelManagerBase, IChannelFactory`1<TChannel> innerChannelFactory, FindCriteria findCriteria, DiscoveryEndpointProvider discoveryEndpointProvider);
    public sealed virtual EndpointAddress get_LocalAddress();
    public virtual IAsyncResult BeginSend(Message message, TimeSpan timeout, AsyncCallback callback, object state);
    public virtual void Send(Message message, TimeSpan timeout);
    public sealed virtual IAsyncResult BeginReceive(TimeSpan timeout, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginReceive(AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginTryReceive(TimeSpan timeout, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginWaitForMessage(TimeSpan timeout, AsyncCallback callback, object state);
    public sealed virtual Message EndReceive(IAsyncResult result);
    public sealed virtual bool EndTryReceive(IAsyncResult result, Message& message);
    public sealed virtual bool EndWaitForMessage(IAsyncResult result);
    public sealed virtual Message Receive(TimeSpan timeout);
    public sealed virtual Message Receive();
    public sealed virtual bool TryReceive(TimeSpan timeout, Message& message);
    public sealed virtual bool WaitForMessage(TimeSpan timeout);
}
internal class System.ServiceModel.Discovery.DiscoveryClientDuplexSessionChannel : DiscoveryClientDuplexChannel`1<IDuplexSessionChannel> {
    public IDuplexSession Session { get; }
    public DiscoveryClientDuplexSessionChannel(ChannelManagerBase channelManagerBase, IChannelFactory`1<IDuplexSessionChannel> innerChannelFactory, FindCriteria findCriteria, DiscoveryEndpointProvider discoveryEndpointProvider);
    public sealed virtual IDuplexSession get_Session();
}
internal class System.ServiceModel.Discovery.DiscoveryClientOutputChannel`1 : DiscoveryClientChannelBase`1<TChannel> {
    public EndpointAddress RemoteAddress { get; }
    public Uri Via { get; }
    public DiscoveryClientOutputChannel`1(ChannelManagerBase channelManagerBase, IChannelFactory`1<TChannel> innerChannelFactory, FindCriteria findCriteria, DiscoveryEndpointProvider discoveryEndpointProvider);
    public sealed virtual EndpointAddress get_RemoteAddress();
    public sealed virtual Uri get_Via();
    public virtual IAsyncResult BeginSend(Message message, TimeSpan timeout, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginSend(Message message, AsyncCallback callback, object state);
    public sealed virtual void EndSend(IAsyncResult result);
    public virtual void Send(Message message, TimeSpan timeout);
    public sealed virtual void Send(Message message);
}
internal class System.ServiceModel.Discovery.DiscoveryClientOutputSessionChannel : DiscoveryClientOutputChannel`1<IOutputSessionChannel> {
    public IOutputSession Session { get; }
    public DiscoveryClientOutputSessionChannel(ChannelManagerBase channelManagerBase, IChannelFactory`1<IOutputSessionChannel> innerChannelFactory, FindCriteria findCriteria, DiscoveryEndpointProvider discoveryEndpointProvider);
    public sealed virtual IOutputSession get_Session();
}
internal class System.ServiceModel.Discovery.DiscoveryClientRequestChannel`1 : DiscoveryClientChannelBase`1<TChannel> {
    public EndpointAddress RemoteAddress { get; }
    public Uri Via { get; }
    public DiscoveryClientRequestChannel`1(ChannelManagerBase channelManagerBase, IChannelFactory`1<TChannel> innerChannelFactory, FindCriteria findCriteria, DiscoveryEndpointProvider discoveryEndpointProvider);
    public sealed virtual EndpointAddress get_RemoteAddress();
    public sealed virtual Uri get_Via();
    public sealed virtual IAsyncResult BeginRequest(Message message, TimeSpan timeout, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginRequest(Message message, AsyncCallback callback, object state);
    public sealed virtual Message EndRequest(IAsyncResult result);
    public sealed virtual Message Request(Message message, TimeSpan timeout);
    public sealed virtual Message Request(Message message);
}
internal class System.ServiceModel.Discovery.DiscoveryClientRequestSessionChannel : DiscoveryClientRequestChannel`1<IRequestSessionChannel> {
    public IOutputSession Session { get; }
    public DiscoveryClientRequestSessionChannel(ChannelManagerBase channelManagerBase, IChannelFactory`1<IRequestSessionChannel> innerChannelFactory, FindCriteria findCriteria, DiscoveryEndpointProvider discoveryEndpointProvider);
    public sealed virtual IOutputSession get_Session();
}
internal static class System.ServiceModel.Discovery.DiscoveryDefaults : object {
    public static TimeSpan DiscoveryOperationDuration;
    public static Uri ScopeMatchBy;
    public static string DiscoveryOperationDurationString;
    public static int DuplicateMessageHistoryLength;
    private static DiscoveryDefaults();
}
public class System.ServiceModel.Discovery.DiscoveryEndpoint : ServiceEndpoint {
    public TimeSpan MaxResponseDelay { get; public set; }
    public DiscoveryVersion DiscoveryVersion { get; }
    public ServiceDiscoveryMode DiscoveryMode { get; }
    public DiscoveryEndpoint(Binding binding, EndpointAddress endpointAddress);
    public DiscoveryEndpoint(DiscoveryVersion discoveryVersion, ServiceDiscoveryMode discoveryMode);
    public DiscoveryEndpoint(DiscoveryVersion discoveryVersion, ServiceDiscoveryMode discoveryMode, Binding binding, EndpointAddress endpointAddress);
    public TimeSpan get_MaxResponseDelay();
    public void set_MaxResponseDelay(TimeSpan value);
    public DiscoveryVersion get_DiscoveryVersion();
    public ServiceDiscoveryMode get_DiscoveryMode();
}
public abstract class System.ServiceModel.Discovery.DiscoveryEndpointProvider : object {
    public abstract virtual DiscoveryEndpoint GetDiscoveryEndpoint();
}
internal class System.ServiceModel.Discovery.DiscoveryEndpointValidator : object {
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.Validate(ServiceEndpoint endpoint);
}
internal class System.ServiceModel.Discovery.DiscoveryMessageProperty : object {
    public static string Name;
    public object CorrelationState { get; public set; }
    public DiscoveryMessageProperty(object correlationState);
    [CompilerGeneratedAttribute]
public object get_CorrelationState();
    [CompilerGeneratedAttribute]
public void set_CorrelationState(object value);
}
public class System.ServiceModel.Discovery.DiscoveryMessageSequence : object {
    public long InstanceId { get; private set; }
    public Uri SequenceId { get; private set; }
    public long MessageNumber { get; private set; }
    internal DiscoveryMessageSequence(long instanceId, Uri sequenceId, long messageNumber);
    [CompilerGeneratedAttribute]
public long get_InstanceId();
    [CompilerGeneratedAttribute]
private void set_InstanceId(long value);
    [CompilerGeneratedAttribute]
public Uri get_SequenceId();
    [CompilerGeneratedAttribute]
private void set_SequenceId(Uri value);
    [CompilerGeneratedAttribute]
public long get_MessageNumber();
    [CompilerGeneratedAttribute]
private void set_MessageNumber(long value);
    public static bool op_Equality(DiscoveryMessageSequence messageSequence1, DiscoveryMessageSequence messageSequence2);
    public static bool op_Inequality(DiscoveryMessageSequence messageSequence1, DiscoveryMessageSequence messageSequence2);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(DiscoveryMessageSequence other);
    public virtual string ToString();
    public bool CanCompareTo(DiscoveryMessageSequence other);
    public virtual int GetHashCode();
    public sealed virtual int CompareTo(DiscoveryMessageSequence other);
    internal void ReadFrom(XmlReader reader);
    internal void WriteTo(XmlWriter writer);
}
public class System.ServiceModel.Discovery.DiscoveryMessageSequenceGenerator : object {
    public DiscoveryMessageSequenceGenerator(long instanceId, Uri sequenceId);
    private static DiscoveryMessageSequenceGenerator();
    public DiscoveryMessageSequence Next();
}
internal class System.ServiceModel.Discovery.DiscoveryOperationContext : object {
    public ServiceDiscoveryMode DiscoveryMode { get; }
    public EventTraceActivity EventTraceActivity { get; }
    public TimeSpan MaxResponseDelay { get; }
    public DiscoveryOperationContext(OperationContext operationContext);
    public ServiceDiscoveryMode get_DiscoveryMode();
    public EventTraceActivity get_EventTraceActivity();
    public TimeSpan get_MaxResponseDelay();
    public TResponseChannel GetCallbackChannel();
    public void AddressDuplexResponseMessage(OperationContext responseOperationContext);
    public void AddressRequestResponseMessage(OperationContext responseOperationContext);
}
public class System.ServiceModel.Discovery.DiscoveryOperationContextExtension : object {
    public TimeSpan MaxResponseDelay { get; internal set; }
    public ServiceDiscoveryMode DiscoveryMode { get; }
    public DiscoveryVersion DiscoveryVersion { get; }
    internal DiscoveryOperationContextExtension(TimeSpan maxResponseDelay, ServiceDiscoveryMode discoveryMode, DiscoveryVersion discoveryVersion);
    public TimeSpan get_MaxResponseDelay();
    internal void set_MaxResponseDelay(TimeSpan value);
    public ServiceDiscoveryMode get_DiscoveryMode();
    public DiscoveryVersion get_DiscoveryVersion();
    private sealed virtual override void System.ServiceModel.IExtension<System.ServiceModel.OperationContext>.Attach(OperationContext owner);
    private sealed virtual override void System.ServiceModel.IExtension<System.ServiceModel.OperationContext>.Detach(OperationContext owner);
}
internal class System.ServiceModel.Discovery.DiscoveryOperationContextExtensionInitializer : object {
    public DiscoveryOperationContextExtensionInitializer(DiscoveryOperationContextExtension discoveryOperationContextExtension);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.Validate(ServiceEndpoint endpoint);
    private sealed virtual override object System.ServiceModel.Dispatcher.IDispatchMessageInspector.AfterReceiveRequest(Message& request, IClientChannel channel, InstanceContext instanceContext);
    private sealed virtual override void System.ServiceModel.Dispatcher.IDispatchMessageInspector.BeforeSendReply(Message& reply, object correlationState);
}
public abstract class System.ServiceModel.Discovery.DiscoveryProxy : object {
    protected DiscoveryProxy(DiscoveryMessageSequenceGenerator messageSequenceGenerator);
    protected DiscoveryProxy(DiscoveryMessageSequenceGenerator messageSequenceGenerator, int duplicateMessageHistoryLength);
    private sealed virtual override void System.ServiceModel.Discovery.VersionApril2005.IAnnouncementContractApril2005.HelloOperation(HelloMessageApril2005 message);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.VersionApril2005.IAnnouncementContractApril2005.BeginHelloOperation(HelloMessageApril2005 message, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.VersionApril2005.IAnnouncementContractApril2005.EndHelloOperation(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.Discovery.VersionApril2005.IAnnouncementContractApril2005.ByeOperation(ByeMessageApril2005 message);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.VersionApril2005.IAnnouncementContractApril2005.BeginByeOperation(ByeMessageApril2005 message, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.VersionApril2005.IAnnouncementContractApril2005.EndByeOperation(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.Discovery.Version11.IAnnouncementContract11.HelloOperation(HelloMessage11 message);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.Version11.IAnnouncementContract11.BeginHelloOperation(HelloMessage11 message, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.Version11.IAnnouncementContract11.EndHelloOperation(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.Discovery.Version11.IAnnouncementContract11.ByeOperation(ByeMessage11 message);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.Version11.IAnnouncementContract11.BeginByeOperation(ByeMessage11 message, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.Version11.IAnnouncementContract11.EndByeOperation(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.Discovery.VersionCD1.IAnnouncementContractCD1.HelloOperation(HelloMessageCD1 message);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.VersionCD1.IAnnouncementContractCD1.BeginHelloOperation(HelloMessageCD1 message, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.VersionCD1.IAnnouncementContractCD1.EndHelloOperation(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.Discovery.VersionCD1.IAnnouncementContractCD1.ByeOperation(ByeMessageCD1 message);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.VersionCD1.IAnnouncementContractCD1.BeginByeOperation(ByeMessageCD1 message, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.VersionCD1.IAnnouncementContractCD1.EndByeOperation(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.Discovery.VersionApril2005.IDiscoveryContractApril2005.ProbeOperation(ProbeMessageApril2005 request);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.VersionApril2005.IDiscoveryContractApril2005.BeginProbeOperation(ProbeMessageApril2005 request, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.VersionApril2005.IDiscoveryContractApril2005.EndProbeOperation(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.Discovery.VersionApril2005.IDiscoveryContractApril2005.ResolveOperation(ResolveMessageApril2005 request);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.VersionApril2005.IDiscoveryContractApril2005.BeginResolveOperation(ResolveMessageApril2005 request, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.VersionApril2005.IDiscoveryContractApril2005.EndResolveOperation(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.Discovery.Version11.IDiscoveryContractAdhoc11.ProbeOperation(ProbeMessage11 request);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.Version11.IDiscoveryContractAdhoc11.BeginProbeOperation(ProbeMessage11 request, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.Version11.IDiscoveryContractAdhoc11.EndProbeOperation(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.Discovery.Version11.IDiscoveryContractAdhoc11.ResolveOperation(ResolveMessage11 request);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.Version11.IDiscoveryContractAdhoc11.BeginResolveOperation(ResolveMessage11 request, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.Version11.IDiscoveryContractAdhoc11.EndResolveOperation(IAsyncResult result);
    private sealed virtual override ProbeMatchesMessage11 System.ServiceModel.Discovery.Version11.IDiscoveryContractManaged11.ProbeOperation(ProbeMessage11 request);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.Version11.IDiscoveryContractManaged11.BeginProbeOperation(ProbeMessage11 request, AsyncCallback callback, object state);
    private sealed virtual override ProbeMatchesMessage11 System.ServiceModel.Discovery.Version11.IDiscoveryContractManaged11.EndProbeOperation(IAsyncResult result);
    private sealed virtual override ResolveMatchesMessage11 System.ServiceModel.Discovery.Version11.IDiscoveryContractManaged11.ResolveOperation(ResolveMessage11 request);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.Version11.IDiscoveryContractManaged11.BeginResolveOperation(ResolveMessage11 request, AsyncCallback callback, object state);
    private sealed virtual override ResolveMatchesMessage11 System.ServiceModel.Discovery.Version11.IDiscoveryContractManaged11.EndResolveOperation(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.Discovery.VersionCD1.IDiscoveryContractAdhocCD1.ProbeOperation(ProbeMessageCD1 request);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.VersionCD1.IDiscoveryContractAdhocCD1.BeginProbeOperation(ProbeMessageCD1 request, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.VersionCD1.IDiscoveryContractAdhocCD1.EndProbeOperation(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.Discovery.VersionCD1.IDiscoveryContractAdhocCD1.ResolveOperation(ResolveMessageCD1 request);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.VersionCD1.IDiscoveryContractAdhocCD1.BeginResolveOperation(ResolveMessageCD1 request, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.VersionCD1.IDiscoveryContractAdhocCD1.EndResolveOperation(IAsyncResult result);
    private sealed virtual override ProbeMatchesMessageCD1 System.ServiceModel.Discovery.VersionCD1.IDiscoveryContractManagedCD1.ProbeOperation(ProbeMessageCD1 request);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.VersionCD1.IDiscoveryContractManagedCD1.BeginProbeOperation(ProbeMessageCD1 request, AsyncCallback callback, object state);
    private sealed virtual override ProbeMatchesMessageCD1 System.ServiceModel.Discovery.VersionCD1.IDiscoveryContractManagedCD1.EndProbeOperation(IAsyncResult result);
    private sealed virtual override ResolveMatchesMessageCD1 System.ServiceModel.Discovery.VersionCD1.IDiscoveryContractManagedCD1.ResolveOperation(ResolveMessageCD1 request);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.VersionCD1.IDiscoveryContractManagedCD1.BeginResolveOperation(ResolveMessageCD1 request, AsyncCallback callback, object state);
    private sealed virtual override ResolveMatchesMessageCD1 System.ServiceModel.Discovery.VersionCD1.IDiscoveryContractManagedCD1.EndResolveOperation(IAsyncResult result);
    private sealed virtual override bool System.ServiceModel.Discovery.IAnnouncementServiceImplementation.IsDuplicate(UniqueId messageId);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.IAnnouncementServiceImplementation.OnBeginOnlineAnnouncement(DiscoveryMessageSequence messageSequence, EndpointDiscoveryMetadata endpointDiscoveryMetadata, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.IAnnouncementServiceImplementation.OnEndOnlineAnnouncement(IAsyncResult result);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.IAnnouncementServiceImplementation.OnBeginOfflineAnnouncement(DiscoveryMessageSequence messageSequence, EndpointDiscoveryMetadata endpointDiscoveryMetadata, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.IAnnouncementServiceImplementation.OnEndOfflineAnnouncement(IAsyncResult result);
    private sealed virtual override bool System.ServiceModel.Discovery.IDiscoveryServiceImplementation.IsDuplicate(UniqueId messageId);
    private sealed virtual override DiscoveryMessageSequence System.ServiceModel.Discovery.IDiscoveryServiceImplementation.GetNextMessageSequence();
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.IDiscoveryServiceImplementation.BeginFind(FindRequestContext findRequestContext, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.IDiscoveryServiceImplementation.EndFind(IAsyncResult result);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.IDiscoveryServiceImplementation.BeginResolve(ResolveCriteria resolveCriteria, AsyncCallback callback, object state);
    private sealed virtual override EndpointDiscoveryMetadata System.ServiceModel.Discovery.IDiscoveryServiceImplementation.EndResolve(IAsyncResult result);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.IMulticastSuppressionImplementation.BeginShouldRedirectFind(FindCriteria findCriteria, AsyncCallback callback, object state);
    private sealed virtual override bool System.ServiceModel.Discovery.IMulticastSuppressionImplementation.EndShouldRedirectFind(IAsyncResult result, Collection`1& redirectionEndpoints);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.IMulticastSuppressionImplementation.BeginShouldRedirectResolve(ResolveCriteria resolveCriteria, AsyncCallback callback, object state);
    private sealed virtual override bool System.ServiceModel.Discovery.IMulticastSuppressionImplementation.EndShouldRedirectResolve(IAsyncResult result, Collection`1& redirectionEndpoints);
    protected virtual IAsyncResult BeginShouldRedirectFind(FindCriteria resolveCriteria, AsyncCallback callback, object state);
    protected virtual bool EndShouldRedirectFind(IAsyncResult result, Collection`1& redirectionEndpoints);
    protected virtual IAsyncResult BeginShouldRedirectResolve(ResolveCriteria findCriteria, AsyncCallback callback, object state);
    protected virtual bool EndShouldRedirectResolve(IAsyncResult result, Collection`1& redirectionEndpoints);
    protected abstract virtual IAsyncResult OnBeginOnlineAnnouncement(DiscoveryMessageSequence messageSequence, EndpointDiscoveryMetadata endpointDiscoveryMetadata, AsyncCallback callback, object state);
    protected abstract virtual void OnEndOnlineAnnouncement(IAsyncResult result);
    protected abstract virtual IAsyncResult OnBeginOfflineAnnouncement(DiscoveryMessageSequence messageSequence, EndpointDiscoveryMetadata endpointDiscoveryMetadata, AsyncCallback callback, object state);
    protected abstract virtual void OnEndOfflineAnnouncement(IAsyncResult result);
    protected abstract virtual IAsyncResult OnBeginFind(FindRequestContext findRequestContext, AsyncCallback callback, object state);
    protected abstract virtual void OnEndFind(IAsyncResult result);
    protected abstract virtual IAsyncResult OnBeginResolve(ResolveCriteria resolveCriteria, AsyncCallback callback, object state);
    protected abstract virtual EndpointDiscoveryMetadata OnEndResolve(IAsyncResult result);
}
public abstract class System.ServiceModel.Discovery.DiscoveryService : object {
    internal DiscoveryMessageSequenceGenerator MessageSequenceGenerator { get; }
    protected DiscoveryService(DiscoveryMessageSequenceGenerator discoveryMessageSequenceGenerator);
    protected DiscoveryService(DiscoveryMessageSequenceGenerator discoveryMessageSequenceGenerator, int duplicateMessageHistoryLength);
    internal DiscoveryMessageSequenceGenerator get_MessageSequenceGenerator();
    private sealed virtual override void System.ServiceModel.Discovery.VersionApril2005.IDiscoveryContractApril2005.ProbeOperation(ProbeMessageApril2005 request);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.VersionApril2005.IDiscoveryContractApril2005.BeginProbeOperation(ProbeMessageApril2005 request, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.VersionApril2005.IDiscoveryContractApril2005.EndProbeOperation(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.Discovery.VersionApril2005.IDiscoveryContractApril2005.ResolveOperation(ResolveMessageApril2005 request);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.VersionApril2005.IDiscoveryContractApril2005.BeginResolveOperation(ResolveMessageApril2005 request, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.VersionApril2005.IDiscoveryContractApril2005.EndResolveOperation(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.Discovery.Version11.IDiscoveryContractAdhoc11.ProbeOperation(ProbeMessage11 request);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.Version11.IDiscoveryContractAdhoc11.BeginProbeOperation(ProbeMessage11 request, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.Version11.IDiscoveryContractAdhoc11.EndProbeOperation(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.Discovery.Version11.IDiscoveryContractAdhoc11.ResolveOperation(ResolveMessage11 request);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.Version11.IDiscoveryContractAdhoc11.BeginResolveOperation(ResolveMessage11 request, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.Version11.IDiscoveryContractAdhoc11.EndResolveOperation(IAsyncResult result);
    private sealed virtual override ProbeMatchesMessage11 System.ServiceModel.Discovery.Version11.IDiscoveryContractManaged11.ProbeOperation(ProbeMessage11 request);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.Version11.IDiscoveryContractManaged11.BeginProbeOperation(ProbeMessage11 request, AsyncCallback callback, object state);
    private sealed virtual override ProbeMatchesMessage11 System.ServiceModel.Discovery.Version11.IDiscoveryContractManaged11.EndProbeOperation(IAsyncResult result);
    private sealed virtual override ResolveMatchesMessage11 System.ServiceModel.Discovery.Version11.IDiscoveryContractManaged11.ResolveOperation(ResolveMessage11 request);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.Version11.IDiscoveryContractManaged11.BeginResolveOperation(ResolveMessage11 request, AsyncCallback callback, object state);
    private sealed virtual override ResolveMatchesMessage11 System.ServiceModel.Discovery.Version11.IDiscoveryContractManaged11.EndResolveOperation(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.Discovery.VersionCD1.IDiscoveryContractAdhocCD1.ProbeOperation(ProbeMessageCD1 request);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.VersionCD1.IDiscoveryContractAdhocCD1.BeginProbeOperation(ProbeMessageCD1 request, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.VersionCD1.IDiscoveryContractAdhocCD1.EndProbeOperation(IAsyncResult result);
    private sealed virtual override void System.ServiceModel.Discovery.VersionCD1.IDiscoveryContractAdhocCD1.ResolveOperation(ResolveMessageCD1 request);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.VersionCD1.IDiscoveryContractAdhocCD1.BeginResolveOperation(ResolveMessageCD1 request, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.VersionCD1.IDiscoveryContractAdhocCD1.EndResolveOperation(IAsyncResult result);
    private sealed virtual override ProbeMatchesMessageCD1 System.ServiceModel.Discovery.VersionCD1.IDiscoveryContractManagedCD1.ProbeOperation(ProbeMessageCD1 request);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.VersionCD1.IDiscoveryContractManagedCD1.BeginProbeOperation(ProbeMessageCD1 request, AsyncCallback callback, object state);
    private sealed virtual override ProbeMatchesMessageCD1 System.ServiceModel.Discovery.VersionCD1.IDiscoveryContractManagedCD1.EndProbeOperation(IAsyncResult result);
    private sealed virtual override ResolveMatchesMessageCD1 System.ServiceModel.Discovery.VersionCD1.IDiscoveryContractManagedCD1.ResolveOperation(ResolveMessageCD1 request);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.VersionCD1.IDiscoveryContractManagedCD1.BeginResolveOperation(ResolveMessageCD1 request, AsyncCallback callback, object state);
    private sealed virtual override ResolveMatchesMessageCD1 System.ServiceModel.Discovery.VersionCD1.IDiscoveryContractManagedCD1.EndResolveOperation(IAsyncResult result);
    private sealed virtual override bool System.ServiceModel.Discovery.IDiscoveryServiceImplementation.IsDuplicate(UniqueId messageId);
    private sealed virtual override DiscoveryMessageSequence System.ServiceModel.Discovery.IDiscoveryServiceImplementation.GetNextMessageSequence();
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.IDiscoveryServiceImplementation.BeginFind(FindRequestContext findRequestContext, AsyncCallback callback, object state);
    private sealed virtual override void System.ServiceModel.Discovery.IDiscoveryServiceImplementation.EndFind(IAsyncResult result);
    private sealed virtual override IAsyncResult System.ServiceModel.Discovery.IDiscoveryServiceImplementation.BeginResolve(ResolveCriteria resolveCriteria, AsyncCallback callback, object state);
    private sealed virtual override EndpointDiscoveryMetadata System.ServiceModel.Discovery.IDiscoveryServiceImplementation.EndResolve(IAsyncResult result);
    internal static bool EnsureMessageId();
    internal static bool EnsureReplyTo();
    protected abstract virtual IAsyncResult OnBeginFind(FindRequestContext findRequestContext, AsyncCallback callback, object state);
    protected abstract virtual void OnEndFind(IAsyncResult result);
    protected abstract virtual IAsyncResult OnBeginResolve(ResolveCriteria resolveCriteria, AsyncCallback callback, object state);
    protected abstract virtual EndpointDiscoveryMetadata OnEndResolve(IAsyncResult result);
}
public abstract class System.ServiceModel.Discovery.DiscoveryServiceExtension : object {
    public ReadOnlyCollection`1<EndpointDiscoveryMetadata> PublishedEndpoints { get; }
    internal Collection`1<EndpointDiscoveryMetadata> InternalPublishedEndpoints { get; }
    public ReadOnlyCollection`1<EndpointDiscoveryMetadata> get_PublishedEndpoints();
    internal Collection`1<EndpointDiscoveryMetadata> get_InternalPublishedEndpoints();
    private sealed virtual override void System.ServiceModel.IExtension<System.ServiceModel.ServiceHostBase>.Attach(ServiceHostBase owner);
    private sealed virtual override void System.ServiceModel.IExtension<System.ServiceModel.ServiceHostBase>.Detach(ServiceHostBase owner);
    internal DiscoveryService ValidateAndGetDiscoveryService();
    protected abstract virtual DiscoveryService GetDiscoveryService();
}
internal class System.ServiceModel.Discovery.DiscoveryUtility : object {
    public static Collection`1<EndpointDiscoveryMetadata> ToEndpointDiscoveryMetadataCollection(Collection`1<EndpointDiscoveryMetadataApril2005> endpointDiscoveryMetadataApril2005Collection);
    public static Collection`1<EndpointDiscoveryMetadata> ToEndpointDiscoveryMetadataCollection(Collection`1<EndpointDiscoveryMetadataCD1> endpointDiscoveryMetadataCD1Collection);
    public static Collection`1<EndpointDiscoveryMetadata> ToEndpointDiscoveryMetadataCollection(Collection`1<EndpointDiscoveryMetadata11> endpointDiscoveryMetadata11Collection);
    public static ContractDescription GetContract(Type contractType);
    public static DiscoveryMessageSequence ToDiscoveryMessageSequenceOrNull(DiscoveryMessageSequenceApril2005 messageSequence);
    public static DiscoveryMessageSequence ToDiscoveryMessageSequenceOrNull(DiscoveryMessageSequenceCD1 messageSequence);
    public static DiscoveryMessageSequence ToDiscoveryMessageSequenceOrNull(DiscoveryMessageSequence11 messageSequence);
    public static bool IsCompatible(OperationContext context, IContextChannel channel);
}
public class System.ServiceModel.Discovery.DiscoveryVersion : object {
    public static DiscoveryVersion WSDiscoveryApril2005 { get; }
    public static DiscoveryVersion WSDiscoveryCD1 { get; }
    public static DiscoveryVersion WSDiscovery11 { get; }
    public string Namespace { get; }
    public string Name { get; }
    public MessageVersion MessageVersion { get; }
    public Uri AdhocAddress { get; }
    internal static DiscoveryVersion DefaultDiscoveryVersion { get; }
    internal IDiscoveryVersionImplementation Implementation { get; }
    private static DiscoveryVersion();
    public static DiscoveryVersion get_WSDiscoveryApril2005();
    public static DiscoveryVersion get_WSDiscoveryCD1();
    public static DiscoveryVersion get_WSDiscovery11();
    public string get_Namespace();
    public string get_Name();
    public MessageVersion get_MessageVersion();
    public Uri get_AdhocAddress();
    internal static DiscoveryVersion get_DefaultDiscoveryVersion();
    internal IDiscoveryVersionImplementation get_Implementation();
    public static DiscoveryVersion FromName(string name);
    public virtual string ToString();
}
internal class System.ServiceModel.Discovery.DiscoveryViaBehavior : object {
    public Uri Via { get; public set; }
    public DiscoveryViaBehavior(Uri via);
    public Uri get_Via();
    public void set_Via(Uri value);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.Validate(ServiceEndpoint endpoint);
}
public class System.ServiceModel.Discovery.DynamicEndpoint : ServiceEndpoint {
    public DiscoveryEndpointProvider DiscoveryEndpointProvider { get; public set; }
    public FindCriteria FindCriteria { get; public set; }
    internal DynamicEndpoint(ContractDescription contract);
    public DynamicEndpoint(ContractDescription contract, Binding binding);
    public DiscoveryEndpointProvider get_DiscoveryEndpointProvider();
    public void set_DiscoveryEndpointProvider(DiscoveryEndpointProvider value);
    public FindCriteria get_FindCriteria();
    public void set_FindCriteria(FindCriteria value);
    internal bool ValidateAndInsertDiscoveryClientBindingElement(Binding binding);
}
public class System.ServiceModel.Discovery.EndpointDiscoveryBehavior : object {
    public bool Enabled { get; public set; }
    public Collection`1<XmlQualifiedName> ContractTypeNames { get; }
    public Collection`1<Uri> Scopes { get; }
    public Collection`1<XElement> Extensions { get; }
    internal Collection`1<XmlQualifiedName> InternalContractTypeNames { get; }
    internal Collection`1<Uri> InternalScopes { get; }
    internal Collection`1<XElement> InternalExtensions { get; }
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public Collection`1<XmlQualifiedName> get_ContractTypeNames();
    public Collection`1<Uri> get_Scopes();
    public Collection`1<XElement> get_Extensions();
    internal Collection`1<XmlQualifiedName> get_InternalContractTypeNames();
    internal Collection`1<Uri> get_InternalScopes();
    internal Collection`1<XElement> get_InternalExtensions();
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.Validate(ServiceEndpoint endpoint);
}
public class System.ServiceModel.Discovery.EndpointDiscoveryMetadata : object {
    public Collection`1<XmlQualifiedName> ContractTypeNames { get; }
    public EndpointAddress Address { get; public set; }
    public Collection`1<XElement> Extensions { get; }
    public Collection`1<Uri> ListenUris { get; }
    public Collection`1<Uri> Scopes { get; }
    public int Version { get; public set; }
    internal static XmlQualifiedName MetadataContractName { get; }
    internal Collection`1<XmlQualifiedName> InternalContractTypeNames { get; }
    internal String[] CompiledScopes { get; }
    internal bool IsOpen { get; }
    public Collection`1<XmlQualifiedName> get_ContractTypeNames();
    public EndpointAddress get_Address();
    public void set_Address(EndpointAddress value);
    public Collection`1<XElement> get_Extensions();
    public Collection`1<Uri> get_ListenUris();
    public Collection`1<Uri> get_Scopes();
    public int get_Version();
    public void set_Version(int value);
    internal static XmlQualifiedName get_MetadataContractName();
    internal Collection`1<XmlQualifiedName> get_InternalContractTypeNames();
    internal String[] get_CompiledScopes();
    internal bool get_IsOpen();
    public static EndpointDiscoveryMetadata FromServiceEndpoint(ServiceEndpoint endpoint);
    public static EndpointDiscoveryMetadata FromServiceEndpoint(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher);
    internal static bool IsDiscoverySystemEndpoint(EndpointDispatcher endpointDispatcher);
    internal static bool IsDiscoverySystemEndpoint(ServiceEndpoint endpoint);
    internal static bool IsMetadataEndpoint(ServiceEndpoint endpoint);
    internal void ReadFrom(DiscoveryVersion discoveryVersion, XmlReader reader);
    internal void WriteTo(DiscoveryVersion discoveryVersion, XmlWriter writer);
    internal void Open();
}
public class System.ServiceModel.Discovery.FindCompletedEventArgs : AsyncCompletedEventArgs {
    public FindResponse Result { get; }
    internal FindCompletedEventArgs(Exception error, bool cancelled, object userState, FindResponse result);
    public FindResponse get_Result();
}
public class System.ServiceModel.Discovery.FindCriteria : object {
    public static Uri ScopeMatchByExact;
    public static Uri ScopeMatchByLdap;
    public static Uri ScopeMatchByPrefix;
    public static Uri ScopeMatchByUuid;
    public static Uri ScopeMatchByNone;
    public Collection`1<XmlQualifiedName> ContractTypeNames { get; }
    public Collection`1<XElement> Extensions { get; }
    public Uri ScopeMatchBy { get; public set; }
    public Collection`1<Uri> Scopes { get; }
    public int MaxResults { get; public set; }
    public TimeSpan Duration { get; public set; }
    internal Collection`1<Uri> InternalScopes { get; }
    public FindCriteria(Type contractType);
    private static FindCriteria();
    public Collection`1<XmlQualifiedName> get_ContractTypeNames();
    public Collection`1<XElement> get_Extensions();
    public Uri get_ScopeMatchBy();
    public void set_ScopeMatchBy(Uri value);
    public Collection`1<Uri> get_Scopes();
    public int get_MaxResults();
    public void set_MaxResults(int value);
    public TimeSpan get_Duration();
    public void set_Duration(TimeSpan value);
    internal Collection`1<Uri> get_InternalScopes();
    public static FindCriteria CreateMetadataExchangeEndpointCriteria();
    public static FindCriteria CreateMetadataExchangeEndpointCriteria(Type contractType);
    public static FindCriteria CreateMetadataExchangeEndpointCriteria(IEnumerable`1<XmlQualifiedName> contractTypeNames);
    public bool IsMatch(EndpointDiscoveryMetadata endpointDiscoveryMetadata);
    internal bool IsMatch(EndpointDiscoveryMetadata endpointDiscoveryMetadata, CompiledScopeCriteria[] compiledScopeMatchCriterias);
    internal void ReadFrom(DiscoveryVersion discoveryVersion, XmlReader reader);
    internal void WriteTo(DiscoveryVersion discoveryVersion, XmlWriter writer);
    internal static XmlQualifiedName GetContractTypeName(Type contractType);
    internal static Uri GetContractTypeNameScope(XmlQualifiedName contractTypeName);
    internal FindCriteria Clone();
}
public class System.ServiceModel.Discovery.FindProgressChangedEventArgs : ProgressChangedEventArgs {
    public EndpointDiscoveryMetadata EndpointDiscoveryMetadata { get; }
    public DiscoveryMessageSequence MessageSequence { get; }
    internal FindProgressChangedEventArgs(int progressPercentage, object userState, EndpointDiscoveryMetadata endpointDiscoveryMetadata, DiscoveryMessageSequence messageSequence);
    public EndpointDiscoveryMetadata get_EndpointDiscoveryMetadata();
    public DiscoveryMessageSequence get_MessageSequence();
}
public class System.ServiceModel.Discovery.FindRequestContext : object {
    public FindCriteria Criteria { get; }
    protected FindRequestContext(FindCriteria criteria);
    public FindCriteria get_Criteria();
    public void AddMatchingEndpoint(EndpointDiscoveryMetadata matchingEndpoint);
    protected virtual void OnAddMatchingEndpoint(EndpointDiscoveryMetadata matchingEndpoint);
}
public class System.ServiceModel.Discovery.FindResponse : object {
    public Collection`1<EndpointDiscoveryMetadata> Endpoints { get; }
    public Collection`1<EndpointDiscoveryMetadata> get_Endpoints();
    public DiscoveryMessageSequence GetMessageSequence(EndpointDiscoveryMetadata endpointDiscoveryMetadata);
    internal void AddDiscoveredEndpoint(EndpointDiscoveryMetadata endpointDiscoveryMetadata, DiscoveryMessageSequence messageSequence);
}
internal static class System.ServiceModel.Discovery.FxTrace : object {
    public static bool ShouldTraceCritical { get; }
    public static bool TracingEnabled { get; }
    public static bool ShouldTraceError { get; }
    public static bool ShouldTraceInformation { get; }
    public static bool ShouldTraceVerbose { get; }
    public static bool ShouldTraceWarning { get; }
    public static bool ShouldTraceCriticalToTraceSource { get; }
    public static bool ShouldTraceErrorToTraceSource { get; }
    public static bool ShouldTraceInformationToTraceSource { get; }
    public static bool ShouldTraceVerboseToTraceSource { get; }
    public static bool ShouldTraceWarningToTraceSource { get; }
    public static ExceptionTrace Exception { get; }
    public static EtwDiagnosticTrace Trace { get; }
    public static EventLogger EventLog { get; }
    private static FxTrace();
    public static void UpdateEventDefinitions(EventDescriptor[] eventDescriptors, UInt16[] end2EndEvents);
    public static bool IsEventEnabled(int index);
    public static bool get_ShouldTraceCritical();
    public static bool get_TracingEnabled();
    public static bool get_ShouldTraceError();
    public static bool get_ShouldTraceInformation();
    public static bool get_ShouldTraceVerbose();
    public static bool get_ShouldTraceWarning();
    public static bool get_ShouldTraceCriticalToTraceSource();
    public static bool get_ShouldTraceErrorToTraceSource();
    public static bool get_ShouldTraceInformationToTraceSource();
    public static bool get_ShouldTraceVerboseToTraceSource();
    public static bool get_ShouldTraceWarningToTraceSource();
    public static ExceptionTrace get_Exception();
    public static EtwDiagnosticTrace get_Trace();
    public static EventLogger get_EventLog();
}
internal abstract class System.ServiceModel.Discovery.HelloOperationAsyncResult`1 : AsyncResult {
    internal HelloOperationAsyncResult`1(IAnnouncementServiceImplementation announcementServiceImpl, TMessage message, AsyncCallback callback, object state);
    private static HelloOperationAsyncResult`1();
    protected abstract virtual bool ValidateContent(TMessage message);
    protected abstract virtual DiscoveryMessageSequence GetMessageSequence(TMessage message);
    protected abstract virtual EndpointDiscoveryMetadata GetEndpointDiscoveryMetadata(TMessage message);
}
internal interface System.ServiceModel.Discovery.IAnnouncementInnerClient {
    public DiscoveryMessageSequenceGenerator DiscoveryMessageSequenceGenerator { get; public set; }
    public ClientCredentials ClientCredentials { get; }
    public ChannelFactory ChannelFactory { get; }
    public IClientChannel InnerChannel { get; }
    public ServiceEndpoint Endpoint { get; }
    public ICommunicationObject InnerCommunicationObject { get; }
    [CompilerGeneratedAttribute]
public abstract virtual void add_HelloOperationCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_HelloOperationCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_ByeOperationCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_ByeOperationCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public abstract virtual DiscoveryMessageSequenceGenerator get_DiscoveryMessageSequenceGenerator();
    public abstract virtual void set_DiscoveryMessageSequenceGenerator(DiscoveryMessageSequenceGenerator value);
    public abstract virtual ClientCredentials get_ClientCredentials();
    public abstract virtual ChannelFactory get_ChannelFactory();
    public abstract virtual IClientChannel get_InnerChannel();
    public abstract virtual ServiceEndpoint get_Endpoint();
    public abstract virtual ICommunicationObject get_InnerCommunicationObject();
    public abstract virtual IAsyncResult BeginHelloOperation(EndpointDiscoveryMetadata endpointDiscoveryMetadata, AsyncCallback callback, object state);
    public abstract virtual void EndHelloOperation(IAsyncResult result);
    public abstract virtual IAsyncResult BeginByeOperation(EndpointDiscoveryMetadata endpointDiscoveryMetadata, AsyncCallback callback, object state);
    public abstract virtual void EndByeOperation(IAsyncResult result);
    public abstract virtual void HelloOperation(EndpointDiscoveryMetadata endpointDiscoveryMetadata);
    public abstract virtual void ByeOperation(EndpointDiscoveryMetadata endpointDiscoveryMetadata);
    public abstract virtual void HelloOperationAsync(EndpointDiscoveryMetadata endpointDiscoveryMetadata, object userState);
    public abstract virtual void ByeOperationAsync(EndpointDiscoveryMetadata endpointDiscoveryMetadata, object userState);
}
internal interface System.ServiceModel.Discovery.IAnnouncementServiceImplementation {
    public abstract virtual bool IsDuplicate(UniqueId messageId);
    public abstract virtual IAsyncResult OnBeginOnlineAnnouncement(DiscoveryMessageSequence messageSequence, EndpointDiscoveryMetadata endpointDiscoveryMetadata, AsyncCallback callback, object state);
    public abstract virtual void OnEndOnlineAnnouncement(IAsyncResult result);
    public abstract virtual IAsyncResult OnBeginOfflineAnnouncement(DiscoveryMessageSequence messageSequence, EndpointDiscoveryMetadata endpointDiscoveryMetadata, AsyncCallback callback, object state);
    public abstract virtual void OnEndOfflineAnnouncement(IAsyncResult result);
}
internal interface System.ServiceModel.Discovery.IDiscoveryInnerClient {
    public ClientCredentials ClientCredentials { get; }
    public ChannelFactory ChannelFactory { get; }
    public IClientChannel InnerChannel { get; }
    public ServiceEndpoint Endpoint { get; }
    public ICommunicationObject InnerCommunicationObject { get; }
    public bool IsRequestResponse { get; }
    public abstract virtual ClientCredentials get_ClientCredentials();
    public abstract virtual ChannelFactory get_ChannelFactory();
    public abstract virtual IClientChannel get_InnerChannel();
    public abstract virtual ServiceEndpoint get_Endpoint();
    public abstract virtual ICommunicationObject get_InnerCommunicationObject();
    public abstract virtual bool get_IsRequestResponse();
    public abstract virtual void ProbeOperation(FindCriteria findCriteria);
    public abstract virtual void ResolveOperation(ResolveCriteria resolveCriteria);
    public abstract virtual IAsyncResult BeginProbeOperation(FindCriteria findCriteria, AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginResolveOperation(ResolveCriteria resolveCriteria, AsyncCallback callback, object state);
    public abstract virtual void EndProbeOperation(IAsyncResult result);
    public abstract virtual void EndResolveOperation(IAsyncResult result);
}
internal interface System.ServiceModel.Discovery.IDiscoveryInnerClientResponse {
    public abstract virtual void HelloOperation(UniqueId relatesTo, DiscoveryMessageSequence proxyMessageSequence, EndpointDiscoveryMetadata proxyEndpointMetadata);
    public abstract virtual void ProbeMatchOperation(UniqueId relatesTo, DiscoveryMessageSequence discoveryMessageSequence, Collection`1<EndpointDiscoveryMetadata> endpointDiscoveryMetadataCollection, bool findCompleted);
    public abstract virtual void ResolveMatchOperation(UniqueId relatesTo, DiscoveryMessageSequence discoveryMessageSequence, EndpointDiscoveryMetadata endpointDiscoveryMetadata);
    public abstract virtual void PostFindCompletedAndRemove(UniqueId operationId, bool cancelled, Exception error);
    public abstract virtual void PostResolveCompletedAndRemove(UniqueId operationId, bool cancelled, Exception error);
}
internal interface System.ServiceModel.Discovery.IDiscoveryRequestContext {
    public TimeoutHelper TimeoutHelper { get; }
    public ServiceDiscoveryMode DiscoveryMode { get; }
    public abstract virtual TimeoutHelper get_TimeoutHelper();
    public abstract virtual ServiceDiscoveryMode get_DiscoveryMode();
    public abstract virtual IAsyncResult BeginSendFindResponse(Collection`1<EndpointDiscoveryMetadata> matchingEndpoints, AsyncCallback callback, object state);
    public abstract virtual void EndSendFindResponse(IAsyncResult result);
    public abstract virtual IAsyncResult BeginSendResolveResponse(EndpointDiscoveryMetadata matchingEndpoint, AsyncCallback callback, object state);
    public abstract virtual void EndSendResolveResponse(IAsyncResult result);
    public abstract virtual IAsyncResult BeginSendProxyAnnouncements(Collection`1<EndpointDiscoveryMetadata> proxyAnnouncementEndpoints, AsyncCallback callback, object state);
    public abstract virtual void EndSendProxyAnnouncements(IAsyncResult result);
}
internal interface System.ServiceModel.Discovery.IDiscoveryServiceImplementation {
    public abstract virtual bool IsDuplicate(UniqueId messageId);
    public abstract virtual DiscoveryMessageSequence GetNextMessageSequence();
    public abstract virtual IAsyncResult BeginFind(FindRequestContext findRequestContext, AsyncCallback callback, object state);
    public abstract virtual void EndFind(IAsyncResult result);
    public abstract virtual IAsyncResult BeginResolve(ResolveCriteria resolveCriteria, AsyncCallback callback, object state);
    public abstract virtual EndpointDiscoveryMetadata EndResolve(IAsyncResult result);
}
internal interface System.ServiceModel.Discovery.IDiscoveryVersionImplementation {
    public string WsaNamespace { get; }
    public Uri DiscoveryAddress { get; }
    public MessageVersion MessageVersion { get; }
    public SchemaQualifiedNames QualifiedNames { get; }
    public DataContractSerializer EprSerializer { get; }
    public abstract virtual string get_WsaNamespace();
    public abstract virtual Uri get_DiscoveryAddress();
    public abstract virtual MessageVersion get_MessageVersion();
    public abstract virtual SchemaQualifiedNames get_QualifiedNames();
    public abstract virtual DataContractSerializer get_EprSerializer();
    public abstract virtual ContractDescription GetDiscoveryContract(ServiceDiscoveryMode discoveryMode);
    public abstract virtual ContractDescription GetAnnouncementContract();
    public abstract virtual IDiscoveryInnerClient CreateDiscoveryInnerClient(DiscoveryEndpoint discoveryEndpoint, IDiscoveryInnerClientResponse responseReceiver);
    public abstract virtual IAnnouncementInnerClient CreateAnnouncementInnerClient(AnnouncementEndpoint announcementEndpoint);
    public abstract virtual Uri ToVersionIndependentScopeMatchBy(Uri versionDependentScopeMatchBy);
    public abstract virtual Uri ToVersionDependentScopeMatchBy(Uri versionIndependentScopeMatchBy);
}
internal interface System.ServiceModel.Discovery.IMulticastSuppressionImplementation {
    public abstract virtual IAsyncResult BeginShouldRedirectFind(FindCriteria findCriteria, AsyncCallback callback, object state);
    public abstract virtual bool EndShouldRedirectFind(IAsyncResult result, Collection`1& redirectionEndpoints);
    public abstract virtual IAsyncResult BeginShouldRedirectResolve(ResolveCriteria resolveCriteria, AsyncCallback callback, object state);
    public abstract virtual bool EndShouldRedirectResolve(IAsyncResult result, Collection`1& redirectionEndpoints);
}
internal abstract class System.ServiceModel.Discovery.IteratorAsyncResult`1 : AsyncResult {
    protected TimeSpan OriginalTimeout { get; }
    protected IteratorAsyncResult`1(AsyncCallback callback, object state);
    protected TimeSpan get_OriginalTimeout();
    public static AsyncStep<TIteratorState> CallAsync(BeginCall<TIteratorState> begin, EndCall<TIteratorState> end);
    public static AsyncStep<TIteratorState> CallAsync(BeginCall<TIteratorState> begin, EndCall<TIteratorState> end, IAsyncCatch[] catches);
    public static AsyncStep<TIteratorState> CallParallel(BeginCall<TIteratorState> begin, EndCall<TIteratorState> end);
    public static AsyncStep<TIteratorState> CallParallel(BeginCall<TIteratorState> begin, EndCall<TIteratorState> end, IAsyncCatch[] catches);
    protected void Start(TIteratorState iterState, TimeSpan timeout);
    protected TimeSpan RemainingTime();
    protected abstract virtual IEnumerator`1<AsyncStep<TIteratorState>> GetAsyncSteps();
    protected void CompleteOnce();
    protected void CompleteOnce(Exception error);
}
internal class System.ServiceModel.Discovery.NonNullItemCollection`1 : Collection`1<T> {
    protected virtual void InsertItem(int index, T item);
    protected virtual void SetItem(int index, T item);
}
internal class System.ServiceModel.Discovery.OfflineAnnouncementChannelDispatcher : ChannelDispatcherBase {
    public ServiceHostBase Host { get; }
    public IChannelListener Listener { get; }
    protected TimeSpan DefaultCloseTimeout { get; }
    protected TimeSpan DefaultOpenTimeout { get; }
    internal OfflineAnnouncementChannelDispatcher(ServiceHostBase serviceHostBase, Collection`1<AnnouncementEndpoint> announcementEndpoints, Collection`1<EndpointDiscoveryMetadata> publishedEndpoints, DiscoveryMessageSequenceGenerator discoveryMessageSequenceGenerator);
    public virtual ServiceHostBase get_Host();
    public virtual IChannelListener get_Listener();
    protected virtual TimeSpan get_DefaultCloseTimeout();
    protected virtual TimeSpan get_DefaultOpenTimeout();
    protected virtual void OnAbort();
    protected virtual IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnEndClose(IAsyncResult result);
    protected virtual void OnClose(TimeSpan timeout);
    protected virtual IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnEndOpen(IAsyncResult result);
    protected virtual void OnOpen(TimeSpan timeout);
}
internal class System.ServiceModel.Discovery.OnlineAnnouncementChannelDispatcher : ChannelDispatcherBase {
    public ServiceHostBase Host { get; }
    public IChannelListener Listener { get; }
    protected TimeSpan DefaultCloseTimeout { get; }
    protected TimeSpan DefaultOpenTimeout { get; }
    internal OnlineAnnouncementChannelDispatcher(ServiceHostBase serviceHostBase, Collection`1<AnnouncementEndpoint> announcementEndpoints, Collection`1<EndpointDiscoveryMetadata> publishedEndpoints, DiscoveryMessageSequenceGenerator discoveryMessageSequenceGenerator);
    public virtual ServiceHostBase get_Host();
    public virtual IChannelListener get_Listener();
    protected virtual TimeSpan get_DefaultCloseTimeout();
    protected virtual TimeSpan get_DefaultOpenTimeout();
    protected virtual void OnAbort();
    protected virtual IAsyncResult OnBeginOpen(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnEndOpen(IAsyncResult result);
    protected virtual void OnOpen(TimeSpan timeout);
    protected virtual IAsyncResult OnBeginClose(TimeSpan timeout, AsyncCallback callback, object state);
    protected virtual void OnEndClose(IAsyncResult result);
    protected virtual void OnClose(TimeSpan timeout);
}
internal abstract class System.ServiceModel.Discovery.ProbeDuplexAsyncResult`2 : AsyncResult {
    protected DiscoveryOperationContext Context { get; }
    protected ProbeDuplexAsyncResult`2(TProbeMessage probeMessage, IDiscoveryServiceImplementation discoveryServiceImpl, IMulticastSuppressionImplementation multicastSuppressionImpl, AsyncCallback callback, object state);
    private static ProbeDuplexAsyncResult`2();
    protected DiscoveryOperationContext get_Context();
    protected virtual bool Validate(TProbeMessage probeMessage);
    protected abstract virtual bool ValidateContent(TProbeMessage probeMessage);
    protected abstract virtual FindCriteria GetFindCriteria(TProbeMessage probeMessage);
    protected abstract virtual IAsyncResult BeginSendFindResponse(TResponseChannel responseChannel, DiscoveryMessageSequence discoveryMessageSequence, EndpointDiscoveryMetadata matchingEndpoint, AsyncCallback callback, object state);
    protected abstract virtual void EndSendFindResponse(TResponseChannel responseChannel, IAsyncResult result);
    protected abstract virtual IAsyncResult BeginSendProxyAnnouncement(TResponseChannel responseChannel, DiscoveryMessageSequence discoveryMessageSequence, EndpointDiscoveryMetadata proxyEndpointDiscoveryMetadata, AsyncCallback callback, object state);
    protected abstract virtual void EndSendProxyAnnouncement(TResponseChannel responseChannel, IAsyncResult result);
}
internal abstract class System.ServiceModel.Discovery.ProbeRequestResponseAsyncResult`2 : AsyncResult {
    protected ProbeRequestResponseAsyncResult`2(TProbeMessage probeMessage, IDiscoveryServiceImplementation discoveryServiceImpl, AsyncCallback callback, object state);
    private static ProbeRequestResponseAsyncResult`2();
    protected virtual bool Validate(TProbeMessage probeMessage);
    protected abstract virtual bool ValidateContent(TProbeMessage probeMessage);
    protected abstract virtual FindCriteria GetFindCriteria(TProbeMessage probeMessage);
    protected abstract virtual TResponseMessage GetProbeResponse(DiscoveryMessageSequence discoveryMessageSequence, Collection`1<EndpointDiscoveryMetadata> matchingEndpoints);
    protected TResponseMessage End();
}
internal static class System.ServiceModel.Discovery.ProtocolStrings : object {
    public static string VersionNameDefault;
    public static string XsNamespace;
    public static string WsaNamespaceAugust2004;
    public static string WsaNamespace10;
}
internal abstract class System.ServiceModel.Discovery.RandomDelayQueuedSendsAsyncResult`1 : IteratorAsyncResult`1<RandomDelayQueuedSendsAsyncResult`1<TItem>> {
    public RandomDelayQueuedSendsAsyncResult`1(TimeSpan maxRandomDelay, InputQueue`1<TItem> itemQueue, AsyncCallback callback, object state);
    public IAsyncResult BeginDelay(AsyncCallback callback, object state);
    public void EndDelay(IAsyncResult result);
    [IteratorStateMachineAttribute("System.ServiceModel.Discovery.RandomDelayQueuedSendsAsyncResult`1/<GetAsyncSteps>d__13")]
protected virtual IEnumerator`1<AsyncStep<RandomDelayQueuedSendsAsyncResult`1<TItem>>> GetAsyncSteps();
    protected void Start(TimeSpan timeout);
    protected abstract virtual IAsyncResult OnBeginSendItem(TItem item, TimeSpan timeout, AsyncCallback callback, object state);
    protected abstract virtual void OnEndSendItem(IAsyncResult result);
}
internal abstract class System.ServiceModel.Discovery.RandomDelaySendsAsyncResult : AsyncResult {
    protected RandomDelaySendsAsyncResult(int numSends, TimeSpan maxDelay, AsyncCallback callback, object state);
    protected RandomDelaySendsAsyncResult(int numSends, TimeSpan maxDelay, ICommunicationObject channel, AsyncCallback callback, object state);
    protected RandomDelaySendsAsyncResult(int numSends, TimeSpan maxDelay, ICommunicationObject channel, Random random, AsyncCallback callback, object state);
    public void Start(TimeSpan timeout);
    public void Cancel();
    public static long RandomDelay(Random randomGenerator, long maxTicks);
    protected abstract virtual IAsyncResult OnBeginSend(int index, TimeSpan timeout, AsyncCallback callback, object state);
    protected abstract virtual void OnEndSend(IAsyncResult result);
}
public class System.ServiceModel.Discovery.ResolveCompletedEventArgs : AsyncCompletedEventArgs {
    public ResolveResponse Result { get; }
    internal ResolveCompletedEventArgs(Exception error, bool cancelled, object userState, ResolveResponse result);
    public ResolveResponse get_Result();
}
public class System.ServiceModel.Discovery.ResolveCriteria : object {
    public EndpointAddress Address { get; public set; }
    public TimeSpan Duration { get; public set; }
    public Collection`1<XElement> Extensions { get; }
    public ResolveCriteria(EndpointAddress address);
    private static ResolveCriteria();
    public EndpointAddress get_Address();
    public void set_Address(EndpointAddress value);
    public TimeSpan get_Duration();
    public void set_Duration(TimeSpan value);
    public Collection`1<XElement> get_Extensions();
    internal void ReadFrom(DiscoveryVersion discoveryVersion, XmlReader reader);
    internal void WriteTo(DiscoveryVersion discoveryVersion, XmlWriter writer);
}
internal abstract class System.ServiceModel.Discovery.ResolveDuplexAsyncResult`2 : AsyncResult {
    protected DiscoveryOperationContext Context { get; }
    protected ResolveDuplexAsyncResult`2(TResolveMessage resolveMessage, IDiscoveryServiceImplementation discoveryServiceImpl, IMulticastSuppressionImplementation multicastSuppressionImpl, AsyncCallback callback, object state);
    private static ResolveDuplexAsyncResult`2();
    protected DiscoveryOperationContext get_Context();
    protected virtual bool Validate(TResolveMessage resolveMessage);
    protected abstract virtual bool ValidateContent(TResolveMessage resolveMessage);
    protected abstract virtual ResolveCriteria GetResolveCriteria(TResolveMessage resolveMessage);
    protected abstract virtual IAsyncResult BeginSendResolveResponse(TResponseChannel responseChannel, DiscoveryMessageSequence discoveryMessageSequence, EndpointDiscoveryMetadata matchingEndpoint, AsyncCallback callback, object state);
    protected abstract virtual void EndSendResolveResponse(TResponseChannel responseChannel, IAsyncResult result);
    protected abstract virtual IAsyncResult BeginSendProxyAnnouncement(TResponseChannel responseChannel, DiscoveryMessageSequence discoveryMessageSequence, EndpointDiscoveryMetadata proxyEndpointDiscoveryMetadata, AsyncCallback callback, object state);
    protected abstract virtual void EndSendProxyAnnouncement(TResponseChannel responseChannel, IAsyncResult result);
}
internal abstract class System.ServiceModel.Discovery.ResolveRequestResponseAsyncResult`2 : AsyncResult {
    protected DiscoveryOperationContext Context { get; }
    protected ResolveRequestResponseAsyncResult`2(TResolveMessage resolveMessage, IDiscoveryServiceImplementation discoveryServiceImpl, AsyncCallback callback, object state);
    private static ResolveRequestResponseAsyncResult`2();
    protected DiscoveryOperationContext get_Context();
    protected virtual bool Validate(TResolveMessage resolveMessage);
    protected abstract virtual bool ValidateContent(TResolveMessage resolveMessage);
    protected abstract virtual ResolveCriteria GetResolveCriteria(TResolveMessage resolveMessage);
    protected abstract virtual TResponseMessage GetResolveResponse(DiscoveryMessageSequence discoveryMessageSequence, EndpointDiscoveryMetadata matchingEndpoints);
    protected TResponseMessage End();
}
public class System.ServiceModel.Discovery.ResolveResponse : object {
    public EndpointDiscoveryMetadata EndpointDiscoveryMetadata { get; internal set; }
    public DiscoveryMessageSequence MessageSequence { get; internal set; }
    public EndpointDiscoveryMetadata get_EndpointDiscoveryMetadata();
    internal void set_EndpointDiscoveryMetadata(EndpointDiscoveryMetadata value);
    public DiscoveryMessageSequence get_MessageSequence();
    internal void set_MessageSequence(DiscoveryMessageSequence value);
}
internal static class System.ServiceModel.Discovery.SchemaUtility : object {
    public static XmlQualifiedName EnsureProbeMatchSchema(DiscoveryVersion discoveryVersion, XmlSchemaSet schemaSet);
    public static XmlQualifiedName EnsureProbeSchema(DiscoveryVersion discoveryVersion, XmlSchemaSet schemaSet);
    public static XmlQualifiedName EnsureResolveSchema(DiscoveryVersion discoveryVersion, XmlSchemaSet schemaSet);
    public static XmlQualifiedName EnsureAppSequenceSchema(DiscoveryVersion discoveryVersion, XmlSchemaSet schemaSet);
}
internal class System.ServiceModel.Discovery.ScopeCollection : NonNullItemCollection`1<Uri> {
    protected virtual void InsertItem(int index, Uri item);
    protected virtual void SetItem(int index, Uri item);
}
internal static class System.ServiceModel.Discovery.ScopeCompiler : object {
    public static String[] Compile(ICollection`1<Uri> scopes);
    public static CompiledScopeCriteria[] CompileMatchCriteria(ICollection`1<Uri> scopes, Uri matchBy);
    public static bool IsSupportedMatchingRule(Uri matchBy);
    public static bool IsMatch(CompiledScopeCriteria compiledScopeMatchCriteria, String[] compiledScopes);
}
internal static class System.ServiceModel.Discovery.SerializationUtility : object {
    private static SerializationUtility();
    public static XmlQualifiedName ParseQName(string prefixedQName, XmlReader reader);
    public static void ParseQNameList(string listOfQNamesAsString, Collection`1<XmlQualifiedName> qNameCollection, XmlReader reader);
    public static void ParseUriList(string listOfUrisAsString, Collection`1<Uri> uriCollection, UriKind uriKind);
    public static long ReadUInt(string uintString, string notFoundExceptionString, string exceptionString);
    public static void WriteQName(XmlWriter writer, XmlQualifiedName qname);
    public static void WriteListOfQNames(XmlWriter writer, Collection`1<XmlQualifiedName> qnames);
    public static void WriteListOfUris(XmlWriter writer, Collection`1<Uri> uris);
    public static int ReadMaxResults(XmlReader reader);
    public static TimeSpan ReadDuration(XmlReader reader);
    public static TimeSpan ReadTimespan(string timespanString, string exceptionString);
    public static EndpointAddress ReadEndpointAddress(DiscoveryVersion discoveryVersion, XmlReader reader);
    public static void ReadContractTypeNames(Collection`1<XmlQualifiedName> contractTypeNames, XmlReader reader);
    public static Uri ReadScopes(Collection`1<Uri> scopes, XmlReader reader);
    public static void ReadListenUris(Collection`1<Uri> listenUris, XmlReader reader);
    public static int ReadMetadataVersion(XmlReader reader);
    public static void WriteEndPointAddress(DiscoveryVersion discoveryVersion, EndpointAddress endpointAddress, XmlWriter writer);
    public static void WriteContractTypeNames(DiscoveryVersion discoveryVersion, Collection`1<XmlQualifiedName> contractTypeNames, XmlWriter writer);
    public static void WriteScopes(DiscoveryVersion discoveryVersion, Collection`1<Uri> scopes, Uri scopeMatchBy, XmlWriter writer);
    public static void WriteListenUris(DiscoveryVersion discoveryVersion, Collection`1<Uri> listenUris, XmlWriter writer);
    public static void WriteMetadataVersion(DiscoveryVersion discoveryVersion, int metadataVersion, XmlWriter writer);
}
public class System.ServiceModel.Discovery.ServiceDiscoveryBehavior : object {
    public Collection`1<AnnouncementEndpoint> AnnouncementEndpoints { get; }
    public Collection`1<AnnouncementEndpoint> get_AnnouncementEndpoints();
    private sealed virtual override void System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection`1<ServiceEndpoint> endpoints, BindingParameterCollection bindingParameters);
    private sealed virtual override void System.ServiceModel.Description.IServiceBehavior.Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
    private sealed virtual override void System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase);
}
internal class System.ServiceModel.Discovery.ServiceDiscoveryInstanceContextProvider : object {
    internal ServiceDiscoveryInstanceContextProvider(DiscoveryService discoveryService);
    private sealed virtual override InstanceContext System.ServiceModel.Dispatcher.IInstanceContextProvider.GetExistingInstanceContext(Message message, IContextChannel channel);
    private sealed virtual override void System.ServiceModel.Dispatcher.IInstanceContextProvider.InitializeInstanceContext(InstanceContext instanceContext, Message message, IContextChannel channel);
    private sealed virtual override bool System.ServiceModel.Dispatcher.IInstanceContextProvider.IsIdle(InstanceContext instanceContext);
    private sealed virtual override void System.ServiceModel.Dispatcher.IInstanceContextProvider.NotifyIdle(InstanceContextIdleCallback callback, InstanceContext instanceContext);
    private sealed virtual override object System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext instanceContext, Message message);
    private sealed virtual override object System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext instanceContext);
    private sealed virtual override void System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(InstanceContext instanceContext, object instance);
}
public enum System.ServiceModel.Discovery.ServiceDiscoveryMode : Enum {
    public int value__;
    public static ServiceDiscoveryMode Adhoc;
    public static ServiceDiscoveryMode Managed;
}
internal class System.ServiceModel.Discovery.SR : object {
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string DiscoveryCannotAddMatchingEndpoint { get; }
    internal static string DiscoveryClientBindingElementNotFirst { get; }
    internal static string DiscoveryClientBindingElementPresentInDynamicEndpoint { get; }
    internal static string DiscoveryClientChannelEndpointNotFound { get; }
    internal static string DiscoveryExtensionAlreadyAttached { get; }
    internal static string DiscoveryExtensionCannotBeDetached { get; }
    internal static string DiscoveryFindCanNeverComplete { get; }
    internal static string DiscoveryFindDurationLessThanZero { get; }
    internal static string DiscoveryFindMaxResultsLessThanZero { get; }
    internal static string DiscoveryMetadataVersionLessThanZero { get; }
    internal static string DiscoveryResolveDurationLessThanZero { get; }
    internal static string DiscoveryMetadataAlreadyOpen { get; }
    internal static string DiscoveryXmlEndpointNull { get; }
    internal static string DiscoveryFindResponseMessageSequenceNotFound { get; }
    internal static string DiscoveryRequestMessageError { get; }
    internal static string DiscoveryIncompatibleMessageSequence { get; }
    internal static string DiscoveryMultiplePendingOperationsPerUserState { get; }
    internal static string DiscoverySetMessageSequenceInvalidState { get; }
    internal static string DiscoveryAppSequenceInstanceIdOutOfRange { get; }
    internal static string DiscoveryXmlInvalidAppSequenceInstanceId { get; }
    internal static string DiscoveryXmlInvalidAppSequenceMessageNumber { get; }
    internal static string DiscoveryXmlMissingAppSequenceInstanceId { get; }
    internal static string DiscoveryXmlMissingAppSequenceMessageNumber { get; }
    internal static string DiscoveryArgumentEmptyContractTypeName { get; }
    internal static string DiscoveryConfigInitializeFromNotSupported { get; }
    internal static string DiscoveryNegativeDuplicateMessageHistoryLength { get; }
    internal static ResourceManager get_ResourceManager();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static string get_DiscoveryCannotAddMatchingEndpoint();
    internal static string get_DiscoveryClientBindingElementNotFirst();
    internal static string get_DiscoveryClientBindingElementPresentInDynamicEndpoint();
    internal static string get_DiscoveryClientChannelEndpointNotFound();
    internal static string get_DiscoveryExtensionAlreadyAttached();
    internal static string get_DiscoveryExtensionCannotBeDetached();
    internal static string get_DiscoveryFindCanNeverComplete();
    internal static string get_DiscoveryFindDurationLessThanZero();
    internal static string get_DiscoveryFindMaxResultsLessThanZero();
    internal static string get_DiscoveryMetadataVersionLessThanZero();
    internal static string get_DiscoveryResolveDurationLessThanZero();
    internal static string get_DiscoveryMetadataAlreadyOpen();
    internal static string get_DiscoveryXmlEndpointNull();
    internal static string get_DiscoveryFindResponseMessageSequenceNotFound();
    internal static string get_DiscoveryRequestMessageError();
    internal static string get_DiscoveryIncompatibleMessageSequence();
    internal static string get_DiscoveryMultiplePendingOperationsPerUserState();
    internal static string get_DiscoverySetMessageSequenceInvalidState();
    internal static string get_DiscoveryAppSequenceInstanceIdOutOfRange();
    internal static string get_DiscoveryXmlInvalidAppSequenceInstanceId();
    internal static string get_DiscoveryXmlInvalidAppSequenceMessageNumber();
    internal static string get_DiscoveryXmlMissingAppSequenceInstanceId();
    internal static string get_DiscoveryXmlMissingAppSequenceMessageNumber();
    internal static string get_DiscoveryArgumentEmptyContractTypeName();
    internal static string get_DiscoveryConfigInitializeFromNotSupported();
    internal static string get_DiscoveryNegativeDuplicateMessageHistoryLength();
    internal static string DiscoveryClientChannelCreationFailed(object param0);
    internal static string DiscoveryClientChannelOpenTimeout(object param0);
    internal static string DiscoveryMatchingRuleNotSupported(object param0, object param1, object param2, object param3);
    internal static string DiscoverySdmCollectionIsOpen(object param0);
    internal static string DiscoveryVersionToString(object param0, object param1);
    internal static string DiscoveryXmlMaxResultsLessThanZero(object param0);
    internal static string DiscoveryXmlDurationDeserializationError(object param0);
    internal static string DiscoveryXmlDurationLessThanZero(object param0);
    internal static string DiscoveryXmlMetadataVersionLessThanZero(object param0);
    internal static string DiscoveryXmlQNameLocalnameNotDefined(object param0);
    internal static string DiscoveryXmlQNamePrefixNotDefined(object param0, object param1);
    internal static string DiscoveryXmlUriFormatError(object param0);
    internal static string DiscoveryCloseTimedOut(object param0);
    internal static string DiscoveryArgumentInvalidScopeUri(object param0);
    internal static string DiscoveryXmlAbsoluteUriFormatError(object param0);
    internal static string DiscoveryConfigInvalidScopeUri(object param0);
    internal static string DiscoveryFormatInvalidScopeUuidUri(object param0);
    internal static string DiscoveryFormatInvalidScopeLdapUri(object param0);
    internal static string DiscoveryIncorrectVersion(object param0, object param1, object param2, object param3);
    internal static string DiscoveryConfigAddressSpecifiedForUdpDiscoveryEndpoint(object param0);
    internal static string DiscoveryConfigContractNotSpecified(object param0);
    internal static string DiscoveryConfigContractSpecified(object param0);
    internal static string DiscoveryConfigListenUriSpecifiedForUdpDiscoveryEndpoint(object param0);
    internal static string DiscoveryConfigAnnouncementEndpointMissingKind(object param0);
    internal static string DiscoveryConfigInvalidAnnouncementEndpoint(object param0, object param1, object param2);
    internal static string DiscoveryConfigInvalidEndpointConfiguration(object param0);
    internal static string DiscoveryConfigInvalidDiscoveryEndpoint(object param0, object param1, object param2);
    internal static string DiscoveryConfigDiscoveryEndpointMissingKind(object param0);
    internal static string DiscoveryConfigMultipleEndpointsMatchWildcard(object param0, object param1);
    internal static string DiscoveryConfigMultipleEndpointsMatch(object param0, object param1, object param2);
    internal static string DiscoveryConfigNoEndpointsMatchWildcard(object param0, object param1);
    internal static string DiscoveryConfigNoEndpointsMatch(object param0, object param1, object param2);
    internal static string DiscoveryConfigDynamicEndpointInService(object param0);
    internal static string DiscoveryEndpointAddressIncorrect(object param0, object param1, object param2);
    internal static string DiscoveryEndpointWithoutBehavior(object param0);
    internal static string DiscoveryMessageSequenceToString(object param0, object param1, object param2);
    internal static string DiscoveryIncorrectMode(object param0);
    internal static string DiscoveryDuplicateOperationId(object param0);
    internal static string DiscoveryMethodImplementationReturnsNull(object param0, object param1);
    internal static string EndpointWithInvalidMessageVersion(object param0, object param1, object param2, object param3, object param4);
    internal static string TimeoutOnOperation(object param0);
}
internal class System.ServiceModel.Discovery.SyncOperationState : object {
    public AsyncCompletedEventArgs EventArgs { get; public set; }
    public ManualResetEvent WaitEvent { get; }
    public AsyncCompletedEventArgs get_EventArgs();
    public void set_EventArgs(AsyncCompletedEventArgs value);
    public ManualResetEvent get_WaitEvent();
}
internal class System.ServiceModel.Discovery.TD : object {
    internal static CultureInfo Culture { get; internal set; }
    private static TD();
    internal static CultureInfo get_Culture();
    internal static void set_Culture(CultureInfo value);
    internal static bool DiscoveryClientInClientChannelFailedToCloseIsEnabled();
    internal static void DiscoveryClientInClientChannelFailedToClose(Exception exception);
    internal static bool DiscoveryClientProtocolExceptionSuppressedIsEnabled();
    internal static void DiscoveryClientProtocolExceptionSuppressed(Exception exception);
    internal static bool DiscoveryClientReceivedMulticastSuppressionIsEnabled();
    internal static void DiscoveryClientReceivedMulticastSuppression();
    internal static bool DiscoveryMessageReceivedAfterOperationCompletedIsEnabled();
    internal static void DiscoveryMessageReceivedAfterOperationCompleted(EventTraceActivity eventTraceActivity, string discoveryMessageName, string messageId, string discoveryOperationName);
    internal static bool DiscoveryMessageWithInvalidContentIsEnabled();
    internal static void DiscoveryMessageWithInvalidContent(EventTraceActivity eventTraceActivity, string messageType, string messageId);
    internal static bool DiscoveryMessageWithInvalidRelatesToOrOperationCompletedIsEnabled();
    internal static void DiscoveryMessageWithInvalidRelatesToOrOperationCompleted(EventTraceActivity eventTraceActivity, string discoveryMessageName, string messageId, string relatesTo, string discoveryOperationName);
    internal static bool DiscoveryMessageWithInvalidReplyToIsEnabled();
    internal static void DiscoveryMessageWithInvalidReplyTo(EventTraceActivity eventTraceActivity, string messageId);
    internal static bool DiscoveryMessageWithNoContentIsEnabled();
    internal static void DiscoveryMessageWithNoContent(EventTraceActivity eventTraceActivity, string messageType);
    internal static bool DiscoveryMessageWithNullMessageIdIsEnabled();
    internal static void DiscoveryMessageWithNullMessageId(EventTraceActivity eventTraceActivity, string messageType);
    internal static bool DiscoveryMessageWithNullMessageSequenceIsEnabled();
    internal static void DiscoveryMessageWithNullMessageSequence(string discoveryMessageName, string messageId);
    internal static bool DiscoveryMessageWithNullRelatesToIsEnabled();
    internal static void DiscoveryMessageWithNullRelatesTo(EventTraceActivity eventTraceActivity, string discoveryMessageName, string messageId);
    internal static bool DiscoveryMessageWithNullReplyToIsEnabled();
    internal static void DiscoveryMessageWithNullReplyTo(EventTraceActivity eventTraceActivity, string messageId);
    internal static bool DuplicateDiscoveryMessageIsEnabled();
    internal static void DuplicateDiscoveryMessage(EventTraceActivity eventTraceActivity, string messageType, string messageId);
    internal static bool EndpointDiscoverabilityDisabledIsEnabled();
    internal static void EndpointDiscoverabilityDisabled(string endpointAddress, string listenUri);
    internal static bool EndpointDiscoverabilityEnabledIsEnabled();
    internal static void EndpointDiscoverabilityEnabled(string endpointAddress, string listenUri);
    internal static bool FindInitiatedInDiscoveryClientChannelIsEnabled();
    internal static void FindInitiatedInDiscoveryClientChannel();
    internal static bool InnerChannelCreationFailedIsEnabled();
    internal static void InnerChannelCreationFailed(string endpointAddress, string via, Exception exception);
    internal static bool InnerChannelOpenFailedIsEnabled();
    internal static void InnerChannelOpenFailed(string endpointAddress, string via, Exception exception);
    internal static bool InnerChannelOpenSucceededIsEnabled();
    internal static void InnerChannelOpenSucceeded(string endpointAddress, string via);
    internal static bool SynchronizationContextResetIsEnabled();
    internal static void SynchronizationContextReset(string synchronizationContextType);
    internal static bool SynchronizationContextSetToNullIsEnabled();
    internal static void SynchronizationContextSetToNull();
}
public class System.ServiceModel.Discovery.UdpAnnouncementEndpoint : AnnouncementEndpoint {
    public static Uri DefaultIPv4MulticastAddress;
    public static Uri DefaultIPv6MulticastAddress;
    public Uri MulticastAddress { get; public set; }
    [ObsoleteAttribute("TranportSettings property in System.SerivceModel.Discovery.UdpAnnouncementEndpoint is obsolete. Consider using System.ServiceModel.Channels.UdpTransportBindingElement for setting the transport properties.")]
public UdpTransportSettings TransportSettings { get; }
    public UdpAnnouncementEndpoint(string multicastAddress);
    public UdpAnnouncementEndpoint(Uri multicastAddress);
    public UdpAnnouncementEndpoint(DiscoveryVersion discoveryVersion);
    public UdpAnnouncementEndpoint(DiscoveryVersion discoveryVersion, string multicastAddress);
    public UdpAnnouncementEndpoint(DiscoveryVersion discoveryVersion, Uri multicastAddress);
    private static UdpAnnouncementEndpoint();
    public Uri get_MulticastAddress();
    public void set_MulticastAddress(Uri value);
    public UdpTransportSettings get_TransportSettings();
}
internal class System.ServiceModel.Discovery.UdpContractFilterBehavior : object {
    public sealed virtual void AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters);
    public sealed virtual void ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime);
    public sealed virtual void ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher);
    public sealed virtual void Validate(ServiceEndpoint endpoint);
}
public class System.ServiceModel.Discovery.UdpDiscoveryEndpoint : DiscoveryEndpoint {
    public static Uri DefaultIPv4MulticastAddress;
    public static Uri DefaultIPv6MulticastAddress;
    public Uri MulticastAddress { get; public set; }
    [ObsoleteAttribute("TranportSettings property in System.SerivceModel.Discovery.UdpDiscoveryEndpoint is obsolete. Consider using System.ServiceModel.Channels.UdpTransportBindingElement for setting the transport properties.")]
public UdpTransportSettings TransportSettings { get; }
    public UdpDiscoveryEndpoint(string multicastAddress);
    public UdpDiscoveryEndpoint(Uri multicastAddress);
    public UdpDiscoveryEndpoint(DiscoveryVersion discoveryVersion);
    public UdpDiscoveryEndpoint(DiscoveryVersion discoveryVersion, string multicastAddress);
    public UdpDiscoveryEndpoint(DiscoveryVersion discoveryVersion, Uri multicastAddress);
    private static UdpDiscoveryEndpoint();
    public Uri get_MulticastAddress();
    public void set_MulticastAddress(Uri value);
    public UdpTransportSettings get_TransportSettings();
}
internal class System.ServiceModel.Discovery.UdpDiscoveryEndpointProvider : DiscoveryEndpointProvider {
    public virtual DiscoveryEndpoint GetDiscoveryEndpoint();
}
internal class System.ServiceModel.Discovery.UdpDiscoveryMessageFilter : MessageFilter {
    public MessageFilter InnerFilter { get; }
    public UdpDiscoveryMessageFilter(MessageFilter innerFilter);
    public MessageFilter get_InnerFilter();
    public virtual bool Match(Message message);
    public virtual bool Match(MessageBuffer buffer);
}
internal class System.ServiceModel.Discovery.UdpReplyToBehavior : object {
    public UdpReplyToBehavior(string scheme);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(ServiceEndpoint endpoint, BindingParameterCollection bindingParameters);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(ServiceEndpoint endpoint, ClientRuntime clientRuntime);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(ServiceEndpoint endpoint, EndpointDispatcher endpointDispatcher);
    private sealed virtual override void System.ServiceModel.Description.IEndpointBehavior.Validate(ServiceEndpoint endpoint);
    public sealed virtual object AfterReceiveRequest(Message& request, IClientChannel channel, InstanceContext instanceContext);
    public sealed virtual void BeforeSendReply(Message& reply, object correlationState);
    private sealed virtual override void System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(Message& reply, object correlationState);
    private sealed virtual override object System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(Message& request, IClientChannel channel);
}
public class System.ServiceModel.Discovery.UdpTransportSettings : object {
    public int DuplicateMessageHistoryLength { get; public set; }
    public int MaxPendingMessageCount { get; public set; }
    public int MaxMulticastRetransmitCount { get; public set; }
    public int MaxUnicastRetransmitCount { get; public set; }
    public string MulticastInterfaceId { get; public set; }
    public int SocketReceiveBufferSize { get; public set; }
    public long MaxReceivedMessageSize { get; public set; }
    public long MaxBufferPoolSize { get; public set; }
    public int TimeToLive { get; public set; }
    internal UdpTransportBindingElement UdpTransportBindingElement { get; private set; }
    internal UdpTransportSettings(UdpTransportBindingElement udpTransportBindingElement);
    public int get_DuplicateMessageHistoryLength();
    public void set_DuplicateMessageHistoryLength(int value);
    public int get_MaxPendingMessageCount();
    public void set_MaxPendingMessageCount(int value);
    public int get_MaxMulticastRetransmitCount();
    public void set_MaxMulticastRetransmitCount(int value);
    public int get_MaxUnicastRetransmitCount();
    public void set_MaxUnicastRetransmitCount(int value);
    public string get_MulticastInterfaceId();
    public void set_MulticastInterfaceId(string value);
    public int get_SocketReceiveBufferSize();
    public void set_SocketReceiveBufferSize(int value);
    public long get_MaxReceivedMessageSize();
    public void set_MaxReceivedMessageSize(long value);
    public long get_MaxBufferPoolSize();
    public void set_MaxBufferPoolSize(long value);
    public int get_TimeToLive();
    public void set_TimeToLive(int value);
    [CompilerGeneratedAttribute]
internal UdpTransportBindingElement get_UdpTransportBindingElement();
    [CompilerGeneratedAttribute]
private void set_UdpTransportBindingElement(UdpTransportBindingElement value);
}
internal class System.ServiceModel.Discovery.Version11.AnnouncementInnerClient11 : ClientBase`1<IAnnouncementContract11> {
    public DiscoveryMessageSequenceGenerator DiscoveryMessageSequenceGenerator { get; public set; }
    public ChannelFactory ChannelFactory { get; }
    public IClientChannel InnerChannel { get; }
    public ServiceEndpoint Endpoint { get; }
    public ICommunicationObject InnerCommunicationObject { get; }
    public AnnouncementInnerClient11(AnnouncementEndpoint announcementEndpoint);
    private sealed virtual override void System.ServiceModel.Discovery.IAnnouncementInnerClient.add_HelloOperationCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    private sealed virtual override void System.ServiceModel.Discovery.IAnnouncementInnerClient.remove_HelloOperationCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    private sealed virtual override void System.ServiceModel.Discovery.IAnnouncementInnerClient.add_ByeOperationCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    private sealed virtual override void System.ServiceModel.Discovery.IAnnouncementInnerClient.remove_ByeOperationCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public sealed virtual DiscoveryMessageSequenceGenerator get_DiscoveryMessageSequenceGenerator();
    public sealed virtual void set_DiscoveryMessageSequenceGenerator(DiscoveryMessageSequenceGenerator value);
    public sealed virtual ChannelFactory get_ChannelFactory();
    public sealed virtual IClientChannel get_InnerChannel();
    public sealed virtual ServiceEndpoint get_Endpoint();
    public sealed virtual ICommunicationObject get_InnerCommunicationObject();
    public sealed virtual void HelloOperation(EndpointDiscoveryMetadata endpointDiscoveryMetadata);
    public sealed virtual void ByeOperation(EndpointDiscoveryMetadata endpointDiscoveryMetadata);
    public sealed virtual IAsyncResult BeginHelloOperation(EndpointDiscoveryMetadata endpointDiscoveryMetadata, AsyncCallback callback, object state);
    public sealed virtual void EndHelloOperation(IAsyncResult result);
    public sealed virtual IAsyncResult BeginByeOperation(EndpointDiscoveryMetadata endpointDiscoveryMetadata, AsyncCallback callback, object state);
    public sealed virtual void EndByeOperation(IAsyncResult result);
    public sealed virtual void HelloOperationAsync(EndpointDiscoveryMetadata endpointDiscoveryMetadata, object userState);
    public sealed virtual void ByeOperationAsync(EndpointDiscoveryMetadata endpointDiscoveryMetadata, object userState);
    private sealed virtual override ClientCredentials System.ServiceModel.Discovery.IAnnouncementInnerClient.get_ClientCredentials();
}
[MessageContractAttribute]
internal class System.ServiceModel.Discovery.Version11.ByeMessage11 : object {
    [MessageHeaderAttribute]
public DiscoveryMessageSequence11 MessageSequence { get; private set; }
    [MessageBodyMemberAttribute]
public EndpointDiscoveryMetadata11 Bye { get; private set; }
    [CompilerGeneratedAttribute]
public DiscoveryMessageSequence11 get_MessageSequence();
    [CompilerGeneratedAttribute]
private void set_MessageSequence(DiscoveryMessageSequence11 value);
    [CompilerGeneratedAttribute]
public EndpointDiscoveryMetadata11 get_Bye();
    [CompilerGeneratedAttribute]
private void set_Bye(EndpointDiscoveryMetadata11 value);
    public static ByeMessage11 Create(DiscoveryMessageSequence messageSequence, EndpointDiscoveryMetadata endpointDiscoveryMetadata);
}
internal class System.ServiceModel.Discovery.Version11.ByeOperation11AsyncResult : ByeOperationAsyncResult`1<ByeMessage11> {
    public ByeOperation11AsyncResult(IAnnouncementServiceImplementation announcementServiceImpl, ByeMessage11 message, AsyncCallback callback, object state);
    public static void End(IAsyncResult result);
    protected virtual bool ValidateContent(ByeMessage11 message);
    protected virtual DiscoveryMessageSequence GetMessageSequence(ByeMessage11 message);
    protected virtual EndpointDiscoveryMetadata GetEndpointDiscoveryMetadata(ByeMessage11 message);
}
internal class System.ServiceModel.Discovery.Version11.DiscoveryInnerClientAdhoc11 : object {
    public ClientCredentials ClientCredentials { get; }
    public ChannelFactory ChannelFactory { get; }
    public IClientChannel InnerChannel { get; }
    public ServiceEndpoint Endpoint { get; }
    public ICommunicationObject InnerCommunicationObject { get; }
    public bool IsRequestResponse { get; }
    public DiscoveryInnerClientAdhoc11(DiscoveryEndpoint discoveryEndpoint, IDiscoveryInnerClientResponse responseReceiver);
    public sealed virtual ClientCredentials get_ClientCredentials();
    public sealed virtual ChannelFactory get_ChannelFactory();
    public sealed virtual IClientChannel get_InnerChannel();
    public sealed virtual ServiceEndpoint get_Endpoint();
    public sealed virtual ICommunicationObject get_InnerCommunicationObject();
    public sealed virtual bool get_IsRequestResponse();
    public sealed virtual IAsyncResult BeginProbeOperation(FindCriteria findCriteria, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginResolveOperation(ResolveCriteria resolveCriteria, AsyncCallback callback, object state);
    public sealed virtual void EndProbeOperation(IAsyncResult result);
    public sealed virtual void EndResolveOperation(IAsyncResult result);
    public sealed virtual void ProbeOperation(FindCriteria findCriteria);
    public sealed virtual void ResolveOperation(ResolveCriteria resolveCriteria);
    public sealed virtual IAsyncResult BeginProbeMatchOperation(ProbeMatchesMessage11 response, AsyncCallback callback, object state);
    public sealed virtual void EndProbeMatchOperation(IAsyncResult result);
    public sealed virtual IAsyncResult BeginResolveMatchOperation(ResolveMatchesMessage11 response, AsyncCallback callback, object state);
    public sealed virtual void EndResolveMatchOperation(IAsyncResult result);
    public sealed virtual IAsyncResult BeginHelloOperation(HelloMessage11 message, AsyncCallback callback, object state);
    public sealed virtual void EndHelloOperation(IAsyncResult result);
}
internal class System.ServiceModel.Discovery.Version11.DiscoveryInnerClientManaged11 : ClientBase`1<IDiscoveryContractManaged11> {
    public ClientCredentials ClientCredentials { get; }
    public ChannelFactory ChannelFactory { get; }
    public IClientChannel InnerChannel { get; }
    public ServiceEndpoint Endpoint { get; }
    public ICommunicationObject InnerCommunicationObject { get; }
    public bool IsRequestResponse { get; }
    internal DiscoveryInnerClientManaged11(DiscoveryEndpoint discoveryEndpoint, IDiscoveryInnerClientResponse responseReceiver);
    public sealed virtual ClientCredentials get_ClientCredentials();
    public sealed virtual ChannelFactory get_ChannelFactory();
    public sealed virtual IClientChannel get_InnerChannel();
    public sealed virtual ServiceEndpoint get_Endpoint();
    public sealed virtual ICommunicationObject get_InnerCommunicationObject();
    public sealed virtual bool get_IsRequestResponse();
    public sealed virtual IAsyncResult BeginProbeOperation(FindCriteria findCriteria, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginResolveOperation(ResolveCriteria resolveCriteria, AsyncCallback callback, object state);
    public sealed virtual void EndProbeOperation(IAsyncResult result);
    public sealed virtual void EndResolveOperation(IAsyncResult result);
    public sealed virtual void ProbeOperation(FindCriteria findCriteria);
    public sealed virtual void ResolveOperation(ResolveCriteria resolveCriteria);
}
[XmlSchemaProviderAttribute("GetSchema")]
public class System.ServiceModel.Discovery.Version11.DiscoveryMessageSequence11 : object {
    public static DiscoveryMessageSequence11 FromDiscoveryMessageSequence(DiscoveryMessageSequence discoveryMessageSequence);
    public static XmlQualifiedName GetSchema(XmlSchemaSet schemaSet);
    public DiscoveryMessageSequence ToDiscoveryMessageSequence();
    public sealed virtual XmlSchema GetSchema();
    public sealed virtual void ReadXml(XmlReader reader);
    public sealed virtual void WriteXml(XmlWriter writer);
}
internal class System.ServiceModel.Discovery.Version11.DiscoveryVersion11Implementation : object {
    public string WsaNamespace { get; }
    public Uri DiscoveryAddress { get; }
    public MessageVersion MessageVersion { get; }
    public SchemaQualifiedNames QualifiedNames { get; }
    public DataContractSerializer EprSerializer { get; }
    private static DiscoveryVersion11Implementation();
    public sealed virtual string get_WsaNamespace();
    public sealed virtual Uri get_DiscoveryAddress();
    public sealed virtual MessageVersion get_MessageVersion();
    public sealed virtual SchemaQualifiedNames get_QualifiedNames();
    public sealed virtual DataContractSerializer get_EprSerializer();
    public sealed virtual ContractDescription GetDiscoveryContract(ServiceDiscoveryMode discoveryMode);
    public sealed virtual ContractDescription GetAnnouncementContract();
    public sealed virtual IDiscoveryInnerClient CreateDiscoveryInnerClient(DiscoveryEndpoint discoveryEndpoint, IDiscoveryInnerClientResponse responseReceiver);
    public sealed virtual IAnnouncementInnerClient CreateAnnouncementInnerClient(AnnouncementEndpoint announcementEndpoint);
    public sealed virtual Uri ToVersionIndependentScopeMatchBy(Uri versionDependentScopeMatchBy);
    public sealed virtual Uri ToVersionDependentScopeMatchBy(Uri versionIndependentScopeMatchBy);
}
[XmlSchemaProviderAttribute("GetSchema")]
public class System.ServiceModel.Discovery.Version11.EndpointDiscoveryMetadata11 : object {
    public static EndpointDiscoveryMetadata11 FromEndpointDiscoveryMetadata(EndpointDiscoveryMetadata endpointDiscoveryMetadata);
    public static XmlQualifiedName GetSchema(XmlSchemaSet schemaSet);
    public EndpointDiscoveryMetadata ToEndpointDiscoveryMetadata();
    public sealed virtual XmlSchema GetSchema();
    public sealed virtual void ReadXml(XmlReader reader);
    public sealed virtual void WriteXml(XmlWriter writer);
}
[XmlSchemaProviderAttribute("GetSchema")]
public class System.ServiceModel.Discovery.Version11.FindCriteria11 : object {
    public static FindCriteria11 FromFindCriteria(FindCriteria findCriteria);
    public static XmlQualifiedName GetSchema(XmlSchemaSet schemaSet);
    public FindCriteria ToFindCriteria();
    public sealed virtual XmlSchema GetSchema();
    public sealed virtual void ReadXml(XmlReader reader);
    public sealed virtual void WriteXml(XmlWriter writer);
}
[MessageContractAttribute]
internal class System.ServiceModel.Discovery.Version11.HelloMessage11 : object {
    [MessageHeaderAttribute]
public DiscoveryMessageSequence11 MessageSequence { get; private set; }
    [MessageBodyMemberAttribute]
public EndpointDiscoveryMetadata11 Hello { get; private set; }
    [CompilerGeneratedAttribute]
public DiscoveryMessageSequence11 get_MessageSequence();
    [CompilerGeneratedAttribute]
private void set_MessageSequence(DiscoveryMessageSequence11 value);
    [CompilerGeneratedAttribute]
public EndpointDiscoveryMetadata11 get_Hello();
    [CompilerGeneratedAttribute]
private void set_Hello(EndpointDiscoveryMetadata11 value);
    public static HelloMessage11 Create(DiscoveryMessageSequence messageSequence, EndpointDiscoveryMetadata endpointDiscoveryMetadata);
}
internal class System.ServiceModel.Discovery.Version11.HelloOperation11AsyncResult : HelloOperationAsyncResult`1<HelloMessage11> {
    public HelloOperation11AsyncResult(IAnnouncementServiceImplementation announcementServiceImpl, HelloMessage11 message, AsyncCallback callback, object state);
    public static void End(IAsyncResult result);
    protected virtual bool ValidateContent(HelloMessage11 message);
    protected virtual DiscoveryMessageSequence GetMessageSequence(HelloMessage11 message);
    protected virtual EndpointDiscoveryMetadata GetEndpointDiscoveryMetadata(HelloMessage11 message);
}
[ServiceContractAttribute]
internal interface System.ServiceModel.Discovery.Version11.IAnnouncementContract11 {
    [OperationContractAttribute]
public abstract virtual void HelloOperation(HelloMessage11 message);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginHelloOperation(HelloMessage11 message, AsyncCallback callback, object state);
    public abstract virtual void EndHelloOperation(IAsyncResult result);
    [OperationContractAttribute]
public abstract virtual void ByeOperation(ByeMessage11 message);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginByeOperation(ByeMessage11 message, AsyncCallback callback, object state);
    public abstract virtual void EndByeOperation(IAsyncResult result);
}
[ServiceContractAttribute]
internal interface System.ServiceModel.Discovery.Version11.IDiscoveryContractAdhoc11 {
    [OperationContractAttribute]
public abstract virtual void ProbeOperation(ProbeMessage11 request);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginProbeOperation(ProbeMessage11 request, AsyncCallback callback, object state);
    public abstract virtual void EndProbeOperation(IAsyncResult result);
    [OperationContractAttribute]
public abstract virtual void ResolveOperation(ResolveMessage11 request);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginResolveOperation(ResolveMessage11 request, AsyncCallback callback, object state);
    public abstract virtual void EndResolveOperation(IAsyncResult result);
}
[ServiceContractAttribute]
internal interface System.ServiceModel.Discovery.Version11.IDiscoveryContractManaged11 {
    [OperationContractAttribute]
public abstract virtual ProbeMatchesMessage11 ProbeOperation(ProbeMessage11 request);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginProbeOperation(ProbeMessage11 request, AsyncCallback callback, object state);
    public abstract virtual ProbeMatchesMessage11 EndProbeOperation(IAsyncResult result);
    [OperationContractAttribute]
public abstract virtual ResolveMatchesMessage11 ResolveOperation(ResolveMessage11 request);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginResolveOperation(ResolveMessage11 request, AsyncCallback callback, object state);
    public abstract virtual ResolveMatchesMessage11 EndResolveOperation(IAsyncResult result);
}
[ServiceContractAttribute]
internal interface System.ServiceModel.Discovery.Version11.IDiscoveryResponseContract11 {
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginProbeMatchOperation(ProbeMatchesMessage11 response, AsyncCallback callback, object state);
    public abstract virtual void EndProbeMatchOperation(IAsyncResult result);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginResolveMatchOperation(ResolveMatchesMessage11 response, AsyncCallback callback, object state);
    public abstract virtual void EndResolveMatchOperation(IAsyncResult result);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginHelloOperation(HelloMessage11 message, AsyncCallback callback, object state);
    public abstract virtual void EndHelloOperation(IAsyncResult result);
}
internal class System.ServiceModel.Discovery.Version11.ProbeDuplex11AsyncResult : ProbeDuplexAsyncResult`2<ProbeMessage11, IDiscoveryResponseContract11> {
    internal ProbeDuplex11AsyncResult(ProbeMessage11 probeMessage, IDiscoveryServiceImplementation discoveryServiceImpl, IMulticastSuppressionImplementation multicastSuppressionImpl, AsyncCallback callback, object state);
    public static void End(IAsyncResult result);
    protected virtual bool ValidateContent(ProbeMessage11 probeMessage);
    protected virtual FindCriteria GetFindCriteria(ProbeMessage11 probeMessage);
    protected virtual IAsyncResult BeginSendFindResponse(IDiscoveryResponseContract11 responseChannel, DiscoveryMessageSequence discoveryMessageSequence, EndpointDiscoveryMetadata matchingEndpoint, AsyncCallback callback, object state);
    protected virtual void EndSendFindResponse(IDiscoveryResponseContract11 responseChannel, IAsyncResult result);
    protected virtual IAsyncResult BeginSendProxyAnnouncement(IDiscoveryResponseContract11 responseChannel, DiscoveryMessageSequence discoveryMessageSequence, EndpointDiscoveryMetadata proxyEndpointDiscoveryMetadata, AsyncCallback callback, object state);
    protected virtual void EndSendProxyAnnouncement(IDiscoveryResponseContract11 responseChannel, IAsyncResult result);
}
[CollectionDataContractAttribute]
internal class System.ServiceModel.Discovery.Version11.ProbeMatches11 : Collection`1<EndpointDiscoveryMetadata11> {
    public static ProbeMatches11 Create(EndpointDiscoveryMetadata endpointDiscoveryMetadata);
    public static ProbeMatches11 Create(Collection`1<EndpointDiscoveryMetadata> endpointDiscoveryMetadatas);
}
[MessageContractAttribute]
internal class System.ServiceModel.Discovery.Version11.ProbeMatchesMessage11 : object {
    [MessageHeaderAttribute]
public DiscoveryMessageSequence11 MessageSequence { get; private set; }
    [MessageBodyMemberAttribute]
public ProbeMatches11 ProbeMatches { get; private set; }
    [CompilerGeneratedAttribute]
public DiscoveryMessageSequence11 get_MessageSequence();
    [CompilerGeneratedAttribute]
private void set_MessageSequence(DiscoveryMessageSequence11 value);
    [CompilerGeneratedAttribute]
public ProbeMatches11 get_ProbeMatches();
    [CompilerGeneratedAttribute]
private void set_ProbeMatches(ProbeMatches11 value);
    public static ProbeMatchesMessage11 Create(DiscoveryMessageSequence messageSequence, EndpointDiscoveryMetadata endpointDiscoveryMetadata);
    public static ProbeMatchesMessage11 Create(DiscoveryMessageSequence messageSequence, Collection`1<EndpointDiscoveryMetadata> endpointDiscoveryMetadatas);
}
[MessageContractAttribute]
internal class System.ServiceModel.Discovery.Version11.ProbeMessage11 : object {
    [MessageBodyMemberAttribute]
public FindCriteria11 Probe { get; public set; }
    [CompilerGeneratedAttribute]
public FindCriteria11 get_Probe();
    [CompilerGeneratedAttribute]
public void set_Probe(FindCriteria11 value);
}
internal class System.ServiceModel.Discovery.Version11.ProbeRequestResponse11AsyncResult : ProbeRequestResponseAsyncResult`2<ProbeMessage11, ProbeMatchesMessage11> {
    internal ProbeRequestResponse11AsyncResult(ProbeMessage11 probeMessage, IDiscoveryServiceImplementation discoveryServiceImpl, AsyncCallback callback, object state);
    public static ProbeMatchesMessage11 End(IAsyncResult result);
    protected virtual bool ValidateContent(ProbeMessage11 probeMessage);
    protected virtual FindCriteria GetFindCriteria(ProbeMessage11 probeMessage);
    protected virtual ProbeMatchesMessage11 GetProbeResponse(DiscoveryMessageSequence discoveryMessageSequence, Collection`1<EndpointDiscoveryMetadata> matchingEndpoints);
}
[XmlSchemaProviderAttribute("GetSchema")]
public class System.ServiceModel.Discovery.Version11.ResolveCriteria11 : object {
    public static ResolveCriteria11 FromResolveCriteria(ResolveCriteria resolveCriteria);
    public static XmlQualifiedName GetSchema(XmlSchemaSet schemaSet);
    public ResolveCriteria ToResolveCriteria();
    public sealed virtual XmlSchema GetSchema();
    public sealed virtual void ReadXml(XmlReader reader);
    public sealed virtual void WriteXml(XmlWriter writer);
}
internal class System.ServiceModel.Discovery.Version11.ResolveDuplex11AsyncResult : ResolveDuplexAsyncResult`2<ResolveMessage11, IDiscoveryResponseContract11> {
    internal ResolveDuplex11AsyncResult(ResolveMessage11 resolveMessage, IDiscoveryServiceImplementation discoveryServiceImpl, IMulticastSuppressionImplementation multicastSuppressionImpl, AsyncCallback callback, object state);
    public static void End(IAsyncResult result);
    protected virtual bool ValidateContent(ResolveMessage11 resolveMessage);
    protected virtual ResolveCriteria GetResolveCriteria(ResolveMessage11 resolveMessage);
    protected virtual IAsyncResult BeginSendResolveResponse(IDiscoveryResponseContract11 responseChannel, DiscoveryMessageSequence discoveryMessageSequence, EndpointDiscoveryMetadata matchingEndpoint, AsyncCallback callback, object state);
    protected virtual void EndSendResolveResponse(IDiscoveryResponseContract11 responseChannel, IAsyncResult result);
    protected virtual IAsyncResult BeginSendProxyAnnouncement(IDiscoveryResponseContract11 responseChannel, DiscoveryMessageSequence discoveryMessageSequence, EndpointDiscoveryMetadata proxyEndpointDiscoveryMetadata, AsyncCallback callback, object state);
    protected virtual void EndSendProxyAnnouncement(IDiscoveryResponseContract11 responseChannel, IAsyncResult result);
}
[DataContractAttribute]
internal class System.ServiceModel.Discovery.Version11.ResolveMatches11 : object {
    [DataMemberAttribute]
public EndpointDiscoveryMetadata11 ResolveMatch { get; private set; }
    [CompilerGeneratedAttribute]
public EndpointDiscoveryMetadata11 get_ResolveMatch();
    [CompilerGeneratedAttribute]
private void set_ResolveMatch(EndpointDiscoveryMetadata11 value);
    public static ResolveMatches11 Create(EndpointDiscoveryMetadata endpointDiscoveryMetadata);
}
[MessageContractAttribute]
internal class System.ServiceModel.Discovery.Version11.ResolveMatchesMessage11 : object {
    [MessageHeaderAttribute]
public DiscoveryMessageSequence11 MessageSequence { get; private set; }
    [MessageBodyMemberAttribute]
public ResolveMatches11 ResolveMatches { get; private set; }
    [CompilerGeneratedAttribute]
public DiscoveryMessageSequence11 get_MessageSequence();
    [CompilerGeneratedAttribute]
private void set_MessageSequence(DiscoveryMessageSequence11 value);
    [CompilerGeneratedAttribute]
public ResolveMatches11 get_ResolveMatches();
    [CompilerGeneratedAttribute]
private void set_ResolveMatches(ResolveMatches11 value);
    public static ResolveMatchesMessage11 Create(DiscoveryMessageSequence messageSequence, EndpointDiscoveryMetadata endpointDiscoveryMetadata);
}
[MessageContractAttribute]
internal class System.ServiceModel.Discovery.Version11.ResolveMessage11 : object {
    [MessageBodyMemberAttribute]
public ResolveCriteria11 Resolve { get; public set; }
    [CompilerGeneratedAttribute]
public ResolveCriteria11 get_Resolve();
    [CompilerGeneratedAttribute]
public void set_Resolve(ResolveCriteria11 value);
}
internal class System.ServiceModel.Discovery.Version11.ResolveRequestResponse11AsyncResult : ResolveRequestResponseAsyncResult`2<ResolveMessage11, ResolveMatchesMessage11> {
    internal ResolveRequestResponse11AsyncResult(ResolveMessage11 resolveMessage, IDiscoveryServiceImplementation discoveryServiceImpl, AsyncCallback callback, object state);
    public static ResolveMatchesMessage11 End(IAsyncResult result);
    protected virtual bool ValidateContent(ResolveMessage11 resolveMessage);
    protected virtual ResolveCriteria GetResolveCriteria(ResolveMessage11 resolveMessage);
    protected virtual ResolveMatchesMessage11 GetResolveResponse(DiscoveryMessageSequence discoveryMessageSequence, EndpointDiscoveryMetadata matchingEndpoint);
}
internal class System.ServiceModel.Discovery.VersionApril2005.AnnouncementInnerClientApril2005 : ClientBase`1<IAnnouncementContractApril2005> {
    public DiscoveryMessageSequenceGenerator DiscoveryMessageSequenceGenerator { get; public set; }
    public ChannelFactory ChannelFactory { get; }
    public IClientChannel InnerChannel { get; }
    public ServiceEndpoint Endpoint { get; }
    public ICommunicationObject InnerCommunicationObject { get; }
    public AnnouncementInnerClientApril2005(AnnouncementEndpoint announcementEndpoint);
    private sealed virtual override void System.ServiceModel.Discovery.IAnnouncementInnerClient.add_HelloOperationCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    private sealed virtual override void System.ServiceModel.Discovery.IAnnouncementInnerClient.remove_HelloOperationCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    private sealed virtual override void System.ServiceModel.Discovery.IAnnouncementInnerClient.add_ByeOperationCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    private sealed virtual override void System.ServiceModel.Discovery.IAnnouncementInnerClient.remove_ByeOperationCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public sealed virtual DiscoveryMessageSequenceGenerator get_DiscoveryMessageSequenceGenerator();
    public sealed virtual void set_DiscoveryMessageSequenceGenerator(DiscoveryMessageSequenceGenerator value);
    public sealed virtual ChannelFactory get_ChannelFactory();
    public sealed virtual IClientChannel get_InnerChannel();
    public sealed virtual ServiceEndpoint get_Endpoint();
    public sealed virtual ICommunicationObject get_InnerCommunicationObject();
    public sealed virtual void HelloOperation(EndpointDiscoveryMetadata endpointDiscoveryMetadata);
    public sealed virtual void ByeOperation(EndpointDiscoveryMetadata endpointDiscoveryMetadata);
    public sealed virtual IAsyncResult BeginHelloOperation(EndpointDiscoveryMetadata endpointDiscoveryMetadata, AsyncCallback callback, object state);
    public sealed virtual void EndHelloOperation(IAsyncResult result);
    public sealed virtual IAsyncResult BeginByeOperation(EndpointDiscoveryMetadata endpointDiscoveryMetadata, AsyncCallback callback, object state);
    public sealed virtual void EndByeOperation(IAsyncResult result);
    public sealed virtual void HelloOperationAsync(EndpointDiscoveryMetadata endpointDiscoveryMetadata, object userState);
    public sealed virtual void ByeOperationAsync(EndpointDiscoveryMetadata endpointDiscoveryMetadata, object userState);
    private sealed virtual override ClientCredentials System.ServiceModel.Discovery.IAnnouncementInnerClient.get_ClientCredentials();
}
[MessageContractAttribute]
internal class System.ServiceModel.Discovery.VersionApril2005.ByeMessageApril2005 : object {
    [MessageHeaderAttribute]
public DiscoveryMessageSequenceApril2005 MessageSequence { get; private set; }
    [MessageBodyMemberAttribute]
public EndpointDiscoveryMetadataApril2005 Bye { get; private set; }
    [CompilerGeneratedAttribute]
public DiscoveryMessageSequenceApril2005 get_MessageSequence();
    [CompilerGeneratedAttribute]
private void set_MessageSequence(DiscoveryMessageSequenceApril2005 value);
    [CompilerGeneratedAttribute]
public EndpointDiscoveryMetadataApril2005 get_Bye();
    [CompilerGeneratedAttribute]
private void set_Bye(EndpointDiscoveryMetadataApril2005 value);
    internal static ByeMessageApril2005 Create(DiscoveryMessageSequence messageSequence, EndpointDiscoveryMetadata endpointDiscoveryMetadata);
}
internal class System.ServiceModel.Discovery.VersionApril2005.ByeOperationApril2005AsyncResult : ByeOperationAsyncResult`1<ByeMessageApril2005> {
    public ByeOperationApril2005AsyncResult(IAnnouncementServiceImplementation announcementServiceImpl, ByeMessageApril2005 message, AsyncCallback callback, object state);
    public static void End(IAsyncResult result);
    protected virtual bool ValidateContent(ByeMessageApril2005 message);
    protected virtual DiscoveryMessageSequence GetMessageSequence(ByeMessageApril2005 message);
    protected virtual EndpointDiscoveryMetadata GetEndpointDiscoveryMetadata(ByeMessageApril2005 message);
}
internal class System.ServiceModel.Discovery.VersionApril2005.DiscoveryInnerClientApril2005`1 : object {
    public ClientCredentials ClientCredentials { get; }
    public ChannelFactory ChannelFactory { get; }
    public IClientChannel InnerChannel { get; }
    public ServiceEndpoint Endpoint { get; }
    public ICommunicationObject InnerCommunicationObject { get; }
    public bool IsRequestResponse { get; }
    public DiscoveryInnerClientApril2005`1(DiscoveryEndpoint discoveryEndpoint, IDiscoveryInnerClientResponse responseReceiver);
    public sealed virtual ClientCredentials get_ClientCredentials();
    public sealed virtual ChannelFactory get_ChannelFactory();
    public sealed virtual IClientChannel get_InnerChannel();
    public sealed virtual ServiceEndpoint get_Endpoint();
    public sealed virtual ICommunicationObject get_InnerCommunicationObject();
    public sealed virtual bool get_IsRequestResponse();
    public sealed virtual IAsyncResult BeginProbeOperation(FindCriteria findCriteria, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginResolveOperation(ResolveCriteria resolveCriteria, AsyncCallback callback, object state);
    public sealed virtual void EndProbeOperation(IAsyncResult result);
    public sealed virtual void EndResolveOperation(IAsyncResult result);
    public sealed virtual void ProbeOperation(FindCriteria findCriteria);
    public sealed virtual void ResolveOperation(ResolveCriteria resolveCriteria);
    public sealed virtual IAsyncResult BeginProbeMatchOperation(ProbeMatchesMessageApril2005 response, AsyncCallback callback, object state);
    public sealed virtual void EndProbeMatchOperation(IAsyncResult result);
    public sealed virtual IAsyncResult BeginResolveMatchOperation(ResolveMatchesMessageApril2005 response, AsyncCallback callback, object state);
    public sealed virtual void EndResolveMatchOperation(IAsyncResult result);
    public sealed virtual IAsyncResult BeginHelloOperation(HelloMessageApril2005 message, AsyncCallback callback, object state);
    public sealed virtual void EndHelloOperation(IAsyncResult result);
}
[XmlSchemaProviderAttribute("GetSchema")]
public class System.ServiceModel.Discovery.VersionApril2005.DiscoveryMessageSequenceApril2005 : object {
    public static DiscoveryMessageSequenceApril2005 FromDiscoveryMessageSequence(DiscoveryMessageSequence discoveryMessageSequence);
    public static XmlQualifiedName GetSchema(XmlSchemaSet schemaSet);
    public DiscoveryMessageSequence ToDiscoveryMessageSequence();
    public sealed virtual XmlSchema GetSchema();
    public sealed virtual void ReadXml(XmlReader reader);
    public sealed virtual void WriteXml(XmlWriter writer);
}
internal class System.ServiceModel.Discovery.VersionApril2005.DiscoveryVersionApril2005Implementation : object {
    public string WsaNamespace { get; }
    public Uri DiscoveryAddress { get; }
    public MessageVersion MessageVersion { get; }
    public SchemaQualifiedNames QualifiedNames { get; }
    public DataContractSerializer EprSerializer { get; }
    private static DiscoveryVersionApril2005Implementation();
    public sealed virtual string get_WsaNamespace();
    public sealed virtual Uri get_DiscoveryAddress();
    public sealed virtual MessageVersion get_MessageVersion();
    public sealed virtual SchemaQualifiedNames get_QualifiedNames();
    public sealed virtual DataContractSerializer get_EprSerializer();
    public sealed virtual ContractDescription GetDiscoveryContract(ServiceDiscoveryMode discoveryMode);
    public sealed virtual ContractDescription GetAnnouncementContract();
    public sealed virtual IDiscoveryInnerClient CreateDiscoveryInnerClient(DiscoveryEndpoint discoveryEndpoint, IDiscoveryInnerClientResponse responseReceiver);
    public sealed virtual IAnnouncementInnerClient CreateAnnouncementInnerClient(AnnouncementEndpoint announcementEndpoint);
    public sealed virtual Uri ToVersionIndependentScopeMatchBy(Uri versionDependentScopeMatchBy);
    public sealed virtual Uri ToVersionDependentScopeMatchBy(Uri versionIndependentScopeMatchBy);
}
[XmlSchemaProviderAttribute("GetSchema")]
public class System.ServiceModel.Discovery.VersionApril2005.EndpointDiscoveryMetadataApril2005 : object {
    public static EndpointDiscoveryMetadataApril2005 FromEndpointDiscoveryMetadata(EndpointDiscoveryMetadata endpointDiscoveryMetadata);
    public static XmlQualifiedName GetSchema(XmlSchemaSet schemaSet);
    public EndpointDiscoveryMetadata ToEndpointDiscoveryMetadata();
    public sealed virtual XmlSchema GetSchema();
    public sealed virtual void ReadXml(XmlReader reader);
    public sealed virtual void WriteXml(XmlWriter writer);
}
[XmlSchemaProviderAttribute("GetSchema")]
public class System.ServiceModel.Discovery.VersionApril2005.FindCriteriaApril2005 : object {
    public static FindCriteriaApril2005 FromFindCriteria(FindCriteria findCriteria);
    public static XmlQualifiedName GetSchema(XmlSchemaSet schemaSet);
    public FindCriteria ToFindCriteria();
    public sealed virtual XmlSchema GetSchema();
    public sealed virtual void ReadXml(XmlReader reader);
    public sealed virtual void WriteXml(XmlWriter writer);
}
[MessageContractAttribute]
internal class System.ServiceModel.Discovery.VersionApril2005.HelloMessageApril2005 : object {
    [MessageHeaderAttribute]
public DiscoveryMessageSequenceApril2005 MessageSequence { get; private set; }
    [MessageBodyMemberAttribute]
public EndpointDiscoveryMetadataApril2005 Hello { get; private set; }
    [CompilerGeneratedAttribute]
public DiscoveryMessageSequenceApril2005 get_MessageSequence();
    [CompilerGeneratedAttribute]
private void set_MessageSequence(DiscoveryMessageSequenceApril2005 value);
    [CompilerGeneratedAttribute]
public EndpointDiscoveryMetadataApril2005 get_Hello();
    [CompilerGeneratedAttribute]
private void set_Hello(EndpointDiscoveryMetadataApril2005 value);
    public static HelloMessageApril2005 Create(DiscoveryMessageSequence messageSequence, EndpointDiscoveryMetadata endpointDiscoveryMetadata);
}
internal class System.ServiceModel.Discovery.VersionApril2005.HelloOperationApril2005AsyncResult : HelloOperationAsyncResult`1<HelloMessageApril2005> {
    public HelloOperationApril2005AsyncResult(IAnnouncementServiceImplementation announcementServiceImpl, HelloMessageApril2005 message, AsyncCallback callback, object state);
    public static void End(IAsyncResult result);
    protected virtual bool ValidateContent(HelloMessageApril2005 message);
    protected virtual DiscoveryMessageSequence GetMessageSequence(HelloMessageApril2005 message);
    protected virtual EndpointDiscoveryMetadata GetEndpointDiscoveryMetadata(HelloMessageApril2005 message);
}
[ServiceContractAttribute]
internal interface System.ServiceModel.Discovery.VersionApril2005.IAnnouncementContractApril2005 {
    [OperationContractAttribute]
public abstract virtual void HelloOperation(HelloMessageApril2005 message);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginHelloOperation(HelloMessageApril2005 message, AsyncCallback callback, object state);
    public abstract virtual void EndHelloOperation(IAsyncResult result);
    [OperationContractAttribute]
public abstract virtual void ByeOperation(ByeMessageApril2005 message);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginByeOperation(ByeMessageApril2005 message, AsyncCallback callback, object state);
    public abstract virtual void EndByeOperation(IAsyncResult result);
}
[ServiceContractAttribute]
internal interface System.ServiceModel.Discovery.VersionApril2005.IDiscoveryContractAdhocApril2005 {
}
[ServiceContractAttribute]
internal interface System.ServiceModel.Discovery.VersionApril2005.IDiscoveryContractApril2005 {
    [OperationContractAttribute]
public abstract virtual void ProbeOperation(ProbeMessageApril2005 request);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginProbeOperation(ProbeMessageApril2005 request, AsyncCallback callback, object state);
    public abstract virtual void EndProbeOperation(IAsyncResult result);
    [OperationContractAttribute]
public abstract virtual void ResolveOperation(ResolveMessageApril2005 request);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginResolveOperation(ResolveMessageApril2005 request, AsyncCallback callback, object state);
    public abstract virtual void EndResolveOperation(IAsyncResult result);
}
[ServiceContractAttribute]
internal interface System.ServiceModel.Discovery.VersionApril2005.IDiscoveryContractManagedApril2005 {
}
[ServiceContractAttribute]
internal interface System.ServiceModel.Discovery.VersionApril2005.IDiscoveryResponseContractApril2005 {
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginProbeMatchOperation(ProbeMatchesMessageApril2005 response, AsyncCallback callback, object state);
    public abstract virtual void EndProbeMatchOperation(IAsyncResult result);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginResolveMatchOperation(ResolveMatchesMessageApril2005 response, AsyncCallback callback, object state);
    public abstract virtual void EndResolveMatchOperation(IAsyncResult result);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginHelloOperation(HelloMessageApril2005 message, AsyncCallback callback, object state);
    public abstract virtual void EndHelloOperation(IAsyncResult result);
}
internal class System.ServiceModel.Discovery.VersionApril2005.ProbeDuplexApril2005AsyncResult : ProbeDuplexAsyncResult`2<ProbeMessageApril2005, IDiscoveryResponseContractApril2005> {
    internal ProbeDuplexApril2005AsyncResult(ProbeMessageApril2005 probeMessage, IDiscoveryServiceImplementation discoveryServiceImpl, IMulticastSuppressionImplementation multicastSuppressionImpl, AsyncCallback callback, object state);
    public static void End(IAsyncResult result);
    protected virtual bool ValidateContent(ProbeMessageApril2005 probeMessage);
    protected virtual FindCriteria GetFindCriteria(ProbeMessageApril2005 probeMessage);
    protected virtual IAsyncResult BeginSendFindResponse(IDiscoveryResponseContractApril2005 responseChannel, DiscoveryMessageSequence discoveryMessageSequence, EndpointDiscoveryMetadata matchingEndpoint, AsyncCallback callback, object state);
    protected virtual void EndSendFindResponse(IDiscoveryResponseContractApril2005 responseChannel, IAsyncResult result);
    protected virtual IAsyncResult BeginSendProxyAnnouncement(IDiscoveryResponseContractApril2005 responseChannel, DiscoveryMessageSequence discoveryMessageSequence, EndpointDiscoveryMetadata proxyEndpointDiscoveryMetadata, AsyncCallback callback, object state);
    protected virtual void EndSendProxyAnnouncement(IDiscoveryResponseContractApril2005 responseChannel, IAsyncResult result);
}
[CollectionDataContractAttribute]
internal class System.ServiceModel.Discovery.VersionApril2005.ProbeMatchesApril2005 : Collection`1<EndpointDiscoveryMetadataApril2005> {
    public static ProbeMatchesApril2005 Create(EndpointDiscoveryMetadata endpointDiscoveryMetadata);
    public static ProbeMatchesApril2005 Create(Collection`1<EndpointDiscoveryMetadata> endpointDiscoveryMetadatas);
}
[MessageContractAttribute]
internal class System.ServiceModel.Discovery.VersionApril2005.ProbeMatchesMessageApril2005 : object {
    [MessageHeaderAttribute]
public DiscoveryMessageSequenceApril2005 MessageSequence { get; private set; }
    [MessageBodyMemberAttribute]
public ProbeMatchesApril2005 ProbeMatches { get; private set; }
    [CompilerGeneratedAttribute]
public DiscoveryMessageSequenceApril2005 get_MessageSequence();
    [CompilerGeneratedAttribute]
private void set_MessageSequence(DiscoveryMessageSequenceApril2005 value);
    [CompilerGeneratedAttribute]
public ProbeMatchesApril2005 get_ProbeMatches();
    [CompilerGeneratedAttribute]
private void set_ProbeMatches(ProbeMatchesApril2005 value);
    public static ProbeMatchesMessageApril2005 Create(DiscoveryMessageSequence messageSequence, EndpointDiscoveryMetadata endpointDiscoveryMetadata);
}
[MessageContractAttribute]
internal class System.ServiceModel.Discovery.VersionApril2005.ProbeMessageApril2005 : object {
    [MessageBodyMemberAttribute]
public FindCriteriaApril2005 Probe { get; public set; }
    [CompilerGeneratedAttribute]
public FindCriteriaApril2005 get_Probe();
    [CompilerGeneratedAttribute]
public void set_Probe(FindCriteriaApril2005 value);
}
[XmlSchemaProviderAttribute("GetSchema")]
public class System.ServiceModel.Discovery.VersionApril2005.ResolveCriteriaApril2005 : object {
    public static ResolveCriteriaApril2005 FromResolveCriteria(ResolveCriteria resolveCriteria);
    public static XmlQualifiedName GetSchema(XmlSchemaSet schemaSet);
    public ResolveCriteria ToResolveCriteria();
    public sealed virtual XmlSchema GetSchema();
    public sealed virtual void ReadXml(XmlReader reader);
    public sealed virtual void WriteXml(XmlWriter writer);
}
internal class System.ServiceModel.Discovery.VersionApril2005.ResolveDuplexApril2005AsyncResult : ResolveDuplexAsyncResult`2<ResolveMessageApril2005, IDiscoveryResponseContractApril2005> {
    internal ResolveDuplexApril2005AsyncResult(ResolveMessageApril2005 resolveMessage, IDiscoveryServiceImplementation discoveryServiceImpl, IMulticastSuppressionImplementation multicastSuppressionImpl, AsyncCallback callback, object state);
    public static void End(IAsyncResult result);
    protected virtual bool ValidateContent(ResolveMessageApril2005 resolveMessage);
    protected virtual ResolveCriteria GetResolveCriteria(ResolveMessageApril2005 resolveMessage);
    protected virtual IAsyncResult BeginSendResolveResponse(IDiscoveryResponseContractApril2005 responseChannel, DiscoveryMessageSequence discoveryMessageSequence, EndpointDiscoveryMetadata matchingEndpoint, AsyncCallback callback, object state);
    protected virtual void EndSendResolveResponse(IDiscoveryResponseContractApril2005 responseChannel, IAsyncResult result);
    protected virtual IAsyncResult BeginSendProxyAnnouncement(IDiscoveryResponseContractApril2005 responseChannel, DiscoveryMessageSequence discoveryMessageSequence, EndpointDiscoveryMetadata proxyEndpointDiscoveryMetadata, AsyncCallback callback, object state);
    protected virtual void EndSendProxyAnnouncement(IDiscoveryResponseContractApril2005 responseChannel, IAsyncResult result);
}
[DataContractAttribute]
internal class System.ServiceModel.Discovery.VersionApril2005.ResolveMatchesApril2005 : object {
    [DataMemberAttribute]
public EndpointDiscoveryMetadataApril2005 ResolveMatch { get; private set; }
    [CompilerGeneratedAttribute]
public EndpointDiscoveryMetadataApril2005 get_ResolveMatch();
    [CompilerGeneratedAttribute]
private void set_ResolveMatch(EndpointDiscoveryMetadataApril2005 value);
    public static ResolveMatchesApril2005 Create(EndpointDiscoveryMetadata endpointDiscoveryMetadata);
}
[MessageContractAttribute]
internal class System.ServiceModel.Discovery.VersionApril2005.ResolveMatchesMessageApril2005 : object {
    [MessageHeaderAttribute]
public DiscoveryMessageSequenceApril2005 MessageSequence { get; private set; }
    [MessageBodyMemberAttribute]
public ResolveMatchesApril2005 ResolveMatches { get; private set; }
    [CompilerGeneratedAttribute]
public DiscoveryMessageSequenceApril2005 get_MessageSequence();
    [CompilerGeneratedAttribute]
private void set_MessageSequence(DiscoveryMessageSequenceApril2005 value);
    [CompilerGeneratedAttribute]
public ResolveMatchesApril2005 get_ResolveMatches();
    [CompilerGeneratedAttribute]
private void set_ResolveMatches(ResolveMatchesApril2005 value);
    public static ResolveMatchesMessageApril2005 Create(DiscoveryMessageSequence messageSequence, EndpointDiscoveryMetadata endpointDiscoveryMetadata);
}
[MessageContractAttribute]
internal class System.ServiceModel.Discovery.VersionApril2005.ResolveMessageApril2005 : object {
    [MessageBodyMemberAttribute]
public ResolveCriteriaApril2005 Resolve { get; public set; }
    [CompilerGeneratedAttribute]
public ResolveCriteriaApril2005 get_Resolve();
    [CompilerGeneratedAttribute]
public void set_Resolve(ResolveCriteriaApril2005 value);
}
internal class System.ServiceModel.Discovery.VersionCD1.AnnouncementInnerClientCD1 : ClientBase`1<IAnnouncementContractCD1> {
    public DiscoveryMessageSequenceGenerator DiscoveryMessageSequenceGenerator { get; public set; }
    public ChannelFactory ChannelFactory { get; }
    public IClientChannel InnerChannel { get; }
    public ServiceEndpoint Endpoint { get; }
    public ICommunicationObject InnerCommunicationObject { get; }
    public AnnouncementInnerClientCD1(AnnouncementEndpoint announcementEndpoint);
    private sealed virtual override void System.ServiceModel.Discovery.IAnnouncementInnerClient.add_HelloOperationCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    private sealed virtual override void System.ServiceModel.Discovery.IAnnouncementInnerClient.remove_HelloOperationCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    private sealed virtual override void System.ServiceModel.Discovery.IAnnouncementInnerClient.add_ByeOperationCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    private sealed virtual override void System.ServiceModel.Discovery.IAnnouncementInnerClient.remove_ByeOperationCompleted(EventHandler`1<AsyncCompletedEventArgs> value);
    public sealed virtual DiscoveryMessageSequenceGenerator get_DiscoveryMessageSequenceGenerator();
    public sealed virtual void set_DiscoveryMessageSequenceGenerator(DiscoveryMessageSequenceGenerator value);
    public sealed virtual ChannelFactory get_ChannelFactory();
    public sealed virtual IClientChannel get_InnerChannel();
    public sealed virtual ServiceEndpoint get_Endpoint();
    public sealed virtual ICommunicationObject get_InnerCommunicationObject();
    public sealed virtual void HelloOperation(EndpointDiscoveryMetadata endpointDiscoveryMetadata);
    public sealed virtual void ByeOperation(EndpointDiscoveryMetadata endpointDiscoveryMetadata);
    public sealed virtual IAsyncResult BeginHelloOperation(EndpointDiscoveryMetadata endpointDiscoveryMetadata, AsyncCallback callback, object state);
    public sealed virtual void EndHelloOperation(IAsyncResult result);
    public sealed virtual IAsyncResult BeginByeOperation(EndpointDiscoveryMetadata endpointDiscoveryMetadata, AsyncCallback callback, object state);
    public sealed virtual void EndByeOperation(IAsyncResult result);
    public sealed virtual void HelloOperationAsync(EndpointDiscoveryMetadata endpointDiscoveryMetadata, object userState);
    public sealed virtual void ByeOperationAsync(EndpointDiscoveryMetadata endpointDiscoveryMetadata, object userState);
    private sealed virtual override ClientCredentials System.ServiceModel.Discovery.IAnnouncementInnerClient.get_ClientCredentials();
}
[MessageContractAttribute]
internal class System.ServiceModel.Discovery.VersionCD1.ByeMessageCD1 : object {
    [MessageHeaderAttribute]
public DiscoveryMessageSequenceCD1 MessageSequence { get; private set; }
    [MessageBodyMemberAttribute]
public EndpointDiscoveryMetadataCD1 Bye { get; private set; }
    [CompilerGeneratedAttribute]
public DiscoveryMessageSequenceCD1 get_MessageSequence();
    [CompilerGeneratedAttribute]
private void set_MessageSequence(DiscoveryMessageSequenceCD1 value);
    [CompilerGeneratedAttribute]
public EndpointDiscoveryMetadataCD1 get_Bye();
    [CompilerGeneratedAttribute]
private void set_Bye(EndpointDiscoveryMetadataCD1 value);
    public static ByeMessageCD1 Create(DiscoveryMessageSequence messageSequence, EndpointDiscoveryMetadata endpointDiscoveryMetadata);
}
internal class System.ServiceModel.Discovery.VersionCD1.ByeOperationCD1AsyncResult : ByeOperationAsyncResult`1<ByeMessageCD1> {
    public ByeOperationCD1AsyncResult(IAnnouncementServiceImplementation announcementServiceImpl, ByeMessageCD1 message, AsyncCallback callback, object state);
    public static void End(IAsyncResult result);
    protected virtual bool ValidateContent(ByeMessageCD1 message);
    protected virtual DiscoveryMessageSequence GetMessageSequence(ByeMessageCD1 message);
    protected virtual EndpointDiscoveryMetadata GetEndpointDiscoveryMetadata(ByeMessageCD1 message);
}
internal class System.ServiceModel.Discovery.VersionCD1.DiscoveryInnerClientAdhocCD1 : object {
    public ClientCredentials ClientCredentials { get; }
    public ChannelFactory ChannelFactory { get; }
    public IClientChannel InnerChannel { get; }
    public ServiceEndpoint Endpoint { get; }
    public ICommunicationObject InnerCommunicationObject { get; }
    public bool IsRequestResponse { get; }
    public DiscoveryInnerClientAdhocCD1(DiscoveryEndpoint discoveryEndpoint, IDiscoveryInnerClientResponse responseReceiver);
    public sealed virtual ClientCredentials get_ClientCredentials();
    public sealed virtual ChannelFactory get_ChannelFactory();
    public sealed virtual IClientChannel get_InnerChannel();
    public sealed virtual ServiceEndpoint get_Endpoint();
    public sealed virtual ICommunicationObject get_InnerCommunicationObject();
    public sealed virtual bool get_IsRequestResponse();
    public sealed virtual IAsyncResult BeginProbeOperation(FindCriteria findCriteria, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginResolveOperation(ResolveCriteria resolveCriteria, AsyncCallback callback, object state);
    public sealed virtual void EndProbeOperation(IAsyncResult result);
    public sealed virtual void EndResolveOperation(IAsyncResult result);
    public sealed virtual void ProbeOperation(FindCriteria findCriteria);
    public sealed virtual void ResolveOperation(ResolveCriteria resolveCriteria);
    public sealed virtual IAsyncResult BeginProbeMatchOperation(ProbeMatchesMessageCD1 response, AsyncCallback callback, object state);
    public sealed virtual void EndProbeMatchOperation(IAsyncResult result);
    public sealed virtual IAsyncResult BeginResolveMatchOperation(ResolveMatchesMessageCD1 response, AsyncCallback callback, object state);
    public sealed virtual void EndResolveMatchOperation(IAsyncResult result);
    public sealed virtual IAsyncResult BeginHelloOperation(HelloMessageCD1 message, AsyncCallback callback, object state);
    public sealed virtual void EndHelloOperation(IAsyncResult result);
}
internal class System.ServiceModel.Discovery.VersionCD1.DiscoveryInnerClientManagedCD1 : ClientBase`1<IDiscoveryContractManagedCD1> {
    public ClientCredentials ClientCredentials { get; }
    public ChannelFactory ChannelFactory { get; }
    public IClientChannel InnerChannel { get; }
    public ServiceEndpoint Endpoint { get; }
    public ICommunicationObject InnerCommunicationObject { get; }
    public bool IsRequestResponse { get; }
    internal DiscoveryInnerClientManagedCD1(DiscoveryEndpoint discoveryEndpoint, IDiscoveryInnerClientResponse responseReceiver);
    public sealed virtual ClientCredentials get_ClientCredentials();
    public sealed virtual ChannelFactory get_ChannelFactory();
    public sealed virtual IClientChannel get_InnerChannel();
    public sealed virtual ServiceEndpoint get_Endpoint();
    public sealed virtual ICommunicationObject get_InnerCommunicationObject();
    public sealed virtual bool get_IsRequestResponse();
    public sealed virtual IAsyncResult BeginProbeOperation(FindCriteria findCriteria, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginResolveOperation(ResolveCriteria resolveCriteria, AsyncCallback callback, object state);
    public sealed virtual void EndProbeOperation(IAsyncResult result);
    public sealed virtual void EndResolveOperation(IAsyncResult result);
    public sealed virtual void ProbeOperation(FindCriteria findCriteria);
    public sealed virtual void ResolveOperation(ResolveCriteria resolveCriteria);
}
[XmlSchemaProviderAttribute("GetSchema")]
public class System.ServiceModel.Discovery.VersionCD1.DiscoveryMessageSequenceCD1 : object {
    public static DiscoveryMessageSequenceCD1 FromDiscoveryMessageSequence(DiscoveryMessageSequence discoveryMessageSequence);
    public static XmlQualifiedName GetSchema(XmlSchemaSet schemaSet);
    public DiscoveryMessageSequence ToDiscoveryMessageSequence();
    public sealed virtual XmlSchema GetSchema();
    public sealed virtual void ReadXml(XmlReader reader);
    public sealed virtual void WriteXml(XmlWriter writer);
}
internal class System.ServiceModel.Discovery.VersionCD1.DiscoveryVersionCD1Implementation : object {
    public string WsaNamespace { get; }
    public Uri DiscoveryAddress { get; }
    public MessageVersion MessageVersion { get; }
    public SchemaQualifiedNames QualifiedNames { get; }
    public DataContractSerializer EprSerializer { get; }
    private static DiscoveryVersionCD1Implementation();
    public sealed virtual string get_WsaNamespace();
    public sealed virtual Uri get_DiscoveryAddress();
    public sealed virtual MessageVersion get_MessageVersion();
    public sealed virtual SchemaQualifiedNames get_QualifiedNames();
    public sealed virtual DataContractSerializer get_EprSerializer();
    public sealed virtual ContractDescription GetDiscoveryContract(ServiceDiscoveryMode discoveryMode);
    public sealed virtual ContractDescription GetAnnouncementContract();
    public sealed virtual IDiscoveryInnerClient CreateDiscoveryInnerClient(DiscoveryEndpoint discoveryEndpoint, IDiscoveryInnerClientResponse responseReceiver);
    public sealed virtual IAnnouncementInnerClient CreateAnnouncementInnerClient(AnnouncementEndpoint announcementEndpoint);
    public sealed virtual Uri ToVersionIndependentScopeMatchBy(Uri versionDependentScopeMatchBy);
    public sealed virtual Uri ToVersionDependentScopeMatchBy(Uri versionIndependentScopeMatchBy);
}
[XmlSchemaProviderAttribute("GetSchema")]
public class System.ServiceModel.Discovery.VersionCD1.EndpointDiscoveryMetadataCD1 : object {
    public static EndpointDiscoveryMetadataCD1 FromEndpointDiscoveryMetadata(EndpointDiscoveryMetadata endpointDiscoveryMetadata);
    public static XmlQualifiedName GetSchema(XmlSchemaSet schemaSet);
    public EndpointDiscoveryMetadata ToEndpointDiscoveryMetadata();
    public sealed virtual XmlSchema GetSchema();
    public sealed virtual void ReadXml(XmlReader reader);
    public sealed virtual void WriteXml(XmlWriter writer);
}
[XmlSchemaProviderAttribute("GetSchema")]
public class System.ServiceModel.Discovery.VersionCD1.FindCriteriaCD1 : object {
    public static FindCriteriaCD1 FromFindCriteria(FindCriteria findCriteria);
    public static XmlQualifiedName GetSchema(XmlSchemaSet schemaSet);
    public FindCriteria ToFindCriteria();
    public sealed virtual XmlSchema GetSchema();
    public sealed virtual void ReadXml(XmlReader reader);
    public sealed virtual void WriteXml(XmlWriter writer);
}
[MessageContractAttribute]
internal class System.ServiceModel.Discovery.VersionCD1.HelloMessageCD1 : object {
    [MessageHeaderAttribute]
public DiscoveryMessageSequenceCD1 MessageSequence { get; private set; }
    [MessageBodyMemberAttribute]
public EndpointDiscoveryMetadataCD1 Hello { get; private set; }
    [CompilerGeneratedAttribute]
public DiscoveryMessageSequenceCD1 get_MessageSequence();
    [CompilerGeneratedAttribute]
private void set_MessageSequence(DiscoveryMessageSequenceCD1 value);
    [CompilerGeneratedAttribute]
public EndpointDiscoveryMetadataCD1 get_Hello();
    [CompilerGeneratedAttribute]
private void set_Hello(EndpointDiscoveryMetadataCD1 value);
    public static HelloMessageCD1 Create(DiscoveryMessageSequence messageSequence, EndpointDiscoveryMetadata endpointDiscoveryMetadata);
}
internal class System.ServiceModel.Discovery.VersionCD1.HelloOperationCD1AsyncResult : HelloOperationAsyncResult`1<HelloMessageCD1> {
    public HelloOperationCD1AsyncResult(IAnnouncementServiceImplementation announcementServiceImpl, HelloMessageCD1 message, AsyncCallback callback, object state);
    public static void End(IAsyncResult result);
    protected virtual bool ValidateContent(HelloMessageCD1 message);
    protected virtual DiscoveryMessageSequence GetMessageSequence(HelloMessageCD1 message);
    protected virtual EndpointDiscoveryMetadata GetEndpointDiscoveryMetadata(HelloMessageCD1 message);
}
[ServiceContractAttribute]
internal interface System.ServiceModel.Discovery.VersionCD1.IAnnouncementContractCD1 {
    [OperationContractAttribute]
public abstract virtual void HelloOperation(HelloMessageCD1 message);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginHelloOperation(HelloMessageCD1 message, AsyncCallback callback, object state);
    public abstract virtual void EndHelloOperation(IAsyncResult result);
    [OperationContractAttribute]
public abstract virtual void ByeOperation(ByeMessageCD1 message);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginByeOperation(ByeMessageCD1 message, AsyncCallback callback, object state);
    public abstract virtual void EndByeOperation(IAsyncResult result);
}
[ServiceContractAttribute]
internal interface System.ServiceModel.Discovery.VersionCD1.IDiscoveryContractAdhocCD1 {
    [OperationContractAttribute]
public abstract virtual void ProbeOperation(ProbeMessageCD1 request);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginProbeOperation(ProbeMessageCD1 request, AsyncCallback callback, object state);
    public abstract virtual void EndProbeOperation(IAsyncResult result);
    [OperationContractAttribute]
public abstract virtual void ResolveOperation(ResolveMessageCD1 request);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginResolveOperation(ResolveMessageCD1 request, AsyncCallback callback, object state);
    public abstract virtual void EndResolveOperation(IAsyncResult result);
}
[ServiceContractAttribute]
internal interface System.ServiceModel.Discovery.VersionCD1.IDiscoveryContractManagedCD1 {
    [OperationContractAttribute]
public abstract virtual ProbeMatchesMessageCD1 ProbeOperation(ProbeMessageCD1 request);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginProbeOperation(ProbeMessageCD1 request, AsyncCallback callback, object state);
    public abstract virtual ProbeMatchesMessageCD1 EndProbeOperation(IAsyncResult result);
    [OperationContractAttribute]
public abstract virtual ResolveMatchesMessageCD1 ResolveOperation(ResolveMessageCD1 request);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginResolveOperation(ResolveMessageCD1 request, AsyncCallback callback, object state);
    public abstract virtual ResolveMatchesMessageCD1 EndResolveOperation(IAsyncResult result);
}
[ServiceContractAttribute]
internal interface System.ServiceModel.Discovery.VersionCD1.IDiscoveryResponseContractCD1 {
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginProbeMatchOperation(ProbeMatchesMessageCD1 response, AsyncCallback callback, object state);
    public abstract virtual void EndProbeMatchOperation(IAsyncResult result);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginResolveMatchOperation(ResolveMatchesMessageCD1 response, AsyncCallback callback, object state);
    public abstract virtual void EndResolveMatchOperation(IAsyncResult result);
    [OperationContractAttribute]
public abstract virtual IAsyncResult BeginHelloOperation(HelloMessageCD1 message, AsyncCallback callback, object state);
    public abstract virtual void EndHelloOperation(IAsyncResult result);
}
internal class System.ServiceModel.Discovery.VersionCD1.ProbeDuplexCD1AsyncResult : ProbeDuplexAsyncResult`2<ProbeMessageCD1, IDiscoveryResponseContractCD1> {
    internal ProbeDuplexCD1AsyncResult(ProbeMessageCD1 probeMessage, IDiscoveryServiceImplementation discoveryServiceImpl, IMulticastSuppressionImplementation multicastSuppressionImpl, AsyncCallback callback, object state);
    public static void End(IAsyncResult result);
    protected virtual bool ValidateContent(ProbeMessageCD1 probeMessage);
    protected virtual FindCriteria GetFindCriteria(ProbeMessageCD1 probeMessage);
    protected virtual IAsyncResult BeginSendFindResponse(IDiscoveryResponseContractCD1 responseChannel, DiscoveryMessageSequence discoveryMessageSequence, EndpointDiscoveryMetadata matchingEndpoint, AsyncCallback callback, object state);
    protected virtual void EndSendFindResponse(IDiscoveryResponseContractCD1 responseChannel, IAsyncResult result);
    protected virtual IAsyncResult BeginSendProxyAnnouncement(IDiscoveryResponseContractCD1 responseChannel, DiscoveryMessageSequence discoveryMessageSequence, EndpointDiscoveryMetadata proxyEndpointDiscoveryMetadata, AsyncCallback callback, object state);
    protected virtual void EndSendProxyAnnouncement(IDiscoveryResponseContractCD1 responseChannel, IAsyncResult result);
}
[CollectionDataContractAttribute]
internal class System.ServiceModel.Discovery.VersionCD1.ProbeMatchesCD1 : Collection`1<EndpointDiscoveryMetadataCD1> {
    public static ProbeMatchesCD1 Create(EndpointDiscoveryMetadata endpointDiscoveryMetadata);
    public static ProbeMatchesCD1 Create(Collection`1<EndpointDiscoveryMetadata> endpointDiscoveryMetadatas);
}
[MessageContractAttribute]
internal class System.ServiceModel.Discovery.VersionCD1.ProbeMatchesMessageCD1 : object {
    [MessageHeaderAttribute]
public DiscoveryMessageSequenceCD1 MessageSequence { get; private set; }
    [MessageBodyMemberAttribute]
public ProbeMatchesCD1 ProbeMatches { get; private set; }
    [CompilerGeneratedAttribute]
public DiscoveryMessageSequenceCD1 get_MessageSequence();
    [CompilerGeneratedAttribute]
private void set_MessageSequence(DiscoveryMessageSequenceCD1 value);
    [CompilerGeneratedAttribute]
public ProbeMatchesCD1 get_ProbeMatches();
    [CompilerGeneratedAttribute]
private void set_ProbeMatches(ProbeMatchesCD1 value);
    public static ProbeMatchesMessageCD1 Create(DiscoveryMessageSequence messageSequence, EndpointDiscoveryMetadata endpointDiscoveryMetadata);
    public static ProbeMatchesMessageCD1 Create(DiscoveryMessageSequence messageSequence, Collection`1<EndpointDiscoveryMetadata> endpointDiscoveryMetadatas);
}
[MessageContractAttribute]
internal class System.ServiceModel.Discovery.VersionCD1.ProbeMessageCD1 : object {
    [MessageBodyMemberAttribute]
public FindCriteriaCD1 Probe { get; public set; }
    [CompilerGeneratedAttribute]
public FindCriteriaCD1 get_Probe();
    [CompilerGeneratedAttribute]
public void set_Probe(FindCriteriaCD1 value);
}
internal class System.ServiceModel.Discovery.VersionCD1.ProbeRequestResponseCD1AsyncResult : ProbeRequestResponseAsyncResult`2<ProbeMessageCD1, ProbeMatchesMessageCD1> {
    internal ProbeRequestResponseCD1AsyncResult(ProbeMessageCD1 probeMessage, IDiscoveryServiceImplementation discoveryServiceImpl, AsyncCallback callback, object state);
    public static ProbeMatchesMessageCD1 End(IAsyncResult result);
    protected virtual bool ValidateContent(ProbeMessageCD1 probeMessage);
    protected virtual FindCriteria GetFindCriteria(ProbeMessageCD1 probeMessage);
    protected virtual ProbeMatchesMessageCD1 GetProbeResponse(DiscoveryMessageSequence discoveryMessageSequence, Collection`1<EndpointDiscoveryMetadata> matchingEndpoints);
}
[XmlSchemaProviderAttribute("GetSchema")]
public class System.ServiceModel.Discovery.VersionCD1.ResolveCriteriaCD1 : object {
    public static ResolveCriteriaCD1 FromResolveCriteria(ResolveCriteria resolveCriteria);
    public static XmlQualifiedName GetSchema(XmlSchemaSet schemaSet);
    public ResolveCriteria ToResolveCriteria();
    public sealed virtual XmlSchema GetSchema();
    public sealed virtual void ReadXml(XmlReader reader);
    public sealed virtual void WriteXml(XmlWriter writer);
}
internal class System.ServiceModel.Discovery.VersionCD1.ResolveDuplexCD1AsyncResult : ResolveDuplexAsyncResult`2<ResolveMessageCD1, IDiscoveryResponseContractCD1> {
    internal ResolveDuplexCD1AsyncResult(ResolveMessageCD1 resolveMessage, IDiscoveryServiceImplementation discoveryServiceImpl, IMulticastSuppressionImplementation multicastSuppressionImpl, AsyncCallback callback, object state);
    public static void End(IAsyncResult result);
    protected virtual bool ValidateContent(ResolveMessageCD1 resolveMessage);
    protected virtual ResolveCriteria GetResolveCriteria(ResolveMessageCD1 resolveMessage);
    protected virtual IAsyncResult BeginSendResolveResponse(IDiscoveryResponseContractCD1 responseChannel, DiscoveryMessageSequence discoveryMessageSequence, EndpointDiscoveryMetadata matchingEndpoint, AsyncCallback callback, object state);
    protected virtual void EndSendResolveResponse(IDiscoveryResponseContractCD1 responseChannel, IAsyncResult result);
    protected virtual IAsyncResult BeginSendProxyAnnouncement(IDiscoveryResponseContractCD1 responseChannel, DiscoveryMessageSequence discoveryMessageSequence, EndpointDiscoveryMetadata proxyEndpointDiscoveryMetadata, AsyncCallback callback, object state);
    protected virtual void EndSendProxyAnnouncement(IDiscoveryResponseContractCD1 responseChannel, IAsyncResult result);
}
[DataContractAttribute]
internal class System.ServiceModel.Discovery.VersionCD1.ResolveMatchesCD1 : object {
    [DataMemberAttribute]
public EndpointDiscoveryMetadataCD1 ResolveMatch { get; private set; }
    [CompilerGeneratedAttribute]
public EndpointDiscoveryMetadataCD1 get_ResolveMatch();
    [CompilerGeneratedAttribute]
private void set_ResolveMatch(EndpointDiscoveryMetadataCD1 value);
    public static ResolveMatchesCD1 Create(EndpointDiscoveryMetadata endpointDiscoveryMetadata);
}
[MessageContractAttribute]
internal class System.ServiceModel.Discovery.VersionCD1.ResolveMatchesMessageCD1 : object {
    [MessageHeaderAttribute]
public DiscoveryMessageSequenceCD1 MessageSequence { get; private set; }
    [MessageBodyMemberAttribute]
public ResolveMatchesCD1 ResolveMatches { get; private set; }
    [CompilerGeneratedAttribute]
public DiscoveryMessageSequenceCD1 get_MessageSequence();
    [CompilerGeneratedAttribute]
private void set_MessageSequence(DiscoveryMessageSequenceCD1 value);
    [CompilerGeneratedAttribute]
public ResolveMatchesCD1 get_ResolveMatches();
    [CompilerGeneratedAttribute]
private void set_ResolveMatches(ResolveMatchesCD1 value);
    public static ResolveMatchesMessageCD1 Create(DiscoveryMessageSequence messageSequence, EndpointDiscoveryMetadata endpointDiscoveryMetadata);
}
[MessageContractAttribute]
internal class System.ServiceModel.Discovery.VersionCD1.ResolveMessageCD1 : object {
    [MessageBodyMemberAttribute]
public ResolveCriteriaCD1 Resolve { get; public set; }
    [CompilerGeneratedAttribute]
public ResolveCriteriaCD1 get_Resolve();
    [CompilerGeneratedAttribute]
public void set_Resolve(ResolveCriteriaCD1 value);
}
internal class System.ServiceModel.Discovery.VersionCD1.ResolveRequestResponseCD1AsyncResult : ResolveRequestResponseAsyncResult`2<ResolveMessageCD1, ResolveMatchesMessageCD1> {
    internal ResolveRequestResponseCD1AsyncResult(ResolveMessageCD1 resolveMessage, IDiscoveryServiceImplementation discoveryServiceImpl, AsyncCallback callback, object state);
    public static ResolveMatchesMessageCD1 End(IAsyncResult result);
    protected virtual bool ValidateContent(ResolveMessageCD1 resolveMessage);
    protected virtual ResolveCriteria GetResolveCriteria(ResolveMessageCD1 resolveMessage);
    protected virtual ResolveMatchesMessageCD1 GetResolveResponse(DiscoveryMessageSequence discoveryMessageSequence, EndpointDiscoveryMetadata matchingEndpoint);
}
