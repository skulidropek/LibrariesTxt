internal static class FxResources.Microsoft.Extensions.Logging.Console.SR : object {
}
internal static class Interop : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal class Microsoft.Extensions.Logging.Console.AnsiLogConsole : object {
    private TextWriter _textWriter;
    public AnsiLogConsole(bool stdErr);
    [NullableContextAttribute("1")]
public sealed virtual void Write(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Logging.Console.AnsiParser : object {
    private Action`5<string, int, int, Nullable`1<ConsoleColor>, Nullable`1<ConsoleColor>> _onParseWrite;
    internal static string DefaultForegroundColor;
    internal static string DefaultBackgroundColor;
    public AnsiParser(Action`5<string, int, int, Nullable`1<ConsoleColor>, Nullable`1<ConsoleColor>> onParseWrite);
    public void Parse(string message);
    private static bool IsDigit(char c);
    internal static string GetForegroundColorEscapeCode(ConsoleColor color);
    internal static string GetBackgroundColorEscapeCode(ConsoleColor color);
    private static bool TryGetForegroundColor(int number, bool isBright, Nullable`1& color);
    private static bool TryGetBackgroundColor(int number, Nullable`1& color);
}
[UnsupportedOSPlatformAttribute("android")]
[UnsupportedOSPlatformAttribute("browser")]
[UnsupportedOSPlatformAttribute("ios")]
[UnsupportedOSPlatformAttribute("tvos")]
internal class Microsoft.Extensions.Logging.Console.AnsiParsingLogConsole : object {
    private TextWriter _textWriter;
    private AnsiParser _parser;
    public AnsiParsingLogConsole(bool stdErr);
    [NullableContextAttribute("1")]
public sealed virtual void Write(string message);
    private bool SetColor(Nullable`1<ConsoleColor> background, Nullable`1<ConsoleColor> foreground);
    private bool SetBackgroundColor(Nullable`1<ConsoleColor> background);
    private bool SetForegroundColor(Nullable`1<ConsoleColor> foreground);
    private void ResetColor();
    private void WriteToConsole(string message, int startIndex, int length, Nullable`1<ConsoleColor> background, Nullable`1<ConsoleColor> foreground);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.Extensions.Logging.Console.ConsoleFormatter : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    protected ConsoleFormatter(string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    public abstract virtual void Write(LogEntry`1& modreq(System.Runtime.InteropServices.InAttribute) logEntry, IExternalScopeProvider scopeProvider, TextWriter textWriter);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.Extensions.Logging.Console.ConsoleFormatterNames : object {
    public static string Simple;
    public static string Json;
    public static string Systemd;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Logging.Console.ConsoleFormatterOptions : object {
    [CompilerGeneratedAttribute]
private bool <IncludeScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimestampFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseUtcTimestamp>k__BackingField;
    public bool IncludeScopes { get; public set; }
    public string TimestampFormat { get; public set; }
    public bool UseUtcTimestamp { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IncludeScopes();
    [CompilerGeneratedAttribute]
public void set_IncludeScopes(bool value);
    [CompilerGeneratedAttribute]
public string get_TimestampFormat();
    [CompilerGeneratedAttribute]
public void set_TimestampFormat(string value);
    [CompilerGeneratedAttribute]
public bool get_UseUtcTimestamp();
    [CompilerGeneratedAttribute]
public void set_UseUtcTimestamp(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[UnsupportedOSPlatformAttribute("browser")]
internal class Microsoft.Extensions.Logging.Console.ConsoleLogger : object {
    private string _name;
    private ConsoleLoggerProcessor _queueProcessor;
    [CompilerGeneratedAttribute]
private ConsoleFormatter <Formatter>k__BackingField;
    [CompilerGeneratedAttribute]
private IExternalScopeProvider <ScopeProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private ConsoleLoggerOptions <Options>k__BackingField;
    [ThreadStaticAttribute]
private static StringWriter t_stringWriter;
    internal ConsoleFormatter Formatter { get; internal set; }
    internal IExternalScopeProvider ScopeProvider { get; internal set; }
    internal ConsoleLoggerOptions Options { get; internal set; }
    internal ConsoleLogger(string name, ConsoleLoggerProcessor loggerProcessor);
    [CompilerGeneratedAttribute]
internal ConsoleFormatter get_Formatter();
    [CompilerGeneratedAttribute]
internal void set_Formatter(ConsoleFormatter value);
    [CompilerGeneratedAttribute]
internal IExternalScopeProvider get_ScopeProvider();
    [CompilerGeneratedAttribute]
internal void set_ScopeProvider(IExternalScopeProvider value);
    [CompilerGeneratedAttribute]
internal ConsoleLoggerOptions get_Options();
    [CompilerGeneratedAttribute]
internal void set_Options(ConsoleLoggerOptions value);
    public sealed virtual void Log(LogLevel logLevel, EventId eventId, TState state, Exception exception, Func`3<TState, Exception, string> formatter);
    public sealed virtual bool IsEnabled(LogLevel logLevel);
    public sealed virtual IDisposable BeginScope(TState state);
}
[ObsoleteAttribute("ConsoleLoggerFormat has been deprecated.")]
public enum Microsoft.Extensions.Logging.Console.ConsoleLoggerFormat : Enum {
    public int value__;
    public static ConsoleLoggerFormat Default;
    public static ConsoleLoggerFormat Systemd;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.Extensions.Logging.Console.ConsoleLoggerOptions : object {
    [CompilerGeneratedAttribute]
private bool <DisableColors>k__BackingField;
    private ConsoleLoggerFormat _format;
    [CompilerGeneratedAttribute]
private string <FormatterName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private LogLevel <LogToStandardErrorThreshold>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TimestampFormat>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <UseUtcTimestamp>k__BackingField;
    [ObsoleteAttribute("ConsoleLoggerOptions.DisableColors has been deprecated. Use SimpleConsoleFormatterOptions.ColorBehavior instead.")]
public bool DisableColors { get; public set; }
    [ObsoleteAttribute("ConsoleLoggerOptions.Format has been deprecated. Use ConsoleLoggerOptions.FormatterName instead.")]
public ConsoleLoggerFormat Format { get; public set; }
    public string FormatterName { get; public set; }
    [ObsoleteAttribute("ConsoleLoggerOptions.IncludeScopes has been deprecated. Use ConsoleFormatterOptions.IncludeScopes instead.")]
public bool IncludeScopes { get; public set; }
    public LogLevel LogToStandardErrorThreshold { get; public set; }
    [ObsoleteAttribute("ConsoleLoggerOptions.TimestampFormat has been deprecated. Use ConsoleFormatterOptions.TimestampFormat instead.")]
public string TimestampFormat { get; public set; }
    [ObsoleteAttribute("ConsoleLoggerOptions.UseUtcTimestamp has been deprecated. Use ConsoleFormatterOptions.UseUtcTimestamp instead.")]
public bool UseUtcTimestamp { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_DisableColors();
    [CompilerGeneratedAttribute]
public void set_DisableColors(bool value);
    public ConsoleLoggerFormat get_Format();
    public void set_Format(ConsoleLoggerFormat value);
    [CompilerGeneratedAttribute]
public string get_FormatterName();
    [CompilerGeneratedAttribute]
public void set_FormatterName(string value);
    [CompilerGeneratedAttribute]
public bool get_IncludeScopes();
    [CompilerGeneratedAttribute]
public void set_IncludeScopes(bool value);
    [CompilerGeneratedAttribute]
public LogLevel get_LogToStandardErrorThreshold();
    [CompilerGeneratedAttribute]
public void set_LogToStandardErrorThreshold(LogLevel value);
    [CompilerGeneratedAttribute]
public string get_TimestampFormat();
    [CompilerGeneratedAttribute]
public void set_TimestampFormat(string value);
    [CompilerGeneratedAttribute]
public bool get_UseUtcTimestamp();
    [CompilerGeneratedAttribute]
public void set_UseUtcTimestamp(bool value);
}
[UnsupportedOSPlatformAttribute("browser")]
internal class Microsoft.Extensions.Logging.Console.ConsoleLoggerProcessor : object {
    private static int _maxQueuedMessages;
    private BlockingCollection`1<LogMessageEntry> _messageQueue;
    private Thread _outputThread;
    [NullableAttribute("1")]
public IConsole Console;
    [NullableAttribute("1")]
public IConsole ErrorConsole;
    public virtual void EnqueueMessage(LogMessageEntry message);
    internal virtual void WriteMessage(LogMessageEntry entry);
    private void ProcessLogQueue();
    public sealed virtual void Dispose();
}
[UnsupportedOSPlatformAttribute("browser")]
[ProviderAliasAttribute("Console")]
public class Microsoft.Extensions.Logging.Console.ConsoleLoggerProvider : object {
    private IOptionsMonitor`1<ConsoleLoggerOptions> _options;
    private ConcurrentDictionary`2<string, ConsoleLogger> _loggers;
    private ConcurrentDictionary`2<string, ConsoleFormatter> _formatters;
    private ConsoleLoggerProcessor _messageQueue;
    private IDisposable _optionsReloadToken;
    private IExternalScopeProvider _scopeProvider;
    [NullableContextAttribute("1")]
public ConsoleLoggerProvider(IOptionsMonitor`1<ConsoleLoggerOptions> options);
    [NullableContextAttribute("1")]
public ConsoleLoggerProvider(IOptionsMonitor`1<ConsoleLoggerOptions> options, IEnumerable`1<ConsoleFormatter> formatters);
    [UnsupportedOSPlatformGuardAttribute("windows")]
private static bool DoesConsoleSupportAnsi();
    private void SetFormatters(IEnumerable`1<ConsoleFormatter> formatters);
    private void ReloadLoggerOptions(ConsoleLoggerOptions options);
    [NullableContextAttribute("1")]
public sealed virtual ILogger CreateLogger(string name);
    private void UpdateFormatterOptions(ConsoleFormatter formatter, ConsoleLoggerOptions deprecatedFromOptions);
    public sealed virtual void Dispose();
    [NullableContextAttribute("1")]
public sealed virtual void SetScopeProvider(IExternalScopeProvider scopeProvider);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Logging.Console.FormatterOptionsMonitor`1 : object {
    private TOptions _options;
    public TOptions CurrentValue { get; }
    public FormatterOptionsMonitor`1(TOptions options);
    public sealed virtual TOptions Get(string name);
    public sealed virtual IDisposable OnChange(Action`2<TOptions, string> listener);
    public sealed virtual TOptions get_CurrentValue();
}
[NullableContextAttribute("1")]
internal interface Microsoft.Extensions.Logging.Console.IConsole {
    public abstract virtual void Write(string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Logging.Console.JsonConsoleFormatter : ConsoleFormatter {
    private IDisposable _optionsReloadToken;
    [CompilerGeneratedAttribute]
private JsonConsoleFormatterOptions <FormatterOptions>k__BackingField;
    internal JsonConsoleFormatterOptions FormatterOptions { get; internal set; }
    public JsonConsoleFormatter(IOptionsMonitor`1<JsonConsoleFormatterOptions> options);
    public virtual void Write(LogEntry`1& modreq(System.Runtime.InteropServices.InAttribute) logEntry, IExternalScopeProvider scopeProvider, TextWriter textWriter);
    private static string GetLogLevelString(LogLevel logLevel);
    private void WriteScopeInformation(Utf8JsonWriter writer, IExternalScopeProvider scopeProvider);
    private void WriteItem(Utf8JsonWriter writer, KeyValuePair`2<string, object> item);
    private static string ToInvariantString(object obj);
    [CompilerGeneratedAttribute]
internal JsonConsoleFormatterOptions get_FormatterOptions();
    [CompilerGeneratedAttribute]
internal void set_FormatterOptions(JsonConsoleFormatterOptions value);
    private void ReloadLoggerOptions(JsonConsoleFormatterOptions options);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <WriteScopeInformation>b__4_0(object scope, Utf8JsonWriter state);
}
public class Microsoft.Extensions.Logging.Console.JsonConsoleFormatterOptions : ConsoleFormatterOptions {
    [CompilerGeneratedAttribute]
private JsonWriterOptions <JsonWriterOptions>k__BackingField;
    public JsonWriterOptions JsonWriterOptions { get; public set; }
    [CompilerGeneratedAttribute]
public JsonWriterOptions get_JsonWriterOptions();
    [CompilerGeneratedAttribute]
public void set_JsonWriterOptions(JsonWriterOptions value);
}
public enum Microsoft.Extensions.Logging.Console.LoggerColorBehavior : Enum {
    public int value__;
    public static LoggerColorBehavior Default;
    public static LoggerColorBehavior Enabled;
    public static LoggerColorBehavior Disabled;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
internal class Microsoft.Extensions.Logging.Console.LogMessageEntry : ValueType {
    public string Message;
    public bool LogAsError;
    public LogMessageEntry(string message, bool logAsError);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Logging.Console.SimpleConsoleFormatter : ConsoleFormatter {
    private static string LoglevelPadding;
    private static string _messagePadding;
    private static string _newLineWithMessagePadding;
    private IDisposable _optionsReloadToken;
    [CompilerGeneratedAttribute]
private SimpleConsoleFormatterOptions <FormatterOptions>k__BackingField;
    internal SimpleConsoleFormatterOptions FormatterOptions { get; internal set; }
    public SimpleConsoleFormatter(IOptionsMonitor`1<SimpleConsoleFormatterOptions> options);
    private static SimpleConsoleFormatter();
    private void ReloadLoggerOptions(SimpleConsoleFormatterOptions options);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
internal SimpleConsoleFormatterOptions get_FormatterOptions();
    [CompilerGeneratedAttribute]
internal void set_FormatterOptions(SimpleConsoleFormatterOptions value);
    public virtual void Write(LogEntry`1& modreq(System.Runtime.InteropServices.InAttribute) logEntry, IExternalScopeProvider scopeProvider, TextWriter textWriter);
    private void CreateDefaultLogMessage(TextWriter textWriter, LogEntry`1& logEntry, string message, IExternalScopeProvider scopeProvider);
    private void WriteMessage(TextWriter textWriter, string message, bool singleLine);
    private DateTimeOffset GetCurrentDateTime();
    private static string GetLogLevelString(LogLevel logLevel);
    private ConsoleColors GetLogLevelConsoleColors(LogLevel logLevel);
    private void WriteScopeInformation(TextWriter textWriter, IExternalScopeProvider scopeProvider, bool singleLine);
    [CompilerGeneratedAttribute]
internal static void <WriteMessage>g__WriteReplacing|13_0(TextWriter writer, string oldValue, string newValue, string message);
}
public class Microsoft.Extensions.Logging.Console.SimpleConsoleFormatterOptions : ConsoleFormatterOptions {
    [CompilerGeneratedAttribute]
private LoggerColorBehavior <ColorBehavior>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SingleLine>k__BackingField;
    public LoggerColorBehavior ColorBehavior { get; public set; }
    public bool SingleLine { get; public set; }
    [CompilerGeneratedAttribute]
public LoggerColorBehavior get_ColorBehavior();
    [CompilerGeneratedAttribute]
public void set_ColorBehavior(LoggerColorBehavior value);
    [CompilerGeneratedAttribute]
public bool get_SingleLine();
    [CompilerGeneratedAttribute]
public void set_SingleLine(bool value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.Extensions.Logging.Console.SystemdConsoleFormatter : ConsoleFormatter {
    private IDisposable _optionsReloadToken;
    [CompilerGeneratedAttribute]
private ConsoleFormatterOptions <FormatterOptions>k__BackingField;
    internal ConsoleFormatterOptions FormatterOptions { get; internal set; }
    public SystemdConsoleFormatter(IOptionsMonitor`1<ConsoleFormatterOptions> options);
    private void ReloadLoggerOptions(ConsoleFormatterOptions options);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
internal ConsoleFormatterOptions get_FormatterOptions();
    [CompilerGeneratedAttribute]
internal void set_FormatterOptions(ConsoleFormatterOptions value);
    public virtual void Write(LogEntry`1& modreq(System.Runtime.InteropServices.InAttribute) logEntry, IExternalScopeProvider scopeProvider, TextWriter textWriter);
    private DateTimeOffset GetCurrentDateTime();
    private static string GetSyslogSeverityString(LogLevel logLevel);
    private void WriteScopeInformation(TextWriter textWriter, IExternalScopeProvider scopeProvider);
    [CompilerGeneratedAttribute]
internal static void <Write>g__WriteReplacingNewLine|8_0(TextWriter writer, string message);
}
[ExtensionAttribute]
internal static class Microsoft.Extensions.Logging.Console.TextWriterExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static void WriteColoredMessage(TextWriter textWriter, string message, Nullable`1<ConsoleColor> background, Nullable`1<ConsoleColor> foreground);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
[UnsupportedOSPlatformAttribute("browser")]
public static class Microsoft.Extensions.Logging.ConsoleLoggerExtensions : object {
    internal static string TrimmingRequiresUnreferencedCodeMessage;
    [ExtensionAttribute]
[UnconditionalSuppressMessageAttribute("ReflectionAnalysis", "IL2026:RequiresUnreferencedCode")]
public static ILoggingBuilder AddConsole(ILoggingBuilder builder);
    [ExtensionAttribute]
public static ILoggingBuilder AddConsole(ILoggingBuilder builder, Action`1<ConsoleLoggerOptions> configure);
    [ExtensionAttribute]
public static ILoggingBuilder AddSimpleConsole(ILoggingBuilder builder);
    [ExtensionAttribute]
public static ILoggingBuilder AddSimpleConsole(ILoggingBuilder builder, Action`1<SimpleConsoleFormatterOptions> configure);
    [ExtensionAttribute]
public static ILoggingBuilder AddJsonConsole(ILoggingBuilder builder);
    [ExtensionAttribute]
public static ILoggingBuilder AddJsonConsole(ILoggingBuilder builder, Action`1<JsonConsoleFormatterOptions> configure);
    [ExtensionAttribute]
public static ILoggingBuilder AddSystemdConsole(ILoggingBuilder builder, Action`1<ConsoleFormatterOptions> configure);
    [ExtensionAttribute]
public static ILoggingBuilder AddSystemdConsole(ILoggingBuilder builder);
    [ExtensionAttribute]
internal static ILoggingBuilder AddConsoleWithFormatter(ILoggingBuilder builder, string name, Action`1<TOptions> configure);
    [ExtensionAttribute]
private static ILoggingBuilder AddFormatterWithName(ILoggingBuilder builder, string name);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("TOptions's dependent types may have their members trimmed. Ensure all required members are preserved.")]
public static ILoggingBuilder AddConsoleFormatter(ILoggingBuilder builder);
    [ExtensionAttribute]
[RequiresUnreferencedCodeAttribute("TOptions's dependent types may have their members trimmed. Ensure all required members are preserved.")]
public static ILoggingBuilder AddConsoleFormatter(ILoggingBuilder builder, Action`1<TOptions> configure);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[UnsupportedOSPlatformAttribute("browser")]
internal class Microsoft.Extensions.Logging.ConsoleLoggerFormatterConfigureOptions`2 : ConfigureFromConfigurationOptions`1<TOptions> {
    [RequiresUnreferencedCodeAttribute("TOptions's dependent types may have their members trimmed. Ensure all required members are preserved.")]
public ConsoleLoggerFormatterConfigureOptions`2(ILoggerProviderConfiguration`1<ConsoleLoggerProvider> providerConfiguration);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[UnsupportedOSPlatformAttribute("browser")]
internal class Microsoft.Extensions.Logging.ConsoleLoggerFormatterOptionsChangeTokenSource`2 : ConfigurationChangeTokenSource`1<TOptions> {
    public ConsoleLoggerFormatterOptionsChangeTokenSource`2(ILoggerProviderConfiguration`1<ConsoleLoggerProvider> providerConfiguration);
}
internal class Microsoft.Extensions.Logging.NullExternalScopeProvider : object {
    [CompilerGeneratedAttribute]
private static IExternalScopeProvider <Instance>k__BackingField;
    [NullableAttribute("1")]
public static IExternalScopeProvider Instance { get; }
    private static NullExternalScopeProvider();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static IExternalScopeProvider get_Instance();
    private sealed virtual override void Microsoft.Extensions.Logging.IExternalScopeProvider.ForEachScope(Action`2<object, TState> callback, TState state);
    private sealed virtual override IDisposable Microsoft.Extensions.Logging.IExternalScopeProvider.Push(object state);
}
internal class Microsoft.Extensions.Logging.NullScope : object {
    [CompilerGeneratedAttribute]
private static NullScope <Instance>k__BackingField;
    [NullableAttribute("1")]
public static NullScope Instance { get; }
    private static NullScope();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public static NullScope get_Instance();
    public sealed virtual void Dispose();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.NullablePublicOnlyAttribute : Attribute {
    public bool IncludesInternals;
    public NullablePublicOnlyAttribute(bool );
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class System.SR : object {
    private static bool s_usingResourceKeys;
    private static ResourceManager s_resourceManager;
    [NullableAttribute("0")]
internal static ResourceManager ResourceManager { get; }
    [NullableAttribute("0")]
internal static string BufferMaximumSizeExceeded { get; }
    private static SR();
    private static bool UsingResourceKeys();
    internal static string GetResourceString(string resourceKey);
    internal static string GetResourceString(string resourceKey, string defaultString);
    internal static string Format(string resourceFormat, object p1);
    internal static string Format(string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(string resourceFormat, object p1, object p2, object p3);
    internal static string Format(string resourceFormat, Object[] args);
    internal static string Format(IFormatProvider provider, string resourceFormat, object p1);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2);
    [NullableContextAttribute("2")]
internal static string Format(IFormatProvider provider, string resourceFormat, object p1, object p2, object p3);
    internal static string Format(IFormatProvider provider, string resourceFormat, Object[] args);
    [NullableContextAttribute("0")]
internal static ResourceManager get_ResourceManager();
    [NullableContextAttribute("0")]
internal static string get_BufferMaximumSizeExceeded();
}
internal class System.Text.Json.PooledByteBufferWriter : object {
    private Byte[] _rentedBuffer;
    private int _index;
    private static int MinimumBufferSize;
    public ReadOnlyMemory`1<byte> WrittenMemory { get; }
    public int WrittenCount { get; }
    public int Capacity { get; }
    public int FreeCapacity { get; }
    public PooledByteBufferWriter(int initialCapacity);
    public ReadOnlyMemory`1<byte> get_WrittenMemory();
    public int get_WrittenCount();
    public int get_Capacity();
    public int get_FreeCapacity();
    public void Clear();
    private void ClearHelper();
    public sealed virtual void Dispose();
    public sealed virtual void Advance(int count);
    public sealed virtual Memory`1<byte> GetMemory(int sizeHint);
    public sealed virtual Span`1<byte> GetSpan(int sizeHint);
    [NullableContextAttribute("1")]
internal Task WriteToStreamAsync(Stream destination, CancellationToken cancellationToken);
    [NullableContextAttribute("1")]
internal void WriteToStream(Stream destination);
    private void CheckAndResizeBuffer(int sizeHint);
}
internal static class System.Text.Json.ThrowHelper : object {
    [DoesNotReturnAttribute]
public static void ThrowOutOfMemoryException_BufferMaximumSizeExceeded(UInt32 capacity);
}
