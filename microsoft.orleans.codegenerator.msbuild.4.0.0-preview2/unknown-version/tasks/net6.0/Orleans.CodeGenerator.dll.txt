[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
internal static class Orleans.CodeGenerator.ActivatorGenerator : object {
    public static ClassDeclarationSyntax GenerateActivator(LibraryTypes libraryTypes, ISerializableTypeDescription type);
    public static string GetSimpleClassName(ISerializableTypeDescription serializableType);
    private static ConstructorDeclarationSyntax GenerateConstructor(LibraryTypes libraryTypes, string simpleClassName, List`1<ConstructorArgument> orderedFields);
    private static MemberDeclarationSyntax GenerateCreateMethod(LibraryTypes libraryTypes, ISerializableTypeDescription type, List`1<ConstructorArgument> orderedFields);
    [CompilerGeneratedAttribute]
internal static ExpressionSyntax <GenerateConstructor>g__Unwrapped|3_0(ExpressionSyntax expr);
}
internal static class Orleans.CodeGenerator.ApplicationPartAttributeGenerator : object {
    public static List`1<AttributeListSyntax> GenerateSyntax(LibraryTypes wellKnownTypes, MetadataModel model);
}
public class Orleans.CodeGenerator.CodeGenerator : object {
    internal static string CodeGeneratorName;
    private Compilation _compilation;
    private CodeGeneratorOptions _options;
    private INamedTypeSymbol[] _generateSerializerAttributes;
    [CompilerGeneratedAttribute]
private LibraryTypes <LibraryTypes>k__BackingField;
    internal LibraryTypes LibraryTypes { get; }
    public CodeGenerator(Compilation compilation, CodeGeneratorOptions options);
    [CompilerGeneratedAttribute]
internal LibraryTypes get_LibraryTypes();
    public CompilationUnitSyntax GenerateCode(CancellationToken cancellationToken);
    private MetadataModel GenerateMetadataModel(CancellationToken cancellationToken);
    [IteratorStateMachineAttribute("Orleans.CodeGenerator.CodeGenerator/<GetTypeDeclarations>d__10")]
private static IEnumerable`1<MemberDeclarationSyntax> GetTypeDeclarations(SyntaxNode node);
    private IEnumerable`1<IMemberDescription> GetDataMembers(INamedTypeSymbol symbol);
    public Nullable`1<ushort> GetId(ISymbol memberSymbol);
    internal static Nullable`1<ushort> GetId(LibraryTypes libraryTypes, ISymbol memberSymbol);
    private Nullable`1<UInt32> GetWellKnownTypeId(ISymbol symbol);
    private string GetTypeAlias(ISymbol symbol);
    private static AttributeData HasAttribute(INamedTypeSymbol symbol, ISymbol attributeType, bool inherited);
    internal static AttributeSyntax GetGeneratedCodeAttributeSyntax();
    internal static AttributeSyntax GetMethodImplAttributeSyntax();
    [CompilerGeneratedAttribute]
internal static void <GenerateCode>g__AddMember|8_0(string ns, MemberDeclarationSyntax member, <>c__DisplayClass8_0& );
    [CompilerGeneratedAttribute]
private bool <GenerateMetadataModel>g__ShouldGenerateSerializer|9_2(INamedTypeSymbol t, <>c__DisplayClass9_0& );
    [CompilerGeneratedAttribute]
private bool <GenerateMetadataModel>g__ShouldSupportPrimaryConstructorParameters|9_3(INamedTypeSymbol t);
    [CompilerGeneratedAttribute]
internal static bool <GenerateMetadataModel>g__TestGenerateSerializerAttribute|9_4(INamedTypeSymbol t, INamedTypeSymbol at);
    [CompilerGeneratedAttribute]
private Dictionary`2<INamedTypeSymbol, INamedTypeSymbol> <GenerateMetadataModel>g__GetInvokableBaseTypes|9_0(Dictionary`2<INamedTypeSymbol, Dictionary`2<INamedTypeSymbol, INamedTypeSymbol>> proxyBaseTypeInvokableBaseTypes, INamedTypeSymbol baseClass);
    [CompilerGeneratedAttribute]
private void <GenerateMetadataModel>g__ComputeAssembliesToExamine|9_1(IAssemblySymbol asm, HashSet`1<IAssemblySymbol> expandedAssemblies);
    [CompilerGeneratedAttribute]
private bool <GetWellKnownTypeId>b__14_0(AttributeData attr);
    [CompilerGeneratedAttribute]
private bool <GetTypeAlias>b__15_0(AttributeData attr);
}
public class Orleans.CodeGenerator.CodeGeneratorOptions : object {
    [CompilerGeneratedAttribute]
private List`1<string> <GenerateSerializerAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <IdAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <AliasAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ImmutableAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <GenerateFieldIds>k__BackingField;
    public List`1<string> GenerateSerializerAttributes { get; }
    public List`1<string> IdAttributes { get; }
    public List`1<string> AliasAttributes { get; }
    public List`1<string> ImmutableAttributes { get; }
    public bool GenerateFieldIds { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_GenerateSerializerAttributes();
    [CompilerGeneratedAttribute]
public List`1<string> get_IdAttributes();
    [CompilerGeneratedAttribute]
public List`1<string> get_AliasAttributes();
    [CompilerGeneratedAttribute]
public List`1<string> get_ImmutableAttributes();
    [CompilerGeneratedAttribute]
public bool get_GenerateFieldIds();
    [CompilerGeneratedAttribute]
public void set_GenerateFieldIds(bool value);
}
internal static class Orleans.CodeGenerator.CopierGenerator : object {
    private static string BaseTypeCopierFieldName;
    private static string ActivatorFieldName;
    private static string DeepCopyMethodName;
    public static ClassDeclarationSyntax GenerateCopier(LibraryTypes libraryTypes, ISerializableTypeDescription type);
    public static string GetSimpleClassName(ISerializableTypeDescription serializableType);
    public static string GetSimpleClassName(string name);
    public static string GetGeneratedNamespaceName(ITypeSymbol type);
    private static MemberDeclarationSyntax[] GetFieldDeclarations(List`1<GeneratedFieldDescription> fieldDescriptions);
    private static ConstructorDeclarationSyntax GenerateConstructor(LibraryTypes libraryTypes, string simpleClassName, List`1<GeneratedFieldDescription> fieldDescriptions);
    private static List`1<GeneratedFieldDescription> GetFieldDescriptions(ISerializableTypeDescription serializableTypeDescription, List`1<ISerializableMember> members, LibraryTypes libraryTypes);
    [IteratorStateMachineAttribute("Orleans.CodeGenerator.CopierGenerator/<GetCopierFieldDescriptions>d__10")]
public static IEnumerable`1<CopierFieldDescription> GetCopierFieldDescriptions(IEnumerable`1<IMemberDescription> members, LibraryTypes libraryTypes);
    private static MemberDeclarationSyntax GenerateMemberwiseDeepCopyMethod(ISerializableTypeDescription type, List`1<GeneratedFieldDescription> copierFields, List`1<ISerializableMember> members, LibraryTypes libraryTypes);
    private static MemberDeclarationSyntax GenerateBaseCopierDeepCopyMethod(ISerializableTypeDescription type, List`1<GeneratedFieldDescription> copierFields, List`1<ISerializableMember> members, LibraryTypes libraryTypes);
    [IteratorStateMachineAttribute("Orleans.CodeGenerator.CopierGenerator/<GenerateMemberwiseCopy>d__13")]
public static IEnumerable`1<StatementSyntax> GenerateMemberwiseCopy(List`1<GeneratedFieldDescription> copierFields, List`1<ISerializableMember> members, LibraryTypes libraryTypes, IdentifierNameSyntax sourceVar, IdentifierNameSyntax contextVar, IdentifierNameSyntax destinationVar);
    public static ExpressionSyntax GenerateMemberCopy(List`1<GeneratedFieldDescription> copierFields, LibraryTypes libraryTypes, ExpressionSyntax inputValue, ExpressionSyntax copyContextVar, List`1<ICopierDescription> codecs, ISerializableMember member);
    private static MemberDeclarationSyntax GenerateImmutableTypeCopyMethod(ISerializableTypeDescription type, LibraryTypes libraryTypes);
    [IteratorStateMachineAttribute("Orleans.CodeGenerator.CopierGenerator/<AddSerializationCallbacks>d__16")]
private static IEnumerable`1<StatementSyntax> AddSerializationCallbacks(ISerializableTypeDescription type, IdentifierNameSyntax originalInstance, IdentifierNameSyntax resultInstance, string callbackMethodName);
    [CompilerGeneratedAttribute]
internal static MemberDeclarationSyntax <GetFieldDeclarations>g__GetFieldDeclaration|7_0(GeneratedFieldDescription description);
    [CompilerGeneratedAttribute]
internal static ExpressionSyntax <GenerateConstructor>g__Unwrapped|8_3(ExpressionSyntax expr);
    [CompilerGeneratedAttribute]
internal static ExpressionSyntax <GenerateConstructor>g__GetService|8_4(TypeSyntax type);
    [CompilerGeneratedAttribute]
internal static CopierFieldDescription <GetCopierFieldDescriptions>g__GetCopierDescription|10_1(IMemberDescription member, int fieldIndex, LibraryTypes libraryTypes);
    [CompilerGeneratedAttribute]
internal static string <GetCopierFieldDescriptions>g__ToLowerCamelCase|10_2(string input);
}
internal class Orleans.CodeGenerator.FieldDescription : object {
    [CompilerGeneratedAttribute]
private IFieldSymbol <Field>k__BackingField;
    [CompilerGeneratedAttribute]
private ushort <FieldId>k__BackingField;
    [CompilerGeneratedAttribute]
private ITypeSymbol <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <ContainingType>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeSyntax <TypeSyntax>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPrimaryConstructorParameter>k__BackingField;
    public ISymbol Symbol { get; }
    public IFieldSymbol Field { get; }
    public ushort FieldId { get; }
    public ITypeSymbol Type { get; }
    public INamedTypeSymbol ContainingType { get; }
    public TypeSyntax TypeSyntax { get; }
    public string AssemblyName { get; }
    public string TypeName { get; }
    public string TypeNameIdentifier { get; }
    public bool IsPrimaryConstructorParameter { get; public set; }
    public FieldDescription(ushort fieldId, bool isPrimaryConstructorParameter, IFieldSymbol member);
    public sealed virtual ISymbol get_Symbol();
    [CompilerGeneratedAttribute]
public sealed virtual IFieldSymbol get_Field();
    [CompilerGeneratedAttribute]
public sealed virtual ushort get_FieldId();
    [CompilerGeneratedAttribute]
public sealed virtual ITypeSymbol get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual INamedTypeSymbol get_ContainingType();
    [CompilerGeneratedAttribute]
public sealed virtual TypeSyntax get_TypeSyntax();
    public sealed virtual string get_AssemblyName();
    public sealed virtual string get_TypeName();
    public sealed virtual string get_TypeNameIdentifier();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsPrimaryConstructorParameter();
    [CompilerGeneratedAttribute]
public void set_IsPrimaryConstructorParameter(bool value);
    public sealed virtual TypeSyntax GetTypeSyntax(ITypeSymbol typeSymbol);
}
internal static class Orleans.CodeGenerator.FSharpUtilities : object {
    private static int SourceConstructFlagsSumTypeValue;
    private static int SourceConstructFlagsRecordTypeValue;
    public static bool IsUnionCase(LibraryTypes libraryTypes, INamedTypeSymbol symbol, INamedTypeSymbol& sumType);
    public static bool IsRecord(LibraryTypes libraryTypes, INamedTypeSymbol symbol);
}
internal class Orleans.CodeGenerator.GeneratedInvokerDescription : object {
    private MethodDescription _methodDescription;
    private TypeSyntax _openTypeSyntax;
    private TypeSyntax _typeSyntax;
    private TypeSyntax _baseTypeSyntax;
    [CompilerGeneratedAttribute]
private Accessibility <Accessibility>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <BaseType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IMemberDescription> <Members>k__BackingField;
    [CompilerGeneratedAttribute]
private InvokableInterfaceDescription <InterfaceDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<INamedTypeSymbol> <SerializationHooks>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TypeSyntax> <ActivatorConstructorParameters>k__BackingField;
    public Accessibility Accessibility { get; }
    public TypeSyntax TypeSyntax { get; }
    public TypeSyntax OpenTypeSyntax { get; }
    public bool HasComplexBaseType { get; }
    public bool SupportsPrimaryContstructorParameters { get; }
    public INamedTypeSymbol BaseType { get; }
    public TypeSyntax BaseTypeSyntax { get; }
    public string Namespace { get; }
    public string GeneratedNamespace { get; }
    public string Name { get; }
    public bool IsValueType { get; }
    public bool IsSealedType { get; }
    public bool IsEnumType { get; }
    public bool IsGenericType { get; }
    public List`1<IMemberDescription> Members { get; }
    public InvokableInterfaceDescription InterfaceDescription { get; }
    public SemanticModel SemanticModel { get; }
    public bool IsEmptyConstructable { get; }
    public bool IsPartial { get; }
    public bool UseActivator { get; }
    public bool TrackReferences { get; }
    public bool OmitDefaultMemberValues { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ValueTuple`2<string, ITypeParameterSymbol>> TypeParameters { get; }
    public List`1<INamedTypeSymbol> SerializationHooks { get; }
    public bool IsImmutable { get; }
    public List`1<TypeSyntax> ActivatorConstructorParameters { get; }
    public bool HasActivatorConstructor { get; }
    public GeneratedInvokerDescription(InvokableInterfaceDescription interfaceDescription, MethodDescription methodDescription, Accessibility accessibility, string generatedClassName, List`1<IMemberDescription> members, List`1<INamedTypeSymbol> serializationHooks, INamedTypeSymbol baseType, List`1<TypeSyntax> constructorArguments);
    [CompilerGeneratedAttribute]
public sealed virtual Accessibility get_Accessibility();
    public sealed virtual TypeSyntax get_TypeSyntax();
    public TypeSyntax get_OpenTypeSyntax();
    public sealed virtual bool get_HasComplexBaseType();
    public sealed virtual bool get_SupportsPrimaryContstructorParameters();
    [CompilerGeneratedAttribute]
public sealed virtual INamedTypeSymbol get_BaseType();
    public sealed virtual TypeSyntax get_BaseTypeSyntax();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_GeneratedNamespace();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    public sealed virtual bool get_IsValueType();
    public sealed virtual bool get_IsSealedType();
    public sealed virtual bool get_IsEnumType();
    public sealed virtual bool get_IsGenericType();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<IMemberDescription> get_Members();
    [CompilerGeneratedAttribute]
public InvokableInterfaceDescription get_InterfaceDescription();
    public sealed virtual SemanticModel get_SemanticModel();
    public sealed virtual bool get_IsEmptyConstructable();
    public sealed virtual bool get_IsPartial();
    public sealed virtual bool get_UseActivator();
    public sealed virtual bool get_TrackReferences();
    public sealed virtual bool get_OmitDefaultMemberValues();
    public sealed virtual List`1<ValueTuple`2<string, ITypeParameterSymbol>> get_TypeParameters();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<INamedTypeSymbol> get_SerializationHooks();
    public sealed virtual bool get_IsImmutable();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<TypeSyntax> get_ActivatorConstructorParameters();
    public sealed virtual bool get_HasActivatorConstructor();
    public sealed virtual ExpressionSyntax GetObjectCreationExpression(LibraryTypes libraryTypes);
    private TypeSyntax CreateTypeSyntax();
    private TypeSyntax CreateOpenTypeSyntax();
}
internal class Orleans.CodeGenerator.GeneratedProxyDescription : object {
    [CompilerGeneratedAttribute]
private TypeSyntax <TypeSyntax>k__BackingField;
    [CompilerGeneratedAttribute]
private InvokableInterfaceDescription <InterfaceDescription>k__BackingField;
    public TypeSyntax TypeSyntax { get; }
    public InvokableInterfaceDescription InterfaceDescription { get; }
    public GeneratedProxyDescription(InvokableInterfaceDescription interfaceDescription);
    [CompilerGeneratedAttribute]
public TypeSyntax get_TypeSyntax();
    [CompilerGeneratedAttribute]
public InvokableInterfaceDescription get_InterfaceDescription();
    private static TypeSyntax GetProxyTypeName(InvokableInterfaceDescription interfaceDescription);
}
internal interface Orleans.CodeGenerator.ICodecDescription {
    public ITypeSymbol UnderlyingType { get; }
    public abstract virtual ITypeSymbol get_UnderlyingType();
}
internal interface Orleans.CodeGenerator.ICopierDescription {
    public ITypeSymbol UnderlyingType { get; }
    public abstract virtual ITypeSymbol get_UnderlyingType();
}
internal interface Orleans.CodeGenerator.IFieldDescription {
    public IFieldSymbol Field { get; }
    public abstract virtual IFieldSymbol get_Field();
}
internal interface Orleans.CodeGenerator.IMemberDescription {
    public ushort FieldId { get; }
    public ISymbol Symbol { get; }
    public ITypeSymbol Type { get; }
    public INamedTypeSymbol ContainingType { get; }
    public string AssemblyName { get; }
    public string TypeName { get; }
    public TypeSyntax TypeSyntax { get; }
    public string TypeNameIdentifier { get; }
    public bool IsPrimaryConstructorParameter { get; }
    public abstract virtual ushort get_FieldId();
    public abstract virtual ISymbol get_Symbol();
    public abstract virtual ITypeSymbol get_Type();
    public abstract virtual INamedTypeSymbol get_ContainingType();
    public abstract virtual string get_AssemblyName();
    public abstract virtual string get_TypeName();
    public abstract virtual TypeSyntax get_TypeSyntax();
    public abstract virtual string get_TypeNameIdentifier();
    public abstract virtual TypeSyntax GetTypeSyntax(ITypeSymbol typeSymbol);
    public abstract virtual bool get_IsPrimaryConstructorParameter();
}
internal static class Orleans.CodeGenerator.InvokableGenerator : object {
    public static ValueTuple`2<ClassDeclarationSyntax, GeneratedInvokerDescription> Generate(LibraryTypes libraryTypes, InvokableInterfaceDescription interfaceDescription, MethodDescription method);
    private static INamedTypeSymbol GetBaseClassType(MethodDescription method);
    private static MemberDeclarationSyntax GenerateSetTargetMethod(LibraryTypes libraryTypes, InvokableInterfaceDescription interfaceDescription, TargetFieldDescription targetField);
    private static MemberDeclarationSyntax GenerateGetTargetMethod(TargetFieldDescription targetField);
    private static MemberDeclarationSyntax GenerateGetArgumentMethod(LibraryTypes libraryTypes, MethodDescription methodDescription, List`1<InvokerFieldDescripton> fields);
    private static MemberDeclarationSyntax GenerateSetArgumentMethod(LibraryTypes libraryTypes, MethodDescription methodDescription, List`1<InvokerFieldDescripton> fields);
    private static MemberDeclarationSyntax GenerateInvokeInnerMethod(LibraryTypes libraryTypes, MethodDescription method, List`1<InvokerFieldDescripton> fields, TargetFieldDescription target);
    private static MemberDeclarationSyntax GenerateDisposeMethod(LibraryTypes libraryTypes, MethodDescription methodDescription, List`1<InvokerFieldDescripton> fields, INamedTypeSymbol baseClassType);
    private static MemberDeclarationSyntax GenerateGetArgumentCount(LibraryTypes libraryTypes, MethodDescription methodDescription);
    private static MemberDeclarationSyntax GenerateGetActivityName(LibraryTypes libraryTypes, MethodDescription methodDescription);
    private static MemberDeclarationSyntax GenerateGetMethodName(LibraryTypes libraryTypes, MethodDescription methodDescription);
    private static MemberDeclarationSyntax GenerateGetInterfaceName(LibraryTypes libraryTypes, MethodDescription methodDescription);
    private static MemberDeclarationSyntax GenerateGetInterfaceType(LibraryTypes libraryTypes, MethodDescription methodDescription);
    private static MemberDeclarationSyntax GenerateGetInterfaceTypeArguments(LibraryTypes libraryTypes, MethodDescription methodDescription);
    private static MemberDeclarationSyntax GenerateGetMethodTypeArguments(LibraryTypes libraryTypes, MethodDescription methodDescription);
    private static MemberDeclarationSyntax GenerateGetParameterTypes(LibraryTypes libraryTypes, MethodDescription methodDescription);
    private static MemberDeclarationSyntax GenerateGetTypeArrayHelper(LibraryTypes libraryTypes, string propertyName, string backingPropertyName);
    private static MemberDeclarationSyntax GenerateGetMethod(LibraryTypes libraryTypes);
    public static string GetSimpleClassName(InvokableInterfaceDescription interfaceDescription, MethodDescription method);
    private static MemberDeclarationSyntax[] GetFieldDeclarations(MethodDescription method, List`1<InvokerFieldDescripton> fieldDescriptions, LibraryTypes libraryTypes);
    private static ValueTuple`2<ConstructorDeclarationSyntax, List`1<TypeSyntax>> GenerateConstructor(LibraryTypes libraryTypes, string simpleClassName, MethodDescription method, List`1<InvokerFieldDescripton> fieldDescriptions, INamedTypeSymbol baseClassType);
    private static List`1<InvokerFieldDescripton> GetFieldDescriptions(MethodDescription method, InvokableInterfaceDescription interfaceDescription);
    [CompilerGeneratedAttribute]
internal static Accessibility <Generate>g__GetAccessibility|0_0(InvokableInterfaceDescription interfaceDescription);
}
internal class Orleans.CodeGenerator.InvokableInterfaceDescription : object {
    [CompilerGeneratedAttribute]
private CodeGenerator <CodeGenerator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <InterfaceType>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<MethodDescription> <Methods>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <ProxyBaseType>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsExtension>k__BackingField;
    [CompilerGeneratedAttribute]
private SemanticModel <SemanticModel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GeneratedNamespace>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ValueTuple`2<string, ITypeParameterSymbol>> <TypeParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<INamedTypeSymbol, INamedTypeSymbol> <InvokableBaseTypes>k__BackingField;
    public CodeGenerator CodeGenerator { get; }
    public string Name { get; }
    public INamedTypeSymbol InterfaceType { get; }
    public List`1<MethodDescription> Methods { get; }
    public INamedTypeSymbol ProxyBaseType { get; }
    public bool IsExtension { get; }
    public SemanticModel SemanticModel { get; }
    public string GeneratedNamespace { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ValueTuple`2<string, ITypeParameterSymbol>> TypeParameters { get; }
    public Dictionary`2<INamedTypeSymbol, INamedTypeSymbol> InvokableBaseTypes { get; }
    public InvokableInterfaceDescription(CodeGenerator generator, SemanticModel semanticModel, INamedTypeSymbol interfaceType, string name, INamedTypeSymbol proxyBaseType, bool isExtension, Dictionary`2<INamedTypeSymbol, INamedTypeSymbol> invokableBaseTypes);
    [CompilerGeneratedAttribute]
public CodeGenerator get_CodeGenerator();
    [IteratorStateMachineAttribute("Orleans.CodeGenerator.InvokableInterfaceDescription/<GetMethods>d__4")]
private IEnumerable`1<MethodDescription> GetMethods(INamedTypeSymbol symbol);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_InterfaceType();
    [CompilerGeneratedAttribute]
public List`1<MethodDescription> get_Methods();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_ProxyBaseType();
    [CompilerGeneratedAttribute]
public bool get_IsExtension();
    [CompilerGeneratedAttribute]
public SemanticModel get_SemanticModel();
    [CompilerGeneratedAttribute]
public string get_GeneratedNamespace();
    [CompilerGeneratedAttribute]
public List`1<ValueTuple`2<string, ITypeParameterSymbol>> get_TypeParameters();
    [CompilerGeneratedAttribute]
public Dictionary`2<INamedTypeSymbol, INamedTypeSymbol> get_InvokableBaseTypes();
    private static void ValidateBaseClass(LibraryTypes l, INamedTypeSymbol baseClass);
    [CompilerGeneratedAttribute]
internal static string <.ctor>g__GetTypeParameterName|0_0(HashSet`1<string> names, ITypeParameterSymbol tp);
    [IteratorStateMachineAttribute("Orleans.CodeGenerator.InvokableInterfaceDescription/<<GetMethods>g__GetAllInterfaces|4_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<INamedTypeSymbol> <GetMethods>g__GetAllInterfaces|4_0(INamedTypeSymbol s);
    [CompilerGeneratedAttribute]
internal static void <ValidateBaseClass>g__ValidateGenericInvokeAsync|32_0(LibraryTypes l, INamedTypeSymbol baseClass);
    [CompilerGeneratedAttribute]
internal static void <ValidateBaseClass>g__ValidateNonGenericInvokeAsync|32_1(LibraryTypes l, INamedTypeSymbol baseClass);
}
internal interface Orleans.CodeGenerator.IPropertyDescription {
}
internal interface Orleans.CodeGenerator.ISerializableTypeDescription {
    public Accessibility Accessibility { get; }
    public TypeSyntax TypeSyntax { get; }
    public bool HasComplexBaseType { get; }
    public bool SupportsPrimaryContstructorParameters { get; }
    public INamedTypeSymbol BaseType { get; }
    public TypeSyntax BaseTypeSyntax { get; }
    public string Namespace { get; }
    public string GeneratedNamespace { get; }
    public string Name { get; }
    public bool IsValueType { get; }
    public bool IsSealedType { get; }
    public bool IsEnumType { get; }
    public bool IsGenericType { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ValueTuple`2<string, ITypeParameterSymbol>> TypeParameters { get; }
    public List`1<IMemberDescription> Members { get; }
    public SemanticModel SemanticModel { get; }
    public bool UseActivator { get; }
    public bool IsEmptyConstructable { get; }
    public bool HasActivatorConstructor { get; }
    public bool IsPartial { get; }
    public bool TrackReferences { get; }
    public bool OmitDefaultMemberValues { get; }
    public List`1<INamedTypeSymbol> SerializationHooks { get; }
    public bool IsImmutable { get; }
    public List`1<TypeSyntax> ActivatorConstructorParameters { get; }
    public abstract virtual Accessibility get_Accessibility();
    public abstract virtual TypeSyntax get_TypeSyntax();
    public abstract virtual bool get_HasComplexBaseType();
    public abstract virtual bool get_SupportsPrimaryContstructorParameters();
    public abstract virtual INamedTypeSymbol get_BaseType();
    public abstract virtual TypeSyntax get_BaseTypeSyntax();
    public abstract virtual string get_Namespace();
    public abstract virtual string get_GeneratedNamespace();
    public abstract virtual string get_Name();
    public abstract virtual bool get_IsValueType();
    public abstract virtual bool get_IsSealedType();
    public abstract virtual bool get_IsEnumType();
    public abstract virtual bool get_IsGenericType();
    public abstract virtual List`1<ValueTuple`2<string, ITypeParameterSymbol>> get_TypeParameters();
    public abstract virtual List`1<IMemberDescription> get_Members();
    public abstract virtual SemanticModel get_SemanticModel();
    public abstract virtual bool get_UseActivator();
    public abstract virtual bool get_IsEmptyConstructable();
    public abstract virtual bool get_HasActivatorConstructor();
    public abstract virtual bool get_IsPartial();
    public abstract virtual bool get_TrackReferences();
    public abstract virtual bool get_OmitDefaultMemberValues();
    public abstract virtual ExpressionSyntax GetObjectCreationExpression(LibraryTypes libraryTypes);
    public abstract virtual List`1<INamedTypeSymbol> get_SerializationHooks();
    public abstract virtual bool get_IsImmutable();
    public abstract virtual List`1<TypeSyntax> get_ActivatorConstructorParameters();
}
internal class Orleans.CodeGenerator.LibraryTypes : object {
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <Action_2>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <Byte>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <ITypeManifestProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <Field>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <WireType>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <DeepCopier_1>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <FieldCodec_1>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <FieldCodec>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <Func_2>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <GenerateMethodSerializersAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <GenerateSerializerAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <IActivator_1>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <IBufferWriter>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <IInvokable>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <Int32>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <UInt32>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <InvalidOperationException>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <InvokablePool>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <IResponseCompletionSource>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <ITargetHolder>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <TypeManifestProviderAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <NonSerializedAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <Object>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <ObsoleteAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <BaseCodec_1>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <BaseCopier_1>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <Reader>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <ResponseCompletionSourcePool>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <TypeManifestOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <SerializerSession>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <Task>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <Task_1>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <MethodInfo>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <ICodecProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <ValueSerializer>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <ValueTask>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <ValueTask_1>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <ValueTypeSetter_2>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <Void>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <Writer>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<INamedTypeSymbol> <IdAttributeTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <WellKnownAliasAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <WellKnownIdAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<WellKnownCodecDescription> <StaticCodecs>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<WellKnownCodecDescription> <WellKnownCodecs>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<WellKnownCopierDescription> <StaticCopiers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<WellKnownCopierDescription> <WellKnownCopiers>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <RegisterCopierAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <RegisterSerializerAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <RegisterConverterAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <RegisterActivatorAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <UseActivatorAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <SuppressReferenceTrackingAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <OmitDefaultMemberValuesAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <CopyContext>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <CopyContextPool>k__BackingField;
    [CompilerGeneratedAttribute]
private Compilation <Compilation>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ITypeSymbol> <ImmutableTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <TimeSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <DateTimeOffset>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <Guid>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <IPAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <IPEndPoint>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <CancellationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol[] <TupleTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <ValueTuple>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<INamedTypeSymbol> <ImmutableAttributes>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <Exception>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <ApplicationPartAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <InvokeMethodNameAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <InvokableCustomInitializerAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <InvokableBaseTypeAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <DefaultInvokableBaseTypeAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <GenerateCodeForDeclaringAssemblyAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <SerializationCallbacksAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <DefaultInvokeMethodNameAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <GeneratedActivatorConstructorAttribute>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <IDisposable>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <FSharpCompilationMappingAttributeOrDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <FSharpSourceConstructFlagsOrDefault>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <FormatterServices>k__BackingField;
    private ConcurrentDictionary`2<ITypeSymbol, bool> _shallowCopyableTypes;
    public INamedTypeSymbol Action_2 { get; private set; }
    public INamedTypeSymbol Byte { get; private set; }
    public INamedTypeSymbol ITypeManifestProvider { get; private set; }
    public INamedTypeSymbol Field { get; private set; }
    public INamedTypeSymbol WireType { get; private set; }
    public INamedTypeSymbol DeepCopier_1 { get; private set; }
    public INamedTypeSymbol FieldCodec_1 { get; private set; }
    public INamedTypeSymbol FieldCodec { get; private set; }
    public INamedTypeSymbol Func_2 { get; private set; }
    public INamedTypeSymbol GenerateMethodSerializersAttribute { get; private set; }
    public INamedTypeSymbol GenerateSerializerAttribute { get; private set; }
    public INamedTypeSymbol IActivator_1 { get; private set; }
    public INamedTypeSymbol IBufferWriter { get; private set; }
    public INamedTypeSymbol IInvokable { get; private set; }
    public INamedTypeSymbol Int32 { get; private set; }
    public INamedTypeSymbol UInt32 { get; private set; }
    public INamedTypeSymbol InvalidOperationException { get; private set; }
    public INamedTypeSymbol InvokablePool { get; private set; }
    public INamedTypeSymbol IResponseCompletionSource { get; private set; }
    public INamedTypeSymbol ITargetHolder { get; private set; }
    public INamedTypeSymbol TypeManifestProviderAttribute { get; private set; }
    public INamedTypeSymbol NonSerializedAttribute { get; private set; }
    public INamedTypeSymbol Object { get; private set; }
    public INamedTypeSymbol ObsoleteAttribute { get; private set; }
    public INamedTypeSymbol BaseCodec_1 { get; private set; }
    public INamedTypeSymbol BaseCopier_1 { get; private set; }
    public INamedTypeSymbol Reader { get; private set; }
    public INamedTypeSymbol ResponseCompletionSourcePool { get; private set; }
    public INamedTypeSymbol TypeManifestOptions { get; private set; }
    public INamedTypeSymbol SerializerSession { get; private set; }
    public INamedTypeSymbol Task { get; private set; }
    public INamedTypeSymbol Task_1 { get; private set; }
    public INamedTypeSymbol Type { get; private set; }
    public INamedTypeSymbol MethodInfo { get; private set; }
    public INamedTypeSymbol ICodecProvider { get; private set; }
    public INamedTypeSymbol ValueSerializer { get; private set; }
    public INamedTypeSymbol ValueTask { get; private set; }
    public INamedTypeSymbol ValueTask_1 { get; private set; }
    public INamedTypeSymbol ValueTypeSetter_2 { get; private set; }
    public INamedTypeSymbol Void { get; private set; }
    public INamedTypeSymbol Writer { get; private set; }
    public List`1<INamedTypeSymbol> IdAttributeTypes { get; private set; }
    public INamedTypeSymbol WellKnownAliasAttribute { get; private set; }
    public INamedTypeSymbol WellKnownIdAttribute { get; private set; }
    public List`1<WellKnownCodecDescription> StaticCodecs { get; private set; }
    public List`1<WellKnownCodecDescription> WellKnownCodecs { get; private set; }
    public List`1<WellKnownCopierDescription> StaticCopiers { get; private set; }
    public List`1<WellKnownCopierDescription> WellKnownCopiers { get; private set; }
    public INamedTypeSymbol RegisterCopierAttribute { get; private set; }
    public INamedTypeSymbol RegisterSerializerAttribute { get; private set; }
    public INamedTypeSymbol RegisterConverterAttribute { get; private set; }
    public INamedTypeSymbol RegisterActivatorAttribute { get; private set; }
    public INamedTypeSymbol UseActivatorAttribute { get; private set; }
    public INamedTypeSymbol SuppressReferenceTrackingAttribute { get; private set; }
    public INamedTypeSymbol OmitDefaultMemberValuesAttribute { get; private set; }
    public INamedTypeSymbol CopyContext { get; private set; }
    public INamedTypeSymbol CopyContextPool { get; private set; }
    public Compilation Compilation { get; private set; }
    public List`1<ITypeSymbol> ImmutableTypes { get; private set; }
    public INamedTypeSymbol TimeSpan { get; private set; }
    public INamedTypeSymbol DateTimeOffset { get; private set; }
    public INamedTypeSymbol Guid { get; private set; }
    public INamedTypeSymbol IPAddress { get; private set; }
    public INamedTypeSymbol IPEndPoint { get; private set; }
    public INamedTypeSymbol CancellationToken { get; private set; }
    public INamedTypeSymbol[] TupleTypes { get; private set; }
    public INamedTypeSymbol ValueTuple { get; private set; }
    public List`1<INamedTypeSymbol> ImmutableAttributes { get; private set; }
    public INamedTypeSymbol Exception { get; private set; }
    public INamedTypeSymbol ApplicationPartAttribute { get; private set; }
    public INamedTypeSymbol InvokeMethodNameAttribute { get; private set; }
    public INamedTypeSymbol InvokableCustomInitializerAttribute { get; private set; }
    public INamedTypeSymbol InvokableBaseTypeAttribute { get; private set; }
    public INamedTypeSymbol DefaultInvokableBaseTypeAttribute { get; private set; }
    public INamedTypeSymbol GenerateCodeForDeclaringAssemblyAttribute { get; private set; }
    public INamedTypeSymbol SerializationCallbacksAttribute { get; private set; }
    public INamedTypeSymbol DefaultInvokeMethodNameAttribute { get; private set; }
    public INamedTypeSymbol GeneratedActivatorConstructorAttribute { get; private set; }
    public INamedTypeSymbol IDisposable { get; private set; }
    public INamedTypeSymbol FSharpCompilationMappingAttributeOrDefault { get; private set; }
    public INamedTypeSymbol FSharpSourceConstructFlagsOrDefault { get; private set; }
    public INamedTypeSymbol FormatterServices { get; private set; }
    public static LibraryTypes FromCompilation(Compilation compilation, CodeGeneratorOptions options);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_Action_2();
    [CompilerGeneratedAttribute]
private void set_Action_2(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_Byte();
    [CompilerGeneratedAttribute]
private void set_Byte(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_ITypeManifestProvider();
    [CompilerGeneratedAttribute]
private void set_ITypeManifestProvider(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_Field();
    [CompilerGeneratedAttribute]
private void set_Field(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_WireType();
    [CompilerGeneratedAttribute]
private void set_WireType(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_DeepCopier_1();
    [CompilerGeneratedAttribute]
private void set_DeepCopier_1(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_FieldCodec_1();
    [CompilerGeneratedAttribute]
private void set_FieldCodec_1(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_FieldCodec();
    [CompilerGeneratedAttribute]
private void set_FieldCodec(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_Func_2();
    [CompilerGeneratedAttribute]
private void set_Func_2(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_GenerateMethodSerializersAttribute();
    [CompilerGeneratedAttribute]
private void set_GenerateMethodSerializersAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_GenerateSerializerAttribute();
    [CompilerGeneratedAttribute]
private void set_GenerateSerializerAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_IActivator_1();
    [CompilerGeneratedAttribute]
private void set_IActivator_1(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_IBufferWriter();
    [CompilerGeneratedAttribute]
private void set_IBufferWriter(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_IInvokable();
    [CompilerGeneratedAttribute]
private void set_IInvokable(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_Int32();
    [CompilerGeneratedAttribute]
private void set_Int32(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_UInt32();
    [CompilerGeneratedAttribute]
private void set_UInt32(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_InvalidOperationException();
    [CompilerGeneratedAttribute]
private void set_InvalidOperationException(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_InvokablePool();
    [CompilerGeneratedAttribute]
private void set_InvokablePool(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_IResponseCompletionSource();
    [CompilerGeneratedAttribute]
private void set_IResponseCompletionSource(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_ITargetHolder();
    [CompilerGeneratedAttribute]
private void set_ITargetHolder(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_TypeManifestProviderAttribute();
    [CompilerGeneratedAttribute]
private void set_TypeManifestProviderAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_NonSerializedAttribute();
    [CompilerGeneratedAttribute]
private void set_NonSerializedAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_Object();
    [CompilerGeneratedAttribute]
private void set_Object(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_ObsoleteAttribute();
    [CompilerGeneratedAttribute]
private void set_ObsoleteAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_BaseCodec_1();
    [CompilerGeneratedAttribute]
private void set_BaseCodec_1(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_BaseCopier_1();
    [CompilerGeneratedAttribute]
private void set_BaseCopier_1(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_Reader();
    [CompilerGeneratedAttribute]
private void set_Reader(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_ResponseCompletionSourcePool();
    [CompilerGeneratedAttribute]
private void set_ResponseCompletionSourcePool(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_TypeManifestOptions();
    [CompilerGeneratedAttribute]
private void set_TypeManifestOptions(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_SerializerSession();
    [CompilerGeneratedAttribute]
private void set_SerializerSession(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_Task();
    [CompilerGeneratedAttribute]
private void set_Task(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_Task_1();
    [CompilerGeneratedAttribute]
private void set_Task_1(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_Type();
    [CompilerGeneratedAttribute]
private void set_Type(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_MethodInfo();
    [CompilerGeneratedAttribute]
private void set_MethodInfo(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_ICodecProvider();
    [CompilerGeneratedAttribute]
private void set_ICodecProvider(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_ValueSerializer();
    [CompilerGeneratedAttribute]
private void set_ValueSerializer(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_ValueTask();
    [CompilerGeneratedAttribute]
private void set_ValueTask(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_ValueTask_1();
    [CompilerGeneratedAttribute]
private void set_ValueTask_1(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_ValueTypeSetter_2();
    [CompilerGeneratedAttribute]
private void set_ValueTypeSetter_2(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_Void();
    [CompilerGeneratedAttribute]
private void set_Void(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_Writer();
    [CompilerGeneratedAttribute]
private void set_Writer(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public List`1<INamedTypeSymbol> get_IdAttributeTypes();
    [CompilerGeneratedAttribute]
private void set_IdAttributeTypes(List`1<INamedTypeSymbol> value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_WellKnownAliasAttribute();
    [CompilerGeneratedAttribute]
private void set_WellKnownAliasAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_WellKnownIdAttribute();
    [CompilerGeneratedAttribute]
private void set_WellKnownIdAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public List`1<WellKnownCodecDescription> get_StaticCodecs();
    [CompilerGeneratedAttribute]
private void set_StaticCodecs(List`1<WellKnownCodecDescription> value);
    [CompilerGeneratedAttribute]
public List`1<WellKnownCodecDescription> get_WellKnownCodecs();
    [CompilerGeneratedAttribute]
private void set_WellKnownCodecs(List`1<WellKnownCodecDescription> value);
    [CompilerGeneratedAttribute]
public List`1<WellKnownCopierDescription> get_StaticCopiers();
    [CompilerGeneratedAttribute]
private void set_StaticCopiers(List`1<WellKnownCopierDescription> value);
    [CompilerGeneratedAttribute]
public List`1<WellKnownCopierDescription> get_WellKnownCopiers();
    [CompilerGeneratedAttribute]
private void set_WellKnownCopiers(List`1<WellKnownCopierDescription> value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_RegisterCopierAttribute();
    [CompilerGeneratedAttribute]
private void set_RegisterCopierAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_RegisterSerializerAttribute();
    [CompilerGeneratedAttribute]
private void set_RegisterSerializerAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_RegisterConverterAttribute();
    [CompilerGeneratedAttribute]
private void set_RegisterConverterAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_RegisterActivatorAttribute();
    [CompilerGeneratedAttribute]
private void set_RegisterActivatorAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_UseActivatorAttribute();
    [CompilerGeneratedAttribute]
private void set_UseActivatorAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_SuppressReferenceTrackingAttribute();
    [CompilerGeneratedAttribute]
private void set_SuppressReferenceTrackingAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_OmitDefaultMemberValuesAttribute();
    [CompilerGeneratedAttribute]
private void set_OmitDefaultMemberValuesAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_CopyContext();
    [CompilerGeneratedAttribute]
private void set_CopyContext(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_CopyContextPool();
    [CompilerGeneratedAttribute]
private void set_CopyContextPool(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public Compilation get_Compilation();
    [CompilerGeneratedAttribute]
private void set_Compilation(Compilation value);
    [CompilerGeneratedAttribute]
public List`1<ITypeSymbol> get_ImmutableTypes();
    [CompilerGeneratedAttribute]
private void set_ImmutableTypes(List`1<ITypeSymbol> value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_TimeSpan();
    [CompilerGeneratedAttribute]
private void set_TimeSpan(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_DateTimeOffset();
    [CompilerGeneratedAttribute]
private void set_DateTimeOffset(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_Guid();
    [CompilerGeneratedAttribute]
private void set_Guid(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_IPAddress();
    [CompilerGeneratedAttribute]
private void set_IPAddress(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_IPEndPoint();
    [CompilerGeneratedAttribute]
private void set_IPEndPoint(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_CancellationToken();
    [CompilerGeneratedAttribute]
private void set_CancellationToken(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol[] get_TupleTypes();
    [CompilerGeneratedAttribute]
private void set_TupleTypes(INamedTypeSymbol[] value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_ValueTuple();
    [CompilerGeneratedAttribute]
private void set_ValueTuple(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public List`1<INamedTypeSymbol> get_ImmutableAttributes();
    [CompilerGeneratedAttribute]
private void set_ImmutableAttributes(List`1<INamedTypeSymbol> value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_Exception();
    [CompilerGeneratedAttribute]
private void set_Exception(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_ApplicationPartAttribute();
    [CompilerGeneratedAttribute]
private void set_ApplicationPartAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_InvokeMethodNameAttribute();
    [CompilerGeneratedAttribute]
private void set_InvokeMethodNameAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_InvokableCustomInitializerAttribute();
    [CompilerGeneratedAttribute]
private void set_InvokableCustomInitializerAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_InvokableBaseTypeAttribute();
    [CompilerGeneratedAttribute]
private void set_InvokableBaseTypeAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_DefaultInvokableBaseTypeAttribute();
    [CompilerGeneratedAttribute]
private void set_DefaultInvokableBaseTypeAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_GenerateCodeForDeclaringAssemblyAttribute();
    [CompilerGeneratedAttribute]
private void set_GenerateCodeForDeclaringAssemblyAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_SerializationCallbacksAttribute();
    [CompilerGeneratedAttribute]
private void set_SerializationCallbacksAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_DefaultInvokeMethodNameAttribute();
    [CompilerGeneratedAttribute]
private void set_DefaultInvokeMethodNameAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_GeneratedActivatorConstructorAttribute();
    [CompilerGeneratedAttribute]
private void set_GeneratedActivatorConstructorAttribute(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_IDisposable();
    [CompilerGeneratedAttribute]
private void set_IDisposable(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_FSharpCompilationMappingAttributeOrDefault();
    [CompilerGeneratedAttribute]
private void set_FSharpCompilationMappingAttributeOrDefault(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_FSharpSourceConstructFlagsOrDefault();
    [CompilerGeneratedAttribute]
private void set_FSharpSourceConstructFlagsOrDefault(INamedTypeSymbol value);
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_FormatterServices();
    [CompilerGeneratedAttribute]
private void set_FormatterServices(INamedTypeSymbol value);
    public bool IsShallowCopyable(ITypeSymbol type);
    private bool IsValueTypeFieldsShallowCopyable(ITypeSymbol type);
    [CompilerGeneratedAttribute]
private bool <IsShallowCopyable>b__331_0(IFieldSymbol f);
}
internal class Orleans.CodeGenerator.MemberDescriptionTypeComparer : object {
    [CompilerGeneratedAttribute]
private static MemberDescriptionTypeComparer <Default>k__BackingField;
    public static MemberDescriptionTypeComparer Default { get; }
    private static MemberDescriptionTypeComparer();
    [CompilerGeneratedAttribute]
public static MemberDescriptionTypeComparer get_Default();
    public sealed virtual bool Equals(IMemberDescription x, IMemberDescription y);
    public sealed virtual int GetHashCode(IMemberDescription obj);
}
[ExtensionAttribute]
internal static class Orleans.CodeGenerator.MetadataGenerator : object {
    public static ClassDeclarationSyntax GenerateMetadata(Compilation compilation, MetadataModel metadataModel, LibraryTypes libraryTypes);
    [ExtensionAttribute]
public static TypeSyntax GetCodecTypeName(ISerializableTypeDescription type);
    [ExtensionAttribute]
public static TypeSyntax GetCopierTypeName(ISerializableTypeDescription type);
    [ExtensionAttribute]
public static TypeSyntax GetActivatorTypeName(ISerializableTypeDescription type);
}
internal class Orleans.CodeGenerator.MetadataModel : object {
    [CompilerGeneratedAttribute]
private List`1<ISerializableTypeDescription> <SerializableTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<InvokableInterfaceDescription> <InvokableInterfaces>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<INamedTypeSymbol> <InvokableInterfaceImplementations>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<MethodDescription, GeneratedInvokerDescription> <GeneratedInvokables>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<GeneratedProxyDescription> <GeneratedProxies>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ISerializableTypeDescription> <ActivatableTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<INamedTypeSymbol> <DetectedSerializers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<INamedTypeSymbol> <DetectedActivators>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<INamedTypeSymbol> <DetectedCopiers>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<INamedTypeSymbol> <DetectedConverters>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ValueTuple`2<TypeSyntax, string>> <TypeAliases>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ValueTuple`2<TypeSyntax, UInt32>> <WellKnownTypeIds>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<string> <ApplicationParts>k__BackingField;
    public List`1<ISerializableTypeDescription> SerializableTypes { get; }
    public List`1<InvokableInterfaceDescription> InvokableInterfaces { get; }
    public List`1<INamedTypeSymbol> InvokableInterfaceImplementations { get; }
    public Dictionary`2<MethodDescription, GeneratedInvokerDescription> GeneratedInvokables { get; }
    public List`1<GeneratedProxyDescription> GeneratedProxies { get; }
    public List`1<ISerializableTypeDescription> ActivatableTypes { get; }
    public List`1<INamedTypeSymbol> DetectedSerializers { get; }
    public List`1<INamedTypeSymbol> DetectedActivators { get; }
    public List`1<INamedTypeSymbol> DetectedCopiers { get; }
    public List`1<INamedTypeSymbol> DetectedConverters { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ValueTuple`2<TypeSyntax, string>> TypeAliases { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ValueTuple`2<TypeSyntax, UInt32>> WellKnownTypeIds { get; }
    public HashSet`1<string> ApplicationParts { get; }
    [CompilerGeneratedAttribute]
public List`1<ISerializableTypeDescription> get_SerializableTypes();
    [CompilerGeneratedAttribute]
public List`1<InvokableInterfaceDescription> get_InvokableInterfaces();
    [CompilerGeneratedAttribute]
public List`1<INamedTypeSymbol> get_InvokableInterfaceImplementations();
    [CompilerGeneratedAttribute]
public Dictionary`2<MethodDescription, GeneratedInvokerDescription> get_GeneratedInvokables();
    [CompilerGeneratedAttribute]
public List`1<GeneratedProxyDescription> get_GeneratedProxies();
    [CompilerGeneratedAttribute]
public List`1<ISerializableTypeDescription> get_ActivatableTypes();
    [CompilerGeneratedAttribute]
public List`1<INamedTypeSymbol> get_DetectedSerializers();
    [CompilerGeneratedAttribute]
public List`1<INamedTypeSymbol> get_DetectedActivators();
    [CompilerGeneratedAttribute]
public List`1<INamedTypeSymbol> get_DetectedCopiers();
    [CompilerGeneratedAttribute]
public List`1<INamedTypeSymbol> get_DetectedConverters();
    [CompilerGeneratedAttribute]
public List`1<ValueTuple`2<TypeSyntax, string>> get_TypeAliases();
    [CompilerGeneratedAttribute]
public List`1<ValueTuple`2<TypeSyntax, UInt32>> get_WellKnownTypeIds();
    [CompilerGeneratedAttribute]
public HashSet`1<string> get_ApplicationParts();
}
internal class Orleans.CodeGenerator.MethodDescription : object {
    private InvokableInterfaceDescription _iface;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private IMethodSymbol <Method>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasCollision>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ValueTuple`2<string, ITypeParameterSymbol>> <AllTypeParameters>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ValueTuple`2<string, ITypeParameterSymbol>> <MethodTypeParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<ITypeParameterSymbol, string> <TypeParameterSubstitutions>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<ValueTuple`2<string, TypedConstant>> <CustomInitializerMethods>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<INamedTypeSymbol, INamedTypeSymbol> <InvokableBaseTypes>k__BackingField;
    public string Name { get; }
    public IMethodSymbol Method { get; }
    public InvokableInterfaceDescription ContainingInterface { get; }
    public bool HasCollision { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ValueTuple`2<string, ITypeParameterSymbol>> AllTypeParameters { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ValueTuple`2<string, ITypeParameterSymbol>> MethodTypeParameters { get; }
    public Dictionary`2<ITypeParameterSymbol, string> TypeParameterSubstitutions { get; }
    public List`1<ValueTuple`2<string, TypedConstant>> CustomInitializerMethods { get; }
    public Dictionary`2<INamedTypeSymbol, INamedTypeSymbol> InvokableBaseTypes { get; }
    public MethodDescription(InvokableInterfaceDescription containingType, IMethodSymbol method, string name, bool hasCollision);
    private void PopulateOverrides(InvokableInterfaceDescription containingType, IMethodSymbol method);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public IMethodSymbol get_Method();
    public InvokableInterfaceDescription get_ContainingInterface();
    [CompilerGeneratedAttribute]
public bool get_HasCollision();
    [CompilerGeneratedAttribute]
public List`1<ValueTuple`2<string, ITypeParameterSymbol>> get_AllTypeParameters();
    [CompilerGeneratedAttribute]
public List`1<ValueTuple`2<string, ITypeParameterSymbol>> get_MethodTypeParameters();
    [CompilerGeneratedAttribute]
public Dictionary`2<ITypeParameterSymbol, string> get_TypeParameterSubstitutions();
    [CompilerGeneratedAttribute]
public List`1<ValueTuple`2<string, TypedConstant>> get_CustomInitializerMethods();
    [CompilerGeneratedAttribute]
public Dictionary`2<INamedTypeSymbol, INamedTypeSymbol> get_InvokableBaseTypes();
    public virtual int GetHashCode();
    [CompilerGeneratedAttribute]
internal static string <.ctor>g__GetTypeParameterName|1_0(HashSet`1<string> names, ITypeParameterSymbol tp);
    [CompilerGeneratedAttribute]
internal static bool <PopulateOverrides>g__TryGetNamedArgument|2_0(ImmutableArray`1<KeyValuePair`2<string, TypedConstant>> arguments, string name, TypedConstant& value);
}
[GeneratorAttribute]
public class Orleans.CodeGenerator.OrleansSerializationSourceGenerator : object {
    public sealed virtual void Execute(GeneratorExecutionContext context);
    public sealed virtual void Initialize(GeneratorInitializationContext context);
}
internal class Orleans.CodeGenerator.PropertyDescription : object {
    [CompilerGeneratedAttribute]
private ushort <FieldId>k__BackingField;
    [CompilerGeneratedAttribute]
private IPropertySymbol <Property>k__BackingField;
    [CompilerGeneratedAttribute]
private TypeSyntax <TypeSyntax>k__BackingField;
    public ushort FieldId { get; }
    public ISymbol Symbol { get; }
    public ITypeSymbol Type { get; }
    public INamedTypeSymbol ContainingType { get; }
    public IPropertySymbol Property { get; }
    public TypeSyntax TypeSyntax { get; }
    public string AssemblyName { get; }
    public string TypeName { get; }
    public string TypeNameIdentifier { get; }
    public bool IsPrimaryConstructorParameter { get; }
    public PropertyDescription(ushort fieldId, IPropertySymbol property);
    [CompilerGeneratedAttribute]
public sealed virtual ushort get_FieldId();
    public sealed virtual ISymbol get_Symbol();
    public sealed virtual ITypeSymbol get_Type();
    public sealed virtual INamedTypeSymbol get_ContainingType();
    [CompilerGeneratedAttribute]
public IPropertySymbol get_Property();
    [CompilerGeneratedAttribute]
public sealed virtual TypeSyntax get_TypeSyntax();
    public sealed virtual string get_AssemblyName();
    public sealed virtual string get_TypeName();
    public sealed virtual string get_TypeNameIdentifier();
    public sealed virtual bool get_IsPrimaryConstructorParameter();
    public sealed virtual TypeSyntax GetTypeSyntax(ITypeSymbol typeSymbol);
}
public static class Orleans.CodeGenerator.PropertyUtility : object {
    public static IPropertySymbol GetMatchingProperty(IFieldSymbol field);
}
internal static class Orleans.CodeGenerator.ProxyGenerator : object {
    private static string CopyContextPoolMemberName;
    private static string CodecProviderMemberName;
    public static ValueTuple`2<ClassDeclarationSyntax, GeneratedProxyDescription> Generate(LibraryTypes libraryTypes, InvokableInterfaceDescription interfaceDescription, MetadataModel metadataModel);
    public static string GetSimpleClassName(InvokableInterfaceDescription interfaceDescription);
    private static List`1<GeneratedFieldDescription> GetFieldDescriptions(InvokableInterfaceDescription interfaceDescription, MetadataModel metadataModel, LibraryTypes libraryTypes);
    private static MemberDeclarationSyntax[] GetFieldDeclarations(List`1<GeneratedFieldDescription> fieldDescriptions);
    [IteratorStateMachineAttribute("Orleans.CodeGenerator.ProxyGenerator/<CreateProxyMethods>d__6")]
private static IEnumerable`1<MemberDeclarationSyntax> CreateProxyMethods(LibraryTypes libraryTypes, List`1<GeneratedFieldDescription> fieldDescriptions, InvokableInterfaceDescription interfaceDescription, MetadataModel metadataModel);
    private static BlockSyntax CreateAsyncProxyMethodBody(LibraryTypes libraryTypes, List`1<GeneratedFieldDescription> fieldDescriptions, MetadataModel metadataModel, MethodDescription methodDescription);
    [IteratorStateMachineAttribute("Orleans.CodeGenerator.ProxyGenerator/<GenerateConstructors>d__8")]
private static IEnumerable`1<MemberDeclarationSyntax> GenerateConstructors(string simpleClassName, List`1<GeneratedFieldDescription> fieldDescriptions, INamedTypeSymbol baseType);
    private static ParameterSyntax GetParameterSyntax(int index, IParameterSymbol parameter, Dictionary`2<ITypeParameterSymbol, string> typeParameterSubstitutions);
    [CompilerGeneratedAttribute]
internal static MemberDeclarationSyntax <GetFieldDeclarations>g__GetFieldDeclaration|5_0(GeneratedFieldDescription description);
    [CompilerGeneratedAttribute]
internal static MethodDeclarationSyntax <CreateProxyMethods>g__CreateProxyMethod|6_0(MethodDescription methodDescription, <>c__DisplayClass6_0& );
    [IteratorStateMachineAttribute("Orleans.CodeGenerator.ProxyGenerator/<<GenerateConstructors>g__GetModifiers|8_1>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<SyntaxToken> <GenerateConstructors>g__GetModifiers|8_1(IMethodSymbol method);
    [CompilerGeneratedAttribute]
internal static ArgumentSyntax <GenerateConstructors>g__GetBaseInitializerArgument|8_2(IParameterSymbol parameter, int index);
    [CompilerGeneratedAttribute]
internal static ExpressionSyntax <GenerateConstructors>g__Unwrapped|8_5(ExpressionSyntax expr);
    [CompilerGeneratedAttribute]
internal static ExpressionSyntax <GenerateConstructors>g__GetService|8_6(TypeSyntax type);
}
internal class Orleans.CodeGenerator.SerializableTypeDescription : object {
    private LibraryTypes _libraryTypes;
    private TypeSyntax _typeSyntax;
    private TypeSyntax _baseTypeSyntax;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private Accessibility <Accessibility>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsPrimaryContstructorParameters>k__BackingField;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private List`1<ValueTuple`2<string, ITypeParameterSymbol>> <TypeParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IMemberDescription> <Members>k__BackingField;
    [CompilerGeneratedAttribute]
private SemanticModel <SemanticModel>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TypeSyntax> <ActivatorConstructorParameters>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasActivatorConstructor>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<INamedTypeSymbol> <SerializationHooks>k__BackingField;
    private INamedTypeSymbol Type { get; }
    public Accessibility Accessibility { get; }
    public TypeSyntax TypeSyntax { get; }
    public TypeSyntax BaseTypeSyntax { get; }
    public bool HasComplexBaseType { get; }
    public bool SupportsPrimaryContstructorParameters { get; }
    public INamedTypeSymbol BaseType { get; }
    public string Namespace { get; }
    public string GeneratedNamespace { get; }
    public string Name { get; }
    public bool IsValueType { get; }
    public bool IsSealedType { get; }
    public bool IsEnumType { get; }
    public bool IsGenericType { get; }
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public List`1<ValueTuple`2<string, ITypeParameterSymbol>> TypeParameters { get; }
    public List`1<IMemberDescription> Members { get; }
    public SemanticModel SemanticModel { get; }
    public List`1<TypeSyntax> ActivatorConstructorParameters { get; }
    public bool IsEmptyConstructable { get; }
    public bool HasActivatorConstructor { get; }
    public bool IsPartial { get; }
    public bool UseActivator { get; }
    public bool TrackReferences { get; }
    public bool OmitDefaultMemberValues { get; }
    public List`1<INamedTypeSymbol> SerializationHooks { get; }
    public bool IsImmutable { get; }
    public SerializableTypeDescription(SemanticModel semanticModel, INamedTypeSymbol type, bool supportsPrimaryContstructorParameters, IEnumerable`1<IMemberDescription> members, LibraryTypes libraryTypes);
    [CompilerGeneratedAttribute]
private INamedTypeSymbol get_Type();
    [CompilerGeneratedAttribute]
public sealed virtual Accessibility get_Accessibility();
    public sealed virtual TypeSyntax get_TypeSyntax();
    public sealed virtual TypeSyntax get_BaseTypeSyntax();
    public sealed virtual bool get_HasComplexBaseType();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_SupportsPrimaryContstructorParameters();
    public sealed virtual INamedTypeSymbol get_BaseType();
    public sealed virtual string get_Namespace();
    public sealed virtual string get_GeneratedNamespace();
    public sealed virtual string get_Name();
    public sealed virtual bool get_IsValueType();
    public sealed virtual bool get_IsSealedType();
    public sealed virtual bool get_IsEnumType();
    public sealed virtual bool get_IsGenericType();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<ValueTuple`2<string, ITypeParameterSymbol>> get_TypeParameters();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<IMemberDescription> get_Members();
    [CompilerGeneratedAttribute]
public sealed virtual SemanticModel get_SemanticModel();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<TypeSyntax> get_ActivatorConstructorParameters();
    public sealed virtual bool get_IsEmptyConstructable();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_HasActivatorConstructor();
    public sealed virtual bool get_IsPartial();
    public sealed virtual bool get_UseActivator();
    public sealed virtual bool get_TrackReferences();
    public sealed virtual bool get_OmitDefaultMemberValues();
    [CompilerGeneratedAttribute]
public sealed virtual List`1<INamedTypeSymbol> get_SerializationHooks();
    public sealed virtual bool get_IsImmutable();
    public sealed virtual ExpressionSyntax GetObjectCreationExpression(LibraryTypes libraryTypes);
    [CompilerGeneratedAttribute]
internal static bool <.ctor>g__TryGetActivatorConstructor|3_0(INamedTypeSymbol type, LibraryTypes libraryTypes, List`1& parameters);
    [CompilerGeneratedAttribute]
internal static string <.ctor>g__GetTypeParameterName|3_1(HashSet`1<string> names, ITypeParameterSymbol tp);
}
internal static class Orleans.CodeGenerator.SerializerGenerator : object {
    private static string BaseTypeSerializerFieldName;
    private static string ActivatorFieldName;
    private static string SerializeMethodName;
    private static string DeserializeMethodName;
    private static string WriteFieldMethodName;
    private static string ReadValueMethodName;
    private static string CodecFieldTypeFieldName;
    public static ClassDeclarationSyntax GenerateSerializer(LibraryTypes libraryTypes, ISerializableTypeDescription type);
    public static string GetSimpleClassName(ISerializableTypeDescription serializableType);
    public static string GetSimpleClassName(string name);
    public static string GetGeneratedNamespaceName(ITypeSymbol type);
    private static MemberDeclarationSyntax[] GetFieldDeclarations(List`1<GeneratedFieldDescription> fieldDescriptions);
    private static ConstructorDeclarationSyntax GenerateConstructor(LibraryTypes libraryTypes, string simpleClassName, List`1<GeneratedFieldDescription> fieldDescriptions);
    private static List`1<GeneratedFieldDescription> GetFieldDescriptions(ISerializableTypeDescription serializableTypeDescription, List`1<ISerializableMember> members, LibraryTypes libraryTypes);
    private static MemberDeclarationSyntax GenerateSerializeMethod(ISerializableTypeDescription type, List`1<GeneratedFieldDescription> serializerFields, List`1<ISerializableMember> members, LibraryTypes libraryTypes);
    [IteratorStateMachineAttribute("Orleans.CodeGenerator.SerializerGenerator/<AddSerializationMembers>d__15")]
private static IEnumerable`1<StatementSyntax> AddSerializationMembers(ISerializableTypeDescription type, List`1<GeneratedFieldDescription> serializerFields, IEnumerable`1<ISerializableMember> members, LibraryTypes libraryTypes, IdentifierNameSyntax writerParam, IdentifierNameSyntax instanceParam, IdentifierNameSyntax previousFieldIdVar);
    private static MemberDeclarationSyntax GenerateDeserializeMethod(ISerializableTypeDescription type, List`1<GeneratedFieldDescription> serializerFields, List`1<ISerializableMember> members, LibraryTypes libraryTypes);
    [IteratorStateMachineAttribute("Orleans.CodeGenerator.SerializerGenerator/<AddSerializationCallbacks>d__17")]
private static IEnumerable`1<StatementSyntax> AddSerializationCallbacks(ISerializableTypeDescription type, IdentifierNameSyntax instanceParam, string callbackMethodName);
    private static MemberDeclarationSyntax GenerateCompoundTypeWriteFieldMethod(ISerializableTypeDescription type, LibraryTypes libraryTypes);
    private static MemberDeclarationSyntax GenerateCompoundTypeReadValueMethod(ISerializableTypeDescription type, List`1<GeneratedFieldDescription> serializerFields, LibraryTypes libraryTypes);
    private static MemberDeclarationSyntax GenerateEnumWriteMethod(ISerializableTypeDescription type, LibraryTypes libraryTypes);
    private static MemberDeclarationSyntax GenerateEnumReadMethod(ISerializableTypeDescription type, LibraryTypes libraryTypes);
    [CompilerGeneratedAttribute]
internal static MemberDeclarationSyntax <GetFieldDeclarations>g__GetFieldDeclaration|11_0(GeneratedFieldDescription description);
    [CompilerGeneratedAttribute]
internal static ExpressionSyntax <GenerateConstructor>g__Unwrapped|12_3(ExpressionSyntax expr);
    [CompilerGeneratedAttribute]
internal static ExpressionSyntax <GenerateConstructor>g__GetService|12_4(TypeSyntax type);
    [CompilerGeneratedAttribute]
internal static string <GetFieldDescriptions>g__ToLowerCamelCase|13_5(string input);
    [CompilerGeneratedAttribute]
internal static List`1<StatementSyntax> <GenerateDeserializeMethod>g__GetDeserializerLoopBody|16_3(IEnumerable`1<ISerializableMember> members, <>c__DisplayClass16_0& );
}
internal static class Orleans.CodeGenerator.SyntaxGeneration.Identifier : object {
    internal static bool IsCSharpKeyword(string identifier);
    public static string SanitizeIdentifierName(string input);
}
[ExtensionAttribute]
internal static class Orleans.CodeGenerator.SyntaxGeneration.StringExtensions : object {
    [ExtensionAttribute]
public static LiteralExpressionSyntax GetLiteralExpression(string str);
    [ExtensionAttribute]
public static SyntaxToken ToIdentifier(string identifier);
    [ExtensionAttribute]
public static string EscapeIdentifier(string str);
    [ExtensionAttribute]
public static IdentifierNameSyntax ToIdentifierName(string identifier);
}
[ExtensionAttribute]
internal static class Orleans.CodeGenerator.SyntaxGeneration.SymbolExtensions : object {
    private static ConcurrentDictionary`2<ITypeSymbol, TypeSyntax> TypeCache;
    private static ConcurrentDictionary`2<ISymbol, string> NameCache;
    private static SymbolExtensions();
    [ExtensionAttribute]
public static TypeSyntax ToTypeSyntax(ITypeSymbol typeSymbol);
    [ExtensionAttribute]
public static TypeSyntax ToTypeSyntax(ITypeSymbol typeSymbol, Dictionary`2<ITypeParameterSymbol, string> substitutions);
    [ExtensionAttribute]
public static string ToDisplayName(ITypeSymbol typeSymbol, Dictionary`2<ITypeParameterSymbol, string> substitutions, bool includeGlobalSpecifier, bool includeNamespace);
    [ExtensionAttribute]
public static string ToDisplayName(ITypeSymbol typeSymbol);
    [ExtensionAttribute]
public static string ToDisplayName(IAssemblySymbol assemblySymbol);
    private static void ToTypeSyntaxInner(ITypeSymbol typeSymbol, Dictionary`2<ITypeParameterSymbol, string> substitutions, StringBuilder res, bool includeGlobalSpecifier, bool includeNamespace);
    [ExtensionAttribute]
public static TypeSyntax ToTypeSyntax(ITypeSymbol typeSymbol, TypeSyntax[] genericParameters);
    [ExtensionAttribute]
public static TypeSyntax ToOpenTypeSyntax(INamedTypeSymbol typeSymbol);
    [ExtensionAttribute]
public static NameSyntax ToNameSyntax(ITypeSymbol typeSymbol);
    [ExtensionAttribute]
public static string GetValidIdentifier(ITypeSymbol type);
    [ExtensionAttribute]
public static bool HasBaseType(ITypeSymbol typeSymbol, INamedTypeSymbol baseType);
    [ExtensionAttribute]
public static bool HasAnyAttribute(ISymbol symbol, List`1<INamedTypeSymbol> attributeType);
    [ExtensionAttribute]
public static bool HasAttribute(ISymbol symbol, INamedTypeSymbol attributeType);
    [ExtensionAttribute]
public static bool GetAttributes(ISymbol symbol, INamedTypeSymbol attributeType, AttributeData[]& attributes);
    [IteratorStateMachineAttribute("Orleans.CodeGenerator.SyntaxGeneration.SymbolExtensions/<GetAllMembers>d__16`1")]
[ExtensionAttribute]
public static IEnumerable`1<TSymbol> GetAllMembers(ITypeSymbol type, string name);
    [IteratorStateMachineAttribute("Orleans.CodeGenerator.SyntaxGeneration.SymbolExtensions/<GetAllMembers>d__17`1")]
[ExtensionAttribute]
public static IEnumerable`1<TSymbol> GetAllMembers(ITypeSymbol type, string name, Accessibility accessibility);
    [IteratorStateMachineAttribute("Orleans.CodeGenerator.SyntaxGeneration.SymbolExtensions/<GetAllMembers>d__18`1")]
[ExtensionAttribute]
public static IEnumerable`1<TSymbol> GetAllMembers(ITypeSymbol type);
    [IteratorStateMachineAttribute("Orleans.CodeGenerator.SyntaxGeneration.SymbolExtensions/<GetDeclaredInstanceMembers>d__19`1")]
[ExtensionAttribute]
public static IEnumerable`1<TSymbol> GetDeclaredInstanceMembers(ITypeSymbol type);
    [ExtensionAttribute]
public static string GetNamespaceAndNesting(ISymbol symbol);
    [IteratorStateMachineAttribute("Orleans.CodeGenerator.SyntaxGeneration.SymbolExtensions/<GetAllTypeParameters>d__21")]
[ExtensionAttribute]
public static IEnumerable`1<ITypeParameterSymbol> GetAllTypeParameters(INamedTypeSymbol symbol);
    [IteratorStateMachineAttribute("Orleans.CodeGenerator.SyntaxGeneration.SymbolExtensions/<GetDeclaredTypes>d__22")]
[ExtensionAttribute]
public static IEnumerable`1<INamedTypeSymbol> GetDeclaredTypes(IAssemblySymbol reference);
    [CompilerGeneratedAttribute]
internal static void <ToTypeSyntaxInner>g__OnNamedTypeSymbol|7_0(INamedTypeSymbol symbol, Dictionary`2<ITypeParameterSymbol, string> substitutions, StringBuilder res, bool includeGlobalSpecifier, bool includeNamespace);
    [CompilerGeneratedAttribute]
internal static void <ToTypeSyntaxInner>g__AddFullNamespace|7_1(INamespaceSymbol symbol, StringBuilder res, bool includeGlobalSpecifier);
    [CompilerGeneratedAttribute]
internal static SimpleNameSyntax <ToTypeSyntax>g__WithGenericParameters|8_0(SimpleNameSyntax simpleNameSyntax, <>c__DisplayClass8_0& );
    [CompilerGeneratedAttribute]
internal static void <ToTypeSyntax>g__ThrowInvalidOperationException|8_1(<>c__DisplayClass8_0& );
    [CompilerGeneratedAttribute]
internal static NameSyntax <ToOpenTypeSyntax>g__Visit|9_0(NameSyntax nameSyntax);
    [CompilerGeneratedAttribute]
internal static void <GetNamespaceAndNesting>g__Visit|20_0(ISymbol symbol, StringBuilder res);
    [IteratorStateMachineAttribute("Orleans.CodeGenerator.SyntaxGeneration.SymbolExtensions/<<GetDeclaredTypes>g__GetDeclaredTypes|22_0>d")]
[CompilerGeneratedAttribute]
internal static IEnumerable`1<INamedTypeSymbol> <GetDeclaredTypes>g__GetDeclaredTypes|22_0(INamespaceOrTypeSymbol ns);
}
[ExtensionAttribute]
internal static class Orleans.CodeGenerator.SyntaxGeneration.SymbolSyntaxExtensions : object {
    public static ParenthesizedExpressionSyntax GetBindingFlagsParenthesizedExpressionSyntax(SyntaxKind operationKind, BindingFlags[] bindingFlags);
    [ExtensionAttribute]
public static ExpressionSyntax ToExpression(TypedConstant constant);
    private static ExpressionSyntax DisplayEnumConstant(TypedConstant constant);
    private static ulong ConvertToUInt64(object value);
}
[ExtensionAttribute]
internal static class Orleans.CodeGenerator.SyntaxGeneration.SyntaxFactoryUtility : object {
    [ExtensionAttribute]
public static MemberAccessExpressionSyntax Member(ExpressionSyntax instance, string member);
    [ExtensionAttribute]
public static MemberAccessExpressionSyntax Member(ExpressionSyntax instance, IdentifierNameSyntax member);
    [ExtensionAttribute]
public static MemberAccessExpressionSyntax Member(ExpressionSyntax instance, GenericNameSyntax member);
    [ExtensionAttribute]
public static MemberAccessExpressionSyntax Member(ExpressionSyntax instance, string member, TypeSyntax[] genericTypes);
    [ExtensionAttribute]
public static GenericNameSyntax ToGenericName(string identifier);
    public static ClassDeclarationSyntax AddGenericTypeParameters(ClassDeclarationSyntax classDeclaration, List`1<ValueTuple`2<string, ITypeParameterSymbol>> typeParameters);
    public static List`1<ValueTuple`2<string, List`1<TypeParameterConstraintSyntax>>> GetTypeParameterConstraints(List`1<ValueTuple`2<string, ITypeParameterSymbol>> typeParameter);
    public static string GetSanitizedName(IParameterSymbol parameter, int index);
}
internal class Orleans.CodeGenerator.WellKnownCodecDescription : object {
    [CompilerGeneratedAttribute]
private ITypeSymbol <UnderlyingType>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <CodecType>k__BackingField;
    public ITypeSymbol UnderlyingType { get; }
    public INamedTypeSymbol CodecType { get; }
    public WellKnownCodecDescription(ITypeSymbol underlyingType, INamedTypeSymbol codecType);
    [CompilerGeneratedAttribute]
public sealed virtual ITypeSymbol get_UnderlyingType();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_CodecType();
}
internal class Orleans.CodeGenerator.WellKnownCopierDescription : object {
    [CompilerGeneratedAttribute]
private ITypeSymbol <UnderlyingType>k__BackingField;
    [CompilerGeneratedAttribute]
private INamedTypeSymbol <CopierType>k__BackingField;
    public ITypeSymbol UnderlyingType { get; }
    public INamedTypeSymbol CopierType { get; }
    public WellKnownCopierDescription(ITypeSymbol underlyingType, INamedTypeSymbol codecType);
    [CompilerGeneratedAttribute]
public sealed virtual ITypeSymbol get_UnderlyingType();
    [CompilerGeneratedAttribute]
public INamedTypeSymbol get_CopierType();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
