[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.Extensions.Hosting.GenericHostExtensions : object {
    [ExtensionAttribute]
public static IHostBuilder UseOrleans(IHostBuilder hostBuilder, Action`2<HostBuilderContext, ISiloBuilder> configureDelegate);
    [ExtensionAttribute]
public static IServiceCollection AddOrleans(IServiceCollection services, Action`1<ISiloBuilder> configureDelegate);
    private static ISiloBuilder AddOrleans(IServiceCollection services);
    private static OrleansConfigurationException GetOrleansClientAddedException();
}
public class Orleans.Configuration.ActivationCountBasedPlacementOptions : object {
    [CompilerGeneratedAttribute]
private int <ChooseOutOf>k__BackingField;
    public static int DEFAULT_ACTIVATION_COUNT_PLACEMENT_CHOOSE_OUT_OF;
    public int ChooseOutOf { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ChooseOutOf();
    [CompilerGeneratedAttribute]
public void set_ChooseOutOf(int value);
}
internal class Orleans.Configuration.ActivationCountBasedPlacementOptionsValidator : object {
    private ActivationCountBasedPlacementOptions options;
    public ActivationCountBasedPlacementOptionsValidator(IOptions`1<ActivationCountBasedPlacementOptions> options);
    public sealed virtual void ValidateConfiguration();
}
public class Orleans.Configuration.ConsistentRingOptions : object {
    [CompilerGeneratedAttribute]
private int <NumVirtualBucketsConsistentRing>k__BackingField;
    public static int DEFAULT_NUM_VIRTUAL_RING_BUCKETS;
    [CompilerGeneratedAttribute]
private bool <UseVirtualBucketsConsistentRing>k__BackingField;
    public static bool DEFAULT_USE_VIRTUAL_RING_BUCKETS;
    public int NumVirtualBucketsConsistentRing { get; public set; }
    public bool UseVirtualBucketsConsistentRing { get; public set; }
    [CompilerGeneratedAttribute]
public int get_NumVirtualBucketsConsistentRing();
    [CompilerGeneratedAttribute]
public void set_NumVirtualBucketsConsistentRing(int value);
    [CompilerGeneratedAttribute]
public bool get_UseVirtualBucketsConsistentRing();
    [CompilerGeneratedAttribute]
public void set_UseVirtualBucketsConsistentRing(bool value);
}
public class Orleans.Configuration.DeploymentLoadPublisherOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <DeploymentLoadPublisherRefreshTime>k__BackingField;
    public static TimeSpan DEFAULT_DEPLOYMENT_LOAD_PUBLISHER_REFRESH_TIME;
    public TimeSpan DeploymentLoadPublisherRefreshTime { get; public set; }
    private static DeploymentLoadPublisherOptions();
    [CompilerGeneratedAttribute]
public TimeSpan get_DeploymentLoadPublisherRefreshTime();
    [CompilerGeneratedAttribute]
public void set_DeploymentLoadPublisherRefreshTime(TimeSpan value);
}
public class Orleans.Configuration.DevelopmentClusterMembershipOptions : object {
    [CompilerGeneratedAttribute]
private IPEndPoint <PrimarySiloEndpoint>k__BackingField;
    public IPEndPoint PrimarySiloEndpoint { get; public set; }
    [CompilerGeneratedAttribute]
public IPEndPoint get_PrimarySiloEndpoint();
    [CompilerGeneratedAttribute]
public void set_PrimarySiloEndpoint(IPEndPoint value);
}
internal class Orleans.Configuration.DevelopmentClusterMembershipOptionsValidator : object {
    private DevelopmentClusterMembershipOptions options;
    private IMembershipTable membershipTable;
    public DevelopmentClusterMembershipOptionsValidator(IOptions`1<DevelopmentClusterMembershipOptions> options, IServiceProvider serviceProvider);
    public sealed virtual void ValidateConfiguration();
}
public class Orleans.Configuration.EndpointOptions : object {
    private IPAddress advertisedIPAddress;
    private int siloPort;
    public static int DEFAULT_SILO_PORT;
    [CompilerGeneratedAttribute]
private int <GatewayPort>k__BackingField;
    public static int DEFAULT_GATEWAY_PORT;
    [CompilerGeneratedAttribute]
private IPEndPoint <SiloListeningEndpoint>k__BackingField;
    [CompilerGeneratedAttribute]
private IPEndPoint <GatewayListeningEndpoint>k__BackingField;
    public IPAddress AdvertisedIPAddress { get; public set; }
    public int SiloPort { get; public set; }
    public int GatewayPort { get; public set; }
    public IPEndPoint SiloListeningEndpoint { get; public set; }
    public IPEndPoint GatewayListeningEndpoint { get; public set; }
    public IPAddress get_AdvertisedIPAddress();
    public void set_AdvertisedIPAddress(IPAddress value);
    public int get_SiloPort();
    public void set_SiloPort(int value);
    [CompilerGeneratedAttribute]
public int get_GatewayPort();
    [CompilerGeneratedAttribute]
public void set_GatewayPort(int value);
    [CompilerGeneratedAttribute]
public IPEndPoint get_SiloListeningEndpoint();
    [CompilerGeneratedAttribute]
public void set_SiloListeningEndpoint(IPEndPoint value);
    [CompilerGeneratedAttribute]
public IPEndPoint get_GatewayListeningEndpoint();
    [CompilerGeneratedAttribute]
public void set_GatewayListeningEndpoint(IPEndPoint value);
}
internal class Orleans.Configuration.EndpointOptionsProvider : object {
    private ILogger`1<EndpointOptionsProvider> logger;
    public EndpointOptionsProvider(ILogger`1<EndpointOptionsProvider> logger);
    public sealed virtual void PostConfigure(string name, EndpointOptions options);
}
public class Orleans.Configuration.GrainCollectionOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <CollectionQuantum>k__BackingField;
    public static TimeSpan DEFAULT_COLLECTION_QUANTUM;
    [CompilerGeneratedAttribute]
private TimeSpan <CollectionAge>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, TimeSpan> <ClassSpecificCollectionAge>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ActivationTimeout>k__BackingField;
    public static TimeSpan DEFAULT_ACTIVATION_TIMEOUT;
    [CompilerGeneratedAttribute]
private TimeSpan <DeactivationTimeout>k__BackingField;
    public static TimeSpan DEFAULT_DEACTIVATION_TIMEOUT;
    public TimeSpan CollectionQuantum { get; public set; }
    public TimeSpan CollectionAge { get; public set; }
    public Dictionary`2<string, TimeSpan> ClassSpecificCollectionAge { get; public set; }
    public TimeSpan ActivationTimeout { get; public set; }
    public TimeSpan DeactivationTimeout { get; public set; }
    private static GrainCollectionOptions();
    [CompilerGeneratedAttribute]
public TimeSpan get_CollectionQuantum();
    [CompilerGeneratedAttribute]
public void set_CollectionQuantum(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_CollectionAge();
    [CompilerGeneratedAttribute]
public void set_CollectionAge(TimeSpan value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, TimeSpan> get_ClassSpecificCollectionAge();
    [CompilerGeneratedAttribute]
public void set_ClassSpecificCollectionAge(Dictionary`2<string, TimeSpan> value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ActivationTimeout();
    [CompilerGeneratedAttribute]
public void set_ActivationTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_DeactivationTimeout();
    [CompilerGeneratedAttribute]
public void set_DeactivationTimeout(TimeSpan value);
}
internal class Orleans.Configuration.GrainCollectionOptionsValidator : object {
    private IOptions`1<GrainCollectionOptions> options;
    public GrainCollectionOptionsValidator(IOptions`1<GrainCollectionOptions> options);
    public sealed virtual void ValidateConfiguration();
}
public class Orleans.Configuration.GrainDirectoryOptions : object {
    [CompilerGeneratedAttribute]
private CachingStrategyType <CachingStrategy>k__BackingField;
    public static CachingStrategyType DEFAULT_CACHING_STRATEGY;
    [CompilerGeneratedAttribute]
private int <CacheSize>k__BackingField;
    public static int DEFAULT_CACHE_SIZE;
    [CompilerGeneratedAttribute]
private TimeSpan <InitialCacheTTL>k__BackingField;
    public static TimeSpan DEFAULT_INITIAL_CACHE_TTL;
    [CompilerGeneratedAttribute]
private TimeSpan <MaximumCacheTTL>k__BackingField;
    public static TimeSpan DEFAULT_MAXIMUM_CACHE_TTL;
    [CompilerGeneratedAttribute]
private double <CacheTTLExtensionFactor>k__BackingField;
    public static double DEFAULT_TTL_EXTENSION_FACTOR;
    [CompilerGeneratedAttribute]
private TimeSpan <LazyDeregistrationDelay>k__BackingField;
    public static TimeSpan DEFAULT_UNREGISTER_RACE_DELAY;
    public CachingStrategyType CachingStrategy { get; public set; }
    public int CacheSize { get; public set; }
    public TimeSpan InitialCacheTTL { get; public set; }
    public TimeSpan MaximumCacheTTL { get; public set; }
    public double CacheTTLExtensionFactor { get; public set; }
    public TimeSpan LazyDeregistrationDelay { get; public set; }
    private static GrainDirectoryOptions();
    [CompilerGeneratedAttribute]
public CachingStrategyType get_CachingStrategy();
    [CompilerGeneratedAttribute]
public void set_CachingStrategy(CachingStrategyType value);
    [CompilerGeneratedAttribute]
public int get_CacheSize();
    [CompilerGeneratedAttribute]
public void set_CacheSize(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_InitialCacheTTL();
    [CompilerGeneratedAttribute]
public void set_InitialCacheTTL(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MaximumCacheTTL();
    [CompilerGeneratedAttribute]
public void set_MaximumCacheTTL(TimeSpan value);
    [CompilerGeneratedAttribute]
public double get_CacheTTLExtensionFactor();
    [CompilerGeneratedAttribute]
public void set_CacheTTLExtensionFactor(double value);
    [CompilerGeneratedAttribute]
public TimeSpan get_LazyDeregistrationDelay();
    [CompilerGeneratedAttribute]
public void set_LazyDeregistrationDelay(TimeSpan value);
}
public class Orleans.Configuration.MockReminderTableOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <OperationDelay>k__BackingField;
    public static TimeSpan DEFAULT_MOCK_REMINDER_TABLE_DELAY;
    public TimeSpan OperationDelay { get; public set; }
    private static MockReminderTableOptions();
    [CompilerGeneratedAttribute]
public TimeSpan get_OperationDelay();
    [CompilerGeneratedAttribute]
public void set_OperationDelay(TimeSpan value);
}
public class Orleans.Configuration.SchedulingOptions : object {
    [CompilerGeneratedAttribute]
private TimeSpan <DelayWarningThreshold>k__BackingField;
    public static TimeSpan DEFAULT_DELAY_WARNING_THRESHOLD;
    [CompilerGeneratedAttribute]
private TimeSpan <ActivationSchedulingQuantum>k__BackingField;
    public static TimeSpan DEFAULT_ACTIVATION_SCHEDULING_QUANTUM;
    [CompilerGeneratedAttribute]
private TimeSpan <TurnWarningLengthThreshold>k__BackingField;
    public static TimeSpan DEFAULT_TURN_WARNING_THRESHOLD;
    [CompilerGeneratedAttribute]
private int <MaxPendingWorkItemsSoftLimit>k__BackingField;
    public static int DEFAULT_MAX_PENDING_ITEMS_SOFT_LIMIT;
    [CompilerGeneratedAttribute]
private TimeSpan <StoppedActivationWarningInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllowCallChainReentrancy>k__BackingField;
    public static bool DEFAULT_ALLOW_CALL_CHAIN_REENTRANCY;
    public TimeSpan DelayWarningThreshold { get; public set; }
    public TimeSpan ActivationSchedulingQuantum { get; public set; }
    public TimeSpan TurnWarningLengthThreshold { get; public set; }
    public int MaxPendingWorkItemsSoftLimit { get; public set; }
    public TimeSpan StoppedActivationWarningInterval { get; public set; }
    public bool AllowCallChainReentrancy { get; public set; }
    private static SchedulingOptions();
    [CompilerGeneratedAttribute]
public TimeSpan get_DelayWarningThreshold();
    [CompilerGeneratedAttribute]
public void set_DelayWarningThreshold(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ActivationSchedulingQuantum();
    [CompilerGeneratedAttribute]
public void set_ActivationSchedulingQuantum(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_TurnWarningLengthThreshold();
    [CompilerGeneratedAttribute]
public void set_TurnWarningLengthThreshold(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_MaxPendingWorkItemsSoftLimit();
    [CompilerGeneratedAttribute]
public void set_MaxPendingWorkItemsSoftLimit(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_StoppedActivationWarningInterval();
    [CompilerGeneratedAttribute]
public void set_StoppedActivationWarningInterval(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_AllowCallChainReentrancy();
    [CompilerGeneratedAttribute]
public void set_AllowCallChainReentrancy(bool value);
}
public class Orleans.Configuration.SiloConnectionOptions : object {
    private ConnectionBuilderDelegates siloOutboundDelegates;
    private ConnectionBuilderDelegates siloInboundDelegates;
    private ConnectionBuilderDelegates gatewayInboundDelegates;
    public void ConfigureSiloOutboundConnection(Action`1<IConnectionBuilder> configure);
    public void ConfigureSiloInboundConnection(Action`1<IConnectionBuilder> configure);
    public void ConfigureGatewayInboundConnection(Action`1<IConnectionBuilder> configure);
    private sealed virtual override void Orleans.Configuration.SiloConnectionOptions.ISiloConnectionBuilderOptions.ConfigureSiloOutboundBuilder(IConnectionBuilder builder);
    private sealed virtual override void Orleans.Configuration.SiloConnectionOptions.ISiloConnectionBuilderOptions.ConfigureSiloInboundBuilder(IConnectionBuilder builder);
    private sealed virtual override void Orleans.Configuration.SiloConnectionOptions.ISiloConnectionBuilderOptions.ConfigureGatewayInboundBuilder(IConnectionBuilder builder);
}
public class Orleans.Configuration.SiloMessagingOptions : MessagingOptions {
    private TimeSpan systemResponseTimeout;
    [CompilerGeneratedAttribute]
private int <SiloSenderQueues>k__BackingField;
    [CompilerGeneratedAttribute]
private int <GatewaySenderQueues>k__BackingField;
    [CompilerGeneratedAttribute]
private int <MaxForwardCount>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ClientDropTimeout>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ClientRegistrationRefresh>k__BackingField;
    public static TimeSpan DEFAULT_CLIENT_REGISTRATION_REFRESH;
    [CompilerGeneratedAttribute]
private TimeSpan <ClientGatewayShutdownNotificationTimeout>k__BackingField;
    public static TimeSpan DEFAULT_CLIENT_GW_NOTIFICATION_TIMEOUT;
    [CompilerGeneratedAttribute]
private int <MaxEnqueuedRequestsSoftLimit>k__BackingField;
    public static int DEFAULT_MAX_ENQUEUED_REQUESTS_SOFT_LIMIT;
    [CompilerGeneratedAttribute]
private int <MaxEnqueuedRequestsHardLimit>k__BackingField;
    public static int DEFAULT_MAX_ENQUEUED_REQUESTS_HARD_LIMIT;
    [CompilerGeneratedAttribute]
private int <MaxEnqueuedRequestsSoftLimit_StatelessWorker>k__BackingField;
    public static int DEFAULT_MAX_ENQUEUED_REQUESTS_STATELESS_WORKER_SOFT_LIMIT;
    [CompilerGeneratedAttribute]
private int <MaxEnqueuedRequestsHardLimit_StatelessWorker>k__BackingField;
    public static int DEFAULT_MAX_ENQUEUED_REQUESTS_STATELESS_WORKER_HARD_LIMIT;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxRequestProcessingTime>k__BackingField;
    public static TimeSpan DEFAULT_MAX_REQUEST_PROCESSING_TIME;
    [CompilerGeneratedAttribute]
private bool <AssumeHomogenousSilosForTesting>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <ShutdownRerouteTimeout>k__BackingField;
    public static TimeSpan DEFAULT_SHUTDOWN_REROUTE_TIMEOUT;
    [CompilerGeneratedAttribute]
private TimeSpan <GrainWorkloadAnalysisPeriod>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RequestProcessingWarningTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <RequestQueueDelayWarningTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <WaitForMessageToBeQueuedForOutboundTime>k__BackingField;
    public static TimeSpan DEFAULT_WAIT_FOR_MESSAGE_TO_BE_QUEUED_FOR_OUTBOUND_TIME;
    public int SiloSenderQueues { get; public set; }
    public int GatewaySenderQueues { get; public set; }
    public int MaxForwardCount { get; public set; }
    public TimeSpan ClientDropTimeout { get; public set; }
    public TimeSpan ClientRegistrationRefresh { get; public set; }
    public TimeSpan ClientGatewayShutdownNotificationTimeout { get; public set; }
    public int MaxEnqueuedRequestsSoftLimit { get; public set; }
    public int MaxEnqueuedRequestsHardLimit { get; public set; }
    public int MaxEnqueuedRequestsSoftLimit_StatelessWorker { get; public set; }
    public int MaxEnqueuedRequestsHardLimit_StatelessWorker { get; public set; }
    public TimeSpan MaxRequestProcessingTime { get; public set; }
    public bool AssumeHomogenousSilosForTesting { get; public set; }
    public TimeSpan ShutdownRerouteTimeout { get; public set; }
    public TimeSpan SystemResponseTimeout { get; public set; }
    public TimeSpan GrainWorkloadAnalysisPeriod { get; public set; }
    public TimeSpan RequestProcessingWarningTime { get; public set; }
    public TimeSpan RequestQueueDelayWarningTime { get; public set; }
    public TimeSpan WaitForMessageToBeQueuedForOutboundTime { get; public set; }
    private static SiloMessagingOptions();
    [CompilerGeneratedAttribute]
public int get_SiloSenderQueues();
    [CompilerGeneratedAttribute]
public void set_SiloSenderQueues(int value);
    [CompilerGeneratedAttribute]
public int get_GatewaySenderQueues();
    [CompilerGeneratedAttribute]
public void set_GatewaySenderQueues(int value);
    [CompilerGeneratedAttribute]
public int get_MaxForwardCount();
    [CompilerGeneratedAttribute]
public void set_MaxForwardCount(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ClientDropTimeout();
    [CompilerGeneratedAttribute]
public void set_ClientDropTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ClientRegistrationRefresh();
    [CompilerGeneratedAttribute]
public void set_ClientRegistrationRefresh(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ClientGatewayShutdownNotificationTimeout();
    [CompilerGeneratedAttribute]
public void set_ClientGatewayShutdownNotificationTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public int get_MaxEnqueuedRequestsSoftLimit();
    [CompilerGeneratedAttribute]
public void set_MaxEnqueuedRequestsSoftLimit(int value);
    [CompilerGeneratedAttribute]
public int get_MaxEnqueuedRequestsHardLimit();
    [CompilerGeneratedAttribute]
public void set_MaxEnqueuedRequestsHardLimit(int value);
    [CompilerGeneratedAttribute]
public int get_MaxEnqueuedRequestsSoftLimit_StatelessWorker();
    [CompilerGeneratedAttribute]
public void set_MaxEnqueuedRequestsSoftLimit_StatelessWorker(int value);
    [CompilerGeneratedAttribute]
public int get_MaxEnqueuedRequestsHardLimit_StatelessWorker();
    [CompilerGeneratedAttribute]
public void set_MaxEnqueuedRequestsHardLimit_StatelessWorker(int value);
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxRequestProcessingTime();
    [CompilerGeneratedAttribute]
public void set_MaxRequestProcessingTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public bool get_AssumeHomogenousSilosForTesting();
    [CompilerGeneratedAttribute]
public void set_AssumeHomogenousSilosForTesting(bool value);
    [CompilerGeneratedAttribute]
public TimeSpan get_ShutdownRerouteTimeout();
    [CompilerGeneratedAttribute]
public void set_ShutdownRerouteTimeout(TimeSpan value);
    public TimeSpan get_SystemResponseTimeout();
    public void set_SystemResponseTimeout(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_GrainWorkloadAnalysisPeriod();
    [CompilerGeneratedAttribute]
public void set_GrainWorkloadAnalysisPeriod(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_RequestProcessingWarningTime();
    [CompilerGeneratedAttribute]
public void set_RequestProcessingWarningTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_RequestQueueDelayWarningTime();
    [CompilerGeneratedAttribute]
public void set_RequestQueueDelayWarningTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public TimeSpan get_WaitForMessageToBeQueuedForOutboundTime();
    [CompilerGeneratedAttribute]
public void set_WaitForMessageToBeQueuedForOutboundTime(TimeSpan value);
}
public class Orleans.Configuration.SiloOptions : object {
    [CompilerGeneratedAttribute]
private string <SiloName>k__BackingField;
    public string SiloName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SiloName();
    [CompilerGeneratedAttribute]
public void set_SiloName(string value);
}
public class Orleans.Core.StateStorageBridge`1 : object {
    private string name;
    private GrainReference grainRef;
    private IGrainStorage store;
    private GrainState`1<TState> grainState;
    private ILogger logger;
    public TState State { get; public set; }
    public string Etag { get; }
    public bool RecordExists { get; }
    public StateStorageBridge`1(string name, GrainReference grainRef, IGrainStorage store, ILoggerFactory loggerFactory);
    public sealed virtual TState get_State();
    public sealed virtual void set_State(TState value);
    public sealed virtual string get_Etag();
    public sealed virtual bool get_RecordExists();
    [AsyncStateMachineAttribute("Orleans.Core.StateStorageBridge`1/<ReadStateAsync>d__13")]
public sealed virtual Task ReadStateAsync();
    [AsyncStateMachineAttribute("Orleans.Core.StateStorageBridge`1/<WriteStateAsync>d__14")]
public sealed virtual Task WriteStateAsync();
    [AsyncStateMachineAttribute("Orleans.Core.StateStorageBridge`1/<ClearStateAsync>d__15")]
public sealed virtual Task ClearStateAsync();
    private string MakeErrorMsg(string what, Exception exc);
}
[ExtensionAttribute]
public static class Orleans.Hosting.CoreHostingExtensions : object {
    [ExtensionAttribute]
public static ISiloBuilder AddActivityPropagation(ISiloBuilder builder);
    [ExtensionAttribute]
public static ISiloBuilder UseLocalhostClustering(ISiloBuilder builder, int siloPort, int gatewayPort, IPEndPoint primarySiloEndpoint, string serviceId, string clusterId);
    [ExtensionAttribute]
public static ISiloBuilder UseDevelopmentClustering(ISiloBuilder builder, IPEndPoint primarySiloEndpoint);
    [ExtensionAttribute]
public static ISiloBuilder UseDevelopmentClustering(ISiloBuilder builder, Action`1<DevelopmentClusterMembershipOptions> configureOptions);
    [ExtensionAttribute]
public static ISiloBuilder UseDevelopmentClustering(ISiloBuilder builder, Action`1<OptionsBuilder`1<DevelopmentClusterMembershipOptions>> configureOptions);
    private static void ConfigurePrimarySiloEndpoint(OptionsBuilder`1<DevelopmentClusterMembershipOptions> optionsBuilder, IPEndPoint primarySiloEndpoint);
}
internal static class Orleans.Hosting.DefaultSiloServices : object {
    private static ServiceDescriptor ServiceDescriptor;
    private static DefaultSiloServices();
    internal static void AddDefaultServices(IServiceCollection services);
}
[ExtensionAttribute]
public static class Orleans.Hosting.EndpointOptionsExtensions : object {
    [ExtensionAttribute]
public static ISiloBuilder ConfigureEndpoints(ISiloBuilder builder, IPAddress advertisedIP, int siloPort, int gatewayPort, bool listenOnAnyHostAddress);
    [ExtensionAttribute]
public static ISiloBuilder ConfigureEndpoints(ISiloBuilder builder, string hostname, int siloPort, int gatewayPort, AddressFamily addressFamily, bool listenOnAnyHostAddress);
    [ExtensionAttribute]
public static ISiloBuilder ConfigureEndpoints(ISiloBuilder builder, int siloPort, int gatewayPort, AddressFamily addressFamily, bool listenOnAnyHostAddress);
    [ExtensionAttribute]
internal static IPEndPoint GetPublicSiloEndpoint(EndpointOptions options);
    [ExtensionAttribute]
internal static IPEndPoint GetPublicProxyEndpoint(EndpointOptions options);
    [ExtensionAttribute]
internal static IPEndPoint GetListeningSiloEndpoint(EndpointOptions options);
    [ExtensionAttribute]
internal static IPEndPoint GetListeningProxyEndpoint(EndpointOptions options);
}
[ExtensionAttribute]
public static class Orleans.Hosting.GrainCallFilterSiloBuilderExtensions : object {
    [ExtensionAttribute]
public static ISiloBuilder AddIncomingGrainCallFilter(ISiloBuilder builder, IIncomingGrainCallFilter filter);
    [ExtensionAttribute]
public static ISiloBuilder AddIncomingGrainCallFilter(ISiloBuilder builder);
    [ExtensionAttribute]
public static ISiloBuilder AddIncomingGrainCallFilter(ISiloBuilder builder, IncomingGrainCallFilterDelegate filter);
    [ExtensionAttribute]
public static ISiloBuilder AddOutgoingGrainCallFilter(ISiloBuilder builder, IOutgoingGrainCallFilter filter);
    [ExtensionAttribute]
public static ISiloBuilder AddOutgoingGrainCallFilter(ISiloBuilder builder);
    [ExtensionAttribute]
public static ISiloBuilder AddOutgoingGrainCallFilter(ISiloBuilder builder, OutgoingGrainCallFilterDelegate filter);
}
[ExtensionAttribute]
public static class Orleans.Hosting.GrainServicesSiloBuilderExtensions : object {
    [ExtensionAttribute]
public static ISiloBuilder AddGrainService(ISiloBuilder builder);
    private static IGrainService GrainServiceFactory(Type serviceType, IServiceProvider services);
    [ExtensionAttribute]
public static IServiceCollection AddGrainService(IServiceCollection services);
    [ExtensionAttribute]
public static IServiceCollection AddGrainService(IServiceCollection services, Type grainServiceType);
}
[ExtensionAttribute]
public static class Orleans.Hosting.HostingGrainExtensions : object {
    [ExtensionAttribute]
public static ISiloBuilder AddGrainExtension(ISiloBuilder builder);
}
public interface Orleans.Hosting.ISiloBuilder {
    public IServiceCollection Services { get; }
    public abstract virtual IServiceCollection get_Services();
}
[ExtensionAttribute]
public static class Orleans.Hosting.PlacementStrategyExtensions : object {
    [ExtensionAttribute]
public static ISiloBuilder AddPlacementDirector(ISiloBuilder builder);
    [ExtensionAttribute]
public static ISiloBuilder AddPlacementDirector(ISiloBuilder builder, Func`2<IServiceProvider, IPlacementDirector> createDirector);
    [ExtensionAttribute]
internal static void AddPlacementDirector(IServiceCollection services);
    [ExtensionAttribute]
private static void AddPlacementDirector(IServiceCollection services, Func`2<IServiceProvider, IPlacementDirector> createDirector);
}
internal class Orleans.Hosting.SiloBuilder : object {
    [CompilerGeneratedAttribute]
private IServiceCollection <Services>k__BackingField;
    public IServiceCollection Services { get; }
    public SiloBuilder(IServiceCollection services);
    [CompilerGeneratedAttribute]
public sealed virtual IServiceCollection get_Services();
}
[ExtensionAttribute]
public static class Orleans.Hosting.SiloBuilderExtensions : object {
    [ExtensionAttribute]
public static ISiloBuilder ConfigureServices(ISiloBuilder builder, Action`1<IServiceCollection> configureDelegate);
    [ExtensionAttribute]
public static ISiloBuilder Configure(ISiloBuilder builder, Action`1<TOptions> configureOptions);
    [ExtensionAttribute]
public static ISiloBuilder Configure(ISiloBuilder builder, IConfiguration configuration);
    [ExtensionAttribute]
public static ISiloBuilder ConfigureLogging(ISiloBuilder builder, Action`1<ILoggingBuilder> configureLogging);
}
[ExtensionAttribute]
public static class Orleans.Hosting.SiloBuilderStartupExtensions : object {
    [ExtensionAttribute]
public static ISiloBuilder AddStartupTask(ISiloBuilder builder, int stage);
    [ExtensionAttribute]
public static ISiloBuilder AddStartupTask(ISiloBuilder builder, IStartupTask startupTask, int stage);
    [ExtensionAttribute]
public static ISiloBuilder AddStartupTask(ISiloBuilder builder, Func`3<IServiceProvider, CancellationToken, Task> startupTask, int stage);
}
internal class Orleans.Hosting.SiloHostedService : object {
    private ILogger logger;
    private Silo silo;
    public SiloHostedService(Silo silo, IEnumerable`1<IConfigurationValidator> configurationValidators, ILogger`1<SiloHostedService> logger);
    [AsyncStateMachineAttribute("Orleans.Hosting.SiloHostedService/<StartAsync>d__3")]
public sealed virtual Task StartAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Orleans.Hosting.SiloHostedService/<StopAsync>d__4")]
public sealed virtual Task StopAsync(CancellationToken cancellationToken);
    private void ValidateSystemConfiguration(IEnumerable`1<IConfigurationValidator> configurationValidators);
}
public interface Orleans.IFacetMetadata {
}
public class Orleans.Metadata.GrainClassMap : object {
    private TypeConverter _typeConverter;
    private ImmutableDictionary`2<GrainType, Type> _types;
    public GrainClassMap(TypeConverter typeConverter, ImmutableDictionary`2<GrainType, Type> classes);
    public bool TryGetGrainClass(GrainType grainType, Type& grainClass);
}
internal class Orleans.Metadata.SiloManifestProvider : object {
    [CompilerGeneratedAttribute]
private GrainManifest <SiloManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private GrainClassMap <GrainTypeMap>k__BackingField;
    public GrainManifest SiloManifest { get; }
    public GrainClassMap GrainTypeMap { get; }
    public SiloManifestProvider(IEnumerable`1<IGrainPropertiesProvider> grainPropertiesProviders, IEnumerable`1<IGrainInterfacePropertiesProvider> grainInterfacePropertiesProviders, IOptions`1<GrainTypeOptions> grainTypeOptions, GrainTypeResolver typeProvider, GrainInterfaceTypeResolver interfaceIdProvider, TypeConverter typeConverter);
    [CompilerGeneratedAttribute]
public GrainManifest get_SiloManifest();
    [CompilerGeneratedAttribute]
public GrainClassMap get_GrainTypeMap();
    private static ImmutableDictionary`2<GrainInterfaceType, GrainInterfaceProperties> CreateInterfaceManifest(IEnumerable`1<IGrainInterfacePropertiesProvider> propertyProviders, IOptions`1<GrainTypeOptions> grainTypeOptions, GrainInterfaceTypeResolver grainInterfaceIdProvider);
    private static ValueTuple`2<ImmutableDictionary`2<GrainType, GrainProperties>, ImmutableDictionary`2<GrainType, Type>> CreateGrainManifest(IEnumerable`1<IGrainPropertiesProvider> grainMetadataProviders, IOptions`1<GrainTypeOptions> grainTypeOptions, GrainTypeResolver grainTypeProvider);
}
public class Orleans.PersistentStateAttributeMapper : object {
    private static MethodInfo create;
    private static PersistentStateAttributeMapper();
    public sealed virtual Factory`2<IGrainContext, object> GetFactory(ParameterInfo parameter, PersistentStateAttribute attribute);
    private object Create(IGrainContext context, MethodInfo genericCreate, IPersistentStateConfiguration config);
}
internal class Orleans.Runtime.ActivationCollector : object {
    internal Action`1<GrainId> Debug_OnDecideToCollectActivation;
    private TimeSpan quantum;
    private TimeSpan shortestAgeLimit;
    private ConcurrentDictionary`2<DateTime, Bucket> buckets;
    private DateTime nextTicket;
    private static List`1<ICollectibleGrainContext> nothing;
    private ILogger logger;
    private IAsyncTimer _collectionTimer;
    private Task _collectionLoopTask;
    private int collectionNumber;
    private int _activationCount;
    private IOptions`1<GrainCollectionOptions> _options;
    public ActivationCollector(IAsyncTimerFactory timerFactory, IOptions`1<GrainCollectionOptions> options, ILogger`1<ActivationCollector> logger);
    private static ActivationCollector();
    public int GetNumRecentlyUsed(TimeSpan recencyPeriod);
    public Task CollectActivations(TimeSpan ageLimit);
    public void ScheduleCollection(ICollectibleGrainContext item, TimeSpan timeout);
    public bool TryCancelCollection(ICollectibleGrainContext item);
    public bool TryRescheduleCollection(ICollectibleGrainContext item);
    private bool TryRescheduleCollection_Impl(ICollectibleGrainContext item, TimeSpan timeout);
    private bool DequeueQuantum(List`1& items, DateTime now);
    public virtual string ToString();
    public List`1<ICollectibleGrainContext> ScanStale();
    public List`1<ICollectibleGrainContext> ScanAll(TimeSpan ageLimit);
    private static DeactivationReason GetDeactivationReason();
    private void AddActivationToList(ICollectibleGrainContext activation, List`1& condemned);
    private void ThrowIfTicketIsInvalid(DateTime ticket);
    private bool IsExpired(DateTime ticket);
    private DateTime MakeTicketFromDateTime(DateTime timestamp);
    private DateTime MakeTicketFromTimeSpan(TimeSpan timeout);
    private void Add(ICollectibleGrainContext item, DateTime ticket);
    private sealed virtual override void Orleans.Runtime.IActivationWorkingSetObserver.OnAdded(IActivationWorkingSetMember member);
    private sealed virtual override void Orleans.Runtime.IActivationWorkingSetObserver.OnActive(IActivationWorkingSetMember member);
    private sealed virtual override void Orleans.Runtime.IActivationWorkingSetObserver.OnEvicted(IActivationWorkingSetMember member);
    private sealed virtual override void Orleans.Runtime.IActivationWorkingSetObserver.OnDeactivating(IActivationWorkingSetMember member);
    private sealed virtual override void Orleans.Runtime.IActivationWorkingSetObserver.OnDeactivated(IActivationWorkingSetMember member);
    private Task Start(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Orleans.Runtime.ActivationCollector/<Stop>d__36")]
private Task Stop(CancellationToken cancellationToken);
    private sealed virtual override void Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate(ISiloLifecycle lifecycle);
    [AsyncStateMachineAttribute("Orleans.Runtime.ActivationCollector/<RunActivationCollectionLoop>d__38")]
private Task RunActivationCollectionLoop();
    [AsyncStateMachineAttribute("Orleans.Runtime.ActivationCollector/<CollectActivationsImpl>d__39")]
private Task CollectActivationsImpl(bool scanStale, TimeSpan ageLimit);
    [AsyncStateMachineAttribute("Orleans.Runtime.ActivationCollector/<DeactivateActivationsFromCollector>d__40")]
private Task DeactivateActivationsFromCollector(List`1<ICollectibleGrainContext> list);
    public sealed virtual bool CheckHealth(DateTime lastCheckTime, String& reason);
    [AsyncStateMachineAttribute("Orleans.Runtime.ActivationCollector/<<Orleans-ILifecycleParticipant<Orleans-Runtime-ISiloLifecycle>-Participate>b__37_0>d")]
[CompilerGeneratedAttribute]
private Task <Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate>b__37_0(CancellationToken cancellation);
    [AsyncStateMachineAttribute("Orleans.Runtime.ActivationCollector/<<Orleans-ILifecycleParticipant<Orleans-Runtime-ISiloLifecycle>-Participate>b__37_1>d")]
[CompilerGeneratedAttribute]
private Task <Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate>b__37_1(CancellationToken cancellation);
}
internal class Orleans.Runtime.ActivationData : object {
    private GrainTypeSharedContext _shared;
    private IServiceScope serviceScope;
    private WorkItemGroup _workItemGroup;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private List`1<ValueTuple`2<Message, CoarseStopwatch>> _waitingRequests;
    private Dictionary`2<Message, CoarseStopwatch> _runningRequests;
    private SingleWaiterAutoResetEvent _workSignal;
    private GrainLifecycle lifecycle;
    private List`1<object> _pendingOperations;
    private Message _blockingRequest;
    private Dictionary`2<Type, object> _components;
    private bool isInWorkingSet;
    private CoarseStopwatch _busyDuration;
    private CoarseStopwatch _idleDuration;
    private GrainReference _selfReference;
    private ActivationDataExtra _extras;
    private Task _messageLoopTask;
    [CompilerGeneratedAttribute]
private object <GrainInstance>k__BackingField;
    [CompilerGeneratedAttribute]
private GrainAddress <Address>k__BackingField;
    [CompilerGeneratedAttribute]
private ActivationState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CollectionTicket>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <KeepAliveUntil>k__BackingField;
    public IGrainRuntime GrainRuntime { get; }
    public object GrainInstance { get; private set; }
    public GrainAddress Address { get; }
    public GrainReference GrainReference { get; }
    public ActivationState State { get; private set; }
    public PlacementStrategy PlacementStrategy { get; }
    public DateTime CollectionTicket { get; public set; }
    public IServiceProvider ActivationServices { get; }
    public ActivationId ActivationId { get; }
    public IServiceProvider ServiceProvider { get; }
    public IGrainLifecycle ObservableLifecycle { get; }
    internal ILifecycleObserver Lifecycle { get; }
    public GrainId GrainId { get; }
    public bool IsExemptFromCollection { get; }
    public DateTime KeepAliveUntil { get; public set; }
    public bool IsValid { get; }
    internal bool IsStatelessWorker { get; }
    internal bool IsUsingGrainDirectory { get; }
    public int WaitingCount { get; }
    public bool IsInactive { get; }
    public bool IsCurrentlyExecuting { get; }
    public IWorkItemScheduler Scheduler { get; }
    public Task Deactivated { get; }
    public GrainAddress ForwardingAddress { get; public set; }
    private Exception DeactivationException { get; }
    private DeactivationReason DeactivationReason { get; private set; }
    private HashSet`1<IGrainTimer> Timers { get; private set; }
    private Nullable`1<DateTime> DeactivationStartTime { get; private set; }
    private bool IsStuckDeactivating { get; private set; }
    private bool IsStuckProcessingMessage { get; private set; }
    public TimeSpan CollectionAgeLimit { get; }
    public ActivationData(GrainAddress addr, Func`2<IGrainContext, WorkItemGroup> createWorkItemGroup, IServiceProvider applicationServices, GrainTypeSharedContext shared);
    public IGrainRuntime get_GrainRuntime();
    [CompilerGeneratedAttribute]
public sealed virtual object get_GrainInstance();
    [CompilerGeneratedAttribute]
private void set_GrainInstance(object value);
    [CompilerGeneratedAttribute]
public sealed virtual GrainAddress get_Address();
    public sealed virtual GrainReference get_GrainReference();
    [CompilerGeneratedAttribute]
public ActivationState get_State();
    [CompilerGeneratedAttribute]
private void set_State(ActivationState value);
    public PlacementStrategy get_PlacementStrategy();
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_CollectionTicket();
    [CompilerGeneratedAttribute]
public sealed virtual void set_CollectionTicket(DateTime value);
    public sealed virtual IServiceProvider get_ActivationServices();
    public sealed virtual ActivationId get_ActivationId();
    public IServiceProvider get_ServiceProvider();
    public sealed virtual IGrainLifecycle get_ObservableLifecycle();
    internal ILifecycleObserver get_Lifecycle();
    public sealed virtual GrainId get_GrainId();
    public sealed virtual bool get_IsExemptFromCollection();
    [CompilerGeneratedAttribute]
public sealed virtual DateTime get_KeepAliveUntil();
    [CompilerGeneratedAttribute]
public void set_KeepAliveUntil(DateTime value);
    public sealed virtual bool get_IsValid();
    internal bool get_IsStatelessWorker();
    internal bool get_IsUsingGrainDirectory();
    public int get_WaitingCount();
    public sealed virtual bool get_IsInactive();
    public bool get_IsCurrentlyExecuting();
    public sealed virtual IWorkItemScheduler get_Scheduler();
    public sealed virtual Task get_Deactivated();
    public GrainAddress get_ForwardingAddress();
    public void set_ForwardingAddress(GrainAddress value);
    private Exception get_DeactivationException();
    private DeactivationReason get_DeactivationReason();
    private void set_DeactivationReason(DeactivationReason value);
    private HashSet`1<IGrainTimer> get_Timers();
    private void set_Timers(HashSet`1<IGrainTimer> value);
    private Nullable`1<DateTime> get_DeactivationStartTime();
    private void set_DeactivationStartTime(Nullable`1<DateTime> value);
    private bool get_IsStuckDeactivating();
    private void set_IsStuckDeactivating(bool value);
    private bool get_IsStuckProcessingMessage();
    private void set_IsStuckProcessingMessage(bool value);
    public sealed virtual TimeSpan get_CollectionAgeLimit();
    public sealed virtual TTarget GetTarget();
    private sealed virtual override TComponent Orleans.Serialization.Invocation.ITargetHolder.GetComponent();
    public TComponent GetComponent();
    public sealed virtual void SetComponent(TComponent instance);
    internal void SetGrainInstance(object grainInstance);
    public void SetState(ActivationState state);
    public LimitExceededException CheckOverloaded();
    internal int GetRequestCount();
    internal List`1<Message> DequeueAllWaitingRequests();
    public sealed virtual TimeSpan GetIdleness();
    public sealed virtual bool IsStale();
    public sealed virtual void DelayDeactivation(TimeSpan timespan);
    public void ResetKeepAliveRequest();
    private void ScheduleOperation(object operation);
    public sealed virtual void Deactivate(DeactivationReason reason, Nullable`1<CancellationToken> token);
    private void DeactivateStuckActivation();
    private sealed virtual override void Orleans.Runtime.IGrainTimerRegistry.OnTimerCreated(IGrainTimer timer);
    private sealed virtual override void Orleans.Runtime.IGrainTimerRegistry.OnTimerDisposed(IGrainTimer orleansTimerInsideGrain);
    private void StopAllTimers();
    private Task WaitForAllTimersToFinish(CancellationToken cancellationToken);
    public void AnalyzeWorkload(DateTime now, IMessageCenter messageCenter, MessageFactory messageFactory, SiloMessagingOptions options);
    public virtual string ToString();
    internal string ToDetailedString(bool includeExtraDetails);
    private string GetActivationInfoString();
    [AsyncStateMachineAttribute("Orleans.Runtime.ActivationData/<DisposeAsync>d__118")]
public sealed virtual ValueTask DisposeAsync();
    private sealed virtual override bool System.IEquatable<Orleans.Runtime.IGrainContext>.Equals(IGrainContext other);
    public sealed virtual ValueTuple`2<TExtension, TExtensionInterface> GetOrSetExtension(Func`1<TExtension> newExtensionFunc);
    public sealed virtual TExtensionInterface GetExtension();
    private sealed virtual override bool Orleans.Runtime.IActivationWorkingSetMember.IsCandidateForRemoval(bool wouldRemove);
    [AsyncStateMachineAttribute("Orleans.Runtime.ActivationData/<RunMessageLoop>d__123")]
private Task RunMessageLoop();
    private void InvokeIncomingRequest(Message message);
    private void OnCompletedRequest(Message message);
    public sealed virtual void ReceiveMessage(object message);
    public void ReceiveMessage(Message message);
    private void ReceiveResponse(Message message);
    private void ReceiveRequest(Message message);
    private void RejectAllQueuedMessages();
    private void RerouteAllQueuedMessages();
    public sealed virtual void Activate(Dictionary`2<string, object> requestContext, Nullable`1<CancellationToken> cancellationToken);
    [AsyncStateMachineAttribute("Orleans.Runtime.ActivationData/<ActivateAsync>d__133")]
private Task ActivateAsync(Dictionary`2<string, object> requestContextData, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Orleans.Runtime.ActivationData/<RegisterActivationInGrainDirectoryAndValidate>d__134")]
private ValueTask`1<bool> RegisterActivationInGrainDirectoryAndValidate();
    public void StartDeactivating(DeactivationReason reason);
    [AsyncStateMachineAttribute("Orleans.Runtime.ActivationData/<FinishDeactivating>d__136")]
private Task FinishDeactivating(CancellationToken cancellationToken);
    private TaskCompletionSource`1<bool> GetDeactivationCompletionSource();
    private sealed virtual override Task Orleans.Runtime.IGrainManagementExtension.DeactivateOnIdle();
    private void UnregisterMessageTarget();
    [CompilerGeneratedAttribute]
private void <AnalyzeWorkload>g__GetStatusList|114_0(List`1& diagnostics);
    [CompilerGeneratedAttribute]
private void <RunMessageLoop>g__ProcessPendingRequests|123_0();
    [CompilerGeneratedAttribute]
private void <RunMessageLoop>g__RecordRunning|123_1(Message message, bool isInterleavable);
    [CompilerGeneratedAttribute]
private void <RunMessageLoop>g__ProcessRequestsToInvalidActivation|123_2();
    [CompilerGeneratedAttribute]
private bool <RunMessageLoop>g__MayInvokeRequest|123_3(Message incoming);
    [AsyncStateMachineAttribute("Orleans.Runtime.ActivationData/<<RunMessageLoop>g__ProcessOperationsAsync|123_4>d")]
[CompilerGeneratedAttribute]
private Task <RunMessageLoop>g__ProcessOperationsAsync|123_4(List`1<object> operations);
    [AsyncStateMachineAttribute("Orleans.Runtime.ActivationData/<<InvokeIncomingRequest>g__OnCompleteAsync|124_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask <InvokeIncomingRequest>g__OnCompleteAsync|124_0(ActivationData activation, Message message, Task task);
    [AsyncStateMachineAttribute("Orleans.Runtime.ActivationData/<<ActivateAsync>g__CallActivateAsync|133_0>d")]
[CompilerGeneratedAttribute]
private Task`1<bool> <ActivateAsync>g__CallActivateAsync|133_0(Dictionary`2<string, object> requestContextData, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Orleans.Runtime.ActivationData/<<FinishDeactivating>g__CallGrainDeactivate|136_0>d")]
[CompilerGeneratedAttribute]
private Task <FinishDeactivating>g__CallGrainDeactivate|136_0(CancellationToken ct);
}
internal class Orleans.Runtime.ActivationDataActivatorProvider : object {
    private IServiceProvider _serviceProvider;
    private IActivationWorkingSet _activationWorkingSet;
    private ILogger`1<WorkItemGroup> _workItemGroupLogger;
    private ILogger`1<ActivationTaskScheduler> _activationTaskSchedulerLogger;
    private IOptions`1<SchedulingOptions> _schedulingOptions;
    private GrainTypeSharedContextResolver _sharedComponentsResolver;
    private GrainClassMap _grainClassMap;
    private ILoggerFactory _loggerFactory;
    private GrainReferenceActivator _grainReferenceActivator;
    public ActivationDataActivatorProvider(GrainClassMap grainClassMap, IServiceProvider serviceProvider, ILoggerFactory loggerFactory, GrainReferenceActivator grainReferenceActivator, GrainTypeSharedContextResolver sharedComponentsResolver, IActivationWorkingSet activationWorkingSet, ILogger`1<WorkItemGroup> workItemGroupLogger, ILogger`1<ActivationTaskScheduler> activationTaskSchedulerLogger, IOptions`1<SchedulingOptions> schedulingOptions);
    public sealed virtual bool TryGet(GrainType grainType, IGrainContextActivator& activator);
}
internal class Orleans.Runtime.ActivationDirectory : object {
    private ConcurrentDictionary`2<GrainId, IGrainContext> activations;
    private ConcurrentDictionary`2<GrainId, SystemTarget> systemTargets;
    public int Count { get; }
    public int get_Count();
    public IEnumerable`1<SystemTarget> AllSystemTargets();
    public IGrainContext FindTarget(GrainId key);
    public SystemTarget FindSystemTarget(GrainId key);
    public void RecordNewTarget(IGrainContext target);
    public void RecordNewSystemTarget(SystemTarget target);
    public void RemoveSystemTarget(SystemTarget target);
    public void RemoveTarget(IGrainContext target);
    private bool TryRemove(GrainId grainId, IGrainContext target);
    public void ForEachGrainId(Action`2<T, GrainId> func, T context);
    public sealed virtual IEnumerator`1<KeyValuePair`2<GrainId, IGrainContext>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
internal enum Orleans.Runtime.ActivationState : Enum {
    public int value__;
    public static ActivationState Create;
    public static ActivationState Activating;
    public static ActivationState Valid;
    public static ActivationState Deactivating;
    public static ActivationState Invalid;
    public static ActivationState FailedToActivate;
}
internal class Orleans.Runtime.ActivationWorkingSet : object {
    private ConcurrentDictionary`2<IActivationWorkingSetMember, MemberState> _members;
    private ILogger _logger;
    private IAsyncTimer _scanPeriodTimer;
    private List`1<IActivationWorkingSetObserver> _observers;
    private int _activeCount;
    private Task _runTask;
    public int Count { get; }
    public ActivationWorkingSet(IAsyncTimerFactory asyncTimerFactory, ILogger`1<ActivationWorkingSet> logger, IEnumerable`1<IActivationWorkingSetObserver> observers);
    public sealed virtual int get_Count();
    public sealed virtual void OnActivated(IActivationWorkingSetMember member);
    public sealed virtual void OnActive(IActivationWorkingSetMember member);
    public void OnEvicted(IActivationWorkingSetMember member);
    public sealed virtual void OnDeactivating(IActivationWorkingSetMember member);
    public sealed virtual void OnDeactivated(IActivationWorkingSetMember member);
    private void VisitMember(IActivationWorkingSetMember member, MemberState state);
    [AsyncStateMachineAttribute("Orleans.Runtime.ActivationWorkingSet/<MonitorWorkingSet>d__16")]
private Task MonitorWorkingSet();
    private sealed virtual override void Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate(ISiloLifecycle lifecycle);
    [CompilerGeneratedAttribute]
private Task <Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate>b__17_0(CancellationToken ct);
    [AsyncStateMachineAttribute("Orleans.Runtime.ActivationWorkingSet/<<Orleans-ILifecycleParticipant<Orleans-Runtime-ISiloLifecycle>-Participate>b__17_1>d")]
[CompilerGeneratedAttribute]
private Task <Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate>b__17_1(CancellationToken ct);
}
internal class Orleans.Runtime.AsyncTimer : object {
    private static TimeSpan TimerDelaySlack;
    private CancellationTokenSource cancellation;
    private TimeSpan period;
    private string name;
    private ILogger log;
    private DateTime lastFired;
    private Nullable`1<DateTime> expected;
    public AsyncTimer(TimeSpan period, string name, ILogger log);
    private static AsyncTimer();
    [AsyncStateMachineAttribute("Orleans.Runtime.AsyncTimer/<NextTick>d__8")]
public sealed virtual Task`1<bool> NextTick(Nullable`1<TimeSpan> overrideDelay);
    private static TimeSpan GetOvershootDelay(DateTime now, DateTime dueTime);
    public sealed virtual bool CheckHealth(DateTime lastCheckTime, String& reason);
    public sealed virtual void Dispose();
}
internal class Orleans.Runtime.AsyncTimerFactory : object {
    private ILoggerFactory loggerFactory;
    public AsyncTimerFactory(ILoggerFactory loggerFactory);
    public sealed virtual IAsyncTimer Create(TimeSpan period, string name);
}
internal class Orleans.Runtime.CancellationSourcesExtension : object {
    private ConcurrentDictionary`2<Guid, Entry> _cancellationTokens;
    private ILogger _logger;
    private IGrainCancellationTokenRuntime _cancellationTokenRuntime;
    private Timer _cleanupTimer;
    private Func`2<Guid, Entry> _createToken;
    private static TimeSpan _cleanupFrequency;
    public CancellationSourcesExtension(ILoggerFactory loggerFactory, IGrainCancellationTokenRuntime cancellationRuntime);
    private static CancellationSourcesExtension();
    public sealed virtual Task CancelRemoteToken(Guid tokenId);
    internal static void RegisterCancellationTokens(IGrainContext target, IInvokable request);
    private GrainCancellationToken RecordCancellationToken(Guid tokenId, bool isCancellationRequested);
    private void ExpireTokens();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private Entry <.ctor>b__6_1(Guid id);
}
internal class Orleans.Runtime.Catalog : SystemTarget {
    [CompilerGeneratedAttribute]
private SiloAddress <LocalSilo>k__BackingField;
    [CompilerGeneratedAttribute]
private ISiloStatusOracle <SiloStatusOracle>k__BackingField;
    private ActivationCollector activationCollector;
    private GrainLocator grainLocator;
    private GrainDirectoryResolver grainDirectoryResolver;
    private ILocalGrainDirectory directory;
    private ActivationDirectory activations;
    private IServiceProvider serviceProvider;
    private ILogger logger;
    private string localSiloName;
    private IOptions`1<GrainCollectionOptions> collectionOptions;
    private GrainContextActivator grainActivator;
    private GrainPropertiesResolver grainPropertiesResolver;
    public SiloAddress LocalSilo { get; private set; }
    internal ISiloStatusOracle SiloStatusOracle { get; internal set; }
    public int ActivationCount { get; }
    public SiloStatus LocalSiloStatus { get; }
    public Catalog(ILocalSiloDetails localSiloDetails, GrainLocator grainLocator, GrainDirectoryResolver grainDirectoryResolver, ILocalGrainDirectory grainDirectory, ActivationDirectory activationDirectory, ActivationCollector activationCollector, IServiceProvider serviceProvider, ILoggerFactory loggerFactory, IOptions`1<GrainCollectionOptions> collectionOptions, GrainContextActivator grainActivator, GrainPropertiesResolver grainPropertiesResolver);
    [CompilerGeneratedAttribute]
public SiloAddress get_LocalSilo();
    [CompilerGeneratedAttribute]
private void set_LocalSilo(SiloAddress value);
    [CompilerGeneratedAttribute]
internal ISiloStatusOracle get_SiloStatusOracle();
    [CompilerGeneratedAttribute]
internal void set_SiloStatusOracle(ISiloStatusOracle value);
    public List`1<Tuple`3<GrainId, string, int>> GetGrainStatistics();
    public List`1<DetailedGrainStatistic> GetDetailedGrainStatistics(String[] types);
    public DetailedGrainReport GetDetailedGrainReport(GrainId grain);
    public void RegisterMessageTarget(IGrainContext activation);
    public void UnregisterMessageTarget(IGrainContext activation);
    internal int UnregisterGrainForTesting(GrainId grain);
    public void RegisterSystemTarget(ISystemTarget target);
    public void UnregisterSystemTarget(ISystemTarget target);
    public int get_ActivationCount();
    public IGrainContext GetOrCreateActivation(GrainId& grainId, Dictionary`2<string, object> requestContextData);
    [AsyncStateMachineAttribute("Orleans.Runtime.Catalog/<UnregisterNonExistentActivation>d__31")]
private Task UnregisterNonExistentActivation(GrainAddress address);
    public bool TryGetGrainContext(GrainId grainId, IGrainContext& data);
    [AsyncStateMachineAttribute("Orleans.Runtime.Catalog/<DeactivateActivations>d__33")]
internal Task DeactivateActivations(DeactivationReason reason, List`1<IGrainContext> list);
    internal void StartDeactivatingActivations(DeactivationReason reason, List`1<IGrainContext> list);
    public Task DeactivateAllActivations();
    public SiloStatus get_LocalSiloStatus();
    public sealed virtual Task DeleteActivations(List`1<GrainAddress> addresses, DeactivationReasonCode reasonCode, string reasonText);
    private void OnSiloStatusChange(SiloAddress updatedSilo, SiloStatus status);
    [CompilerGeneratedAttribute]
private int <.ctor>b__19_0();
    [CompilerGeneratedAttribute]
private long <.ctor>b__19_1();
}
internal class Orleans.Runtime.ClusterManifestSystemTarget : SystemTarget {
    private GrainManifest _siloManifest;
    private IClusterManifestProvider _clusterManifestProvider;
    public ClusterManifestSystemTarget(IClusterManifestProvider clusterManifestProvider, ILocalSiloDetails siloDetails, ILoggerFactory loggerFactory);
    public sealed virtual ValueTask`1<ClusterManifest> GetClusterManifest();
    public sealed virtual ValueTask`1<GrainManifest> GetSiloManifest();
}
[GenerateSerializerAttribute]
public class Orleans.Runtime.ClusterMember : object {
    [CompilerGeneratedAttribute]
private SiloAddress <SiloAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private SiloStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [IdAttribute("1")]
public SiloAddress SiloAddress { get; }
    [IdAttribute("2")]
public SiloStatus Status { get; }
    [IdAttribute("3")]
public string Name { get; }
    public ClusterMember(SiloAddress siloAddress, SiloStatus status, string name);
    [CompilerGeneratedAttribute]
public SiloAddress get_SiloAddress();
    [CompilerGeneratedAttribute]
public SiloStatus get_Status();
    [CompilerGeneratedAttribute]
public string get_Name();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ClusterMember other);
    public virtual int GetHashCode();
    public virtual string ToString();
}
internal class Orleans.Runtime.ClusterMembershipService : object {
    private AsyncEnumerable`1<ClusterMembershipSnapshot> updates;
    private MembershipTableManager membershipTableManager;
    private ILogger`1<ClusterMembershipService> log;
    private IFatalErrorHandler fatalErrorHandler;
    private ClusterMembershipSnapshot snapshot;
    public ClusterMembershipSnapshot CurrentSnapshot { get; }
    public IAsyncEnumerable`1<ClusterMembershipSnapshot> MembershipUpdates { get; }
    public ClusterMembershipService(MembershipTableManager membershipTableManager, ILogger`1<ClusterMembershipService> log, IFatalErrorHandler fatalErrorHandler);
    public sealed virtual ClusterMembershipSnapshot get_CurrentSnapshot();
    public sealed virtual IAsyncEnumerable`1<ClusterMembershipSnapshot> get_MembershipUpdates();
    public sealed virtual ValueTask Refresh(MembershipVersion targetVersion);
    [AsyncStateMachineAttribute("Orleans.Runtime.ClusterMembershipService/<TryKill>d__11")]
public sealed virtual Task`1<bool> TryKill(SiloAddress siloAddress);
    [AsyncStateMachineAttribute("Orleans.Runtime.ClusterMembershipService/<ProcessMembershipUpdates>d__12")]
private Task ProcessMembershipUpdates(CancellationToken ct);
    private sealed virtual override void Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate(ISiloLifecycle lifecycle);
    private sealed virtual override void System.IDisposable.Dispose();
    [CompilerGeneratedAttribute]
private void <.ctor>b__5_1(ClusterMembershipSnapshot update);
    [AsyncStateMachineAttribute("Orleans.Runtime.ClusterMembershipService/<<Refresh>g__RefreshAsync|10_0>d")]
[CompilerGeneratedAttribute]
private ValueTask <Refresh>g__RefreshAsync|10_0(MembershipVersion v);
}
[GenerateSerializerAttribute]
public class Orleans.Runtime.ClusterMembershipSnapshot : object {
    [CompilerGeneratedAttribute]
private ImmutableDictionary`2<SiloAddress, ClusterMember> <Members>k__BackingField;
    [CompilerGeneratedAttribute]
private MembershipVersion <Version>k__BackingField;
    [IdAttribute("1")]
public ImmutableDictionary`2<SiloAddress, ClusterMember> Members { get; }
    [IdAttribute("2")]
public MembershipVersion Version { get; }
    public ClusterMembershipSnapshot(ImmutableDictionary`2<SiloAddress, ClusterMember> members, MembershipVersion version);
    [CompilerGeneratedAttribute]
public ImmutableDictionary`2<SiloAddress, ClusterMember> get_Members();
    [CompilerGeneratedAttribute]
public MembershipVersion get_Version();
    public SiloStatus GetSiloStatus(SiloAddress silo);
    public ClusterMembershipUpdate AsUpdate();
    public ClusterMembershipUpdate CreateUpdate(ClusterMembershipSnapshot previous);
    public virtual string ToString();
}
[GenerateSerializerAttribute]
public class Orleans.Runtime.ClusterMembershipUpdate : object {
    [CompilerGeneratedAttribute]
private ImmutableArray`1<ClusterMember> <Changes>k__BackingField;
    [CompilerGeneratedAttribute]
private ClusterMembershipSnapshot <Snapshot>k__BackingField;
    public bool HasChanges { get; }
    [IdAttribute("1")]
public ImmutableArray`1<ClusterMember> Changes { get; }
    [IdAttribute("2")]
public ClusterMembershipSnapshot Snapshot { get; }
    public ClusterMembershipUpdate(ClusterMembershipSnapshot snapshot, ImmutableArray`1<ClusterMember> changes);
    public bool get_HasChanges();
    [CompilerGeneratedAttribute]
public ImmutableArray`1<ClusterMember> get_Changes();
    [CompilerGeneratedAttribute]
public ClusterMembershipSnapshot get_Snapshot();
}
internal class Orleans.Runtime.Configuration.SiloClusteringValidator : object {
    private IServiceProvider serviceProvider;
    public SiloClusteringValidator(IServiceProvider serviceProvider);
    public sealed virtual void ValidateConfiguration();
}
internal class Orleans.Runtime.ConfigureDefaultGrainActivator : object {
    private GrainClassMap _grainClassMap;
    private ConstructorArgumentFactory _constructorArgumentFactory;
    public ConfigureDefaultGrainActivator(GrainClassMap grainClassMap, IServiceProvider serviceProvider);
    public sealed virtual void Configure(GrainType grainType, GrainProperties properties, GrainTypeSharedContext shared);
}
internal class Orleans.Runtime.ConsistentRing.ConsistentRingProvider : object {
    [CompilerGeneratedAttribute]
private SiloAddress <MyAddress>k__BackingField;
    private IRingRange myRange;
    private List`1<SiloAddress> membershipRingList;
    private ILogger log;
    private bool isRunning;
    private int myKey;
    private List`1<IRingRangeListener> statusListeners;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`3<IRingRange, IRingRange, bool> lastNotification;
    internal SiloAddress MyAddress { get; }
    public ConsistentRingProvider(SiloAddress siloAddr, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
internal SiloAddress get_MyAddress();
    public sealed virtual SiloAddress GetPrimaryTargetSilo(UInt32 key);
    public sealed virtual IRingRange GetMyRange();
    private void Start();
    private void Stop();
    internal void AddServer(SiloAddress silo);
    public virtual string ToString();
    internal void RemoveServer(SiloAddress silo);
    public sealed virtual bool SubscribeToRangeChangeEvents(IRingRangeListener observer);
    public sealed virtual bool UnSubscribeFromRangeChangeEvents(IRingRangeListener observer);
    private void NotifyLocalRangeSubscribers(IRingRange old, IRingRange now, bool increased);
    public sealed virtual void SiloStatusChangeNotification(SiloAddress updatedSilo, SiloStatus status);
    private SiloAddress CalculateTargetSilo(UInt32 hash, bool excludeThisSiloIfStopping);
    private bool IsSiloNextInTheRing(SiloAddress siloAddr, UInt32 hash, bool excludeMySelf);
}
internal interface Orleans.Runtime.ConsistentRing.IConsistentRingProvider {
    public abstract virtual IRingRange GetMyRange();
    public abstract virtual bool SubscribeToRangeChangeEvents(IRingRangeListener observer);
    public abstract virtual bool UnSubscribeFromRangeChangeEvents(IRingRangeListener observer);
    public abstract virtual SiloAddress GetPrimaryTargetSilo(UInt32 key);
}
internal interface Orleans.Runtime.ConsistentRing.IRingRangeListener {
    public abstract virtual void RangeChangeNotification(IRingRange old, IRingRange now, bool increased);
}
internal class Orleans.Runtime.ConsistentRing.VirtualBucketsRingProvider : object {
    private List`1<IRingRangeListener> statusListeners;
    private SortedDictionary`2<UInt32, SiloAddress> bucketsMap;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`2[] sortedBucketsList;
    private ILogger logger;
    private SiloAddress myAddress;
    private int numBucketsPerSilo;
    private bool running;
    private IRingRange myRange;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ValueTuple`3<IRingRange, IRingRange, bool> lastNotification;
    internal VirtualBucketsRingProvider(SiloAddress siloAddress, ILoggerFactory loggerFactory, int numVirtualBuckets);
    private void Stop();
    public sealed virtual IRingRange GetMyRange();
    private int GetRingSize();
    public sealed virtual bool SubscribeToRangeChangeEvents(IRingRangeListener observer);
    public sealed virtual bool UnSubscribeFromRangeChangeEvents(IRingRangeListener observer);
    private void NotifyLocalRangeSubscribers(IRingRange old, IRingRange now, bool increased);
    private void AddServer(SiloAddress silo);
    private void RemoveServer(SiloAddress silo);
    private IRingRange UpdateRange();
    private static IRingRange CalculateRange(ValueTuple`2[] list, SiloAddress silo);
    public virtual string ToString();
    internal List`1<ValueTuple`2<SiloAddress, IRingRangeInternal>> GetRanges();
    public sealed virtual void SiloStatusChangeNotification(SiloAddress updatedSilo, SiloStatus status);
    public sealed virtual SiloAddress GetPrimaryTargetSilo(UInt32 key);
    private SiloAddress CalculateTargetSilo(UInt32 hash, bool excludeThisSiloIfStopping);
    [CompilerGeneratedAttribute]
private int <.ctor>b__9_0();
    [CompilerGeneratedAttribute]
private float <.ctor>b__9_1();
    [CompilerGeneratedAttribute]
private float <.ctor>b__9_2();
}
internal class Orleans.Runtime.ConstructorArgumentFactory : object {
    private static Type FacetMarkerInterfaceType;
    private IServiceProvider services;
    public ConstructorArgumentFactory(IServiceProvider services);
    private static ConstructorArgumentFactory();
    public ArgumentFactory CreateFactory(Type grainClass);
}
internal class Orleans.Runtime.DeploymentLoadPublisher : SystemTarget {
    private ILocalSiloDetails siloDetails;
    private ISiloStatusOracle siloStatusOracle;
    private IInternalGrainFactory grainFactory;
    private ActivationDirectory activationDirectory;
    private IActivationWorkingSet activationWorkingSet;
    private IAppEnvironmentStatistics appEnvironmentStatistics;
    private IHostEnvironmentStatistics hostEnvironmentStatistics;
    private IOptions`1<LoadSheddingOptions> loadSheddingOptions;
    private ConcurrentDictionary`2<SiloAddress, SiloRuntimeStatistics> periodicStats;
    private TimeSpan statisticsRefreshTime;
    private IList`1<ISiloStatisticsChangeListener> siloStatisticsChangeListeners;
    private ILogger logger;
    private IDisposable publishTimer;
    public ConcurrentDictionary`2<SiloAddress, SiloRuntimeStatistics> PeriodicStatistics { get; }
    public DeploymentLoadPublisher(ILocalSiloDetails siloDetails, ISiloStatusOracle siloStatusOracle, IOptions`1<DeploymentLoadPublisherOptions> options, IInternalGrainFactory grainFactory, ILoggerFactory loggerFactory, ActivationDirectory activationDirectory, IActivationWorkingSet activationWorkingSet, IAppEnvironmentStatistics appEnvironmentStatistics, IHostEnvironmentStatistics hostEnvironmentStatistics, IOptions`1<LoadSheddingOptions> loadSheddingOptions);
    public ConcurrentDictionary`2<SiloAddress, SiloRuntimeStatistics> get_PeriodicStatistics();
    [AsyncStateMachineAttribute("Orleans.Runtime.DeploymentLoadPublisher/<Start>d__16")]
public Task Start();
    [AsyncStateMachineAttribute("Orleans.Runtime.DeploymentLoadPublisher/<PublishStatistics>d__17")]
private Task PublishStatistics(object _);
    public sealed virtual Task UpdateRuntimeStatistics(SiloAddress siloAddress, SiloRuntimeStatistics siloStats);
    [AsyncStateMachineAttribute("Orleans.Runtime.DeploymentLoadPublisher/<RefreshStatistics>d__19")]
internal Task`1<ConcurrentDictionary`2<SiloAddress, SiloRuntimeStatistics>> RefreshStatistics();
    public bool SubscribeToStatisticsChangeEvents(ISiloStatisticsChangeListener observer);
    public bool UnsubscribeStatisticsChangeEvents(ISiloStatisticsChangeListener observer);
    private void NotifyAllStatisticsChangeEventsSubscribers(SiloAddress silo, SiloRuntimeStatistics stats);
    public sealed virtual void SiloStatusChangeNotification(SiloAddress updatedSilo, SiloStatus status);
    private void OnSiloStatusChange(SiloAddress updatedSilo, SiloStatus status);
    [CompilerGeneratedAttribute]
private Task <RefreshStatistics>b__19_0();
}
internal class Orleans.Runtime.Development.DevelopmentLeaseProviderGrain : Grain {
    private Dictionary`2<Tuple`2<string, string>, Lease> leases;
    public sealed virtual Task`1<AcquireLeaseResult[]> Acquire(string category, LeaseRequest[] leaseRequests);
    public sealed virtual Task Release(string category, AcquiredLease[] acquiredLeases);
    public sealed virtual Task`1<AcquireLeaseResult[]> Renew(string category, AcquiredLease[] acquiredLeases);
    public sealed virtual Task Reset();
    private AcquireLeaseResult Acquire(string category, LeaseRequest leaseRequest);
    private void Release(string category, AcquiredLease acquiredLease);
    private AcquireLeaseResult Renew(string category, AcquiredLease acquiredLease);
}
[ExtensionAttribute]
public static class Orleans.Runtime.Development.DevelopmentSiloBuilderExtensions : object {
    [ExtensionAttribute]
public static ISiloBuilder UseInMemoryLeaseProvider(ISiloBuilder builder);
    private static void UseInMemoryLeaseProvider(IServiceCollection services);
}
internal interface Orleans.Runtime.Development.IDevelopmentLeaseProviderGrain {
    public abstract virtual Task Reset();
}
public class Orleans.Runtime.Development.InMemoryLeaseProvider : object {
    private IDevelopmentLeaseProviderGrain leaseProvider;
    public InMemoryLeaseProvider(IGrainFactory grainFactory);
    [AsyncStateMachineAttribute("Orleans.Runtime.Development.InMemoryLeaseProvider/<Acquire>d__2")]
public sealed virtual Task`1<AcquireLeaseResult[]> Acquire(string category, LeaseRequest[] leaseRequests);
    public sealed virtual Task Release(string category, AcquiredLease[] acquiredLeases);
    [AsyncStateMachineAttribute("Orleans.Runtime.Development.InMemoryLeaseProvider/<Renew>d__4")]
public sealed virtual Task`1<AcquireLeaseResult[]> Renew(string category, AcquiredLease[] acquiredLeases);
    private static IDevelopmentLeaseProviderGrain GetLeaseProviderGrain(IGrainFactory grainFactory);
}
internal class Orleans.Runtime.EmptyConnectedClientCollection : object {
    public long Version { get; }
    public sealed virtual long get_Version();
    public sealed virtual List`1<GrainId> GetConnectedClientIds();
}
internal class Orleans.Runtime.FallbackSystemTarget : SystemTarget {
    public FallbackSystemTarget(ILocalSiloDetails localSiloDetails, ILoggerFactory loggerFactory);
}
internal class Orleans.Runtime.FatalErrorHandler : object {
    private ILogger`1<FatalErrorHandler> log;
    private ClusterMembershipOptions clusterMembershipOptions;
    public FatalErrorHandler(ILogger`1<FatalErrorHandler> log, IOptions`1<ClusterMembershipOptions> clusterMembershipOptions);
    public sealed virtual bool IsUnexpected(Exception exception);
    public sealed virtual void OnFatalException(object sender, string context, Exception exception);
}
internal class Orleans.Runtime.GrainCanInterleave : object {
    [CompilerGeneratedAttribute]
private List`1<Func`2<Message, bool>> <MayInterleavePredicates>k__BackingField;
    public List`1<Func`2<Message, bool>> MayInterleavePredicates { get; }
    [CompilerGeneratedAttribute]
public List`1<Func`2<Message, bool>> get_MayInterleavePredicates();
    public bool MayInterleave(Message message);
}
internal class Orleans.Runtime.GrainContextAccessor : object {
    private HostedClient _hostedClient;
    public IGrainContext GrainContext { get; }
    public GrainContextAccessor(HostedClient hostedClient);
    public sealed virtual IGrainContext get_GrainContext();
}
public class Orleans.Runtime.GrainContextActivator : object {
    private object _lockObj;
    private IGrainContextActivatorProvider[] _activatorProviders;
    private IConfigureGrainContextProvider[] _configuratorProviders;
    private GrainPropertiesResolver _resolver;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ImmutableDictionary`2<GrainType, ValueTuple`2<IGrainContextActivator, IConfigureGrainContext[]>> _activators;
    public GrainContextActivator(IEnumerable`1<IGrainContextActivatorProvider> providers, IEnumerable`1<IConfigureGrainContextProvider> configureContextActions, GrainPropertiesResolver grainPropertiesResolver);
    public IGrainContext CreateInstance(GrainAddress address);
    private ValueTuple`2<IGrainContextActivator, IConfigureGrainContext[]> CreateActivator(GrainType grainType);
}
internal class Orleans.Runtime.GrainDirectory.AdaptiveDirectoryCacheMaintainer : TaskSchedulerAgent {
    private static TimeSpan SLEEP_TIME_BETWEEN_REFRESHES;
    private AdaptiveGrainDirectoryCache cache;
    private LocalGrainDirectory router;
    private IInternalGrainFactory grainFactory;
    private long lastNumAccesses;
    private long lastNumHits;
    internal AdaptiveDirectoryCacheMaintainer(LocalGrainDirectory router, AdaptiveGrainDirectoryCache cache, IInternalGrainFactory grainFactory, ILoggerFactory loggerFactory);
    private static AdaptiveDirectoryCacheMaintainer();
    [AsyncStateMachineAttribute("Orleans.Runtime.GrainDirectory.AdaptiveDirectoryCacheMaintainer/<Run>d__7")]
protected virtual Task Run();
    private void SendBatchCacheRefreshRequests(Dictionary`2<SiloAddress, List`1<GrainId>> refreshRequests);
    private void ProcessCacheRefreshResponse(SiloAddress silo, List`1<AddressAndTag> refreshResponse);
    private List`1<ValueTuple`2<GrainId, int>> BuildGrainAndETagList(List`1<GrainId> grains);
    private void ProduceStats();
}
internal class Orleans.Runtime.GrainDirectory.AdaptiveGrainDirectoryCache : object {
    private static Func`3<GrainAddress, GrainDirectoryCacheEntry, bool> ActivationAddressesMatches;
    private LRU`2<GrainId, GrainDirectoryCacheEntry> cache;
    private TimeSpan initialExpirationTimer;
    private double exponentialTimerGrowth;
    private TimeSpan maxExpirationTimer;
    internal long NumAccesses;
    internal long NumHits;
    internal long LastNumAccesses;
    internal long LastNumHits;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<ValueTuple`2<GrainAddress, int>> KeyValues { get; }
    public AdaptiveGrainDirectoryCache(TimeSpan initialExpirationTimer, TimeSpan maxExpirationTimer, double exponentialTimerGrowth, int maxCacheSize);
    private static AdaptiveGrainDirectoryCache();
    public sealed virtual void AddOrUpdate(GrainAddress value, int version);
    public sealed virtual bool Remove(GrainId key);
    public sealed virtual bool Remove(GrainAddress key);
    public sealed virtual void Clear();
    public sealed virtual bool LookUp(GrainId key, GrainAddress& result, Int32& version);
    [IteratorStateMachineAttribute("Orleans.Runtime.GrainDirectory.AdaptiveGrainDirectoryCache/<get_KeyValues>d__17")]
public sealed virtual IEnumerable`1<ValueTuple`2<GrainAddress, int>> get_KeyValues();
    public bool MarkAsFresh(GrainId key);
    internal GrainDirectoryCacheEntry Get(GrainId key);
    internal IEnumerator`1<KeyValuePair`2<GrainId, GrainDirectoryCacheEntry>> GetStoredEntries();
    public virtual string ToString();
    [CompilerGeneratedAttribute]
private int <.ctor>b__10_0();
}
internal class Orleans.Runtime.GrainDirectory.CachedGrainLocator : object {
    private GrainDirectoryResolver grainDirectoryResolver;
    private IGrainDirectoryCache cache;
    private CancellationTokenSource shutdownToken;
    private IClusterMembershipService clusterMembershipService;
    private Task listenToClusterChangeTask;
    [CompilerGeneratedAttribute]
private MembershipVersion <Orleans.Runtime.GrainDirectory.CachedGrainLocator.ITestAccessor.LastMembershipVersion>k__BackingField;
    private MembershipVersion Orleans.Runtime.GrainDirectory.CachedGrainLocator.ITestAccessor.LastMembershipVersion { get; private set; }
    public CachedGrainLocator(GrainDirectoryResolver grainDirectoryResolver, IClusterMembershipService clusterMembershipService);
    [CompilerGeneratedAttribute]
private sealed virtual override MembershipVersion Orleans.Runtime.GrainDirectory.CachedGrainLocator.ITestAccessor.get_LastMembershipVersion();
    [CompilerGeneratedAttribute]
private sealed virtual override void Orleans.Runtime.GrainDirectory.CachedGrainLocator.ITestAccessor.set_LastMembershipVersion(MembershipVersion value);
    [AsyncStateMachineAttribute("Orleans.Runtime.GrainDirectory.CachedGrainLocator/<Lookup>d__11")]
public sealed virtual ValueTask`1<GrainAddress> Lookup(GrainId grainId);
    [AsyncStateMachineAttribute("Orleans.Runtime.GrainDirectory.CachedGrainLocator/<Register>d__12")]
public sealed virtual Task`1<GrainAddress> Register(GrainAddress address);
    [AsyncStateMachineAttribute("Orleans.Runtime.GrainDirectory.CachedGrainLocator/<Unregister>d__13")]
public sealed virtual Task Unregister(GrainAddress address, UnregistrationCause cause);
    public sealed virtual void Participate(ISiloLifecycle lifecycle);
    private IGrainDirectory GetGrainDirectory(GrainType grainType);
    [AsyncStateMachineAttribute("Orleans.Runtime.GrainDirectory.CachedGrainLocator/<ListenToClusterChange>d__16")]
private Task ListenToClusterChange();
    private bool IsKnownDeadSilo(GrainAddress grainAddress);
    private bool IsKnownDeadSilo(SiloAddress siloAddress, MembershipVersion membershipVersion);
    private static void ThrowUnsupportedGrainType(GrainId grainId);
    public sealed virtual void CachePlacementDecision(GrainId grainId, SiloAddress siloAddress);
    public sealed virtual void InvalidateCache(GrainId grainId);
    public sealed virtual void InvalidateCache(GrainAddress address);
    public sealed virtual bool TryLookupInCache(GrainId grainId, GrainAddress& address);
    [CompilerGeneratedAttribute]
private Task <Participate>g__OnStart|14_0(CancellationToken ct);
    [AsyncStateMachineAttribute("Orleans.Runtime.GrainDirectory.CachedGrainLocator/<<Participate>g__OnStop|14_1>d")]
[CompilerGeneratedAttribute]
private Task <Participate>g__OnStop|14_1(CancellationToken ct);
}
internal class Orleans.Runtime.GrainDirectory.ClientDirectory : SystemTarget {
    private SimpleConsistentRingProvider _consistentRing;
    private IInternalGrainFactory _grainFactory;
    private ILogger`1<ClientDirectory> _logger;
    private IAsyncTimer _refreshTimer;
    private SiloAddress _localSilo;
    private IClusterMembershipService _clusterMembershipService;
    private SiloMessagingOptions _messagingOptions;
    private CancellationTokenSource _shutdownCancellation;
    private object _lockObj;
    private GrainId _localHostedClientId;
    private IConnectedClientCollection _connectedClients;
    private Action _schedulePublishUpdate;
    private Task _runTask;
    private MembershipVersion _observedMembershipVersion;
    private long _observedConnectedClientsVersion;
    private long _localVersion;
    private IRemoteClientDirectory[] _remoteDirectories;
    private ImmutableHashSet`1<GrainId> _localClients;
    private ImmutableDictionary`2<GrainId, List`1<GrainAddress>> _currentSnapshot;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ImmutableDictionary`2<SiloAddress, ValueTuple`2<ImmutableHashSet`1<GrainId>, long>> _table;
    private Task _nextPublishTask;
    private SiloAddress _previousSuccessor;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ImmutableDictionary`2<SiloAddress, ValueTuple`2<ImmutableHashSet`1<GrainId>, long>> _publishedTable;
    public ClientDirectory(IInternalGrainFactory grainFactory, ILocalSiloDetails siloDetails, IOptions`1<SiloMessagingOptions> messagingOptions, ILoggerFactory loggerFactory, IClusterMembershipService clusterMembershipService, IAsyncTimerFactory timerFactory, IConnectedClientCollection connectedClients);
    public sealed virtual ValueTask`1<List`1<GrainAddress>> Lookup(GrainId grainId);
    public sealed virtual bool TryLocalLookup(GrainId grainId, List`1& addresses);
    private void EnsureRefreshed();
    public sealed virtual Task OnUpdateClientRoutes(ImmutableDictionary`2<SiloAddress, ValueTuple`2<ImmutableHashSet`1<GrainId>, long>> update);
    public sealed virtual Task`1<ImmutableDictionary`2<SiloAddress, ValueTuple`2<ImmutableHashSet`1<GrainId>, long>>> GetClientRoutes(ImmutableDictionary`2<SiloAddress, long> knownRoutes);
    private void UpdateRoutingTable(ImmutableDictionary`2<SiloAddress, ValueTuple`2<ImmutableHashSet`1<GrainId>, long>> update);
    private ValueTuple`2<ImmutableHashSet`1<GrainId>, long> GetConnectedClients(ImmutableHashSet`1<GrainId> previousClients, long previousVersion);
    [AsyncStateMachineAttribute("Orleans.Runtime.GrainDirectory.ClientDirectory/<Run>d__31")]
private Task Run();
    private bool ShouldPublish();
    private void SchedulePublishUpdates();
    [AsyncStateMachineAttribute("Orleans.Runtime.GrainDirectory.ClientDirectory/<PublishUpdates>d__34")]
private Task PublishUpdates();
    private sealed virtual override void Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate(ISiloLifecycle lifecycle);
    [CompilerGeneratedAttribute]
private void <.ctor>b__23_0();
    [AsyncStateMachineAttribute("Orleans.Runtime.GrainDirectory.ClientDirectory/<<Lookup>g__LookupClientAsync|24_0>d")]
[CompilerGeneratedAttribute]
private ValueTask`1<List`1<GrainAddress>> <Lookup>g__LookupClientAsync|24_0(GrainId grainId);
    [CompilerGeneratedAttribute]
private bool <EnsureRefreshed>g__IsStale|26_0();
    [CompilerGeneratedAttribute]
private Task <SchedulePublishUpdates>b__33_0();
    [CompilerGeneratedAttribute]
private Task <Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate>b__35_0(CancellationToken ct);
    [CompilerGeneratedAttribute]
private Task <Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate>b__35_2();
    [AsyncStateMachineAttribute("Orleans.Runtime.GrainDirectory.ClientDirectory/<<Orleans-ILifecycleParticipant<Orleans-Runtime-ISiloLifecycle>-Participate>b__35_1>d")]
[CompilerGeneratedAttribute]
private Task <Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate>b__35_1(CancellationToken ct);
}
internal class Orleans.Runtime.GrainDirectory.ClientGrainLocator : object {
    private SiloAddress _localSiloAddress;
    private ILocalClientDirectory _clientDirectory;
    public ClientGrainLocator(ILocalSiloDetails localSiloDetails, ILocalClientDirectory clientDirectory);
    [AsyncStateMachineAttribute("Orleans.Runtime.GrainDirectory.ClientGrainLocator/<Lookup>d__3")]
public sealed virtual ValueTask`1<GrainAddress> Lookup(GrainId grainId);
    private GrainAddress SelectAddress(List`1<GrainAddress> results, GrainId grainId);
    public sealed virtual Task`1<GrainAddress> Register(GrainAddress address);
    public sealed virtual Task Unregister(GrainAddress address, UnregistrationCause cause);
    private static GrainId ThrowNotClientGrainId(GrainId grainId);
    public sealed virtual void CachePlacementDecision(GrainId grainId, SiloAddress siloAddress);
    public sealed virtual void InvalidateCache(GrainId grainId);
    public sealed virtual void InvalidateCache(GrainAddress address);
    public sealed virtual bool TryLookupInCache(GrainId grainId, GrainAddress& address);
}
internal class Orleans.Runtime.GrainDirectory.DhtGrainLocator : object {
    private ILocalGrainDirectory _localGrainDirectory;
    private IGrainContext _grainContext;
    private object _initLock;
    private BatchedDeregistrationWorker _forceWorker;
    private BatchedDeregistrationWorker _neaWorker;
    public DhtGrainLocator(ILocalGrainDirectory localGrainDirectory, IGrainContext grainContext);
    [AsyncStateMachineAttribute("Orleans.Runtime.GrainDirectory.DhtGrainLocator/<Lookup>d__6")]
public sealed virtual ValueTask`1<GrainAddress> Lookup(GrainId grainId);
    [AsyncStateMachineAttribute("Orleans.Runtime.GrainDirectory.DhtGrainLocator/<Register>d__7")]
public sealed virtual Task`1<GrainAddress> Register(GrainAddress address);
    public sealed virtual Task Unregister(GrainAddress address, UnregistrationCause cause);
    public static DhtGrainLocator FromLocalGrainDirectory(LocalGrainDirectory localGrainDirectory);
    public sealed virtual void CachePlacementDecision(GrainId grainId, SiloAddress siloAddress);
    public sealed virtual void InvalidateCache(GrainId grainId);
    public sealed virtual void InvalidateCache(GrainAddress address);
    public sealed virtual bool TryLookupInCache(GrainId grainId, GrainAddress& address);
    [CompilerGeneratedAttribute]
private void <Unregister>g__EnsureInitialized|8_0();
}
internal class Orleans.Runtime.GrainDirectory.GenericGrainDirectoryResolver : object {
    private IServiceProvider _services;
    private GrainDirectoryResolver _resolver;
    public GenericGrainDirectoryResolver(IServiceProvider services);
    public sealed virtual bool TryResolveGrainDirectory(GrainType grainType, GrainProperties properties, IGrainDirectory& grainDirectory);
    private GrainDirectoryResolver GetResolver();
}
[ExtensionAttribute]
internal static class Orleans.Runtime.GrainDirectory.GrainDirectoryCacheExtensions : object {
    [ExtensionAttribute]
public static bool LookUp(IGrainDirectoryCache cache, GrainId key, GrainAddress& result);
}
public static class Orleans.Runtime.GrainDirectory.GrainDirectoryCacheFactory : object {
    public static IGrainDirectoryCache CreateGrainDirectoryCache(IServiceProvider services, GrainDirectoryOptions options);
    internal static AdaptiveDirectoryCacheMaintainer CreateGrainDirectoryCacheMaintainer(LocalGrainDirectory router, IGrainDirectoryCache cache, IInternalGrainFactory grainFactory, ILoggerFactory loggerFactory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Orleans.Runtime.GrainDirectory.GrainDirectoryHandoffManager : object {
    private static TimeSpan RetryDelay;
    private static int MAX_OPERATION_DEQUEUE;
    private LocalGrainDirectory localDirectory;
    private ISiloStatusOracle siloStatusOracle;
    private IInternalGrainFactory grainFactory;
    private Dictionary`2<SiloAddress, GrainDirectoryPartition> directoryPartitionsMap;
    private List`1<SiloAddress> silosHoldingMyPartition;
    private Dictionary`2<SiloAddress, Task> lastPromise;
    private ILogger logger;
    private Factory`1<GrainDirectoryPartition> createPartion;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Queue`1<ValueTuple`3<string, object, Func`3<GrainDirectoryHandoffManager, object, Task>>> pendingOperations;
    private AsyncLock executorLock;
    internal GrainDirectoryHandoffManager(LocalGrainDirectory localDirectory, ISiloStatusOracle siloStatusOracle, IInternalGrainFactory grainFactory, Factory`1<GrainDirectoryPartition> createPartion, ILoggerFactory loggerFactory);
    private static GrainDirectoryHandoffManager();
    internal void ProcessSiloRemoveEvent(SiloAddress removedSilo);
    internal void ProcessSiloAddEvent(SiloAddress addedSilo);
    [AsyncStateMachineAttribute("Orleans.Runtime.GrainDirectory.GrainDirectoryHandoffManager/<ProcessAddedSiloAsync>d__15")]
private Task ProcessAddedSiloAsync(SiloAddress addedSilo, List`1<GrainAddress> splitPartListSingle);
    internal void AcceptExistingRegistrations(List`1<GrainAddress> singleActivations);
    [AsyncStateMachineAttribute("Orleans.Runtime.GrainDirectory.GrainDirectoryHandoffManager/<AcceptExistingRegistrationsAsync>d__17")]
private Task AcceptExistingRegistrationsAsync(List`1<GrainAddress> singleActivations);
    internal void AcceptHandoffPartition(SiloAddress source, Dictionary`2<GrainId, GrainInfo> partition, bool isFullCopy);
    internal void RemoveHandoffPartition(SiloAddress source);
    private void ResetFollowers();
    private void RemoveOldFollower(SiloAddress silo);
    private void DestroyDuplicateActivations(Dictionary`2<SiloAddress, List`1<GrainAddress>> duplicates);
    [AsyncStateMachineAttribute("Orleans.Runtime.GrainDirectory.GrainDirectoryHandoffManager/<DestroyDuplicateActivationsAsync>d__23")]
private Task DestroyDuplicateActivationsAsync(Dictionary`2<SiloAddress, List`1<GrainAddress>> duplicates);
    private void EnqueueOperation(string name, object state, Func`3<GrainDirectoryHandoffManager, object, Task> action);
    [AsyncStateMachineAttribute("Orleans.Runtime.GrainDirectory.GrainDirectoryHandoffManager/<ExecutePendingOperations>d__25")]
private Task ExecutePendingOperations();
    [CompilerGeneratedAttribute]
private bool <ProcessSiloAddEvent>b__14_0(GrainId grain);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private Task`1<AddressAndTag> <AcceptExistingRegistrationsAsync>b__17_0(GrainAddress addr);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Orleans.Runtime.GrainDirectory.GrainDirectoryPartition : object {
    private Dictionary`2<GrainId, GrainInfo> partitionData;
    private object lockable;
    private ILogger log;
    private ISiloStatusOracle siloStatusOracle;
    private IOptions`1<GrainDirectoryOptions> grainDirectoryOptions;
    internal int Count { get; }
    public GrainDirectoryPartition(ISiloStatusOracle siloStatusOracle, IOptions`1<GrainDirectoryOptions> grainDirectoryOptions, ILoggerFactory loggerFactory);
    internal int get_Count();
    [NullableContextAttribute("2")]
private bool IsValidSilo(SiloAddress silo);
    internal void Clear();
    public List`1<KeyValuePair`2<GrainId, GrainInfo>> GetItems();
    internal AddressAndTag AddSingleActivation(GrainAddress address);
    internal void RemoveActivation(GrainId grain, ActivationId activation, UnregistrationCause cause);
    internal void RemoveGrain(GrainId grain);
    internal AddressAndTag LookUpActivation(GrainId grain);
    internal int GetGrainETag(GrainId grain);
    internal Dictionary`2<SiloAddress, List`1<GrainAddress>> Merge(GrainDirectoryPartition other);
    internal List`1<GrainAddress> Split(Predicate`1<GrainId> predicate);
    internal void Set(Dictionary`2<GrainId, GrainInfo> newPartitionData);
    internal void Update(Dictionary`2<GrainId, GrainInfo> newPartitionDelta);
    public virtual string ToString();
}
internal class Orleans.Runtime.GrainDirectory.GrainDirectoryResolver : object {
    private Dictionary`2<string, IGrainDirectory> directoryPerName;
    private ConcurrentDictionary`2<GrainType, IGrainDirectory> directoryPerType;
    private GrainPropertiesResolver grainPropertiesResolver;
    private IGrainDirectoryResolver[] resolvers;
    private Func`2<GrainType, IGrainDirectory> getGrainDirectoryInternal;
    [CompilerGeneratedAttribute]
private IGrainDirectory <DefaultGrainDirectory>k__BackingField;
    public IReadOnlyCollection`1<IGrainDirectory> Directories { get; }
    public IGrainDirectory DefaultGrainDirectory { get; }
    public GrainDirectoryResolver(IServiceProvider serviceProvider, GrainPropertiesResolver grainPropertiesResolver, IEnumerable`1<IGrainDirectoryResolver> resolvers);
    public IReadOnlyCollection`1<IGrainDirectory> get_Directories();
    public static bool HasAnyRegisteredGrainDirectory(IServiceCollection services);
    [CompilerGeneratedAttribute]
public IGrainDirectory get_DefaultGrainDirectory();
    public IGrainDirectory Resolve(GrainType grainType);
    public bool HasNonDefaultDirectory(GrainType grainType);
    private IGrainDirectory GetGrainDirectoryPerType(GrainType grainType);
    internal bool TryGetNonDefaultGrainDirectory(GrainType grainType, IGrainDirectory& directory);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Orleans.Runtime.GrainDirectory.GrainInfo : object {
    public static int NO_ETAG;
    [CompilerGeneratedAttribute]
private GrainAddress <Activation>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <TimeCreated>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VersionTag>k__BackingField;
    public GrainAddress Activation { get; private set; }
    public DateTime TimeCreated { get; private set; }
    public int VersionTag { get; private set; }
    [CompilerGeneratedAttribute]
public GrainAddress get_Activation();
    [CompilerGeneratedAttribute]
private void set_Activation(GrainAddress value);
    [CompilerGeneratedAttribute]
public DateTime get_TimeCreated();
    [CompilerGeneratedAttribute]
private void set_TimeCreated(DateTime value);
    [CompilerGeneratedAttribute]
public int get_VersionTag();
    [CompilerGeneratedAttribute]
private void set_VersionTag(int value);
    public bool OkToRemove(UnregistrationCause cause, TimeSpan lazyDeregistrationDelay);
    [NullableContextAttribute("1")]
public GrainAddress TryAddSingleActivation(GrainAddress address);
    public bool RemoveActivation(ActivationId act, UnregistrationCause cause, TimeSpan lazyDeregistrationDelay, Boolean& wasRemoved);
    [NullableContextAttribute("1")]
public GrainAddress Merge(GrainInfo other);
}
internal class Orleans.Runtime.GrainDirectory.GrainLocator : object {
    private GrainLocatorResolver _grainLocatorResolver;
    public GrainLocator(GrainLocatorResolver grainLocatorResolver);
    public ValueTask`1<GrainAddress> Lookup(GrainId grainId);
    public Task`1<GrainAddress> Register(GrainAddress address);
    public Task Unregister(GrainAddress address, UnregistrationCause cause);
    public bool TryLookupInCache(GrainId grainId, GrainAddress& address);
    public void InvalidateCache(GrainId grainId);
    public void InvalidateCache(GrainAddress address);
    public void CachePlacementDecision(GrainId grainId, SiloAddress siloAddress);
    private IGrainLocator GetGrainLocator(GrainType grainType);
}
internal class Orleans.Runtime.GrainDirectory.GrainLocatorResolver : object {
    private ConcurrentDictionary`2<GrainType, IGrainLocator> resolvedLocators;
    private Func`2<GrainType, IGrainLocator> getLocatorInternal;
    private IServiceProvider _servicesProvider;
    private GrainDirectoryResolver grainDirectoryResolver;
    private CachedGrainLocator cachedGrainLocator;
    private DhtGrainLocator dhtGrainLocator;
    private ClientGrainLocator _clientGrainLocator;
    public GrainLocatorResolver(IServiceProvider servicesProvider, GrainDirectoryResolver grainDirectoryResolver, CachedGrainLocator cachedGrainLocator, DhtGrainLocator dhtGrainLocator);
    public IGrainLocator GetGrainLocator(GrainType grainType);
    public IGrainLocator GetGrainLocatorInternal(GrainType grainType);
}
public interface Orleans.Runtime.GrainDirectory.IGrainDirectoryCache {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<ValueTuple`2<GrainAddress, int>> KeyValues { get; }
    public abstract virtual void AddOrUpdate(GrainAddress value, int version);
    public abstract virtual bool Remove(GrainId key);
    public abstract virtual bool Remove(GrainAddress key);
    public abstract virtual void Clear();
    public abstract virtual bool LookUp(GrainId key, GrainAddress& result, Int32& version);
    public abstract virtual IEnumerable`1<ValueTuple`2<GrainAddress, int>> get_KeyValues();
}
public interface Orleans.Runtime.GrainDirectory.IGrainDirectoryResolver {
    public abstract virtual bool TryResolveGrainDirectory(GrainType grainType, GrainProperties properties, IGrainDirectory& grainDirectory);
}
internal interface Orleans.Runtime.GrainDirectory.ILocalClientDirectory {
    public abstract virtual bool TryLocalLookup(GrainId grainId, List`1& addresses);
    public abstract virtual ValueTask`1<List`1<GrainAddress>> Lookup(GrainId grainId);
}
[NullableContextAttribute("1")]
internal interface Orleans.Runtime.GrainDirectory.ILocalGrainDirectory {
    public RemoteGrainDirectory RemoteGrainDirectory { get; }
    public RemoteGrainDirectory CacheValidator { get; }
    public abstract virtual void Start();
    public abstract virtual void Stop();
    public abstract virtual RemoteGrainDirectory get_RemoteGrainDirectory();
    public abstract virtual RemoteGrainDirectory get_CacheValidator();
    public abstract virtual Task UnregisterAfterNonexistingActivation(GrainAddress address, SiloAddress origin);
    public abstract virtual bool LocalLookup(GrainId grain, AddressAndTag& addresses);
    public abstract virtual void InvalidateCacheEntry(GrainAddress activation);
    public abstract virtual void InvalidateCacheEntry(GrainId grainId);
    public abstract virtual void CachePlacementDecision(GrainId grainId, SiloAddress siloAddress);
    [NullableContextAttribute("2")]
public abstract virtual SiloAddress GetPrimaryForGrain(GrainId grain);
    public abstract virtual AddressAndTag GetLocalDirectoryData(GrainId grain);
    [NullableContextAttribute("2")]
public abstract virtual GrainAddress GetLocalCacheData(GrainId grain);
    [NullableContextAttribute("2")]
public abstract virtual bool TryCachedLookup(GrainId grainId, GrainAddress& address);
    public abstract virtual bool IsSiloInCluster(SiloAddress silo);
    public abstract virtual void SetSiloRemovedCatalogCallback(Action`2<SiloAddress, SiloStatus> catalogOnSiloRemoved);
}
internal interface Orleans.Runtime.GrainDirectory.IRemoteClientDirectory {
    public abstract virtual Task OnUpdateClientRoutes(ImmutableDictionary`2<SiloAddress, ValueTuple`2<ImmutableHashSet`1<GrainId>, long>> update);
    public abstract virtual Task`1<ImmutableDictionary`2<SiloAddress, ValueTuple`2<ImmutableHashSet`1<GrainId>, long>>> GetClientRoutes(ImmutableDictionary`2<SiloAddress, long> knownRoutes);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Orleans.Runtime.GrainDirectory.LocalGrainDirectory : object {
    private AdaptiveDirectoryCacheMaintainer maintainer;
    private ILogger log;
    [NullableAttribute("2")]
private SiloAddress seed;
    private ISiloStatusOracle siloStatusOracle;
    private IInternalGrainFactory grainFactory;
    private object writeLock;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Action`2<SiloAddress, SiloStatus> catalogOnSiloRemoved;
    private DirectoryMembership directoryMembership;
    internal static int HOP_LIMIT;
    public static TimeSpan RETRY_DELAY;
    internal bool Running;
    [CompilerGeneratedAttribute]
private SiloAddress <MyAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private IGrainDirectoryCache <DirectoryCache>k__BackingField;
    [CompilerGeneratedAttribute]
private GrainDirectoryPartition <DirectoryPartition>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteGrainDirectory <RemoteGrainDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private RemoteGrainDirectory <CacheValidator>k__BackingField;
    [CompilerGeneratedAttribute]
private GrainDirectoryHandoffManager <HandoffManager>k__BackingField;
    internal SiloAddress MyAddress { get; }
    internal IGrainDirectoryCache DirectoryCache { get; }
    internal GrainDirectoryPartition DirectoryPartition { get; }
    public RemoteGrainDirectory RemoteGrainDirectory { get; }
    public RemoteGrainDirectory CacheValidator { get; }
    internal GrainDirectoryHandoffManager HandoffManager { get; }
    public LocalGrainDirectory(IServiceProvider serviceProvider, ILocalSiloDetails siloDetails, ISiloStatusOracle siloStatusOracle, IInternalGrainFactory grainFactory, Factory`1<GrainDirectoryPartition> grainDirectoryPartitionFactory, IOptions`1<DevelopmentClusterMembershipOptions> developmentClusterMembershipOptions, IOptions`1<GrainDirectoryOptions> grainDirectoryOptions, ILoggerFactory loggerFactory);
    private static LocalGrainDirectory();
    [CompilerGeneratedAttribute]
internal SiloAddress get_MyAddress();
    [CompilerGeneratedAttribute]
internal IGrainDirectoryCache get_DirectoryCache();
    [CompilerGeneratedAttribute]
internal GrainDirectoryPartition get_DirectoryPartition();
    [CompilerGeneratedAttribute]
public sealed virtual RemoteGrainDirectory get_RemoteGrainDirectory();
    [CompilerGeneratedAttribute]
public sealed virtual RemoteGrainDirectory get_CacheValidator();
    [CompilerGeneratedAttribute]
internal GrainDirectoryHandoffManager get_HandoffManager();
    public sealed virtual void Start();
    public sealed virtual void Stop();
    public sealed virtual void SetSiloRemovedCatalogCallback(Action`2<SiloAddress, SiloStatus> callback);
    private void AddServer(SiloAddress silo);
    private void RemoveServer(SiloAddress silo, SiloStatus status);
    private void AdjustLocalDirectory(SiloAddress silo, bool dead);
    private void AdjustLocalCache(SiloAddress silo, bool dead);
    internal SiloAddress FindPredecessor(SiloAddress silo);
    internal SiloAddress FindSuccessor(SiloAddress silo);
    public sealed virtual void SiloStatusChangeNotification(SiloAddress updatedSilo, SiloStatus status);
    [NullableContextAttribute("2")]
private bool IsValidSilo(SiloAddress silo);
    [NullableContextAttribute("2")]
public SiloAddress CalculateGrainDirectoryPartition(GrainId grainId);
    public SiloAddress CheckIfShouldForward(GrainId grainId, int hopCount, string operationDescription);
    [AsyncStateMachineAttribute("Orleans.Runtime.GrainDirectory.LocalGrainDirectory/<RegisterAsync>d__43")]
public sealed virtual Task`1<AddressAndTag> RegisterAsync(GrainAddress address, int hopCount);
    public sealed virtual Task UnregisterAfterNonexistingActivation(GrainAddress addr, SiloAddress origin);
    [AsyncStateMachineAttribute("Orleans.Runtime.GrainDirectory.LocalGrainDirectory/<UnregisterAsync>d__45")]
public sealed virtual Task UnregisterAsync(GrainAddress address, UnregistrationCause cause, int hopCount);
    private void UnregisterOrPutInForwardList(List`1<GrainAddress> addresses, UnregistrationCause cause, int hopCount, Dictionary`2& forward, string context);
    [AsyncStateMachineAttribute("Orleans.Runtime.GrainDirectory.LocalGrainDirectory/<UnregisterManyAsync>d__47")]
public sealed virtual Task UnregisterManyAsync(List`1<GrainAddress> addresses, UnregistrationCause cause, int hopCount);
    public sealed virtual bool LocalLookup(GrainId grain, AddressAndTag& result);
    public sealed virtual AddressAndTag GetLocalDirectoryData(GrainId grain);
    [NullableContextAttribute("2")]
public sealed virtual GrainAddress GetLocalCacheData(GrainId grain);
    [AsyncStateMachineAttribute("Orleans.Runtime.GrainDirectory.LocalGrainDirectory/<LookupAsync>d__51")]
public sealed virtual Task`1<AddressAndTag> LookupAsync(GrainId grainId, int hopCount);
    [AsyncStateMachineAttribute("Orleans.Runtime.GrainDirectory.LocalGrainDirectory/<DeleteGrainAsync>d__52")]
public sealed virtual Task DeleteGrainAsync(GrainId grainId, int hopCount);
    public sealed virtual void InvalidateCacheEntry(GrainId grainId);
    public sealed virtual void InvalidateCacheEntry(GrainAddress activationAddress);
    [NullableContextAttribute("2")]
public sealed virtual SiloAddress GetPrimaryForGrain(GrainId grain);
    private long RingDistanceToSuccessor();
    private static long CalcRingDistance(SiloAddress silo1, SiloAddress silo2);
    internal IRemoteGrainDirectory GetDirectoryReference(SiloAddress silo);
    private bool IsSiloNextInTheRing(SiloAddress siloAddr, int hash, bool excludeMySelf);
    public sealed virtual bool IsSiloInCluster(SiloAddress silo);
    public sealed virtual void CachePlacementDecision(GrainId grainId, SiloAddress siloAddress);
    [NullableContextAttribute("2")]
public sealed virtual bool TryCachedLookup(GrainId grainId, GrainAddress& address);
    [CompilerGeneratedAttribute]
private int <.ctor>b__29_0();
    [CompilerGeneratedAttribute]
private long <.ctor>b__29_1();
    [CompilerGeneratedAttribute]
private float <.ctor>b__29_2();
    [CompilerGeneratedAttribute]
private float <.ctor>b__29_3();
    [CompilerGeneratedAttribute]
private int <.ctor>b__29_4();
}
internal class Orleans.Runtime.GrainDirectory.LRUBasedGrainDirectoryCache : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static Func`3<GrainAddress, ValueTuple`2<GrainAddress, int>, bool> ActivationAddressesMatch;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private LRU`2<GrainId, ValueTuple`2<GrainAddress, int>> cache;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<ValueTuple`2<GrainAddress, int>> KeyValues { get; }
    public LRUBasedGrainDirectoryCache(int maxCacheSize, TimeSpan maxEntryAge);
    private static LRUBasedGrainDirectoryCache();
    public sealed virtual void AddOrUpdate(GrainAddress activationAddress, int version);
    public sealed virtual bool Remove(GrainId key);
    public sealed virtual bool Remove(GrainAddress grainAddress);
    public sealed virtual void Clear();
    public sealed virtual bool LookUp(GrainId key, GrainAddress& result, Int32& version);
    [IteratorStateMachineAttribute("Orleans.Runtime.GrainDirectory.LRUBasedGrainDirectoryCache/<get_KeyValues>d__9")]
public sealed virtual IEnumerable`1<ValueTuple`2<GrainAddress, int>> get_KeyValues();
}
internal class Orleans.Runtime.GrainDirectory.NullGrainDirectoryCache : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public IEnumerable`1<ValueTuple`2<GrainAddress, int>> KeyValues { get; }
    public sealed virtual void AddOrUpdate(GrainAddress value, int version);
    public sealed virtual bool Remove(GrainId key);
    public sealed virtual bool Remove(GrainAddress key);
    public sealed virtual void Clear();
    public sealed virtual bool LookUp(GrainId key, GrainAddress& result, Int32& version);
    [IteratorStateMachineAttribute("Orleans.Runtime.GrainDirectory.NullGrainDirectoryCache/<get_KeyValues>d__6")]
public sealed virtual IEnumerable`1<ValueTuple`2<GrainAddress, int>> get_KeyValues();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Orleans.Runtime.GrainDirectory.RemoteGrainDirectory : SystemTarget {
    private LocalGrainDirectory router;
    private GrainDirectoryPartition partition;
    private ILogger logger;
    internal RemoteGrainDirectory(LocalGrainDirectory r, GrainType grainType, ILoggerFactory loggerFactory);
    public sealed virtual Task`1<AddressAndTag> RegisterAsync(GrainAddress address, int hopCount);
    public sealed virtual Task RegisterMany(List`1<GrainAddress> addresses);
    public sealed virtual Task UnregisterAsync(GrainAddress address, UnregistrationCause cause, int hopCount);
    public sealed virtual Task UnregisterManyAsync(List`1<GrainAddress> addresses, UnregistrationCause cause, int hopCount);
    public sealed virtual Task DeleteGrainAsync(GrainId grainId, int hopCount);
    public sealed virtual Task`1<AddressAndTag> LookupAsync(GrainId grainId, int hopCount);
    public sealed virtual Task`1<List`1<AddressAndTag>> LookUpMany(List`1<ValueTuple`2<GrainId, int>> grainAndETagList);
    public sealed virtual Task RemoveHandoffPartition(SiloAddress source);
    public sealed virtual Task AcceptSplitPartition(List`1<GrainAddress> singleActivations);
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
private Task`1<AddressAndTag> <RegisterMany>b__5_0(GrainAddress addr);
}
internal class Orleans.Runtime.GrainLifecycle : LifecycleSubject {
    private static ImmutableDictionary`2<int, string> StageNames;
    public GrainLifecycle(ILogger logger);
    private static GrainLifecycle();
    protected virtual string GetStageName(int stage);
}
internal class Orleans.Runtime.GrainMethodInvoker : object {
    private Message message;
    private IInvokable request;
    private List`1<IIncomingGrainCallFilter> filters;
    private InterfaceToImplementationMappingCache interfaceToImplementationMapping;
    private DeepCopier`1<Response> responseCopier;
    private IGrainContext grainContext;
    private int stage;
    [CompilerGeneratedAttribute]
private Response <Response>k__BackingField;
    public IInvokable Request { get; }
    public object Grain { get; }
    public MethodInfo InterfaceMethod { get; }
    public MethodInfo ImplementationMethod { get; }
    public IMethodArguments Arguments { get; }
    public object Result { get; public set; }
    public Response Response { get; public set; }
    private object Orleans.IMethodArguments.Item { get; private set; }
    private int Orleans.IMethodArguments.Length { get; }
    public Nullable`1<GrainId> SourceId { get; }
    public IGrainContext TargetContext { get; }
    public GrainId TargetId { get; }
    public GrainInterfaceType InterfaceType { get; }
    public string InterfaceName { get; }
    public string MethodName { get; }
    public GrainMethodInvoker(Message message, IGrainContext grainContext, IInvokable request, List`1<IIncomingGrainCallFilter> filters, InterfaceToImplementationMappingCache interfaceToImplementationMapping, DeepCopier`1<Response> responseCopier);
    public sealed virtual IInvokable get_Request();
    public sealed virtual object get_Grain();
    public sealed virtual MethodInfo get_InterfaceMethod();
    public sealed virtual MethodInfo get_ImplementationMethod();
    public sealed virtual IMethodArguments get_Arguments();
    public sealed virtual object get_Result();
    public sealed virtual void set_Result(object value);
    [CompilerGeneratedAttribute]
public sealed virtual Response get_Response();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Response(Response value);
    private sealed virtual override object Orleans.IMethodArguments.get_Item(int index);
    private sealed virtual override void Orleans.IMethodArguments.set_Item(int index, object value);
    private sealed virtual override T Orleans.IMethodArguments.GetArgument(int index);
    private sealed virtual override void Orleans.IMethodArguments.SetArgument(int index, T value);
    private sealed virtual override int Orleans.IMethodArguments.get_Length();
    public sealed virtual Nullable`1<GrainId> get_SourceId();
    public sealed virtual IGrainContext get_TargetContext();
    public sealed virtual GrainId get_TargetId();
    public sealed virtual GrainInterfaceType get_InterfaceType();
    public sealed virtual string get_InterfaceName();
    public sealed virtual string get_MethodName();
    [AsyncStateMachineAttribute("Orleans.Runtime.GrainMethodInvoker/<Invoke>d__44")]
public sealed virtual Task Invoke();
    private static void ThrowInvalidCall();
    private static void ThrowBrokenCallFilterChain(string filterName);
    private ValueTuple`2<MethodInfo, MethodInfo> GetMethodEntry();
}
internal class Orleans.Runtime.GrainRuntime : object {
    private ILoggerFactory loggerFactory;
    private IServiceProvider serviceProvider;
    private ITimerRegistry timerRegistry;
    private IGrainFactory grainFactory;
    [CompilerGeneratedAttribute]
private string <SiloIdentity>k__BackingField;
    [CompilerGeneratedAttribute]
private SiloAddress <SiloAddress>k__BackingField;
    public string SiloIdentity { get; }
    public SiloAddress SiloAddress { get; }
    public IGrainFactory GrainFactory { get; }
    public ITimerRegistry TimerRegistry { get; }
    public IServiceProvider ServiceProvider { get; }
    public GrainRuntime(ILocalSiloDetails localSiloDetails, IGrainFactory grainFactory, ITimerRegistry timerRegistry, IServiceProvider serviceProvider, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SiloIdentity();
    [CompilerGeneratedAttribute]
public sealed virtual SiloAddress get_SiloAddress();
    public sealed virtual IGrainFactory get_GrainFactory();
    public sealed virtual ITimerRegistry get_TimerRegistry();
    public sealed virtual IServiceProvider get_ServiceProvider();
    public sealed virtual void DeactivateOnIdle(IGrainContext grainContext);
    public sealed virtual void DelayDeactivation(IGrainContext grainContext, TimeSpan timeSpan);
    public sealed virtual IStorage`1<TGrainState> GetStorage(IGrainContext grainContext);
    public static void CheckRuntimeContext(IGrainContext context);
    [CompilerGeneratedAttribute]
internal static void <CheckRuntimeContext>g__ThrowMissingContext|20_0();
    [CompilerGeneratedAttribute]
internal static void <CheckRuntimeContext>g__ThrowInvalidActivation|20_1(ActivationData activationData);
}
public abstract class Orleans.Runtime.GrainService : SystemTarget {
    private IConsistentRingProvider ring;
    private string typeName;
    private GrainServiceStatus status;
    private ILogger Logger;
    [CompilerGeneratedAttribute]
private CancellationTokenSource <StoppedCancellationTokenSource>k__BackingField;
    [CompilerGeneratedAttribute]
private int <RangeSerialNumber>k__BackingField;
    [CompilerGeneratedAttribute]
private IRingRange <RingRange>k__BackingField;
    protected CancellationTokenSource StoppedCancellationTokenSource { get; }
    protected int RangeSerialNumber { get; private set; }
    protected IRingRange RingRange { get; private set; }
    protected GrainServiceStatus Status { get; protected set; }
    internal GrainService(GrainId grainId, SiloAddress siloAddress, ILoggerFactory loggerFactory, IConsistentRingProvider ringProvider);
    protected GrainService(GrainId grainId, Silo silo, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
protected CancellationTokenSource get_StoppedCancellationTokenSource();
    [CompilerGeneratedAttribute]
protected int get_RangeSerialNumber();
    [CompilerGeneratedAttribute]
private void set_RangeSerialNumber(int value);
    [CompilerGeneratedAttribute]
protected IRingRange get_RingRange();
    [CompilerGeneratedAttribute]
private void set_RingRange(IRingRange value);
    protected GrainServiceStatus get_Status();
    protected void set_Status(GrainServiceStatus value);
    public virtual Task Init(IServiceProvider serviceProvider);
    private void OnStatusChange(GrainServiceStatus oldStatus, GrainServiceStatus newStatus);
    public virtual Task Start();
    protected virtual Task StartInBackground();
    public virtual Task Stop();
    private sealed virtual override void Orleans.Runtime.ConsistentRing.IRingRangeListener.RangeChangeNotification(IRingRange oldRange, IRingRange newRange, bool increased);
    public virtual Task OnRangeChange(IRingRange oldRange, IRingRange newRange, bool increased);
}
internal class Orleans.Runtime.GrainServiceFactory : object {
    private IRuntimeClient runtimeClient;
    public GrainServiceFactory(IRuntimeClient runtimeClient);
    public sealed virtual T CastToGrainServiceReference(GrainReference grainReference);
}
internal class Orleans.Runtime.GrainTimer : object {
    private Func`2<object, Task> asyncCallback;
    private AsyncTaskSafeTimer timer;
    private TimeSpan dueTime;
    private TimeSpan timerFrequency;
    private DateTime previousTickTime;
    private int totalNumTicks;
    private ILogger logger;
    private Task modreq(System.Runtime.CompilerServices.IsVolatile) currentlyExecutingTickTask;
    private object currentlyExecutingTickTaskLock;
    private IGrainContext grainContext;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    public string Name { get; }
    private bool TimerAlreadyStopped { get; }
    private GrainTimer(IGrainContext activationData, ILogger logger, Func`2<object, Task> asyncCallback, object state, TimeSpan dueTime, TimeSpan period, string name);
    [CompilerGeneratedAttribute]
public string get_Name();
    private bool get_TimerAlreadyStopped();
    internal static IGrainTimer FromTaskCallback(ILogger logger, Func`2<object, Task> asyncCallback, object state, TimeSpan dueTime, TimeSpan period, string name, IGrainContext grainContext);
    public sealed virtual void Start();
    public sealed virtual void Stop();
    [AsyncStateMachineAttribute("Orleans.Runtime.GrainTimer/<TimerTick>d__19")]
private Task TimerTick(object state, IGrainContext context);
    [AsyncStateMachineAttribute("Orleans.Runtime.GrainTimer/<ForwardToAsyncCallback>d__20")]
private Task ForwardToAsyncCallback(object state);
    public sealed virtual Task GetCurrentlyExecutingTickTask();
    private string GetFullName();
    public bool CheckTimerFreeze(DateTime lastCheckTime);
    public bool CheckTimerDelay();
    public sealed virtual void Dispose();
    private void DisposeTimer();
    [CompilerGeneratedAttribute]
private string <CheckTimerFreeze>b__23_0();
}
public class Orleans.Runtime.GrainTypeSharedContext : object {
    private IServiceProvider _serviceProvider;
    private string _grainTypeName;
    private Dictionary`2<Type, object> _components;
    private InternalGrainRuntime _internalGrainRuntime;
    [CompilerGeneratedAttribute]
private TimeSpan <CollectionAgeLimit>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    [CompilerGeneratedAttribute]
private SiloMessagingOptions <MessagingOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private GrainReferenceActivator <GrainReferenceActivator>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxRequestProcessingTime>k__BackingField;
    [CompilerGeneratedAttribute]
private TimeSpan <MaxWarningRequestProcessingTime>k__BackingField;
    [CompilerGeneratedAttribute]
private PlacementStrategy <PlacementStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private SchedulingOptions <SchedulingOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private IGrainRuntime <Runtime>k__BackingField;
    public TimeSpan CollectionAgeLimit { get; }
    public ILogger Logger { get; }
    public SiloMessagingOptions MessagingOptions { get; }
    public GrainReferenceActivator GrainReferenceActivator { get; }
    public TimeSpan MaxRequestProcessingTime { get; }
    public TimeSpan MaxWarningRequestProcessingTime { get; }
    public PlacementStrategy PlacementStrategy { get; }
    public SchedulingOptions SchedulingOptions { get; }
    public IGrainRuntime Runtime { get; }
    internal InternalGrainRuntime InternalRuntime { get; }
    public GrainTypeSharedContext(GrainType grainType, IClusterManifestProvider clusterManifestProvider, GrainClassMap grainClassMap, PlacementStrategyResolver placementStrategyResolver, IOptions`1<SiloMessagingOptions> messagingOptions, IOptions`1<GrainCollectionOptions> collectionOptions, IOptions`1<SchedulingOptions> schedulingOptions, IGrainRuntime grainRuntime, ILogger logger, GrainReferenceActivator grainReferenceActivator, IServiceProvider serviceProvider);
    private TimeSpan GetCollectionAgeLimit(GrainType grainType, Type grainClass, GrainManifest siloManifest, GrainCollectionOptions collectionOptions);
    public TComponent GetComponent();
    public void SetComponent(TComponent instance);
    [CompilerGeneratedAttribute]
public TimeSpan get_CollectionAgeLimit();
    [CompilerGeneratedAttribute]
public ILogger get_Logger();
    [CompilerGeneratedAttribute]
public SiloMessagingOptions get_MessagingOptions();
    [CompilerGeneratedAttribute]
public GrainReferenceActivator get_GrainReferenceActivator();
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxRequestProcessingTime();
    [CompilerGeneratedAttribute]
public TimeSpan get_MaxWarningRequestProcessingTime();
    [CompilerGeneratedAttribute]
public PlacementStrategy get_PlacementStrategy();
    [CompilerGeneratedAttribute]
public SchedulingOptions get_SchedulingOptions();
    [CompilerGeneratedAttribute]
public IGrainRuntime get_Runtime();
    internal InternalGrainRuntime get_InternalRuntime();
    public void OnCreateActivation(IGrainContext grainContext);
    public void OnDestroyActivation(IGrainContext grainContext);
}
public class Orleans.Runtime.GrainTypeSharedContextResolver : object {
    private ConcurrentDictionary`2<GrainType, GrainTypeSharedContext> _components;
    private IConfigureGrainTypeComponents[] _configurators;
    private GrainPropertiesResolver _grainPropertiesResolver;
    private GrainReferenceActivator _grainReferenceActivator;
    private Func`2<GrainType, GrainTypeSharedContext> _createFunc;
    private IClusterManifestProvider _clusterManifestProvider;
    private GrainClassMap _grainClassMap;
    private IOptions`1<SiloMessagingOptions> _messagingOptions;
    private IOptions`1<GrainCollectionOptions> _collectionOptions;
    private IOptions`1<SchedulingOptions> _schedulingOptions;
    private PlacementStrategyResolver _placementStrategyResolver;
    private IGrainRuntime _grainRuntime;
    private ILogger`1<Grain> _logger;
    private IServiceProvider _serviceProvider;
    public GrainTypeSharedContextResolver(IEnumerable`1<IConfigureGrainTypeComponents> configurators, GrainPropertiesResolver grainPropertiesResolver, GrainReferenceActivator grainReferenceActivator, IClusterManifestProvider clusterManifestProvider, GrainClassMap grainClassMap, PlacementStrategyResolver placementStrategyResolver, IOptions`1<SiloMessagingOptions> messagingOptions, IOptions`1<GrainCollectionOptions> collectionOptions, IOptions`1<SchedulingOptions> schedulingOptions, IGrainRuntime grainRuntime, ILogger`1<Grain> logger, IServiceProvider serviceProvider);
    public GrainTypeSharedContext GetComponents(GrainType grainType);
    private GrainTypeSharedContext Create(GrainType grainType);
}
internal class Orleans.Runtime.HostedClient : object {
    private object lockObj;
    private Channel`1<Message> incomingMessages;
    private IGrainReferenceRuntime grainReferenceRuntime;
    private InvokableObjectManager invokableObjects;
    private IRuntimeClient runtimeClient;
    private ILogger logger;
    private IInternalGrainFactory grainFactory;
    private MessageCenter siloMessageCenter;
    private MessagingTrace messagingTrace;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<Type, ValueTuple`2<object, IAddressable>> _extensions;
    private bool disposing;
    private Task messagePump;
    [CompilerGeneratedAttribute]
private ClientGrainId <ClientId>k__BackingField;
    [CompilerGeneratedAttribute]
private GrainReference <GrainReference>k__BackingField;
    [CompilerGeneratedAttribute]
private GrainAddress <Address>k__BackingField;
    public ClientGrainId ClientId { get; }
    public GrainReference GrainReference { get; }
    public GrainId GrainId { get; }
    public object GrainInstance { get; }
    public ActivationId ActivationId { get; }
    public GrainAddress Address { get; }
    public IServiceProvider ActivationServices { get; }
    public IGrainLifecycle ObservableLifecycle { get; }
    public IWorkItemScheduler Scheduler { get; }
    public bool IsExemptFromCollection { get; }
    public PlacementStrategy PlacementStrategy { get; }
    public Task Deactivated { get; }
    public HostedClient(IRuntimeClient runtimeClient, ILocalSiloDetails siloDetails, ILogger`1<HostedClient> logger, IGrainReferenceRuntime grainReferenceRuntime, IInternalGrainFactory grainFactory, MessageCenter messageCenter, MessagingTrace messagingTrace, DeepCopier deepCopier, GrainReferenceActivator referenceActivator);
    public static ClientGrainId CreateHostedClientGrainId(SiloAddress siloAddress);
    [CompilerGeneratedAttribute]
public ClientGrainId get_ClientId();
    [CompilerGeneratedAttribute]
public sealed virtual GrainReference get_GrainReference();
    public sealed virtual GrainId get_GrainId();
    public sealed virtual object get_GrainInstance();
    public sealed virtual ActivationId get_ActivationId();
    [CompilerGeneratedAttribute]
public sealed virtual GrainAddress get_Address();
    public sealed virtual IServiceProvider get_ActivationServices();
    public sealed virtual IGrainLifecycle get_ObservableLifecycle();
    public sealed virtual IWorkItemScheduler get_Scheduler();
    public bool get_IsExemptFromCollection();
    public PlacementStrategy get_PlacementStrategy();
    public virtual string ToString();
    public IAddressable CreateObjectReference(IAddressable obj);
    public void DeleteObjectReference(IAddressable obj);
    public sealed virtual TComponent GetComponent();
    public sealed virtual void SetComponent(TComponent instance);
    public bool TryDispatchToClient(Message message);
    public sealed virtual void ReceiveMessage(object message);
    private sealed virtual override void System.IDisposable.Dispose();
    private void Start();
    [AsyncStateMachineAttribute("Orleans.Runtime.HostedClient/<RunClientMessagePump>d__48")]
private Task RunClientMessagePump();
    private sealed virtual override void Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate(ISiloLifecycle lifecycle);
    public sealed virtual bool Equals(IGrainContext other);
    public sealed virtual ValueTuple`2<TExtension, TExtensionInterface> GetOrSetExtension(Func`1<TExtension> newExtensionFunc);
    private bool TryGetExtension(ValueTuple`2& result);
    private bool TryGetExtension(TExtensionInterface& result);
    public sealed virtual TExtensionInterface GetExtension();
    public sealed virtual TTarget GetTarget();
    public sealed virtual void Activate(Dictionary`2<string, object> requestContext, Nullable`1<CancellationToken> cancellationToken);
    public sealed virtual void Deactivate(DeactivationReason deactivationReason, Nullable`1<CancellationToken> cancellationToken);
    public sealed virtual Task get_Deactivated();
    [CompilerGeneratedAttribute]
private void <System.IDisposable.Dispose>b__46_0();
    [CompilerGeneratedAttribute]
private void <System.IDisposable.Dispose>b__46_1();
    [CompilerGeneratedAttribute]
private void <System.IDisposable.Dispose>b__46_2();
    [CompilerGeneratedAttribute]
private Task <Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate>g__OnStart|49_0(CancellationToken cancellation);
    [AsyncStateMachineAttribute("Orleans.Runtime.HostedClient/<<Orleans-ILifecycleParticipant<Orleans-Runtime-ISiloLifecycle>-Participate>g__OnStop|49_1>d")]
[CompilerGeneratedAttribute]
private Task <Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate>g__OnStop|49_1(CancellationToken cancellation);
}
internal interface Orleans.Runtime.IActivationCollector {
    public abstract virtual void ScheduleCollection(ActivationData item);
    public abstract virtual bool TryRescheduleCollection(ActivationData item);
}
internal interface Orleans.Runtime.IActivationLifecycleObserver {
    public abstract virtual void OnCreateActivation(IGrainContext grainContext);
    public abstract virtual void OnDestroyActivation(IGrainContext grainContext);
}
public interface Orleans.Runtime.IActivationWorkingSet {
    public int Count { get; }
    public abstract virtual int get_Count();
    public abstract virtual void OnActivated(IActivationWorkingSetMember member);
    public abstract virtual void OnActive(IActivationWorkingSetMember member);
    public abstract virtual void OnDeactivating(IActivationWorkingSetMember member);
    public abstract virtual void OnDeactivated(IActivationWorkingSetMember member);
}
public interface Orleans.Runtime.IActivationWorkingSetMember {
    public abstract virtual bool IsCandidateForRemoval(bool wouldRemove);
}
public interface Orleans.Runtime.IActivationWorkingSetObserver {
    public virtual void OnAdded(IActivationWorkingSetMember member);
    public virtual void OnActive(IActivationWorkingSetMember member);
    public virtual void OnIdle(IActivationWorkingSetMember member);
    public virtual void OnEvicted(IActivationWorkingSetMember member);
    public virtual void OnDeactivating(IActivationWorkingSetMember member);
    public virtual void OnDeactivated(IActivationWorkingSetMember member);
}
internal interface Orleans.Runtime.IAsyncTimer {
    public abstract virtual Task`1<bool> NextTick(Nullable`1<TimeSpan> overrideDelay);
}
internal interface Orleans.Runtime.IAsyncTimerFactory {
    public abstract virtual IAsyncTimer Create(TimeSpan period, string name);
}
public interface Orleans.Runtime.IAttributeToFactoryMapper`1 {
    public abstract virtual Factory`2<IGrainContext, object> GetFactory(ParameterInfo parameter, TMetadata metadata);
}
public interface Orleans.Runtime.IClusterMembershipService {
    public ClusterMembershipSnapshot CurrentSnapshot { get; }
    public IAsyncEnumerable`1<ClusterMembershipSnapshot> MembershipUpdates { get; }
    public abstract virtual ClusterMembershipSnapshot get_CurrentSnapshot();
    public abstract virtual IAsyncEnumerable`1<ClusterMembershipSnapshot> get_MembershipUpdates();
    public abstract virtual ValueTask Refresh(MembershipVersion minimumVersion);
    public abstract virtual Task`1<bool> TryKill(SiloAddress siloAddress);
}
public interface Orleans.Runtime.IConfigureGrainContext {
    public abstract virtual void Configure(IGrainContext context);
}
public interface Orleans.Runtime.IConfigureGrainContextProvider {
    public abstract virtual bool TryGetConfigurator(GrainType grainType, GrainProperties properties, IConfigureGrainContext& configurator);
}
public interface Orleans.Runtime.IConfigureGrainTypeComponents {
    public abstract virtual void Configure(GrainType grainType, GrainProperties properties, GrainTypeSharedContext shared);
}
internal interface Orleans.Runtime.IConnectedClientCollection {
    public long Version { get; }
    public abstract virtual long get_Version();
    public abstract virtual List`1<GrainId> GetConnectedClientIds();
}
public interface Orleans.Runtime.IFatalErrorHandler {
    public abstract virtual bool IsUnexpected(Exception exception);
    public abstract virtual void OnFatalException(object sender, string context, Exception exception);
}
public interface Orleans.Runtime.IGrainActivator {
    public abstract virtual object CreateInstance(IGrainContext context);
    public abstract virtual ValueTask DisposeInstance(IGrainContext context, object instance);
}
public interface Orleans.Runtime.IGrainContextActivator {
    public abstract virtual IGrainContext CreateContext(GrainAddress address);
}
public interface Orleans.Runtime.IGrainContextActivatorProvider {
    public abstract virtual bool TryGet(GrainType grainType, IGrainContextActivator& activator);
}
public interface Orleans.Runtime.IGrainServiceFactory {
    public abstract virtual T CastToGrainServiceReference(GrainReference grainReference);
}
public interface Orleans.Runtime.IHealthCheckParticipant {
}
internal class Orleans.Runtime.IncomingRequestMonitor : object {
    private static TimeSpan DefaultAnalysisPeriod;
    private static TimeSpan InactiveGrainIdleness;
    private IAsyncTimer _scanPeriodTimer;
    private IServiceProvider _serviceProvider;
    private MessageFactory _messageFactory;
    private IOptionsMonitor`1<SiloMessagingOptions> _messagingOptions;
    private ConcurrentDictionary`2<ActivationData, bool> _recentlyUsedActivations;
    private bool _enabled;
    private Task _runTask;
    public IncomingRequestMonitor(IAsyncTimerFactory asyncTimerFactory, IServiceProvider serviceProvider, MessageFactory messageFactory, IOptionsMonitor`1<SiloMessagingOptions> siloMessagingOptions);
    private static IncomingRequestMonitor();
    public void MarkRecentlyUsed(ActivationData activation);
    public sealed virtual void OnActive(IActivationWorkingSetMember member);
    public sealed virtual void OnIdle(IActivationWorkingSetMember member);
    public sealed virtual void OnEvicted(IActivationWorkingSetMember member);
    private sealed virtual override void Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate(ISiloLifecycle lifecycle);
    [AsyncStateMachineAttribute("Orleans.Runtime.IncomingRequestMonitor/<Run>d__15")]
private Task Run();
    [CompilerGeneratedAttribute]
private Task <Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate>b__14_0(CancellationToken ct);
    [AsyncStateMachineAttribute("Orleans.Runtime.IncomingRequestMonitor/<<Orleans-ILifecycleParticipant<Orleans-Runtime-ISiloLifecycle>-Participate>b__14_1>d")]
[CompilerGeneratedAttribute]
private Task <Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate>b__14_1(CancellationToken ct);
}
internal class Orleans.Runtime.InsideRuntimeClient : object {
    private ILogger logger;
    private ILogger invokeExceptionLogger;
    private ILoggerFactory loggerFactory;
    private SiloMessagingOptions messagingOptions;
    private List`1<IDisposable> disposables;
    private ConcurrentDictionary`2<ValueTuple`2<GrainId, CorrelationId>, CallbackData> callbacks;
    private SharedCallbackData sharedCallbackData;
    private SharedCallbackData systemSharedCallbackData;
    private SafeTimer callbackTimer;
    private GrainLocator grainLocator;
    private Catalog catalog;
    private MessageCenter messageCenter;
    private List`1<IIncomingGrainCallFilter> grainCallFilters;
    private DeepCopier _deepCopier;
    private InterfaceToImplementationMappingCache interfaceToImplementationMapping;
    private HostedClient hostedClient;
    private MessageFactory messageFactory;
    private IGrainReferenceRuntime grainReferenceRuntime;
    private MessagingTrace messagingTrace;
    private DeepCopier`1<Response> responseCopier;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private SiloAddress <MySilo>k__BackingField;
    [CompilerGeneratedAttribute]
private GrainFactory <ConcreteGrainFactory>k__BackingField;
    private static Lazy`1<Func`2<Exception, Exception>> prepForRemotingLazy;
    private HostedClient HostedClient { get; }
    public IServiceProvider ServiceProvider { get; }
    public IInternalGrainFactory InternalGrainFactory { get; }
    private SiloAddress MySilo { get; }
    public GrainFactory ConcreteGrainFactory { get; }
    private Catalog Catalog { get; }
    private GrainLocator GrainLocator { get; }
    private List`1<IIncomingGrainCallFilter> GrainCallFilters { get; }
    private MessageCenter MessageCenter { get; }
    public IGrainReferenceRuntime GrainReferenceRuntime { get; }
    public string CurrentActivationIdentity { get; }
    public InsideRuntimeClient(ILocalSiloDetails siloDetails, IServiceProvider serviceProvider, MessageFactory messageFactory, ILoggerFactory loggerFactory, IOptions`1<SiloMessagingOptions> messagingOptions, MessagingTrace messagingTrace, GrainReferenceActivator referenceActivator, GrainInterfaceTypeResolver interfaceIdResolver, GrainInterfaceTypeToGrainTypeResolver interfaceToTypeResolver, DeepCopier deepCopier);
    private static InsideRuntimeClient();
    private HostedClient get_HostedClient();
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ServiceProvider();
    public sealed virtual IInternalGrainFactory get_InternalGrainFactory();
    [CompilerGeneratedAttribute]
private SiloAddress get_MySilo();
    [CompilerGeneratedAttribute]
public GrainFactory get_ConcreteGrainFactory();
    private Catalog get_Catalog();
    private GrainLocator get_GrainLocator();
    private List`1<IIncomingGrainCallFilter> get_GrainCallFilters();
    private MessageCenter get_MessageCenter();
    public sealed virtual IGrainReferenceRuntime get_GrainReferenceRuntime();
    public sealed virtual void SendRequest(GrainReference target, IInvokable request, IResponseCompletionSource context, InvokeMethodOptions options);
    public sealed virtual void SendResponse(Message request, Response response);
    private void UnregisterCallback(GrainId grainId, CorrelationId correlationId);
    public void SniffIncomingMessage(Message message);
    [AsyncStateMachineAttribute("Orleans.Runtime.InsideRuntimeClient/<Invoke>d__48")]
public Task Invoke(IGrainContext target, Message message);
    private void SafeSendResponse(Message message, Response response);
    private static Func`2<Exception, Exception> CreateExceptionPrepForRemotingMethod();
    private static Exception PrepareForRemoting(Exception exception);
    private void SafeSendExceptionResponse(Message message, Exception ex);
    public sealed virtual void ReceiveResponse(Message message);
    public sealed virtual string get_CurrentActivationIdentity();
    public sealed virtual TimeSpan GetResponseTimeout();
    public sealed virtual void SetResponseTimeout(TimeSpan timeout);
    public sealed virtual IAddressable CreateObjectReference(IAddressable obj);
    public sealed virtual void DeleteObjectReference(IAddressable obj);
    private Task OnRuntimeInitializeStop(CancellationToken tc);
    private Task OnRuntimeInitializeStart(CancellationToken tc);
    public sealed virtual void BreakOutstandingMessagesToDeadSilo(SiloAddress deadSilo);
    public sealed virtual void Participate(ISiloLifecycle lifecycle);
    private void OnCallbackExpiryTick(object state);
    [CompilerGeneratedAttribute]
private void <.ctor>b__22_0(Message msg);
    [CompilerGeneratedAttribute]
private void <.ctor>b__22_1(Message msg);
}
internal class Orleans.Runtime.InternalClusterClient : object {
    private IRuntimeClient runtimeClient;
    private IInternalGrainFactory grainFactory;
    public IGrainFactory GrainFactory { get; }
    public IServiceProvider ServiceProvider { get; }
    public InternalClusterClient(IRuntimeClient runtimeClient, IInternalGrainFactory grainFactory);
    public IGrainFactory get_GrainFactory();
    public sealed virtual IServiceProvider get_ServiceProvider();
    public sealed virtual TGrainInterface GetGrain(Guid primaryKey, string grainClassNamePrefix);
    public sealed virtual TGrainInterface GetGrain(long primaryKey, string grainClassNamePrefix);
    public sealed virtual TGrainInterface GetGrain(string primaryKey, string grainClassNamePrefix);
    public sealed virtual TGrainInterface GetGrain(Guid primaryKey, string keyExtension, string grainClassNamePrefix);
    public sealed virtual TGrainInterface GetGrain(long primaryKey, string keyExtension, string grainClassNamePrefix);
    public sealed virtual TGrainObserverInterface CreateObjectReference(IGrainObserver obj);
    public sealed virtual void DeleteObjectReference(IGrainObserver obj);
    public sealed virtual TGrainObserverInterface CreateObjectReference(IAddressable obj);
    private sealed virtual override TGrainInterface Orleans.IInternalGrainFactory.GetSystemTarget(GrainType grainType, SiloAddress destination);
    private sealed virtual override TGrainInterface Orleans.IInternalGrainFactory.GetSystemTarget(GrainId grainId);
    private sealed virtual override TGrainInterface Orleans.IInternalGrainFactory.Cast(IAddressable grain);
    private sealed virtual override object Orleans.IInternalGrainFactory.Cast(IAddressable grain, Type interfaceType);
    private sealed virtual override TGrainInterface Orleans.IGrainFactory.GetGrain(GrainId grainId);
    private sealed virtual override IAddressable Orleans.IGrainFactory.GetGrain(GrainId grainId);
    public sealed virtual IGrain GetGrain(Type grainInterfaceType, Guid grainPrimaryKey);
    public sealed virtual IGrain GetGrain(Type grainInterfaceType, long grainPrimaryKey);
    public sealed virtual IGrain GetGrain(Type grainInterfaceType, string grainPrimaryKey);
    public sealed virtual IGrain GetGrain(Type grainInterfaceType, Guid grainPrimaryKey, string keyExtension);
    public sealed virtual IGrain GetGrain(Type grainInterfaceType, long grainPrimaryKey, string keyExtension);
    public sealed virtual IAddressable GetGrain(GrainId grainId, GrainInterfaceType interfaceId);
}
internal class Orleans.Runtime.InternalGrainRuntime : object {
    [CompilerGeneratedAttribute]
private InsideRuntimeClient <RuntimeClient>k__BackingField;
    [CompilerGeneratedAttribute]
private MessageCenter <MessageCenter>k__BackingField;
    [CompilerGeneratedAttribute]
private Catalog <Catalog>k__BackingField;
    [CompilerGeneratedAttribute]
private GrainVersionManifest <GrainVersionManifest>k__BackingField;
    [CompilerGeneratedAttribute]
private RuntimeMessagingTrace <MessagingTrace>k__BackingField;
    [CompilerGeneratedAttribute]
private CompatibilityDirectorManager <CompatibilityDirectorManager>k__BackingField;
    [CompilerGeneratedAttribute]
private GrainLocator <GrainLocator>k__BackingField;
    [CompilerGeneratedAttribute]
private IOptions`1<GrainCollectionOptions> <CollectionOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private ILocalGrainDirectory <LocalGrainDirectory>k__BackingField;
    [CompilerGeneratedAttribute]
private IActivationWorkingSet <ActivationWorkingSet>k__BackingField;
    public InsideRuntimeClient RuntimeClient { get; }
    public MessageCenter MessageCenter { get; }
    public Catalog Catalog { get; }
    public GrainVersionManifest GrainVersionManifest { get; }
    public RuntimeMessagingTrace MessagingTrace { get; }
    public CompatibilityDirectorManager CompatibilityDirectorManager { get; }
    public GrainLocator GrainLocator { get; }
    public IOptions`1<GrainCollectionOptions> CollectionOptions { get; }
    public ILocalGrainDirectory LocalGrainDirectory { get; }
    public IActivationWorkingSet ActivationWorkingSet { get; }
    public InternalGrainRuntime(MessageCenter messageCenter, Catalog catalog, GrainVersionManifest versionManifest, RuntimeMessagingTrace messagingTrace, GrainLocator grainLocator, CompatibilityDirectorManager compatibilityDirectorManager, IOptions`1<GrainCollectionOptions> collectionOptions, ILocalGrainDirectory localGrainDirectory, IActivationWorkingSet activationWorkingSet);
    [CompilerGeneratedAttribute]
public InsideRuntimeClient get_RuntimeClient();
    [CompilerGeneratedAttribute]
public MessageCenter get_MessageCenter();
    [CompilerGeneratedAttribute]
public Catalog get_Catalog();
    [CompilerGeneratedAttribute]
public GrainVersionManifest get_GrainVersionManifest();
    [CompilerGeneratedAttribute]
public RuntimeMessagingTrace get_MessagingTrace();
    [CompilerGeneratedAttribute]
public CompatibilityDirectorManager get_CompatibilityDirectorManager();
    [CompilerGeneratedAttribute]
public GrainLocator get_GrainLocator();
    [CompilerGeneratedAttribute]
public IOptions`1<GrainCollectionOptions> get_CollectionOptions();
    [CompilerGeneratedAttribute]
public ILocalGrainDirectory get_LocalGrainDirectory();
    [CompilerGeneratedAttribute]
public IActivationWorkingSet get_ActivationWorkingSet();
}
public interface Orleans.Runtime.IPersistentState`1 {
}
public interface Orleans.Runtime.IPersistentStateConfiguration {
    public string StateName { get; }
    public string StorageName { get; }
    public abstract virtual string get_StateName();
    public abstract virtual string get_StorageName();
}
public interface Orleans.Runtime.IPersistentStateFactory {
    public abstract virtual IPersistentState`1<TState> Create(IGrainContext context, IPersistentStateConfiguration config);
}
[NullableContextAttribute("1")]
internal interface Orleans.Runtime.IRemoteGrainDirectory {
    public abstract virtual Task RegisterMany(List`1<GrainAddress> addresses);
    public abstract virtual Task`1<List`1<AddressAndTag>> LookUpMany(List`1<ValueTuple`2<GrainId, int>> grainAndETagList);
    public abstract virtual Task RemoveHandoffPartition(SiloAddress source);
    public abstract virtual Task AcceptSplitPartition(List`1<GrainAddress> singleActivations);
}
public interface Orleans.Runtime.ISiloLifecycle {
    public int HighestCompletedStage { get; }
    public int LowestStoppedStage { get; }
    public abstract virtual int get_HighestCompletedStage();
    public abstract virtual int get_LowestStoppedStage();
}
public interface Orleans.Runtime.ISiloLifecycleSubject {
}
internal interface Orleans.Runtime.ISiloManifestSystemTarget {
    public abstract virtual ValueTask`1<GrainManifest> GetSiloManifest();
}
internal interface Orleans.Runtime.ISiloStatisticsChangeListener {
    public abstract virtual void SiloStatisticsChangeNotification(SiloAddress updatedSilo, SiloRuntimeStatistics newStats);
    public abstract virtual void RemoveSilo(SiloAddress removedSilo);
}
public interface Orleans.Runtime.ISiloStatusListener {
    public abstract virtual void SiloStatusChangeNotification(SiloAddress updatedSilo, SiloStatus status);
}
public interface Orleans.Runtime.ISiloStatusOracle {
    public SiloStatus CurrentStatus { get; }
    public string SiloName { get; }
    public SiloAddress SiloAddress { get; }
    public abstract virtual SiloStatus get_CurrentStatus();
    public abstract virtual string get_SiloName();
    public abstract virtual SiloAddress get_SiloAddress();
    public abstract virtual SiloStatus GetApproximateSiloStatus(SiloAddress siloAddress);
    public abstract virtual Dictionary`2<SiloAddress, SiloStatus> GetApproximateSiloStatuses(bool onlyActive);
    public abstract virtual bool TryGetSiloName(SiloAddress siloAddress, String& siloName);
    public abstract virtual bool IsFunctionalDirectory(SiloAddress siloAddress);
    public abstract virtual bool IsDeadSilo(SiloAddress silo);
    public abstract virtual bool SubscribeToSiloStatusEvents(ISiloStatusListener observer);
    public abstract virtual bool UnSubscribeFromSiloStatusEvents(ISiloStatusListener observer);
}
public interface Orleans.Runtime.IStartupTask {
    public abstract virtual Task Execute(CancellationToken cancellationToken);
}
internal class Orleans.Runtime.LifecycleSchedulingSystemTarget : SystemTarget {
    public LifecycleSchedulingSystemTarget(ILocalSiloDetails localSiloDetails, ILoggerFactory loggerFactory);
}
internal class Orleans.Runtime.LocalSiloDetails : object {
    private Lazy`1<SiloAddress> siloAddressLazy;
    private Lazy`1<SiloAddress> gatewayAddressLazy;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ClusterId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DnsHostName>k__BackingField;
    public string Name { get; }
    public string ClusterId { get; }
    public string DnsHostName { get; }
    public SiloAddress SiloAddress { get; }
    public SiloAddress GatewayAddress { get; }
    public LocalSiloDetails(IOptions`1<SiloOptions> siloOptions, IOptions`1<ClusterOptions> clusterOptions, IOptions`1<EndpointOptions> siloEndpointOptions);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual string get_ClusterId();
    [CompilerGeneratedAttribute]
public sealed virtual string get_DnsHostName();
    public sealed virtual SiloAddress get_SiloAddress();
    public sealed virtual SiloAddress get_GatewayAddress();
}
internal class Orleans.Runtime.Management.ManagementGrain : Grain {
    private IInternalGrainFactory internalGrainFactory;
    private ISiloStatusOracle siloStatusOracle;
    private IVersionStore versionStore;
    private MembershipTableManager membershipTableManager;
    private GrainManifest siloManifest;
    private ClusterManifest clusterManifest;
    private ILogger logger;
    private Catalog catalog;
    private GrainLocator grainLocator;
    public ManagementGrain(IInternalGrainFactory internalGrainFactory, ISiloStatusOracle siloStatusOracle, IVersionStore versionStore, ILogger`1<ManagementGrain> logger, MembershipTableManager membershipTableManager, IClusterManifestProvider clusterManifestProvider, Catalog catalog, GrainLocator grainLocator);
    [AsyncStateMachineAttribute("Orleans.Runtime.Management.ManagementGrain/<GetHosts>d__10")]
public sealed virtual Task`1<Dictionary`2<SiloAddress, SiloStatus>> GetHosts(bool onlyActive);
    [AsyncStateMachineAttribute("Orleans.Runtime.Management.ManagementGrain/<GetDetailedHosts>d__11")]
public sealed virtual Task`1<MembershipEntry[]> GetDetailedHosts(bool onlyActive);
    public sealed virtual Task ForceGarbageCollection(SiloAddress[] siloAddresses);
    public sealed virtual Task ForceActivationCollection(SiloAddress[] siloAddresses, TimeSpan ageLimit);
    [AsyncStateMachineAttribute("Orleans.Runtime.Management.ManagementGrain/<ForceActivationCollection>d__14")]
public sealed virtual Task ForceActivationCollection(TimeSpan ageLimit);
    public sealed virtual Task ForceRuntimeStatisticsCollection(SiloAddress[] siloAddresses);
    public sealed virtual Task`1<SiloRuntimeStatistics[]> GetRuntimeStatistics(SiloAddress[] siloAddresses);
    [AsyncStateMachineAttribute("Orleans.Runtime.Management.ManagementGrain/<GetSimpleGrainStatistics>d__17")]
public sealed virtual Task`1<SimpleGrainStatistic[]> GetSimpleGrainStatistics(SiloAddress[] hostsIds);
    [AsyncStateMachineAttribute("Orleans.Runtime.Management.ManagementGrain/<GetSimpleGrainStatistics>d__18")]
public sealed virtual Task`1<SimpleGrainStatistic[]> GetSimpleGrainStatistics();
    [AsyncStateMachineAttribute("Orleans.Runtime.Management.ManagementGrain/<GetDetailedGrainStatistics>d__19")]
public sealed virtual Task`1<DetailedGrainStatistic[]> GetDetailedGrainStatistics(String[] types, SiloAddress[] hostsIds);
    [AsyncStateMachineAttribute("Orleans.Runtime.Management.ManagementGrain/<GetGrainActivationCount>d__20")]
public sealed virtual Task`1<int> GetGrainActivationCount(GrainReference grainReference);
    [AsyncStateMachineAttribute("Orleans.Runtime.Management.ManagementGrain/<SetCompatibilityStrategy>d__21")]
public sealed virtual Task SetCompatibilityStrategy(CompatibilityStrategy strategy);
    [AsyncStateMachineAttribute("Orleans.Runtime.Management.ManagementGrain/<SetSelectorStrategy>d__22")]
public sealed virtual Task SetSelectorStrategy(VersionSelectorStrategy strategy);
    [AsyncStateMachineAttribute("Orleans.Runtime.Management.ManagementGrain/<SetCompatibilityStrategy>d__23")]
public sealed virtual Task SetCompatibilityStrategy(GrainInterfaceType interfaceType, CompatibilityStrategy strategy);
    [AsyncStateMachineAttribute("Orleans.Runtime.Management.ManagementGrain/<SetSelectorStrategy>d__24")]
public sealed virtual Task SetSelectorStrategy(GrainInterfaceType interfaceType, VersionSelectorStrategy strategy);
    [AsyncStateMachineAttribute("Orleans.Runtime.Management.ManagementGrain/<GetTotalActivationCount>d__25")]
public sealed virtual Task`1<int> GetTotalActivationCount();
    public sealed virtual Task`1<Object[]> SendControlCommandToProvider(string providerTypeFullName, string providerName, int command, object arg);
    public sealed virtual ValueTask`1<SiloAddress> GetActivationAddress(IAddressable reference);
    private void CheckIfIsExistingInterface(GrainInterfaceType interfaceType);
    [AsyncStateMachineAttribute("Orleans.Runtime.Management.ManagementGrain/<SetStrategy>d__29")]
private Task SetStrategy(Func`2<IVersionStore, Task> storeFunc, Func`2<ISiloControl, Task> applyFunc);
    [AsyncStateMachineAttribute("Orleans.Runtime.Management.ManagementGrain/<ExecutePerSiloCall>d__30")]
private Task`1<Object[]> ExecutePerSiloCall(Func`2<ISiloControl, Task`1<object>> action, string actionToLog);
    private SiloAddress[] GetSiloAddresses(SiloAddress[] silos);
    private List`1<Task> PerformPerSiloAction(SiloAddress[] siloAddresses, Func`2<SiloAddress, Task> perSiloAction);
    private ISiloControl GetSiloControlReference(SiloAddress silo);
    [AsyncStateMachineAttribute("Orleans.Runtime.Management.ManagementGrain/<GetActiveGrains>d__34")]
public sealed virtual ValueTask`1<List`1<GrainId>> GetActiveGrains(GrainType grainType);
    [CompilerGeneratedAttribute]
private Task <ForceGarbageCollection>b__12_0(SiloAddress s);
    [CompilerGeneratedAttribute]
private Task <ForceRuntimeStatisticsCollection>b__15_0(SiloAddress s);
    [CompilerGeneratedAttribute]
private Task`1<SimpleGrainStatistic[]> <GetSimpleGrainStatistics>b__17_0(SiloAddress s);
    [CompilerGeneratedAttribute]
internal static int <GetGrainActivationCount>g__CountActivations|20_1(DetailedGrainReport report);
    [AsyncStateMachineAttribute("Orleans.Runtime.Management.ManagementGrain/<<GetActivationAddress>g__LookupAsync|27_0>d")]
[CompilerGeneratedAttribute]
internal static ValueTask`1<SiloAddress> <GetActivationAddress>g__LookupAsync|27_0(GrainId grainId, GrainLocator grainLocator);
}
internal class Orleans.Runtime.MayInterleaveConfigurator : object {
    private Func`2<Message, bool> _mayInterleavePredicate;
    public MayInterleaveConfigurator(Func`2<Message, bool> mayInterleavePredicate);
    public sealed virtual void Configure(IGrainContext context);
}
internal class Orleans.Runtime.MayInterleaveConfiguratorProvider : object {
    private GrainClassMap _grainClassMap;
    public MayInterleaveConfiguratorProvider(GrainClassMap grainClassMap);
    public sealed virtual bool TryGetConfigurator(GrainType grainType, GrainProperties properties, IConfigureGrainContext& configurator);
    private static Func`2<IInvokable, bool> GetMayInterleavePredicate(Type grainType);
}
internal class Orleans.Runtime.MembershipService.ClusterHealthMonitor : object {
    private CancellationTokenSource shutdownCancellation;
    private ILocalSiloDetails localSiloDetails;
    private IServiceProvider serviceProvider;
    private MembershipTableManager membershipService;
    private ILogger`1<ClusterHealthMonitor> log;
    private IFatalErrorHandler fatalErrorHandler;
    private IOptionsMonitor`1<ClusterMembershipOptions> clusterMembershipOptions;
    private ImmutableDictionary`2<SiloAddress, SiloHealthMonitor> monitoredSilos;
    private MembershipVersion observedMembershipVersion;
    private Func`2<SiloAddress, SiloHealthMonitor> createMonitor;
    private Func`3<SiloHealthMonitor, ProbeResult, Task> onProbeResult;
    private ImmutableDictionary`2<SiloAddress, SiloHealthMonitor> Orleans.Runtime.MembershipService.ClusterHealthMonitor.ITestAccessor.MonitoredSilos { get; private set; }
    private Func`2<SiloAddress, SiloHealthMonitor> Orleans.Runtime.MembershipService.ClusterHealthMonitor.ITestAccessor.CreateMonitor { get; private set; }
    private MembershipVersion Orleans.Runtime.MembershipService.ClusterHealthMonitor.ITestAccessor.ObservedVersion { get; }
    private Func`3<SiloHealthMonitor, ProbeResult, Task> Orleans.Runtime.MembershipService.ClusterHealthMonitor.ITestAccessor.OnProbeResult { get; private set; }
    public ImmutableDictionary`2<SiloAddress, SiloHealthMonitor> SiloMonitors { get; }
    public ClusterHealthMonitor(ILocalSiloDetails localSiloDetails, MembershipTableManager membershipService, ILogger`1<ClusterHealthMonitor> log, IOptionsMonitor`1<ClusterMembershipOptions> clusterMembershipOptions, IFatalErrorHandler fatalErrorHandler, IServiceProvider serviceProvider);
    private sealed virtual override ImmutableDictionary`2<SiloAddress, SiloHealthMonitor> Orleans.Runtime.MembershipService.ClusterHealthMonitor.ITestAccessor.get_MonitoredSilos();
    private sealed virtual override void Orleans.Runtime.MembershipService.ClusterHealthMonitor.ITestAccessor.set_MonitoredSilos(ImmutableDictionary`2<SiloAddress, SiloHealthMonitor> value);
    private sealed virtual override Func`2<SiloAddress, SiloHealthMonitor> Orleans.Runtime.MembershipService.ClusterHealthMonitor.ITestAccessor.get_CreateMonitor();
    private sealed virtual override void Orleans.Runtime.MembershipService.ClusterHealthMonitor.ITestAccessor.set_CreateMonitor(Func`2<SiloAddress, SiloHealthMonitor> value);
    private sealed virtual override MembershipVersion Orleans.Runtime.MembershipService.ClusterHealthMonitor.ITestAccessor.get_ObservedVersion();
    private sealed virtual override Func`3<SiloHealthMonitor, ProbeResult, Task> Orleans.Runtime.MembershipService.ClusterHealthMonitor.ITestAccessor.get_OnProbeResult();
    private sealed virtual override void Orleans.Runtime.MembershipService.ClusterHealthMonitor.ITestAccessor.set_OnProbeResult(Func`3<SiloHealthMonitor, ProbeResult, Task> value);
    public ImmutableDictionary`2<SiloAddress, SiloHealthMonitor> get_SiloMonitors();
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.ClusterHealthMonitor/<ProcessMembershipUpdates>d__26")]
private Task ProcessMembershipUpdates();
    private ImmutableDictionary`2<SiloAddress, SiloHealthMonitor> UpdateMonitoredSilos(MembershipTableSnapshot membership, ImmutableDictionary`2<SiloAddress, SiloHealthMonitor> monitoredSilos, DateTime now);
    private sealed virtual override void Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate(ISiloLifecycle lifecycle);
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.ClusterHealthMonitor/<OnProbeResultInternal>d__29")]
private Task OnProbeResultInternal(SiloHealthMonitor monitor, ProbeResult probeResult);
    private sealed virtual override bool Orleans.Runtime.IHealthCheckable.CheckHealth(DateTime lastCheckTime, String& reason);
    [CompilerGeneratedAttribute]
internal static bool <UpdateMonitoredSilos>g__AreTheSame|27_2(ImmutableDictionary`2<SiloAddress, T> first, ImmutableDictionary`2<SiloAddress, T> second);
    [CompilerGeneratedAttribute]
internal static bool <UpdateMonitoredSilos>g__IsFunctionalForMembership|27_3(SiloStatus status);
}
internal interface Orleans.Runtime.MembershipService.ILocalSiloHealthMonitor {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> Complaints { get; }
    public abstract virtual int GetLocalHealthDegradationScore(DateTime checkTime);
    public abstract virtual ImmutableArray`1<string> get_Complaints();
}
internal interface Orleans.Runtime.MembershipService.IMembershipGossiper {
    public abstract virtual Task GossipToRemoteSilos(List`1<SiloAddress> gossipPartners, MembershipTableSnapshot snapshot, SiloAddress updatedSilo, SiloStatus updatedStatus);
}
internal class Orleans.Runtime.MembershipService.InMemoryMembershipTable : object {
    private Dictionary`2<SiloAddress, Tuple`2<MembershipEntry, string>> siloTable;
    private TableVersion tableVersion;
    private long lastETagCounter;
    private DeepCopier deepCopier;
    public InMemoryMembershipTable(DeepCopier deepCopier);
    public MembershipTableData Read(SiloAddress key);
    public MembershipTableData ReadAll();
    public TableVersion ReadTableVersion();
    public bool Insert(MembershipEntry entry, TableVersion version);
    public bool Update(MembershipEntry entry, string etag, TableVersion version);
    public void UpdateIAmAlive(MembershipEntry entry);
    public virtual string ToString();
    private string NewETag();
    [CompilerGeneratedAttribute]
private Tuple`2<MembershipEntry, string> <ReadAll>b__6_0(Tuple`2<MembershipEntry, string> tuple);
}
internal interface Orleans.Runtime.MembershipService.IRemoteSiloProber {
    public abstract virtual Task Probe(SiloAddress silo, int probeNumber);
    public abstract virtual Task`1<IndirectProbeResponse> ProbeIndirectly(SiloAddress intermediary, SiloAddress target, TimeSpan probeTimeout, int probeNumber);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Orleans.Runtime.MembershipService.LocalSiloHealthMonitor : object {
    private static int MaxScore;
    private List`1<IHealthCheckParticipant> _healthCheckParticipants;
    private MembershipTableManager _membershipTableManager;
    private ClusterHealthMonitor _clusterHealthMonitor;
    private ILocalSiloDetails _localSiloDetails;
    private ILogger`1<LocalSiloHealthMonitor> _log;
    private ClusterMembershipOptions _clusterMembershipOptions;
    private IAsyncTimer _degradationCheckTimer;
    private ThreadPoolMonitor _threadPoolMonitor;
    private ProbeRequestMonitor _probeRequestMonitor;
    private ValueStopwatch _clusteredDuration;
    [NullableAttribute("2")]
private Task _runTask;
    private bool _isActive;
    private DateTime _lastHealthCheckTime;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ImmutableArray`1<string> <Complaints>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public ImmutableArray`1<string> Complaints { get; private set; }
    public LocalSiloHealthMonitor(IEnumerable`1<IHealthCheckParticipant> healthCheckParticipants, MembershipTableManager membershipTableManager, ConnectionManager connectionManager, ClusterHealthMonitor clusterHealthMonitor, ILocalSiloDetails localSiloDetails, ILogger`1<LocalSiloHealthMonitor> log, IOptions`1<ClusterMembershipOptions> clusterMembershipOptions, IAsyncTimerFactory timerFactory, ILoggerFactory loggerFactory, ProbeRequestMonitor probeRequestMonitor);
    [CompilerGeneratedAttribute]
public sealed virtual ImmutableArray`1<string> get_Complaints();
    [CompilerGeneratedAttribute]
private void set_Complaints(ImmutableArray`1<string> value);
    public sealed virtual int GetLocalHealthDegradationScore(DateTime checkTime);
    public int GetLocalHealthDegradationScore(DateTime checkTime, List`1<string> complaints);
    private int CheckThreadPoolQueueDelay(DateTime checkTime, List`1<string> complaints);
    private int CheckSuspectingNodes(DateTime now, List`1<string> complaints);
    private int CheckReceivedProbeRequests(DateTime now, List`1<string> complaints);
    private int CheckReceivedProbeResponses(DateTime now, List`1<string> complaints);
    private int CheckLocalHealthCheckParticipants(DateTime now, List`1<string> complaints);
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.LocalSiloHealthMonitor/<Run>d__26")]
private Task Run();
    public sealed virtual void Participate(ISiloLifecycle lifecycle);
    public sealed virtual Task OnStart(CancellationToken ct);
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.LocalSiloHealthMonitor/<OnStop>d__29")]
public sealed virtual Task OnStop(CancellationToken ct);
}
internal class Orleans.Runtime.MembershipService.MembershipAgent : object {
    private CancellationTokenSource cancellation;
    private MembershipTableManager tableManager;
    private ILocalSiloDetails localSilo;
    private IFatalErrorHandler fatalErrorHandler;
    private ClusterMembershipOptions clusterMembershipOptions;
    private ILogger`1<MembershipAgent> log;
    private IRemoteSiloProber siloProber;
    private IAsyncTimer iAmAliveTimer;
    private Func`1<DateTime> getUtcDateTime;
    [CompilerGeneratedAttribute]
private Action <Orleans.Runtime.MembershipService.MembershipAgent.ITestAccessor.OnUpdateIAmAlive>k__BackingField;
    private Action Orleans.Runtime.MembershipService.MembershipAgent.ITestAccessor.OnUpdateIAmAlive { get; private set; }
    private Func`1<DateTime> Orleans.Runtime.MembershipService.MembershipAgent.ITestAccessor.GetDateTime { get; private set; }
    public MembershipAgent(MembershipTableManager tableManager, ILocalSiloDetails localSilo, IFatalErrorHandler fatalErrorHandler, IOptions`1<ClusterMembershipOptions> options, ILogger`1<MembershipAgent> log, IAsyncTimerFactory timerFactory, IRemoteSiloProber siloProber);
    [CompilerGeneratedAttribute]
private sealed virtual override Action Orleans.Runtime.MembershipService.MembershipAgent.ITestAccessor.get_OnUpdateIAmAlive();
    [CompilerGeneratedAttribute]
private sealed virtual override void Orleans.Runtime.MembershipService.MembershipAgent.ITestAccessor.set_OnUpdateIAmAlive(Action value);
    private sealed virtual override Func`1<DateTime> Orleans.Runtime.MembershipService.MembershipAgent.ITestAccessor.get_GetDateTime();
    private sealed virtual override void Orleans.Runtime.MembershipService.MembershipAgent.ITestAccessor.set_GetDateTime(Func`1<DateTime> value);
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipAgent/<UpdateIAmAlive>d__18")]
private Task UpdateIAmAlive();
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipAgent/<BecomeActive>d__19")]
private Task BecomeActive();
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipAgent/<ValidateInitialConnectivity>d__20")]
private Task ValidateInitialConnectivity();
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipAgent/<BecomeJoining>d__21")]
private Task BecomeJoining();
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipAgent/<BecomeShuttingDown>d__22")]
private Task BecomeShuttingDown();
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipAgent/<BecomeStopping>d__23")]
private Task BecomeStopping();
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipAgent/<BecomeDead>d__24")]
private Task BecomeDead();
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipAgent/<UpdateStatus>d__25")]
private Task UpdateStatus(SiloStatus status);
    private sealed virtual override void Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate(ISiloLifecycle lifecycle);
    public sealed virtual void Dispose();
    private sealed virtual override bool Orleans.Runtime.IHealthCheckable.CheckHealth(DateTime lastCheckTime, String& reason);
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipAgent/<<ValidateInitialConnectivity>g__CheckClusterConnectivity|20_0>d")]
[CompilerGeneratedAttribute]
private Task`1<List`1<SiloAddress>> <ValidateInitialConnectivity>g__CheckClusterConnectivity|20_0(SiloAddress[] members);
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipAgent/<<ValidateInitialConnectivity>g__ProbeSilo|20_1>d")]
[CompilerGeneratedAttribute]
internal static Task`1<bool> <ValidateInitialConnectivity>g__ProbeSilo|20_1(IRemoteSiloProber siloProber, SiloAddress silo, TimeSpan timeout, ILogger log);
    [CompilerGeneratedAttribute]
internal static Task <Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate>g__OnRuntimeInitializeStart|26_0(CancellationToken ct);
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipAgent/<<Orleans-ILifecycleParticipant<Orleans-Runtime-ISiloLifecycle>-Participate>g__OnRuntimeInitializeStop|26_1>d")]
[CompilerGeneratedAttribute]
private Task <Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate>g__OnRuntimeInitializeStop|26_1(CancellationToken ct);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private Task <Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate>b__26_4();
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipAgent/<<Orleans-ILifecycleParticipant<Orleans-Runtime-ISiloLifecycle>-Participate>g__AfterRuntimeGrainServicesStart|26_2>d")]
[CompilerGeneratedAttribute]
private Task <Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate>g__AfterRuntimeGrainServicesStart|26_2(CancellationToken ct);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private Task <Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate>b__26_5();
    [CompilerGeneratedAttribute]
internal static Task <Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate>g__AfterRuntimeGrainServicesStop|26_3(CancellationToken ct);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private Task <Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate>b__26_8();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private Task <Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate>b__26_9();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private Task <Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate>b__26_10();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private Task <Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate>b__26_11();
}
internal class Orleans.Runtime.MembershipService.MembershipGossiper : object {
    private IServiceProvider serviceProvider;
    private ILogger`1<MembershipGossiper> log;
    public MembershipGossiper(IServiceProvider serviceProvider, ILogger`1<MembershipGossiper> log);
    public sealed virtual Task GossipToRemoteSilos(List`1<SiloAddress> gossipPartners, MembershipTableSnapshot snapshot, SiloAddress updatedSilo, SiloStatus updatedStatus);
}
internal class Orleans.Runtime.MembershipService.MembershipSystemTarget : SystemTarget {
    private MembershipTableManager membershipTableManager;
    private ILogger`1<MembershipSystemTarget> log;
    private IInternalGrainFactory grainFactory;
    public MembershipSystemTarget(MembershipTableManager membershipTableManager, ILocalSiloDetails localSiloDetails, ILoggerFactory loggerFactory, ILogger`1<MembershipSystemTarget> log, IInternalGrainFactory grainFactory);
    public sealed virtual Task Ping(int pingNumber);
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipSystemTarget/<SiloStatusChangeNotification>d__5")]
public sealed virtual Task SiloStatusChangeNotification(SiloAddress updatedSilo, SiloStatus status);
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipSystemTarget/<MembershipChangeNotification>d__6")]
public sealed virtual Task MembershipChangeNotification(MembershipTableSnapshot snapshot);
    public Task ProbeRemoteSilo(SiloAddress remoteSilo, int probeNumber);
    public Task`1<IndirectProbeResponse> ProbeRemoteSiloIndirectly(SiloAddress intermediary, SiloAddress target, TimeSpan probeTimeout, int probeNumber);
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipSystemTarget/<ProbeIndirectly>d__9")]
public sealed virtual Task`1<IndirectProbeResponse> ProbeIndirectly(SiloAddress target, TimeSpan probeTimeout, int probeNumber);
    public Task GossipToRemoteSilos(List`1<SiloAddress> gossipPartners, MembershipTableSnapshot snapshot, SiloAddress updatedSilo, SiloStatus updatedStatus);
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipSystemTarget/<GossipToRemoteSilo>d__11")]
private Task GossipToRemoteSilo(SiloAddress silo, MembershipTableSnapshot snapshot, SiloAddress updatedSilo, SiloStatus updatedStatus);
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipSystemTarget/<ReadTable>d__12")]
private Task ReadTable();
    private Task ProbeInternal(SiloAddress remoteSilo, int probeNumber);
}
internal class Orleans.Runtime.MembershipService.MembershipTableCleanupAgent : object {
    private ClusterMembershipOptions clusterMembershipOptions;
    private IMembershipTable membershipTableProvider;
    private ILogger`1<MembershipTableCleanupAgent> log;
    private IAsyncTimer cleanupDefunctSilosTimer;
    public MembershipTableCleanupAgent(IOptions`1<ClusterMembershipOptions> clusterMembershipOptions, IMembershipTable membershipTableProvider, ILogger`1<MembershipTableCleanupAgent> log, IAsyncTimerFactory timerFactory);
    public sealed virtual void Dispose();
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipTableCleanupAgent/<CleanupDefunctSilos>d__6")]
private Task CleanupDefunctSilos();
    private sealed virtual override void Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate(ISiloLifecycle lifecycle);
    private sealed virtual override bool Orleans.Runtime.IHealthCheckable.CheckHealth(DateTime lastCheckTime, String& reason);
}
[ExtensionAttribute]
internal static class Orleans.Runtime.MembershipService.MembershipTableEntryExtensions : object {
    [ExtensionAttribute]
public static Nullable`1<DateTime> HasMissedIAmAlivesSince(MembershipEntry entry, ClusterMembershipOptions options, DateTime time);
}
internal class Orleans.Runtime.MembershipService.MembershipTableManager : object {
    private static int NUM_CONDITIONAL_WRITE_CONTENTION_ATTEMPTS;
    private static int NUM_CONDITIONAL_WRITE_ERROR_ATTEMPTS;
    private static TimeSpan EXP_BACKOFF_ERROR_MIN;
    private static TimeSpan EXP_BACKOFF_CONTENTION_MIN;
    private static TimeSpan EXP_BACKOFF_ERROR_MAX;
    private static TimeSpan EXP_BACKOFF_CONTENTION_MAX;
    private static TimeSpan EXP_BACKOFF_STEP;
    private static TimeSpan GossipTimeout;
    private IFatalErrorHandler fatalErrorHandler;
    private IMembershipGossiper gossiper;
    private ILocalSiloDetails localSiloDetails;
    private IMembershipTable membershipTableProvider;
    private ILogger log;
    private ISiloLifecycle siloLifecycle;
    private ClusterMembershipOptions clusterMembershipOptions;
    private DateTime siloStartTime;
    private SiloAddress myAddress;
    private AsyncEnumerable`1<MembershipTableSnapshot> updates;
    private IAsyncTimer membershipUpdateTimer;
    private MembershipTableSnapshot snapshot;
    [CompilerGeneratedAttribute]
private Func`1<DateTime> <GetDateTimeUtcNow>k__BackingField;
    [CompilerGeneratedAttribute]
private SiloStatus <CurrentStatus>k__BackingField;
    private Task pendingRefresh;
    internal Func`1<DateTime> GetDateTimeUtcNow { get; internal set; }
    public MembershipTableSnapshot MembershipTableSnapshot { get; }
    public IAsyncEnumerable`1<MembershipTableSnapshot> MembershipTableUpdates { get; }
    public SiloStatus CurrentStatus { get; private set; }
    private bool IsStopping { get; }
    public MembershipTableManager(ILocalSiloDetails localSiloDetails, IOptions`1<ClusterMembershipOptions> clusterMembershipOptions, IMembershipTable membershipTable, IFatalErrorHandler fatalErrorHandler, IMembershipGossiper gossiper, ILogger`1<MembershipTableManager> log, IAsyncTimerFactory timerFactory, ISiloLifecycle siloLifecycle);
    private static MembershipTableManager();
    [CompilerGeneratedAttribute]
internal Func`1<DateTime> get_GetDateTimeUtcNow();
    [CompilerGeneratedAttribute]
internal void set_GetDateTimeUtcNow(Func`1<DateTime> value);
    public MembershipTableSnapshot get_MembershipTableSnapshot();
    public IAsyncEnumerable`1<MembershipTableSnapshot> get_MembershipTableUpdates();
    [CompilerGeneratedAttribute]
public SiloStatus get_CurrentStatus();
    [CompilerGeneratedAttribute]
private void set_CurrentStatus(SiloStatus value);
    private bool get_IsStopping();
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipTableManager/<Refresh>d__36")]
public Task Refresh();
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipTableManager/<RefreshFromSnapshot>d__37")]
public Task RefreshFromSnapshot(MembershipTableSnapshot snapshot);
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipTableManager/<RefreshInternal>d__38")]
private Task`1<bool> RefreshInternal(bool requireCleanup);
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipTableManager/<Start>d__39")]
private Task Start();
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipTableManager/<UpdateIAmAlive>d__40")]
public Task UpdateIAmAlive();
    private void DetectNodeMigration(MembershipTableSnapshot snapshot, string myHostname);
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipTableManager/<PeriodicallyRefreshMembershipTable>d__42")]
private Task PeriodicallyRefreshMembershipTable();
    private Task`1<bool> MembershipExecuteWithRetries(Func`2<int, Task`1<bool>> taskFunction, TimeSpan timeout);
    private Task`1<T> MembershipExecuteWithRetries(Func`2<int, Task`1<T>> taskFunction, TimeSpan timeout, Func`3<T, int, bool> retryValueFilter);
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipTableManager/<UpdateStatus>d__45")]
public Task UpdateStatus(SiloStatus status);
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipTableManager/<TryUpdateMyStatusGlobalOnce>d__46")]
private Task`1<bool> TryUpdateMyStatusGlobalOnce(SiloStatus newStatus);
    private ValueTuple`2<MembershipEntry, string> GetOrCreateLocalSiloEntry(MembershipTableData table, SiloStatus currentStatus);
    private MembershipEntry CreateLocalSiloEntry(SiloStatus currentStatus);
    private void ProcessTableUpdate(MembershipTableData table, string caller);
    private void LogMissedIAmAlives(MembershipTableData table);
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipTableManager/<CleanupMyTableEntries>d__51")]
private Task`1<bool> CleanupMyTableEntries(MembershipTableData table);
    private void KillMyselfLocally(string reason);
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipTableManager/<GossipToOthers>d__53")]
private Task GossipToOthers(SiloAddress updatedSilo, SiloStatus updatedStatus);
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipTableManager/<TryKill>d__54")]
public Task`1<bool> TryKill(SiloAddress silo);
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipTableManager/<TryToSuspectOrKill>d__55")]
public Task`1<bool> TryToSuspectOrKill(SiloAddress silo);
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.MembershipTableManager/<DeclareDead>d__56")]
private Task`1<bool> DeclareDead(MembershipEntry entry, string etag, TableVersion tableVersion, DateTime time);
    private sealed virtual override bool Orleans.Runtime.IHealthCheckable.CheckHealth(DateTime lastCheckTime, String& reason);
    private sealed virtual override void Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate(ISiloLifecycle lifecycle);
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <.ctor>b__20_1(MembershipTableSnapshot update);
    [CompilerGeneratedAttribute]
private Task`1<bool> <Start>b__39_0(int _);
    [CompilerGeneratedAttribute]
private bool <CleanupMyTableEntries>b__51_1(Tuple`2<MembershipEntry, string> tuple);
    [CompilerGeneratedAttribute]
internal static bool <GossipToOthers>g__IsFunctionalForMembership|53_0(SiloStatus status);
    [CompilerGeneratedAttribute]
private bool <TryToSuspectOrKill>b__55_2(Tuple`2<SiloAddress, DateTime> voter);
    [CompilerGeneratedAttribute]
internal static string <TryToSuspectOrKill>g__PrintSuspectList|55_1(IEnumerable`1<Tuple`2<SiloAddress, DateTime>> list);
}
[ExtensionAttribute]
internal static class Orleans.Runtime.MembershipService.MembershipTableSnapshotExtensions : object {
    [ExtensionAttribute]
internal static ClusterMembershipSnapshot CreateClusterMembershipSnapshot(MembershipTableSnapshot membership);
}
[ReentrantAttribute]
internal class Orleans.Runtime.MembershipService.MembershipTableSystemTarget : SystemTarget {
    private InMemoryMembershipTable table;
    private ILogger logger;
    public MembershipTableSystemTarget(ILocalSiloDetails localSiloDetails, ILoggerFactory loggerFactory, DeepCopier deepCopier);
    private static SystemTargetGrainId CreateId(ILocalSiloDetails localSiloDetails);
    public sealed virtual Task InitializeMembershipTable(bool tryInitTableVersion);
    public sealed virtual Task DeleteMembershipTableEntries(string clusterId);
    public sealed virtual Task`1<MembershipTableData> ReadRow(SiloAddress key);
    public sealed virtual Task`1<MembershipTableData> ReadAll();
    public sealed virtual Task`1<bool> InsertRow(MembershipEntry entry, TableVersion tableVersion);
    public sealed virtual Task`1<bool> UpdateRow(MembershipEntry entry, string etag, TableVersion tableVersion);
    public sealed virtual Task UpdateIAmAlive(MembershipEntry entry);
    public sealed virtual Task CleanupDefunctSiloEntries(DateTimeOffset beforeDate);
}
[GenerateSerializerAttribute]
public class Orleans.Runtime.MembershipService.OrleansClusterConnectivityCheckFailedException : OrleansException {
    public OrleansClusterConnectivityCheckFailedException(string message);
    public OrleansClusterConnectivityCheckFailedException(string message, Exception innerException);
    public OrleansClusterConnectivityCheckFailedException(SerializationInfo info, StreamingContext context);
}
[GenerateSerializerAttribute]
public class Orleans.Runtime.MembershipService.OrleansMissingMembershipEntryException : OrleansException {
    public OrleansMissingMembershipEntryException(string message);
    public OrleansMissingMembershipEntryException(string message, Exception innerException);
    public OrleansMissingMembershipEntryException(SerializationInfo info, StreamingContext context);
}
internal class Orleans.Runtime.MembershipService.RemoteSiloProber : object {
    private IServiceProvider serviceProvider;
    public RemoteSiloProber(IServiceProvider serviceProvider);
    public sealed virtual Task Probe(SiloAddress remoteSilo, int probeNumber);
    public sealed virtual Task`1<IndirectProbeResponse> ProbeIndirectly(SiloAddress intermediary, SiloAddress target, TimeSpan probeTimeout, int probeNumber);
}
internal class Orleans.Runtime.MembershipService.SiloHealthMonitor : object {
    private ILogger _log;
    private IOptionsMonitor`1<ClusterMembershipOptions> _clusterMembershipOptions;
    private IRemoteSiloProber _prober;
    private ILocalSiloHealthMonitor _localSiloHealthMonitor;
    private IClusterMembershipService _membershipService;
    private ILocalSiloDetails _localSiloDetails;
    private CancellationTokenSource _stoppingCancellation;
    private object _lockObj;
    private IAsyncTimer _pingTimer;
    private ValueStopwatch _elapsedSinceLastSuccessfulResponse;
    private Func`3<SiloHealthMonitor, ProbeResult, Task> _onProbeResult;
    private Task _runTask;
    private int _nextProbeId;
    private int _failedProbes;
    [CompilerGeneratedAttribute]
private TimeSpan <LastRoundTripTime>k__BackingField;
    [CompilerGeneratedAttribute]
private SiloAddress <SiloAddress>k__BackingField;
    public Nullable`1<TimeSpan> ElapsedSinceLastResponse { get; }
    public TimeSpan LastRoundTripTime { get; private set; }
    public SiloAddress SiloAddress { get; }
    public bool IsCanceled { get; }
    private int Orleans.Runtime.MembershipService.SiloHealthMonitor.ITestAccessor.MissedProbes { get; }
    public SiloHealthMonitor(SiloAddress siloAddress, Func`3<SiloHealthMonitor, ProbeResult, Task> onProbeResult, IOptionsMonitor`1<ClusterMembershipOptions> clusterMembershipOptions, ILoggerFactory loggerFactory, IRemoteSiloProber remoteSiloProber, IAsyncTimerFactory asyncTimerFactory, ILocalSiloHealthMonitor localSiloHealthMonitor, IClusterMembershipService membershipService, ILocalSiloDetails localSiloDetails);
    public Nullable`1<TimeSpan> get_ElapsedSinceLastResponse();
    [CompilerGeneratedAttribute]
public TimeSpan get_LastRoundTripTime();
    [CompilerGeneratedAttribute]
private void set_LastRoundTripTime(TimeSpan value);
    [CompilerGeneratedAttribute]
public SiloAddress get_SiloAddress();
    public bool get_IsCanceled();
    private sealed virtual override int Orleans.Runtime.MembershipService.SiloHealthMonitor.ITestAccessor.get_MissedProbes();
    public void Start();
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.SiloHealthMonitor/<StopAsync>d__30")]
public Task StopAsync(CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.SiloHealthMonitor/<Run>d__31")]
private Task Run();
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.SiloHealthMonitor/<ProbeDirectly>d__32")]
private Task`1<ProbeResult> ProbeDirectly(CancellationToken cancellation);
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.SiloHealthMonitor/<ProbeIndirectly>d__33")]
private Task`1<ProbeResult> ProbeIndirectly(SiloAddress intermediary, TimeSpan directProbeTimeout, CancellationToken cancellation);
    public sealed virtual bool CheckHealth(DateTime lastCheckTime, String& reason);
    [CompilerGeneratedAttribute]
private bool <Run>b__31_1(ClusterMember v);
    [CompilerGeneratedAttribute]
private TimeSpan <Run>g__GetTimeout|31_0(bool isDirectProbe);
}
internal class Orleans.Runtime.MembershipService.SiloStatusListenerManager : object {
    private object listenersLock;
    private CancellationTokenSource cancellation;
    private MembershipTableManager membershipTableManager;
    private ILogger`1<SiloStatusListenerManager> log;
    private IFatalErrorHandler fatalErrorHandler;
    private ImmutableList`1<WeakReference`1<ISiloStatusListener>> listeners;
    public SiloStatusListenerManager(MembershipTableManager membershipTableManager, ILogger`1<SiloStatusListenerManager> log, IFatalErrorHandler fatalErrorHandler);
    public bool Subscribe(ISiloStatusListener listener);
    public bool Unsubscribe(ISiloStatusListener listener);
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.SiloStatusListenerManager/<ProcessMembershipUpdates>d__9")]
private Task ProcessMembershipUpdates();
    private void NotifyObservers(ClusterMembershipUpdate update);
    private sealed virtual override void Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate(ISiloLifecycle lifecycle);
}
internal class Orleans.Runtime.MembershipService.SiloStatusOracle : object {
    private ILocalSiloDetails localSiloDetails;
    private MembershipTableManager membershipTableManager;
    private SiloStatusListenerManager listenerManager;
    private ILogger log;
    private object cacheUpdateLock;
    private MembershipTableSnapshot cachedSnapshot;
    private Dictionary`2<SiloAddress, SiloStatus> siloStatusCache;
    private Dictionary`2<SiloAddress, SiloStatus> siloStatusCacheOnlyActive;
    public SiloStatus CurrentStatus { get; }
    public string SiloName { get; }
    public SiloAddress SiloAddress { get; }
    public SiloStatusOracle(ILocalSiloDetails localSiloDetails, MembershipTableManager membershipTableManager, ILogger`1<SiloStatusOracle> logger, SiloStatusListenerManager listenerManager);
    public sealed virtual SiloStatus get_CurrentStatus();
    public sealed virtual string get_SiloName();
    public sealed virtual SiloAddress get_SiloAddress();
    public sealed virtual SiloStatus GetApproximateSiloStatus(SiloAddress silo);
    public sealed virtual Dictionary`2<SiloAddress, SiloStatus> GetApproximateSiloStatuses(bool onlyActive);
    public sealed virtual bool IsDeadSilo(SiloAddress silo);
    public sealed virtual bool IsFunctionalDirectory(SiloAddress silo);
    public sealed virtual bool TryGetSiloName(SiloAddress siloAddress, String& siloName);
    public sealed virtual bool SubscribeToSiloStatusEvents(ISiloStatusListener listener);
    public sealed virtual bool UnSubscribeFromSiloStatusEvents(ISiloStatusListener listener);
}
internal class Orleans.Runtime.MembershipService.SystemTargetBasedMembershipTable : object {
    private IServiceProvider serviceProvider;
    private ILogger logger;
    private IMembershipTableSystemTarget grain;
    public SystemTargetBasedMembershipTable(IServiceProvider serviceProvider, ILogger`1<SystemTargetBasedMembershipTable> logger);
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.SystemTargetBasedMembershipTable/<InitializeMembershipTable>d__4")]
public sealed virtual Task InitializeMembershipTable(bool tryInitTableVersion);
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.SystemTargetBasedMembershipTable/<GetMembershipTable>d__5")]
private Task`1<IMembershipTableSystemTarget> GetMembershipTable();
    [AsyncStateMachineAttribute("Orleans.Runtime.MembershipService.SystemTargetBasedMembershipTable/<WaitForTableGrainToInit>d__6")]
private Task WaitForTableGrainToInit(IMembershipTableSystemTarget membershipTableSystemTarget);
    public sealed virtual Task DeleteMembershipTableEntries(string clusterId);
    public sealed virtual Task`1<MembershipTableData> ReadRow(SiloAddress key);
    public sealed virtual Task`1<MembershipTableData> ReadAll();
    public sealed virtual Task`1<bool> InsertRow(MembershipEntry entry, TableVersion tableVersion);
    public sealed virtual Task`1<bool> UpdateRow(MembershipEntry entry, string etag, TableVersion tableVersion);
    public sealed virtual Task UpdateIAmAlive(MembershipEntry entry);
    public sealed virtual Task CleanupDefunctSiloEntries(DateTimeOffset beforeDate);
}
internal abstract class Orleans.Runtime.Messaging.ConnectionListener : object {
    private IConnectionListenerFactory listenerFactory;
    private ConnectionManager connectionManager;
    protected ConcurrentDictionary`2<Connection, object> connections;
    private ConnectionCommon connectionShared;
    private Task acceptLoopTask;
    private IConnectionListener listener;
    private ConnectionDelegate connectionDelegate;
    [CompilerGeneratedAttribute]
private ConnectionOptions <ConnectionOptions>k__BackingField;
    public EndPoint Endpoint { get; }
    protected IServiceProvider ServiceProvider { get; }
    protected NetworkingTrace NetworkingTrace { get; }
    protected ConnectionOptions ConnectionOptions { get; }
    protected ConnectionDelegate ConnectionDelegate { get; }
    protected ConnectionListener(IConnectionListenerFactory listenerFactory, IOptions`1<ConnectionOptions> connectionOptions, ConnectionManager connectionManager, ConnectionCommon connectionShared);
    public abstract virtual EndPoint get_Endpoint();
    protected IServiceProvider get_ServiceProvider();
    protected NetworkingTrace get_NetworkingTrace();
    [CompilerGeneratedAttribute]
protected ConnectionOptions get_ConnectionOptions();
    protected abstract virtual Connection CreateConnection(ConnectionContext context);
    protected ConnectionDelegate get_ConnectionDelegate();
    protected virtual void ConfigureConnectionBuilder(IConnectionBuilder connectionBuilder);
    [AsyncStateMachineAttribute("Orleans.Runtime.Messaging.ConnectionListener/<BindAsync>d__21")]
protected Task BindAsync();
    protected void Start();
    [AsyncStateMachineAttribute("Orleans.Runtime.Messaging.ConnectionListener/<RunAcceptLoop>d__23")]
private Task RunAcceptLoop();
    [AsyncStateMachineAttribute("Orleans.Runtime.Messaging.ConnectionListener/<StopAsync>d__24")]
protected Task StopAsync(CancellationToken cancellationToken);
    private void StartConnection(Connection connection);
    [AsyncStateMachineAttribute("Orleans.Runtime.Messaging.ConnectionListener/<RunConnectionAsync>d__26")]
private Task RunConnectionAsync(Connection connection);
    private IDisposable BeginConnectionScope(Connection connection);
}
internal class Orleans.Runtime.Messaging.Gateway : object {
    private ConcurrentDictionary`2<ClientGrainId, ClientState> clients;
    private Dictionary`2<GatewayInboundConnection, ClientState> clientConnections;
    private SiloAddress gatewayAddress;
    private IAsyncTimer gatewayMaintenanceTimer;
    private Task gatewayMaintenanceTask;
    private ClientsReplyRoutingCache clientsReplyRoutingCache;
    private MessageCenter messageCenter;
    private ILogger logger;
    private ILoggerFactory loggerFactory;
    private SiloMessagingOptions messagingOptions;
    private long clientsCollectionVersion;
    private TimeSpan clientDropTimeout;
    private long Orleans.Runtime.IConnectedClientCollection.Version { get; }
    public Gateway(MessageCenter messageCenter, ILocalSiloDetails siloDetails, ILoggerFactory loggerFactory, IOptions`1<SiloMessagingOptions> options, IAsyncTimerFactory timerFactory);
    public static GrainAddress GetClientActivationAddress(GrainId clientId, SiloAddress siloAddress);
    [AsyncStateMachineAttribute("Orleans.Runtime.Messaging.Gateway/<PerformGatewayMaintenance>d__14")]
private Task PerformGatewayMaintenance();
    [AsyncStateMachineAttribute("Orleans.Runtime.Messaging.Gateway/<SendStopSendMessages>d__15")]
internal Task SendStopSendMessages(IInternalGrainFactory grainFactory);
    [AsyncStateMachineAttribute("Orleans.Runtime.Messaging.Gateway/<StopAsync>d__16")]
internal Task StopAsync();
    private sealed virtual override long Orleans.Runtime.IConnectedClientCollection.get_Version();
    private sealed virtual override List`1<GrainId> Orleans.Runtime.IConnectedClientCollection.GetConnectedClientIds();
    internal void RecordOpenedConnection(GatewayInboundConnection connection, ClientGrainId clientId);
    internal void RecordClosedConnection(GatewayInboundConnection connection);
    internal SiloAddress TryToReroute(Message msg);
    internal void DropExpiredRoutingCachedEntries();
    private bool IsTargetingLocalGateway(SiloAddress siloAddress);
    internal void DropDisconnectedClients();
    internal bool TryDeliverToProxy(Message msg);
}
internal class Orleans.Runtime.Messaging.GatewayConnectionListener : ConnectionListener {
    internal static object ServicesKey;
    private ILocalSiloDetails localSiloDetails;
    private MessageCenter messageCenter;
    private ConnectionCommon connectionShared;
    private ConnectionPreambleHelper connectionPreambleHelper;
    private ILogger`1<GatewayConnectionListener> logger;
    private EndpointOptions endpointOptions;
    private SiloConnectionOptions siloConnectionOptions;
    private OverloadDetector overloadDetector;
    private Gateway gateway;
    public EndPoint Endpoint { get; }
    public GatewayConnectionListener(IServiceProvider serviceProvider, IOptions`1<ConnectionOptions> connectionOptions, IOptions`1<SiloConnectionOptions> siloConnectionOptions, OverloadDetector overloadDetector, ILocalSiloDetails localSiloDetails, IOptions`1<EndpointOptions> endpointOptions, MessageCenter messageCenter, ConnectionManager connectionManager, ConnectionCommon connectionShared, ConnectionPreambleHelper connectionPreambleHelper, ILogger`1<GatewayConnectionListener> logger);
    private static GatewayConnectionListener();
    public virtual EndPoint get_Endpoint();
    protected virtual Connection CreateConnection(ConnectionContext context);
    protected virtual void ConfigureConnectionBuilder(IConnectionBuilder connectionBuilder);
    private sealed virtual override void Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate(ISiloLifecycle lifecycle);
    private sealed virtual override Task Orleans.ILifecycleObserver.OnStart(CancellationToken ct);
    private sealed virtual override Task Orleans.ILifecycleObserver.OnStop(CancellationToken ct);
    [CompilerGeneratedAttribute]
private Task <Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate>b__15_0(CancellationToken _);
}
internal class Orleans.Runtime.Messaging.GatewayInboundConnection : Connection {
    private MessageCenter messageCenter;
    private ConnectionPreambleHelper connectionPreambleHelper;
    private ConnectionOptions connectionOptions;
    private Gateway gateway;
    private OverloadDetector overloadDetector;
    private SiloAddress myAddress;
    private string myClusterId;
    protected ConnectionDirection ConnectionDirection { get; }
    protected IMessageCenter MessageCenter { get; }
    public GatewayInboundConnection(ConnectionContext connection, ConnectionDelegate middleware, Gateway gateway, OverloadDetector overloadDetector, ILocalSiloDetails siloDetails, ConnectionOptions connectionOptions, MessageCenter messageCenter, ConnectionCommon connectionShared, ConnectionPreambleHelper connectionPreambleHelper);
    protected virtual ConnectionDirection get_ConnectionDirection();
    protected virtual IMessageCenter get_MessageCenter();
    protected virtual void RecordMessageReceive(Message msg, int numTotalBytes, int headerBytes);
    protected virtual void RecordMessageSend(Message msg, int numTotalBytes, int headerBytes);
    protected virtual void OnReceivedMessage(Message msg);
    [AsyncStateMachineAttribute("Orleans.Runtime.Messaging.GatewayInboundConnection/<RunInternal>d__15")]
protected virtual Task RunInternal();
    protected virtual bool PrepareMessageForSend(Message msg);
    public void FailMessage(Message msg, string reason);
    protected virtual void RetryMessage(Message msg, Exception ex);
    protected virtual void OnSendMessageFailure(Message message, string error);
    [CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
}
internal class Orleans.Runtime.Messaging.MessageCenter : object {
    private ISiloStatusOracle siloStatusOracle;
    private MessageFactory messageFactory;
    private ConnectionManager connectionManager;
    private RuntimeMessagingTrace messagingTrace;
    private SiloAddress _siloAddress;
    private SiloMessagingOptions messagingOptions;
    private PlacementService placementService;
    private ActivationDirectory activationDirectory;
    private ILocalGrainDirectory localGrainDirectory;
    private ILogger log;
    private Catalog catalog;
    private bool stopped;
    private HostedClient hostedClient;
    private Action`1<Message> sniffIncomingMessageHandler;
    [CompilerGeneratedAttribute]
private Gateway <Gateway>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBlockingApplicationMessages>k__BackingField;
    public Gateway Gateway { get; }
    internal bool IsBlockingApplicationMessages { get; private set; }
    public Action`1<Message> SniffIncomingMessage { get; public set; }
    public MessageCenter(ILocalSiloDetails siloDetails, MessageFactory messageFactory, Catalog catalog, Factory`2<MessageCenter, Gateway> gatewayFactory, ILogger`1<MessageCenter> logger, ISiloStatusOracle siloStatusOracle, ConnectionManager senderManager, RuntimeMessagingTrace messagingTrace, IOptions`1<SiloMessagingOptions> messagingOptions, PlacementService placementService, ILocalGrainDirectory localGrainDirectory, ActivationDirectory activationDirectory);
    [CompilerGeneratedAttribute]
public Gateway get_Gateway();
    [CompilerGeneratedAttribute]
internal bool get_IsBlockingApplicationMessages();
    [CompilerGeneratedAttribute]
private void set_IsBlockingApplicationMessages(bool value);
    public void SetHostedClient(HostedClient client);
    public bool TryDeliverToProxy(Message msg);
    [AsyncStateMachineAttribute("Orleans.Runtime.Messaging.MessageCenter/<StopAsync>d__24")]
public Task StopAsync();
    public void BlockApplicationMessages();
    [AsyncStateMachineAttribute("Orleans.Runtime.Messaging.MessageCenter/<StopAcceptingClientMessages>d__26")]
public Task StopAcceptingClientMessages();
    public void set_SniffIncomingMessage(Action`1<Message> value);
    public Action`1<Message> get_SniffIncomingMessage();
    public sealed virtual void SendMessage(Message msg);
    public sealed virtual void DispatchLocalMessage(Message message);
    public void RejectMessage(Message message, RejectionTypes rejectionType, Exception exc, string rejectInfo);
    internal void ProcessRequestsToInvalidActivation(List`1<Message> messages, GrainAddress oldAddress, GrainAddress forwardingAddress, string failedOperation, Exception exc, bool rejectMessages);
    internal void ProcessRequestToInvalidActivation(Message message, GrainAddress oldAddress, GrainAddress forwardingAddress, string failedOperation, Exception exc, bool rejectMessages);
    internal void TryForwardRequest(Message message, GrainAddress oldAddress, GrainAddress forwardingAddress, string failedOperation, Exception exc);
    internal void RerouteMessage(Message message);
    internal bool TryForwardMessage(Message message, GrainAddress forwardingAddress);
    private void ResendMessageImpl(Message message, GrainAddress forwardingAddress);
    private static bool MayForward(Message message, SiloMessagingOptions messagingOptions);
    internal Task AddressAndSendMessage(Message message);
    internal void SendResponse(Message request, Response response);
    internal void PrepareSystemTargetMessage(Message message);
    public void ReceiveMessage(Message msg);
    internal void SendRejection(Message msg, RejectionTypes rejectionType, string reason);
    [AsyncStateMachineAttribute("Orleans.Runtime.Messaging.MessageCenter/<DisposeAsync>d__45")]
public sealed virtual ValueTask DisposeAsync();
    [AsyncStateMachineAttribute("Orleans.Runtime.Messaging.MessageCenter/<<SendMessage>g__SendAsync|30_0>d")]
[CompilerGeneratedAttribute]
internal static Task <SendMessage>g__SendAsync|30_0(MessageCenter messageCenter, ValueTask`1<Connection> connectionTask, Message msg);
    [AsyncStateMachineAttribute("Orleans.Runtime.Messaging.MessageCenter/<<AddressAndSendMessage>g__SendMessageAsync|40_0>d")]
[CompilerGeneratedAttribute]
private Task <AddressAndSendMessage>g__SendMessageAsync|40_0(Task addressMessageTask, Message m);
    [CompilerGeneratedAttribute]
private void <AddressAndSendMessage>g__OnAddressingFailure|40_1(Message m, Exception ex);
}
internal class Orleans.Runtime.Messaging.OverloadDetector : object {
    private IHostEnvironmentStatistics hostEnvironmentStatistics;
    private float limit;
    [CompilerGeneratedAttribute]
private bool <Enabled>k__BackingField;
    public bool Enabled { get; public set; }
    public bool Overloaded { get; }
    public OverloadDetector(IHostEnvironmentStatistics hostEnvironmentStatistics, IOptions`1<LoadSheddingOptions> loadSheddingOptions);
    [CompilerGeneratedAttribute]
public bool get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(bool value);
    public bool get_Overloaded();
}
internal class Orleans.Runtime.Messaging.ProbeRequestMonitor : object {
    private object _lock;
    private ValueStopwatch _probeRequestStopwatch;
    public Nullable`1<TimeSpan> ElapsedSinceLastProbeRequest { get; }
    public void OnReceivedProbeRequest();
    public Nullable`1<TimeSpan> get_ElapsedSinceLastProbeRequest();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Orleans.Runtime.Messaging.SiloConnection : Connection {
    private static Response PingResponse;
    private MessageCenter messageCenter;
    private ConnectionManager connectionManager;
    private ConnectionOptions connectionOptions;
    private ProbeRequestMonitor probeMonitor;
    private ConnectionPreambleHelper connectionPreambleHelper;
    [CompilerGeneratedAttribute]
private SiloAddress <RemoteSiloAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private SiloAddress <LocalSiloAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LocalClusterId>k__BackingField;
    public SiloAddress RemoteSiloAddress { get; private set; }
    public SiloAddress LocalSiloAddress { get; }
    public string LocalClusterId { get; }
    protected ConnectionDirection ConnectionDirection { get; }
    protected IMessageCenter MessageCenter { get; }
    public SiloConnection(SiloAddress remoteSiloAddress, ConnectionContext connection, ConnectionDelegate middleware, MessageCenter messageCenter, ILocalSiloDetails localSiloDetails, ConnectionManager connectionManager, ConnectionOptions connectionOptions, ConnectionCommon connectionShared, ProbeRequestMonitor probeMonitor, ConnectionPreambleHelper connectionPreambleHelper);
    private static SiloConnection();
    [CompilerGeneratedAttribute]
public SiloAddress get_RemoteSiloAddress();
    [CompilerGeneratedAttribute]
private void set_RemoteSiloAddress(SiloAddress value);
    [CompilerGeneratedAttribute]
public SiloAddress get_LocalSiloAddress();
    [CompilerGeneratedAttribute]
public string get_LocalClusterId();
    protected virtual ConnectionDirection get_ConnectionDirection();
    protected virtual IMessageCenter get_MessageCenter();
    protected virtual void RecordMessageReceive(Message msg, int numTotalBytes, int headerBytes);
    protected virtual void RecordMessageSend(Message msg, int numTotalBytes, int headerBytes);
    protected virtual void OnReceivedMessage(Message msg);
    private void HandlePingMessage(Message msg);
    protected virtual void OnSendMessageFailure(Message message, string error);
    [AsyncStateMachineAttribute("Orleans.Runtime.Messaging.SiloConnection/<RunInternal>d__26")]
protected virtual Task RunInternal();
    protected virtual bool PrepareMessageForSend(Message msg);
    public void FailMessage(Message msg, string reason);
    protected virtual void RetryMessage(Message msg, Exception ex);
    [AsyncStateMachineAttribute("Orleans.Runtime.Messaging.SiloConnection/<<RunInternal>g__WritePreamble|26_0>d")]
[CompilerGeneratedAttribute]
private Task <RunInternal>g__WritePreamble|26_0();
    [AsyncStateMachineAttribute("Orleans.Runtime.Messaging.SiloConnection/<<RunInternal>g__ReadPreamble|26_1>d")]
[CompilerGeneratedAttribute]
private Task <RunInternal>g__ReadPreamble|26_1();
    [NullableContextAttribute("0")]
[CompilerGeneratedAttribute]
[DebuggerHiddenAttribute]
private Task <>n__0();
}
internal class Orleans.Runtime.Messaging.SiloConnectionFactory : ConnectionFactory {
    internal static object ServicesKey;
    private ILocalSiloDetails localSiloDetails;
    private ConnectionCommon connectionShared;
    private ProbeRequestMonitor probeRequestMonitor;
    private ConnectionPreambleHelper connectionPreambleHelper;
    private IServiceProvider serviceProvider;
    private SiloConnectionOptions siloConnectionOptions;
    private object initializationLock;
    private bool isInitialized;
    private ConnectionManager connectionManager;
    private MessageCenter messageCenter;
    private ISiloStatusOracle siloStatusOracle;
    public SiloConnectionFactory(IServiceProvider serviceProvider, IOptions`1<ConnectionOptions> connectionOptions, IOptions`1<SiloConnectionOptions> siloConnectionOptions, ILocalSiloDetails localSiloDetails, ConnectionCommon connectionShared, ProbeRequestMonitor probeRequestMonitor, ConnectionPreambleHelper connectionPreambleHelper);
    private static SiloConnectionFactory();
    public virtual ValueTask`1<Connection> ConnectAsync(SiloAddress address, CancellationToken cancellationToken);
    protected virtual Connection CreateConnection(SiloAddress address, ConnectionContext context);
    protected virtual void ConfigureConnectionBuilder(IConnectionBuilder connectionBuilder);
    private void EnsureInitialized();
}
internal class Orleans.Runtime.Messaging.SiloConnectionListener : ConnectionListener {
    internal static object ServicesKey;
    private ILocalSiloDetails localSiloDetails;
    private SiloConnectionOptions siloConnectionOptions;
    private MessageCenter messageCenter;
    private EndpointOptions endpointOptions;
    private ConnectionManager connectionManager;
    private ConnectionCommon connectionShared;
    private ProbeRequestMonitor probeRequestMonitor;
    private ConnectionPreambleHelper connectionPreambleHelper;
    public EndPoint Endpoint { get; }
    public SiloConnectionListener(IServiceProvider serviceProvider, IOptions`1<ConnectionOptions> connectionOptions, IOptions`1<SiloConnectionOptions> siloConnectionOptions, MessageCenter messageCenter, IOptions`1<EndpointOptions> endpointOptions, ILocalSiloDetails localSiloDetails, ConnectionManager connectionManager, ConnectionCommon connectionShared, ProbeRequestMonitor probeRequestMonitor, ConnectionPreambleHelper connectionPreambleHelper);
    private static SiloConnectionListener();
    public virtual EndPoint get_Endpoint();
    protected virtual Connection CreateConnection(ConnectionContext context);
    protected virtual void ConfigureConnectionBuilder(IConnectionBuilder connectionBuilder);
    private sealed virtual override void Orleans.ILifecycleParticipant<Orleans.Runtime.ISiloLifecycle>.Participate(ISiloLifecycle lifecycle);
    private sealed virtual override Task Orleans.ILifecycleObserver.OnStart(CancellationToken ct);
    private sealed virtual override Task Orleans.ILifecycleObserver.OnStop(CancellationToken ct);
    [NullableContextAttribute("2")]
[AsyncStateMachineAttribute("Orleans.Runtime.Messaging.SiloConnectionListener/<<Orleans-ILifecycleObserver-OnStart>b__15_0>d")]
[CompilerGeneratedAttribute]
private Task <Orleans.ILifecycleObserver.OnStart>b__15_0();
}
internal class Orleans.Runtime.Messaging.SiloConnectionMaintainer : object {
    private ConnectionManager connectionManager;
    private ISiloStatusOracle siloStatusOracle;
    private ILogger`1<SiloConnectionMaintainer> log;
    public SiloConnectionMaintainer(ConnectionManager connectionManager, ISiloStatusOracle siloStatusOracle, ILogger`1<SiloConnectionMaintainer> log);
    public sealed virtual Task OnStart(CancellationToken ct);
    public sealed virtual Task OnStop(CancellationToken ct);
    public sealed virtual void Participate(ISiloLifecycle lifecycle);
    public sealed virtual void SiloStatusChangeNotification(SiloAddress updatedSilo, SiloStatus status);
    [AsyncStateMachineAttribute("Orleans.Runtime.Messaging.SiloConnectionMaintainer/<CloseConnectionAsync>d__8")]
private Task CloseConnectionAsync(SiloAddress silo);
}
internal class Orleans.Runtime.Metadata.ClusterManifestProvider : object {
    private SiloAddress _localSiloAddress;
    private ILogger`1<ClusterManifestProvider> _logger;
    private IServiceProvider _services;
    private IClusterMembershipService _clusterMembershipService;
    private IFatalErrorHandler _fatalErrorHandler;
    private CancellationTokenSource _cancellation;
    private AsyncEnumerable`1<ClusterManifest> _updates;
    private ClusterManifest _current;
    private Task _runTask;
    [CompilerGeneratedAttribute]
private GrainManifest <LocalGrainManifest>k__BackingField;
    public ClusterManifest Current { get; }
    public IAsyncEnumerable`1<ClusterManifest> Updates { get; }
    public GrainManifest LocalGrainManifest { get; }
    public ClusterManifestProvider(ILocalSiloDetails localSiloDetails, SiloManifestProvider siloManifestProvider, ClusterMembershipService clusterMembershipService, IFatalErrorHandler fatalErrorHandler, ILogger`1<ClusterManifestProvider> logger, IServiceProvider services);
    public sealed virtual ClusterManifest get_Current();
    public sealed virtual IAsyncEnumerable`1<ClusterManifest> get_Updates();
    [CompilerGeneratedAttribute]
public sealed virtual GrainManifest get_LocalGrainManifest();
    [AsyncStateMachineAttribute("Orleans.Runtime.Metadata.ClusterManifestProvider/<ProcessMembershipUpdates>d__17")]
private Task ProcessMembershipUpdates();
    [AsyncStateMachineAttribute("Orleans.Runtime.Metadata.ClusterManifestProvider/<UpdateManifest>d__18")]
private Task`1<bool> UpdateManifest(ClusterMembershipSnapshot clusterMembership);
    private Task StartAsync(CancellationToken _);
    private Task Initialize(CancellationToken _);
    [AsyncStateMachineAttribute("Orleans.Runtime.Metadata.ClusterManifestProvider/<StopAsync>d__21")]
private Task StopAsync(CancellationToken cancellationToken);
    public sealed virtual void Participate(ISiloLifecycle lifecycle);
    [AsyncStateMachineAttribute("Orleans.Runtime.Metadata.ClusterManifestProvider/<DisposeAsync>d__23")]
public sealed virtual ValueTask DisposeAsync();
    public sealed virtual void Dispose();
    [CompilerGeneratedAttribute]
private void <.ctor>b__9_1(ClusterManifest update);
}
[AttributeUsageAttribute("2048")]
public class Orleans.Runtime.PersistentStateAttribute : Attribute {
    [CompilerGeneratedAttribute]
private string <StateName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <StorageName>k__BackingField;
    public string StateName { get; }
    public string StorageName { get; }
    public PersistentStateAttribute(string stateName, string storageName);
    [CompilerGeneratedAttribute]
public sealed virtual string get_StateName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_StorageName();
}
public class Orleans.Runtime.PersistentStateFactory : object {
    public sealed virtual IPersistentState`1<TState> Create(IGrainContext context, IPersistentStateConfiguration cfg);
    protected virtual string GetFullStateName(IGrainContext context, IPersistentStateConfiguration cfg);
    private static void ThrowMissingProviderException(IGrainContext context, IPersistentStateConfiguration cfg);
}
internal class Orleans.Runtime.Placement.ActivationCountPlacementDirector : RandomPlacementDirector {
    private ConcurrentDictionary`2<SiloAddress, CachedLocalStat> localCache;
    private ILogger logger;
    private SiloAddress localAddress;
    private int chooseHowMany;
    public ActivationCountPlacementDirector(ILocalSiloDetails localSiloDetails, DeploymentLoadPublisher deploymentLoadPublisher, IOptions`1<ActivationCountBasedPlacementOptions> options, ILogger`1<ActivationCountPlacementDirector> logger);
    private static bool IsSiloOverloaded(SiloRuntimeStatistics stats);
    private Task`1<SiloAddress> SelectSiloPowerOfK(PlacementTarget target, IPlacementContext context);
    public virtual Task`1<SiloAddress> OnAddActivation(PlacementStrategy strategy, PlacementTarget target, IPlacementContext context);
    public sealed virtual void SiloStatisticsChangeNotification(SiloAddress updatedSilo, SiloRuntimeStatistics newSiloStats);
    public sealed virtual void RemoveSilo(SiloAddress removedSilo);
}
internal class Orleans.Runtime.Placement.ClientObserverPlacementStrategyResolver : object {
    private ClientObserversPlacement _strategy;
    public sealed virtual bool TryResolvePlacementStrategy(GrainType grainType, GrainProperties properties, PlacementStrategy& result);
}
internal class Orleans.Runtime.Placement.ClientObserversPlacementDirector : object {
    public sealed virtual Task`1<SiloAddress> OnAddActivation(PlacementStrategy strategy, PlacementTarget target, IPlacementContext context);
}
internal class Orleans.Runtime.Placement.HashBasedPlacementDirector : object {
    public virtual Task`1<SiloAddress> OnAddActivation(PlacementStrategy strategy, PlacementTarget target, IPlacementContext context);
}
public interface Orleans.Runtime.Placement.IPlacementStrategyResolver {
    public abstract virtual bool TryResolvePlacementStrategy(GrainType grainType, GrainProperties properties, PlacementStrategy& result);
}
public class Orleans.Runtime.Placement.PlacementDirectorResolver : object {
    private ImmutableDictionary`2<Type, IPlacementDirector> _directors;
    public PlacementDirectorResolver(IServiceProvider services);
    public IPlacementDirector GetPlacementDirector(PlacementStrategy placementStrategy);
    [CompilerGeneratedAttribute]
internal static ImmutableDictionary`2<Type, IPlacementDirector> <.ctor>g__GetAllDirectors|1_0(IServiceProvider services);
}
internal class Orleans.Runtime.Placement.PlacementService : object {
    private static int PlacementWorkerCount;
    private PlacementStrategyResolver _strategyResolver;
    private PlacementDirectorResolver _directorResolver;
    private ILogger`1<PlacementService> _logger;
    private GrainLocator _grainLocator;
    private GrainVersionManifest _grainInterfaceVersions;
    private CachedVersionSelectorManager _versionSelectorManager;
    private ISiloStatusOracle _siloStatusOracle;
    private bool _assumeHomogeneousSilosForTesting;
    private PlacementWorker[] _workers;
    [CompilerGeneratedAttribute]
private SiloAddress <LocalSilo>k__BackingField;
    public SiloAddress LocalSilo { get; }
    public SiloStatus LocalSiloStatus { get; }
    public SiloAddress[] AllActiveSilos { get; }
    public PlacementService(IOptionsMonitor`1<SiloMessagingOptions> siloMessagingOptions, ILocalSiloDetails localSiloDetails, ISiloStatusOracle siloStatusOracle, ILogger`1<PlacementService> logger, GrainLocator grainLocator, GrainVersionManifest grainInterfaceVersions, CachedVersionSelectorManager versionSelectorManager, PlacementDirectorResolver directorResolver, PlacementStrategyResolver strategyResolver);
    [CompilerGeneratedAttribute]
public sealed virtual SiloAddress get_LocalSilo();
    public sealed virtual SiloStatus get_LocalSiloStatus();
    public Task AddressMessage(Message message);
    private void SetMessageTargetPlacement(Message message, SiloAddress targetSilo);
    public sealed virtual SiloAddress[] GetCompatibleSilos(PlacementTarget target);
    public SiloAddress[] get_AllActiveSilos();
    public sealed virtual IReadOnlyDictionary`2<ushort, SiloAddress[]> GetCompatibleSilosWithVersions(PlacementTarget target);
    private bool CachedAddressIsValid(Message message, GrainAddress cachedAddress);
    [CompilerGeneratedAttribute]
internal static void <AddressMessage>g__ThrowMissingAddress|16_0();
    [CompilerGeneratedAttribute]
private bool <CachedAddressIsValid>g__CachedAddressIsValidCore|22_0(Message message, GrainAddress cachedAddress, List`1<GrainAddress> invalidAddresses);
}
public class Orleans.Runtime.Placement.PlacementStrategyResolver : object {
    private ConcurrentDictionary`2<GrainType, PlacementStrategy> _resolvedStrategies;
    private Func`2<GrainType, PlacementStrategy> _getStrategyInternal;
    private IPlacementStrategyResolver[] _resolvers;
    private IServiceProvider _services;
    private GrainPropertiesResolver _grainPropertiesResolver;
    private ImmutableDictionary`2<string, Type> _strategies;
    private PlacementStrategy _defaultPlacementStrategy;
    public PlacementStrategyResolver(IServiceProvider services, IEnumerable`1<IPlacementStrategyResolver> resolvers, GrainPropertiesResolver grainPropertiesResolver);
    public PlacementStrategy GetPlacementStrategy(GrainType grainType);
    internal bool TryGetNonDefaultPlacementStrategy(GrainType grainType, PlacementStrategy& strategy);
    private PlacementStrategy GetPlacementStrategyInternal(GrainType grainType);
    [CompilerGeneratedAttribute]
internal static ImmutableDictionary`2<string, Type> <.ctor>g__GetAllStrategies|7_0(IServiceProvider services);
}
internal class Orleans.Runtime.Placement.PreferLocalPlacementDirector : RandomPlacementDirector {
    private Task`1<SiloAddress> cachedLocalSilo;
    public virtual Task`1<SiloAddress> OnAddActivation(PlacementStrategy strategy, PlacementTarget target, IPlacementContext context);
}
internal class Orleans.Runtime.Placement.RandomPlacementDirector : object {
    public virtual Task`1<SiloAddress> OnAddActivation(PlacementStrategy strategy, PlacementTarget target, IPlacementContext context);
}
internal class Orleans.Runtime.Placement.SiloRoleBasedPlacementDirector : object {
    private MembershipTableManager membershipTableManager;
    public SiloRoleBasedPlacementDirector(MembershipTableManager membershipTableManager);
    public virtual Task`1<SiloAddress> OnAddActivation(PlacementStrategy strategy, PlacementTarget target, IPlacementContext context);
}
internal class Orleans.Runtime.Placement.StatelessWorkerDirector : object {
    public sealed virtual Task`1<SiloAddress> OnAddActivation(PlacementStrategy strategy, PlacementTarget target, IPlacementContext context);
    internal static IGrainContext PickRandom(List`1<IGrainContext> local);
}
internal class Orleans.Runtime.Providers.SiloProviderRuntime : object {
    private IGrainContextAccessor _grainContextAccessor;
    [CompilerGeneratedAttribute]
private IGrainFactory <GrainFactory>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <ServiceProvider>k__BackingField;
    public IGrainFactory GrainFactory { get; }
    public IServiceProvider ServiceProvider { get; }
    public SiloProviderRuntime(IGrainContextAccessor grainContextAccessor, IGrainFactory grainFactory, IServiceProvider serviceProvider);
    [CompilerGeneratedAttribute]
public sealed virtual IGrainFactory get_GrainFactory();
    [CompilerGeneratedAttribute]
public sealed virtual IServiceProvider get_ServiceProvider();
    public sealed virtual ValueTuple`2<TExtension, TExtensionInterface> BindExtension(Func`1<TExtension> newExtensionFunc);
}
internal class Orleans.Runtime.ReentrantSharedComponentsConfigurator : object {
    public sealed virtual void Configure(GrainType grainType, GrainProperties properties, GrainTypeSharedContext shared);
}
internal class Orleans.Runtime.RuntimeMessagingTrace : MessagingTrace {
    public static string DispatcherReceiveInvalidActivationEventName;
    public static string DispatcherDetectedDeadlockEventName;
    public static string DispatcherDiscardedRejectionEventName;
    public static string DispatcherRejectedMessageEventName;
    public static string DispatcherForwardingEventName;
    public static string DispatcherForwardingMultipleEventName;
    public static string DispatcherForwardingFailedEventName;
    public static string DispatcherSelectTargetFailedEventName;
    private static Action`4<ILogger, ActivationState, Message, Exception> LogDispatcherReceiveInvalidActivation;
    private static Action`4<ILogger, Message, ActivationData, Exception> LogDispatcherDetectedDeadlock;
    private static Action`5<ILogger, Message, string, RejectionTypes, Exception> LogDispatcherDiscardedRejection;
    private static Action`5<ILogger, Message, string, RejectionTypes, Exception> LogDispatcherRejectedMessage;
    private static Action`7<ILogger, Message, GrainAddress, GrainAddress, string, int, Exception> LogDispatcherForwarding;
    private static Action`7<ILogger, Message, GrainAddress, GrainAddress, string, int, Exception> LogDispatcherForwardingFailed;
    private static Action`6<ILogger, int, GrainAddress, GrainAddress, string, Exception> LogDispatcherForwardingMultiple;
    private static Action`3<ILogger, Message, Exception> LogDispatcherSelectTargetFailed;
    public RuntimeMessagingTrace(ILoggerFactory loggerFactory);
    private static RuntimeMessagingTrace();
    internal void OnDispatcherReceiveInvalidActivation(Message message, ActivationState activationState);
    internal void OnDispatcherDetectedDeadlock(Message message, ActivationData targetActivation, DeadlockException exception);
    internal void OnDispatcherDiscardedRejection(Message message, RejectionTypes rejectionType, string reason, Exception exception);
    internal void OnDispatcherRejectMessage(Message message, RejectionTypes rejectionType, string reason, Exception exception);
    internal void OnDispatcherForwarding(Message message, GrainAddress oldAddress, GrainAddress forwardingAddress, string failedOperation, Exception exception);
    internal void OnDispatcherForwardingFailed(Message message, GrainAddress oldAddress, GrainAddress forwardingAddress, string failedOperation, Exception exception);
    internal void OnDispatcherForwardingMultiple(int messageCount, GrainAddress oldAddress, GrainAddress forwardingAddress, string failedOperation, Exception exception);
    internal void OnDispatcherSelectTargetFailed(Message message, Exception exception);
    [CompilerGeneratedAttribute]
internal static bool <OnDispatcherSelectTargetFailed>g__ShouldLogError|24_0(Exception ex);
}
[DebuggerDisplayAttribute("ActivationTaskScheduler-{myId} RunQueue={workerGroup.WorkItemCount}")]
internal class Orleans.Runtime.Scheduler.ActivationTaskScheduler : TaskScheduler {
    private ILogger logger;
    private static long idCounter;
    private long myId;
    private WorkItemGroup workerGroup;
    internal ActivationTaskScheduler(WorkItemGroup workGroup, ILogger`1<ActivationTaskScheduler> logger);
    protected virtual IEnumerable`1<Task> GetScheduledTasks();
    public void RunTask(Task task);
    protected virtual void QueueTask(Task task);
    protected virtual bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued);
    public virtual string ToString();
}
internal class Orleans.Runtime.Scheduler.AsyncClosureWorkItem : WorkItemBase {
    private TaskCompletionSource`1<bool> completion;
    private Func`1<Task> continuation;
    private string name;
    [CompilerGeneratedAttribute]
private IGrainContext <GrainContext>k__BackingField;
    public string Name { get; }
    public Task Task { get; }
    public IGrainContext GrainContext { get; }
    public AsyncClosureWorkItem(Func`1<Task> closure, string name, IGrainContext grainContext);
    public AsyncClosureWorkItem(Func`1<Task> closure, IGrainContext grainContext);
    public virtual string get_Name();
    public Task get_Task();
    [AsyncStateMachineAttribute("Orleans.Runtime.Scheduler.AsyncClosureWorkItem/<Execute>d__9")]
public virtual void Execute();
    [CompilerGeneratedAttribute]
public virtual IGrainContext get_GrainContext();
    internal static string GetMethodName(Delegate action);
}
internal class Orleans.Runtime.Scheduler.AsyncClosureWorkItem`1 : WorkItemBase {
    private TaskCompletionSource`1<T> completion;
    private Func`1<Task`1<T>> continuation;
    private string name;
    [CompilerGeneratedAttribute]
private IGrainContext <GrainContext>k__BackingField;
    public string Name { get; }
    public Task`1<T> Task { get; }
    public IGrainContext GrainContext { get; }
    public AsyncClosureWorkItem`1(Func`1<Task`1<T>> closure, string name, IGrainContext grainContext);
    public AsyncClosureWorkItem`1(Func`1<Task`1<T>> closure, IGrainContext grainContext);
    public virtual string get_Name();
    public Task`1<T> get_Task();
    [AsyncStateMachineAttribute("Orleans.Runtime.Scheduler.AsyncClosureWorkItem`1/<Execute>d__9")]
public virtual void Execute();
    [CompilerGeneratedAttribute]
public virtual IGrainContext get_GrainContext();
}
internal interface Orleans.Runtime.Scheduler.IWorkItem {
    public string Name { get; }
    public IGrainContext GrainContext { get; }
    public abstract virtual string get_Name();
    public abstract virtual IGrainContext get_GrainContext();
}
internal class Orleans.Runtime.Scheduler.RequestWorkItem : WorkItemBase {
    private Message request;
    private SystemTarget target;
    public string Name { get; }
    public IGrainContext GrainContext { get; }
    public RequestWorkItem(SystemTarget t, Message m);
    public virtual string get_Name();
    public virtual IGrainContext get_GrainContext();
    public virtual void Execute();
    public virtual bool TryFormat(Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
}
internal class Orleans.Runtime.Scheduler.ResponseWorkItem : WorkItemBase {
    private Message response;
    private SystemTarget target;
    public string Name { get; }
    public IGrainContext GrainContext { get; }
    public ResponseWorkItem(SystemTarget t, Message m);
    public virtual string get_Name();
    public virtual IGrainContext get_GrainContext();
    public virtual void Execute();
    public virtual bool TryFormat(Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
}
[ExtensionAttribute]
internal static class Orleans.Runtime.Scheduler.SchedulerExtensions : object {
    [ExtensionAttribute]
internal static Task QueueTask(IGrainContext targetContext, Func`1<Task> taskFunc);
    [ExtensionAttribute]
internal static Task QueueTask(WorkItemGroup scheduler, Func`1<Task> taskFunc, IGrainContext targetContext);
    [ExtensionAttribute]
internal static Task RunOrQueueTask(IGrainContext targetContext, Func`1<Task> taskFunc);
}
[ExtensionAttribute]
internal static class Orleans.Runtime.Scheduler.TaskSchedulerUtils : object {
    private static Action`1<object> TaskFunc;
    private static Action`1<object> ThreadPoolWorkItemTaskFunc;
    private static TaskSchedulerUtils();
    private static void RunThreadPoolWorkItemTask(IThreadPoolWorkItem todo);
    private static void RunWorkItemTask(IWorkItem todo);
    [ExtensionAttribute]
public static void QueueAction(TaskScheduler taskScheduler, Action action);
    [ExtensionAttribute]
public static void QueueAction(TaskScheduler taskScheduler, Action`1<object> action, object state);
    [ExtensionAttribute]
public static void QueueWorkItem(TaskScheduler taskScheduler, IWorkItem todo);
    [ExtensionAttribute]
public static void QueueThreadPoolWorkItem(TaskScheduler taskScheduler, IThreadPoolWorkItem workItem);
}
internal abstract class Orleans.Runtime.Scheduler.WorkItemBase : object {
    public IGrainContext GrainContext { get; }
    public string Name { get; }
    public abstract virtual IGrainContext get_GrainContext();
    public abstract virtual string get_Name();
    public abstract virtual void Execute();
    public sealed virtual string ToString();
    private sealed virtual override string System.IFormattable.ToString(string format, IFormatProvider formatProvider);
    public virtual bool TryFormat(Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
}
[DebuggerDisplayAttribute("WorkItemGroup Name={Name} State={state}")]
internal class Orleans.Runtime.Scheduler.WorkItemGroup : object {
    private ILogger log;
    private WorkGroupStatus state;
    private object lockable;
    private Queue`1<Task> workItems;
    private long totalItemsEnqueued;
    private long totalItemsProcessed;
    private long lastLongQueueWarningTimestamp;
    private Task currentTask;
    private long currentTaskStarted;
    private SchedulingOptions schedulingOptions;
    [CompilerGeneratedAttribute]
private ActivationTaskScheduler <TaskScheduler>k__BackingField;
    [CompilerGeneratedAttribute]
private IGrainContext <GrainContext>k__BackingField;
    internal ActivationTaskScheduler TaskScheduler { get; }
    public IGrainContext GrainContext { get; public set; }
    internal bool IsSystemGroup { get; }
    public string Name { get; }
    internal int ExternalWorkItemCount { get; }
    private Task CurrentTask { get; private set; }
    private int WorkItemCount { get; }
    public WorkItemGroup(IGrainContext grainContext, ILogger`1<WorkItemGroup> logger, ILogger`1<ActivationTaskScheduler> activationTaskSchedulerLogger, IOptions`1<SchedulingOptions> schedulingOptions);
    [CompilerGeneratedAttribute]
internal ActivationTaskScheduler get_TaskScheduler();
    [CompilerGeneratedAttribute]
public sealed virtual IGrainContext get_GrainContext();
    [CompilerGeneratedAttribute]
public void set_GrainContext(IGrainContext value);
    internal bool get_IsSystemGroup();
    public sealed virtual string get_Name();
    internal int get_ExternalWorkItemCount();
    private Task get_CurrentTask();
    private void set_CurrentTask(Task value);
    private int get_WorkItemCount();
    public void EnqueueTask(Task task);
    [IteratorStateMachineAttribute("Orleans.Runtime.Scheduler.WorkItemGroup/<GetScheduledTasks>d__31")]
internal IEnumerable`1<Task> GetScheduledTasks();
    private static object DumpAsyncState(object o);
    public sealed virtual void Execute();
    public virtual string ToString();
    public string DumpStatus();
    public static void ScheduleExecution(WorkItemGroup workItem);
    public sealed virtual void QueueAction(Action action);
    public sealed virtual void QueueTask(Task task);
    public sealed virtual void QueueWorkItem(IThreadPoolWorkItem workItem);
}
public abstract class Orleans.Runtime.Services.GrainServiceClient`1 : object {
    private IInternalGrainFactory grainFactory;
    private IConsistentRingProvider ringProvider;
    private GrainType grainType;
    protected GrainReference CurrentGrainReference { get; }
    protected GrainServiceClient`1(IServiceProvider serviceProvider);
    protected GrainReference get_CurrentGrainReference();
    protected TGrainService GetGrainService(GrainId callingGrainId);
}
public class Orleans.Runtime.Silo : object {
    public static string PrimarySiloName;
    private ILocalSiloDetails siloDetails;
    private MessageCenter messageCenter;
    private LocalGrainDirectory localGrainDirectory;
    private ILogger logger;
    private TaskCompletionSource`1<int> siloTerminatedTask;
    private InsideRuntimeClient runtimeClient;
    private SystemTarget fallbackScheduler;
    private ISiloStatusOracle siloStatusOracle;
    private Watchdog platformWatchdog;
    private TimeSpan waitForMessageToBeQueuedForOutbound;
    private TimeSpan initTimeout;
    private TimeSpan stopTimeout;
    private Catalog catalog;
    private object lockable;
    private GrainFactory grainFactory;
    private ISiloLifecycleSubject siloLifecycle;
    private IMembershipService membershipService;
    internal List`1<GrainService> grainServices;
    private ILoggerFactory loggerFactory;
    [CompilerGeneratedAttribute]
private IConsistentRingProvider <RingProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private SystemStatus <SystemStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private IServiceProvider <Services>k__BackingField;
    private bool isFastKilledNeeded;
    private LifecycleSchedulingSystemTarget lifecycleSchedulingSystemTarget;
    internal string Name { get; }
    internal ILocalGrainDirectory LocalGrainDirectory { get; }
    internal IConsistentRingProvider RingProvider { get; private set; }
    internal List`1<GrainService> GrainServices { get; }
    internal SystemStatus SystemStatus { get; internal set; }
    internal IServiceProvider Services { get; }
    public SiloAddress SiloAddress { get; }
    public Task SiloTerminated { get; }
    [ObsoleteAttribute("This constructor is obsolete and may be removed in a future release. Use SiloHostBuilder to create an instance of ISiloHost instead.")]
public Silo(ILocalSiloDetails siloDetails, IServiceProvider services);
    internal string get_Name();
    internal ILocalGrainDirectory get_LocalGrainDirectory();
    [CompilerGeneratedAttribute]
internal IConsistentRingProvider get_RingProvider();
    [CompilerGeneratedAttribute]
private void set_RingProvider(IConsistentRingProvider value);
    internal List`1<GrainService> get_GrainServices();
    [CompilerGeneratedAttribute]
internal SystemStatus get_SystemStatus();
    [CompilerGeneratedAttribute]
internal void set_SystemStatus(SystemStatus value);
    [CompilerGeneratedAttribute]
internal IServiceProvider get_Services();
    public SiloAddress get_SiloAddress();
    public Task get_SiloTerminated();
    [AsyncStateMachineAttribute("Orleans.Runtime.Silo/<StartAsync>d__44")]
public Task StartAsync(CancellationToken cancellationToken);
    private void CreateSystemTargets();
    private void InjectDependencies();
    private Task OnRuntimeInitializeStart(CancellationToken ct);
    private void StartTaskWithPerfAnalysis(string taskName, Action task, Stopwatch stopWatch);
    [AsyncStateMachineAttribute("Orleans.Runtime.Silo/<StartAsyncTaskWithPerfAnalysis>d__49")]
private Task StartAsyncTaskWithPerfAnalysis(string taskName, Func`1<Task> task, Stopwatch stopWatch);
    private Task OnRuntimeServicesStart(CancellationToken ct);
    [AsyncStateMachineAttribute("Orleans.Runtime.Silo/<OnRuntimeGrainServicesStart>d__51")]
private Task OnRuntimeGrainServicesStart(CancellationToken ct);
    private Task OnBecomeActiveStart(CancellationToken ct);
    [AsyncStateMachineAttribute("Orleans.Runtime.Silo/<OnActiveStart>d__53")]
private Task OnActiveStart(CancellationToken ct);
    [AsyncStateMachineAttribute("Orleans.Runtime.Silo/<CreateGrainServices>d__54")]
private Task CreateGrainServices();
    [AsyncStateMachineAttribute("Orleans.Runtime.Silo/<RegisterGrainService>d__55")]
private Task RegisterGrainService(IGrainService service);
    [AsyncStateMachineAttribute("Orleans.Runtime.Silo/<StartGrainService>d__56")]
private Task StartGrainService(IGrainService service);
    public void Stop();
    public void Shutdown();
    [AsyncStateMachineAttribute("Orleans.Runtime.Silo/<StopAsync>d__59")]
public Task StopAsync(CancellationToken cancellationToken);
    private Task OnRuntimeServicesStop(CancellationToken ct);
    [AsyncStateMachineAttribute("Orleans.Runtime.Silo/<OnRuntimeInitializeStop>d__61")]
private Task OnRuntimeInitializeStop(CancellationToken ct);
    [AsyncStateMachineAttribute("Orleans.Runtime.Silo/<OnBecomeActiveStop>d__62")]
private Task OnBecomeActiveStop(CancellationToken ct);
    [AsyncStateMachineAttribute("Orleans.Runtime.Silo/<OnActiveStop>d__63")]
private Task OnActiveStop(CancellationToken ct);
    private void SafeExecute(Action action);
    internal void RegisterSystemTarget(SystemTarget target);
    public virtual string ToString();
    private void Participate(ISiloLifecycle lifecycle);
    [CompilerGeneratedAttribute]
private ILifecycleParticipant`1<ISiloLifecycle> <.ctor>b__43_0(IKeyedService`2<string, ILifecycleParticipant`1<ISiloLifecycle>> s);
    [CompilerGeneratedAttribute]
private Task <OnRuntimeGrainServicesStart>b__51_0();
    [AsyncStateMachineAttribute("Orleans.Runtime.Silo/<<OnRuntimeGrainServicesStart>g__StartDeploymentLoadCollector|51_1>d")]
[CompilerGeneratedAttribute]
private Task <OnRuntimeGrainServicesStart>g__StartDeploymentLoadCollector|51_1();
    [CompilerGeneratedAttribute]
private Task <OnActiveStop>b__63_0();
    [CompilerGeneratedAttribute]
private Task <Participate>b__67_0(CancellationToken ct);
    [CompilerGeneratedAttribute]
private Task <Participate>b__67_1(CancellationToken ct);
    [CompilerGeneratedAttribute]
private Task <Participate>b__67_2(CancellationToken ct);
    [CompilerGeneratedAttribute]
private Task <Participate>b__67_3(CancellationToken ct);
    [CompilerGeneratedAttribute]
private Task <Participate>b__67_4(CancellationToken ct);
    [CompilerGeneratedAttribute]
private Task <Participate>b__67_5(CancellationToken ct);
    [CompilerGeneratedAttribute]
private Task <Participate>b__67_6(CancellationToken ct);
    [CompilerGeneratedAttribute]
private Task <Participate>b__67_7(CancellationToken ct);
    [CompilerGeneratedAttribute]
private Task <Participate>b__67_8(CancellationToken ct);
}
internal class Orleans.Runtime.SiloControl : SystemTarget {
    private ILogger logger;
    private ILocalSiloDetails localSiloDetails;
    private DeploymentLoadPublisher deploymentLoadPublisher;
    private Catalog catalog;
    private CachedVersionSelectorManager cachedVersionSelectorManager;
    private CompatibilityDirectorManager compatibilityDirectorManager;
    private VersionSelectorManager selectorManager;
    private ActivationCollector _activationCollector;
    private ActivationDirectory activationDirectory;
    private IActivationWorkingSet activationWorkingSet;
    private IAppEnvironmentStatistics appEnvironmentStatistics;
    private IHostEnvironmentStatistics hostEnvironmentStatistics;
    private IOptions`1<LoadSheddingOptions> loadSheddingOptions;
    private GrainCountStatistics _grainCountStatistics;
    private Dictionary`2<Tuple`2<string, string>, IControllable> controllables;
    public SiloControl(ILocalSiloDetails localSiloDetails, DeploymentLoadPublisher deploymentLoadPublisher, Catalog catalog, CachedVersionSelectorManager cachedVersionSelectorManager, CompatibilityDirectorManager compatibilityDirectorManager, VersionSelectorManager selectorManager, IServiceProvider services, ILoggerFactory loggerFactory, IMessageCenter messageCenter, ActivationCollector activationCollector, ActivationDirectory activationDirectory, IActivationWorkingSet activationWorkingSet, IAppEnvironmentStatistics appEnvironmentStatistics, IHostEnvironmentStatistics hostEnvironmentStatistics, IOptions`1<LoadSheddingOptions> loadSheddingOptions, GrainCountStatistics grainCountStatistics);
    public sealed virtual Task Ping(string message);
    public sealed virtual Task ForceGarbageCollection();
    public sealed virtual Task ForceActivationCollection(TimeSpan ageLimit);
    public sealed virtual Task ForceRuntimeStatisticsCollection();
    public sealed virtual Task`1<SiloRuntimeStatistics> GetRuntimeStatistics();
    public sealed virtual Task`1<List`1<Tuple`3<GrainId, string, int>>> GetGrainStatistics();
    public sealed virtual Task`1<List`1<DetailedGrainStatistic>> GetDetailedGrainStatistics(String[] types);
    public sealed virtual Task`1<SimpleGrainStatistic[]> GetSimpleGrainStatistics();
    public sealed virtual Task`1<DetailedGrainReport> GetDetailedGrainReport(GrainId grainId);
    public sealed virtual Task`1<int> GetActivationCount();
    public sealed virtual Task`1<object> SendControlCommandToProvider(string providerTypeFullName, string providerName, int command, object arg);
    public sealed virtual Task SetCompatibilityStrategy(CompatibilityStrategy strategy);
    public sealed virtual Task SetSelectorStrategy(VersionSelectorStrategy strategy);
    public sealed virtual Task SetCompatibilityStrategy(GrainInterfaceType interfaceId, CompatibilityStrategy strategy);
    public sealed virtual Task SetSelectorStrategy(GrainInterfaceType interfaceType, VersionSelectorStrategy strategy);
    public sealed virtual Task`1<List`1<GrainId>> GetActiveGrains(GrainType grainType);
    [CompilerGeneratedAttribute]
private SimpleGrainStatistic <GetSimpleGrainStatistics>b__23_0(KeyValuePair`2<string, long> p);
    [CompilerGeneratedAttribute]
internal static void <GetActiveGrains>g__AddIfMatch|31_0(ValueTuple`2<GrainType, List`1<GrainId>> context, GrainId id);
}
public class Orleans.Runtime.SiloLifecycleSubject : LifecycleSubject {
    private static ImmutableDictionary`2<int, string> StageNames;
    private List`1<MonitoredObserver> observers;
    private int highestCompletedStage;
    private int lowestStoppedStage;
    public int HighestCompletedStage { get; }
    public int LowestStoppedStage { get; }
    public SiloLifecycleSubject(ILogger`1<SiloLifecycleSubject> logger);
    private static SiloLifecycleSubject();
    public sealed virtual int get_HighestCompletedStage();
    public sealed virtual int get_LowestStoppedStage();
    public virtual Task OnStart(CancellationToken cancellationToken);
    protected virtual void OnStartStageCompleted(int stage);
    protected virtual void OnStopStageCompleted(int stage);
    protected virtual string GetStageName(int stage);
    protected virtual void PerfMeasureOnStop(int stage, TimeSpan elapsed);
    protected virtual void PerfMeasureOnStart(int stage, TimeSpan elapsed);
    public virtual IDisposable Subscribe(string observerName, int stage, ILifecycleObserver observer);
}
internal class Orleans.Runtime.SiloOptionsLogger : OptionsLogger {
    public SiloOptionsLogger(ILogger`1<SiloOptionsLogger> logger, IServiceProvider services);
    public sealed virtual void Participate(ISiloLifecycle lifecycle);
    public Task OnStart(CancellationToken token);
}
internal class Orleans.Runtime.SimpleConsistentRingProvider : object {
    private SiloAddress _localSilo;
    private IClusterMembershipService _clusterMembershipService;
    private object _lockObj;
    private VersionedSuccessor _successor;
    public SiloAddress Successor { get; }
    public SimpleConsistentRingProvider(ILocalSiloDetails localSiloDetails, IClusterMembershipService clusterMembershipService);
    public SiloAddress get_Successor();
    private SiloAddress FindSuccessor(ClusterMembershipSnapshot snapshot);
}
internal class Orleans.Runtime.SingleWaiterAutoResetEvent : object {
    private Action _signalAction;
    private ManualResetValueTaskSourceCore`1<bool> _waitSource;
    private int _hasWaiter;
    public bool RunContinuationsAsynchronously { get; public set; }
    public Action SignalAction { get; }
    public bool get_RunContinuationsAsynchronously();
    public void set_RunContinuationsAsynchronously(bool value);
    public Action get_SignalAction();
    private sealed virtual override ValueTaskSourceStatus System.Threading.Tasks.Sources.IValueTaskSource.GetStatus(short token);
    private sealed virtual override void System.Threading.Tasks.Sources.IValueTaskSource.OnCompleted(Action`1<object> continuation, object state, short token, ValueTaskSourceOnCompletedFlags flags);
    private sealed virtual override void System.Threading.Tasks.Sources.IValueTaskSource.GetResult(short token);
    public void Signal();
    public ValueTask WaitAsync();
    private static void ThrowConcurrencyViolation();
}
[ExtensionAttribute]
internal static class Orleans.Runtime.SingleWaiterSemaphoreExtensions : object {
    [ExtensionAttribute]
public static void SignalOnCompleted(Task task, SingleWaiterAutoResetEvent semaphore);
    [ExtensionAttribute]
public static void SignalOnCompleted(ValueTask task, SingleWaiterAutoResetEvent semaphore);
    [ExtensionAttribute]
public static void SignalOnCompleted(ValueTask`1<T> task, SingleWaiterAutoResetEvent semaphore);
}
internal class Orleans.Runtime.StatelessWorkerActivator : object {
    private IGrainContextActivator _innerActivator;
    private GrainTypeSharedContext _sharedContext;
    public StatelessWorkerActivator(GrainTypeSharedContext sharedContext, IGrainContextActivator innerActivator);
    public sealed virtual IGrainContext CreateContext(GrainAddress address);
}
internal class Orleans.Runtime.StatelessWorkerGrainContext : object {
    private GrainAddress _address;
    private GrainTypeSharedContext _sharedContext;
    private IGrainContextActivator _innerActivator;
    private int _maxWorkers;
    private List`1<IGrainContext> _workers;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentQueue`1<ValueTuple`2<WorkItemType, object>> _workItems;
    private SingleWaiterAutoResetEvent _workSignal;
    private Task _messageLoopTask;
    private int _nextWorker;
    private GrainReference _grainReference;
    public GrainReference GrainReference { get; }
    public GrainId GrainId { get; }
    public object GrainInstance { get; }
    public ActivationId ActivationId { get; }
    public GrainAddress Address { get; }
    public IServiceProvider ActivationServices { get; }
    public IGrainLifecycle ObservableLifecycle { get; }
    public IWorkItemScheduler Scheduler { get; }
    public PlacementStrategy PlacementStrategy { get; }
    public Task Deactivated { get; }
    public StatelessWorkerGrainContext(GrainAddress address, GrainTypeSharedContext sharedContext, IGrainContextActivator innerActivator);
    public sealed virtual GrainReference get_GrainReference();
    public sealed virtual GrainId get_GrainId();
    public sealed virtual object get_GrainInstance();
    public sealed virtual ActivationId get_ActivationId();
    public sealed virtual GrainAddress get_Address();
    public sealed virtual IServiceProvider get_ActivationServices();
    public sealed virtual IGrainLifecycle get_ObservableLifecycle();
    public sealed virtual IWorkItemScheduler get_Scheduler();
    public PlacementStrategy get_PlacementStrategy();
    public sealed virtual Task get_Deactivated();
    public sealed virtual void Activate(Dictionary`2<string, object> requestContext, Nullable`1<CancellationToken> cancellationToken);
    public sealed virtual void ReceiveMessage(object message);
    public sealed virtual void Deactivate(DeactivationReason deactivationReason, Nullable`1<CancellationToken> cancellationToken);
    [AsyncStateMachineAttribute("Orleans.Runtime.StatelessWorkerGrainContext/<DisposeAsync>d__34")]
public sealed virtual ValueTask DisposeAsync();
    public sealed virtual bool Equals(IGrainContext other);
    public sealed virtual TComponent GetComponent();
    public sealed virtual void SetComponent(TComponent value);
    public sealed virtual TTarget GetTarget();
    [AsyncStateMachineAttribute("Orleans.Runtime.StatelessWorkerGrainContext/<RunMessageLoop>d__39")]
private Task RunMessageLoop();
    private void ReceiveMessageInternal(object message);
    private void ActivateInternal(Dictionary`2<string, object> requestContext, Nullable`1<CancellationToken> cancellationToken);
    private void DeactivateInternal(DeactivationReason reason, Nullable`1<CancellationToken> cancellationToken);
    [AsyncStateMachineAttribute("Orleans.Runtime.StatelessWorkerGrainContext/<DeactivatedTaskInternal>d__43")]
private Task DeactivatedTaskInternal(TaskCompletionSource`1<bool> completion);
    [AsyncStateMachineAttribute("Orleans.Runtime.StatelessWorkerGrainContext/<DisposeAsyncInternal>d__44")]
private Task DisposeAsyncInternal(TaskCompletionSource`1<bool> completion);
    public sealed virtual void OnCreateActivation(IGrainContext grainContext);
    public sealed virtual void OnDestroyActivation(IGrainContext grainContext);
}
internal static class Orleans.Runtime.StreamResourceTestControl : object {
    internal static bool TestOnlySuppressStreamCleanupOnDeactivate;
}
internal class Orleans.Runtime.SystemStatus : object {
    public static SystemStatus Unknown;
    public static SystemStatus Creating;
    public static SystemStatus Created;
    public static SystemStatus Starting;
    public static SystemStatus Running;
    public static SystemStatus Stopping;
    public static SystemStatus ShuttingDown;
    public static SystemStatus Terminated;
    private InternalSystemStatus value;
    private SystemStatus(InternalSystemStatus name);
    private static SystemStatus();
    public virtual string ToString();
    public virtual int GetHashCode();
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(SystemStatus other);
}
public abstract class Orleans.Runtime.SystemTarget : object {
    private SystemTargetGrainId id;
    private GrainReference selfReference;
    private Message running;
    private Dictionary`2<Type, object> _components;
    [CompilerGeneratedAttribute]
private SiloAddress <Silo>k__BackingField;
    [CompilerGeneratedAttribute]
private GrainAddress <ActivationAddress>k__BackingField;
    [CompilerGeneratedAttribute]
private ActivationId <ActivationId>k__BackingField;
    private InsideRuntimeClient runtimeClient;
    private RuntimeMessagingTrace messagingTrace;
    private ILogger timerLogger;
    private ILogger logger;
    [CompilerGeneratedAttribute]
private bool <IsLowPriority>k__BackingField;
    [CompilerGeneratedAttribute]
private WorkItemGroup <WorkItemGroup>k__BackingField;
    public SiloAddress Silo { get; }
    internal GrainAddress ActivationAddress { get; }
    internal ActivationId ActivationId { get; internal set; }
    internal InsideRuntimeClient RuntimeClient { get; internal set; }
    public GrainReference GrainReference { get; }
    public GrainId GrainId { get; }
    private object Orleans.Runtime.IGrainContext.GrainInstance { get; }
    private ActivationId Orleans.Runtime.IGrainContext.ActivationId { get; }
    private GrainAddress Orleans.Runtime.IGrainContext.Address { get; }
    private RuntimeMessagingTrace MessagingTrace { get; }
    internal bool IsLowPriority { get; }
    internal WorkItemGroup WorkItemGroup { get; internal set; }
    public IServiceProvider ActivationServices { get; }
    private IGrainLifecycle Orleans.Runtime.IGrainContext.ObservableLifecycle { get; }
    public IWorkItemScheduler Scheduler { get; }
    public Task Deactivated { get; }
    internal SystemTarget(GrainType grainType, SiloAddress silo, ILoggerFactory loggerFactory);
    internal SystemTarget(GrainType grainType, SiloAddress silo, bool lowPriority, ILoggerFactory loggerFactory);
    internal SystemTarget(SystemTargetGrainId grainId, SiloAddress silo, bool lowPriority, ILoggerFactory loggerFactory);
    [CompilerGeneratedAttribute]
public sealed virtual SiloAddress get_Silo();
    [CompilerGeneratedAttribute]
internal GrainAddress get_ActivationAddress();
    [CompilerGeneratedAttribute]
internal ActivationId get_ActivationId();
    [CompilerGeneratedAttribute]
internal void set_ActivationId(ActivationId value);
    internal InsideRuntimeClient get_RuntimeClient();
    internal void set_RuntimeClient(InsideRuntimeClient value);
    public sealed virtual GrainReference get_GrainReference();
    public sealed virtual GrainId get_GrainId();
    private sealed virtual override object Orleans.Runtime.IGrainContext.get_GrainInstance();
    private sealed virtual override ActivationId Orleans.Runtime.IGrainContext.get_ActivationId();
    private sealed virtual override GrainAddress Orleans.Runtime.IGrainContext.get_Address();
    private RuntimeMessagingTrace get_MessagingTrace();
    [CompilerGeneratedAttribute]
internal bool get_IsLowPriority();
    [CompilerGeneratedAttribute]
internal WorkItemGroup get_WorkItemGroup();
    [CompilerGeneratedAttribute]
internal void set_WorkItemGroup(WorkItemGroup value);
    public sealed virtual IServiceProvider get_ActivationServices();
    private sealed virtual override IGrainLifecycle Orleans.Runtime.IGrainContext.get_ObservableLifecycle();
    public sealed virtual IWorkItemScheduler get_Scheduler();
    public TComponent GetComponent();
    public sealed virtual void SetComponent(TComponent instance);
    internal void HandleNewRequest(Message request);
    internal void HandleResponse(Message response);
    public IDisposable RegisterTimer(Func`2<object, Task> asyncCallback, object state, TimeSpan dueTime, TimeSpan period, string name);
    internal IGrainTimer RegisterGrainTimer(Func`2<object, Task> asyncCallback, object state, TimeSpan dueTime, TimeSpan period, string name);
    public sealed virtual string ToString();
    private sealed virtual override string System.IFormattable.ToString(string format, IFormatProvider formatProvider);
    private sealed virtual override bool System.ISpanFormattable.TryFormat(Span`1<char> destination, Int32& charsWritten, ReadOnlySpan`1<char> format, IFormatProvider provider);
    internal string ToDetailedString();
    private sealed virtual override bool System.IEquatable<Orleans.Runtime.IGrainContext>.Equals(IGrainContext other);
    public sealed virtual ValueTuple`2<TExtension, TExtensionInterface> GetOrSetExtension(Func`1<TExtension> newExtensionFunc);
    private sealed virtual override TComponent Orleans.Serialization.Invocation.ITargetHolder.GetComponent();
    public sealed virtual TExtensionInterface GetExtension();
    public sealed virtual void ReceiveMessage(object message);
    public sealed virtual TTarget GetTarget();
    public sealed virtual void Activate(Dictionary`2<string, object> requestContext, Nullable`1<CancellationToken> cancellationToken);
    public sealed virtual void Deactivate(DeactivationReason deactivationReason, Nullable`1<CancellationToken> cancellationToken);
    public sealed virtual Task get_Deactivated();
}
internal interface Orleans.Runtime.TestHooks.ITestHooks {
    public abstract virtual Task`1<SiloAddress> GetConsistentRingPrimaryTargetSilo(UInt32 key);
    public abstract virtual Task`1<string> GetConsistentRingProviderDiagnosticInfo();
    public abstract virtual Task`1<string> GetServiceId();
    public abstract virtual Task`1<ICollection`1<string>> GetStorageProviderNames();
    public abstract virtual Task`1<bool> HasStorageProvider(string providerName);
    public abstract virtual Task`1<bool> HasStreamProvider(string providerName);
    public abstract virtual Task`1<int> UnregisterGrainForTesting(GrainId grain);
    public abstract virtual Task LatchIsOverloaded(bool overloaded, TimeSpan latchPeriod);
    public abstract virtual Task`1<Dictionary`2<SiloAddress, SiloStatus>> GetApproximateSiloStatuses();
}
internal interface Orleans.Runtime.TestHooks.ITestHooksSystemTarget {
}
internal class Orleans.Runtime.TestHooks.TestHooksHostEnvironmentStatistics : object {
    [CompilerGeneratedAttribute]
private Nullable`1<long> <TotalPhysicalMemory>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<float> <CpuUsage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <AvailableMemory>k__BackingField;
    public Nullable`1<long> TotalPhysicalMemory { get; public set; }
    public Nullable`1<float> CpuUsage { get; public set; }
    public Nullable`1<long> AvailableMemory { get; public set; }
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<long> get_TotalPhysicalMemory();
    [CompilerGeneratedAttribute]
public void set_TotalPhysicalMemory(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<float> get_CpuUsage();
    [CompilerGeneratedAttribute]
public void set_CpuUsage(Nullable`1<float> value);
    [CompilerGeneratedAttribute]
public sealed virtual Nullable`1<long> get_AvailableMemory();
    [CompilerGeneratedAttribute]
public void set_AvailableMemory(Nullable`1<long> value);
}
internal class Orleans.Runtime.TestHooks.TestHooksSystemTarget : SystemTarget {
    private IServiceProvider serviceProvider;
    private ISiloStatusOracle siloStatusOracle;
    private TestHooksHostEnvironmentStatistics hostEnvironmentStatistics;
    private LoadSheddingOptions loadSheddingOptions;
    private IConsistentRingProvider consistentRingProvider;
    public TestHooksSystemTarget(IServiceProvider serviceProvider, ILocalSiloDetails siloDetails, ILoggerFactory loggerFactory, ISiloStatusOracle siloStatusOracle, TestHooksHostEnvironmentStatistics hostEnvironmentStatistics, IOptions`1<LoadSheddingOptions> loadSheddingOptions);
    public sealed virtual Task`1<SiloAddress> GetConsistentRingPrimaryTargetSilo(UInt32 key);
    public sealed virtual Task`1<string> GetConsistentRingProviderDiagnosticInfo();
    public sealed virtual Task`1<string> GetServiceId();
    public sealed virtual Task`1<bool> HasStorageProvider(string providerName);
    public sealed virtual Task`1<bool> HasStreamProvider(string providerName);
    public sealed virtual Task`1<ICollection`1<string>> GetStorageProviderNames();
    public sealed virtual Task`1<int> UnregisterGrainForTesting(GrainId grain);
    public sealed virtual Task LatchIsOverloaded(bool overloaded, TimeSpan latchPeriod);
    public sealed virtual Task`1<Dictionary`2<SiloAddress, SiloStatus>> GetApproximateSiloStatuses();
    private void LatchCpuUsage(Nullable`1<float> cpuUsage, TimeSpan latchPeriod);
}
internal static class Orleans.Runtime.Utilities.FactoryUtility : object {
    private static Object[] EmptyArguments;
    private static FactoryUtility();
    public static Factory`1<TInstance> Create(IServiceProvider serviceProvider);
    public static Factory`2<TParam1, TInstance> Create(IServiceProvider serviceProvider);
    public static Factory`3<TParam1, TParam2, TInstance> Create(IServiceProvider serviceProvider);
    public static Factory`4<TParam1, TParam2, TParam3, TInstance> Create(IServiceProvider serviceProvider);
}
public static class Orleans.Runtime.Utilities.OrleansDebuggerHelper : object {
    public static object GetGrainInstance(object grainReference);
}
internal class Orleans.Runtime.Versions.CachedVersionSelectorManager : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ConcurrentDictionary`2<ValueTuple`3<GrainType, GrainInterfaceType, ushort>, CachedEntry> suitableSilosCache;
    private GrainVersionManifest grainInterfaceVersions;
    [CompilerGeneratedAttribute]
private VersionSelectorManager <VersionSelectorManager>k__BackingField;
    [CompilerGeneratedAttribute]
private CompatibilityDirectorManager <CompatibilityDirectorManager>k__BackingField;
    public VersionSelectorManager VersionSelectorManager { get; }
    public CompatibilityDirectorManager CompatibilityDirectorManager { get; }
    public CachedVersionSelectorManager(GrainVersionManifest grainInterfaceVersions, VersionSelectorManager versionSelectorManager, CompatibilityDirectorManager compatibilityDirectorManager);
    [CompilerGeneratedAttribute]
public VersionSelectorManager get_VersionSelectorManager();
    [CompilerGeneratedAttribute]
public CompatibilityDirectorManager get_CompatibilityDirectorManager();
    public CachedEntry GetSuitableSilos(GrainType grainType, GrainInterfaceType interfaceId, ushort requestedVersion);
    public void ResetCache();
    private CachedEntry GetSuitableSilosImpl(ValueTuple`3<GrainType, GrainInterfaceType, ushort> key);
}
internal class Orleans.Runtime.Versions.Compatibility.AllVersionsCompatibilityDirector : object {
    public sealed virtual bool IsCompatible(ushort requestedVersion, ushort currentVersion);
}
internal class Orleans.Runtime.Versions.Compatibility.BackwardCompatilityDirector : object {
    public sealed virtual bool IsCompatible(ushort requestedVersion, ushort currentVersion);
}
internal class Orleans.Runtime.Versions.Compatibility.CompatibilityDirectorManager : object {
    private CompatibilityStrategy strategyFromConfig;
    private IServiceProvider serviceProvider;
    private Dictionary`2<GrainInterfaceType, ICompatibilityDirector> compatibilityDirectors;
    [CompilerGeneratedAttribute]
private ICompatibilityDirector <Default>k__BackingField;
    public ICompatibilityDirector Default { get; private set; }
    public CompatibilityDirectorManager(IServiceProvider serviceProvider, IOptions`1<GrainVersioningOptions> options);
    [CompilerGeneratedAttribute]
public ICompatibilityDirector get_Default();
    [CompilerGeneratedAttribute]
private void set_Default(ICompatibilityDirector value);
    public ICompatibilityDirector GetDirector(GrainInterfaceType interfaceType);
    public void SetStrategy(CompatibilityStrategy strategy);
    public void SetStrategy(GrainInterfaceType interfaceType, CompatibilityStrategy strategy);
    private static ICompatibilityDirector ResolveVersionDirector(IServiceProvider serviceProvider, CompatibilityStrategy compatibilityStrategy);
}
internal class Orleans.Runtime.Versions.Compatibility.StrictVersionCompatibilityDirector : object {
    public sealed virtual bool IsCompatible(ushort requestedVersion, ushort currentVersion);
}
internal class Orleans.Runtime.Versions.GrainVersionStore : object {
    private IInternalGrainFactory grainFactory;
    private IServiceProvider services;
    private string clusterId;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    private IVersionStoreGrain StoreGrain { get; }
    public bool IsEnabled { get; private set; }
    public GrainVersionStore(IInternalGrainFactory grainFactory, ILocalSiloDetails siloDetails, IServiceProvider services);
    private IVersionStoreGrain get_StoreGrain();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsEnabled();
    [CompilerGeneratedAttribute]
private void set_IsEnabled(bool value);
    [AsyncStateMachineAttribute("Orleans.Runtime.Versions.GrainVersionStore/<SetCompatibilityStrategy>d__10")]
public sealed virtual Task SetCompatibilityStrategy(CompatibilityStrategy strategy);
    [AsyncStateMachineAttribute("Orleans.Runtime.Versions.GrainVersionStore/<SetSelectorStrategy>d__11")]
public sealed virtual Task SetSelectorStrategy(VersionSelectorStrategy strategy);
    [AsyncStateMachineAttribute("Orleans.Runtime.Versions.GrainVersionStore/<SetCompatibilityStrategy>d__12")]
public sealed virtual Task SetCompatibilityStrategy(GrainInterfaceType interfaceType, CompatibilityStrategy strategy);
    [AsyncStateMachineAttribute("Orleans.Runtime.Versions.GrainVersionStore/<SetSelectorStrategy>d__13")]
public sealed virtual Task SetSelectorStrategy(GrainInterfaceType interfaceType, VersionSelectorStrategy strategy);
    [AsyncStateMachineAttribute("Orleans.Runtime.Versions.GrainVersionStore/<GetCompatibilityStrategies>d__14")]
public sealed virtual Task`1<Dictionary`2<GrainInterfaceType, CompatibilityStrategy>> GetCompatibilityStrategies();
    [AsyncStateMachineAttribute("Orleans.Runtime.Versions.GrainVersionStore/<GetSelectorStrategies>d__15")]
public sealed virtual Task`1<Dictionary`2<GrainInterfaceType, VersionSelectorStrategy>> GetSelectorStrategies();
    [AsyncStateMachineAttribute("Orleans.Runtime.Versions.GrainVersionStore/<GetCompatibilityStrategy>d__16")]
public sealed virtual Task`1<CompatibilityStrategy> GetCompatibilityStrategy();
    [AsyncStateMachineAttribute("Orleans.Runtime.Versions.GrainVersionStore/<GetSelectorStrategy>d__17")]
public sealed virtual Task`1<VersionSelectorStrategy> GetSelectorStrategy();
    private void ThrowIfNotEnabled();
    public sealed virtual void Participate(ISiloLifecycle lifecycle);
    private Task OnStart(CancellationToken token);
}
internal interface Orleans.Runtime.Versions.IVersionStoreGrain {
    public abstract virtual Task`1<Dictionary`2<GrainInterfaceType, CompatibilityStrategy>> GetCompatibilityStrategies();
    public abstract virtual Task`1<Dictionary`2<GrainInterfaceType, VersionSelectorStrategy>> GetSelectorStrategies();
    public abstract virtual Task`1<CompatibilityStrategy> GetCompatibilityStrategy();
    public abstract virtual Task`1<VersionSelectorStrategy> GetSelectorStrategy();
    public abstract virtual Task SetCompatibilityStrategy(CompatibilityStrategy strategy);
    public abstract virtual Task SetSelectorStrategy(VersionSelectorStrategy strategy);
    public abstract virtual Task SetCompatibilityStrategy(GrainInterfaceType interfaceType, CompatibilityStrategy strategy);
    public abstract virtual Task SetSelectorStrategy(GrainInterfaceType interfaceType, VersionSelectorStrategy strategy);
}
internal class Orleans.Runtime.Versions.Selector.AllCompatibleVersionsSelector : object {
    public sealed virtual UInt16[] GetSuitableVersion(ushort requestedVersion, UInt16[] availableVersions, ICompatibilityDirector compatibilityDirector);
}
internal class Orleans.Runtime.Versions.Selector.LatestVersionSelector : object {
    public sealed virtual UInt16[] GetSuitableVersion(ushort requestedVersion, UInt16[] availableVersions, ICompatibilityDirector compatibilityDirector);
}
internal class Orleans.Runtime.Versions.Selector.MinimumVersionSelector : object {
    public sealed virtual UInt16[] GetSuitableVersion(ushort requestedVersion, UInt16[] availableVersions, ICompatibilityDirector compatibilityDirector);
}
internal class Orleans.Runtime.Versions.Selector.VersionSelectorManager : object {
    private VersionSelectorStrategy strategyFromConfig;
    private IServiceProvider serviceProvider;
    private Dictionary`2<GrainInterfaceType, IVersionSelector> versionSelectors;
    [CompilerGeneratedAttribute]
private IVersionSelector <Default>k__BackingField;
    public IVersionSelector Default { get; public set; }
    public VersionSelectorManager(IServiceProvider serviceProvider, IOptions`1<GrainVersioningOptions> options);
    [CompilerGeneratedAttribute]
public IVersionSelector get_Default();
    [CompilerGeneratedAttribute]
public void set_Default(IVersionSelector value);
    public IVersionSelector GetSelector(GrainInterfaceType interfaceType);
    public void SetSelector(VersionSelectorStrategy strategy);
    public void SetSelector(GrainInterfaceType interfaceType, VersionSelectorStrategy strategy);
    private static IVersionSelector ResolveVersionSelector(IServiceProvider serviceProvider, VersionSelectorStrategy strategy);
}
[StorageProviderAttribute]
internal class Orleans.Runtime.Versions.VersionStoreGrain : Grain`1<VersionStoreGrainState> {
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    public bool IsEnabled { get; }
    [AsyncStateMachineAttribute("Orleans.Runtime.Versions.VersionStoreGrain/<SetCompatibilityStrategy>d__0")]
public sealed virtual Task SetCompatibilityStrategy(CompatibilityStrategy strategy);
    [AsyncStateMachineAttribute("Orleans.Runtime.Versions.VersionStoreGrain/<SetSelectorStrategy>d__1")]
public sealed virtual Task SetSelectorStrategy(VersionSelectorStrategy strategy);
    [AsyncStateMachineAttribute("Orleans.Runtime.Versions.VersionStoreGrain/<SetCompatibilityStrategy>d__2")]
public sealed virtual Task SetCompatibilityStrategy(GrainInterfaceType ifaceId, CompatibilityStrategy strategy);
    [AsyncStateMachineAttribute("Orleans.Runtime.Versions.VersionStoreGrain/<SetSelectorStrategy>d__3")]
public sealed virtual Task SetSelectorStrategy(GrainInterfaceType ifaceId, VersionSelectorStrategy strategy);
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    public sealed virtual Task`1<Dictionary`2<GrainInterfaceType, CompatibilityStrategy>> GetCompatibilityStrategies();
    public sealed virtual Task`1<Dictionary`2<GrainInterfaceType, VersionSelectorStrategy>> GetSelectorStrategies();
    public sealed virtual Task`1<CompatibilityStrategy> GetCompatibilityStrategy();
    public sealed virtual Task`1<VersionSelectorStrategy> GetSelectorStrategy();
}
[GenerateSerializerAttribute]
internal class Orleans.Runtime.Versions.VersionStoreGrainState : object {
    [CompilerGeneratedAttribute]
private Dictionary`2<GrainInterfaceType, CompatibilityStrategy> <CompatibilityStrategies>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<GrainInterfaceType, VersionSelectorStrategy> <VersionSelectorStrategies>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionSelectorStrategy <SelectorOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private CompatibilityStrategy <CompatibilityOverride>k__BackingField;
    [IdAttribute("0")]
internal Dictionary`2<GrainInterfaceType, CompatibilityStrategy> CompatibilityStrategies { get; }
    [IdAttribute("1")]
internal Dictionary`2<GrainInterfaceType, VersionSelectorStrategy> VersionSelectorStrategies { get; }
    [IdAttribute("2")]
public VersionSelectorStrategy SelectorOverride { get; public set; }
    [IdAttribute("3")]
public CompatibilityStrategy CompatibilityOverride { get; public set; }
    [CompilerGeneratedAttribute]
internal Dictionary`2<GrainInterfaceType, CompatibilityStrategy> get_CompatibilityStrategies();
    [CompilerGeneratedAttribute]
internal Dictionary`2<GrainInterfaceType, VersionSelectorStrategy> get_VersionSelectorStrategies();
    [CompilerGeneratedAttribute]
public VersionSelectorStrategy get_SelectorOverride();
    [CompilerGeneratedAttribute]
public void set_SelectorOverride(VersionSelectorStrategy value);
    [CompilerGeneratedAttribute]
public CompatibilityStrategy get_CompatibilityOverride();
    [CompilerGeneratedAttribute]
public void set_CompatibilityOverride(CompatibilityStrategy value);
}
internal class Orleans.Runtime.Watchdog : object {
    private CancellationTokenSource cancellation;
    private static TimeSpan heartbeatPeriod;
    private TimeSpan healthCheckPeriod;
    private DateTime lastHeartbeat;
    private DateTime lastWatchdogCheck;
    private List`1<IHealthCheckParticipant> participants;
    private ILogger logger;
    private Thread thread;
    public Watchdog(TimeSpan watchdogPeriod, List`1<IHealthCheckParticipant> watchables, ILogger`1<Watchdog> logger);
    private static Watchdog();
    public void Start();
    public void Stop();
    protected void Run();
    private void WatchdogHeartbeatTick();
    private static void CheckYourOwnHealth(DateTime lastCheckt, ILogger logger);
}
internal class Orleans.Timers.TimerRegistry : object {
    private ILogger timerLogger;
    public TimerRegistry(ILoggerFactory loggerFactory);
    public sealed virtual IDisposable RegisterTimer(IGrainContext grainContext, Func`2<object, Task> asyncCallback, object state, TimeSpan dueTime, TimeSpan period);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans_Runtime.Metadata_Orleans_Runtime : object {
    public sealed virtual void Configure(TypeManifestOptions config);
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Activator_Invokable_IRemoteGrainDirectory_GrainReference_1 : object {
    public sealed virtual Invokable_IRemoteGrainDirectory_GrainReference_1 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Activator_Invokable_IRemoteGrainDirectory_GrainReference_2 : object {
    public sealed virtual Invokable_IRemoteGrainDirectory_GrainReference_2 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Activator_Invokable_IRemoteGrainDirectory_GrainReference_3 : object {
    public sealed virtual Invokable_IRemoteGrainDirectory_GrainReference_3 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Activator_Invokable_IRemoteGrainDirectory_GrainReference_4 : object {
    public sealed virtual Invokable_IRemoteGrainDirectory_GrainReference_4 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Activator_Invokable_IRemoteGrainDirectory_GrainReference_5 : object {
    public sealed virtual Invokable_IRemoteGrainDirectory_GrainReference_5 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Activator_Invokable_IRemoteGrainDirectory_GrainReference_6 : object {
    public sealed virtual Invokable_IRemoteGrainDirectory_GrainReference_6 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Activator_Invokable_IRemoteGrainDirectory_GrainReference_7 : object {
    public sealed virtual Invokable_IRemoteGrainDirectory_GrainReference_7 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Activator_Invokable_IRemoteGrainDirectory_GrainReference_8 : object {
    public sealed virtual Invokable_IRemoteGrainDirectory_GrainReference_8 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Activator_Invokable_IRemoteGrainDirectory_GrainReference_9 : object {
    public sealed virtual Invokable_IRemoteGrainDirectory_GrainReference_9 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Activator_Invokable_ISiloManifestSystemTarget_GrainReference_1 : object {
    public sealed virtual Invokable_ISiloManifestSystemTarget_GrainReference_1 Create();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
public class OrleansCodeGen.Orleans.Runtime.Codec_ClusterMember : object {
    private static Type _stringType;
    private static Type _siloAddressType;
    private static Type _siloStatusType;
    private static Type _codecFieldType;
    private IActivator`1<ClusterMember> _activator;
    private IFieldCodec`1<SiloAddress> _siloAddressCodec;
    private Codec_SiloStatus _siloStatusCodec;
    private Action`2<ClusterMember, string> setField0;
    private Action`2<ClusterMember, SiloAddress> setField1;
    private Action`2<ClusterMember, SiloStatus> setField2;
    public Codec_ClusterMember(IActivator`1<ClusterMember> _activator, ICodecProvider codecProvider);
    private static Codec_ClusterMember();
    public sealed virtual void Serialize(Writer`1& writer, ClusterMember instance);
    public sealed virtual void Deserialize(Reader`1& reader, ClusterMember instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, ClusterMember value);
    public sealed virtual ClusterMember ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
public class OrleansCodeGen.Orleans.Runtime.Codec_ClusterMembershipSnapshot : object {
    private static Type _immutableDictionary_SiloAddress_ClusterMemberType;
    private static Type _membershipVersionType;
    private static Type _codecFieldType;
    private IActivator`1<ClusterMembershipSnapshot> _activator;
    private IFieldCodec`1<ImmutableDictionary`2<SiloAddress, ClusterMember>> _immutableDictionary_SiloAddress_ClusterMemberCodec;
    private Codec_MembershipVersion _membershipVersionCodec;
    private Action`2<ClusterMembershipSnapshot, ImmutableDictionary`2<SiloAddress, ClusterMember>> setField0;
    private Action`2<ClusterMembershipSnapshot, MembershipVersion> setField1;
    public Codec_ClusterMembershipSnapshot(IActivator`1<ClusterMembershipSnapshot> _activator, ICodecProvider codecProvider);
    private static Codec_ClusterMembershipSnapshot();
    public sealed virtual void Serialize(Writer`1& writer, ClusterMembershipSnapshot instance);
    public sealed virtual void Deserialize(Reader`1& reader, ClusterMembershipSnapshot instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, ClusterMembershipSnapshot value);
    public sealed virtual ClusterMembershipSnapshot ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
public class OrleansCodeGen.Orleans.Runtime.Codec_ClusterMembershipUpdate : object {
    private static Type _immutableArray_ClusterMemberType;
    private static Type _clusterMembershipSnapshotType;
    private static Type _codecFieldType;
    private IActivator`1<ClusterMembershipUpdate> _activator;
    private IFieldCodec`1<ImmutableArray`1<ClusterMember>> _immutableArray_ClusterMemberCodec;
    private IFieldCodec`1<ClusterMembershipSnapshot> _clusterMembershipSnapshotCodec;
    private Action`2<ClusterMembershipUpdate, ImmutableArray`1<ClusterMember>> setField0;
    private Action`2<ClusterMembershipUpdate, ClusterMembershipSnapshot> setField1;
    public Codec_ClusterMembershipUpdate(IActivator`1<ClusterMembershipUpdate> _activator, ICodecProvider codecProvider);
    private static Codec_ClusterMembershipUpdate();
    public sealed virtual void Serialize(Writer`1& writer, ClusterMembershipUpdate instance);
    public sealed virtual void Deserialize(Reader`1& reader, ClusterMembershipUpdate instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, ClusterMembershipUpdate value);
    public sealed virtual ClusterMembershipUpdate ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Codec_Invokable_IRemoteGrainDirectory_GrainReference_1 : object {
    private static Type _list_GrainAddressType;
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest> _baseTypeSerializer;
    private ListCodec`1<GrainAddress> _list_GrainAddressCodec;
    public Codec_Invokable_IRemoteGrainDirectory_GrainReference_1(IBaseCodec`1<TaskRequest> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_IRemoteGrainDirectory_GrainReference_1();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_IRemoteGrainDirectory_GrainReference_1 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_IRemoteGrainDirectory_GrainReference_1 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IRemoteGrainDirectory_GrainReference_1 value);
    public sealed virtual Invokable_IRemoteGrainDirectory_GrainReference_1 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Codec_Invokable_IRemoteGrainDirectory_GrainReference_2 : object {
    private static Type _grainIdType;
    private static Type _int32Type;
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest> _baseTypeSerializer;
    private Codec_GrainId _grainIdCodec;
    public Codec_Invokable_IRemoteGrainDirectory_GrainReference_2(IBaseCodec`1<TaskRequest> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_IRemoteGrainDirectory_GrainReference_2();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_IRemoteGrainDirectory_GrainReference_2 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_IRemoteGrainDirectory_GrainReference_2 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IRemoteGrainDirectory_GrainReference_2 value);
    public sealed virtual Invokable_IRemoteGrainDirectory_GrainReference_2 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Codec_Invokable_IRemoteGrainDirectory_GrainReference_3 : object {
    private static Type _list_ValueTuple_GrainId_Int32Type;
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest`1<List`1<AddressAndTag>>> _baseTypeSerializer;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ListCodec`1<ValueTuple`2<GrainId, int>> _list_ValueTuple_GrainId_Int32Codec;
    public Codec_Invokable_IRemoteGrainDirectory_GrainReference_3(IBaseCodec`1<TaskRequest`1<List`1<AddressAndTag>>> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_IRemoteGrainDirectory_GrainReference_3();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_IRemoteGrainDirectory_GrainReference_3 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_IRemoteGrainDirectory_GrainReference_3 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IRemoteGrainDirectory_GrainReference_3 value);
    public sealed virtual Invokable_IRemoteGrainDirectory_GrainReference_3 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Codec_Invokable_IRemoteGrainDirectory_GrainReference_4 : object {
    private static Type _grainIdType;
    private static Type _int32Type;
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest`1<AddressAndTag>> _baseTypeSerializer;
    private Codec_GrainId _grainIdCodec;
    public Codec_Invokable_IRemoteGrainDirectory_GrainReference_4(IBaseCodec`1<TaskRequest`1<AddressAndTag>> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_IRemoteGrainDirectory_GrainReference_4();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_IRemoteGrainDirectory_GrainReference_4 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_IRemoteGrainDirectory_GrainReference_4 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IRemoteGrainDirectory_GrainReference_4 value);
    public sealed virtual Invokable_IRemoteGrainDirectory_GrainReference_4 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Codec_Invokable_IRemoteGrainDirectory_GrainReference_5 : object {
    private static Type _grainAddressType;
    private static Type _int32Type;
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest`1<AddressAndTag>> _baseTypeSerializer;
    private Codec_GrainAddress _grainAddressCodec;
    public Codec_Invokable_IRemoteGrainDirectory_GrainReference_5(IBaseCodec`1<TaskRequest`1<AddressAndTag>> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_IRemoteGrainDirectory_GrainReference_5();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_IRemoteGrainDirectory_GrainReference_5 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_IRemoteGrainDirectory_GrainReference_5 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IRemoteGrainDirectory_GrainReference_5 value);
    public sealed virtual Invokable_IRemoteGrainDirectory_GrainReference_5 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Codec_Invokable_IRemoteGrainDirectory_GrainReference_6 : object {
    private static Type _list_GrainAddressType;
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest> _baseTypeSerializer;
    private ListCodec`1<GrainAddress> _list_GrainAddressCodec;
    public Codec_Invokable_IRemoteGrainDirectory_GrainReference_6(IBaseCodec`1<TaskRequest> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_IRemoteGrainDirectory_GrainReference_6();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_IRemoteGrainDirectory_GrainReference_6 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_IRemoteGrainDirectory_GrainReference_6 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IRemoteGrainDirectory_GrainReference_6 value);
    public sealed virtual Invokable_IRemoteGrainDirectory_GrainReference_6 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Codec_Invokable_IRemoteGrainDirectory_GrainReference_7 : object {
    private static Type _siloAddressType;
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest> _baseTypeSerializer;
    private IFieldCodec`1<SiloAddress> _siloAddressCodec;
    public Codec_Invokable_IRemoteGrainDirectory_GrainReference_7(IBaseCodec`1<TaskRequest> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_IRemoteGrainDirectory_GrainReference_7();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_IRemoteGrainDirectory_GrainReference_7 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_IRemoteGrainDirectory_GrainReference_7 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IRemoteGrainDirectory_GrainReference_7 value);
    public sealed virtual Invokable_IRemoteGrainDirectory_GrainReference_7 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Codec_Invokable_IRemoteGrainDirectory_GrainReference_8 : object {
    private static Type _grainAddressType;
    private static Type _unregistrationCauseType;
    private static Type _int32Type;
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest> _baseTypeSerializer;
    private Codec_GrainAddress _grainAddressCodec;
    private IFieldCodec`1<UnregistrationCause> _unregistrationCauseCodec;
    public Codec_Invokable_IRemoteGrainDirectory_GrainReference_8(IBaseCodec`1<TaskRequest> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_IRemoteGrainDirectory_GrainReference_8();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_IRemoteGrainDirectory_GrainReference_8 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_IRemoteGrainDirectory_GrainReference_8 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IRemoteGrainDirectory_GrainReference_8 value);
    public sealed virtual Invokable_IRemoteGrainDirectory_GrainReference_8 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Codec_Invokable_IRemoteGrainDirectory_GrainReference_9 : object {
    private static Type _list_GrainAddressType;
    private static Type _unregistrationCauseType;
    private static Type _int32Type;
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest> _baseTypeSerializer;
    private ListCodec`1<GrainAddress> _list_GrainAddressCodec;
    private IFieldCodec`1<UnregistrationCause> _unregistrationCauseCodec;
    public Codec_Invokable_IRemoteGrainDirectory_GrainReference_9(IBaseCodec`1<TaskRequest> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_IRemoteGrainDirectory_GrainReference_9();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_IRemoteGrainDirectory_GrainReference_9 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_IRemoteGrainDirectory_GrainReference_9 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IRemoteGrainDirectory_GrainReference_9 value);
    public sealed virtual Invokable_IRemoteGrainDirectory_GrainReference_9 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Codec_Invokable_ISiloManifestSystemTarget_GrainReference_1 : object {
    private static Type _codecFieldType;
    private IBaseCodec`1<Request`1<GrainManifest>> _baseTypeSerializer;
    public Codec_Invokable_ISiloManifestSystemTarget_GrainReference_1(IBaseCodec`1<Request`1<GrainManifest>> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_ISiloManifestSystemTarget_GrainReference_1();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_ISiloManifestSystemTarget_GrainReference_1 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_ISiloManifestSystemTarget_GrainReference_1 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_ISiloManifestSystemTarget_GrainReference_1 value);
    public sealed virtual Invokable_ISiloManifestSystemTarget_GrainReference_1 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
public class OrleansCodeGen.Orleans.Runtime.Copier_ClusterMember : object {
    private IActivator`1<ClusterMember> _activator;
    private IDeepCopier`1<SiloAddress> _siloAddressCopier0;
    private Copier_SiloStatus _siloStatusCopier1;
    private Action`2<ClusterMember, string> setField0;
    private Action`2<ClusterMember, SiloAddress> setField1;
    private Action`2<ClusterMember, SiloStatus> setField2;
    public Copier_ClusterMember(IActivator`1<ClusterMember> _activator, ICodecProvider codecProvider);
    public sealed virtual ClusterMember DeepCopy(ClusterMember original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
public class OrleansCodeGen.Orleans.Runtime.Copier_ClusterMembershipSnapshot : object {
    private IActivator`1<ClusterMembershipSnapshot> _activator;
    private IDeepCopier`1<ImmutableDictionary`2<SiloAddress, ClusterMember>> _immutableDictionary_SiloAddress_ClusterMemberCopier0;
    private Copier_MembershipVersion _membershipVersionCopier1;
    private Action`2<ClusterMembershipSnapshot, ImmutableDictionary`2<SiloAddress, ClusterMember>> setField0;
    private Action`2<ClusterMembershipSnapshot, MembershipVersion> setField1;
    public Copier_ClusterMembershipSnapshot(IActivator`1<ClusterMembershipSnapshot> _activator, ICodecProvider codecProvider);
    public sealed virtual ClusterMembershipSnapshot DeepCopy(ClusterMembershipSnapshot original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
public class OrleansCodeGen.Orleans.Runtime.Copier_ClusterMembershipUpdate : object {
    private IActivator`1<ClusterMembershipUpdate> _activator;
    private IDeepCopier`1<ImmutableArray`1<ClusterMember>> _immutableArray_ClusterMemberCopier0;
    private IDeepCopier`1<ClusterMembershipSnapshot> _clusterMembershipSnapshotCopier1;
    private Action`2<ClusterMembershipUpdate, ImmutableArray`1<ClusterMember>> setField0;
    private Action`2<ClusterMembershipUpdate, ClusterMembershipSnapshot> setField1;
    public Copier_ClusterMembershipUpdate(IActivator`1<ClusterMembershipUpdate> _activator, ICodecProvider codecProvider);
    public sealed virtual ClusterMembershipUpdate DeepCopy(ClusterMembershipUpdate original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Copier_Invokable_IRemoteGrainDirectory_GrainReference_1 : object {
    private IBaseCopier`1<TaskRequest> _baseTypeCopier;
    private ListCopier`1<GrainAddress> _list_GrainAddressCopier0;
    public Copier_Invokable_IRemoteGrainDirectory_GrainReference_1(IBaseCopier`1<TaskRequest> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_IRemoteGrainDirectory_GrainReference_1 DeepCopy(Invokable_IRemoteGrainDirectory_GrainReference_1 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Copier_Invokable_IRemoteGrainDirectory_GrainReference_2 : object {
    private IBaseCopier`1<TaskRequest> _baseTypeCopier;
    private Copier_GrainId _grainIdCopier0;
    public Copier_Invokable_IRemoteGrainDirectory_GrainReference_2(IBaseCopier`1<TaskRequest> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_IRemoteGrainDirectory_GrainReference_2 DeepCopy(Invokable_IRemoteGrainDirectory_GrainReference_2 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Copier_Invokable_IRemoteGrainDirectory_GrainReference_3 : object {
    private IBaseCopier`1<TaskRequest`1<List`1<AddressAndTag>>> _baseTypeCopier;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ListCopier`1<ValueTuple`2<GrainId, int>> _list_ValueTuple_GrainId_Int32Copier0;
    public Copier_Invokable_IRemoteGrainDirectory_GrainReference_3(IBaseCopier`1<TaskRequest`1<List`1<AddressAndTag>>> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_IRemoteGrainDirectory_GrainReference_3 DeepCopy(Invokable_IRemoteGrainDirectory_GrainReference_3 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Copier_Invokable_IRemoteGrainDirectory_GrainReference_4 : object {
    private IBaseCopier`1<TaskRequest`1<AddressAndTag>> _baseTypeCopier;
    private Copier_GrainId _grainIdCopier0;
    public Copier_Invokable_IRemoteGrainDirectory_GrainReference_4(IBaseCopier`1<TaskRequest`1<AddressAndTag>> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_IRemoteGrainDirectory_GrainReference_4 DeepCopy(Invokable_IRemoteGrainDirectory_GrainReference_4 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Copier_Invokable_IRemoteGrainDirectory_GrainReference_5 : object {
    private IBaseCopier`1<TaskRequest`1<AddressAndTag>> _baseTypeCopier;
    private Copier_GrainAddress _grainAddressCopier0;
    public Copier_Invokable_IRemoteGrainDirectory_GrainReference_5(IBaseCopier`1<TaskRequest`1<AddressAndTag>> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_IRemoteGrainDirectory_GrainReference_5 DeepCopy(Invokable_IRemoteGrainDirectory_GrainReference_5 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Copier_Invokable_IRemoteGrainDirectory_GrainReference_6 : object {
    private IBaseCopier`1<TaskRequest> _baseTypeCopier;
    private ListCopier`1<GrainAddress> _list_GrainAddressCopier0;
    public Copier_Invokable_IRemoteGrainDirectory_GrainReference_6(IBaseCopier`1<TaskRequest> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_IRemoteGrainDirectory_GrainReference_6 DeepCopy(Invokable_IRemoteGrainDirectory_GrainReference_6 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Copier_Invokable_IRemoteGrainDirectory_GrainReference_7 : object {
    private IBaseCopier`1<TaskRequest> _baseTypeCopier;
    private IDeepCopier`1<SiloAddress> _siloAddressCopier0;
    public Copier_Invokable_IRemoteGrainDirectory_GrainReference_7(IBaseCopier`1<TaskRequest> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_IRemoteGrainDirectory_GrainReference_7 DeepCopy(Invokable_IRemoteGrainDirectory_GrainReference_7 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Copier_Invokable_IRemoteGrainDirectory_GrainReference_8 : object {
    private IBaseCopier`1<TaskRequest> _baseTypeCopier;
    private Copier_GrainAddress _grainAddressCopier0;
    private IDeepCopier`1<UnregistrationCause> _unregistrationCauseCopier1;
    public Copier_Invokable_IRemoteGrainDirectory_GrainReference_8(IBaseCopier`1<TaskRequest> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_IRemoteGrainDirectory_GrainReference_8 DeepCopy(Invokable_IRemoteGrainDirectory_GrainReference_8 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Copier_Invokable_IRemoteGrainDirectory_GrainReference_9 : object {
    private IBaseCopier`1<TaskRequest> _baseTypeCopier;
    private ListCopier`1<GrainAddress> _list_GrainAddressCopier0;
    private IDeepCopier`1<UnregistrationCause> _unregistrationCauseCopier1;
    public Copier_Invokable_IRemoteGrainDirectory_GrainReference_9(IBaseCopier`1<TaskRequest> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_IRemoteGrainDirectory_GrainReference_9 DeepCopy(Invokable_IRemoteGrainDirectory_GrainReference_9 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Copier_Invokable_ISiloManifestSystemTarget_GrainReference_1 : object {
    private IBaseCopier`1<Request`1<GrainManifest>> _baseTypeCopier;
    public Copier_Invokable_ISiloManifestSystemTarget_GrainReference_1(IBaseCopier`1<Request`1<GrainManifest>> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_ISiloManifestSystemTarget_GrainReference_1 DeepCopy(Invokable_ISiloManifestSystemTarget_GrainReference_1 original, CopyContext context);
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Development.Activator_Invokable_IDevelopmentLeaseProviderGrain_GrainReference_1 : object {
    public sealed virtual Invokable_IDevelopmentLeaseProviderGrain_GrainReference_1 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Development.Activator_Invokable_IDevelopmentLeaseProviderGrain_GrainReference_2 : object {
    public sealed virtual Invokable_IDevelopmentLeaseProviderGrain_GrainReference_2 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Development.Activator_Invokable_IDevelopmentLeaseProviderGrain_GrainReference_3 : object {
    public sealed virtual Invokable_IDevelopmentLeaseProviderGrain_GrainReference_3 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Development.Activator_Invokable_IDevelopmentLeaseProviderGrain_GrainReference_4 : object {
    public sealed virtual Invokable_IDevelopmentLeaseProviderGrain_GrainReference_4 Create();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Development.Codec_Invokable_IDevelopmentLeaseProviderGrain_GrainReference_1 : object {
    private static Type _stringType;
    private static Type _leaseRequest_1Type;
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest`1<AcquireLeaseResult[]>> _baseTypeSerializer;
    private IFieldCodec`1<LeaseRequest[]> _leaseRequest_1Codec;
    public Codec_Invokable_IDevelopmentLeaseProviderGrain_GrainReference_1(IBaseCodec`1<TaskRequest`1<AcquireLeaseResult[]>> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_IDevelopmentLeaseProviderGrain_GrainReference_1();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_IDevelopmentLeaseProviderGrain_GrainReference_1 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_IDevelopmentLeaseProviderGrain_GrainReference_1 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IDevelopmentLeaseProviderGrain_GrainReference_1 value);
    public sealed virtual Invokable_IDevelopmentLeaseProviderGrain_GrainReference_1 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Development.Codec_Invokable_IDevelopmentLeaseProviderGrain_GrainReference_2 : object {
    private static Type _stringType;
    private static Type _acquiredLease_1Type;
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest> _baseTypeSerializer;
    private IFieldCodec`1<AcquiredLease[]> _acquiredLease_1Codec;
    public Codec_Invokable_IDevelopmentLeaseProviderGrain_GrainReference_2(IBaseCodec`1<TaskRequest> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_IDevelopmentLeaseProviderGrain_GrainReference_2();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_IDevelopmentLeaseProviderGrain_GrainReference_2 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_IDevelopmentLeaseProviderGrain_GrainReference_2 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IDevelopmentLeaseProviderGrain_GrainReference_2 value);
    public sealed virtual Invokable_IDevelopmentLeaseProviderGrain_GrainReference_2 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Development.Codec_Invokable_IDevelopmentLeaseProviderGrain_GrainReference_3 : object {
    private static Type _stringType;
    private static Type _acquiredLease_1Type;
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest`1<AcquireLeaseResult[]>> _baseTypeSerializer;
    private IFieldCodec`1<AcquiredLease[]> _acquiredLease_1Codec;
    public Codec_Invokable_IDevelopmentLeaseProviderGrain_GrainReference_3(IBaseCodec`1<TaskRequest`1<AcquireLeaseResult[]>> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_IDevelopmentLeaseProviderGrain_GrainReference_3();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_IDevelopmentLeaseProviderGrain_GrainReference_3 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_IDevelopmentLeaseProviderGrain_GrainReference_3 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IDevelopmentLeaseProviderGrain_GrainReference_3 value);
    public sealed virtual Invokable_IDevelopmentLeaseProviderGrain_GrainReference_3 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Development.Codec_Invokable_IDevelopmentLeaseProviderGrain_GrainReference_4 : object {
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest> _baseTypeSerializer;
    public Codec_Invokable_IDevelopmentLeaseProviderGrain_GrainReference_4(IBaseCodec`1<TaskRequest> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_IDevelopmentLeaseProviderGrain_GrainReference_4();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_IDevelopmentLeaseProviderGrain_GrainReference_4 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_IDevelopmentLeaseProviderGrain_GrainReference_4 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IDevelopmentLeaseProviderGrain_GrainReference_4 value);
    public sealed virtual Invokable_IDevelopmentLeaseProviderGrain_GrainReference_4 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Development.Copier_Invokable_IDevelopmentLeaseProviderGrain_GrainReference_1 : object {
    private IBaseCopier`1<TaskRequest`1<AcquireLeaseResult[]>> _baseTypeCopier;
    private IDeepCopier`1<LeaseRequest[]> _leaseRequest_1Copier0;
    public Copier_Invokable_IDevelopmentLeaseProviderGrain_GrainReference_1(IBaseCopier`1<TaskRequest`1<AcquireLeaseResult[]>> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_IDevelopmentLeaseProviderGrain_GrainReference_1 DeepCopy(Invokable_IDevelopmentLeaseProviderGrain_GrainReference_1 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Development.Copier_Invokable_IDevelopmentLeaseProviderGrain_GrainReference_2 : object {
    private IBaseCopier`1<TaskRequest> _baseTypeCopier;
    private IDeepCopier`1<AcquiredLease[]> _acquiredLease_1Copier0;
    public Copier_Invokable_IDevelopmentLeaseProviderGrain_GrainReference_2(IBaseCopier`1<TaskRequest> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_IDevelopmentLeaseProviderGrain_GrainReference_2 DeepCopy(Invokable_IDevelopmentLeaseProviderGrain_GrainReference_2 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Development.Copier_Invokable_IDevelopmentLeaseProviderGrain_GrainReference_3 : object {
    private IBaseCopier`1<TaskRequest`1<AcquireLeaseResult[]>> _baseTypeCopier;
    private IDeepCopier`1<AcquiredLease[]> _acquiredLease_1Copier0;
    public Copier_Invokable_IDevelopmentLeaseProviderGrain_GrainReference_3(IBaseCopier`1<TaskRequest`1<AcquireLeaseResult[]>> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_IDevelopmentLeaseProviderGrain_GrainReference_3 DeepCopy(Invokable_IDevelopmentLeaseProviderGrain_GrainReference_3 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Development.Copier_Invokable_IDevelopmentLeaseProviderGrain_GrainReference_4 : object {
    private IBaseCopier`1<TaskRequest> _baseTypeCopier;
    public Copier_Invokable_IDevelopmentLeaseProviderGrain_GrainReference_4(IBaseCopier`1<TaskRequest> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_IDevelopmentLeaseProviderGrain_GrainReference_4 DeepCopy(Invokable_IDevelopmentLeaseProviderGrain_GrainReference_4 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Development.Invokable_IDevelopmentLeaseProviderGrain_GrainReference_1 : TaskRequest`1<AcquireLeaseResult[]> {
    [IdAttribute("0")]
public string arg0;
    [IdAttribute("1")]
public LeaseRequest[] arg1;
    private IDevelopmentLeaseProviderGrain target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_IDevelopmentLeaseProviderGrain_GrainReference_1();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task`1<AcquireLeaseResult[]> InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Development.Invokable_IDevelopmentLeaseProviderGrain_GrainReference_2 : TaskRequest {
    [IdAttribute("0")]
public string arg0;
    [IdAttribute("1")]
public AcquiredLease[] arg1;
    private IDevelopmentLeaseProviderGrain target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_IDevelopmentLeaseProviderGrain_GrainReference_2();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Development.Invokable_IDevelopmentLeaseProviderGrain_GrainReference_3 : TaskRequest`1<AcquireLeaseResult[]> {
    [IdAttribute("0")]
public string arg0;
    [IdAttribute("1")]
public AcquiredLease[] arg1;
    private IDevelopmentLeaseProviderGrain target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_IDevelopmentLeaseProviderGrain_GrainReference_3();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task`1<AcquireLeaseResult[]> InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Development.Invokable_IDevelopmentLeaseProviderGrain_GrainReference_4 : TaskRequest {
    private IDevelopmentLeaseProviderGrain target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_IDevelopmentLeaseProviderGrain_GrainReference_4();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Development.Proxy_IDevelopmentLeaseProviderGrain : GrainReference {
    private IDeepCopier`1<LeaseRequest[]> _leaseRequest_1Copier0;
    private IDeepCopier`1<AcquiredLease[]> _acquiredLease_1Copier1;
    public Proxy_IDevelopmentLeaseProviderGrain(GrainReferenceShared shared0, IdSpan key1);
    private sealed virtual override Task`1<AcquireLeaseResult[]> global::Orleans.LeaseProviders.ILeaseProvider.Acquire(string category0, LeaseRequest[] leaseRequests1);
    private sealed virtual override Task global::Orleans.LeaseProviders.ILeaseProvider.Release(string category0, AcquiredLease[] aquiredLeases1);
    private sealed virtual override Task`1<AcquireLeaseResult[]> global::Orleans.LeaseProviders.ILeaseProvider.Renew(string category0, AcquiredLease[] aquiredLeases1);
    private sealed virtual override Task global::Orleans.Runtime.Development.IDevelopmentLeaseProviderGrain.Reset();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.GrainDirectory.Activator_Invokable_IRemoteClientDirectory_GrainReference_1 : object {
    public sealed virtual Invokable_IRemoteClientDirectory_GrainReference_1 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.GrainDirectory.Activator_Invokable_IRemoteClientDirectory_GrainReference_2 : object {
    public sealed virtual Invokable_IRemoteClientDirectory_GrainReference_2 Create();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.GrainDirectory.Codec_Invokable_IRemoteClientDirectory_GrainReference_1 : object {
    private static Type _immutableDictionary_SiloAddress_Int64Type;
    private static Type _codecFieldType;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IBaseCodec`1<TaskRequest`1<ImmutableDictionary`2<SiloAddress, ValueTuple`2<ImmutableHashSet`1<GrainId>, long>>>> _baseTypeSerializer;
    private IFieldCodec`1<ImmutableDictionary`2<SiloAddress, long>> _immutableDictionary_SiloAddress_Int64Codec;
    public Codec_Invokable_IRemoteClientDirectory_GrainReference_1(IBaseCodec`1<TaskRequest`1<ImmutableDictionary`2<SiloAddress, ValueTuple`2<ImmutableHashSet`1<GrainId>, long>>>> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_IRemoteClientDirectory_GrainReference_1();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_IRemoteClientDirectory_GrainReference_1 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_IRemoteClientDirectory_GrainReference_1 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IRemoteClientDirectory_GrainReference_1 value);
    public sealed virtual Invokable_IRemoteClientDirectory_GrainReference_1 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.GrainDirectory.Codec_Invokable_IRemoteClientDirectory_GrainReference_2 : object {
    private static Type _immutableDictionary_SiloAddress_ValueTuple_ImmutableHashSet_GrainId_Int64Type;
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest> _baseTypeSerializer;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IFieldCodec`1<ImmutableDictionary`2<SiloAddress, ValueTuple`2<ImmutableHashSet`1<GrainId>, long>>> _immutableDictionary_SiloAddress_ValueTuple_ImmutableHashSet_GrainId_Int64Codec;
    public Codec_Invokable_IRemoteClientDirectory_GrainReference_2(IBaseCodec`1<TaskRequest> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_IRemoteClientDirectory_GrainReference_2();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_IRemoteClientDirectory_GrainReference_2 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_IRemoteClientDirectory_GrainReference_2 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IRemoteClientDirectory_GrainReference_2 value);
    public sealed virtual Invokable_IRemoteClientDirectory_GrainReference_2 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.GrainDirectory.Copier_Invokable_IRemoteClientDirectory_GrainReference_1 : object {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IBaseCopier`1<TaskRequest`1<ImmutableDictionary`2<SiloAddress, ValueTuple`2<ImmutableHashSet`1<GrainId>, long>>>> _baseTypeCopier;
    private IDeepCopier`1<ImmutableDictionary`2<SiloAddress, long>> _immutableDictionary_SiloAddress_Int64Copier0;
    public Copier_Invokable_IRemoteClientDirectory_GrainReference_1(IBaseCopier`1<TaskRequest`1<ImmutableDictionary`2<SiloAddress, ValueTuple`2<ImmutableHashSet`1<GrainId>, long>>>> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_IRemoteClientDirectory_GrainReference_1 DeepCopy(Invokable_IRemoteClientDirectory_GrainReference_1 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.GrainDirectory.Copier_Invokable_IRemoteClientDirectory_GrainReference_2 : object {
    private IBaseCopier`1<TaskRequest> _baseTypeCopier;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDeepCopier`1<ImmutableDictionary`2<SiloAddress, ValueTuple`2<ImmutableHashSet`1<GrainId>, long>>> _immutableDictionary_SiloAddress_ValueTuple_ImmutableHashSet_GrainId_Int64Copier0;
    public Copier_Invokable_IRemoteClientDirectory_GrainReference_2(IBaseCopier`1<TaskRequest> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_IRemoteClientDirectory_GrainReference_2 DeepCopy(Invokable_IRemoteClientDirectory_GrainReference_2 original, CopyContext context);
}
[TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.GrainDirectory.Invokable_IRemoteClientDirectory_GrainReference_1 : TaskRequest`1<ImmutableDictionary`2<SiloAddress, ValueTuple`2<ImmutableHashSet`1<GrainId>, long>>> {
    [IdAttribute("0")]
public ImmutableDictionary`2<SiloAddress, long> arg0;
    private IRemoteClientDirectory target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_IRemoteClientDirectory_GrainReference_1();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task`1<ImmutableDictionary`2<SiloAddress, ValueTuple`2<ImmutableHashSet`1<GrainId>, long>>> InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.GrainDirectory.Invokable_IRemoteClientDirectory_GrainReference_2 : TaskRequest {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[IdAttribute("0")]
public ImmutableDictionary`2<SiloAddress, ValueTuple`2<ImmutableHashSet`1<GrainId>, long>> arg0;
    private IRemoteClientDirectory target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_IRemoteClientDirectory_GrainReference_2();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.GrainDirectory.Proxy_IRemoteClientDirectory : GrainReference {
    private IDeepCopier`1<ImmutableDictionary`2<SiloAddress, long>> _immutableDictionary_SiloAddress_Int64Copier0;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IDeepCopier`1<ImmutableDictionary`2<SiloAddress, ValueTuple`2<ImmutableHashSet`1<GrainId>, long>>> _immutableDictionary_SiloAddress_ValueTuple_ImmutableHashSet_GrainId_Int64Copier1;
    public Proxy_IRemoteClientDirectory(GrainReferenceShared shared0, IdSpan key1);
    private sealed virtual override Task`1<ImmutableDictionary`2<SiloAddress, ValueTuple`2<ImmutableHashSet`1<GrainId>, long>>> global::Orleans.Runtime.GrainDirectory.IRemoteClientDirectory.GetClientRoutes(ImmutableDictionary`2<SiloAddress, long> knownRoutes0);
    private sealed virtual override Task global::Orleans.Runtime.GrainDirectory.IRemoteClientDirectory.OnUpdateClientRoutes(ImmutableDictionary`2<SiloAddress, ValueTuple`2<ImmutableHashSet`1<GrainId>, long>> update0);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Invokable_IRemoteGrainDirectory_GrainReference_1 : TaskRequest {
    [IdAttribute("0")]
public List`1<GrainAddress> arg0;
    private IRemoteGrainDirectory target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_IRemoteGrainDirectory_GrainReference_1();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Invokable_IRemoteGrainDirectory_GrainReference_2 : TaskRequest {
    [IdAttribute("0")]
public GrainId arg0;
    [IdAttribute("1")]
public int arg1;
    private IRemoteGrainDirectory target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_IRemoteGrainDirectory_GrainReference_2();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Invokable_IRemoteGrainDirectory_GrainReference_3 : TaskRequest`1<List`1<AddressAndTag>> {
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[IdAttribute("0")]
public List`1<ValueTuple`2<GrainId, int>> arg0;
    private IRemoteGrainDirectory target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_IRemoteGrainDirectory_GrainReference_3();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task`1<List`1<AddressAndTag>> InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Invokable_IRemoteGrainDirectory_GrainReference_4 : TaskRequest`1<AddressAndTag> {
    [IdAttribute("0")]
public GrainId arg0;
    [IdAttribute("1")]
public int arg1;
    private IRemoteGrainDirectory target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_IRemoteGrainDirectory_GrainReference_4();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task`1<AddressAndTag> InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Invokable_IRemoteGrainDirectory_GrainReference_5 : TaskRequest`1<AddressAndTag> {
    [IdAttribute("0")]
public GrainAddress arg0;
    [IdAttribute("1")]
public int arg1;
    private IRemoteGrainDirectory target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_IRemoteGrainDirectory_GrainReference_5();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task`1<AddressAndTag> InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Invokable_IRemoteGrainDirectory_GrainReference_6 : TaskRequest {
    [IdAttribute("0")]
public List`1<GrainAddress> arg0;
    private IRemoteGrainDirectory target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_IRemoteGrainDirectory_GrainReference_6();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Invokable_IRemoteGrainDirectory_GrainReference_7 : TaskRequest {
    [IdAttribute("0")]
public SiloAddress arg0;
    private IRemoteGrainDirectory target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_IRemoteGrainDirectory_GrainReference_7();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Invokable_IRemoteGrainDirectory_GrainReference_8 : TaskRequest {
    [IdAttribute("0")]
public GrainAddress arg0;
    [IdAttribute("1")]
public UnregistrationCause arg1;
    [IdAttribute("2")]
public int arg2;
    private IRemoteGrainDirectory target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_IRemoteGrainDirectory_GrainReference_8();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Invokable_IRemoteGrainDirectory_GrainReference_9 : TaskRequest {
    [IdAttribute("0")]
public List`1<GrainAddress> arg0;
    [IdAttribute("1")]
public UnregistrationCause arg1;
    [IdAttribute("2")]
public int arg2;
    private IRemoteGrainDirectory target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_IRemoteGrainDirectory_GrainReference_9();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Invokable_ISiloManifestSystemTarget_GrainReference_1 : Request`1<GrainManifest> {
    private ISiloManifestSystemTarget target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_ISiloManifestSystemTarget_GrainReference_1();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual ValueTask`1<GrainManifest> InvokeInner();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.MembershipService.Activator_OrleansClusterConnectivityCheckFailedException : object {
    public sealed virtual OrleansClusterConnectivityCheckFailedException Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.MembershipService.Activator_OrleansMissingMembershipEntryException : object {
    public sealed virtual OrleansMissingMembershipEntryException Create();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
public class OrleansCodeGen.Orleans.Runtime.MembershipService.Codec_OrleansClusterConnectivityCheckFailedException : object {
    private static Type _codecFieldType;
    private IBaseCodec`1<OrleansException> _baseTypeSerializer;
    public Codec_OrleansClusterConnectivityCheckFailedException(IBaseCodec`1<OrleansException> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_OrleansClusterConnectivityCheckFailedException();
    public sealed virtual void Serialize(Writer`1& writer, OrleansClusterConnectivityCheckFailedException instance);
    public sealed virtual void Deserialize(Reader`1& reader, OrleansClusterConnectivityCheckFailedException instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, OrleansClusterConnectivityCheckFailedException value);
    public sealed virtual OrleansClusterConnectivityCheckFailedException ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
public class OrleansCodeGen.Orleans.Runtime.MembershipService.Codec_OrleansMissingMembershipEntryException : object {
    private static Type _codecFieldType;
    private IBaseCodec`1<OrleansException> _baseTypeSerializer;
    public Codec_OrleansMissingMembershipEntryException(IBaseCodec`1<OrleansException> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_OrleansMissingMembershipEntryException();
    public sealed virtual void Serialize(Writer`1& writer, OrleansMissingMembershipEntryException instance);
    public sealed virtual void Deserialize(Reader`1& reader, OrleansMissingMembershipEntryException instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, OrleansMissingMembershipEntryException value);
    public sealed virtual OrleansMissingMembershipEntryException ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
public class OrleansCodeGen.Orleans.Runtime.MembershipService.Copier_OrleansClusterConnectivityCheckFailedException : object {
    private IBaseCopier`1<OrleansException> _baseTypeCopier;
    public Copier_OrleansClusterConnectivityCheckFailedException(IBaseCopier`1<OrleansException> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual OrleansClusterConnectivityCheckFailedException DeepCopy(OrleansClusterConnectivityCheckFailedException original, CopyContext context);
    public sealed virtual void DeepCopy(OrleansClusterConnectivityCheckFailedException input, OrleansClusterConnectivityCheckFailedException output, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
public class OrleansCodeGen.Orleans.Runtime.MembershipService.Copier_OrleansMissingMembershipEntryException : object {
    private IBaseCopier`1<OrleansException> _baseTypeCopier;
    public Copier_OrleansMissingMembershipEntryException(IBaseCopier`1<OrleansException> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual OrleansMissingMembershipEntryException DeepCopy(OrleansMissingMembershipEntryException original, CopyContext context);
    public sealed virtual void DeepCopy(OrleansMissingMembershipEntryException input, OrleansMissingMembershipEntryException output, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Proxy_IRemoteGrainDirectory : GrainReference {
    private ListCopier`1<GrainAddress> _list_GrainAddressCopier0;
    private Copier_GrainId _grainIdCopier1;
    [TupleElementNamesAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private ListCopier`1<ValueTuple`2<GrainId, int>> _list_ValueTuple_GrainId_Int32Copier2;
    private Copier_GrainAddress _grainAddressCopier3;
    private IDeepCopier`1<SiloAddress> _siloAddressCopier4;
    private IDeepCopier`1<UnregistrationCause> _unregistrationCauseCopier5;
    public Proxy_IRemoteGrainDirectory(GrainReferenceShared shared0, IdSpan key1);
    private sealed virtual override Task global::Orleans.Runtime.IRemoteGrainDirectory.AcceptSplitPartition(List`1<GrainAddress> singleActivations0);
    private sealed virtual override Task global::Orleans.GrainDirectory.IDhtGrainDirectory.DeleteGrainAsync(GrainId grainId0, int hopCount1);
    private sealed virtual override Task`1<List`1<AddressAndTag>> global::Orleans.Runtime.IRemoteGrainDirectory.LookUpMany(List`1<ValueTuple`2<GrainId, int>> grainAndETagList0);
    private sealed virtual override Task`1<AddressAndTag> global::Orleans.GrainDirectory.IDhtGrainDirectory.LookupAsync(GrainId grainId0, int hopCount1);
    private sealed virtual override Task`1<AddressAndTag> global::Orleans.GrainDirectory.IDhtGrainDirectory.RegisterAsync(GrainAddress address0, int hopCount1);
    private sealed virtual override Task global::Orleans.Runtime.IRemoteGrainDirectory.RegisterMany(List`1<GrainAddress> addresses0);
    private sealed virtual override Task global::Orleans.Runtime.IRemoteGrainDirectory.RemoveHandoffPartition(SiloAddress source0);
    private sealed virtual override Task global::Orleans.GrainDirectory.IDhtGrainDirectory.UnregisterAsync(GrainAddress address0, UnregistrationCause cause1, int hopCount2);
    private sealed virtual override Task global::Orleans.GrainDirectory.IDhtGrainDirectory.UnregisterManyAsync(List`1<GrainAddress> addresses0, UnregistrationCause cause1, int hopCount2);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Proxy_ISiloManifestSystemTarget : GrainReference {
    public Proxy_ISiloManifestSystemTarget(GrainReferenceShared shared0, IdSpan key1);
    private sealed virtual override ValueTask`1<GrainManifest> global::Orleans.Runtime.ISiloManifestSystemTarget.GetSiloManifest();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Activator_Invokable_ITestHooksSystemTarget_GrainReference_1 : object {
    public sealed virtual Invokable_ITestHooksSystemTarget_GrainReference_1 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Activator_Invokable_ITestHooksSystemTarget_GrainReference_2 : object {
    public sealed virtual Invokable_ITestHooksSystemTarget_GrainReference_2 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Activator_Invokable_ITestHooksSystemTarget_GrainReference_3 : object {
    public sealed virtual Invokable_ITestHooksSystemTarget_GrainReference_3 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Activator_Invokable_ITestHooksSystemTarget_GrainReference_4 : object {
    public sealed virtual Invokable_ITestHooksSystemTarget_GrainReference_4 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Activator_Invokable_ITestHooksSystemTarget_GrainReference_5 : object {
    public sealed virtual Invokable_ITestHooksSystemTarget_GrainReference_5 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Activator_Invokable_ITestHooksSystemTarget_GrainReference_6 : object {
    public sealed virtual Invokable_ITestHooksSystemTarget_GrainReference_6 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Activator_Invokable_ITestHooksSystemTarget_GrainReference_7 : object {
    public sealed virtual Invokable_ITestHooksSystemTarget_GrainReference_7 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Activator_Invokable_ITestHooksSystemTarget_GrainReference_8 : object {
    public sealed virtual Invokable_ITestHooksSystemTarget_GrainReference_8 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Activator_Invokable_ITestHooksSystemTarget_GrainReference_9 : object {
    public sealed virtual Invokable_ITestHooksSystemTarget_GrainReference_9 Create();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Codec_Invokable_ITestHooksSystemTarget_GrainReference_1 : object {
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest`1<Dictionary`2<SiloAddress, SiloStatus>>> _baseTypeSerializer;
    public Codec_Invokable_ITestHooksSystemTarget_GrainReference_1(IBaseCodec`1<TaskRequest`1<Dictionary`2<SiloAddress, SiloStatus>>> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_ITestHooksSystemTarget_GrainReference_1();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_ITestHooksSystemTarget_GrainReference_1 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_ITestHooksSystemTarget_GrainReference_1 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_ITestHooksSystemTarget_GrainReference_1 value);
    public sealed virtual Invokable_ITestHooksSystemTarget_GrainReference_1 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Codec_Invokable_ITestHooksSystemTarget_GrainReference_2 : object {
    private static Type _uInt32Type;
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest`1<SiloAddress>> _baseTypeSerializer;
    public Codec_Invokable_ITestHooksSystemTarget_GrainReference_2(IBaseCodec`1<TaskRequest`1<SiloAddress>> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_ITestHooksSystemTarget_GrainReference_2();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_ITestHooksSystemTarget_GrainReference_2 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_ITestHooksSystemTarget_GrainReference_2 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_ITestHooksSystemTarget_GrainReference_2 value);
    public sealed virtual Invokable_ITestHooksSystemTarget_GrainReference_2 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Codec_Invokable_ITestHooksSystemTarget_GrainReference_3 : object {
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest`1<string>> _baseTypeSerializer;
    public Codec_Invokable_ITestHooksSystemTarget_GrainReference_3(IBaseCodec`1<TaskRequest`1<string>> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_ITestHooksSystemTarget_GrainReference_3();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_ITestHooksSystemTarget_GrainReference_3 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_ITestHooksSystemTarget_GrainReference_3 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_ITestHooksSystemTarget_GrainReference_3 value);
    public sealed virtual Invokable_ITestHooksSystemTarget_GrainReference_3 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Codec_Invokable_ITestHooksSystemTarget_GrainReference_4 : object {
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest`1<string>> _baseTypeSerializer;
    public Codec_Invokable_ITestHooksSystemTarget_GrainReference_4(IBaseCodec`1<TaskRequest`1<string>> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_ITestHooksSystemTarget_GrainReference_4();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_ITestHooksSystemTarget_GrainReference_4 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_ITestHooksSystemTarget_GrainReference_4 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_ITestHooksSystemTarget_GrainReference_4 value);
    public sealed virtual Invokable_ITestHooksSystemTarget_GrainReference_4 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Codec_Invokable_ITestHooksSystemTarget_GrainReference_5 : object {
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest`1<ICollection`1<string>>> _baseTypeSerializer;
    public Codec_Invokable_ITestHooksSystemTarget_GrainReference_5(IBaseCodec`1<TaskRequest`1<ICollection`1<string>>> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_ITestHooksSystemTarget_GrainReference_5();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_ITestHooksSystemTarget_GrainReference_5 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_ITestHooksSystemTarget_GrainReference_5 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_ITestHooksSystemTarget_GrainReference_5 value);
    public sealed virtual Invokable_ITestHooksSystemTarget_GrainReference_5 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Codec_Invokable_ITestHooksSystemTarget_GrainReference_6 : object {
    private static Type _stringType;
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest`1<bool>> _baseTypeSerializer;
    public Codec_Invokable_ITestHooksSystemTarget_GrainReference_6(IBaseCodec`1<TaskRequest`1<bool>> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_ITestHooksSystemTarget_GrainReference_6();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_ITestHooksSystemTarget_GrainReference_6 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_ITestHooksSystemTarget_GrainReference_6 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_ITestHooksSystemTarget_GrainReference_6 value);
    public sealed virtual Invokable_ITestHooksSystemTarget_GrainReference_6 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Codec_Invokable_ITestHooksSystemTarget_GrainReference_7 : object {
    private static Type _stringType;
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest`1<bool>> _baseTypeSerializer;
    public Codec_Invokable_ITestHooksSystemTarget_GrainReference_7(IBaseCodec`1<TaskRequest`1<bool>> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_ITestHooksSystemTarget_GrainReference_7();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_ITestHooksSystemTarget_GrainReference_7 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_ITestHooksSystemTarget_GrainReference_7 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_ITestHooksSystemTarget_GrainReference_7 value);
    public sealed virtual Invokable_ITestHooksSystemTarget_GrainReference_7 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Codec_Invokable_ITestHooksSystemTarget_GrainReference_8 : object {
    private static Type _booleanType;
    private static Type _timeSpanType;
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest> _baseTypeSerializer;
    public Codec_Invokable_ITestHooksSystemTarget_GrainReference_8(IBaseCodec`1<TaskRequest> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_ITestHooksSystemTarget_GrainReference_8();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_ITestHooksSystemTarget_GrainReference_8 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_ITestHooksSystemTarget_GrainReference_8 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_ITestHooksSystemTarget_GrainReference_8 value);
    public sealed virtual Invokable_ITestHooksSystemTarget_GrainReference_8 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Codec_Invokable_ITestHooksSystemTarget_GrainReference_9 : object {
    private static Type _grainIdType;
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest`1<int>> _baseTypeSerializer;
    private Codec_GrainId _grainIdCodec;
    public Codec_Invokable_ITestHooksSystemTarget_GrainReference_9(IBaseCodec`1<TaskRequest`1<int>> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_ITestHooksSystemTarget_GrainReference_9();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_ITestHooksSystemTarget_GrainReference_9 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_ITestHooksSystemTarget_GrainReference_9 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_ITestHooksSystemTarget_GrainReference_9 value);
    public sealed virtual Invokable_ITestHooksSystemTarget_GrainReference_9 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Copier_Invokable_ITestHooksSystemTarget_GrainReference_1 : object {
    private IBaseCopier`1<TaskRequest`1<Dictionary`2<SiloAddress, SiloStatus>>> _baseTypeCopier;
    public Copier_Invokable_ITestHooksSystemTarget_GrainReference_1(IBaseCopier`1<TaskRequest`1<Dictionary`2<SiloAddress, SiloStatus>>> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_ITestHooksSystemTarget_GrainReference_1 DeepCopy(Invokable_ITestHooksSystemTarget_GrainReference_1 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Copier_Invokable_ITestHooksSystemTarget_GrainReference_2 : object {
    private IBaseCopier`1<TaskRequest`1<SiloAddress>> _baseTypeCopier;
    public Copier_Invokable_ITestHooksSystemTarget_GrainReference_2(IBaseCopier`1<TaskRequest`1<SiloAddress>> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_ITestHooksSystemTarget_GrainReference_2 DeepCopy(Invokable_ITestHooksSystemTarget_GrainReference_2 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Copier_Invokable_ITestHooksSystemTarget_GrainReference_3 : object {
    private IBaseCopier`1<TaskRequest`1<string>> _baseTypeCopier;
    public Copier_Invokable_ITestHooksSystemTarget_GrainReference_3(IBaseCopier`1<TaskRequest`1<string>> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_ITestHooksSystemTarget_GrainReference_3 DeepCopy(Invokable_ITestHooksSystemTarget_GrainReference_3 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Copier_Invokable_ITestHooksSystemTarget_GrainReference_4 : object {
    private IBaseCopier`1<TaskRequest`1<string>> _baseTypeCopier;
    public Copier_Invokable_ITestHooksSystemTarget_GrainReference_4(IBaseCopier`1<TaskRequest`1<string>> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_ITestHooksSystemTarget_GrainReference_4 DeepCopy(Invokable_ITestHooksSystemTarget_GrainReference_4 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Copier_Invokable_ITestHooksSystemTarget_GrainReference_5 : object {
    private IBaseCopier`1<TaskRequest`1<ICollection`1<string>>> _baseTypeCopier;
    public Copier_Invokable_ITestHooksSystemTarget_GrainReference_5(IBaseCopier`1<TaskRequest`1<ICollection`1<string>>> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_ITestHooksSystemTarget_GrainReference_5 DeepCopy(Invokable_ITestHooksSystemTarget_GrainReference_5 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Copier_Invokable_ITestHooksSystemTarget_GrainReference_6 : object {
    private IBaseCopier`1<TaskRequest`1<bool>> _baseTypeCopier;
    public Copier_Invokable_ITestHooksSystemTarget_GrainReference_6(IBaseCopier`1<TaskRequest`1<bool>> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_ITestHooksSystemTarget_GrainReference_6 DeepCopy(Invokable_ITestHooksSystemTarget_GrainReference_6 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Copier_Invokable_ITestHooksSystemTarget_GrainReference_7 : object {
    private IBaseCopier`1<TaskRequest`1<bool>> _baseTypeCopier;
    public Copier_Invokable_ITestHooksSystemTarget_GrainReference_7(IBaseCopier`1<TaskRequest`1<bool>> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_ITestHooksSystemTarget_GrainReference_7 DeepCopy(Invokable_ITestHooksSystemTarget_GrainReference_7 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Copier_Invokable_ITestHooksSystemTarget_GrainReference_8 : object {
    private IBaseCopier`1<TaskRequest> _baseTypeCopier;
    public Copier_Invokable_ITestHooksSystemTarget_GrainReference_8(IBaseCopier`1<TaskRequest> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_ITestHooksSystemTarget_GrainReference_8 DeepCopy(Invokable_ITestHooksSystemTarget_GrainReference_8 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Copier_Invokable_ITestHooksSystemTarget_GrainReference_9 : object {
    private IBaseCopier`1<TaskRequest`1<int>> _baseTypeCopier;
    private Copier_GrainId _grainIdCopier0;
    public Copier_Invokable_ITestHooksSystemTarget_GrainReference_9(IBaseCopier`1<TaskRequest`1<int>> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_ITestHooksSystemTarget_GrainReference_9 DeepCopy(Invokable_ITestHooksSystemTarget_GrainReference_9 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Invokable_ITestHooksSystemTarget_GrainReference_1 : TaskRequest`1<Dictionary`2<SiloAddress, SiloStatus>> {
    private ITestHooksSystemTarget target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_ITestHooksSystemTarget_GrainReference_1();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task`1<Dictionary`2<SiloAddress, SiloStatus>> InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Invokable_ITestHooksSystemTarget_GrainReference_2 : TaskRequest`1<SiloAddress> {
    [IdAttribute("0")]
public UInt32 arg0;
    private ITestHooksSystemTarget target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_ITestHooksSystemTarget_GrainReference_2();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task`1<SiloAddress> InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Invokable_ITestHooksSystemTarget_GrainReference_3 : TaskRequest`1<string> {
    private ITestHooksSystemTarget target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_ITestHooksSystemTarget_GrainReference_3();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task`1<string> InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Invokable_ITestHooksSystemTarget_GrainReference_4 : TaskRequest`1<string> {
    private ITestHooksSystemTarget target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_ITestHooksSystemTarget_GrainReference_4();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task`1<string> InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Invokable_ITestHooksSystemTarget_GrainReference_5 : TaskRequest`1<ICollection`1<string>> {
    private ITestHooksSystemTarget target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_ITestHooksSystemTarget_GrainReference_5();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task`1<ICollection`1<string>> InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Invokable_ITestHooksSystemTarget_GrainReference_6 : TaskRequest`1<bool> {
    [IdAttribute("0")]
public string arg0;
    private ITestHooksSystemTarget target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_ITestHooksSystemTarget_GrainReference_6();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task`1<bool> InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Invokable_ITestHooksSystemTarget_GrainReference_7 : TaskRequest`1<bool> {
    [IdAttribute("0")]
public string arg0;
    private ITestHooksSystemTarget target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_ITestHooksSystemTarget_GrainReference_7();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task`1<bool> InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Invokable_ITestHooksSystemTarget_GrainReference_8 : TaskRequest {
    [IdAttribute("0")]
public bool arg0;
    [IdAttribute("1")]
public TimeSpan arg1;
    private ITestHooksSystemTarget target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_ITestHooksSystemTarget_GrainReference_8();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Invokable_ITestHooksSystemTarget_GrainReference_9 : TaskRequest`1<int> {
    [IdAttribute("0")]
public GrainId arg0;
    private ITestHooksSystemTarget target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_ITestHooksSystemTarget_GrainReference_9();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task`1<int> InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.TestHooks.Proxy_ITestHooksSystemTarget : GrainReference {
    private Copier_GrainId _grainIdCopier0;
    public Proxy_ITestHooksSystemTarget(GrainReferenceShared shared0, IdSpan key1);
    private sealed virtual override Task`1<Dictionary`2<SiloAddress, SiloStatus>> global::Orleans.Runtime.TestHooks.ITestHooks.GetApproximateSiloStatuses();
    private sealed virtual override Task`1<SiloAddress> global::Orleans.Runtime.TestHooks.ITestHooks.GetConsistentRingPrimaryTargetSilo(UInt32 key0);
    private sealed virtual override Task`1<string> global::Orleans.Runtime.TestHooks.ITestHooks.GetConsistentRingProviderDiagnosticInfo();
    private sealed virtual override Task`1<string> global::Orleans.Runtime.TestHooks.ITestHooks.GetServiceId();
    private sealed virtual override Task`1<ICollection`1<string>> global::Orleans.Runtime.TestHooks.ITestHooks.GetStorageProviderNames();
    private sealed virtual override Task`1<bool> global::Orleans.Runtime.TestHooks.ITestHooks.HasStorageProvider(string providerName0);
    private sealed virtual override Task`1<bool> global::Orleans.Runtime.TestHooks.ITestHooks.HasStreamProvider(string providerName0);
    private sealed virtual override Task global::Orleans.Runtime.TestHooks.ITestHooks.LatchIsOverloaded(bool overloaded0, TimeSpan latchPeriod1);
    private sealed virtual override Task`1<int> global::Orleans.Runtime.TestHooks.ITestHooks.UnregisterGrainForTesting(GrainId grain0);
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Activator_Invokable_IVersionStoreGrain_GrainReference_1 : object {
    public sealed virtual Invokable_IVersionStoreGrain_GrainReference_1 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Activator_Invokable_IVersionStoreGrain_GrainReference_2 : object {
    public sealed virtual Invokable_IVersionStoreGrain_GrainReference_2 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Activator_Invokable_IVersionStoreGrain_GrainReference_3 : object {
    public sealed virtual Invokable_IVersionStoreGrain_GrainReference_3 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Activator_Invokable_IVersionStoreGrain_GrainReference_4 : object {
    public sealed virtual Invokable_IVersionStoreGrain_GrainReference_4 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Activator_Invokable_IVersionStoreGrain_GrainReference_5 : object {
    public sealed virtual Invokable_IVersionStoreGrain_GrainReference_5 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Activator_Invokable_IVersionStoreGrain_GrainReference_6 : object {
    public sealed virtual Invokable_IVersionStoreGrain_GrainReference_6 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Activator_Invokable_IVersionStoreGrain_GrainReference_7 : object {
    public sealed virtual Invokable_IVersionStoreGrain_GrainReference_7 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Activator_Invokable_IVersionStoreGrain_GrainReference_8 : object {
    public sealed virtual Invokable_IVersionStoreGrain_GrainReference_8 Create();
}
[RegisterActivatorAttribute]
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Activator_VersionStoreGrainState : object {
    public sealed virtual VersionStoreGrainState Create();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Codec_Invokable_IVersionStoreGrain_GrainReference_1 : object {
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest`1<Dictionary`2<GrainInterfaceType, CompatibilityStrategy>>> _baseTypeSerializer;
    public Codec_Invokable_IVersionStoreGrain_GrainReference_1(IBaseCodec`1<TaskRequest`1<Dictionary`2<GrainInterfaceType, CompatibilityStrategy>>> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_IVersionStoreGrain_GrainReference_1();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_IVersionStoreGrain_GrainReference_1 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_IVersionStoreGrain_GrainReference_1 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IVersionStoreGrain_GrainReference_1 value);
    public sealed virtual Invokable_IVersionStoreGrain_GrainReference_1 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Codec_Invokable_IVersionStoreGrain_GrainReference_2 : object {
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest`1<CompatibilityStrategy>> _baseTypeSerializer;
    public Codec_Invokable_IVersionStoreGrain_GrainReference_2(IBaseCodec`1<TaskRequest`1<CompatibilityStrategy>> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_IVersionStoreGrain_GrainReference_2();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_IVersionStoreGrain_GrainReference_2 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_IVersionStoreGrain_GrainReference_2 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IVersionStoreGrain_GrainReference_2 value);
    public sealed virtual Invokable_IVersionStoreGrain_GrainReference_2 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Codec_Invokable_IVersionStoreGrain_GrainReference_3 : object {
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest`1<Dictionary`2<GrainInterfaceType, VersionSelectorStrategy>>> _baseTypeSerializer;
    public Codec_Invokable_IVersionStoreGrain_GrainReference_3(IBaseCodec`1<TaskRequest`1<Dictionary`2<GrainInterfaceType, VersionSelectorStrategy>>> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_IVersionStoreGrain_GrainReference_3();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_IVersionStoreGrain_GrainReference_3 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_IVersionStoreGrain_GrainReference_3 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IVersionStoreGrain_GrainReference_3 value);
    public sealed virtual Invokable_IVersionStoreGrain_GrainReference_3 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Codec_Invokable_IVersionStoreGrain_GrainReference_4 : object {
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest`1<VersionSelectorStrategy>> _baseTypeSerializer;
    public Codec_Invokable_IVersionStoreGrain_GrainReference_4(IBaseCodec`1<TaskRequest`1<VersionSelectorStrategy>> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_IVersionStoreGrain_GrainReference_4();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_IVersionStoreGrain_GrainReference_4 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_IVersionStoreGrain_GrainReference_4 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IVersionStoreGrain_GrainReference_4 value);
    public sealed virtual Invokable_IVersionStoreGrain_GrainReference_4 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Codec_Invokable_IVersionStoreGrain_GrainReference_5 : object {
    private static Type _compatibilityStrategyType;
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest> _baseTypeSerializer;
    private Codec_CompatibilityStrategy _compatibilityStrategyCodec;
    public Codec_Invokable_IVersionStoreGrain_GrainReference_5(IBaseCodec`1<TaskRequest> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_IVersionStoreGrain_GrainReference_5();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_IVersionStoreGrain_GrainReference_5 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_IVersionStoreGrain_GrainReference_5 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IVersionStoreGrain_GrainReference_5 value);
    public sealed virtual Invokable_IVersionStoreGrain_GrainReference_5 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Codec_Invokable_IVersionStoreGrain_GrainReference_6 : object {
    private static Type _grainInterfaceTypeType;
    private static Type _compatibilityStrategyType;
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest> _baseTypeSerializer;
    private Codec_GrainInterfaceType _grainInterfaceTypeCodec;
    private Codec_CompatibilityStrategy _compatibilityStrategyCodec;
    public Codec_Invokable_IVersionStoreGrain_GrainReference_6(IBaseCodec`1<TaskRequest> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_IVersionStoreGrain_GrainReference_6();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_IVersionStoreGrain_GrainReference_6 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_IVersionStoreGrain_GrainReference_6 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IVersionStoreGrain_GrainReference_6 value);
    public sealed virtual Invokable_IVersionStoreGrain_GrainReference_6 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Codec_Invokable_IVersionStoreGrain_GrainReference_7 : object {
    private static Type _versionSelectorStrategyType;
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest> _baseTypeSerializer;
    private Codec_VersionSelectorStrategy _versionSelectorStrategyCodec;
    public Codec_Invokable_IVersionStoreGrain_GrainReference_7(IBaseCodec`1<TaskRequest> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_IVersionStoreGrain_GrainReference_7();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_IVersionStoreGrain_GrainReference_7 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_IVersionStoreGrain_GrainReference_7 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IVersionStoreGrain_GrainReference_7 value);
    public sealed virtual Invokable_IVersionStoreGrain_GrainReference_7 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Codec_Invokable_IVersionStoreGrain_GrainReference_8 : object {
    private static Type _grainInterfaceTypeType;
    private static Type _versionSelectorStrategyType;
    private static Type _codecFieldType;
    private IBaseCodec`1<TaskRequest> _baseTypeSerializer;
    private Codec_GrainInterfaceType _grainInterfaceTypeCodec;
    private Codec_VersionSelectorStrategy _versionSelectorStrategyCodec;
    public Codec_Invokable_IVersionStoreGrain_GrainReference_8(IBaseCodec`1<TaskRequest> _baseTypeSerializer, ICodecProvider codecProvider);
    private static Codec_Invokable_IVersionStoreGrain_GrainReference_8();
    public sealed virtual void Serialize(Writer`1& writer, Invokable_IVersionStoreGrain_GrainReference_8 instance);
    public sealed virtual void Deserialize(Reader`1& reader, Invokable_IVersionStoreGrain_GrainReference_8 instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, Invokable_IVersionStoreGrain_GrainReference_8 value);
    public sealed virtual Invokable_IVersionStoreGrain_GrainReference_8 ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Codec_VersionStoreGrainState : object {
    private static Type _compatibilityStrategyType;
    private static Type _dictionary_GrainInterfaceType_CompatibilityStrategyType;
    private static Type _versionSelectorStrategyType;
    private static Type _dictionary_GrainInterfaceType_VersionSelectorStrategyType;
    private static Type _codecFieldType;
    private Codec_CompatibilityStrategy _compatibilityStrategyCodec;
    private DictionaryCodec`2<GrainInterfaceType, CompatibilityStrategy> _dictionary_GrainInterfaceType_CompatibilityStrategyCodec;
    private Codec_VersionSelectorStrategy _versionSelectorStrategyCodec;
    private DictionaryCodec`2<GrainInterfaceType, VersionSelectorStrategy> _dictionary_GrainInterfaceType_VersionSelectorStrategyCodec;
    private Action`2<VersionStoreGrainState, Dictionary`2<GrainInterfaceType, CompatibilityStrategy>> setField1;
    private Action`2<VersionStoreGrainState, Dictionary`2<GrainInterfaceType, VersionSelectorStrategy>> setField3;
    public Codec_VersionStoreGrainState(ICodecProvider codecProvider);
    private static Codec_VersionStoreGrainState();
    public sealed virtual void Serialize(Writer`1& writer, VersionStoreGrainState instance);
    public sealed virtual void Deserialize(Reader`1& reader, VersionStoreGrainState instance);
    public sealed virtual void WriteField(Writer`1& writer, UInt32 fieldIdDelta, Type expectedType, VersionStoreGrainState value);
    public sealed virtual VersionStoreGrainState ReadValue(Reader`1& reader, Field field);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Copier_Invokable_IVersionStoreGrain_GrainReference_1 : object {
    private IBaseCopier`1<TaskRequest`1<Dictionary`2<GrainInterfaceType, CompatibilityStrategy>>> _baseTypeCopier;
    public Copier_Invokable_IVersionStoreGrain_GrainReference_1(IBaseCopier`1<TaskRequest`1<Dictionary`2<GrainInterfaceType, CompatibilityStrategy>>> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_IVersionStoreGrain_GrainReference_1 DeepCopy(Invokable_IVersionStoreGrain_GrainReference_1 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Copier_Invokable_IVersionStoreGrain_GrainReference_2 : object {
    private IBaseCopier`1<TaskRequest`1<CompatibilityStrategy>> _baseTypeCopier;
    public Copier_Invokable_IVersionStoreGrain_GrainReference_2(IBaseCopier`1<TaskRequest`1<CompatibilityStrategy>> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_IVersionStoreGrain_GrainReference_2 DeepCopy(Invokable_IVersionStoreGrain_GrainReference_2 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Copier_Invokable_IVersionStoreGrain_GrainReference_3 : object {
    private IBaseCopier`1<TaskRequest`1<Dictionary`2<GrainInterfaceType, VersionSelectorStrategy>>> _baseTypeCopier;
    public Copier_Invokable_IVersionStoreGrain_GrainReference_3(IBaseCopier`1<TaskRequest`1<Dictionary`2<GrainInterfaceType, VersionSelectorStrategy>>> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_IVersionStoreGrain_GrainReference_3 DeepCopy(Invokable_IVersionStoreGrain_GrainReference_3 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Copier_Invokable_IVersionStoreGrain_GrainReference_4 : object {
    private IBaseCopier`1<TaskRequest`1<VersionSelectorStrategy>> _baseTypeCopier;
    public Copier_Invokable_IVersionStoreGrain_GrainReference_4(IBaseCopier`1<TaskRequest`1<VersionSelectorStrategy>> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_IVersionStoreGrain_GrainReference_4 DeepCopy(Invokable_IVersionStoreGrain_GrainReference_4 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Copier_Invokable_IVersionStoreGrain_GrainReference_5 : object {
    private IBaseCopier`1<TaskRequest> _baseTypeCopier;
    private Copier_CompatibilityStrategy _compatibilityStrategyCopier0;
    public Copier_Invokable_IVersionStoreGrain_GrainReference_5(IBaseCopier`1<TaskRequest> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_IVersionStoreGrain_GrainReference_5 DeepCopy(Invokable_IVersionStoreGrain_GrainReference_5 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Copier_Invokable_IVersionStoreGrain_GrainReference_6 : object {
    private IBaseCopier`1<TaskRequest> _baseTypeCopier;
    private Copier_GrainInterfaceType _grainInterfaceTypeCopier0;
    private Copier_CompatibilityStrategy _compatibilityStrategyCopier1;
    public Copier_Invokable_IVersionStoreGrain_GrainReference_6(IBaseCopier`1<TaskRequest> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_IVersionStoreGrain_GrainReference_6 DeepCopy(Invokable_IVersionStoreGrain_GrainReference_6 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Copier_Invokable_IVersionStoreGrain_GrainReference_7 : object {
    private IBaseCopier`1<TaskRequest> _baseTypeCopier;
    private Copier_VersionSelectorStrategy _versionSelectorStrategyCopier0;
    public Copier_Invokable_IVersionStoreGrain_GrainReference_7(IBaseCopier`1<TaskRequest> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_IVersionStoreGrain_GrainReference_7 DeepCopy(Invokable_IVersionStoreGrain_GrainReference_7 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Copier_Invokable_IVersionStoreGrain_GrainReference_8 : object {
    private IBaseCopier`1<TaskRequest> _baseTypeCopier;
    private Copier_GrainInterfaceType _grainInterfaceTypeCopier0;
    private Copier_VersionSelectorStrategy _versionSelectorStrategyCopier1;
    public Copier_Invokable_IVersionStoreGrain_GrainReference_8(IBaseCopier`1<TaskRequest> _baseTypeCopier, ICodecProvider codecProvider);
    public sealed virtual Invokable_IVersionStoreGrain_GrainReference_8 DeepCopy(Invokable_IVersionStoreGrain_GrainReference_8 original, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Copier_VersionStoreGrainState : object {
    private Copier_CompatibilityStrategy _compatibilityStrategyCopier0;
    private DictionaryCopier`2<GrainInterfaceType, CompatibilityStrategy> _dictionary_GrainInterfaceType_CompatibilityStrategyCopier1;
    private Copier_VersionSelectorStrategy _versionSelectorStrategyCopier2;
    private DictionaryCopier`2<GrainInterfaceType, VersionSelectorStrategy> _dictionary_GrainInterfaceType_VersionSelectorStrategyCopier3;
    private Action`2<VersionStoreGrainState, Dictionary`2<GrainInterfaceType, CompatibilityStrategy>> setField1;
    private Action`2<VersionStoreGrainState, Dictionary`2<GrainInterfaceType, VersionSelectorStrategy>> setField3;
    public Copier_VersionStoreGrainState(ICodecProvider codecProvider);
    public sealed virtual VersionStoreGrainState DeepCopy(VersionStoreGrainState original, CopyContext context);
    public sealed virtual void DeepCopy(VersionStoreGrainState input, VersionStoreGrainState output, CopyContext context);
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Invokable_IVersionStoreGrain_GrainReference_1 : TaskRequest`1<Dictionary`2<GrainInterfaceType, CompatibilityStrategy>> {
    private IVersionStoreGrain target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_IVersionStoreGrain_GrainReference_1();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task`1<Dictionary`2<GrainInterfaceType, CompatibilityStrategy>> InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Invokable_IVersionStoreGrain_GrainReference_2 : TaskRequest`1<CompatibilityStrategy> {
    private IVersionStoreGrain target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_IVersionStoreGrain_GrainReference_2();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task`1<CompatibilityStrategy> InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Invokable_IVersionStoreGrain_GrainReference_3 : TaskRequest`1<Dictionary`2<GrainInterfaceType, VersionSelectorStrategy>> {
    private IVersionStoreGrain target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_IVersionStoreGrain_GrainReference_3();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task`1<Dictionary`2<GrainInterfaceType, VersionSelectorStrategy>> InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Invokable_IVersionStoreGrain_GrainReference_4 : TaskRequest`1<VersionSelectorStrategy> {
    private IVersionStoreGrain target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_IVersionStoreGrain_GrainReference_4();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task`1<VersionSelectorStrategy> InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Invokable_IVersionStoreGrain_GrainReference_5 : TaskRequest {
    [IdAttribute("0")]
public CompatibilityStrategy arg0;
    private IVersionStoreGrain target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_IVersionStoreGrain_GrainReference_5();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Invokable_IVersionStoreGrain_GrainReference_6 : TaskRequest {
    [IdAttribute("0")]
public GrainInterfaceType arg0;
    [IdAttribute("1")]
public CompatibilityStrategy arg1;
    private IVersionStoreGrain target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_IVersionStoreGrain_GrainReference_6();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Invokable_IVersionStoreGrain_GrainReference_7 : TaskRequest {
    [IdAttribute("0")]
public VersionSelectorStrategy arg0;
    private IVersionStoreGrain target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_IVersionStoreGrain_GrainReference_7();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Invokable_IVersionStoreGrain_GrainReference_8 : TaskRequest {
    [IdAttribute("0")]
public GrainInterfaceType arg0;
    [IdAttribute("1")]
public VersionSelectorStrategy arg1;
    private IVersionStoreGrain target;
    private static Type[] MethodTypeArgumentsBackingField;
    private static Type[] InterfaceTypeArgumentsBackingField;
    private static Type[] ParameterTypesBackingField;
    private static MethodInfo MethodBackingField;
    public int ArgumentCount { get; }
    public string MethodName { get; }
    public string InterfaceName { get; }
    public string ActivityName { get; }
    public Type InterfaceType { get; }
    public Type[] InterfaceTypeArguments { get; }
    public Type[] MethodTypeArguments { get; }
    public Type[] ParameterTypes { get; }
    public MethodInfo Method { get; }
    private static Invokable_IVersionStoreGrain_GrainReference_8();
    public virtual int get_ArgumentCount();
    public virtual string get_MethodName();
    public virtual string get_InterfaceName();
    public virtual string get_ActivityName();
    public virtual Type get_InterfaceType();
    public virtual Type[] get_InterfaceTypeArguments();
    public virtual Type[] get_MethodTypeArguments();
    public virtual Type[] get_ParameterTypes();
    public virtual MethodInfo get_Method();
    public virtual void SetTarget(TTargetHolder holder);
    public virtual TTarget GetTarget();
    public virtual void Dispose();
    public virtual TArgument GetArgument(int index);
    public virtual void SetArgument(int index, TArgument& modreq(System.Runtime.InteropServices.InAttribute) value);
    protected virtual Task InvokeInner();
}
[GeneratedCodeAttribute("OrleansCodeGen", "4.0.0.0")]
internal class OrleansCodeGen.Orleans.Runtime.Versions.Proxy_IVersionStoreGrain : GrainReference {
    private Copier_CompatibilityStrategy _compatibilityStrategyCopier0;
    private Copier_GrainInterfaceType _grainInterfaceTypeCopier1;
    private Copier_VersionSelectorStrategy _versionSelectorStrategyCopier2;
    public Proxy_IVersionStoreGrain(GrainReferenceShared shared0, IdSpan key1);
    private sealed virtual override Task`1<Dictionary`2<GrainInterfaceType, CompatibilityStrategy>> global::Orleans.Runtime.Versions.IVersionStoreGrain.GetCompatibilityStrategies();
    private sealed virtual override Task`1<CompatibilityStrategy> global::Orleans.Runtime.Versions.IVersionStoreGrain.GetCompatibilityStrategy();
    private sealed virtual override Task`1<Dictionary`2<GrainInterfaceType, VersionSelectorStrategy>> global::Orleans.Runtime.Versions.IVersionStoreGrain.GetSelectorStrategies();
    private sealed virtual override Task`1<VersionSelectorStrategy> global::Orleans.Runtime.Versions.IVersionStoreGrain.GetSelectorStrategy();
    private sealed virtual override Task global::Orleans.Runtime.Versions.IVersionStoreGrain.SetCompatibilityStrategy(CompatibilityStrategy strategy0);
    private sealed virtual override Task global::Orleans.Runtime.Versions.IVersionStoreGrain.SetCompatibilityStrategy(GrainInterfaceType interfaceType0, CompatibilityStrategy strategy1);
    private sealed virtual override Task global::Orleans.Runtime.Versions.IVersionStoreGrain.SetSelectorStrategy(VersionSelectorStrategy strategy0);
    private sealed virtual override Task global::Orleans.Runtime.Versions.IVersionStoreGrain.SetSelectorStrategy(GrainInterfaceType interfaceType0, VersionSelectorStrategy strategy1);
}
internal static class System.Runtime.CompilerServices.IsExternalInit : object {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
