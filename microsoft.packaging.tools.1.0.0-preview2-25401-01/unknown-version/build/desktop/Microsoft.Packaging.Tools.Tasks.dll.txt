internal class Microsoft.DotNet.Build.Tasks.ConflictItem : object {
    private bool hasAssemblyVersion;
    private Version assemblyVersion;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ConflictItemType <ItemType>k__BackingField;
    private Nullable`1<bool> exists;
    private string fileName;
    private bool hasFileVersion;
    private Version fileVersion;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ITaskItem <OriginalItem>k__BackingField;
    private string packageId;
    private string sourcePath;
    public string displayName;
    public Version AssemblyVersion { get; private set; }
    public ConflictItemType ItemType { get; }
    public bool Exists { get; }
    public string FileName { get; private set; }
    public Version FileVersion { get; private set; }
    public ITaskItem OriginalItem { get; }
    public string PackageId { get; private set; }
    public string SourcePath { get; private set; }
    public string DisplayName { get; }
    public ConflictItem(ITaskItem originalItem, ConflictItemType itemType);
    public ConflictItem(string fileName, string packageId, Version assemblyVersion, Version fileVersion);
    public Version get_AssemblyVersion();
    private void set_AssemblyVersion(Version value);
    [CompilerGeneratedAttribute]
public ConflictItemType get_ItemType();
    public bool get_Exists();
    public string get_FileName();
    private void set_FileName(string value);
    public Version get_FileVersion();
    private void set_FileVersion(Version value);
    [CompilerGeneratedAttribute]
public ITaskItem get_OriginalItem();
    public string get_PackageId();
    private void set_PackageId(string value);
    public string get_SourcePath();
    private void set_SourcePath(string value);
    public string get_DisplayName();
}
internal enum Microsoft.DotNet.Build.Tasks.ConflictItemType : Enum {
    public int value__;
    public static ConflictItemType Reference;
    public static ConflictItemType CopyLocal;
    public static ConflictItemType Runtime;
    public static ConflictItemType Platform;
}
internal class Microsoft.DotNet.Build.Tasks.ConflictResolver : object {
    private Dictionary`2<string, ConflictItem> winningItemsByKey;
    private ILog log;
    private PackageRank forcedPackageRank;
    private PackageRank preferredPackageRank;
    public ConflictResolver(PackageRank forcedPackageRank, PackageRank preferredPackageRank, ILog log);
    public void ResolveConflicts(IEnumerable`1<ConflictItem> conflictItems, Func`2<ConflictItem, string> getItemKey, Action`1<ConflictItem> foundConflict, bool commitWinner);
    private ConflictItem ResolveConflict(ConflictItem item1, ConflictItem item2);
}
internal static class Microsoft.DotNet.Build.Tasks.FileUtilities : object {
    private static HashSet`1<string> s_assemblyExtensions;
    private static FileUtilities();
    public static Version GetFileVersion(string sourcePath);
    public static Version TryGetAssemblyVersion(string sourcePath);
    private static Version GetAssemblyVersion(string sourcePath);
}
public class Microsoft.DotNet.Build.Tasks.HandlePackageFileConflicts : Task {
    private HashSet`1<ITaskItem> referenceConflicts;
    private HashSet`1<ITaskItem> copyLocalConflicts;
    private HashSet`1<ConflictItem> allConflicts;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ITaskItem[] <References>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ITaskItem[] <ReferenceCopyLocalPaths>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ITaskItem[] <OtherRuntimeItems>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ITaskItem[] <PlatformManifests>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <ForcedPackages>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private String[] <PreferredPackages>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ITaskItem[] <ReferencesWithoutConflicts>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ITaskItem[] <ReferenceCopyLocalPathsWithoutConflicts>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ITaskItem[] <Conflicts>k__BackingField;
    public ITaskItem[] References { get; public set; }
    public ITaskItem[] ReferenceCopyLocalPaths { get; public set; }
    public ITaskItem[] OtherRuntimeItems { get; public set; }
    public ITaskItem[] PlatformManifests { get; public set; }
    public String[] ForcedPackages { get; public set; }
    public String[] PreferredPackages { get; public set; }
    [OutputAttribute]
public ITaskItem[] ReferencesWithoutConflicts { get; public set; }
    [OutputAttribute]
public ITaskItem[] ReferenceCopyLocalPathsWithoutConflicts { get; public set; }
    [OutputAttribute]
public ITaskItem[] Conflicts { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_References();
    [CompilerGeneratedAttribute]
public void set_References(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ReferenceCopyLocalPaths();
    [CompilerGeneratedAttribute]
public void set_ReferenceCopyLocalPaths(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_OtherRuntimeItems();
    [CompilerGeneratedAttribute]
public void set_OtherRuntimeItems(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_PlatformManifests();
    [CompilerGeneratedAttribute]
public void set_PlatformManifests(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public String[] get_ForcedPackages();
    [CompilerGeneratedAttribute]
public void set_ForcedPackages(String[] value);
    [CompilerGeneratedAttribute]
public String[] get_PreferredPackages();
    [CompilerGeneratedAttribute]
public void set_PreferredPackages(String[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ReferencesWithoutConflicts();
    [CompilerGeneratedAttribute]
public void set_ReferencesWithoutConflicts(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_ReferenceCopyLocalPathsWithoutConflicts();
    [CompilerGeneratedAttribute]
public void set_ReferenceCopyLocalPathsWithoutConflicts(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Conflicts();
    [CompilerGeneratedAttribute]
public void set_Conflicts(ITaskItem[] value);
    public virtual bool Execute();
    private ITaskItem[] CreateConflictTaskItems(ICollection`1<ConflictItem> conflicts);
    private ITaskItem CreateConflictTaskItem(ConflictItem conflict);
    private IEnumerable`1<ConflictItem> GetConflictTaskItems(ITaskItem[] items, ConflictItemType itemType);
    private void HandleCompileConflict(ConflictItem conflictItem);
    private void HandleRuntimeConflict(ConflictItem conflictItem);
    private ITaskItem[] RemoveConflicts(ITaskItem[] original, ICollection`1<ITaskItem> conflicts);
    [CompilerGeneratedAttribute]
private bool <Execute>b__39_7(ConflictItem ri);
    [CompilerGeneratedAttribute]
private bool <Execute>b__39_9(ConflictItem ci);
}
public interface Microsoft.DotNet.Build.Tasks.ILog {
    public abstract virtual void LogError(string message, Object[] messageArgs);
    public abstract virtual void LogMessage(string message, Object[] messageArgs);
    public abstract virtual void LogMessage(LogImportance importance, string message, Object[] messageArgs);
    public abstract virtual void LogWarning(string message, Object[] messageArgs);
}
internal static class Microsoft.DotNet.Build.Tasks.ItemUtilities : object {
    private static String[] s_targetPathMetadata;
    private static ItemUtilities();
    public static string GetReferenceFileName(ITaskItem item);
    public static string GetReferenceTargetPath(ITaskItem item);
    public static string GetReferenceTargetFileName(ITaskItem item);
    public static string GetSourcePath(ITaskItem item);
    public static string GetTargetPath(ITaskItem item);
}
public enum Microsoft.DotNet.Build.Tasks.LogImportance : Enum {
    public int value__;
    public static LogImportance Low;
    public static LogImportance Normal;
    public static LogImportance High;
}
internal static class Microsoft.DotNet.Build.Tasks.MetadataNames : object {
    public static string Aliases;
    public static string DestinationSubPath;
    public static string Extension;
    public static string FileName;
    public static string HintPath;
    public static string NuGetPackageId;
    public static string Path;
    public static string Private;
    public static string TargetPath;
}
internal class Microsoft.DotNet.Build.Tasks.MSBuildLog : object {
    private TaskLoggingHelper logger;
    public MSBuildLog(TaskLoggingHelper logger);
    public sealed virtual void LogError(string message, Object[] messageArgs);
    public sealed virtual void LogMessage(string message, Object[] messageArgs);
    public sealed virtual void LogMessage(LogImportance importance, string message, Object[] messageArgs);
    public sealed virtual void LogWarning(string message, Object[] messageArgs);
}
internal class Microsoft.DotNet.Build.Tasks.MSBuildUtilities : object {
    internal static bool ConvertStringToBool(string parameterValue, bool defaultValue);
    private static bool ValidBooleanTrue(string parameterValue);
    private static bool ValidBooleanFalse(string parameterValue);
}
internal static class Microsoft.DotNet.Build.Tasks.NuGetUtilities : object {
    public static string GetPackageIdFromSourcePath(string sourcePath);
    public static void GetPackageParts(string fullPath, String& packageId, String& packageSubPath);
}
internal class Microsoft.DotNet.Build.Tasks.PackageRank : object {
    private Dictionary`2<string, int> packageRanks;
    public PackageRank(String[] packageIds);
    public int GetPackageRank(string packageId);
}
internal static class Microsoft.DotNet.Build.Tasks.PlatformManifestReader : object {
    private static Char[] s_manifestLineSeparator;
    private static PlatformManifestReader();
    [IteratorStateMachineAttribute("Microsoft.DotNet.Build.Tasks.PlatformManifestReader/<LoadConflictItems>d__1")]
public static IEnumerable`1<ConflictItem> LoadConflictItems(string manifestPath, ILog log);
}
