[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[ExtensionAttribute]
public static class Microsoft.SemanticKernel.AI.Embeddings.EmbeddingIndexExtensions : object {
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.AI.Embeddings.EmbeddingIndexExtensions/<GetNearestMatchAsync>d__0`1")]
[DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static Task`1<ValueTuple`2<IEmbeddingWithMetadata`1<TEmbedding>, double>> GetNearestMatchAsync(IEmbeddingIndex`1<TEmbedding> index, string collection, Embedding`1<TEmbedding> embedding, double minScore);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[IsReadOnlyAttribute]
public class Microsoft.SemanticKernel.AI.Embeddings.EmbeddingReadOnlySpan`1 : ValueType {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ReadOnlySpan`1<TEmbedding> <ReadOnlySpan>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsNormalized>k__BackingField;
    public ReadOnlySpan`1<TEmbedding> ReadOnlySpan { get; }
    public bool IsNormalized { get; }
    public EmbeddingReadOnlySpan`1(ReadOnlySpan`1<TEmbedding> vector, bool isNormalized);
    public EmbeddingReadOnlySpan`1(TEmbedding[] vector, bool isNormalized);
    public EmbeddingReadOnlySpan`1(EmbeddingSpan`1<TEmbedding> span, bool isNormalized);
    [CompilerGeneratedAttribute]
public ReadOnlySpan`1<TEmbedding> get_ReadOnlySpan();
    [CompilerGeneratedAttribute]
public bool get_IsNormalized();
    public double Dot(EmbeddingReadOnlySpan`1<TEmbedding> other);
    public double EuclideanLength();
    public double CosineSimilarity(EmbeddingReadOnlySpan`1<TEmbedding> other);
}
[IsByRefLikeAttribute]
[ObsoleteAttribute("Types with embedded references are not supported in this version of your compiler.", "True")]
[IsReadOnlyAttribute]
public class Microsoft.SemanticKernel.AI.Embeddings.EmbeddingSpan`1 : ValueType {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Span`1<TEmbedding> <Span>k__BackingField;
    public Span`1<TEmbedding> Span { get; }
    public EmbeddingSpan`1(Span`1<TEmbedding> vector);
    public EmbeddingSpan`1(TEmbedding[] vector);
    internal static void ThrowTEmbeddingNotSupported();
    [CompilerGeneratedAttribute]
public Span`1<TEmbedding> get_Span();
    public EmbeddingReadOnlySpan`1<TEmbedding> Normalize();
    public double Dot(EmbeddingSpan`1<TEmbedding> other);
    public double EuclideanLength();
    public double CosineSimilarity(EmbeddingSpan`1<TEmbedding> other);
}
public interface Microsoft.SemanticKernel.AI.Embeddings.IEmbeddingIndex`1 {
    public abstract virtual IAsyncEnumerable`1<ValueTuple`2<IEmbeddingWithMetadata`1<TEmbedding>, double>> GetNearestMatchesAsync(string collection, Embedding`1<TEmbedding> embedding, int limit, double minRelevanceScore);
}
public interface Microsoft.SemanticKernel.AI.Embeddings.IEmbeddingWithMetadata`1 {
    public Embedding`1<TEmbedding> Embedding { get; }
    public abstract virtual Embedding`1<TEmbedding> get_Embedding();
    [NullableContextAttribute("1")]
public abstract virtual string GetSerializedMetadata();
}
[ExtensionAttribute]
public static class Microsoft.SemanticKernel.AI.Embeddings.VectorOperations.CosineSimilarityOperation : object {
    [ExtensionAttribute]
public static double CosineSimilarity(ReadOnlySpan`1<TNumber> x, ReadOnlySpan`1<TNumber> y);
    [ExtensionAttribute]
public static double CosineSimilarity(Span`1<TNumber> x, Span`1<TNumber> y);
    [ExtensionAttribute]
public static double CosineSimilarity(TNumber[] x, TNumber[] y);
    private static double CosineSimilarityImplementation(ReadOnlySpan`1<double> x, ReadOnlySpan`1<double> y);
    private static double CosineSimilarityImplementation(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y);
}
[ExtensionAttribute]
public static class Microsoft.SemanticKernel.AI.Embeddings.VectorOperations.DivideOperation : object {
    [ExtensionAttribute]
public static void DivideByInPlace(Span`1<TNumber> span, double divisor);
    [ExtensionAttribute]
public static void DivideByInPlace(TNumber[] vector, double divisor);
    private static void DivideByInPlaceImplementation(Span`1<float> x, float divisor);
    private static void DivideByInPlaceImplementation(Span`1<double> x, double divisor);
}
[ExtensionAttribute]
public static class Microsoft.SemanticKernel.AI.Embeddings.VectorOperations.DotProductOperation : object {
    [ExtensionAttribute]
public static double DotProduct(ReadOnlySpan`1<TNumber> x, ReadOnlySpan`1<TNumber> y);
    [ExtensionAttribute]
public static double DotProduct(Span`1<TNumber> x, Span`1<TNumber> y);
    [ExtensionAttribute]
public static double DotProduct(TNumber[] x, TNumber[] y);
    private static double DotProductImplementation(ReadOnlySpan`1<double> x, ReadOnlySpan`1<double> y);
    private static double DotProductImplementation(ReadOnlySpan`1<float> x, ReadOnlySpan`1<float> y);
}
[ExtensionAttribute]
public static class Microsoft.SemanticKernel.AI.Embeddings.VectorOperations.EuclideanLengthOperation : object {
    [ExtensionAttribute]
public static double EuclideanLength(ReadOnlySpan`1<TNumber> x);
    [ExtensionAttribute]
public static double EuclideanLength(Span`1<TNumber> x);
    [ExtensionAttribute]
public static double EuclideanLength(TNumber[] vector);
}
[ExtensionAttribute]
public static class Microsoft.SemanticKernel.AI.Embeddings.VectorOperations.MultiplyOperation : object {
    [ExtensionAttribute]
public static void MultiplyByInPlace(Span`1<TNumber> vector, double multiplier);
    [ExtensionAttribute]
public static void MultiplyByInPlace(TNumber[] vector, double multiplier);
    private static void MultiplyByInPlaceImplementation(Span`1<float> x, float multiplier);
    private static void MultiplyByInPlaceImplementation(Span`1<double> x, double multiplier);
}
[ExtensionAttribute]
public static class Microsoft.SemanticKernel.AI.Embeddings.VectorOperations.NormalizeOperation : object {
    [ExtensionAttribute]
public static void NormalizeInPlace(Span`1<TNumber> vector);
    [ExtensionAttribute]
public static void NormalizeInPlace(TNumber[] vector);
}
[ExtensionAttribute]
internal static class Microsoft.SemanticKernel.AI.Embeddings.VectorOperations.SpanExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
internal static ReadOnlySpan`1<TNumber> AsReadOnlySpan(TNumber[] vector);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
internal static ReadOnlySpan`1<TNumber> AsReadOnlySpan(Span`1<TNumber> span);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.SemanticKernel.CoreSkills.ConversationSummarySkill : object {
    private static int MaxTokens;
    private ISKFunction _summarizeConversationFunction;
    private ISKFunction _conversationActionItemsFunction;
    private ISKFunction _conversationTopicsFunction;
    public ConversationSummarySkill(IKernel kernel);
    [SKFunctionAttribute("Given a long conversation transcript, summarize the conversation.", "False")]
[SKFunctionNameAttribute("SummarizeConversation")]
[SKFunctionInputAttribute]
public Task`1<SKContext> SummarizeConversationAsync(string input, SKContext context);
    [SKFunctionAttribute("Given a long conversation transcript, identify action items.", "False")]
[SKFunctionNameAttribute("GetConversationActionItems")]
[SKFunctionInputAttribute]
public Task`1<SKContext> GetConversationActionItemsAsync(string input, SKContext context);
    [SKFunctionAttribute("Given a long conversation transcript, identify topics worth remembering.", "False")]
[SKFunctionNameAttribute("GetConversationTopics")]
[SKFunctionInputAttribute]
public Task`1<SKContext> GetConversationTopicsAsync(string input, SKContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.SemanticKernel.CoreSkills.FileIOSkill : object {
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.CoreSkills.FileIOSkill/<ReadAsync>d__0")]
[DebuggerStepThroughAttribute]
[SKFunctionAttribute("Read a file", "False")]
[SKFunctionInputAttribute]
public Task`1<string> ReadAsync(string path);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.CoreSkills.FileIOSkill/<WriteAsync>d__1")]
[DebuggerStepThroughAttribute]
[SKFunctionAttribute("Write a file", "False")]
[SKFunctionContextParameterAttribute]
[SKFunctionContextParameterAttribute]
public Task WriteAsync(SKContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.SemanticKernel.CoreSkills.HttpSkill : object {
    private static HttpClientHandler s_httpClientHandler;
    private HttpClient _client;
    public HttpSkill(HttpClient client);
    private static HttpSkill();
    [SKFunctionAttribute("Makes a GET request to a uri", "False")]
public Task`1<string> GetAsync(string uri, SKContext context);
    [SKFunctionAttribute("Makes a POST request to a uri", "False")]
[SKFunctionContextParameterAttribute]
public Task`1<string> PostAsync(string uri, SKContext context);
    [SKFunctionAttribute("Makes a PUT request to a uri", "False")]
[SKFunctionContextParameterAttribute]
public Task`1<string> PutAsync(string uri, SKContext context);
    [SKFunctionAttribute("Makes a DELETE request to a uri", "False")]
public Task`1<string> DeleteAsync(string uri, SKContext context);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.CoreSkills.HttpSkill/<SendRequestAsync>d__8")]
[DebuggerStepThroughAttribute]
private Task`1<string> SendRequestAsync(string uri, HttpMethod method, HttpContent requestContent, CancellationToken cancellationToken);
    public sealed virtual void Dispose();
    protected virtual void Dispose(bool disposing);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.SemanticKernel.CoreSkills.MathSkill : object {
    [SKFunctionAttribute("Adds value to a value", "False")]
[SKFunctionNameAttribute("Add")]
[SKFunctionInputAttribute]
[SKFunctionContextParameterAttribute]
public Task`1<string> AddAsync(string initialValueText, SKContext context);
    [SKFunctionAttribute("Subtracts value to a value", "False")]
[SKFunctionNameAttribute("Subtract")]
[SKFunctionInputAttribute]
[SKFunctionContextParameterAttribute]
public Task`1<string> SubtractAsync(string initialValueText, SKContext context);
    private static Task`1<string> AddOrSubtractAsync(string initialValueText, SKContext context, bool add);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal static class Microsoft.SemanticKernel.CoreSkills.SemanticFunctionConstants : object {
    internal static string SummarizeConversationDefinition;
    internal static string GetConversationActionItemsDefinition;
    internal static string GetConversationTopicsDefinition;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.SemanticKernel.CoreSkills.TextMemorySkill : object {
    public static string CollectionParam;
    public static string RelevanceParam;
    public static string KeyParam;
    public static string LimitParam;
    private static string DefaultCollection;
    private static string DefaultRelevance;
    private static string DefaultLimit;
    private string _collection;
    private string _relevance;
    private string _limit;
    public TextMemorySkill(string collection, string relevance, string limit);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.CoreSkills.TextMemorySkill/<RetrieveAsync>d__8")]
[DebuggerStepThroughAttribute]
[SKFunctionAttribute("Key-based lookup for a specific memory", "False")]
[SKFunctionNameAttribute("Retrieve")]
[SKFunctionContextParameterAttribute]
[SKFunctionContextParameterAttribute]
public Task`1<string> RetrieveAsync(SKContext context);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.CoreSkills.TextMemorySkill/<RecallAsync>d__9")]
[DebuggerStepThroughAttribute]
[SKFunctionAttribute("Semantic search and return up to N memories related to the input text", "False")]
[SKFunctionNameAttribute("Recall")]
[SKFunctionInputAttribute]
[SKFunctionContextParameterAttribute]
[SKFunctionContextParameterAttribute]
[SKFunctionContextParameterAttribute]
public Task`1<string> RecallAsync(string text, SKContext context);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.CoreSkills.TextMemorySkill/<SaveAsync>d__10")]
[DebuggerStepThroughAttribute]
[SKFunctionAttribute("Save information to semantic memory", "False")]
[SKFunctionNameAttribute("Save")]
[SKFunctionInputAttribute]
[SKFunctionContextParameterAttribute]
[SKFunctionContextParameterAttribute]
public Task SaveAsync(string text, SKContext context);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.CoreSkills.TextMemorySkill/<RemoveAsync>d__11")]
[DebuggerStepThroughAttribute]
[SKFunctionAttribute("Remove specific memory", "False")]
[SKFunctionNameAttribute("Remove")]
[SKFunctionContextParameterAttribute]
[SKFunctionContextParameterAttribute]
public Task RemoveAsync(SKContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.SemanticKernel.CoreSkills.TextSkill : object {
    [SKFunctionAttribute("Trim whitespace from the start and end of a string.", "False")]
public string Trim(string text);
    [SKFunctionAttribute("Trim whitespace from the start of a string.", "False")]
public string TrimStart(string text);
    [SKFunctionAttribute("Trim whitespace from the end of a string.", "False")]
public string TrimEnd(string text);
    [SKFunctionAttribute("Convert a string to uppercase.", "False")]
public string Uppercase(string text);
    [SKFunctionAttribute("Convert a string to lowercase.", "False")]
public string Lowercase(string text);
    [SKFunctionAttribute("Get the length of a string.", "False")]
public string Length(string text);
    [SKFunctionAttribute("Concat two strings into one.", "False")]
[SKFunctionInputAttribute]
[SKFunctionContextParameterAttribute]
public string Concat(string text, SKContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.SemanticKernel.CoreSkills.TimeSkill : object {
    [SKFunctionAttribute("Get the current date", "False")]
public string Date();
    [SKFunctionAttribute("Get the current date", "False")]
public string Today();
    [SKFunctionAttribute("Get the current date and time in the local time zone", "False")]
public string Now();
    [SKFunctionAttribute("Get the current UTC date and time", "False")]
public string UtcNow();
    [SKFunctionAttribute("Get the current time", "False")]
public string Time();
    [SKFunctionAttribute("Get the current year", "False")]
public string Year();
    [SKFunctionAttribute("Get the current month name", "False")]
public string Month();
    [SKFunctionAttribute("Get the current month number", "False")]
public string MonthNumber();
    [SKFunctionAttribute("Get the current day of the month", "False")]
public string Day();
    [SKFunctionAttribute("Get the date offset by a provided number of days from today", "False")]
[SKFunctionInputAttribute]
public string DaysAgo(string days);
    [SKFunctionAttribute("Get the current day of the week", "False")]
public string DayOfWeek();
    [SKFunctionAttribute("Get the current clock hour", "False")]
public string Hour();
    [SKFunctionAttribute("Get the current clock 24-hour number", "False")]
public string HourNumber();
    [SKFunctionAttribute("Get the date of the last day matching the supplied week day name in English. Example: Che giorno era 'Martedi' scorso -> dateMatchingLastDayName 'Tuesday' => Tuesday, 16 May, 2023", "False")]
[SKFunctionInputAttribute]
public string DateMatchingLastDayName(string dayName);
    [SKFunctionAttribute("Get the minutes on the current hour", "False")]
public string Minute();
    [SKFunctionAttribute("Get the seconds on the current minute", "False")]
public string Second();
    [SKFunctionAttribute("Get the local time zone offset from UTC", "False")]
public string TimeZoneOffset();
    [SKFunctionAttribute("Get the local time zone name", "False")]
public string TimeZoneName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.SemanticKernel.CoreSkills.WaitSkill : object {
    private IWaitProvider _waitProvider;
    [NullableContextAttribute("2")]
public WaitSkill(IWaitProvider waitProvider);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.CoreSkills.WaitSkill/<SecondsAsync>d__4")]
[DebuggerStepThroughAttribute]
[SKFunctionAttribute("Wait a given amount of seconds", "False")]
[SKFunctionNameAttribute("Seconds")]
[SKFunctionInputAttribute]
public Task SecondsAsync(string secondsText);
}
[ExtensionAttribute]
public static class Microsoft.SemanticKernel.ImportSemanticSkillFromDirectoryExtension : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static IDictionary`2<string, ISKFunction> ImportSemanticSkillFromDirectory(IKernel kernel, string parentDirectory, String[] skillDirectoryNames);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.SemanticKernel.InlineFunctionsDefinitionExtension : object {
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static ISKFunction CreateSemanticFunction(IKernel kernel, string promptTemplate, string functionName, string skillName, string description, int maxTokens, double temperature, double topP, double presencePenalty, double frequencyPenalty, bool isSensitive, ITrustService trustService, IEnumerable`1<string> stopSequences);
    [ExtensionAttribute]
public static ISKFunction CreateSemanticFunction(IKernel kernel, string promptTemplate, PromptTemplateConfig config, string functionName, string skillName, ITrustService trustService);
    private static string RandomFunctionName();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.SemanticKernel.Kernel : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private KernelConfig <Config>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ILogger <Log>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IPromptTemplateEngine <PromptTemplateEngine>k__BackingField;
    private ISkillCollection _skillCollection;
    private ISemanticTextMemory _memory;
    private IPromptTemplateEngine _promptTemplateEngine;
    private IAIServiceProvider _aiServiceProvider;
    [NullableAttribute("2")]
private ITrustService _trustService;
    public KernelConfig Config { get; }
    public ILogger Log { get; }
    public ISemanticTextMemory Memory { get; }
    public IReadOnlySkillCollection Skills { get; }
    public IPromptTemplateEngine PromptTemplateEngine { get; }
    [NullableAttribute("2")]
public ITrustService TrustServiceInstance { get; }
    public static KernelBuilder Builder { get; }
    public Kernel(ISkillCollection skillCollection, IAIServiceProvider aiServiceProvider, IPromptTemplateEngine promptTemplateEngine, ISemanticTextMemory memory, KernelConfig config, ILogger log, ITrustService trustService);
    [CompilerGeneratedAttribute]
public sealed virtual KernelConfig get_Config();
    [CompilerGeneratedAttribute]
public sealed virtual ILogger get_Log();
    public sealed virtual ISemanticTextMemory get_Memory();
    public sealed virtual IReadOnlySkillCollection get_Skills();
    [CompilerGeneratedAttribute]
public sealed virtual IPromptTemplateEngine get_PromptTemplateEngine();
    [NullableContextAttribute("2")]
public sealed virtual ITrustService get_TrustServiceInstance();
    public static KernelBuilder get_Builder();
    public sealed virtual ISKFunction RegisterSemanticFunction(string functionName, SemanticFunctionConfig functionConfig, ITrustService trustService);
    public sealed virtual ISKFunction RegisterSemanticFunction(string skillName, string functionName, SemanticFunctionConfig functionConfig, ITrustService trustService);
    public sealed virtual IDictionary`2<string, ISKFunction> ImportSkill(object skillInstance, string skillName, ITrustService trustService);
    public sealed virtual ISKFunction RegisterCustomFunction(ISKFunction customFunction);
    public sealed virtual void RegisterMemory(ISemanticTextMemory memory);
    public sealed virtual Task`1<SKContext> RunAsync(ISKFunction[] pipeline);
    public sealed virtual Task`1<SKContext> RunAsync(string input, ISKFunction[] pipeline);
    public sealed virtual Task`1<SKContext> RunAsync(ContextVariables variables, ISKFunction[] pipeline);
    public sealed virtual Task`1<SKContext> RunAsync(CancellationToken cancellationToken, ISKFunction[] pipeline);
    public sealed virtual Task`1<SKContext> RunAsync(string input, CancellationToken cancellationToken, ISKFunction[] pipeline);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.Kernel/<RunAsync>d__28")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<SKContext> RunAsync(ContextVariables variables, CancellationToken cancellationToken, ISKFunction[] pipeline);
    public sealed virtual ISKFunction Func(string skillName, string functionName);
    public sealed virtual SKContext CreateNewContext(CancellationToken cancellationToken);
    public sealed virtual T GetService(string name);
    public sealed virtual void Dispose();
    private ISKFunction CreateSemanticFunction(string skillName, string functionName, SemanticFunctionConfig functionConfig, ITrustService trustService);
    private static Dictionary`2<string, ISKFunction> ImportSkill(object skillInstance, string skillName, ITrustService trustService, ILogger log);
    [CompilerGeneratedAttribute]
private ITextCompletion <CreateSemanticFunction>b__38_0();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.SemanticKernel.KernelBuilder : object {
    private KernelConfig _config;
    private ISemanticTextMemory _memory;
    private ILogger _logger;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<IMemoryStore> _memoryStorageFactory;
    [NullableAttribute("2")]
private IDelegatingHandlerFactory _httpHandlerFactory;
    [NullableAttribute("2")]
private IPromptTemplateEngine _promptTemplateEngine;
    private AIServiceCollection _aiServices;
    [NullableAttribute("2")]
private ITrustService _trustService;
    public static IKernel Create();
    public IKernel Build();
    public KernelBuilder WithLogger(ILogger log);
    public KernelBuilder WithMemory(ISemanticTextMemory memory);
    public KernelBuilder WithMemoryStorage(IMemoryStore storage);
    public KernelBuilder WithMemoryStorage(Func`2<ValueTuple`2<ILogger, KernelConfig>, TStore> factory);
    public KernelBuilder WithPromptTemplateEngine(IPromptTemplateEngine promptTemplateEngine);
    public KernelBuilder WithMemoryStorageAndTextEmbeddingGeneration(IMemoryStore storage, ITextEmbeddingGeneration embeddingGenerator);
    public KernelBuilder WithRetryHandlerFactory(IDelegatingHandlerFactory httpHandlerFactory);
    public KernelBuilder WithConfiguration(KernelConfig config);
    public KernelBuilder WithTrustService(ITrustService trustService);
    public KernelBuilder Configure(Action`1<KernelConfig> configure);
    public KernelBuilder WithDefaultAIService(TService instance);
    public KernelBuilder WithAIService(string serviceId, TService instance, bool setAsDefault);
    public KernelBuilder WithDefaultAIService(Func`2<ILogger, TService> factory);
    public KernelBuilder WithAIService(string serviceId, Func`2<ValueTuple`2<ILogger, KernelConfig>, TService> factory, bool setAsDefault);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.SemanticKernel.KernelPlanExtensions : object {
    [ExtensionAttribute]
public static Task`1<Plan> StepAsync(IKernel kernel, Plan plan, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Plan> StepAsync(IKernel kernel, string input, Plan plan, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<Plan> StepAsync(IKernel kernel, ContextVariables variables, Plan plan, CancellationToken cancellationToken);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DefaultMemberAttribute("Item")]
internal class Microsoft.SemanticKernel.Memory.Collections.MinHeap`1 : object {
    private static int DefaultCapacity;
    private static int MinCapacity;
    private static T[] s_emptyBuffer;
    private T[] _items;
    private int _count;
    public int Count { get; internal set; }
    public int Capacity { get; }
    public T Item { get; internal set; }
    public T Top { get; }
    public bool IsEmpty { get; }
    public MinHeap`1(T minValue);
    public MinHeap`1(T minValue, int capacity);
    public MinHeap`1(T minValue, IList`1<T> items);
    private static MinHeap`1();
    public int get_Count();
    internal void set_Count(int value);
    public int get_Capacity();
    public T get_Item(int index);
    internal void set_Item(int index, T value);
    public T get_Top();
    public bool get_IsEmpty();
    public void Clear();
    public void Erase();
    public T[] DetachBuffer();
    public void Add(T item);
    public void Add(IEnumerable`1<T> items);
    public void Add(IList`1<T> items, int startAt);
    public T RemoveTop();
    [IteratorStateMachineAttribute("Microsoft.SemanticKernel.Memory.Collections.MinHeap`1/<RemoveAll>d__27")]
public IEnumerable`1<T> RemoveAll();
    public void EnsureCapacity(int capacity);
    public void EnsureCapacity();
    private void UpHeap(int startAt);
    private void DownHeap(int startAt);
    [IteratorStateMachineAttribute("Microsoft.SemanticKernel.Memory.Collections.MinHeap`1/<GetEnumerator>d__32")]
public sealed virtual IEnumerator`1<T> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public void SortDescending();
    internal void Restore();
    internal void Sort(IComparer`1<T> comparer);
}
[IsReadOnlyAttribute]
public class Microsoft.SemanticKernel.Memory.Collections.Score : ValueType {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private double <Value>k__BackingField;
    public double Value { get; }
    internal static Score Min { get; }
    public Score(double value);
    [CompilerGeneratedAttribute]
public double get_Value();
    internal static Score get_Min();
    public static Score op_Implicit(double score);
    public static double op_Implicit(Score src);
    public sealed virtual int CompareTo(Score other);
    [NullableContextAttribute("1")]
public virtual string ToString();
    [NullableContextAttribute("1")]
public virtual bool Equals(object obj);
    public sealed virtual bool Equals(Score other);
    public virtual int GetHashCode();
    public static bool op_Equality(Score left, Score right);
    public static bool op_Inequality(Score left, Score right);
    public static bool op_LessThan(Score left, Score right);
    public static bool op_LessThanOrEqual(Score left, Score right);
    public static bool op_GreaterThan(Score left, Score right);
    public static bool op_GreaterThanOrEqual(Score left, Score right);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[IsReadOnlyAttribute]
public class Microsoft.SemanticKernel.Memory.Collections.ScoredValue`1 : ValueType {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private T <Value>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private Score <Score>k__BackingField;
    public T Value { get; }
    public Score Score { get; }
    public ScoredValue`1(T item, double score);
    [CompilerGeneratedAttribute]
public T get_Value();
    [CompilerGeneratedAttribute]
public Score get_Score();
    public sealed virtual int CompareTo(ScoredValue`1<T> other);
    public virtual string ToString();
    public static double op_Explicit(ScoredValue`1<T> src);
    public static T op_Explicit(ScoredValue`1<T> src);
    public static ScoredValue`1<T> op_Implicit(KeyValuePair`2<T, double> src);
    public virtual bool Equals(object obj);
    public sealed virtual bool Equals(ScoredValue`1<T> other);
    public virtual int GetHashCode();
    public static bool op_Equality(ScoredValue`1<T> left, ScoredValue`1<T> right);
    public static bool op_Inequality(ScoredValue`1<T> left, ScoredValue`1<T> right);
    public static bool op_LessThan(ScoredValue`1<T> left, ScoredValue`1<T> right);
    public static bool op_LessThanOrEqual(ScoredValue`1<T> left, ScoredValue`1<T> right);
    public static bool op_GreaterThan(ScoredValue`1<T> left, ScoredValue`1<T> right);
    public static bool op_GreaterThanOrEqual(ScoredValue`1<T> left, ScoredValue`1<T> right);
    internal static ScoredValue`1<T> Min();
}
[DefaultMemberAttribute("Item")]
public class Microsoft.SemanticKernel.Memory.Collections.TopNCollection`1 : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private MinHeap`1<ScoredValue`1<T>> _heap;
    private bool _sorted;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <MaxItems>k__BackingField;
    public int MaxItems { get; }
    public int Count { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ScoredValue`1<T> Item { get; }
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
internal ScoredValue`1<T> Top { get; }
    public TopNCollection`1(int maxItems);
    [CompilerGeneratedAttribute]
public int get_MaxItems();
    public int get_Count();
    internal ScoredValue`1<T> get_Item(int i);
    internal ScoredValue`1<T> get_Top();
    public void Reset();
    public void Add(ScoredValue`1<T> value);
    [NullableContextAttribute("1")]
public void Add(T value, Score score);
    public void SortByScore();
    public IList`1<ScoredValue`1<T>> ToList();
    public sealed virtual IEnumerator`1<ScoredValue`1<T>> GetEnumerator();
    [NullableContextAttribute("1")]
private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.SemanticKernel.Memory.SemanticTextMemory : object {
    private ITextEmbeddingGeneration _embeddingGenerator;
    private IMemoryStore _storage;
    public SemanticTextMemory(IMemoryStore storage, ITextEmbeddingGeneration embeddingGenerator);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.Memory.SemanticTextMemory/<SaveInformationAsync>d__3")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<string> SaveInformationAsync(string collection, string text, string id, string description, string additionalMetadata, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.Memory.SemanticTextMemory/<SaveReferenceAsync>d__4")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<string> SaveReferenceAsync(string collection, string text, string externalId, string externalSourceName, string description, string additionalMetadata, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.Memory.SemanticTextMemory/<GetAsync>d__5")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<MemoryQueryResult> GetAsync(string collection, string key, bool withEmbedding, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.Memory.SemanticTextMemory/<RemoveAsync>d__6")]
[DebuggerStepThroughAttribute]
public sealed virtual Task RemoveAsync(string collection, string key, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Microsoft.SemanticKernel.Memory.SemanticTextMemory/<SearchAsync>d__7")]
public sealed virtual IAsyncEnumerable`1<MemoryQueryResult> SearchAsync(string collection, string query, int limit, double minRelevanceScore, bool withEmbeddings, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.Memory.SemanticTextMemory/<GetCollectionsAsync>d__8")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IList`1<string>> GetCollectionsAsync(CancellationToken cancellationToken);
    public sealed virtual void Dispose();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.SemanticKernel.Memory.VolatileMemoryStore : object {
    private ConcurrentDictionary`2<string, ConcurrentDictionary`2<string, MemoryRecord>> _store;
    public sealed virtual Task CreateCollectionAsync(string collectionName, CancellationToken cancellationToken);
    public sealed virtual Task`1<bool> DoesCollectionExistAsync(string collectionName, CancellationToken cancellationToken);
    public sealed virtual IAsyncEnumerable`1<string> GetCollectionsAsync(CancellationToken cancellationToken);
    public sealed virtual Task DeleteCollectionAsync(string collectionName, CancellationToken cancellationToken);
    public sealed virtual Task`1<string> UpsertAsync(string collectionName, MemoryRecord record, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Microsoft.SemanticKernel.Memory.VolatileMemoryStore/<UpsertBatchAsync>d__5")]
public sealed virtual IAsyncEnumerable`1<string> UpsertBatchAsync(string collectionName, IEnumerable`1<MemoryRecord> records, CancellationToken cancellationToken);
    public sealed virtual Task`1<MemoryRecord> GetAsync(string collectionName, string key, bool withEmbedding, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Microsoft.SemanticKernel.Memory.VolatileMemoryStore/<GetBatchAsync>d__7")]
public sealed virtual IAsyncEnumerable`1<MemoryRecord> GetBatchAsync(string collectionName, IEnumerable`1<string> keys, bool withEmbeddings, CancellationToken cancellationToken);
    public sealed virtual Task RemoveAsync(string collectionName, string key, CancellationToken cancellationToken);
    public sealed virtual Task RemoveBatchAsync(string collectionName, IEnumerable`1<string> keys, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
public sealed virtual IAsyncEnumerable`1<ValueTuple`2<MemoryRecord, double>> GetNearestMatchesAsync(string collectionName, Embedding`1<float> embedding, int limit, double minRelevanceScore, bool withEmbeddings, CancellationToken cancellationToken);
    [NullableContextAttribute("0")]
[AsyncStateMachineAttribute("Microsoft.SemanticKernel.Memory.VolatileMemoryStore/<GetNearestMatchAsync>d__11")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<Nullable`1<ValueTuple`2<MemoryRecord, double>>> GetNearestMatchAsync(string collectionName, Embedding`1<float> embedding, double minRelevanceScore, bool withEmbedding, CancellationToken cancellationToken);
    protected bool TryGetCollection(string name, ConcurrentDictionary`2& collection, bool create);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.SemanticKernel.MemoryConfiguration : object {
    [ExtensionAttribute]
public static void UseMemory(IKernel kernel, IMemoryStore storage, string embeddingsServiceId);
    [ExtensionAttribute]
public static void UseMemory(IKernel kernel, ITextEmbeddingGeneration embeddingGenerator, IMemoryStore storage);
}
[NullableContextAttribute("1")]
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.SemanticKernel.Orchestration.ContextVariablesConverter : JsonConverter`1<ContextVariables> {
    public virtual ContextVariables Read(Utf8JsonReader& reader, Type typeToConvert, JsonSerializerOptions options);
    public virtual void Write(Utf8JsonWriter writer, ContextVariables value, JsonSerializerOptions options);
}
[ExtensionAttribute]
public static class Microsoft.SemanticKernel.Orchestration.ContextVariablesExtensions : object {
    [NullableContextAttribute("1")]
[ExtensionAttribute]
public static ContextVariables ToContextVariables(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Microsoft.SemanticKernel.Planning.Plan : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ContextVariables <State>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ContextVariables <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IList`1<string> <Outputs>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private int <NextStepIndex>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SkillName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsSemantic>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ITrustService <TrustServiceInstance>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private CompleteRequestSettings <RequestSettings>k__BackingField;
    [NullableAttribute("2")]
[CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ISKFunction <Function>k__BackingField;
    private List`1<Plan> _steps;
    private static Regex s_variablesRegex;
    private static string DefaultResultKey;
    [JsonPropertyNameAttribute("state")]
[JsonConverterAttribute("Microsoft.SemanticKernel.Orchestration.ContextVariablesConverter")]
public ContextVariables State { get; }
    [JsonPropertyNameAttribute("steps")]
public IReadOnlyList`1<Plan> Steps { get; }
    [JsonPropertyNameAttribute("parameters")]
[JsonConverterAttribute("Microsoft.SemanticKernel.Orchestration.ContextVariablesConverter")]
public ContextVariables Parameters { get; public set; }
    [JsonPropertyNameAttribute("outputs")]
public IList`1<string> Outputs { get; public set; }
    [JsonIgnoreAttribute]
public bool HasNextStep { get; }
    [JsonPropertyNameAttribute("next_step_index")]
public int NextStepIndex { get; private set; }
    [JsonPropertyNameAttribute("name")]
public string Name { get; public set; }
    [JsonPropertyNameAttribute("skill_name")]
public string SkillName { get; public set; }
    [JsonPropertyNameAttribute("description")]
public string Description { get; public set; }
    [JsonIgnoreAttribute]
public bool IsSemantic { get; private set; }
    [JsonIgnoreAttribute]
public bool IsSensitive { get; private set; }
    [JsonIgnoreAttribute]
public ITrustService TrustServiceInstance { get; private set; }
    [JsonIgnoreAttribute]
public CompleteRequestSettings RequestSettings { get; private set; }
    [NullableAttribute("2")]
private ISKFunction Function { get; private set; }
    [DebuggerBrowsableAttribute("0")]
private string DebuggerDisplay { get; }
    public Plan(string goal);
    public Plan(string goal, ISKFunction[] steps);
    public Plan(string goal, Plan[] steps);
    public Plan(ISKFunction function);
    [JsonConstructorAttribute]
public Plan(string name, string skillName, string description, int nextStepIndex, ContextVariables state, ContextVariables parameters, IList`1<string> outputs, IReadOnlyList`1<Plan> steps);
    private static Plan();
    [CompilerGeneratedAttribute]
public ContextVariables get_State();
    public IReadOnlyList`1<Plan> get_Steps();
    [CompilerGeneratedAttribute]
public ContextVariables get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(ContextVariables value);
    [CompilerGeneratedAttribute]
public IList`1<string> get_Outputs();
    [CompilerGeneratedAttribute]
public void set_Outputs(IList`1<string> value);
    public bool get_HasNextStep();
    [CompilerGeneratedAttribute]
public int get_NextStepIndex();
    [CompilerGeneratedAttribute]
private void set_NextStepIndex(int value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_SkillName();
    [CompilerGeneratedAttribute]
public void set_SkillName(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSemantic();
    [CompilerGeneratedAttribute]
private void set_IsSemantic(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSensitive();
    [CompilerGeneratedAttribute]
private void set_IsSensitive(bool value);
    [CompilerGeneratedAttribute]
public sealed virtual ITrustService get_TrustServiceInstance();
    [CompilerGeneratedAttribute]
private void set_TrustServiceInstance(ITrustService value);
    [CompilerGeneratedAttribute]
public sealed virtual CompleteRequestSettings get_RequestSettings();
    [CompilerGeneratedAttribute]
private void set_RequestSettings(CompleteRequestSettings value);
    public static Plan FromJson(string json, SKContext context);
    public string ToJson(bool indented);
    public void AddSteps(Plan[] steps);
    public void AddSteps(ISKFunction[] steps);
    public Task`1<Plan> RunNextStepAsync(IKernel kernel, ContextVariables variables, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.Planning.Plan/<InvokeNextStepAsync>d__57")]
[DebuggerStepThroughAttribute]
public Task`1<Plan> InvokeNextStepAsync(SKContext context);
    public sealed virtual FunctionView Describe();
    [NullableContextAttribute("2")]
public sealed virtual Task`1<SKContext> InvokeAsync(string input, CompleteRequestSettings settings, ISemanticTextMemory memory, ILogger logger, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.Planning.Plan/<InvokeAsync>d__60")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<SKContext> InvokeAsync(SKContext context, CompleteRequestSettings settings);
    public sealed virtual ISKFunction SetDefaultSkillCollection(IReadOnlySkillCollection skills);
    public sealed virtual ISKFunction SetAIService(Func`1<ITextCompletion> serviceFactory);
    public sealed virtual ISKFunction SetAIConfiguration(CompleteRequestSettings settings);
    internal string ExpandFromVariables(ContextVariables variables, string input);
    private static Plan SetAvailableFunctions(Plan plan, SKContext context);
    private static void AddVariablesToContext(ContextVariables vars, SKContext context);
    private SKContext UpdateContextWithOutputs(SKContext context);
    private ContextVariables GetNextStepVariables(ContextVariables variables, Plan step);
    private void SetFunction(ISKFunction function);
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private ISKFunction get_Function();
    [NullableContextAttribute("2")]
[CompilerGeneratedAttribute]
private void set_Function(ISKFunction value);
    private string get_DebuggerDisplay();
}
public class Microsoft.SemanticKernel.Reliability.NullHttpRetryHandler : DelegatingHandler {
}
public class Microsoft.SemanticKernel.Reliability.NullHttpRetryHandlerFactory : object {
    [NullableContextAttribute("1")]
public sealed virtual DelegatingHandler Create(ILogger log);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.SemanticKernel.SemanticFunctions.PromptTemplate : object {
    private string _template;
    private IPromptTemplateEngine _templateEngine;
    private ILogger _log;
    private PromptTemplateConfig _promptConfig;
    public PromptTemplate(string template, PromptTemplateConfig promptTemplateConfig, IKernel kernel);
    public PromptTemplate(string template, PromptTemplateConfig promptTemplateConfig, IPromptTemplateEngine promptTemplateEngine, ILogger log);
    public sealed virtual IList`1<ParameterView> GetParameters();
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.SemanticFunctions.PromptTemplate/<RenderAsync>d__7")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<string> RenderAsync(SKContext executionContext);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.SemanticKernel.Services.AIServiceCollection : object {
    private static string DefaultKey;
    private Dictionary`2<Type, Dictionary`2<string, Func`1<object>>> _services;
    private Dictionary`2<Type, string> _defaultIds;
    public void SetService(T service);
    public void SetService(string name, T service, bool setAsDefault);
    public void SetService(Func`1<T> factory);
    public void SetService(string name, Func`1<T> factory, bool setAsDefault);
    public IAIServiceProvider Build();
    [NullableContextAttribute("0")]
private bool HasDefault();
}
[NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
public class Microsoft.SemanticKernel.Services.AIServiceProvider : NamedServiceProvider`1<IAIService> {
    [NullableContextAttribute("1")]
public AIServiceProvider(Dictionary`2<Type, Dictionary`2<string, Func`1<object>>> services, Dictionary`2<Type, string> defaultIds);
}
public class Microsoft.SemanticKernel.Services.NamedServiceProvider`1 : object {
    [NullableAttribute("1")]
private Dictionary`2<Type, Dictionary`2<string, Func`1<object>>> _services;
    [NullableAttribute("1")]
private Dictionary`2<Type, string> _defaultIds;
    [NullableContextAttribute("1")]
public NamedServiceProvider`1(Dictionary`2<Type, Dictionary`2<string, Func`1<object>>> services, Dictionary`2<Type, string> defaultIds);
    [NullableContextAttribute("2")]
public sealed virtual T GetService(string name);
    private string GetDefaultServiceName();
    private Func`1<T> GetServiceFactory(string name);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public abstract class Microsoft.SemanticKernel.Services.ServiceConfig : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <ServiceId>k__BackingField;
    public string ServiceId { get; }
    protected ServiceConfig(string serviceId);
    [CompilerGeneratedAttribute]
public sealed virtual string get_ServiceId();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.SemanticKernel.SkillDefinition.IReadOnlySkillCollectionTypeProxy : object {
    private IReadOnlySkillCollection _collection;
    [DebuggerBrowsableAttribute("3")]
public SkillProxy[] Items { get; }
    public IReadOnlySkillCollectionTypeProxy(IReadOnlySkillCollection collection);
    public SkillProxy[] get_Items();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerTypeProxyAttribute("Microsoft.SemanticKernel.SkillDefinition.IReadOnlySkillCollectionTypeProxy")]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
internal class Microsoft.SemanticKernel.SkillDefinition.ReadOnlySkillCollection : object {
    private SkillCollection _skillCollection;
    [DebuggerBrowsableAttribute("0")]
private string DebuggerDisplay { get; }
    public ReadOnlySkillCollection(SkillCollection skillCollection);
    public sealed virtual ISKFunction GetFunction(string functionName);
    public sealed virtual ISKFunction GetFunction(string skillName, string functionName);
    public sealed virtual bool TryGetFunction(string functionName, ISKFunction& availableFunction);
    public sealed virtual bool TryGetFunction(string skillName, string functionName, ISKFunction& availableFunction);
    public sealed virtual FunctionsView GetFunctionsView(bool includeSemantic, bool includeNative);
    private string get_DebuggerDisplay();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Microsoft.SemanticKernel.SkillDefinition.SKFunction : object {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SkillName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsSemantic>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private bool <IsSensitive>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IList`1<ParameterView> <Parameters>k__BackingField;
    private static JsonSerializerOptions s_toStringStandardSerialization;
    private static JsonSerializerOptions s_toStringIndentedSerialization;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`4<ITextCompletion, CompleteRequestSettings, SKContext, Task`1<SKContext>> _function;
    private ILogger _log;
    [NullableAttribute("2")]
private IReadOnlySkillCollection _skillCollection;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Lazy`1<ITextCompletion> _aiService;
    private CompleteRequestSettings _aiRequestSettings;
    private ITrustService _trustService;
    public string Name { get; }
    public string SkillName { get; }
    public string Description { get; }
    public bool IsSemantic { get; }
    public bool IsSensitive { get; }
    public ITrustService TrustServiceInstance { get; }
    public CompleteRequestSettings RequestSettings { get; }
    public IList`1<ParameterView> Parameters { get; }
    [DebuggerBrowsableAttribute("0")]
private string DebuggerDisplay { get; }
    internal SKFunction(Func`4<ITextCompletion, CompleteRequestSettings, SKContext, Task`1<SKContext>> delegateFunction, IList`1<ParameterView> parameters, string skillName, string functionName, string description, bool isSemantic, bool isSensitive, ITrustService trustService, ILogger log);
    private static SKFunction();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Name();
    [CompilerGeneratedAttribute]
public sealed virtual string get_SkillName();
    [CompilerGeneratedAttribute]
public sealed virtual string get_Description();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSemantic();
    [CompilerGeneratedAttribute]
public sealed virtual bool get_IsSensitive();
    public sealed virtual ITrustService get_TrustServiceInstance();
    public sealed virtual CompleteRequestSettings get_RequestSettings();
    [CompilerGeneratedAttribute]
public IList`1<ParameterView> get_Parameters();
    [NullableContextAttribute("2")]
public static ISKFunction FromNativeMethod(MethodInfo methodSignature, object methodContainerInstance, string skillName, ITrustService trustService, ILogger log);
    public static ISKFunction FromNativeFunction(Delegate nativeFunction, string skillName, string functionName, string description, IEnumerable`1<ParameterView> parameters, bool isSensitive, ITrustService trustService, ILogger log);
    public static ISKFunction FromSemanticConfig(string skillName, string functionName, SemanticFunctionConfig functionConfig, ITrustService trustService, ILogger log);
    public sealed virtual FunctionView Describe();
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.SkillDefinition.SKFunction/<InvokeAsync>d__26")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<SKContext> InvokeAsync(SKContext context, CompleteRequestSettings settings);
    [NullableContextAttribute("2")]
public sealed virtual Task`1<SKContext> InvokeAsync(string input, CompleteRequestSettings settings, ISemanticTextMemory memory, ILogger logger, CancellationToken cancellationToken);
    public sealed virtual ISKFunction SetDefaultSkillCollection(IReadOnlySkillCollection skills);
    public sealed virtual ISKFunction SetAIService(Func`1<ITextCompletion> serviceFactory);
    public sealed virtual ISKFunction SetAIConfiguration(CompleteRequestSettings settings);
    public sealed virtual void Dispose();
    public virtual string ToString();
    public string ToString(bool writeIndented);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.SkillDefinition.SKFunction/<GetCompletionsResultContentAsync>d__43")]
[DebuggerStepThroughAttribute]
private static Task`1<string> GetCompletionsResultContentAsync(IReadOnlyList`1<ITextCompletionResult> completions, CancellationToken cancellationToken);
    private void VerifyIsSemantic();
    [NullableContextAttribute("2")]
private static MethodDetails GetMethodDetails(MethodInfo methodSignature, object methodContainerInstance, bool skAttributesRequired, ILogger log);
    private static ValueTuple`2<Func`4<ITextCompletion, CompleteRequestSettings, SKContext, Task`1<SKContext>>, bool> GetDelegateInfo(object instance, MethodInfo method);
    private string get_DebuggerDisplay();
    [CompilerGeneratedAttribute]
internal static Task`1<SKContext> <FromSemanticConfig>g__LocalFuncTmp|24_0(ITextCompletion client, CompleteRequestSettings requestSettings, SKContext context);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.SkillDefinition.SKFunction/<<InvokeAsync>g__InvokeSemanticAsync|26_0>d")]
[DebuggerStepThroughAttribute]
[CompilerGeneratedAttribute]
private Task`1<SKContext> <InvokeAsync>g__InvokeSemanticAsync|26_0(SKContext contextParam, CompleteRequestSettings settingsPAram);
    [CompilerGeneratedAttribute]
private Task`1<SKContext> <InvokeAsync>g__InvokeNativeAsync|26_1(SKContext contextParam, CompleteRequestSettings settingsParam);
    [CompilerGeneratedAttribute]
internal static object <GetDelegateInfo>g__ThrowIfNullResult|47_8(object result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.SemanticKernel.SkillDefinition.SKFunctionExtensions : object {
    [ExtensionAttribute]
public static ISKFunction UseCompletionSettings(ISKFunction skFunction, CompleteRequestSettings settings);
    [ExtensionAttribute]
public static ISKFunction UseMaxTokens(ISKFunction skFunction, int maxTokens);
    [ExtensionAttribute]
public static ISKFunction UseTemperature(ISKFunction skFunction, double temperature);
    [ExtensionAttribute]
public static ISKFunction UseTopP(ISKFunction skFunction, double topP);
    [ExtensionAttribute]
public static ISKFunction UsePresencePenalty(ISKFunction skFunction, double presencePenalty);
    [ExtensionAttribute]
public static ISKFunction UseFrequencyPenalty(ISKFunction skFunction, double frequencyPenalty);
    [ExtensionAttribute]
public static Task`1<SKContext> InvokeAsync(ISKFunction function, string input, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Task`1<SKContext> InvokeAsync(ISKFunction function, string input, SKContext context, bool mutableContext, CompleteRequestSettings settings);
}
[ExtensionAttribute]
public static class Microsoft.SemanticKernel.SkillDefinition.SKFunctionTextExtensions : object {
    [NullableContextAttribute("1")]
[AsyncStateMachineAttribute("Microsoft.SemanticKernel.SkillDefinition.SKFunctionTextExtensions/<AggregatePartitionedResultsAsync>d__0")]
[DebuggerStepThroughAttribute]
[ExtensionAttribute]
public static Task`1<SKContext> AggregatePartitionedResultsAsync(ISKFunction func, List`1<string> partitionedInput, SKContext context);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerTypeProxyAttribute("Microsoft.SemanticKernel.SkillDefinition.IReadOnlySkillCollectionTypeProxy")]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
public class Microsoft.SemanticKernel.SkillDefinition.SkillCollection : object {
    internal static string GlobalSkill;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private IReadOnlySkillCollection <ReadOnlySkillCollection>k__BackingField;
    private ILogger _log;
    private ConcurrentDictionary`2<string, ConcurrentDictionary`2<string, ISKFunction>> _skillCollection;
    public IReadOnlySkillCollection ReadOnlySkillCollection { get; }
    [DebuggerBrowsableAttribute("0")]
internal string DebuggerDisplay { get; }
    [NullableContextAttribute("2")]
public SkillCollection(ILogger log);
    [CompilerGeneratedAttribute]
public sealed virtual IReadOnlySkillCollection get_ReadOnlySkillCollection();
    public sealed virtual ISkillCollection AddFunction(ISKFunction functionInstance);
    public sealed virtual ISKFunction GetFunction(string functionName);
    public sealed virtual ISKFunction GetFunction(string skillName, string functionName);
    public sealed virtual bool TryGetFunction(string functionName, ISKFunction& availableFunction);
    public sealed virtual bool TryGetFunction(string skillName, string functionName, ISKFunction& availableFunction);
    public sealed virtual FunctionsView GetFunctionsView(bool includeSemantic, bool includeNative);
    internal string get_DebuggerDisplay();
    [DoesNotReturnAttribute]
private void ThrowFunctionNotAvailable(string skillName, string functionName);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.SemanticKernel.TemplateEngine.Blocks.CodeBlock : Block {
    private bool _validated;
    private List`1<Block> _tokens;
    internal BlockTypes Type { get; }
    public CodeBlock(string content, ILogger log);
    public CodeBlock(List`1<Block> tokens, string content, ILogger log);
    internal virtual BlockTypes get_Type();
    public virtual bool IsValid(String& errorMsg);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.TemplateEngine.Blocks.CodeBlock/<RenderCodeAsync>d__5")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<string> RenderCodeAsync(SKContext context);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.TemplateEngine.Blocks.CodeBlock/<RenderFunctionCallAsync>d__8")]
[DebuggerStepThroughAttribute]
private Task`1<string> RenderFunctionCallAsync(FunctionIdBlock fBlock, SKContext context);
    private bool GetFunctionFromSkillCollection(IReadOnlySkillCollection skills, FunctionIdBlock fBlock, ISKFunction& function);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.SemanticKernel.TemplateEngine.Blocks.FunctionIdBlock : Block {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <SkillName>k__BackingField;
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <FunctionName>k__BackingField;
    private static Regex s_validContentRegex;
    internal BlockTypes Type { get; }
    internal string SkillName { get; }
    internal string FunctionName { get; }
    [NullableContextAttribute("2")]
public FunctionIdBlock(string text, ILogger log);
    private static FunctionIdBlock();
    internal virtual BlockTypes get_Type();
    [CompilerGeneratedAttribute]
internal string get_SkillName();
    [CompilerGeneratedAttribute]
internal string get_FunctionName();
    public virtual bool IsValid(String& errorMsg);
    public sealed virtual string Render(ContextVariables variables);
    [NullableContextAttribute("2")]
private static bool HasMoreThanOneDot(string value);
}
[NullableContextAttribute("1")]
public interface Microsoft.SemanticKernel.TemplateEngine.Blocks.ICodeRendering {
    public abstract virtual Task`1<string> RenderCodeAsync(SKContext context);
}
[NullableContextAttribute("1")]
public interface Microsoft.SemanticKernel.TemplateEngine.Blocks.ITextRendering {
    public abstract virtual string Render(ContextVariables variables);
}
internal static class Microsoft.SemanticKernel.TemplateEngine.Blocks.Symbols : object {
    internal static char BlockStarter;
    internal static char BlockEnder;
    internal static char VarPrefix;
    internal static char DblQuote;
    internal static char SglQuote;
    internal static char EscapeChar;
    internal static char Space;
    internal static char Tab;
    internal static char NewLine;
    internal static char CarriageReturn;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.SemanticKernel.TemplateEngine.Blocks.TextBlock : Block {
    internal BlockTypes Type { get; }
    [NullableContextAttribute("2")]
public TextBlock(string text, ILogger log);
    public TextBlock(string text, int startIndex, int stopIndex, ILogger log);
    internal virtual BlockTypes get_Type();
    public virtual bool IsValid(String& errorMsg);
    public sealed virtual string Render(ContextVariables variables);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.SemanticKernel.TemplateEngine.Blocks.ValBlock : Block {
    private char _first;
    private char _last;
    private string _value;
    internal BlockTypes Type { get; }
    [NullableContextAttribute("2")]
public ValBlock(string quotedValue, ILogger log);
    internal virtual BlockTypes get_Type();
    public virtual bool IsValid(String& errorMsg);
    public sealed virtual string Render(ContextVariables variables);
    [NullableContextAttribute("2")]
public static bool HasValPrefix(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.SemanticKernel.TemplateEngine.Blocks.VarBlock : Block {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private string <Name>k__BackingField;
    private static Regex s_validNameRegex;
    internal BlockTypes Type { get; }
    internal string Name { get; }
    [NullableContextAttribute("2")]
public VarBlock(string content, ILogger log);
    private static VarBlock();
    internal virtual BlockTypes get_Type();
    [CompilerGeneratedAttribute]
internal string get_Name();
    public virtual bool IsValid(String& errorMsg);
    public sealed virtual string Render(ContextVariables variables);
}
internal class Microsoft.SemanticKernel.TemplateEngine.CodeTokenizer : object {
    [NullableAttribute("1")]
private ILogger _log;
    [NullableContextAttribute("2")]
public CodeTokenizer(ILogger log);
    [NullableContextAttribute("1")]
public List`1<Block> Tokenize(string text);
    private static bool IsVarPrefix(char c);
    private static bool IsBlankSpace(char c);
    private static bool IsQuote(char c);
    private static bool CanBeEscaped(char c);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.SemanticKernel.TemplateEngine.PromptTemplateEngine : object {
    private ILogger _log;
    private TemplateTokenizer _tokenizer;
    [NullableContextAttribute("2")]
public PromptTemplateEngine(ILogger log);
    public sealed virtual IList`1<Block> ExtractBlocks(string templateText, bool validate);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.TemplateEngine.PromptTemplateEngine/<RenderAsync>d__4")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<string> RenderAsync(string templateText, SKContext context);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.TemplateEngine.PromptTemplateEngine/<RenderAsync>d__5")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<string> RenderAsync(IList`1<Block> blocks, SKContext context);
    public sealed virtual IList`1<Block> RenderVariables(IList`1<Block> blocks, ContextVariables variables);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.TemplateEngine.PromptTemplateEngine/<RenderCodeAsync>d__7")]
[DebuggerStepThroughAttribute]
public sealed virtual Task`1<IList`1<Block>> RenderCodeAsync(IList`1<Block> blocks, SKContext executionContext);
}
public class Microsoft.SemanticKernel.TemplateEngine.TemplateException : SKException {
    [CompilerGeneratedAttribute]
[DebuggerBrowsableAttribute("0")]
private ErrorCodes <ErrorCode>k__BackingField;
    public ErrorCodes ErrorCode { get; }
    public TemplateException(ErrorCodes error);
    [NullableContextAttribute("2")]
public TemplateException(ErrorCodes errorCode, string message);
    [NullableContextAttribute("2")]
public TemplateException(ErrorCodes errorCode, string message, Exception innerException);
    [CompilerGeneratedAttribute]
public ErrorCodes get_ErrorCode();
    [NullableContextAttribute("1")]
private static string GetDefaultMessage(ErrorCodes errorCode, string message);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.SemanticKernel.TemplateEngine.TemplateTokenizer : object {
    private ILogger _log;
    private CodeTokenizer _codeTokenizer;
    [NullableContextAttribute("2")]
public TemplateTokenizer(ILogger log);
    public IList`1<Block> Tokenize(string text);
    private static string SubStr(string text, int startIndex, int stopIndex);
    private static bool IsQuote(char c);
    private static bool CanBeEscaped(char c);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.SemanticKernel.Text.TextChunker : object {
    private static Char[] s_spaceChar;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static String[] s_plaintextSplitOptions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static String[] s_markdownSplitOptions;
    private static TextChunker();
    public static List`1<string> SplitPlainTextLines(string text, int maxTokensPerLine);
    public static List`1<string> SplitMarkDownLines(string text, int maxTokensPerLine);
    public static List`1<string> SplitPlainTextParagraphs(List`1<string> lines, int maxTokensPerParagraph);
    public static List`1<string> SplitMarkdownParagraphs(List`1<string> lines, int maxTokensPerParagraph);
    private static List`1<string> InternalSplitTextParagraphs(List`1<string> lines, int maxTokensPerParagraph, Action`2<string, List`1<string>> longLinesSplitter);
    private static void InternalSplitLines(string text, int maxTokensPerLine, bool trim, String[] splitOptions, List`1<string> result);
    private static void Split(List`1<string> input, int maxTokens, ReadOnlySpan`1<char> separators, bool trim, Boolean& inputWasSplit, List`1<string> result);
    [NullableContextAttribute("0")]
private static void Split(ReadOnlySpan`1<char> input, string inputString, int maxTokens, ReadOnlySpan`1<char> separators, bool trim, Boolean& inputWasSplit, List`1<string> result);
    private static int TokenCount(int inputLength);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsByRefLikeAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsUnmanagedAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
