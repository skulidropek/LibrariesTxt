[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.SemanticKernel.AggregatorPromptTemplateFactory : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private IPromptTemplateFactory[] _promptTemplateFactories;
    [NullableContextAttribute("1")]
public AggregatorPromptTemplateFactory(IPromptTemplateFactory[] promptTemplateFactories);
    [NullableContextAttribute("1")]
public sealed virtual bool TryCreate(PromptTemplateConfig templateConfig, IPromptTemplate& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.SemanticKernel.DefaultKernelPlugin : KernelPlugin {
    private Dictionary`2<string, KernelFunction> _functions;
    public int FunctionCount { get; }
    internal DefaultKernelPlugin(string name, string description, IEnumerable`1<KernelFunction> functions);
    public virtual int get_FunctionCount();
    public virtual bool TryGetFunction(string name, KernelFunction& function);
    public virtual IEnumerator`1<KernelFunction> GetEnumerator();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
public static class Microsoft.SemanticKernel.KernelExtensions : object {
    [ExtensionAttribute]
public static KernelFunction CreateFunctionFromMethod(Kernel kernel, Delegate method, string functionName, string description, IEnumerable`1<KernelParameterMetadata> parameters, KernelReturnParameterMetadata returnParameter);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static KernelFunction CreateFunctionFromMethod(Kernel kernel, MethodInfo method, object target, string functionName, string description, IEnumerable`1<KernelParameterMetadata> parameters, KernelReturnParameterMetadata returnParameter);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static KernelFunction CreateFunctionFromPrompt(Kernel kernel, string promptTemplate, PromptExecutionSettings executionSettings, string functionName, string description, string templateFormat, IPromptTemplateFactory promptTemplateFactory);
    [ExtensionAttribute]
public static KernelFunction CreateFunctionFromPrompt(Kernel kernel, PromptTemplateConfig promptConfig, IPromptTemplateFactory promptTemplateFactory);
    [ExtensionAttribute]
public static KernelPlugin CreatePluginFromType(Kernel kernel, string pluginName);
    [ExtensionAttribute]
public static KernelPlugin CreatePluginFromObject(Kernel kernel, object target, string pluginName);
    [ExtensionAttribute]
public static KernelPlugin CreatePluginFromFunctions(Kernel kernel, string pluginName, IEnumerable`1<KernelFunction> functions);
    [ExtensionAttribute]
public static KernelPlugin CreatePluginFromFunctions(Kernel kernel, string pluginName, string description, IEnumerable`1<KernelFunction> functions);
    [ExtensionAttribute]
public static KernelPlugin ImportPluginFromType(Kernel kernel, string pluginName);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static KernelPlugin AddFromType(ICollection`1<KernelPlugin> plugins, string pluginName, IServiceProvider serviceProvider);
    [ExtensionAttribute]
public static IKernelBuilderPlugins AddFromType(IKernelBuilderPlugins plugins, string pluginName);
    [ExtensionAttribute]
public static IKernelBuilderPlugins Add(IKernelBuilderPlugins plugins, KernelPlugin plugin);
    [ExtensionAttribute]
public static KernelPlugin ImportPluginFromObject(Kernel kernel, object target, string pluginName);
    [ExtensionAttribute]
public static KernelPlugin AddFromObject(ICollection`1<KernelPlugin> plugins, object target, string pluginName, IServiceProvider serviceProvider);
    [ExtensionAttribute]
public static IKernelBuilderPlugins AddFromObject(IKernelBuilderPlugins plugins, object target, string pluginName);
    [ExtensionAttribute]
public static KernelPlugin ImportPluginFromFunctions(Kernel kernel, string pluginName, IEnumerable`1<KernelFunction> functions);
    [ExtensionAttribute]
public static KernelPlugin ImportPluginFromFunctions(Kernel kernel, string pluginName, string description, IEnumerable`1<KernelFunction> functions);
    [ExtensionAttribute]
public static KernelPlugin AddFromFunctions(ICollection`1<KernelPlugin> plugins, string pluginName, IEnumerable`1<KernelFunction> functions);
    [ExtensionAttribute]
public static KernelPlugin AddFromFunctions(ICollection`1<KernelPlugin> plugins, string pluginName, string description, IEnumerable`1<KernelFunction> functions);
    [ExtensionAttribute]
public static IKernelBuilderPlugins AddFromFunctions(IKernelBuilderPlugins plugins, string pluginName, IEnumerable`1<KernelFunction> functions);
    [ExtensionAttribute]
public static IKernelBuilderPlugins AddFromFunctions(IKernelBuilderPlugins plugins, string pluginName, string description, IEnumerable`1<KernelFunction> functions);
    [ExtensionAttribute]
public static KernelPlugin CreatePluginFromPromptDirectory(Kernel kernel, string pluginDirectory, string pluginName, IPromptTemplateFactory promptTemplateFactory);
    [NullableContextAttribute("2")]
private static KernelPlugin CreatePluginFromPromptDirectory(string pluginDirectory, string pluginName, IPromptTemplateFactory promptTemplateFactory, IServiceProvider services);
    [ExtensionAttribute]
public static KernelPlugin ImportPluginFromPromptDirectory(Kernel kernel, string pluginDirectory, string pluginName, IPromptTemplateFactory promptTemplateFactory);
    [ExtensionAttribute]
public static IKernelBuilderPlugins AddFromPromptDirectory(IKernelBuilderPlugins plugins, string pluginDirectory, string pluginName, IPromptTemplateFactory promptTemplateFactory);
    [ExtensionAttribute]
public static Task`1<FunctionResult> InvokePromptAsync(Kernel kernel, string promptTemplate, KernelArguments arguments, string templateFormat, IPromptTemplateFactory promptTemplateFactory, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static Task`1<T> InvokePromptAsync(Kernel kernel, string promptTemplate, KernelArguments arguments, string templateFormat, IPromptTemplateFactory promptTemplateFactory, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
[EditorBrowsableAttribute("1")]
public static Task`1<T> InvokePromptAsync(Kernel kernel, string promptTemplate, KernelArguments arguments, string templateFormat, IPromptTemplateFactory promptTemplateFactory);
    [ExtensionAttribute]
public static IAsyncEnumerable`1<StreamingKernelContent> InvokePromptStreamingAsync(Kernel kernel, string promptTemplate, KernelArguments arguments, string templateFormat, IPromptTemplateFactory promptTemplateFactory, CancellationToken cancellationToken);
    [NullableContextAttribute("2")]
[ExtensionAttribute]
public static IAsyncEnumerable`1<T> InvokePromptStreamingAsync(Kernel kernel, string promptTemplate, KernelArguments arguments, string templateFormat, IPromptTemplateFactory promptTemplateFactory, CancellationToken cancellationToken);
    [ExtensionAttribute]
public static Kernel Build(IKernelBuilder builder);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public static class Microsoft.SemanticKernel.KernelFunctionFactory : object {
    public static KernelFunction CreateFromMethod(Delegate method, string functionName, string description, IEnumerable`1<KernelParameterMetadata> parameters, KernelReturnParameterMetadata returnParameter, ILoggerFactory loggerFactory);
    public static KernelFunction CreateFromMethod(MethodInfo method, object target, string functionName, string description, IEnumerable`1<KernelParameterMetadata> parameters, KernelReturnParameterMetadata returnParameter, ILoggerFactory loggerFactory);
    public static KernelFunction CreateFromPrompt(string promptTemplate, PromptExecutionSettings executionSettings, string functionName, string description, string templateFormat, IPromptTemplateFactory promptTemplateFactory, ILoggerFactory loggerFactory);
    [NullableContextAttribute("1")]
public static KernelFunction CreateFromPrompt(PromptTemplateConfig promptConfig, IPromptTemplateFactory promptTemplateFactory, ILoggerFactory loggerFactory);
    [NullableContextAttribute("1")]
public static KernelFunction CreateFromPrompt(IPromptTemplate promptTemplate, PromptTemplateConfig promptConfig, ILoggerFactory loggerFactory);
    private static Dictionary`2<string, PromptExecutionSettings> CreateSettingsDictionary(PromptExecutionSettings settings);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
internal class Microsoft.SemanticKernel.KernelFunctionFromMethod : KernelFunction {
    private static Object[] s_cancellationTokenNoneArray;
    private ImplementationFunc _function;
    private static Regex s_invalidNameCharsRegex;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static ConcurrentDictionary`2<Type, Func`3<object, CultureInfo, object>> s_parsers;
    [DebuggerBrowsableAttribute("0")]
private string DebuggerDisplay { get; }
    private KernelFunctionFromMethod(ImplementationFunc implementationFunc, string functionName, string description, IReadOnlyList`1<KernelParameterMetadata> parameters, KernelReturnParameterMetadata returnParameter);
    private static KernelFunctionFromMethod();
    [NullableContextAttribute("2")]
public static KernelFunction Create(MethodInfo method, object target, string functionName, string description, IEnumerable`1<KernelParameterMetadata> parameters, KernelReturnParameterMetadata returnParameter, ILoggerFactory loggerFactory);
    protected virtual ValueTask`1<FunctionResult> InvokeCoreAsync(Kernel kernel, KernelArguments arguments, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Microsoft.SemanticKernel.KernelFunctionFromMethod/<InvokeStreamingCoreAsync>d__2`1")]
protected virtual IAsyncEnumerable`1<TResult> InvokeStreamingCoreAsync(Kernel kernel, KernelArguments arguments, CancellationToken cancellationToken);
    public virtual string ToString();
    [NullableContextAttribute("2")]
private static MethodDetails GetMethodDetails(string functionName, MethodInfo method, object target);
    private static bool IsAsyncMethod(MethodInfo method);
    private static ValueTuple`2<Func`5<KernelFunction, Kernel, KernelArguments, CancellationToken, object>, KernelParameterMetadata> GetParameterMarshalerDelegate(MethodInfo method, ParameterInfo parameter, Boolean& sawFirstParameter);
    private static ValueTuple`2<Type, Func`4<Kernel, KernelFunction, object, ValueTask`1<FunctionResult>>> GetReturnValueMarshalerDelegate(MethodInfo method);
    [NullableContextAttribute("2")]
private static object Invoke(MethodInfo method, object target, Object[] arguments);
    [DoesNotReturnAttribute]
private static Exception GetExceptionForInvalidSignature(MethodInfo method, string reason);
    private static void ThrowForInvalidSignatureIf(bool condition, MethodInfo method, string reason);
    private static Func`3<object, CultureInfo, object> GetConverter(Type targetType);
    private string get_DebuggerDisplay();
    private static string SanitizeMetadataName(string methodName);
    [CompilerGeneratedAttribute]
internal static object <GetReturnValueMarshalerDelegate>g__ThrowIfNullResult|12_12(object result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[DebuggerDisplayAttribute("{DebuggerDisplay,nq}")]
internal class Microsoft.SemanticKernel.KernelFunctionFromPrompt : KernelFunction {
    private ILogger _logger;
    private PromptTemplateConfig _promptConfig;
    private IPromptTemplate _promptTemplate;
    private static string MeasurementModelTagName;
    private static Histogram`1<int> s_invocationTokenUsagePrompt;
    private static Histogram`1<int> s_invocationTokenUsageCompletion;
    [DebuggerBrowsableAttribute("0")]
private string DebuggerDisplay { get; }
    private KernelFunctionFromPrompt(IPromptTemplate template, PromptTemplateConfig promptConfig, ILoggerFactory loggerFactory);
    private static KernelFunctionFromPrompt();
    [NullableContextAttribute("2")]
public static KernelFunction Create(string promptTemplate, Dictionary`2<string, PromptExecutionSettings> executionSettings, string functionName, string description, string templateFormat, IPromptTemplateFactory promptTemplateFactory, ILoggerFactory loggerFactory);
    public static KernelFunction Create(PromptTemplateConfig promptConfig, IPromptTemplateFactory promptTemplateFactory, ILoggerFactory loggerFactory);
    public static KernelFunction Create(IPromptTemplate promptTemplate, PromptTemplateConfig promptConfig, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.KernelFunctionFromPrompt/<InvokeCoreAsync>d__3")]
protected virtual ValueTask`1<FunctionResult> InvokeCoreAsync(Kernel kernel, KernelArguments arguments, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Microsoft.SemanticKernel.KernelFunctionFromPrompt/<InvokeStreamingCoreAsync>d__4`1")]
protected virtual IAsyncEnumerable`1<TResult> InvokeStreamingCoreAsync(Kernel kernel, KernelArguments arguments, CancellationToken cancellationToken);
    public virtual string ToString();
    private string get_DebuggerDisplay();
    private void AddDefaultValues(KernelArguments arguments);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.KernelFunctionFromPrompt/<RenderPromptAsync>d__16")]
private Task`1<PromptRenderingResult> RenderPromptAsync(Kernel kernel, KernelArguments arguments, CancellationToken cancellationToken);
    private static string CreateRandomFunctionName();
    private void CaptureUsageDetails(string modelId, IReadOnlyDictionary`2<string, object> metadata, ILogger logger);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public static class Microsoft.SemanticKernel.KernelPluginFactory : object {
    [NullableContextAttribute("2")]
public static KernelPlugin CreateFromType(string pluginName, IServiceProvider serviceProvider);
    public static KernelPlugin CreateFromObject(object target, string pluginName, ILoggerFactory loggerFactory);
    public static KernelPlugin CreateFromFunctions(string pluginName, IEnumerable`1<KernelFunction> functions);
    public static KernelPlugin CreateFromFunctions(string pluginName, string description, IEnumerable`1<KernelFunction> functions);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.SemanticKernel.KernelPromptTemplate : object {
    private ILogger _logger;
    private List`1<Block> _blocks;
    public KernelPromptTemplate(PromptTemplateConfig promptConfig, ILoggerFactory loggerFactory);
    public sealed virtual Task`1<string> RenderAsync(Kernel kernel, KernelArguments arguments, CancellationToken cancellationToken);
    private List`1<Block> ExtractBlocks(PromptTemplateConfig config, ILoggerFactory loggerFactory);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.KernelPromptTemplate/<RenderAsync>d__5")]
private Task`1<string> RenderAsync(List`1<Block> blocks, Kernel kernel, KernelArguments arguments, CancellationToken cancellationToken);
    private static void AddMissingInputVariables(List`1<Block> blocks, PromptTemplateConfig config);
    [CompilerGeneratedAttribute]
internal static void <AddMissingInputVariables>g__AddIfMissing|6_0(string variableName, <>c__DisplayClass6_0& );
}
public class Microsoft.SemanticKernel.KernelPromptTemplateFactory : object {
    [NullableAttribute("1")]
private ILoggerFactory _loggerFactory;
    [NullableContextAttribute("2")]
public KernelPromptTemplateFactory(ILoggerFactory loggerFactory);
    [NullableContextAttribute("1")]
public sealed virtual bool TryCreate(PromptTemplateConfig templateConfig, IPromptTemplate& result);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExperimentalAttribute("SKEXP0003")]
public class Microsoft.SemanticKernel.Memory.MemoryBuilder : object {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<IMemoryStore> _memoryStoreFactory;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private Func`1<ITextEmbeddingGenerationService> _embeddingGenerationFactory;
    [NullableAttribute("2")]
private HttpClient _httpClient;
    private ILoggerFactory _loggerFactory;
    public ISemanticTextMemory Build();
    public MemoryBuilder WithLoggerFactory(ILoggerFactory loggerFactory);
    public MemoryBuilder WithHttpClient(HttpClient httpClient);
    public MemoryBuilder WithMemoryStore(IMemoryStore store);
    public MemoryBuilder WithMemoryStore(Func`2<ILoggerFactory, TStore> factory);
    public MemoryBuilder WithMemoryStore(Func`3<ILoggerFactory, HttpClient, TStore> factory);
    public MemoryBuilder WithTextEmbeddingGeneration(ITextEmbeddingGenerationService textEmbeddingGeneration);
    public MemoryBuilder WithTextEmbeddingGeneration(Func`3<ILoggerFactory, HttpClient, TEmbeddingGeneration> factory);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExperimentalAttribute("SKEXP0003")]
public class Microsoft.SemanticKernel.Memory.SemanticTextMemory : object {
    private ITextEmbeddingGenerationService _embeddingGenerator;
    private IMemoryStore _storage;
    public SemanticTextMemory(IMemoryStore storage, ITextEmbeddingGenerationService embeddingGenerator);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.Memory.SemanticTextMemory/<SaveInformationAsync>d__3")]
public sealed virtual Task`1<string> SaveInformationAsync(string collection, string text, string id, string description, string additionalMetadata, Kernel kernel, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.Memory.SemanticTextMemory/<SaveReferenceAsync>d__4")]
public sealed virtual Task`1<string> SaveReferenceAsync(string collection, string text, string externalId, string externalSourceName, string description, string additionalMetadata, Kernel kernel, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.Memory.SemanticTextMemory/<GetAsync>d__5")]
public sealed virtual Task`1<MemoryQueryResult> GetAsync(string collection, string key, bool withEmbedding, Kernel kernel, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.Memory.SemanticTextMemory/<RemoveAsync>d__6")]
public sealed virtual Task RemoveAsync(string collection, string key, Kernel kernel, CancellationToken cancellationToken);
    [AsyncIteratorStateMachineAttribute("Microsoft.SemanticKernel.Memory.SemanticTextMemory/<SearchAsync>d__7")]
public sealed virtual IAsyncEnumerable`1<MemoryQueryResult> SearchAsync(string collection, string query, int limit, double minRelevanceScore, bool withEmbeddings, Kernel kernel, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.Memory.SemanticTextMemory/<GetCollectionsAsync>d__8")]
public sealed virtual Task`1<IList`1<string>> GetCollectionsAsync(Kernel kernel, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.SemanticKernel.PromptRenderingResult : object {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private IAIService <AIService>k__BackingField;
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <RenderedPrompt>k__BackingField;
    [CompilerGeneratedAttribute]
private PromptExecutionSettings <ExecutionSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private PromptRenderedEventArgs <RenderedEventArgs>k__BackingField;
    [CompilerGeneratedAttribute]
private PromptRenderedContext <RenderedContext>k__BackingField;
    [NullableAttribute("1")]
public IAIService AIService { get; public set; }
    [NullableAttribute("1")]
public string RenderedPrompt { get; public set; }
    public PromptExecutionSettings ExecutionSettings { get; public set; }
    public PromptRenderedEventArgs RenderedEventArgs { get; public set; }
    public PromptRenderedContext RenderedContext { get; public set; }
    [NullableContextAttribute("1")]
public PromptRenderingResult(IAIService aiService, string renderedPrompt);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public IAIService get_AIService();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_AIService(IAIService value);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public string get_RenderedPrompt();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
public void set_RenderedPrompt(string value);
    [CompilerGeneratedAttribute]
public PromptExecutionSettings get_ExecutionSettings();
    [CompilerGeneratedAttribute]
public void set_ExecutionSettings(PromptExecutionSettings value);
    [CompilerGeneratedAttribute]
public PromptRenderedEventArgs get_RenderedEventArgs();
    [CompilerGeneratedAttribute]
public void set_RenderedEventArgs(PromptRenderedEventArgs value);
    [CompilerGeneratedAttribute]
public PromptRenderedContext get_RenderedContext();
    [CompilerGeneratedAttribute]
public void set_RenderedContext(PromptRenderedContext value);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
public class Microsoft.SemanticKernel.StreamingMethodContent : StreamingKernelContent {
    [CompilerGeneratedAttribute]
private object <Content>k__BackingField;
    public object Content { get; }
    public StreamingMethodContent(object innerContent, IReadOnlyDictionary`2<string, object> metadata);
    [CompilerGeneratedAttribute]
public object get_Content();
    public virtual Byte[] ToByteArray();
    public virtual string ToString();
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal abstract class Microsoft.SemanticKernel.TemplateEngine.Block : object {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private ILogger <Logger>k__BackingField;
    internal BlockTypes Type { get; }
    internal string Content { get; }
    private protected ILogger Logger { get; }
    [NullableContextAttribute("2")]
private protected Block(string content, ILoggerFactory loggerFactory);
    internal virtual BlockTypes get_Type();
    [CompilerGeneratedAttribute]
internal string get_Content();
    [CompilerGeneratedAttribute]
private protected ILogger get_Logger();
    public abstract virtual bool IsValid(String& errorMsg);
}
internal enum Microsoft.SemanticKernel.TemplateEngine.BlockTypes : Enum {
    public int value__;
    public static BlockTypes Undefined;
    public static BlockTypes Text;
    public static BlockTypes Code;
    public static BlockTypes Variable;
    public static BlockTypes Value;
    public static BlockTypes FunctionId;
    public static BlockTypes NamedArg;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.SemanticKernel.TemplateEngine.CodeBlock : Block {
    private bool _validated;
    private List`1<Block> _tokens;
    internal BlockTypes Type { get; }
    public List`1<Block> Blocks { get; }
    [NullableContextAttribute("2")]
public CodeBlock(string content, ILoggerFactory loggerFactory);
    [NullableContextAttribute("2")]
public CodeBlock(List`1<Block> tokens, string content, ILoggerFactory loggerFactory);
    internal virtual BlockTypes get_Type();
    public List`1<Block> get_Blocks();
    public virtual bool IsValid(String& errorMsg);
    public sealed virtual ValueTask`1<object> RenderCodeAsync(Kernel kernel, KernelArguments arguments, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.SemanticKernel.TemplateEngine.CodeBlock/<RenderFunctionCallAsync>d__10")]
private ValueTask`1<object> RenderFunctionCallAsync(FunctionIdBlock fBlock, Kernel kernel, KernelArguments arguments, CancellationToken cancellationToken);
    private bool IsValidFunctionCall(String& errorMsg);
    private KernelArguments EnrichFunctionArguments(Kernel kernel, FunctionIdBlock fBlock, KernelArguments arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.SemanticKernel.TemplateEngine.CodeTokenizer : object {
    private ILoggerFactory _loggerFactory;
    [NullableContextAttribute("2")]
public CodeTokenizer(ILoggerFactory loggerFactory);
    public List`1<Block> Tokenize(string text);
    private static bool IsVarPrefix(char c);
    private static bool IsBlankSpace(char c);
    private static bool IsQuote(char c);
    private static bool CanBeEscaped(char c);
    private static bool IsValidNamedArg(string tokenContent);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.SemanticKernel.TemplateEngine.FunctionIdBlock : Block {
    [CompilerGeneratedAttribute]
private string <PluginName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FunctionName>k__BackingField;
    private static Regex s_validContentRegex;
    internal BlockTypes Type { get; }
    internal string PluginName { get; }
    internal string FunctionName { get; }
    [NullableContextAttribute("2")]
public FunctionIdBlock(string text, ILoggerFactory loggerFactory);
    private static FunctionIdBlock();
    internal virtual BlockTypes get_Type();
    [CompilerGeneratedAttribute]
internal string get_PluginName();
    [CompilerGeneratedAttribute]
internal string get_FunctionName();
    public virtual bool IsValid(String& errorMsg);
    [NullableContextAttribute("2")]
public sealed virtual object Render(KernelArguments arguments);
    [NullableContextAttribute("2")]
private static bool HasMoreThanOneDot(string value);
}
[NullableContextAttribute("1")]
internal interface Microsoft.SemanticKernel.TemplateEngine.ICodeRendering {
    public abstract virtual ValueTask`1<object> RenderCodeAsync(Kernel kernel, KernelArguments arguments, CancellationToken cancellationToken);
}
[NullableContextAttribute("2")]
internal interface Microsoft.SemanticKernel.TemplateEngine.ITextRendering {
    public abstract virtual object Render(KernelArguments arguments);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.SemanticKernel.TemplateEngine.NamedArgBlock : Block {
    [NullableAttribute("1")]
[CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private VarBlock <VarBlock>k__BackingField;
    [NullableAttribute("1")]
private VarBlock _argNameAsVarBlock;
    private ValBlock _valBlock;
    internal BlockTypes Type { get; }
    [NullableAttribute("1")]
internal string Name { get; }
    internal VarBlock VarBlock { get; }
    public NamedArgBlock(string text, ILoggerFactory logger);
    internal virtual BlockTypes get_Type();
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal string get_Name();
    [CompilerGeneratedAttribute]
internal VarBlock get_VarBlock();
    [NullableContextAttribute("1")]
internal static bool TryGetNameAndValue(string text, String& name, String& value);
    internal object GetValue(KernelArguments arguments);
    public sealed virtual object Render(KernelArguments arguments);
    [NullableContextAttribute("1")]
public virtual bool IsValid(String& errorMsg);
    private static string TrimWhitespace(string text);
    [NullableContextAttribute("1")]
private static String[] GetTrimmedParts(string text);
}
internal static class Microsoft.SemanticKernel.TemplateEngine.Symbols : object {
    internal static char BlockStarter;
    internal static char BlockEnder;
    internal static char VarPrefix;
    internal static char NamedArgBlockSeparator;
    internal static char DblQuote;
    internal static char SglQuote;
    internal static char EscapeChar;
    internal static char Space;
    internal static char Tab;
    internal static char NewLine;
    internal static char CarriageReturn;
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.SemanticKernel.TemplateEngine.TemplateTokenizer : object {
    private ILoggerFactory _loggerFactory;
    private CodeTokenizer _codeTokenizer;
    [NullableContextAttribute("2")]
public TemplateTokenizer(ILoggerFactory loggerFactory);
    public List`1<Block> Tokenize(string text);
    private static string SubStr(string text, int startIndex, int stopIndex);
    private static bool IsQuote(char c);
    private static bool CanBeEscaped(char c);
}
internal class Microsoft.SemanticKernel.TemplateEngine.TextBlock : Block {
    internal BlockTypes Type { get; }
    [NullableContextAttribute("2")]
public TextBlock(string text, ILoggerFactory loggerFactory);
    [NullableContextAttribute("1")]
public TextBlock(string text, int startIndex, int stopIndex, ILoggerFactory loggerFactory);
    internal virtual BlockTypes get_Type();
    [NullableContextAttribute("1")]
public virtual bool IsValid(String& errorMsg);
    [NullableContextAttribute("2")]
public sealed virtual object Render(KernelArguments arguments);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal class Microsoft.SemanticKernel.TemplateEngine.ValBlock : Block {
    private char _first;
    private char _last;
    [NullableAttribute("1")]
private string _value;
    internal BlockTypes Type { get; }
    public ValBlock(string quotedValue, ILoggerFactory loggerFactory);
    internal virtual BlockTypes get_Type();
    [NullableContextAttribute("1")]
public virtual bool IsValid(String& errorMsg);
    public sealed virtual object Render(KernelArguments arguments);
    public static bool HasValPrefix(string text);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
internal class Microsoft.SemanticKernel.TemplateEngine.VarBlock : Block {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    private static Regex s_validNameRegex;
    internal BlockTypes Type { get; }
    internal string Name { get; }
    [NullableContextAttribute("2")]
public VarBlock(string content, ILoggerFactory loggerFactory);
    private static VarBlock();
    internal virtual BlockTypes get_Type();
    [CompilerGeneratedAttribute]
internal string get_Name();
    public virtual bool IsValid(String& errorMsg);
    [NullableContextAttribute("2")]
public sealed virtual object Render(KernelArguments arguments);
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExperimentalAttribute("SKEXP0055")]
public static class Microsoft.SemanticKernel.Text.TextChunker : object {
    private static Char[] s_spaceChar;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static String[] s_plaintextSplitOptions;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
private static String[] s_markdownSplitOptions;
    private static TextChunker();
    [ExperimentalAttribute("SKEXP0055")]
public static List`1<string> SplitPlainTextLines(string text, int maxTokensPerLine, TokenCounter tokenCounter);
    [ExperimentalAttribute("SKEXP0055")]
public static List`1<string> SplitMarkDownLines(string text, int maxTokensPerLine, TokenCounter tokenCounter);
    [ExperimentalAttribute("SKEXP0055")]
public static List`1<string> SplitPlainTextParagraphs(List`1<string> lines, int maxTokensPerParagraph, int overlapTokens, string chunkHeader, TokenCounter tokenCounter);
    [ExperimentalAttribute("SKEXP0055")]
public static List`1<string> SplitMarkdownParagraphs(List`1<string> lines, int maxTokensPerParagraph, int overlapTokens, string chunkHeader, TokenCounter tokenCounter);
    [ExperimentalAttribute("SKEXP0055")]
private static List`1<string> InternalSplitTextParagraphs(List`1<string> lines, int maxTokensPerParagraph, int overlapTokens, string chunkHeader, Func`4<string, int, TokenCounter, List`1<string>> longLinesSplitter, TokenCounter tokenCounter);
    [ExperimentalAttribute("SKEXP0055")]
private static List`1<string> BuildParagraph(IEnumerable`1<string> truncatedLines, int maxTokensPerParagraph, TokenCounter tokenCounter);
    [ExperimentalAttribute("SKEXP0055")]
private static List`1<string> ProcessParagraphs(List`1<string> paragraphs, int adjustedMaxTokensPerParagraph, int overlapTokens, string chunkHeader, Func`4<string, int, TokenCounter, List`1<string>> longLinesSplitter, TokenCounter tokenCounter);
    [ExperimentalAttribute("SKEXP0055")]
private static List`1<string> InternalSplitLines(string text, int maxTokensPerLine, bool trim, String[] splitOptions, TokenCounter tokenCounter);
    [NullableContextAttribute("0")]
[ExperimentalAttribute("SKEXP0055")]
private static ValueTuple`2<List`1<string>, bool> Split(List`1<string> input, int maxTokens, ReadOnlySpan`1<char> separators, bool trim, TokenCounter tokenCounter);
    [NullableContextAttribute("0")]
[ExperimentalAttribute("SKEXP0055")]
private static ValueTuple`2<List`1<string>, bool> Split(ReadOnlySpan`1<char> input, string inputString, int maxTokens, ReadOnlySpan`1<char> separators, bool trim, TokenCounter tokenCounter);
    private static int GetTokenCount(string input, TokenCounter tokenCounter);
    private static int GetDefaultTokenCount(int length);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class System.Runtime.CompilerServices.IsReadOnlyAttribute : Attribute {
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
