internal static class Microsoft.Build.Tasks.SourceControl.Names : object {
}
[NullableContextAttribute("1")]
[NullableAttribute("0")]
[ExtensionAttribute]
internal static class Microsoft.Build.Tasks.SourceControl.PathUtilities : object {
    private static Char[] s_directorySeparators;
    private static string UncPrefix;
    private static string UnixRoot;
    private static PathUtilities();
    public static String[] Split(string fullPath);
    [ExtensionAttribute]
public static bool EndsWithSeparator(string path);
    [ExtensionAttribute]
public static string EndWithSeparator(string path);
    [ExtensionAttribute]
public static string EndWithSeparator(string path, char separator);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.SourceLink.Common.GenerateSourceLinkFile : Task {
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[CompilerGeneratedAttribute]
private ITaskItem[] <SourceRoots>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OutputFile>k__BackingField;
    [NullableAttribute("Mono.Cecil.CustomAttributeArgument[]")]
[RequiredAttribute]
public ITaskItem[] SourceRoots { get; public set; }
    [RequiredAttribute]
public string OutputFile { get; public set; }
    [CompilerGeneratedAttribute]
public ITaskItem[] get_SourceRoots();
    [CompilerGeneratedAttribute]
public void set_SourceRoots(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_OutputFile();
    [CompilerGeneratedAttribute]
public void set_OutputFile(string value);
    public virtual bool Execute();
    internal string GenerateSourceLinkContent();
    [NullableContextAttribute("1")]
private void WriteSourceLinkFile(string content);
    [NullableContextAttribute("1")]
[CompilerGeneratedAttribute]
internal static string <GenerateSourceLinkContent>g__jsonEscape|9_0(string str);
}
internal static class Microsoft.SourceLink.Common.Resources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string MustEndWithDirectorySeparator { get; }
    internal static string MustNotContainWildcard { get; }
    internal static string MustContainSingleWildcard { get; }
    internal static string SourceControlInformationIsNotAvailableGeneratedSourceLinkEmpty { get; }
    internal static string IsEmpty { get; }
    internal static string ErrorWritingToSourceLinkFile { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    internal static string get_MustEndWithDirectorySeparator();
    internal static string get_MustNotContainWildcard();
    internal static string get_MustContainSingleWildcard();
    internal static string get_SourceControlInformationIsNotAvailableGeneratedSourceLinkEmpty();
    internal static string get_IsEmpty();
    internal static string get_ErrorWritingToSourceLinkFile();
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
public class Microsoft.SourceLink.Common.SourceLinkHasSingleProvider : Task {
    [CompilerGeneratedAttribute]
private string <ProviderTargets>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasSingleProvider>k__BackingField;
    public string ProviderTargets { get; public set; }
    [OutputAttribute]
public bool HasSingleProvider { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ProviderTargets();
    [CompilerGeneratedAttribute]
public void set_ProviderTargets(string value);
    [CompilerGeneratedAttribute]
public bool get_HasSingleProvider();
    [CompilerGeneratedAttribute]
public void set_HasSingleProvider(bool value);
    public virtual bool Execute();
}
internal static class System.NullableDebug : object {
    [ConditionalAttribute("DEBUG")]
public static void Assert(bool b);
    [NullableContextAttribute("1")]
[ConditionalAttribute("DEBUG")]
public static void Assert(bool b, string message);
}
[NullableContextAttribute("2")]
[NullableAttribute("0")]
internal static class System.NullableString : object {
    public static bool IsNullOrEmpty(string str);
    public static bool IsNullOrWhiteSpace(string str);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("27524")]
internal class System.Runtime.CompilerServices.NullableAttribute : Attribute {
    public Byte[] NullableFlags;
    public NullableAttribute(byte );
    public NullableAttribute(Byte[] );
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("5196")]
internal class System.Runtime.CompilerServices.NullableContextAttribute : Attribute {
    public byte Flag;
    public NullableContextAttribute(byte );
}
