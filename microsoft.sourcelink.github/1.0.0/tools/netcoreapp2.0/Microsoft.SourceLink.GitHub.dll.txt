internal static class Microsoft.Build.Tasks.SourceControl.CommonResources : object {
    private static ResourceManager s_resourceManager;
    [CompilerGeneratedAttribute]
private static CultureInfo <Culture>k__BackingField;
    internal static ResourceManager ResourceManager { get; }
    internal static CultureInfo Culture { get; internal set; }
    internal static string ValueOfWithIdentityIsInvalid { get; }
    internal static string ItemOfItemGroupMustSpecifyMetadata { get; }
    internal static string ValueOfWithIdentityIsNotValidCommitHash { get; }
    internal static string ValuePassedToTaskParameterNotValidHostUri { get; }
    internal static string ValuePassedToTaskParameterNotValidUri { get; }
    internal static string ValuePassedToTaskParameterNotValidDomainName { get; }
    internal static string AtLeastOneRepositoryHostIsRequired { get; }
    internal static string UnableToDetermineRepositoryUrl { get; }
    internal static ResourceManager get_ResourceManager();
    [CompilerGeneratedAttribute]
internal static CultureInfo get_Culture();
    [CompilerGeneratedAttribute]
internal static void set_Culture(CultureInfo value);
    internal static string GetResourceString(string resourceKey, string defaultValue);
    internal static string get_ValueOfWithIdentityIsInvalid();
    internal static string get_ItemOfItemGroupMustSpecifyMetadata();
    internal static string get_ValueOfWithIdentityIsNotValidCommitHash();
    internal static string get_ValuePassedToTaskParameterNotValidHostUri();
    internal static string get_ValuePassedToTaskParameterNotValidUri();
    internal static string get_ValuePassedToTaskParameterNotValidDomainName();
    internal static string get_AtLeastOneRepositoryHostIsRequired();
    internal static string get_UnableToDetermineRepositoryUrl();
}
public abstract class Microsoft.Build.Tasks.SourceControl.GetSourceLinkUrlGitTask : Task {
    private static string SourceControlName;
    protected static string NotApplicableValue;
    private static string ContentUrlMetadataName;
    [CompilerGeneratedAttribute]
private ITaskItem <SourceRoot>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Hosts>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RepositoryUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSingleProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceLinkUrl>k__BackingField;
    [RequiredAttribute]
public ITaskItem SourceRoot { get; public set; }
    public ITaskItem[] Hosts { get; public set; }
    public string RepositoryUrl { get; public set; }
    public bool IsSingleProvider { get; public set; }
    [OutputAttribute]
public string SourceLinkUrl { get; public set; }
    protected string ProviderDisplayName { get; }
    protected string HostsItemGroupName { get; }
    protected bool SupportsImplicitHost { get; }
    [CompilerGeneratedAttribute]
public ITaskItem get_SourceRoot();
    [CompilerGeneratedAttribute]
public void set_SourceRoot(ITaskItem value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Hosts();
    [CompilerGeneratedAttribute]
public void set_Hosts(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public string get_RepositoryUrl();
    [CompilerGeneratedAttribute]
public void set_RepositoryUrl(string value);
    [CompilerGeneratedAttribute]
public bool get_IsSingleProvider();
    [CompilerGeneratedAttribute]
public void set_IsSingleProvider(bool value);
    [CompilerGeneratedAttribute]
public string get_SourceLinkUrl();
    [CompilerGeneratedAttribute]
public void set_SourceLinkUrl(string value);
    protected abstract virtual string get_ProviderDisplayName();
    protected abstract virtual string get_HostsItemGroupName();
    protected virtual bool get_SupportsImplicitHost();
    protected virtual Uri GetDefaultContentUriFromHostUri(string authority, Uri gitUri);
    protected virtual Uri GetDefaultContentUriFromRepositoryUri(Uri repositoryUri);
    protected abstract virtual string BuildSourceLinkUrl(Uri contentUrl, Uri gitUri, string relativeUrl, string revisionId, ITaskItem hostItem);
    public virtual bool Execute();
    private void ExecuteImpl();
    [IteratorStateMachineAttribute("Microsoft.Build.Tasks.SourceControl.GetSourceLinkUrlGitTask/<GetUrlMappings>d__36")]
private IEnumerable`1<UrlMapping> GetUrlMappings(Uri gitUri);
    private static Uri GetMatchingContentUri(UrlMapping[] mappings, Uri repoUri, ITaskItem& hostItem);
    [CompilerGeneratedAttribute]
internal static bool <GetUrlMappings>g__isValidContentUri|36_0(Uri uri);
    [CompilerGeneratedAttribute]
internal static Nullable`1<UrlMapping> <GetMatchingContentUri>g__findMatch|37_0(bool exactHost, <>c__DisplayClass37_0& );
}
internal static class Microsoft.Build.Tasks.SourceControl.Names : object {
}
public class Microsoft.Build.Tasks.SourceControl.TranslateRepositoryUrlsGitTask : Task {
    private static string SourceControlName;
    [CompilerGeneratedAttribute]
private string <RepositoryUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <SourceRoots>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <Hosts>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSingleProvider>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TranslatedRepositoryUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private ITaskItem[] <TranslatedSourceRoots>k__BackingField;
    public string RepositoryUrl { get; public set; }
    public ITaskItem[] SourceRoots { get; public set; }
    public ITaskItem[] Hosts { get; public set; }
    public bool IsSingleProvider { get; public set; }
    [OutputAttribute]
public string TranslatedRepositoryUrl { get; public set; }
    [OutputAttribute]
public ITaskItem[] TranslatedSourceRoots { get; public set; }
    [CompilerGeneratedAttribute]
public string get_RepositoryUrl();
    [CompilerGeneratedAttribute]
public void set_RepositoryUrl(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_SourceRoots();
    [CompilerGeneratedAttribute]
public void set_SourceRoots(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_Hosts();
    [CompilerGeneratedAttribute]
public void set_Hosts(ITaskItem[] value);
    [CompilerGeneratedAttribute]
public bool get_IsSingleProvider();
    [CompilerGeneratedAttribute]
public void set_IsSingleProvider(bool value);
    [CompilerGeneratedAttribute]
public string get_TranslatedRepositoryUrl();
    [CompilerGeneratedAttribute]
public void set_TranslatedRepositoryUrl(string value);
    [CompilerGeneratedAttribute]
public ITaskItem[] get_TranslatedSourceRoots();
    [CompilerGeneratedAttribute]
public void set_TranslatedSourceRoots(ITaskItem[] value);
    protected virtual string TranslateSshUrl(Uri uri);
    protected virtual string TranslateGitUrl(Uri uri);
    protected virtual string TranslateHttpUrl(Uri uri);
    public virtual bool Execute();
    private void ExecuteImpl();
    [IteratorStateMachineAttribute("Microsoft.Build.Tasks.SourceControl.TranslateRepositoryUrlsGitTask/<GetHostUris>d__30")]
private IEnumerable`1<Uri> GetHostUris();
    [CompilerGeneratedAttribute]
internal static bool <ExecuteImpl>g__isMatchingHostUri|29_0(Uri hostUri, Uri uri);
    [CompilerGeneratedAttribute]
private string <ExecuteImpl>g__translate|29_1(string url, <>c__DisplayClass29_0& );
}
[ExtensionAttribute]
internal static class Microsoft.Build.Tasks.SourceControl.UriUtilities : object {
    public static bool TryParseAuthority(string value, Uri& uri);
    [ExtensionAttribute]
public static int GetExplicitPort(Uri uri);
    public static string Combine(string baseUrl, string relativeUrl);
    public static bool UrlStartsWith(string url, string prefix);
    public static bool TrySplitRelativeUrl(string relativeUrl, String[]& parts);
    [ExtensionAttribute]
public static string GetScheme(Uri uri);
    [ExtensionAttribute]
public static string GetHost(Uri uri);
    [ExtensionAttribute]
public static string GetAuthority(Uri uri);
    [ExtensionAttribute]
public static string GetPath(Uri uri);
    [ExtensionAttribute]
public static string GetPathAndQuery(Uri uri);
}
public class Microsoft.SourceLink.GitHub.GetSourceLinkUrl : GetSourceLinkUrlGitTask {
    protected string HostsItemGroupName { get; }
    protected string ProviderDisplayName { get; }
    protected virtual string get_HostsItemGroupName();
    protected virtual string get_ProviderDisplayName();
    protected virtual Uri GetDefaultContentUriFromHostUri(string authority, Uri gitUri);
    protected virtual string BuildSourceLinkUrl(Uri contentUri, Uri gitUri, string relativeUrl, string revisionId, ITaskItem hostItem);
}
public class Microsoft.SourceLink.GitHub.TranslateRepositoryUrls : TranslateRepositoryUrlsGitTask {
}
