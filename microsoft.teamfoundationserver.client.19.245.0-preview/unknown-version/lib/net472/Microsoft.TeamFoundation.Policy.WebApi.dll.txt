[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.TeamFoundation.Policy.WebApi.PolicyCompatHttpClientBase : VssHttpClientBase {
    public PolicyCompatHttpClientBase(Uri baseUrl, VssCredentials credentials);
    public PolicyCompatHttpClientBase(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings);
    public PolicyCompatHttpClientBase(Uri baseUrl, VssCredentials credentials, DelegatingHandler[] handlers);
    public PolicyCompatHttpClientBase(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings, DelegatingHandler[] handlers);
    public PolicyCompatHttpClientBase(Uri baseUrl, HttpMessageHandler pipeline, bool disposeHandler);
    public Task`1<List`1<PolicyConfiguration>> GetPolicyConfigurationsAsync(string project, object userState, CancellationToken cancellationToken);
    public Task`1<List`1<PolicyConfiguration>> GetPolicyConfigurationsAsync(Guid project, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public Task`1<List`1<PolicyConfiguration>> GetPolicyConfigurationsAsync(string project, string scope, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public Task`1<List`1<PolicyConfiguration>> GetPolicyConfigurationsAsync(Guid project, string scope, object userState, CancellationToken cancellationToken);
    public Task`1<PolicyConfiguration> CreatePolicyConfigurationAsync(PolicyConfiguration configuration, string project, Nullable`1<int> configurationId, object userState, CancellationToken cancellationToken);
    public Task`1<PolicyConfiguration> CreatePolicyConfigurationAsync(PolicyConfiguration configuration, Guid project, Nullable`1<int> configurationId, object userState, CancellationToken cancellationToken);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Policy.WebApi.PolicyConfiguration : VersionedPolicyConfigurationRef {
    [CompilerGeneratedAttribute]
private IdentityRef <CreatedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBlocking>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeleted>k__BackingField;
    [CompilerGeneratedAttribute]
private JObject <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnterpriseManaged>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [DataMemberAttribute]
public IdentityRef CreatedBy { get; public set; }
    [DataMemberAttribute]
public DateTime CreatedDate { get; public set; }
    [DataMemberAttribute]
public bool IsEnabled { get; public set; }
    [DataMemberAttribute]
public bool IsBlocking { get; public set; }
    [DataMemberAttribute]
public bool IsDeleted { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public JObject Settings { get; public set; }
    [DataMemberAttribute]
public bool IsEnterpriseManaged { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    public PolicyConfiguration(ISecuredObject securedObject);
    [CompilerGeneratedAttribute]
public IdentityRef get_CreatedBy();
    [CompilerGeneratedAttribute]
public void set_CreatedBy(IdentityRef value);
    [CompilerGeneratedAttribute]
public DateTime get_CreatedDate();
    [CompilerGeneratedAttribute]
public void set_CreatedDate(DateTime value);
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsBlocking();
    [CompilerGeneratedAttribute]
public void set_IsBlocking(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsDeleted();
    [CompilerGeneratedAttribute]
public void set_IsDeleted(bool value);
    [CompilerGeneratedAttribute]
public JObject get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(JObject value);
    [CompilerGeneratedAttribute]
public bool get_IsEnterpriseManaged();
    [CompilerGeneratedAttribute]
public void set_IsEnterpriseManaged(bool value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Policy.WebApi.PolicyConfigurationRef : BaseSecuredObject {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private PolicyTypeRef <Type>k__BackingField;
    [DataMemberAttribute]
public int Id { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public PolicyTypeRef Type { get; public set; }
    internal PolicyConfigurationRef(ISecuredObject securedObject);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public PolicyTypeRef get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(PolicyTypeRef value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Policy.WebApi.PolicyEvaluationRecord : BaseSecuredObject {
    [CompilerGeneratedAttribute]
private PolicyConfiguration <Configuration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ArtifactId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <EvaluationId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <StartedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CompletedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PolicyEvaluationStatus> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private JObject <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [DataMemberAttribute]
public PolicyConfiguration Configuration { get; public set; }
    [DataMemberAttribute]
public string ArtifactId { get; public set; }
    [DataMemberAttribute]
public Guid EvaluationId { get; public set; }
    [DataMemberAttribute]
public DateTime StartedDate { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> CompletedDate { get; public set; }
    [DataMemberAttribute]
public Nullable`1<PolicyEvaluationStatus> Status { get; public set; }
    [DataMemberAttribute]
public JObject Context { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    public PolicyEvaluationRecord(ISecuredObject securedObject);
    [CompilerGeneratedAttribute]
public PolicyConfiguration get_Configuration();
    [CompilerGeneratedAttribute]
public void set_Configuration(PolicyConfiguration value);
    [CompilerGeneratedAttribute]
public string get_ArtifactId();
    [CompilerGeneratedAttribute]
public void set_ArtifactId(string value);
    [CompilerGeneratedAttribute]
public Guid get_EvaluationId();
    [CompilerGeneratedAttribute]
public void set_EvaluationId(Guid value);
    [CompilerGeneratedAttribute]
public DateTime get_StartedDate();
    [CompilerGeneratedAttribute]
public void set_StartedDate(DateTime value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_CompletedDate();
    [CompilerGeneratedAttribute]
public void set_CompletedDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<PolicyEvaluationStatus> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<PolicyEvaluationStatus> value);
    [CompilerGeneratedAttribute]
public JObject get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(JObject value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
}
[DataContractAttribute]
public enum Microsoft.TeamFoundation.Policy.WebApi.PolicyEvaluationStatus : Enum {
    public int value__;
    public static PolicyEvaluationStatus Queued;
    public static PolicyEvaluationStatus Running;
    public static PolicyEvaluationStatus Approved;
    public static PolicyEvaluationStatus Rejected;
    public static PolicyEvaluationStatus NotApplicable;
    public static PolicyEvaluationStatus Broken;
}
[ResourceAreaAttribute("FB13A388-40DD-4A04-B530-013A739C72EF")]
public class Microsoft.TeamFoundation.Policy.WebApi.PolicyHttpClient : PolicyHttpClientBase {
    public PolicyHttpClient(Uri baseUrl, VssCredentials credentials);
    public PolicyHttpClient(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings);
    public PolicyHttpClient(Uri baseUrl, VssCredentials credentials, DelegatingHandler[] handlers);
    public PolicyHttpClient(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings, DelegatingHandler[] handlers);
    public PolicyHttpClient(Uri baseUrl, HttpMessageHandler pipeline, bool disposeHandler);
    public Task`1<PolicyConfiguration> CreatePolicyConfigurationAsync(PolicyConfiguration configuration, string project, object userState, CancellationToken cancellationToken);
    public Task`1<PolicyConfiguration> CreatePolicyConfigurationAsync(PolicyConfiguration configuration, Guid project, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Policy.WebApi.PolicyHttpClient/<DeletePolicyConfigurationAsync>d__7")]
public Task DeletePolicyConfigurationAsync(string project, int configurationId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Policy.WebApi.PolicyHttpClient/<DeletePolicyConfigurationAsync>d__8")]
public Task DeletePolicyConfigurationAsync(Guid project, int configurationId, object userState, CancellationToken cancellationToken);
    public Task`1<PolicyConfiguration> GetPolicyConfigurationAsync(string project, int configurationId, object userState, CancellationToken cancellationToken);
    public Task`1<PolicyConfiguration> GetPolicyConfigurationAsync(Guid project, int configurationId, object userState, CancellationToken cancellationToken);
    public Task`1<List`1<PolicyConfiguration>> GetPolicyConfigurationsAsync(string project, string scope, Nullable`1<Guid> policyType, object userState, CancellationToken cancellationToken);
    public Task`1<List`1<PolicyConfiguration>> GetPolicyConfigurationsAsync(Guid project, string scope, Nullable`1<Guid> policyType, object userState, CancellationToken cancellationToken);
    public Task`1<PolicyConfiguration> UpdatePolicyConfigurationAsync(PolicyConfiguration configuration, string project, int configurationId, object userState, CancellationToken cancellationToken);
    public Task`1<PolicyConfiguration> UpdatePolicyConfigurationAsync(PolicyConfiguration configuration, Guid project, int configurationId, object userState, CancellationToken cancellationToken);
    public Task`1<PolicyEvaluationRecord> GetPolicyEvaluationAsync(string project, Guid evaluationId, object userState, CancellationToken cancellationToken);
    public Task`1<PolicyEvaluationRecord> GetPolicyEvaluationAsync(Guid project, Guid evaluationId, object userState, CancellationToken cancellationToken);
    public Task`1<PolicyEvaluationRecord> RequeuePolicyEvaluationAsync(string project, Guid evaluationId, object userState, CancellationToken cancellationToken);
    public Task`1<PolicyEvaluationRecord> RequeuePolicyEvaluationAsync(Guid project, Guid evaluationId, object userState, CancellationToken cancellationToken);
    public Task`1<List`1<PolicyEvaluationRecord>> GetPolicyEvaluationsAsync(string project, string artifactId, Nullable`1<bool> includeNotApplicable, Nullable`1<int> top, Nullable`1<int> skip, object userState, CancellationToken cancellationToken);
    public Task`1<List`1<PolicyEvaluationRecord>> GetPolicyEvaluationsAsync(Guid project, string artifactId, Nullable`1<bool> includeNotApplicable, Nullable`1<int> top, Nullable`1<int> skip, object userState, CancellationToken cancellationToken);
    public Task`1<PolicyConfiguration> GetPolicyConfigurationRevisionAsync(string project, int configurationId, int revisionId, object userState, CancellationToken cancellationToken);
    public Task`1<PolicyConfiguration> GetPolicyConfigurationRevisionAsync(Guid project, int configurationId, int revisionId, object userState, CancellationToken cancellationToken);
    public Task`1<List`1<PolicyConfiguration>> GetPolicyConfigurationRevisionsAsync(string project, int configurationId, Nullable`1<int> top, Nullable`1<int> skip, object userState, CancellationToken cancellationToken);
    public Task`1<List`1<PolicyConfiguration>> GetPolicyConfigurationRevisionsAsync(Guid project, int configurationId, Nullable`1<int> top, Nullable`1<int> skip, object userState, CancellationToken cancellationToken);
    public Task`1<PolicyType> GetPolicyTypeAsync(string project, Guid typeId, object userState, CancellationToken cancellationToken);
    public Task`1<PolicyType> GetPolicyTypeAsync(Guid project, Guid typeId, object userState, CancellationToken cancellationToken);
    public Task`1<List`1<PolicyType>> GetPolicyTypesAsync(string project, object userState, CancellationToken cancellationToken);
    public Task`1<List`1<PolicyType>> GetPolicyTypesAsync(Guid project, object userState, CancellationToken cancellationToken);
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.TeamFoundation.Policy.WebApi.PolicyHttpClientBase : PolicyCompatHttpClientBase {
    public PolicyHttpClientBase(Uri baseUrl, VssCredentials credentials);
    public PolicyHttpClientBase(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings);
    public PolicyHttpClientBase(Uri baseUrl, VssCredentials credentials, DelegatingHandler[] handlers);
    public PolicyHttpClientBase(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings, DelegatingHandler[] handlers);
    public PolicyHttpClientBase(Uri baseUrl, HttpMessageHandler pipeline, bool disposeHandler);
    public Task`1<IPagedList`1<PolicyConfiguration>> GetPolicyConfigurationsAsync(string project, string scope, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public Task`1<IPagedList`1<PolicyConfiguration>> GetPolicyConfigurationsAsync(Guid project, string scope, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Policy.WebApi.PolicyHttpClientBase/<GetPagedList>d__7`1")]
protected Task`1<IPagedList`1<T>> GetPagedList(HttpResponseMessage responseMessage, CancellationToken cancellationToken);
    protected string GetContinuationToken(HttpResponseMessage responseMessage);
    protected Task`1<T> SendAsync(HttpMethod method, Guid locationId, object routeValues, ApiResourceVersion version, HttpContent content, IEnumerable`1<KeyValuePair`2<string, string>> queryParameters, object userState, CancellationToken cancellationToken, Func`3<HttpResponseMessage, CancellationToken, Task`1<T>> processResponse);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Policy.WebApi.PolicyHttpClientBase/<SendAsync>d__10`1")]
protected Task`1<T> SendAsync(HttpMethod method, IEnumerable`1<KeyValuePair`2<string, string>> additionalHeaders, Guid locationId, object routeValues, ApiResourceVersion version, HttpContent content, IEnumerable`1<KeyValuePair`2<string, string>> queryParameters, object userState, CancellationToken cancellationToken, Func`3<HttpResponseMessage, CancellationToken, Task`1<T>> processResponse);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Policy.WebApi.PolicyHttpClientBase/<SendAsync>d__11`1")]
protected Task`1<T> SendAsync(HttpRequestMessage message, object userState, CancellationToken cancellationToken, Func`3<HttpResponseMessage, CancellationToken, Task`1<T>> processResponse);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Policy.WebApi.PolicyType : PolicyTypeRef {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [DataMemberAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Policy.WebApi.PolicyTypeRef : BaseSecuredObject {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public string DisplayName { get; public set; }
    public PolicyTypeRef(ISecuredObject securedObject);
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
}
[GenerateAllConstantsAttribute("")]
public class Microsoft.TeamFoundation.Policy.WebApi.PolicyWebApiConstants : object {
    public static string AreaId;
    public static string AreaName;
    public static string ConfigurationResource;
    public static string EvaluationsResource;
    public static string TypesResource;
    public static string RevisionsResource;
    public static string PolicyTypesLocationIdString;
    public static Guid PolicyTypesLocationId;
    public static string PolicyConfigurationsLocationIdString;
    public static Guid PolicyConfigurationsLocationId;
    public static string PolicyConfigurationRevisionsLocationIdString;
    public static Guid PolicyConfigurationRevisionsLocationId;
    public static string PolicyEvaluationsByArtifactLocationIdString;
    public static Guid PolicyEvaluationsByArtifactLocationId;
    public static string PolicyEvaluationLocationIdString;
    public static Guid PolicyEvaluationLocationId;
    private static PolicyWebApiConstants();
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Policy.WebApi.VersionedPolicyConfigurationRef : PolicyConfigurationRef {
    [CompilerGeneratedAttribute]
private int <Revision>k__BackingField;
    [DataMemberAttribute]
public int Revision { get; public set; }
    internal VersionedPolicyConfigurationRef(ISecuredObject securedObject);
    [CompilerGeneratedAttribute]
public int get_Revision();
    [CompilerGeneratedAttribute]
public void set_Revision(int value);
}
public class Microsoft.TeamFoundation.SourceControl.WebApi.PolicySecuredObjectFactory : object {
    private Guid m_namespaceId;
    private string m_projectUri;
    private int m_requiredPermissions;
    private Guid Microsoft.VisualStudio.Services.WebApi.ISecuredObject.NamespaceId { get; }
    private int Microsoft.VisualStudio.Services.WebApi.ISecuredObject.RequiredPermissions { get; }
    private PolicySecuredObjectFactory(Guid namespaceId, int requiredPermissions, string projectUri);
    public static ISecuredObject CreateReadOnlyInstance(string projectUri);
    public static ISecuredObject CreateReadOnlyInstance(Guid projectId);
    private sealed virtual override string Microsoft.VisualStudio.Services.WebApi.ISecuredObject.GetToken();
    private sealed virtual override Guid Microsoft.VisualStudio.Services.WebApi.ISecuredObject.get_NamespaceId();
    private sealed virtual override int Microsoft.VisualStudio.Services.WebApi.ISecuredObject.get_RequiredPermissions();
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
