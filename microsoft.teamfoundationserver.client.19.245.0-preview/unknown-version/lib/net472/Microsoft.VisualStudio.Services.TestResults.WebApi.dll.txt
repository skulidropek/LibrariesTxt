[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[DataContractAttribute]
public class Microsoft.VisualStudio.Services.TestResults.WebApi.Attachment : object {
    [CompilerGeneratedAttribute]
private Stream <Stream>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompressionType>k__BackingField;
    [DataMemberAttribute]
public Stream Stream { get; public set; }
    [DataMemberAttribute]
public string FileName { get; public set; }
    [DataMemberAttribute]
public string CompressionType { get; public set; }
    [CompilerGeneratedAttribute]
public Stream get_Stream();
    [CompilerGeneratedAttribute]
public void set_Stream(Stream value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_CompressionType();
    [CompilerGeneratedAttribute]
public void set_CompressionType(string value);
}
public class Microsoft.VisualStudio.Services.TestResults.WebApi.CoverageSummaryStatusConflictException : VssServiceException {
    public CoverageSummaryStatusConflictException(string message);
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsCompatHttpClientBase : VssHttpClientBase {
    public TestResultsCompatHttpClientBase(Uri baseUrl, VssCredentials credentials);
    public TestResultsCompatHttpClientBase(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings);
    public TestResultsCompatHttpClientBase(Uri baseUrl, VssCredentials credentials, DelegatingHandler[] handlers);
    public TestResultsCompatHttpClientBase(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings, DelegatingHandler[] handlers);
    public TestResultsCompatHttpClientBase(Uri baseUrl, HttpMessageHandler pipeline, bool disposeHandler);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<TestLogStoreEndpointDetails> TestLogStoreEndpointDetailsForRunAsync(string project, int runId, TestLogStoreOperationType testLogStoreOperationType, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<TestLogStoreEndpointDetails> TestLogStoreEndpointDetailsForRunAsync(Guid project, int runId, TestLogStoreOperationType testLogStoreOperationType, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<TestResultMetaData>> QueryTestResultsMetaDataAsync(IEnumerable`1<string> testCaseReferenceIds, string project, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<TestResultMetaData>> QueryTestResultsMetaDataAsync(IEnumerable`1<string> testCaseReferenceIds, Guid project, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<TestCaseResult>> GetTestResultsAsync(string project, int runId, Nullable`1<ResultDetails> detailsToInclude, Nullable`1<int> skip, Nullable`1<int> top, IEnumerable`1<TestOutcome> outcomes, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<TestCaseResult>> GetTestResultsAsync(Guid project, int runId, Nullable`1<ResultDetails> detailsToInclude, Nullable`1<int> skip, Nullable`1<int> top, IEnumerable`1<TestOutcome> outcomes, object userState, CancellationToken cancellationToken);
}
[ResourceAreaAttribute("C83EAF52-EDF3-4034-AE11-17D38F25404C")]
public class Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClient : TestResultsHttpClientBase {
    private static Dictionary`2<string, Type> s_translatedExceptions;
    public HttpClient HttpClient { get; }
    protected IDictionary`2<string, Type> TranslatedExceptions { get; }
    public TestResultsHttpClient(Uri baseUrl, VssCredentials credentials);
    public TestResultsHttpClient(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings);
    public TestResultsHttpClient(Uri baseUrl, VssCredentials credentials, DelegatingHandler[] handlers);
    public TestResultsHttpClient(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings, DelegatingHandler[] handlers);
    public TestResultsHttpClient(Uri baseUrl, HttpMessageHandler pipeline, bool disposeHandler);
    private static TestResultsHttpClient();
    [EditorBrowsableAttribute("1")]
public virtual Task`1<TestRunStatistic> GetTestRunStatisticsAsync(string project, int runId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<TestRunStatistic> GetTestRunStatisticsAsync(Guid project, int runId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<IPagedList`1<ShallowTestCaseResult>> GetTestResultsByBuildWithContinuationTokenAsync(string project, int buildId, string publishContext, IEnumerable`1<TestOutcome> outcomes, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<IPagedList`1<ShallowTestCaseResult>> GetTestResultsByBuildWithContinuationTokenAsync(Guid project, int buildId, string publishContext, IEnumerable`1<TestOutcome> outcomes, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<IPagedList`1<ShallowTestCaseResult>> GetTestResultsByReleaseWithContinuationTokenAsync(string project, int releaseId, Nullable`1<int> releaseEnvid, string publishContext, IEnumerable`1<TestOutcome> outcomes, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<IPagedList`1<ShallowTestCaseResult>> GetTestResultsByReleaseWithContinuationTokenAsync(Guid project, int releaseId, Nullable`1<int> releaseEnvid, string publishContext, IEnumerable`1<TestOutcome> outcomes, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<IPagedList`1<ShallowTestCaseResult>> GetTestResultsByPipelineWithContinuationTokenAsync(string project, int pipelineId, string stageName, string phaseName, string jobName, IEnumerable`1<TestOutcome> outcomes, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<IPagedList`1<ShallowTestCaseResult>> GetTestResultsByPipelineWithContinuationTokenAsync(Guid project, int pipelineId, string stageName, string phaseName, string jobName, IEnumerable`1<TestOutcome> outcomes, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<IPagedList`1<FieldDetailsForTestResults>> GetResultGroupsByBuildWithContinuationTokenAsync(string project, int buildId, string publishContext, IEnumerable`1<string> fields, string continuationToken, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<IPagedList`1<FieldDetailsForTestResults>> GetResultGroupsByBuildWithContinuationTokenAsync(Guid project, int buildId, string publishContext, IEnumerable`1<string> fields, string continuationToken, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<IPagedList`1<FieldDetailsForTestResults>> GetResultGroupsByReleaseWithContinuationTokenAsync(Guid project, int releaseId, string publishContext, Nullable`1<int> releaseEnvId, IEnumerable`1<string> fields, string continuationToken, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<IPagedList`1<FieldDetailsForTestResults>> GetResultGroupsByReleaseWithContinuationTokenAsync(string project, int releaseId, string publishContext, Nullable`1<int> releaseEnvId, IEnumerable`1<string> fields, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultsGroupsForBuild> GetResultGroupsByBuildV1Async(string project, int buildId, string publishContext, IEnumerable`1<string> fields, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultsGroupsForBuild> GetResultGroupsByBuildV1Async(Guid project, int buildId, string publishContext, IEnumerable`1<string> fields, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultsGroupsForRelease> GetResultGroupsByReleaseV1Async(string project, int releaseId, string publishContext, Nullable`1<int> releaseEnvId, IEnumerable`1<string> fields, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultsGroupsForRelease> GetResultGroupsByReleaseV1Async(Guid project, int releaseId, string publishContext, Nullable`1<int> releaseEnvId, IEnumerable`1<string> fields, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClient/<GetTcmRunAttachmentContentAsync>d__22")]
public virtual Task`1<Attachment> GetTcmRunAttachmentContentAsync(Guid project, int runId, int attachmentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClient/<GetTcmResultAttachmentContentAsync>d__23")]
public virtual Task`1<Attachment> GetTcmResultAttachmentContentAsync(Guid project, int runId, int testCaseResultId, int attachmentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClient/<GetTcmSubResultAttachmentContentAsync>d__24")]
public virtual Task`1<Attachment> GetTcmSubResultAttachmentContentAsync(Guid project, int runId, int testCaseResultId, int testSubResultId, int attachmentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClient/<GetTcmIterationAttachmentContentAsync>d__25")]
public virtual Task`1<Attachment> GetTcmIterationAttachmentContentAsync(Guid project, int runId, int testCaseResultId, int attachmentId, int iterationId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IPagedList`1<TestRun>> QueryTestRunsAsync2(string project, DateTime minLastUpdatedDate, DateTime maxLastUpdatedDate, Nullable`1<TestRunState> state, IEnumerable`1<int> planIds, Nullable`1<bool> isAutomated, Nullable`1<TestRunPublishContext> publishContext, IEnumerable`1<int> buildIds, IEnumerable`1<int> buildDefIds, string branchName, IEnumerable`1<int> releaseIds, IEnumerable`1<int> releaseDefIds, IEnumerable`1<int> releaseEnvIds, IEnumerable`1<int> releaseEnvDefIds, string runTitle, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IPagedList`1<TestRun>> QueryTestRunsAsync2(Guid project, DateTime minLastUpdatedDate, DateTime maxLastUpdatedDate, Nullable`1<TestRunState> state, IEnumerable`1<int> planIds, Nullable`1<bool> isAutomated, Nullable`1<TestRunPublishContext> publishContext, IEnumerable`1<int> buildIds, IEnumerable`1<int> buildDefIds, string branchName, IEnumerable`1<int> releaseIds, IEnumerable`1<int> releaseDefIds, IEnumerable`1<int> releaseEnvIds, IEnumerable`1<int> releaseEnvDefIds, string runTitle, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public HttpClient get_HttpClient();
    protected Task`1<T> SendAsync(HttpMethod method, Guid locationId, object routeValues, ApiResourceVersion version, HttpContent content, IEnumerable`1<KeyValuePair`2<string, string>> queryParameters, object userState, CancellationToken cancellationToken, Func`3<HttpResponseMessage, CancellationToken, Task`1<T>> processResponse);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClient/<SendAsync>d__31`1")]
protected Task`1<T> SendAsync(HttpMethod method, IEnumerable`1<KeyValuePair`2<string, string>> additionalHeaders, Guid locationId, object routeValues, ApiResourceVersion version, HttpContent content, IEnumerable`1<KeyValuePair`2<string, string>> queryParameters, object userState, CancellationToken cancellationToken, Func`3<HttpResponseMessage, CancellationToken, Task`1<T>> processResponse);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClient/<SendAsync>d__32`1")]
protected Task`1<T> SendAsync(HttpRequestMessage message, object userState, CancellationToken cancellationToken, Func`3<HttpResponseMessage, CancellationToken, Task`1<T>> processResponse);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClient/<GetPagedList>d__33`1")]
protected Task`1<IPagedList`1<T>> GetPagedList(HttpResponseMessage responseMessage, CancellationToken cancellationToken);
    protected string GetContinuationToken(HttpResponseMessage responseMessage);
    protected virtual IDictionary`2<string, Type> get_TranslatedExceptions();
}
[ResourceAreaAttribute("C83EAF52-EDF3-4034-AE11-17D38F25404C")]
public abstract class Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase : TestResultsCompatHttpClientBase {
    public TestResultsHttpClientBase(Uri baseUrl, VssCredentials credentials);
    public TestResultsHttpClientBase(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings);
    public TestResultsHttpClientBase(Uri baseUrl, VssCredentials credentials, DelegatingHandler[] handlers);
    public TestResultsHttpClientBase(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings, DelegatingHandler[] handlers);
    public TestResultsHttpClientBase(Uri baseUrl, HttpMessageHandler pipeline, bool disposeHandler);
    public virtual Task`1<TestAttachmentReference> CreateTestIterationResultAttachmentAsync(TestAttachmentRequestModel attachmentRequestModel, string project, int runId, int testCaseResultId, int iterationId, string actionPath, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestAttachmentReference> CreateTestIterationResultAttachmentAsync(TestAttachmentRequestModel attachmentRequestModel, Guid project, int runId, int testCaseResultId, int iterationId, string actionPath, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestAttachmentReference> CreateTestResultAttachmentAsync(TestAttachmentRequestModel attachmentRequestModel, string project, int runId, int testCaseResultId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestAttachmentReference> CreateTestResultAttachmentAsync(TestAttachmentRequestModel attachmentRequestModel, Guid project, int runId, int testCaseResultId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestAttachmentReference> CreateTestSubResultAttachmentAsync(TestAttachmentRequestModel attachmentRequestModel, string project, int runId, int testCaseResultId, int testSubResultId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestAttachmentReference> CreateTestSubResultAttachmentAsync(TestAttachmentRequestModel attachmentRequestModel, Guid project, int runId, int testCaseResultId, int testSubResultId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<DeleteTestResultAttachmentAsync>d__11")]
public virtual Task DeleteTestResultAttachmentAsync(string project, int runId, int testCaseResultId, int attachmentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<DeleteTestResultAttachmentAsync>d__12")]
public virtual Task DeleteTestResultAttachmentAsync(Guid project, int runId, int testCaseResultId, int attachmentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<GetTestIterationAttachmentContentAsync>d__13")]
public virtual Task`1<Stream> GetTestIterationAttachmentContentAsync(string project, int runId, int testCaseResultId, int attachmentId, int iterationId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<GetTestIterationAttachmentContentAsync>d__14")]
public virtual Task`1<Stream> GetTestIterationAttachmentContentAsync(Guid project, int runId, int testCaseResultId, int attachmentId, int iterationId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<GetTestIterationAttachmentZipAsync>d__15")]
public virtual Task`1<Stream> GetTestIterationAttachmentZipAsync(string project, int runId, int testCaseResultId, int attachmentId, int iterationId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<GetTestIterationAttachmentZipAsync>d__16")]
public virtual Task`1<Stream> GetTestIterationAttachmentZipAsync(Guid project, int runId, int testCaseResultId, int attachmentId, int iterationId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<GetTestResultAttachmentContentAsync>d__17")]
public virtual Task`1<Stream> GetTestResultAttachmentContentAsync(string project, int runId, int testCaseResultId, int attachmentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<GetTestResultAttachmentContentAsync>d__18")]
public virtual Task`1<Stream> GetTestResultAttachmentContentAsync(Guid project, int runId, int testCaseResultId, int attachmentId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestAttachment>> GetTestResultAttachmentsAsync(string project, int runId, int testCaseResultId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestAttachment>> GetTestResultAttachmentsAsync(Guid project, int runId, int testCaseResultId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<GetTestResultAttachmentZipAsync>d__21")]
public virtual Task`1<Stream> GetTestResultAttachmentZipAsync(string project, int runId, int testCaseResultId, int attachmentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<GetTestResultAttachmentZipAsync>d__22")]
public virtual Task`1<Stream> GetTestResultAttachmentZipAsync(Guid project, int runId, int testCaseResultId, int attachmentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<GetTestSubResultAttachmentContentAsync>d__23")]
public virtual Task`1<Stream> GetTestSubResultAttachmentContentAsync(string project, int runId, int testCaseResultId, int attachmentId, int testSubResultId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<GetTestSubResultAttachmentContentAsync>d__24")]
public virtual Task`1<Stream> GetTestSubResultAttachmentContentAsync(Guid project, int runId, int testCaseResultId, int attachmentId, int testSubResultId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestAttachment>> GetTestSubResultAttachmentsAsync(string project, int runId, int testCaseResultId, int testSubResultId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestAttachment>> GetTestSubResultAttachmentsAsync(Guid project, int runId, int testCaseResultId, int testSubResultId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<GetTestSubResultAttachmentZipAsync>d__27")]
public virtual Task`1<Stream> GetTestSubResultAttachmentZipAsync(string project, int runId, int testCaseResultId, int attachmentId, int testSubResultId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<GetTestSubResultAttachmentZipAsync>d__28")]
public virtual Task`1<Stream> GetTestSubResultAttachmentZipAsync(Guid project, int runId, int testCaseResultId, int attachmentId, int testSubResultId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestAttachmentReference> CreateTestRunAttachmentAsync(TestAttachmentRequestModel attachmentRequestModel, string project, int runId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestAttachmentReference> CreateTestRunAttachmentAsync(TestAttachmentRequestModel attachmentRequestModel, Guid project, int runId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<DeleteTestRunAttachmentAsync>d__31")]
public virtual Task DeleteTestRunAttachmentAsync(string project, int runId, int attachmentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<DeleteTestRunAttachmentAsync>d__32")]
public virtual Task DeleteTestRunAttachmentAsync(Guid project, int runId, int attachmentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<GetTestRunAttachmentContentAsync>d__33")]
public virtual Task`1<Stream> GetTestRunAttachmentContentAsync(string project, int runId, int attachmentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<GetTestRunAttachmentContentAsync>d__34")]
public virtual Task`1<Stream> GetTestRunAttachmentContentAsync(Guid project, int runId, int attachmentId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestAttachment>> GetTestRunAttachmentsAsync(string project, int runId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestAttachment>> GetTestRunAttachmentsAsync(Guid project, int runId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<GetTestRunAttachmentZipAsync>d__37")]
public virtual Task`1<Stream> GetTestRunAttachmentZipAsync(string project, int runId, int attachmentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<GetTestRunAttachmentZipAsync>d__38")]
public virtual Task`1<Stream> GetTestRunAttachmentZipAsync(Guid project, int runId, int attachmentId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<WorkItemReference>> GetBugsLinkedToTestResultAsync(string project, int runId, int testCaseResultId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<WorkItemReference>> GetBugsLinkedToTestResultAsync(Guid project, int runId, int testCaseResultId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<SourceViewBuildCoverage>> FetchSourceCodeCoverageReportAsync(string project, int buildId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<SourceViewBuildCoverage>> FetchSourceCodeCoverageReportAsync(Guid project, int buildId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<BuildCoverage>> GetBuildCodeCoverageAsync(string project, int buildId, int flags, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<BuildCoverage>> GetBuildCodeCoverageAsync(Guid project, int buildId, int flags, object userState, CancellationToken cancellationToken);
    public virtual Task`1<CodeCoverageSummary> GetCodeCoverageSummaryAsync(string project, int buildId, Nullable`1<int> deltaBuildId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<CodeCoverageSummary> GetCodeCoverageSummaryAsync(Guid project, int buildId, Nullable`1<int> deltaBuildId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<CodeCoverageSummary> UpdateCodeCoverageSummaryAsync(string project, int buildId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<CodeCoverageSummary> UpdateCodeCoverageSummaryAsync(Guid project, int buildId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<UpdateCodeCoverageSummaryAsync>d__49")]
public virtual Task UpdateCodeCoverageSummaryAsync(CodeCoverageData coverageData, string project, int buildId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<UpdateCodeCoverageSummaryAsync>d__50")]
public virtual Task UpdateCodeCoverageSummaryAsync(CodeCoverageData coverageData, Guid project, int buildId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestRunCoverage>> GetTestRunCodeCoverageAsync(string project, int runId, int flags, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestRunCoverage>> GetTestRunCodeCoverageAsync(Guid project, int runId, int flags, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<CustomTestFieldDefinition>> AddCustomFieldsAsync(CustomTestFieldDefinition[] newFields, string project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<CustomTestFieldDefinition>> AddCustomFieldsAsync(CustomTestFieldDefinition[] newFields, Guid project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<CustomTestFieldDefinition>> QueryCustomFieldsAsync(string project, CustomTestFieldScope scopeFilter, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<CustomTestFieldDefinition>> QueryCustomFieldsAsync(Guid project, CustomTestFieldScope scopeFilter, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<DeleteCustomFieldByIdAsync>d__57")]
public virtual Task DeleteCustomFieldByIdAsync(string project, int testExtensionFieldId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<DeleteCustomFieldByIdAsync>d__58")]
public virtual Task DeleteCustomFieldByIdAsync(Guid project, int testExtensionFieldId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<CustomTestFieldDefinition> UpdateCustomFieldAsync(CustomTestFieldUpdateDefinition updateCustomTestField, string project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<CustomTestFieldDefinition> UpdateCustomFieldAsync(CustomTestFieldUpdateDefinition updateCustomTestField, Guid project, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<GetFileLevelCodeCoverageAsync>d__61")]
public virtual Task`1<Stream> GetFileLevelCodeCoverageAsync(FileCoverageRequest fileCoverageRequest, string project, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<GetFileLevelCodeCoverageAsync>d__62")]
public virtual Task`1<Stream> GetFileLevelCodeCoverageAsync(FileCoverageRequest fileCoverageRequest, Guid project, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<TestCaseResult>> GetFlakyTestResultsByBuildDefinitionIdAsync(string project, int buildDefinitionId, DateTime minBuildCreatedDate, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<TestCaseResult>> GetFlakyTestResultsByBuildDefinitionIdAsync(Guid project, int buildDefinitionId, DateTime minBuildCreatedDate, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<TestCaseResult>> GetFlakyTestResultsByTestRunAsync(string project, int runId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<TestCaseResult>> GetFlakyTestResultsByTestRunAsync(Guid project, int runId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultHistory> QueryTestResultHistoryAsync(ResultsFilter filter, string project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultHistory> QueryTestResultHistoryAsync(ResultsFilter filter, Guid project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestMessageLogDetails>> GetTestRunMessageLogsAsync(string project, int runId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestMessageLogDetails>> GetTestRunMessageLogsAsync(Guid project, int runId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PipelineTestMetrics> GetTestPipelineMetricsAsync(string project, int pipelineId, string stageName, string phaseName, string jobName, IEnumerable`1<Metrics> metricNames, Nullable`1<bool> groupByNode, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PipelineTestMetrics> GetTestPipelineMetricsAsync(Guid project, int pipelineId, string stageName, string phaseName, string jobName, IEnumerable`1<Metrics> metricNames, Nullable`1<bool> groupByNode, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultsDetails> GetTestResultDetailsForBuildAsync(string project, int buildId, string publishContext, string groupBy, string filter, string orderby, Nullable`1<bool> shouldIncludeResults, Nullable`1<bool> queryRunSummaryForInProgress, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultsDetails> GetTestResultDetailsForBuildAsync(Guid project, int buildId, string publishContext, string groupBy, string filter, string orderby, Nullable`1<bool> shouldIncludeResults, Nullable`1<bool> queryRunSummaryForInProgress, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultsDetails> GetTestResultDetailsForReleaseAsync(string project, int releaseId, int releaseEnvId, string publishContext, string groupBy, string filter, string orderby, Nullable`1<bool> shouldIncludeResults, Nullable`1<bool> queryRunSummaryForInProgress, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultsDetails> GetTestResultDetailsForReleaseAsync(Guid project, int releaseId, int releaseEnvId, string publishContext, string groupBy, string filter, string orderby, Nullable`1<bool> shouldIncludeResults, Nullable`1<bool> queryRunSummaryForInProgress, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultDocument> PublishTestResultDocumentAsync(TestResultDocument document, string project, int runId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultDocument> PublishTestResultDocumentAsync(TestResultDocument document, Guid project, int runId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PagedList`1<FieldDetailsForTestResults>> GetResultGroupsByBuildAsync(string project, int buildId, string publishContext, IEnumerable`1<string> fields, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PagedList`1<FieldDetailsForTestResults>> GetResultGroupsByBuildAsync(Guid project, int buildId, string publishContext, IEnumerable`1<string> fields, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PagedList`1<FieldDetailsForTestResults>> GetResultGroupsByReleaseAsync(string project, int releaseId, string publishContext, Nullable`1<int> releaseEnvId, IEnumerable`1<string> fields, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PagedList`1<FieldDetailsForTestResults>> GetResultGroupsByReleaseAsync(Guid project, int releaseId, string publishContext, Nullable`1<int> releaseEnvId, IEnumerable`1<string> fields, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestResultMetaData>> QueryTestResultsMetaDataAsync(IEnumerable`1<string> testCaseReferenceIds, string project, Nullable`1<ResultMetaDataDetails> detailsToInclude, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestResultMetaData>> QueryTestResultsMetaDataAsync(IEnumerable`1<string> testCaseReferenceIds, Guid project, Nullable`1<ResultMetaDataDetails> detailsToInclude, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultMetaData> UpdateTestResultsMetaDataAsync(TestResultMetaDataUpdateInput testResultMetaDataUpdateInput, string project, int testCaseReferenceId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultMetaData> UpdateTestResultsMetaDataAsync(TestResultMetaDataUpdateInput testResultMetaDataUpdateInput, Guid project, int testCaseReferenceId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultsQuery> GetTestResultsByQueryAsync(TestResultsQuery query, string project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultsQuery> GetTestResultsByQueryAsync(TestResultsQuery query, Guid project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestCaseResult>> GetTestResultsByQueryWiqlAsync(QueryModel queryModel, string project, Nullable`1<bool> includeResultDetails, Nullable`1<bool> includeIterationDetails, Nullable`1<int> skip, Nullable`1<int> top, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestCaseResult>> GetTestResultsByQueryWiqlAsync(QueryModel queryModel, Guid project, Nullable`1<bool> includeResultDetails, Nullable`1<bool> includeIterationDetails, Nullable`1<int> skip, Nullable`1<int> top, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestCaseResult>> AddTestResultsToTestRunAsync(TestCaseResult[] results, string project, int runId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestCaseResult>> AddTestResultsToTestRunAsync(TestCaseResult[] results, Guid project, int runId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestCaseResult> GetTestResultByIdAsync(string project, int runId, int testResultId, Nullable`1<ResultDetails> detailsToInclude, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestCaseResult> GetTestResultByIdAsync(Guid project, int runId, int testResultId, Nullable`1<ResultDetails> detailsToInclude, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestCaseResult>> GetTestResultsAsync(string project, int runId, Nullable`1<ResultDetails> detailsToInclude, Nullable`1<int> skip, Nullable`1<int> top, IEnumerable`1<TestOutcome> outcomes, Nullable`1<bool> newTestsOnly, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestCaseResult>> GetTestResultsAsync(Guid project, int runId, Nullable`1<ResultDetails> detailsToInclude, Nullable`1<int> skip, Nullable`1<int> top, IEnumerable`1<TestOutcome> outcomes, Nullable`1<bool> newTestsOnly, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestCaseResult>> UpdateTestResultsAsync(TestCaseResult[] results, string project, int runId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestCaseResult>> UpdateTestResultsAsync(TestCaseResult[] results, Guid project, int runId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PagedList`1<ShallowTestCaseResult>> GetTestResultsByBuildAsync(string project, int buildId, string publishContext, IEnumerable`1<TestOutcome> outcomes, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PagedList`1<ShallowTestCaseResult>> GetTestResultsByBuildAsync(Guid project, int buildId, string publishContext, IEnumerable`1<TestOutcome> outcomes, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PagedList`1<ShallowTestCaseResult>> GetTestResultsByPipelineAsync(string project, int pipelineId, string stageName, string phaseName, string jobName, IEnumerable`1<TestOutcome> outcomes, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PagedList`1<ShallowTestCaseResult>> GetTestResultsByPipelineAsync(Guid project, int pipelineId, string stageName, string phaseName, string jobName, IEnumerable`1<TestOutcome> outcomes, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PagedList`1<ShallowTestCaseResult>> GetTestResultsByReleaseAsync(string project, int releaseId, Nullable`1<int> releaseEnvid, string publishContext, IEnumerable`1<TestOutcome> outcomes, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PagedList`1<ShallowTestCaseResult>> GetTestResultsByReleaseAsync(Guid project, int releaseId, Nullable`1<int> releaseEnvid, string publishContext, IEnumerable`1<TestOutcome> outcomes, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultsDetails> TestResultsGroupDetailsAsync(string project, int pipelineId, string stageName, string phaseName, string jobName, Nullable`1<bool> shouldIncludeFailedAndAbortedResults, Nullable`1<bool> queryGroupSummaryForInProgress, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultsDetails> TestResultsGroupDetailsAsync(Guid project, int pipelineId, string stageName, string phaseName, string jobName, Nullable`1<bool> shouldIncludeFailedAndAbortedResults, Nullable`1<bool> queryGroupSummaryForInProgress, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultSummary> QueryTestResultsReportForBuildAsync(string project, int buildId, string publishContext, Nullable`1<bool> includeFailureDetails, BuildReference buildToCompare, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultSummary> QueryTestResultsReportForBuildAsync(Guid project, int buildId, string publishContext, Nullable`1<bool> includeFailureDetails, BuildReference buildToCompare, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultSummary> QueryTestResultsReportForPipelineAsync(string project, int pipelineId, string stageName, string phaseName, string jobName, Nullable`1<bool> includeFailureDetails, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultSummary> QueryTestResultsReportForPipelineAsync(Guid project, int pipelineId, string stageName, string phaseName, string jobName, Nullable`1<bool> includeFailureDetails, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultSummary> QueryTestResultsReportForReleaseAsync(string project, int releaseId, int releaseEnvId, string publishContext, Nullable`1<bool> includeFailureDetails, ReleaseReference releaseToCompare, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultSummary> QueryTestResultsReportForReleaseAsync(Guid project, int releaseId, int releaseEnvId, string publishContext, Nullable`1<bool> includeFailureDetails, ReleaseReference releaseToCompare, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestResultSummary>> QueryTestResultsSummaryForReleasesAsync(IEnumerable`1<ReleaseReference> releases, string project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestResultSummary>> QueryTestResultsSummaryForReleasesAsync(IEnumerable`1<ReleaseReference> releases, Guid project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestSummaryForWorkItem>> QueryTestSummaryByRequirementAsync(TestResultsContext resultsContext, string project, IEnumerable`1<int> workItemIds, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestSummaryForWorkItem>> QueryTestSummaryByRequirementAsync(TestResultsContext resultsContext, Guid project, IEnumerable`1<int> workItemIds, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<AggregatedDataForResultTrend>> QueryResultTrendForBuildAsync(TestResultTrendFilter filter, string project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<AggregatedDataForResultTrend>> QueryResultTrendForBuildAsync(TestResultTrendFilter filter, Guid project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<AggregatedDataForResultTrend>> QueryResultTrendForReleaseAsync(TestResultTrendFilter filter, string project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<AggregatedDataForResultTrend>> QueryResultTrendForReleaseAsync(TestResultTrendFilter filter, Guid project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestRun> CreateTestRunAsync(RunCreateModel testRun, string project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestRun> CreateTestRunAsync(RunCreateModel testRun, Guid project, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<DeleteTestRunAsync>d__123")]
public virtual Task DeleteTestRunAsync(string project, int runId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<DeleteTestRunAsync>d__124")]
public virtual Task DeleteTestRunAsync(Guid project, int runId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestRun> GetTestRunByIdAsync(string project, int runId, Nullable`1<bool> includeDetails, Nullable`1<bool> includeTags, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestRun> GetTestRunByIdAsync(Guid project, int runId, Nullable`1<bool> includeDetails, Nullable`1<bool> includeTags, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestRun>> GetTestRunsAsync(string project, string buildUri, string owner, string tmiRunId, Nullable`1<int> planId, Nullable`1<bool> includeRunDetails, Nullable`1<bool> automated, Nullable`1<int> skip, Nullable`1<int> top, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestRun>> GetTestRunsAsync(Guid project, string buildUri, string owner, string tmiRunId, Nullable`1<int> planId, Nullable`1<bool> includeRunDetails, Nullable`1<bool> automated, Nullable`1<int> skip, Nullable`1<int> top, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PagedList`1<TestRun>> QueryTestRunsAsync(string project, DateTime minLastUpdatedDate, DateTime maxLastUpdatedDate, Nullable`1<TestRunState> state, IEnumerable`1<int> planIds, Nullable`1<bool> isAutomated, Nullable`1<TestRunPublishContext> publishContext, IEnumerable`1<int> buildIds, IEnumerable`1<int> buildDefIds, string branchName, IEnumerable`1<int> releaseIds, IEnumerable`1<int> releaseDefIds, IEnumerable`1<int> releaseEnvIds, IEnumerable`1<int> releaseEnvDefIds, string runTitle, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PagedList`1<TestRun>> QueryTestRunsAsync(Guid project, DateTime minLastUpdatedDate, DateTime maxLastUpdatedDate, Nullable`1<TestRunState> state, IEnumerable`1<int> planIds, Nullable`1<bool> isAutomated, Nullable`1<TestRunPublishContext> publishContext, IEnumerable`1<int> buildIds, IEnumerable`1<int> buildDefIds, string branchName, IEnumerable`1<int> releaseIds, IEnumerable`1<int> releaseDefIds, IEnumerable`1<int> releaseEnvIds, IEnumerable`1<int> releaseEnvDefIds, string runTitle, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestRun> UpdateTestRunAsync(RunUpdateModel runUpdateModel, string project, int runId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestRun> UpdateTestRunAsync(RunUpdateModel runUpdateModel, Guid project, int runId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestRunStatistic> GetTestRunSummaryByOutcomeAsync(string project, int runId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestRunStatistic> GetTestRunSummaryByOutcomeAsync(Guid project, int runId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultsSettings> GetTestResultsSettingsAsync(string project, Nullable`1<TestResultsSettingsType> settingsType, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultsSettings> GetTestResultsSettingsAsync(Guid project, Nullable`1<TestResultsSettingsType> settingsType, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultsSettings> UpdatePipelinesTestSettingsAsync(TestResultsUpdateSettings testResultsUpdateSettings, string project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultsSettings> UpdatePipelinesTestSettingsAsync(TestResultsUpdateSettings testResultsUpdateSettings, Guid project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestCaseResult>> GetSimilarTestResultsAsync(string project, int runId, int testResultId, int testSubResultId, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestCaseResult>> GetSimilarTestResultsAsync(Guid project, int runId, int testResultId, int testSubResultId, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestRunStatistic> GetTestRunStatisticsAsync(string project, int runId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestRunStatistic> GetTestRunStatisticsAsync(Guid project, int runId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<string> GetCoverageStatusBadgeAsync(string project, string definition, string branchName, string label, object userState, CancellationToken cancellationToken);
    public virtual Task`1<string> GetCoverageStatusBadgeAsync(Guid project, string definition, string branchName, string label, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestTag>> GetTestTagsForBuildAsync(string project, int buildId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestTag>> GetTestTagsForBuildAsync(Guid project, int buildId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestTag>> GetTestTagsForReleaseAsync(string project, int releaseId, int releaseEnvId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestTag>> GetTestTagsForReleaseAsync(Guid project, int releaseId, int releaseEnvId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestTag>> UpdateTestRunTagsAsync(TestTagsUpdateModel testTagsUpdateModel, string project, int runId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestTag>> UpdateTestRunTagsAsync(TestTagsUpdateModel testTagsUpdateModel, Guid project, int runId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestTagSummary> GetTestTagSummaryForBuildAsync(string project, int buildId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestTagSummary> GetTestTagSummaryForBuildAsync(Guid project, int buildId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestTagSummary> GetTestTagSummaryForReleaseAsync(string project, int releaseId, int releaseEnvId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestTagSummary> GetTestTagSummaryForReleaseAsync(Guid project, int releaseId, int releaseEnvId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<CreateBuildAttachmentInLogStoreAsync>d__155")]
public virtual Task CreateBuildAttachmentInLogStoreAsync(TestAttachmentRequestModel attachmentRequestModel, string project, int buildId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<CreateBuildAttachmentInLogStoreAsync>d__156")]
public virtual Task CreateBuildAttachmentInLogStoreAsync(TestAttachmentRequestModel attachmentRequestModel, Guid project, int buildId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestLogStoreAttachmentReference> CreateTestRunLogStoreAttachmentAsync(TestAttachmentRequestModel attachmentRequestModel, string project, int runId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestLogStoreAttachmentReference> CreateTestRunLogStoreAttachmentAsync(TestAttachmentRequestModel attachmentRequestModel, Guid project, int runId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<DeleteTestRunLogStoreAttachmentAsync>d__159")]
public virtual Task DeleteTestRunLogStoreAttachmentAsync(string project, int runId, string filename, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<DeleteTestRunLogStoreAttachmentAsync>d__160")]
public virtual Task DeleteTestRunLogStoreAttachmentAsync(Guid project, int runId, string filename, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<GetTestRunLogStoreAttachmentContentAsync>d__161")]
public virtual Task`1<Stream> GetTestRunLogStoreAttachmentContentAsync(string project, int runId, string filename, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<GetTestRunLogStoreAttachmentContentAsync>d__162")]
public virtual Task`1<Stream> GetTestRunLogStoreAttachmentContentAsync(Guid project, int runId, string filename, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestLogStoreAttachment>> GetTestRunLogStoreAttachmentsAsync(string project, int runId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestLogStoreAttachment>> GetTestRunLogStoreAttachmentsAsync(Guid project, int runId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<GetTestRunLogStoreAttachmentZipAsync>d__165")]
public virtual Task`1<Stream> GetTestRunLogStoreAttachmentZipAsync(string project, int runId, string filename, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<GetTestRunLogStoreAttachmentZipAsync>d__166")]
public virtual Task`1<Stream> GetTestRunLogStoreAttachmentZipAsync(Guid project, int runId, string filename, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultFailureType> CreateFailureTypeAsync(TestResultFailureTypeRequestModel testResultFailureType, string project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestResultFailureType> CreateFailureTypeAsync(TestResultFailureTypeRequestModel testResultFailureType, Guid project, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<DeleteFailureTypeAsync>d__169")]
public virtual Task DeleteFailureTypeAsync(string project, int failureTypeId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<DeleteFailureTypeAsync>d__170")]
public virtual Task DeleteFailureTypeAsync(Guid project, int failureTypeId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestResultFailureType>> GetFailureTypesAsync(string project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TestResultFailureType>> GetFailureTypesAsync(Guid project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestHistoryQuery> QueryTestHistoryAsync(TestHistoryQuery filter, string project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestHistoryQuery> QueryTestHistoryAsync(TestHistoryQuery filter, Guid project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PagedList`1<TestLog>> GetTestLogsForBuildAsync(string project, int buildId, TestLogType type, string directoryPath, string fileNamePrefix, Nullable`1<bool> fetchMetaData, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PagedList`1<TestLog>> GetTestLogsForBuildAsync(Guid project, int buildId, TestLogType type, string directoryPath, string fileNamePrefix, Nullable`1<bool> fetchMetaData, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PagedList`1<TestLog>> GetTestResultLogsAsync(string project, int runId, int resultId, TestLogType type, string directoryPath, string fileNamePrefix, Nullable`1<bool> fetchMetaData, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PagedList`1<TestLog>> GetTestResultLogsAsync(Guid project, int runId, int resultId, TestLogType type, string directoryPath, string fileNamePrefix, Nullable`1<bool> fetchMetaData, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PagedList`1<TestLog>> GetTestSubResultLogsAsync(string project, int runId, int resultId, int subResultId, TestLogType type, string directoryPath, string fileNamePrefix, Nullable`1<bool> fetchMetaData, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PagedList`1<TestLog>> GetTestSubResultLogsAsync(Guid project, int runId, int resultId, int subResultId, TestLogType type, string directoryPath, string fileNamePrefix, Nullable`1<bool> fetchMetaData, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PagedList`1<TestLog>> GetTestRunLogsAsync(string project, int runId, TestLogType type, string directoryPath, string fileNamePrefix, Nullable`1<bool> fetchMetaData, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PagedList`1<TestLog>> GetTestRunLogsAsync(Guid project, int runId, TestLogType type, string directoryPath, string fileNamePrefix, Nullable`1<bool> fetchMetaData, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestLogStoreEndpointDetails> GetTestLogStoreEndpointDetailsForBuildLogAsync(string project, int build, TestLogType type, string filePath, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestLogStoreEndpointDetails> GetTestLogStoreEndpointDetailsForBuildLogAsync(Guid project, int build, TestLogType type, string filePath, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestLogStoreEndpointDetails> TestLogStoreEndpointDetailsForBuildAsync(string project, int buildId, TestLogStoreOperationType testLogStoreOperationType, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestLogStoreEndpointDetails> TestLogStoreEndpointDetailsForBuildAsync(Guid project, int buildId, TestLogStoreOperationType testLogStoreOperationType, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestLogStoreEndpointDetails> GetTestLogStoreEndpointDetailsForResultLogAsync(string project, int runId, int resultId, TestLogType type, string filePath, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestLogStoreEndpointDetails> GetTestLogStoreEndpointDetailsForResultLogAsync(Guid project, int runId, int resultId, TestLogType type, string filePath, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestLogStoreEndpointDetails> GetTestLogStoreEndpointDetailsForSubResultLogAsync(string project, int runId, int resultId, int subResultId, TestLogType type, string filePath, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestLogStoreEndpointDetails> GetTestLogStoreEndpointDetailsForSubResultLogAsync(Guid project, int runId, int resultId, int subResultId, TestLogType type, string filePath, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestLogStoreEndpointDetails> TestLogStoreEndpointDetailsForResultAsync(string project, int runId, int resultId, int subResultId, string filePath, TestLogType type, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestLogStoreEndpointDetails> TestLogStoreEndpointDetailsForResultAsync(Guid project, int runId, int resultId, int subResultId, string filePath, TestLogType type, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestLogStoreEndpointDetails> GetTestLogStoreEndpointDetailsForRunLogAsync(string project, int runId, TestLogType type, string filePath, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestLogStoreEndpointDetails> GetTestLogStoreEndpointDetailsForRunLogAsync(Guid project, int runId, TestLogType type, string filePath, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestLogStoreEndpointDetails> TestLogStoreEndpointDetailsForRunAsync(string project, int runId, TestLogStoreOperationType testLogStoreOperationType, string filePath, Nullable`1<TestLogType> type, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestLogStoreEndpointDetails> TestLogStoreEndpointDetailsForRunAsync(Guid project, int runId, TestLogStoreOperationType testLogStoreOperationType, string filePath, Nullable`1<TestLogType> type, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<long> CreateTestSessionAsync(TestResultsSession session, string project, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<long> CreateTestSessionAsync(TestResultsSession session, Guid project, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<TestResultsSession>> GetTestSessionAsync(string project, int buildId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<TestResultsSession>> GetTestSessionAsync(Guid project, int buildId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<Layout>> GetTestSessionLayoutAsync(string project, Guid sessionId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<Layout>> GetTestSessionLayoutAsync(Guid project, Guid sessionId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<AnalysisFailureGroupReturn>> CreateAnalysisAsync(IEnumerable`1<TestSessionAnalysis> analysis, string project, long sessionId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<AnalysisFailureGroupReturn>> CreateAnalysisAsync(IEnumerable`1<TestSessionAnalysis> analysis, Guid project, long sessionId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<CreateEnvironmentAsync>d__205")]
[EditorBrowsableAttribute("1")]
public virtual Task CreateEnvironmentAsync(IEnumerable`1<TestSessionEnvironment> environments, string project, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<CreateEnvironmentAsync>d__206")]
[EditorBrowsableAttribute("1")]
public virtual Task CreateEnvironmentAsync(IEnumerable`1<TestSessionEnvironment> environments, Guid project, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<CreateEnvironmentAndMachineAsync>d__207")]
[EditorBrowsableAttribute("1")]
public virtual Task CreateEnvironmentAndMachineAsync(SessionEnvironmentAndMachine sessionEnvironmentAndMachine, string project, long sessionId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<CreateEnvironmentAndMachineAsync>d__208")]
[EditorBrowsableAttribute("1")]
public virtual Task CreateEnvironmentAndMachineAsync(SessionEnvironmentAndMachine sessionEnvironmentAndMachine, Guid project, long sessionId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<Layout>> GetTestSessionLayoutBySessionIdAsync(string project, long sessionId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<Layout>> GetTestSessionLayoutBySessionIdAsync(Guid project, long sessionId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<long>> CreateNotificationAsync(IEnumerable`1<TestSessionNotification> notifications, string project, long sessionId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<long>> CreateNotificationAsync(IEnumerable`1<TestSessionNotification> notifications, Guid project, long sessionId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<TestSessionNotification>> GetSessionNotificationsAsync(string project, long sessionId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<TestSessionNotification>> GetSessionNotificationsAsync(Guid project, long sessionId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<TestCaseResult>> AddTestResultsToTestRunSessionAsync(TestCaseResult[] results, string project, int runId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<TestCaseResult>> AddTestResultsToTestRunSessionAsync(TestCaseResult[] results, Guid project, int runId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<TestCaseResult>> GetTestSessionResultsAsync(string project, int runId, Nullable`1<ResultDetails> detailsToInclude, Nullable`1<int> skip, Nullable`1<int> top, IEnumerable`1<TestOutcome> outcomes, Nullable`1<bool> newTestsOnly, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<TestCaseResult>> GetTestSessionResultsAsync(Guid project, int runId, Nullable`1<ResultDetails> detailsToInclude, Nullable`1<int> skip, Nullable`1<int> top, IEnumerable`1<TestOutcome> outcomes, Nullable`1<bool> newTestsOnly, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<int>> UpdateTestResultsToTestRunSessionAsync(TestCaseResult[] results, string project, int runId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<int>> UpdateTestResultsToTestRunSessionAsync(TestCaseResult[] results, Guid project, int runId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<CreateTestResultMachinesAsync>d__221")]
[EditorBrowsableAttribute("1")]
public virtual Task CreateTestResultMachinesAsync(IEnumerable`1<TestResultMachine> testResultMachines, string project, int runId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<CreateTestResultMachinesAsync>d__222")]
[EditorBrowsableAttribute("1")]
public virtual Task CreateTestResultMachinesAsync(IEnumerable`1<TestResultMachine> testResultMachines, Guid project, int runId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<TestResultMachine>> GetTestResultMachinesAsync(string project, int runId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<TestResultMachine>> GetTestResultMachinesAsync(Guid project, int runId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<int>> GetTestRunsBySessionIdAsync(string project, long sessionId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<int>> GetTestRunsBySessionIdAsync(Guid project, long sessionId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<int> CreateTestSettingsAsync(TestSettings testSettings, string project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<int> CreateTestSettingsAsync(TestSettings testSettings, Guid project, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<DeleteTestSettingsAsync>d__229")]
public virtual Task DeleteTestSettingsAsync(string project, int testSettingsId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsHttpClientBase/<DeleteTestSettingsAsync>d__230")]
public virtual Task DeleteTestSettingsAsync(Guid project, int testSettingsId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestSettings> GetTestSettingsByIdAsync(string project, int testSettingsId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestSettings> GetTestSettingsByIdAsync(Guid project, int testSettingsId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<WorkItemToTestLinks> AddWorkItemToTestLinksAsync(WorkItemToTestLinks workItemToTestLinks, string project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<WorkItemToTestLinks> AddWorkItemToTestLinksAsync(WorkItemToTestLinks workItemToTestLinks, Guid project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<bool> DeleteTestMethodToWorkItemLinkAsync(string project, string testName, int workItemId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<bool> DeleteTestMethodToWorkItemLinkAsync(Guid project, string testName, int workItemId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestToWorkItemLinks> QueryTestMethodLinkedWorkItemsAsync(string project, string testName, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TestToWorkItemLinks> QueryTestMethodLinkedWorkItemsAsync(Guid project, string testName, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<WorkItemReference>> GetTestResultWorkItemsByIdAsync(string project, int runId, int testCaseResultId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<WorkItemReference>> GetTestResultWorkItemsByIdAsync(Guid project, int runId, int testCaseResultId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<WorkItemReference>> QueryTestResultWorkItemsAsync(string project, string workItemCategory, string automatedTestName, Nullable`1<int> testCaseId, Nullable`1<DateTime> maxCompleteDate, Nullable`1<int> days, Nullable`1<int> workItemCount, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<WorkItemReference>> QueryTestResultWorkItemsAsync(Guid project, string workItemCategory, string automatedTestName, Nullable`1<int> testCaseId, Nullable`1<DateTime> maxCompleteDate, Nullable`1<int> days, Nullable`1<int> workItemCount, object userState, CancellationToken cancellationToken);
}
public static class Microsoft.VisualStudio.Services.TestResults.WebApi.TestResultsResourceIds : object {
    public static string AreaId;
    public static string AreaName;
    public static string TestResultResource;
    public static string TestResultLocationIdString;
    public static Guid TestResultLocation;
    public static string FlakyTestResultsResource;
    public static string FlakyTestResultByRunIdLocationIdString;
    public static Guid FlakyTestResultByRunIdLocation;
    public static string FlakyTestResultByBuildDefinitionIdLocationIdString;
    public static Guid FlakyTestResultByBuildDefinitionLocation;
    public static string TestRunResource;
    public static string TestRunLocationIdString;
    public static Guid TestRunLocation;
    public static string TestAttachmentsResource;
    public static string TestRunAttachmentsLocationIdString;
    public static Guid TestRunAttachmentsLocation;
    public static string TestResultAttachmentsLocationIdString;
    public static Guid TestResultAttachmentsLocation;
    public static string TestLogStoreAttachmentsResource;
    public static string TestRunLogStoreAttachmentsLocationIdString;
    public static Guid TestRunLogStoreAttachmentsLocation;
    public static string BuildAttachments;
    public static string BuildLogStoreAttachmentsLocationIdString;
    public static Guid BuildLogStoreAttachmentsLocation;
    public static string TestTagsResource;
    public static string TestTagsForRunLocationIdString;
    public static Guid TestTagsForRunLocation;
    public static string TestTagsForBuildOrReleaseLocationIdString;
    public static Guid TestTagsForBuildOrReleaseLocation;
    public static string TestSessionResource;
    public static string TestSessionLocationIdString;
    public static Guid TestSessionLocation;
    public static string TestSessionEnvironmentLocationIdString;
    public static Guid TestSessionEnvironmentLocation;
    public static string TestSessionEnvironmentAndMachineLocationIdString;
    public static Guid TestSessionEnvironmentAndMachineLocation;
    public static string TestSessionLayoutLocationIdString;
    public static Guid TestSessionLayoutLocation;
    public static string TestSessionNotificationLocationIdString;
    public static Guid TestSessionNotificationLocation;
    public static string TestSessionTestResultsLocationIdString;
    public static Guid TestSessionTestResultsLocation;
    public static string TestSessionAnalysisLocationIdString;
    public static Guid TestSessionAnalysisLocation;
    public static string TestSessionTestRunsLocationIdString;
    public static Guid TestSessionTestRunsLocation;
    public static string TestSessionTestResultMachinesLocationIdString;
    public static Guid TestSessionTestResultMachinesLocation;
    public static string TestExtensionFieldsResource;
    public static string TestExtensionFieldsProjectLocationIdString;
    public static Guid TestExtensionFieldsProject;
    public static string TestExtensionFieldsByFieldIdProjectLocationIdString;
    public static Guid TestExtensionFieldsByFieldIdProject;
    public static string TestTagSummaryResource;
    public static string TestTagSummaryForBuildOrReleaseLocationIdString;
    public static Guid TestTagSummaryForBuildOrReleaseLocation;
    public static string CodeCoverageResource;
    public static string TestRunCodeCoverageProjectLocationIdString;
    public static Guid TestRunCodeCoverageProject;
    public static string BuildCodeCoverageProjectLocationIdString;
    public static Guid BuildCodeCoverageProject;
    public static string BrowseCodeCoverageProjectLocationIdString;
    public static Guid BrowseCodeCoverageProject;
    public static string DownloadCodeCoverageProjectLocationIdString;
    public static Guid DownloadCodeCoverageProject;
    public static string FolderViewBuildCodeCoverageProjectLocationIdString;
    public static Guid FolderViewBuildCodeCoverageProject;
    public static string FileCoverageResource;
    public static string PRBuildFileLevelCoverageLocationIdString;
    public static Guid PRBuildFileLevelCoverage;
    public static string CoverageStatusBadgeResource;
    public static string CoverageStatusBadgeLocationIdString;
    public static Guid CoverageStatusBadgeLocationIdGuid;
    public static string TestSummaryReportForBuildResource;
    public static string TestSummaryReportForBuildLocationIdString;
    public static Guid TestSummaryReportForBuildLocation;
    public static string TestSummaryReportForReleaseResource;
    public static string TestSummaryReportForReleaseLocationIdString;
    public static Guid TestSummaryReportForReleaseLocation;
    public static string TestSummaryReportForPipelineResource;
    public static string TestSummaryReportForPipelineLocationIdString;
    public static Guid TestSummaryReportForPipelineLocation;
    public static string MetricsResource;
    public static string MetricsResourceLocationIdString;
    public static Guid MetricsResourceLocation;
    public static string TestResultDetailsForPipelineResource;
    public static string TestResultDetailsForPipelineLocationIdString;
    public static Guid TestResultDetailsForPipelineLocation;
    public static string TestResultDetailsForBuildResource;
    public static string TestResultDetailsForBuildLocationIdString;
    public static Guid TestResultDetailsForBuildLocation;
    public static string TestResultDetailsForReleaseResource;
    public static string TestResultDetailsForReleaseLocationIdString;
    public static Guid TestResultDetailsForReleaseLocation;
    public static string TestResultsAcrossRunsLocationIdString;
    public static Guid TestResultsAcrossRunsLocation;
    public static string TestArtifactsQueryResource;
    public static string TestResultsAcrossRunsOldLocationIdString;
    public static Guid TestResultsAcrossRunsOldLocation;
    public static string TestResolutionStateResource;
    public static string TestResolutionStateLocationIdString;
    public static Guid TestResolutionStateLocation;
    public static string TestFailureTypeResource;
    public static string TestFailureTypeLocationIdString;
    public static Guid TestFailureTypeLocation;
    public static string TestResultFailureTypeLocationIdString;
    public static Guid TestResultFailureTypeLocation;
    public static string TestSettings2Resource;
    public static string TestSettings2LocationIdString;
    public static Guid TestSettings2Location;
    public static string TestSettingsResource;
    public static string TestSettingsLocationIdString;
    public static Guid TestSettingsLocation;
    public static string TestResultTrendForBuildResource;
    public static string TestResultTrendForBuildLocationIdString;
    public static Guid TestResultTrendForBuildLocation;
    public static string TestResultTrendForReleaseResource;
    public static string TestResultTrendForReleaseLocationIdString;
    public static Guid TestResultTrendForReleaseLocation;
    public static string TestResultHistoryResource;
    public static string TestResultHistoryLocationIdString;
    public static Guid TestResultHistoryLocation;
    public static string TestHistoryResource;
    public static string TestHistoryProjectLocationIdString;
    public static Guid TestHistoryProject;
    public static string TestResultMetaDataResource;
    public static string TestResultsMetaDataAcrossRunsProjectLocationIdString;
    public static Guid TestResultsMetaDataAcrossRunsProject;
    public static string TestResultsSettingsResource;
    public static string TestResultsSettingsLocationIdString;
    public static Guid TestResultsSettingsProject;
    public static string ResultGroupsByBuildResource;
    public static string ResultGroupsByBuildLocationIdString;
    public static Guid ResultGroupsByBuildLocation;
    public static string WorkItemsResource;
    public static string TestResultWorkItemsProjectLocationIdString;
    public static Guid TestResultWorkItemsProject;
    public static string TestRunWorkItemsProjectLocationIdString;
    public static Guid TestRunWorkItemsProject;
    public static string TestMethodsResource;
    public static string TestMethodsWorkItemsProjectLocationIdString;
    public static Guid TestMethodsWorkItemsProject;
    public static string TestMethodWorkItemsProjectLocationIdString;
    public static Guid TestMethodWorkItemsProject;
    public static string TestResultLinkedBugsResource;
    public static string BugsLinkedToTestResultsLocationIdString;
    public static Guid BugsLinkedToTestResults;
    public static string TestResultsByBuildResource;
    public static string TestResultsByBuildProjectLocationIdString;
    public static Guid TestResultsByBuildProject;
    public static string TestResultsByPipelineResource;
    public static string TestResultsByPipelineProjectLocationIdString;
    public static Guid TestResultsByPipelineProject;
    public static string TestResultDocumentResource;
    public static string TestResultDocumentProjectLocationIdString;
    public static Guid TestResultDocument;
    public static string TestResultsByReleaseResource;
    public static string TestResultsByReleaseProjectLocationIdString;
    public static Guid TestResultsByReleaseProject;
    public static string ResultGroupsByReleaseResource;
    public static string ResultGroupsByReleaseLocationIdString;
    public static Guid ResultGroupsByReleaseLocation;
    public static string ResultSummaryByRequirementResource;
    public static string ResultSummaryByRequirementLocationIdString;
    public static Guid ResultSummaryByRequirementLocation;
    public static string RunStatisticResource;
    public static string RunStatisticLocationIdString;
    public static Guid RunStatisticLocation;
    public static string RunSummaryResource;
    public static string RunSummaryLocationIdString;
    public static Guid RunSummaryLocation;
    public static string TestLogStoreEndpointResource;
    public static string TestLogStoreEndpointForBuildLocationIdString;
    public static Guid TestLogStoreEndpointForBuildLocation;
    public static string TestLogStoreEndpointForRunLocationIdString;
    public static Guid TestLogStoreEndpointForRunLocation;
    public static string TestLogStoreEndpointForResultLocationIdString;
    public static Guid TestLogStoreEndpointForResultLocation;
    public static string TestLogResource;
    public static string TestLogForBuildLocationIdString;
    public static Guid TestLogForBuildLocation;
    public static string TestLogForRunLocationIdString;
    public static Guid TestLogForRunLocation;
    public static string TestLogForResultLocationIdString;
    public static Guid TestLogForResultLocation;
    public static string TestRunMessageLogsResource;
    public static string TestRunMessageLogsLocationIdString;
    public static Guid TestRunMessageLogsLocation;
    public static string SimilarTestResultsResource;
    public static string SimilarTestResultsLocationIdString;
    public static Guid SimilarTestResults;
    private static TestResultsResourceIds();
}
public class Microsoft.VisualStudio.Services.TestResults.WebApi.UnsuccessfulQueueInvokerJobException : VssServiceException {
    public UnsuccessfulQueueInvokerJobException(string message);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
