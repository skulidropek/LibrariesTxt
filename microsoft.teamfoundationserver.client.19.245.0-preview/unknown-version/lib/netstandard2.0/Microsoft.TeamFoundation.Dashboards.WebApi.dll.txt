[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Dashboards.WebApi.CopyDashboardOptions : object {
    [CompilerGeneratedAttribute]
private DashboardScope <CopyDashboardScope>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <TeamId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RefreshInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <CopyQueriesFlag>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <QueryFolderPath>k__BackingField;
    [DataMemberAttribute]
public DashboardScope CopyDashboardScope { get; public set; }
    [DataMemberAttribute]
public Guid ProjectId { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Guid> TeamId { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> RefreshInterval { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> CopyQueriesFlag { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Guid> QueryFolderPath { get; public set; }
    public CopyDashboardOptions(CopyDashboardOptions copyDashboardOptions);
    public CopyDashboardOptions(DashboardScope copyDashboardScope, Guid projectId, Guid teamId, string name, string description, int refreshInterval, Nullable`1<bool> copyQueriesFlag, Nullable`1<Guid> queryFolderPath);
    [CompilerGeneratedAttribute]
public DashboardScope get_CopyDashboardScope();
    [CompilerGeneratedAttribute]
public void set_CopyDashboardScope(DashboardScope value);
    [CompilerGeneratedAttribute]
public Guid get_ProjectId();
    [CompilerGeneratedAttribute]
public void set_ProjectId(Guid value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_TeamId();
    [CompilerGeneratedAttribute]
public void set_TeamId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RefreshInterval();
    [CompilerGeneratedAttribute]
public void set_RefreshInterval(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_CopyQueriesFlag();
    [CompilerGeneratedAttribute]
public void set_CopyQueriesFlag(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_QueryFolderPath();
    [CompilerGeneratedAttribute]
public void set_QueryFolderPath(Nullable`1<Guid> value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Dashboards.WebApi.CopyDashboardResponse : DashboardSecuredObject {
    [DataMemberAttribute]
public CopyDashboardOptions CopyDashboardOptions;
    [DataMemberAttribute]
public Dashboard CopiedDashboard;
    public CopyDashboardResponse(CopyDashboardOptions copyDashboardOptions, Dashboard copiedDashboard);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.CreateDashboardWithExistingIdException : TeamFoundationServerException {
    protected CreateDashboardWithExistingIdException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.CreateWidgetWithExistingIdException : TeamFoundationServerException {
    protected CreateWidgetWithExistingIdException(SerializationInfo info, StreamingContext context);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Dashboards.WebApi.Dashboard : DashboardSecuredObject {
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RefreshInterval>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ETag>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Widget> <Widgets>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <GroupId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <OwnerId>k__BackingField;
    [CompilerGeneratedAttribute]
private DashboardScope <DashboardScope>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ModifiedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ModifiedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastAccessedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GlobalParametersConfig>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [DataMemberAttribute]
public Nullable`1<Guid> Id { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> RefreshInterval { get; public set; }
    [DataMemberAttribute]
public int Position { get; public set; }
    [DataMemberAttribute]
public string ETag { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<Widget> Widgets { get; public set; }
    [DataMemberAttribute]
public Guid GroupId { get; public set; }
    [DataMemberAttribute]
public Guid OwnerId { get; public set; }
    [DataMemberAttribute]
public DashboardScope DashboardScope { get; public set; }
    [DataMemberAttribute]
public DateTime ModifiedDate { get; public set; }
    [DataMemberAttribute]
public Guid ModifiedBy { get; public set; }
    [DataMemberAttribute]
public DateTime LastAccessedDate { get; public set; }
    [DataMemberAttribute]
public string GlobalParametersConfig { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    public Dashboard(IEnumerable`1<Widget> widgets);
    public Dashboard(string ETag);
    public Dashboard(DashboardGroupEntry dashboardGroupEntry);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RefreshInterval();
    [CompilerGeneratedAttribute]
public void set_RefreshInterval(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public int get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(int value);
    [CompilerGeneratedAttribute]
public string get_ETag();
    [CompilerGeneratedAttribute]
public void set_ETag(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Widget> get_Widgets();
    [CompilerGeneratedAttribute]
public void set_Widgets(IEnumerable`1<Widget> value);
    [CompilerGeneratedAttribute]
public Guid get_GroupId();
    [CompilerGeneratedAttribute]
public void set_GroupId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_OwnerId();
    [CompilerGeneratedAttribute]
public void set_OwnerId(Guid value);
    [CompilerGeneratedAttribute]
public DashboardScope get_DashboardScope();
    [CompilerGeneratedAttribute]
public void set_DashboardScope(DashboardScope value);
    [CompilerGeneratedAttribute]
public DateTime get_ModifiedDate();
    [CompilerGeneratedAttribute]
public void set_ModifiedDate(DateTime value);
    [CompilerGeneratedAttribute]
public Guid get_ModifiedBy();
    [CompilerGeneratedAttribute]
public void set_ModifiedBy(Guid value);
    [CompilerGeneratedAttribute]
public DateTime get_LastAccessedDate();
    [CompilerGeneratedAttribute]
public void set_LastAccessedDate(DateTime value);
    [CompilerGeneratedAttribute]
public string get_GlobalParametersConfig();
    [CompilerGeneratedAttribute]
public void set_GlobalParametersConfig(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
    public bool IsNew();
    protected virtual void SetSecuredChildren(ISecuredObject securedObject);
}
[EditorBrowsableAttribute("1")]
[ResourceAreaAttribute("31C84E0A-3ECE-48FD-A29D-100849AF99BA")]
public class Microsoft.TeamFoundation.Dashboards.WebApi.DashboardCompatHttpClientBase : VssHttpClientBase {
    public DashboardCompatHttpClientBase(Uri baseUrl, VssCredentials credentials);
    public DashboardCompatHttpClientBase(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings);
    public DashboardCompatHttpClientBase(Uri baseUrl, VssCredentials credentials, DelegatingHandler[] handlers);
    public DashboardCompatHttpClientBase(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings, DelegatingHandler[] handlers);
    public DashboardCompatHttpClientBase(Uri baseUrl, HttpMessageHandler pipeline, bool disposeHandler);
    public virtual Task`1<DashboardGroup> GetDashboardsAsync(TeamContext teamContext, object userState, CancellationToken cancellationToken);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.DashboardConstants : object {
    public static string RestAreaId;
    public static string RestArea;
    public static string PinApiArea;
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.DashboardCountLimitExceededException : TeamFoundationServerException {
    public DashboardCountLimitExceededException(int allowed, int current, int requested);
    [EditorBrowsableAttribute("1")]
public DashboardCountLimitExceededException(WrappedException wrappedException);
    protected DashboardCountLimitExceededException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.DashboardDescriptionLengthExceededException : TeamFoundationServerException {
    public DashboardDescriptionLengthExceededException(int allowed, int requested);
    [EditorBrowsableAttribute("1")]
public DashboardDescriptionLengthExceededException(WrappedException wrappedException);
    protected DashboardDescriptionLengthExceededException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.DashboardDoesNotExistException : TeamFoundationServerException {
    public DashboardDoesNotExistException(Guid dashboardId);
    [EditorBrowsableAttribute("1")]
public DashboardDoesNotExistException(WrappedException wrappedException);
    protected DashboardDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.DashboardEntryExistsException : TeamFoundationServerException {
    public DashboardEntryExistsException(string message);
    protected DashboardEntryExistsException(SerializationInfo info, StreamingContext context);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Dashboards.WebApi.DashboardGroup : DashboardSecuredObject {
    [CompilerGeneratedAttribute]
private IEnumerable`1<DashboardGroupEntry> <DashboardEntries>k__BackingField;
    [CompilerGeneratedAttribute]
private GroupMemberPermission <Permission>k__BackingField;
    [CompilerGeneratedAttribute]
private TeamDashboardPermission <TeamDashboardPermission>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [DataMemberAttribute]
public IEnumerable`1<DashboardGroupEntry> DashboardEntries { get; public set; }
    [DataMemberAttribute]
public GroupMemberPermission Permission { get; public set; }
    [DataMemberAttribute]
public TeamDashboardPermission TeamDashboardPermission { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    public DashboardGroup(IEnumerable`1<DashboardGroupEntry> entries);
    public DashboardGroup(IEnumerable`1<DashboardGroupEntry> entries, GroupMemberPermission permission);
    public DashboardGroup(IEnumerable`1<DashboardGroupEntry> entries, string url);
    public DashboardGroup(IEnumerable`1<DashboardGroupEntry> entries, GroupMemberPermission permission, string url);
    [CompilerGeneratedAttribute]
public IEnumerable`1<DashboardGroupEntry> get_DashboardEntries();
    [CompilerGeneratedAttribute]
public void set_DashboardEntries(IEnumerable`1<DashboardGroupEntry> value);
    [CompilerGeneratedAttribute]
public GroupMemberPermission get_Permission();
    [CompilerGeneratedAttribute]
public void set_Permission(GroupMemberPermission value);
    [CompilerGeneratedAttribute]
public TeamDashboardPermission get_TeamDashboardPermission();
    [CompilerGeneratedAttribute]
public void set_TeamDashboardPermission(TeamDashboardPermission value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
    protected virtual void SetSecuredChildren(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Dashboards.WebApi.DashboardGroupEntry : Dashboard {
    public DashboardGroupEntry(Dashboard dashboard);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.DashboardGroupEntryComparer : object {
    public sealed virtual bool Equals(DashboardGroupEntry x, DashboardGroupEntry y);
    public sealed virtual int GetHashCode(DashboardGroupEntry w);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Dashboards.WebApi.DashboardGroupEntryResponse : DashboardGroupEntry {
    public DashboardGroupEntryResponse(DashboardGroupEntry d, string url);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.DashboardHttpClient : DashboardHttpClientBase {
    public DashboardHttpClient(Uri baseUrl, VssCredentials credentials);
    public DashboardHttpClient(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings);
    public DashboardHttpClient(Uri baseUrl, VssCredentials credentials, DelegatingHandler[] handlers);
    public DashboardHttpClient(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings, DelegatingHandler[] handlers);
    public DashboardHttpClient(Uri baseUrl, HttpMessageHandler pipeline, bool disposeHandler);
}
[ResourceAreaAttribute("31C84E0A-3ECE-48FD-A29D-100849AF99BA")]
public abstract class Microsoft.TeamFoundation.Dashboards.WebApi.DashboardHttpClientBase : DashboardCompatHttpClientBase {
    public DashboardHttpClientBase(Uri baseUrl, VssCredentials credentials);
    public DashboardHttpClientBase(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings);
    public DashboardHttpClientBase(Uri baseUrl, VssCredentials credentials, DelegatingHandler[] handlers);
    public DashboardHttpClientBase(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings, DelegatingHandler[] handlers);
    public DashboardHttpClientBase(Uri baseUrl, HttpMessageHandler pipeline, bool disposeHandler);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<CopyDashboardResponse> CopyDashboardAsync(CopyDashboardOptions copyDashboardOptions, TeamContext teamContext, Guid dashboardId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Dashboard> CreateDashboardAsync(Dashboard dashboard, TeamContext teamContext, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Dashboards.WebApi.DashboardHttpClientBase/<DeleteDashboardAsync>d__7")]
public virtual Task DeleteDashboardAsync(TeamContext teamContext, Guid dashboardId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Dashboard> GetDashboardAsync(TeamContext teamContext, Guid dashboardId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<Dashboard>> GetDashboardsByProjectAsync(TeamContext teamContext, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Dashboard> ReplaceDashboardAsync(Dashboard dashboard, TeamContext teamContext, Guid dashboardId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<DashboardGroup> ReplaceDashboardsAsync(DashboardGroup group, TeamContext teamContext, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Widget> CreateWidgetAsync(Widget widget, TeamContext teamContext, Guid dashboardId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Dashboard> DeleteWidgetAsync(TeamContext teamContext, Guid dashboardId, Guid widgetId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Widget> GetWidgetAsync(TeamContext teamContext, Guid dashboardId, Guid widgetId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Dashboards.WebApi.DashboardHttpClientBase/<GetWidgetsAsync>d__15")]
public virtual Task`1<WidgetsVersionedList> GetWidgetsAsync(TeamContext teamContext, Guid dashboardId, string eTag, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Widget> ReplaceWidgetAsync(Widget widget, TeamContext teamContext, Guid dashboardId, Guid widgetId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Dashboards.WebApi.DashboardHttpClientBase/<ReplaceWidgetsAsync>d__17")]
public virtual Task`1<WidgetsVersionedList> ReplaceWidgetsAsync(IEnumerable`1<Widget> widgets, TeamContext teamContext, Guid dashboardId, string eTag, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Widget> UpdateWidgetAsync(Widget widget, TeamContext teamContext, Guid dashboardId, Guid widgetId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Dashboards.WebApi.DashboardHttpClientBase/<UpdateWidgetsAsync>d__19")]
public virtual Task`1<WidgetsVersionedList> UpdateWidgetsAsync(IEnumerable`1<Widget> widgets, TeamContext teamContext, Guid dashboardId, string eTag, object userState, CancellationToken cancellationToken);
    public virtual Task`1<WidgetMetadataResponse> GetWidgetMetadataAsync(string contributionId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<WidgetMetadataResponse> GetWidgetMetadataAsync(string project, string contributionId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<WidgetMetadataResponse> GetWidgetMetadataAsync(Guid project, string contributionId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<WidgetTypesResponse> GetWidgetTypesAsync(string project, WidgetScope scope, object userState, CancellationToken cancellationToken);
    public virtual Task`1<WidgetTypesResponse> GetWidgetTypesAsync(Guid project, WidgetScope scope, object userState, CancellationToken cancellationToken);
    public virtual Task`1<WidgetTypesResponse> GetWidgetTypesAsync(WidgetScope scope, object userState, CancellationToken cancellationToken);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.DashboardInvalidPositionException : TeamFoundationServerException {
    public DashboardInvalidPositionException(int position);
    [EditorBrowsableAttribute("1")]
public DashboardInvalidPositionException(WrappedException wrappedException);
    protected DashboardInvalidPositionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.DashboardNameLengthExceededException : TeamFoundationServerException {
    public DashboardNameLengthExceededException(int allowed, int requested);
    [EditorBrowsableAttribute("1")]
public DashboardNameLengthExceededException(WrappedException wrappedException);
    protected DashboardNameLengthExceededException(SerializationInfo info, StreamingContext context);
}
[ObsoleteAttribute("This exception has been deprecated. Please remove all references.", "False")]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Dashboards.WebApi.DashboardPositionCollisionException : TeamFoundationServerException {
    protected DashboardPositionCollisionException(SerializationInfo info, StreamingContext context);
}
[GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
[DebuggerNonUserCodeAttribute]
[CompilerGeneratedAttribute]
public class Microsoft.TeamFoundation.Dashboards.WebApi.DashboardResources : object {
    private static ResourceManager resourceMan;
    private static CultureInfo resourceCulture;
    [EditorBrowsableAttribute("2")]
public static ResourceManager ResourceManager { get; }
    [EditorBrowsableAttribute("2")]
public static CultureInfo Culture { get; public set; }
    public static string ErrorAccessDenied { get; }
    public static string ErrorCannotHaveDashboardId { get; }
    public static string ErrorCannotHaveWidgetId { get; }
    public static string ErrorDashboardCountExceeded { get; }
    public static string ErrorDashboardDoesNotExist { get; }
    public static string ErrorDashboardNameMoreThanMaxLength { get; }
    public static string ErrorDashboardDescriptionMoreThanMaxLength { get; }
    public static string ErrorDashboardPositionCollision { get; }
    public static string ErrorDashboardsDoNotExist { get; }
    public static string ErrorDeletingLastDashboard { get; }
    public static string ErrorEmptyDashboardName { get; }
    public static string ErrorEmptyWidgetName { get; }
    public static string ErrorInvalidDashboardPosition { get; }
    public static string ErrorInvalidMetaDataConfigurationFromCatalog { get; }
    public static string ErrorLimitExceeded { get; }
    public static string ErrorMissingWidgetId { get; }
    public static string ErrorMoreThanMaxLength { get; }
    public static string ErrorNoMetaDataFoundInCatalog { get; }
    public static string ErrorTeamAdminOnlyAccess { get; }
    public static string ErrorWidgetCollision { get; }
    public static string ErrorWidgetCountExceeded { get; }
    public static string ErrorWidgetDoesNotExist { get; }
    public static string ErrorWidgetsDoNotExist { get; }
    public static string ErrorWidgetSettingsVersionDowngrade { get; }
    public static string ErrorWidgetSettingsVersionInvalid { get; }
    public static string ErrorWidgetSizeNotSupported { get; }
    public static string ErrorWidgetServiceUnavailable { get; }
    public static string ErrorDuplicateDashboardName { get; }
    public static ResourceManager get_ResourceManager();
    public static CultureInfo get_Culture();
    public static void set_Culture(CultureInfo value);
    public static string get_ErrorAccessDenied();
    public static string get_ErrorCannotHaveDashboardId();
    public static string get_ErrorCannotHaveWidgetId();
    public static string get_ErrorDashboardCountExceeded();
    public static string get_ErrorDashboardDoesNotExist();
    public static string get_ErrorDashboardNameMoreThanMaxLength();
    public static string get_ErrorDashboardDescriptionMoreThanMaxLength();
    public static string get_ErrorDashboardPositionCollision();
    public static string get_ErrorDashboardsDoNotExist();
    public static string get_ErrorDeletingLastDashboard();
    public static string get_ErrorEmptyDashboardName();
    public static string get_ErrorEmptyWidgetName();
    public static string get_ErrorInvalidDashboardPosition();
    public static string get_ErrorInvalidMetaDataConfigurationFromCatalog();
    public static string get_ErrorLimitExceeded();
    public static string get_ErrorMissingWidgetId();
    public static string get_ErrorMoreThanMaxLength();
    public static string get_ErrorNoMetaDataFoundInCatalog();
    public static string get_ErrorTeamAdminOnlyAccess();
    public static string get_ErrorWidgetCollision();
    public static string get_ErrorWidgetCountExceeded();
    public static string get_ErrorWidgetDoesNotExist();
    public static string get_ErrorWidgetsDoNotExist();
    public static string get_ErrorWidgetSettingsVersionDowngrade();
    public static string get_ErrorWidgetSettingsVersionInvalid();
    public static string get_ErrorWidgetSizeNotSupported();
    public static string get_ErrorWidgetServiceUnavailable();
    public static string get_ErrorDuplicateDashboardName();
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Dashboards.WebApi.DashboardResponse : DashboardGroupEntry {
    public DashboardResponse(IEnumerable`1<WidgetResponse> widgets, DashboardGroupEntry entry, string url);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.DashboardRestResourceNames : object {
    public static string DashboardGroup;
    public static string Dashboards;
    public static string Widgets;
    public static string WidgetTypes;
    public static string DashboardsV2;
    public static string WidgetsV2;
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.DashboardRouteTemplates : object {
    public static string DashboardGroupRouteTemplate;
    public static string DashboardsRouteTemplate;
    public static string WidgetsRouteTemplate;
    public static string WidgetTypesRouteTemplate;
    public static string DashboardsRouteTemplateV2;
    public static string WidgetsRouteTemplateV2;
}
[DataContractAttribute]
[ClientIncludeModelAttribute]
public enum Microsoft.TeamFoundation.Dashboards.WebApi.DashboardScope : Enum {
    public int value__;
    [DataMemberAttribute]
public static DashboardScope Collection_User;
    [DataMemberAttribute]
public static DashboardScope Project_Team;
    [DataMemberAttribute]
public static DashboardScope Project;
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.DashboardsDoNotExistException : TeamFoundationServerException {
    public DashboardsDoNotExistException(string dashboards);
    [EditorBrowsableAttribute("1")]
public DashboardsDoNotExistException(WrappedException wrappedException);
    protected DashboardsDoNotExistException(SerializationInfo info, StreamingContext context);
}
public abstract class Microsoft.TeamFoundation.Dashboards.WebApi.DashboardSecuredObject : object {
    private ISecuredObject SecuredObject;
    private Guid Microsoft.VisualStudio.Services.WebApi.ISecuredObject.NamespaceId { get; }
    private int Microsoft.VisualStudio.Services.WebApi.ISecuredObject.RequiredPermissions { get; }
    public void SetSecuredObject(ISecuredObject securedObject);
    protected virtual void SetSecuredChildren(ISecuredObject securedObject);
    private sealed virtual override Guid Microsoft.VisualStudio.Services.WebApi.ISecuredObject.get_NamespaceId();
    private sealed virtual override int Microsoft.VisualStudio.Services.WebApi.ISecuredObject.get_RequiredPermissions();
    private sealed virtual override string Microsoft.VisualStudio.Services.WebApi.ISecuredObject.GetToken();
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.DashboardsLocationIds : object {
    public static Guid DashboardGroup;
    public static Guid Dashboard;
    public static Guid Widget;
    public static Guid WidgetTypes;
    public static Guid DashboardV2;
    public static Guid WidgetV2;
    private static DashboardsLocationIds();
}
internal class Microsoft.TeamFoundation.Dashboards.WebApi.DashboardsPrivileges : object {
    public static Guid NamespaceId;
    public static char NamespaceSeparator;
    public static string Root;
    public static string MaterializeDashboardsRoot;
    private static DashboardsPrivileges();
    public static TeamDashboardPermission NamespaceToUserPermission(int permissions);
    private static TeamDashboardPermission TryParse(int permissions);
    public static int UserToNamespacePermission(TeamDashboardPermission teamDashboardPermission);
    public static int AllPermissions();
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.DuplicateDashboardNameException : TeamFoundationServerException {
    protected DuplicateDashboardNameException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.EmptyDashboardNameException : TeamFoundationServerException {
    protected EmptyDashboardNameException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.EmptyWidgetNameException : TeamFoundationServerException {
    protected EmptyWidgetNameException(SerializationInfo info, StreamingContext context);
}
[DataContractAttribute]
public enum Microsoft.TeamFoundation.Dashboards.WebApi.GroupMemberPermission : Enum {
    public int value__;
    [EnumMemberAttribute]
public static GroupMemberPermission None;
    [EnumMemberAttribute]
public static GroupMemberPermission Edit;
    [EnumMemberAttribute]
public static GroupMemberPermission Manage;
    [EnumMemberAttribute]
public static GroupMemberPermission ManagePermissions;
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.InsufficientPermissionsException : TeamFoundationServerException {
    public InsufficientPermissionsException(string message);
    public InsufficientPermissionsException(string userName, GroupMemberPermission groupPermission);
    protected InsufficientPermissionsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.LastDashboardCannotBeDeletedException : TeamFoundationServerException {
    protected LastDashboardCannotBeDeletedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.LightboxOptions : DashboardSecuredObject {
    public Nullable`1<int> Width;
    public Nullable`1<int> Height;
    public bool Resizable;
    public LightboxOptions(Nullable`1<int> width, Nullable`1<int> height, Nullable`1<bool> resizable);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.Links : object {
    public static string Web;
    public static string Self;
    public static string Group;
    public static string Dashboard;
    public static string Widget;
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.NoMetaDataFoundInCatalogException : TeamFoundationServerException {
    protected NoMetaDataFoundInCatalogException(SerializationInfo info, StreamingContext context);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Dashboards.WebApi.SemanticVersion : DashboardSecuredObject {
    [CompilerGeneratedAttribute]
private int <Major>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Minor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Patch>k__BackingField;
    [DataMemberAttribute]
public int Major { get; public set; }
    [DataMemberAttribute]
public int Minor { get; public set; }
    [DataMemberAttribute]
public int Patch { get; public set; }
    public static SemanticVersion Default { get; }
    public SemanticVersion(int major, int minor, int patch);
    public SemanticVersion(string version);
    [CompilerGeneratedAttribute]
public int get_Major();
    [CompilerGeneratedAttribute]
public void set_Major(int value);
    [CompilerGeneratedAttribute]
public int get_Minor();
    [CompilerGeneratedAttribute]
public void set_Minor(int value);
    [CompilerGeneratedAttribute]
public int get_Patch();
    [CompilerGeneratedAttribute]
public void set_Patch(int value);
    public static SemanticVersion get_Default();
    public virtual string ToString();
}
[DataContractAttribute]
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Dashboards.WebApi.TeamDashboardPermission : Enum {
    public int value__;
    [EnumMemberAttribute]
public static TeamDashboardPermission None;
    [EnumMemberAttribute]
public static TeamDashboardPermission Read;
    [EnumMemberAttribute]
public static TeamDashboardPermission Create;
    [EnumMemberAttribute]
public static TeamDashboardPermission Edit;
    [EnumMemberAttribute]
public static TeamDashboardPermission Delete;
    [EnumMemberAttribute]
public static TeamDashboardPermission ManagePermissions;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Dashboards.WebApi.Widget : DashboardSecuredObject {
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ETag>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private WidgetPosition <Position>k__BackingField;
    [CompilerGeneratedAttribute]
private WidgetSize <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Settings>k__BackingField;
    [CompilerGeneratedAttribute]
private SemanticVersion <SettingsVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private WidgetSize[] <AllowedSizes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ArtifactId>k__BackingField;
    [CompilerGeneratedAttribute]
private Dashboard <Dashboard>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AreSettingsBlockedForUser>k__BackingField;
    private WidgetMetadata metaData;
    [DataMemberAttribute]
public Nullable`1<Guid> Id { get; public set; }
    [DataMemberAttribute]
public string ETag { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public WidgetPosition Position { get; public set; }
    [DataMemberAttribute]
public WidgetSize Size { get; public set; }
    [DataMemberAttribute]
public string Settings { get; public set; }
    [DataMemberAttribute]
public SemanticVersion SettingsVersion { get; public set; }
    [DataMemberAttribute]
public WidgetSize[] AllowedSizes { get; public set; }
    [DataMemberAttribute]
public string ArtifactId { get; public set; }
    [DataMemberAttribute]
public Dashboard Dashboard { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    [DataMemberAttribute]
public bool AreSettingsBlockedForUser { get; public set; }
    [DataMemberAttribute]
public bool IsEnabled { get; }
    [DataMemberAttribute]
public Uri ContentUri { get; }
    [DataMemberAttribute]
public string ContributionId { get; public set; }
    [DataMemberAttribute]
public string TypeId { get; }
    [DataMemberAttribute]
public string ConfigurationContributionId { get; }
    [DataMemberAttribute]
public string ConfigurationContributionRelativeId { get; }
    [DataMemberAttribute]
public bool IsNameConfigurable { get; }
    [DataMemberAttribute]
public string LoadingImageUrl { get; }
    [DataMemberAttribute]
public LightboxOptions LightboxOptions { get; }
    [IgnoreDataMemberAttribute]
public bool CanStoreCrossProjectSettings { get; }
    public Widget(Widget widget);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public string get_ETag();
    [CompilerGeneratedAttribute]
public void set_ETag(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public WidgetPosition get_Position();
    [CompilerGeneratedAttribute]
public void set_Position(WidgetPosition value);
    [CompilerGeneratedAttribute]
public WidgetSize get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(WidgetSize value);
    [CompilerGeneratedAttribute]
public string get_Settings();
    [CompilerGeneratedAttribute]
public void set_Settings(string value);
    [CompilerGeneratedAttribute]
public SemanticVersion get_SettingsVersion();
    [CompilerGeneratedAttribute]
public void set_SettingsVersion(SemanticVersion value);
    [CompilerGeneratedAttribute]
public WidgetSize[] get_AllowedSizes();
    [CompilerGeneratedAttribute]
public void set_AllowedSizes(WidgetSize[] value);
    [CompilerGeneratedAttribute]
public string get_ArtifactId();
    [CompilerGeneratedAttribute]
public void set_ArtifactId(string value);
    [CompilerGeneratedAttribute]
public Dashboard get_Dashboard();
    [CompilerGeneratedAttribute]
public void set_Dashboard(Dashboard value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
    [CompilerGeneratedAttribute]
public bool get_AreSettingsBlockedForUser();
    [CompilerGeneratedAttribute]
public void set_AreSettingsBlockedForUser(bool value);
    public void SetMetaData(WidgetMetadata metadata);
    public bool get_IsEnabled();
    public Uri get_ContentUri();
    public string get_ContributionId();
    public void set_ContributionId(string value);
    public string get_TypeId();
    public string get_ConfigurationContributionId();
    public string get_ConfigurationContributionRelativeId();
    public bool get_IsNameConfigurable();
    public string get_LoadingImageUrl();
    public LightboxOptions get_LightboxOptions();
    public bool get_CanStoreCrossProjectSettings();
    public bool IsNew();
    public bool IsPositioned();
    protected virtual void SetSecuredChildren(ISecuredObject securedObject);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.WidgetCollisionException : TeamFoundationServerException {
    protected WidgetCollisionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.WidgetComparer : object {
    public sealed virtual bool Equals(Widget x, Widget y);
    public sealed virtual int GetHashCode(Widget w);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Dashboards.WebApi.WidgetConfigurationMetadata : object {
    [CompilerGeneratedAttribute]
private string <TypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContributionId>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Targets>k__BackingField;
    [DataMemberAttribute]
public string TypeId { get; public set; }
    [DataMemberAttribute]
public string ContributionId { get; public set; }
    [DataMemberAttribute]
public List`1<string> Targets { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TypeId();
    [CompilerGeneratedAttribute]
public void set_TypeId(string value);
    [CompilerGeneratedAttribute]
public string get_ContributionId();
    [CompilerGeneratedAttribute]
public void set_ContributionId(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Targets();
    [CompilerGeneratedAttribute]
public void set_Targets(List`1<string> value);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.WidgetConflictOnCopyException : TeamFoundationServerException {
    public WidgetConflictOnCopyException(string message);
    protected WidgetConflictOnCopyException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.WidgetDoesNotExistException : TeamFoundationServerException {
    public WidgetDoesNotExistException(Guid widgetId);
    [EditorBrowsableAttribute("1")]
public WidgetDoesNotExistException(WrappedException wrappedException);
    protected WidgetDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.WidgetETagConflictException : TeamFoundationServerException {
    public WidgetETagConflictException(string message);
    protected WidgetETagConflictException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.WidgetExistsException : TeamFoundationServerException {
    public WidgetExistsException(string message);
    protected WidgetExistsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.WidgetLimitExceededException : TeamFoundationServerException {
    public WidgetLimitExceededException(int allowed, int current, int requested);
    [EditorBrowsableAttribute("1")]
public WidgetLimitExceededException(WrappedException wrappedException);
    protected WidgetLimitExceededException(SerializationInfo info, StreamingContext context);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Dashboards.WebApi.WidgetMetadata : DashboardSecuredObject {
    [CompilerGeneratedAttribute]
private string <TypeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PublisherName>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Targets>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CatalogIconUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Tags>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Keywords>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LoadingImageUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsVisibleFromCatalog>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsEnabled>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CanStoreCrossProjectSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <ContentUri>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<WidgetSize> <AllowedSizes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigurationContributionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConfigurationContributionRelativeId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ConfigurationRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultSettings>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<WidgetScope> <SupportedScopes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContributionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNameConfigurable>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CatalogInfoUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private LightboxOptions <LightboxOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AnalyticsServiceRequired>k__BackingField;
    [DataMemberAttribute]
public string TypeId { get; public set; }
    [DataMemberAttribute]
public string PublisherName { get; public set; }
    [DataMemberAttribute]
public List`1<string> Targets { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string CatalogIconUrl { get; public set; }
    [DataMemberAttribute]
public List`1<string> Tags { get; public set; }
    [DataMemberAttribute]
public List`1<string> Keywords { get; public set; }
    [DataMemberAttribute]
public string LoadingImageUrl { get; public set; }
    [DataMemberAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
public bool IsVisibleFromCatalog { get; public set; }
    [DataMemberAttribute]
public bool IsEnabled { get; public set; }
    [IgnoreDataMemberAttribute]
public bool CanStoreCrossProjectSettings { get; public set; }
    [DataMemberAttribute]
public Uri ContentUri { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<WidgetSize> AllowedSizes { get; public set; }
    [DataMemberAttribute]
public string ConfigurationContributionId { get; public set; }
    [DataMemberAttribute]
public string ConfigurationContributionRelativeId { get; public set; }
    [DataMemberAttribute]
public bool ConfigurationRequired { get; public set; }
    [DataMemberAttribute]
public string DefaultSettings { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<WidgetScope> SupportedScopes { get; public set; }
    [DataMemberAttribute]
public string ContributionId { get; public set; }
    [DataMemberAttribute]
public bool IsNameConfigurable { get; public set; }
    [DataMemberAttribute]
public string CatalogInfoUrl { get; public set; }
    [DataMemberAttribute]
public LightboxOptions LightboxOptions { get; public set; }
    [DataMemberAttribute]
public bool AnalyticsServiceRequired { get; public set; }
    public WidgetMetadata CloneWithSecuredObject(ISecuredObject securedObject);
    public WidgetMetadata Clone();
    [CompilerGeneratedAttribute]
public string get_TypeId();
    [CompilerGeneratedAttribute]
public void set_TypeId(string value);
    [CompilerGeneratedAttribute]
public string get_PublisherName();
    [CompilerGeneratedAttribute]
public void set_PublisherName(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Targets();
    [CompilerGeneratedAttribute]
public void set_Targets(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_CatalogIconUrl();
    [CompilerGeneratedAttribute]
public void set_CatalogIconUrl(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Tags();
    [CompilerGeneratedAttribute]
public void set_Tags(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Keywords();
    [CompilerGeneratedAttribute]
public void set_Keywords(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_LoadingImageUrl();
    [CompilerGeneratedAttribute]
public void set_LoadingImageUrl(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public bool get_IsVisibleFromCatalog();
    [CompilerGeneratedAttribute]
public void set_IsVisibleFromCatalog(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsEnabled();
    [CompilerGeneratedAttribute]
public void set_IsEnabled(bool value);
    [CompilerGeneratedAttribute]
public bool get_CanStoreCrossProjectSettings();
    [CompilerGeneratedAttribute]
public void set_CanStoreCrossProjectSettings(bool value);
    [CompilerGeneratedAttribute]
public Uri get_ContentUri();
    [CompilerGeneratedAttribute]
public void set_ContentUri(Uri value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<WidgetSize> get_AllowedSizes();
    [CompilerGeneratedAttribute]
public void set_AllowedSizes(IEnumerable`1<WidgetSize> value);
    [CompilerGeneratedAttribute]
public string get_ConfigurationContributionId();
    [CompilerGeneratedAttribute]
public void set_ConfigurationContributionId(string value);
    [CompilerGeneratedAttribute]
public string get_ConfigurationContributionRelativeId();
    [CompilerGeneratedAttribute]
public void set_ConfigurationContributionRelativeId(string value);
    [CompilerGeneratedAttribute]
public bool get_ConfigurationRequired();
    [CompilerGeneratedAttribute]
public void set_ConfigurationRequired(bool value);
    [CompilerGeneratedAttribute]
public string get_DefaultSettings();
    [CompilerGeneratedAttribute]
public void set_DefaultSettings(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<WidgetScope> get_SupportedScopes();
    [CompilerGeneratedAttribute]
public void set_SupportedScopes(IEnumerable`1<WidgetScope> value);
    [CompilerGeneratedAttribute]
public string get_ContributionId();
    [CompilerGeneratedAttribute]
public void set_ContributionId(string value);
    [CompilerGeneratedAttribute]
public bool get_IsNameConfigurable();
    [CompilerGeneratedAttribute]
public void set_IsNameConfigurable(bool value);
    [CompilerGeneratedAttribute]
public string get_CatalogInfoUrl();
    [CompilerGeneratedAttribute]
public void set_CatalogInfoUrl(string value);
    [CompilerGeneratedAttribute]
public LightboxOptions get_LightboxOptions();
    [CompilerGeneratedAttribute]
public void set_LightboxOptions(LightboxOptions value);
    [CompilerGeneratedAttribute]
public bool get_AnalyticsServiceRequired();
    [CompilerGeneratedAttribute]
public void set_AnalyticsServiceRequired(bool value);
    public bool IsValid();
    public static WidgetMetadata CreateDisabledInstance(string contributionId);
    protected virtual void SetSecuredChildren(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Dashboards.WebApi.WidgetMetadataResponse : object {
    [CompilerGeneratedAttribute]
private WidgetMetadata <WidgetMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    [DataMemberAttribute]
public WidgetMetadata WidgetMetadata { get; public set; }
    [DataMemberAttribute]
public string Uri { get; public set; }
    public WidgetMetadataResponse(WidgetMetadata metadata, string url);
    [CompilerGeneratedAttribute]
public WidgetMetadata get_WidgetMetadata();
    [CompilerGeneratedAttribute]
public void set_WidgetMetadata(WidgetMetadata value);
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(string value);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.WidgetNameLengthExceededException : TeamFoundationServerException {
    public WidgetNameLengthExceededException(int allowed, int requested);
    [EditorBrowsableAttribute("1")]
public WidgetNameLengthExceededException(WrappedException wrappedException);
    protected WidgetNameLengthExceededException(SerializationInfo info, StreamingContext context);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Dashboards.WebApi.WidgetPosition : DashboardSecuredObject {
    [CompilerGeneratedAttribute]
private int <Row>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Column>k__BackingField;
    [DataMemberAttribute]
public int Row { get; public set; }
    [DataMemberAttribute]
public int Column { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Row();
    [CompilerGeneratedAttribute]
public void set_Row(int value);
    [CompilerGeneratedAttribute]
public int get_Column();
    [CompilerGeneratedAttribute]
public void set_Column(int value);
    public WidgetPosition Clone();
    public bool IsPositioned();
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.WidgetPositionDimensionExceededException : TeamFoundationServerException {
    public WidgetPositionDimensionExceededException(string dimension, int start, int end, int requested);
    [EditorBrowsableAttribute("1")]
public WidgetPositionDimensionExceededException(WrappedException wrappedException);
    protected WidgetPositionDimensionExceededException(SerializationInfo info, StreamingContext context);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Dashboards.WebApi.WidgetResponse : Widget {
    public WidgetResponse(Widget w, string url);
}
[DataContractAttribute]
public enum Microsoft.TeamFoundation.Dashboards.WebApi.WidgetScope : Enum {
    public int value__;
    public static WidgetScope Collection_User;
    public static WidgetScope Project_Team;
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.WidgetServiceUnavailableException : TeamFoundationServerException {
    public WidgetServiceUnavailableException(string service);
    [EditorBrowsableAttribute("1")]
public WidgetServiceUnavailableException(WrappedException wrappedException);
    protected WidgetServiceUnavailableException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.WidgetSettingsLengthExceededException : TeamFoundationServerException {
    public WidgetSettingsLengthExceededException(int allowed, int requested);
    [EditorBrowsableAttribute("1")]
public WidgetSettingsLengthExceededException(WrappedException wrappedException);
    protected WidgetSettingsLengthExceededException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.WidgetSettingsVersionInvalidException : TeamFoundationServerException {
    public WidgetSettingsVersionInvalidException(string version);
    [EditorBrowsableAttribute("1")]
public WidgetSettingsVersionInvalidException(WrappedException wrappedException);
    protected WidgetSettingsVersionInvalidException(SerializationInfo info, StreamingContext context);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Dashboards.WebApi.WidgetSize : DashboardSecuredObject {
    [CompilerGeneratedAttribute]
private int <RowSpan>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ColumnSpan>k__BackingField;
    public static int MaxRowSpan;
    public static int MaxColumnSpan;
    [DataMemberAttribute]
public int RowSpan { get; public set; }
    [DataMemberAttribute]
public int ColumnSpan { get; public set; }
    [CompilerGeneratedAttribute]
public int get_RowSpan();
    [CompilerGeneratedAttribute]
public void set_RowSpan(int value);
    [CompilerGeneratedAttribute]
public int get_ColumnSpan();
    [CompilerGeneratedAttribute]
public void set_ColumnSpan(int value);
    public bool IsValid();
    public WidgetSize Clone();
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.WidgetSizeDimensionExceededException : TeamFoundationServerException {
    public WidgetSizeDimensionExceededException(string dimension, int start, int end, int requested);
    [EditorBrowsableAttribute("1")]
public WidgetSizeDimensionExceededException(WrappedException wrappedException);
    protected WidgetSizeDimensionExceededException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.WidgetSizeNotSupportedException : TeamFoundationServerException {
    public WidgetSizeNotSupportedException(int rowSpan, int columnSpan);
    [EditorBrowsableAttribute("1")]
public WidgetSizeNotSupportedException(WrappedException wrappedException);
    protected WidgetSizeNotSupportedException(SerializationInfo info, StreamingContext context);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Dashboards.WebApi.WidgetsVersionedList : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ETag>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Widget> <Widgets>k__BackingField;
    [ClientResponseHeaderAttribute("ETag")]
public IEnumerable`1<string> ETag { get; public set; }
    [ClientResponseContentAttribute]
public IEnumerable`1<Widget> Widgets { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ETag();
    [CompilerGeneratedAttribute]
public void set_ETag(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Widget> get_Widgets();
    [CompilerGeneratedAttribute]
public void set_Widgets(IEnumerable`1<Widget> value);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.WidgetTypeDoesNotExistException : TeamFoundationServerException {
    public WidgetTypeDoesNotExistException(string message);
    protected WidgetTypeDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.WidgetTypeLengthExceededException : TeamFoundationServerException {
    public WidgetTypeLengthExceededException(int allowed, int requested);
    [EditorBrowsableAttribute("1")]
public WidgetTypeLengthExceededException(WrappedException wrappedException);
    protected WidgetTypeLengthExceededException(SerializationInfo info, StreamingContext context);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Dashboards.WebApi.WidgetTypesResponse : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<WidgetMetadata> <WidgetTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Uri>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [DataMemberAttribute]
public IEnumerable`1<WidgetMetadata> WidgetTypes { get; public set; }
    [DataMemberAttribute]
public string Uri { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    public WidgetTypesResponse(IEnumerable`1<WidgetMetadata> w, string url);
    [CompilerGeneratedAttribute]
public IEnumerable`1<WidgetMetadata> get_WidgetTypes();
    [CompilerGeneratedAttribute]
public void set_WidgetTypes(IEnumerable`1<WidgetMetadata> value);
    [CompilerGeneratedAttribute]
public string get_Uri();
    [CompilerGeneratedAttribute]
public void set_Uri(string value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
}
public class Microsoft.TeamFoundation.Dashboards.WebApi.WidgetWithoutIdException : TeamFoundationServerException {
    protected WidgetWithoutIdException(SerializationInfo info, StreamingContext context);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
