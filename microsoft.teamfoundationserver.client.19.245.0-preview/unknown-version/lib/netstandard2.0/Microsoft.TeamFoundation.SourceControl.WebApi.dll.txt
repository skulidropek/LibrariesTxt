[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.AdvSecEnablementOptions : object {
    [CompilerGeneratedAttribute]
private bool <ForceRepoSecretScanning>k__BackingField;
    [DataMemberAttribute]
public bool ForceRepoSecretScanning { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_ForceRepoSecretScanning();
    [CompilerGeneratedAttribute]
public void set_ForceRepoSecretScanning(bool value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.AdvSecEnablementStatus : object {
    [CompilerGeneratedAttribute]
private Guid <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RepositoryId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Enabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ChangedOnDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ChangedById>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DependabotEnabled>k__BackingField;
    [DataMemberAttribute]
public Guid ProjectId { get; public set; }
    [DataMemberAttribute]
public Guid RepositoryId { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> Enabled { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> ChangedOnDate { get; public set; }
    [DataMemberAttribute]
public Guid ChangedById { get; public set; }
    [DataMemberAttribute]
public bool DependabotEnabled { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_ProjectId();
    [CompilerGeneratedAttribute]
public void set_ProjectId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_RepositoryId();
    [CompilerGeneratedAttribute]
public void set_RepositoryId(Guid value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Enabled();
    [CompilerGeneratedAttribute]
public void set_Enabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_ChangedOnDate();
    [CompilerGeneratedAttribute]
public void set_ChangedOnDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Guid get_ChangedById();
    [CompilerGeneratedAttribute]
public void set_ChangedById(Guid value);
    [CompilerGeneratedAttribute]
public bool get_DependabotEnabled();
    [CompilerGeneratedAttribute]
public void set_DependabotEnabled(bool value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.AdvSecEnablementUpdate : object {
    [CompilerGeneratedAttribute]
private Guid <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RepositoryId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NewStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <NewDependabotStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private AdvSecEnablementOptions <Options>k__BackingField;
    [DataMemberAttribute]
public Guid ProjectId { get; public set; }
    [DataMemberAttribute]
public Guid RepositoryId { get; public set; }
    [DataMemberAttribute]
public bool NewStatus { get; public set; }
    [DataMemberAttribute]
public bool NewDependabotStatus { get; public set; }
    [DataMemberAttribute]
public AdvSecEnablementOptions Options { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_ProjectId();
    [CompilerGeneratedAttribute]
public void set_ProjectId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_RepositoryId();
    [CompilerGeneratedAttribute]
public void set_RepositoryId(Guid value);
    [CompilerGeneratedAttribute]
public bool get_NewStatus();
    [CompilerGeneratedAttribute]
public void set_NewStatus(bool value);
    [CompilerGeneratedAttribute]
public bool get_NewDependabotStatus();
    [CompilerGeneratedAttribute]
public void set_NewDependabotStatus(bool value);
    [CompilerGeneratedAttribute]
public AdvSecEnablementOptions get_Options();
    [CompilerGeneratedAttribute]
public void set_Options(AdvSecEnablementOptions value);
}
[ResourceAreaAttribute("A5458490-3B15-4E37-8854-CEF1DA36F0C4")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.AdvSecHttpClient : VssHttpClientBase {
    public AdvSecHttpClient(Uri baseUrl, VssCredentials credentials);
    public AdvSecHttpClient(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings);
    public AdvSecHttpClient(Uri baseUrl, VssCredentials credentials, DelegatingHandler[] handlers);
    public AdvSecHttpClient(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings, DelegatingHandler[] handlers);
    public AdvSecHttpClient(Uri baseUrl, HttpMessageHandler pipeline, bool disposeHandler);
    [EditorBrowsableAttribute("1")]
public Task`1<List`1<BillableCommitter>> GetBillableCommittersAsync(string project, Nullable`1<DateTime> billingDate, Nullable`1<int> skip, Nullable`1<int> take, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<List`1<BillableCommitter>> GetBillableCommittersAsync(Guid project, Nullable`1<DateTime> billingDate, Nullable`1<int> skip, Nullable`1<int> take, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<List`1<BillableCommitterDetail>> GetBillableCommittersDetailAsync(string project, string includeDetails, Nullable`1<DateTime> billingDate, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<List`1<BillableCommitterDetail>> GetBillableCommittersDetailAsync(Guid project, string includeDetails, Nullable`1<DateTime> billingDate, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.AdvSecHttpClient/<DeleteEnablementStatusAsync>d__9")]
[EditorBrowsableAttribute("1")]
public Task DeleteEnablementStatusAsync(bool allProjects, Nullable`1<bool> includeBillableCommitters, IEnumerable`1<Guid> projectIds, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<List`1<AdvSecEnablementStatus>> GetEnablementStatusAsync(IEnumerable`1<Guid> projectIds, Nullable`1<DateTime> billingDate, Nullable`1<int> skip, Nullable`1<int> take, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<bool> GetEnableOnCreateHostAsync(bool enableOnCreateHost, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<bool> GetEnableOnCreateProjectAsync(Guid enableOnCreateProjectId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.AdvSecHttpClient/<SetEnableOnCreateHostAsync>d__13")]
[EditorBrowsableAttribute("1")]
public Task SetEnableOnCreateHostAsync(bool enableOnCreateHost, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.AdvSecHttpClient/<SetEnableOnCreateProjectAsync>d__14")]
[EditorBrowsableAttribute("1")]
public Task SetEnableOnCreateProjectAsync(Guid enableOnCreateProjectId, bool enableOnStatus, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.AdvSecHttpClient/<UpdateEnablementStatusAsync>d__15")]
[EditorBrowsableAttribute("1")]
public Task UpdateEnablementStatusAsync(IEnumerable`1<AdvSecEnablementUpdate> enablementUpdates, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<List`1<BillablePusher>> GetEstimatedBillablePushersOrgAsync(object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<List`1<BillablePusher>> GetEstimatedBillablePushersProjectAsync(string project, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<List`1<BillablePusher>> GetEstimatedBillablePushersProjectAsync(Guid project, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<List`1<BillableCommitter>> GetEstimatedBillableCommittersRepoAsync(string project, string repositoryId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<List`1<BillableCommitter>> GetEstimatedBillableCommittersRepoAsync(string project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<List`1<BillableCommitter>> GetEstimatedBillableCommittersRepoAsync(Guid project, string repositoryId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<List`1<BillableCommitter>> GetEstimatedBillableCommittersRepoAsync(Guid project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<bool> GetPermissionAsync(string projectName, string repositoryId, string permission, object userState, CancellationToken cancellationToken);
}
[GenerateAllConstantsAttribute("")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.AdvSecWebApiConstants : object {
    public static string AdvSecAreaId;
    public static string AdvSecAreaName;
    public static string AdvSecEnablementLocationIdString;
    public static Guid AdvSecEnablementLocationId;
    public static string AdvSecEnablementResourceName;
    public static string AdvSecEstimateOrgLocationIdString;
    public static Guid AdvSecEstimateOrgLocationId;
    public static string AdvSecEstimateOrgResourceName;
    public static string AdvSecEstimateProjectLocationIdString;
    public static Guid AdvSecEstimateProjectLocationId;
    public static string AdvSecEstimateProjectResourceName;
    public static string AdvSecEstimateRepoLocationIdString;
    public static Guid AdvSecEstimateRepoLocationId;
    public static string AdvSecEstimateRepoResourceName;
    public static string AdvSecPermissionsLocationIdString;
    public static Guid AdvSecPermissionsLocationId;
    public static string AdvSecPermissionsResourceName;
    public static string AdvSecBillableCommittersLocationIdString;
    public static Guid AdvSecBillableCommittersLocationId;
    public static string AdvSecBillableCommittersResourceName;
    private static AdvSecWebApiConstants();
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.AssociatedWorkItem : object {
    [CompilerGeneratedAttribute]
private string <WebUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssignedTo>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [DataMemberAttribute]
public string WebUrl { get; public set; }
    [DataMemberAttribute]
public int Id { get; public set; }
    [DataMemberAttribute]
public string Title { get; public set; }
    [DataMemberAttribute]
public string WorkItemType { get; public set; }
    [DataMemberAttribute]
public string State { get; public set; }
    [DataMemberAttribute]
public string AssignedTo { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [CompilerGeneratedAttribute]
public string get_WebUrl();
    [CompilerGeneratedAttribute]
public void set_WebUrl(string value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_WorkItemType();
    [CompilerGeneratedAttribute]
public void set_WorkItemType(string value);
    [CompilerGeneratedAttribute]
public string get_State();
    [CompilerGeneratedAttribute]
public void set_State(string value);
    [CompilerGeneratedAttribute]
public string get_AssignedTo();
    [CompilerGeneratedAttribute]
public void set_AssignedTo(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.AsyncGitOperationNotification : object {
    [CompilerGeneratedAttribute]
private int <OperationId>k__BackingField;
    [DataMemberAttribute]
public int OperationId { get; }
    public AsyncGitOperationNotification(int operationId);
    [CompilerGeneratedAttribute]
public int get_OperationId();
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.AsyncRefOperationCommitLevelEventNotification : AsyncGitOperationNotification {
    [CompilerGeneratedAttribute]
private string <CommitId>k__BackingField;
    [DataMemberAttribute]
public string CommitId { get; }
    public AsyncRefOperationCommitLevelEventNotification(int operationId, string commitId);
    [CompilerGeneratedAttribute]
public string get_CommitId();
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.AsyncRefOperationCompletedNotification : AsyncGitOperationNotification {
    [CompilerGeneratedAttribute]
private string <NewRefName>k__BackingField;
    [DataMemberAttribute]
public string NewRefName { get; public set; }
    public AsyncRefOperationCompletedNotification(int operationId, string newRefName);
    [CompilerGeneratedAttribute]
public string get_NewRefName();
    [CompilerGeneratedAttribute]
public void set_NewRefName(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.AsyncRefOperationConflictNotification : AsyncRefOperationCommitLevelEventNotification {
    public AsyncRefOperationConflictNotification(int operationId, string commitId);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.AsyncRefOperationGeneralFailureNotification : AsyncGitOperationNotification {
    public AsyncRefOperationGeneralFailureNotification(int operationId);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.AsyncRefOperationProgressNotification : AsyncRefOperationCommitLevelEventNotification {
    [CompilerGeneratedAttribute]
private double <Progress>k__BackingField;
    [DataMemberAttribute]
public double Progress { get; }
    public AsyncRefOperationProgressNotification(int operationId, string commitId, double progress);
    [CompilerGeneratedAttribute]
public double get_Progress();
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.AsyncRefOperationTimeoutNotification : AsyncGitOperationNotification {
    public AsyncRefOperationTimeoutNotification(int operationId);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Attachment : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityRef <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CreatedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentHash>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertiesCollection <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    private string m_token;
    [DataMemberAttribute]
public int Id { get; public set; }
    [DataMemberAttribute]
public string DisplayName { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
public IdentityRef Author { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> CreatedDate { get; public set; }
    [DataMemberAttribute]
public string ContentHash { get; public set; }
    [DataMemberAttribute]
public PropertiesCollection Properties { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    private Guid Microsoft.VisualStudio.Services.WebApi.ISecuredObject.NamespaceId { get; }
    private int Microsoft.VisualStudio.Services.WebApi.ISecuredObject.RequiredPermissions { get; }
    public Attachment(string token);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public IdentityRef get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(IdentityRef value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_CreatedDate();
    [CompilerGeneratedAttribute]
public void set_CreatedDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public string get_ContentHash();
    [CompilerGeneratedAttribute]
public void set_ContentHash(string value);
    [CompilerGeneratedAttribute]
public PropertiesCollection get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(PropertiesCollection value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
    private sealed virtual override Guid Microsoft.VisualStudio.Services.WebApi.ISecuredObject.get_NamespaceId();
    private sealed virtual override int Microsoft.VisualStudio.Services.WebApi.ISecuredObject.get_RequiredPermissions();
    private sealed virtual override string Microsoft.VisualStudio.Services.WebApi.ISecuredObject.GetToken();
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.AutoCompleteUpdatedEvent : RealTimePullRequestEvent {
    public AutoCompleteUpdatedEvent(int pullRequestId);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.BillableCommitter : object {
    [CompilerGeneratedAttribute]
private Guid <VSID>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RepoId>k__BackingField;
    [DataMemberAttribute]
public Guid VSID { get; public set; }
    [DataMemberAttribute]
public Guid RepoId { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_VSID();
    [CompilerGeneratedAttribute]
public void set_VSID(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_RepoId();
    [CompilerGeneratedAttribute]
public void set_RepoId(Guid value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.BillableCommitterDetail : BillableCommitter {
    [CompilerGeneratedAttribute]
private Guid <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProjectName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RepoName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitterEmail>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CommitTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PushId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <PushedTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PusherId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SamAccountName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MailNickName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [DataMemberAttribute]
public Guid ProjectId { get; public set; }
    [DataMemberAttribute]
public string ProjectName { get; public set; }
    [DataMemberAttribute]
public string RepoName { get; public set; }
    [DataMemberAttribute]
public string CommitId { get; public set; }
    [DataMemberAttribute]
public string CommitterEmail { get; public set; }
    [DataMemberAttribute]
public DateTime CommitTime { get; public set; }
    [DataMemberAttribute]
public int PushId { get; public set; }
    [DataMemberAttribute]
public DateTime PushedTime { get; public set; }
    [DataMemberAttribute]
public Guid PusherId { get; public set; }
    [DataMemberAttribute]
public string SamAccountName { get; public set; }
    [DataMemberAttribute]
public string MailNickName { get; public set; }
    [DataMemberAttribute]
public string DisplayName { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_ProjectId();
    [CompilerGeneratedAttribute]
public void set_ProjectId(Guid value);
    [CompilerGeneratedAttribute]
public string get_ProjectName();
    [CompilerGeneratedAttribute]
public void set_ProjectName(string value);
    [CompilerGeneratedAttribute]
public string get_RepoName();
    [CompilerGeneratedAttribute]
public void set_RepoName(string value);
    [CompilerGeneratedAttribute]
public string get_CommitId();
    [CompilerGeneratedAttribute]
public void set_CommitId(string value);
    [CompilerGeneratedAttribute]
public string get_CommitterEmail();
    [CompilerGeneratedAttribute]
public void set_CommitterEmail(string value);
    [CompilerGeneratedAttribute]
public DateTime get_CommitTime();
    [CompilerGeneratedAttribute]
public void set_CommitTime(DateTime value);
    [CompilerGeneratedAttribute]
public int get_PushId();
    [CompilerGeneratedAttribute]
public void set_PushId(int value);
    [CompilerGeneratedAttribute]
public DateTime get_PushedTime();
    [CompilerGeneratedAttribute]
public void set_PushedTime(DateTime value);
    [CompilerGeneratedAttribute]
public Guid get_PusherId();
    [CompilerGeneratedAttribute]
public void set_PusherId(Guid value);
    [CompilerGeneratedAttribute]
public string get_SamAccountName();
    [CompilerGeneratedAttribute]
public void set_SamAccountName(string value);
    [CompilerGeneratedAttribute]
public string get_MailNickName();
    [CompilerGeneratedAttribute]
public void set_MailNickName(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.BillablePusher : object {
    [CompilerGeneratedAttribute]
private Guid <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RepoId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <VSID>k__BackingField;
    [DataMemberAttribute]
public Guid ProjectId { get; public set; }
    [DataMemberAttribute]
public Guid RepoId { get; public set; }
    [DataMemberAttribute]
public Guid VSID { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_ProjectId();
    [CompilerGeneratedAttribute]
public void set_ProjectId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_RepoId();
    [CompilerGeneratedAttribute]
public void set_RepoId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_VSID();
    [CompilerGeneratedAttribute]
public void set_VSID(Guid value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.BranchUpdatedEvent : RealTimePullRequestEvent {
    [CompilerGeneratedAttribute]
private bool <IsSourceUpdate>k__BackingField;
    [DataMemberAttribute]
public bool IsSourceUpdate { get; private set; }
    public BranchUpdatedEvent(int pullRequestId, bool isSourceUpdate);
    [CompilerGeneratedAttribute]
public bool get_IsSourceUpdate();
    [CompilerGeneratedAttribute]
private void set_IsSourceUpdate(bool value);
}
[DataContractAttribute]
[KnownTypeAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcChange")]
[KnownTypeAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitChange")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Change`1 : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private T <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceServerItem>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionControlChangeType <ChangeType>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemContent <NewContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [DataMemberAttribute]
public T Item { get; public set; }
    [DataMemberAttribute]
public string SourceServerItem { get; public set; }
    [DataMemberAttribute]
public VersionControlChangeType ChangeType { get; public set; }
    [DataMemberAttribute]
public ItemContent NewContent { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [CompilerGeneratedAttribute]
public T get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(T value);
    [CompilerGeneratedAttribute]
public string get_SourceServerItem();
    [CompilerGeneratedAttribute]
public void set_SourceServerItem(string value);
    [CompilerGeneratedAttribute]
public VersionControlChangeType get_ChangeType();
    [CompilerGeneratedAttribute]
public void set_ChangeType(VersionControlChangeType value);
    [CompilerGeneratedAttribute]
public ItemContent get_NewContent();
    [CompilerGeneratedAttribute]
public void set_NewContent(ItemContent value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.ChangeCountDictionary : Dictionary`2<VersionControlChangeType, int> {
}
[DataContractAttribute]
[KnownTypeAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.ChangeList`1 : object {
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CommentTruncated>k__BackingField;
    [CompilerGeneratedAttribute]
private CheckinNote[] <Notes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OwnerDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <OwnerId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <SortDate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllChangesIncluded>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<VersionControlChangeType, int> <ChangeCounts>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Change`1<T>> <Changes>k__BackingField;
    [DataMemberAttribute]
public string Version { get; public set; }
    [DataMemberAttribute]
public string Comment { get; public set; }
    [DataMemberAttribute]
public bool CommentTruncated { get; public set; }
    [DataMemberAttribute]
public CheckinNote[] Notes { get; public set; }
    [DataMemberAttribute]
public string OwnerDisplayName { get; public set; }
    [DataMemberAttribute]
public string Owner { get; public set; }
    [DataMemberAttribute]
public Guid OwnerId { get; public set; }
    [DataMemberAttribute]
public DateTime CreationDate { get; public set; }
    [DataMemberAttribute]
public DateTime SortDate { get; public set; }
    [DataMemberAttribute]
public bool AllChangesIncluded { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<VersionControlChangeType, int> ChangeCounts { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<Change`1<T>> Changes { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public bool get_CommentTruncated();
    [CompilerGeneratedAttribute]
public void set_CommentTruncated(bool value);
    [CompilerGeneratedAttribute]
public CheckinNote[] get_Notes();
    [CompilerGeneratedAttribute]
public void set_Notes(CheckinNote[] value);
    [CompilerGeneratedAttribute]
public string get_OwnerDisplayName();
    [CompilerGeneratedAttribute]
public void set_OwnerDisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_Owner();
    [CompilerGeneratedAttribute]
public void set_Owner(string value);
    [CompilerGeneratedAttribute]
public Guid get_OwnerId();
    [CompilerGeneratedAttribute]
public void set_OwnerId(Guid value);
    [CompilerGeneratedAttribute]
public DateTime get_CreationDate();
    [CompilerGeneratedAttribute]
public void set_CreationDate(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_SortDate();
    [CompilerGeneratedAttribute]
public void set_SortDate(DateTime value);
    [CompilerGeneratedAttribute]
public bool get_AllChangesIncluded();
    [CompilerGeneratedAttribute]
public void set_AllChangesIncluded(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<VersionControlChangeType, int> get_ChangeCounts();
    [CompilerGeneratedAttribute]
public void set_ChangeCounts(Dictionary`2<VersionControlChangeType, int> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Change`1<T>> get_Changes();
    [CompilerGeneratedAttribute]
public void set_Changes(IEnumerable`1<Change`1<T>> value);
}
public static class Microsoft.TeamFoundation.SourceControl.WebApi.ChangeListHelpers : object {
    public static Dictionary`2<VersionControlChangeType, int> ComputeChangeCounts(IEnumerable`1<TfvcChange> changes);
    public static Dictionary`2<VersionControlChangeType, int> ComputeChangeCounts(IEnumerable`1<GitChange> changes);
    public static void IncrementChangeCounts(Dictionary`2<VersionControlChangeType, int> changeCounts, VersionControlChangeType changeType, int count);
    public static void IncrementChangeFlagCount(Dictionary`2<VersionControlChangeType, int> changeCounts, VersionControlChangeType changeFlag, int count);
    private static Dictionary`2<VersionControlChangeType, int> ComputeChangeCountsInternal(IEnumerable`1<Change`1<T>> changes);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.ChangeListSearchCriteria : object {
    private Nullable`1<DateTime> m_fromDate;
    private Nullable`1<DateTime> m_toDate;
    [CompilerGeneratedAttribute]
private string <ItemPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ItemPaths>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <User>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FromDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FromVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CompareVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FollowRenames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeDeletes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Top>k__BackingField;
    [DataMemberAttribute]
public string ItemPath { get; public set; }
    [DataMemberAttribute]
[EditorBrowsableAttribute("1")]
public IEnumerable`1<string> ItemPaths { get; public set; }
    [DataMemberAttribute]
public string ItemVersion { get; public set; }
    [DataMemberAttribute]
public string User { get; public set; }
    [DataMemberAttribute]
public string FromDate { get; public set; }
    [DataMemberAttribute]
public string ToDate { get; public set; }
    [DataMemberAttribute]
public string FromVersion { get; public set; }
    [DataMemberAttribute]
public string ToVersion { get; public set; }
    [DataMemberAttribute]
public string CompareVersion { get; public set; }
    [DataMemberAttribute]
public bool FollowRenames { get; public set; }
    [DataMemberAttribute]
public bool ExcludeDeletes { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> Skip { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> Top { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ItemPath();
    [CompilerGeneratedAttribute]
public void set_ItemPath(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ItemPaths();
    [CompilerGeneratedAttribute]
public void set_ItemPaths(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_ItemVersion();
    [CompilerGeneratedAttribute]
public void set_ItemVersion(string value);
    [CompilerGeneratedAttribute]
public string get_User();
    [CompilerGeneratedAttribute]
public void set_User(string value);
    [CompilerGeneratedAttribute]
public string get_FromDate();
    [CompilerGeneratedAttribute]
public void set_FromDate(string value);
    [CompilerGeneratedAttribute]
public string get_ToDate();
    [CompilerGeneratedAttribute]
public void set_ToDate(string value);
    [CompilerGeneratedAttribute]
public string get_FromVersion();
    [CompilerGeneratedAttribute]
public void set_FromVersion(string value);
    [CompilerGeneratedAttribute]
public string get_ToVersion();
    [CompilerGeneratedAttribute]
public void set_ToVersion(string value);
    [CompilerGeneratedAttribute]
public string get_CompareVersion();
    [CompilerGeneratedAttribute]
public void set_CompareVersion(string value);
    [CompilerGeneratedAttribute]
public bool get_FollowRenames();
    [CompilerGeneratedAttribute]
public void set_FollowRenames(bool value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeDeletes();
    [CompilerGeneratedAttribute]
public void set_ExcludeDeletes(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Skip();
    [CompilerGeneratedAttribute]
public void set_Skip(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(Nullable`1<int> value);
    public void SetFromDate(DateTime fromDate);
    public void SetToDate(DateTime toDate);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.CheckinNote : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    public virtual string ToString();
}
[EditorBrowsableAttribute("1")]
[GenerateAllConstantsAttribute("")]
public static class Microsoft.TeamFoundation.SourceControl.WebApi.CodeReviewDiscussionIdentityConstants : object {
    public static string CodeReviewRefUpdatedByIdentity;
    public static string CodeReviewVotedByIdentity;
    public static string CodeReviewVotedByInitiatorIdentity;
    public static string CodeReviewResetAllVotesInitiatorIdentity;
    public static string CodeReviewResetMultipleVotesInitiatorIdentity;
    public static string CodeReviewResetMultipleVotesExampleVoterIdentities;
    public static string CodeReviewStatusUpdatedByIdentity;
    public static string CodeReviewReviewersUpdatedByIdentity;
    public static string CodeReviewReviewersUpdatedAddedIdentity;
    public static string CodeReviewReviewersUpdatedChangedIdentity;
    public static string CodeReviewReviewersUpdatedRemovedIdentity;
    public static string CodeReviewSourceBranchChangedByIdentity;
    public static string CodeReviewAutoCompleteUpdatedByIdentity;
    public static string CodeReviewIsDraftUpdatedByIdentity;
    public static string CodeReviewAssociatedStatusUpdatedByIdentity;
    public static string CodeReviewRequiredReviewerExampleReviewerIdentities;
    private static CodeReviewDiscussionIdentityConstants();
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Comment : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private short <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private short <ParentCommentId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ThreadId>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityRef <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <PublishedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastUpdatedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastContentUpdatedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeleted>k__BackingField;
    [CompilerGeneratedAttribute]
private CommentType <CommentType>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<IdentityRef> <UsersLiked>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [DataMemberAttribute]
public short Id { get; public set; }
    [DataMemberAttribute]
public short ParentCommentId { get; public set; }
    internal int ThreadId { get; internal set; }
    [DataMemberAttribute]
public IdentityRef Author { get; public set; }
    [DataMemberAttribute]
public string Content { get; public set; }
    [DataMemberAttribute]
public DateTime PublishedDate { get; public set; }
    [DataMemberAttribute]
public DateTime LastUpdatedDate { get; public set; }
    [DataMemberAttribute]
public DateTime LastContentUpdatedDate { get; public set; }
    [DataMemberAttribute]
public bool IsDeleted { get; public set; }
    [DataMemberAttribute]
public CommentType CommentType { get; public set; }
    [DataMemberAttribute]
public IList`1<IdentityRef> UsersLiked { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    [CompilerGeneratedAttribute]
public short get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(short value);
    [CompilerGeneratedAttribute]
public short get_ParentCommentId();
    [CompilerGeneratedAttribute]
public void set_ParentCommentId(short value);
    [CompilerGeneratedAttribute]
internal int get_ThreadId();
    [CompilerGeneratedAttribute]
internal void set_ThreadId(int value);
    [CompilerGeneratedAttribute]
public IdentityRef get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(IdentityRef value);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public DateTime get_PublishedDate();
    [CompilerGeneratedAttribute]
public void set_PublishedDate(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastUpdatedDate();
    [CompilerGeneratedAttribute]
public void set_LastUpdatedDate(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastContentUpdatedDate();
    [CompilerGeneratedAttribute]
public void set_LastContentUpdatedDate(DateTime value);
    [CompilerGeneratedAttribute]
public bool get_IsDeleted();
    [CompilerGeneratedAttribute]
public void set_IsDeleted(bool value);
    [CompilerGeneratedAttribute]
public CommentType get_CommentType();
    [CompilerGeneratedAttribute]
public void set_CommentType(CommentType value);
    [CompilerGeneratedAttribute]
public IList`1<IdentityRef> get_UsersLiked();
    [CompilerGeneratedAttribute]
public void set_UsersLiked(IList`1<IdentityRef> value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.CommentIterationContext : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private short <FirstComparingIteration>k__BackingField;
    [CompilerGeneratedAttribute]
private short <SecondComparingIteration>k__BackingField;
    [DataMemberAttribute]
public short FirstComparingIteration { get; public set; }
    [DataMemberAttribute]
public short SecondComparingIteration { get; public set; }
    [CompilerGeneratedAttribute]
public short get_FirstComparingIteration();
    [CompilerGeneratedAttribute]
public void set_FirstComparingIteration(short value);
    [CompilerGeneratedAttribute]
public short get_SecondComparingIteration();
    [CompilerGeneratedAttribute]
public void set_SecondComparingIteration(short value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.CommentPosition : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private int <Line>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Offset>k__BackingField;
    [DataMemberAttribute]
public int Line { get; public set; }
    [DataMemberAttribute]
public int Offset { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Line();
    [CompilerGeneratedAttribute]
public void set_Line(int value);
    [CompilerGeneratedAttribute]
public int get_Offset();
    [CompilerGeneratedAttribute]
public void set_Offset(int value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.CommentThread : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <PublishedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastUpdatedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<Comment> <Comments>k__BackingField;
    [CompilerGeneratedAttribute]
private CommentThreadStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private CommentThreadContext <ThreadContext>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertiesCollection <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<string, IdentityRef> <Identities>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeleted>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [DataMemberAttribute]
public int Id { get; public set; }
    [DataMemberAttribute]
public DateTime PublishedDate { get; public set; }
    [DataMemberAttribute]
public DateTime LastUpdatedDate { get; public set; }
    [DataMemberAttribute]
public IList`1<Comment> Comments { get; public set; }
    [DataMemberAttribute]
public CommentThreadStatus Status { get; public set; }
    [DataMemberAttribute]
public CommentThreadContext ThreadContext { get; public set; }
    [DataMemberAttribute]
public PropertiesCollection Properties { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<string, IdentityRef> Identities { get; public set; }
    [DataMemberAttribute]
public bool IsDeleted { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public DateTime get_PublishedDate();
    [CompilerGeneratedAttribute]
public void set_PublishedDate(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_LastUpdatedDate();
    [CompilerGeneratedAttribute]
public void set_LastUpdatedDate(DateTime value);
    [CompilerGeneratedAttribute]
public IList`1<Comment> get_Comments();
    [CompilerGeneratedAttribute]
public void set_Comments(IList`1<Comment> value);
    [CompilerGeneratedAttribute]
public CommentThreadStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(CommentThreadStatus value);
    [CompilerGeneratedAttribute]
public CommentThreadContext get_ThreadContext();
    [CompilerGeneratedAttribute]
public void set_ThreadContext(CommentThreadContext value);
    [CompilerGeneratedAttribute]
public PropertiesCollection get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(PropertiesCollection value);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, IdentityRef> get_Identities();
    [CompilerGeneratedAttribute]
public void set_Identities(Dictionary`2<string, IdentityRef> value);
    [CompilerGeneratedAttribute]
public bool get_IsDeleted();
    [CompilerGeneratedAttribute]
public void set_IsDeleted(bool value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.CommentThreadContext : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private string <FilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private CommentPosition <LeftFileStart>k__BackingField;
    [CompilerGeneratedAttribute]
private CommentPosition <LeftFileEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private CommentPosition <RightFileStart>k__BackingField;
    [CompilerGeneratedAttribute]
private CommentPosition <RightFileEnd>k__BackingField;
    [DataMemberAttribute]
public string FilePath { get; public set; }
    [DataMemberAttribute]
public CommentPosition LeftFileStart { get; public set; }
    [DataMemberAttribute]
public CommentPosition LeftFileEnd { get; public set; }
    [DataMemberAttribute]
public CommentPosition RightFileStart { get; public set; }
    [DataMemberAttribute]
public CommentPosition RightFileEnd { get; public set; }
    [CompilerGeneratedAttribute]
public string get_FilePath();
    [CompilerGeneratedAttribute]
public void set_FilePath(string value);
    [CompilerGeneratedAttribute]
public CommentPosition get_LeftFileStart();
    [CompilerGeneratedAttribute]
public void set_LeftFileStart(CommentPosition value);
    [CompilerGeneratedAttribute]
public CommentPosition get_LeftFileEnd();
    [CompilerGeneratedAttribute]
public void set_LeftFileEnd(CommentPosition value);
    [CompilerGeneratedAttribute]
public CommentPosition get_RightFileStart();
    [CompilerGeneratedAttribute]
public void set_RightFileStart(CommentPosition value);
    [CompilerGeneratedAttribute]
public CommentPosition get_RightFileEnd();
    [CompilerGeneratedAttribute]
public void set_RightFileEnd(CommentPosition value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.CommentThreadStatus : Enum {
    public int value__;
    [EnumMemberAttribute]
public static CommentThreadStatus Unknown;
    [EnumMemberAttribute]
public static CommentThreadStatus Active;
    [EnumMemberAttribute]
public static CommentThreadStatus Fixed;
    [EnumMemberAttribute]
public static CommentThreadStatus WontFix;
    [EnumMemberAttribute]
public static CommentThreadStatus Closed;
    [EnumMemberAttribute]
public static CommentThreadStatus ByDesign;
    [EnumMemberAttribute]
public static CommentThreadStatus Pending;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.CommentTrackingCriteria : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private int <FirstComparingIteration>k__BackingField;
    [CompilerGeneratedAttribute]
private int <SecondComparingIteration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OrigFilePath>k__BackingField;
    [CompilerGeneratedAttribute]
private CommentPosition <OrigLeftFileStart>k__BackingField;
    [CompilerGeneratedAttribute]
private CommentPosition <OrigLeftFileEnd>k__BackingField;
    [CompilerGeneratedAttribute]
private CommentPosition <OrigRightFileStart>k__BackingField;
    [CompilerGeneratedAttribute]
private CommentPosition <OrigRightFileEnd>k__BackingField;
    [DataMemberAttribute]
public int FirstComparingIteration { get; public set; }
    [DataMemberAttribute]
public int SecondComparingIteration { get; public set; }
    [DataMemberAttribute]
public string OrigFilePath { get; public set; }
    [DataMemberAttribute]
public CommentPosition OrigLeftFileStart { get; public set; }
    [DataMemberAttribute]
public CommentPosition OrigLeftFileEnd { get; public set; }
    [DataMemberAttribute]
public CommentPosition OrigRightFileStart { get; public set; }
    [DataMemberAttribute]
public CommentPosition OrigRightFileEnd { get; public set; }
    [CompilerGeneratedAttribute]
public int get_FirstComparingIteration();
    [CompilerGeneratedAttribute]
public void set_FirstComparingIteration(int value);
    [CompilerGeneratedAttribute]
public int get_SecondComparingIteration();
    [CompilerGeneratedAttribute]
public void set_SecondComparingIteration(int value);
    [CompilerGeneratedAttribute]
public string get_OrigFilePath();
    [CompilerGeneratedAttribute]
public void set_OrigFilePath(string value);
    [CompilerGeneratedAttribute]
public CommentPosition get_OrigLeftFileStart();
    [CompilerGeneratedAttribute]
public void set_OrigLeftFileStart(CommentPosition value);
    [CompilerGeneratedAttribute]
public CommentPosition get_OrigLeftFileEnd();
    [CompilerGeneratedAttribute]
public void set_OrigLeftFileEnd(CommentPosition value);
    [CompilerGeneratedAttribute]
public CommentPosition get_OrigRightFileStart();
    [CompilerGeneratedAttribute]
public void set_OrigRightFileStart(CommentPosition value);
    [CompilerGeneratedAttribute]
public CommentPosition get_OrigRightFileEnd();
    [CompilerGeneratedAttribute]
public void set_OrigRightFileEnd(CommentPosition value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.CommentType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static CommentType Unknown;
    [EnumMemberAttribute]
public static CommentType Text;
    [EnumMemberAttribute]
public static CommentType CodeChange;
    [EnumMemberAttribute]
public static CommentType System;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.CompletionErrorsEvent : RealTimePullRequestEvent {
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [DataMemberAttribute]
public string ErrorMessage { get; private set; }
    public CompletionErrorsEvent(int pullRequestId, string errorMessage);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
private void set_ErrorMessage(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.DiscussionsUpdatedEvent : RealTimePullRequestEvent {
    public DiscussionsUpdatedEvent(int pullRequestId);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.FileContentMetadata : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private int <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EncodingWithBom>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Extension>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBinary>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsImage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VisualStudioWebLink>k__BackingField;
    [DataMemberAttribute]
public int Encoding { get; public set; }
    [IgnoreDataMemberAttribute]
public bool EncodingWithBom { get; public set; }
    [DataMemberAttribute]
public string ContentType { get; public set; }
    [DataMemberAttribute]
public string FileName { get; public set; }
    [DataMemberAttribute]
public string Extension { get; public set; }
    [DataMemberAttribute]
public bool IsBinary { get; public set; }
    [DataMemberAttribute]
public bool IsImage { get; public set; }
    [DataMemberAttribute]
public string VisualStudioWebLink { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(int value);
    [CompilerGeneratedAttribute]
public bool get_EncodingWithBom();
    [CompilerGeneratedAttribute]
public void set_EncodingWithBom(bool value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_Extension();
    [CompilerGeneratedAttribute]
public void set_Extension(string value);
    [CompilerGeneratedAttribute]
public bool get_IsBinary();
    [CompilerGeneratedAttribute]
public void set_IsBinary(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsImage();
    [CompilerGeneratedAttribute]
public void set_IsImage(bool value);
    [CompilerGeneratedAttribute]
public string get_VisualStudioWebLink();
    [CompilerGeneratedAttribute]
public void set_VisualStudioWebLink(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.FileDiff : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<LineDiffBlock> <LineDiffBlocks>k__BackingField;
    [DataMemberAttribute]
public string Path { get; public set; }
    [DataMemberAttribute]
public string OriginalPath { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<LineDiffBlock> LineDiffBlocks { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_OriginalPath();
    [CompilerGeneratedAttribute]
public void set_OriginalPath(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<LineDiffBlock> get_LineDiffBlocks();
    [CompilerGeneratedAttribute]
public void set_LineDiffBlocks(IEnumerable`1<LineDiffBlock> value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.FileDiffParams : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalPath>k__BackingField;
    [DataMemberAttribute]
public string Path { get; public set; }
    [DataMemberAttribute]
public string OriginalPath { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_OriginalPath();
    [CompilerGeneratedAttribute]
public void set_OriginalPath(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.FileDiffsCriteria : object {
    [CompilerGeneratedAttribute]
private string <BaseVersionCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetVersionCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<FileDiffParams> <FileDiffParams>k__BackingField;
    [DataMemberAttribute]
public string BaseVersionCommit { get; public set; }
    [DataMemberAttribute]
public string TargetVersionCommit { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<FileDiffParams> FileDiffParams { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BaseVersionCommit();
    [CompilerGeneratedAttribute]
public void set_BaseVersionCommit(string value);
    [CompilerGeneratedAttribute]
public string get_TargetVersionCommit();
    [CompilerGeneratedAttribute]
public void set_TargetVersionCommit(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<FileDiffParams> get_FileDiffParams();
    [CompilerGeneratedAttribute]
public void set_FileDiffParams(IEnumerable`1<FileDiffParams> value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitAnnotatedTag : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private GitObject <TaggedObject>k__BackingField;
    [CompilerGeneratedAttribute]
private GitUserDate <TaggedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string ObjectId { get; public set; }
    [DataMemberAttribute]
public GitObject TaggedObject { get; public set; }
    [DataMemberAttribute]
public GitUserDate TaggedBy { get; public set; }
    [DataMemberAttribute]
public string Message { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ObjectId();
    [CompilerGeneratedAttribute]
public void set_ObjectId(string value);
    [CompilerGeneratedAttribute]
public GitObject get_TaggedObject();
    [CompilerGeneratedAttribute]
public void set_TaggedObject(GitObject value);
    [CompilerGeneratedAttribute]
public GitUserDate get_TaggedBy();
    [CompilerGeneratedAttribute]
public void set_TaggedBy(GitUserDate value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
public enum Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncOperationStatus : Enum {
    public byte value__;
    public static GitAsyncOperationStatus Queued;
    public static GitAsyncOperationStatus InProgress;
    public static GitAsyncOperationStatus Completed;
    public static GitAsyncOperationStatus Failed;
    public static GitAsyncOperationStatus Abandoned;
}
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncOperationType : Enum {
    public byte value__;
    public static GitAsyncOperationType CherryPick;
    public static GitAsyncOperationType Revert;
    public static GitAsyncOperationType Import;
    public static GitAsyncOperationType Fork;
    public static GitAsyncOperationType Merge;
}
[DataContractAttribute]
public abstract class Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperation : object {
    [CompilerGeneratedAttribute]
private GitAsyncRefOperationParameters <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private GitAsyncOperationStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private GitAsyncRefOperationDetail <DetailedStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [DataMemberAttribute]
public GitAsyncRefOperationParameters Parameters { get; public set; }
    [DataMemberAttribute]
public GitAsyncOperationStatus Status { get; public set; }
    [DataMemberAttribute]
public GitAsyncRefOperationDetail DetailedStatus { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [CompilerGeneratedAttribute]
public GitAsyncRefOperationParameters get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(GitAsyncRefOperationParameters value);
    [CompilerGeneratedAttribute]
public GitAsyncOperationStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(GitAsyncOperationStatus value);
    [CompilerGeneratedAttribute]
public GitAsyncRefOperationDetail get_DetailedStatus();
    [CompilerGeneratedAttribute]
public void set_DetailedStatus(GitAsyncRefOperationDetail value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationDetail : object {
    [CompilerGeneratedAttribute]
private string <CurrentCommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private double <Progress>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Conflict>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Timedout>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<GitAsyncRefOperationFailureStatus> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FailureMessage>k__BackingField;
    [DataMemberAttribute]
public string CurrentCommitId { get; public set; }
    [DataMemberAttribute]
public double Progress { get; public set; }
    [DataMemberAttribute]
public bool Conflict { get; public set; }
    [DataMemberAttribute]
public bool Timedout { get; public set; }
    [DataMemberAttribute]
public Nullable`1<GitAsyncRefOperationFailureStatus> Status { get; public set; }
    [DataMemberAttribute]
public string FailureMessage { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CurrentCommitId();
    [CompilerGeneratedAttribute]
public void set_CurrentCommitId(string value);
    [CompilerGeneratedAttribute]
public double get_Progress();
    [CompilerGeneratedAttribute]
public void set_Progress(double value);
    [CompilerGeneratedAttribute]
public bool get_Conflict();
    [CompilerGeneratedAttribute]
public void set_Conflict(bool value);
    [CompilerGeneratedAttribute]
public bool get_Timedout();
    [CompilerGeneratedAttribute]
public void set_Timedout(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<GitAsyncRefOperationFailureStatus> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<GitAsyncRefOperationFailureStatus> value);
    [CompilerGeneratedAttribute]
public string get_FailureMessage();
    [CompilerGeneratedAttribute]
public void set_FailureMessage(string value);
}
[DataContractAttribute]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationFailureStatus : Enum {
    public int value__;
    public static GitAsyncRefOperationFailureStatus None;
    public static GitAsyncRefOperationFailureStatus InvalidRefName;
    public static GitAsyncRefOperationFailureStatus RefNameConflict;
    public static GitAsyncRefOperationFailureStatus CreateBranchPermissionRequired;
    public static GitAsyncRefOperationFailureStatus WritePermissionRequired;
    public static GitAsyncRefOperationFailureStatus TargetBranchDeleted;
    public static GitAsyncRefOperationFailureStatus GitObjectTooLarge;
    public static GitAsyncRefOperationFailureStatus OperationIndentityNotFound;
    public static GitAsyncRefOperationFailureStatus AsyncOperationNotFound;
    public static GitAsyncRefOperationFailureStatus Other;
    public static GitAsyncRefOperationFailureStatus EmptyCommitterSignature;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationParameters : object {
    [CompilerGeneratedAttribute]
private GitRepository <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private GitAsyncRefOperationSource <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OntoRefName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GeneratedRefName>k__BackingField;
    [DataMemberAttribute]
public GitRepository Repository { get; public set; }
    [DataMemberAttribute]
public GitAsyncRefOperationSource Source { get; public set; }
    [DataMemberAttribute]
public string OntoRefName { get; public set; }
    [DataMemberAttribute]
public string GeneratedRefName { get; public set; }
    [CompilerGeneratedAttribute]
public GitRepository get_Repository();
    [CompilerGeneratedAttribute]
public void set_Repository(GitRepository value);
    [CompilerGeneratedAttribute]
public GitAsyncRefOperationSource get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(GitAsyncRefOperationSource value);
    [CompilerGeneratedAttribute]
public string get_OntoRefName();
    [CompilerGeneratedAttribute]
public void set_OntoRefName(string value);
    [CompilerGeneratedAttribute]
public string get_GeneratedRefName();
    [CompilerGeneratedAttribute]
public void set_GeneratedRefName(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitAsyncRefOperationSource : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PullRequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private GitCommitRef[] <CommitList>k__BackingField;
    [DataMemberAttribute]
public Nullable`1<int> PullRequestId { get; public set; }
    [DataMemberAttribute]
public GitCommitRef[] CommitList { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PullRequestId();
    [CompilerGeneratedAttribute]
public void set_PullRequestId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public GitCommitRef[] get_CommitList();
    [CompilerGeneratedAttribute]
public void set_CommitList(GitCommitRef[] value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitBaseVersionDescriptor : GitVersionDescriptor {
    [CompilerGeneratedAttribute]
private GitVersionType <VersionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private GitVersionOptions <VersionOptions>k__BackingField;
    [DataMemberAttribute]
public GitVersionType VersionType { get; public set; }
    [DataMemberAttribute]
public string Version { get; public set; }
    [DataMemberAttribute]
public GitVersionOptions VersionOptions { get; public set; }
    [CompilerGeneratedAttribute]
public virtual GitVersionType get_VersionType();
    [CompilerGeneratedAttribute]
public virtual void set_VersionType(GitVersionType value);
    [CompilerGeneratedAttribute]
public virtual string get_Version();
    [CompilerGeneratedAttribute]
public virtual void set_Version(string value);
    [CompilerGeneratedAttribute]
public virtual GitVersionOptions get_VersionOptions();
    [CompilerGeneratedAttribute]
public virtual void set_VersionOptions(GitVersionOptions value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitBlobRef : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private string <ObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [DataMemberAttribute]
public string ObjectId { get; public set; }
    [DataMemberAttribute]
public long Size { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ObjectId();
    [CompilerGeneratedAttribute]
public void set_ObjectId(string value);
    [CompilerGeneratedAttribute]
public long get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(long value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitBranchStats : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private GitCommitRef <Commit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AheadCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BehindCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBaseVersion>k__BackingField;
    [DataMemberAttribute]
public GitCommitRef Commit { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public int AheadCount { get; public set; }
    [DataMemberAttribute]
public int BehindCount { get; public set; }
    [DataMemberAttribute]
public bool IsBaseVersion { get; public set; }
    [EditorBrowsableAttribute("1")]
public GitBranchStats(GitCommitRef commit, string name, ISecuredObject securedObject);
    public GitBranchStats(GitCommit commit, string name);
    public GitBranchStats(GitCommitRef commit, string name, int aheadCount, int behindCount);
    [EditorBrowsableAttribute("1")]
public GitBranchStats(GitCommitRef commit, string name, int aheadCount, int behindCount, ISecuredObject securedObject);
    [CompilerGeneratedAttribute]
public GitCommitRef get_Commit();
    [CompilerGeneratedAttribute]
public void set_Commit(GitCommitRef value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_AheadCount();
    [CompilerGeneratedAttribute]
public void set_AheadCount(int value);
    [CompilerGeneratedAttribute]
public int get_BehindCount();
    [CompilerGeneratedAttribute]
public void set_BehindCount(int value);
    [CompilerGeneratedAttribute]
public bool get_IsBaseVersion();
    [CompilerGeneratedAttribute]
public void set_IsBaseVersion(bool value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
    private static string ResolveBranchName(string nameIn);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitChange : Change`1<GitItem> {
    [CompilerGeneratedAttribute]
private string <OriginalPath>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ChangeId>k__BackingField;
    [CompilerGeneratedAttribute]
private GitTemplate <NewContentTemplate>k__BackingField;
    [DataMemberAttribute]
public string OriginalPath { get; public set; }
    [DataMemberAttribute]
public int ChangeId { get; public set; }
    [EditorBrowsableAttribute("1")]
[DataMemberAttribute]
public GitTemplate NewContentTemplate { get; public set; }
    [CompilerGeneratedAttribute]
public string get_OriginalPath();
    [CompilerGeneratedAttribute]
public void set_OriginalPath(string value);
    [CompilerGeneratedAttribute]
public int get_ChangeId();
    [CompilerGeneratedAttribute]
public void set_ChangeId(int value);
    [CompilerGeneratedAttribute]
public GitTemplate get_NewContentTemplate();
    [CompilerGeneratedAttribute]
public void set_NewContentTemplate(GitTemplate value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitCherryPick : GitAsyncRefOperation {
    [CompilerGeneratedAttribute]
private int <CherryPickId>k__BackingField;
    [DataMemberAttribute]
public int CherryPickId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_CherryPickId();
    [CompilerGeneratedAttribute]
public void set_CherryPickId(int value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit : GitCommitRef {
    [CompilerGeneratedAttribute]
private string <TreeId>k__BackingField;
    [DataMemberAttribute]
public string TreeId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TreeId();
    [CompilerGeneratedAttribute]
public void set_TreeId(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitChanges : object {
    [CompilerGeneratedAttribute]
private ChangeCountDictionary <ChangeCounts>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<GitChange> <Changes>k__BackingField;
    [DataMemberAttribute]
public ChangeCountDictionary ChangeCounts { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<GitChange> Changes { get; public set; }
    [CompilerGeneratedAttribute]
public ChangeCountDictionary get_ChangeCounts();
    [CompilerGeneratedAttribute]
public void set_ChangeCounts(ChangeCountDictionary value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<GitChange> get_Changes();
    [CompilerGeneratedAttribute]
public void set_Changes(IEnumerable`1<GitChange> value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitDiffs : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private bool <AllChangesIncluded>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<VersionControlChangeType, int> <ChangeCounts>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<GitChange> <Changes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommonCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <AheadCount>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <BehindCount>k__BackingField;
    [DataMemberAttribute]
public bool AllChangesIncluded { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<VersionControlChangeType, int> ChangeCounts { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<GitChange> Changes { get; public set; }
    [DataMemberAttribute]
public string CommonCommit { get; public set; }
    [DataMemberAttribute]
public string BaseCommit { get; public set; }
    [DataMemberAttribute]
public string TargetCommit { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> AheadCount { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> BehindCount { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_AllChangesIncluded();
    [CompilerGeneratedAttribute]
public void set_AllChangesIncluded(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<VersionControlChangeType, int> get_ChangeCounts();
    [CompilerGeneratedAttribute]
public void set_ChangeCounts(Dictionary`2<VersionControlChangeType, int> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<GitChange> get_Changes();
    [CompilerGeneratedAttribute]
public void set_Changes(IEnumerable`1<GitChange> value);
    [CompilerGeneratedAttribute]
public string get_CommonCommit();
    [CompilerGeneratedAttribute]
public void set_CommonCommit(string value);
    [CompilerGeneratedAttribute]
public string get_BaseCommit();
    [CompilerGeneratedAttribute]
public void set_BaseCommit(string value);
    [CompilerGeneratedAttribute]
public string get_TargetCommit();
    [CompilerGeneratedAttribute]
public void set_TargetCommit(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_AheadCount();
    [CompilerGeneratedAttribute]
public void set_AheadCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_BehindCount();
    [CompilerGeneratedAttribute]
public void set_BehindCount(Nullable`1<int> value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
[KnownTypeAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCommit")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitRef : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private string <CommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private GitUserDate <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private GitUserDate <Committer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CommentTruncated>k__BackingField;
    [CompilerGeneratedAttribute]
private ChangeCountDictionary <ChangeCounts>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<GitChange> <Changes>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <Parents>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoteUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<GitStatus> <Statuses>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ResourceRef> <WorkItems>k__BackingField;
    [CompilerGeneratedAttribute]
private GitPushRef <Push>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CommitTooManyChanges>k__BackingField;
    [DataMemberAttribute]
public string CommitId { get; public set; }
    [DataMemberAttribute]
public GitUserDate Author { get; public set; }
    [DataMemberAttribute]
public GitUserDate Committer { get; public set; }
    [DataMemberAttribute]
public string Comment { get; public set; }
    [DataMemberAttribute]
public bool CommentTruncated { get; public set; }
    [DataMemberAttribute]
public ChangeCountDictionary ChangeCounts { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<GitChange> Changes { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<string> Parents { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public string RemoteUrl { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    [DataMemberAttribute]
public IList`1<GitStatus> Statuses { get; public set; }
    [DataMemberAttribute]
[EditorBrowsableAttribute("1")]
public IList`1<ResourceRef> WorkItems { get; public set; }
    [DataMemberAttribute]
public GitPushRef Push { get; public set; }
    [DataMemberAttribute]
public bool CommitTooManyChanges { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CommitId();
    [CompilerGeneratedAttribute]
public void set_CommitId(string value);
    [CompilerGeneratedAttribute]
public GitUserDate get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(GitUserDate value);
    [CompilerGeneratedAttribute]
public GitUserDate get_Committer();
    [CompilerGeneratedAttribute]
public void set_Committer(GitUserDate value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public bool get_CommentTruncated();
    [CompilerGeneratedAttribute]
public void set_CommentTruncated(bool value);
    [CompilerGeneratedAttribute]
public ChangeCountDictionary get_ChangeCounts();
    [CompilerGeneratedAttribute]
public void set_ChangeCounts(ChangeCountDictionary value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<GitChange> get_Changes();
    [CompilerGeneratedAttribute]
public void set_Changes(IEnumerable`1<GitChange> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_Parents();
    [CompilerGeneratedAttribute]
public void set_Parents(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_RemoteUrl();
    [CompilerGeneratedAttribute]
public void set_RemoteUrl(string value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
    [CompilerGeneratedAttribute]
public IList`1<GitStatus> get_Statuses();
    [CompilerGeneratedAttribute]
public void set_Statuses(IList`1<GitStatus> value);
    [CompilerGeneratedAttribute]
public IList`1<ResourceRef> get_WorkItems();
    [CompilerGeneratedAttribute]
public void set_WorkItems(IList`1<ResourceRef> value);
    [CompilerGeneratedAttribute]
public GitPushRef get_Push();
    [CompilerGeneratedAttribute]
public void set_Push(GitPushRef value);
    [CompilerGeneratedAttribute]
public bool get_CommitTooManyChanges();
    [CompilerGeneratedAttribute]
public void set_CommitTooManyChanges(bool value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitCommitToCreate : object {
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private GitRef <BaseRef>k__BackingField;
    [CompilerGeneratedAttribute]
private GitPathAction[] <PathActions>k__BackingField;
    [DataMemberAttribute]
public string Comment { get; public set; }
    [DataMemberAttribute]
public GitRef BaseRef { get; public set; }
    [DataMemberAttribute]
public GitPathAction[] PathActions { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public GitRef get_BaseRef();
    [CompilerGeneratedAttribute]
public void set_BaseRef(GitRef value);
    [CompilerGeneratedAttribute]
public GitPathAction[] get_PathActions();
    [CompilerGeneratedAttribute]
public void set_PathActions(GitPathAction[] value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase : VssHttpClientBase {
    public GitCompatHttpClientBase(Uri baseUrl, VssCredentials credentials);
    public GitCompatHttpClientBase(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings);
    public GitCompatHttpClientBase(Uri baseUrl, VssCredentials credentials, DelegatingHandler[] handlers);
    public GitCompatHttpClientBase(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings, DelegatingHandler[] handlers);
    public GitCompatHttpClientBase(Uri baseUrl, HttpMessageHandler pipeline, bool disposeHandler);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitRepository>> GetRepositoriesAsync(string project, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitRepository>> GetRepositoriesAsync(string project, Nullable`1<bool> includeLinks, object userState);
    public virtual Task`1<List`1<GitRepository>> GetRepositoriesAsync(Guid project, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitRepository>> GetRepositoriesAsync(Guid project, Nullable`1<bool> includeLinks, object userState);
    public virtual Task`1<List`1<GitRepository>> GetRepositoriesAsync(Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitRepository>> GetRepositoriesAsync(Nullable`1<bool> includeLinks, object userState);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitPullRequest> CreatePullRequestAsync(GitPullRequest gitPullRequestToCreate, string repositoryId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitPullRequest> CreatePullRequestAsync(GitPullRequest gitPullRequestToCreate, Guid repositoryId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitPullRequest> CreatePullRequestAsync(GitPullRequest gitPullRequestToCreate, string project, string repositoryId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitPullRequest> CreatePullRequestAsync(GitPullRequest gitPullRequestToCreate, string project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitPullRequest> CreatePullRequestAsync(GitPullRequest gitPullRequestToCreate, Guid project, string repositoryId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitPullRequest> CreatePullRequestAsync(GitPullRequest gitPullRequestToCreate, Guid project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> GetRepositoryAsync(string project, string repositoryId, Nullable`1<bool> includeParent, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> GetRepositoryAsync(string project, Guid repositoryId, Nullable`1<bool> includeParent, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> GetRepositoryAsync(Guid project, string repositoryId, Nullable`1<bool> includeParent, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> GetRepositoryAsync(Guid project, Guid repositoryId, Nullable`1<bool> includeParent, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> GetRepositoryAsync(string repositoryId, Nullable`1<bool> includeParent, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> GetRepositoryAsync(Guid repositoryId, Nullable`1<bool> includeParent, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> CreateRepositoryAsync(GitRepository gitRepositoryToCreate, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> CreateRepositoryAsync(GitRepository gitRepositoryToCreate, string project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> CreateRepositoryAsync(GitRepository gitRepositoryToCreate, Guid project, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<GitRepository>> GetRepositoriesAsync(string project, Nullable`1<bool> includeLinks, Nullable`1<bool> includeAllUrls, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<GitRepository>> GetRepositoriesAsync(Guid project, Nullable`1<bool> includeLinks, Nullable`1<bool> includeAllUrls, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<GitRepository>> GetRepositoriesAsync(Nullable`1<bool> includeLinks, Nullable`1<bool> includeAllUrls, object userState, CancellationToken cancellationToken);
    private GitRepositoryCreateOptions ConvertGitRepository(GitRepository repository);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflict>> GetPullRequestConflictsAsync(string project, string repositoryId, int pullRequestId, Nullable`1<int> skip, Nullable`1<int> top, Nullable`1<bool> includeObsolete, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflict>> GetPullRequestConflictsAsync(string project, Guid repositoryId, int pullRequestId, Nullable`1<int> skip, Nullable`1<int> top, Nullable`1<bool> includeObsolete, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflict>> GetPullRequestConflictsAsync(Guid project, string repositoryId, int pullRequestId, Nullable`1<int> skip, Nullable`1<int> top, Nullable`1<bool> includeObsolete, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflict>> GetPullRequestConflictsAsync(Guid project, Guid repositoryId, int pullRequestId, Nullable`1<int> skip, Nullable`1<int> top, Nullable`1<bool> includeObsolete, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflict>> GetPullRequestConflictsAsync(string repositoryId, int pullRequestId, Nullable`1<int> skip, Nullable`1<int> top, Nullable`1<bool> includeObsolete, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflict>> GetPullRequestConflictsAsync(Guid repositoryId, int pullRequestId, Nullable`1<int> skip, Nullable`1<int> top, Nullable`1<bool> includeObsolete, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitItem> GetItemAsync(string project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitItem> GetItemAsync(string project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitItem> GetItemAsync(Guid project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitItem> GetItemAsync(Guid project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitItem> GetItemAsync(string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitItem> GetItemAsync(Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitItem> GetItemAsync(string project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitItem> GetItemAsync(string project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitItem> GetItemAsync(Guid project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitItem> GetItemAsync(Guid project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitItem> GetItemAsync(string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitItem> GetItemAsync(Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitItem> GetItemAsync(string project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitItem> GetItemAsync(string project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitItem> GetItemAsync(Guid project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitItem> GetItemAsync(Guid project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitItem> GetItemAsync(string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitItem> GetItemAsync(Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemContentAsync>d__54")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemContentAsync(string project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemContentAsync>d__55")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemContentAsync(string project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemContentAsync>d__56")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemContentAsync(Guid project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemContentAsync>d__57")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemContentAsync(Guid project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemContentAsync>d__58")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemContentAsync(string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemContentAsync>d__59")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemContentAsync(Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemContentAsync>d__60")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemContentAsync(string project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemContentAsync>d__61")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemContentAsync(string project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemContentAsync>d__62")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemContentAsync(Guid project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemContentAsync>d__63")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemContentAsync(Guid project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemContentAsync>d__64")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemContentAsync(string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemContentAsync>d__65")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemContentAsync(Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemContentAsync>d__66")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemContentAsync(string project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemContentAsync>d__67")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemContentAsync(string project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemContentAsync>d__68")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemContentAsync(Guid project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemContentAsync>d__69")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemContentAsync(Guid project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemContentAsync>d__70")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemContentAsync(string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemContentAsync>d__71")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemContentAsync(Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemTextAsync>d__72")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemTextAsync(string project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemTextAsync>d__73")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemTextAsync(string project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemTextAsync>d__74")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemTextAsync(Guid project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemTextAsync>d__75")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemTextAsync(Guid project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemTextAsync>d__76")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemTextAsync(string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemTextAsync>d__77")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemTextAsync(Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemTextAsync>d__78")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemTextAsync(string project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemTextAsync>d__79")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemTextAsync(string project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemTextAsync>d__80")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemTextAsync(Guid project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemTextAsync>d__81")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemTextAsync(Guid project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemTextAsync>d__82")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemTextAsync(string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemTextAsync>d__83")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemTextAsync(Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemTextAsync>d__84")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemTextAsync(string project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemTextAsync>d__85")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemTextAsync(string project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemTextAsync>d__86")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemTextAsync(Guid project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemTextAsync>d__87")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemTextAsync(Guid project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemTextAsync>d__88")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemTextAsync(string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemTextAsync>d__89")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemTextAsync(Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemZipAsync>d__90")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemZipAsync(string project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemZipAsync>d__91")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemZipAsync(string project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemZipAsync>d__92")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemZipAsync(Guid project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemZipAsync>d__93")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemZipAsync(Guid project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemZipAsync>d__94")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemZipAsync(string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemZipAsync>d__95")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemZipAsync(Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemZipAsync>d__96")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemZipAsync(string project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemZipAsync>d__97")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemZipAsync(string project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemZipAsync>d__98")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemZipAsync(Guid project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemZipAsync>d__99")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemZipAsync(Guid project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemZipAsync>d__100")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemZipAsync(string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemZipAsync>d__101")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemZipAsync(Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemZipAsync>d__102")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemZipAsync(string project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemZipAsync>d__103")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemZipAsync(string project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemZipAsync>d__104")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemZipAsync(Guid project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemZipAsync>d__105")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemZipAsync(Guid project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemZipAsync>d__106")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemZipAsync(string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetItemZipAsync>d__107")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemZipAsync(Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<AssociatedWorkItem>> GetPullRequestWorkItemsAsync(string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<AssociatedWorkItem>> GetPullRequestWorkItemsAsync(Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<AssociatedWorkItem>> GetPullRequestWorkItemsAsync(string project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<AssociatedWorkItem>> GetPullRequestWorkItemsAsync(string project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<AssociatedWorkItem>> GetPullRequestWorkItemsAsync(Guid project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<AssociatedWorkItem>> GetPullRequestWorkItemsAsync(Guid project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<GitRef>> GetRefsAsync(string project, string repositoryId, string filter, Nullable`1<bool> includeLinks, Nullable`1<bool> latestStatusesOnly, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitRef>> GetRefsAsync(string project, Guid repositoryId, string filter, Nullable`1<bool> includeLinks, Nullable`1<bool> latestStatusesOnly, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitRef>> GetRefsAsync(Guid project, string repositoryId, string filter, Nullable`1<bool> includeLinks, Nullable`1<bool> latestStatusesOnly, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<GitRef>> GetRefsAsync(Guid project, Guid repositoryId, string filter, Nullable`1<bool> includeLinks, Nullable`1<bool> latestStatusesOnly, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<GitRef>> GetRefsAsync(string repositoryId, string filter, Nullable`1<bool> includeLinks, Nullable`1<bool> latestStatusesOnly, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitRef>> GetRefsAsync(Guid repositoryId, string filter, Nullable`1<bool> includeLinks, Nullable`1<bool> latestStatusesOnly, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<GitRef>> GetRefsAsync(string project, string repositoryId, string filter, Nullable`1<bool> includeLinks, Nullable`1<bool> includeStatuses, Nullable`1<bool> includeMyBranches, Nullable`1<bool> latestStatusesOnly, Nullable`1<bool> peelTags, string filterContains, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<GitRef>> GetRefsAsync(string project, Guid repositoryId, string filter, Nullable`1<bool> includeLinks, Nullable`1<bool> includeStatuses, Nullable`1<bool> includeMyBranches, Nullable`1<bool> latestStatusesOnly, Nullable`1<bool> peelTags, string filterContains, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<GitRef>> GetRefsAsync(Guid project, string repositoryId, string filter, Nullable`1<bool> includeLinks, Nullable`1<bool> includeStatuses, Nullable`1<bool> includeMyBranches, Nullable`1<bool> latestStatusesOnly, Nullable`1<bool> peelTags, string filterContains, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<GitRef>> GetRefsAsync(Guid project, Guid repositoryId, string filter, Nullable`1<bool> includeLinks, Nullable`1<bool> includeStatuses, Nullable`1<bool> includeMyBranches, Nullable`1<bool> latestStatusesOnly, Nullable`1<bool> peelTags, string filterContains, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<GitRef>> GetRefsAsync(string repositoryId, string filter, Nullable`1<bool> includeLinks, Nullable`1<bool> includeStatuses, Nullable`1<bool> includeMyBranches, Nullable`1<bool> latestStatusesOnly, Nullable`1<bool> peelTags, string filterContains, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<GitRef>> GetRefsAsync(Guid repositoryId, string filter, Nullable`1<bool> includeLinks, Nullable`1<bool> includeStatuses, Nullable`1<bool> includeMyBranches, Nullable`1<bool> latestStatusesOnly, Nullable`1<bool> peelTags, string filterContains, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitBlobRef> GetBlobAsync(string project, string repositoryId, string sha1, Nullable`1<bool> download, string fileName, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitBlobRef> GetBlobAsync(string project, Guid repositoryId, string sha1, Nullable`1<bool> download, string fileName, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitBlobRef> GetBlobAsync(Guid project, string repositoryId, string sha1, Nullable`1<bool> download, string fileName, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitBlobRef> GetBlobAsync(Guid project, Guid repositoryId, string sha1, Nullable`1<bool> download, string fileName, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitBlobRef> GetBlobAsync(string repositoryId, string sha1, Nullable`1<bool> download, string fileName, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<GitBlobRef> GetBlobAsync(Guid repositoryId, string sha1, Nullable`1<bool> download, string fileName, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetBlobContentAsync>d__132")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetBlobContentAsync(string project, string repositoryId, string sha1, Nullable`1<bool> download, string fileName, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetBlobContentAsync>d__133")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetBlobContentAsync(string project, Guid repositoryId, string sha1, Nullable`1<bool> download, string fileName, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetBlobContentAsync>d__134")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetBlobContentAsync(Guid project, string repositoryId, string sha1, Nullable`1<bool> download, string fileName, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetBlobContentAsync>d__135")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetBlobContentAsync(Guid project, Guid repositoryId, string sha1, Nullable`1<bool> download, string fileName, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetBlobContentAsync>d__136")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetBlobContentAsync(string repositoryId, string sha1, Nullable`1<bool> download, string fileName, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetBlobContentAsync>d__137")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetBlobContentAsync(Guid repositoryId, string sha1, Nullable`1<bool> download, string fileName, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetBlobZipAsync>d__138")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetBlobZipAsync(string project, Guid repositoryId, string sha1, Nullable`1<bool> download, string fileName, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetBlobZipAsync>d__139")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetBlobZipAsync(string project, string repositoryId, string sha1, Nullable`1<bool> download, string fileName, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetBlobZipAsync>d__140")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetBlobZipAsync(Guid project, string repositoryId, string sha1, Nullable`1<bool> download, string fileName, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetBlobZipAsync>d__141")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetBlobZipAsync(Guid project, Guid repositoryId, string sha1, Nullable`1<bool> download, string fileName, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetBlobZipAsync>d__142")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetBlobZipAsync(string repositoryId, string sha1, Nullable`1<bool> download, string fileName, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitCompatHttpClientBase/<GetBlobZipAsync>d__143")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetBlobZipAsync(Guid repositoryId, string sha1, Nullable`1<bool> download, string fileName, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<GitCommitRef>> GetPullRequestIterationCommitsAsync(string repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<GitCommitRef>> GetPullRequestIterationCommitsAsync(Guid repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<GitCommitRef>> GetPullRequestIterationCommitsAsync(string project, string repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<GitCommitRef>> GetPullRequestIterationCommitsAsync(string project, Guid repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<GitCommitRef>> GetPullRequestIterationCommitsAsync(Guid project, string repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<GitCommitRef>> GetPullRequestIterationCommitsAsync(Guid project, Guid repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<GitItem>> GetItemsAsync(string project, string repositoryId, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, Nullable`1<bool> includeLinks, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<GitItem>> GetItemsAsync(string project, Guid repositoryId, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, Nullable`1<bool> includeLinks, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<GitItem>> GetItemsAsync(Guid project, string repositoryId, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, Nullable`1<bool> includeLinks, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<GitItem>> GetItemsAsync(Guid project, Guid repositoryId, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, Nullable`1<bool> includeLinks, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<GitItem>> GetItemsAsync(string repositoryId, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, Nullable`1<bool> includeLinks, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<List`1<GitItem>> GetItemsAsync(Guid repositoryId, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, Nullable`1<bool> includeLinks, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitSuggestion>> GetSuggestionsAsync(string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitSuggestion>> GetSuggestionsAsync(Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitSuggestion>> GetSuggestionsAsync(string project, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitSuggestion>> GetSuggestionsAsync(string project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitSuggestion>> GetSuggestionsAsync(Guid project, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitSuggestion>> GetSuggestionsAsync(Guid project, Guid repositoryId, object userState, CancellationToken cancellationToken);
}
[DataContractAttribute]
[JsonConverterAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictJsonConverter")]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflict : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private GitMergeOriginRef <MergeOrigin>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConflictId>k__BackingField;
    [CompilerGeneratedAttribute]
private GitCommitRef <MergeBaseCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private GitCommitRef <MergeSourceCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private GitCommitRef <MergeTargetCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private GitConflictType <ConflictType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ConflictPath>k__BackingField;
    [CompilerGeneratedAttribute]
private GitResolutionStatus <ResolutionStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private GitResolutionError <ResolutionError>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityRef <ResolvedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ResolvedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [DataMemberAttribute]
public GitMergeOriginRef MergeOrigin { get; public set; }
    [DataMemberAttribute]
public int ConflictId { get; public set; }
    [DataMemberAttribute]
public GitCommitRef MergeBaseCommit { get; public set; }
    [DataMemberAttribute]
public GitCommitRef MergeSourceCommit { get; public set; }
    [DataMemberAttribute]
public GitCommitRef MergeTargetCommit { get; public set; }
    [DataMemberAttribute]
public GitConflictType ConflictType { get; public set; }
    [DataMemberAttribute]
public string ConflictPath { get; public set; }
    [DataMemberAttribute]
public GitResolutionStatus ResolutionStatus { get; public set; }
    [DataMemberAttribute]
public GitResolutionError ResolutionError { get; public set; }
    [DataMemberAttribute]
public IdentityRef ResolvedBy { get; public set; }
    [DataMemberAttribute]
public DateTime ResolvedDate { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    [CompilerGeneratedAttribute]
public GitMergeOriginRef get_MergeOrigin();
    [CompilerGeneratedAttribute]
public void set_MergeOrigin(GitMergeOriginRef value);
    [CompilerGeneratedAttribute]
public int get_ConflictId();
    [CompilerGeneratedAttribute]
public void set_ConflictId(int value);
    [CompilerGeneratedAttribute]
public GitCommitRef get_MergeBaseCommit();
    [CompilerGeneratedAttribute]
public void set_MergeBaseCommit(GitCommitRef value);
    [CompilerGeneratedAttribute]
public GitCommitRef get_MergeSourceCommit();
    [CompilerGeneratedAttribute]
public void set_MergeSourceCommit(GitCommitRef value);
    [CompilerGeneratedAttribute]
public GitCommitRef get_MergeTargetCommit();
    [CompilerGeneratedAttribute]
public void set_MergeTargetCommit(GitCommitRef value);
    [CompilerGeneratedAttribute]
public GitConflictType get_ConflictType();
    [CompilerGeneratedAttribute]
public void set_ConflictType(GitConflictType value);
    [CompilerGeneratedAttribute]
public string get_ConflictPath();
    [CompilerGeneratedAttribute]
public void set_ConflictPath(string value);
    [CompilerGeneratedAttribute]
public GitResolutionStatus get_ResolutionStatus();
    [CompilerGeneratedAttribute]
public void set_ResolutionStatus(GitResolutionStatus value);
    [CompilerGeneratedAttribute]
public GitResolutionError get_ResolutionError();
    [CompilerGeneratedAttribute]
public void set_ResolutionError(GitResolutionError value);
    [CompilerGeneratedAttribute]
public IdentityRef get_ResolvedBy();
    [CompilerGeneratedAttribute]
public void set_ResolvedBy(IdentityRef value);
    [CompilerGeneratedAttribute]
public DateTime get_ResolvedDate();
    [CompilerGeneratedAttribute]
public void set_ResolvedDate(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictAddAdd : GitConflict {
    [CompilerGeneratedAttribute]
private GitBlobRef <SourceBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private GitBlobRef <TargetBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private GitResolutionMergeContent <Resolution>k__BackingField;
    [DataMemberAttribute]
public GitBlobRef SourceBlob { get; public set; }
    [DataMemberAttribute]
public GitBlobRef TargetBlob { get; public set; }
    [DataMemberAttribute]
public GitResolutionMergeContent Resolution { get; public set; }
    [CompilerGeneratedAttribute]
public GitBlobRef get_SourceBlob();
    [CompilerGeneratedAttribute]
public void set_SourceBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public GitBlobRef get_TargetBlob();
    [CompilerGeneratedAttribute]
public void set_TargetBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public GitResolutionMergeContent get_Resolution();
    [CompilerGeneratedAttribute]
public void set_Resolution(GitResolutionMergeContent value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictAddRename : GitConflict {
    [CompilerGeneratedAttribute]
private GitBlobRef <BaseBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private GitBlobRef <SourceBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetOriginalPath>k__BackingField;
    [CompilerGeneratedAttribute]
private GitBlobRef <TargetBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private GitResolutionPathConflict <Resolution>k__BackingField;
    [DataMemberAttribute]
public GitBlobRef BaseBlob { get; public set; }
    [DataMemberAttribute]
public GitBlobRef SourceBlob { get; public set; }
    [DataMemberAttribute]
public string TargetOriginalPath { get; public set; }
    [DataMemberAttribute]
public GitBlobRef TargetBlob { get; public set; }
    [DataMemberAttribute]
public GitResolutionPathConflict Resolution { get; public set; }
    [CompilerGeneratedAttribute]
public GitBlobRef get_BaseBlob();
    [CompilerGeneratedAttribute]
public void set_BaseBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public GitBlobRef get_SourceBlob();
    [CompilerGeneratedAttribute]
public void set_SourceBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public string get_TargetOriginalPath();
    [CompilerGeneratedAttribute]
public void set_TargetOriginalPath(string value);
    [CompilerGeneratedAttribute]
public GitBlobRef get_TargetBlob();
    [CompilerGeneratedAttribute]
public void set_TargetBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public GitResolutionPathConflict get_Resolution();
    [CompilerGeneratedAttribute]
public void set_Resolution(GitResolutionPathConflict value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictDeleteEdit : GitConflict {
    [CompilerGeneratedAttribute]
private GitBlobRef <BaseBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private GitBlobRef <TargetBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private GitResolutionPickOneAction <Resolution>k__BackingField;
    [DataMemberAttribute]
public GitBlobRef BaseBlob { get; public set; }
    [DataMemberAttribute]
public GitBlobRef TargetBlob { get; public set; }
    [DataMemberAttribute]
public GitResolutionPickOneAction Resolution { get; public set; }
    [CompilerGeneratedAttribute]
public GitBlobRef get_BaseBlob();
    [CompilerGeneratedAttribute]
public void set_BaseBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public GitBlobRef get_TargetBlob();
    [CompilerGeneratedAttribute]
public void set_TargetBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public GitResolutionPickOneAction get_Resolution();
    [CompilerGeneratedAttribute]
public void set_Resolution(GitResolutionPickOneAction value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictDeleteRename : GitConflict {
    [CompilerGeneratedAttribute]
private GitBlobRef <BaseBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetNewPath>k__BackingField;
    [CompilerGeneratedAttribute]
private GitBlobRef <TargetBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private GitResolutionPickOneAction <Resolution>k__BackingField;
    [DataMemberAttribute]
public GitBlobRef BaseBlob { get; public set; }
    [DataMemberAttribute]
public string TargetNewPath { get; public set; }
    [DataMemberAttribute]
public GitBlobRef TargetBlob { get; public set; }
    [DataMemberAttribute]
public GitResolutionPickOneAction Resolution { get; public set; }
    [CompilerGeneratedAttribute]
public GitBlobRef get_BaseBlob();
    [CompilerGeneratedAttribute]
public void set_BaseBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public string get_TargetNewPath();
    [CompilerGeneratedAttribute]
public void set_TargetNewPath(string value);
    [CompilerGeneratedAttribute]
public GitBlobRef get_TargetBlob();
    [CompilerGeneratedAttribute]
public void set_TargetBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public GitResolutionPickOneAction get_Resolution();
    [CompilerGeneratedAttribute]
public void set_Resolution(GitResolutionPickOneAction value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictDirectoryFile : GitConflict {
    [CompilerGeneratedAttribute]
private GitTreeRef <SourceTree>k__BackingField;
    [CompilerGeneratedAttribute]
private GitBlobRef <TargetBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private GitResolutionPathConflict <Resolution>k__BackingField;
    [DataMemberAttribute]
public GitTreeRef SourceTree { get; public set; }
    [DataMemberAttribute]
public GitBlobRef TargetBlob { get; public set; }
    [DataMemberAttribute]
public GitResolutionPathConflict Resolution { get; public set; }
    [CompilerGeneratedAttribute]
public GitTreeRef get_SourceTree();
    [CompilerGeneratedAttribute]
public void set_SourceTree(GitTreeRef value);
    [CompilerGeneratedAttribute]
public GitBlobRef get_TargetBlob();
    [CompilerGeneratedAttribute]
public void set_TargetBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public GitResolutionPathConflict get_Resolution();
    [CompilerGeneratedAttribute]
public void set_Resolution(GitResolutionPathConflict value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictEditDelete : GitConflict {
    [CompilerGeneratedAttribute]
private GitBlobRef <BaseBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private GitBlobRef <SourceBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private GitResolutionPickOneAction <Resolution>k__BackingField;
    [DataMemberAttribute]
public GitBlobRef BaseBlob { get; public set; }
    [DataMemberAttribute]
public GitBlobRef SourceBlob { get; public set; }
    [DataMemberAttribute]
public GitResolutionPickOneAction Resolution { get; public set; }
    [CompilerGeneratedAttribute]
public GitBlobRef get_BaseBlob();
    [CompilerGeneratedAttribute]
public void set_BaseBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public GitBlobRef get_SourceBlob();
    [CompilerGeneratedAttribute]
public void set_SourceBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public GitResolutionPickOneAction get_Resolution();
    [CompilerGeneratedAttribute]
public void set_Resolution(GitResolutionPickOneAction value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictEditEdit : GitConflict {
    [CompilerGeneratedAttribute]
private GitBlobRef <BaseBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private GitBlobRef <SourceBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private GitBlobRef <TargetBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private GitResolutionMergeContent <Resolution>k__BackingField;
    [DataMemberAttribute]
public GitBlobRef BaseBlob { get; public set; }
    [DataMemberAttribute]
public GitBlobRef SourceBlob { get; public set; }
    [DataMemberAttribute]
public GitBlobRef TargetBlob { get; public set; }
    [DataMemberAttribute]
public GitResolutionMergeContent Resolution { get; public set; }
    [CompilerGeneratedAttribute]
public GitBlobRef get_BaseBlob();
    [CompilerGeneratedAttribute]
public void set_BaseBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public GitBlobRef get_SourceBlob();
    [CompilerGeneratedAttribute]
public void set_SourceBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public GitBlobRef get_TargetBlob();
    [CompilerGeneratedAttribute]
public void set_TargetBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public GitResolutionMergeContent get_Resolution();
    [CompilerGeneratedAttribute]
public void set_Resolution(GitResolutionMergeContent value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictFileDirectory : GitConflict {
    [CompilerGeneratedAttribute]
private GitBlobRef <SourceBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private GitTreeRef <TargetTree>k__BackingField;
    [CompilerGeneratedAttribute]
private GitResolutionPathConflict <Resolution>k__BackingField;
    [DataMemberAttribute]
public GitBlobRef SourceBlob { get; public set; }
    [DataMemberAttribute]
public GitTreeRef TargetTree { get; public set; }
    [DataMemberAttribute]
public GitResolutionPathConflict Resolution { get; public set; }
    [CompilerGeneratedAttribute]
public GitBlobRef get_SourceBlob();
    [CompilerGeneratedAttribute]
public void set_SourceBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public GitTreeRef get_TargetTree();
    [CompilerGeneratedAttribute]
public void set_TargetTree(GitTreeRef value);
    [CompilerGeneratedAttribute]
public GitResolutionPathConflict get_Resolution();
    [CompilerGeneratedAttribute]
public void set_Resolution(GitResolutionPathConflict value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictJsonConverter : VssJsonCreationConverter`1<GitConflict> {
    protected virtual GitConflict Create(Type objectType, JObject jsonObject);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictRename1to2 : GitConflict {
    [CompilerGeneratedAttribute]
private GitBlobRef <BaseBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceNewPath>k__BackingField;
    [CompilerGeneratedAttribute]
private GitBlobRef <SourceBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetNewPath>k__BackingField;
    [CompilerGeneratedAttribute]
private GitBlobRef <TargetBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private GitResolutionRename1to2 <Resolution>k__BackingField;
    [DataMemberAttribute]
public GitBlobRef BaseBlob { get; public set; }
    [DataMemberAttribute]
public string SourceNewPath { get; public set; }
    [DataMemberAttribute]
public GitBlobRef SourceBlob { get; public set; }
    [DataMemberAttribute]
public string TargetNewPath { get; public set; }
    [DataMemberAttribute]
public GitBlobRef TargetBlob { get; public set; }
    [DataMemberAttribute]
public GitResolutionRename1to2 Resolution { get; public set; }
    [CompilerGeneratedAttribute]
public GitBlobRef get_BaseBlob();
    [CompilerGeneratedAttribute]
public void set_BaseBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public string get_SourceNewPath();
    [CompilerGeneratedAttribute]
public void set_SourceNewPath(string value);
    [CompilerGeneratedAttribute]
public GitBlobRef get_SourceBlob();
    [CompilerGeneratedAttribute]
public void set_SourceBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public string get_TargetNewPath();
    [CompilerGeneratedAttribute]
public void set_TargetNewPath(string value);
    [CompilerGeneratedAttribute]
public GitBlobRef get_TargetBlob();
    [CompilerGeneratedAttribute]
public void set_TargetBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public GitResolutionRename1to2 get_Resolution();
    [CompilerGeneratedAttribute]
public void set_Resolution(GitResolutionRename1to2 value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictRename2to1 : GitConflict {
    [CompilerGeneratedAttribute]
private string <SourceOriginalPath>k__BackingField;
    [CompilerGeneratedAttribute]
private GitBlobRef <SourceOriginalBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private GitBlobRef <SourceNewBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetOriginalPath>k__BackingField;
    [CompilerGeneratedAttribute]
private GitBlobRef <TargetOriginalBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private GitBlobRef <TargetNewBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private GitResolutionPathConflict <Resolution>k__BackingField;
    [DataMemberAttribute]
public string SourceOriginalPath { get; public set; }
    [DataMemberAttribute]
public GitBlobRef SourceOriginalBlob { get; public set; }
    [DataMemberAttribute]
public GitBlobRef SourceNewBlob { get; public set; }
    [DataMemberAttribute]
public string TargetOriginalPath { get; public set; }
    [DataMemberAttribute]
public GitBlobRef TargetOriginalBlob { get; public set; }
    [DataMemberAttribute]
public GitBlobRef TargetNewBlob { get; public set; }
    [DataMemberAttribute]
public GitResolutionPathConflict Resolution { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SourceOriginalPath();
    [CompilerGeneratedAttribute]
public void set_SourceOriginalPath(string value);
    [CompilerGeneratedAttribute]
public GitBlobRef get_SourceOriginalBlob();
    [CompilerGeneratedAttribute]
public void set_SourceOriginalBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public GitBlobRef get_SourceNewBlob();
    [CompilerGeneratedAttribute]
public void set_SourceNewBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public string get_TargetOriginalPath();
    [CompilerGeneratedAttribute]
public void set_TargetOriginalPath(string value);
    [CompilerGeneratedAttribute]
public GitBlobRef get_TargetOriginalBlob();
    [CompilerGeneratedAttribute]
public void set_TargetOriginalBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public GitBlobRef get_TargetNewBlob();
    [CompilerGeneratedAttribute]
public void set_TargetNewBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public GitResolutionPathConflict get_Resolution();
    [CompilerGeneratedAttribute]
public void set_Resolution(GitResolutionPathConflict value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictRenameAdd : GitConflict {
    [CompilerGeneratedAttribute]
private GitBlobRef <BaseBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceOriginalPath>k__BackingField;
    [CompilerGeneratedAttribute]
private GitBlobRef <SourceBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private GitBlobRef <TargetBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private GitResolutionPathConflict <Resolution>k__BackingField;
    [DataMemberAttribute]
public GitBlobRef BaseBlob { get; public set; }
    [DataMemberAttribute]
public string SourceOriginalPath { get; public set; }
    [DataMemberAttribute]
public GitBlobRef SourceBlob { get; public set; }
    [DataMemberAttribute]
public GitBlobRef TargetBlob { get; public set; }
    [DataMemberAttribute]
public GitResolutionPathConflict Resolution { get; public set; }
    [CompilerGeneratedAttribute]
public GitBlobRef get_BaseBlob();
    [CompilerGeneratedAttribute]
public void set_BaseBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public string get_SourceOriginalPath();
    [CompilerGeneratedAttribute]
public void set_SourceOriginalPath(string value);
    [CompilerGeneratedAttribute]
public GitBlobRef get_SourceBlob();
    [CompilerGeneratedAttribute]
public void set_SourceBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public GitBlobRef get_TargetBlob();
    [CompilerGeneratedAttribute]
public void set_TargetBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public GitResolutionPathConflict get_Resolution();
    [CompilerGeneratedAttribute]
public void set_Resolution(GitResolutionPathConflict value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictRenameDelete : GitConflict {
    [CompilerGeneratedAttribute]
private GitBlobRef <BaseBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceNewPath>k__BackingField;
    [CompilerGeneratedAttribute]
private GitBlobRef <SourceBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private GitResolutionPickOneAction <Resolution>k__BackingField;
    [DataMemberAttribute]
public GitBlobRef BaseBlob { get; public set; }
    [DataMemberAttribute]
public string SourceNewPath { get; public set; }
    [DataMemberAttribute]
public GitBlobRef SourceBlob { get; public set; }
    [DataMemberAttribute]
public GitResolutionPickOneAction Resolution { get; public set; }
    [CompilerGeneratedAttribute]
public GitBlobRef get_BaseBlob();
    [CompilerGeneratedAttribute]
public void set_BaseBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public string get_SourceNewPath();
    [CompilerGeneratedAttribute]
public void set_SourceNewPath(string value);
    [CompilerGeneratedAttribute]
public GitBlobRef get_SourceBlob();
    [CompilerGeneratedAttribute]
public void set_SourceBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public GitResolutionPickOneAction get_Resolution();
    [CompilerGeneratedAttribute]
public void set_Resolution(GitResolutionPickOneAction value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictRenameRename : GitConflict {
    [CompilerGeneratedAttribute]
private string <OriginalPath>k__BackingField;
    [CompilerGeneratedAttribute]
private GitBlobRef <BaseBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private GitBlobRef <SourceBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private GitBlobRef <TargetBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private GitResolutionMergeContent <Resolution>k__BackingField;
    [DataMemberAttribute]
public string OriginalPath { get; public set; }
    [DataMemberAttribute]
public GitBlobRef BaseBlob { get; public set; }
    [DataMemberAttribute]
public GitBlobRef SourceBlob { get; public set; }
    [DataMemberAttribute]
public GitBlobRef TargetBlob { get; public set; }
    [DataMemberAttribute]
public GitResolutionMergeContent Resolution { get; public set; }
    [CompilerGeneratedAttribute]
public string get_OriginalPath();
    [CompilerGeneratedAttribute]
public void set_OriginalPath(string value);
    [CompilerGeneratedAttribute]
public GitBlobRef get_BaseBlob();
    [CompilerGeneratedAttribute]
public void set_BaseBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public GitBlobRef get_SourceBlob();
    [CompilerGeneratedAttribute]
public void set_SourceBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public GitBlobRef get_TargetBlob();
    [CompilerGeneratedAttribute]
public void set_TargetBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public GitResolutionMergeContent get_Resolution();
    [CompilerGeneratedAttribute]
public void set_Resolution(GitResolutionMergeContent value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
public enum Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictSourceType : Enum {
    public byte value__;
    public static GitConflictSourceType PullRequest;
    public static GitConflictSourceType AsyncOperation;
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictType : Enum {
    public byte value__;
    [EnumMemberAttribute]
public static GitConflictType None;
    [EnumMemberAttribute]
public static GitConflictType AddAdd;
    [EnumMemberAttribute]
public static GitConflictType AddRename;
    [EnumMemberAttribute]
public static GitConflictType DeleteEdit;
    [EnumMemberAttribute]
public static GitConflictType DeleteRename;
    [EnumMemberAttribute]
public static GitConflictType DirectoryFile;
    [EnumMemberAttribute]
public static GitConflictType DirectoryChild;
    [EnumMemberAttribute]
public static GitConflictType EditDelete;
    [EnumMemberAttribute]
public static GitConflictType EditEdit;
    [EnumMemberAttribute]
public static GitConflictType FileDirectory;
    [EnumMemberAttribute]
public static GitConflictType Rename1to2;
    [EnumMemberAttribute]
public static GitConflictType Rename2to1;
    [EnumMemberAttribute]
public static GitConflictType RenameAdd;
    [EnumMemberAttribute]
public static GitConflictType RenameDelete;
    [EnumMemberAttribute]
public static GitConflictType RenameRename;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateResult : object {
    [CompilerGeneratedAttribute]
private GitConflict <UpdatedConflict>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ConflictId>k__BackingField;
    [CompilerGeneratedAttribute]
private GitConflictUpdateStatus <UpdateStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomMessage>k__BackingField;
    [DataMemberAttribute]
public GitConflict UpdatedConflict { get; public set; }
    [DataMemberAttribute]
public int ConflictId { get; public set; }
    [DataMemberAttribute]
public GitConflictUpdateStatus UpdateStatus { get; public set; }
    [DataMemberAttribute]
public string CustomMessage { get; public set; }
    [CompilerGeneratedAttribute]
public GitConflict get_UpdatedConflict();
    [CompilerGeneratedAttribute]
public void set_UpdatedConflict(GitConflict value);
    [CompilerGeneratedAttribute]
public int get_ConflictId();
    [CompilerGeneratedAttribute]
public void set_ConflictId(int value);
    [CompilerGeneratedAttribute]
public GitConflictUpdateStatus get_UpdateStatus();
    [CompilerGeneratedAttribute]
public void set_UpdateStatus(GitConflictUpdateStatus value);
    [CompilerGeneratedAttribute]
public string get_CustomMessage();
    [CompilerGeneratedAttribute]
public void set_CustomMessage(string value);
}
public enum Microsoft.TeamFoundation.SourceControl.WebApi.GitConflictUpdateStatus : Enum {
    public int value__;
    public static GitConflictUpdateStatus Succeeded;
    public static GitConflictUpdateStatus BadRequest;
    public static GitConflictUpdateStatus InvalidResolution;
    public static GitConflictUpdateStatus UnsupportedConflictType;
    public static GitConflictUpdateStatus NotFound;
}
[EditorBrowsableAttribute("1")]
[GenerateAllConstantsAttribute("")]
public static class Microsoft.TeamFoundation.SourceControl.WebApi.GitConstants : object {
    public static Guid GitSecurityNamespaceId;
    public static string SettingsServiceCompareBranchKey;
    public static int MaxGitRefNameLength;
    public static int SourceControlCapabilityFlag;
    public static int MaxRepositoryNameLength;
    public static int DefaultPageSize;
    public static int MaxPageSize;
    public static string RefsPrefix;
    public static string RefsHeadsMaster;
    public static string RefsHeadsPrefix;
    public static string RefsNotesPrefix;
    public static string RefsPullPrefix;
    public static string RefsRestMergePrefix;
    public static string RefsRemotesPrefix;
    public static string RefsTagsPrefix;
    public static string RefsBreadcrumbsPrefix;
    public static string RefsPullForkSourceSuffix;
    public static string RefsPullMergeSuffix;
    public static string RefsPullSourceFixupSuffix;
    public static string RefsPullTargetFixupSuffix;
    public static string RefsPullMergedBlobSuffix;
    public static string RefDereferencedSuffix;
    public static string GitModulesFileName;
    public static string SecurableRoot;
    public static char SecurityTokenDelimiter;
    private static GitConstants();
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitDeletedRepository : object {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private TeamProjectReference <ProjectReference>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityRef <DeletedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <DeletedDate>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public TeamProjectReference ProjectReference { get; public set; }
    [DataMemberAttribute]
public IdentityRef DeletedBy { get; public set; }
    [DataMemberAttribute]
public DateTime CreatedDate { get; public set; }
    [DataMemberAttribute]
public DateTime DeletedDate { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public TeamProjectReference get_ProjectReference();
    [CompilerGeneratedAttribute]
public void set_ProjectReference(TeamProjectReference value);
    [CompilerGeneratedAttribute]
public IdentityRef get_DeletedBy();
    [CompilerGeneratedAttribute]
public void set_DeletedBy(IdentityRef value);
    [CompilerGeneratedAttribute]
public DateTime get_CreatedDate();
    [CompilerGeneratedAttribute]
public void set_CreatedDate(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_DeletedDate();
    [CompilerGeneratedAttribute]
public void set_DeletedDate(DateTime value);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitFilePathsCollection : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private string <CommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Paths>k__BackingField;
    [DataMemberAttribute]
public string Url;
    [DataMemberAttribute]
public string CommitId { get; public set; }
    [DataMemberAttribute]
public List`1<string> Paths { get; public set; }
    [CompilerGeneratedAttribute]
public string get_CommitId();
    [CompilerGeneratedAttribute]
public void set_CommitId(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Paths();
    [CompilerGeneratedAttribute]
public void set_Paths(List`1<string> value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkOperationStatusDetail : object {
    [CompilerGeneratedAttribute]
private int <CurrentStep>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <AllSteps>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [DataMemberAttribute]
public int CurrentStep { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<string> AllSteps { get; public set; }
    [DataMemberAttribute]
public string ErrorMessage { get; public set; }
    [CompilerGeneratedAttribute]
public int get_CurrentStep();
    [CompilerGeneratedAttribute]
public void set_CurrentStep(int value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_AllSteps();
    [CompilerGeneratedAttribute]
public void set_AllSteps(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkRef : GitRef {
    [CompilerGeneratedAttribute]
private GitRepository <Repository>k__BackingField;
    [DataMemberAttribute]
public GitRepository Repository { get; public set; }
    [CompilerGeneratedAttribute]
public GitRepository get_Repository();
    [CompilerGeneratedAttribute]
public void set_Repository(GitRepository value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequest : object {
    [CompilerGeneratedAttribute]
private int <OperationId>k__BackingField;
    [CompilerGeneratedAttribute]
private GlobalGitRepositoryKey <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SourceToTargetRef> <SourceToTargetRefs>k__BackingField;
    [CompilerGeneratedAttribute]
private GitAsyncOperationStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private GitForkOperationStatusDetail <DetailedStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [DataMemberAttribute]
public int OperationId { get; public set; }
    [DataMemberAttribute]
public GlobalGitRepositoryKey Source { get; public set; }
    [DataMemberAttribute]
public List`1<SourceToTargetRef> SourceToTargetRefs { get; public set; }
    [DataMemberAttribute]
public GitAsyncOperationStatus Status { get; public set; }
    [DataMemberAttribute]
public GitForkOperationStatusDetail DetailedStatus { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    [CompilerGeneratedAttribute]
public int get_OperationId();
    [CompilerGeneratedAttribute]
public void set_OperationId(int value);
    [CompilerGeneratedAttribute]
public GlobalGitRepositoryKey get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(GlobalGitRepositoryKey value);
    [CompilerGeneratedAttribute]
public List`1<SourceToTargetRef> get_SourceToTargetRefs();
    [CompilerGeneratedAttribute]
public void set_SourceToTargetRefs(List`1<SourceToTargetRef> value);
    [CompilerGeneratedAttribute]
public GitAsyncOperationStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(GitAsyncOperationStatus value);
    [CompilerGeneratedAttribute]
public GitForkOperationStatusDetail get_DetailedStatus();
    [CompilerGeneratedAttribute]
public void set_DetailedStatus(GitForkOperationStatusDetail value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkSyncRequestParameters : object {
    [CompilerGeneratedAttribute]
private GlobalGitRepositoryKey <Source>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<SourceToTargetRef> <SourceToTargetRefs>k__BackingField;
    [DataMemberAttribute]
public GlobalGitRepositoryKey Source { get; public set; }
    [DataMemberAttribute]
public List`1<SourceToTargetRef> SourceToTargetRefs { get; public set; }
    [CompilerGeneratedAttribute]
public GlobalGitRepositoryKey get_Source();
    [CompilerGeneratedAttribute]
public void set_Source(GlobalGitRepositoryKey value);
    [CompilerGeneratedAttribute]
public List`1<SourceToTargetRef> get_SourceToTargetRefs();
    [CompilerGeneratedAttribute]
public void set_SourceToTargetRefs(List`1<SourceToTargetRef> value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitForkTeamProjectReference : TeamProjectReference {
    private ISecuredObject m_securedObject;
    protected Guid NamespaceId { get; }
    protected int RequiredPermissions { get; }
    public GitForkTeamProjectReference(ISecuredObject securedObject);
    protected virtual Guid get_NamespaceId();
    protected virtual int get_RequiredPermissions();
    protected virtual string GetToken();
}
internal static class Microsoft.TeamFoundation.SourceControl.WebApi.GitHelpers : object {
    internal static Byte[] ObjectIdFromString(string objectId);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.GitHistoryMode : Enum {
    public int value__;
    [EnumMemberAttribute]
public static GitHistoryMode SimplifiedHistory;
    [EnumMemberAttribute]
public static GitHistoryMode FirstParent;
    [EnumMemberAttribute]
public static GitHistoryMode FullHistory;
    [EnumMemberAttribute]
public static GitHistoryMode FullHistorySimplifyMerges;
}
[ObsoleteAttribute("This is unused as of Dev15 M108 and may be deleted in the future")]
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitHistoryQueryResults : HistoryQueryResults`1<GitItem> {
    [CompilerGeneratedAttribute]
private string <StartingCommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UnpopulatedCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UnprocessedCount>k__BackingField;
    [DataMemberAttribute]
public string StartingCommitId { get; public set; }
    [DataMemberAttribute]
public int UnpopulatedCount { get; public set; }
    [DataMemberAttribute]
public int UnprocessedCount { get; public set; }
    [CompilerGeneratedAttribute]
public string get_StartingCommitId();
    [CompilerGeneratedAttribute]
public void set_StartingCommitId(string value);
    [CompilerGeneratedAttribute]
public int get_UnpopulatedCount();
    [CompilerGeneratedAttribute]
public void set_UnpopulatedCount(int value);
    [CompilerGeneratedAttribute]
public int get_UnprocessedCount();
    [CompilerGeneratedAttribute]
public void set_UnprocessedCount(int value);
}
[ClientCircuitBreakerSettingsAttribute("22", "80")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClient : GitHttpClientBase {
    protected static TimeSpan s_sendTimeout;
    public GitHttpClient(Uri baseUrl, VssCredentials credentials);
    public GitHttpClient(Uri baseUrl, VssCredentials credentials, DelegatingHandler[] handlers);
    public GitHttpClient(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings);
    public GitHttpClient(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings, DelegatingHandler[] handlers);
    public GitHttpClient(Uri baseUrl, HttpMessageHandler pipeline, bool disposeHandler);
    private static GitHttpClient();
    public virtual Task`1<List`1<GitRef>> GetBranchRefsAsync(Guid repositoryId, object userState);
    public virtual Task`1<List`1<GitRef>> GetTagRefsAsync(Guid repositoryId, object userState);
    public virtual Task`1<GitRepository> RenameRepositoryAsync(GitRepository repositoryToRename, string newName, object userState);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<IPagedList`1<GitItem>> GetItemsPagedAsync(string project, string repositoryId, string scopePath, Nullable`1<int> top, string continuationToken, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<IPagedList`1<GitItem>> GetItemsPagedAsync(string project, Guid repositoryId, string scopePath, Nullable`1<int> top, string continuationToken, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<IPagedList`1<GitItem>> GetItemsPagedAsync(Guid project, string repositoryId, string scopePath, Nullable`1<int> top, string continuationToken, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<IPagedList`1<GitItem>> GetItemsPagedAsync(Guid project, Guid repositoryId, string scopePath, Nullable`1<int> top, string continuationToken, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IPagedList`1<GitCommitRef>> GetPullRequestCommitsPagedAsync(string project, string repositoryId, int pullRequestId, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IPagedList`1<GitCommitRef>> GetPullRequestCommitsPagedAsync(Guid project, string repositoryId, int pullRequestId, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IPagedList`1<GitCommitRef>> GetPullRequestCommitsPagedAsync(string project, Guid repositoryId, int pullRequestId, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IPagedList`1<GitCommitRef>> GetPullRequestCommitsPagedAsync(Guid project, Guid repositoryId, int pullRequestId, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClient/<GetPagedList>d__16`1")]
protected Task`1<IPagedList`1<T>> GetPagedList(HttpResponseMessage responseMessage, CancellationToken cancellationToken);
    protected string GetContinuationToken(HttpResponseMessage responseMessage);
    protected Task`1<T> SendAsync(HttpMethod method, Guid locationId, object routeValues, ApiResourceVersion version, HttpContent content, IEnumerable`1<KeyValuePair`2<string, string>> queryParameters, object userState, CancellationToken cancellationToken, Func`3<HttpResponseMessage, CancellationToken, Task`1<T>> processResponse);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClient/<SendAsync>d__19`1")]
protected Task`1<T> SendAsync(HttpMethod method, IEnumerable`1<KeyValuePair`2<string, string>> additionalHeaders, Guid locationId, object routeValues, ApiResourceVersion version, HttpContent content, IEnumerable`1<KeyValuePair`2<string, string>> queryParameters, object userState, CancellationToken cancellationToken, Func`3<HttpResponseMessage, CancellationToken, Task`1<T>> processResponse);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClient/<SendAsync>d__20`1")]
protected Task`1<T> SendAsync(HttpRequestMessage message, object userState, CancellationToken cancellationToken, Func`3<HttpResponseMessage, CancellationToken, Task`1<T>> processResponse);
    protected virtual void AddModelAsQueryParams(IList`1<KeyValuePair`2<string, string>> queryParams, string parameterName, object model);
    internal void TryAddParam(IList`1<KeyValuePair`2<string, string>> queryParams, string paramName, T paramValue);
}
[ResourceAreaAttribute("4E080C62-FA21-4FBC-8FEF-2A10A2B38049")]
public abstract class Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase : GitCompatHttpClientBase {
    public GitHttpClientBase(Uri baseUrl, VssCredentials credentials);
    public GitHttpClientBase(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings);
    public GitHttpClientBase(Uri baseUrl, VssCredentials credentials, DelegatingHandler[] handlers);
    public GitHttpClientBase(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings, DelegatingHandler[] handlers);
    public GitHttpClientBase(Uri baseUrl, HttpMessageHandler pipeline, bool disposeHandler);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeleteEnablementStatusAsync>d__5")]
[EditorBrowsableAttribute("1")]
public virtual Task DeleteEnablementStatusAsync(bool allProjects, Nullable`1<bool> includeBillableCommitters, IEnumerable`1<Guid> projectIds, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<AdvSecEnablementStatus>> GetEnablementStatusAsync(IEnumerable`1<Guid> projectIds, Nullable`1<DateTime> billingDate, Nullable`1<int> skip, Nullable`1<int> take, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<bool> GetEnableOnCreateHostAsync(bool enableOnCreateHost, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<bool> GetEnableOnCreateProjectAsync(Guid enableOnCreateProjectId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<SetEnableOnCreateHostAsync>d__9")]
[EditorBrowsableAttribute("1")]
public virtual Task SetEnableOnCreateHostAsync(bool enableOnCreateHost, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<SetEnableOnCreateProjectAsync>d__10")]
[EditorBrowsableAttribute("1")]
public virtual Task SetEnableOnCreateProjectAsync(Guid enableOnCreateProjectId, bool enableOnStatus, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<UpdateEnablementStatusAsync>d__11")]
[EditorBrowsableAttribute("1")]
public virtual Task UpdateEnablementStatusAsync(IEnumerable`1<AdvSecEnablementUpdate> enablementUpdates, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<BillablePusher>> GetEstimatedBillablePushersOrgAsync(object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<BillablePusher>> GetEstimatedBillablePushersProjectAsync(string project, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<BillablePusher>> GetEstimatedBillablePushersProjectAsync(Guid project, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<BillableCommitter>> GetEstimatedBillableCommittersRepoAsync(string project, string repositoryId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<BillableCommitter>> GetEstimatedBillableCommittersRepoAsync(string project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<BillableCommitter>> GetEstimatedBillableCommittersRepoAsync(Guid project, string repositoryId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<BillableCommitter>> GetEstimatedBillableCommittersRepoAsync(Guid project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<bool> GetPermissionAsync(string projectName, string repositoryId, string permission, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitAnnotatedTag> CreateAnnotatedTagAsync(GitAnnotatedTag tagObject, string project, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitAnnotatedTag> CreateAnnotatedTagAsync(GitAnnotatedTag tagObject, string project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitAnnotatedTag> CreateAnnotatedTagAsync(GitAnnotatedTag tagObject, Guid project, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitAnnotatedTag> CreateAnnotatedTagAsync(GitAnnotatedTag tagObject, Guid project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitAnnotatedTag> GetAnnotatedTagAsync(string project, string repositoryId, string objectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitAnnotatedTag> GetAnnotatedTagAsync(string project, Guid repositoryId, string objectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitAnnotatedTag> GetAnnotatedTagAsync(Guid project, string repositoryId, string objectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitAnnotatedTag> GetAnnotatedTagAsync(Guid project, Guid repositoryId, string objectId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<BillableCommitter>> GetBillableCommittersAsync(string project, Nullable`1<DateTime> billingDate, Nullable`1<int> skip, Nullable`1<int> take, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<BillableCommitter>> GetBillableCommittersAsync(Guid project, Nullable`1<DateTime> billingDate, Nullable`1<int> skip, Nullable`1<int> take, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<BillableCommitterDetail>> GetBillableCommittersDetailAsync(string project, string includeDetails, Nullable`1<DateTime> billingDate, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<BillableCommitterDetail>> GetBillableCommittersDetailAsync(Guid project, string includeDetails, Nullable`1<DateTime> billingDate, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitBlobRef> GetBlobAsync(string project, string repositoryId, string sha1, Nullable`1<bool> download, string fileName, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitBlobRef> GetBlobAsync(string project, Guid repositoryId, string sha1, Nullable`1<bool> download, string fileName, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitBlobRef> GetBlobAsync(Guid project, string repositoryId, string sha1, Nullable`1<bool> download, string fileName, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitBlobRef> GetBlobAsync(Guid project, Guid repositoryId, string sha1, Nullable`1<bool> download, string fileName, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitBlobRef> GetBlobAsync(string repositoryId, string sha1, Nullable`1<bool> download, string fileName, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitBlobRef> GetBlobAsync(Guid repositoryId, string sha1, Nullable`1<bool> download, string fileName, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetBlobContentAsync>d__38")]
public virtual Task`1<Stream> GetBlobContentAsync(string project, string repositoryId, string sha1, Nullable`1<bool> download, string fileName, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetBlobContentAsync>d__39")]
public virtual Task`1<Stream> GetBlobContentAsync(string project, Guid repositoryId, string sha1, Nullable`1<bool> download, string fileName, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetBlobContentAsync>d__40")]
public virtual Task`1<Stream> GetBlobContentAsync(Guid project, string repositoryId, string sha1, Nullable`1<bool> download, string fileName, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetBlobContentAsync>d__41")]
public virtual Task`1<Stream> GetBlobContentAsync(Guid project, Guid repositoryId, string sha1, Nullable`1<bool> download, string fileName, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetBlobContentAsync>d__42")]
public virtual Task`1<Stream> GetBlobContentAsync(string repositoryId, string sha1, Nullable`1<bool> download, string fileName, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetBlobContentAsync>d__43")]
public virtual Task`1<Stream> GetBlobContentAsync(Guid repositoryId, string sha1, Nullable`1<bool> download, string fileName, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetBlobsZipAsync>d__44")]
public virtual Task`1<Stream> GetBlobsZipAsync(IEnumerable`1<string> blobIds, string repositoryId, string filename, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetBlobsZipAsync>d__45")]
public virtual Task`1<Stream> GetBlobsZipAsync(IEnumerable`1<string> blobIds, Guid repositoryId, string filename, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetBlobsZipAsync>d__46")]
public virtual Task`1<Stream> GetBlobsZipAsync(IEnumerable`1<string> blobIds, string project, string repositoryId, string filename, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetBlobsZipAsync>d__47")]
public virtual Task`1<Stream> GetBlobsZipAsync(IEnumerable`1<string> blobIds, string project, Guid repositoryId, string filename, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetBlobsZipAsync>d__48")]
public virtual Task`1<Stream> GetBlobsZipAsync(IEnumerable`1<string> blobIds, Guid project, string repositoryId, string filename, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetBlobsZipAsync>d__49")]
public virtual Task`1<Stream> GetBlobsZipAsync(IEnumerable`1<string> blobIds, Guid project, Guid repositoryId, string filename, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetBlobZipAsync>d__50")]
public virtual Task`1<Stream> GetBlobZipAsync(string project, string repositoryId, string sha1, Nullable`1<bool> download, string fileName, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetBlobZipAsync>d__51")]
public virtual Task`1<Stream> GetBlobZipAsync(string project, Guid repositoryId, string sha1, Nullable`1<bool> download, string fileName, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetBlobZipAsync>d__52")]
public virtual Task`1<Stream> GetBlobZipAsync(Guid project, string repositoryId, string sha1, Nullable`1<bool> download, string fileName, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetBlobZipAsync>d__53")]
public virtual Task`1<Stream> GetBlobZipAsync(Guid project, Guid repositoryId, string sha1, Nullable`1<bool> download, string fileName, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetBlobZipAsync>d__54")]
public virtual Task`1<Stream> GetBlobZipAsync(string repositoryId, string sha1, Nullable`1<bool> download, string fileName, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetBlobZipAsync>d__55")]
public virtual Task`1<Stream> GetBlobZipAsync(Guid repositoryId, string sha1, Nullable`1<bool> download, string fileName, Nullable`1<bool> resolveLfs, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitBranchStats> GetBranchAsync(string project, string repositoryId, string name, GitVersionDescriptor baseVersionDescriptor, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitBranchStats> GetBranchAsync(string project, Guid repositoryId, string name, GitVersionDescriptor baseVersionDescriptor, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitBranchStats> GetBranchAsync(Guid project, string repositoryId, string name, GitVersionDescriptor baseVersionDescriptor, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitBranchStats> GetBranchAsync(Guid project, Guid repositoryId, string name, GitVersionDescriptor baseVersionDescriptor, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitBranchStats> GetBranchAsync(string repositoryId, string name, GitVersionDescriptor baseVersionDescriptor, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitBranchStats> GetBranchAsync(Guid repositoryId, string name, GitVersionDescriptor baseVersionDescriptor, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitBranchStats>> GetBranchesAsync(string project, string repositoryId, GitVersionDescriptor baseVersionDescriptor, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitBranchStats>> GetBranchesAsync(string project, Guid repositoryId, GitVersionDescriptor baseVersionDescriptor, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitBranchStats>> GetBranchesAsync(Guid project, string repositoryId, GitVersionDescriptor baseVersionDescriptor, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitBranchStats>> GetBranchesAsync(Guid project, Guid repositoryId, GitVersionDescriptor baseVersionDescriptor, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitBranchStats>> GetBranchesAsync(string repositoryId, GitVersionDescriptor baseVersionDescriptor, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitBranchStats>> GetBranchesAsync(Guid repositoryId, GitVersionDescriptor baseVersionDescriptor, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitBranchStats>> GetBranchStatsBatchAsync(GitQueryBranchStatsCriteria searchCriteria, string repositoryId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitBranchStats>> GetBranchStatsBatchAsync(GitQueryBranchStatsCriteria searchCriteria, Guid repositoryId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitBranchStats>> GetBranchStatsBatchAsync(GitQueryBranchStatsCriteria searchCriteria, string project, string repositoryId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitBranchStats>> GetBranchStatsBatchAsync(GitQueryBranchStatsCriteria searchCriteria, string project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitBranchStats>> GetBranchStatsBatchAsync(GitQueryBranchStatsCriteria searchCriteria, Guid project, string repositoryId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitBranchStats>> GetBranchStatsBatchAsync(GitQueryBranchStatsCriteria searchCriteria, Guid project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCommitChanges> GetChangesAsync(string project, string commitId, string repositoryId, Nullable`1<int> top, Nullable`1<int> skip, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCommitChanges> GetChangesAsync(string project, string commitId, Guid repositoryId, Nullable`1<int> top, Nullable`1<int> skip, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCommitChanges> GetChangesAsync(Guid project, string commitId, string repositoryId, Nullable`1<int> top, Nullable`1<int> skip, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCommitChanges> GetChangesAsync(Guid project, string commitId, Guid repositoryId, Nullable`1<int> top, Nullable`1<int> skip, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCommitChanges> GetChangesAsync(string commitId, string repositoryId, Nullable`1<int> top, Nullable`1<int> skip, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCommitChanges> GetChangesAsync(string commitId, Guid repositoryId, Nullable`1<int> top, Nullable`1<int> skip, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> GetCherryPickConflictAsync(string repositoryId, int cherryPickId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> GetCherryPickConflictAsync(Guid repositoryId, int cherryPickId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> GetCherryPickConflictAsync(string project, string repositoryId, int cherryPickId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> GetCherryPickConflictAsync(string project, Guid repositoryId, int cherryPickId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> GetCherryPickConflictAsync(Guid project, string repositoryId, int cherryPickId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> GetCherryPickConflictAsync(Guid project, Guid repositoryId, int cherryPickId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflict>> GetCherryPickConflictsAsync(string project, string repositoryId, int cherryPickId, string continuationToken, Nullable`1<int> top, Nullable`1<bool> excludeResolved, Nullable`1<bool> onlyResolved, Nullable`1<bool> includeObsolete, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflict>> GetCherryPickConflictsAsync(string project, Guid repositoryId, int cherryPickId, string continuationToken, Nullable`1<int> top, Nullable`1<bool> excludeResolved, Nullable`1<bool> onlyResolved, Nullable`1<bool> includeObsolete, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflict>> GetCherryPickConflictsAsync(Guid project, string repositoryId, int cherryPickId, string continuationToken, Nullable`1<int> top, Nullable`1<bool> excludeResolved, Nullable`1<bool> onlyResolved, Nullable`1<bool> includeObsolete, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflict>> GetCherryPickConflictsAsync(Guid project, Guid repositoryId, int cherryPickId, string continuationToken, Nullable`1<int> top, Nullable`1<bool> excludeResolved, Nullable`1<bool> onlyResolved, Nullable`1<bool> includeObsolete, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflict>> GetCherryPickConflictsAsync(string repositoryId, int cherryPickId, string continuationToken, Nullable`1<int> top, Nullable`1<bool> excludeResolved, Nullable`1<bool> onlyResolved, Nullable`1<bool> includeObsolete, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflict>> GetCherryPickConflictsAsync(Guid repositoryId, int cherryPickId, string continuationToken, Nullable`1<int> top, Nullable`1<bool> excludeResolved, Nullable`1<bool> onlyResolved, Nullable`1<bool> includeObsolete, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> UpdateCherryPickConflictAsync(GitConflict conflict, string repositoryId, int cherryPickId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> UpdateCherryPickConflictAsync(GitConflict conflict, Guid repositoryId, int cherryPickId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> UpdateCherryPickConflictAsync(GitConflict conflict, string project, string repositoryId, int cherryPickId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> UpdateCherryPickConflictAsync(GitConflict conflict, string project, Guid repositoryId, int cherryPickId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> UpdateCherryPickConflictAsync(GitConflict conflict, Guid project, string repositoryId, int cherryPickId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> UpdateCherryPickConflictAsync(GitConflict conflict, Guid project, Guid repositoryId, int cherryPickId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflictUpdateResult>> UpdateCherryPickConflictsAsync(IEnumerable`1<GitConflict> conflictUpdates, string repositoryId, int cherryPickId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflictUpdateResult>> UpdateCherryPickConflictsAsync(IEnumerable`1<GitConflict> conflictUpdates, Guid repositoryId, int cherryPickId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflictUpdateResult>> UpdateCherryPickConflictsAsync(IEnumerable`1<GitConflict> conflictUpdates, string project, string repositoryId, int cherryPickId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflictUpdateResult>> UpdateCherryPickConflictsAsync(IEnumerable`1<GitConflict> conflictUpdates, string project, Guid repositoryId, int cherryPickId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflictUpdateResult>> UpdateCherryPickConflictsAsync(IEnumerable`1<GitConflict> conflictUpdates, Guid project, string repositoryId, int cherryPickId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflictUpdateResult>> UpdateCherryPickConflictsAsync(IEnumerable`1<GitConflict> conflictUpdates, Guid project, Guid repositoryId, int cherryPickId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitCommitRef>> GetCherryPickRelationshipsAsync(string project, string repositoryNameOrId, string commitId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitCommitRef>> GetCherryPickRelationshipsAsync(string project, Guid repositoryNameOrId, string commitId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitCommitRef>> GetCherryPickRelationshipsAsync(Guid project, string repositoryNameOrId, string commitId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitCommitRef>> GetCherryPickRelationshipsAsync(Guid project, Guid repositoryNameOrId, string commitId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitCommitRef>> GetCherryPickRelationshipsAsync(string repositoryNameOrId, string commitId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitCommitRef>> GetCherryPickRelationshipsAsync(Guid repositoryNameOrId, string commitId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCherryPick> CreateCherryPickAsync(GitAsyncRefOperationParameters cherryPickToCreate, string project, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCherryPick> CreateCherryPickAsync(GitAsyncRefOperationParameters cherryPickToCreate, string project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCherryPick> CreateCherryPickAsync(GitAsyncRefOperationParameters cherryPickToCreate, Guid project, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCherryPick> CreateCherryPickAsync(GitAsyncRefOperationParameters cherryPickToCreate, Guid project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCherryPick> GetCherryPickAsync(string project, int cherryPickId, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCherryPick> GetCherryPickAsync(string project, int cherryPickId, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCherryPick> GetCherryPickAsync(Guid project, int cherryPickId, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCherryPick> GetCherryPickAsync(Guid project, int cherryPickId, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCherryPick> GetCherryPickForRefNameAsync(string project, string repositoryId, string refName, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCherryPick> GetCherryPickForRefNameAsync(string project, Guid repositoryId, string refName, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCherryPick> GetCherryPickForRefNameAsync(Guid project, string repositoryId, string refName, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCherryPick> GetCherryPickForRefNameAsync(Guid project, Guid repositoryId, string refName, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCommitDiffs> GetCommitDiffsAsync(string project, string repositoryId, Nullable`1<bool> diffCommonCommit, Nullable`1<int> top, Nullable`1<int> skip, GitBaseVersionDescriptor baseVersionDescriptor, GitTargetVersionDescriptor targetVersionDescriptor, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCommitDiffs> GetCommitDiffsAsync(string project, Guid repositoryId, Nullable`1<bool> diffCommonCommit, Nullable`1<int> top, Nullable`1<int> skip, GitBaseVersionDescriptor baseVersionDescriptor, GitTargetVersionDescriptor targetVersionDescriptor, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCommitDiffs> GetCommitDiffsAsync(Guid project, string repositoryId, Nullable`1<bool> diffCommonCommit, Nullable`1<int> top, Nullable`1<int> skip, GitBaseVersionDescriptor baseVersionDescriptor, GitTargetVersionDescriptor targetVersionDescriptor, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCommitDiffs> GetCommitDiffsAsync(Guid project, Guid repositoryId, Nullable`1<bool> diffCommonCommit, Nullable`1<int> top, Nullable`1<int> skip, GitBaseVersionDescriptor baseVersionDescriptor, GitTargetVersionDescriptor targetVersionDescriptor, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCommitDiffs> GetCommitDiffsAsync(string repositoryId, Nullable`1<bool> diffCommonCommit, Nullable`1<int> top, Nullable`1<int> skip, GitBaseVersionDescriptor baseVersionDescriptor, GitTargetVersionDescriptor targetVersionDescriptor, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCommitDiffs> GetCommitDiffsAsync(Guid repositoryId, Nullable`1<bool> diffCommonCommit, Nullable`1<int> top, Nullable`1<int> skip, GitBaseVersionDescriptor baseVersionDescriptor, GitTargetVersionDescriptor targetVersionDescriptor, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCommit> GetCommitAsync(string project, string commitId, string repositoryId, Nullable`1<int> changeCount, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCommit> GetCommitAsync(string project, string commitId, Guid repositoryId, Nullable`1<int> changeCount, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCommit> GetCommitAsync(Guid project, string commitId, string repositoryId, Nullable`1<int> changeCount, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCommit> GetCommitAsync(Guid project, string commitId, Guid repositoryId, Nullable`1<int> changeCount, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCommit> GetCommitAsync(string commitId, string repositoryId, Nullable`1<int> changeCount, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitCommit> GetCommitAsync(string commitId, Guid repositoryId, Nullable`1<int> changeCount, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetCommitsAsync(string project, string repositoryId, GitQueryCommitsCriteria searchCriteria, Nullable`1<int> skip, Nullable`1<int> top, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetCommitsAsync(string project, Guid repositoryId, GitQueryCommitsCriteria searchCriteria, Nullable`1<int> skip, Nullable`1<int> top, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetCommitsAsync(Guid project, string repositoryId, GitQueryCommitsCriteria searchCriteria, Nullable`1<int> skip, Nullable`1<int> top, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetCommitsAsync(Guid project, Guid repositoryId, GitQueryCommitsCriteria searchCriteria, Nullable`1<int> skip, Nullable`1<int> top, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetCommitsAsync(string repositoryId, GitQueryCommitsCriteria searchCriteria, Nullable`1<int> skip, Nullable`1<int> top, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetCommitsAsync(Guid repositoryId, GitQueryCommitsCriteria searchCriteria, Nullable`1<int> skip, Nullable`1<int> top, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetPushCommitsAsync(string project, string repositoryId, int pushId, Nullable`1<int> top, Nullable`1<int> skip, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetPushCommitsAsync(string project, Guid repositoryId, int pushId, Nullable`1<int> top, Nullable`1<int> skip, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetPushCommitsAsync(Guid project, string repositoryId, int pushId, Nullable`1<int> top, Nullable`1<int> skip, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetPushCommitsAsync(Guid project, Guid repositoryId, int pushId, Nullable`1<int> top, Nullable`1<int> skip, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetPushCommitsAsync(string repositoryId, int pushId, Nullable`1<int> top, Nullable`1<int> skip, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetPushCommitsAsync(Guid repositoryId, int pushId, Nullable`1<int> top, Nullable`1<int> skip, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetCommitsBatchAsync(GitQueryCommitsCriteria searchCriteria, string repositoryId, Nullable`1<int> skip, Nullable`1<int> top, Nullable`1<bool> includeStatuses, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetCommitsBatchAsync(GitQueryCommitsCriteria searchCriteria, Guid repositoryId, Nullable`1<int> skip, Nullable`1<int> top, Nullable`1<bool> includeStatuses, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetCommitsBatchAsync(GitQueryCommitsCriteria searchCriteria, string project, string repositoryId, Nullable`1<int> skip, Nullable`1<int> top, Nullable`1<bool> includeStatuses, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetCommitsBatchAsync(GitQueryCommitsCriteria searchCriteria, string project, Guid repositoryId, Nullable`1<int> skip, Nullable`1<int> top, Nullable`1<bool> includeStatuses, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetCommitsBatchAsync(GitQueryCommitsCriteria searchCriteria, Guid project, string repositoryId, Nullable`1<int> skip, Nullable`1<int> top, Nullable`1<bool> includeStatuses, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetCommitsBatchAsync(GitQueryCommitsCriteria searchCriteria, Guid project, Guid repositoryId, Nullable`1<int> skip, Nullable`1<int> top, Nullable`1<bool> includeStatuses, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitDeletedRepository>> GetDeletedRepositoriesAsync(string project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitDeletedRepository>> GetDeletedRepositoriesAsync(Guid project, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<FileDiff>> GetFileDiffsAsync(FileDiffsCriteria fileDiffsCriteria, string project, string repositoryId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<FileDiff>> GetFileDiffsAsync(FileDiffsCriteria fileDiffsCriteria, string project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<FileDiff>> GetFileDiffsAsync(FileDiffsCriteria fileDiffsCriteria, Guid project, string repositoryId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<FileDiff>> GetFileDiffsAsync(FileDiffsCriteria fileDiffsCriteria, Guid project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitFilePathsCollection> GetFilePathsAsync(string project, string repositoryId, string scopePath, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitFilePathsCollection> GetFilePathsAsync(string project, Guid repositoryId, string scopePath, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitFilePathsCollection> GetFilePathsAsync(Guid project, string repositoryId, string scopePath, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitFilePathsCollection> GetFilePathsAsync(Guid project, Guid repositoryId, string scopePath, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitRepositoryRef>> GetForksAsync(string project, string repositoryNameOrId, Guid collectionId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitRepositoryRef>> GetForksAsync(string project, Guid repositoryNameOrId, Guid collectionId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitRepositoryRef>> GetForksAsync(Guid project, string repositoryNameOrId, Guid collectionId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitRepositoryRef>> GetForksAsync(Guid project, Guid repositoryNameOrId, Guid collectionId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitRepositoryRef>> GetForksAsync(string repositoryNameOrId, Guid collectionId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitRepositoryRef>> GetForksAsync(Guid repositoryNameOrId, Guid collectionId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitForkSyncRequest> CreateForkSyncRequestAsync(GitForkSyncRequestParameters syncParams, string repositoryNameOrId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitForkSyncRequest> CreateForkSyncRequestAsync(GitForkSyncRequestParameters syncParams, Guid repositoryNameOrId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitForkSyncRequest> CreateForkSyncRequestAsync(GitForkSyncRequestParameters syncParams, string project, string repositoryNameOrId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitForkSyncRequest> CreateForkSyncRequestAsync(GitForkSyncRequestParameters syncParams, string project, Guid repositoryNameOrId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitForkSyncRequest> CreateForkSyncRequestAsync(GitForkSyncRequestParameters syncParams, Guid project, string repositoryNameOrId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitForkSyncRequest> CreateForkSyncRequestAsync(GitForkSyncRequestParameters syncParams, Guid project, Guid repositoryNameOrId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitForkSyncRequest> GetForkSyncRequestAsync(string project, string repositoryNameOrId, int forkSyncOperationId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitForkSyncRequest> GetForkSyncRequestAsync(string project, Guid repositoryNameOrId, int forkSyncOperationId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitForkSyncRequest> GetForkSyncRequestAsync(Guid project, string repositoryNameOrId, int forkSyncOperationId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitForkSyncRequest> GetForkSyncRequestAsync(Guid project, Guid repositoryNameOrId, int forkSyncOperationId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitForkSyncRequest> GetForkSyncRequestAsync(string repositoryNameOrId, int forkSyncOperationId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitForkSyncRequest> GetForkSyncRequestAsync(Guid repositoryNameOrId, int forkSyncOperationId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitForkSyncRequest>> GetForkSyncRequestsAsync(string project, string repositoryNameOrId, Nullable`1<bool> includeAbandoned, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitForkSyncRequest>> GetForkSyncRequestsAsync(string project, Guid repositoryNameOrId, Nullable`1<bool> includeAbandoned, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitForkSyncRequest>> GetForkSyncRequestsAsync(Guid project, string repositoryNameOrId, Nullable`1<bool> includeAbandoned, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitForkSyncRequest>> GetForkSyncRequestsAsync(Guid project, Guid repositoryNameOrId, Nullable`1<bool> includeAbandoned, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitForkSyncRequest>> GetForkSyncRequestsAsync(string repositoryNameOrId, Nullable`1<bool> includeAbandoned, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitForkSyncRequest>> GetForkSyncRequestsAsync(Guid repositoryNameOrId, Nullable`1<bool> includeAbandoned, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitItem> GetHfsItemAsync(string project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveHfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitItem> GetHfsItemAsync(string project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveHfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitItem> GetHfsItemAsync(Guid project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveHfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitItem> GetHfsItemAsync(Guid project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveHfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitItem> GetHfsItemAsync(string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveHfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitItem> GetHfsItemAsync(Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveHfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetHfsItemContentAsync>d__192")]
[EditorBrowsableAttribute("1")]
public virtual Task`1<Stream> GetHfsItemContentAsync(string project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveHfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetHfsItemContentAsync>d__193")]
[EditorBrowsableAttribute("1")]
public virtual Task`1<Stream> GetHfsItemContentAsync(string project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveHfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetHfsItemContentAsync>d__194")]
[EditorBrowsableAttribute("1")]
public virtual Task`1<Stream> GetHfsItemContentAsync(Guid project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveHfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetHfsItemContentAsync>d__195")]
[EditorBrowsableAttribute("1")]
public virtual Task`1<Stream> GetHfsItemContentAsync(Guid project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveHfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetHfsItemContentAsync>d__196")]
[EditorBrowsableAttribute("1")]
public virtual Task`1<Stream> GetHfsItemContentAsync(string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveHfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetHfsItemContentAsync>d__197")]
[EditorBrowsableAttribute("1")]
public virtual Task`1<Stream> GetHfsItemContentAsync(Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveHfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitItem>> GetHfsItemsAsync(string project, string repositoryId, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, Nullable`1<bool> includeLinks, GitVersionDescriptor versionDescriptor, Nullable`1<bool> zipForUnix, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitItem>> GetHfsItemsAsync(string project, Guid repositoryId, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, Nullable`1<bool> includeLinks, GitVersionDescriptor versionDescriptor, Nullable`1<bool> zipForUnix, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitItem>> GetHfsItemsAsync(Guid project, string repositoryId, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, Nullable`1<bool> includeLinks, GitVersionDescriptor versionDescriptor, Nullable`1<bool> zipForUnix, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitItem>> GetHfsItemsAsync(Guid project, Guid repositoryId, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, Nullable`1<bool> includeLinks, GitVersionDescriptor versionDescriptor, Nullable`1<bool> zipForUnix, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitItem>> GetHfsItemsAsync(string repositoryId, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, Nullable`1<bool> includeLinks, GitVersionDescriptor versionDescriptor, Nullable`1<bool> zipForUnix, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitItem>> GetHfsItemsAsync(Guid repositoryId, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, Nullable`1<bool> includeLinks, GitVersionDescriptor versionDescriptor, Nullable`1<bool> zipForUnix, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetHfsItemTextAsync>d__204")]
[EditorBrowsableAttribute("1")]
public virtual Task`1<Stream> GetHfsItemTextAsync(string project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveHfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetHfsItemTextAsync>d__205")]
[EditorBrowsableAttribute("1")]
public virtual Task`1<Stream> GetHfsItemTextAsync(string project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveHfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetHfsItemTextAsync>d__206")]
[EditorBrowsableAttribute("1")]
public virtual Task`1<Stream> GetHfsItemTextAsync(Guid project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveHfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetHfsItemTextAsync>d__207")]
[EditorBrowsableAttribute("1")]
public virtual Task`1<Stream> GetHfsItemTextAsync(Guid project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveHfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetHfsItemTextAsync>d__208")]
[EditorBrowsableAttribute("1")]
public virtual Task`1<Stream> GetHfsItemTextAsync(string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveHfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetHfsItemTextAsync>d__209")]
[EditorBrowsableAttribute("1")]
public virtual Task`1<Stream> GetHfsItemTextAsync(Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveHfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetHfsItemZipAsync>d__210")]
[EditorBrowsableAttribute("1")]
public virtual Task`1<Stream> GetHfsItemZipAsync(string project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveHfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetHfsItemZipAsync>d__211")]
[EditorBrowsableAttribute("1")]
public virtual Task`1<Stream> GetHfsItemZipAsync(string project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveHfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetHfsItemZipAsync>d__212")]
[EditorBrowsableAttribute("1")]
public virtual Task`1<Stream> GetHfsItemZipAsync(Guid project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveHfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetHfsItemZipAsync>d__213")]
[EditorBrowsableAttribute("1")]
public virtual Task`1<Stream> GetHfsItemZipAsync(Guid project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveHfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetHfsItemZipAsync>d__214")]
[EditorBrowsableAttribute("1")]
public virtual Task`1<Stream> GetHfsItemZipAsync(string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveHfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetHfsItemZipAsync>d__215")]
[EditorBrowsableAttribute("1")]
public virtual Task`1<Stream> GetHfsItemZipAsync(Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveHfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitImportRequest> CreateImportRequestAsync(GitImportRequest importRequest, string project, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitImportRequest> CreateImportRequestAsync(GitImportRequest importRequest, string project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitImportRequest> CreateImportRequestAsync(GitImportRequest importRequest, Guid project, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitImportRequest> CreateImportRequestAsync(GitImportRequest importRequest, Guid project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitImportRequest> GetImportRequestAsync(string project, string repositoryId, int importRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitImportRequest> GetImportRequestAsync(string project, Guid repositoryId, int importRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitImportRequest> GetImportRequestAsync(Guid project, string repositoryId, int importRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitImportRequest> GetImportRequestAsync(Guid project, Guid repositoryId, int importRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitImportRequest>> QueryImportRequestsAsync(string project, string repositoryId, Nullable`1<bool> includeAbandoned, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitImportRequest>> QueryImportRequestsAsync(string project, Guid repositoryId, Nullable`1<bool> includeAbandoned, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitImportRequest>> QueryImportRequestsAsync(Guid project, string repositoryId, Nullable`1<bool> includeAbandoned, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitImportRequest>> QueryImportRequestsAsync(Guid project, Guid repositoryId, Nullable`1<bool> includeAbandoned, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitImportRequest> UpdateImportRequestAsync(GitImportRequest importRequestToUpdate, string project, string repositoryId, int importRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitImportRequest> UpdateImportRequestAsync(GitImportRequest importRequestToUpdate, string project, Guid repositoryId, int importRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitImportRequest> UpdateImportRequestAsync(GitImportRequest importRequestToUpdate, Guid project, string repositoryId, int importRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitImportRequest> UpdateImportRequestAsync(GitImportRequest importRequestToUpdate, Guid project, Guid repositoryId, int importRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitItem> GetItemAsync(string project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitItem> GetItemAsync(string project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitItem> GetItemAsync(Guid project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitItem> GetItemAsync(Guid project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitItem> GetItemAsync(string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitItem> GetItemAsync(Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetItemContentAsync>d__238")]
public virtual Task`1<Stream> GetItemContentAsync(string project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetItemContentAsync>d__239")]
public virtual Task`1<Stream> GetItemContentAsync(string project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetItemContentAsync>d__240")]
public virtual Task`1<Stream> GetItemContentAsync(Guid project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetItemContentAsync>d__241")]
public virtual Task`1<Stream> GetItemContentAsync(Guid project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetItemContentAsync>d__242")]
public virtual Task`1<Stream> GetItemContentAsync(string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetItemContentAsync>d__243")]
public virtual Task`1<Stream> GetItemContentAsync(Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitItem>> GetItemsAsync(string project, string repositoryId, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, Nullable`1<bool> includeLinks, GitVersionDescriptor versionDescriptor, Nullable`1<bool> zipForUnix, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitItem>> GetItemsAsync(string project, Guid repositoryId, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, Nullable`1<bool> includeLinks, GitVersionDescriptor versionDescriptor, Nullable`1<bool> zipForUnix, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitItem>> GetItemsAsync(Guid project, string repositoryId, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, Nullable`1<bool> includeLinks, GitVersionDescriptor versionDescriptor, Nullable`1<bool> zipForUnix, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitItem>> GetItemsAsync(Guid project, Guid repositoryId, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, Nullable`1<bool> includeLinks, GitVersionDescriptor versionDescriptor, Nullable`1<bool> zipForUnix, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitItem>> GetItemsAsync(string repositoryId, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, Nullable`1<bool> includeLinks, GitVersionDescriptor versionDescriptor, Nullable`1<bool> zipForUnix, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitItem>> GetItemsAsync(Guid repositoryId, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, Nullable`1<bool> includeLinks, GitVersionDescriptor versionDescriptor, Nullable`1<bool> zipForUnix, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetItemTextAsync>d__250")]
public virtual Task`1<Stream> GetItemTextAsync(string project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetItemTextAsync>d__251")]
public virtual Task`1<Stream> GetItemTextAsync(string project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetItemTextAsync>d__252")]
public virtual Task`1<Stream> GetItemTextAsync(Guid project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetItemTextAsync>d__253")]
public virtual Task`1<Stream> GetItemTextAsync(Guid project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetItemTextAsync>d__254")]
public virtual Task`1<Stream> GetItemTextAsync(string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetItemTextAsync>d__255")]
public virtual Task`1<Stream> GetItemTextAsync(Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetItemZipAsync>d__256")]
public virtual Task`1<Stream> GetItemZipAsync(string project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetItemZipAsync>d__257")]
public virtual Task`1<Stream> GetItemZipAsync(string project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetItemZipAsync>d__258")]
public virtual Task`1<Stream> GetItemZipAsync(Guid project, string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetItemZipAsync>d__259")]
public virtual Task`1<Stream> GetItemZipAsync(Guid project, Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetItemZipAsync>d__260")]
public virtual Task`1<Stream> GetItemZipAsync(string repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetItemZipAsync>d__261")]
public virtual Task`1<Stream> GetItemZipAsync(Guid repositoryId, string path, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> latestProcessedChange, Nullable`1<bool> download, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, Nullable`1<bool> resolveLfs, Nullable`1<bool> sanitize, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<List`1<GitItem>>> GetItemsBatchAsync(GitItemRequestData requestData, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<List`1<GitItem>>> GetItemsBatchAsync(GitItemRequestData requestData, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<List`1<GitItem>>> GetItemsBatchAsync(GitItemRequestData requestData, string project, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<List`1<GitItem>>> GetItemsBatchAsync(GitItemRequestData requestData, string project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<List`1<GitItem>>> GetItemsBatchAsync(GitItemRequestData requestData, Guid project, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<List`1<GitItem>>> GetItemsBatchAsync(GitItemRequestData requestData, Guid project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetMergeBasesAsync(string project, string repositoryNameOrId, string commitId, string otherCommitId, Nullable`1<Guid> otherCollectionId, Nullable`1<Guid> otherRepositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetMergeBasesAsync(string project, Guid repositoryNameOrId, string commitId, string otherCommitId, Nullable`1<Guid> otherCollectionId, Nullable`1<Guid> otherRepositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetMergeBasesAsync(Guid project, string repositoryNameOrId, string commitId, string otherCommitId, Nullable`1<Guid> otherCollectionId, Nullable`1<Guid> otherRepositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetMergeBasesAsync(Guid project, Guid repositoryNameOrId, string commitId, string otherCommitId, Nullable`1<Guid> otherCollectionId, Nullable`1<Guid> otherRepositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetMergeBasesAsync(string repositoryNameOrId, string commitId, string otherCommitId, Nullable`1<Guid> otherCollectionId, Nullable`1<Guid> otherRepositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetMergeBasesAsync(Guid repositoryNameOrId, string commitId, string otherCommitId, Nullable`1<Guid> otherCollectionId, Nullable`1<Guid> otherRepositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitMerge> CreateMergeRequestAsync(GitMergeParameters mergeParameters, string project, string repositoryNameOrId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitMerge> CreateMergeRequestAsync(GitMergeParameters mergeParameters, string project, Guid repositoryNameOrId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitMerge> CreateMergeRequestAsync(GitMergeParameters mergeParameters, Guid project, string repositoryNameOrId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitMerge> CreateMergeRequestAsync(GitMergeParameters mergeParameters, Guid project, Guid repositoryNameOrId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitMerge> GetMergeRequestAsync(string project, string repositoryNameOrId, int mergeOperationId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitMerge> GetMergeRequestAsync(string project, Guid repositoryNameOrId, int mergeOperationId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitMerge> GetMergeRequestAsync(Guid project, string repositoryNameOrId, int mergeOperationId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitMerge> GetMergeRequestAsync(Guid project, Guid repositoryNameOrId, int mergeOperationId, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetPolicyConfigurationsAsync>d__282")]
public virtual Task`1<GitPolicyConfigurationResponse> GetPolicyConfigurationsAsync(string project, Nullable`1<Guid> repositoryId, string refName, Nullable`1<Guid> policyType, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetPolicyConfigurationsAsync>d__283")]
public virtual Task`1<GitPolicyConfigurationResponse> GetPolicyConfigurationsAsync(Guid project, Nullable`1<Guid> repositoryId, string refName, Nullable`1<Guid> policyType, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Attachment> CreateAttachmentAsync(Stream uploadStream, string fileName, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Attachment> CreateAttachmentAsync(Stream uploadStream, string fileName, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Attachment> CreateAttachmentAsync(Stream uploadStream, string project, string fileName, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Attachment> CreateAttachmentAsync(Stream uploadStream, string project, string fileName, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Attachment> CreateAttachmentAsync(Stream uploadStream, Guid project, string fileName, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Attachment> CreateAttachmentAsync(Stream uploadStream, Guid project, string fileName, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeleteAttachmentAsync>d__290")]
public virtual Task DeleteAttachmentAsync(string fileName, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeleteAttachmentAsync>d__291")]
public virtual Task DeleteAttachmentAsync(string fileName, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeleteAttachmentAsync>d__292")]
public virtual Task DeleteAttachmentAsync(string project, string fileName, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeleteAttachmentAsync>d__293")]
public virtual Task DeleteAttachmentAsync(string project, string fileName, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeleteAttachmentAsync>d__294")]
public virtual Task DeleteAttachmentAsync(Guid project, string fileName, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeleteAttachmentAsync>d__295")]
public virtual Task DeleteAttachmentAsync(Guid project, string fileName, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetAttachmentContentAsync>d__296")]
public virtual Task`1<Stream> GetAttachmentContentAsync(string fileName, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetAttachmentContentAsync>d__297")]
public virtual Task`1<Stream> GetAttachmentContentAsync(string fileName, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetAttachmentContentAsync>d__298")]
public virtual Task`1<Stream> GetAttachmentContentAsync(string project, string fileName, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetAttachmentContentAsync>d__299")]
public virtual Task`1<Stream> GetAttachmentContentAsync(string project, string fileName, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetAttachmentContentAsync>d__300")]
public virtual Task`1<Stream> GetAttachmentContentAsync(Guid project, string fileName, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetAttachmentContentAsync>d__301")]
public virtual Task`1<Stream> GetAttachmentContentAsync(Guid project, string fileName, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<Attachment>> GetAttachmentsAsync(string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<Attachment>> GetAttachmentsAsync(Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<Attachment>> GetAttachmentsAsync(string project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<Attachment>> GetAttachmentsAsync(string project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<Attachment>> GetAttachmentsAsync(Guid project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<Attachment>> GetAttachmentsAsync(Guid project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetAttachmentZipAsync>d__308")]
public virtual Task`1<Stream> GetAttachmentZipAsync(string fileName, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetAttachmentZipAsync>d__309")]
public virtual Task`1<Stream> GetAttachmentZipAsync(string fileName, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetAttachmentZipAsync>d__310")]
public virtual Task`1<Stream> GetAttachmentZipAsync(string project, string fileName, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetAttachmentZipAsync>d__311")]
public virtual Task`1<Stream> GetAttachmentZipAsync(string project, string fileName, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetAttachmentZipAsync>d__312")]
public virtual Task`1<Stream> GetAttachmentZipAsync(Guid project, string fileName, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetAttachmentZipAsync>d__313")]
public virtual Task`1<Stream> GetAttachmentZipAsync(Guid project, string fileName, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<CreateLikeAsync>d__314")]
public virtual Task CreateLikeAsync(string repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<CreateLikeAsync>d__315")]
public virtual Task CreateLikeAsync(Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<CreateLikeAsync>d__316")]
public virtual Task CreateLikeAsync(string project, string repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<CreateLikeAsync>d__317")]
public virtual Task CreateLikeAsync(string project, Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<CreateLikeAsync>d__318")]
public virtual Task CreateLikeAsync(Guid project, string repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<CreateLikeAsync>d__319")]
public virtual Task CreateLikeAsync(Guid project, Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeleteLikeAsync>d__320")]
public virtual Task DeleteLikeAsync(string repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeleteLikeAsync>d__321")]
public virtual Task DeleteLikeAsync(Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeleteLikeAsync>d__322")]
public virtual Task DeleteLikeAsync(string project, string repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeleteLikeAsync>d__323")]
public virtual Task DeleteLikeAsync(string project, Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeleteLikeAsync>d__324")]
public virtual Task DeleteLikeAsync(Guid project, string repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeleteLikeAsync>d__325")]
public virtual Task DeleteLikeAsync(Guid project, Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<IdentityRef>> GetLikesAsync(string repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<IdentityRef>> GetLikesAsync(Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<IdentityRef>> GetLikesAsync(string project, string repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<IdentityRef>> GetLikesAsync(string project, Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<IdentityRef>> GetLikesAsync(Guid project, string repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<IdentityRef>> GetLikesAsync(Guid project, Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetPullRequestIterationCommitsAsync(string project, string repositoryId, int pullRequestId, int iterationId, Nullable`1<int> top, Nullable`1<int> skip, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetPullRequestIterationCommitsAsync(string project, Guid repositoryId, int pullRequestId, int iterationId, Nullable`1<int> top, Nullable`1<int> skip, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetPullRequestIterationCommitsAsync(Guid project, string repositoryId, int pullRequestId, int iterationId, Nullable`1<int> top, Nullable`1<int> skip, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetPullRequestIterationCommitsAsync(Guid project, Guid repositoryId, int pullRequestId, int iterationId, Nullable`1<int> top, Nullable`1<int> skip, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetPullRequestIterationCommitsAsync(string repositoryId, int pullRequestId, int iterationId, Nullable`1<int> top, Nullable`1<int> skip, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetPullRequestIterationCommitsAsync(Guid repositoryId, int pullRequestId, int iterationId, Nullable`1<int> top, Nullable`1<int> skip, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetPullRequestCommitsAsync(string project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetPullRequestCommitsAsync(string project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetPullRequestCommitsAsync(Guid project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetPullRequestCommitsAsync(Guid project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetPullRequestCommitsAsync(string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitCommitRef>> GetPullRequestCommitsAsync(Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> GetPullRequestConflictAsync(string repositoryId, int pullRequestId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> GetPullRequestConflictAsync(Guid repositoryId, int pullRequestId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> GetPullRequestConflictAsync(string project, string repositoryId, int pullRequestId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> GetPullRequestConflictAsync(string project, Guid repositoryId, int pullRequestId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> GetPullRequestConflictAsync(Guid project, string repositoryId, int pullRequestId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> GetPullRequestConflictAsync(Guid project, Guid repositoryId, int pullRequestId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflict>> GetPullRequestConflictsAsync(string project, string repositoryId, int pullRequestId, Nullable`1<int> skip, Nullable`1<int> top, Nullable`1<bool> includeObsolete, Nullable`1<bool> excludeResolved, Nullable`1<bool> onlyResolved, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflict>> GetPullRequestConflictsAsync(string project, Guid repositoryId, int pullRequestId, Nullable`1<int> skip, Nullable`1<int> top, Nullable`1<bool> includeObsolete, Nullable`1<bool> excludeResolved, Nullable`1<bool> onlyResolved, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflict>> GetPullRequestConflictsAsync(Guid project, string repositoryId, int pullRequestId, Nullable`1<int> skip, Nullable`1<int> top, Nullable`1<bool> includeObsolete, Nullable`1<bool> excludeResolved, Nullable`1<bool> onlyResolved, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflict>> GetPullRequestConflictsAsync(Guid project, Guid repositoryId, int pullRequestId, Nullable`1<int> skip, Nullable`1<int> top, Nullable`1<bool> includeObsolete, Nullable`1<bool> excludeResolved, Nullable`1<bool> onlyResolved, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflict>> GetPullRequestConflictsAsync(string repositoryId, int pullRequestId, Nullable`1<int> skip, Nullable`1<int> top, Nullable`1<bool> includeObsolete, Nullable`1<bool> excludeResolved, Nullable`1<bool> onlyResolved, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflict>> GetPullRequestConflictsAsync(Guid repositoryId, int pullRequestId, Nullable`1<int> skip, Nullable`1<int> top, Nullable`1<bool> includeObsolete, Nullable`1<bool> excludeResolved, Nullable`1<bool> onlyResolved, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> UpdatePullRequestConflictAsync(GitConflict conflict, string repositoryId, int pullRequestId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> UpdatePullRequestConflictAsync(GitConflict conflict, Guid repositoryId, int pullRequestId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> UpdatePullRequestConflictAsync(GitConflict conflict, string project, string repositoryId, int pullRequestId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> UpdatePullRequestConflictAsync(GitConflict conflict, string project, Guid repositoryId, int pullRequestId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> UpdatePullRequestConflictAsync(GitConflict conflict, Guid project, string repositoryId, int pullRequestId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> UpdatePullRequestConflictAsync(GitConflict conflict, Guid project, Guid repositoryId, int pullRequestId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflictUpdateResult>> UpdatePullRequestConflictsAsync(IEnumerable`1<GitConflict> conflictUpdates, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflictUpdateResult>> UpdatePullRequestConflictsAsync(IEnumerable`1<GitConflict> conflictUpdates, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflictUpdateResult>> UpdatePullRequestConflictsAsync(IEnumerable`1<GitConflict> conflictUpdates, string project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflictUpdateResult>> UpdatePullRequestConflictsAsync(IEnumerable`1<GitConflict> conflictUpdates, string project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflictUpdateResult>> UpdatePullRequestConflictsAsync(IEnumerable`1<GitConflict> conflictUpdates, Guid project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflictUpdateResult>> UpdatePullRequestConflictsAsync(IEnumerable`1<GitConflict> conflictUpdates, Guid project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestIterationChanges> GetPullRequestIterationChangesAsync(string project, string repositoryId, int pullRequestId, int iterationId, Nullable`1<int> top, Nullable`1<int> skip, Nullable`1<int> compareTo, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestIterationChanges> GetPullRequestIterationChangesAsync(string project, Guid repositoryId, int pullRequestId, int iterationId, Nullable`1<int> top, Nullable`1<int> skip, Nullable`1<int> compareTo, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestIterationChanges> GetPullRequestIterationChangesAsync(Guid project, string repositoryId, int pullRequestId, int iterationId, Nullable`1<int> top, Nullable`1<int> skip, Nullable`1<int> compareTo, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestIterationChanges> GetPullRequestIterationChangesAsync(Guid project, Guid repositoryId, int pullRequestId, int iterationId, Nullable`1<int> top, Nullable`1<int> skip, Nullable`1<int> compareTo, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestIterationChanges> GetPullRequestIterationChangesAsync(string repositoryId, int pullRequestId, int iterationId, Nullable`1<int> top, Nullable`1<int> skip, Nullable`1<int> compareTo, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestIterationChanges> GetPullRequestIterationChangesAsync(Guid repositoryId, int pullRequestId, int iterationId, Nullable`1<int> top, Nullable`1<int> skip, Nullable`1<int> compareTo, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestIteration> GetPullRequestIterationAsync(string repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestIteration> GetPullRequestIterationAsync(Guid repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestIteration> GetPullRequestIterationAsync(string project, string repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestIteration> GetPullRequestIterationAsync(string project, Guid repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestIteration> GetPullRequestIterationAsync(Guid project, string repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestIteration> GetPullRequestIterationAsync(Guid project, Guid repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequestIteration>> GetPullRequestIterationsAsync(string project, string repositoryId, int pullRequestId, Nullable`1<bool> includeCommits, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequestIteration>> GetPullRequestIterationsAsync(string project, Guid repositoryId, int pullRequestId, Nullable`1<bool> includeCommits, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequestIteration>> GetPullRequestIterationsAsync(Guid project, string repositoryId, int pullRequestId, Nullable`1<bool> includeCommits, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequestIteration>> GetPullRequestIterationsAsync(Guid project, Guid repositoryId, int pullRequestId, Nullable`1<bool> includeCommits, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequestIteration>> GetPullRequestIterationsAsync(string repositoryId, int pullRequestId, Nullable`1<bool> includeCommits, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequestIteration>> GetPullRequestIterationsAsync(Guid repositoryId, int pullRequestId, Nullable`1<bool> includeCommits, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestStatus> CreatePullRequestIterationStatusAsync(GitPullRequestStatus status, string repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestStatus> CreatePullRequestIterationStatusAsync(GitPullRequestStatus status, Guid repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestStatus> CreatePullRequestIterationStatusAsync(GitPullRequestStatus status, string project, string repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestStatus> CreatePullRequestIterationStatusAsync(GitPullRequestStatus status, string project, Guid repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestStatus> CreatePullRequestIterationStatusAsync(GitPullRequestStatus status, Guid project, string repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestStatus> CreatePullRequestIterationStatusAsync(GitPullRequestStatus status, Guid project, Guid repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeletePullRequestIterationStatusAsync>d__392")]
public virtual Task DeletePullRequestIterationStatusAsync(string repositoryId, int pullRequestId, int iterationId, int statusId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeletePullRequestIterationStatusAsync>d__393")]
public virtual Task DeletePullRequestIterationStatusAsync(Guid repositoryId, int pullRequestId, int iterationId, int statusId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeletePullRequestIterationStatusAsync>d__394")]
public virtual Task DeletePullRequestIterationStatusAsync(string project, string repositoryId, int pullRequestId, int iterationId, int statusId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeletePullRequestIterationStatusAsync>d__395")]
public virtual Task DeletePullRequestIterationStatusAsync(string project, Guid repositoryId, int pullRequestId, int iterationId, int statusId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeletePullRequestIterationStatusAsync>d__396")]
public virtual Task DeletePullRequestIterationStatusAsync(Guid project, string repositoryId, int pullRequestId, int iterationId, int statusId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeletePullRequestIterationStatusAsync>d__397")]
public virtual Task DeletePullRequestIterationStatusAsync(Guid project, Guid repositoryId, int pullRequestId, int iterationId, int statusId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestStatus> GetPullRequestIterationStatusAsync(string repositoryId, int pullRequestId, int iterationId, int statusId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestStatus> GetPullRequestIterationStatusAsync(Guid repositoryId, int pullRequestId, int iterationId, int statusId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestStatus> GetPullRequestIterationStatusAsync(string project, string repositoryId, int pullRequestId, int iterationId, int statusId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestStatus> GetPullRequestIterationStatusAsync(string project, Guid repositoryId, int pullRequestId, int iterationId, int statusId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestStatus> GetPullRequestIterationStatusAsync(Guid project, string repositoryId, int pullRequestId, int iterationId, int statusId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestStatus> GetPullRequestIterationStatusAsync(Guid project, Guid repositoryId, int pullRequestId, int iterationId, int statusId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequestStatus>> GetPullRequestIterationStatusesAsync(string repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequestStatus>> GetPullRequestIterationStatusesAsync(Guid repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequestStatus>> GetPullRequestIterationStatusesAsync(string project, string repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequestStatus>> GetPullRequestIterationStatusesAsync(string project, Guid repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequestStatus>> GetPullRequestIterationStatusesAsync(Guid project, string repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequestStatus>> GetPullRequestIterationStatusesAsync(Guid project, Guid repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<UpdatePullRequestIterationStatusesAsync>d__410")]
public virtual Task UpdatePullRequestIterationStatusesAsync(JsonPatchDocument patchDocument, string repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<UpdatePullRequestIterationStatusesAsync>d__411")]
public virtual Task UpdatePullRequestIterationStatusesAsync(JsonPatchDocument patchDocument, Guid repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<UpdatePullRequestIterationStatusesAsync>d__412")]
public virtual Task UpdatePullRequestIterationStatusesAsync(JsonPatchDocument patchDocument, string project, string repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<UpdatePullRequestIterationStatusesAsync>d__413")]
public virtual Task UpdatePullRequestIterationStatusesAsync(JsonPatchDocument patchDocument, string project, Guid repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<UpdatePullRequestIterationStatusesAsync>d__414")]
public virtual Task UpdatePullRequestIterationStatusesAsync(JsonPatchDocument patchDocument, Guid project, string repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<UpdatePullRequestIterationStatusesAsync>d__415")]
public virtual Task UpdatePullRequestIterationStatusesAsync(JsonPatchDocument patchDocument, Guid project, Guid repositoryId, int pullRequestId, int iterationId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<WebApiTagDefinition> CreatePullRequestLabelAsync(WebApiCreateTagRequestData label, string repositoryId, int pullRequestId, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<WebApiTagDefinition> CreatePullRequestLabelAsync(WebApiCreateTagRequestData label, Guid repositoryId, int pullRequestId, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<WebApiTagDefinition> CreatePullRequestLabelAsync(WebApiCreateTagRequestData label, string project, string repositoryId, int pullRequestId, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<WebApiTagDefinition> CreatePullRequestLabelAsync(WebApiCreateTagRequestData label, string project, Guid repositoryId, int pullRequestId, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<WebApiTagDefinition> CreatePullRequestLabelAsync(WebApiCreateTagRequestData label, Guid project, string repositoryId, int pullRequestId, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<WebApiTagDefinition> CreatePullRequestLabelAsync(WebApiCreateTagRequestData label, Guid project, Guid repositoryId, int pullRequestId, string projectId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeletePullRequestLabelsAsync>d__422")]
public virtual Task DeletePullRequestLabelsAsync(string project, string repositoryId, int pullRequestId, string labelIdOrName, string projectId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeletePullRequestLabelsAsync>d__423")]
public virtual Task DeletePullRequestLabelsAsync(string project, Guid repositoryId, int pullRequestId, string labelIdOrName, string projectId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeletePullRequestLabelsAsync>d__424")]
public virtual Task DeletePullRequestLabelsAsync(Guid project, string repositoryId, int pullRequestId, string labelIdOrName, string projectId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeletePullRequestLabelsAsync>d__425")]
public virtual Task DeletePullRequestLabelsAsync(Guid project, Guid repositoryId, int pullRequestId, string labelIdOrName, string projectId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeletePullRequestLabelsAsync>d__426")]
public virtual Task DeletePullRequestLabelsAsync(string repositoryId, int pullRequestId, string labelIdOrName, string projectId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeletePullRequestLabelsAsync>d__427")]
public virtual Task DeletePullRequestLabelsAsync(Guid repositoryId, int pullRequestId, string labelIdOrName, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<WebApiTagDefinition> GetPullRequestLabelAsync(string project, string repositoryId, int pullRequestId, string labelIdOrName, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<WebApiTagDefinition> GetPullRequestLabelAsync(string project, Guid repositoryId, int pullRequestId, string labelIdOrName, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<WebApiTagDefinition> GetPullRequestLabelAsync(Guid project, string repositoryId, int pullRequestId, string labelIdOrName, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<WebApiTagDefinition> GetPullRequestLabelAsync(Guid project, Guid repositoryId, int pullRequestId, string labelIdOrName, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<WebApiTagDefinition> GetPullRequestLabelAsync(string repositoryId, int pullRequestId, string labelIdOrName, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<WebApiTagDefinition> GetPullRequestLabelAsync(Guid repositoryId, int pullRequestId, string labelIdOrName, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<WebApiTagDefinition>> GetPullRequestLabelsAsync(string project, string repositoryId, int pullRequestId, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<WebApiTagDefinition>> GetPullRequestLabelsAsync(string project, Guid repositoryId, int pullRequestId, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<WebApiTagDefinition>> GetPullRequestLabelsAsync(Guid project, string repositoryId, int pullRequestId, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<WebApiTagDefinition>> GetPullRequestLabelsAsync(Guid project, Guid repositoryId, int pullRequestId, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<WebApiTagDefinition>> GetPullRequestLabelsAsync(string repositoryId, int pullRequestId, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<WebApiTagDefinition>> GetPullRequestLabelsAsync(Guid repositoryId, int pullRequestId, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PropertiesCollection> GetPullRequestPropertiesAsync(string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PropertiesCollection> GetPullRequestPropertiesAsync(Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PropertiesCollection> GetPullRequestPropertiesAsync(string project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PropertiesCollection> GetPullRequestPropertiesAsync(string project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PropertiesCollection> GetPullRequestPropertiesAsync(Guid project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PropertiesCollection> GetPullRequestPropertiesAsync(Guid project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PropertiesCollection> UpdatePullRequestPropertiesAsync(JsonPatchDocument patchDocument, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PropertiesCollection> UpdatePullRequestPropertiesAsync(JsonPatchDocument patchDocument, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PropertiesCollection> UpdatePullRequestPropertiesAsync(JsonPatchDocument patchDocument, string project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PropertiesCollection> UpdatePullRequestPropertiesAsync(JsonPatchDocument patchDocument, string project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PropertiesCollection> UpdatePullRequestPropertiesAsync(JsonPatchDocument patchDocument, Guid project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<PropertiesCollection> UpdatePullRequestPropertiesAsync(JsonPatchDocument patchDocument, Guid project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestQuery> GetPullRequestQueryAsync(GitPullRequestQuery queries, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestQuery> GetPullRequestQueryAsync(GitPullRequestQuery queries, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestQuery> GetPullRequestQueryAsync(GitPullRequestQuery queries, string project, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestQuery> GetPullRequestQueryAsync(GitPullRequestQuery queries, string project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestQuery> GetPullRequestQueryAsync(GitPullRequestQuery queries, Guid project, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestQuery> GetPullRequestQueryAsync(GitPullRequestQuery queries, Guid project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IdentityRefWithVote> CreatePullRequestReviewerAsync(IdentityRefWithVote reviewer, string repositoryId, int pullRequestId, string reviewerId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IdentityRefWithVote> CreatePullRequestReviewerAsync(IdentityRefWithVote reviewer, Guid repositoryId, int pullRequestId, string reviewerId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IdentityRefWithVote> CreatePullRequestReviewerAsync(IdentityRefWithVote reviewer, string project, string repositoryId, int pullRequestId, string reviewerId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IdentityRefWithVote> CreatePullRequestReviewerAsync(IdentityRefWithVote reviewer, string project, Guid repositoryId, int pullRequestId, string reviewerId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IdentityRefWithVote> CreatePullRequestReviewerAsync(IdentityRefWithVote reviewer, Guid project, string repositoryId, int pullRequestId, string reviewerId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IdentityRefWithVote> CreatePullRequestReviewerAsync(IdentityRefWithVote reviewer, Guid project, Guid repositoryId, int pullRequestId, string reviewerId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<IdentityRefWithVote>> CreatePullRequestReviewersAsync(IdentityRef[] reviewers, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<IdentityRefWithVote>> CreatePullRequestReviewersAsync(IdentityRef[] reviewers, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<IdentityRefWithVote>> CreatePullRequestReviewersAsync(IdentityRef[] reviewers, string project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<IdentityRefWithVote>> CreatePullRequestReviewersAsync(IdentityRef[] reviewers, string project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<IdentityRefWithVote>> CreatePullRequestReviewersAsync(IdentityRef[] reviewers, Guid project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<IdentityRefWithVote>> CreatePullRequestReviewersAsync(IdentityRef[] reviewers, Guid project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IdentityRefWithVote> CreateUnmaterializedPullRequestReviewerAsync(IdentityRefWithVote reviewer, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IdentityRefWithVote> CreateUnmaterializedPullRequestReviewerAsync(IdentityRefWithVote reviewer, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IdentityRefWithVote> CreateUnmaterializedPullRequestReviewerAsync(IdentityRefWithVote reviewer, string project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IdentityRefWithVote> CreateUnmaterializedPullRequestReviewerAsync(IdentityRefWithVote reviewer, string project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IdentityRefWithVote> CreateUnmaterializedPullRequestReviewerAsync(IdentityRefWithVote reviewer, Guid project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IdentityRefWithVote> CreateUnmaterializedPullRequestReviewerAsync(IdentityRefWithVote reviewer, Guid project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeletePullRequestReviewerAsync>d__476")]
public virtual Task DeletePullRequestReviewerAsync(string repositoryId, int pullRequestId, string reviewerId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeletePullRequestReviewerAsync>d__477")]
public virtual Task DeletePullRequestReviewerAsync(Guid repositoryId, int pullRequestId, string reviewerId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeletePullRequestReviewerAsync>d__478")]
public virtual Task DeletePullRequestReviewerAsync(string project, string repositoryId, int pullRequestId, string reviewerId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeletePullRequestReviewerAsync>d__479")]
public virtual Task DeletePullRequestReviewerAsync(string project, Guid repositoryId, int pullRequestId, string reviewerId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeletePullRequestReviewerAsync>d__480")]
public virtual Task DeletePullRequestReviewerAsync(Guid project, string repositoryId, int pullRequestId, string reviewerId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeletePullRequestReviewerAsync>d__481")]
public virtual Task DeletePullRequestReviewerAsync(Guid project, Guid repositoryId, int pullRequestId, string reviewerId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IdentityRefWithVote> GetPullRequestReviewerAsync(string repositoryId, int pullRequestId, string reviewerId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IdentityRefWithVote> GetPullRequestReviewerAsync(Guid repositoryId, int pullRequestId, string reviewerId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IdentityRefWithVote> GetPullRequestReviewerAsync(string project, string repositoryId, int pullRequestId, string reviewerId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IdentityRefWithVote> GetPullRequestReviewerAsync(string project, Guid repositoryId, int pullRequestId, string reviewerId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IdentityRefWithVote> GetPullRequestReviewerAsync(Guid project, string repositoryId, int pullRequestId, string reviewerId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IdentityRefWithVote> GetPullRequestReviewerAsync(Guid project, Guid repositoryId, int pullRequestId, string reviewerId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<IdentityRefWithVote>> GetPullRequestReviewersAsync(string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<IdentityRefWithVote>> GetPullRequestReviewersAsync(Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<IdentityRefWithVote>> GetPullRequestReviewersAsync(string project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<IdentityRefWithVote>> GetPullRequestReviewersAsync(string project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<IdentityRefWithVote>> GetPullRequestReviewersAsync(Guid project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<IdentityRefWithVote>> GetPullRequestReviewersAsync(Guid project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IdentityRefWithVote> UpdatePullRequestReviewerAsync(IdentityRefWithVote reviewer, string repositoryId, int pullRequestId, string reviewerId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IdentityRefWithVote> UpdatePullRequestReviewerAsync(IdentityRefWithVote reviewer, Guid repositoryId, int pullRequestId, string reviewerId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IdentityRefWithVote> UpdatePullRequestReviewerAsync(IdentityRefWithVote reviewer, string project, string repositoryId, int pullRequestId, string reviewerId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IdentityRefWithVote> UpdatePullRequestReviewerAsync(IdentityRefWithVote reviewer, string project, Guid repositoryId, int pullRequestId, string reviewerId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IdentityRefWithVote> UpdatePullRequestReviewerAsync(IdentityRefWithVote reviewer, Guid project, string repositoryId, int pullRequestId, string reviewerId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<IdentityRefWithVote> UpdatePullRequestReviewerAsync(IdentityRefWithVote reviewer, Guid project, Guid repositoryId, int pullRequestId, string reviewerId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<UpdatePullRequestReviewersAsync>d__500")]
public virtual Task UpdatePullRequestReviewersAsync(IEnumerable`1<IdentityRefWithVote> patchVotes, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<UpdatePullRequestReviewersAsync>d__501")]
public virtual Task UpdatePullRequestReviewersAsync(IEnumerable`1<IdentityRefWithVote> patchVotes, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<UpdatePullRequestReviewersAsync>d__502")]
public virtual Task UpdatePullRequestReviewersAsync(IEnumerable`1<IdentityRefWithVote> patchVotes, string project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<UpdatePullRequestReviewersAsync>d__503")]
public virtual Task UpdatePullRequestReviewersAsync(IEnumerable`1<IdentityRefWithVote> patchVotes, string project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<UpdatePullRequestReviewersAsync>d__504")]
public virtual Task UpdatePullRequestReviewersAsync(IEnumerable`1<IdentityRefWithVote> patchVotes, Guid project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<UpdatePullRequestReviewersAsync>d__505")]
public virtual Task UpdatePullRequestReviewersAsync(IEnumerable`1<IdentityRefWithVote> patchVotes, Guid project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequest> GetPullRequestByIdAsync(int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequest> GetPullRequestByIdAsync(string project, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequest> GetPullRequestByIdAsync(Guid project, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequest>> GetPullRequestsByProjectAsync(string project, GitPullRequestSearchCriteria searchCriteria, Nullable`1<int> maxCommentLength, Nullable`1<int> skip, Nullable`1<int> top, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequest>> GetPullRequestsByProjectAsync(Guid project, GitPullRequestSearchCriteria searchCriteria, Nullable`1<int> maxCommentLength, Nullable`1<int> skip, Nullable`1<int> top, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequest> CreatePullRequestAsync(GitPullRequest gitPullRequestToCreate, string repositoryId, Nullable`1<bool> supportsIterations, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequest> CreatePullRequestAsync(GitPullRequest gitPullRequestToCreate, Guid repositoryId, Nullable`1<bool> supportsIterations, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequest> CreatePullRequestAsync(GitPullRequest gitPullRequestToCreate, string project, string repositoryId, Nullable`1<bool> supportsIterations, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequest> CreatePullRequestAsync(GitPullRequest gitPullRequestToCreate, string project, Guid repositoryId, Nullable`1<bool> supportsIterations, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequest> CreatePullRequestAsync(GitPullRequest gitPullRequestToCreate, Guid project, string repositoryId, Nullable`1<bool> supportsIterations, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequest> CreatePullRequestAsync(GitPullRequest gitPullRequestToCreate, Guid project, Guid repositoryId, Nullable`1<bool> supportsIterations, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequest> GetPullRequestAsync(string project, string repositoryId, int pullRequestId, Nullable`1<int> maxCommentLength, Nullable`1<int> skip, Nullable`1<int> top, Nullable`1<bool> includeCommits, Nullable`1<bool> includeWorkItemRefs, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequest> GetPullRequestAsync(string project, Guid repositoryId, int pullRequestId, Nullable`1<int> maxCommentLength, Nullable`1<int> skip, Nullable`1<int> top, Nullable`1<bool> includeCommits, Nullable`1<bool> includeWorkItemRefs, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequest> GetPullRequestAsync(Guid project, string repositoryId, int pullRequestId, Nullable`1<int> maxCommentLength, Nullable`1<int> skip, Nullable`1<int> top, Nullable`1<bool> includeCommits, Nullable`1<bool> includeWorkItemRefs, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequest> GetPullRequestAsync(Guid project, Guid repositoryId, int pullRequestId, Nullable`1<int> maxCommentLength, Nullable`1<int> skip, Nullable`1<int> top, Nullable`1<bool> includeCommits, Nullable`1<bool> includeWorkItemRefs, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequest> GetPullRequestAsync(string repositoryId, int pullRequestId, Nullable`1<int> maxCommentLength, Nullable`1<int> skip, Nullable`1<int> top, Nullable`1<bool> includeCommits, Nullable`1<bool> includeWorkItemRefs, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequest> GetPullRequestAsync(Guid repositoryId, int pullRequestId, Nullable`1<int> maxCommentLength, Nullable`1<int> skip, Nullable`1<int> top, Nullable`1<bool> includeCommits, Nullable`1<bool> includeWorkItemRefs, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequest>> GetPullRequestsAsync(string project, string repositoryId, GitPullRequestSearchCriteria searchCriteria, Nullable`1<int> maxCommentLength, Nullable`1<int> skip, Nullable`1<int> top, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequest>> GetPullRequestsAsync(string project, Guid repositoryId, GitPullRequestSearchCriteria searchCriteria, Nullable`1<int> maxCommentLength, Nullable`1<int> skip, Nullable`1<int> top, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequest>> GetPullRequestsAsync(Guid project, string repositoryId, GitPullRequestSearchCriteria searchCriteria, Nullable`1<int> maxCommentLength, Nullable`1<int> skip, Nullable`1<int> top, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequest>> GetPullRequestsAsync(Guid project, Guid repositoryId, GitPullRequestSearchCriteria searchCriteria, Nullable`1<int> maxCommentLength, Nullable`1<int> skip, Nullable`1<int> top, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequest>> GetPullRequestsAsync(string repositoryId, GitPullRequestSearchCriteria searchCriteria, Nullable`1<int> maxCommentLength, Nullable`1<int> skip, Nullable`1<int> top, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequest>> GetPullRequestsAsync(Guid repositoryId, GitPullRequestSearchCriteria searchCriteria, Nullable`1<int> maxCommentLength, Nullable`1<int> skip, Nullable`1<int> top, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequest> UpdatePullRequestAsync(GitPullRequest gitPullRequestToUpdate, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequest> UpdatePullRequestAsync(GitPullRequest gitPullRequestToUpdate, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequest> UpdatePullRequestAsync(GitPullRequest gitPullRequestToUpdate, string project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequest> UpdatePullRequestAsync(GitPullRequest gitPullRequestToUpdate, string project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequest> UpdatePullRequestAsync(GitPullRequest gitPullRequestToUpdate, Guid project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequest> UpdatePullRequestAsync(GitPullRequest gitPullRequestToUpdate, Guid project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<SharePullRequestAsync>d__535")]
public virtual Task SharePullRequestAsync(ShareNotificationContext userMessage, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<SharePullRequestAsync>d__536")]
public virtual Task SharePullRequestAsync(ShareNotificationContext userMessage, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<SharePullRequestAsync>d__537")]
public virtual Task SharePullRequestAsync(ShareNotificationContext userMessage, string project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<SharePullRequestAsync>d__538")]
public virtual Task SharePullRequestAsync(ShareNotificationContext userMessage, string project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<SharePullRequestAsync>d__539")]
public virtual Task SharePullRequestAsync(ShareNotificationContext userMessage, Guid project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<SharePullRequestAsync>d__540")]
public virtual Task SharePullRequestAsync(ShareNotificationContext userMessage, Guid project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestStatus> CreatePullRequestStatusAsync(GitPullRequestStatus status, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestStatus> CreatePullRequestStatusAsync(GitPullRequestStatus status, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestStatus> CreatePullRequestStatusAsync(GitPullRequestStatus status, string project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestStatus> CreatePullRequestStatusAsync(GitPullRequestStatus status, string project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestStatus> CreatePullRequestStatusAsync(GitPullRequestStatus status, Guid project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestStatus> CreatePullRequestStatusAsync(GitPullRequestStatus status, Guid project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeletePullRequestStatusAsync>d__547")]
public virtual Task DeletePullRequestStatusAsync(string repositoryId, int pullRequestId, int statusId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeletePullRequestStatusAsync>d__548")]
public virtual Task DeletePullRequestStatusAsync(Guid repositoryId, int pullRequestId, int statusId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeletePullRequestStatusAsync>d__549")]
public virtual Task DeletePullRequestStatusAsync(string project, string repositoryId, int pullRequestId, int statusId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeletePullRequestStatusAsync>d__550")]
public virtual Task DeletePullRequestStatusAsync(string project, Guid repositoryId, int pullRequestId, int statusId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeletePullRequestStatusAsync>d__551")]
public virtual Task DeletePullRequestStatusAsync(Guid project, string repositoryId, int pullRequestId, int statusId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeletePullRequestStatusAsync>d__552")]
public virtual Task DeletePullRequestStatusAsync(Guid project, Guid repositoryId, int pullRequestId, int statusId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestStatus> GetPullRequestStatusAsync(string repositoryId, int pullRequestId, int statusId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestStatus> GetPullRequestStatusAsync(Guid repositoryId, int pullRequestId, int statusId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestStatus> GetPullRequestStatusAsync(string project, string repositoryId, int pullRequestId, int statusId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestStatus> GetPullRequestStatusAsync(string project, Guid repositoryId, int pullRequestId, int statusId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestStatus> GetPullRequestStatusAsync(Guid project, string repositoryId, int pullRequestId, int statusId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestStatus> GetPullRequestStatusAsync(Guid project, Guid repositoryId, int pullRequestId, int statusId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequestStatus>> GetPullRequestStatusesAsync(string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequestStatus>> GetPullRequestStatusesAsync(Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequestStatus>> GetPullRequestStatusesAsync(string project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequestStatus>> GetPullRequestStatusesAsync(string project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequestStatus>> GetPullRequestStatusesAsync(Guid project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequestStatus>> GetPullRequestStatusesAsync(Guid project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<UpdatePullRequestStatusesAsync>d__565")]
public virtual Task UpdatePullRequestStatusesAsync(JsonPatchDocument patchDocument, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<UpdatePullRequestStatusesAsync>d__566")]
public virtual Task UpdatePullRequestStatusesAsync(JsonPatchDocument patchDocument, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<UpdatePullRequestStatusesAsync>d__567")]
public virtual Task UpdatePullRequestStatusesAsync(JsonPatchDocument patchDocument, string project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<UpdatePullRequestStatusesAsync>d__568")]
public virtual Task UpdatePullRequestStatusesAsync(JsonPatchDocument patchDocument, string project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<UpdatePullRequestStatusesAsync>d__569")]
public virtual Task UpdatePullRequestStatusesAsync(JsonPatchDocument patchDocument, Guid project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<UpdatePullRequestStatusesAsync>d__570")]
public virtual Task UpdatePullRequestStatusesAsync(JsonPatchDocument patchDocument, Guid project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Comment> CreateCommentAsync(Comment comment, string repositoryId, int pullRequestId, int threadId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Comment> CreateCommentAsync(Comment comment, Guid repositoryId, int pullRequestId, int threadId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Comment> CreateCommentAsync(Comment comment, string project, string repositoryId, int pullRequestId, int threadId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Comment> CreateCommentAsync(Comment comment, string project, Guid repositoryId, int pullRequestId, int threadId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Comment> CreateCommentAsync(Comment comment, Guid project, string repositoryId, int pullRequestId, int threadId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Comment> CreateCommentAsync(Comment comment, Guid project, Guid repositoryId, int pullRequestId, int threadId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeleteCommentAsync>d__577")]
public virtual Task DeleteCommentAsync(string repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeleteCommentAsync>d__578")]
public virtual Task DeleteCommentAsync(Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeleteCommentAsync>d__579")]
public virtual Task DeleteCommentAsync(string project, string repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeleteCommentAsync>d__580")]
public virtual Task DeleteCommentAsync(string project, Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeleteCommentAsync>d__581")]
public virtual Task DeleteCommentAsync(Guid project, string repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeleteCommentAsync>d__582")]
public virtual Task DeleteCommentAsync(Guid project, Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Comment> GetCommentAsync(string repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Comment> GetCommentAsync(Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Comment> GetCommentAsync(string project, string repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Comment> GetCommentAsync(string project, Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Comment> GetCommentAsync(Guid project, string repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Comment> GetCommentAsync(Guid project, Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<Comment>> GetCommentsAsync(string repositoryId, int pullRequestId, int threadId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<Comment>> GetCommentsAsync(Guid repositoryId, int pullRequestId, int threadId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<Comment>> GetCommentsAsync(string project, string repositoryId, int pullRequestId, int threadId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<Comment>> GetCommentsAsync(string project, Guid repositoryId, int pullRequestId, int threadId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<Comment>> GetCommentsAsync(Guid project, string repositoryId, int pullRequestId, int threadId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<Comment>> GetCommentsAsync(Guid project, Guid repositoryId, int pullRequestId, int threadId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Comment> UpdateCommentAsync(Comment comment, string repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Comment> UpdateCommentAsync(Comment comment, Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Comment> UpdateCommentAsync(Comment comment, string project, string repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Comment> UpdateCommentAsync(Comment comment, string project, Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Comment> UpdateCommentAsync(Comment comment, Guid project, string repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<Comment> UpdateCommentAsync(Comment comment, Guid project, Guid repositoryId, int pullRequestId, int threadId, int commentId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestCommentThread> CreateThreadAsync(GitPullRequestCommentThread commentThread, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestCommentThread> CreateThreadAsync(GitPullRequestCommentThread commentThread, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestCommentThread> CreateThreadAsync(GitPullRequestCommentThread commentThread, string project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestCommentThread> CreateThreadAsync(GitPullRequestCommentThread commentThread, string project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestCommentThread> CreateThreadAsync(GitPullRequestCommentThread commentThread, Guid project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestCommentThread> CreateThreadAsync(GitPullRequestCommentThread commentThread, Guid project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestCommentThread> GetPullRequestThreadAsync(string project, string repositoryId, int pullRequestId, int threadId, Nullable`1<int> iteration, Nullable`1<int> baseIteration, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestCommentThread> GetPullRequestThreadAsync(string project, Guid repositoryId, int pullRequestId, int threadId, Nullable`1<int> iteration, Nullable`1<int> baseIteration, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestCommentThread> GetPullRequestThreadAsync(Guid project, string repositoryId, int pullRequestId, int threadId, Nullable`1<int> iteration, Nullable`1<int> baseIteration, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestCommentThread> GetPullRequestThreadAsync(Guid project, Guid repositoryId, int pullRequestId, int threadId, Nullable`1<int> iteration, Nullable`1<int> baseIteration, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestCommentThread> GetPullRequestThreadAsync(string repositoryId, int pullRequestId, int threadId, Nullable`1<int> iteration, Nullable`1<int> baseIteration, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestCommentThread> GetPullRequestThreadAsync(Guid repositoryId, int pullRequestId, int threadId, Nullable`1<int> iteration, Nullable`1<int> baseIteration, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequestCommentThread>> GetThreadsAsync(string project, string repositoryId, int pullRequestId, Nullable`1<int> iteration, Nullable`1<int> baseIteration, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequestCommentThread>> GetThreadsAsync(string project, Guid repositoryId, int pullRequestId, Nullable`1<int> iteration, Nullable`1<int> baseIteration, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequestCommentThread>> GetThreadsAsync(Guid project, string repositoryId, int pullRequestId, Nullable`1<int> iteration, Nullable`1<int> baseIteration, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequestCommentThread>> GetThreadsAsync(Guid project, Guid repositoryId, int pullRequestId, Nullable`1<int> iteration, Nullable`1<int> baseIteration, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequestCommentThread>> GetThreadsAsync(string repositoryId, int pullRequestId, Nullable`1<int> iteration, Nullable`1<int> baseIteration, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPullRequestCommentThread>> GetThreadsAsync(Guid repositoryId, int pullRequestId, Nullable`1<int> iteration, Nullable`1<int> baseIteration, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestCommentThread> UpdateThreadAsync(GitPullRequestCommentThread commentThread, string repositoryId, int pullRequestId, int threadId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestCommentThread> UpdateThreadAsync(GitPullRequestCommentThread commentThread, Guid repositoryId, int pullRequestId, int threadId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestCommentThread> UpdateThreadAsync(GitPullRequestCommentThread commentThread, string project, string repositoryId, int pullRequestId, int threadId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestCommentThread> UpdateThreadAsync(GitPullRequestCommentThread commentThread, string project, Guid repositoryId, int pullRequestId, int threadId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestCommentThread> UpdateThreadAsync(GitPullRequestCommentThread commentThread, Guid project, string repositoryId, int pullRequestId, int threadId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPullRequestCommentThread> UpdateThreadAsync(GitPullRequestCommentThread commentThread, Guid project, Guid repositoryId, int pullRequestId, int threadId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<ResourceRef>> GetPullRequestWorkItemRefsAsync(string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<ResourceRef>> GetPullRequestWorkItemRefsAsync(Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<ResourceRef>> GetPullRequestWorkItemRefsAsync(string project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<ResourceRef>> GetPullRequestWorkItemRefsAsync(string project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<ResourceRef>> GetPullRequestWorkItemRefsAsync(Guid project, string repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<ResourceRef>> GetPullRequestWorkItemRefsAsync(Guid project, Guid repositoryId, int pullRequestId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPush> CreatePushAsync(GitPush push, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPush> CreatePushAsync(GitPush push, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPush> CreatePushAsync(GitPush push, string project, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPush> CreatePushAsync(GitPush push, string project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPush> CreatePushAsync(GitPush push, Guid project, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPush> CreatePushAsync(GitPush push, Guid project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPush> GetPushAsync(string project, string repositoryId, int pushId, Nullable`1<int> includeCommits, Nullable`1<bool> includeRefUpdates, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPush> GetPushAsync(string project, Guid repositoryId, int pushId, Nullable`1<int> includeCommits, Nullable`1<bool> includeRefUpdates, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPush> GetPushAsync(Guid project, string repositoryId, int pushId, Nullable`1<int> includeCommits, Nullable`1<bool> includeRefUpdates, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPush> GetPushAsync(Guid project, Guid repositoryId, int pushId, Nullable`1<int> includeCommits, Nullable`1<bool> includeRefUpdates, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPush> GetPushAsync(string repositoryId, int pushId, Nullable`1<int> includeCommits, Nullable`1<bool> includeRefUpdates, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitPush> GetPushAsync(Guid repositoryId, int pushId, Nullable`1<int> includeCommits, Nullable`1<bool> includeRefUpdates, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPush>> GetPushesAsync(string project, string repositoryId, Nullable`1<int> skip, Nullable`1<int> top, GitPushSearchCriteria searchCriteria, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPush>> GetPushesAsync(string project, Guid repositoryId, Nullable`1<int> skip, Nullable`1<int> top, GitPushSearchCriteria searchCriteria, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPush>> GetPushesAsync(Guid project, string repositoryId, Nullable`1<int> skip, Nullable`1<int> top, GitPushSearchCriteria searchCriteria, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPush>> GetPushesAsync(Guid project, Guid repositoryId, Nullable`1<int> skip, Nullable`1<int> top, GitPushSearchCriteria searchCriteria, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPush>> GetPushesAsync(string repositoryId, Nullable`1<int> skip, Nullable`1<int> top, GitPushSearchCriteria searchCriteria, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitPush>> GetPushesAsync(Guid repositoryId, Nullable`1<int> skip, Nullable`1<int> top, GitPushSearchCriteria searchCriteria, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeleteRepositoryFromRecycleBinAsync>d__649")]
public virtual Task DeleteRepositoryFromRecycleBinAsync(string project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeleteRepositoryFromRecycleBinAsync>d__650")]
public virtual Task DeleteRepositoryFromRecycleBinAsync(Guid project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitDeletedRepository>> GetRecycleBinRepositoriesAsync(string project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitDeletedRepository>> GetRecycleBinRepositoriesAsync(Guid project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> RestoreRepositoryFromRecycleBinAsync(GitRecycleBinRepositoryDetails repositoryDetails, string project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> RestoreRepositoryFromRecycleBinAsync(GitRecycleBinRepositoryDetails repositoryDetails, Guid project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitRef>> GetRefsAsync(string project, string repositoryId, string filter, Nullable`1<bool> includeLinks, Nullable`1<bool> includeStatuses, Nullable`1<bool> includeMyBranches, Nullable`1<bool> latestStatusesOnly, Nullable`1<bool> peelTags, string filterContains, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitRef>> GetRefsAsync(string project, Guid repositoryId, string filter, Nullable`1<bool> includeLinks, Nullable`1<bool> includeStatuses, Nullable`1<bool> includeMyBranches, Nullable`1<bool> latestStatusesOnly, Nullable`1<bool> peelTags, string filterContains, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitRef>> GetRefsAsync(Guid project, string repositoryId, string filter, Nullable`1<bool> includeLinks, Nullable`1<bool> includeStatuses, Nullable`1<bool> includeMyBranches, Nullable`1<bool> latestStatusesOnly, Nullable`1<bool> peelTags, string filterContains, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitRef>> GetRefsAsync(Guid project, Guid repositoryId, string filter, Nullable`1<bool> includeLinks, Nullable`1<bool> includeStatuses, Nullable`1<bool> includeMyBranches, Nullable`1<bool> latestStatusesOnly, Nullable`1<bool> peelTags, string filterContains, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitRef>> GetRefsAsync(string repositoryId, string filter, Nullable`1<bool> includeLinks, Nullable`1<bool> includeStatuses, Nullable`1<bool> includeMyBranches, Nullable`1<bool> latestStatusesOnly, Nullable`1<bool> peelTags, string filterContains, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitRef>> GetRefsAsync(Guid repositoryId, string filter, Nullable`1<bool> includeLinks, Nullable`1<bool> includeStatuses, Nullable`1<bool> includeMyBranches, Nullable`1<bool> latestStatusesOnly, Nullable`1<bool> peelTags, string filterContains, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRef> UpdateRefAsync(GitRefUpdate newRefInfo, string project, string repositoryId, string filter, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRef> UpdateRefAsync(GitRefUpdate newRefInfo, string project, Guid repositoryId, string filter, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRef> UpdateRefAsync(GitRefUpdate newRefInfo, Guid project, string repositoryId, string filter, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRef> UpdateRefAsync(GitRefUpdate newRefInfo, Guid project, Guid repositoryId, string filter, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRef> UpdateRefAsync(GitRefUpdate newRefInfo, string repositoryId, string filter, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRef> UpdateRefAsync(GitRefUpdate newRefInfo, Guid repositoryId, string filter, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitRefUpdateResult>> UpdateRefsAsync(IEnumerable`1<GitRefUpdate> refUpdates, string repositoryId, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitRefUpdateResult>> UpdateRefsAsync(IEnumerable`1<GitRefUpdate> refUpdates, Guid repositoryId, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitRefUpdateResult>> UpdateRefsAsync(IEnumerable`1<GitRefUpdate> refUpdates, string project, string repositoryId, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitRefUpdateResult>> UpdateRefsAsync(IEnumerable`1<GitRefUpdate> refUpdates, string project, Guid repositoryId, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitRefUpdateResult>> UpdateRefsAsync(IEnumerable`1<GitRefUpdate> refUpdates, Guid project, string repositoryId, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitRefUpdateResult>> UpdateRefsAsync(IEnumerable`1<GitRefUpdate> refUpdates, Guid project, Guid repositoryId, string projectId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRefFavorite> CreateFavoriteAsync(GitRefFavorite favorite, string project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRefFavorite> CreateFavoriteAsync(GitRefFavorite favorite, Guid project, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeleteRefFavoriteAsync>d__675")]
public virtual Task DeleteRefFavoriteAsync(string project, int favoriteId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeleteRefFavoriteAsync>d__676")]
public virtual Task DeleteRefFavoriteAsync(Guid project, int favoriteId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRefFavorite> GetRefFavoriteAsync(string project, int favoriteId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRefFavorite> GetRefFavoriteAsync(Guid project, int favoriteId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitRefFavorite>> GetRefFavoritesAsync(string project, string repositoryId, string identityId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitRefFavorite>> GetRefFavoritesAsync(Guid project, string repositoryId, string identityId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitRefFavorite>> GetRefFavoritesForProjectAsync(string project, string identityId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitRefFavorite>> GetRefFavoritesForProjectAsync(Guid project, string identityId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> CreateRepositoryAsync(GitRepositoryCreateOptions gitRepositoryToCreate, string sourceRef, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> CreateRepositoryAsync(GitRepositoryCreateOptions gitRepositoryToCreate, string project, string sourceRef, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> CreateRepositoryAsync(GitRepositoryCreateOptions gitRepositoryToCreate, Guid project, string sourceRef, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeleteRepositoryAsync>d__686")]
public virtual Task DeleteRepositoryAsync(Guid repositoryId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeleteRepositoryAsync>d__687")]
public virtual Task DeleteRepositoryAsync(string project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<DeleteRepositoryAsync>d__688")]
public virtual Task DeleteRepositoryAsync(Guid project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitRepository>> GetRepositoriesAsync(string project, Nullable`1<bool> includeLinks, Nullable`1<bool> includeAllUrls, Nullable`1<bool> includeHidden, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitRepository>> GetRepositoriesAsync(Guid project, Nullable`1<bool> includeLinks, Nullable`1<bool> includeAllUrls, Nullable`1<bool> includeHidden, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitRepository>> GetRepositoriesAsync(Nullable`1<bool> includeLinks, Nullable`1<bool> includeAllUrls, Nullable`1<bool> includeHidden, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> GetRepositoryAsync(string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> GetRepositoryAsync(Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> GetRepositoryAsync(string project, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> GetRepositoryAsync(string project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> GetRepositoryAsync(Guid project, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> GetRepositoryAsync(Guid project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> GetRepositoryWithParentAsync(string project, string repositoryId, bool includeParent, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> GetRepositoryWithParentAsync(string project, Guid repositoryId, bool includeParent, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> GetRepositoryWithParentAsync(Guid project, string repositoryId, bool includeParent, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> GetRepositoryWithParentAsync(Guid project, Guid repositoryId, bool includeParent, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> GetRepositoryWithParentAsync(string repositoryId, bool includeParent, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> GetRepositoryWithParentAsync(Guid repositoryId, bool includeParent, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> UpdateRepositoryAsync(GitRepository newRepositoryInfo, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> UpdateRepositoryAsync(GitRepository newRepositoryInfo, string project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRepository> UpdateRepositoryAsync(GitRepository newRepositoryInfo, Guid project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitRepository>> GetRepositoriesPagedAsync(string projectId, Nullable`1<bool> includeLinks, Nullable`1<bool> includeAllUrls, Nullable`1<bool> includeHidden, string filterContains, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> GetRevertConflictAsync(string repositoryId, int revertId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> GetRevertConflictAsync(Guid repositoryId, int revertId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> GetRevertConflictAsync(string project, string repositoryId, int revertId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> GetRevertConflictAsync(string project, Guid repositoryId, int revertId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> GetRevertConflictAsync(Guid project, string repositoryId, int revertId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> GetRevertConflictAsync(Guid project, Guid repositoryId, int revertId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflict>> GetRevertConflictsAsync(string project, string repositoryId, int revertId, string continuationToken, Nullable`1<int> top, Nullable`1<bool> excludeResolved, Nullable`1<bool> onlyResolved, Nullable`1<bool> includeObsolete, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflict>> GetRevertConflictsAsync(string project, Guid repositoryId, int revertId, string continuationToken, Nullable`1<int> top, Nullable`1<bool> excludeResolved, Nullable`1<bool> onlyResolved, Nullable`1<bool> includeObsolete, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflict>> GetRevertConflictsAsync(Guid project, string repositoryId, int revertId, string continuationToken, Nullable`1<int> top, Nullable`1<bool> excludeResolved, Nullable`1<bool> onlyResolved, Nullable`1<bool> includeObsolete, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflict>> GetRevertConflictsAsync(Guid project, Guid repositoryId, int revertId, string continuationToken, Nullable`1<int> top, Nullable`1<bool> excludeResolved, Nullable`1<bool> onlyResolved, Nullable`1<bool> includeObsolete, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflict>> GetRevertConflictsAsync(string repositoryId, int revertId, string continuationToken, Nullable`1<int> top, Nullable`1<bool> excludeResolved, Nullable`1<bool> onlyResolved, Nullable`1<bool> includeObsolete, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflict>> GetRevertConflictsAsync(Guid repositoryId, int revertId, string continuationToken, Nullable`1<int> top, Nullable`1<bool> excludeResolved, Nullable`1<bool> onlyResolved, Nullable`1<bool> includeObsolete, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> UpdateRevertConflictAsync(GitConflict conflict, string repositoryId, int revertId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> UpdateRevertConflictAsync(GitConflict conflict, Guid repositoryId, int revertId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> UpdateRevertConflictAsync(GitConflict conflict, string project, string repositoryId, int revertId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> UpdateRevertConflictAsync(GitConflict conflict, string project, Guid repositoryId, int revertId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> UpdateRevertConflictAsync(GitConflict conflict, Guid project, string repositoryId, int revertId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<GitConflict> UpdateRevertConflictAsync(GitConflict conflict, Guid project, Guid repositoryId, int revertId, int conflictId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflictUpdateResult>> UpdateRevertConflictsAsync(IEnumerable`1<GitConflict> conflictUpdates, string repositoryId, int revertId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflictUpdateResult>> UpdateRevertConflictsAsync(IEnumerable`1<GitConflict> conflictUpdates, Guid repositoryId, int revertId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflictUpdateResult>> UpdateRevertConflictsAsync(IEnumerable`1<GitConflict> conflictUpdates, string project, string repositoryId, int revertId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflictUpdateResult>> UpdateRevertConflictsAsync(IEnumerable`1<GitConflict> conflictUpdates, string project, Guid repositoryId, int revertId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflictUpdateResult>> UpdateRevertConflictsAsync(IEnumerable`1<GitConflict> conflictUpdates, Guid project, string repositoryId, int revertId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<List`1<GitConflictUpdateResult>> UpdateRevertConflictsAsync(IEnumerable`1<GitConflict> conflictUpdates, Guid project, Guid repositoryId, int revertId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRevert> CreateRevertAsync(GitAsyncRefOperationParameters revertToCreate, string project, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRevert> CreateRevertAsync(GitAsyncRefOperationParameters revertToCreate, string project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRevert> CreateRevertAsync(GitAsyncRefOperationParameters revertToCreate, Guid project, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRevert> CreateRevertAsync(GitAsyncRefOperationParameters revertToCreate, Guid project, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRevert> GetRevertAsync(string project, int revertId, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRevert> GetRevertAsync(string project, int revertId, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRevert> GetRevertAsync(Guid project, int revertId, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRevert> GetRevertAsync(Guid project, int revertId, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRevert> GetRevertForRefNameAsync(string project, string repositoryId, string refName, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRevert> GetRevertForRefNameAsync(string project, Guid repositoryId, string refName, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRevert> GetRevertForRefNameAsync(Guid project, string repositoryId, string refName, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitRevert> GetRevertForRefNameAsync(Guid project, Guid repositoryId, string refName, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitStatus> CreateCommitStatusAsync(GitStatus gitCommitStatusToCreate, string commitId, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitStatus> CreateCommitStatusAsync(GitStatus gitCommitStatusToCreate, string commitId, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitStatus> CreateCommitStatusAsync(GitStatus gitCommitStatusToCreate, string project, string commitId, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitStatus> CreateCommitStatusAsync(GitStatus gitCommitStatusToCreate, string project, string commitId, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitStatus> CreateCommitStatusAsync(GitStatus gitCommitStatusToCreate, Guid project, string commitId, string repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitStatus> CreateCommitStatusAsync(GitStatus gitCommitStatusToCreate, Guid project, string commitId, Guid repositoryId, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitStatus>> GetStatusesAsync(string project, string commitId, string repositoryId, Nullable`1<int> top, Nullable`1<int> skip, Nullable`1<bool> latestOnly, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitStatus>> GetStatusesAsync(string project, string commitId, Guid repositoryId, Nullable`1<int> top, Nullable`1<int> skip, Nullable`1<bool> latestOnly, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitStatus>> GetStatusesAsync(Guid project, string commitId, string repositoryId, Nullable`1<int> top, Nullable`1<int> skip, Nullable`1<bool> latestOnly, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitStatus>> GetStatusesAsync(Guid project, string commitId, Guid repositoryId, Nullable`1<int> top, Nullable`1<int> skip, Nullable`1<bool> latestOnly, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitStatus>> GetStatusesAsync(string commitId, string repositoryId, Nullable`1<int> top, Nullable`1<int> skip, Nullable`1<bool> latestOnly, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitStatus>> GetStatusesAsync(string commitId, Guid repositoryId, Nullable`1<int> top, Nullable`1<int> skip, Nullable`1<bool> latestOnly, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitSuggestion>> GetSuggestionsAsync(string project, string repositoryId, Nullable`1<bool> preferCompareBranch, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitSuggestion>> GetSuggestionsAsync(string project, Guid repositoryId, Nullable`1<bool> preferCompareBranch, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitSuggestion>> GetSuggestionsAsync(Guid project, string repositoryId, Nullable`1<bool> preferCompareBranch, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitSuggestion>> GetSuggestionsAsync(Guid project, Guid repositoryId, Nullable`1<bool> preferCompareBranch, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitSuggestion>> GetSuggestionsAsync(string repositoryId, Nullable`1<bool> preferCompareBranch, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<GitSuggestion>> GetSuggestionsAsync(Guid repositoryId, Nullable`1<bool> preferCompareBranch, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetTreeDiffsAsync>d__762")]
[EditorBrowsableAttribute("1")]
public virtual Task`1<GitTreeDiffResponse> GetTreeDiffsAsync(string project, string repositoryId, string baseId, string targetId, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetTreeDiffsAsync>d__763")]
[EditorBrowsableAttribute("1")]
public virtual Task`1<GitTreeDiffResponse> GetTreeDiffsAsync(string project, Guid repositoryId, string baseId, string targetId, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetTreeDiffsAsync>d__764")]
[EditorBrowsableAttribute("1")]
public virtual Task`1<GitTreeDiffResponse> GetTreeDiffsAsync(Guid project, string repositoryId, string baseId, string targetId, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetTreeDiffsAsync>d__765")]
[EditorBrowsableAttribute("1")]
public virtual Task`1<GitTreeDiffResponse> GetTreeDiffsAsync(Guid project, Guid repositoryId, string baseId, string targetId, Nullable`1<int> top, string continuationToken, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitTreeRef> GetTreeAsync(string project, string repositoryId, string sha1, string projectId, Nullable`1<bool> recursive, string fileName, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitTreeRef> GetTreeAsync(string project, Guid repositoryId, string sha1, string projectId, Nullable`1<bool> recursive, string fileName, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitTreeRef> GetTreeAsync(Guid project, string repositoryId, string sha1, string projectId, Nullable`1<bool> recursive, string fileName, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitTreeRef> GetTreeAsync(Guid project, Guid repositoryId, string sha1, string projectId, Nullable`1<bool> recursive, string fileName, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitTreeRef> GetTreeAsync(string repositoryId, string sha1, string projectId, Nullable`1<bool> recursive, string fileName, object userState, CancellationToken cancellationToken);
    public virtual Task`1<GitTreeRef> GetTreeAsync(Guid repositoryId, string sha1, string projectId, Nullable`1<bool> recursive, string fileName, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetTreeZipAsync>d__772")]
public virtual Task`1<Stream> GetTreeZipAsync(string project, string repositoryId, string sha1, string projectId, Nullable`1<bool> recursive, string fileName, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetTreeZipAsync>d__773")]
public virtual Task`1<Stream> GetTreeZipAsync(string project, Guid repositoryId, string sha1, string projectId, Nullable`1<bool> recursive, string fileName, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetTreeZipAsync>d__774")]
public virtual Task`1<Stream> GetTreeZipAsync(Guid project, string repositoryId, string sha1, string projectId, Nullable`1<bool> recursive, string fileName, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetTreeZipAsync>d__775")]
public virtual Task`1<Stream> GetTreeZipAsync(Guid project, Guid repositoryId, string sha1, string projectId, Nullable`1<bool> recursive, string fileName, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetTreeZipAsync>d__776")]
public virtual Task`1<Stream> GetTreeZipAsync(string repositoryId, string sha1, string projectId, Nullable`1<bool> recursive, string fileName, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHttpClientBase/<GetTreeZipAsync>d__777")]
public virtual Task`1<Stream> GetTreeZipAsync(Guid repositoryId, string sha1, string projectId, Nullable`1<bool> recursive, string fileName, object userState, CancellationToken cancellationToken);
}
[DataContractAttribute]
[NotificationEventBindingsAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportFailedEvent : object {
    [CompilerGeneratedAttribute]
private string <SourceRepositoryName>k__BackingField;
    [CompilerGeneratedAttribute]
private GitRepository <TargetRepository>k__BackingField;
    [DataMemberAttribute]
public string SourceRepositoryName { get; public set; }
    [DataMemberAttribute]
public GitRepository TargetRepository { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SourceRepositoryName();
    [CompilerGeneratedAttribute]
public void set_SourceRepositoryName(string value);
    [CompilerGeneratedAttribute]
public GitRepository get_TargetRepository();
    [CompilerGeneratedAttribute]
public void set_TargetRepository(GitRepository value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportGitSource : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Overwrite>k__BackingField;
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
[DefaultValueAttribute("False")]
public bool Overwrite { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public bool get_Overwrite();
    [CompilerGeneratedAttribute]
public void set_Overwrite(bool value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequest : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private int <ImportRequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private GitRepository <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private GitImportRequestParameters <Parameters>k__BackingField;
    [CompilerGeneratedAttribute]
private GitAsyncOperationStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private GitImportStatusDetail <DetailedStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [DataMemberAttribute]
public int ImportRequestId { get; public set; }
    [DataMemberAttribute]
public GitRepository Repository { get; public set; }
    [DataMemberAttribute]
public GitImportRequestParameters Parameters { get; public set; }
    [DataMemberAttribute]
public GitAsyncOperationStatus Status { get; public set; }
    [DataMemberAttribute]
public GitImportStatusDetail DetailedStatus { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ImportRequestId();
    [CompilerGeneratedAttribute]
public void set_ImportRequestId(int value);
    [CompilerGeneratedAttribute]
public GitRepository get_Repository();
    [CompilerGeneratedAttribute]
public void set_Repository(GitRepository value);
    [CompilerGeneratedAttribute]
public GitImportRequestParameters get_Parameters();
    [CompilerGeneratedAttribute]
public void set_Parameters(GitImportRequestParameters value);
    [CompilerGeneratedAttribute]
public GitAsyncOperationStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(GitAsyncOperationStatus value);
    [CompilerGeneratedAttribute]
public GitImportStatusDetail get_DetailedStatus();
    [CompilerGeneratedAttribute]
public void set_DetailedStatus(GitImportStatusDetail value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportRequestParameters : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private GitImportTfvcSource <TfvcSource>k__BackingField;
    [CompilerGeneratedAttribute]
private GitImportGitSource <GitSource>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ServiceEndpointId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeleteServiceEndpointAfterImportIsDone>k__BackingField;
    [DataMemberAttribute]
public GitImportTfvcSource TfvcSource { get; public set; }
    [DataMemberAttribute]
public GitImportGitSource GitSource { get; public set; }
    [DataMemberAttribute]
public Guid ServiceEndpointId { get; public set; }
    [DataMemberAttribute]
public bool DeleteServiceEndpointAfterImportIsDone { get; public set; }
    public GitImportRequestParameters(GitImportRequestParameters importRequestParameters);
    [CompilerGeneratedAttribute]
public GitImportTfvcSource get_TfvcSource();
    [CompilerGeneratedAttribute]
public void set_TfvcSource(GitImportTfvcSource value);
    [CompilerGeneratedAttribute]
public GitImportGitSource get_GitSource();
    [CompilerGeneratedAttribute]
public void set_GitSource(GitImportGitSource value);
    [CompilerGeneratedAttribute]
public Guid get_ServiceEndpointId();
    [CompilerGeneratedAttribute]
public void set_ServiceEndpointId(Guid value);
    [CompilerGeneratedAttribute]
public bool get_DeleteServiceEndpointAfterImportIsDone();
    [CompilerGeneratedAttribute]
public void set_DeleteServiceEndpointAfterImportIsDone(bool value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportStatusDetail : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private int <CurrentStep>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <AllSteps>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ErrorMessage>k__BackingField;
    [DataMemberAttribute]
public int CurrentStep { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<string> AllSteps { get; public set; }
    [DataMemberAttribute]
public string ErrorMessage { get; public set; }
    [CompilerGeneratedAttribute]
public int get_CurrentStep();
    [CompilerGeneratedAttribute]
public void set_CurrentStep(int value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_AllSteps();
    [CompilerGeneratedAttribute]
public void set_AllSteps(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public string get_ErrorMessage();
    [CompilerGeneratedAttribute]
public void set_ErrorMessage(string value);
}
[DataContractAttribute]
[NotificationEventBindingsAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportSucceededEvent : object {
    [CompilerGeneratedAttribute]
private string <SourceRepositoryName>k__BackingField;
    [CompilerGeneratedAttribute]
private GitRepository <TargetRepository>k__BackingField;
    [DataMemberAttribute]
public string SourceRepositoryName { get; public set; }
    [DataMemberAttribute]
public GitRepository TargetRepository { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SourceRepositoryName();
    [CompilerGeneratedAttribute]
public void set_SourceRepositoryName(string value);
    [CompilerGeneratedAttribute]
public GitRepository get_TargetRepository();
    [CompilerGeneratedAttribute]
public void set_TargetRepository(GitRepository value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitImportTfvcSource : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ImportHistory>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ImportHistoryDurationInDays>k__BackingField;
    [DataMemberAttribute]
public string Path { get; public set; }
    [DataMemberAttribute]
public bool ImportHistory { get; public set; }
    [DataMemberAttribute]
public int ImportHistoryDurationInDays { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public bool get_ImportHistory();
    [CompilerGeneratedAttribute]
public void set_ImportHistory(bool value);
    [CompilerGeneratedAttribute]
public int get_ImportHistoryDurationInDays();
    [CompilerGeneratedAttribute]
public void set_ImportHistoryDurationInDays(int value);
}
[DataContractAttribute]
[KnownTypeAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitItemsCollection")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitItem : ItemModel {
    private static int S_IFMT;
    private static int S_IFDIR;
    private static int S_IFLNK;
    private static int S_755;
    [CompilerGeneratedAttribute]
private string <ObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private GitObjectType <GitObjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLinuxExecutable>k__BackingField;
    [CompilerGeneratedAttribute]
private GitCommitRef <LatestProcessedChange>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubmoduleWebUrl>k__BackingField;
    [DataMemberAttribute]
public string ObjectId { get; public set; }
    [DataMemberAttribute]
public string OriginalObjectId { get; public set; }
    [DataMemberAttribute]
public GitObjectType GitObjectType { get; public set; }
    [DataMemberAttribute]
public string CommitId { get; public set; }
    [IgnoreDataMemberAttribute]
public bool IsLinuxExecutable { get; public set; }
    [DataMemberAttribute]
public GitCommitRef LatestProcessedChange { get; public set; }
    [DataMemberAttribute]
[ClientInternalUseOnlyAttribute("True")]
public string SubmoduleWebUrl { get; public set; }
    public GitItem(string itemPath, string objectId, GitObjectType objectType, string commitId, int mode);
    [CompilerGeneratedAttribute]
public string get_ObjectId();
    [CompilerGeneratedAttribute]
public void set_ObjectId(string value);
    [CompilerGeneratedAttribute]
public string get_OriginalObjectId();
    [CompilerGeneratedAttribute]
public void set_OriginalObjectId(string value);
    [CompilerGeneratedAttribute]
public GitObjectType get_GitObjectType();
    [CompilerGeneratedAttribute]
public void set_GitObjectType(GitObjectType value);
    [CompilerGeneratedAttribute]
public string get_CommitId();
    [CompilerGeneratedAttribute]
public void set_CommitId(string value);
    [CompilerGeneratedAttribute]
public bool get_IsLinuxExecutable();
    [CompilerGeneratedAttribute]
public void set_IsLinuxExecutable(bool value);
    [CompilerGeneratedAttribute]
public GitCommitRef get_LatestProcessedChange();
    [CompilerGeneratedAttribute]
public void set_LatestProcessedChange(GitCommitRef value);
    [CompilerGeneratedAttribute]
public string get_SubmoduleWebUrl();
    [CompilerGeneratedAttribute]
public void set_SubmoduleWebUrl(string value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitItemDescriptor : VersionControlSecuredObject {
    [DataMemberAttribute]
public string Path;
    [DataMemberAttribute]
public string Version;
    [DataMemberAttribute]
public GitVersionType VersionType;
    [DataMemberAttribute]
public GitVersionOptions VersionOptions;
    [CompilerGeneratedAttribute]
private VersionControlRecursionType <RecursionLevel>k__BackingField;
    [DataMemberAttribute]
public VersionControlRecursionType RecursionLevel { get; public set; }
    public GitItemDescriptor(ISecuredObject securedObject);
    [CompilerGeneratedAttribute]
public VersionControlRecursionType get_RecursionLevel();
    [CompilerGeneratedAttribute]
public void set_RecursionLevel(VersionControlRecursionType value);
}
[DataContractAttribute]
[GenerateInterfaceAttribute("True")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitItemRequestData : object {
    [DataMemberAttribute]
public GitItemDescriptor[] ItemDescriptors;
    [DataMemberAttribute]
public bool IncludeContentMetadata;
    [DataMemberAttribute]
public bool LatestProcessedChange;
    [CompilerGeneratedAttribute]
private bool <IncludeLinks>k__BackingField;
    [DataMemberAttribute]
public bool IncludeLinks { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IncludeLinks();
    [CompilerGeneratedAttribute]
public void set_IncludeLinks(bool value);
}
[CollectionDataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitItemsCollection : List`1<GitItem> {
    public GitItemsCollection(IEnumerable`1<GitItem> source);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitLastChangeItem : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitId>k__BackingField;
    [DataMemberAttribute]
public string Path { get; public set; }
    [DataMemberAttribute]
public string CommitId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_CommitId();
    [CompilerGeneratedAttribute]
public void set_CommitId(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitLastChangeTreeItems : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private List`1<GitLastChangeItem> <Items>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <LastExploredTime>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<GitCommitRef> <Commits>k__BackingField;
    [DataMemberAttribute]
public List`1<GitLastChangeItem> Items { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> LastExploredTime { get; public set; }
    [DataMemberAttribute]
public List`1<GitCommitRef> Commits { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<GitLastChangeItem> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(List`1<GitLastChangeItem> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_LastExploredTime();
    [CompilerGeneratedAttribute]
public void set_LastExploredTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public List`1<GitCommitRef> get_Commits();
    [CompilerGeneratedAttribute]
public void set_Commits(List`1<GitCommitRef> value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
[ClientIgnoreAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitLfsDeleteLockRequest : object {
    [CompilerGeneratedAttribute]
private bool <Force>k__BackingField;
    [DataMemberAttribute]
public bool Force { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_Force();
    [CompilerGeneratedAttribute]
public void set_Force(bool value);
}
[DataContractAttribute]
[ClientIgnoreAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitLfsErrorResponse : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private Uri <DocumentationUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RequestId>k__BackingField;
    [DataMemberAttribute]
public string Message { get; public set; }
    [DataMemberAttribute]
public Uri DocumentationUrl { get; public set; }
    [DataMemberAttribute]
public string RequestId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public Uri get_DocumentationUrl();
    [CompilerGeneratedAttribute]
public void set_DocumentationUrl(Uri value);
    [CompilerGeneratedAttribute]
public string get_RequestId();
    [CompilerGeneratedAttribute]
public void set_RequestId(string value);
}
[DataContractAttribute]
[ClientIgnoreAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitLfsLock : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTimeOffset <LockedAt>k__BackingField;
    [CompilerGeneratedAttribute]
private GitLfsLockOwner <Owner>k__BackingField;
    [DataMemberAttribute]
public string Path { get; public set; }
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public DateTimeOffset LockedAt { get; public set; }
    [DataMemberAttribute]
public GitLfsLockOwner Owner { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public DateTimeOffset get_LockedAt();
    [CompilerGeneratedAttribute]
public void set_LockedAt(DateTimeOffset value);
    [CompilerGeneratedAttribute]
public GitLfsLockOwner get_Owner();
    [CompilerGeneratedAttribute]
public void set_Owner(GitLfsLockOwner value);
}
[DataContractAttribute]
[ClientIgnoreAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitLfsLockCollection : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<GitLfsLock> <Locks>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<GitLfsLock> <Ours>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<GitLfsLock> <Theirs>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NextCursor>k__BackingField;
    [DataMemberAttribute]
public IEnumerable`1<GitLfsLock> Locks { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<GitLfsLock> Ours { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<GitLfsLock> Theirs { get; public set; }
    [DataMemberAttribute]
public string NextCursor { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<GitLfsLock> get_Locks();
    [CompilerGeneratedAttribute]
public void set_Locks(IEnumerable`1<GitLfsLock> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<GitLfsLock> get_Ours();
    [CompilerGeneratedAttribute]
public void set_Ours(IEnumerable`1<GitLfsLock> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<GitLfsLock> get_Theirs();
    [CompilerGeneratedAttribute]
public void set_Theirs(IEnumerable`1<GitLfsLock> value);
    [CompilerGeneratedAttribute]
public string get_NextCursor();
    [CompilerGeneratedAttribute]
public void set_NextCursor(string value);
}
[DataContractAttribute]
[ClientIgnoreAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitLfsLockOwner : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[DataContractAttribute]
[ClientIgnoreAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitLfsLockResponse : GitLfsErrorResponse {
    [CompilerGeneratedAttribute]
private GitLfsLock <Lock>k__BackingField;
    [DataMemberAttribute]
public GitLfsLock Lock { get; public set; }
    [CompilerGeneratedAttribute]
public GitLfsLock get_Lock();
    [CompilerGeneratedAttribute]
public void set_Lock(GitLfsLock value);
}
[DataContractAttribute]
[ClientIgnoreAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitLfsVerifyLockRequest : object {
    [CompilerGeneratedAttribute]
private int <Cursor>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Limit>k__BackingField;
    [DataMemberAttribute]
public int Cursor { get; public set; }
    [DataMemberAttribute]
public int Limit { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Cursor();
    [CompilerGeneratedAttribute]
public void set_Cursor(int value);
    [CompilerGeneratedAttribute]
public int get_Limit();
    [CompilerGeneratedAttribute]
public void set_Limit(int value);
}
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitLinkConstants : RestLinkConstants {
    public static string RepositoryLink;
    public static string CommitsLink;
    public static string RefsLink;
    public static string PushesLink;
    public static string PusherLink;
    public static string ItemsLink;
    public static string PullRequestsLink;
    public static string ChangesLink;
    public static string ReviewersLink;
    public static string BlobLink;
    public static string TreeLink;
    public static string TreeEntriesLink;
    public static string LockedByLink;
    public static string CreatedByLink;
    public static string SourceBranchLink;
    public static string TargetBranchLink;
    public static string IterationsLink;
    public static string ThreadsLink;
    public static string CommentsLink;
    public static string StatusesLink;
    public static string LastMergeSourceCommitLink;
    public static string LastMergeTargetCommitLink;
    public static string MergeCommitLink;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitMerge : GitMergeParameters {
    [CompilerGeneratedAttribute]
private int <OperationId>k__BackingField;
    [CompilerGeneratedAttribute]
private GitAsyncOperationStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private GitMergeOperationStatusDetail <DetailedStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [DataMemberAttribute]
public int OperationId { get; public set; }
    [DataMemberAttribute]
public GitAsyncOperationStatus Status { get; public set; }
    [DataMemberAttribute]
public GitMergeOperationStatusDetail DetailedStatus { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    [CompilerGeneratedAttribute]
public int get_OperationId();
    [CompilerGeneratedAttribute]
public void set_OperationId(int value);
    [CompilerGeneratedAttribute]
public GitAsyncOperationStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(GitAsyncOperationStatus value);
    [CompilerGeneratedAttribute]
public GitMergeOperationStatusDetail get_DetailedStatus();
    [CompilerGeneratedAttribute]
public void set_DetailedStatus(GitMergeOperationStatusDetail value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitMergeOperationStatusDetail : object {
    [CompilerGeneratedAttribute]
private string <MergeCommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FailureMessage>k__BackingField;
    [DataMemberAttribute]
public string MergeCommitId { get; public set; }
    [DataMemberAttribute]
public string FailureMessage { get; public set; }
    [CompilerGeneratedAttribute]
public string get_MergeCommitId();
    [CompilerGeneratedAttribute]
public void set_MergeCommitId(string value);
    [CompilerGeneratedAttribute]
public string get_FailureMessage();
    [CompilerGeneratedAttribute]
public void set_FailureMessage(string value);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitMergeOriginRef : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PullRequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <RevertId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <CherryPickId>k__BackingField;
    [DataMemberAttribute]
public Nullable`1<int> PullRequestId { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> RevertId { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> CherryPickId { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PullRequestId();
    [CompilerGeneratedAttribute]
public void set_PullRequestId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_RevertId();
    [CompilerGeneratedAttribute]
public void set_RevertId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_CherryPickId();
    [CompilerGeneratedAttribute]
public void set_CherryPickId(Nullable`1<int> value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitMergeParameters : object {
    [CompilerGeneratedAttribute]
private List`1<string> <Parents>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [DataMemberAttribute]
public List`1<string> Parents { get; public set; }
    [DataMemberAttribute]
public string Comment { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Parents();
    [CompilerGeneratedAttribute]
public void set_Parents(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
}
public enum Microsoft.TeamFoundation.SourceControl.WebApi.GitMetrics : Enum {
    public byte value__;
    public static GitMetrics None;
    public static GitMetrics CommitsPushed;
    public static GitMetrics PullRequestsCreated;
    public static GitMetrics PullRequestsCompleted;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitObject : object {
    [CompilerGeneratedAttribute]
private string <ObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private GitObjectType <ObjectType>k__BackingField;
    [DataMemberAttribute]
public string ObjectId { get; public set; }
    [DataMemberAttribute]
public GitObjectType ObjectType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ObjectId();
    [CompilerGeneratedAttribute]
public void set_ObjectId(string value);
    [CompilerGeneratedAttribute]
public GitObjectType get_ObjectType();
    [CompilerGeneratedAttribute]
public void set_ObjectType(GitObjectType value);
}
[DataContractAttribute]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.GitObjectType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static GitObjectType Bad;
    [EnumMemberAttribute]
public static GitObjectType Commit;
    [EnumMemberAttribute]
public static GitObjectType Tree;
    [EnumMemberAttribute]
public static GitObjectType Blob;
    [EnumMemberAttribute]
public static GitObjectType Tag;
    [EnumMemberAttribute]
public static GitObjectType Ext2;
    [EnumMemberAttribute]
public static GitObjectType OfsDelta;
    [EnumMemberAttribute]
public static GitObjectType RefDelta;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitPathAction : object {
    [CompilerGeneratedAttribute]
private GitPathActions <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Base64Content>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RawTextContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetPath>k__BackingField;
    [DataMemberAttribute]
public GitPathActions Action { get; public set; }
    [DataMemberAttribute]
public string Path { get; public set; }
    [DataMemberAttribute]
public string Base64Content { get; public set; }
    [DataMemberAttribute]
public string RawTextContent { get; public set; }
    [DataMemberAttribute]
public string TargetPath { get; public set; }
    [CompilerGeneratedAttribute]
public GitPathActions get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(GitPathActions value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Base64Content();
    [CompilerGeneratedAttribute]
public void set_Base64Content(string value);
    [CompilerGeneratedAttribute]
public string get_RawTextContent();
    [CompilerGeneratedAttribute]
public void set_RawTextContent(string value);
    [CompilerGeneratedAttribute]
public string get_TargetPath();
    [CompilerGeneratedAttribute]
public void set_TargetPath(string value);
}
public enum Microsoft.TeamFoundation.SourceControl.WebApi.GitPathActions : Enum {
    public byte value__;
    public static GitPathActions None;
    public static GitPathActions Edit;
    public static GitPathActions Delete;
    public static GitPathActions Add;
    public static GitPathActions Rename;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitPathToItemsCollection : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, List`1<GitItem>> <Items>k__BackingField;
    [DataMemberAttribute]
public Dictionary`2<string, List`1<GitItem>> Items { get; public set; }
    public GitPathToItemsCollection(ISecuredObject securedObject);
    [CompilerGeneratedAttribute]
public Dictionary`2<string, List`1<GitItem>> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(Dictionary`2<string, List`1<GitItem>> value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[EditorBrowsableAttribute("1")]
[FlagsAttribute]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.GitPermissionScope : Enum {
    public int value__;
    public static GitPermissionScope Project;
    public static GitPermissionScope Repository;
    public static GitPermissionScope Branch;
    public static GitPermissionScope NonBranchRef;
    public static GitPermissionScope BranchesRoot;
}
public static class Microsoft.TeamFoundation.SourceControl.WebApi.GitPermissionsUtil : object {
    public static GitPermissionScope GetTokenScope(string securityToken);
    public static Nullable`1<Guid> GetProjectIdFromToken(string securityToken);
    [EditorBrowsableAttribute("1")]
public static Nullable`1<Guid> GetRepoIdFromToken(string securityToken);
    [EditorBrowsableAttribute("1")]
public static string GetRefNameFromToken(string securityToken);
    private static Nullable`1<Guid> GetGuidFromToken(string securityToken, int index);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitPolicyConfigurationResponse : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<PolicyConfiguration> <PolicyConfigurations>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    [ClientResponseContentAttribute]
public IEnumerable`1<PolicyConfiguration> PolicyConfigurations { get; public set; }
    [ClientResponseHeaderAttribute("x-ms-continuationtoken")]
public string ContinuationToken { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<PolicyConfiguration> get_PolicyConfigurations();
    [CompilerGeneratedAttribute]
public void set_PolicyConfigurations(IEnumerable`1<PolicyConfiguration> value);
    [CompilerGeneratedAttribute]
public string get_ContinuationToken();
    [CompilerGeneratedAttribute]
public void set_ContinuationToken(string value);
}
[ServiceEventObjectAttribute]
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequest : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private GitRepository <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PullRequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CodeReviewId>k__BackingField;
    [CompilerGeneratedAttribute]
private PullRequestStatus <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityRef <CreatedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ClosedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceRefName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetRefName>k__BackingField;
    [CompilerGeneratedAttribute]
private PullRequestAsyncStatus <MergeStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private PullRequestMergeFailureType <MergeFailureType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MergeFailureMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsDraft>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasMultipleMergeBases>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <MergeId>k__BackingField;
    [CompilerGeneratedAttribute]
private GitCommitRef <LastMergeSourceCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private GitCommitRef <LastMergeTargetCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private GitCommitRef <LastMergeCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityRefWithVote[] <Reviewers>k__BackingField;
    [CompilerGeneratedAttribute]
private WebApiTagDefinition[] <Labels>k__BackingField;
    [CompilerGeneratedAttribute]
private GitCommitRef[] <Commits>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoteUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [CompilerGeneratedAttribute]
private GitPullRequestCompletionOptions <CompletionOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private GitPullRequestMergeOptions <MergeOptions>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsIterations>k__BackingField;
    [CompilerGeneratedAttribute]
private ResourceRef[] <WorkItemRefs>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CompletionQueueTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityRef <ClosedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityRef <AutoCompleteSetBy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ArtifactId>k__BackingField;
    [CompilerGeneratedAttribute]
private GitForkRef <ForkSource>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IgnoreTargetRefAndChooseDynamically>k__BackingField;
    [DataMemberAttribute]
public GitRepository Repository { get; public set; }
    [DataMemberAttribute]
public int PullRequestId { get; public set; }
    [DataMemberAttribute]
public int CodeReviewId { get; public set; }
    [DataMemberAttribute]
public PullRequestStatus Status { get; public set; }
    [DataMemberAttribute]
public IdentityRef CreatedBy { get; public set; }
    [DataMemberAttribute]
public DateTime CreationDate { get; public set; }
    [DataMemberAttribute]
public DateTime ClosedDate { get; public set; }
    [DataMemberAttribute]
public string Title { get; public set; }
    [DataMemberAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
public string SourceRefName { get; public set; }
    [DataMemberAttribute]
public string TargetRefName { get; public set; }
    [DataMemberAttribute]
public PullRequestAsyncStatus MergeStatus { get; public set; }
    [DataMemberAttribute]
public PullRequestMergeFailureType MergeFailureType { get; public set; }
    [DataMemberAttribute]
public string MergeFailureMessage { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> IsDraft { get; public set; }
    [DataMemberAttribute]
public bool HasMultipleMergeBases { get; public set; }
    [DataMemberAttribute]
public Guid MergeId { get; public set; }
    [DataMemberAttribute]
public GitCommitRef LastMergeSourceCommit { get; public set; }
    [DataMemberAttribute]
public GitCommitRef LastMergeTargetCommit { get; public set; }
    [DataMemberAttribute]
public GitCommitRef LastMergeCommit { get; public set; }
    [DataMemberAttribute]
public IdentityRefWithVote[] Reviewers { get; public set; }
    [DataMemberAttribute]
public WebApiTagDefinition[] Labels { get; public set; }
    [DataMemberAttribute]
public GitCommitRef[] Commits { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public string RemoteUrl { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    [DataMemberAttribute]
public GitPullRequestCompletionOptions CompletionOptions { get; public set; }
    [DataMemberAttribute]
public GitPullRequestMergeOptions MergeOptions { get; public set; }
    [DataMemberAttribute]
public bool SupportsIterations { get; public set; }
    [DataMemberAttribute]
public ResourceRef[] WorkItemRefs { get; public set; }
    [DataMemberAttribute]
public DateTime CompletionQueueTime { get; public set; }
    [DataMemberAttribute]
public IdentityRef ClosedBy { get; public set; }
    [DataMemberAttribute]
public IdentityRef AutoCompleteSetBy { get; public set; }
    [DataMemberAttribute]
public string ArtifactId { get; public set; }
    [DataMemberAttribute]
public GitForkRef ForkSource { get; public set; }
    [DataMemberAttribute]
public bool IgnoreTargetRefAndChooseDynamically { get; public set; }
    [CompilerGeneratedAttribute]
public GitRepository get_Repository();
    [CompilerGeneratedAttribute]
public void set_Repository(GitRepository value);
    [CompilerGeneratedAttribute]
public int get_PullRequestId();
    [CompilerGeneratedAttribute]
public void set_PullRequestId(int value);
    [CompilerGeneratedAttribute]
public int get_CodeReviewId();
    [CompilerGeneratedAttribute]
public void set_CodeReviewId(int value);
    [CompilerGeneratedAttribute]
public PullRequestStatus get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(PullRequestStatus value);
    [CompilerGeneratedAttribute]
public IdentityRef get_CreatedBy();
    [CompilerGeneratedAttribute]
public void set_CreatedBy(IdentityRef value);
    [CompilerGeneratedAttribute]
public DateTime get_CreationDate();
    [CompilerGeneratedAttribute]
public void set_CreationDate(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_ClosedDate();
    [CompilerGeneratedAttribute]
public void set_ClosedDate(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_SourceRefName();
    [CompilerGeneratedAttribute]
public void set_SourceRefName(string value);
    [CompilerGeneratedAttribute]
public string get_TargetRefName();
    [CompilerGeneratedAttribute]
public void set_TargetRefName(string value);
    [CompilerGeneratedAttribute]
public PullRequestAsyncStatus get_MergeStatus();
    [CompilerGeneratedAttribute]
public void set_MergeStatus(PullRequestAsyncStatus value);
    [CompilerGeneratedAttribute]
public PullRequestMergeFailureType get_MergeFailureType();
    [CompilerGeneratedAttribute]
public void set_MergeFailureType(PullRequestMergeFailureType value);
    [CompilerGeneratedAttribute]
public string get_MergeFailureMessage();
    [CompilerGeneratedAttribute]
public void set_MergeFailureMessage(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsDraft();
    [CompilerGeneratedAttribute]
public void set_IsDraft(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_HasMultipleMergeBases();
    [CompilerGeneratedAttribute]
public void set_HasMultipleMergeBases(bool value);
    [CompilerGeneratedAttribute]
public Guid get_MergeId();
    [CompilerGeneratedAttribute]
public void set_MergeId(Guid value);
    [CompilerGeneratedAttribute]
public GitCommitRef get_LastMergeSourceCommit();
    [CompilerGeneratedAttribute]
public void set_LastMergeSourceCommit(GitCommitRef value);
    [CompilerGeneratedAttribute]
public GitCommitRef get_LastMergeTargetCommit();
    [CompilerGeneratedAttribute]
public void set_LastMergeTargetCommit(GitCommitRef value);
    [CompilerGeneratedAttribute]
public GitCommitRef get_LastMergeCommit();
    [CompilerGeneratedAttribute]
public void set_LastMergeCommit(GitCommitRef value);
    [CompilerGeneratedAttribute]
public IdentityRefWithVote[] get_Reviewers();
    [CompilerGeneratedAttribute]
public void set_Reviewers(IdentityRefWithVote[] value);
    [CompilerGeneratedAttribute]
public WebApiTagDefinition[] get_Labels();
    [CompilerGeneratedAttribute]
public void set_Labels(WebApiTagDefinition[] value);
    [CompilerGeneratedAttribute]
public GitCommitRef[] get_Commits();
    [CompilerGeneratedAttribute]
public void set_Commits(GitCommitRef[] value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_RemoteUrl();
    [CompilerGeneratedAttribute]
public void set_RemoteUrl(string value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
    [CompilerGeneratedAttribute]
public GitPullRequestCompletionOptions get_CompletionOptions();
    [CompilerGeneratedAttribute]
public void set_CompletionOptions(GitPullRequestCompletionOptions value);
    [CompilerGeneratedAttribute]
public GitPullRequestMergeOptions get_MergeOptions();
    [CompilerGeneratedAttribute]
public void set_MergeOptions(GitPullRequestMergeOptions value);
    [CompilerGeneratedAttribute]
public bool get_SupportsIterations();
    [CompilerGeneratedAttribute]
public void set_SupportsIterations(bool value);
    [CompilerGeneratedAttribute]
public ResourceRef[] get_WorkItemRefs();
    [CompilerGeneratedAttribute]
public void set_WorkItemRefs(ResourceRef[] value);
    [CompilerGeneratedAttribute]
public DateTime get_CompletionQueueTime();
    [CompilerGeneratedAttribute]
public void set_CompletionQueueTime(DateTime value);
    [CompilerGeneratedAttribute]
public IdentityRef get_ClosedBy();
    [CompilerGeneratedAttribute]
public void set_ClosedBy(IdentityRef value);
    [CompilerGeneratedAttribute]
public IdentityRef get_AutoCompleteSetBy();
    [CompilerGeneratedAttribute]
public void set_AutoCompleteSetBy(IdentityRef value);
    [CompilerGeneratedAttribute]
public string get_ArtifactId();
    [CompilerGeneratedAttribute]
public void set_ArtifactId(string value);
    [CompilerGeneratedAttribute]
public GitForkRef get_ForkSource();
    [CompilerGeneratedAttribute]
public void set_ForkSource(GitForkRef value);
    [CompilerGeneratedAttribute]
public bool get_IgnoreTargetRefAndChooseDynamically();
    [CompilerGeneratedAttribute]
public void set_IgnoreTargetRefAndChooseDynamically(bool value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
    private void SetSecuredObjectOnCollections(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestChange : GitChange {
    [CompilerGeneratedAttribute]
private int <ChangeTrackingId>k__BackingField;
    [DataMemberAttribute]
public int ChangeTrackingId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ChangeTrackingId();
    [CompilerGeneratedAttribute]
public void set_ChangeTrackingId(int value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThread : CommentThread {
    [CompilerGeneratedAttribute]
private string <ArtifactUri>k__BackingField;
    [CompilerGeneratedAttribute]
private GitPullRequestCommentThreadContext <PullRequestThreadContext>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MarkForUpdate>k__BackingField;
    internal string ArtifactUri { get; internal set; }
    [DataMemberAttribute]
public GitPullRequestCommentThreadContext PullRequestThreadContext { get; public set; }
    internal bool MarkForUpdate { get; internal set; }
    public GitPullRequestCommentThread(ISecuredObject securedObject);
    [CompilerGeneratedAttribute]
internal string get_ArtifactUri();
    [CompilerGeneratedAttribute]
internal void set_ArtifactUri(string value);
    [CompilerGeneratedAttribute]
public GitPullRequestCommentThreadContext get_PullRequestThreadContext();
    [CompilerGeneratedAttribute]
public void set_PullRequestThreadContext(GitPullRequestCommentThreadContext value);
    [CompilerGeneratedAttribute]
internal bool get_MarkForUpdate();
    [CompilerGeneratedAttribute]
internal void set_MarkForUpdate(bool value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCommentThreadContext : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private CommentIterationContext <IterationContext>k__BackingField;
    [CompilerGeneratedAttribute]
private CommentTrackingCriteria <TrackingCriteria>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ChangeTrackingId>k__BackingField;
    [DataMemberAttribute]
public CommentIterationContext IterationContext { get; public set; }
    [DataMemberAttribute]
public CommentTrackingCriteria TrackingCriteria { get; public set; }
    [DataMemberAttribute]
public int ChangeTrackingId { get; public set; }
    [CompilerGeneratedAttribute]
public CommentIterationContext get_IterationContext();
    [CompilerGeneratedAttribute]
public void set_IterationContext(CommentIterationContext value);
    [CompilerGeneratedAttribute]
public CommentTrackingCriteria get_TrackingCriteria();
    [CompilerGeneratedAttribute]
public void set_TrackingCriteria(CommentTrackingCriteria value);
    [CompilerGeneratedAttribute]
public int get_ChangeTrackingId();
    [CompilerGeneratedAttribute]
public void set_ChangeTrackingId(int value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestCompletionOptions : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private string <MergeCommitMessage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <DeleteSourceBranch>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SquashMerge>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<GitPullRequestMergeStrategy> <MergeStrategy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BypassPolicy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BypassReason>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TransitionWorkItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TriggeredByAutoComplete>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<int> <AutoCompleteIgnoreConfigIds>k__BackingField;
    [DataMemberAttribute]
public string MergeCommitMessage { get; public set; }
    [DataMemberAttribute]
public bool DeleteSourceBranch { get; public set; }
    [DataMemberAttribute]
public bool SquashMerge { get; public set; }
    [DataMemberAttribute]
public Nullable`1<GitPullRequestMergeStrategy> MergeStrategy { get; public set; }
    [DataMemberAttribute]
public bool BypassPolicy { get; public set; }
    [DataMemberAttribute]
public string BypassReason { get; public set; }
    [DataMemberAttribute]
public bool TransitionWorkItems { get; public set; }
    [DataMemberAttribute]
public bool TriggeredByAutoComplete { get; public set; }
    [DataMemberAttribute]
public List`1<int> AutoCompleteIgnoreConfigIds { get; public set; }
    [CompilerGeneratedAttribute]
public string get_MergeCommitMessage();
    [CompilerGeneratedAttribute]
public void set_MergeCommitMessage(string value);
    [CompilerGeneratedAttribute]
public bool get_DeleteSourceBranch();
    [CompilerGeneratedAttribute]
public void set_DeleteSourceBranch(bool value);
    [CompilerGeneratedAttribute]
public bool get_SquashMerge();
    [CompilerGeneratedAttribute]
public void set_SquashMerge(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<GitPullRequestMergeStrategy> get_MergeStrategy();
    [CompilerGeneratedAttribute]
public void set_MergeStrategy(Nullable`1<GitPullRequestMergeStrategy> value);
    [CompilerGeneratedAttribute]
public bool get_BypassPolicy();
    [CompilerGeneratedAttribute]
public void set_BypassPolicy(bool value);
    [CompilerGeneratedAttribute]
public string get_BypassReason();
    [CompilerGeneratedAttribute]
public void set_BypassReason(string value);
    [CompilerGeneratedAttribute]
public bool get_TransitionWorkItems();
    [CompilerGeneratedAttribute]
public void set_TransitionWorkItems(bool value);
    [CompilerGeneratedAttribute]
public bool get_TriggeredByAutoComplete();
    [CompilerGeneratedAttribute]
public void set_TriggeredByAutoComplete(bool value);
    [CompilerGeneratedAttribute]
public List`1<int> get_AutoCompleteIgnoreConfigIds();
    [CompilerGeneratedAttribute]
public void set_AutoCompleteIgnoreConfigIds(List`1<int> value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
    public void Normalize();
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIteration : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityRef <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<GitPullRequestChange> <ChangeList>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <CreatedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <UpdatedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private GitCommitRef <SourceRefCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private GitCommitRef <TargetRefCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private GitCommitRef <CommonRefCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<GitCommitRef> <Commits>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <hasMoreCommits>k__BackingField;
    [CompilerGeneratedAttribute]
private IterationReason <Reason>k__BackingField;
    [CompilerGeneratedAttribute]
private GitPushRef <Push>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewTargetRefName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OldTargetRefName>k__BackingField;
    [DataMemberAttribute]
public Nullable`1<int> Id { get; public set; }
    [DataMemberAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
public IdentityRef Author { get; public set; }
    [DataMemberAttribute]
public IList`1<GitPullRequestChange> ChangeList { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> CreatedDate { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> UpdatedDate { get; public set; }
    [DataMemberAttribute]
public GitCommitRef SourceRefCommit { get; public set; }
    [DataMemberAttribute]
public GitCommitRef TargetRefCommit { get; public set; }
    [DataMemberAttribute]
public GitCommitRef CommonRefCommit { get; public set; }
    [DataMemberAttribute]
public IList`1<GitCommitRef> Commits { get; public set; }
    [DataMemberAttribute]
public bool hasMoreCommits { get; public set; }
    [DataMemberAttribute]
public IterationReason Reason { get; public set; }
    [DataMemberAttribute]
public GitPushRef Push { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    [DataMemberAttribute]
public string NewTargetRefName { get; public set; }
    [DataMemberAttribute]
public string OldTargetRefName { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public IdentityRef get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(IdentityRef value);
    [CompilerGeneratedAttribute]
public IList`1<GitPullRequestChange> get_ChangeList();
    [CompilerGeneratedAttribute]
public void set_ChangeList(IList`1<GitPullRequestChange> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_CreatedDate();
    [CompilerGeneratedAttribute]
public void set_CreatedDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_UpdatedDate();
    [CompilerGeneratedAttribute]
public void set_UpdatedDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public GitCommitRef get_SourceRefCommit();
    [CompilerGeneratedAttribute]
public void set_SourceRefCommit(GitCommitRef value);
    [CompilerGeneratedAttribute]
public GitCommitRef get_TargetRefCommit();
    [CompilerGeneratedAttribute]
public void set_TargetRefCommit(GitCommitRef value);
    [CompilerGeneratedAttribute]
public GitCommitRef get_CommonRefCommit();
    [CompilerGeneratedAttribute]
public void set_CommonRefCommit(GitCommitRef value);
    [CompilerGeneratedAttribute]
public IList`1<GitCommitRef> get_Commits();
    [CompilerGeneratedAttribute]
public void set_Commits(IList`1<GitCommitRef> value);
    [CompilerGeneratedAttribute]
public bool get_hasMoreCommits();
    [CompilerGeneratedAttribute]
public void set_hasMoreCommits(bool value);
    [CompilerGeneratedAttribute]
public IterationReason get_Reason();
    [CompilerGeneratedAttribute]
public void set_Reason(IterationReason value);
    [CompilerGeneratedAttribute]
public GitPushRef get_Push();
    [CompilerGeneratedAttribute]
public void set_Push(GitPushRef value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
    [CompilerGeneratedAttribute]
public string get_NewTargetRefName();
    [CompilerGeneratedAttribute]
public void set_NewTargetRefName(string value);
    [CompilerGeneratedAttribute]
public string get_OldTargetRefName();
    [CompilerGeneratedAttribute]
public void set_OldTargetRefName(string value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestIterationChanges : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private int <NextTop>k__BackingField;
    [CompilerGeneratedAttribute]
private int <NextSkip>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<GitPullRequestChange> <ChangeEntries>k__BackingField;
    [DataMemberAttribute]
public int NextTop { get; public set; }
    [DataMemberAttribute]
public int NextSkip { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<GitPullRequestChange> ChangeEntries { get; public set; }
    public GitPullRequestIterationChanges(ISecuredObject securedObject);
    [CompilerGeneratedAttribute]
public int get_NextTop();
    [CompilerGeneratedAttribute]
public void set_NextTop(int value);
    [CompilerGeneratedAttribute]
public int get_NextSkip();
    [CompilerGeneratedAttribute]
public void set_NextSkip(int value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<GitPullRequestChange> get_ChangeEntries();
    [CompilerGeneratedAttribute]
public void set_ChangeEntries(IEnumerable`1<GitPullRequestChange> value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestMergeOptions : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DisableRenames>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <DetectRenameFalsePositives>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <ConflictAuthorshipCommits>k__BackingField;
    [DataMemberAttribute]
public Nullable`1<bool> DisableRenames { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> DetectRenameFalsePositives { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> ConflictAuthorshipCommits { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DisableRenames();
    [CompilerGeneratedAttribute]
public void set_DisableRenames(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_DetectRenameFalsePositives();
    [CompilerGeneratedAttribute]
public void set_DetectRenameFalsePositives(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_ConflictAuthorshipCommits();
    [CompilerGeneratedAttribute]
public void set_ConflictAuthorshipCommits(Nullable`1<bool> value);
    public virtual bool Equals(object obj);
    public virtual int GetHashCode();
}
[DataContractAttribute]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestMergeStrategy : Enum {
    public int value__;
    [EnumMemberAttribute]
public static GitPullRequestMergeStrategy NoFastForward;
    [EnumMemberAttribute]
public static GitPullRequestMergeStrategy Squash;
    [EnumMemberAttribute]
public static GitPullRequestMergeStrategy Rebase;
    [EnumMemberAttribute]
public static GitPullRequestMergeStrategy RebaseMerge;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQuery : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private List`1<GitPullRequestQueryInput> <QueryInputs>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IDictionary`2<string, List`1<GitPullRequest>>> <Results>k__BackingField;
    [DataMemberAttribute]
public List`1<GitPullRequestQueryInput> QueryInputs { get; public set; }
    [DataMemberAttribute]
public List`1<IDictionary`2<string, List`1<GitPullRequest>>> Results { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<GitPullRequestQueryInput> get_QueryInputs();
    [CompilerGeneratedAttribute]
public void set_QueryInputs(List`1<GitPullRequestQueryInput> value);
    [CompilerGeneratedAttribute]
public List`1<IDictionary`2<string, List`1<GitPullRequest>>> get_Results();
    [CompilerGeneratedAttribute]
public void set_Results(List`1<IDictionary`2<string, List`1<GitPullRequest>>> value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQueryInput : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private GitPullRequestQueryType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <Items>k__BackingField;
    [DataMemberAttribute]
public GitPullRequestQueryType Type { get; public set; }
    [DataMemberAttribute]
public List`1<string> Items { get; public set; }
    [CompilerGeneratedAttribute]
public GitPullRequestQueryType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(GitPullRequestQueryType value);
    [CompilerGeneratedAttribute]
public List`1<string> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(List`1<string> value);
}
[DataContractAttribute]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestQueryType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static GitPullRequestQueryType NotSet;
    [EnumMemberAttribute]
public static GitPullRequestQueryType LastMergeCommit;
    [EnumMemberAttribute]
public static GitPullRequestQueryType Commit;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestReviewFileContentInfo : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SHA1Hash>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [DataMemberAttribute]
public string Path { get; public set; }
    [DataMemberAttribute]
public string SHA1Hash { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_SHA1Hash();
    [CompilerGeneratedAttribute]
public void set_SHA1Hash(string value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
}
[DataContractAttribute]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestReviewFileType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static GitPullRequestReviewFileType ChangeEntry;
    [EnumMemberAttribute]
public static GitPullRequestReviewFileType Attachment;
}
[EditorBrowsableAttribute("1")]
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestSearchCriteria : object {
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <RepositoryId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <CreatorId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <ReviewerId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PullRequestStatus> <Status>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetRefName>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <SourceRepositoryId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceRefName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeLinks>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <MinTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <MaxTime>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<PullRequestTimeRangeType> <QueryTimeRangeType>k__BackingField;
    [DataMemberAttribute]
public Nullable`1<Guid> RepositoryId { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Guid> CreatorId { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Guid> ReviewerId { get; public set; }
    [DataMemberAttribute]
public Nullable`1<PullRequestStatus> Status { get; public set; }
    [DataMemberAttribute]
public string TargetRefName { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Guid> SourceRepositoryId { get; public set; }
    [DataMemberAttribute]
public string SourceRefName { get; public set; }
    [DataMemberAttribute]
public bool IncludeLinks { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> MinTime { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> MaxTime { get; public set; }
    [DataMemberAttribute]
public Nullable`1<PullRequestTimeRangeType> QueryTimeRangeType { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_RepositoryId();
    [CompilerGeneratedAttribute]
public void set_RepositoryId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_CreatorId();
    [CompilerGeneratedAttribute]
public void set_CreatorId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_ReviewerId();
    [CompilerGeneratedAttribute]
public void set_ReviewerId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public Nullable`1<PullRequestStatus> get_Status();
    [CompilerGeneratedAttribute]
public void set_Status(Nullable`1<PullRequestStatus> value);
    [CompilerGeneratedAttribute]
public string get_TargetRefName();
    [CompilerGeneratedAttribute]
public void set_TargetRefName(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_SourceRepositoryId();
    [CompilerGeneratedAttribute]
public void set_SourceRepositoryId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public string get_SourceRefName();
    [CompilerGeneratedAttribute]
public void set_SourceRefName(string value);
    [CompilerGeneratedAttribute]
public bool get_IncludeLinks();
    [CompilerGeneratedAttribute]
public void set_IncludeLinks(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_MinTime();
    [CompilerGeneratedAttribute]
public void set_MinTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_MaxTime();
    [CompilerGeneratedAttribute]
public void set_MaxTime(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<PullRequestTimeRangeType> get_QueryTimeRangeType();
    [CompilerGeneratedAttribute]
public void set_QueryTimeRangeType(Nullable`1<PullRequestTimeRangeType> value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitPullRequestStatus : GitStatus {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <IterationId>k__BackingField;
    [CompilerGeneratedAttribute]
private PropertiesCollection <Properties>k__BackingField;
    [DataMemberAttribute]
public Nullable`1<int> IterationId { get; public set; }
    [DataMemberAttribute]
public PropertiesCollection Properties { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_IterationId();
    [CompilerGeneratedAttribute]
public void set_IterationId(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public PropertiesCollection get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(PropertiesCollection value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitPush : GitPushRef {
    [CompilerGeneratedAttribute]
private IEnumerable`1<GitCommitRef> <Commits>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<GitRefUpdate> <RefUpdates>k__BackingField;
    [CompilerGeneratedAttribute]
private GitRepository <Repository>k__BackingField;
    [DataMemberAttribute]
public IEnumerable`1<GitCommitRef> Commits { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<GitRefUpdate> RefUpdates { get; public set; }
    [DataMemberAttribute]
public GitRepository Repository { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<GitCommitRef> get_Commits();
    [CompilerGeneratedAttribute]
public void set_Commits(IEnumerable`1<GitCommitRef> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<GitRefUpdate> get_RefUpdates();
    [CompilerGeneratedAttribute]
public void set_RefUpdates(IEnumerable`1<GitRefUpdate> value);
    [CompilerGeneratedAttribute]
public GitRepository get_Repository();
    [CompilerGeneratedAttribute]
public void set_Repository(GitRepository value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitPushEventData : object {
    [CompilerGeneratedAttribute]
private GitRepository <Repository>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BeforeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AfterId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Branch>k__BackingField;
    [CompilerGeneratedAttribute]
private GitCommit[] <Commits>k__BackingField;
    [DataMemberAttribute]
public GitRepository Repository { get; public set; }
    [DataMemberAttribute]
public string BeforeId { get; public set; }
    [DataMemberAttribute]
public string AfterId { get; public set; }
    [DataMemberAttribute]
public string Branch { get; public set; }
    [DataMemberAttribute]
public GitCommit[] Commits { get; public set; }
    [CompilerGeneratedAttribute]
public GitRepository get_Repository();
    [CompilerGeneratedAttribute]
public void set_Repository(GitRepository value);
    [CompilerGeneratedAttribute]
public string get_BeforeId();
    [CompilerGeneratedAttribute]
public void set_BeforeId(string value);
    [CompilerGeneratedAttribute]
public string get_AfterId();
    [CompilerGeneratedAttribute]
public void set_AfterId(string value);
    [CompilerGeneratedAttribute]
public string get_Branch();
    [CompilerGeneratedAttribute]
public void set_Branch(string value);
    [CompilerGeneratedAttribute]
public GitCommit[] get_Commits();
    [CompilerGeneratedAttribute]
public void set_Commits(GitCommit[] value);
}
[ServiceEventObjectAttribute]
[DataContractAttribute]
[KnownTypeAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitPush")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitPushRef : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private IdentityRef <PushedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PushId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PushCorrelationId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Date>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [DataMemberAttribute]
public IdentityRef PushedBy { get; public set; }
    [DataMemberAttribute]
public int PushId { get; public set; }
    [ObsoleteAttribute("This is unused as of Dev15 M115 and may be deleted in the future")]
[DataMemberAttribute]
public Guid PushCorrelationId { get; public set; }
    [DataMemberAttribute]
public DateTime Date { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    [CompilerGeneratedAttribute]
public IdentityRef get_PushedBy();
    [CompilerGeneratedAttribute]
public void set_PushedBy(IdentityRef value);
    [CompilerGeneratedAttribute]
public int get_PushId();
    [CompilerGeneratedAttribute]
public void set_PushId(int value);
    [CompilerGeneratedAttribute]
public Guid get_PushCorrelationId();
    [CompilerGeneratedAttribute]
public void set_PushCorrelationId(Guid value);
    [CompilerGeneratedAttribute]
public DateTime get_Date();
    [CompilerGeneratedAttribute]
public void set_Date(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitPushSearchCriteria : object {
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <FromDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <ToDate>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<Guid> <PusherId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RefName>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeRefUpdates>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeLinks>k__BackingField;
    [DataMemberAttribute]
public Nullable`1<DateTime> FromDate { get; public set; }
    [DataMemberAttribute]
public Nullable`1<DateTime> ToDate { get; public set; }
    [DataMemberAttribute]
public Nullable`1<Guid> PusherId { get; public set; }
    [DataMemberAttribute]
public string RefName { get; public set; }
    [DataMemberAttribute]
public bool IncludeRefUpdates { get; public set; }
    [DataMemberAttribute]
public bool IncludeLinks { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_FromDate();
    [CompilerGeneratedAttribute]
public void set_FromDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_ToDate();
    [CompilerGeneratedAttribute]
public void set_ToDate(Nullable`1<DateTime> value);
    [CompilerGeneratedAttribute]
public Nullable`1<Guid> get_PusherId();
    [CompilerGeneratedAttribute]
public void set_PusherId(Nullable`1<Guid> value);
    [CompilerGeneratedAttribute]
public string get_RefName();
    [CompilerGeneratedAttribute]
public void set_RefName(string value);
    [CompilerGeneratedAttribute]
public bool get_IncludeRefUpdates();
    [CompilerGeneratedAttribute]
public void set_IncludeRefUpdates(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeLinks();
    [CompilerGeneratedAttribute]
public void set_IncludeLinks(bool value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryBranchStatsCriteria : object {
    [CompilerGeneratedAttribute]
private GitVersionDescriptor <baseVersionDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private GitVersionDescriptor[] <targetVersionDescriptors>k__BackingField;
    [DataMemberAttribute]
public GitVersionDescriptor baseVersionDescriptor { get; public set; }
    [DataMemberAttribute]
public GitVersionDescriptor[] targetVersionDescriptors { get; public set; }
    [CompilerGeneratedAttribute]
public GitVersionDescriptor get_baseVersionDescriptor();
    [CompilerGeneratedAttribute]
public void set_baseVersionDescriptor(GitVersionDescriptor value);
    [CompilerGeneratedAttribute]
public GitVersionDescriptor[] get_targetVersionDescriptors();
    [CompilerGeneratedAttribute]
public void set_targetVersionDescriptors(GitVersionDescriptor[] value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryCommitsCriteria : object {
    [CompilerGeneratedAttribute]
private List`1<string> <Ids>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FromDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToDate>k__BackingField;
    [CompilerGeneratedAttribute]
private GitVersionDescriptor <ItemVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private GitVersionDescriptor <CompareVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FromCommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToCommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Committer>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExcludeDeletes>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Skip>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Top>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeLinks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeWorkItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeUserImageUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludePushData>k__BackingField;
    [CompilerGeneratedAttribute]
private GitHistoryMode <HistoryMode>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ShowOldestCommitsFirst>k__BackingField;
    [DataMemberAttribute]
public List`1<string> Ids { get; public set; }
    [DataMemberAttribute]
public string FromDate { get; public set; }
    [DataMemberAttribute]
public string ToDate { get; public set; }
    [DataMemberAttribute]
public GitVersionDescriptor ItemVersion { get; public set; }
    [DataMemberAttribute]
public GitVersionDescriptor CompareVersion { get; public set; }
    [DataMemberAttribute]
public string FromCommitId { get; public set; }
    [DataMemberAttribute]
public string ToCommitId { get; public set; }
    [DataMemberAttribute]
public string Committer { get; public set; }
    [DataMemberAttribute]
public string Author { get; public set; }
    [DataMemberAttribute]
public string ItemPath { get; public set; }
    [DataMemberAttribute]
public bool ExcludeDeletes { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> Skip { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> Top { get; public set; }
    [DataMemberAttribute]
public bool IncludeLinks { get; public set; }
    [DataMemberAttribute]
[EditorBrowsableAttribute("1")]
public bool IncludeWorkItems { get; public set; }
    [DataMemberAttribute]
public bool IncludeUserImageUrl { get; public set; }
    [DataMemberAttribute]
public bool IncludePushData { get; public set; }
    [DataMemberAttribute]
[EditorBrowsableAttribute("1")]
public GitHistoryMode HistoryMode { get; public set; }
    [DataMemberAttribute]
public bool ShowOldestCommitsFirst { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_Ids();
    [CompilerGeneratedAttribute]
public void set_Ids(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_FromDate();
    [CompilerGeneratedAttribute]
public void set_FromDate(string value);
    [CompilerGeneratedAttribute]
public string get_ToDate();
    [CompilerGeneratedAttribute]
public void set_ToDate(string value);
    [CompilerGeneratedAttribute]
public GitVersionDescriptor get_ItemVersion();
    [CompilerGeneratedAttribute]
public void set_ItemVersion(GitVersionDescriptor value);
    [CompilerGeneratedAttribute]
public GitVersionDescriptor get_CompareVersion();
    [CompilerGeneratedAttribute]
public void set_CompareVersion(GitVersionDescriptor value);
    [CompilerGeneratedAttribute]
public string get_FromCommitId();
    [CompilerGeneratedAttribute]
public void set_FromCommitId(string value);
    [CompilerGeneratedAttribute]
public string get_ToCommitId();
    [CompilerGeneratedAttribute]
public void set_ToCommitId(string value);
    [CompilerGeneratedAttribute]
public string get_Committer();
    [CompilerGeneratedAttribute]
public void set_Committer(string value);
    [CompilerGeneratedAttribute]
public string get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(string value);
    [CompilerGeneratedAttribute]
public string get_ItemPath();
    [CompilerGeneratedAttribute]
public void set_ItemPath(string value);
    [CompilerGeneratedAttribute]
public bool get_ExcludeDeletes();
    [CompilerGeneratedAttribute]
public void set_ExcludeDeletes(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Skip();
    [CompilerGeneratedAttribute]
public void set_Skip(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_IncludeLinks();
    [CompilerGeneratedAttribute]
public void set_IncludeLinks(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeWorkItems();
    [CompilerGeneratedAttribute]
public void set_IncludeWorkItems(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeUserImageUrl();
    [CompilerGeneratedAttribute]
public void set_IncludeUserImageUrl(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludePushData();
    [CompilerGeneratedAttribute]
public void set_IncludePushData(bool value);
    [CompilerGeneratedAttribute]
public GitHistoryMode get_HistoryMode();
    [CompilerGeneratedAttribute]
public void set_HistoryMode(GitHistoryMode value);
    [CompilerGeneratedAttribute]
public bool get_ShowOldestCommitsFirst();
    [CompilerGeneratedAttribute]
public void set_ShowOldestCommitsFirst(bool value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitQueryRefsCriteria : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <RefNames>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <CommitIds>k__BackingField;
    [CompilerGeneratedAttribute]
private GitRefSearchType <SearchType>k__BackingField;
    [DataMemberAttribute]
public IEnumerable`1<string> RefNames { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<string> CommitIds { get; public set; }
    [DataMemberAttribute]
public GitRefSearchType SearchType { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_RefNames();
    [CompilerGeneratedAttribute]
public void set_RefNames(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_CommitIds();
    [CompilerGeneratedAttribute]
public void set_CommitIds(IEnumerable`1<string> value);
    [CompilerGeneratedAttribute]
public GitRefSearchType get_SearchType();
    [CompilerGeneratedAttribute]
public void set_SearchType(GitRefSearchType value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitRecycleBinRepositoryDetails : object {
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <Deleted>k__BackingField;
    [DataMemberAttribute]
public Nullable`1<bool> Deleted { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_Deleted();
    [CompilerGeneratedAttribute]
public void set_Deleted(Nullable`1<bool> value);
}
[DataContractAttribute]
[KnownTypeAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitRefsCollection")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitRef : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityRef <IsLockedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocked>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityRef <Creator>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PeeledObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<GitStatus> <Statuses>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string ObjectId { get; public set; }
    [DataMemberAttribute]
public IdentityRef IsLockedBy { get; public set; }
    [DataMemberAttribute]
public bool IsLocked { get; public set; }
    [DataMemberAttribute]
public IdentityRef Creator { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public string PeeledObjectId { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<GitStatus> Statuses { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    public GitRef(string name);
    public GitRef(string name, string objectId);
    public GitRef(string name, string objectId, IdentityRef isLockedBy);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_ObjectId();
    [CompilerGeneratedAttribute]
public void set_ObjectId(string value);
    [CompilerGeneratedAttribute]
public IdentityRef get_IsLockedBy();
    [CompilerGeneratedAttribute]
public void set_IsLockedBy(IdentityRef value);
    [CompilerGeneratedAttribute]
public bool get_IsLocked();
    [CompilerGeneratedAttribute]
public void set_IsLocked(bool value);
    [CompilerGeneratedAttribute]
public IdentityRef get_Creator();
    [CompilerGeneratedAttribute]
public void set_Creator(IdentityRef value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_PeeledObjectId();
    [CompilerGeneratedAttribute]
public void set_PeeledObjectId(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<GitStatus> get_Statuses();
    [CompilerGeneratedAttribute]
public void set_Statuses(IEnumerable`1<GitStatus> value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefFavorite : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RepositoryId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <IdentityId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private RefFavoriteType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [DataMemberAttribute]
public int Id { get; public set; }
    [DataMemberAttribute]
public Guid RepositoryId { get; public set; }
    [DataMemberAttribute]
public Guid IdentityId { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public RefFavoriteType Type { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    public GitRefFavorite(ISecuredObject securedObject);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public Guid get_RepositoryId();
    [CompilerGeneratedAttribute]
public void set_RepositoryId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_IdentityId();
    [CompilerGeneratedAttribute]
public void set_IdentityId(Guid value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public RefFavoriteType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(RefFavoriteType value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
}
[CollectionDataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefsCollection : List`1<GitRef> {
    public GitRefsCollection(IList`1<GitRef> source);
}
[DataContractAttribute]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.GitRefSearchType : Enum {
    public byte value__;
    [EnumMemberAttribute]
public static GitRefSearchType Exact;
    [EnumMemberAttribute]
public static GitRefSearchType StartsWith;
    [EnumMemberAttribute]
public static GitRefSearchType Contains;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdate : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private Guid <RepositoryId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OldObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsLocked>k__BackingField;
    [DataMemberAttribute]
public Guid RepositoryId { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string OldObjectId { get; public set; }
    [DataMemberAttribute]
public string NewObjectId { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> IsLocked { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_RepositoryId();
    [CompilerGeneratedAttribute]
public void set_RepositoryId(Guid value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_OldObjectId();
    [CompilerGeneratedAttribute]
public void set_OldObjectId(string value);
    [CompilerGeneratedAttribute]
public string get_NewObjectId();
    [CompilerGeneratedAttribute]
public void set_NewObjectId(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsLocked();
    [CompilerGeneratedAttribute]
public void set_IsLocked(Nullable`1<bool> value);
}
[DataContractAttribute]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateMode : Enum {
    public int value__;
    [EnumMemberAttribute]
public static GitRefUpdateMode BestEffort;
    [EnumMemberAttribute]
public static GitRefUpdateMode AllOrNone;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResult : object {
    [CompilerGeneratedAttribute]
private Guid <RepositoryId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OldObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsLocked>k__BackingField;
    [CompilerGeneratedAttribute]
private GitRefUpdateStatus <UpdateStatus>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RejectedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CustomMessage>k__BackingField;
    [DataMemberAttribute]
public Guid RepositoryId { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string OldObjectId { get; public set; }
    [DataMemberAttribute]
public string NewObjectId { get; public set; }
    [DataMemberAttribute]
public bool IsLocked { get; public set; }
    [DataMemberAttribute]
public GitRefUpdateStatus UpdateStatus { get; public set; }
    [DataMemberAttribute]
public string RejectedBy { get; public set; }
    [DataMemberAttribute]
public string CustomMessage { get; public set; }
    [DataMemberAttribute]
public bool Success { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_RepositoryId();
    [CompilerGeneratedAttribute]
public void set_RepositoryId(Guid value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_OldObjectId();
    [CompilerGeneratedAttribute]
public void set_OldObjectId(string value);
    [CompilerGeneratedAttribute]
public string get_NewObjectId();
    [CompilerGeneratedAttribute]
public void set_NewObjectId(string value);
    [CompilerGeneratedAttribute]
public bool get_IsLocked();
    [CompilerGeneratedAttribute]
public void set_IsLocked(bool value);
    [CompilerGeneratedAttribute]
public GitRefUpdateStatus get_UpdateStatus();
    [CompilerGeneratedAttribute]
public void set_UpdateStatus(GitRefUpdateStatus value);
    [CompilerGeneratedAttribute]
public string get_RejectedBy();
    [CompilerGeneratedAttribute]
public void set_RejectedBy(string value);
    [CompilerGeneratedAttribute]
public string get_CustomMessage();
    [CompilerGeneratedAttribute]
public void set_CustomMessage(string value);
    public void set_Success(bool value);
    public bool get_Success();
}
[DataContractAttribute]
[ObsoleteAttribute("This is unused as of Dev15 M115 and may be deleted in the future")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateResultSet : object {
    [CompilerGeneratedAttribute]
private int <CountFailed>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CountSucceeded>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PushCorrelationId>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<Guid, int> <PushIds>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <PushTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<GitRefUpdateResult> <Results>k__BackingField;
    [DataMemberAttribute]
public int CountFailed { get; public set; }
    [DataMemberAttribute]
public int CountSucceeded { get; public set; }
    [DataMemberAttribute]
public Guid PushCorrelationId { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<Guid, int> PushIds { get; public set; }
    [DataMemberAttribute]
public DateTime PushTime { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<GitRefUpdateResult> Results { get; public set; }
    [CompilerGeneratedAttribute]
public int get_CountFailed();
    [CompilerGeneratedAttribute]
public void set_CountFailed(int value);
    [CompilerGeneratedAttribute]
public int get_CountSucceeded();
    [CompilerGeneratedAttribute]
public void set_CountSucceeded(int value);
    [CompilerGeneratedAttribute]
public Guid get_PushCorrelationId();
    [CompilerGeneratedAttribute]
public void set_PushCorrelationId(Guid value);
    [CompilerGeneratedAttribute]
public Dictionary`2<Guid, int> get_PushIds();
    [CompilerGeneratedAttribute]
public void set_PushIds(Dictionary`2<Guid, int> value);
    [CompilerGeneratedAttribute]
public DateTime get_PushTime();
    [CompilerGeneratedAttribute]
public void set_PushTime(DateTime value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<GitRefUpdateResult> get_Results();
    [CompilerGeneratedAttribute]
public void set_Results(IEnumerable`1<GitRefUpdateResult> value);
}
public enum Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateStatus : Enum {
    public int value__;
    public static GitRefUpdateStatus Succeeded;
    public static GitRefUpdateStatus ForcePushRequired;
    public static GitRefUpdateStatus StaleOldObjectId;
    public static GitRefUpdateStatus InvalidRefName;
    public static GitRefUpdateStatus Unprocessed;
    public static GitRefUpdateStatus UnresolvableToCommit;
    public static GitRefUpdateStatus WritePermissionRequired;
    public static GitRefUpdateStatus ManageNotePermissionRequired;
    public static GitRefUpdateStatus CreateBranchPermissionRequired;
    public static GitRefUpdateStatus CreateTagPermissionRequired;
    public static GitRefUpdateStatus RejectedByPlugin;
    public static GitRefUpdateStatus Locked;
    public static GitRefUpdateStatus RefNameConflict;
    public static GitRefUpdateStatus RejectedByPolicy;
    public static GitRefUpdateStatus SucceededNonExistentRef;
    public static GitRefUpdateStatus SucceededCorruptRef;
}
[ExtensionAttribute]
public static class Microsoft.TeamFoundation.SourceControl.WebApi.GitRefUpdateStatusExtensions : object {
    [ExtensionAttribute]
public static bool IsSuccessful(GitRefUpdateStatus status);
}
[CollectionDataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoriesCollection : List`1<GitRepository> {
    public GitRepositoriesCollection(IList`1<GitRepository> source);
}
[ServiceEventObjectAttribute]
[DataContractAttribute]
[KnownTypeAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoriesCollection")]
[KnownTypeAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitForkTeamProjectReference")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository : VersionControlSecuredObject {
    public static string c_rootPath;
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private TeamProjectReference <ProjectReference>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DefaultBranch>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<long> <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoteUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SshUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WebUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <ValidRemoteUrls>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFork>k__BackingField;
    [CompilerGeneratedAttribute]
private GitRepositoryRef <ParentRepository>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsDisabled>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsInMaintenance>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public TeamProjectReference ProjectReference { get; public set; }
    [DataMemberAttribute]
public string DefaultBranch { get; public set; }
    [DataMemberAttribute]
public Nullable`1<long> Size { get; public set; }
    [DataMemberAttribute]
public string RemoteUrl { get; public set; }
    [DataMemberAttribute]
public string SshUrl { get; public set; }
    [DataMemberAttribute]
public string WebUrl { get; public set; }
    [DataMemberAttribute]
public String[] ValidRemoteUrls { get; public set; }
    [DataMemberAttribute]
public bool IsFork { get; public set; }
    [DataMemberAttribute]
public GitRepositoryRef ParentRepository { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> IsDisabled { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> IsInMaintenance { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public TeamProjectReference get_ProjectReference();
    [CompilerGeneratedAttribute]
public void set_ProjectReference(TeamProjectReference value);
    [CompilerGeneratedAttribute]
public string get_DefaultBranch();
    [CompilerGeneratedAttribute]
public void set_DefaultBranch(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<long> get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(Nullable`1<long> value);
    [CompilerGeneratedAttribute]
public string get_RemoteUrl();
    [CompilerGeneratedAttribute]
public void set_RemoteUrl(string value);
    [CompilerGeneratedAttribute]
public string get_SshUrl();
    [CompilerGeneratedAttribute]
public void set_SshUrl(string value);
    [CompilerGeneratedAttribute]
public string get_WebUrl();
    [CompilerGeneratedAttribute]
public void set_WebUrl(string value);
    [CompilerGeneratedAttribute]
public String[] get_ValidRemoteUrls();
    [CompilerGeneratedAttribute]
public void set_ValidRemoteUrls(String[] value);
    [CompilerGeneratedAttribute]
public bool get_IsFork();
    [CompilerGeneratedAttribute]
public void set_IsFork(bool value);
    [CompilerGeneratedAttribute]
public GitRepositoryRef get_ParentRepository();
    [CompilerGeneratedAttribute]
public void set_ParentRepository(GitRepositoryRef value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsDisabled();
    [CompilerGeneratedAttribute]
public void set_IsDisabled(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsInMaintenance();
    [CompilerGeneratedAttribute]
public void set_IsInMaintenance(Nullable`1<bool> value);
    public string GetTeamProjectUri();
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryCreateOptions : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private TeamProjectReference <ProjectReference>k__BackingField;
    [CompilerGeneratedAttribute]
private GitRepositoryRef <ParentRepository>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public TeamProjectReference ProjectReference { get; public set; }
    [DataMemberAttribute]
public GitRepositoryRef ParentRepository { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public TeamProjectReference get_ProjectReference();
    [CompilerGeneratedAttribute]
public void set_ProjectReference(TeamProjectReference value);
    [CompilerGeneratedAttribute]
public GitRepositoryRef get_ParentRepository();
    [CompilerGeneratedAttribute]
public void set_ParentRepository(GitRepositoryRef value);
}
[EditorBrowsableAttribute("1")]
[FlagsAttribute]
[GenerateAllConstantsAttribute("")]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryPermissions : Enum {
    public int value__;
    public static GitRepositoryPermissions None;
    [ObsoleteAttribute("In M112, Administer was replaced with CreateRepository, DeleteRepository, RenameRepository, EditPolicies, RemoveOthersLocks, and ManagePermissions")]
public static GitRepositoryPermissions Administer;
    public static GitRepositoryPermissions GenericRead;
    public static GitRepositoryPermissions GenericContribute;
    public static GitRepositoryPermissions ForcePush;
    public static GitRepositoryPermissions CreateBranch;
    public static GitRepositoryPermissions CreateTag;
    public static GitRepositoryPermissions ManageNote;
    public static GitRepositoryPermissions PolicyExempt;
    public static GitRepositoryPermissions CreateRepository;
    public static GitRepositoryPermissions DeleteRepository;
    public static GitRepositoryPermissions RenameRepository;
    public static GitRepositoryPermissions EditPolicies;
    public static GitRepositoryPermissions RemoveOthersLocks;
    public static GitRepositoryPermissions ManagePermissions;
    public static GitRepositoryPermissions PullRequestContribute;
    public static GitRepositoryPermissions PullRequestBypassPolicy;
    public static GitRepositoryPermissions ViewAdvSecAlerts;
    public static GitRepositoryPermissions DismissAdvSecAlerts;
    public static GitRepositoryPermissions ManageAdvSecScanning;
    public static GitRepositoryPermissions ProjectLevelPermissions;
    public static GitRepositoryPermissions RepositoryLevelPermissions;
    public static GitRepositoryPermissions BranchLevelPermissions;
    public static GitRepositoryPermissions CreateBranchPermissions;
    public static GitRepositoryPermissions NonBranchRefLevelPermissions;
    public static GitRepositoryPermissions BranchesRootLevelPermissions;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryRef : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFork>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoteUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SshUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private TeamProjectReference <ProjectReference>k__BackingField;
    [CompilerGeneratedAttribute]
private TeamProjectCollectionReference <Collection>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public bool IsFork { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public string RemoteUrl { get; public set; }
    [DataMemberAttribute]
public string SshUrl { get; public set; }
    [DataMemberAttribute]
public TeamProjectReference ProjectReference { get; public set; }
    [DataMemberAttribute]
public TeamProjectCollectionReference Collection { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public bool get_IsFork();
    [CompilerGeneratedAttribute]
public void set_IsFork(bool value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_RemoteUrl();
    [CompilerGeneratedAttribute]
public void set_RemoteUrl(string value);
    [CompilerGeneratedAttribute]
public string get_SshUrl();
    [CompilerGeneratedAttribute]
public void set_SshUrl(string value);
    [CompilerGeneratedAttribute]
public TeamProjectReference get_ProjectReference();
    [CompilerGeneratedAttribute]
public void set_ProjectReference(TeamProjectReference value);
    [CompilerGeneratedAttribute]
public TeamProjectCollectionReference get_Collection();
    [CompilerGeneratedAttribute]
public void set_Collection(TeamProjectCollectionReference value);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitRepositoryStats : object {
    [CompilerGeneratedAttribute]
private string <RepositoryId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <CommitsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BranchesCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ActivePullRequestsCount>k__BackingField;
    [DataMemberAttribute]
public string RepositoryId { get; public set; }
    [DataMemberAttribute]
public int CommitsCount { get; public set; }
    [DataMemberAttribute]
public int BranchesCount { get; public set; }
    [DataMemberAttribute]
public int ActivePullRequestsCount { get; public set; }
    public GitRepositoryStats(string repositoryId, int commitsCount, int branchesCount, int activePullRequestsCount);
    [CompilerGeneratedAttribute]
public string get_RepositoryId();
    [CompilerGeneratedAttribute]
public void set_RepositoryId(string value);
    [CompilerGeneratedAttribute]
public int get_CommitsCount();
    [CompilerGeneratedAttribute]
public void set_CommitsCount(int value);
    [CompilerGeneratedAttribute]
public int get_BranchesCount();
    [CompilerGeneratedAttribute]
public void set_BranchesCount(int value);
    [CompilerGeneratedAttribute]
public int get_ActivePullRequestsCount();
    [CompilerGeneratedAttribute]
public void set_ActivePullRequestsCount(int value);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.TeamFoundation.SourceControl.WebApi.GitResolution : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private IdentityRef <Author>k__BackingField;
    [DataMemberAttribute]
public IdentityRef Author { get; public set; }
    [CompilerGeneratedAttribute]
public IdentityRef get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(IdentityRef value);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.GitResolutionError : Enum {
    public byte value__;
    [EnumMemberAttribute]
public static GitResolutionError None;
    [EnumMemberAttribute]
public static GitResolutionError MergeContentNotFound;
    [EnumMemberAttribute]
public static GitResolutionError PathInUse;
    [EnumMemberAttribute]
public static GitResolutionError InvalidPath;
    [EnumMemberAttribute]
public static GitResolutionError UnknownAction;
    [EnumMemberAttribute]
public static GitResolutionError UnknownMergeType;
    [EnumMemberAttribute]
public static GitResolutionError OtherError;
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitResolutionMergeContent : GitResolution {
    [CompilerGeneratedAttribute]
private GitResolutionMergeType <MergeType>k__BackingField;
    [CompilerGeneratedAttribute]
private GitBlobRef <UserMergedBlob>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <UserMergedContent>k__BackingField;
    [DataMemberAttribute]
public GitResolutionMergeType MergeType { get; public set; }
    [DataMemberAttribute]
public GitBlobRef UserMergedBlob { get; public set; }
    [DataMemberAttribute]
public Byte[] UserMergedContent { get; public set; }
    [CompilerGeneratedAttribute]
public GitResolutionMergeType get_MergeType();
    [CompilerGeneratedAttribute]
public void set_MergeType(GitResolutionMergeType value);
    [CompilerGeneratedAttribute]
public GitBlobRef get_UserMergedBlob();
    [CompilerGeneratedAttribute]
public void set_UserMergedBlob(GitBlobRef value);
    [CompilerGeneratedAttribute]
public Byte[] get_UserMergedContent();
    [CompilerGeneratedAttribute]
public void set_UserMergedContent(Byte[] value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.GitResolutionMergeType : Enum {
    public byte value__;
    [EnumMemberAttribute]
public static GitResolutionMergeType Undecided;
    [EnumMemberAttribute]
public static GitResolutionMergeType TakeSourceContent;
    [EnumMemberAttribute]
public static GitResolutionMergeType TakeTargetContent;
    [EnumMemberAttribute]
public static GitResolutionMergeType AutoMerged;
    [EnumMemberAttribute]
public static GitResolutionMergeType UserMerged;
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitResolutionPathConflict : GitResolution {
    [CompilerGeneratedAttribute]
private GitResolutionPathConflictAction <Action>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RenamePath>k__BackingField;
    [DataMemberAttribute]
public GitResolutionPathConflictAction Action { get; public set; }
    [DataMemberAttribute]
public string RenamePath { get; public set; }
    [CompilerGeneratedAttribute]
public GitResolutionPathConflictAction get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(GitResolutionPathConflictAction value);
    [CompilerGeneratedAttribute]
public string get_RenamePath();
    [CompilerGeneratedAttribute]
public void set_RenamePath(string value);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.GitResolutionPathConflictAction : Enum {
    public byte value__;
    [EnumMemberAttribute]
public static GitResolutionPathConflictAction Undecided;
    [EnumMemberAttribute]
public static GitResolutionPathConflictAction KeepSourceRenameTarget;
    [EnumMemberAttribute]
public static GitResolutionPathConflictAction KeepSourceDeleteTarget;
    [EnumMemberAttribute]
public static GitResolutionPathConflictAction KeepTargetRenameSource;
    [EnumMemberAttribute]
public static GitResolutionPathConflictAction KeepTargetDeleteSource;
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitResolutionPickOneAction : GitResolution {
    [CompilerGeneratedAttribute]
private GitResolutionWhichAction <Action>k__BackingField;
    [DataMemberAttribute]
public GitResolutionWhichAction Action { get; public set; }
    [CompilerGeneratedAttribute]
public GitResolutionWhichAction get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(GitResolutionWhichAction value);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitResolutionRename1to2 : GitResolutionMergeContent {
    [CompilerGeneratedAttribute]
private GitResolutionRename1to2Action <Action>k__BackingField;
    [DataMemberAttribute]
public GitResolutionRename1to2Action Action { get; public set; }
    [CompilerGeneratedAttribute]
public GitResolutionRename1to2Action get_Action();
    [CompilerGeneratedAttribute]
public void set_Action(GitResolutionRename1to2Action value);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.GitResolutionRename1to2Action : Enum {
    public byte value__;
    [EnumMemberAttribute]
public static GitResolutionRename1to2Action Undecided;
    [EnumMemberAttribute]
public static GitResolutionRename1to2Action KeepSourcePath;
    [EnumMemberAttribute]
public static GitResolutionRename1to2Action KeepTargetPath;
    [EnumMemberAttribute]
public static GitResolutionRename1to2Action KeepBothFiles;
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.GitResolutionStatus : Enum {
    public byte value__;
    [EnumMemberAttribute]
public static GitResolutionStatus Unresolved;
    [EnumMemberAttribute]
public static GitResolutionStatus PartiallyResolved;
    [EnumMemberAttribute]
public static GitResolutionStatus Resolved;
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.GitResolutionWhichAction : Enum {
    public byte value__;
    [EnumMemberAttribute]
public static GitResolutionWhichAction Undecided;
    [EnumMemberAttribute]
public static GitResolutionWhichAction PickSourceAction;
    [EnumMemberAttribute]
public static GitResolutionWhichAction PickTargetAction;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitRevert : GitAsyncRefOperation {
    [CompilerGeneratedAttribute]
private int <RevertId>k__BackingField;
    [DataMemberAttribute]
public int RevertId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_RevertId();
    [CompilerGeneratedAttribute]
public void set_RevertId(int value);
}
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitServiceEventTypes : object {
    public static string GitPushEvent;
    public static string GitRepoCreatedEvent;
    public static string GitRepoRenamedEvent;
    public static string GitRepoDeletedEvent;
    public static string GitRepoDisabledEvent;
    public static string GitImportSucceededEvent;
    public static string GitImportFailedEvent;
    public static string GitPullRequestCreatedEvent;
    public static string GitPullRequestMergeEvent;
    public static string GitPullRequestStatusUpdatedEvent;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitStatus : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private GitStatusState <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private GitStatusContext <Context>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <UpdatedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityRef <CreatedBy>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [DataMemberAttribute]
public int Id { get; public set; }
    [DataMemberAttribute]
public GitStatusState State { get; public set; }
    [DataMemberAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
public GitStatusContext Context { get; public set; }
    [DataMemberAttribute]
public DateTime CreationDate { get; public set; }
    [DataMemberAttribute]
public DateTime UpdatedDate { get; public set; }
    [DataMemberAttribute]
public IdentityRef CreatedBy { get; public set; }
    [DataMemberAttribute]
public string TargetUrl { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public GitStatusState get_State();
    [CompilerGeneratedAttribute]
public void set_State(GitStatusState value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public GitStatusContext get_Context();
    [CompilerGeneratedAttribute]
public void set_Context(GitStatusContext value);
    [CompilerGeneratedAttribute]
public DateTime get_CreationDate();
    [CompilerGeneratedAttribute]
public void set_CreationDate(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_UpdatedDate();
    [CompilerGeneratedAttribute]
public void set_UpdatedDate(DateTime value);
    [CompilerGeneratedAttribute]
public IdentityRef get_CreatedBy();
    [CompilerGeneratedAttribute]
public void set_CreatedBy(IdentityRef value);
    [CompilerGeneratedAttribute]
public string get_TargetUrl();
    [CompilerGeneratedAttribute]
public void set_TargetUrl(string value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitStatusContext : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Genre>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Genre { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Genre();
    [CompilerGeneratedAttribute]
public void set_Genre(string value);
}
public enum Microsoft.TeamFoundation.SourceControl.WebApi.GitStatusState : Enum {
    public byte value__;
    public static GitStatusState NotSet;
    public static GitStatusState Pending;
    public static GitStatusState Succeeded;
    public static GitStatusState Failed;
    public static GitStatusState Error;
    public static GitStatusState NotApplicable;
    public static GitStatusState PartiallySucceeded;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitSuggestion : object {
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, object> <Properties>k__BackingField;
    [DataMemberAttribute]
public string Type { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, object> Properties { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, object> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IDictionary`2<string, object> value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitTargetVersionDescriptor : GitVersionDescriptor {
    [CompilerGeneratedAttribute]
private GitVersionType <VersionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private GitVersionOptions <VersionOptions>k__BackingField;
    [DataMemberAttribute]
public GitVersionType VersionType { get; public set; }
    [DataMemberAttribute]
public string Version { get; public set; }
    [DataMemberAttribute]
public GitVersionOptions VersionOptions { get; public set; }
    [CompilerGeneratedAttribute]
public virtual GitVersionType get_VersionType();
    [CompilerGeneratedAttribute]
public virtual void set_VersionType(GitVersionType value);
    [CompilerGeneratedAttribute]
public virtual string get_Version();
    [CompilerGeneratedAttribute]
public virtual void set_Version(string value);
    [CompilerGeneratedAttribute]
public virtual GitVersionOptions get_VersionOptions();
    [CompilerGeneratedAttribute]
public virtual void set_VersionOptions(GitVersionOptions value);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitTemplate : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Type { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeDiff : object {
    [CompilerGeneratedAttribute]
private string <BaseTreeId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetTreeId>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<GitTreeDiffEntry> <DiffEntries>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [DataMemberAttribute]
public string BaseTreeId { get; public set; }
    [DataMemberAttribute]
public string TargetTreeId { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<GitTreeDiffEntry> DiffEntries { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [CompilerGeneratedAttribute]
public string get_BaseTreeId();
    [CompilerGeneratedAttribute]
public void set_BaseTreeId(string value);
    [CompilerGeneratedAttribute]
public string get_TargetTreeId();
    [CompilerGeneratedAttribute]
public void set_TargetTreeId(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<GitTreeDiffEntry> get_DiffEntries();
    [CompilerGeneratedAttribute]
public void set_DiffEntries(IEnumerable`1<GitTreeDiffEntry> value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeDiffEntry : object {
    [CompilerGeneratedAttribute]
private string <TargetObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BaseObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private GitObjectType <ObjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionControlChangeType <ChangeType>k__BackingField;
    [DataMemberAttribute]
public string TargetObjectId { get; public set; }
    [DataMemberAttribute]
public string BaseObjectId { get; public set; }
    [DataMemberAttribute]
public GitObjectType ObjectType { get; public set; }
    [DataMemberAttribute]
public string Path { get; public set; }
    [DataMemberAttribute]
public VersionControlChangeType ChangeType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_TargetObjectId();
    [CompilerGeneratedAttribute]
public void set_TargetObjectId(string value);
    [CompilerGeneratedAttribute]
public string get_BaseObjectId();
    [CompilerGeneratedAttribute]
public void set_BaseObjectId(string value);
    [CompilerGeneratedAttribute]
public GitObjectType get_ObjectType();
    [CompilerGeneratedAttribute]
public void set_ObjectType(GitObjectType value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public VersionControlChangeType get_ChangeType();
    [CompilerGeneratedAttribute]
public void set_ChangeType(VersionControlChangeType value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeDiffResponse : object {
    [CompilerGeneratedAttribute]
private GitTreeDiff <TreeDiff>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ContinuationToken>k__BackingField;
    [ClientResponseContentAttribute]
public GitTreeDiff TreeDiff { get; public set; }
    [ClientResponseHeaderAttribute("x-ms-continuationtoken")]
public IEnumerable`1<string> ContinuationToken { get; public set; }
    [CompilerGeneratedAttribute]
public GitTreeDiff get_TreeDiff();
    [CompilerGeneratedAttribute]
public void set_TreeDiff(GitTreeDiff value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ContinuationToken();
    [CompilerGeneratedAttribute]
public void set_ContinuationToken(IEnumerable`1<string> value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeEntryRef : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private string <ObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RelativePath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Mode>k__BackingField;
    [CompilerGeneratedAttribute]
private GitObjectType <GitObjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Size>k__BackingField;
    [DataMemberAttribute]
public string ObjectId { get; public set; }
    [DataMemberAttribute]
public string RelativePath { get; public set; }
    [DataMemberAttribute]
public string Mode { get; public set; }
    [DataMemberAttribute]
public GitObjectType GitObjectType { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public long Size { get; public set; }
    public GitTreeEntryRef(string ObjectId, string RelativePath, int rwxBits, int GitObjectTypeCode);
    [CompilerGeneratedAttribute]
public string get_ObjectId();
    [CompilerGeneratedAttribute]
public void set_ObjectId(string value);
    [CompilerGeneratedAttribute]
public string get_RelativePath();
    [CompilerGeneratedAttribute]
public void set_RelativePath(string value);
    [CompilerGeneratedAttribute]
public string get_Mode();
    [CompilerGeneratedAttribute]
public void set_Mode(string value);
    [CompilerGeneratedAttribute]
public GitObjectType get_GitObjectType();
    [CompilerGeneratedAttribute]
public void set_GitObjectType(GitObjectType value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public long get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(long value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitTreeRef : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private string <ObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<GitTreeEntryRef> <TreeEntries>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [DataMemberAttribute]
public string ObjectId { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<GitTreeEntryRef> TreeEntries { get; public set; }
    [DataMemberAttribute]
public long Size { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ObjectId();
    [CompilerGeneratedAttribute]
public void set_ObjectId(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<GitTreeEntryRef> get_TreeEntries();
    [CompilerGeneratedAttribute]
public void set_TreeEntries(IEnumerable`1<GitTreeEntryRef> value);
    [CompilerGeneratedAttribute]
public long get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(long value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitUserDate : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Email>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <Date>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ImageUrl>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
[JsonConverterAttribute("Microsoft.VisualStudio.Services.WebApi.DefaultValueOnPublicAccessJsonConverter`1<System.String>")]
public string Email { get; public set; }
    [DataMemberAttribute]
public DateTime Date { get; public set; }
    [DataMemberAttribute]
public string ImageUrl { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Email();
    [CompilerGeneratedAttribute]
public void set_Email(string value);
    [CompilerGeneratedAttribute]
public DateTime get_Date();
    [CompilerGeneratedAttribute]
public void set_Date(DateTime value);
    [CompilerGeneratedAttribute]
public string get_ImageUrl();
    [CompilerGeneratedAttribute]
public void set_ImageUrl(string value);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.SourceControl.WebApi.GitUtils : object {
    public static Encoding SafeUnicodeLENoBOM;
    private static char c_slash;
    private static Char[] s_slashSeparator;
    private static GitUtils();
    public static bool ByteArraysAreEqual(Byte[] x, Byte[] y, int expectedLength);
    public static bool CompareByteArrays(Byte[] b1, int b1start, Byte[] b2, int b2start, int length);
    public static bool TryGetByteArrayFromString(string objectId, int expectedStringLength, Byte[]& parsedObjectId);
    public static Byte[] ObjectIdFromUTF8Bytes(Byte[] bytes, int start);
    public static string StringFromByteArray(Byte[] byteArray);
    public static void AppendBytesToStringBuilder(StringBuilder builder, ArraySegment`1<byte> bytes);
    public static string CalculateSecurable(Guid projectId, Guid repositoryId, string refName);
    public static string CalculateSecurable(string teamProjectUri, Guid repositoryId, string refName);
    private static void ParseSecurableInputs(string teamProjectUri, Guid repositoryId, Guid& projectId);
    private static void ValidateSecurableInputs(Guid projectId, Guid repositoryId, string refName);
    public static string AppendUrl(string url, string pathToAppend);
    public static GitRepositoryPermissions GetPermissionFlags(String[] permissionList);
    [EditorBrowsableAttribute("1")]
public static string GetFriendlyBranchName(string refName);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionDescriptor : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private GitVersionType <VersionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private GitVersionOptions <VersionOptions>k__BackingField;
    [DataMemberAttribute]
public GitVersionType VersionType { get; public set; }
    [DataMemberAttribute]
public string Version { get; public set; }
    [DataMemberAttribute]
public GitVersionOptions VersionOptions { get; public set; }
    [CompilerGeneratedAttribute]
public virtual GitVersionType get_VersionType();
    [CompilerGeneratedAttribute]
public virtual void set_VersionType(GitVersionType value);
    [CompilerGeneratedAttribute]
public virtual string get_Version();
    [CompilerGeneratedAttribute]
public virtual void set_Version(string value);
    [CompilerGeneratedAttribute]
public virtual GitVersionOptions get_VersionOptions();
    [CompilerGeneratedAttribute]
public virtual void set_VersionOptions(GitVersionOptions value);
    public virtual string ToString();
}
[DataContractAttribute]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionOptions : Enum {
    public int value__;
    [EnumMemberAttribute]
public static GitVersionOptions None;
    [EnumMemberAttribute]
public static GitVersionOptions PreviousChange;
    [EnumMemberAttribute]
public static GitVersionOptions FirstParent;
}
[DataContractAttribute]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.GitVersionType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static GitVersionType Branch;
    [EnumMemberAttribute]
public static GitVersionType Tag;
    [EnumMemberAttribute]
public static GitVersionType Commit;
}
[GenerateAllConstantsAttribute("")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GitWebApiConstants : object {
    public static string HeadsFilter;
    public static string TagsFilter;
    public static string AreaId;
    public static string AreaName;
    public static string RefsLocationIdString;
    public static Guid RefsLocationId;
    public static string RefsBatchLocationIdString;
    public static Guid RefsBatchLocationId;
    public static string ProjectRefsLocationIdString;
    public static Guid ProjectRefsLocationId;
    public static string RepositoriesLocationIdString;
    public static Guid RepositoriesLocationId;
    public static string ProjectRepositoriesLocationIdString;
    public static Guid ProjectRepositoriesLocationId;
    public static string ProjectRepositoriesPagedLocationIdString;
    public static Guid ProjectRepositoriesPagedLocationId;
    public static string ProjectDeletedRepositoriesLocationIdString;
    public static Guid ProjectDeletedRepositoriesLocationId;
    public static string ProjectRecycleBinRepositoriesLocationIdString;
    public static Guid ProjectRecycleBinRepositoriesLocationId;
    public static string ItemsLocationIdString;
    public static Guid ItemsLocationId;
    public static string ProjectItemsLocationIdString;
    public static Guid ProjectItemsLocationId;
    public static string HfsItemsLocationIdString;
    public static Guid HfsItemsLocationId;
    public static string ProjectHfsItemsLocationIdString;
    public static Guid ProjectHfsItemsLocationId;
    public static string ItemsBatchLocationIdString;
    public static Guid ItemsBatchLocationId;
    public static string ProjectItemsBatchLocationIdString;
    public static Guid ProjectItemsBatchLocationId;
    public static string TreesLocationIdString;
    public static Guid TreesLocationId;
    public static string ProjectTreesLocationIdString;
    public static Guid ProjectTreesLocationId;
    public static string BlobsLocationIdString;
    public static Guid BlobsLocationId;
    public static string ProjectBlobsLocationIdString;
    public static Guid ProjectBlobsLocationId;
    public static string CommitsLocationIdString;
    public static Guid CommitsLocationId;
    public static string ProjectCommitsLocationIdString;
    public static Guid ProjectCommitsLocationId;
    public static string DeltificationLocationIdString;
    public static Guid DeltificationLocationId;
    public static string PushesLocationIdString;
    public static Guid PushesLocationId;
    public static string ProjectPushesLocationIdString;
    public static Guid ProjectPushesLocationId;
    public static string BranchesStatsLocationIdString;
    public static Guid BranchesStatsLocationId;
    public static string RepositoryStatsLocationIdString;
    public static Guid RepositoryStatsLocationId;
    public static string ProjectBranchesStatsLocationIdString;
    public static Guid ProjectBranchesStatsLocationId;
    public static string BranchStatsLocationIdString;
    public static Guid BranchStatsLocationId;
    public static string ProjectBranchStatsLocationIdString;
    public static Guid ProjectBranchStatsLocationId;
    public static string CommitChangesLocationIdString;
    public static Guid CommitChangesLocationId;
    public static string CommitStatusesLocationIdString;
    public static Guid CommitStatuesLocationId;
    public static string ProjectCommitChangesLocationIdString;
    public static Guid ProjectCommitChangesLocationId;
    public static string PushCommitsLocationIdString;
    public static Guid PushCommitsLocationId;
    public static string ProjectPushCommitsLocationIdString;
    public static Guid ProjectPushCommitsLocationId;
    public static string CommitDiffsLocationIdString;
    public static Guid CommitDiffsLocationId;
    public static string ProjectCommitDiffsLocationIdString;
    public static Guid ProjectCommitDiffsLocationId;
    public static string CommitsBatchLocationIdString;
    public static Guid CommitsBatchLocationId;
    public static string ForksLocationIdString;
    public static Guid ForksLocationId;
    public static string ForkSyncRequestsLocationIdString;
    public static Guid ForkSyncRequestsLocationId;
    public static string MergeBaseLocationIdString;
    public static Guid MergeBasesLocationId;
    public static string MergeLocationIdString;
    public static Guid MergeLocationId;
    public static string ProjectCommitsBatchLocationIdString;
    public static Guid ProjectCommitsBatchLocationId;
    public static string PullRequestsLocationIdString;
    public static Guid PullRequestsLocationId;
    public static string ProjectRepoPullRequestsLocationIdString;
    public static Guid ProjectRepoPullRequestsLocationId;
    public static string PullRequestByIdLocationIdString;
    public static Guid PullRequestByIdLocationId;
    public static string ProjectPullRequestsLocationIdString;
    public static Guid ProjectPullRequestsLocationId;
    public static string PullRequestReviewersLocationIdString;
    public static Guid PullRequestReviewersLocationId;
    public static string SuggestionsLocationIdString;
    public static Guid SuggestionsLocationId;
    public static string PullRequestConflictsLocationIdString;
    public static Guid PullRequestConflictsLocationId;
    public static string PullRequestCommitsLocationIdString;
    public static Guid PullRequestCommitsLocationId;
    public static string ProjectPullRequestReviewersLocationIdString;
    public static Guid ProjectPullRequestReviewersLocationId;
    public static string PullRequestWorkItemsLocationIdString;
    public static Guid PullRequestWorkItemsLocationId;
    public static string ProjectPullRequestWorkItemsLocationIdString;
    public static Guid ProjectPullRequestWorkItemsLocationId;
    public static string ProjectMediaLocationIdString;
    public static Guid ProjectMediaLocationId;
    public static string LimitedRefCriteriaLocationIdString;
    public static Guid LimitedRefCriteriaLocationId;
    public static string PullRequestQueryLocationIdString;
    public static Guid PullRequestQueryLocationId;
    public static string PullRequestIterationsLocationIdString;
    public static Guid PullRequestIterationsLocationId;
    public static string PullRequestIterationChangesLocationIdString;
    public static Guid PullRequestIterationChangesLocationId;
    public static string PullRequestStatusesLocationIdString;
    public static Guid PullRequestStatusesLocationId;
    public static string PullRequestIterationStatusesLocationIdString;
    public static Guid PullRequestIterationStatusesLocationId;
    public static string PullRequestPropertiesLocationIdString;
    public static Guid PullRequestPropertiesLocationId;
    public static string PullRequestThreadsLocationIdString;
    public static Guid PullRequestThreadsLocationId;
    public static string PullRequestThreadCommentsLocationIdString;
    public static Guid PullRequestThreadCommentsLocationId;
    public static string PullRequestCommentLikesLocationIdString;
    public static Guid PullRequestCommentLikesLocationId;
    public static string PullRequestAttachmentsLocationIdString;
    public static Guid PullRequestAttachmentsLocationId;
    public static string PolicyConfigurationsLocationIdString;
    public static Guid PolicyConfigurationsLocationId;
    public static string PolicyConfigurationsResourceName;
    public static string PullRequestShareLocationIdString;
    public static Guid PullRequestShareLocationId;
    public static string RefFavoritesLocationIdString;
    public static Guid RefFavoritesLocationId;
    public static string RefFavoritesForProjectLocationIdString;
    public static Guid RefFavoritesForProjectLocationId;
    public static string CherryPickLocationIdString;
    public static Guid CherryPickLocationId;
    public static string CherryPickConflictsLocationIdString;
    public static Guid CherryPickConflictsLocationId;
    public static string RevertLocationIdString;
    public static Guid RevertLocationId;
    public static string RevertConflictsLocationIdString;
    public static Guid RevertConflictsLocationId;
    public static string PullRequestIterationCommitsLocationIdString;
    public static Guid PullRequestIterationCommitsLocationId;
    public static string ImportRequestsLocationIdString;
    public static Guid ImportRequestsLocationId;
    public static string FilePathsLocationIdString;
    public static Guid FilePathsLocationId;
    public static string TemplatesLocationIdString;
    public static Guid TemplatesLocationId;
    public static string TreeDiffsLocationIdString;
    public static Guid TreeDiffsLocationId;
    public static string ImportRepositoryValidationsLocationIdString;
    public static Guid ImportRepositoryValidationsLocationId;
    public static string AnnotatedTagsLocationIdString;
    public static Guid AnnotatedTagsLocationId;
    public static string PullRequestLabelsIdString;
    public static Guid PullRequestLabelsId;
    public static string CherryPickRelationshipsIdString;
    public static Guid CherryPickRelationshipsId;
    public static string FileDiffsLocationIdString;
    public static Guid FileDiffsLocationId;
    public static string AdvSecEnablementLocationIdString;
    public static Guid AdvSecEnablementLocationId;
    public static string AdvSecEstimateOrgLocationIdString;
    public static Guid AdvSecEstimateOrgLocationId;
    public static string AdvSecEstimateOrgResourceName;
    public static string AdvSecEstimateProjectLocationIdString;
    public static Guid AdvSecEstimateProjectLocationId;
    public static string AdvSecEstimateProjectResourceName;
    public static string AdvSecEstimateRepoLocationIdString;
    public static Guid AdvSecEstimateRepoLocationId;
    public static string AdvSecEstimateRepoResourceName;
    public static string AdvSecPermissionsLocationIdString;
    public static Guid AdvSecPermissionsLocationId;
    public static string BillableCommittersLocationIdString;
    public static Guid BillableCommittersLocationId;
    private static GitWebApiConstants();
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.GlobalGitRepositoryKey : object {
    [CompilerGeneratedAttribute]
private Guid <CollectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RepositoryId>k__BackingField;
    [DataMemberAttribute]
public Guid CollectionId { get; public set; }
    [DataMemberAttribute]
public Guid ProjectId { get; public set; }
    [DataMemberAttribute]
public Guid RepositoryId { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_CollectionId();
    [CompilerGeneratedAttribute]
public void set_CollectionId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_ProjectId();
    [CompilerGeneratedAttribute]
public void set_ProjectId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_RepositoryId();
    [CompilerGeneratedAttribute]
public void set_RepositoryId(Guid value);
}
[DataContractAttribute]
[KnownTypeAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcHistoryEntry")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.HistoryEntry`1 : object {
    [CompilerGeneratedAttribute]
private ChangeList`1<T> <ChangeList>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionControlChangeType <ItemChangeType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerItem>k__BackingField;
    [DataMemberAttribute]
public ChangeList`1<T> ChangeList { get; public set; }
    [DataMemberAttribute]
public VersionControlChangeType ItemChangeType { get; public set; }
    [DataMemberAttribute]
public string ServerItem { get; public set; }
    [CompilerGeneratedAttribute]
public ChangeList`1<T> get_ChangeList();
    [CompilerGeneratedAttribute]
public void set_ChangeList(ChangeList`1<T> value);
    [CompilerGeneratedAttribute]
public VersionControlChangeType get_ItemChangeType();
    [CompilerGeneratedAttribute]
public void set_ItemChangeType(VersionControlChangeType value);
    [CompilerGeneratedAttribute]
public string get_ServerItem();
    [CompilerGeneratedAttribute]
public void set_ServerItem(string value);
}
[ObsoleteAttribute("This is unused as of Dev15 M108 and may be deleted in the future")]
[DataContractAttribute]
[KnownTypeAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitHistoryQueryResults")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.HistoryQueryResults`1 : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<HistoryEntry`1<T>> <Results>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MoreResultsAvailable>k__BackingField;
    [DataMemberAttribute]
public IEnumerable`1<HistoryEntry`1<T>> Results { get; public set; }
    [DataMemberAttribute]
public bool MoreResultsAvailable { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<HistoryEntry`1<T>> get_Results();
    [CompilerGeneratedAttribute]
public void set_Results(IEnumerable`1<HistoryEntry`1<T>> value);
    [CompilerGeneratedAttribute]
public bool get_MoreResultsAvailable();
    [CompilerGeneratedAttribute]
public void set_MoreResultsAvailable(bool value);
}
[JsonObjectAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.IdentityRefWithVote : IdentityRef {
    [CompilerGeneratedAttribute]
private string <ReviewerUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private short <Vote>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityRefWithVote[] <VotedFor>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <HasDeclined>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRequired>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsFlagged>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IsReapprove>k__BackingField;
    [DataMemberAttribute]
[JsonPropertyAttribute]
public string ReviewerUrl { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public short Vote { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public IdentityRefWithVote[] VotedFor { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public Nullable`1<bool> HasDeclined { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public bool IsRequired { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public Nullable`1<bool> IsFlagged { get; public set; }
    [DataMemberAttribute]
[JsonPropertyAttribute]
public Nullable`1<bool> IsReapprove { get; public set; }
    public IdentityRefWithVote(IdentityRef identity);
    [CompilerGeneratedAttribute]
public string get_ReviewerUrl();
    [CompilerGeneratedAttribute]
public void set_ReviewerUrl(string value);
    [CompilerGeneratedAttribute]
public short get_Vote();
    [CompilerGeneratedAttribute]
public void set_Vote(short value);
    [CompilerGeneratedAttribute]
public IdentityRefWithVote[] get_VotedFor();
    [CompilerGeneratedAttribute]
public void set_VotedFor(IdentityRefWithVote[] value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_HasDeclined();
    [CompilerGeneratedAttribute]
public void set_HasDeclined(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_IsRequired();
    [CompilerGeneratedAttribute]
public void set_IsRequired(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsFlagged();
    [CompilerGeneratedAttribute]
public void set_IsFlagged(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IsReapprove();
    [CompilerGeneratedAttribute]
public void set_IsReapprove(Nullable`1<bool> value);
}
[DataContractAttribute]
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.ImportRepositoryValidation : object {
    [CompilerGeneratedAttribute]
private GitImportGitSource <GitSource>k__BackingField;
    [CompilerGeneratedAttribute]
private GitImportTfvcSource <TfvcSource>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Username>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Password>k__BackingField;
    [DataMemberAttribute]
public GitImportGitSource GitSource { get; public set; }
    [DataMemberAttribute]
public GitImportTfvcSource TfvcSource { get; public set; }
    [DataMemberAttribute]
public string Username { get; public set; }
    [DataMemberAttribute]
public string Password { get; public set; }
    [CompilerGeneratedAttribute]
public GitImportGitSource get_GitSource();
    [CompilerGeneratedAttribute]
public void set_GitSource(GitImportGitSource value);
    [CompilerGeneratedAttribute]
public GitImportTfvcSource get_TfvcSource();
    [CompilerGeneratedAttribute]
public void set_TfvcSource(GitImportTfvcSource value);
    [CompilerGeneratedAttribute]
public string get_Username();
    [CompilerGeneratedAttribute]
public void set_Username(string value);
    [CompilerGeneratedAttribute]
public string get_Password();
    [CompilerGeneratedAttribute]
public void set_Password(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.IncludedGitCommit : object {
    [CompilerGeneratedAttribute]
private Guid <RepositoryId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <CommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CommitTime>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ParentCommitIds>k__BackingField;
    [DataMemberAttribute]
public Guid RepositoryId { get; public set; }
    [DataMemberAttribute]
public string CommitId { get; public set; }
    [DataMemberAttribute]
public DateTime CommitTime { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<string> ParentCommitIds { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_RepositoryId();
    [CompilerGeneratedAttribute]
public void set_RepositoryId(Guid value);
    [CompilerGeneratedAttribute]
public string get_CommitId();
    [CompilerGeneratedAttribute]
public void set_CommitId(string value);
    [CompilerGeneratedAttribute]
public DateTime get_CommitTime();
    [CompilerGeneratedAttribute]
public void set_CommitTime(DateTime value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ParentCommitIds();
    [CompilerGeneratedAttribute]
public void set_ParentCommitIds(IEnumerable`1<string> value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Internal.GitLimitedRefCriteria : object {
    [CompilerGeneratedAttribute]
private List`1<string> <RefExactMatches>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <RefNamespaces>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [DataMemberAttribute]
public List`1<string> RefExactMatches { get; public set; }
    [DataMemberAttribute]
public List`1<string> RefNamespaces { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    [CompilerGeneratedAttribute]
public List`1<string> get_RefExactMatches();
    [CompilerGeneratedAttribute]
public void set_RefExactMatches(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_RefNamespaces();
    [CompilerGeneratedAttribute]
public void set_RefNamespaces(List`1<string> value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.IsDraftUpdatedEvent : RealTimePullRequestEvent {
    public IsDraftUpdatedEvent(int pullRequestId);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.ItemContent : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemContentType <ContentType>k__BackingField;
    [DataMemberAttribute]
public string Content { get; public set; }
    [DataMemberAttribute]
public ItemContentType ContentType { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public ItemContentType get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(ItemContentType value);
}
[FlagsAttribute]
[DataContractAttribute]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.ItemContentType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static ItemContentType RawText;
    [EnumMemberAttribute]
public static ItemContentType Base64Encoded;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.ItemDetailsOptions : object {
    [CompilerGeneratedAttribute]
private VersionControlRecursionType <RecursionLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeContentMetadata>k__BackingField;
    [DataMemberAttribute]
public VersionControlRecursionType RecursionLevel { get; public set; }
    [DataMemberAttribute]
public bool IncludeContentMetadata { get; public set; }
    [CompilerGeneratedAttribute]
public VersionControlRecursionType get_RecursionLevel();
    [CompilerGeneratedAttribute]
public void set_RecursionLevel(VersionControlRecursionType value);
    [CompilerGeneratedAttribute]
public bool get_IncludeContentMetadata();
    [CompilerGeneratedAttribute]
public void set_IncludeContentMetadata(bool value);
}
[DataContractAttribute]
[KnownTypeAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcItem")]
[KnownTypeAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcItemPreviousHash")]
[KnownTypeAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitItem")]
public abstract class Microsoft.TeamFoundation.SourceControl.WebApi.ItemModel : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private FileContentMetadata <ContentMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSymbolicLink>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [DataMemberAttribute]
public string Path { get; public set; }
    [DataMemberAttribute]
public bool IsFolder { get; public set; }
    [DataMemberAttribute]
public string Content { get; public set; }
    [DataMemberAttribute]
public FileContentMetadata ContentMetadata { get; public set; }
    [DataMemberAttribute]
public bool IsSymbolicLink { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public bool get_IsFolder();
    [CompilerGeneratedAttribute]
public void set_IsFolder(bool value);
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public FileContentMetadata get_ContentMetadata();
    [CompilerGeneratedAttribute]
public void set_ContentMetadata(FileContentMetadata value);
    [CompilerGeneratedAttribute]
public bool get_IsSymbolicLink();
    [CompilerGeneratedAttribute]
public void set_IsSymbolicLink(bool value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.IterationReason : Enum {
    public int value__;
    public static IterationReason Push;
    public static IterationReason ForcePush;
    public static IterationReason Create;
    public static IterationReason Rebase;
    public static IterationReason Unknown;
    public static IterationReason Retarget;
    public static IterationReason ResolveConflicts;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.LabelsUpdatedEvent : RealTimePullRequestEvent {
    public LabelsUpdatedEvent(int pullRequestId);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.AssociatedWorkItem : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <WorkItemType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Title>k__BackingField;
    [CompilerGeneratedAttribute]
private string <State>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AssignedTo>k__BackingField;
    [DataMemberAttribute]
public int Id { get; public set; }
    [DataMemberAttribute]
public string WorkItemType { get; public set; }
    [DataMemberAttribute]
public string Title { get; public set; }
    [DataMemberAttribute]
public string State { get; public set; }
    [DataMemberAttribute]
public string AssignedTo { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_WorkItemType();
    [CompilerGeneratedAttribute]
public void set_WorkItemType(string value);
    [CompilerGeneratedAttribute]
public string get_Title();
    [CompilerGeneratedAttribute]
public void set_Title(string value);
    [CompilerGeneratedAttribute]
public string get_State();
    [CompilerGeneratedAttribute]
public void set_State(string value);
    [CompilerGeneratedAttribute]
public string get_AssignedTo();
    [CompilerGeneratedAttribute]
public void set_AssignedTo(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.AuthorCounts : object {
    [CompilerGeneratedAttribute]
private TeamIdentityReference <User>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ChangeListsCount>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastChangeDate>k__BackingField;
    [DataMemberAttribute]
public TeamIdentityReference User { get; public set; }
    [DataMemberAttribute]
public int ChangeListsCount { get; public set; }
    [DataMemberAttribute]
public DateTime LastChangeDate { get; public set; }
    [CompilerGeneratedAttribute]
public TeamIdentityReference get_User();
    [CompilerGeneratedAttribute]
public void set_User(TeamIdentityReference value);
    [CompilerGeneratedAttribute]
public int get_ChangeListsCount();
    [CompilerGeneratedAttribute]
public void set_ChangeListsCount(int value);
    [CompilerGeneratedAttribute]
public DateTime get_LastChangeDate();
    [CompilerGeneratedAttribute]
public void set_LastChangeDate(DateTime value);
}
[DataContractAttribute]
[KnownTypeAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.TfsChange")]
[KnownTypeAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.GitChange")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.Change : Entity {
    [CompilerGeneratedAttribute]
private ItemModel <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SourceServerItem>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionControlChangeType <ChangeType>k__BackingField;
    [DataMemberAttribute]
public ItemModel Item { get; public set; }
    [DataMemberAttribute]
public string SourceServerItem { get; public set; }
    [DataMemberAttribute]
public VersionControlChangeType ChangeType { get; public set; }
    [CompilerGeneratedAttribute]
public ItemModel get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(ItemModel value);
    [CompilerGeneratedAttribute]
public string get_SourceServerItem();
    [CompilerGeneratedAttribute]
public void set_SourceServerItem(string value);
    [CompilerGeneratedAttribute]
public VersionControlChangeType get_ChangeType();
    [CompilerGeneratedAttribute]
public void set_ChangeType(VersionControlChangeType value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
[KnownTypeAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.TfsChangeList")]
[KnownTypeAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.GitCommit")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.ChangeList : Entity {
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CommentTruncated>k__BackingField;
    [CompilerGeneratedAttribute]
private CheckinNote[] <Notes>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OwnerDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <OwnerId>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreationDate>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <SortDate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AllChangesIncluded>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<VersionControlChangeType, int> <ChangeCounts>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Change> <Changes>k__BackingField;
    [DataMemberAttribute]
public string Version { get; public set; }
    [DataMemberAttribute]
public string Comment { get; public set; }
    [DataMemberAttribute]
public bool CommentTruncated { get; public set; }
    [DataMemberAttribute]
public CheckinNote[] Notes { get; public set; }
    [DataMemberAttribute]
public string OwnerDisplayName { get; public set; }
    [DataMemberAttribute]
public string Owner { get; public set; }
    [DataMemberAttribute]
public Guid OwnerId { get; public set; }
    [DataMemberAttribute]
public DateTime CreationDate { get; public set; }
    [DataMemberAttribute]
public DateTime SortDate { get; public set; }
    [DataMemberAttribute]
public bool AllChangesIncluded { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<VersionControlChangeType, int> ChangeCounts { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<Change> Changes { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public bool get_CommentTruncated();
    [CompilerGeneratedAttribute]
public void set_CommentTruncated(bool value);
    [CompilerGeneratedAttribute]
public CheckinNote[] get_Notes();
    [CompilerGeneratedAttribute]
public void set_Notes(CheckinNote[] value);
    [CompilerGeneratedAttribute]
public string get_OwnerDisplayName();
    [CompilerGeneratedAttribute]
public void set_OwnerDisplayName(string value);
    [CompilerGeneratedAttribute]
public string get_Owner();
    [CompilerGeneratedAttribute]
public void set_Owner(string value);
    [CompilerGeneratedAttribute]
public Guid get_OwnerId();
    [CompilerGeneratedAttribute]
public void set_OwnerId(Guid value);
    [CompilerGeneratedAttribute]
public DateTime get_CreationDate();
    [CompilerGeneratedAttribute]
public void set_CreationDate(DateTime value);
    [CompilerGeneratedAttribute]
public DateTime get_SortDate();
    [CompilerGeneratedAttribute]
public void set_SortDate(DateTime value);
    [CompilerGeneratedAttribute]
public bool get_AllChangesIncluded();
    [CompilerGeneratedAttribute]
public void set_AllChangesIncluded(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<VersionControlChangeType, int> get_ChangeCounts();
    [CompilerGeneratedAttribute]
public void set_ChangeCounts(Dictionary`2<VersionControlChangeType, int> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Change> get_Changes();
    [CompilerGeneratedAttribute]
public void set_Changes(IEnumerable`1<Change> value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
public static class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.ChangeListHelpers : object {
    public static Dictionary`2<VersionControlChangeType, int> ComputeChangeCounts(IEnumerable`1<Change> changes);
    public static void IncrementChangeCounts(Dictionary`2<VersionControlChangeType, int> changeCounts, VersionControlChangeType changeType, int count);
    private static void IncrementChangeFlagCount(Dictionary`2<VersionControlChangeType, int> changeCounts, VersionControlChangeType changeFlag, int count);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.ChangeQueryResults : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private IEnumerable`1<Change> <Results>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MoreResultsAvailable>k__BackingField;
    [CompilerGeneratedAttribute]
private Dictionary`2<VersionControlChangeType, int> <ChangeCounts>k__BackingField;
    [DataMemberAttribute]
public IEnumerable`1<Change> Results { get; public set; }
    [DataMemberAttribute]
public bool MoreResultsAvailable { get; public set; }
    [DataMemberAttribute]
public Dictionary`2<VersionControlChangeType, int> ChangeCounts { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<Change> get_Results();
    [CompilerGeneratedAttribute]
public void set_Results(IEnumerable`1<Change> value);
    [CompilerGeneratedAttribute]
public bool get_MoreResultsAvailable();
    [CompilerGeneratedAttribute]
public void set_MoreResultsAvailable(bool value);
    [CompilerGeneratedAttribute]
public Dictionary`2<VersionControlChangeType, int> get_ChangeCounts();
    [CompilerGeneratedAttribute]
public void set_ChangeCounts(Dictionary`2<VersionControlChangeType, int> value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.CheckinNote : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Value>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Value { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Value();
    [CompilerGeneratedAttribute]
public void set_Value(string value);
    public virtual string ToString();
}
[DataContractAttribute]
public abstract class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.Entity : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [DataMemberAttribute]
public string Url { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.FileCharDiffBlock : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private FileDiffBlock <LineChange>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<FileDiffBlock> <CharChange>k__BackingField;
    [DataMemberAttribute]
public FileDiffBlock LineChange { get; public set; }
    [DataMemberAttribute]
public List`1<FileDiffBlock> CharChange { get; public set; }
    [CompilerGeneratedAttribute]
public FileDiffBlock get_LineChange();
    [CompilerGeneratedAttribute]
public void set_LineChange(FileDiffBlock value);
    [CompilerGeneratedAttribute]
public List`1<FileDiffBlock> get_CharChange();
    [CompilerGeneratedAttribute]
public void set_CharChange(List`1<FileDiffBlock> value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.FileContent : object {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ContentLines>k__BackingField;
    [CompilerGeneratedAttribute]
private Byte[] <ContentBytes>k__BackingField;
    [CompilerGeneratedAttribute]
private FileContentMetadata <Metadata>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ExceededMaxContentLength>k__BackingField;
    [DataMemberAttribute]
public string Content { get; public set; }
    [DataMemberAttribute]
public List`1<string> ContentLines { get; public set; }
    [DataMemberAttribute]
public Byte[] ContentBytes { get; public set; }
    [DataMemberAttribute]
public FileContentMetadata Metadata { get; public set; }
    [DataMemberAttribute]
public bool ExceededMaxContentLength { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ContentLines();
    [CompilerGeneratedAttribute]
public void set_ContentLines(List`1<string> value);
    [CompilerGeneratedAttribute]
public Byte[] get_ContentBytes();
    [CompilerGeneratedAttribute]
public void set_ContentBytes(Byte[] value);
    [CompilerGeneratedAttribute]
public FileContentMetadata get_Metadata();
    [CompilerGeneratedAttribute]
public void set_Metadata(FileContentMetadata value);
    [CompilerGeneratedAttribute]
public bool get_ExceededMaxContentLength();
    [CompilerGeneratedAttribute]
public void set_ExceededMaxContentLength(bool value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.FileContentMetadata : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private int <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContentType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FileName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Extension>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBinary>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsImage>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VisualStudioWebLink>k__BackingField;
    [DataMemberAttribute]
public int Encoding { get; public set; }
    [DataMemberAttribute]
public string ContentType { get; public set; }
    [DataMemberAttribute]
public string FileName { get; public set; }
    [DataMemberAttribute]
public string Extension { get; public set; }
    [DataMemberAttribute]
public bool IsBinary { get; public set; }
    [DataMemberAttribute]
public bool IsImage { get; public set; }
    [DataMemberAttribute]
public string VisualStudioWebLink { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(int value);
    [CompilerGeneratedAttribute]
public string get_ContentType();
    [CompilerGeneratedAttribute]
public void set_ContentType(string value);
    [CompilerGeneratedAttribute]
public string get_FileName();
    [CompilerGeneratedAttribute]
public void set_FileName(string value);
    [CompilerGeneratedAttribute]
public string get_Extension();
    [CompilerGeneratedAttribute]
public void set_Extension(string value);
    [CompilerGeneratedAttribute]
public bool get_IsBinary();
    [CompilerGeneratedAttribute]
public void set_IsBinary(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsImage();
    [CompilerGeneratedAttribute]
public void set_IsImage(bool value);
    [CompilerGeneratedAttribute]
public string get_VisualStudioWebLink();
    [CompilerGeneratedAttribute]
public void set_VisualStudioWebLink(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.FileDiff : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private ItemModel <OriginalFile>k__BackingField;
    [CompilerGeneratedAttribute]
private ItemModel <ModifiedFile>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<FileDiffBlock> <Blocks>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<FileCharDiffBlock> <LineCharBlocks>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IdenticalContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WhitespaceChangesOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <BinaryContent>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ImageComparison>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <OriginalFileTruncated>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ModifiedFileTruncated>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <EmptyContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalFileEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModifiedFileEncoding>k__BackingField;
    [DataMemberAttribute]
public ItemModel OriginalFile { get; public set; }
    [DataMemberAttribute]
public ItemModel ModifiedFile { get; public set; }
    [DataMemberAttribute]
public List`1<FileDiffBlock> Blocks { get; public set; }
    [DataMemberAttribute]
public List`1<FileCharDiffBlock> LineCharBlocks { get; public set; }
    [DataMemberAttribute]
public bool IdenticalContent { get; public set; }
    [DataMemberAttribute]
public bool WhitespaceChangesOnly { get; public set; }
    [DataMemberAttribute]
public bool BinaryContent { get; public set; }
    [DataMemberAttribute]
public bool ImageComparison { get; public set; }
    [DataMemberAttribute]
public bool OriginalFileTruncated { get; public set; }
    [DataMemberAttribute]
public bool ModifiedFileTruncated { get; public set; }
    [DataMemberAttribute]
public bool EmptyContent { get; public set; }
    [DataMemberAttribute]
public string OriginalFileEncoding { get; public set; }
    [DataMemberAttribute]
public string ModifiedFileEncoding { get; public set; }
    [CompilerGeneratedAttribute]
public ItemModel get_OriginalFile();
    [CompilerGeneratedAttribute]
public void set_OriginalFile(ItemModel value);
    [CompilerGeneratedAttribute]
public ItemModel get_ModifiedFile();
    [CompilerGeneratedAttribute]
public void set_ModifiedFile(ItemModel value);
    [CompilerGeneratedAttribute]
public List`1<FileDiffBlock> get_Blocks();
    [CompilerGeneratedAttribute]
public void set_Blocks(List`1<FileDiffBlock> value);
    [CompilerGeneratedAttribute]
public List`1<FileCharDiffBlock> get_LineCharBlocks();
    [CompilerGeneratedAttribute]
public void set_LineCharBlocks(List`1<FileCharDiffBlock> value);
    [CompilerGeneratedAttribute]
public bool get_IdenticalContent();
    [CompilerGeneratedAttribute]
public void set_IdenticalContent(bool value);
    [CompilerGeneratedAttribute]
public bool get_WhitespaceChangesOnly();
    [CompilerGeneratedAttribute]
public void set_WhitespaceChangesOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_BinaryContent();
    [CompilerGeneratedAttribute]
public void set_BinaryContent(bool value);
    [CompilerGeneratedAttribute]
public bool get_ImageComparison();
    [CompilerGeneratedAttribute]
public void set_ImageComparison(bool value);
    [CompilerGeneratedAttribute]
public bool get_OriginalFileTruncated();
    [CompilerGeneratedAttribute]
public void set_OriginalFileTruncated(bool value);
    [CompilerGeneratedAttribute]
public bool get_ModifiedFileTruncated();
    [CompilerGeneratedAttribute]
public void set_ModifiedFileTruncated(bool value);
    [CompilerGeneratedAttribute]
public bool get_EmptyContent();
    [CompilerGeneratedAttribute]
public void set_EmptyContent(bool value);
    [CompilerGeneratedAttribute]
public string get_OriginalFileEncoding();
    [CompilerGeneratedAttribute]
public void set_OriginalFileEncoding(string value);
    [CompilerGeneratedAttribute]
public string get_ModifiedFileEncoding();
    [CompilerGeneratedAttribute]
public void set_ModifiedFileEncoding(string value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.FileDiffBlock : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private FileDiffBlockChangeType <ChangeType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OriginalLineNumberStart>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OriginalLinesCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ModifiedLineNumberStart>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ModifiedLinesCount>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <OriginalLines>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<string> <ModifiedLines>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TruncatedBefore>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <TruncatedAfter>k__BackingField;
    [DataMemberAttribute]
public FileDiffBlockChangeType ChangeType { get; public set; }
    [DataMemberAttribute]
public int OriginalLineNumberStart { get; public set; }
    [DataMemberAttribute]
public int OriginalLinesCount { get; public set; }
    [DataMemberAttribute]
public int ModifiedLineNumberStart { get; public set; }
    [DataMemberAttribute]
public int ModifiedLinesCount { get; public set; }
    [DataMemberAttribute]
public List`1<string> OriginalLines { get; public set; }
    [DataMemberAttribute]
public List`1<string> ModifiedLines { get; public set; }
    [DataMemberAttribute]
public bool TruncatedBefore { get; public set; }
    [DataMemberAttribute]
public bool TruncatedAfter { get; public set; }
    [CompilerGeneratedAttribute]
public FileDiffBlockChangeType get_ChangeType();
    [CompilerGeneratedAttribute]
public void set_ChangeType(FileDiffBlockChangeType value);
    [CompilerGeneratedAttribute]
public int get_OriginalLineNumberStart();
    [CompilerGeneratedAttribute]
public void set_OriginalLineNumberStart(int value);
    [CompilerGeneratedAttribute]
public int get_OriginalLinesCount();
    [CompilerGeneratedAttribute]
public void set_OriginalLinesCount(int value);
    [CompilerGeneratedAttribute]
public int get_ModifiedLineNumberStart();
    [CompilerGeneratedAttribute]
public void set_ModifiedLineNumberStart(int value);
    [CompilerGeneratedAttribute]
public int get_ModifiedLinesCount();
    [CompilerGeneratedAttribute]
public void set_ModifiedLinesCount(int value);
    [CompilerGeneratedAttribute]
public List`1<string> get_OriginalLines();
    [CompilerGeneratedAttribute]
public void set_OriginalLines(List`1<string> value);
    [CompilerGeneratedAttribute]
public List`1<string> get_ModifiedLines();
    [CompilerGeneratedAttribute]
public void set_ModifiedLines(List`1<string> value);
    [CompilerGeneratedAttribute]
public bool get_TruncatedBefore();
    [CompilerGeneratedAttribute]
public void set_TruncatedBefore(bool value);
    [CompilerGeneratedAttribute]
public bool get_TruncatedAfter();
    [CompilerGeneratedAttribute]
public void set_TruncatedAfter(bool value);
}
public enum Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.FileDiffBlockChangeType : Enum {
    public int value__;
    public static FileDiffBlockChangeType None;
    public static FileDiffBlockChangeType Add;
    public static FileDiffBlockChangeType Delete;
    public static FileDiffBlockChangeType Edit;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.FileDiffParameters : object {
    [CompilerGeneratedAttribute]
private string <OriginalContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OriginalVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModifiedContent>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModifiedPath>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ModifiedVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <PartialDiff>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<bool> <IgnoreTrimmedWhitespace>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <LineNumbersOnly>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeCharDiffs>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <ForceLoad>k__BackingField;
    [DataMemberAttribute]
public string OriginalContent { get; public set; }
    [DataMemberAttribute]
public string OriginalPath { get; public set; }
    [DataMemberAttribute]
public string OriginalVersion { get; public set; }
    [DataMemberAttribute]
public string ModifiedContent { get; public set; }
    [DataMemberAttribute]
public string ModifiedPath { get; public set; }
    [DataMemberAttribute]
public string ModifiedVersion { get; public set; }
    [DataMemberAttribute]
public bool PartialDiff { get; public set; }
    [DataMemberAttribute]
public Nullable`1<bool> IgnoreTrimmedWhitespace { get; public set; }
    [DataMemberAttribute]
public bool LineNumbersOnly { get; public set; }
    [DataMemberAttribute]
public bool IncludeCharDiffs { get; public set; }
    [DataMemberAttribute]
public bool ForceLoad { get; public set; }
    [CompilerGeneratedAttribute]
public string get_OriginalContent();
    [CompilerGeneratedAttribute]
public void set_OriginalContent(string value);
    [CompilerGeneratedAttribute]
public string get_OriginalPath();
    [CompilerGeneratedAttribute]
public void set_OriginalPath(string value);
    [CompilerGeneratedAttribute]
public string get_OriginalVersion();
    [CompilerGeneratedAttribute]
public void set_OriginalVersion(string value);
    [CompilerGeneratedAttribute]
public string get_ModifiedContent();
    [CompilerGeneratedAttribute]
public void set_ModifiedContent(string value);
    [CompilerGeneratedAttribute]
public string get_ModifiedPath();
    [CompilerGeneratedAttribute]
public void set_ModifiedPath(string value);
    [CompilerGeneratedAttribute]
public string get_ModifiedVersion();
    [CompilerGeneratedAttribute]
public void set_ModifiedVersion(string value);
    [CompilerGeneratedAttribute]
public bool get_PartialDiff();
    [CompilerGeneratedAttribute]
public void set_PartialDiff(bool value);
    [CompilerGeneratedAttribute]
public Nullable`1<bool> get_IgnoreTrimmedWhitespace();
    [CompilerGeneratedAttribute]
public void set_IgnoreTrimmedWhitespace(Nullable`1<bool> value);
    [CompilerGeneratedAttribute]
public bool get_LineNumbersOnly();
    [CompilerGeneratedAttribute]
public void set_LineNumbersOnly(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeCharDiffs();
    [CompilerGeneratedAttribute]
public void set_IncludeCharDiffs(bool value);
    [CompilerGeneratedAttribute]
public bool get_ForceLoad();
    [CompilerGeneratedAttribute]
public void set_ForceLoad(bool value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.GitAnnotateBatchResult : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private string <ModifiedObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<GitAnnotateResult> <Diffs>k__BackingField;
    [DataMemberAttribute]
public string ModifiedObjectId { get; public set; }
    [DataMemberAttribute]
public IList`1<GitAnnotateResult> Diffs { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ModifiedObjectId();
    [CompilerGeneratedAttribute]
public void set_ModifiedObjectId(string value);
    [CompilerGeneratedAttribute]
public IList`1<GitAnnotateResult> get_Diffs();
    [CompilerGeneratedAttribute]
public void set_Diffs(IList`1<GitAnnotateResult> value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.GitAnnotateResult : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private string <OriginalObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private FileDiff <Diff>k__BackingField;
    [DataMemberAttribute]
public string OriginalObjectId { get; public set; }
    [DataMemberAttribute]
public FileDiff Diff { get; public set; }
    [CompilerGeneratedAttribute]
public string get_OriginalObjectId();
    [CompilerGeneratedAttribute]
public void set_OriginalObjectId(string value);
    [CompilerGeneratedAttribute]
public FileDiff get_Diff();
    [CompilerGeneratedAttribute]
public void set_Diff(FileDiff value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.GitBranchDiff : object {
    [CompilerGeneratedAttribute]
private GitCommit <Commit>k__BackingField;
    [CompilerGeneratedAttribute]
private string <BranchName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AheadCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <BehindCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBaseCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityRef <IsLockedBy>k__BackingField;
    private static string c_headsPrefix;
    [DataMemberAttribute]
public GitCommit Commit { get; private set; }
    [DataMemberAttribute]
public string BranchName { get; private set; }
    [DataMemberAttribute]
public int AheadCount { get; private set; }
    [DataMemberAttribute]
public int BehindCount { get; private set; }
    [DataMemberAttribute]
public bool IsBaseCommit { get; private set; }
    [DataMemberAttribute]
public IdentityRef IsLockedBy { get; private set; }
    private GitBranchDiff(string refName, IdentityRef isLockedBy);
    public GitBranchDiff(GitCommit commit, string refName, IdentityRef isLockedBy);
    public GitBranchDiff(GitCommit commit, string refName, IdentityRef isLockedBy, int aheadCount, int behindCount);
    [CompilerGeneratedAttribute]
public GitCommit get_Commit();
    [CompilerGeneratedAttribute]
private void set_Commit(GitCommit value);
    [CompilerGeneratedAttribute]
public string get_BranchName();
    [CompilerGeneratedAttribute]
private void set_BranchName(string value);
    [CompilerGeneratedAttribute]
public int get_AheadCount();
    [CompilerGeneratedAttribute]
private void set_AheadCount(int value);
    [CompilerGeneratedAttribute]
public int get_BehindCount();
    [CompilerGeneratedAttribute]
private void set_BehindCount(int value);
    [CompilerGeneratedAttribute]
public bool get_IsBaseCommit();
    [CompilerGeneratedAttribute]
private void set_IsBaseCommit(bool value);
    [CompilerGeneratedAttribute]
public IdentityRef get_IsLockedBy();
    [CompilerGeneratedAttribute]
private void set_IsLockedBy(IdentityRef value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.GitChange : Change {
    public GitChange(VersionControlChangeType changeType);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.GitCommit : ChangeList {
    [CompilerGeneratedAttribute]
private GitObjectId <CommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private GitIdentityReference <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private GitIdentityReference <Committer>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<GitObjectReference> <Parents>k__BackingField;
    [CompilerGeneratedAttribute]
private GitItem <Tree>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CommitTime>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PushedByDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <PushTime>k__BackingField;
    [CompilerGeneratedAttribute]
private int <PushId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <PushCorrelationId>k__BackingField;
    [DataMemberAttribute]
public GitObjectId CommitId { get; public set; }
    [DataMemberAttribute]
public GitIdentityReference Author { get; public set; }
    [DataMemberAttribute]
public GitIdentityReference Committer { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<GitObjectReference> Parents { get; public set; }
    [DataMemberAttribute]
public GitItem Tree { get; public set; }
    [DataMemberAttribute]
public DateTime CommitTime { get; public set; }
    [DataMemberAttribute]
public string PushedByDisplayName { get; public set; }
    [DataMemberAttribute]
public DateTime PushTime { get; public set; }
    [DataMemberAttribute]
public int PushId { get; public set; }
    [ObsoleteAttribute("This is unused as of Dev15 M108 and may be deleted in the future")]
[DataMemberAttribute]
public Guid PushCorrelationId { get; public set; }
    [CompilerGeneratedAttribute]
public GitObjectId get_CommitId();
    [CompilerGeneratedAttribute]
public void set_CommitId(GitObjectId value);
    [CompilerGeneratedAttribute]
public GitIdentityReference get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(GitIdentityReference value);
    [CompilerGeneratedAttribute]
public GitIdentityReference get_Committer();
    [CompilerGeneratedAttribute]
public void set_Committer(GitIdentityReference value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<GitObjectReference> get_Parents();
    [CompilerGeneratedAttribute]
public void set_Parents(IEnumerable`1<GitObjectReference> value);
    [CompilerGeneratedAttribute]
public GitItem get_Tree();
    [CompilerGeneratedAttribute]
public void set_Tree(GitItem value);
    [CompilerGeneratedAttribute]
public DateTime get_CommitTime();
    [CompilerGeneratedAttribute]
public void set_CommitTime(DateTime value);
    [CompilerGeneratedAttribute]
public string get_PushedByDisplayName();
    [CompilerGeneratedAttribute]
public void set_PushedByDisplayName(string value);
    [CompilerGeneratedAttribute]
public DateTime get_PushTime();
    [CompilerGeneratedAttribute]
public void set_PushTime(DateTime value);
    [CompilerGeneratedAttribute]
public int get_PushId();
    [CompilerGeneratedAttribute]
public void set_PushId(int value);
    [CompilerGeneratedAttribute]
public Guid get_PushCorrelationId();
    [CompilerGeneratedAttribute]
public void set_PushCorrelationId(Guid value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.GitHistoryQueryResults : HistoryQueryResults {
    [CompilerGeneratedAttribute]
private string <StartingCommitId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UnpopulatedCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <UnprocessedCount>k__BackingField;
    [DataMemberAttribute]
public string StartingCommitId { get; public set; }
    [ObsoleteAttribute("This is unused as of Dev15 M108 and may be deleted in the future")]
[DataMemberAttribute]
public int UnpopulatedCount { get; public set; }
    [ObsoleteAttribute("This is unused as of Dev15 M108 and may be deleted in the future")]
[DataMemberAttribute]
public int UnprocessedCount { get; public set; }
    [CompilerGeneratedAttribute]
public string get_StartingCommitId();
    [CompilerGeneratedAttribute]
public void set_StartingCommitId(string value);
    [CompilerGeneratedAttribute]
public int get_UnpopulatedCount();
    [CompilerGeneratedAttribute]
public void set_UnpopulatedCount(int value);
    [CompilerGeneratedAttribute]
public int get_UnprocessedCount();
    [CompilerGeneratedAttribute]
public void set_UnprocessedCount(int value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.GitIdentityReference : TeamIdentityReference {
    [CompilerGeneratedAttribute]
private Nullable`1<DateTime> <Date>k__BackingField;
    [DataMemberAttribute]
public Nullable`1<DateTime> Date { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<DateTime> get_Date();
    [CompilerGeneratedAttribute]
public void set_Date(Nullable`1<DateTime> value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.GitItem : ItemModel {
    private static int S_IFMT;
    private static int S_IFDIR;
    private static int S_IFLNK;
    [CompilerGeneratedAttribute]
private GitObjectId <ObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private GitObjectType <GitObjectType>k__BackingField;
    [CompilerGeneratedAttribute]
private GitObjectId <CommitId>k__BackingField;
    [DataMemberAttribute]
public GitObjectId ObjectId { get; private set; }
    [DataMemberAttribute]
public GitObjectType GitObjectType { get; public set; }
    [DataMemberAttribute]
public GitObjectId CommitId { get; public set; }
    public GitItem(Byte[] objectId);
    public GitItem(GitObjectId objectId);
    public GitItem(string itemPath, Byte[] objectId, GitObjectType objectType, string version, int mode);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
    [CompilerGeneratedAttribute]
public GitObjectId get_ObjectId();
    [CompilerGeneratedAttribute]
private void set_ObjectId(GitObjectId value);
    [CompilerGeneratedAttribute]
public GitObjectType get_GitObjectType();
    [CompilerGeneratedAttribute]
public void set_GitObjectType(GitObjectType value);
    [CompilerGeneratedAttribute]
public GitObjectId get_CommitId();
    [CompilerGeneratedAttribute]
public void set_CommitId(GitObjectId value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.GitItemMetadata : object {
    [CompilerGeneratedAttribute]
private GitItem <Item>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private string <OwnerDisplayName>k__BackingField;
    [CompilerGeneratedAttribute]
private GitObjectId <CommitId>k__BackingField;
    [DataMemberAttribute]
public GitItem Item { get; public set; }
    [DataMemberAttribute]
public string Comment { get; public set; }
    [DataMemberAttribute]
public string Owner { get; public set; }
    [DataMemberAttribute]
public string OwnerDisplayName { get; public set; }
    [DataMemberAttribute]
public GitObjectId CommitId { get; public set; }
    [CompilerGeneratedAttribute]
public GitItem get_Item();
    [CompilerGeneratedAttribute]
public void set_Item(GitItem value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public string get_Owner();
    [CompilerGeneratedAttribute]
public void set_Owner(string value);
    [CompilerGeneratedAttribute]
public string get_OwnerDisplayName();
    [CompilerGeneratedAttribute]
public void set_OwnerDisplayName(string value);
    [CompilerGeneratedAttribute]
public GitObjectId get_CommitId();
    [CompilerGeneratedAttribute]
public void set_CommitId(GitObjectId value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.GitObjectId : VersionControlSecuredObject {
    private static int c_abbreviatedIdLengthInBytes;
    [CompilerGeneratedAttribute]
private Byte[] <ObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Full>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Short>k__BackingField;
    public Byte[] ObjectId { get; private set; }
    [DataMemberAttribute]
public string Full { get; public set; }
    [DataMemberAttribute]
public string Short { get; public set; }
    public GitObjectId(string objectId);
    public GitObjectId(Byte[] objectId);
    [CompilerGeneratedAttribute]
public Byte[] get_ObjectId();
    [CompilerGeneratedAttribute]
private void set_ObjectId(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_Full();
    [CompilerGeneratedAttribute]
public void set_Full(string value);
    [CompilerGeneratedAttribute]
public string get_Short();
    [CompilerGeneratedAttribute]
public void set_Short(string value);
    public static string Abbreviate(Byte[] commitId);
    private static string StringFromObjectId(Byte[] oid);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.GitObjectReference : Entity {
    [CompilerGeneratedAttribute]
private GitObjectId <ObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [DataMemberAttribute]
public GitObjectId ObjectId { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public GitObjectId get_ObjectId();
    [CompilerGeneratedAttribute]
public void set_ObjectId(GitObjectId value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.GitObjectType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static GitObjectType Bad;
    [EnumMemberAttribute]
public static GitObjectType Commit;
    [EnumMemberAttribute]
public static GitObjectType Tree;
    [EnumMemberAttribute]
public static GitObjectType Blob;
    [EnumMemberAttribute]
public static GitObjectType Tag;
    [EnumMemberAttribute]
public static GitObjectType Ext2;
    [EnumMemberAttribute]
public static GitObjectType OfsDelta;
    [EnumMemberAttribute]
public static GitObjectType RefDelta;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.GitSubmoduleItem : GitItem {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private GitObjectId <NewObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private GitObjectId <OldObjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RepositoryUrl>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public GitObjectId NewObjectId { get; public set; }
    [DataMemberAttribute]
public GitObjectId OldObjectId { get; public set; }
    [DataMemberAttribute]
public string RepositoryUrl { get; public set; }
    public GitSubmoduleItem(GitItem item);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public GitObjectId get_NewObjectId();
    [CompilerGeneratedAttribute]
public void set_NewObjectId(GitObjectId value);
    [CompilerGeneratedAttribute]
public GitObjectId get_OldObjectId();
    [CompilerGeneratedAttribute]
public void set_OldObjectId(GitObjectId value);
    [CompilerGeneratedAttribute]
public string get_RepositoryUrl();
    [CompilerGeneratedAttribute]
public void set_RepositoryUrl(string value);
}
[DataContractAttribute]
[KnownTypeAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.TfsHistoryEntry")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.HistoryEntry : object {
    [CompilerGeneratedAttribute]
private ChangeList <ChangeList>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionControlChangeType <ItemChangeType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ServerItem>k__BackingField;
    [DataMemberAttribute]
public ChangeList ChangeList { get; public set; }
    [DataMemberAttribute]
public VersionControlChangeType ItemChangeType { get; public set; }
    [DataMemberAttribute]
public string ServerItem { get; public set; }
    [CompilerGeneratedAttribute]
public ChangeList get_ChangeList();
    [CompilerGeneratedAttribute]
public void set_ChangeList(ChangeList value);
    [CompilerGeneratedAttribute]
public VersionControlChangeType get_ItemChangeType();
    [CompilerGeneratedAttribute]
public void set_ItemChangeType(VersionControlChangeType value);
    [CompilerGeneratedAttribute]
public string get_ServerItem();
    [CompilerGeneratedAttribute]
public void set_ServerItem(string value);
}
[DataContractAttribute]
[KnownTypeAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.GitHistoryQueryResults")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.HistoryQueryResults : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<HistoryEntry> <Results>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <MoreResultsAvailable>k__BackingField;
    [DataMemberAttribute]
public IEnumerable`1<HistoryEntry> Results { get; public set; }
    [DataMemberAttribute]
public bool MoreResultsAvailable { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<HistoryEntry> get_Results();
    [CompilerGeneratedAttribute]
public void set_Results(IEnumerable`1<HistoryEntry> value);
    [CompilerGeneratedAttribute]
public bool get_MoreResultsAvailable();
    [CompilerGeneratedAttribute]
public void set_MoreResultsAvailable(bool value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.ItemDetailsOptions : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private VersionControlRecursionType <RecursionLevel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeContentMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeVersionDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private long <ScanBytesForEncoding>k__BackingField;
    [DataMemberAttribute]
public VersionControlRecursionType RecursionLevel { get; public set; }
    [DataMemberAttribute]
public bool IncludeContentMetadata { get; public set; }
    [DataMemberAttribute]
public bool IncludeVersionDescription { get; public set; }
    public long ScanBytesForEncoding { get; public set; }
    public ItemDetailsOptions(Nullable`1<bool> includeChildren, Nullable`1<bool> includeContentMetadata, Nullable`1<bool> includeVersionDescription);
    public ItemDetailsOptions(ISecuredObject securedObject);
    [CompilerGeneratedAttribute]
public VersionControlRecursionType get_RecursionLevel();
    [CompilerGeneratedAttribute]
public void set_RecursionLevel(VersionControlRecursionType value);
    [CompilerGeneratedAttribute]
public bool get_IncludeContentMetadata();
    [CompilerGeneratedAttribute]
public void set_IncludeContentMetadata(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeVersionDescription();
    [CompilerGeneratedAttribute]
public void set_IncludeVersionDescription(bool value);
    [CompilerGeneratedAttribute]
public long get_ScanBytesForEncoding();
    [CompilerGeneratedAttribute]
public void set_ScanBytesForEncoding(long value);
}
[DataContractAttribute]
[KnownTypeAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.TfsItem")]
[KnownTypeAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.GitItem")]
[KnownTypeAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.GitSubmoduleItem")]
public abstract class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.ItemModel : Entity {
    [CompilerGeneratedAttribute]
private string <ServerItem>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionString>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsFolder>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ChangeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<ItemModel> <ChildItems>k__BackingField;
    [CompilerGeneratedAttribute]
private FileContentMetadata <ContentMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private string <VersionDescription>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsSymbolicLink>k__BackingField;
    [DataMemberAttribute]
public string ServerItem { get; public set; }
    [DataMemberAttribute]
public string VersionString { get; public set; }
    [DataMemberAttribute]
public bool IsFolder { get; public set; }
    [DataMemberAttribute]
public DateTime ChangeDate { get; public set; }
    [DataMemberAttribute]
public IList`1<ItemModel> ChildItems { get; public set; }
    [DataMemberAttribute]
public FileContentMetadata ContentMetadata { get; public set; }
    [DataMemberAttribute]
public string VersionDescription { get; public set; }
    [DataMemberAttribute]
public bool IsSymbolicLink { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ServerItem();
    [CompilerGeneratedAttribute]
public void set_ServerItem(string value);
    [CompilerGeneratedAttribute]
public string get_VersionString();
    [CompilerGeneratedAttribute]
public void set_VersionString(string value);
    [CompilerGeneratedAttribute]
public bool get_IsFolder();
    [CompilerGeneratedAttribute]
public void set_IsFolder(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_ChangeDate();
    [CompilerGeneratedAttribute]
public void set_ChangeDate(DateTime value);
    [CompilerGeneratedAttribute]
public IList`1<ItemModel> get_ChildItems();
    [CompilerGeneratedAttribute]
public void set_ChildItems(IList`1<ItemModel> value);
    [CompilerGeneratedAttribute]
public FileContentMetadata get_ContentMetadata();
    [CompilerGeneratedAttribute]
public void set_ContentMetadata(FileContentMetadata value);
    [CompilerGeneratedAttribute]
public string get_VersionDescription();
    [CompilerGeneratedAttribute]
public void set_VersionDescription(string value);
    [CompilerGeneratedAttribute]
public bool get_IsSymbolicLink();
    [CompilerGeneratedAttribute]
public void set_IsSymbolicLink(bool value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.TeamIdentityReference : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DisplayName>k__BackingField;
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public string DisplayName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public string get_DisplayName();
    [CompilerGeneratedAttribute]
public void set_DisplayName(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.TfsAnnotateDiffParameters : object {
    [CompilerGeneratedAttribute]
private int <oFileId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <mFileId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <oEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private int <mEncoding>k__BackingField;
    [CompilerGeneratedAttribute]
private string <oServerItem>k__BackingField;
    [CompilerGeneratedAttribute]
private string <mServerItem>k__BackingField;
    [DataMemberAttribute]
public int oFileId { get; public set; }
    [DataMemberAttribute]
public int mFileId { get; public set; }
    [DataMemberAttribute]
public int oEncoding { get; public set; }
    [DataMemberAttribute]
public int mEncoding { get; public set; }
    [DataMemberAttribute]
public string oServerItem { get; public set; }
    [DataMemberAttribute]
public string mServerItem { get; public set; }
    [CompilerGeneratedAttribute]
public int get_oFileId();
    [CompilerGeneratedAttribute]
public void set_oFileId(int value);
    [CompilerGeneratedAttribute]
public int get_mFileId();
    [CompilerGeneratedAttribute]
public void set_mFileId(int value);
    [CompilerGeneratedAttribute]
public int get_oEncoding();
    [CompilerGeneratedAttribute]
public void set_oEncoding(int value);
    [CompilerGeneratedAttribute]
public int get_mEncoding();
    [CompilerGeneratedAttribute]
public void set_mEncoding(int value);
    [CompilerGeneratedAttribute]
public string get_oServerItem();
    [CompilerGeneratedAttribute]
public void set_oServerItem(string value);
    [CompilerGeneratedAttribute]
public string get_mServerItem();
    [CompilerGeneratedAttribute]
public void set_mServerItem(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.TfsChange : Change {
    [CompilerGeneratedAttribute]
private int <PendingVersion>k__BackingField;
    [DataMemberAttribute]
public int PendingVersion { get; public set; }
    public TfsChange(TfsItem item, VersionControlChangeType changeType);
    public TfsChange(TfsItem item, VersionControlChangeType changeType, string sourceServerItem);
    [CompilerGeneratedAttribute]
public int get_PendingVersion();
    [CompilerGeneratedAttribute]
public void set_PendingVersion(int value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.TfsChangeList : ChangeList {
    [CompilerGeneratedAttribute]
private bool <IsShelveset>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ShelvesetName>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ChangesetId>k__BackingField;
    [CompilerGeneratedAttribute]
private TfsPolicyOverrideInfo <PolicyOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityRef <OwnerRef>k__BackingField;
    [DataMemberAttribute]
public bool IsShelveset { get; private set; }
    [DataMemberAttribute]
public string ShelvesetName { get; public set; }
    [DataMemberAttribute]
public int ChangesetId { get; public set; }
    [DataMemberAttribute]
public TfsPolicyOverrideInfo PolicyOverride { get; public set; }
    [DataMemberAttribute]
public IdentityRef OwnerRef { get; public set; }
    public TfsChangeList(bool isShelveset);
    [CompilerGeneratedAttribute]
public bool get_IsShelveset();
    [CompilerGeneratedAttribute]
private void set_IsShelveset(bool value);
    [CompilerGeneratedAttribute]
public string get_ShelvesetName();
    [CompilerGeneratedAttribute]
public void set_ShelvesetName(string value);
    [CompilerGeneratedAttribute]
public int get_ChangesetId();
    [CompilerGeneratedAttribute]
public void set_ChangesetId(int value);
    [CompilerGeneratedAttribute]
public TfsPolicyOverrideInfo get_PolicyOverride();
    [CompilerGeneratedAttribute]
public void set_PolicyOverride(TfsPolicyOverrideInfo value);
    [CompilerGeneratedAttribute]
public IdentityRef get_OwnerRef();
    [CompilerGeneratedAttribute]
public void set_OwnerRef(IdentityRef value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.TfsHistoryEntry : HistoryEntry {
    [CompilerGeneratedAttribute]
private int <FileId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Encoding>k__BackingField;
    [DataMemberAttribute]
public int FileId { get; public set; }
    [DataMemberAttribute]
public int Encoding { get; public set; }
    [CompilerGeneratedAttribute]
public int get_FileId();
    [CompilerGeneratedAttribute]
public void set_FileId(int value);
    [CompilerGeneratedAttribute]
public int get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(int value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.TfsIdentityReference : TeamIdentityReference {
    [CompilerGeneratedAttribute]
private string <AccountName>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <TeamFoundationId>k__BackingField;
    [DataMemberAttribute]
public string AccountName { get; public set; }
    [DataMemberAttribute]
public Guid TeamFoundationId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_AccountName();
    [CompilerGeneratedAttribute]
public void set_AccountName(string value);
    [CompilerGeneratedAttribute]
public Guid get_TeamFoundationId();
    [CompilerGeneratedAttribute]
public void set_TeamFoundationId(Guid value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.TfsItem : ItemModel {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ChangesetVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DeletionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBranch>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPendingChange>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FileId>k__BackingField;
    [DataMemberAttribute]
public int Id { get; public set; }
    [DataMemberAttribute]
public int ChangesetVersion { get; public set; }
    [DataMemberAttribute]
public int DeletionId { get; public set; }
    [DataMemberAttribute]
public bool IsBranch { get; public set; }
    [DataMemberAttribute]
public bool IsPendingChange { get; public set; }
    [IgnoreDataMemberAttribute]
public int Encoding { get; public set; }
    [IgnoreDataMemberAttribute]
public int FileId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public int get_ChangesetVersion();
    [CompilerGeneratedAttribute]
public void set_ChangesetVersion(int value);
    [CompilerGeneratedAttribute]
public int get_DeletionId();
    [CompilerGeneratedAttribute]
public void set_DeletionId(int value);
    [CompilerGeneratedAttribute]
public bool get_IsBranch();
    [CompilerGeneratedAttribute]
public void set_IsBranch(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPendingChange();
    [CompilerGeneratedAttribute]
public void set_IsPendingChange(bool value);
    [CompilerGeneratedAttribute]
public int get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(int value);
    [CompilerGeneratedAttribute]
public int get_FileId();
    [CompilerGeneratedAttribute]
public void set_FileId(int value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.TfsPolicyFailureInfo : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PolicyName>k__BackingField;
    [DataMemberAttribute]
public string Message { get; public set; }
    [DataMemberAttribute]
public string PolicyName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_PolicyName();
    [CompilerGeneratedAttribute]
public void set_PolicyName(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.TfsPolicyOverrideInfo : object {
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TfsPolicyFailureInfo> <PolicyFailures>k__BackingField;
    [DataMemberAttribute]
public string Comment { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<TfsPolicyFailureInfo> PolicyFailures { get; public set; }
    public TfsPolicyOverrideInfo(string comment, IEnumerable`1<TfsPolicyFailureInfo> policyFailures);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TfsPolicyFailureInfo> get_PolicyFailures();
    [CompilerGeneratedAttribute]
public void set_PolicyFailures(IEnumerable`1<TfsPolicyFailureInfo> value);
}
[FlagsAttribute]
[DataContractAttribute]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.VersionControlChangeType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static VersionControlChangeType None;
    [EnumMemberAttribute]
public static VersionControlChangeType Add;
    [EnumMemberAttribute]
public static VersionControlChangeType Edit;
    [EnumMemberAttribute]
public static VersionControlChangeType Encoding;
    [EnumMemberAttribute]
public static VersionControlChangeType Rename;
    [EnumMemberAttribute]
public static VersionControlChangeType Delete;
    [EnumMemberAttribute]
public static VersionControlChangeType Undelete;
    [EnumMemberAttribute]
public static VersionControlChangeType Branch;
    [EnumMemberAttribute]
public static VersionControlChangeType Merge;
    [EnumMemberAttribute]
public static VersionControlChangeType Lock;
    [EnumMemberAttribute]
public static VersionControlChangeType Rollback;
    [EnumMemberAttribute]
public static VersionControlChangeType SourceRename;
    [EnumMemberAttribute]
public static VersionControlChangeType TargetRename;
    [EnumMemberAttribute]
public static VersionControlChangeType Property;
    [EnumMemberAttribute]
public static VersionControlChangeType All;
}
public enum Microsoft.TeamFoundation.SourceControl.WebApi.Legacy.VersionControlRecursionType : Enum {
    public int value__;
    public static VersionControlRecursionType None;
    public static VersionControlRecursionType OneLevel;
    public static VersionControlRecursionType OneLevelPlusNestedEmptyFolders;
    public static VersionControlRecursionType Full;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.LineDiffBlock : object {
    [CompilerGeneratedAttribute]
private LineDiffBlockChangeType <ChangeType>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OriginalLineNumberStart>k__BackingField;
    [CompilerGeneratedAttribute]
private int <OriginalLinesCount>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ModifiedLineNumberStart>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ModifiedLinesCount>k__BackingField;
    [DataMemberAttribute]
public LineDiffBlockChangeType ChangeType { get; public set; }
    [DataMemberAttribute]
public int OriginalLineNumberStart { get; public set; }
    [DataMemberAttribute]
public int OriginalLinesCount { get; public set; }
    [DataMemberAttribute]
public int ModifiedLineNumberStart { get; public set; }
    [DataMemberAttribute]
public int ModifiedLinesCount { get; public set; }
    [CompilerGeneratedAttribute]
public LineDiffBlockChangeType get_ChangeType();
    [CompilerGeneratedAttribute]
public void set_ChangeType(LineDiffBlockChangeType value);
    [CompilerGeneratedAttribute]
public int get_OriginalLineNumberStart();
    [CompilerGeneratedAttribute]
public void set_OriginalLineNumberStart(int value);
    [CompilerGeneratedAttribute]
public int get_OriginalLinesCount();
    [CompilerGeneratedAttribute]
public void set_OriginalLinesCount(int value);
    [CompilerGeneratedAttribute]
public int get_ModifiedLineNumberStart();
    [CompilerGeneratedAttribute]
public void set_ModifiedLineNumberStart(int value);
    [CompilerGeneratedAttribute]
public int get_ModifiedLinesCount();
    [CompilerGeneratedAttribute]
public void set_ModifiedLinesCount(int value);
}
public enum Microsoft.TeamFoundation.SourceControl.WebApi.LineDiffBlockChangeType : Enum {
    public int value__;
    public static LineDiffBlockChangeType None;
    public static LineDiffBlockChangeType Add;
    public static LineDiffBlockChangeType Delete;
    public static LineDiffBlockChangeType Edit;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.MergeCompletedEvent : RealTimePullRequestEvent {
    public MergeCompletedEvent(int pullRequestId);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.PolicyEvaluationUpdatedEvent : RealTimePullRequestEvent {
    public PolicyEvaluationUpdatedEvent(int pullRequestId);
}
public enum Microsoft.TeamFoundation.SourceControl.WebApi.PullRequestAsyncStatus : Enum {
    public byte value__;
    public static PullRequestAsyncStatus NotSet;
    public static PullRequestAsyncStatus Queued;
    public static PullRequestAsyncStatus Conflicts;
    public static PullRequestAsyncStatus Succeeded;
    public static PullRequestAsyncStatus RejectedByPolicy;
    public static PullRequestAsyncStatus Failure;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.PullRequestCreatedEvent : RealTimePullRequestEvent {
    public PullRequestCreatedEvent(int pullRequestId);
}
public static class Microsoft.TeamFoundation.SourceControl.WebApi.PullRequestDiscussionThreadPropertyNames : object {
    public static string CodeReviewThreadType;
}
public enum Microsoft.TeamFoundation.SourceControl.WebApi.PullRequestMergeFailureType : Enum {
    public byte value__;
    public static PullRequestMergeFailureType None;
    public static PullRequestMergeFailureType Unknown;
    public static PullRequestMergeFailureType CaseSensitive;
    public static PullRequestMergeFailureType ObjectTooLarge;
}
public enum Microsoft.TeamFoundation.SourceControl.WebApi.PullRequestStatus : Enum {
    public byte value__;
    public static PullRequestStatus NotSet;
    public static PullRequestStatus Active;
    public static PullRequestStatus Abandoned;
    public static PullRequestStatus Completed;
    public static PullRequestStatus All;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.PullRequestTabExtensionConfig : object {
    [CompilerGeneratedAttribute]
private int <PullRequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RepositoryId>k__BackingField;
    [DataMemberAttribute]
public int PullRequestId { get; public set; }
    [DataMemberAttribute]
public string RepositoryId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_PullRequestId();
    [CompilerGeneratedAttribute]
public void set_PullRequestId(int value);
    [CompilerGeneratedAttribute]
public string get_RepositoryId();
    [CompilerGeneratedAttribute]
public void set_RepositoryId(string value);
}
public enum Microsoft.TeamFoundation.SourceControl.WebApi.PullRequestTimeRangeType : Enum {
    public byte value__;
    public static PullRequestTimeRangeType Created;
    public static PullRequestTimeRangeType Closed;
}
[DataContractAttribute]
public abstract class Microsoft.TeamFoundation.SourceControl.WebApi.RealTimePullRequestEvent : object {
    [CompilerGeneratedAttribute]
private int <PullRequestId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <EventId>k__BackingField;
    [DataMemberAttribute]
public int PullRequestId { get; private set; }
    [DataMemberAttribute]
public Guid EventId { get; private set; }
    public RealTimePullRequestEvent(int pullRequestId);
    [CompilerGeneratedAttribute]
public int get_PullRequestId();
    [CompilerGeneratedAttribute]
private void set_PullRequestId(int value);
    [CompilerGeneratedAttribute]
public Guid get_EventId();
    [CompilerGeneratedAttribute]
private void set_EventId(Guid value);
}
public class Microsoft.TeamFoundation.SourceControl.WebApi.RestConstants : object {
    public static string ContinuationTokenHeaderName;
}
public class Microsoft.TeamFoundation.SourceControl.WebApi.RestLinkConstants : object {
    public static string SelfLink;
    public static string WebLink;
    public static string SshLink;
    public static string ProjectLink;
    public static string WorkItemsLink;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.RetargetEvent : RealTimePullRequestEvent {
    public RetargetEvent(int pullRequestId);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.ReviewersUpdatedEvent : RealTimePullRequestEvent {
    public ReviewersUpdatedEvent(int pullRequestId);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.ReviewersVotesResetEvent : RealTimePullRequestEvent {
    public ReviewersVotesResetEvent(int pullRequestId);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.ReviewerVoteUpdatedEvent : RealTimePullRequestEvent {
    public ReviewerVoteUpdatedEvent(int pullRequestId);
}
[EditorBrowsableAttribute("1")]
[CollectionDataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.SecuredDictionary`2 : Dictionary`2<TKey, TValue> {
    private ISecuredObject m_securedObject;
    [IgnoreDataMemberAttribute]
private Guid Microsoft.VisualStudio.Services.WebApi.ISecuredObject.NamespaceId { get; }
    [IgnoreDataMemberAttribute]
private int Microsoft.VisualStudio.Services.WebApi.ISecuredObject.RequiredPermissions { get; }
    public SecuredDictionary`2(ISecuredObject securedObject);
    public void SetSecuredObject(ISecuredObject securedObject);
    private sealed virtual override Guid Microsoft.VisualStudio.Services.WebApi.ISecuredObject.get_NamespaceId();
    private sealed virtual override int Microsoft.VisualStudio.Services.WebApi.ISecuredObject.get_RequiredPermissions();
    private sealed virtual override string Microsoft.VisualStudio.Services.WebApi.ISecuredObject.GetToken();
    private void CheckForNullSecuredObject();
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.ShareNotificationContext : object {
    [CompilerGeneratedAttribute]
private IList`1<IdentityRef> <Receivers>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [DataMemberAttribute]
public IList`1<IdentityRef> Receivers { get; public set; }
    [DataMemberAttribute]
public string Message { get; public set; }
    [CompilerGeneratedAttribute]
public IList`1<IdentityRef> get_Receivers();
    [CompilerGeneratedAttribute]
public void set_Receivers(IList`1<IdentityRef> value);
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.SourceToTargetRef : object {
    [CompilerGeneratedAttribute]
private string <SourceRef>k__BackingField;
    [CompilerGeneratedAttribute]
private string <TargetRef>k__BackingField;
    [DataMemberAttribute]
public string SourceRef { get; public set; }
    [DataMemberAttribute]
public string TargetRef { get; public set; }
    [CompilerGeneratedAttribute]
public string get_SourceRef();
    [CompilerGeneratedAttribute]
public void set_SourceRef(string value);
    [CompilerGeneratedAttribute]
public string get_TargetRef();
    [CompilerGeneratedAttribute]
public void set_TargetRef(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.StatusAddedEvent : RealTimePullRequestEvent {
    public StatusAddedEvent(int pullRequestId);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.StatusesDeletedEvent : RealTimePullRequestEvent {
    public StatusesDeletedEvent(int pullRequestId);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.StatusUpdatedEvent : RealTimePullRequestEvent {
    public StatusUpdatedEvent(int pullRequestId);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.SupportedIde : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private SupportedIdeType <IdeType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <DownloadUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ProtocolHandlerUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private String[] <SupportedPlatforms>k__BackingField;
    [DataMemberAttribute]
public SupportedIdeType IdeType { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string DownloadUrl { get; public set; }
    [DataMemberAttribute]
public string ProtocolHandlerUrl { get; public set; }
    [DataMemberAttribute]
public String[] SupportedPlatforms { get; public set; }
    public SupportedIde(SupportedIdeType ide, string name, string url, String[] platforms, string downloadUrl);
    [CompilerGeneratedAttribute]
public SupportedIdeType get_IdeType();
    [CompilerGeneratedAttribute]
public void set_IdeType(SupportedIdeType value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_DownloadUrl();
    [CompilerGeneratedAttribute]
public void set_DownloadUrl(string value);
    [CompilerGeneratedAttribute]
public string get_ProtocolHandlerUrl();
    [CompilerGeneratedAttribute]
public void set_ProtocolHandlerUrl(string value);
    [CompilerGeneratedAttribute]
public String[] get_SupportedPlatforms();
    [CompilerGeneratedAttribute]
public void set_SupportedPlatforms(String[] value);
}
public enum Microsoft.TeamFoundation.SourceControl.WebApi.SupportedIdeType : Enum {
    public int value__;
    public static SupportedIdeType Unknown;
    public static SupportedIdeType AndroidStudio;
    public static SupportedIdeType AppCode;
    public static SupportedIdeType CLion;
    public static SupportedIdeType DataGrip;
    public static SupportedIdeType Eclipse;
    public static SupportedIdeType IntelliJ;
    public static SupportedIdeType MPS;
    public static SupportedIdeType PhpStorm;
    public static SupportedIdeType PyCharm;
    public static SupportedIdeType RubyMine;
    public static SupportedIdeType Tower;
    public static SupportedIdeType VisualStudio;
    public static SupportedIdeType VSCode;
    public static SupportedIdeType WebStorm;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcBranch : TfvcBranchRef {
    [CompilerGeneratedAttribute]
private TfvcShallowBranchRef <Parent>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TfvcShallowBranchRef> <RelatedBranches>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TfvcBranchMapping> <Mappings>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<TfvcBranch> <Children>k__BackingField;
    [DataMemberAttribute]
public TfvcShallowBranchRef Parent { get; public set; }
    [DataMemberAttribute]
public List`1<TfvcShallowBranchRef> RelatedBranches { get; public set; }
    [DataMemberAttribute]
public List`1<TfvcBranchMapping> Mappings { get; public set; }
    [DataMemberAttribute]
public List`1<TfvcBranch> Children { get; public set; }
    public TfvcBranch(TfvcBranchRef branchRef);
    [CompilerGeneratedAttribute]
public TfvcShallowBranchRef get_Parent();
    [CompilerGeneratedAttribute]
public void set_Parent(TfvcShallowBranchRef value);
    [CompilerGeneratedAttribute]
public List`1<TfvcShallowBranchRef> get_RelatedBranches();
    [CompilerGeneratedAttribute]
public void set_RelatedBranches(List`1<TfvcShallowBranchRef> value);
    [CompilerGeneratedAttribute]
public List`1<TfvcBranchMapping> get_Mappings();
    [CompilerGeneratedAttribute]
public void set_Mappings(List`1<TfvcBranchMapping> value);
    [CompilerGeneratedAttribute]
public List`1<TfvcBranch> get_Children();
    [CompilerGeneratedAttribute]
public void set_Children(List`1<TfvcBranch> value);
}
[CollectionDataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcBranchesCollection : List`1<TfvcBranch> {
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcBranchMapping : object {
    [CompilerGeneratedAttribute]
private string <ServerItem>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Depth>k__BackingField;
    [DataMemberAttribute]
public string ServerItem { get; public set; }
    [DataMemberAttribute]
public string Type { get; public set; }
    [DataMemberAttribute]
public string Depth { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ServerItem();
    [CompilerGeneratedAttribute]
public void set_ServerItem(string value);
    [CompilerGeneratedAttribute]
public string get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(string value);
    [CompilerGeneratedAttribute]
public string get_Depth();
    [CompilerGeneratedAttribute]
public void set_Depth(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcBranchRef : TfvcShallowBranchRef {
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityRef <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDeleted>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [DataMemberAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
public IdentityRef Owner { get; public set; }
    [DataMemberAttribute]
public DateTime CreatedDate { get; public set; }
    [DataMemberAttribute]
public bool IsDeleted { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public IdentityRef get_Owner();
    [CompilerGeneratedAttribute]
public void set_Owner(IdentityRef value);
    [CompilerGeneratedAttribute]
public DateTime get_CreatedDate();
    [CompilerGeneratedAttribute]
public void set_CreatedDate(DateTime value);
    [CompilerGeneratedAttribute]
public bool get_IsDeleted();
    [CompilerGeneratedAttribute]
public void set_IsDeleted(bool value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
}
[CollectionDataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcBranchRefsCollection : List`1<TfvcBranchRef> {
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcChange : Change`1<TfvcItem> {
    [CompilerGeneratedAttribute]
private int <PendingVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TfvcMergeSource> <MergeSources>k__BackingField;
    [DataMemberAttribute]
public int PendingVersion { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<TfvcMergeSource> MergeSources { get; public set; }
    public TfvcChange(TfvcItem item, VersionControlChangeType changeType);
    public TfvcChange(TfvcItem item, VersionControlChangeType changeType, string sourceServerItem);
    [CompilerGeneratedAttribute]
public int get_PendingVersion();
    [CompilerGeneratedAttribute]
public void set_PendingVersion(int value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TfvcMergeSource> get_MergeSources();
    [CompilerGeneratedAttribute]
public void set_MergeSources(IEnumerable`1<TfvcMergeSource> value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcChangeset : TfvcChangesetRef {
    [CompilerGeneratedAttribute]
private IEnumerable`1<TfvcChange> <Changes>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <HasMoreChanges>k__BackingField;
    [CompilerGeneratedAttribute]
private CheckinNote[] <CheckinNotes>k__BackingField;
    [CompilerGeneratedAttribute]
private TfvcPolicyOverrideInfo <PolicyOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<AssociatedWorkItem> <WorkItems>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <CollectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <AccountId>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<Guid> <TeamProjectIds>k__BackingField;
    [DataMemberAttribute]
public IEnumerable`1<TfvcChange> Changes { get; public set; }
    [DataMemberAttribute]
public bool HasMoreChanges { get; public set; }
    [DataMemberAttribute]
public CheckinNote[] CheckinNotes { get; public set; }
    [DataMemberAttribute]
public TfvcPolicyOverrideInfo PolicyOverride { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<AssociatedWorkItem> WorkItems { get; public set; }
    [DataMemberAttribute]
public Guid CollectionId { get; public set; }
    [DataMemberAttribute]
public Guid AccountId { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<Guid> TeamProjectIds { get; public set; }
    public TfvcChangeset(TfvcChangesetRef tfvcChangesetRef);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TfvcChange> get_Changes();
    [CompilerGeneratedAttribute]
public void set_Changes(IEnumerable`1<TfvcChange> value);
    [CompilerGeneratedAttribute]
public bool get_HasMoreChanges();
    [CompilerGeneratedAttribute]
public void set_HasMoreChanges(bool value);
    [CompilerGeneratedAttribute]
public CheckinNote[] get_CheckinNotes();
    [CompilerGeneratedAttribute]
public void set_CheckinNotes(CheckinNote[] value);
    [CompilerGeneratedAttribute]
public TfvcPolicyOverrideInfo get_PolicyOverride();
    [CompilerGeneratedAttribute]
public void set_PolicyOverride(TfvcPolicyOverrideInfo value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<AssociatedWorkItem> get_WorkItems();
    [CompilerGeneratedAttribute]
public void set_WorkItems(IEnumerable`1<AssociatedWorkItem> value);
    [CompilerGeneratedAttribute]
public Guid get_CollectionId();
    [CompilerGeneratedAttribute]
public void set_CollectionId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_AccountId();
    [CompilerGeneratedAttribute]
public void set_AccountId(Guid value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<Guid> get_TeamProjectIds();
    [CompilerGeneratedAttribute]
public void set_TeamProjectIds(IEnumerable`1<Guid> value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcChangesetRef : object {
    [CompilerGeneratedAttribute]
private int <ChangesetId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityRef <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityRef <CheckedInBy>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CommentTruncated>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [DataMemberAttribute]
public int ChangesetId { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public IdentityRef Author { get; public set; }
    [DataMemberAttribute]
public IdentityRef CheckedInBy { get; public set; }
    [DataMemberAttribute]
public DateTime CreatedDate { get; public set; }
    [DataMemberAttribute]
public string Comment { get; public set; }
    [DataMemberAttribute]
public bool CommentTruncated { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ChangesetId();
    [CompilerGeneratedAttribute]
public void set_ChangesetId(int value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public IdentityRef get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(IdentityRef value);
    [CompilerGeneratedAttribute]
public IdentityRef get_CheckedInBy();
    [CompilerGeneratedAttribute]
public void set_CheckedInBy(IdentityRef value);
    [CompilerGeneratedAttribute]
public DateTime get_CreatedDate();
    [CompilerGeneratedAttribute]
public void set_CreatedDate(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public bool get_CommentTruncated();
    [CompilerGeneratedAttribute]
public void set_CommentTruncated(bool value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
}
[CollectionDataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcChangesetsCollection : List`1<TfvcChangesetRef> {
    public TfvcChangesetsCollection(IList`1<TfvcChangesetRef> source);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcChangesetSearchCriteria : object {
    [CompilerGeneratedAttribute]
private string <ItemPath>k__BackingField;
    [CompilerGeneratedAttribute]
private TfvcVersionDescriptor <versionDescriptor>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Author>k__BackingField;
    [CompilerGeneratedAttribute]
private string <FromDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ToDate>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FromId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <ToId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <FollowRenames>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeLinks>k__BackingField;
    [DataMemberAttribute]
private List`1<TfvcMappingFilter> m_mappings;
    [DataMemberAttribute]
public string ItemPath { get; public set; }
    public IList`1<TfvcMappingFilter> Mappings { get; }
    public TfvcVersionDescriptor versionDescriptor { get; public set; }
    [DataMemberAttribute]
public string Author { get; public set; }
    [DataMemberAttribute]
public string FromDate { get; public set; }
    [DataMemberAttribute]
public string ToDate { get; public set; }
    [DataMemberAttribute]
public int FromId { get; public set; }
    [DataMemberAttribute]
public int ToId { get; public set; }
    [DataMemberAttribute]
public bool FollowRenames { get; public set; }
    [DataMemberAttribute]
public bool IncludeLinks { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ItemPath();
    [CompilerGeneratedAttribute]
public void set_ItemPath(string value);
    public IList`1<TfvcMappingFilter> get_Mappings();
    [CompilerGeneratedAttribute]
public TfvcVersionDescriptor get_versionDescriptor();
    [CompilerGeneratedAttribute]
public void set_versionDescriptor(TfvcVersionDescriptor value);
    [CompilerGeneratedAttribute]
public string get_Author();
    [CompilerGeneratedAttribute]
public void set_Author(string value);
    [CompilerGeneratedAttribute]
public string get_FromDate();
    [CompilerGeneratedAttribute]
public void set_FromDate(string value);
    [CompilerGeneratedAttribute]
public string get_ToDate();
    [CompilerGeneratedAttribute]
public void set_ToDate(string value);
    [CompilerGeneratedAttribute]
public int get_FromId();
    [CompilerGeneratedAttribute]
public void set_FromId(int value);
    [CompilerGeneratedAttribute]
public int get_ToId();
    [CompilerGeneratedAttribute]
public void set_ToId(int value);
    [CompilerGeneratedAttribute]
public bool get_FollowRenames();
    [CompilerGeneratedAttribute]
public void set_FollowRenames(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeLinks();
    [CompilerGeneratedAttribute]
public void set_IncludeLinks(bool value);
    [OnSerializingAttribute]
private void OnSerializing(StreamingContext context);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcChangesetsRequestData : object {
    [DataMemberAttribute]
public Int32[] changesetIds;
    [DataMemberAttribute]
public int commentLength;
    [CompilerGeneratedAttribute]
private bool <IncludeLinks>k__BackingField;
    [DataMemberAttribute]
public bool IncludeLinks { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_IncludeLinks();
    [CompilerGeneratedAttribute]
public void set_IncludeLinks(bool value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcCheckinEventData : object {
    [CompilerGeneratedAttribute]
private TfvcChangeset <Changeset>k__BackingField;
    [CompilerGeneratedAttribute]
private TeamProjectReference <Project>k__BackingField;
    [DataMemberAttribute]
public TfvcChangeset Changeset { get; public set; }
    [DataMemberAttribute]
public TeamProjectReference Project { get; public set; }
    [CompilerGeneratedAttribute]
public TfvcChangeset get_Changeset();
    [CompilerGeneratedAttribute]
public void set_Changeset(TfvcChangeset value);
    [CompilerGeneratedAttribute]
public TeamProjectReference get_Project();
    [CompilerGeneratedAttribute]
public void set_Project(TeamProjectReference value);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcCompatHttpClientBase : VssHttpClientBase {
    public TfvcCompatHttpClientBase(Uri baseUrl, VssCredentials credentials);
    public TfvcCompatHttpClientBase(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings);
    public TfvcCompatHttpClientBase(Uri baseUrl, VssCredentials credentials, DelegatingHandler[] handlers);
    public TfvcCompatHttpClientBase(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings, DelegatingHandler[] handlers);
    public TfvcCompatHttpClientBase(Uri baseUrl, HttpMessageHandler pipeline, bool disposeHandler);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<TfvcItem> GetItemAsync(string project, string path, string fileName, Nullable`1<bool> download, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, TfvcVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<TfvcItem> GetItemAsync(Guid project, string path, string fileName, Nullable`1<bool> download, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, TfvcVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<TfvcItem> GetItemAsync(string path, string fileName, Nullable`1<bool> download, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, TfvcVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcCompatHttpClientBase/<GetItemContentAsync>d__8")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemContentAsync(string project, string path, string fileName, Nullable`1<bool> download, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, TfvcVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcCompatHttpClientBase/<GetItemContentAsync>d__9")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemContentAsync(Guid project, string path, string fileName, Nullable`1<bool> download, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, TfvcVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcCompatHttpClientBase/<GetItemContentAsync>d__10")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemContentAsync(string path, string fileName, Nullable`1<bool> download, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, TfvcVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcCompatHttpClientBase/<GetItemTextAsync>d__11")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemTextAsync(string project, string path, string fileName, Nullable`1<bool> download, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, TfvcVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcCompatHttpClientBase/<GetItemTextAsync>d__12")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemTextAsync(Guid project, string path, string fileName, Nullable`1<bool> download, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, TfvcVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcCompatHttpClientBase/<GetItemTextAsync>d__13")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemTextAsync(string path, string fileName, Nullable`1<bool> download, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, TfvcVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcCompatHttpClientBase/<GetItemZipAsync>d__14")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemZipAsync(string project, string path, string fileName, Nullable`1<bool> download, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, TfvcVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcCompatHttpClientBase/<GetItemZipAsync>d__15")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemZipAsync(Guid project, string path, string fileName, Nullable`1<bool> download, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, TfvcVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcCompatHttpClientBase/<GetItemZipAsync>d__16")]
[EditorBrowsableAttribute("1")]
[ObsoleteAttribute]
public virtual Task`1<Stream> GetItemZipAsync(string path, string fileName, Nullable`1<bool> download, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, TfvcVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
}
[GenerateAllConstantsAttribute("")]
public static class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcConstants : object {
    public static string AreaId;
    public static string AreaName;
    public static string RootFolder;
    public static string Separator;
    public static string TfvcChangesetsLocationIdString;
    public static Guid TfvcChangesetsLocationId;
    public static string TfvcChangesetChangesLocationIdString;
    public static Guid TfvcChangesetChangesLocationId;
    public static string TfvcChangesetWorkItemsLocationIdString;
    public static Guid TfvcChangesetWorkItemsLocationId;
    public static string TfvcChangesetBatchLocationIdString;
    public static Guid TfvcChangesetBatchLocationId;
    public static string VersionControlProjectInfoLocationIdString;
    public static Guid VersionControlProjectInfoLocationId;
    public static string VersionControlProjectInfosLocationIdString;
    public static Guid VersionControlProjectInfosLocationId;
    public static string TfvcItemsLocationIdString;
    public static Guid TfvcItemsLocationId;
    public static string TfvcItemBatchLocationIdString;
    public static Guid TfvcItemBatchLocationId;
    public static string TfvcShelvesetsLocationIdString;
    public static Guid TfvcShelvesetsLocationId;
    public static string TfvcShelvesetLocationIdString;
    public static Guid TfvcShelvesetLocationId;
    public static string TfvcShelvesetChangesLocationIdString;
    public static Guid TfvcShelvesetChangesLocationId;
    public static string TfvcQueryParamShelvesetChangesLocationIdString;
    public static Guid TfvcQueryParamShelvesetChangesLocationId;
    public static string TfvcShelvesetWorkItemsLocationIdString;
    public static Guid TfvcShelvesetWorkItemsLocationId;
    public static string TfvcQueryParamShelvesetWorkItemsLocationIdString;
    public static Guid TfvcQueryParamShelvesetWorkItemsLocationId;
    public static string TfvcLabelsLocationIdString;
    public static Guid TfvcLabelsLocationId;
    public static string TfvcLabelItemsLocationIdString;
    public static Guid TfvcLabelItemsLocationId;
    public static string TfvcBranchesLocationIdString;
    public static Guid TfvcBranchesLocationId;
    public static string TfvcStatisticsLocationIdString;
    public static Guid TfvcStatisticsLocationId;
    private static TfvcConstants();
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcHistoryEntry : HistoryEntry`1<TfvcItem> {
    [CompilerGeneratedAttribute]
private int <FileId>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Encoding>k__BackingField;
    [DataMemberAttribute]
public int FileId { get; public set; }
    [DataMemberAttribute]
public int Encoding { get; public set; }
    [CompilerGeneratedAttribute]
public int get_FileId();
    [CompilerGeneratedAttribute]
public void set_FileId(int value);
    [CompilerGeneratedAttribute]
public int get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(int value);
}
[ClientCircuitBreakerSettingsAttribute("22", "80")]
[ResourceAreaAttribute("8AA40520-446D-40E6-89F6-9C9F9CE44C48")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcHttpClient : TfvcHttpClientBase {
    public TfvcHttpClient(Uri baseUrl, VssCredentials credentials);
    public TfvcHttpClient(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings);
    public TfvcHttpClient(Uri baseUrl, VssCredentials credentials, DelegatingHandler[] handlers);
    public TfvcHttpClient(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings, DelegatingHandler[] handlers);
    public TfvcHttpClient(Uri baseUrl, HttpMessageHandler pipeline, bool disposeHandler);
    protected virtual void AddModelAsQueryParams(IList`1<KeyValuePair`2<string, string>> queryParams, string parameterName, object model);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<IPagedList`1<TfvcItem>> GetItemsPagedAsync(string project, int top, string scopePath, Nullable`1<int> changeset, string continuationToken, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<IPagedList`1<TfvcItem>> GetItemsPagedAsync(Guid project, int top, string scopePath, Nullable`1<int> changeset, string continuationToken, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<IPagedList`1<TfvcItem>> GetItemsPagedAsync(int top, string scopePath, Nullable`1<int> changeset, string continuationToken, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<IPagedList`1<TfvcItemPreviousHash>> GetItemsByChangesetPagedAsync(string project, int top, int baseChangeset, string scopePath, Nullable`1<int> targetChangeset, string continuationToken, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<IPagedList`1<TfvcItemPreviousHash>> GetItemsByChangesetPagedAsync(Guid project, int top, int baseChangeset, string scopePath, Nullable`1<int> targetChangeset, string continuationToken, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<IPagedList`1<TfvcItemPreviousHash>> GetItemsByChangesetPagedAsync(int top, int baseChangeset, string scopePath, Nullable`1<int> targetChangeset, string continuationToken, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<IPagedList`1<TfvcChange>> GetChangesetChangesPagedAsync(int id, int top, string continuationToken, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcHttpClient/<GetPagedList>d__13`1")]
protected Task`1<IPagedList`1<T>> GetPagedList(HttpResponseMessage responseMessage, CancellationToken cancellationToken);
    protected string GetContinuationToken(HttpResponseMessage responseMessage);
    protected Task`1<T> SendAsync(HttpMethod method, Guid locationId, object routeValues, ApiResourceVersion version, HttpContent content, IEnumerable`1<KeyValuePair`2<string, string>> queryParameters, object userState, CancellationToken cancellationToken, Func`3<HttpResponseMessage, CancellationToken, Task`1<T>> processResponse);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcHttpClient/<SendAsync>d__16`1")]
protected Task`1<T> SendAsync(HttpMethod method, IEnumerable`1<KeyValuePair`2<string, string>> additionalHeaders, Guid locationId, object routeValues, ApiResourceVersion version, HttpContent content, IEnumerable`1<KeyValuePair`2<string, string>> queryParameters, object userState, CancellationToken cancellationToken, Func`3<HttpResponseMessage, CancellationToken, Task`1<T>> processResponse);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcHttpClient/<SendAsync>d__17`1")]
protected Task`1<T> SendAsync(HttpRequestMessage message, object userState, CancellationToken cancellationToken, Func`3<HttpResponseMessage, CancellationToken, Task`1<T>> processResponse);
}
[ResourceAreaAttribute("8AA40520-446D-40E6-89F6-9C9F9CE44C48")]
public abstract class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcHttpClientBase : TfvcCompatHttpClientBase {
    public TfvcHttpClientBase(Uri baseUrl, VssCredentials credentials);
    public TfvcHttpClientBase(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings);
    public TfvcHttpClientBase(Uri baseUrl, VssCredentials credentials, DelegatingHandler[] handlers);
    public TfvcHttpClientBase(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings, DelegatingHandler[] handlers);
    public TfvcHttpClientBase(Uri baseUrl, HttpMessageHandler pipeline, bool disposeHandler);
    public virtual Task`1<TfvcBranch> GetBranchAsync(string project, string path, Nullable`1<bool> includeParent, Nullable`1<bool> includeChildren, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TfvcBranch> GetBranchAsync(Guid project, string path, Nullable`1<bool> includeParent, Nullable`1<bool> includeChildren, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TfvcBranch> GetBranchAsync(string path, Nullable`1<bool> includeParent, Nullable`1<bool> includeChildren, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TfvcBranch>> GetBranchesAsync(string project, Nullable`1<bool> includeParent, Nullable`1<bool> includeChildren, Nullable`1<bool> includeDeleted, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TfvcBranch>> GetBranchesAsync(Guid project, Nullable`1<bool> includeParent, Nullable`1<bool> includeChildren, Nullable`1<bool> includeDeleted, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TfvcBranch>> GetBranchesAsync(Nullable`1<bool> includeParent, Nullable`1<bool> includeChildren, Nullable`1<bool> includeDeleted, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TfvcBranchRef>> GetBranchRefsAsync(string project, string scopePath, Nullable`1<bool> includeDeleted, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TfvcBranchRef>> GetBranchRefsAsync(Guid project, string scopePath, Nullable`1<bool> includeDeleted, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TfvcBranchRef>> GetBranchRefsAsync(string scopePath, Nullable`1<bool> includeDeleted, Nullable`1<bool> includeLinks, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TfvcChange>> GetChangesetChangesAsync(Nullable`1<int> id, Nullable`1<int> skip, Nullable`1<int> top, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TfvcChangesetRef> CreateChangesetAsync(TfvcChangeset changeset, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TfvcChangesetRef> CreateChangesetAsync(TfvcChangeset changeset, string project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TfvcChangesetRef> CreateChangesetAsync(TfvcChangeset changeset, Guid project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TfvcChangeset> GetChangesetAsync(string project, int id, Nullable`1<int> maxChangeCount, Nullable`1<bool> includeDetails, Nullable`1<bool> includeWorkItems, Nullable`1<int> maxCommentLength, Nullable`1<bool> includeSourceRename, Nullable`1<int> skip, Nullable`1<int> top, string orderby, TfvcChangesetSearchCriteria searchCriteria, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TfvcChangeset> GetChangesetAsync(Guid project, int id, Nullable`1<int> maxChangeCount, Nullable`1<bool> includeDetails, Nullable`1<bool> includeWorkItems, Nullable`1<int> maxCommentLength, Nullable`1<bool> includeSourceRename, Nullable`1<int> skip, Nullable`1<int> top, string orderby, TfvcChangesetSearchCriteria searchCriteria, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TfvcChangeset> GetChangesetAsync(int id, Nullable`1<int> maxChangeCount, Nullable`1<bool> includeDetails, Nullable`1<bool> includeWorkItems, Nullable`1<int> maxCommentLength, Nullable`1<bool> includeSourceRename, Nullable`1<int> skip, Nullable`1<int> top, string orderby, TfvcChangesetSearchCriteria searchCriteria, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TfvcChangesetRef>> GetChangesetsAsync(string project, Nullable`1<int> maxCommentLength, Nullable`1<int> skip, Nullable`1<int> top, string orderby, TfvcChangesetSearchCriteria searchCriteria, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TfvcChangesetRef>> GetChangesetsAsync(Guid project, Nullable`1<int> maxCommentLength, Nullable`1<int> skip, Nullable`1<int> top, string orderby, TfvcChangesetSearchCriteria searchCriteria, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TfvcChangesetRef>> GetChangesetsAsync(Nullable`1<int> maxCommentLength, Nullable`1<int> skip, Nullable`1<int> top, string orderby, TfvcChangesetSearchCriteria searchCriteria, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TfvcChangesetRef>> GetBatchedChangesetsAsync(TfvcChangesetsRequestData changesetsRequestData, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<AssociatedWorkItem>> GetChangesetWorkItemsAsync(Nullable`1<int> id, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<List`1<TfvcItem>>> GetItemsBatchAsync(TfvcItemRequestData itemRequestData, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<List`1<TfvcItem>>> GetItemsBatchAsync(TfvcItemRequestData itemRequestData, string project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<List`1<TfvcItem>>> GetItemsBatchAsync(TfvcItemRequestData itemRequestData, Guid project, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcHttpClientBase/<GetItemsBatchZipAsync>d__29")]
public virtual Task`1<Stream> GetItemsBatchZipAsync(TfvcItemRequestData itemRequestData, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcHttpClientBase/<GetItemsBatchZipAsync>d__30")]
public virtual Task`1<Stream> GetItemsBatchZipAsync(TfvcItemRequestData itemRequestData, string project, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcHttpClientBase/<GetItemsBatchZipAsync>d__31")]
public virtual Task`1<Stream> GetItemsBatchZipAsync(TfvcItemRequestData itemRequestData, Guid project, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TfvcItem> GetItemAsync(string project, string path, string fileName, Nullable`1<bool> download, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, TfvcVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TfvcItem> GetItemAsync(Guid project, string path, string fileName, Nullable`1<bool> download, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, TfvcVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TfvcItem> GetItemAsync(string path, string fileName, Nullable`1<bool> download, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, TfvcVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcHttpClientBase/<GetItemContentAsync>d__35")]
public virtual Task`1<Stream> GetItemContentAsync(string project, string path, string fileName, Nullable`1<bool> download, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, TfvcVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcHttpClientBase/<GetItemContentAsync>d__36")]
public virtual Task`1<Stream> GetItemContentAsync(Guid project, string path, string fileName, Nullable`1<bool> download, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, TfvcVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcHttpClientBase/<GetItemContentAsync>d__37")]
public virtual Task`1<Stream> GetItemContentAsync(string path, string fileName, Nullable`1<bool> download, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, TfvcVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TfvcItem>> GetItemsAsync(string project, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeLinks, TfvcVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TfvcItem>> GetItemsAsync(Guid project, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeLinks, TfvcVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TfvcItem>> GetItemsAsync(string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeLinks, TfvcVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcHttpClientBase/<GetItemTextAsync>d__41")]
public virtual Task`1<Stream> GetItemTextAsync(string project, string path, string fileName, Nullable`1<bool> download, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, TfvcVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcHttpClientBase/<GetItemTextAsync>d__42")]
public virtual Task`1<Stream> GetItemTextAsync(Guid project, string path, string fileName, Nullable`1<bool> download, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, TfvcVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcHttpClientBase/<GetItemTextAsync>d__43")]
public virtual Task`1<Stream> GetItemTextAsync(string path, string fileName, Nullable`1<bool> download, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, TfvcVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcHttpClientBase/<GetItemZipAsync>d__44")]
public virtual Task`1<Stream> GetItemZipAsync(string project, string path, string fileName, Nullable`1<bool> download, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, TfvcVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcHttpClientBase/<GetItemZipAsync>d__45")]
public virtual Task`1<Stream> GetItemZipAsync(Guid project, string path, string fileName, Nullable`1<bool> download, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, TfvcVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.TfvcHttpClientBase/<GetItemZipAsync>d__46")]
public virtual Task`1<Stream> GetItemZipAsync(string path, string fileName, Nullable`1<bool> download, string scopePath, Nullable`1<VersionControlRecursionType> recursionLevel, TfvcVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TfvcItem>> GetLabelItemsAsync(string labelId, Nullable`1<int> top, Nullable`1<int> skip, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TfvcLabel> GetLabelAsync(string project, string labelId, TfvcLabelRequestData requestData, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TfvcLabel> GetLabelAsync(Guid project, string labelId, TfvcLabelRequestData requestData, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TfvcLabel> GetLabelAsync(string labelId, TfvcLabelRequestData requestData, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TfvcLabelRef>> GetLabelsAsync(string project, TfvcLabelRequestData requestData, Nullable`1<int> top, Nullable`1<int> skip, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TfvcLabelRef>> GetLabelsAsync(Guid project, TfvcLabelRequestData requestData, Nullable`1<int> top, Nullable`1<int> skip, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TfvcLabelRef>> GetLabelsAsync(TfvcLabelRequestData requestData, Nullable`1<int> top, Nullable`1<int> skip, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TfvcChange>> GetShelvesetChangesAsync(string shelvesetId, Nullable`1<int> top, Nullable`1<int> skip, object userState, CancellationToken cancellationToken);
    public virtual Task`1<TfvcShelveset> GetShelvesetAsync(string shelvesetId, TfvcShelvesetRequestData requestData, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<TfvcShelvesetRef>> GetShelvesetsAsync(TfvcShelvesetRequestData requestData, Nullable`1<int> top, Nullable`1<int> skip, object userState, CancellationToken cancellationToken);
    public virtual Task`1<List`1<AssociatedWorkItem>> GetShelvesetWorkItemsAsync(string shelvesetId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<TfvcStatistics> GetTfvcStatisticsAsync(string project, string scopePath, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<TfvcStatistics> GetTfvcStatisticsAsync(Guid project, string scopePath, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public virtual Task`1<TfvcStatistics> GetTfvcStatisticsAsync(string scopePath, object userState, CancellationToken cancellationToken);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcItem : ItemModel {
    [CompilerGeneratedAttribute]
private int <ChangesetVersion>k__BackingField;
    [CompilerGeneratedAttribute]
private int <DeletionId>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsBranch>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsPendingChange>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ChangeDate>k__BackingField;
    [CompilerGeneratedAttribute]
private long <Size>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HashValue>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Encoding>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private int <FileId>k__BackingField;
    [DataMemberAttribute]
public int ChangesetVersion { get; public set; }
    [DataMemberAttribute]
public int DeletionId { get; public set; }
    [DataMemberAttribute]
public bool IsBranch { get; public set; }
    [DataMemberAttribute]
public bool IsPendingChange { get; public set; }
    [DataMemberAttribute]
public DateTime ChangeDate { get; public set; }
    [DataMemberAttribute]
public long Size { get; public set; }
    [DataMemberAttribute]
public string HashValue { get; public set; }
    [DataMemberAttribute]
public int Encoding { get; public set; }
    [IgnoreDataMemberAttribute]
public int Id { get; public set; }
    [IgnoreDataMemberAttribute]
public int FileId { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ChangesetVersion();
    [CompilerGeneratedAttribute]
public void set_ChangesetVersion(int value);
    [CompilerGeneratedAttribute]
public int get_DeletionId();
    [CompilerGeneratedAttribute]
public void set_DeletionId(int value);
    [CompilerGeneratedAttribute]
public bool get_IsBranch();
    [CompilerGeneratedAttribute]
public void set_IsBranch(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsPendingChange();
    [CompilerGeneratedAttribute]
public void set_IsPendingChange(bool value);
    [CompilerGeneratedAttribute]
public DateTime get_ChangeDate();
    [CompilerGeneratedAttribute]
public void set_ChangeDate(DateTime value);
    [CompilerGeneratedAttribute]
public long get_Size();
    [CompilerGeneratedAttribute]
public void set_Size(long value);
    [CompilerGeneratedAttribute]
public string get_HashValue();
    [CompilerGeneratedAttribute]
public void set_HashValue(string value);
    [CompilerGeneratedAttribute]
public int get_Encoding();
    [CompilerGeneratedAttribute]
public void set_Encoding(int value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public int get_FileId();
    [CompilerGeneratedAttribute]
public void set_FileId(int value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcItemDescriptor : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [CompilerGeneratedAttribute]
private TfvcVersionOption <VersionOption>k__BackingField;
    [CompilerGeneratedAttribute]
private TfvcVersionType <VersionType>k__BackingField;
    [CompilerGeneratedAttribute]
private VersionControlRecursionType <RecursionLevel>k__BackingField;
    [DataMemberAttribute]
public string Path { get; public set; }
    [DataMemberAttribute]
public string Version { get; public set; }
    [DataMemberAttribute]
public TfvcVersionOption VersionOption { get; public set; }
    [DataMemberAttribute]
public TfvcVersionType VersionType { get; public set; }
    [DataMemberAttribute]
public VersionControlRecursionType RecursionLevel { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
    [CompilerGeneratedAttribute]
public TfvcVersionOption get_VersionOption();
    [CompilerGeneratedAttribute]
public void set_VersionOption(TfvcVersionOption value);
    [CompilerGeneratedAttribute]
public TfvcVersionType get_VersionType();
    [CompilerGeneratedAttribute]
public void set_VersionType(TfvcVersionType value);
    [CompilerGeneratedAttribute]
public VersionControlRecursionType get_RecursionLevel();
    [CompilerGeneratedAttribute]
public void set_RecursionLevel(VersionControlRecursionType value);
}
[ServiceEventObjectAttribute]
[CollectionDataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcItemDescriptorsCollection : List`1<TfvcItemDescriptor> {
    public TfvcItemDescriptorsCollection(IList`1<TfvcItemDescriptor> source);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcItemPreviousHash : TfvcItem {
    [CompilerGeneratedAttribute]
private string <PreviousHashValue>k__BackingField;
    [DataMemberAttribute]
public string PreviousHashValue { get; public set; }
    [CompilerGeneratedAttribute]
public string get_PreviousHashValue();
    [CompilerGeneratedAttribute]
public void set_PreviousHashValue(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcItemRequestData : object {
    [CompilerGeneratedAttribute]
private TfvcItemDescriptor[] <ItemDescriptors>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeContentMetadata>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeLinks>k__BackingField;
    [DataMemberAttribute]
public TfvcItemDescriptor[] ItemDescriptors { get; public set; }
    [DataMemberAttribute]
public bool IncludeContentMetadata { get; public set; }
    [DataMemberAttribute]
public bool IncludeLinks { get; public set; }
    [CompilerGeneratedAttribute]
public TfvcItemDescriptor[] get_ItemDescriptors();
    [CompilerGeneratedAttribute]
public void set_ItemDescriptors(TfvcItemDescriptor[] value);
    [CompilerGeneratedAttribute]
public bool get_IncludeContentMetadata();
    [CompilerGeneratedAttribute]
public void set_IncludeContentMetadata(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeLinks();
    [CompilerGeneratedAttribute]
public void set_IncludeLinks(bool value);
}
[CollectionDataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcItemsCollection : List`1<TfvcItem> {
    public TfvcItemsCollection(IList`1<TfvcItem> source);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcLabel : TfvcLabelRef {
    [CompilerGeneratedAttribute]
private IEnumerable`1<TfvcItem> <Items>k__BackingField;
    [DataMemberAttribute]
public IEnumerable`1<TfvcItem> Items { get; public set; }
    public TfvcLabel(TfvcLabelRef labelRef);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TfvcItem> get_Items();
    [CompilerGeneratedAttribute]
public void set_Items(IEnumerable`1<TfvcItem> value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcLabelRef : object {
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Description>k__BackingField;
    [CompilerGeneratedAttribute]
private string <LabelScope>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <ModifiedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityRef <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [DataMemberAttribute]
public int Id { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Description { get; public set; }
    [DataMemberAttribute]
public string LabelScope { get; public set; }
    [DataMemberAttribute]
public DateTime ModifiedDate { get; public set; }
    [DataMemberAttribute]
public IdentityRef Owner { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Description();
    [CompilerGeneratedAttribute]
public void set_Description(string value);
    [CompilerGeneratedAttribute]
public string get_LabelScope();
    [CompilerGeneratedAttribute]
public void set_LabelScope(string value);
    [CompilerGeneratedAttribute]
public DateTime get_ModifiedDate();
    [CompilerGeneratedAttribute]
public void set_ModifiedDate(DateTime value);
    [CompilerGeneratedAttribute]
public IdentityRef get_Owner();
    [CompilerGeneratedAttribute]
public void set_Owner(IdentityRef value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcLabelRequestData : object {
    [CompilerGeneratedAttribute]
private string <LabelScope>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ItemLabelFilter>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxItemCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeLinks>k__BackingField;
    [DataMemberAttribute]
public string LabelScope { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Owner { get; public set; }
    [DataMemberAttribute]
public string ItemLabelFilter { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> MaxItemCount { get; public set; }
    [DataMemberAttribute]
public bool IncludeLinks { get; public set; }
    [CompilerGeneratedAttribute]
public string get_LabelScope();
    [CompilerGeneratedAttribute]
public void set_LabelScope(string value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Owner();
    [CompilerGeneratedAttribute]
public void set_Owner(string value);
    [CompilerGeneratedAttribute]
public string get_ItemLabelFilter();
    [CompilerGeneratedAttribute]
public void set_ItemLabelFilter(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxItemCount();
    [CompilerGeneratedAttribute]
public void set_MaxItemCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_IncludeLinks();
    [CompilerGeneratedAttribute]
public void set_IncludeLinks(bool value);
}
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcLinkConstants : RestLinkConstants {
    public static string RelatedBranchesLinks;
    public static string ParentBranchLink;
    public static string ChildBranchesLink;
    public static string ItemsLink;
    public static string ChangesLink;
    public static string OwnerLink;
    public static string AuthorLink;
    public static string CheckedInByLink;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcMappingFilter : object {
    [CompilerGeneratedAttribute]
private string <ServerPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <Exclude>k__BackingField;
    [DataMemberAttribute]
public string ServerPath { get; public set; }
    [DataMemberAttribute]
public bool Exclude { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ServerPath();
    [CompilerGeneratedAttribute]
public void set_ServerPath(string value);
    [CompilerGeneratedAttribute]
public bool get_Exclude();
    [CompilerGeneratedAttribute]
public void set_Exclude(bool value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcMergeSource : object {
    [CompilerGeneratedAttribute]
private string <ServerItem>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VersionFrom>k__BackingField;
    [CompilerGeneratedAttribute]
private int <VersionTo>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsRename>k__BackingField;
    [DataMemberAttribute]
public string ServerItem { get; public set; }
    [DataMemberAttribute]
public int VersionFrom { get; public set; }
    [DataMemberAttribute]
public int VersionTo { get; public set; }
    [DataMemberAttribute]
public bool IsRename { get; public set; }
    public TfvcMergeSource(string serverItem, int versionFrom, int versionTo, bool isRename);
    [CompilerGeneratedAttribute]
public string get_ServerItem();
    [CompilerGeneratedAttribute]
public void set_ServerItem(string value);
    [CompilerGeneratedAttribute]
public int get_VersionFrom();
    [CompilerGeneratedAttribute]
public void set_VersionFrom(int value);
    [CompilerGeneratedAttribute]
public int get_VersionTo();
    [CompilerGeneratedAttribute]
public void set_VersionTo(int value);
    [CompilerGeneratedAttribute]
public bool get_IsRename();
    [CompilerGeneratedAttribute]
public void set_IsRename(bool value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcPolicyFailureInfo : object {
    [CompilerGeneratedAttribute]
private string <Message>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PolicyName>k__BackingField;
    [DataMemberAttribute]
public string Message { get; public set; }
    [DataMemberAttribute]
public string PolicyName { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Message();
    [CompilerGeneratedAttribute]
public void set_Message(string value);
    [CompilerGeneratedAttribute]
public string get_PolicyName();
    [CompilerGeneratedAttribute]
public void set_PolicyName(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcPolicyOverrideInfo : object {
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TfvcPolicyFailureInfo> <PolicyFailures>k__BackingField;
    [DataMemberAttribute]
public string Comment { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<TfvcPolicyFailureInfo> PolicyFailures { get; public set; }
    public TfvcPolicyOverrideInfo(string comment, IEnumerable`1<TfvcPolicyFailureInfo> policyFailures);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TfvcPolicyFailureInfo> get_PolicyFailures();
    [CompilerGeneratedAttribute]
public void set_PolicyFailures(IEnumerable`1<TfvcPolicyFailureInfo> value);
}
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcServiceEventTypes : object {
    public static string TfvcCheckinEvent;
    public static string TfvcItemDestroyedEvent;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcShallowBranchRef : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [DataMemberAttribute]
public string Path { get; public set; }
    public TfvcShallowBranchRef(string path);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcShelveset : TfvcShelvesetRef {
    [CompilerGeneratedAttribute]
private TfvcPolicyOverrideInfo <PolicyOverride>k__BackingField;
    [CompilerGeneratedAttribute]
private CheckinNote[] <Notes>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<AssociatedWorkItem> <WorkItems>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<TfvcChange> <Changes>k__BackingField;
    [DataMemberAttribute]
public TfvcPolicyOverrideInfo PolicyOverride { get; public set; }
    [DataMemberAttribute]
public CheckinNote[] Notes { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<AssociatedWorkItem> WorkItems { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<TfvcChange> Changes { get; public set; }
    public TfvcShelveset(TfvcShelvesetRef shelvesetRef);
    [CompilerGeneratedAttribute]
public TfvcPolicyOverrideInfo get_PolicyOverride();
    [CompilerGeneratedAttribute]
public void set_PolicyOverride(TfvcPolicyOverrideInfo value);
    [CompilerGeneratedAttribute]
public CheckinNote[] get_Notes();
    [CompilerGeneratedAttribute]
public void set_Notes(CheckinNote[] value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<AssociatedWorkItem> get_WorkItems();
    [CompilerGeneratedAttribute]
public void set_WorkItems(IEnumerable`1<AssociatedWorkItem> value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<TfvcChange> get_Changes();
    [CompilerGeneratedAttribute]
public void set_Changes(IEnumerable`1<TfvcChange> value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcShelvesetRef : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IdentityRef <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <CreatedDate>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Comment>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <CommentTruncated>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private ReferenceLinks <Links>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Id { get; public set; }
    [DataMemberAttribute]
public IdentityRef Owner { get; public set; }
    [DataMemberAttribute]
public DateTime CreatedDate { get; public set; }
    [DataMemberAttribute]
public string Comment { get; public set; }
    [DataMemberAttribute]
public bool CommentTruncated { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public ReferenceLinks Links { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(string value);
    [CompilerGeneratedAttribute]
public IdentityRef get_Owner();
    [CompilerGeneratedAttribute]
public void set_Owner(IdentityRef value);
    [CompilerGeneratedAttribute]
public DateTime get_CreatedDate();
    [CompilerGeneratedAttribute]
public void set_CreatedDate(DateTime value);
    [CompilerGeneratedAttribute]
public string get_Comment();
    [CompilerGeneratedAttribute]
public void set_Comment(string value);
    [CompilerGeneratedAttribute]
public bool get_CommentTruncated();
    [CompilerGeneratedAttribute]
public void set_CommentTruncated(bool value);
    [CompilerGeneratedAttribute]
public string get_Url();
    [CompilerGeneratedAttribute]
public void set_Url(string value);
    [CompilerGeneratedAttribute]
public ReferenceLinks get_Links();
    [CompilerGeneratedAttribute]
public void set_Links(ReferenceLinks value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcShelvesetRequestData : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Owner>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxCommentLength>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <MaxChangeCount>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeDetails>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeWorkItems>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IncludeLinks>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public string Owner { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> MaxCommentLength { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> MaxChangeCount { get; public set; }
    [DataMemberAttribute]
public bool IncludeDetails { get; public set; }
    [DataMemberAttribute]
public bool IncludeWorkItems { get; public set; }
    [DataMemberAttribute]
public bool IncludeLinks { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Owner();
    [CompilerGeneratedAttribute]
public void set_Owner(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxCommentLength();
    [CompilerGeneratedAttribute]
public void set_MaxCommentLength(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_MaxChangeCount();
    [CompilerGeneratedAttribute]
public void set_MaxChangeCount(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public bool get_IncludeDetails();
    [CompilerGeneratedAttribute]
public void set_IncludeDetails(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeWorkItems();
    [CompilerGeneratedAttribute]
public void set_IncludeWorkItems(bool value);
    [CompilerGeneratedAttribute]
public bool get_IncludeLinks();
    [CompilerGeneratedAttribute]
public void set_IncludeLinks(bool value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcStatistics : object {
    [CompilerGeneratedAttribute]
private int <ChangesetId>k__BackingField;
    [CompilerGeneratedAttribute]
private long <FileCountTotal>k__BackingField;
    [DataMemberAttribute]
public int ChangesetId { get; public set; }
    [DataMemberAttribute]
public long FileCountTotal { get; public set; }
    [CompilerGeneratedAttribute]
public int get_ChangesetId();
    [CompilerGeneratedAttribute]
public void set_ChangesetId(int value);
    [CompilerGeneratedAttribute]
public long get_FileCountTotal();
    [CompilerGeneratedAttribute]
public void set_FileCountTotal(long value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TfvcVersionDescriptor : object {
    [CompilerGeneratedAttribute]
private TfvcVersionOption <VersionOption>k__BackingField;
    [CompilerGeneratedAttribute]
private TfvcVersionType <VersionType>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Version>k__BackingField;
    [DataMemberAttribute]
public TfvcVersionOption VersionOption { get; public set; }
    [DataMemberAttribute]
public TfvcVersionType VersionType { get; public set; }
    [DataMemberAttribute]
public string Version { get; public set; }
    public TfvcVersionDescriptor(Nullable`1<TfvcVersionOption> versionOption, Nullable`1<TfvcVersionType> versionType, string version);
    [CompilerGeneratedAttribute]
public TfvcVersionOption get_VersionOption();
    [CompilerGeneratedAttribute]
public void set_VersionOption(TfvcVersionOption value);
    [CompilerGeneratedAttribute]
public TfvcVersionType get_VersionType();
    [CompilerGeneratedAttribute]
public void set_VersionType(TfvcVersionType value);
    [CompilerGeneratedAttribute]
public string get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(string value);
}
[DataContractAttribute]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.TfvcVersionOption : Enum {
    public int value__;
    [EnumMemberAttribute]
public static TfvcVersionOption None;
    [EnumMemberAttribute]
public static TfvcVersionOption Previous;
    [EnumMemberAttribute]
public static TfvcVersionOption UseRename;
}
[DataContractAttribute]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.TfvcVersionType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static TfvcVersionType None;
    [EnumMemberAttribute]
public static TfvcVersionType Changeset;
    [EnumMemberAttribute]
public static TfvcVersionType Shelveset;
    [EnumMemberAttribute]
public static TfvcVersionType Change;
    [EnumMemberAttribute]
public static TfvcVersionType Date;
    [EnumMemberAttribute]
public static TfvcVersionType Latest;
    [EnumMemberAttribute]
public static TfvcVersionType Tip;
    [EnumMemberAttribute]
public static TfvcVersionType MergeSource;
}
[ClientCircuitBreakerSettingsAttribute("22", "80")]
[ReactiveClientToThrottlingAttribute("True")]
public class Microsoft.TeamFoundation.SourceControl.WebApi.ThrottledGitHttpClient : GitHttpClient {
    public ThrottledGitHttpClient(Uri baseUrl, VssCredentials credentials);
    public ThrottledGitHttpClient(Uri baseUrl, VssCredentials credentials, DelegatingHandler[] handlers);
    public ThrottledGitHttpClient(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings);
    public ThrottledGitHttpClient(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings, DelegatingHandler[] handlers);
    public ThrottledGitHttpClient(Uri baseUrl, HttpMessageHandler pipeline, bool disposeHandler);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.TitleDescriptionUpdatedEvent : RealTimePullRequestEvent {
    public TitleDescriptionUpdatedEvent(int pullRequestId);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.UpdateRefsRequest : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<GitRefUpdate> <RefUpdateRequests>k__BackingField;
    [CompilerGeneratedAttribute]
private GitRefUpdateMode <UpdateMode>k__BackingField;
    [DataMemberAttribute]
public IEnumerable`1<GitRefUpdate> RefUpdateRequests { get; public set; }
    [DataMemberAttribute]
public GitRefUpdateMode UpdateMode { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<GitRefUpdate> get_RefUpdateRequests();
    [CompilerGeneratedAttribute]
public void set_RefUpdateRequests(IEnumerable`1<GitRefUpdate> value);
    [CompilerGeneratedAttribute]
public GitRefUpdateMode get_UpdateMode();
    [CompilerGeneratedAttribute]
public void set_UpdateMode(GitRefUpdateMode value);
}
[FlagsAttribute]
[DataContractAttribute]
public enum Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlChangeType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static VersionControlChangeType None;
    [EnumMemberAttribute]
public static VersionControlChangeType Add;
    [EnumMemberAttribute]
public static VersionControlChangeType Edit;
    [EnumMemberAttribute]
public static VersionControlChangeType Encoding;
    [EnumMemberAttribute]
public static VersionControlChangeType Rename;
    [EnumMemberAttribute]
public static VersionControlChangeType Delete;
    [EnumMemberAttribute]
public static VersionControlChangeType Undelete;
    [EnumMemberAttribute]
public static VersionControlChangeType Branch;
    [EnumMemberAttribute]
public static VersionControlChangeType Merge;
    [EnumMemberAttribute]
public static VersionControlChangeType Lock;
    [EnumMemberAttribute]
public static VersionControlChangeType Rollback;
    [EnumMemberAttribute]
public static VersionControlChangeType SourceRename;
    [EnumMemberAttribute]
public static VersionControlChangeType TargetRename;
    [EnumMemberAttribute]
public static VersionControlChangeType Property;
    [EnumMemberAttribute]
public static VersionControlChangeType All;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlProjectInfo : VersionControlSecuredObject {
    [CompilerGeneratedAttribute]
private bool <SupportsTFVC>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <SupportsGit>k__BackingField;
    [CompilerGeneratedAttribute]
private SourceControlTypes <DefaultSourceControlType>k__BackingField;
    [CompilerGeneratedAttribute]
private TeamProjectReference <Project>k__BackingField;
    [DataMemberAttribute]
public bool SupportsTFVC { get; public set; }
    [DataMemberAttribute]
public bool SupportsGit { get; public set; }
    [DataMemberAttribute]
public SourceControlTypes DefaultSourceControlType { get; public set; }
    [DataMemberAttribute]
public TeamProjectReference Project { get; public set; }
    [CompilerGeneratedAttribute]
public bool get_SupportsTFVC();
    [CompilerGeneratedAttribute]
public void set_SupportsTFVC(bool value);
    [CompilerGeneratedAttribute]
public bool get_SupportsGit();
    [CompilerGeneratedAttribute]
public void set_SupportsGit(bool value);
    [CompilerGeneratedAttribute]
public SourceControlTypes get_DefaultSourceControlType();
    [CompilerGeneratedAttribute]
public void set_DefaultSourceControlType(SourceControlTypes value);
    [CompilerGeneratedAttribute]
public TeamProjectReference get_Project();
    [CompilerGeneratedAttribute]
public void set_Project(TeamProjectReference value);
}
public enum Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlRecursionType : Enum {
    public int value__;
    public static VersionControlRecursionType None;
    public static VersionControlRecursionType OneLevel;
    public static VersionControlRecursionType OneLevelPlusNestedEmptyFolders;
    public static VersionControlRecursionType Full;
}
[EditorBrowsableAttribute("1")]
[DataContractAttribute]
[KnownTypeAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitRepository")]
[KnownTypeAttribute("Microsoft.TeamFoundation.SourceControl.WebApi.GitPushRef")]
public abstract class Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlSecuredObject : object {
    private ISecuredObject m_securedObject;
    [IgnoreDataMemberAttribute]
private Guid Microsoft.VisualStudio.Services.WebApi.ISecuredObject.NamespaceId { get; }
    [IgnoreDataMemberAttribute]
private int Microsoft.VisualStudio.Services.WebApi.ISecuredObject.RequiredPermissions { get; }
    public VersionControlSecuredObject(ISecuredObject securedObject);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
    private sealed virtual override Guid Microsoft.VisualStudio.Services.WebApi.ISecuredObject.get_NamespaceId();
    private sealed virtual override int Microsoft.VisualStudio.Services.WebApi.ISecuredObject.get_RequiredPermissions();
    private sealed virtual override string Microsoft.VisualStudio.Services.WebApi.ISecuredObject.GetToken();
    private void CheckForNullSecuredObject();
}
[ExtensionAttribute]
public static class Microsoft.TeamFoundation.SourceControl.WebApi.VersionControlSecuredObjectExtensions : object {
    [ExtensionAttribute]
public static void SetSecuredObject(IEnumerable`1<T> securableObjects, ISecuredObject securedObject);
    [ExtensionAttribute]
public static IDictionary`2<TKey, TElement> ToSecuredDictionary(IEnumerable`1<TSource> source, ISecuredObject securedObject, Func`2<TSource, TKey> keySelector, Func`2<TSource, TElement> elementSelector);
}
[EditorBrowsableAttribute("1")]
[ClientIncludeModelAttribute]
public class Microsoft.TeamFoundation.SourceControl.WebApi.VstsInfo : object {
    [CompilerGeneratedAttribute]
private string <ServerUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private TeamProjectCollectionReference <Collection>k__BackingField;
    [CompilerGeneratedAttribute]
private GitRepository <Repository>k__BackingField;
    public string ServerUrl { get; public set; }
    public TeamProjectCollectionReference Collection { get; public set; }
    public GitRepository Repository { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ServerUrl();
    [CompilerGeneratedAttribute]
public void set_ServerUrl(string value);
    [CompilerGeneratedAttribute]
public TeamProjectCollectionReference get_Collection();
    [CompilerGeneratedAttribute]
public void set_Collection(TeamProjectCollectionReference value);
    [CompilerGeneratedAttribute]
public GitRepository get_Repository();
    [CompilerGeneratedAttribute]
public void set_Repository(GitRepository value);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
