[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Wiki.WebApi.Contracts.WikiPagesBatchRequest : object {
    [CompilerGeneratedAttribute]
private Nullable`1<int> <PageViewsForDays>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ContinuationToken>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Top>k__BackingField;
    [DataMemberAttribute]
public Nullable`1<int> PageViewsForDays { get; public set; }
    [DataMemberAttribute]
public string ContinuationToken { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> Top { get; public set; }
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_PageViewsForDays();
    [CompilerGeneratedAttribute]
public void set_PageViewsForDays(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public string get_ContinuationToken();
    [CompilerGeneratedAttribute]
public void set_ContinuationToken(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Top();
    [CompilerGeneratedAttribute]
public void set_Top(Nullable`1<int> value);
}
public interface Microsoft.TeamFoundation.Wiki.WebApi.IBaseResource {
    public string Url { get; public set; }
    public string RemoteUrl { get; public set; }
    public abstract virtual string get_Url();
    public abstract virtual void set_Url(string value);
    public abstract virtual string get_RemoteUrl();
    public abstract virtual void set_RemoteUrl(string value);
}
[EditorBrowsableAttribute("1")]
[DataContractAttribute]
public abstract class Microsoft.TeamFoundation.Wiki.WebApi.Shared.WikiSecuredObject : object {
    private ISecuredObject m_securedObject;
    [IgnoreDataMemberAttribute]
private Guid Microsoft.VisualStudio.Services.WebApi.ISecuredObject.NamespaceId { get; }
    [IgnoreDataMemberAttribute]
private int Microsoft.VisualStudio.Services.WebApi.ISecuredObject.RequiredPermissions { get; }
    public virtual void SetSecuredObject(ISecuredObject securedObject);
    private sealed virtual override Guid Microsoft.VisualStudio.Services.WebApi.ISecuredObject.get_NamespaceId();
    private sealed virtual override int Microsoft.VisualStudio.Services.WebApi.ISecuredObject.get_RequiredPermissions();
    private sealed virtual override string Microsoft.VisualStudio.Services.WebApi.ISecuredObject.GetToken();
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Wiki.WebApi.Wiki : WikiCreateParameters {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private string <HeadCommit>k__BackingField;
    [CompilerGeneratedAttribute]
private GitRepository <Repository>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public string HeadCommit { get; public set; }
    [DataMemberAttribute]
public GitRepository Repository { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public string get_HeadCommit();
    [CompilerGeneratedAttribute]
public void set_HeadCommit(string value);
    [CompilerGeneratedAttribute]
public GitRepository get_Repository();
    [CompilerGeneratedAttribute]
public void set_Repository(GitRepository value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Wiki.WebApi.WikiAttachment : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [DataMemberAttribute]
public string Name { get; private set; }
    [DataMemberAttribute]
public string Path { get; private set; }
    public WikiAttachment(string name, string path);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Wiki.WebApi.WikiAttachmentResponse : object {
    [CompilerGeneratedAttribute]
private WikiAttachment <Attachment>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ETag>k__BackingField;
    [ClientResponseContentAttribute]
public WikiAttachment Attachment { get; public set; }
    [ClientResponseHeaderAttribute("ETag")]
public IEnumerable`1<string> ETag { get; public set; }
    [CompilerGeneratedAttribute]
public WikiAttachment get_Attachment();
    [CompilerGeneratedAttribute]
public void set_Attachment(WikiAttachment value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ETag();
    [CompilerGeneratedAttribute]
public void set_ETag(IEnumerable`1<string> value);
}
[EditorBrowsableAttribute("1")]
public abstract class Microsoft.TeamFoundation.Wiki.WebApi.WikiCompatHttpClientBase : VssHttpClientBase {
    public WikiCompatHttpClientBase(Uri baseUrl, VssCredentials credentials);
    public WikiCompatHttpClientBase(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings);
    public WikiCompatHttpClientBase(Uri baseUrl, VssCredentials credentials, DelegatingHandler[] handlers);
    public WikiCompatHttpClientBase(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings, DelegatingHandler[] handlers);
    public WikiCompatHttpClientBase(Uri baseUrl, HttpMessageHandler pipeline, bool disposeHandler);
    public Task`1<Wiki> CreateWikiAsync(WikiCreateParameters wikiCreateParams, object userState, CancellationToken cancellationToken);
    public Task`1<Wiki> CreateWikiAsync(WikiCreateParameters wikiCreateParams, string project, object userState, CancellationToken cancellationToken);
    public Task`1<Wiki> CreateWikiAsync(WikiCreateParameters wikiCreateParams, Guid project, object userState, CancellationToken cancellationToken);
    public Task`1<List`1<Wiki>> GetWikisAsync(object userState, CancellationToken cancellationToken);
    public Task`1<List`1<Wiki>> GetWikisAsync(string project, object userState, CancellationToken cancellationToken);
    public Task`1<List`1<Wiki>> GetWikisAsync(Guid project, object userState, CancellationToken cancellationToken);
}
[GenerateAllConstantsAttribute("")]
public static class Microsoft.TeamFoundation.Wiki.WebApi.WikiConstants : object {
    public static string AreaId;
    public static string AreaName;
    public static string WikiPathSeparator;
    public static string WikisResourceName;
    public static string PagesResourceName;
    public static string PageMovesResourceName;
    public static string PageViewStatsResourceName;
    public static string AttachmentsResourceName;
    public static string PageCommentsResourceName;
    public static string PageCommentAttachmentsResourceName;
    public static string PageCommentReactionsResourceName;
    public static string PageCommentReactionsEngagedUsersResourceName;
    public static string PagesBatchResourceName;
    public static string PageStatsResourceName;
    public static string WikiDefaultBranch;
    public static string Expand;
    public static string Top;
    public static string Skip;
    public static string Order;
    public static string WikisLocationIdString;
    public static Guid WikisLocationId;
    public static string WikiPagesLocationIdString;
    public static Guid WikiPagesLocationId;
    public static string WikiPagesByIdLocationIdString;
    public static Guid WikiPagesByIdLocationId;
    public static string WikiPageMovesLocationIdString;
    public static Guid WikiPageMovesLocationId;
    public static string WikiAttachmentsLocationIdString;
    public static Guid WikiAttachmentsLocationId;
    public static string WikiPageViewStatsLocationIdString;
    public static Guid WikiPageViewStatsLocationId;
    public static string WikiPageCommentsLocationIdString;
    public static Guid WikiPageCommentsLocationId;
    public static string WikiPageCommentAttachmentsLocationIdString;
    public static Guid WikiPageCommentAttachmentsLocationId;
    public static string WikiPageCommentReactionsLocationIdString;
    public static Guid WikiPageCommentReactionsLocationId;
    public static string WikiPageCommentReactionsEngagedUsersLocationIdString;
    public static Guid WikiPageCommentReactionsEngagedUsersLocationId;
    public static string WikiPagesBatchLocationIdString;
    public static Guid WikiPagesBatchLocationId;
    public static string WikiPageStatsLocationIdString;
    public static Guid WikiPageStatsLocationId;
    [EditorBrowsableAttribute("1")]
public static Guid WikiPageArtifactKind;
    private static WikiConstants();
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Wiki.WebApi.WikiCreateBaseParameters : WikiSecuredObject {
    [CompilerGeneratedAttribute]
private WikiType <Type>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RepositoryId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <MappedPath>k__BackingField;
    [DataMemberAttribute]
public WikiType Type { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public Guid ProjectId { get; public set; }
    [DataMemberAttribute]
public Guid RepositoryId { get; public set; }
    [DataMemberAttribute]
public string MappedPath { get; public set; }
    [CompilerGeneratedAttribute]
public WikiType get_Type();
    [CompilerGeneratedAttribute]
public void set_Type(WikiType value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Guid get_ProjectId();
    [CompilerGeneratedAttribute]
public void set_ProjectId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_RepositoryId();
    [CompilerGeneratedAttribute]
public void set_RepositoryId(Guid value);
    [CompilerGeneratedAttribute]
public string get_MappedPath();
    [CompilerGeneratedAttribute]
public void set_MappedPath(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Wiki.WebApi.WikiCreateParameters : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProjectId>k__BackingField;
    [DataMemberAttribute]
public string Name { get; public set; }
    [DataMemberAttribute]
public Guid ProjectId { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
    [CompilerGeneratedAttribute]
public Guid get_ProjectId();
    [CompilerGeneratedAttribute]
public void set_ProjectId(Guid value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Wiki.WebApi.WikiCreateParametersV2 : WikiCreateBaseParameters {
    [CompilerGeneratedAttribute]
private GitVersionDescriptor <Version>k__BackingField;
    [DataMemberAttribute]
public GitVersionDescriptor Version { get; public set; }
    [CompilerGeneratedAttribute]
public GitVersionDescriptor get_Version();
    [CompilerGeneratedAttribute]
public void set_Version(GitVersionDescriptor value);
}
[ResourceAreaAttribute("BF7D82A0-8AA5-4613-94EF-6172A5EA01F3")]
public class Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient : WikiCompatHttpClientBase {
    public WikiHttpClient(Uri baseUrl, VssCredentials credentials);
    public WikiHttpClient(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings);
    public WikiHttpClient(Uri baseUrl, VssCredentials credentials, DelegatingHandler[] handlers);
    public WikiHttpClient(Uri baseUrl, VssCredentials credentials, VssHttpRequestSettings settings, DelegatingHandler[] handlers);
    public WikiHttpClient(Uri baseUrl, HttpMessageHandler pipeline, bool disposeHandler);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<CreateAttachmentAsync>d__5")]
public Task`1<WikiAttachmentResponse> CreateAttachmentAsync(Stream uploadStream, string project, string wikiIdentifier, string name, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<CreateAttachmentAsync>d__6")]
public Task`1<WikiAttachmentResponse> CreateAttachmentAsync(Stream uploadStream, string project, Guid wikiIdentifier, string name, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<CreateAttachmentAsync>d__7")]
public Task`1<WikiAttachmentResponse> CreateAttachmentAsync(Stream uploadStream, Guid project, string wikiIdentifier, string name, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<CreateAttachmentAsync>d__8")]
public Task`1<WikiAttachmentResponse> CreateAttachmentAsync(Stream uploadStream, Guid project, Guid wikiIdentifier, string name, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<CommentAttachment> CreateCommentAttachmentAsync(Stream uploadStream, string project, string wikiIdentifier, int pageId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<CommentAttachment> CreateCommentAttachmentAsync(Stream uploadStream, string project, Guid wikiIdentifier, int pageId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<CommentAttachment> CreateCommentAttachmentAsync(Stream uploadStream, Guid project, string wikiIdentifier, int pageId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<CommentAttachment> CreateCommentAttachmentAsync(Stream uploadStream, Guid project, Guid wikiIdentifier, int pageId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetAttachmentContentAsync>d__13")]
[EditorBrowsableAttribute("1")]
public Task`1<Stream> GetAttachmentContentAsync(string project, string wikiIdentifier, int pageId, Guid attachmentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetAttachmentContentAsync>d__14")]
[EditorBrowsableAttribute("1")]
public Task`1<Stream> GetAttachmentContentAsync(string project, Guid wikiIdentifier, int pageId, Guid attachmentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetAttachmentContentAsync>d__15")]
[EditorBrowsableAttribute("1")]
public Task`1<Stream> GetAttachmentContentAsync(Guid project, string wikiIdentifier, int pageId, Guid attachmentId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetAttachmentContentAsync>d__16")]
[EditorBrowsableAttribute("1")]
public Task`1<Stream> GetAttachmentContentAsync(Guid project, Guid wikiIdentifier, int pageId, Guid attachmentId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<CommentReaction> AddCommentReactionAsync(string project, string wikiIdentifier, int pageId, int commentId, CommentReactionType type, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<CommentReaction> AddCommentReactionAsync(string project, Guid wikiIdentifier, int pageId, int commentId, CommentReactionType type, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<CommentReaction> AddCommentReactionAsync(Guid project, string wikiIdentifier, int pageId, int commentId, CommentReactionType type, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<CommentReaction> AddCommentReactionAsync(Guid project, Guid wikiIdentifier, int pageId, int commentId, CommentReactionType type, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<CommentReaction> DeleteCommentReactionAsync(string project, string wikiIdentifier, int pageId, int commentId, CommentReactionType type, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<CommentReaction> DeleteCommentReactionAsync(string project, Guid wikiIdentifier, int pageId, int commentId, CommentReactionType type, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<CommentReaction> DeleteCommentReactionAsync(Guid project, string wikiIdentifier, int pageId, int commentId, CommentReactionType type, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<CommentReaction> DeleteCommentReactionAsync(Guid project, Guid wikiIdentifier, int pageId, int commentId, CommentReactionType type, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<List`1<IdentityRef>> GetEngagedUsersAsync(string project, string wikiIdentifier, int pageId, int commentId, CommentReactionType type, Nullable`1<int> top, Nullable`1<int> skip, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<List`1<IdentityRef>> GetEngagedUsersAsync(string project, Guid wikiIdentifier, int pageId, int commentId, CommentReactionType type, Nullable`1<int> top, Nullable`1<int> skip, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<List`1<IdentityRef>> GetEngagedUsersAsync(Guid project, string wikiIdentifier, int pageId, int commentId, CommentReactionType type, Nullable`1<int> top, Nullable`1<int> skip, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<List`1<IdentityRef>> GetEngagedUsersAsync(Guid project, Guid wikiIdentifier, int pageId, int commentId, CommentReactionType type, Nullable`1<int> top, Nullable`1<int> skip, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<Comment> AddCommentAsync(CommentCreateParameters request, string project, string wikiIdentifier, int pageId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<Comment> AddCommentAsync(CommentCreateParameters request, string project, Guid wikiIdentifier, int pageId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<Comment> AddCommentAsync(CommentCreateParameters request, Guid project, string wikiIdentifier, int pageId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<Comment> AddCommentAsync(CommentCreateParameters request, Guid project, Guid wikiIdentifier, int pageId, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<DeleteCommentAsync>d__33")]
[EditorBrowsableAttribute("1")]
public Task DeleteCommentAsync(string project, string wikiIdentifier, int pageId, int id, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<DeleteCommentAsync>d__34")]
[EditorBrowsableAttribute("1")]
public Task DeleteCommentAsync(string project, Guid wikiIdentifier, int pageId, int id, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<DeleteCommentAsync>d__35")]
[EditorBrowsableAttribute("1")]
public Task DeleteCommentAsync(Guid project, string wikiIdentifier, int pageId, int id, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<DeleteCommentAsync>d__36")]
[EditorBrowsableAttribute("1")]
public Task DeleteCommentAsync(Guid project, Guid wikiIdentifier, int pageId, int id, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<Comment> GetCommentAsync(string project, string wikiIdentifier, int pageId, int id, Nullable`1<bool> excludeDeleted, Nullable`1<CommentExpandOptions> expand, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<Comment> GetCommentAsync(string project, Guid wikiIdentifier, int pageId, int id, Nullable`1<bool> excludeDeleted, Nullable`1<CommentExpandOptions> expand, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<Comment> GetCommentAsync(Guid project, string wikiIdentifier, int pageId, int id, Nullable`1<bool> excludeDeleted, Nullable`1<CommentExpandOptions> expand, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<Comment> GetCommentAsync(Guid project, Guid wikiIdentifier, int pageId, int id, Nullable`1<bool> excludeDeleted, Nullable`1<CommentExpandOptions> expand, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<CommentList> ListCommentsAsync(string project, string wikiIdentifier, int pageId, Nullable`1<int> top, string continuationToken, Nullable`1<bool> excludeDeleted, Nullable`1<CommentExpandOptions> expand, Nullable`1<CommentSortOrder> order, Nullable`1<int> parentId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<CommentList> ListCommentsAsync(string project, Guid wikiIdentifier, int pageId, Nullable`1<int> top, string continuationToken, Nullable`1<bool> excludeDeleted, Nullable`1<CommentExpandOptions> expand, Nullable`1<CommentSortOrder> order, Nullable`1<int> parentId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<CommentList> ListCommentsAsync(Guid project, string wikiIdentifier, int pageId, Nullable`1<int> top, string continuationToken, Nullable`1<bool> excludeDeleted, Nullable`1<CommentExpandOptions> expand, Nullable`1<CommentSortOrder> order, Nullable`1<int> parentId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<CommentList> ListCommentsAsync(Guid project, Guid wikiIdentifier, int pageId, Nullable`1<int> top, string continuationToken, Nullable`1<bool> excludeDeleted, Nullable`1<CommentExpandOptions> expand, Nullable`1<CommentSortOrder> order, Nullable`1<int> parentId, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<Comment> UpdateCommentAsync(CommentUpdateParameters comment, string project, string wikiIdentifier, int pageId, int id, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<Comment> UpdateCommentAsync(CommentUpdateParameters comment, string project, Guid wikiIdentifier, int pageId, int id, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<Comment> UpdateCommentAsync(CommentUpdateParameters comment, Guid project, string wikiIdentifier, int pageId, int id, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<Comment> UpdateCommentAsync(CommentUpdateParameters comment, Guid project, Guid wikiIdentifier, int pageId, int id, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<CreatePageMoveAsync>d__49")]
public Task`1<WikiPageMoveResponse> CreatePageMoveAsync(WikiPageMoveParameters pageMoveParameters, string project, string wikiIdentifier, string comment, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<CreatePageMoveAsync>d__50")]
public Task`1<WikiPageMoveResponse> CreatePageMoveAsync(WikiPageMoveParameters pageMoveParameters, string project, Guid wikiIdentifier, string comment, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<CreatePageMoveAsync>d__51")]
public Task`1<WikiPageMoveResponse> CreatePageMoveAsync(WikiPageMoveParameters pageMoveParameters, Guid project, string wikiIdentifier, string comment, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<CreatePageMoveAsync>d__52")]
public Task`1<WikiPageMoveResponse> CreatePageMoveAsync(WikiPageMoveParameters pageMoveParameters, Guid project, Guid wikiIdentifier, string comment, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<CreateOrUpdatePageAsync>d__53")]
public Task`1<WikiPageResponse> CreateOrUpdatePageAsync(WikiPageCreateOrUpdateParameters parameters, string project, string wikiIdentifier, string path, string Version, string comment, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<CreateOrUpdatePageAsync>d__54")]
public Task`1<WikiPageResponse> CreateOrUpdatePageAsync(WikiPageCreateOrUpdateParameters parameters, string project, Guid wikiIdentifier, string path, string Version, string comment, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<CreateOrUpdatePageAsync>d__55")]
public Task`1<WikiPageResponse> CreateOrUpdatePageAsync(WikiPageCreateOrUpdateParameters parameters, Guid project, string wikiIdentifier, string path, string Version, string comment, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<CreateOrUpdatePageAsync>d__56")]
public Task`1<WikiPageResponse> CreateOrUpdatePageAsync(WikiPageCreateOrUpdateParameters parameters, Guid project, Guid wikiIdentifier, string path, string Version, string comment, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<DeletePageAsync>d__57")]
public Task`1<WikiPageResponse> DeletePageAsync(string project, string wikiIdentifier, string path, string comment, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<DeletePageAsync>d__58")]
public Task`1<WikiPageResponse> DeletePageAsync(string project, Guid wikiIdentifier, string path, string comment, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<DeletePageAsync>d__59")]
public Task`1<WikiPageResponse> DeletePageAsync(Guid project, string wikiIdentifier, string path, string comment, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<DeletePageAsync>d__60")]
public Task`1<WikiPageResponse> DeletePageAsync(Guid project, Guid wikiIdentifier, string path, string comment, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetPageAsync>d__61")]
public Task`1<WikiPageResponse> GetPageAsync(string project, string wikiIdentifier, string path, Nullable`1<VersionControlRecursionType> recursionLevel, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetPageAsync>d__62")]
public Task`1<WikiPageResponse> GetPageAsync(string project, Guid wikiIdentifier, string path, Nullable`1<VersionControlRecursionType> recursionLevel, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetPageAsync>d__63")]
public Task`1<WikiPageResponse> GetPageAsync(Guid project, string wikiIdentifier, string path, Nullable`1<VersionControlRecursionType> recursionLevel, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetPageAsync>d__64")]
public Task`1<WikiPageResponse> GetPageAsync(Guid project, Guid wikiIdentifier, string path, Nullable`1<VersionControlRecursionType> recursionLevel, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetPageTextAsync>d__65")]
public Task`1<Stream> GetPageTextAsync(string project, string wikiIdentifier, string path, Nullable`1<VersionControlRecursionType> recursionLevel, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetPageTextAsync>d__66")]
public Task`1<Stream> GetPageTextAsync(string project, Guid wikiIdentifier, string path, Nullable`1<VersionControlRecursionType> recursionLevel, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetPageTextAsync>d__67")]
public Task`1<Stream> GetPageTextAsync(Guid project, string wikiIdentifier, string path, Nullable`1<VersionControlRecursionType> recursionLevel, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetPageTextAsync>d__68")]
public Task`1<Stream> GetPageTextAsync(Guid project, Guid wikiIdentifier, string path, Nullable`1<VersionControlRecursionType> recursionLevel, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetPageZipAsync>d__69")]
public Task`1<Stream> GetPageZipAsync(string project, string wikiIdentifier, string path, Nullable`1<VersionControlRecursionType> recursionLevel, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetPageZipAsync>d__70")]
public Task`1<Stream> GetPageZipAsync(string project, Guid wikiIdentifier, string path, Nullable`1<VersionControlRecursionType> recursionLevel, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetPageZipAsync>d__71")]
public Task`1<Stream> GetPageZipAsync(Guid project, string wikiIdentifier, string path, Nullable`1<VersionControlRecursionType> recursionLevel, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetPageZipAsync>d__72")]
public Task`1<Stream> GetPageZipAsync(Guid project, Guid wikiIdentifier, string path, Nullable`1<VersionControlRecursionType> recursionLevel, GitVersionDescriptor versionDescriptor, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<DeletePageByIdAsync>d__73")]
public Task`1<WikiPageResponse> DeletePageByIdAsync(string project, string wikiIdentifier, int id, string comment, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<DeletePageByIdAsync>d__74")]
public Task`1<WikiPageResponse> DeletePageByIdAsync(string project, Guid wikiIdentifier, int id, string comment, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<DeletePageByIdAsync>d__75")]
public Task`1<WikiPageResponse> DeletePageByIdAsync(Guid project, string wikiIdentifier, int id, string comment, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<DeletePageByIdAsync>d__76")]
public Task`1<WikiPageResponse> DeletePageByIdAsync(Guid project, Guid wikiIdentifier, int id, string comment, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetPageByIdAsync>d__77")]
public Task`1<WikiPageResponse> GetPageByIdAsync(string project, string wikiIdentifier, int id, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetPageByIdAsync>d__78")]
public Task`1<WikiPageResponse> GetPageByIdAsync(string project, Guid wikiIdentifier, int id, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetPageByIdAsync>d__79")]
public Task`1<WikiPageResponse> GetPageByIdAsync(Guid project, string wikiIdentifier, int id, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetPageByIdAsync>d__80")]
public Task`1<WikiPageResponse> GetPageByIdAsync(Guid project, Guid wikiIdentifier, int id, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetPageByIdTextAsync>d__81")]
public Task`1<Stream> GetPageByIdTextAsync(string project, string wikiIdentifier, int id, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetPageByIdTextAsync>d__82")]
public Task`1<Stream> GetPageByIdTextAsync(string project, Guid wikiIdentifier, int id, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetPageByIdTextAsync>d__83")]
public Task`1<Stream> GetPageByIdTextAsync(Guid project, string wikiIdentifier, int id, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetPageByIdTextAsync>d__84")]
public Task`1<Stream> GetPageByIdTextAsync(Guid project, Guid wikiIdentifier, int id, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetPageByIdZipAsync>d__85")]
public Task`1<Stream> GetPageByIdZipAsync(string project, string wikiIdentifier, int id, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetPageByIdZipAsync>d__86")]
public Task`1<Stream> GetPageByIdZipAsync(string project, Guid wikiIdentifier, int id, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetPageByIdZipAsync>d__87")]
public Task`1<Stream> GetPageByIdZipAsync(Guid project, string wikiIdentifier, int id, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<GetPageByIdZipAsync>d__88")]
public Task`1<Stream> GetPageByIdZipAsync(Guid project, Guid wikiIdentifier, int id, Nullable`1<VersionControlRecursionType> recursionLevel, Nullable`1<bool> includeContent, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<UpdatePageByIdAsync>d__89")]
public Task`1<WikiPageResponse> UpdatePageByIdAsync(WikiPageCreateOrUpdateParameters parameters, string project, string wikiIdentifier, int id, string Version, string comment, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<UpdatePageByIdAsync>d__90")]
public Task`1<WikiPageResponse> UpdatePageByIdAsync(WikiPageCreateOrUpdateParameters parameters, string project, Guid wikiIdentifier, int id, string Version, string comment, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<UpdatePageByIdAsync>d__91")]
public Task`1<WikiPageResponse> UpdatePageByIdAsync(WikiPageCreateOrUpdateParameters parameters, Guid project, string wikiIdentifier, int id, string Version, string comment, object userState, CancellationToken cancellationToken);
    [AsyncStateMachineAttribute("Microsoft.TeamFoundation.Wiki.WebApi.WikiHttpClient/<UpdatePageByIdAsync>d__92")]
public Task`1<WikiPageResponse> UpdatePageByIdAsync(WikiPageCreateOrUpdateParameters parameters, Guid project, Guid wikiIdentifier, int id, string Version, string comment, object userState, CancellationToken cancellationToken);
    public Task`1<PagedList`1<WikiPageDetail>> GetPagesBatchAsync(WikiPagesBatchRequest pagesBatchRequest, string project, string wikiIdentifier, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    public Task`1<PagedList`1<WikiPageDetail>> GetPagesBatchAsync(WikiPagesBatchRequest pagesBatchRequest, string project, Guid wikiIdentifier, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    public Task`1<PagedList`1<WikiPageDetail>> GetPagesBatchAsync(WikiPagesBatchRequest pagesBatchRequest, Guid project, string wikiIdentifier, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    public Task`1<PagedList`1<WikiPageDetail>> GetPagesBatchAsync(WikiPagesBatchRequest pagesBatchRequest, Guid project, Guid wikiIdentifier, GitVersionDescriptor versionDescriptor, object userState, CancellationToken cancellationToken);
    public Task`1<WikiPageDetail> GetPageDataAsync(string project, string wikiIdentifier, int pageId, Nullable`1<int> pageViewsForDays, object userState, CancellationToken cancellationToken);
    public Task`1<WikiPageDetail> GetPageDataAsync(string project, Guid wikiIdentifier, int pageId, Nullable`1<int> pageViewsForDays, object userState, CancellationToken cancellationToken);
    public Task`1<WikiPageDetail> GetPageDataAsync(Guid project, string wikiIdentifier, int pageId, Nullable`1<int> pageViewsForDays, object userState, CancellationToken cancellationToken);
    public Task`1<WikiPageDetail> GetPageDataAsync(Guid project, Guid wikiIdentifier, int pageId, Nullable`1<int> pageViewsForDays, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<WikiPageViewStats> CreateOrUpdatePageViewStatsAsync(string project, string wikiIdentifier, GitVersionDescriptor wikiVersion, string path, string oldPath, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<WikiPageViewStats> CreateOrUpdatePageViewStatsAsync(string project, Guid wikiIdentifier, GitVersionDescriptor wikiVersion, string path, string oldPath, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<WikiPageViewStats> CreateOrUpdatePageViewStatsAsync(Guid project, string wikiIdentifier, GitVersionDescriptor wikiVersion, string path, string oldPath, object userState, CancellationToken cancellationToken);
    [EditorBrowsableAttribute("1")]
public Task`1<WikiPageViewStats> CreateOrUpdatePageViewStatsAsync(Guid project, Guid wikiIdentifier, GitVersionDescriptor wikiVersion, string path, string oldPath, object userState, CancellationToken cancellationToken);
    public Task`1<WikiV2> CreateWikiAsync(WikiCreateParametersV2 wikiCreateParams, object userState, CancellationToken cancellationToken);
    public Task`1<WikiV2> CreateWikiAsync(WikiCreateParametersV2 wikiCreateParams, string project, object userState, CancellationToken cancellationToken);
    public Task`1<WikiV2> CreateWikiAsync(WikiCreateParametersV2 wikiCreateParams, Guid project, object userState, CancellationToken cancellationToken);
    public Task`1<WikiV2> DeleteWikiAsync(string wikiIdentifier, object userState, CancellationToken cancellationToken);
    public Task`1<WikiV2> DeleteWikiAsync(Guid wikiIdentifier, object userState, CancellationToken cancellationToken);
    public Task`1<WikiV2> DeleteWikiAsync(string project, string wikiIdentifier, object userState, CancellationToken cancellationToken);
    public Task`1<WikiV2> DeleteWikiAsync(string project, Guid wikiIdentifier, object userState, CancellationToken cancellationToken);
    public Task`1<WikiV2> DeleteWikiAsync(Guid project, string wikiIdentifier, object userState, CancellationToken cancellationToken);
    public Task`1<WikiV2> DeleteWikiAsync(Guid project, Guid wikiIdentifier, object userState, CancellationToken cancellationToken);
    public Task`1<List`1<WikiV2>> GetAllWikisAsync(object userState, CancellationToken cancellationToken);
    public Task`1<List`1<WikiV2>> GetAllWikisAsync(string project, object userState, CancellationToken cancellationToken);
    public Task`1<List`1<WikiV2>> GetAllWikisAsync(Guid project, object userState, CancellationToken cancellationToken);
    public Task`1<WikiV2> GetWikiAsync(string wikiIdentifier, object userState, CancellationToken cancellationToken);
    public Task`1<WikiV2> GetWikiAsync(Guid wikiIdentifier, object userState, CancellationToken cancellationToken);
    public Task`1<WikiV2> GetWikiAsync(string project, string wikiIdentifier, object userState, CancellationToken cancellationToken);
    public Task`1<WikiV2> GetWikiAsync(string project, Guid wikiIdentifier, object userState, CancellationToken cancellationToken);
    public Task`1<WikiV2> GetWikiAsync(Guid project, string wikiIdentifier, object userState, CancellationToken cancellationToken);
    public Task`1<WikiV2> GetWikiAsync(Guid project, Guid wikiIdentifier, object userState, CancellationToken cancellationToken);
    public Task`1<WikiV2> UpdateWikiAsync(WikiUpdateParameters updateParameters, string wikiIdentifier, object userState, CancellationToken cancellationToken);
    public Task`1<WikiV2> UpdateWikiAsync(WikiUpdateParameters updateParameters, Guid wikiIdentifier, object userState, CancellationToken cancellationToken);
    public Task`1<WikiV2> UpdateWikiAsync(WikiUpdateParameters updateParameters, string project, string wikiIdentifier, object userState, CancellationToken cancellationToken);
    public Task`1<WikiV2> UpdateWikiAsync(WikiUpdateParameters updateParameters, string project, Guid wikiIdentifier, object userState, CancellationToken cancellationToken);
    public Task`1<WikiV2> UpdateWikiAsync(WikiUpdateParameters updateParameters, Guid project, string wikiIdentifier, object userState, CancellationToken cancellationToken);
    public Task`1<WikiV2> UpdateWikiAsync(WikiUpdateParameters updateParameters, Guid project, Guid wikiIdentifier, object userState, CancellationToken cancellationToken);
}
public static class Microsoft.TeamFoundation.Wiki.WebApi.WikiNotificationConstants : object {
    public static string WikiUpdatedEvent;
    public static string WikiMessageBus;
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Wiki.WebApi.WikiPage : WikiPageCreateOrUpdateParameters {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Order>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsParentPage>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsNonConformant>k__BackingField;
    [CompilerGeneratedAttribute]
private string <GitItemPath>k__BackingField;
    [CompilerGeneratedAttribute]
private IList`1<WikiPage> <SubPages>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoteUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private GitItem <InternalItem>k__BackingField;
    [DataMemberAttribute]
public string Path { get; private set; }
    [DataMemberAttribute]
public int Order { get; public set; }
    [DataMemberAttribute]
public bool IsParentPage { get; private set; }
    [DataMemberAttribute]
public bool IsNonConformant { get; private set; }
    [DataMemberAttribute]
public string GitItemPath { get; private set; }
    [DataMemberAttribute]
public IList`1<WikiPage> SubPages { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public string RemoteUrl { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> Id { get; public set; }
    [IgnoreDataMemberAttribute]
public GitItem InternalItem { get; private set; }
    private WikiPage(GitItem item);
    [JsonConstructorAttribute]
public WikiPage(string path, bool isParentPage, int order, GitItem item, bool isNonConformant);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public int get_Order();
    [CompilerGeneratedAttribute]
public void set_Order(int value);
    [CompilerGeneratedAttribute]
public bool get_IsParentPage();
    [CompilerGeneratedAttribute]
private void set_IsParentPage(bool value);
    [CompilerGeneratedAttribute]
public bool get_IsNonConformant();
    [CompilerGeneratedAttribute]
private void set_IsNonConformant(bool value);
    [CompilerGeneratedAttribute]
public string get_GitItemPath();
    [CompilerGeneratedAttribute]
private void set_GitItemPath(string value);
    [CompilerGeneratedAttribute]
public IList`1<WikiPage> get_SubPages();
    [CompilerGeneratedAttribute]
public void set_SubPages(IList`1<WikiPage> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Url();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Url(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RemoteUrl();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RemoteUrl(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Nullable`1<int> value);
    [CompilerGeneratedAttribute]
public GitItem get_InternalItem();
    [CompilerGeneratedAttribute]
private void set_InternalItem(GitItem value);
    private string NormalizePath(string path);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Wiki.WebApi.WikiPageCreateOrUpdateParameters : WikiSecuredObject {
    [CompilerGeneratedAttribute]
private string <Content>k__BackingField;
    [DataMemberAttribute]
public string Content { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Content();
    [CompilerGeneratedAttribute]
public void set_Content(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Wiki.WebApi.WikiPageDetail : WikiSecuredObject {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<WikiPageStat> <ViewStats>k__BackingField;
    [DataMemberAttribute]
public string Path { get; private set; }
    [DataMemberAttribute]
public int Id { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<WikiPageStat> ViewStats { get; public set; }
    public WikiPageDetail(int pageId, string pagePath);
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
private void set_Path(string value);
    [CompilerGeneratedAttribute]
public int get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(int value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<WikiPageStat> get_ViewStats();
    [CompilerGeneratedAttribute]
public void set_ViewStats(IEnumerable`1<WikiPageStat> value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Wiki.WebApi.WikiPageMove : WikiPageMoveParameters {
    [CompilerGeneratedAttribute]
private WikiPage <Page>k__BackingField;
    [DataMemberAttribute]
public WikiPage Page { get; public set; }
    [CompilerGeneratedAttribute]
public WikiPage get_Page();
    [CompilerGeneratedAttribute]
public void set_Page(WikiPage value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Wiki.WebApi.WikiPageMoveParameters : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private string <NewPath>k__BackingField;
    [CompilerGeneratedAttribute]
private Nullable`1<int> <NewOrder>k__BackingField;
    [DataMemberAttribute]
public string Path { get; public set; }
    [DataMemberAttribute]
public string NewPath { get; public set; }
    [DataMemberAttribute]
public Nullable`1<int> NewOrder { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public string get_NewPath();
    [CompilerGeneratedAttribute]
public void set_NewPath(string value);
    [CompilerGeneratedAttribute]
public Nullable`1<int> get_NewOrder();
    [CompilerGeneratedAttribute]
public void set_NewOrder(Nullable`1<int> value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Wiki.WebApi.WikiPageMoveResponse : object {
    [CompilerGeneratedAttribute]
private WikiPageMove <PageMove>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ETag>k__BackingField;
    [ClientResponseContentAttribute]
public WikiPageMove PageMove { get; public set; }
    [ClientResponseHeaderAttribute("ETag")]
public IEnumerable`1<string> ETag { get; public set; }
    [CompilerGeneratedAttribute]
public WikiPageMove get_PageMove();
    [CompilerGeneratedAttribute]
public void set_PageMove(WikiPageMove value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ETag();
    [CompilerGeneratedAttribute]
public void set_ETag(IEnumerable`1<string> value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Wiki.WebApi.WikiPageResponse : object {
    [CompilerGeneratedAttribute]
private WikiPage <Page>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<string> <ETag>k__BackingField;
    [ClientResponseContentAttribute]
public WikiPage Page { get; public set; }
    [ClientResponseHeaderAttribute("ETag")]
public IEnumerable`1<string> ETag { get; public set; }
    [CompilerGeneratedAttribute]
public WikiPage get_Page();
    [CompilerGeneratedAttribute]
public void set_Page(WikiPage value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<string> get_ETag();
    [CompilerGeneratedAttribute]
public void set_ETag(IEnumerable`1<string> value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Wiki.WebApi.WikiPageStat : WikiSecuredObject {
    [CompilerGeneratedAttribute]
private DateTime <Day>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [DataMemberAttribute]
public DateTime Day { get; private set; }
    [DataMemberAttribute]
public int Count { get; public set; }
    public WikiPageStat(DateTime day, int count);
    [CompilerGeneratedAttribute]
public DateTime get_Day();
    [CompilerGeneratedAttribute]
private void set_Day(DateTime value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Wiki.WebApi.WikiPageViewStats : object {
    [CompilerGeneratedAttribute]
private string <Path>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Count>k__BackingField;
    [CompilerGeneratedAttribute]
private DateTime <LastViewedTime>k__BackingField;
    [DataMemberAttribute]
public string Path { get; public set; }
    [DataMemberAttribute]
public int Count { get; public set; }
    [DataMemberAttribute]
public DateTime LastViewedTime { get; public set; }
    [CompilerGeneratedAttribute]
public string get_Path();
    [CompilerGeneratedAttribute]
public void set_Path(string value);
    [CompilerGeneratedAttribute]
public int get_Count();
    [CompilerGeneratedAttribute]
public void set_Count(int value);
    [CompilerGeneratedAttribute]
public DateTime get_LastViewedTime();
    [CompilerGeneratedAttribute]
public void set_LastViewedTime(DateTime value);
}
[DataContractAttribute]
public enum Microsoft.TeamFoundation.Wiki.WebApi.WikiType : Enum {
    public int value__;
    [EnumMemberAttribute]
public static WikiType ProjectWiki;
    [EnumMemberAttribute]
public static WikiType CodeWiki;
}
[ServiceEventObjectAttribute]
[DataContractAttribute]
public class Microsoft.TeamFoundation.Wiki.WebApi.WikiUpdatedNotificationMessage : object {
    [CompilerGeneratedAttribute]
private Guid <CollectionId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <ProjectId>k__BackingField;
    [CompilerGeneratedAttribute]
private Guid <RepositoryId>k__BackingField;
    [DataMemberAttribute]
public Guid CollectionId { get; private set; }
    [DataMemberAttribute]
public Guid ProjectId { get; private set; }
    [DataMemberAttribute]
public Guid RepositoryId { get; private set; }
    public WikiUpdatedNotificationMessage(Guid collectionId, Guid projectId, Guid repositoryId);
    [CompilerGeneratedAttribute]
public Guid get_CollectionId();
    [CompilerGeneratedAttribute]
private void set_CollectionId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_ProjectId();
    [CompilerGeneratedAttribute]
private void set_ProjectId(Guid value);
    [CompilerGeneratedAttribute]
public Guid get_RepositoryId();
    [CompilerGeneratedAttribute]
private void set_RepositoryId(Guid value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Wiki.WebApi.WikiUpdateParameters : object {
    [CompilerGeneratedAttribute]
private IEnumerable`1<GitVersionDescriptor> <Versions>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [DataMemberAttribute]
public IEnumerable`1<GitVersionDescriptor> Versions { get; public set; }
    [DataMemberAttribute]
public string Name { get; public set; }
    [CompilerGeneratedAttribute]
public IEnumerable`1<GitVersionDescriptor> get_Versions();
    [CompilerGeneratedAttribute]
public void set_Versions(IEnumerable`1<GitVersionDescriptor> value);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
public void set_Name(string value);
}
[DataContractAttribute]
public class Microsoft.TeamFoundation.Wiki.WebApi.WikiV2 : WikiCreateBaseParameters {
    [CompilerGeneratedAttribute]
private Guid <Id>k__BackingField;
    [CompilerGeneratedAttribute]
private IEnumerable`1<GitVersionDescriptor> <Versions>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Properties>k__BackingField;
    [CompilerGeneratedAttribute]
private string <Url>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RemoteUrl>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <IsDisabled>k__BackingField;
    [DataMemberAttribute]
public Guid Id { get; public set; }
    [DataMemberAttribute]
public IEnumerable`1<GitVersionDescriptor> Versions { get; public set; }
    [DataMemberAttribute]
public IDictionary`2<string, string> Properties { get; public set; }
    [DataMemberAttribute]
public string Url { get; public set; }
    [DataMemberAttribute]
public string RemoteUrl { get; public set; }
    [DataMemberAttribute]
public bool IsDisabled { get; public set; }
    [CompilerGeneratedAttribute]
public Guid get_Id();
    [CompilerGeneratedAttribute]
public void set_Id(Guid value);
    [CompilerGeneratedAttribute]
public IEnumerable`1<GitVersionDescriptor> get_Versions();
    [CompilerGeneratedAttribute]
public void set_Versions(IEnumerable`1<GitVersionDescriptor> value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
public void set_Properties(IDictionary`2<string, string> value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_Url();
    [CompilerGeneratedAttribute]
public sealed virtual void set_Url(string value);
    [CompilerGeneratedAttribute]
public sealed virtual string get_RemoteUrl();
    [CompilerGeneratedAttribute]
public sealed virtual void set_RemoteUrl(string value);
    [CompilerGeneratedAttribute]
public bool get_IsDisabled();
    [CompilerGeneratedAttribute]
public void set_IsDisabled(bool value);
    public virtual void SetSecuredObject(ISecuredObject securedObject);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
