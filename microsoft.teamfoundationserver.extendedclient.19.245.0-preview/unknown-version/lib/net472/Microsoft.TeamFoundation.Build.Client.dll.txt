[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public class Microsoft.TeamFoundation.Build.Client.AccessDeniedException : SecurityException {
    public AccessDeniedException(string message);
    public AccessDeniedException(string message, Exception ex);
    protected AccessDeniedException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Build.Client.ActivityProperties : object {
    private IBuildInformationNode m_node;
    public Dictionary`2<string, string> Properties { get; }
    public IBuildInformationNode Node { get; }
    public ActivityProperties(IBuildInformationNode node, Dictionary`2<string, string> properties);
    public ActivityProperties(IBuildInformationNode node);
    public sealed virtual Dictionary`2<string, string> get_Properties();
    public sealed virtual IBuildInformationNode get_Node();
    public sealed virtual void Save();
}
internal class Microsoft.TeamFoundation.Build.Client.ActivityTracking : object {
    protected IBuildInformationNode m_node;
    private IActivityProperties m_initialPropertyValues;
    private IActivityProperties m_finalPropertyValues;
    public IActivityProperties InitialPropertyValues { get; }
    public IActivityProperties FinalPropertyValues { get; }
    public string ActivityInstanceId { get; public set; }
    public string ActivityType { get; public set; }
    public string State { get; public set; }
    public DateTime StartTime { get; public set; }
    public DateTime FinishTime { get; public set; }
    public string DisplayName { get; public set; }
    public IBuildInformationNode Node { get; }
    public static IComparer`1<IBuildInformationNode> Comparer { get; }
    public ActivityTracking(IBuildInformationNode node, string activityInstanceId, string activityType);
    public ActivityTracking(IBuildInformationNode node, string activityInstanceId, string activityType, string displayText);
    public ActivityTracking(IBuildInformationNode node);
    public sealed virtual IActivityProperties get_InitialPropertyValues();
    public sealed virtual IActivityProperties get_FinalPropertyValues();
    private void GetPropertyValues();
    public sealed virtual string get_ActivityInstanceId();
    public sealed virtual void set_ActivityInstanceId(string value);
    public sealed virtual string get_ActivityType();
    public sealed virtual void set_ActivityType(string value);
    public sealed virtual string get_State();
    public sealed virtual void set_State(string value);
    public sealed virtual DateTime get_StartTime();
    public sealed virtual void set_StartTime(DateTime value);
    public sealed virtual DateTime get_FinishTime();
    public sealed virtual void set_FinishTime(DateTime value);
    public sealed virtual string get_DisplayName();
    public sealed virtual void set_DisplayName(string value);
    public sealed virtual IBuildInformationNode get_Node();
    public sealed virtual IActivityTracking AddActivityTracking(string activityInstanceId, string activityType, string displayText);
    public sealed virtual IAgentScopeActivityTracking AddAgentScopeActivityTracking(string activityInstanceId, string activityType, string displayText);
    public sealed virtual IActivityProperties AddPropertyValues(Dictionary`2<string, string> properties);
    public sealed virtual void Save();
    public static List`1<IActivityTracking> FromInformationNodes(List`1<IBuildInformationNode> nodes);
    public static IComparer`1<IBuildInformationNode> get_Comparer();
}
public class Microsoft.TeamFoundation.Build.Client.AdministrationException : BuildServerException {
    public AdministrationException(string message);
    public AdministrationException(string message, Exception ex);
    protected AdministrationException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Build.Client.AdministrationWebService : TfsHttpClient {
    private BuildServer m_buildServer;
    protected Guid CollectionServiceIdentifier { get; }
    protected string ComponentName { get; }
    protected string ServiceType { get; }
    internal AdministrationWebService(BuildServer buildServer);
    public AdministrationWebService(TfsTeamProjectCollection connection);
    public virtual object GetService(Type serviceType);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ComponentName();
    protected virtual string get_ServiceType();
    public BuildAgent2010[] AddBuildAgents(BuildAgent2010[] agents);
    public BuildController2010[] AddBuildControllers(BuildController2010[] controllers);
    public BuildServiceHost2010 AddBuildServiceHost(BuildServiceHost2010 serviceHost);
    protected virtual Exception ConvertException(SoapException exception);
    public void DeleteBuildAgents(Uri[] agentUris);
    public void DeleteBuildControllers(Uri[] controllerUris);
    public void DeleteBuildServiceHost(Uri serviceHostUri);
    public BuildAgentQueryResult2010[] QueryBuildAgents(BuildAgentSpec2010[] agentSpecs);
    public BuildAgentQueryResult2010 QueryBuildAgentsByUri(Uri[] agentUris);
    public BuildControllerQueryResult2010[] QueryBuildControllers(BuildControllerSpec2010[] controllerSpecs);
    public BuildControllerQueryResult2010 QueryBuildControllersByUri(Uri[] controllerUris, bool includeAgents);
    public BuildServiceHostQueryResult2010 QueryBuildServiceHosts(string computer);
    public BuildServiceHostQueryResult2010 QueryBuildServiceHostsByUri(Uri[] serviceHostUris);
    public BuildAgentQueryResult2010 TestBuildAgentConnection(Uri agentUri);
    public BuildControllerQueryResult2010 TestBuildControllerConnection(Uri controllerUri);
    public BuildServiceHostQueryResult2010 TestBuildServiceHostConnections(Uri hostUri);
    public void UpdateBuildAgents(BuildAgentUpdateOptions2010[] updates);
    public void UpdateBuildControllers(BuildControllerUpdateOptions2010[] updates);
    public void UpdateBuildServiceHost(BuildServiceHostUpdateOptions2010 update);
}
internal class Microsoft.TeamFoundation.Build.Client.AdministrationWebService4 : TfsHttpClient {
    private BuildServer m_buildServer;
    protected Guid CollectionServiceIdentifier { get; }
    protected string ComponentName { get; }
    protected string ServiceType { get; }
    public AdministrationWebService4(BuildServer server);
    public AdministrationWebService4(TfsTeamProjectCollection connection);
    public virtual object GetService(Type serviceType);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ComponentName();
    protected virtual string get_ServiceType();
    public void AcquireServiceHost(Uri serviceHostUri, string ownerName);
    public BuildAgent[] AddBuildAgents(BuildAgent[] agents);
    public BuildController[] AddBuildControllers(BuildController[] controllers);
    public BuildServiceHost AddBuildServiceHost(BuildServiceHost serviceHost);
    public IAsyncResult BeginUpdateBuildAgents(BuildAgentUpdateOptions[] updates, AsyncCallback callback, object state);
    public IAsyncResult BeginUpdateBuildControllers(BuildControllerUpdateOptions[] updates, AsyncCallback callback, object state);
    protected virtual Exception ConvertException(SoapException exception);
    public void DeleteBuildAgents(Uri[] agentUris);
    public void DeleteBuildControllers(Uri[] controllerUris);
    public void DeleteBuildServiceHost(Uri serviceHostUri);
    public void EndUpdateBuildAgents(IAsyncResult result);
    public void EndUpdateBuildControllers(IAsyncResult result);
    public BuildAgentQueryResult[] QueryBuildAgents(BuildAgentSpec[] agentSpecs);
    public BuildAgentQueryResult QueryBuildAgentsByUri(Uri[] agentUris, String[] propertyNameFilters);
    public BuildControllerQueryResult[] QueryBuildControllers(BuildControllerSpec[] controllerSpecs);
    public BuildControllerQueryResult QueryBuildControllersByUri(Uri[] controllerUris, String[] propertyNameFilters, bool includeAgents);
    public BuildServiceHostQueryResult QueryBuildServiceHosts(string computer);
    public BuildServiceHostQueryResult QueryBuildServiceHostsByUri(Uri[] serviceHostUris);
    public void ReleaseServiceHost(Uri serviceHostUri);
    public void UpdateBuildAgents(BuildAgentUpdateOptions[] updates);
    public void UpdateBuildControllers(BuildControllerUpdateOptions[] updates);
    public void UpdateBuildServiceHost(BuildServiceHostUpdateOptions update);
}
public enum Microsoft.TeamFoundation.Build.Client.Agent2008Status : Enum {
    public int value__;
    public static Agent2008Status Disabled;
    public static Agent2008Status Enabled;
    public static Agent2008Status Initializing;
    public static Agent2008Status Unreachable;
}
public enum Microsoft.TeamFoundation.Build.Client.AgentReservationStatus : Enum {
    public int value__;
    public static AgentReservationStatus NotStarted;
    public static AgentReservationStatus AgentRequested;
    public static AgentReservationStatus AgentReserved;
    public static AgentReservationStatus AgentReleased;
}
internal class Microsoft.TeamFoundation.Build.Client.AgentScopeActivityTracking : ActivityTracking {
    public AgentReservationStatus ReservationStatus { get; public set; }
    public string ReservedAgentName { get; public set; }
    public Uri ReservedAgentUri { get; public set; }
    public AgentScopeActivityTracking(IBuildInformationNode node, string activityInstanceId, string activityType);
    public AgentScopeActivityTracking(IBuildInformationNode node, string activityInstanceId, string activityType, string displayText);
    public AgentScopeActivityTracking(IBuildInformationNode node);
    public sealed virtual AgentReservationStatus get_ReservationStatus();
    public sealed virtual void set_ReservationStatus(AgentReservationStatus value);
    public sealed virtual string get_ReservedAgentName();
    public sealed virtual void set_ReservedAgentName(string value);
    public sealed virtual Uri get_ReservedAgentUri();
    public sealed virtual void set_ReservedAgentUri(Uri value);
}
public enum Microsoft.TeamFoundation.Build.Client.AgentStatus : Enum {
    public int value__;
    public static AgentStatus Available;
    public static AgentStatus Offline;
    public static AgentStatus Unavailable;
}
internal enum Microsoft.TeamFoundation.Build.Client.AgentStatus2010 : Enum {
    public int value__;
    public static AgentStatus2010 Available;
    public static AgentStatus2010 Offline;
    public static AgentStatus2010 Unavailable;
}
internal class Microsoft.TeamFoundation.Build.Client.AttachedPropertyDictionary : ObservableDictionary`2<string, object> {
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> <Delta>k__BackingField;
    public PropertyValue[] ChangedProperties { get; }
    private Dictionary`2<string, object> Delta { get; private set; }
    public AttachedPropertyDictionary(PropertyValue[] properties);
    public void OnDictionaryChanged(object sender, DictionaryChangedEventArgs`2<string, object> args);
    public void ClearChangedProperties();
    public void CopyFrom(IDictionary`2<string, object> source);
    public PropertyValue[] get_ChangedProperties();
    [CompilerGeneratedAttribute]
private Dictionary`2<string, object> get_Delta();
    [CompilerGeneratedAttribute]
private void set_Delta(Dictionary`2<string, object> value);
}
[AttributeUsageAttribute("4")]
public class Microsoft.TeamFoundation.Build.Client.BuildActivityAttribute : Attribute {
    private HostEnvironmentOption m_option;
    public HostEnvironmentOption Option { get; }
    public BuildActivityAttribute(HostEnvironmentOption option);
    public HostEnvironmentOption get_Option();
}
internal class Microsoft.TeamFoundation.Build.Client.BuildAgent : object {
    private IBuildController m_controller;
    private IBuildServiceHost m_serviceHost;
    private BuildAgentUpdateOptions m_lastSnapshot;
    private List`1<string> m_tagList;
    private object m_lockProperties;
    private AttachedPropertyDictionary m_attachedProperties;
    private string m_buildDirectory;
    private Uri m_controllerUri;
    private DateTime m_dateCreated;
    private DateTime m_dateUpdated;
    private string m_description;
    private bool m_enabled;
    internal PropertyValue[] m_internalProperties;
    private Uri m_messageQueueUrl;
    private string m_name;
    private Uri m_reservedForBuild;
    private Uri m_serviceHostUri;
    private AgentStatus m_status;
    private string m_statusMessage;
    internal String[] m_tags;
    private Uri m_uri;
    private Uri m_url;
    public IBuildServiceHost ServiceHost { get; public set; }
    public IBuildController Controller { get; public set; }
    private IDictionary`2<string, object> Microsoft.TeamFoundation.Build.Client.IBuildAgent.AttachedProperties { get; }
    public AttachedPropertyDictionary AttachedProperties { get; private set; }
    public List`1<string> Tags { get; public set; }
    public bool IsReserved { get; }
    public string TeamProject { get; }
    public string FullPath { get; }
    public string MachineName { get; public set; }
    public IBuildServer BuildServer { get; }
    public string BuildDirectory { get; public set; }
    public Uri ControllerUri { get; }
    public DateTime DateCreated { get; }
    public DateTime DateUpdated { get; }
    public string Description { get; public set; }
    public bool Enabled { get; public set; }
    internal PropertyValue[] InternalProperties { get; internal set; }
    public Uri MessageQueueUrl { get; }
    public string Name { get; public set; }
    public Uri ReservedForBuild { get; }
    internal Uri ServiceHostUri { get; }
    public AgentStatus Status { get; public set; }
    public string StatusMessage { get; public set; }
    public Uri Uri { get; internal set; }
    public Uri Url { get; public set; }
    internal BuildAgent(IBuildServiceHost serviceHost, string name, string buildDirectory);
    internal BuildAgent(BuildAgent2010 agent);
    public sealed virtual IBuildServiceHost get_ServiceHost();
    public void set_ServiceHost(IBuildServiceHost value);
    public sealed virtual IBuildController get_Controller();
    public sealed virtual void set_Controller(IBuildController value);
    private sealed virtual override IDictionary`2<string, object> Microsoft.TeamFoundation.Build.Client.IBuildAgent.get_AttachedProperties();
    public AttachedPropertyDictionary get_AttachedProperties();
    private void set_AttachedProperties(AttachedPropertyDictionary value);
    public sealed virtual List`1<string> get_Tags();
    public sealed virtual void set_Tags(List`1<string> value);
    public sealed virtual bool get_IsReserved();
    internal void AfterDeserialize();
    private BuildAgentUpdate CompareSnapshots(BuildAgentUpdateOptions originalValues, BuildAgentUpdateOptions modifiedValues);
    private BuildAgentUpdateOptions GetSnapshot();
    internal BuildAgentUpdateOptions GetUpdateOptions();
    internal void SetUpdateOptions(BuildAgentUpdateOptions snapshot);
    public sealed virtual string GetExpandedBuildDirectory(IBuildDefinition definition);
    public sealed virtual void Delete();
    public sealed virtual void Refresh();
    public sealed virtual void Refresh(String[] propertyNameFilters);
    internal void Copy(IBuildAgent agent);
    internal void PrepareToSave();
    public sealed virtual void Save();
    public sealed virtual string get_TeamProject();
    public sealed virtual string get_FullPath();
    public string get_MachineName();
    public void set_MachineName(string value);
    public IBuildServer get_BuildServer();
    public sealed virtual string get_BuildDirectory();
    public sealed virtual void set_BuildDirectory(string value);
    public Uri get_ControllerUri();
    public sealed virtual DateTime get_DateCreated();
    public sealed virtual DateTime get_DateUpdated();
    public sealed virtual string get_Description();
    public sealed virtual void set_Description(string value);
    public sealed virtual bool get_Enabled();
    public sealed virtual void set_Enabled(bool value);
    internal PropertyValue[] get_InternalProperties();
    internal void set_InternalProperties(PropertyValue[] value);
    public sealed virtual Uri get_MessageQueueUrl();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual Uri get_ReservedForBuild();
    internal Uri get_ServiceHostUri();
    public sealed virtual AgentStatus get_Status();
    public sealed virtual void set_Status(AgentStatus value);
    public sealed virtual string get_StatusMessage();
    public sealed virtual void set_StatusMessage(string value);
    public sealed virtual Uri get_Uri();
    internal void set_Uri(Uri value);
    public sealed virtual Uri get_Url();
    public void set_Url(Uri value);
    internal static BuildAgent FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildAgent obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildAgent2008 : BuildGroupItem2010 {
    private string m_buildDirectory;
    private string m_description;
    private string m_machineName;
    private int m_maxProcesses;
    private int m_port;
    private int m_queueCount;
    private bool m_requireSecureChannel;
    private Agent2008Status m_status;
    private string m_statusMessage;
    public string BuildDirectory { get; }
    public string Description { get; }
    public string MachineName { get; }
    public int MaxProcesses { get; }
    public int Port { get; }
    public int QueueCount { get; }
    public bool RequireSecureChannel { get; }
    public Agent2008Status Status { get; }
    public string StatusMessage { get; }
    public string get_BuildDirectory();
    public string get_Description();
    public string get_MachineName();
    public int get_MaxProcesses();
    public int get_Port();
    public int get_QueueCount();
    public bool get_RequireSecureChannel();
    public Agent2008Status get_Status();
    public string get_StatusMessage();
    internal static BuildAgent2008 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal virtual void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildAgent2008 obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildAgent2010 : object {
    private string m_buildDirectory;
    private Uri m_controllerUri;
    private DateTime m_dateCreated;
    private DateTime m_dateUpdated;
    private string m_description;
    private bool m_enabled;
    private string m_name;
    private Uri m_reservedForBuild;
    private Uri m_serviceHostUri;
    private AgentStatus2010 m_status;
    private string m_statusMessage;
    internal String[] m_tags;
    private Uri m_uri;
    private Uri m_url;
    public string BuildDirectory { get; public set; }
    public Uri ControllerUri { get; }
    public DateTime DateCreated { get; }
    public DateTime DateUpdated { get; }
    public string Description { get; public set; }
    public bool Enabled { get; public set; }
    public string Name { get; public set; }
    public Uri ReservedForBuild { get; }
    internal Uri ServiceHostUri { get; }
    public AgentStatus2010 Status { get; public set; }
    public string StatusMessage { get; public set; }
    public Uri Uri { get; internal set; }
    public Uri Url { get; public set; }
    internal BuildAgent2010(BuildAgent agent);
    public string get_BuildDirectory();
    public void set_BuildDirectory(string value);
    public Uri get_ControllerUri();
    public DateTime get_DateCreated();
    public DateTime get_DateUpdated();
    public string get_Description();
    public void set_Description(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public string get_Name();
    public void set_Name(string value);
    public Uri get_ReservedForBuild();
    internal Uri get_ServiceHostUri();
    public AgentStatus2010 get_Status();
    public void set_Status(AgentStatus2010 value);
    public string get_StatusMessage();
    public void set_StatusMessage(string value);
    public Uri get_Uri();
    internal void set_Uri(Uri value);
    public Uri get_Url();
    public void set_Url(Uri value);
    internal static BuildAgent2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildAgent2010 obj);
}
public class Microsoft.TeamFoundation.Build.Client.BuildAgentAlreadyExistsException : AdministrationException {
    public BuildAgentAlreadyExistsException(string message);
    public BuildAgentAlreadyExistsException(string message, Exception ex);
    protected BuildAgentAlreadyExistsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildAgentDeletionException : AdministrationException {
    public BuildAgentDeletionException(string message);
    public BuildAgentDeletionException(string message, Exception ex);
    protected BuildAgentDeletionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildAgentDoesNotExistException : AdministrationException {
    public BuildAgentDoesNotExistException(string message);
    public BuildAgentDoesNotExistException(string message, Exception ex);
    protected BuildAgentDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildAgentFailureException : BuildServerException {
    public BuildAgentFailureException(string teamProject, string name, IFailure failure);
    protected BuildAgentFailureException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildAgentNotFoundException : BuildServerException {
    public BuildAgentNotFoundException(string name);
    protected BuildAgentNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildAgentNotFoundForUriException : BuildServerException {
    public BuildAgentNotFoundForUriException(Uri buildAgentUri, string userName);
    protected BuildAgentNotFoundForUriException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildAgentNotReadyToSaveException : BuildServerException {
    public BuildAgentNotReadyToSaveException(string agentName);
    protected BuildAgentNotReadyToSaveException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildAgentNotRecognizedException : BuildServerException {
    public BuildAgentNotRecognizedException(string buildAgent);
    protected BuildAgentNotRecognizedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildAgentNotUniqueException : BuildServerException {
    public BuildAgentNotUniqueException(string buildAgent);
    protected BuildAgentNotUniqueException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildAgentQueryResult : object {
    internal BuildAgent[] m_agents;
    internal BuildController[] m_controllers;
    internal BuildServiceHost[] m_serviceHosts;
    public IBuildAgent[] Agents { get; }
    public IFailure[] Failures { get; }
    internal static BuildAgentQueryResult FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildAgentQueryResult obj);
    public sealed virtual IBuildAgent[] get_Agents();
    public sealed virtual IFailure[] get_Failures();
    internal void AfterDeserialize();
}
internal class Microsoft.TeamFoundation.Build.Client.BuildAgentQueryResult2010 : object {
    internal BuildAgent2010[] m_agents;
    internal BuildController2010[] m_controllers;
    internal Failure2010[] m_internalFailures;
    internal BuildServiceHost2010[] m_serviceHosts;
    internal Failure2010[] InternalFailures { get; }
    internal Failure2010[] get_InternalFailures();
    internal static BuildAgentQueryResult2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildAgentQueryResult2010 obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildAgentSpec : object {
    private List`1<string> m_tagList;
    private List`1<string> m_filterList;
    private string m_controllerName;
    private string m_name;
    internal String[] m_propertyNameFilters;
    private string m_serviceHostName;
    internal String[] m_tags;
    public List`1<string> Tags { get; public set; }
    public List`1<string> PropertyNameFilters { get; public set; }
    public string ControllerName { get; public set; }
    public string Name { get; public set; }
    public string ServiceHostName { get; public set; }
    public BuildAgentSpec(string name, string serviceHostName);
    public BuildAgentSpec(string name, string serviceHostName, List`1<string> tags);
    public BuildAgentSpec(string name, string serviceHostName, String[] propertyNameFilters, List`1<string> tags);
    public sealed virtual List`1<string> get_Tags();
    public sealed virtual void set_Tags(List`1<string> value);
    public sealed virtual List`1<string> get_PropertyNameFilters();
    public sealed virtual void set_PropertyNameFilters(List`1<string> value);
    internal void BeforeSerialize();
    public string get_ControllerName();
    public void set_ControllerName(string value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual string get_ServiceHostName();
    public sealed virtual void set_ServiceHostName(string value);
    internal static BuildAgentSpec FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildAgentSpec obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildAgentSpec2008 : BuildGroupItemSpec2010 {
    private string m_machineName;
    private int m_port;
    public string ServiceHostName { get; public set; }
    public string MachineName { get; public set; }
    public int Port { get; public set; }
    public List`1<string> PropertyNameFilters { get; public set; }
    public List`1<string> Tags { get; public set; }
    public BuildAgentSpec2008(BuildControllerSpec spec);
    public sealed virtual string get_ServiceHostName();
    public sealed virtual void set_ServiceHostName(string value);
    public string get_MachineName();
    public void set_MachineName(string value);
    public int get_Port();
    public void set_Port(int value);
    public sealed virtual List`1<string> get_PropertyNameFilters();
    public sealed virtual void set_PropertyNameFilters(List`1<string> value);
    public sealed virtual List`1<string> get_Tags();
    public sealed virtual void set_Tags(List`1<string> value);
    internal static BuildAgentSpec2008 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal virtual void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildAgentSpec2008 obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildAgentSpec2010 : object {
    private string m_controllerName;
    private string m_name;
    private string m_serviceHostName;
    internal String[] m_tags;
    public string ControllerName { get; public set; }
    public string Name { get; public set; }
    public string ServiceHostName { get; public set; }
    internal BuildAgentSpec2010(BuildAgentSpec spec);
    public string get_ControllerName();
    public void set_ControllerName(string value);
    public string get_Name();
    public void set_Name(string value);
    public string get_ServiceHostName();
    public void set_ServiceHostName(string value);
    internal static BuildAgentSpec2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildAgentSpec2010 obj);
}
public class Microsoft.TeamFoundation.Build.Client.BuildAgentSpecNotUniqueException : BuildServerException {
    public BuildAgentSpecNotUniqueException(string name);
    protected BuildAgentSpecNotUniqueException(SerializationInfo info, StreamingContext context);
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Build.Client.BuildAgentUpdate : Enum {
    public int value__;
    public static BuildAgentUpdate AttachedProperties;
    public static BuildAgentUpdate BuildDirectory;
    public static BuildAgentUpdate ControllerUri;
    public static BuildAgentUpdate Description;
    public static BuildAgentUpdate Enabled;
    public static BuildAgentUpdate Name;
    public static BuildAgentUpdate None;
    public static BuildAgentUpdate Status;
    public static BuildAgentUpdate StatusMessage;
    public static BuildAgentUpdate Tags;
}
[FlagsAttribute]
internal enum Microsoft.TeamFoundation.Build.Client.BuildAgentUpdate2010 : Enum {
    public int value__;
    public static BuildAgentUpdate2010 BuildDirectory;
    public static BuildAgentUpdate2010 ControllerUri;
    public static BuildAgentUpdate2010 Description;
    public static BuildAgentUpdate2010 Enabled;
    public static BuildAgentUpdate2010 Name;
    public static BuildAgentUpdate2010 None;
    public static BuildAgentUpdate2010 Status;
    public static BuildAgentUpdate2010 StatusMessage;
    public static BuildAgentUpdate2010 Tags;
}
public class Microsoft.TeamFoundation.Build.Client.BuildAgentUpdateException : AdministrationException {
    public BuildAgentUpdateException(string message);
    public BuildAgentUpdateException(string message, Exception ex);
    protected BuildAgentUpdateException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildAgentUpdateOptions : object {
    internal PropertyValue[] m_attachedProperties;
    private string m_buildDirectory;
    private Uri m_controllerUri;
    private string m_description;
    private bool m_enabled;
    private BuildAgentUpdate m_fields;
    private string m_name;
    private AgentStatus m_status;
    private string m_statusMessage;
    internal String[] m_tags;
    private Uri m_uri;
    internal PropertyValue[] AttachedProperties { get; internal set; }
    public string BuildDirectory { get; public set; }
    public Uri ControllerUri { get; public set; }
    public string Description { get; public set; }
    public bool Enabled { get; public set; }
    internal BuildAgentUpdate Fields { get; internal set; }
    public string Name { get; public set; }
    public AgentStatus Status { get; public set; }
    public string StatusMessage { get; public set; }
    public String[] Tags { get; public set; }
    internal Uri Uri { get; internal set; }
    internal PropertyValue[] get_AttachedProperties();
    internal void set_AttachedProperties(PropertyValue[] value);
    public string get_BuildDirectory();
    public void set_BuildDirectory(string value);
    public Uri get_ControllerUri();
    public void set_ControllerUri(Uri value);
    public string get_Description();
    public void set_Description(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    internal BuildAgentUpdate get_Fields();
    internal void set_Fields(BuildAgentUpdate value);
    public string get_Name();
    public void set_Name(string value);
    public AgentStatus get_Status();
    public void set_Status(AgentStatus value);
    public string get_StatusMessage();
    public void set_StatusMessage(string value);
    public String[] get_Tags();
    public void set_Tags(String[] value);
    internal Uri get_Uri();
    internal void set_Uri(Uri value);
    internal static BuildAgentUpdateOptions FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildAgentUpdateOptions obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildAgentUpdateOptions2010 : object {
    private string m_buildDirectory;
    private Uri m_controllerUri;
    private string m_description;
    private bool m_enabled;
    private BuildAgentUpdate2010 m_fields;
    private string m_name;
    private AgentStatus2010 m_status;
    private string m_statusMessage;
    internal String[] m_tags;
    private Uri m_uri;
    public string BuildDirectory { get; public set; }
    public Uri ControllerUri { get; public set; }
    public string Description { get; public set; }
    public bool Enabled { get; public set; }
    internal BuildAgentUpdate2010 Fields { get; internal set; }
    public string Name { get; public set; }
    public AgentStatus2010 Status { get; public set; }
    public string StatusMessage { get; public set; }
    public String[] Tags { get; public set; }
    internal Uri Uri { get; internal set; }
    internal BuildAgentUpdateOptions2010(BuildAgentUpdateOptions updateOptions);
    public string get_BuildDirectory();
    public void set_BuildDirectory(string value);
    public Uri get_ControllerUri();
    public void set_ControllerUri(Uri value);
    public string get_Description();
    public void set_Description(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    internal BuildAgentUpdate2010 get_Fields();
    internal void set_Fields(BuildAgentUpdate2010 value);
    public string get_Name();
    public void set_Name(string value);
    public AgentStatus2010 get_Status();
    public void set_Status(AgentStatus2010 value);
    public string get_StatusMessage();
    public void set_StatusMessage(string value);
    public String[] get_Tags();
    public void set_Tags(String[] value);
    internal Uri get_Uri();
    internal void set_Uri(Uri value);
    internal static BuildAgentUpdateOptions2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildAgentUpdateOptions2010 obj);
}
public static class Microsoft.TeamFoundation.Build.Client.BuildClientUtil : object {
    public static Workspace CreateWorkspace(VersionControlServer versionControl, string name, IEnumerable`1<WorkingFolder> folders, string comment, IEnumerable`1<AccessControlEntry> wsSecurity);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildController : object {
    private static string cActivityType;
    private static string cExtensionType;
    [CompilerGeneratedAttribute]
private BuildServer <BuildServer>k__BackingField;
    private BuildControllerUpdateOptions m_lastSnapshot;
    private string m_tempAssemblyPath;
    private IBuildServiceHost m_serviceHost;
    private List`1<string> m_tags;
    private List`1<IBuildAgent> m_agents;
    private VersionControlServer m_versionControl;
    private CustomActivitiesAndExtensions m_customActivitiesAndExtensions;
    private object m_lockProperties;
    private AttachedPropertyDictionary m_attachedProperties;
    private string m_customAssemblyPath;
    private DateTime m_dateCreated;
    private DateTime m_dateUpdated;
    private string m_description;
    private bool m_enabled;
    internal PropertyValue[] m_internalProperties;
    internal String[] m_internalTags;
    private int m_maxConcurrentBuilds;
    private Uri m_messageQueueUrl;
    private string m_name;
    private int m_queueCount;
    private Uri m_serviceHostUri;
    private ControllerStatus m_status;
    private string m_statusMessage;
    private Uri m_uri;
    private Uri m_url;
    public IBuildServiceHost ServiceHost { get; public set; }
    public ReadOnlyCollection`1<IBuildAgent> Agents { get; internal set; }
    public ReadOnlyCollection`1<string> Tags { get; private set; }
    private IDictionary`2<string, object> Microsoft.TeamFoundation.Build.Client.IBuildController.AttachedProperties { get; }
    public AttachedPropertyDictionary AttachedProperties { get; private set; }
    public BuildServer BuildServer { get; public set; }
    private VersionControlServer VersionControl { get; }
    internal CustomActivitiesAndExtensions CustomActivitiesAndExtensions { get; internal set; }
    public string CustomAssemblyPath { get; public set; }
    public DateTime DateCreated { get; }
    public DateTime DateUpdated { get; }
    public string Description { get; public set; }
    public bool Enabled { get; public set; }
    internal PropertyValue[] InternalProperties { get; internal set; }
    public int MaxConcurrentBuilds { get; public set; }
    public Uri MessageQueueUrl { get; }
    public string Name { get; public set; }
    public int QueueCount { get; }
    internal Uri ServiceHostUri { get; }
    public ControllerStatus Status { get; public set; }
    public string StatusMessage { get; public set; }
    public Uri Uri { get; internal set; }
    public Uri Url { get; internal set; }
    internal BuildController(BuildServiceHost serviceHost, string name);
    internal BuildController(BuildController2010 controller2010);
    internal BuildController(IBuildServer buildServer, BuildAgent2008 agent2008);
    public sealed virtual IBuildServiceHost get_ServiceHost();
    public void set_ServiceHost(IBuildServiceHost value);
    public sealed virtual ReadOnlyCollection`1<IBuildAgent> get_Agents();
    internal void set_Agents(ReadOnlyCollection`1<IBuildAgent> value);
    public sealed virtual ReadOnlyCollection`1<string> get_Tags();
    private void set_Tags(ReadOnlyCollection`1<string> value);
    private sealed virtual override IDictionary`2<string, object> Microsoft.TeamFoundation.Build.Client.IBuildController.get_AttachedProperties();
    public AttachedPropertyDictionary get_AttachedProperties();
    private void set_AttachedProperties(AttachedPropertyDictionary value);
    [CompilerGeneratedAttribute]
public BuildServer get_BuildServer();
    [CompilerGeneratedAttribute]
public void set_BuildServer(BuildServer value);
    public sealed virtual void AddBuildAgent(IBuildAgent agent);
    public sealed virtual void Delete();
    public sealed virtual List`1<Assembly> LoadCustomActivities(string localPath, RecursionType recursionType, HostEnvironmentOption environmentOptions, List`1& activityTypes, List`1& failures);
    public sealed virtual List`1<Assembly> LoadCustomActivitiesAndExtensions(string localPath, RecursionType recursionType, HostEnvironmentOption environmentOptions, List`1& activityTypes, List`1& extensionTypes, List`1& failures);
    public sealed virtual void Refresh(bool refreshAgentList);
    public sealed virtual void Refresh(String[] propertyNameFilters, bool refreshAgentList);
    internal void Copy(IBuildController controller, bool copyAgentList);
    public sealed virtual void RemoveBuildAgent(IBuildAgent agent);
    public void AfterDeserialize();
    private BuildControllerUpdate CompareSnapshots(BuildControllerUpdateOptions originalValues, BuildControllerUpdateOptions modifiedValues);
    private BuildControllerUpdateOptions GetSnapshot();
    internal BuildControllerUpdateOptions GetUpdateOptions();
    internal void SetUpdateOptions(BuildControllerUpdateOptions snapshot);
    public sealed virtual void Save();
    private VersionControlServer get_VersionControl();
    private void LoadCustomTypes(string localPath, List`1<string> assemblies, bool includeExtensions);
    private bool ProcessAllExportedTypes(string assemblyPath, XmlAssembly xmlAssembly, bool includeExtensions);
    private CustomTypeResult ProcessType(Type type, XmlAssembly xmlAssembly, bool includeExtensions, bool checkAttributes);
    private bool MatchesAttribute(CustomAttributeData attribute);
    private bool MatchesAttributeType(Type attributeType, CustomAttributeData attribute);
    private bool HasAttribute(Type type, Type attributeType);
    private Assembly CurrentDomain_AssemblyResolve(object sender, ResolveEventArgs args);
    private IBuildControllerAssemblyDownloader DownloaderFactory(RecursionType recursionType);
    internal void PrepareToSave();
    internal CustomActivitiesAndExtensions get_CustomActivitiesAndExtensions();
    internal void set_CustomActivitiesAndExtensions(CustomActivitiesAndExtensions value);
    internal void CopyCustomHelper(IBuildController another);
    public static bool IsSubClassOf(Type type, string baseName);
    public static bool HasInterface(Type type, string name);
    public sealed virtual string get_CustomAssemblyPath();
    public sealed virtual void set_CustomAssemblyPath(string value);
    public sealed virtual DateTime get_DateCreated();
    public sealed virtual DateTime get_DateUpdated();
    public sealed virtual string get_Description();
    public sealed virtual void set_Description(string value);
    public sealed virtual bool get_Enabled();
    public sealed virtual void set_Enabled(bool value);
    internal PropertyValue[] get_InternalProperties();
    internal void set_InternalProperties(PropertyValue[] value);
    public sealed virtual int get_MaxConcurrentBuilds();
    public sealed virtual void set_MaxConcurrentBuilds(int value);
    public sealed virtual Uri get_MessageQueueUrl();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual int get_QueueCount();
    internal Uri get_ServiceHostUri();
    public sealed virtual ControllerStatus get_Status();
    public sealed virtual void set_Status(ControllerStatus value);
    public sealed virtual string get_StatusMessage();
    public sealed virtual void set_StatusMessage(string value);
    public sealed virtual Uri get_Uri();
    internal void set_Uri(Uri value);
    public sealed virtual Uri get_Url();
    internal void set_Url(Uri value);
    internal static BuildController FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildController obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildController2010 : object {
    private string m_customAssemblyPath;
    private DateTime m_dateCreated;
    private DateTime m_dateUpdated;
    private string m_description;
    private bool m_enabled;
    internal String[] m_internalTags;
    private int m_maxConcurrentBuilds;
    private string m_name;
    private int m_queueCount;
    private Uri m_serviceHostUri;
    private ControllerStatus2010 m_status;
    private string m_statusMessage;
    private Uri m_uri;
    private Uri m_url;
    public string CustomAssemblyPath { get; public set; }
    public DateTime DateCreated { get; }
    public DateTime DateUpdated { get; }
    public string Description { get; public set; }
    public bool Enabled { get; public set; }
    public int MaxConcurrentBuilds { get; public set; }
    public string Name { get; public set; }
    public int QueueCount { get; }
    internal Uri ServiceHostUri { get; }
    public ControllerStatus2010 Status { get; public set; }
    public string StatusMessage { get; public set; }
    public Uri Uri { get; internal set; }
    public Uri Url { get; internal set; }
    internal BuildController2010(BuildController controller);
    public string get_CustomAssemblyPath();
    public void set_CustomAssemblyPath(string value);
    public DateTime get_DateCreated();
    public DateTime get_DateUpdated();
    public string get_Description();
    public void set_Description(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public int get_MaxConcurrentBuilds();
    public void set_MaxConcurrentBuilds(int value);
    public string get_Name();
    public void set_Name(string value);
    public int get_QueueCount();
    internal Uri get_ServiceHostUri();
    public ControllerStatus2010 get_Status();
    public void set_Status(ControllerStatus2010 value);
    public string get_StatusMessage();
    public void set_StatusMessage(string value);
    public Uri get_Uri();
    internal void set_Uri(Uri value);
    public Uri get_Url();
    internal void set_Url(Uri value);
    internal static BuildController2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildController2010 obj);
}
public class Microsoft.TeamFoundation.Build.Client.BuildControllerAlreadyExistsException : AdministrationException {
    public BuildControllerAlreadyExistsException(string message);
    public BuildControllerAlreadyExistsException(string message, Exception ex);
    protected BuildControllerAlreadyExistsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildControllerDeletionException : AdministrationException {
    public BuildControllerDeletionException(string message);
    public BuildControllerDeletionException(string message, Exception ex);
    protected BuildControllerDeletionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildControllerDoesNotExistException : AdministrationException {
    public BuildControllerDoesNotExistException(string message);
    public BuildControllerDoesNotExistException(string message, Exception ex);
    protected BuildControllerDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildControllerNotFoundException : BuildServerException {
    public BuildControllerNotFoundException(string name);
    protected BuildControllerNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildControllerNotFoundForUriException : BuildServerException {
    public BuildControllerNotFoundForUriException(Uri buildControllerUri, string userName);
    protected BuildControllerNotFoundForUriException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildControllerNotReadyToSaveException : BuildServerException {
    public BuildControllerNotReadyToSaveException(string controllerName);
    protected BuildControllerNotReadyToSaveException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildControllerQueryResult : object {
    internal BuildAgent[] m_agents;
    internal BuildController[] m_controllers;
    internal BuildServiceHost[] m_serviceHosts;
    public IBuildController[] Controllers { get; }
    public IFailure[] Failures { get; }
    internal static BuildControllerQueryResult FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildControllerQueryResult obj);
    public sealed virtual IBuildController[] get_Controllers();
    public sealed virtual IFailure[] get_Failures();
    internal void AfterDeserialize();
}
internal class Microsoft.TeamFoundation.Build.Client.BuildControllerQueryResult2010 : object {
    internal BuildAgent2010[] m_agents;
    internal BuildController2010[] m_controllers;
    internal Failure2010[] m_internalFailures;
    internal BuildServiceHost2010[] m_serviceHosts;
    internal Failure2010[] InternalFailures { get; }
    internal Failure2010[] get_InternalFailures();
    internal static BuildControllerQueryResult2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildControllerQueryResult2010 obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildControllerSpec : object {
    private List`1<string> m_filterList;
    private bool m_includeAgents;
    private string m_name;
    internal String[] m_propertyNameFilters;
    private string m_serviceHostName;
    public List`1<string> PropertyNameFilters { get; public set; }
    public bool IncludeAgents { get; public set; }
    public string Name { get; public set; }
    public string ServiceHostName { get; public set; }
    public BuildControllerSpec(string name, string computer);
    public BuildControllerSpec(string name, string serviceHostName, bool includeAgents);
    public BuildControllerSpec(string name, string serviceHostName, String[] propertyNameFilters, bool includeAgents);
    public sealed virtual List`1<string> get_PropertyNameFilters();
    public sealed virtual void set_PropertyNameFilters(List`1<string> value);
    internal void BeforeSerialize();
    public sealed virtual bool get_IncludeAgents();
    public sealed virtual void set_IncludeAgents(bool value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual string get_ServiceHostName();
    public sealed virtual void set_ServiceHostName(string value);
    internal static BuildControllerSpec FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildControllerSpec obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildControllerSpec2010 : object {
    private bool m_includeAgents;
    private string m_name;
    private string m_serviceHostName;
    public bool IncludeAgents { get; public set; }
    public string Name { get; public set; }
    public string ServiceHostName { get; public set; }
    public BuildControllerSpec2010(BuildControllerSpec spec);
    public bool get_IncludeAgents();
    public void set_IncludeAgents(bool value);
    public string get_Name();
    public void set_Name(string value);
    public string get_ServiceHostName();
    public void set_ServiceHostName(string value);
    internal static BuildControllerSpec2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildControllerSpec2010 obj);
}
public class Microsoft.TeamFoundation.Build.Client.BuildControllerSpecNotUniqueException : BuildServerException {
    public BuildControllerSpecNotUniqueException(string name);
    protected BuildControllerSpecNotUniqueException(SerializationInfo info, StreamingContext context);
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Build.Client.BuildControllerUpdate : Enum {
    public int value__;
    public static BuildControllerUpdate AttachedProperties;
    public static BuildControllerUpdate CustomAssemblyPath;
    public static BuildControllerUpdate Description;
    public static BuildControllerUpdate Enabled;
    public static BuildControllerUpdate MaxConcurrentBuilds;
    public static BuildControllerUpdate Name;
    public static BuildControllerUpdate None;
    public static BuildControllerUpdate Status;
    public static BuildControllerUpdate StatusMessage;
}
[FlagsAttribute]
internal enum Microsoft.TeamFoundation.Build.Client.BuildControllerUpdate2010 : Enum {
    public int value__;
    public static BuildControllerUpdate2010 CustomAssemblyPath;
    public static BuildControllerUpdate2010 Description;
    public static BuildControllerUpdate2010 Enabled;
    public static BuildControllerUpdate2010 MaxConcurrentBuilds;
    public static BuildControllerUpdate2010 Name;
    public static BuildControllerUpdate2010 None;
    public static BuildControllerUpdate2010 Status;
    public static BuildControllerUpdate2010 StatusMessage;
}
public class Microsoft.TeamFoundation.Build.Client.BuildControllerUpdateException : AdministrationException {
    public BuildControllerUpdateException(string message);
    public BuildControllerUpdateException(string message, Exception ex);
    protected BuildControllerUpdateException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildControllerUpdateOptions : object {
    internal PropertyValue[] m_attachedProperties;
    private string m_customAssemblyPath;
    private string m_description;
    private bool m_enabled;
    private BuildControllerUpdate m_fields;
    private int m_maxConcurrentBuilds;
    private string m_name;
    private ControllerStatus m_status;
    private string m_statusMessage;
    private Uri m_uri;
    internal PropertyValue[] AttachedProperties { get; internal set; }
    internal string CustomAssemblyPath { get; internal set; }
    internal string Description { get; internal set; }
    internal bool Enabled { get; internal set; }
    internal BuildControllerUpdate Fields { get; internal set; }
    internal int MaxConcurrentBuilds { get; internal set; }
    internal string Name { get; internal set; }
    internal ControllerStatus Status { get; internal set; }
    internal string StatusMessage { get; internal set; }
    internal Uri Uri { get; internal set; }
    internal PropertyValue[] get_AttachedProperties();
    internal void set_AttachedProperties(PropertyValue[] value);
    internal string get_CustomAssemblyPath();
    internal void set_CustomAssemblyPath(string value);
    internal string get_Description();
    internal void set_Description(string value);
    internal bool get_Enabled();
    internal void set_Enabled(bool value);
    internal BuildControllerUpdate get_Fields();
    internal void set_Fields(BuildControllerUpdate value);
    internal int get_MaxConcurrentBuilds();
    internal void set_MaxConcurrentBuilds(int value);
    internal string get_Name();
    internal void set_Name(string value);
    internal ControllerStatus get_Status();
    internal void set_Status(ControllerStatus value);
    internal string get_StatusMessage();
    internal void set_StatusMessage(string value);
    internal Uri get_Uri();
    internal void set_Uri(Uri value);
    internal static BuildControllerUpdateOptions FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildControllerUpdateOptions obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildControllerUpdateOptions2010 : object {
    private string m_customAssemblyPath;
    private string m_description;
    private bool m_enabled;
    private BuildControllerUpdate2010 m_fields;
    private int m_maxConcurrentBuilds;
    private string m_name;
    private ControllerStatus2010 m_status;
    private string m_statusMessage;
    private Uri m_uri;
    internal string CustomAssemblyPath { get; internal set; }
    internal string Description { get; internal set; }
    internal bool Enabled { get; internal set; }
    internal BuildControllerUpdate2010 Fields { get; internal set; }
    internal int MaxConcurrentBuilds { get; internal set; }
    internal string Name { get; internal set; }
    internal ControllerStatus2010 Status { get; internal set; }
    internal string StatusMessage { get; internal set; }
    internal Uri Uri { get; internal set; }
    public BuildControllerUpdateOptions2010(BuildControllerUpdateOptions updateOptions);
    internal string get_CustomAssemblyPath();
    internal void set_CustomAssemblyPath(string value);
    internal string get_Description();
    internal void set_Description(string value);
    internal bool get_Enabled();
    internal void set_Enabled(bool value);
    internal BuildControllerUpdate2010 get_Fields();
    internal void set_Fields(BuildControllerUpdate2010 value);
    internal int get_MaxConcurrentBuilds();
    internal void set_MaxConcurrentBuilds(int value);
    internal string get_Name();
    internal void set_Name(string value);
    internal ControllerStatus2010 get_Status();
    internal void set_Status(ControllerStatus2010 value);
    internal string get_StatusMessage();
    internal void set_StatusMessage(string value);
    internal Uri get_Uri();
    internal void set_Uri(Uri value);
    internal static BuildControllerUpdateOptions2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildControllerUpdateOptions2010 obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildData : object {
    private string m_buildMachine;
    private string m_buildNumber;
    private string m_buildQuality;
    private string m_buildStatus;
    private int m_buildStatusId;
    private string m_buildType;
    private string m_buildTypeFileUri;
    private string m_buildUri;
    private string m_dropLocation;
    private DateTime m_finishTime;
    private bool m_goodBuild;
    private string m_lastChangedBy;
    private DateTime m_lastChangedOn;
    private string m_logLocation;
    private string m_requestedBy;
    private DateTime m_startTime;
    private string m_teamProject;
    public string BuildMachine { get; public set; }
    public string BuildNumber { get; public set; }
    public string BuildQuality { get; public set; }
    public string BuildStatus { get; public set; }
    public int BuildStatusId { get; public set; }
    public string BuildType { get; public set; }
    public string BuildTypeFileUri { get; public set; }
    public string BuildUri { get; public set; }
    public string DropLocation { get; public set; }
    public DateTime FinishTime { get; public set; }
    public bool GoodBuild { get; public set; }
    public string LastChangedBy { get; public set; }
    public DateTime LastChangedOn { get; public set; }
    public string LogLocation { get; public set; }
    public string RequestedBy { get; public set; }
    public DateTime StartTime { get; public set; }
    public string TeamProject { get; public set; }
    public string get_BuildMachine();
    public void set_BuildMachine(string value);
    public string get_BuildNumber();
    public void set_BuildNumber(string value);
    public string get_BuildQuality();
    public void set_BuildQuality(string value);
    public string get_BuildStatus();
    public void set_BuildStatus(string value);
    public int get_BuildStatusId();
    public void set_BuildStatusId(int value);
    public string get_BuildType();
    public void set_BuildType(string value);
    public string get_BuildTypeFileUri();
    public void set_BuildTypeFileUri(string value);
    public string get_BuildUri();
    public void set_BuildUri(string value);
    public string get_DropLocation();
    public void set_DropLocation(string value);
    public DateTime get_FinishTime();
    public void set_FinishTime(DateTime value);
    public bool get_GoodBuild();
    public void set_GoodBuild(bool value);
    public string get_LastChangedBy();
    public void set_LastChangedBy(string value);
    public DateTime get_LastChangedOn();
    public void set_LastChangedOn(DateTime value);
    public string get_LogLocation();
    public void set_LogLocation(string value);
    public string get_RequestedBy();
    public void set_RequestedBy(string value);
    public DateTime get_StartTime();
    public void set_StartTime(DateTime value);
    public string get_TeamProject();
    public void set_TeamProject(string value);
    internal static BuildData FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildDefinition : object {
    private BuildController m_buildController;
    private BuildServer m_buildServer;
    private VersionControlServer m_versionControl;
    private List`1<IRetentionPolicy> m_retentionPolicyList;
    private List`1<ISchedule> m_scheduleList;
    private List`1<IBuildDefinitionSourceProvider> m_sourceProviderList;
    private string m_id;
    private string m_name;
    private string m_teamProject;
    private object m_lockProperties;
    private AttachedPropertyDictionary m_attachedProperties;
    private Uri m_configurationFolderUri;
    private int m_batchSize;
    private Uri m_buildControllerUri;
    private int m_continuousIntegrationQuietPeriod;
    private DateTime m_dateCreated;
    private string m_defaultDropLocation;
    private string m_description;
    private string m_fullPath;
    internal PropertyValue[] m_internalProperties;
    private Uri m_lastBuildUri;
    private string m_lastGoodBuildLabel;
    private Uri m_lastGoodBuildUri;
    private ProcessTemplate m_process;
    private string m_processParameters;
    private DefinitionQueueStatus m_queueStatus;
    internal RetentionPolicy[] m_retentionPolicies;
    internal Schedule[] m_schedules;
    internal BuildDefinitionSourceProvider[] m_sourceProviders;
    private DefinitionTriggerType m_triggerType;
    private Uri m_uri;
    private WorkspaceTemplate m_workspaceTemplate;
    public string TeamProject { get; }
    public string Name { get; public set; }
    public string FullPath { get; internal set; }
    private IBuildServer Microsoft.TeamFoundation.Build.Client.IBuildDefinition.BuildServer { get; }
    internal BuildServer BuildServer { get; internal set; }
    public IBuildController BuildController { get; public set; }
    public string Id { get; }
    public List`1<IRetentionPolicy> RetentionPolicyList { get; private set; }
    public List`1<ISchedule> Schedules { get; }
    public List`1<IBuildDefinitionSourceProvider> SourceProviders { get; }
    public IWorkspaceTemplate Workspace { get; }
    public IProcessTemplate Process { get; public set; }
    public string ProcessParameters { get; public set; }
    private IDictionary`2<string, object> Microsoft.TeamFoundation.Build.Client.IBuildDefinition.AttachedProperties { get; }
    public AttachedPropertyDictionary AttachedProperties { get; internal set; }
    private ContinuousIntegrationType Microsoft.TeamFoundation.Build.Client.IBuildDefinition.ContinuousIntegrationType { get; private set; }
    private bool Microsoft.TeamFoundation.Build.Client.IBuildDefinition.Enabled { get; private set; }
    internal VersionControlServer VersionControl { get; }
    public int BatchSize { get; public set; }
    public Uri BuildControllerUri { get; internal set; }
    public int ContinuousIntegrationQuietPeriod { get; public set; }
    public DateTime DateCreated { get; }
    public string DefaultDropLocation { get; public set; }
    public string Description { get; public set; }
    internal PropertyValue[] InternalProperties { get; internal set; }
    public Uri LastBuildUri { get; }
    public string LastGoodBuildLabel { get; }
    public Uri LastGoodBuildUri { get; }
    public DefinitionQueueStatus QueueStatus { get; public set; }
    public DefinitionTriggerType TriggerType { get; public set; }
    public Uri Uri { get; internal set; }
    internal BuildDefinition(BuildServer server, string teamProject);
    internal BuildDefinition(BuildServer server, string teamProject, Item serverItem);
    internal BuildDefinition(BuildServer server, string teamProject, string name);
    internal BuildDefinition(BuildDefinition2010 definition);
    internal void AfterDeserialize();
    private void InitSourceProviders();
    public sealed virtual string get_TeamProject();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual string get_FullPath();
    internal void set_FullPath(string value);
    private sealed virtual override IBuildServer Microsoft.TeamFoundation.Build.Client.IBuildDefinition.get_BuildServer();
    internal BuildServer get_BuildServer();
    internal void set_BuildServer(BuildServer value);
    public sealed virtual IBuildController get_BuildController();
    public sealed virtual void set_BuildController(IBuildController value);
    public sealed virtual string get_Id();
    public sealed virtual List`1<IRetentionPolicy> get_RetentionPolicyList();
    private void set_RetentionPolicyList(List`1<IRetentionPolicy> value);
    public sealed virtual List`1<ISchedule> get_Schedules();
    public sealed virtual List`1<IBuildDefinitionSourceProvider> get_SourceProviders();
    public sealed virtual IWorkspaceTemplate get_Workspace();
    public sealed virtual IProcessTemplate get_Process();
    public sealed virtual void set_Process(IProcessTemplate value);
    public sealed virtual string get_ProcessParameters();
    public sealed virtual void set_ProcessParameters(string value);
    private sealed virtual override IDictionary`2<string, object> Microsoft.TeamFoundation.Build.Client.IBuildDefinition.get_AttachedProperties();
    public AttachedPropertyDictionary get_AttachedProperties();
    internal void set_AttachedProperties(AttachedPropertyDictionary value);
    private sealed virtual override ContinuousIntegrationType Microsoft.TeamFoundation.Build.Client.IBuildDefinition.get_ContinuousIntegrationType();
    private sealed virtual override void Microsoft.TeamFoundation.Build.Client.IBuildDefinition.set_ContinuousIntegrationType(ContinuousIntegrationType value);
    private sealed virtual override bool Microsoft.TeamFoundation.Build.Client.IBuildDefinition.get_Enabled();
    private sealed virtual override void Microsoft.TeamFoundation.Build.Client.IBuildDefinition.set_Enabled(bool value);
    public sealed virtual ISchedule AddSchedule();
    public sealed virtual IRetentionPolicy AddRetentionPolicy(BuildReason reason, BuildStatus status, int numberToKeep, DeleteOptions deleteOptions);
    public sealed virtual IBuildRequest CreateBuildRequest();
    public sealed virtual void Delete();
    public sealed virtual void Refresh(String[] propertyNameFilters, QueryOptions queryOptions);
    public sealed virtual void Refresh();
    public sealed virtual void CopyFrom(IBuildDefinition source);
    public sealed virtual void Save();
    internal void PrepareToSave();
    public sealed virtual IBuildDefinitionSpec CreateSpec();
    public sealed virtual IBuildDetail[] QueryBuilds();
    public sealed virtual IBuildDetail CreateManualBuild(string buildNumber);
    public sealed virtual IBuildDetail CreateManualBuild(string buildNumber, string dropLocation);
    public sealed virtual IBuildDetail CreateManualBuild(string buildNumber, string dropLocation, BuildStatus buildStatus, IBuildController controller, string requestedFor);
    internal VersionControlServer get_VersionControl();
    internal Uri GetConfigurationFolderUri(string configurationFolderPath);
    internal string GetConfigurationFolderPath(Uri configurationFolderUri);
    public sealed virtual int get_BatchSize();
    public sealed virtual void set_BatchSize(int value);
    public sealed virtual Uri get_BuildControllerUri();
    internal void set_BuildControllerUri(Uri value);
    public sealed virtual int get_ContinuousIntegrationQuietPeriod();
    public sealed virtual void set_ContinuousIntegrationQuietPeriod(int value);
    public sealed virtual DateTime get_DateCreated();
    public sealed virtual string get_DefaultDropLocation();
    public sealed virtual void set_DefaultDropLocation(string value);
    public sealed virtual string get_Description();
    public sealed virtual void set_Description(string value);
    internal PropertyValue[] get_InternalProperties();
    internal void set_InternalProperties(PropertyValue[] value);
    public sealed virtual Uri get_LastBuildUri();
    public sealed virtual string get_LastGoodBuildLabel();
    public sealed virtual Uri get_LastGoodBuildUri();
    public sealed virtual DefinitionQueueStatus get_QueueStatus();
    public sealed virtual void set_QueueStatus(DefinitionQueueStatus value);
    public sealed virtual DefinitionTriggerType get_TriggerType();
    public sealed virtual void set_TriggerType(DefinitionTriggerType value);
    public sealed virtual Uri get_Uri();
    internal void set_Uri(Uri value);
    internal static BuildDefinition FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildDefinition obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildDefinition2010 : BuildGroupItem2010 {
    [CompilerGeneratedAttribute]
private BuildServer <BuildServer>k__BackingField;
    private Uri m_buildControllerUri;
    private Uri m_configurationFolderUri;
    private int m_continuousIntegrationQuietPeriod;
    private ContinuousIntegrationType m_continuousIntegrationType;
    private Uri m_defaultBuildAgentUri;
    private string m_defaultDropLocation;
    private string m_description;
    private bool m_enabled;
    private Uri m_lastBuildUri;
    private string m_lastGoodBuildLabel;
    private Uri m_lastGoodBuildUri;
    private int m_maxTimeout;
    private ProcessTemplate2010 m_process;
    private string m_processParameters;
    internal RetentionPolicy2010[] m_retentionPolicies;
    internal Schedule2010[] m_schedules;
    private WorkspaceTemplate2010 m_workspaceTemplate;
    internal BuildServer BuildServer { get; internal set; }
    public Uri BuildControllerUri { get; public set; }
    public Uri ConfigurationFolderUri { get; public set; }
    public int ContinuousIntegrationQuietPeriod { get; public set; }
    public ContinuousIntegrationType ContinuousIntegrationType { get; public set; }
    public Uri DefaultBuildAgentUri { get; public set; }
    public string DefaultDropLocation { get; public set; }
    public string Description { get; public set; }
    public bool Enabled { get; public set; }
    public Uri LastBuildUri { get; public set; }
    public string LastGoodBuildLabel { get; public set; }
    public Uri LastGoodBuildUri { get; public set; }
    public int MaxTimeout { get; public set; }
    public ProcessTemplate2010 Process { get; public set; }
    public string ProcessParameters { get; public set; }
    public RetentionPolicy2010[] RetentionPolicies { get; public set; }
    public Schedule2010[] Schedules { get; public set; }
    public WorkspaceTemplate2010 WorkspaceTemplate { get; public set; }
    internal BuildDefinition2010(BuildServerVersion version, BuildDefinition definition);
    [CompilerGeneratedAttribute]
internal BuildServer get_BuildServer();
    [CompilerGeneratedAttribute]
internal void set_BuildServer(BuildServer value);
    public Uri get_BuildControllerUri();
    public void set_BuildControllerUri(Uri value);
    public Uri get_ConfigurationFolderUri();
    public void set_ConfigurationFolderUri(Uri value);
    public int get_ContinuousIntegrationQuietPeriod();
    public void set_ContinuousIntegrationQuietPeriod(int value);
    public ContinuousIntegrationType get_ContinuousIntegrationType();
    public void set_ContinuousIntegrationType(ContinuousIntegrationType value);
    public Uri get_DefaultBuildAgentUri();
    public void set_DefaultBuildAgentUri(Uri value);
    public string get_DefaultDropLocation();
    public void set_DefaultDropLocation(string value);
    public string get_Description();
    public void set_Description(string value);
    public bool get_Enabled();
    public void set_Enabled(bool value);
    public Uri get_LastBuildUri();
    public void set_LastBuildUri(Uri value);
    public string get_LastGoodBuildLabel();
    public void set_LastGoodBuildLabel(string value);
    public Uri get_LastGoodBuildUri();
    public void set_LastGoodBuildUri(Uri value);
    public int get_MaxTimeout();
    public void set_MaxTimeout(int value);
    public ProcessTemplate2010 get_Process();
    public void set_Process(ProcessTemplate2010 value);
    public string get_ProcessParameters();
    public void set_ProcessParameters(string value);
    public RetentionPolicy2010[] get_RetentionPolicies();
    public void set_RetentionPolicies(RetentionPolicy2010[] value);
    public Schedule2010[] get_Schedules();
    public void set_Schedules(Schedule2010[] value);
    public WorkspaceTemplate2010 get_WorkspaceTemplate();
    public void set_WorkspaceTemplate(WorkspaceTemplate2010 value);
    internal static BuildDefinition2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal virtual void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildDefinition2010 obj);
}
public class Microsoft.TeamFoundation.Build.Client.BuildDefinitionAlreadyExistsException : BuildServerException {
    public BuildDefinitionAlreadyExistsException(string message);
    public BuildDefinitionAlreadyExistsException(string message, Exception ex);
    protected BuildDefinitionAlreadyExistsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildDefinitionDisabledException : BuildServerException {
    public BuildDefinitionDisabledException(string message);
    public BuildDefinitionDisabledException(string message, Exception ex);
    protected BuildDefinitionDisabledException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildDefinitionDoesNotExistException : BuildServerException {
    public BuildDefinitionDoesNotExistException(string message);
    public BuildDefinitionDoesNotExistException(string message, Exception ex);
    protected BuildDefinitionDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildDefinitionFailureException : BuildServerException {
    public BuildDefinitionFailureException(string teamProject, string name, IFailure failure);
    protected BuildDefinitionFailureException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildDefinitionNotFoundException : BuildServerException {
    public BuildDefinitionNotFoundException(string teamProject, string name);
    protected BuildDefinitionNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildDefinitionNotFoundForUriException : BuildServerException {
    public BuildDefinitionNotFoundForUriException(Uri buildDefinitionUri, string userName);
    protected BuildDefinitionNotFoundForUriException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildDefinitionQueryResult : object {
    internal BuildAgent[] m_agents;
    internal BuildController[] m_controllers;
    internal BuildDefinition[] m_definitions;
    internal BuildServiceHost[] m_serviceHosts;
    public IBuildDefinition[] Definitions { get; }
    public IFailure[] Failures { get; }
    internal BuildDefinitionQueryResult(IBuildDefinition definition);
    internal static BuildDefinitionQueryResult FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildDefinitionQueryResult obj);
    public sealed virtual IBuildDefinition[] get_Definitions();
    public sealed virtual IFailure[] get_Failures();
    internal void AfterDeserialize();
}
internal class Microsoft.TeamFoundation.Build.Client.BuildDefinitionQueryResult2010 : object {
    internal BuildAgent2010[] m_agents;
    internal BuildController2010[] m_controllers;
    internal BuildDefinition2010[] m_definitions;
    internal Failure2010[] m_internalFailures;
    internal BuildServiceHost2010[] m_serviceHosts;
    internal Failure2010[] InternalFailures { get; }
    internal Failure2010[] get_InternalFailures();
    internal static BuildDefinitionQueryResult2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildDefinitionQueryResult2010 obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildDefinitionSourceProvider : object {
    private object m_lockFields;
    private Dictionary`2<string, string> m_fields;
    internal NameValueField[] m_internalFields;
    private string m_name;
    private DefinitionTriggerType m_supportedTriggerTypes;
    public IDictionary`2<string, string> Fields { get; }
    internal NameValueField[] InternalFields { get; }
    public string Name { get; public set; }
    public DefinitionTriggerType SupportedTriggerTypes { get; public set; }
    public BuildDefinitionSourceProvider(string name, DefinitionTriggerType supportedTriggerTypes);
    public sealed virtual IDictionary`2<string, string> get_Fields();
    internal void PrepareToSave();
    private Dictionary`2<string, string> SourceProviderFieldsToDictionary(NameValueField[] fields);
    internal NameValueField[] get_InternalFields();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual DefinitionTriggerType get_SupportedTriggerTypes();
    public void set_SupportedTriggerTypes(DefinitionTriggerType value);
    internal static BuildDefinitionSourceProvider FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildDefinitionSourceProvider obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildDefinitionSpec : object {
    private List`1<string> m_filterList;
    private string m_name;
    private string m_teamProject;
    private string m_fullPath;
    private QueryOptions m_options;
    internal String[] m_propertyNameFilters;
    private DefinitionTriggerType m_triggerType;
    public string FullPath { get; }
    public string Name { get; public set; }
    public string TeamProject { get; internal set; }
    private ContinuousIntegrationType Microsoft.TeamFoundation.Build.Client.IBuildDefinitionSpec.ContinuousIntegrationType { get; private set; }
    public List`1<string> PropertyNameFilters { get; public set; }
    public QueryOptions Options { get; public set; }
    public DefinitionTriggerType TriggerType { get; public set; }
    internal BuildDefinitionSpec(IBuildDefinition definition);
    internal BuildDefinitionSpec(string teamProject);
    internal BuildDefinitionSpec(string teamProject, string definitionName);
    internal BuildDefinitionSpec(string teamProject, string definitionName, String[] propertyNameFilters);
    public sealed virtual string get_FullPath();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual string get_TeamProject();
    internal void set_TeamProject(string value);
    private sealed virtual override ContinuousIntegrationType Microsoft.TeamFoundation.Build.Client.IBuildDefinitionSpec.get_ContinuousIntegrationType();
    private sealed virtual override void Microsoft.TeamFoundation.Build.Client.IBuildDefinitionSpec.set_ContinuousIntegrationType(ContinuousIntegrationType value);
    public sealed virtual List`1<string> get_PropertyNameFilters();
    public sealed virtual void set_PropertyNameFilters(List`1<string> value);
    internal void BeforeSerialize();
    public sealed virtual QueryOptions get_Options();
    public sealed virtual void set_Options(QueryOptions value);
    public sealed virtual DefinitionTriggerType get_TriggerType();
    public sealed virtual void set_TriggerType(DefinitionTriggerType value);
    internal static BuildDefinitionSpec FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildDefinitionSpec obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildDefinitionSpec2010 : BuildGroupItemSpec2010 {
    private ContinuousIntegrationType m_continuousIntegrationType;
    private QueryOptions2010 m_options;
    public ContinuousIntegrationType ContinuousIntegrationType { get; public set; }
    public QueryOptions2010 Options { get; public set; }
    public BuildDefinitionSpec2010(string teamProject);
    public BuildDefinitionSpec2010(string teamProject, string name);
    public BuildDefinitionSpec2010(IBuildDefinition definition);
    internal BuildDefinitionSpec2010(BuildDefinitionSpec spec);
    internal void AfterDeserialize();
    public ContinuousIntegrationType get_ContinuousIntegrationType();
    public void set_ContinuousIntegrationType(ContinuousIntegrationType value);
    public QueryOptions2010 get_Options();
    public void set_Options(QueryOptions2010 value);
    internal static BuildDefinitionSpec2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal virtual void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildDefinitionSpec2010 obj);
}
public class Microsoft.TeamFoundation.Build.Client.BuildDefinitionSpecNotUniqueException : BuildServerException {
    public BuildDefinitionSpecNotUniqueException(string teamProject, string name);
    protected BuildDefinitionSpecNotUniqueException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildDefinitionUpdateException : BuildServerException {
    public BuildDefinitionUpdateException(string message);
    public BuildDefinitionUpdateException(string message, Exception ex);
    protected BuildDefinitionUpdateException(SerializationInfo info, StreamingContext context);
}
public static class Microsoft.TeamFoundation.Build.Client.BuildDefinitionXmlSerializer : object {
    public static void ToXml(IBuildDefinition definition, XmlWriter writer);
    public static IBuildDefinition FromXml(IBuildServer buildServer, XmlReader reader);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildDeletionResult : object {
    private Failure m_dropLocationFailure;
    private Failure m_labelFailure;
    private Failure m_symbolsFailure;
    private Failure m_testResultFailure;
    public IFailure LabelFailure { get; }
    public IFailure TestResultFailure { get; }
    public IFailure DropLocationFailure { get; }
    public IFailure SymbolsFailure { get; }
    public bool Successful { get; }
    internal BuildDeletionResult(BuildDeletionResult2010 result2010);
    public sealed virtual IFailure get_LabelFailure();
    public sealed virtual IFailure get_TestResultFailure();
    public sealed virtual IFailure get_DropLocationFailure();
    public sealed virtual IFailure get_SymbolsFailure();
    public sealed virtual bool get_Successful();
    internal static BuildDeletionResult FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildDeletionResult obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildDeletionResult2010 : object {
    private Failure2010 m_dropLocationFailure;
    private Failure2010 m_labelFailure;
    private Failure2010 m_symbolsFailure;
    private Failure2010 m_testResultFailure;
    public Failure2010 DropLocationFailure { get; public set; }
    public Failure2010 LabelFailure { get; public set; }
    public Failure2010 SymbolsFailure { get; public set; }
    public Failure2010 TestResultFailure { get; public set; }
    public Failure2010 get_DropLocationFailure();
    public void set_DropLocationFailure(Failure2010 value);
    public Failure2010 get_LabelFailure();
    public void set_LabelFailure(Failure2010 value);
    public Failure2010 get_SymbolsFailure();
    public void set_SymbolsFailure(Failure2010 value);
    public Failure2010 get_TestResultFailure();
    public void set_TestResultFailure(Failure2010 value);
    internal static BuildDeletionResult2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildDeletionResult2010 obj);
}
public class Microsoft.TeamFoundation.Build.Client.BuildDeployment : object {
    private Dictionary`2<string, string> m_properties;
    private BuildSummary m_deployment;
    private string m_deploymentDefinitionName;
    internal PropertyValue[] m_internalProperties;
    private BuildSummary m_source;
    private Uri m_websiteUrl;
    public Dictionary`2<string, string> Properties { get; }
    public BuildSummary Deployment { get; }
    public string DeploymentDefinitionName { get; }
    internal PropertyValue[] InternalProperties { get; internal set; }
    public BuildSummary Source { get; }
    public Uri WebsiteUrl { get; }
    public Dictionary`2<string, string> get_Properties();
    public BuildSummary get_Deployment();
    public string get_DeploymentDefinitionName();
    internal PropertyValue[] get_InternalProperties();
    internal void set_InternalProperties(PropertyValue[] value);
    public BuildSummary get_Source();
    public Uri get_WebsiteUrl();
    [EditorBrowsableAttribute("1")]
public static BuildDeployment FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, BuildDeployment obj);
}
public class Microsoft.TeamFoundation.Build.Client.BuildDeploymentSpec : object {
    private string m_definitionPath;
    private BuildStatus m_deploymentStatus;
    private string m_environmentName;
    private int m_maxDeployments;
    private DateTime m_maxFinishTime;
    private DateTime m_minFinishTime;
    private BuildQueryOrder m_queryOrder;
    private string m_requestedFor;
    private string m_teamProject;
    public string DefinitionPath { get; public set; }
    public BuildStatus DeploymentStatus { get; public set; }
    public string EnvironmentName { get; public set; }
    public int MaxDeployments { get; public set; }
    public DateTime MaxFinishTime { get; public set; }
    public DateTime MinFinishTime { get; public set; }
    public BuildQueryOrder QueryOrder { get; public set; }
    public string RequestedFor { get; public set; }
    public string TeamProject { get; public set; }
    public string get_DefinitionPath();
    public void set_DefinitionPath(string value);
    public BuildStatus get_DeploymentStatus();
    public void set_DeploymentStatus(BuildStatus value);
    public string get_EnvironmentName();
    public void set_EnvironmentName(string value);
    public int get_MaxDeployments();
    public void set_MaxDeployments(int value);
    public DateTime get_MaxFinishTime();
    public void set_MaxFinishTime(DateTime value);
    public DateTime get_MinFinishTime();
    public void set_MinFinishTime(DateTime value);
    public BuildQueryOrder get_QueryOrder();
    public void set_QueryOrder(BuildQueryOrder value);
    public string get_RequestedFor();
    public void set_RequestedFor(string value);
    public string get_TeamProject();
    public void set_TeamProject(string value);
    [EditorBrowsableAttribute("1")]
public static BuildDeploymentSpec FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, BuildDeploymentSpec obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildDeploymentWebService : TfsHttpClient {
    private TeamFoundationStrongBoxService m_strongBox;
    private IBuildServer m_buildServer;
    protected Guid CollectionServiceIdentifier { get; }
    protected string ComponentName { get; }
    protected string ServiceType { get; }
    public BuildDeploymentWebService(TfsTeamProjectCollection connection);
    public virtual object GetService(Type serviceType);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ComponentName();
    protected virtual string get_ServiceType();
    public void AddBuildDeploymentProperty(Uri deploymentUri, string key, string value);
    public IAsyncResult BeginAddBuildDeploymentProperty(Uri deploymentUri, string key, string value, AsyncCallback callback, object state);
    public IAsyncResult BeginCreateBuildDeployment(Uri deploymentUri, Uri sourceUri, string environmentName, AsyncCallback callback, object state);
    public void ConnectAzureCloudApp(string teamProject, string subscriptionId, string azurePublishProfile);
    public void ConnectAzureWebsite(string teamProject, string subscriptionId, string webspace, string website);
    protected virtual Exception ConvertException(SoapException exception);
    public BuildDeployment CreateBuildDeployment(Uri deploymentUri, Uri sourceUri, string environmentName);
    public DeploymentEnvironmentMetadata CreateDeploymentEnvironment(DeploymentEnvironmentCreationData deploymentEnvironmentCreationData);
    public void DeleteDeploymentEnvironment(string environmentName, string teamProject);
    public void DisconnectAzureCloudApp(string teamProject, string hostedServiceName);
    public void DisconnectAzureWebsite(string teamProject, string website);
    public void EndAddBuildDeploymentProperty(IAsyncResult result);
    public BuildDeployment EndCreateBuildDeployment(IAsyncResult result);
    public DeploymentEnvironment GetDeploymentEnvironment(string environmentName, string teamProject);
    public DeploymentEnvironmentMetadata[] QueryDeploymentEnvironments(string teamProject);
    public BuildDeployment[] QueryDeployments(BuildDeploymentSpec spec);
    public BuildDeployment[] QueryDeploymentsByUri(Uri[] deploymentUris);
    public BuildQueueQueryResult Redeploy(Uri deploymentUri, AzureDeploymentSlot deploymentSlot, bool updateSlot);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildDetail : object {
    [CompilerGeneratedAttribute]
private StatusChangedEventHandler StatusChanging;
    [CompilerGeneratedAttribute]
private StatusChangedEventHandler StatusChanged;
    [CompilerGeneratedAttribute]
private PollingCompletedEventHandler PollingCompleted;
    private string m_requestedBy;
    private string m_requestedFor;
    private string m_shelvesetName;
    private IBuildController m_buildController;
    private BuildUpdateOptions m_lastSnapshot;
    private BuildServer m_buildServer;
    private BuildDefinition m_buildDefinition;
    private BuildInformation m_informationNodes;
    private Polling m_polling;
    private VersionControlServer m_versionControl;
    private Exception m_pollingException;
    private List`1<int> m_requestIds;
    private List`1<IQueuedBuild> m_requests;
    internal object m_syncSave;
    private Uri m_buildControllerUri;
    private Uri m_buildDefinitionUri;
    private string m_buildNumber;
    private BuildPhaseStatus m_compilationStatus;
    private Nullable`1<long> m_containerId;
    private string m_dropLocation;
    private string m_dropLocationRoot;
    private DateTime m_finishTime;
    internal BuildInformationNode[] m_internalInformation;
    private bool m_isDeleted;
    private bool m_keepForever;
    private string m_labelName;
    private string m_lastChangedBy;
    private string m_lastChangedByDisplayName;
    private DateTime m_lastChangedOn;
    private string m_logLocation;
    private string m_processParameters;
    private string m_quality;
    internal Int32[] m_queueIds;
    private BuildReason m_reason;
    private string m_sourceGetVersion;
    private DateTime m_startTime;
    private BuildStatus m_status;
    private string m_teamProject;
    private BuildPhaseStatus m_testStatus;
    private Uri m_uri;
    public IBuildServer BuildServer { get; public set; }
    public IBuildController BuildController { get; internal set; }
    public IBuildDefinition BuildDefinition { get; internal set; }
    public bool BuildFinished { get; }
    public IBuildInformation Information { get; private set; }
    private ReadOnlyCollection`1<int> Microsoft.TeamFoundation.Build.Client.IBuildDetail.RequestIds { get; }
    internal List`1<IQueuedBuild> Requests { get; }
    private ReadOnlyCollection`1<IQueuedBuild> Microsoft.TeamFoundation.Build.Client.IBuildDetail.Requests { get; }
    public string RequestedBy { get; }
    public string RequestedFor { get; }
    public string ShelvesetName { get; internal set; }
    internal VersionControlServer VersionControl { get; }
    internal BuildServer InternalBuildServer { get; }
    public Uri BuildControllerUri { get; internal set; }
    public Uri BuildDefinitionUri { get; internal set; }
    public string BuildNumber { get; public set; }
    public BuildPhaseStatus CompilationStatus { get; public set; }
    public Nullable`1<long> ContainerId { get; }
    public string DropLocation { get; public set; }
    public string DropLocationRoot { get; }
    public DateTime FinishTime { get; }
    internal BuildInformationNode[] InternalInformation { get; internal set; }
    public bool IsDeleted { get; }
    public bool KeepForever { get; public set; }
    public string LabelName { get; public set; }
    public string LastChangedBy { get; }
    public string LastChangedByDisplayName { get; }
    public DateTime LastChangedOn { get; }
    public string LogLocation { get; public set; }
    public string ProcessParameters { get; }
    public string Quality { get; public set; }
    public BuildReason Reason { get; }
    public string SourceGetVersion { get; public set; }
    public DateTime StartTime { get; }
    public BuildStatus Status { get; public set; }
    public string TeamProject { get; }
    public BuildPhaseStatus TestStatus { get; public set; }
    public Uri Uri { get; }
    internal BuildDetail(BuildDetail2010 build2010);
    internal void AfterDeserialize();
    public sealed virtual IBuildServer get_BuildServer();
    public void set_BuildServer(IBuildServer value);
    public sealed virtual IBuildController get_BuildController();
    internal void set_BuildController(IBuildController value);
    public sealed virtual IBuildDefinition get_BuildDefinition();
    internal void set_BuildDefinition(IBuildDefinition value);
    public sealed virtual bool get_BuildFinished();
    public sealed virtual IBuildInformation get_Information();
    private void set_Information(IBuildInformation value);
    private sealed virtual override ReadOnlyCollection`1<int> Microsoft.TeamFoundation.Build.Client.IBuildDetail.get_RequestIds();
    internal List`1<IQueuedBuild> get_Requests();
    private sealed virtual override ReadOnlyCollection`1<IQueuedBuild> Microsoft.TeamFoundation.Build.Client.IBuildDetail.get_Requests();
    public sealed virtual string get_RequestedBy();
    public sealed virtual string get_RequestedFor();
    public sealed virtual string get_ShelvesetName();
    internal void set_ShelvesetName(string value);
    public sealed virtual IBuildDeletionResult Delete();
    public sealed virtual IBuildDeletionResult Delete(DeleteOptions options);
    public sealed virtual void FinalizeStatus();
    public sealed virtual void FinalizeStatus(BuildStatus status);
    public sealed virtual void RefreshMinimalDetails();
    public sealed virtual void RefreshAllDetails();
    public sealed virtual void Refresh(String[] informationTypes, QueryOptions queryOptions);
    public sealed virtual Guid RequestIntermediateLogs();
    internal void Copy(IBuildDetail build, String[] informationTypes, QueryOptions queryOptions);
    private void SetBuildInformation(IBuildInformation information);
    public sealed virtual void Save();
    public sealed virtual void Stop();
    public sealed virtual void Connect(int pollingInterval, int timeout, ISynchronizeInvoke synchronizingObject);
    public sealed virtual void Connect(int pollingInterval, ISynchronizeInvoke synchronizingObject);
    public sealed virtual void Connect();
    public sealed virtual void Disconnect();
    public sealed virtual void Wait();
    public sealed virtual bool Wait(TimeSpan pollingInterval, TimeSpan timeout);
    public sealed virtual bool Wait(TimeSpan pollingInterval, TimeSpan timeout, ISynchronizeInvoke synchronizingObject);
    internal void PollingRefresh(PollingAlgorithm polling);
    private void UpdateInternal(PollingAlgorithm polling, IBuildDetail refreshedBuild, bool changed, Exception pollingException);
    internal bool ShouldPollingContinue(PollingAlgorithm polling);
    internal BuildUpdateOptions GetUpdateOptions();
    internal void SetUpdateOptions(BuildUpdateOptions snapshot);
    private BuildUpdateOptions GetSnapshot();
    private BuildUpdate CompareSnapshots(BuildUpdateOptions originalValues, BuildUpdateOptions modifiedValues);
    private bool ExceptionStopsPolling(Exception e);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StatusChanging(StatusChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StatusChanging(StatusChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StatusChanged(StatusChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StatusChanged(StatusChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PollingCompleted(PollingCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PollingCompleted(PollingCompletedEventHandler value);
    private void OnBeforeStatusChanged(StatusChangedEventArgs e);
    private void OnAfterStatusChanged(StatusChangedEventArgs e);
    private void OnPollingCompleted(PollingCompletedEventArgs e);
    internal VersionControlServer get_VersionControl();
    internal BuildServer get_InternalBuildServer();
    private bool IsDirty(BuildUpdateOptions snapshot, BuildUpdate dirtyFlag);
    public sealed virtual Uri get_BuildControllerUri();
    internal void set_BuildControllerUri(Uri value);
    public sealed virtual Uri get_BuildDefinitionUri();
    internal void set_BuildDefinitionUri(Uri value);
    public sealed virtual string get_BuildNumber();
    public sealed virtual void set_BuildNumber(string value);
    public sealed virtual BuildPhaseStatus get_CompilationStatus();
    public sealed virtual void set_CompilationStatus(BuildPhaseStatus value);
    public sealed virtual Nullable`1<long> get_ContainerId();
    public sealed virtual string get_DropLocation();
    public sealed virtual void set_DropLocation(string value);
    public sealed virtual string get_DropLocationRoot();
    public sealed virtual DateTime get_FinishTime();
    internal BuildInformationNode[] get_InternalInformation();
    internal void set_InternalInformation(BuildInformationNode[] value);
    public sealed virtual bool get_IsDeleted();
    public sealed virtual bool get_KeepForever();
    public sealed virtual void set_KeepForever(bool value);
    public sealed virtual string get_LabelName();
    public sealed virtual void set_LabelName(string value);
    public sealed virtual string get_LastChangedBy();
    public sealed virtual string get_LastChangedByDisplayName();
    public sealed virtual DateTime get_LastChangedOn();
    public sealed virtual string get_LogLocation();
    public sealed virtual void set_LogLocation(string value);
    public sealed virtual string get_ProcessParameters();
    public sealed virtual string get_Quality();
    public sealed virtual void set_Quality(string value);
    public sealed virtual BuildReason get_Reason();
    public sealed virtual string get_SourceGetVersion();
    public sealed virtual void set_SourceGetVersion(string value);
    public sealed virtual DateTime get_StartTime();
    public sealed virtual BuildStatus get_Status();
    public sealed virtual void set_Status(BuildStatus value);
    public sealed virtual string get_TeamProject();
    public sealed virtual BuildPhaseStatus get_TestStatus();
    public sealed virtual void set_TestStatus(BuildPhaseStatus value);
    public sealed virtual Uri get_Uri();
    internal static BuildDetail FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildDetail obj);
    [CompilerGeneratedAttribute]
private void <ShouldPollingContinue>b__50_0();
}
internal class Microsoft.TeamFoundation.Build.Client.BuildDetail2010 : object {
    [CompilerGeneratedAttribute]
private BuildServer <BuildServer>k__BackingField;
    private Uri m_buildAgentUri;
    private Uri m_buildControllerUri;
    private Uri m_buildDefinitionUri;
    private string m_buildNumber;
    private BuildPhaseStatus2010 m_compilationStatus;
    private Uri m_configurationFolderUri;
    private string m_dropLocation;
    private string m_dropLocationRoot;
    private DateTime m_finishTime;
    internal BuildInformationNode2010[] m_internalInformation;
    private bool m_isDeleted;
    private bool m_keepForever;
    private string m_labelName;
    private string m_lastChangedBy;
    private DateTime m_lastChangedOn;
    private string m_logLocation;
    private string m_processParameters;
    private string m_quality;
    private BuildReason2010 m_reason;
    private string m_requestedBy;
    private string m_requestedFor;
    private string m_shelvesetName;
    private string m_sourceGetVersion;
    private DateTime m_startTime;
    private BuildStatus2010 m_status;
    private string m_teamProject;
    private BuildPhaseStatus2010 m_testStatus;
    private Uri m_uri;
    internal BuildServer BuildServer { get; internal set; }
    internal Uri BuildAgentUri { get; }
    public Uri BuildControllerUri { get; internal set; }
    public Uri BuildDefinitionUri { get; internal set; }
    public string BuildNumber { get; public set; }
    public BuildPhaseStatus2010 CompilationStatus { get; public set; }
    public string DropLocation { get; public set; }
    public string DropLocationRoot { get; }
    public DateTime FinishTime { get; }
    internal BuildInformationNode2010[] InternalInformation { get; internal set; }
    public bool IsDeleted { get; }
    public bool KeepForever { get; public set; }
    public string LabelName { get; public set; }
    public string LastChangedBy { get; }
    public DateTime LastChangedOn { get; }
    public string LogLocation { get; public set; }
    public string ProcessParameters { get; }
    public string Quality { get; public set; }
    public BuildReason2010 Reason { get; }
    public string RequestedBy { get; }
    public string RequestedFor { get; }
    public string ShelvesetName { get; }
    public string SourceGetVersion { get; public set; }
    public DateTime StartTime { get; }
    public BuildStatus2010 Status { get; public set; }
    public string TeamProject { get; }
    public BuildPhaseStatus2010 TestStatus { get; public set; }
    public Uri Uri { get; }
    [CompilerGeneratedAttribute]
internal BuildServer get_BuildServer();
    [CompilerGeneratedAttribute]
internal void set_BuildServer(BuildServer value);
    internal Uri get_BuildAgentUri();
    public Uri get_BuildControllerUri();
    internal void set_BuildControllerUri(Uri value);
    public Uri get_BuildDefinitionUri();
    internal void set_BuildDefinitionUri(Uri value);
    public string get_BuildNumber();
    public void set_BuildNumber(string value);
    public BuildPhaseStatus2010 get_CompilationStatus();
    public void set_CompilationStatus(BuildPhaseStatus2010 value);
    public string get_DropLocation();
    public void set_DropLocation(string value);
    public string get_DropLocationRoot();
    public DateTime get_FinishTime();
    internal BuildInformationNode2010[] get_InternalInformation();
    internal void set_InternalInformation(BuildInformationNode2010[] value);
    public bool get_IsDeleted();
    public bool get_KeepForever();
    public void set_KeepForever(bool value);
    public string get_LabelName();
    public void set_LabelName(string value);
    public string get_LastChangedBy();
    public DateTime get_LastChangedOn();
    public string get_LogLocation();
    public void set_LogLocation(string value);
    public string get_ProcessParameters();
    public string get_Quality();
    public void set_Quality(string value);
    public BuildReason2010 get_Reason();
    public string get_RequestedBy();
    public string get_RequestedFor();
    public string get_ShelvesetName();
    public string get_SourceGetVersion();
    public void set_SourceGetVersion(string value);
    public DateTime get_StartTime();
    public BuildStatus2010 get_Status();
    public void set_Status(BuildStatus2010 value);
    public string get_TeamProject();
    public BuildPhaseStatus2010 get_TestStatus();
    public void set_TestStatus(BuildPhaseStatus2010 value);
    public Uri get_Uri();
    internal static BuildDetail2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildDetail2010 obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildDetailSpec : object {
    private List`1<Uri> m_definitionUris;
    private BuildDefinitionSpec m_definitionSpec;
    private string m_buildNumber;
    private object m_definitionFilter;
    private DefinitionFilterType m_definitionFilterType;
    internal String[] m_informationTypes;
    private int m_maxBuildsPerDefinition;
    private DateTime m_maxFinishTime;
    private DateTime m_minChangedTime;
    private DateTime m_minFinishTime;
    private string m_quality;
    private QueryDeletedOption m_queryDeletedOption;
    private QueryOptions m_queryOptions;
    private BuildQueryOrder m_queryOrder;
    private BuildReason m_reason;
    private string m_requestedFor;
    private BuildStatus m_status;
    public IList`1<Uri> DefinitionUris { get; }
    public IBuildDefinitionSpec DefinitionSpec { get; }
    public string BuildNumber { get; public set; }
    public String[] InformationTypes { get; public set; }
    public int MaxBuildsPerDefinition { get; public set; }
    public DateTime MaxFinishTime { get; public set; }
    public DateTime MinChangedTime { get; public set; }
    public DateTime MinFinishTime { get; public set; }
    public string Quality { get; public set; }
    public QueryDeletedOption QueryDeletedOption { get; public set; }
    public QueryOptions QueryOptions { get; public set; }
    public BuildQueryOrder QueryOrder { get; public set; }
    public BuildReason Reason { get; public set; }
    public string RequestedFor { get; public set; }
    public BuildStatus Status { get; public set; }
    internal BuildDetailSpec(string teamProject);
    internal BuildDetailSpec(string teamProject, string definitionName);
    internal BuildDetailSpec(IBuildDefinition definition);
    internal BuildDetailSpec(IEnumerable`1<Uri> definitionUris);
    internal BuildDetailSpec(IBuildDefinitionSpec definitionSpec);
    public sealed virtual IList`1<Uri> get_DefinitionUris();
    public sealed virtual IBuildDefinitionSpec get_DefinitionSpec();
    private void SetDefaults();
    private void BeforeSerialize();
    public sealed virtual string get_BuildNumber();
    public sealed virtual void set_BuildNumber(string value);
    public sealed virtual String[] get_InformationTypes();
    public sealed virtual void set_InformationTypes(String[] value);
    public sealed virtual int get_MaxBuildsPerDefinition();
    public sealed virtual void set_MaxBuildsPerDefinition(int value);
    public sealed virtual DateTime get_MaxFinishTime();
    public sealed virtual void set_MaxFinishTime(DateTime value);
    public sealed virtual DateTime get_MinChangedTime();
    public sealed virtual void set_MinChangedTime(DateTime value);
    public sealed virtual DateTime get_MinFinishTime();
    public sealed virtual void set_MinFinishTime(DateTime value);
    public sealed virtual string get_Quality();
    public sealed virtual void set_Quality(string value);
    public sealed virtual QueryDeletedOption get_QueryDeletedOption();
    public sealed virtual void set_QueryDeletedOption(QueryDeletedOption value);
    public sealed virtual QueryOptions get_QueryOptions();
    public sealed virtual void set_QueryOptions(QueryOptions value);
    public sealed virtual BuildQueryOrder get_QueryOrder();
    public sealed virtual void set_QueryOrder(BuildQueryOrder value);
    public sealed virtual BuildReason get_Reason();
    public sealed virtual void set_Reason(BuildReason value);
    public sealed virtual string get_RequestedFor();
    public sealed virtual void set_RequestedFor(string value);
    public sealed virtual BuildStatus get_Status();
    public sealed virtual void set_Status(BuildStatus value);
    internal static BuildDetailSpec FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildDetailSpec obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildDetailSpec2010 : object {
    private string m_buildNumber;
    private object m_definitionFilter;
    private DefinitionFilterType m_definitionFilterType;
    private string m_definitionPath;
    internal String[] m_informationTypes;
    private int m_maxBuildsPerDefinition;
    private DateTime m_maxFinishTime;
    private DateTime m_minChangedTime;
    private DateTime m_minFinishTime;
    private string m_quality;
    private QueryDeletedOption2010 m_queryDeletedOption;
    private QueryOptions2010 m_queryOptions;
    private BuildQueryOrder2010 m_queryOrder;
    private BuildReason2010 m_reason;
    private string m_requestedFor;
    private BuildStatus2010 m_status;
    public string BuildNumber { get; public set; }
    public String[] InformationTypes { get; public set; }
    public int MaxBuildsPerDefinition { get; public set; }
    public DateTime MaxFinishTime { get; public set; }
    public DateTime MinChangedTime { get; public set; }
    public DateTime MinFinishTime { get; public set; }
    public string Quality { get; public set; }
    public QueryDeletedOption2010 QueryDeletedOption { get; public set; }
    public QueryOptions2010 QueryOptions { get; public set; }
    public BuildQueryOrder2010 QueryOrder { get; public set; }
    public BuildReason2010 Reason { get; public set; }
    public string RequestedFor { get; public set; }
    public BuildStatus2010 Status { get; public set; }
    internal BuildDetailSpec2010(BuildDetailSpec spec);
    public string get_BuildNumber();
    public void set_BuildNumber(string value);
    public String[] get_InformationTypes();
    public void set_InformationTypes(String[] value);
    public int get_MaxBuildsPerDefinition();
    public void set_MaxBuildsPerDefinition(int value);
    public DateTime get_MaxFinishTime();
    public void set_MaxFinishTime(DateTime value);
    public DateTime get_MinChangedTime();
    public void set_MinChangedTime(DateTime value);
    public DateTime get_MinFinishTime();
    public void set_MinFinishTime(DateTime value);
    public string get_Quality();
    public void set_Quality(string value);
    public QueryDeletedOption2010 get_QueryDeletedOption();
    public void set_QueryDeletedOption(QueryDeletedOption2010 value);
    public QueryOptions2010 get_QueryOptions();
    public void set_QueryOptions(QueryOptions2010 value);
    public BuildQueryOrder2010 get_QueryOrder();
    public void set_QueryOrder(BuildQueryOrder2010 value);
    public BuildReason2010 get_Reason();
    public void set_Reason(BuildReason2010 value);
    public string get_RequestedFor();
    public void set_RequestedFor(string value);
    public BuildStatus2010 get_Status();
    public void set_Status(BuildStatus2010 value);
    internal static BuildDetailSpec2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildDetailSpec2010 obj);
}
public static class Microsoft.TeamFoundation.Build.Client.BuildEnumerationHelper : object {
    public static string GetDisplayText(object value);
    public static string GetDisplayText(AgentStatus value);
    internal static string GetDisplayText(Agent2008Status value);
    public static string GetDisplayText(BuildPhaseStatus value);
    public static string GetDisplayText(BuildReason value);
    public static string GetDisplayText(BuildStatus value);
    public static string GetDisplayText(BuildStepStatus value);
    public static string GetDisplayText(ControllerStatus value);
    public static string GetDisplayText(DefinitionQueueStatus value);
    public static string GetDisplayText(DeleteOptions value);
    public static string GetDisplayText(QueuePriority value);
    public static string GetDisplayText(QueueStatus value);
    public static string GetDisplayText(DefinitionTriggerType value);
    public static String[] GetDisplayTextValues(Type enumType);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildError : BuildErrorBase {
    public string ErrorType { get; public set; }
    public BuildError(IBuildInformationNode node, string message, DateTime timestamp);
    public BuildError(IBuildInformationNode node, string file, int lineNumber, int endLineNumber, string code, string message, DateTime timestamp);
    public BuildError(IBuildInformationNode node, string errorType, string file, string serverPath, int lineNumber, int endLineNumber, string code, string message, DateTime timestamp);
    public BuildError(IBuildInformationNode node);
    public sealed virtual string get_ErrorType();
    public sealed virtual void set_ErrorType(string value);
    public static List`1<IBuildError> FromInformationNodes(List`1<IBuildInformationNode> nodes);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildErrorBase : object {
    private IBuildInformationNode m_node;
    public string Code { get; public set; }
    public int EndLineNumber { get; public set; }
    public string File { get; public set; }
    public string ServerPath { get; public set; }
    public int LineNumber { get; public set; }
    public string Message { get; public set; }
    public DateTime Timestamp { get; public set; }
    public IBuildInformationNode Node { get; }
    public BuildErrorBase(IBuildInformationNode node);
    public sealed virtual string get_Code();
    public sealed virtual void set_Code(string value);
    public sealed virtual int get_EndLineNumber();
    public sealed virtual void set_EndLineNumber(int value);
    public sealed virtual string get_File();
    public sealed virtual void set_File(string value);
    public sealed virtual string get_ServerPath();
    public sealed virtual void set_ServerPath(string value);
    public sealed virtual int get_LineNumber();
    public sealed virtual void set_LineNumber(int value);
    public sealed virtual string get_Message();
    public sealed virtual void set_Message(string value);
    public sealed virtual DateTime get_Timestamp();
    public sealed virtual void set_Timestamp(DateTime value);
    public sealed virtual IBuildInformationNode get_Node();
    public sealed virtual void Save();
}
[AttributeUsageAttribute("4")]
public class Microsoft.TeamFoundation.Build.Client.BuildExtensionAttribute : Attribute {
    private HostEnvironmentOption m_option;
    public HostEnvironmentOption Option { get; }
    public BuildExtensionAttribute(HostEnvironmentOption option);
    public HostEnvironmentOption get_Option();
}
public class Microsoft.TeamFoundation.Build.Client.BuildFailedException : BuildServerException {
    public BuildFailedException(string build);
    protected BuildFailedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildFailureException : BuildServerException {
    public BuildFailureException(string teamProject, string name, IFailure failure);
    protected BuildFailureException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildGroupAlreadyExistsException : BuildServerException {
    public BuildGroupAlreadyExistsException(string message);
    public BuildGroupAlreadyExistsException(string message, Exception ex);
    protected BuildGroupAlreadyExistsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildGroupDoesNotExistException : BuildServerException {
    public BuildGroupDoesNotExistException(string message);
    public BuildGroupDoesNotExistException(string message, Exception ex);
    protected BuildGroupDoesNotExistException(SerializationInfo info, StreamingContext context);
}
internal abstract class Microsoft.TeamFoundation.Build.Client.BuildGroupItem2010 : object {
    private string m_name;
    private string m_teamProject;
    internal static string s_fullPathFormat;
    protected string m_fullPath;
    protected Uri m_uri;
    public string Name { get; public set; }
    public string TeamProject { get; }
    public string FullPath { get; internal set; }
    public Uri Uri { get; internal set; }
    internal BuildGroupItem2010(string teamProject);
    private static BuildGroupItem2010();
    public virtual string get_Name();
    public virtual void set_Name(string value);
    public sealed virtual string get_TeamProject();
    public sealed virtual string get_FullPath();
    internal void set_FullPath(string value);
    public virtual void Refresh();
    protected virtual void AfterDeserialize();
    public sealed virtual Uri get_Uri();
    internal void set_Uri(Uri value);
    internal static BuildGroupItem2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal abstract virtual void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildGroupItem2010 obj);
}
internal abstract class Microsoft.TeamFoundation.Build.Client.BuildGroupItemSpec2010 : object {
    private string m_name;
    private string m_teamProject;
    private static string s_fullPathFormat;
    protected string m_fullPath;
    public string Name { get; public set; }
    public string TeamProject { get; internal set; }
    public string FullPath { get; internal set; }
    internal BuildGroupItemSpec2010(string teamProject);
    internal BuildGroupItemSpec2010(string teamProject, string name);
    private static BuildGroupItemSpec2010();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public string get_TeamProject();
    internal void set_TeamProject(string value);
    public string get_FullPath();
    internal void set_FullPath(string value);
    internal static BuildGroupItemSpec2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal abstract virtual void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildGroupItemSpec2010 obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildGroupQueryResult : object {
    internal BuildAgent2008[] m_agents;
    internal BuildDefinition2010[] m_definitions;
    internal Failure2010[] m_internalFailures;
    internal BuildAgent2008[] Agents { get; }
    internal BuildDefinition2010[] Definitions { get; }
    internal Failure2010[] InternalFailures { get; }
    internal BuildAgent2008[] get_Agents();
    internal BuildDefinition2010[] get_Definitions();
    internal Failure2010[] get_InternalFailures();
    internal static BuildGroupQueryResult FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildGroupQueryResult obj);
    internal void AfterDeserialize();
}
internal class Microsoft.TeamFoundation.Build.Client.BuildInformation : object {
    private BuildDetail m_build;
    private List`1<BuildInformationNode> m_nodes;
    private BuildInformationNode m_owner;
    public IBuildInformationNode[] Nodes { get; }
    internal BuildDetail Build { get; }
    internal BuildInformation(BuildDetail build, BuildInformationNode[] informationNodes);
    internal BuildInformation(BuildDetail build, BuildInformationNode owner);
    public sealed virtual IBuildInformationNode[] get_Nodes();
    public sealed virtual IBuildInformationNode CreateNode();
    internal void DeleteNode(IBuildInformationNode node);
    internal void Add(BuildInformationNode node);
    public sealed virtual void Delete();
    public sealed virtual IBuildInformationNode GetNode(int id);
    public sealed virtual List`1<IBuildInformationNode> GetNodesByType(string type);
    public sealed virtual List`1<IBuildInformationNode> GetNodesByType(string type, bool recursive);
    public sealed virtual List`1<IBuildInformationNode> GetNodesByTypes(IEnumerable`1<string> types);
    public sealed virtual List`1<IBuildInformationNode> GetNodesByTypes(IEnumerable`1<string> types, bool recursive);
    public sealed virtual List`1<IBuildInformationNode> GetSortedNodesByType(string type, IComparer`1<IBuildInformationNode> comparer);
    public sealed virtual List`1<IBuildInformationNode> GetSortedNodesByTypes(IEnumerable`1<string> types, IComparer`1<IBuildInformationNode> comparer);
    public sealed virtual List`1<IBuildInformationNode> GetSortedNodes(IComparer`1<IBuildInformationNode> comparer);
    public sealed virtual void Save();
    internal BuildDetail get_Build();
}
internal class Microsoft.TeamFoundation.Build.Client.BuildInformationNode : object {
    private BuildDetail m_build;
    private BuildInformation m_children;
    private Dictionary`2<string, string> m_fields;
    private Dictionary`2<string, string> m_lastSnapshot;
    private BuildInformationNode m_parent;
    private BuildInformation m_owner;
    private object m_lock;
    private object m_lockFields;
    private static int m_nextTempId;
    internal InformationField[] m_internalFields;
    private string m_lastModifiedBy;
    private DateTime m_lastModifiedDate;
    private int m_nodeId;
    private int m_parentId;
    private string m_type;
    public IBuildInformation Children { get; }
    public Dictionary`2<string, string> Fields { get; }
    public int Id { get; internal set; }
    public IBuildInformationNode Parent { get; internal set; }
    internal BuildDetail Build { get; internal set; }
    internal BuildInformation Owner { get; internal set; }
    public static IComparer`1<IBuildInformationNode> Comparer { get; }
    internal InformationField[] InternalFields { get; }
    public string LastModifiedBy { get; }
    public DateTime LastModifiedDate { get; }
    internal int NodeId { get; internal set; }
    internal int ParentId { get; internal set; }
    public string Type { get; public set; }
    internal BuildInformationNode(BuildDetail build, BuildInformationNode parent);
    internal BuildInformationNode(BuildDetail build, BuildInformation collection);
    public BuildInformationNode(BuildInformationNode2010 node2010);
    internal void AfterDeserialize();
    public sealed virtual IBuildInformation get_Children();
    public sealed virtual Dictionary`2<string, string> get_Fields();
    public sealed virtual int get_Id();
    internal void set_Id(int value);
    public sealed virtual IBuildInformationNode get_Parent();
    internal void set_Parent(IBuildInformationNode value);
    public sealed virtual void Delete();
    public sealed virtual void Save();
    public sealed virtual int CompareTo(BuildInformationNode node);
    internal BuildDetail get_Build();
    internal void set_Build(BuildDetail value);
    internal bool IsDirty();
    internal InformationAddRequest CreateAddRequest();
    internal List`1<InformationChangeRequest> GetRequests(bool getUnsavedParentNodes);
    private Dictionary`2<string, string> InformationFieldsToDictionary(InformationField[] fields);
    private InformationField[] DictionaryToInformationFields(Dictionary`2<string, string> dictionary);
    private Dictionary`2<string, string> CopyDictionary(Dictionary`2<string, string> dictionary);
    internal BuildInformation get_Owner();
    internal void set_Owner(BuildInformation value);
    internal static int GetNextTempId();
    public static IComparer`1<IBuildInformationNode> get_Comparer();
    internal InformationField[] get_InternalFields();
    public sealed virtual string get_LastModifiedBy();
    public sealed virtual DateTime get_LastModifiedDate();
    internal int get_NodeId();
    internal void set_NodeId(int value);
    internal int get_ParentId();
    internal void set_ParentId(int value);
    public sealed virtual string get_Type();
    public sealed virtual void set_Type(string value);
    internal static BuildInformationNode FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildInformationNode obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildInformationNode2010 : object {
    internal InformationField2010[] m_internalFields;
    private string m_lastModifiedBy;
    private DateTime m_lastModifiedDate;
    private int m_nodeId;
    private int m_parentId;
    private string m_type;
    internal InformationField2010[] InternalFields { get; }
    public string LastModifiedBy { get; }
    public DateTime LastModifiedDate { get; }
    internal int NodeId { get; internal set; }
    internal int ParentId { get; internal set; }
    public string Type { get; public set; }
    internal InformationField2010[] get_InternalFields();
    public string get_LastModifiedBy();
    public DateTime get_LastModifiedDate();
    internal int get_NodeId();
    internal void set_NodeId(int value);
    internal int get_ParentId();
    internal void set_ParentId(int value);
    public string get_Type();
    public void set_Type(string value);
    internal static BuildInformationNode2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildInformationNode2010 obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildInformationNodeComparer : object {
    private static BuildInformationNodeComparer s_instance;
    public static IComparer`1<IBuildInformationNode> Instance { get; }
    public static IComparer`1<IBuildInformationNode> get_Instance();
    private sealed virtual override int System.Collections.Generic.IComparer<Microsoft.TeamFoundation.Build.Client.IBuildInformationNode>.Compare(IBuildInformationNode x, IBuildInformationNode y);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildMessage : object {
    private IBuildInformationNode m_node;
    public string Message { get; public set; }
    public BuildMessageImportance Importance { get; public set; }
    public DateTime Timestamp { get; public set; }
    public IBuildInformationNode Node { get; }
    public BuildMessage(IBuildInformationNode node, string message, BuildMessageImportance importance, DateTime timestamp);
    public BuildMessage(IBuildInformationNode node);
    public sealed virtual string get_Message();
    public sealed virtual void set_Message(string value);
    public sealed virtual BuildMessageImportance get_Importance();
    public sealed virtual void set_Importance(BuildMessageImportance value);
    public sealed virtual DateTime get_Timestamp();
    public sealed virtual void set_Timestamp(DateTime value);
    public sealed virtual IBuildInformationNode get_Node();
    public sealed virtual void Save();
}
public enum Microsoft.TeamFoundation.Build.Client.BuildMessageImportance : Enum {
    public int value__;
    public static BuildMessageImportance Low;
    public static BuildMessageImportance Normal;
    public static BuildMessageImportance High;
}
public class Microsoft.TeamFoundation.Build.Client.BuildNotDeletedException : AdministrationException {
    public BuildNotDeletedException(string message);
    public BuildNotDeletedException(string message, Exception ex);
    protected BuildNotDeletedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildNotFinishedException : BuildServerException {
    public BuildNotFinishedException(string build);
    protected BuildNotFinishedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildNotFoundException : BuildServerException {
    public BuildNotFoundException(string buildNumber, string buildDefinitionPath);
    protected BuildNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildNotFoundForUriException : BuildServerException {
    public BuildNotFoundForUriException(Uri buildUri, string userName);
    protected BuildNotFoundForUriException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildNumberAlreadyExistsException : BuildServerException {
    public BuildNumberAlreadyExistsException(string message);
    public BuildNumberAlreadyExistsException(string message, Exception ex);
    protected BuildNumberAlreadyExistsException(SerializationInfo info, StreamingContext context);
}
public enum Microsoft.TeamFoundation.Build.Client.BuildPhaseStatus : Enum {
    public int value__;
    public static BuildPhaseStatus Failed;
    public static BuildPhaseStatus Succeeded;
    public static BuildPhaseStatus Unknown;
}
internal enum Microsoft.TeamFoundation.Build.Client.BuildPhaseStatus2010 : Enum {
    public int value__;
    public static BuildPhaseStatus2010 Failed;
    public static BuildPhaseStatus2010 Succeeded;
    public static BuildPhaseStatus2010 Unknown;
}
internal class Microsoft.TeamFoundation.Build.Client.BuildProjectNode : object {
    private IBuildInformationNode m_node;
    private IExternalLink m_logFile;
    private IBuildProjectNode m_parent;
    public List`1<IBuildProjectNode> Children { get; }
    public int CompilationErrors { get; public set; }
    public int CompilationWarnings { get; public set; }
    public DateTime FinishTime { get; public set; }
    public string Flavor { get; public set; }
    public string LocalPath { get; public set; }
    public IExternalLink LogFile { get; }
    public IBuildInformationNode Node { get; }
    public IBuildProjectNode Parent { get; }
    public string Platform { get; public set; }
    public int StaticAnalysisErrors { get; public set; }
    public int StaticAnalysisWarnings { get; public set; }
    public string ServerPath { get; public set; }
    public DateTime StartTime { get; public set; }
    public string TargetNames { get; public set; }
    public static IComparer`1<IBuildInformationNode> Comparer { get; }
    public BuildProjectNode(IBuildInformationNode node, DateTime finishTime, string flavor, string localPath, string platform, string serverPath, DateTime startTime, string targetNames);
    public BuildProjectNode(IBuildInformationNode node, string flavor, string localPath, string platform, string serverPath, DateTime startTime, string targetNames);
    public BuildProjectNode(IBuildInformationNode node);
    public sealed virtual List`1<IBuildProjectNode> get_Children();
    public sealed virtual int get_CompilationErrors();
    public sealed virtual void set_CompilationErrors(int value);
    public sealed virtual int get_CompilationWarnings();
    public sealed virtual void set_CompilationWarnings(int value);
    public sealed virtual DateTime get_FinishTime();
    public sealed virtual void set_FinishTime(DateTime value);
    public sealed virtual string get_Flavor();
    public sealed virtual void set_Flavor(string value);
    public sealed virtual string get_LocalPath();
    public sealed virtual void set_LocalPath(string value);
    public sealed virtual IExternalLink get_LogFile();
    public sealed virtual IBuildInformationNode get_Node();
    public sealed virtual IBuildProjectNode get_Parent();
    public sealed virtual string get_Platform();
    public sealed virtual void set_Platform(string value);
    public sealed virtual int get_StaticAnalysisErrors();
    public sealed virtual void set_StaticAnalysisErrors(int value);
    public sealed virtual int get_StaticAnalysisWarnings();
    public sealed virtual void set_StaticAnalysisWarnings(int value);
    public sealed virtual string get_ServerPath();
    public sealed virtual void set_ServerPath(string value);
    public sealed virtual DateTime get_StartTime();
    public sealed virtual void set_StartTime(DateTime value);
    public sealed virtual string get_TargetNames();
    public sealed virtual void set_TargetNames(string value);
    public sealed virtual IBuildProjectNode AddBuildProjectNode();
    public sealed virtual List`1<IBuildError> GetErrors(string errorType);
    public sealed virtual List`1<IBuildWarning> GetWarnings(string warningType);
    public sealed virtual void Save();
    private List`1<IBuildInformationNode> GetChildren(IBuildInformation information, string type, string errorWarningTypeField, string errorWarningType);
    public static List`1<IBuildProjectNode> FromInformationNodes(List`1<IBuildInformationNode> nodes);
    public static IComparer`1<IBuildInformationNode> get_Comparer();
}
public class Microsoft.TeamFoundation.Build.Client.BuildQualityDoesNotExistException : BuildServerException {
    public BuildQualityDoesNotExistException(string message);
    public BuildQualityDoesNotExistException(string message, Exception ex);
    protected BuildQualityDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public enum Microsoft.TeamFoundation.Build.Client.BuildQueryOrder : Enum {
    public int value__;
    public static BuildQueryOrder FinishTimeAscending;
    public static BuildQueryOrder FinishTimeDescending;
    public static BuildQueryOrder StartTimeAscending;
    public static BuildQueryOrder StartTimeDescending;
}
internal enum Microsoft.TeamFoundation.Build.Client.BuildQueryOrder2010 : Enum {
    public int value__;
    public static BuildQueryOrder2010 FinishTimeAscending;
    public static BuildQueryOrder2010 FinishTimeDescending;
    public static BuildQueryOrder2010 StartTimeAscending;
    public static BuildQueryOrder2010 StartTimeDescending;
}
internal class Microsoft.TeamFoundation.Build.Client.BuildQueryResult : object {
    internal BuildAgent[] m_agents;
    internal BuildDetail[] m_builds;
    internal BuildController[] m_controllers;
    internal BuildDefinition[] m_definitions;
    internal QueuedBuild[] m_queuedBuilds;
    internal BuildServiceHost[] m_serviceHosts;
    internal BuildDefinition[] Definitions { get; }
    public IBuildDetail[] Builds { get; }
    public IFailure[] Failures { get; }
    internal BuildQueryResult(BuildDetail[] builds);
    internal BuildDefinition[] get_Definitions();
    internal static BuildQueryResult FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildQueryResult obj);
    public sealed virtual IBuildDetail[] get_Builds();
    public sealed virtual IFailure[] get_Failures();
    internal void AfterDeserialize();
}
internal class Microsoft.TeamFoundation.Build.Client.BuildQueryResult2008 : object {
    internal BuildAgent2008[] m_agents;
    internal BuildDetail2010[] m_builds;
    internal BuildDefinition2010[] m_definitions;
    internal Failure2010[] m_internalFailures;
    internal Failure2010[] InternalFailures { get; }
    internal Failure2010[] get_InternalFailures();
    internal static BuildQueryResult2008 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildQueryResult2008 obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildQueryResult2010 : object {
    internal BuildAgent2010[] m_agents;
    internal BuildDetail2010[] m_builds;
    internal BuildController2010[] m_controllers;
    internal BuildDefinition2010[] m_definitions;
    internal Failure2010[] m_internalFailures;
    internal BuildServiceHost2010[] m_serviceHosts;
    internal BuildDefinition2010[] Definitions { get; }
    internal Failure2010[] InternalFailures { get; }
    internal BuildDefinition2010[] get_Definitions();
    internal Failure2010[] get_InternalFailures();
    internal static BuildQueryResult2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildQueryResult2010 obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildQueueQueryResult : object {
    internal BuildAgent[] m_agents;
    internal BuildDetail[] m_builds;
    internal BuildController[] m_controllers;
    internal BuildDefinition[] m_definitions;
    internal QueuedBuild[] m_queuedBuilds;
    internal BuildServiceHost[] m_serviceHosts;
    public IQueuedBuild[] QueuedBuilds { get; }
    public IFailure[] Failures { get; }
    internal static BuildQueueQueryResult FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildQueueQueryResult obj);
    public sealed virtual IQueuedBuild[] get_QueuedBuilds();
    public sealed virtual IFailure[] get_Failures();
    internal void AfterDeserialize();
}
internal class Microsoft.TeamFoundation.Build.Client.BuildQueueQueryResult2008 : object {
    internal BuildAgent2008[] m_agents;
    internal QueuedBuild2008[] m_builds;
    internal BuildDefinition2010[] m_definitions;
    internal Failure2010[] m_internalFailures;
    internal BuildAgent2008[] Agents { get; }
    internal QueuedBuild2008[] Builds { get; }
    internal BuildDefinition2010[] Definitions { get; }
    internal Failure2010[] InternalFailures { get; }
    internal BuildAgent2008[] get_Agents();
    internal QueuedBuild2008[] get_Builds();
    internal BuildDefinition2010[] get_Definitions();
    internal Failure2010[] get_InternalFailures();
    internal static BuildQueueQueryResult2008 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildQueueQueryResult2008 obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildQueueQueryResult2010 : object {
    internal BuildAgent2010[] m_agents;
    internal QueuedBuild2010[] m_builds;
    internal BuildController2010[] m_controllers;
    internal BuildDefinition2010[] m_definitions;
    internal Failure2010[] m_internalFailures;
    internal BuildServiceHost2010[] m_serviceHosts;
    internal QueuedBuild2010[] Builds { get; internal set; }
    internal BuildDefinition2010[] Definitions { get; internal set; }
    internal Failure2010[] InternalFailures { get; }
    internal QueuedBuild2010[] get_Builds();
    internal void set_Builds(QueuedBuild2010[] value);
    internal BuildDefinition2010[] get_Definitions();
    internal void set_Definitions(BuildDefinition2010[] value);
    internal Failure2010[] get_InternalFailures();
    internal static BuildQueueQueryResult2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildQueueQueryResult2010 obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildQueueSpec : object {
    private TimeSpan m_completedWindow;
    private List`1<Uri> m_definitionUris;
    private IBuildDefinitionSpec m_definitionSpec;
    private int m_completedAge;
    private BuildControllerSpec m_controllerSpec;
    private object m_definitionFilter;
    private DefinitionFilterType m_definitionFilterType;
    internal String[] m_informationTypes;
    private QueryOptions m_queryOptions;
    private string m_requestedFor;
    private QueueStatus m_status;
    public IBuildControllerSpec ControllerSpec { get; }
    public IBuildDefinitionSpec DefinitionSpec { get; }
    public IList`1<Uri> DefinitionUris { get; }
    public TimeSpan CompletedWindow { get; public set; }
    public QueryOptions QueryOptions { get; public set; }
    public string RequestedFor { get; public set; }
    public QueueStatus Status { get; public set; }
    public BuildQueueSpec(string teamProject);
    public BuildQueueSpec(string teamProject, string definitionName);
    public BuildQueueSpec(IEnumerable`1<Uri> definitionUris);
    public sealed virtual IBuildControllerSpec get_ControllerSpec();
    public sealed virtual IBuildDefinitionSpec get_DefinitionSpec();
    public sealed virtual IList`1<Uri> get_DefinitionUris();
    public sealed virtual TimeSpan get_CompletedWindow();
    public sealed virtual void set_CompletedWindow(TimeSpan value);
    private void BeforeSerialize();
    public sealed virtual QueryOptions get_QueryOptions();
    public sealed virtual void set_QueryOptions(QueryOptions value);
    public sealed virtual string get_RequestedFor();
    public sealed virtual void set_RequestedFor(string value);
    public sealed virtual QueueStatus get_Status();
    public sealed virtual void set_Status(QueueStatus value);
    internal static BuildQueueSpec FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildQueueSpec obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildQueueSpec2008 : object {
    private BuildAgentSpec2008 m_agentSpec;
    private int m_completedAge;
    private BuildDefinitionSpec2010 m_definitionSpec;
    private QueryOptions2010 m_queryOptions;
    private QueueStatus2010 m_status;
    public QueryOptions2010 QueryOptions { get; public set; }
    public QueueStatus2010 Status { get; public set; }
    public BuildQueueSpec2008(BuildQueueSpec spec);
    public QueryOptions2010 get_QueryOptions();
    public void set_QueryOptions(QueryOptions2010 value);
    public QueueStatus2010 get_Status();
    public void set_Status(QueueStatus2010 value);
    internal static BuildQueueSpec2008 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildQueueSpec2008 obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildQueueSpec2010 : object {
    private int m_completedAge;
    private BuildControllerSpec2010 m_controllerSpec;
    private object m_definitionFilter;
    private DefinitionFilterType m_definitionFilterType;
    private QueryOptions2010 m_queryOptions;
    private string m_requestedFor;
    private QueueStatus2010 m_status;
    public QueryOptions2010 QueryOptions { get; public set; }
    public string RequestedFor { get; public set; }
    public QueueStatus2010 Status { get; public set; }
    internal BuildQueueSpec2010(BuildQueueSpec spec);
    public QueryOptions2010 get_QueryOptions();
    public void set_QueryOptions(QueryOptions2010 value);
    public string get_RequestedFor();
    public void set_RequestedFor(string value);
    public QueueStatus2010 get_Status();
    public void set_Status(QueueStatus2010 value);
    internal static BuildQueueSpec2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildQueueSpec2010 obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildQueueWebService : TfsHttpClient {
    private BuildServer m_buildServer;
    protected Guid CollectionServiceIdentifier { get; }
    protected string ComponentName { get; }
    protected string ServiceType { get; }
    internal BuildQueueWebService(BuildServer server);
    public BuildQueueWebService(TfsTeamProjectCollection connection);
    public virtual object GetService(Type serviceType);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ComponentName();
    protected virtual string get_ServiceType();
    public IAsyncResult BeginQueryBuilds(BuildQueueSpec2010[] specs, AsyncCallback callback, object state);
    public void CancelBuilds(Int32[] queueIds);
    protected virtual Exception ConvertException(SoapException exception);
    public BuildQueueQueryResult2010[] EndQueryBuilds(IAsyncResult result);
    public BuildQueueQueryResult2010[] QueryBuilds(BuildQueueSpec2010[] specs);
    public BuildQueueQueryResult2010 QueryBuildsById(Int32[] ids, QueryOptions2010 options);
    public QueuedBuild2010[] QueueBuilds(BuildRequest2010[] requests, QueueOptions2010 options);
    public QueuedBuild2010[] UpdateBuilds(QueuedBuildUpdateOptions2010[] updates);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildQueueWebService4 : TfsHttpClient {
    private BuildServer m_buildServer;
    protected Guid CollectionServiceIdentifier { get; }
    protected string ComponentName { get; }
    protected string ServiceType { get; }
    public BuildQueueWebService4(BuildServer server);
    public BuildQueueWebService4(TfsTeamProjectCollection connection);
    public virtual object GetService(Type serviceType);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ComponentName();
    protected virtual string get_ServiceType();
    public IAsyncResult BeginQueryBuilds(BuildQueueSpec[] specs, AsyncCallback callback, object state);
    public void CancelBuilds(Int32[] queueIds);
    protected virtual Exception ConvertException(SoapException exception);
    public BuildQueueQueryResult[] EndQueryBuilds(IAsyncResult result);
    public BuildQueueQueryResult[] QueryBuilds(BuildQueueSpec[] specs);
    public BuildQueueQueryResult QueryBuildsById(Int32[] ids, String[] informationTypes, QueryOptions options);
    public BuildQueueQueryResult QueueBuilds(BuildRequest[] requests, QueueOptions options);
    public BuildQueueQueryResult StartBuildsNow(Int32[] queueIds);
    public BuildQueueQueryResult UpdateBuilds(QueuedBuildUpdateOptions[] updates);
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Build.Client.BuildReason : Enum {
    public int value__;
    public static BuildReason All;
    public static BuildReason BatchedCI;
    public static BuildReason CheckInShelveset;
    public static BuildReason IndividualCI;
    public static BuildReason Manual;
    public static BuildReason None;
    public static BuildReason Schedule;
    public static BuildReason ScheduleForced;
    public static BuildReason Triggered;
    public static BuildReason UserCreated;
    public static BuildReason ValidateShelveset;
}
[FlagsAttribute]
internal enum Microsoft.TeamFoundation.Build.Client.BuildReason2010 : Enum {
    public int value__;
    public static BuildReason2010 All;
    public static BuildReason2010 BatchedCI;
    public static BuildReason2010 CheckInShelveset;
    public static BuildReason2010 IndividualCI;
    public static BuildReason2010 Manual;
    public static BuildReason2010 None;
    public static BuildReason2010 Schedule;
    public static BuildReason2010 ScheduleForced;
    public static BuildReason2010 Triggered;
    public static BuildReason2010 UserCreated;
    public static BuildReason2010 ValidateShelveset;
}
public class Microsoft.TeamFoundation.Build.Client.BuildReasonNotSupportedException : BuildServerException {
    public BuildReasonNotSupportedException(string message);
    public BuildReasonNotSupportedException(string message, Exception ex);
    protected BuildReasonNotSupportedException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildRequest : object {
    [CompilerGeneratedAttribute]
private IBuildServer <BuildServer>k__BackingField;
    private IBuildController m_buildController;
    private IBuildDefinition m_definition;
    private Guid m_batchId;
    private Uri m_buildControllerUri;
    private Uri m_buildDefinitionUri;
    private string m_customGetVersion;
    private string m_dropLocation;
    private string m_gatedCheckInTicket;
    private GetOption m_getOption;
    private int m_maxQueuePosition;
    private bool m_postponed;
    private QueuePriority m_priority;
    private string m_processParameters;
    private BuildReason m_reason;
    private string m_requestedFor;
    private string m_shelvesetName;
    public IBuildController BuildController { get; public set; }
    public IBuildDefinition BuildDefinition { get; internal set; }
    public IBuildServer BuildServer { get; private set; }
    public Guid BatchId { get; public set; }
    public Uri BuildControllerUri { get; internal set; }
    public Uri BuildDefinitionUri { get; internal set; }
    public string CustomGetVersion { get; public set; }
    public string DropLocation { get; public set; }
    public string GatedCheckInTicket { get; public set; }
    public GetOption GetOption { get; public set; }
    public int MaxQueuePosition { get; public set; }
    public bool Postponed { get; public set; }
    public QueuePriority Priority { get; public set; }
    public string ProcessParameters { get; public set; }
    public BuildReason Reason { get; public set; }
    public string RequestedFor { get; public set; }
    public string ShelvesetName { get; public set; }
    internal BuildRequest(BuildDefinition definition);
    internal BuildRequest(BuildServer buildServer, Uri buildDefinitionUri, Uri buildControllerUri);
    public sealed virtual IBuildController get_BuildController();
    public sealed virtual void set_BuildController(IBuildController value);
    public sealed virtual IBuildDefinition get_BuildDefinition();
    internal void set_BuildDefinition(IBuildDefinition value);
    [CompilerGeneratedAttribute]
public sealed virtual IBuildServer get_BuildServer();
    [CompilerGeneratedAttribute]
private void set_BuildServer(IBuildServer value);
    internal void BeforeSerialize();
    public sealed virtual Guid get_BatchId();
    public sealed virtual void set_BatchId(Guid value);
    public sealed virtual Uri get_BuildControllerUri();
    internal void set_BuildControllerUri(Uri value);
    public sealed virtual Uri get_BuildDefinitionUri();
    internal void set_BuildDefinitionUri(Uri value);
    public sealed virtual string get_CustomGetVersion();
    public sealed virtual void set_CustomGetVersion(string value);
    public sealed virtual string get_DropLocation();
    public sealed virtual void set_DropLocation(string value);
    public sealed virtual string get_GatedCheckInTicket();
    public sealed virtual void set_GatedCheckInTicket(string value);
    public sealed virtual GetOption get_GetOption();
    public sealed virtual void set_GetOption(GetOption value);
    public sealed virtual int get_MaxQueuePosition();
    public sealed virtual void set_MaxQueuePosition(int value);
    public sealed virtual bool get_Postponed();
    public sealed virtual void set_Postponed(bool value);
    public sealed virtual QueuePriority get_Priority();
    public sealed virtual void set_Priority(QueuePriority value);
    public sealed virtual string get_ProcessParameters();
    public sealed virtual void set_ProcessParameters(string value);
    public sealed virtual BuildReason get_Reason();
    public sealed virtual void set_Reason(BuildReason value);
    public sealed virtual string get_RequestedFor();
    public sealed virtual void set_RequestedFor(string value);
    public sealed virtual string get_ShelvesetName();
    public sealed virtual void set_ShelvesetName(string value);
    internal static BuildRequest FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildRequest obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildRequest2008 : object {
    private Uri m_buildAgentUri;
    private Uri m_buildDefinitionUri;
    private string m_commandLineArguments;
    private string m_customGetVersion;
    private string m_dropLocation;
    private GetOption2010 m_getOption;
    private int m_maxQueuePosition;
    private bool m_postponed;
    private QueuePriority2010 m_priority;
    private string m_requestedFor;
    public Uri BuildAgentUri { get; public set; }
    public Uri BuildDefinitionUri { get; public set; }
    public string CommandLineArguments { get; public set; }
    public string CustomGetVersion { get; public set; }
    public string DropLocation { get; public set; }
    public GetOption2010 GetOption { get; public set; }
    public int MaxQueuePosition { get; public set; }
    public bool Postponed { get; public set; }
    public QueuePriority2010 Priority { get; public set; }
    public string RequestedFor { get; public set; }
    public BuildRequest2008(BuildRequest request);
    public Uri get_BuildAgentUri();
    public void set_BuildAgentUri(Uri value);
    public Uri get_BuildDefinitionUri();
    public void set_BuildDefinitionUri(Uri value);
    public string get_CommandLineArguments();
    public void set_CommandLineArguments(string value);
    public string get_CustomGetVersion();
    public void set_CustomGetVersion(string value);
    public string get_DropLocation();
    public void set_DropLocation(string value);
    public GetOption2010 get_GetOption();
    public void set_GetOption(GetOption2010 value);
    public int get_MaxQueuePosition();
    public void set_MaxQueuePosition(int value);
    public bool get_Postponed();
    public void set_Postponed(bool value);
    public QueuePriority2010 get_Priority();
    public void set_Priority(QueuePriority2010 value);
    public string get_RequestedFor();
    public void set_RequestedFor(string value);
    internal static BuildRequest2008 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildRequest2008 obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildRequest2010 : object {
    private Uri m_buildAgentUri;
    private Uri m_buildControllerUri;
    private Uri m_buildDefinitionUri;
    private string m_customGetVersion;
    private string m_dropLocation;
    private string m_gatedCheckInTicket;
    private GetOption2010 m_getOption;
    private int m_maxQueuePosition;
    private bool m_postponed;
    private QueuePriority2010 m_priority;
    private string m_processParameters;
    private BuildReason2010 m_reason;
    private string m_requestedFor;
    private string m_shelvesetName;
    public Uri BuildAgentUri { get; internal set; }
    public Uri BuildControllerUri { get; public set; }
    public Uri BuildDefinitionUri { get; public set; }
    public string CustomGetVersion { get; public set; }
    public string DropLocation { get; public set; }
    public string GatedCheckInTicket { get; public set; }
    public GetOption2010 GetOption { get; public set; }
    public int MaxQueuePosition { get; public set; }
    public bool Postponed { get; public set; }
    public QueuePriority2010 Priority { get; public set; }
    public string ProcessParameters { get; public set; }
    public BuildReason2010 Reason { get; public set; }
    public string RequestedFor { get; public set; }
    public string ShelvesetName { get; public set; }
    internal BuildRequest2010(BuildRequest request);
    public Uri get_BuildAgentUri();
    internal void set_BuildAgentUri(Uri value);
    public Uri get_BuildControllerUri();
    public void set_BuildControllerUri(Uri value);
    public Uri get_BuildDefinitionUri();
    public void set_BuildDefinitionUri(Uri value);
    public string get_CustomGetVersion();
    public void set_CustomGetVersion(string value);
    public string get_DropLocation();
    public void set_DropLocation(string value);
    public string get_GatedCheckInTicket();
    public void set_GatedCheckInTicket(string value);
    public GetOption2010 get_GetOption();
    public void set_GetOption(GetOption2010 value);
    public int get_MaxQueuePosition();
    public void set_MaxQueuePosition(int value);
    public bool get_Postponed();
    public void set_Postponed(bool value);
    public QueuePriority2010 get_Priority();
    public void set_Priority(QueuePriority2010 value);
    public string get_ProcessParameters();
    public void set_ProcessParameters(string value);
    public BuildReason2010 get_Reason();
    public void set_Reason(BuildReason2010 value);
    public string get_RequestedFor();
    public void set_RequestedFor(string value);
    public string get_ShelvesetName();
    public void set_ShelvesetName(string value);
    internal static BuildRequest2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildRequest2010 obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildServer : object {
    private TfsTeamProjectCollection m_tfs;
    private BuildStoreWebService m_buildStoreWebService;
    private Tfs2008Helper m_tfs2008Helper;
    private Tfs2010Helper m_tfs2010Helper;
    private BuildWebService4 m_buildService;
    private BuildQueueWebService4 m_buildQueueWebService;
    private AdministrationWebService4 m_administrationWebService;
    private VersionControlServer m_versionControlServer;
    private static TraceSwitch m_tracing;
    private BuildServerVersion m_serverVersion;
    private static bool s_compatibilityEnabled;
    private static ProcessTemplateType[] s_allProcessTemplateTypes;
    public BuildServerVersion BuildServerVersion { get; }
    public string NoCICheckInComment { get; }
    public TfsTeamProjectCollection TeamProjectCollection { get; }
    public static TraceSwitch Tracing { get; public set; }
    internal static bool CompatibilityEnabled { get; internal set; }
    internal BuildStoreWebService BuildStoreWebService { get; }
    internal AdministrationWebService4 AdministrationService { get; }
    internal BuildQueueWebService4 BuildQueueService { get; }
    internal BuildWebService4 BuildService { get; }
    internal Tfs2008Helper Build2008Helper { get; }
    internal Tfs2010Helper Build2010Helper { get; }
    internal VersionControlServer VersionControlServer { get; }
    private static BuildServer();
    private sealed virtual override void Microsoft.TeamFoundation.Client.ITfsTeamProjectCollectionObject.Initialize(TfsTeamProjectCollection tfs);
    public sealed virtual BuildServerVersion get_BuildServerVersion();
    public sealed virtual string get_NoCICheckInComment();
    public sealed virtual TfsTeamProjectCollection get_TeamProjectCollection();
    public static TraceSwitch get_Tracing();
    public static void set_Tracing(TraceSwitch value);
    public sealed virtual IBuildDefinition CreateBuildDefinition(string teamProject);
    public sealed virtual IQueuedBuildsView CreateQueuedBuildsView();
    public sealed virtual IQueuedBuildsView CreateQueuedBuildsView(string teamProject);
    public sealed virtual IQueuedBuildsView CreateQueuedBuildsView(IEnumerable`1<Uri> definitionUris);
    public sealed virtual IBuildDetailSpec CreateBuildDetailSpec(string teamProject);
    public sealed virtual IBuildDetailSpec CreateBuildDetailSpec(string teamProject, string definitionName);
    public sealed virtual IBuildDetailSpec CreateBuildDetailSpec(IBuildDefinitionSpec definitionSpec);
    public sealed virtual IBuildDetailSpec CreateBuildDetailSpec(IBuildDefinition definition);
    public sealed virtual IBuildDetailSpec CreateBuildDetailSpec(IEnumerable`1<Uri> definitionUris);
    public sealed virtual IBuildAgentSpec CreateBuildAgentSpec();
    public sealed virtual IBuildAgentSpec CreateBuildAgentSpec(IBuildAgent agent);
    public sealed virtual IBuildAgentSpec CreateBuildAgentSpec(string name, string computer, List`1<string> tags);
    public sealed virtual IBuildAgentSpec CreateBuildAgentSpec(string name, string computer, String[] propertyNameFilters, List`1<string> tags);
    public sealed virtual IBuildControllerSpec CreateBuildControllerSpec();
    public sealed virtual IBuildControllerSpec CreateBuildControllerSpec(string name, string computer);
    public sealed virtual IBuildControllerSpec CreateBuildControllerSpec(string name, string computer, String[] propertyNameFilters, bool includeAgents);
    public sealed virtual IBuildDefinitionSpec CreateBuildDefinitionSpec(IBuildDefinition definition);
    public sealed virtual IBuildDefinitionSpec CreateBuildDefinitionSpec(string teamProject);
    public sealed virtual IBuildDefinitionSpec CreateBuildDefinitionSpec(string teamProject, string definitionName);
    public sealed virtual IBuildDefinitionSpec CreateBuildDefinitionSpec(string teamProject, string definitionName, String[] propertyNameFilters);
    public sealed virtual IQueuedBuildSpec CreateBuildQueueSpec(string teamProject);
    public sealed virtual IQueuedBuildSpec CreateBuildQueueSpec(string teamProject, string definitionName);
    public sealed virtual IQueuedBuildSpec CreateBuildQueueSpec(IEnumerable`1<Uri> definitionUris);
    public sealed virtual IBuildRequest CreateBuildRequest(Uri buildDefinitionUri);
    public sealed virtual IBuildRequest CreateBuildRequest(Uri buildDefinitionUri, Uri buildControllerUri);
    public sealed virtual IBuildServiceHost CreateBuildServiceHost(string name, Uri baseUrl);
    public sealed virtual IBuildServiceHost CreateBuildServiceHost(string name, string scheme, string host, int port);
    public sealed virtual IBuildDefinition[] GetAffectedBuildDefinitions(String[] serverItems);
    public sealed virtual IBuildDefinition[] GetAffectedBuildDefinitions(String[] serverItems, ContinuousIntegrationType continuousIntegrationType);
    public sealed virtual IBuildDefinition[] GetAffectedBuildDefinitions(String[] serverItems, DefinitionTriggerType triggerType);
    public sealed virtual IBuildDetail GetMinimalBuildDetails(Uri buildUri);
    public sealed virtual IBuildDetail GetAllBuildDetails(Uri buildUri);
    public sealed virtual IBuildDetail GetBuild(Uri buildUri);
    public sealed virtual IBuildDetail GetBuild(Uri buildUri, String[] informationTypes, QueryOptions queryOptions);
    public sealed virtual IBuildDetail GetBuild(Uri buildUri, String[] informationTypes, QueryOptions queryOptions, QueryDeletedOption queryDeletedOption);
    public sealed virtual IBuildDetail GetBuild(IBuildDefinitionSpec buildDefinitionSpec, string buildNumber, String[] informationTypes, QueryOptions queryOptions);
    public sealed virtual IBuildDetail[] QueryBuildsByUri(Uri[] buildUris, String[] informationTypes, QueryOptions queryOptions);
    public sealed virtual IBuildDetail[] QueryBuildsByUri(Uri[] buildUris, String[] informationTypes, QueryOptions queryOptions, QueryDeletedOption queryDeletedOption);
    public sealed virtual IAsyncResult BeginQueryBuildsByUri(Uri[] buildUris, String[] informationTypes, QueryOptions queryOptions, QueryDeletedOption queryDeletedOption, AsyncCallback callback, object state);
    public sealed virtual IBuildDetail[] EndQueryBuildsByUri(IAsyncResult result);
    public sealed virtual IBuildDetail[] QueryBuilds(string teamProject);
    public sealed virtual IBuildDetail[] QueryBuilds(string teamProject, string definitionName);
    public sealed virtual IBuildDetail[] QueryBuilds(IBuildDefinitionSpec definitionSpec);
    public sealed virtual IBuildDetail[] QueryBuilds(IBuildDefinition definition);
    public sealed virtual IBuildQueryResult QueryBuilds(IBuildDetailSpec buildDetailSpec);
    public sealed virtual IBuildQueryResult[] QueryBuilds(IBuildDetailSpec[] buildDetailSpecs);
    public sealed virtual IAsyncResult BeginQueryBuilds(IBuildDetailSpec[] specs, AsyncCallback callback, object state);
    public sealed virtual IBuildQueryResult[] EndQueryBuilds(IAsyncResult result);
    private static void SortBuildsOfResults(IBuildDetailSpec[] buildDetailSpecs, BuildQueryResult[] results);
    public sealed virtual IBuildDeletionResult[] DeleteBuilds(IBuildDetail[] builds);
    public sealed virtual IBuildDeletionResult[] DeleteBuilds(IBuildDetail[] builds, DeleteOptions options);
    public sealed virtual IBuildDeletionResult[] DeleteBuilds(Uri[] uris);
    public sealed virtual IBuildDeletionResult[] DeleteBuilds(Uri[] uris, DeleteOptions options);
    public sealed virtual void DestroyBuilds(IBuildDetail[] builds);
    public sealed virtual void DestroyBuilds(Uri[] buildUris);
    public sealed virtual IBuildDetail[] SaveBuilds(IBuildDetail[] builds);
    public sealed virtual IBuildDefinition GetBuildDefinition(Uri buildDefinitionUri);
    public sealed virtual IBuildDefinition GetBuildDefinition(Uri buildDefinitionUri, QueryOptions options);
    public sealed virtual IBuildDefinition GetBuildDefinition(Uri buildDefinitionUri, String[] propertyNameFilters, QueryOptions options);
    public sealed virtual IBuildDefinition GetBuildDefinition(string teamProject, string name);
    public sealed virtual IBuildDefinition GetBuildDefinition(string teamProject, string name, QueryOptions options);
    public sealed virtual IBuildDefinition[] QueryBuildDefinitionsByUri(Uri[] buildDefinitionUris);
    public sealed virtual IBuildDefinition[] QueryBuildDefinitionsByUri(Uri[] buildDefinitionUris, QueryOptions options);
    public sealed virtual IBuildDefinition[] QueryBuildDefinitionsByUri(Uri[] buildDefinitionUris, String[] propertyNameFilters, QueryOptions options);
    public sealed virtual IAsyncResult BeginQueryBuildDefinitionsByUri(Uri[] uris, String[] propertyNameFilters, QueryOptions options, AsyncCallback callback, object state);
    public sealed virtual IBuildDefinition[] EndQueryBuildDefinitionsByUri(IAsyncResult result);
    public sealed virtual IBuildDefinition[] QueryBuildDefinitions(string teamProject);
    public sealed virtual IBuildDefinition[] QueryBuildDefinitions(string teamProject, QueryOptions options);
    public sealed virtual IBuildDefinition[] QueryBuildDefinitions(string teamProject, QueryOptions options, bool strict);
    public sealed virtual IBuildDefinitionQueryResult QueryBuildDefinitions(IBuildDefinitionSpec buildDefinitionSpec);
    public sealed virtual IBuildDefinitionQueryResult QueryBuildDefinitions(IBuildDefinitionSpec buildDefinitionSpec, bool strict);
    public sealed virtual IBuildDefinitionQueryResult[] QueryBuildDefinitions(IBuildDefinitionSpec[] buildDefinitionSpecs);
    public sealed virtual IBuildDefinitionQueryResult[] QueryBuildDefinitions(IBuildDefinitionSpec[] buildDefinitionSpecs, bool strict);
    public sealed virtual IAsyncResult BeginQueryBuildDefinitions(IBuildDefinitionSpec[] specs, AsyncCallback callback, object state);
    public sealed virtual IAsyncResult BeginQueryBuildDefinitions(IBuildDefinitionSpec[] specs, bool strict, AsyncCallback callback, object state);
    public sealed virtual IBuildDefinitionQueryResult[] EndQueryBuildDefinitions(IAsyncResult result);
    public sealed virtual void DeleteBuildDefinitions(IBuildDefinition[] definitions);
    public sealed virtual void DeleteBuildDefinitions(Uri[] definitionUris);
    public sealed virtual IBuildDefinition[] SaveBuildDefinitions(IBuildDefinition[] definitions);
    public sealed virtual void DeleteBuildServiceHost(Uri serviceHostUri);
    public sealed virtual IBuildServiceHost GetBuildServiceHost(string computer);
    public sealed virtual IBuildServiceHost GetBuildServiceHost(Uri buildServiceHostUri);
    public sealed virtual IBuildServiceHost[] QueryBuildServiceHosts(string computer);
    public sealed virtual IBuildServiceHost[] QueryBuildServiceHostsByUri(Uri[] buildServiceHostUris);
    public sealed virtual void SaveBuildServiceHost(IBuildServiceHost serviceHost);
    public sealed virtual void TestConnectionsForBuildMachine(IBuildServiceHost host);
    public sealed virtual void TestConnectionForBuildController(IBuildController controller);
    public sealed virtual void TestConnectionForBuildAgent(IBuildAgent agent);
    public sealed virtual IBuildAgent GetBuildAgent(Uri buildAgentUri);
    public sealed virtual IBuildAgent GetBuildAgent(Uri buildAgentUri, String[] propertyNameFilters);
    public sealed virtual IBuildAgent[] QueryBuildAgentsByUri(Uri[] buildAgentUris);
    public sealed virtual IBuildAgent[] QueryBuildAgentsByUri(Uri[] buildAgentUris, String[] propertyNameFilters);
    public sealed virtual IBuildAgentQueryResult QueryBuildAgents(IBuildAgentSpec buildAgentSpec);
    public sealed virtual IBuildAgentQueryResult[] QueryBuildAgents(IBuildAgentSpec[] buildAgentSpecs);
    public sealed virtual void DeleteBuildAgents(IBuildAgent[] agents);
    public sealed virtual void DeleteBuildAgents(Uri[] agentUris);
    public sealed virtual IBuildAgent[] SaveBuildAgents(IBuildAgent[] agents);
    public sealed virtual IBuildController GetBuildController(Uri buildControllerUri, bool includeAgents);
    public sealed virtual IBuildController GetBuildController(Uri buildControllerUri, String[] propertyNameFilters, bool includeAgents);
    public sealed virtual IBuildController GetBuildController(string name);
    public sealed virtual IBuildController[] QueryBuildControllers();
    public sealed virtual IBuildController[] QueryBuildControllers(bool includeAgents);
    public sealed virtual IBuildController[] QueryBuildControllersByUri(Uri[] buildControllerUris, bool includeAgents);
    public sealed virtual IBuildController[] QueryBuildControllersByUri(Uri[] buildControllerUris, String[] propertyNameFilters, bool includeAgents);
    public sealed virtual IBuildControllerQueryResult QueryBuildControllers(IBuildControllerSpec buildControllerSpec);
    public sealed virtual IBuildControllerQueryResult[] QueryBuildControllers(IBuildControllerSpec[] buildControllerSpecs);
    public sealed virtual void DeleteBuildControllers(IBuildController[] controllers);
    public sealed virtual void DeleteBuildControllers(Uri[] controllerUris);
    public sealed virtual IBuildController[] SaveBuildControllers(IBuildController[] controllers);
    public sealed virtual IQueuedBuild GetQueuedBuild(int queuedBuildId, QueryOptions queryOptions);
    public IQueuedBuild GetQueuedBuild(int queuedBuildId, String[] informationTypes, QueryOptions queryOptions);
    public sealed virtual IQueuedBuild[] GetQueuedBuild(Int32[] queuedBuildIds, QueryOptions queryOptions);
    public IQueuedBuild[] GetQueuedBuild(Int32[] queuedBuildIds, String[] informationTypes, QueryOptions queryOptions);
    public sealed virtual IQueuedBuildQueryResult QueryQueuedBuilds(IQueuedBuildSpec buildQueueSpec);
    public sealed virtual IQueuedBuildQueryResult[] QueryQueuedBuilds(IQueuedBuildSpec[] buildQueueSpecs);
    public sealed virtual IAsyncResult BeginQueryQueuedBuilds(IQueuedBuildSpec[] specs, AsyncCallback callback, object state);
    public sealed virtual IQueuedBuildQueryResult[] EndQueryQueuedBuilds(IAsyncResult result);
    public sealed virtual IQueuedBuild[] RetryQueuedBuilds(IQueuedBuild[] queuedBuilds);
    public sealed virtual IQueuedBuild[] RetryQueuedBuilds(IQueuedBuild[] queuedBuilds, Guid batchId);
    public sealed virtual IQueuedBuild[] RetryQueuedBuilds(IQueuedBuild[] queuedBuilds, Guid batchId, QueuedBuildRetryOption retryOption);
    public sealed virtual IQueuedBuild[] SaveQueuedBuilds(IQueuedBuild[] queuedBuilds);
    public sealed virtual IQueuedBuild QueueBuild(IBuildDefinition definition);
    public sealed virtual IQueuedBuild QueueBuild(IBuildRequest request);
    public sealed virtual IQueuedBuild QueueBuild(IBuildRequest request, QueueOptions options);
    public sealed virtual IQueuedBuild[] QueueBuild(IEnumerable`1<IBuildRequest> requests, QueueOptions options);
    public sealed virtual IQueuedBuild[] StartQueuedBuildsNow(IQueuedBuild[] builds);
    public sealed virtual IQueuedBuild[] StartQueuedBuildsNow(Int32[] ids);
    public sealed virtual void StopBuilds(IBuildDetail[] builds);
    public sealed virtual void StopBuilds(Uri[] uris);
    public sealed virtual void CancelBuilds(IQueuedBuild[] queuedBuilds);
    public sealed virtual void CancelBuilds(Int32[] ids);
    public sealed virtual void AddBuildQuality(string teamProject, string quality);
    public sealed virtual void AddBuildQuality(string teamProject, String[] qualities);
    public sealed virtual void DeleteBuildQuality(string teamProject, string quality);
    public sealed virtual void DeleteBuildQuality(string teamProject, String[] qualities);
    public sealed virtual String[] GetBuildQualities(string teamProject);
    public sealed virtual IProcessTemplate CreateProcessTemplate(string teamProject, string serverPath);
    public sealed virtual IProcessTemplate[] QueryProcessTemplates(string teamProject);
    public sealed virtual IProcessTemplate[] QueryProcessTemplates(string teamProject, ProcessTemplateType[] types);
    public sealed virtual IProcessTemplate[] SaveProcessTemplates(IProcessTemplate[] processTemplates);
    public sealed virtual void DeleteProcessTemplates(IProcessTemplate[] processTemplates);
    public sealed virtual object GetEnumValue(Type enumType, string displayText, object defaultValue);
    public sealed virtual string GetDisplayText(object value);
    public sealed virtual String[] GetDisplayTextValues(Type enumType);
    public sealed virtual ScheduleDays GetScheduleDaysFromDaysOfWeek(DayOfWeek[] weekdays);
    public sealed virtual void CreateTeamProjectComponents(Uri projectUri, IEnumerable`1<BuildTeamProjectPermission> permissions);
    internal static bool get_CompatibilityEnabled();
    internal static void set_CompatibilityEnabled(bool value);
    internal BuildStoreWebService get_BuildStoreWebService();
    internal AdministrationWebService4 get_AdministrationService();
    internal BuildQueueWebService4 get_BuildQueueService();
    internal BuildWebService4 get_BuildService();
    internal Tfs2008Helper get_Build2008Helper();
    internal Tfs2010Helper get_Build2010Helper();
    internal VersionControlServer get_VersionControlServer();
    private static Uri[] GetUrisForBuilds(IBuildDetail[] builds);
}
public class Microsoft.TeamFoundation.Build.Client.BuildServerException : TeamFoundationServerException {
    internal BuildServerException(string error, Exception innerException);
    protected BuildServerException(SerializationInfo info, StreamingContext context);
    internal BuildServerException(string resourceIdentifier);
    internal BuildServerException(string resourceIdentifier, Object[] args);
    [EditorBrowsableAttribute("1")]
public static Exception ConvertException(SoapException innerException);
    [EditorBrowsableAttribute("1")]
public static Exception ConvertException(SoapException innerException, bool convertUnknown);
    [EditorBrowsableAttribute("1")]
public static Exception ConvertException(string exceptionType, string exceptionMessage, Exception innerException, bool convertUnknown);
}
[ExtensionAttribute]
public static class Microsoft.TeamFoundation.Build.Client.BuildServerExtensions : object {
    [ExtensionAttribute]
public static IBuildDefinitionSourceProvider CreateSourceProvider(IBuildDefinition definition, string name, DefinitionTriggerType supportedTriggers);
    [ExtensionAttribute]
public static IBuildDefinitionSourceProvider CreateInitialSourceProvider(IBuildDefinition definition, string providerName);
    [ExtensionAttribute]
public static void SetSourceProvider(IBuildDefinition definition, IBuildDefinitionSourceProvider sourceProvider);
    [ExtensionAttribute]
public static IBuildDefinitionSourceProvider GetDefaultSourceProvider(IBuildDefinition definition);
    [ExtensionAttribute]
public static bool HasFlag(DefinitionTriggerType triggerType, DefinitionTriggerType triggerType2);
    [ExtensionAttribute]
public static bool HasFlag(BuildReason reason, BuildReason reason2);
}
public enum Microsoft.TeamFoundation.Build.Client.BuildServerVersion : Enum {
    public int value__;
    public static BuildServerVersion V1;
    public static BuildServerVersion V2;
    public static BuildServerVersion V3;
    public static BuildServerVersion V4;
    public static BuildServerVersion V5;
}
internal class Microsoft.TeamFoundation.Build.Client.BuildService : TfsHttpClient {
    private BuildServer m_buildServer;
    protected Guid CollectionServiceIdentifier { get; }
    protected string ComponentName { get; }
    protected string ServiceType { get; }
    internal BuildService(BuildServer server);
    public BuildService(TfsTeamProjectCollection connection);
    public virtual object GetService(Type serviceType);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ComponentName();
    protected virtual string get_ServiceType();
    public BuildAgent2008[] AddBuildAgents(BuildAgent2008[] agents);
    public BuildDefinition2010[] AddBuildDefinitions(BuildDefinition2010[] definitions);
    public void AddBuildQualities(string teamProject, String[] qualities);
    public IAsyncResult BeginQueryBuildDefinitionsByUri(Uri[] uris, AsyncCallback callback, object state);
    public IAsyncResult BeginQueryBuildGroups(BuildGroupItemSpec2010[] specs, AsyncCallback callback, object state);
    public IAsyncResult BeginQueryBuildQueue(BuildQueueSpec2008[] specs, AsyncCallback callback, object state);
    public IAsyncResult BeginQueryBuilds(BuildDetailSpec2010[] specs, AsyncCallback callback, object state);
    public IAsyncResult BeginQueryBuildsByUri(Uri[] uris, String[] informationTypes, QueryOptions2010 options, AsyncCallback callback, object state);
    public void CancelBuilds(Int32[] ids);
    protected virtual Exception ConvertException(SoapException exception);
    public void DeleteBuildAgents(Uri[] uris);
    public void DeleteBuildDefinitions(Uri[] uris);
    public void DeleteBuildQualities(string teamProject, String[] qualities);
    public BuildDeletionResult2010[] DeleteBuilds(Uri[] uris);
    public BuildGroupQueryResult EndQueryBuildDefinitionsByUri(IAsyncResult result);
    public BuildGroupQueryResult[] EndQueryBuildGroups(IAsyncResult result);
    public BuildQueueQueryResult2008[] EndQueryBuildQueue(IAsyncResult result);
    public BuildQueryResult2008[] EndQueryBuilds(IAsyncResult result);
    public BuildQueryResult2008 EndQueryBuildsByUri(IAsyncResult result);
    public void EvaluateSchedules();
    public BuildDefinition2010[] GetAffectedBuildDefinitions(String[] serverItems);
    public String[] GetBuildQualities(string teamProject);
    public void ProcessChangeset(int changesetId);
    public BuildAgent2008[] QueryBuildAgentsByUri(Uri[] uris);
    public BuildGroupQueryResult QueryBuildDefinitionsByUri(Uri[] uris);
    public BuildGroupQueryResult[] QueryBuildGroups(BuildGroupItemSpec2010[] specs);
    public BuildQueueQueryResult2008[] QueryBuildQueue(BuildQueueSpec2008[] specs);
    public BuildQueueQueryResult2008 QueryBuildQueueById(Int32[] ids, QueryOptions2010 options);
    public BuildQueryResult2008[] QueryBuilds(BuildDetailSpec2010[] specs);
    public BuildQueryResult2008 QueryBuildsByUri(Uri[] uris, String[] informationTypes, QueryOptions2010 options);
    public QueuedBuild2008 QueueBuild(BuildRequest2008 buildRequest, QueueOptions2010 options);
    public void StopBuilds(Uri[] uris);
    public BuildAgent2008[] UpdateBuildAgents(BuildAgent2008[] updates);
    public BuildDefinition2010[] UpdateBuildDefinitions(BuildDefinition2010[] updates);
    public BuildInformationNode2010[] UpdateBuildInformation(InformationChangeRequest2010[] changes);
    public BuildDetail2010[] UpdateBuilds(BuildUpdateOptions2010[] updateOptions);
    public QueuedBuild2008[] UpdateQueuedBuilds(QueuedBuildUpdateOptions2010[] updateOptions);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildServiceHost : object {
    private BuildServer m_buildServer;
    private IBuildController m_controller;
    private BuildServiceHostUpdateOptions m_lastSnapshot;
    private List`1<IBuildAgent> m_agents;
    private DateTime m_acquiredOn;
    private Uri m_baseUrl;
    private DateTime m_connectedOn;
    private bool m_isVirtual;
    private Uri m_messageQueueUrl;
    private string m_name;
    private bool m_requireClientCertificates;
    private ServiceHostStatus m_status;
    private DateTime m_statusChangedOn;
    private Uri m_uri;
    private int m_version;
    private IBuildServer Microsoft.TeamFoundation.Build.Client.IBuildServiceHost.BuildServer { get; }
    public BuildServer BuildServer { get; public set; }
    public IBuildController Controller { get; }
    public ReadOnlyCollection`1<IBuildAgent> Agents { get; }
    public DateTime AcquiredOn { get; }
    public Uri BaseUrl { get; public set; }
    public DateTime ConnectedOn { get; }
    public bool IsVirtual { get; }
    public Uri MessageQueueUrl { get; }
    public string Name { get; public set; }
    public bool RequireClientCertificates { get; public set; }
    public ServiceHostStatus Status { get; }
    public DateTime StatusChangedOn { get; }
    public Uri Uri { get; internal set; }
    public int Version { get; public set; }
    internal BuildServiceHost(BuildServer buildServer, Uri uri, IBuildController controller, string name);
    public BuildServiceHost(BuildServer buildServer, string name, Uri baseUrl);
    internal BuildServiceHost(BuildServer buildServer, BuildAgent2008 agent2008);
    internal BuildServiceHost(BuildServer buildServer, BuildServiceHost2010 serviceHost2010);
    private sealed virtual override IBuildServer Microsoft.TeamFoundation.Build.Client.IBuildServiceHost.get_BuildServer();
    public BuildServer get_BuildServer();
    public void set_BuildServer(BuildServer value);
    public sealed virtual IBuildController get_Controller();
    public sealed virtual ReadOnlyCollection`1<IBuildAgent> get_Agents();
    public sealed virtual IBuildController CreateBuildController(string name);
    public sealed virtual void SetBuildAgentStatus(IBuildAgent agent, AgentStatus status, string message);
    public sealed virtual void SetBuildControllerStatus(ControllerStatus status, string message);
    public sealed virtual void TakeOwnership();
    public sealed virtual void ReleaseOwnership();
    public sealed virtual IBuildAgent CreateBuildAgent(string name, string buildDirectory);
    public sealed virtual IBuildAgent CreateBuildAgent(string name, string buildDirectory, IBuildController buildController);
    public sealed virtual void AddBuildAgent(IBuildAgent agent);
    internal void AfterDeserialize();
    internal BuildServiceHostUpdateOptions GetSnapshot();
    internal BuildServiceHostUpdateOptions GetUpdateOptions();
    internal void SetUpdateOptions(BuildServiceHostUpdateOptions options);
    private BuildServiceHostUpdate CompareSnapshots(BuildServiceHostUpdateOptions originalValues, BuildServiceHostUpdateOptions modifiedValues);
    public sealed virtual void SetBuildController(IBuildController controller);
    public sealed virtual void Delete();
    public sealed virtual void Save();
    public sealed virtual void DeleteBuildController();
    public sealed virtual IBuildAgent FindBuildAgent(string controller, string name);
    public sealed virtual bool DeleteBuildAgent(IBuildAgent agent);
    public sealed virtual DateTime get_AcquiredOn();
    public sealed virtual Uri get_BaseUrl();
    public sealed virtual void set_BaseUrl(Uri value);
    public sealed virtual DateTime get_ConnectedOn();
    public sealed virtual bool get_IsVirtual();
    public sealed virtual Uri get_MessageQueueUrl();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual bool get_RequireClientCertificates();
    public sealed virtual void set_RequireClientCertificates(bool value);
    public sealed virtual ServiceHostStatus get_Status();
    public sealed virtual DateTime get_StatusChangedOn();
    public sealed virtual Uri get_Uri();
    internal void set_Uri(Uri value);
    public int get_Version();
    public void set_Version(int value);
    internal static BuildServiceHost FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildServiceHost obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildServiceHost2010 : object {
    private Uri m_baseUrl;
    private bool m_isVirtual;
    private string m_name;
    private bool m_requireClientCertificates;
    private Uri m_uri;
    public Uri BaseUrl { get; public set; }
    public bool IsVirtual { get; public set; }
    public string Name { get; public set; }
    public bool RequireClientCertificates { get; public set; }
    public Uri Uri { get; internal set; }
    internal BuildServiceHost2010(BuildServiceHost serviceHost);
    public Uri get_BaseUrl();
    public void set_BaseUrl(Uri value);
    public bool get_IsVirtual();
    public void set_IsVirtual(bool value);
    public string get_Name();
    public void set_Name(string value);
    public bool get_RequireClientCertificates();
    public void set_RequireClientCertificates(bool value);
    public Uri get_Uri();
    internal void set_Uri(Uri value);
    internal static BuildServiceHost2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildServiceHost2010 obj);
}
public class Microsoft.TeamFoundation.Build.Client.BuildServiceHostAlreadyExistsException : AdministrationException {
    public BuildServiceHostAlreadyExistsException(string message);
    public BuildServiceHostAlreadyExistsException(string message, Exception ex);
    protected BuildServiceHostAlreadyExistsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildServiceHostDeletionException : AdministrationException {
    public BuildServiceHostDeletionException(string message);
    public BuildServiceHostDeletionException(string message, Exception ex);
    protected BuildServiceHostDeletionException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildServiceHostDoesNotExistException : AdministrationException {
    public BuildServiceHostDoesNotExistException(string message);
    public BuildServiceHostDoesNotExistException(string message, Exception ex);
    protected BuildServiceHostDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildServiceHostNotFoundException : BuildServerException {
    public BuildServiceHostNotFoundException(string name);
    protected BuildServiceHostNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildServiceHostNotFoundForUriException : BuildServerException {
    public BuildServiceHostNotFoundForUriException(Uri buildServiceHostUri, string userName);
    protected BuildServiceHostNotFoundForUriException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.BuildServiceHostOwnershipException : AdministrationException {
    public BuildServiceHostOwnershipException(string message);
    public BuildServiceHostOwnershipException(string message, Exception ex);
    protected BuildServiceHostOwnershipException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildServiceHostQueryResult : object {
    internal BuildAgent[] m_agents;
    internal BuildController[] m_controllers;
    internal BuildServiceHost[] m_serviceHosts;
    public IBuildServiceHost[] ServiceHosts { get; }
    public IFailure[] Failures { get; }
    internal static BuildServiceHostQueryResult FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildServiceHostQueryResult obj);
    public sealed virtual IBuildServiceHost[] get_ServiceHosts();
    public sealed virtual IFailure[] get_Failures();
    internal void AfterDeserialize();
}
internal class Microsoft.TeamFoundation.Build.Client.BuildServiceHostQueryResult2010 : object {
    internal BuildAgent2010[] m_agents;
    internal BuildController2010[] m_controllers;
    internal Failure2010[] m_internalFailures;
    internal BuildServiceHost2010[] m_serviceHosts;
    internal Failure2010[] InternalFailures { get; }
    internal Failure2010[] get_InternalFailures();
    internal static BuildServiceHostQueryResult2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildServiceHostQueryResult2010 obj);
}
public class Microsoft.TeamFoundation.Build.Client.BuildServiceHostSpecNotUniqueException : BuildServerException {
    public BuildServiceHostSpecNotUniqueException(string name);
    protected BuildServiceHostSpecNotUniqueException(SerializationInfo info, StreamingContext context);
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Build.Client.BuildServiceHostUpdate : Enum {
    public int value__;
    public static BuildServiceHostUpdate BaseUrl;
    public static BuildServiceHostUpdate Name;
    public static BuildServiceHostUpdate None;
    public static BuildServiceHostUpdate RequireClientCertificates;
}
[FlagsAttribute]
internal enum Microsoft.TeamFoundation.Build.Client.BuildServiceHostUpdate2010 : Enum {
    public int value__;
    public static BuildServiceHostUpdate2010 BaseUrl;
    public static BuildServiceHostUpdate2010 Name;
    public static BuildServiceHostUpdate2010 None;
    public static BuildServiceHostUpdate2010 RequireClientCertificates;
}
public class Microsoft.TeamFoundation.Build.Client.BuildServiceHostUpdateException : AdministrationException {
    public BuildServiceHostUpdateException(string message);
    public BuildServiceHostUpdateException(string message, Exception ex);
    protected BuildServiceHostUpdateException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildServiceHostUpdateOptions : object {
    private Uri m_baseUrl;
    private BuildServiceHostUpdate m_fields;
    private string m_name;
    private bool m_requireClientCertificates;
    private Uri m_uri;
    internal Uri BaseUrl { get; internal set; }
    internal BuildServiceHostUpdate Fields { get; internal set; }
    internal string Name { get; internal set; }
    internal bool RequireClientCertificates { get; internal set; }
    internal Uri Uri { get; internal set; }
    internal Uri get_BaseUrl();
    internal void set_BaseUrl(Uri value);
    internal BuildServiceHostUpdate get_Fields();
    internal void set_Fields(BuildServiceHostUpdate value);
    internal string get_Name();
    internal void set_Name(string value);
    internal bool get_RequireClientCertificates();
    internal void set_RequireClientCertificates(bool value);
    internal Uri get_Uri();
    internal void set_Uri(Uri value);
    internal static BuildServiceHostUpdateOptions FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildServiceHostUpdateOptions obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildServiceHostUpdateOptions2010 : object {
    private Uri m_baseUrl;
    private BuildServiceHostUpdate2010 m_fields;
    private string m_name;
    private bool m_requireClientCertificates;
    private Uri m_uri;
    internal Uri BaseUrl { get; internal set; }
    internal BuildServiceHostUpdate2010 Fields { get; internal set; }
    internal string Name { get; internal set; }
    internal bool RequireClientCertificates { get; internal set; }
    internal Uri Uri { get; internal set; }
    internal BuildServiceHostUpdateOptions2010(BuildServiceHostUpdateOptions updateOptions);
    internal Uri get_BaseUrl();
    internal void set_BaseUrl(Uri value);
    internal BuildServiceHostUpdate2010 get_Fields();
    internal void set_Fields(BuildServiceHostUpdate2010 value);
    internal string get_Name();
    internal void set_Name(string value);
    internal bool get_RequireClientCertificates();
    internal void set_RequireClientCertificates(bool value);
    internal Uri get_Uri();
    internal void set_Uri(Uri value);
    internal static BuildServiceHostUpdateOptions2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildServiceHostUpdateOptions2010 obj);
}
public class Microsoft.TeamFoundation.Build.Client.BuildSpecNotUniqueException : BuildServerException {
    public BuildSpecNotUniqueException(string buildNumber, string buildDefinitionPath);
    protected BuildSpecNotUniqueException(SerializationInfo info, StreamingContext context);
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Build.Client.BuildStatus : Enum {
    public int value__;
    public static BuildStatus All;
    public static BuildStatus Failed;
    public static BuildStatus InProgress;
    public static BuildStatus None;
    public static BuildStatus NotStarted;
    public static BuildStatus PartiallySucceeded;
    public static BuildStatus Stopped;
    public static BuildStatus Succeeded;
}
[FlagsAttribute]
internal enum Microsoft.TeamFoundation.Build.Client.BuildStatus2010 : Enum {
    public int value__;
    public static BuildStatus2010 All;
    public static BuildStatus2010 Failed;
    public static BuildStatus2010 InProgress;
    public static BuildStatus2010 None;
    public static BuildStatus2010 NotStarted;
    public static BuildStatus2010 PartiallySucceeded;
    public static BuildStatus2010 Stopped;
    public static BuildStatus2010 Succeeded;
}
internal class Microsoft.TeamFoundation.Build.Client.BuildStep : object {
    private IBuildInformationNode m_node;
    public int Id { get; }
    public string Name { get; public set; }
    public string Message { get; public set; }
    public DateTime StartTime { get; public set; }
    public DateTime FinishTime { get; public set; }
    public BuildStepStatus Status { get; public set; }
    public IBuildInformationNode Node { get; }
    public static IComparer`1<IBuildInformationNode> Comparer { get; }
    public BuildStep(IBuildInformationNode node, string name, string message, DateTime startTime);
    public BuildStep(IBuildInformationNode node, string name, string message, DateTime startTime, DateTime finishTime, BuildStepStatus status);
    public BuildStep(IBuildInformationNode node);
    public sealed virtual int get_Id();
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual string get_Message();
    public sealed virtual void set_Message(string value);
    public sealed virtual DateTime get_StartTime();
    public sealed virtual void set_StartTime(DateTime value);
    public sealed virtual DateTime get_FinishTime();
    public sealed virtual void set_FinishTime(DateTime value);
    public sealed virtual BuildStepStatus get_Status();
    public sealed virtual void set_Status(BuildStepStatus value);
    public sealed virtual IBuildInformationNode get_Node();
    public sealed virtual IBuildStep Add(string name, string message, DateTime startTime);
    public IBuildStep Add(string name, string message, DateTime startTime, bool save);
    public sealed virtual IBuildStep Add(string name, string message, DateTime time, BuildStepStatus status);
    public IBuildStep Add(string name, string message, DateTime time, BuildStepStatus status, bool save);
    public sealed virtual void Save();
    public static List`1<IBuildStep> FromInformationNodes(List`1<IBuildInformationNode> nodes);
    public static IComparer`1<IBuildInformationNode> get_Comparer();
}
public enum Microsoft.TeamFoundation.Build.Client.BuildStepStatus : Enum {
    public int value__;
    public static BuildStepStatus Failed;
    public static BuildStepStatus InProgress;
    public static BuildStepStatus Succeeded;
    public static BuildStepStatus Unknown;
}
public class Microsoft.TeamFoundation.Build.Client.BuildStoppedException : BuildServerException {
    public BuildStoppedException(string build, string stoppedBy);
    protected BuildStoppedException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildStoreWebService : TfsHttpClient {
    protected Guid CollectionServiceIdentifier { get; }
    protected string ComponentName { get; }
    protected string ServiceType { get; }
    internal BuildStoreWebService(TfsTeamProjectCollection server);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ComponentName();
    protected virtual string get_ServiceType();
    public string AddBuild(string teamProject, BuildData buildData);
}
public class Microsoft.TeamFoundation.Build.Client.BuildSummary : object {
    internal ChangesetDisplayInformation[] m_changeSet;
    private DateTime m_finishTime;
    private bool m_keepForever;
    private string m_number;
    private string m_quality;
    private BuildReason m_reason;
    internal RequestedForDisplayInformation[] m_requestedFor;
    private DateTime m_startTime;
    private BuildStatus m_status;
    private Uri m_uri;
    public ChangesetDisplayInformation[] ChangeSet { get; }
    public DateTime FinishTime { get; }
    public bool KeepForever { get; }
    public string Number { get; }
    public string Quality { get; }
    public BuildReason Reason { get; }
    public RequestedForDisplayInformation[] RequestedFor { get; }
    public DateTime StartTime { get; }
    public BuildStatus Status { get; }
    public Uri Uri { get; }
    public ChangesetDisplayInformation[] get_ChangeSet();
    public DateTime get_FinishTime();
    public bool get_KeepForever();
    public string get_Number();
    public string get_Quality();
    public BuildReason get_Reason();
    public RequestedForDisplayInformation[] get_RequestedFor();
    public DateTime get_StartTime();
    public BuildStatus get_Status();
    public Uri get_Uri();
    [EditorBrowsableAttribute("1")]
public static BuildSummary FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, BuildSummary obj);
}
public class Microsoft.TeamFoundation.Build.Client.BuildTeamProjectPermission : object {
    internal String[] m_allows;
    internal String[] m_denies;
    private string m_identityName;
    public String[] Allows { get; public set; }
    public String[] Denies { get; public set; }
    public string IdentityName { get; public set; }
    public String[] get_Allows();
    public void set_Allows(String[] value);
    public String[] get_Denies();
    public void set_Denies(String[] value);
    public string get_IdentityName();
    public void set_IdentityName(string value);
    [EditorBrowsableAttribute("1")]
public static BuildTeamProjectPermission FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, BuildTeamProjectPermission obj);
}
public class Microsoft.TeamFoundation.Build.Client.BuildTeamProjectPermission2010 : object {
    internal String[] m_allows;
    internal String[] m_denies;
    private string m_identityName;
    public String[] Allows { get; public set; }
    public String[] Denies { get; public set; }
    public string IdentityName { get; public set; }
    internal BuildTeamProjectPermission2010(BuildTeamProjectPermission permission);
    public String[] get_Allows();
    public void set_Allows(String[] value);
    public String[] get_Denies();
    public void set_Denies(String[] value);
    public string get_IdentityName();
    public void set_IdentityName(string value);
    [EditorBrowsableAttribute("1")]
public static BuildTeamProjectPermission2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, BuildTeamProjectPermission2010 obj);
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Build.Client.BuildUpdate : Enum {
    public int value__;
    public static BuildUpdate BuildNumber;
    public static BuildUpdate CompilationStatus;
    public static BuildUpdate DropLocation;
    public static BuildUpdate KeepForever;
    public static BuildUpdate LabelName;
    public static BuildUpdate LogLocation;
    public static BuildUpdate None;
    public static BuildUpdate Quality;
    public static BuildUpdate SourceGetVersion;
    public static BuildUpdate Status;
    public static BuildUpdate TestStatus;
}
[FlagsAttribute]
internal enum Microsoft.TeamFoundation.Build.Client.BuildUpdate2010 : Enum {
    public int value__;
    public static BuildUpdate2010 BuildNumber;
    public static BuildUpdate2010 CompilationStatus;
    public static BuildUpdate2010 DropLocation;
    public static BuildUpdate2010 KeepForever;
    public static BuildUpdate2010 LabelName;
    public static BuildUpdate2010 LogLocation;
    public static BuildUpdate2010 None;
    public static BuildUpdate2010 Quality;
    public static BuildUpdate2010 SourceGetVersion;
    public static BuildUpdate2010 Status;
    public static BuildUpdate2010 TestStatus;
}
internal class Microsoft.TeamFoundation.Build.Client.BuildUpdateOptions : object {
    private string m_buildNumber;
    private BuildPhaseStatus m_compilationStatus;
    private string m_dropLocation;
    private BuildUpdate m_fields;
    private bool m_keepForever;
    private string m_labelName;
    private string m_logLocation;
    private string m_quality;
    private string m_sourceGetVersion;
    private BuildStatus m_status;
    private BuildPhaseStatus m_testStatus;
    private Uri m_uri;
    public string BuildNumber { get; public set; }
    public BuildPhaseStatus CompilationStatus { get; public set; }
    public string DropLocation { get; public set; }
    internal BuildUpdate Fields { get; internal set; }
    public bool KeepForever { get; public set; }
    public string LabelName { get; public set; }
    public string LogLocation { get; public set; }
    public string Quality { get; public set; }
    public string SourceGetVersion { get; public set; }
    public BuildStatus Status { get; public set; }
    public BuildPhaseStatus TestStatus { get; public set; }
    public Uri Uri { get; internal set; }
    public string get_BuildNumber();
    public void set_BuildNumber(string value);
    public BuildPhaseStatus get_CompilationStatus();
    public void set_CompilationStatus(BuildPhaseStatus value);
    public string get_DropLocation();
    public void set_DropLocation(string value);
    internal BuildUpdate get_Fields();
    internal void set_Fields(BuildUpdate value);
    public bool get_KeepForever();
    public void set_KeepForever(bool value);
    public string get_LabelName();
    public void set_LabelName(string value);
    public string get_LogLocation();
    public void set_LogLocation(string value);
    public string get_Quality();
    public void set_Quality(string value);
    public string get_SourceGetVersion();
    public void set_SourceGetVersion(string value);
    public BuildStatus get_Status();
    public void set_Status(BuildStatus value);
    public BuildPhaseStatus get_TestStatus();
    public void set_TestStatus(BuildPhaseStatus value);
    public Uri get_Uri();
    internal void set_Uri(Uri value);
    internal static BuildUpdateOptions FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildUpdateOptions obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildUpdateOptions2010 : object {
    private string m_buildNumber;
    private BuildPhaseStatus2010 m_compilationStatus;
    private string m_dropLocation;
    private BuildUpdate2010 m_fields;
    private bool m_keepForever;
    private string m_labelName;
    private string m_logLocation;
    private string m_quality;
    private string m_sourceGetVersion;
    private BuildStatus2010 m_status;
    private BuildPhaseStatus2010 m_testStatus;
    private Uri m_uri;
    public string BuildNumber { get; public set; }
    public BuildPhaseStatus2010 CompilationStatus { get; public set; }
    public string DropLocation { get; public set; }
    internal BuildUpdate2010 Fields { get; internal set; }
    public bool KeepForever { get; public set; }
    public string LabelName { get; public set; }
    public string LogLocation { get; public set; }
    public string Quality { get; public set; }
    public string SourceGetVersion { get; public set; }
    public BuildStatus2010 Status { get; public set; }
    public BuildPhaseStatus2010 TestStatus { get; public set; }
    public Uri Uri { get; internal set; }
    public BuildUpdateOptions2010(BuildUpdateOptions updateOptions);
    public string get_BuildNumber();
    public void set_BuildNumber(string value);
    public BuildPhaseStatus2010 get_CompilationStatus();
    public void set_CompilationStatus(BuildPhaseStatus2010 value);
    public string get_DropLocation();
    public void set_DropLocation(string value);
    internal BuildUpdate2010 get_Fields();
    internal void set_Fields(BuildUpdate2010 value);
    public bool get_KeepForever();
    public void set_KeepForever(bool value);
    public string get_LabelName();
    public void set_LabelName(string value);
    public string get_LogLocation();
    public void set_LogLocation(string value);
    public string get_Quality();
    public void set_Quality(string value);
    public string get_SourceGetVersion();
    public void set_SourceGetVersion(string value);
    public BuildStatus2010 get_Status();
    public void set_Status(BuildStatus2010 value);
    public BuildPhaseStatus2010 get_TestStatus();
    public void set_TestStatus(BuildPhaseStatus2010 value);
    public Uri get_Uri();
    internal void set_Uri(Uri value);
    internal static BuildUpdateOptions2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, BuildUpdateOptions2010 obj);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildWarning : BuildErrorBase {
    public string WarningType { get; public set; }
    public BuildWarning(IBuildInformationNode node, string message, DateTime timestamp);
    public BuildWarning(IBuildInformationNode node, string file, int lineNumber, int endLineNumber, string code, string message, DateTime timestamp);
    public BuildWarning(IBuildInformationNode node, string file, string serverPath, int lineNumber, int endLineNumber, string code, string message, DateTime timestamp, string warningType);
    public BuildWarning(IBuildInformationNode node);
    public sealed virtual string get_WarningType();
    public sealed virtual void set_WarningType(string value);
    public static List`1<IBuildWarning> FromInformationNodes(List`1<IBuildInformationNode> nodes);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildWebService : TfsHttpClient {
    private BuildServer m_buildServer;
    protected Guid CollectionServiceIdentifier { get; }
    protected string ComponentName { get; }
    protected string ServiceType { get; }
    internal BuildWebService(BuildServer server);
    public BuildWebService(TfsTeamProjectCollection connection);
    public virtual object GetService(Type serviceType);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ComponentName();
    protected virtual string get_ServiceType();
    public BuildDefinition2010[] AddBuildDefinitions(BuildDefinition2010[] definitions);
    public void AddBuildQualities(string teamProject, String[] qualities);
    public ProcessTemplate2010[] AddProcessTemplates(ProcessTemplate2010[] processTemplates);
    public IAsyncResult BeginQueryBuildDefinitions(BuildDefinitionSpec2010[] specs, AsyncCallback callback, object state);
    public IAsyncResult BeginQueryBuildDefinitionsByUri(Uri[] uris, QueryOptions2010 options, AsyncCallback callback, object state);
    public IAsyncResult BeginQueryBuilds(BuildDetailSpec2010[] specs, AsyncCallback callback, object state);
    public IAsyncResult BeginQueryBuildsByUri(Uri[] uris, String[] informationTypes, QueryOptions2010 options, QueryDeletedOption2010 deletedOption, AsyncCallback callback, object state);
    protected virtual Exception ConvertException(SoapException exception);
    public void CreateTeamProjectComponents(Uri projectUri, IEnumerable`1<BuildTeamProjectPermission2010> permissions);
    public void DeleteBuildDefinitions(Uri[] uris);
    public void DeleteBuildQualities(string teamProject, String[] qualities);
    public BuildDeletionResult2010[] DeleteBuilds(Uri[] uris, DeleteOptions2010 deleteOptions);
    public void DeleteProcessTemplates(Int32[] processTemplateIds);
    public void DestroyBuilds(Uri[] uris);
    public BuildDefinitionQueryResult2010[] EndQueryBuildDefinitions(IAsyncResult result);
    public BuildDefinitionQueryResult2010 EndQueryBuildDefinitionsByUri(IAsyncResult result);
    public BuildQueryResult2010[] EndQueryBuilds(IAsyncResult result);
    public BuildQueryResult2010 EndQueryBuildsByUri(IAsyncResult result);
    public BuildDefinition2010[] GetAffectedBuildDefinitions(String[] serverItems, ContinuousIntegrationType continuousIntegrationType);
    public String[] GetBuildQualities(string teamProject);
    public BuildDetail2010 NotifyBuildCompleted(Uri buildUri);
    public BuildDefinitionQueryResult2010[] QueryBuildDefinitions(BuildDefinitionSpec2010[] specs);
    public BuildDefinitionQueryResult2010 QueryBuildDefinitionsByUri(Uri[] uris, QueryOptions2010 options);
    public BuildQueryResult2010[] QueryBuilds(BuildDetailSpec2010[] specs);
    public BuildQueryResult2010 QueryBuildsByUri(Uri[] uris, String[] informationTypes, QueryOptions2010 options, QueryDeletedOption2010 deletedOption);
    public ProcessTemplate2010[] QueryProcessTemplates(string teamProject, ProcessTemplateType2010[] queryTypes);
    public void StopBuilds(Uri[] uris);
    public BuildDefinition2010[] UpdateBuildDefinitions(BuildDefinition2010[] updates);
    public BuildInformationNode2010[] UpdateBuildInformation(InformationChangeRequest2010[] changes);
    public BuildDetail2010[] UpdateBuilds(BuildUpdateOptions2010[] updateOptions);
    public ProcessTemplate2010[] UpdateProcessTemplates(ProcessTemplate2010[] processTemplates);
}
internal class Microsoft.TeamFoundation.Build.Client.BuildWebService4 : TfsHttpClient {
    private BuildServer m_buildServer;
    protected Guid CollectionServiceIdentifier { get; }
    protected string ComponentName { get; }
    protected string ServiceType { get; }
    public BuildWebService4(BuildServer server);
    public BuildWebService4(TfsTeamProjectCollection connection);
    public virtual object GetService(Type serviceType);
    protected virtual Guid get_CollectionServiceIdentifier();
    protected virtual string get_ComponentName();
    protected virtual string get_ServiceType();
    public BuildDefinition[] AddBuildDefinitions(BuildDefinition[] definitions);
    public void AddBuildQualities(string teamProject, String[] qualities);
    public ProcessTemplate[] AddProcessTemplates(ProcessTemplate[] processTemplates);
    public IAsyncResult BeginQueryBuildDefinitions(BuildDefinitionSpec[] specs, bool strict, AsyncCallback callback, object state);
    public IAsyncResult BeginQueryBuildDefinitionsByUri(Uri[] uris, String[] propertyNameFilters, QueryOptions options, AsyncCallback callback, object state);
    public IAsyncResult BeginQueryBuilds(BuildDetailSpec[] specs, AsyncCallback callback, object state);
    public IAsyncResult BeginQueryBuildsByUri(Uri[] uris, String[] informationTypes, QueryOptions options, QueryDeletedOption deletedOption, AsyncCallback callback, object state);
    protected virtual Exception ConvertException(SoapException exception);
    public void CreateTeamProjectComponents(Uri projectUri, IEnumerable`1<BuildTeamProjectPermission> permissions);
    public void DeleteBuildDefinitions(Uri[] uris);
    public void DeleteBuildQualities(string teamProject, String[] qualities);
    public BuildDeletionResult[] DeleteBuilds(Uri[] uris, DeleteOptions deleteOptions);
    public void DeleteProcessTemplates(Int32[] processTemplateIds);
    public void DestroyBuilds(Uri[] uris);
    public BuildDefinitionQueryResult[] EndQueryBuildDefinitions(IAsyncResult result);
    public BuildDefinitionQueryResult EndQueryBuildDefinitionsByUri(IAsyncResult result);
    public BuildQueryResult[] EndQueryBuilds(IAsyncResult result);
    public BuildQueryResult EndQueryBuildsByUri(IAsyncResult result);
    public BuildDefinition[] GetAffectedBuildDefinitions(String[] serverItems, DefinitionTriggerType continuousIntegrationType);
    public String[] GetBuildQualities(string teamProject);
    public BuildDetail NotifyBuildCompleted(Uri buildUri);
    public BuildDefinitionQueryResult[] QueryBuildDefinitions(BuildDefinitionSpec[] specs, bool strict);
    public BuildDefinitionQueryResult QueryBuildDefinitionsByUri(Uri[] uris, String[] propertyNameFilters, QueryOptions options);
    public BuildQueryResult[] QueryBuilds(BuildDetailSpec[] specs);
    public BuildQueryResult QueryBuildsByUri(Uri[] uris, String[] informationTypes, QueryOptions options, QueryDeletedOption deletedOption);
    public ProcessTemplate[] QueryProcessTemplates(string teamProject, ProcessTemplateType[] queryTypes);
    public Guid RequestIntermediateLogs(Uri buildUri);
    public void StopBuilds(Uri[] uris);
    public BuildDefinition[] UpdateBuildDefinitions(BuildDefinition[] updates);
    public BuildInformationNode[] UpdateBuildInformation(InformationChangeRequest[] changes);
    public BuildDetail[] UpdateBuilds(BuildUpdateOptions[] updateOptions);
    public ProcessTemplate[] UpdateProcessTemplates(ProcessTemplate[] processTemplates);
}
public class Microsoft.TeamFoundation.Build.Client.CannotDeleteDefinitionBuildExistsException : BuildServerException {
    public CannotDeleteDefinitionBuildExistsException(string message);
    public CannotDeleteDefinitionBuildExistsException(string message, Exception ex);
    protected CannotDeleteDefinitionBuildExistsException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.CannotDeleteInProgressBuildException : BuildServerException {
    public CannotDeleteInProgressBuildException(string message);
    public CannotDeleteInProgressBuildException(string message, Exception ex);
    protected CannotDeleteInProgressBuildException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.CannotRedeployException : BuildServerException {
    public CannotRedeployException(string message);
    public CannotRedeployException(string message, Exception ex);
    protected CannotRedeployException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.CannotStartBuildException : BuildServerException {
    public CannotStartBuildException(string message);
    public CannotStartBuildException(string message, Exception ex);
    protected CannotStartBuildException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.CannotStopBuildException : BuildServerException {
    public CannotStopBuildException(string message);
    public CannotStopBuildException(string message, Exception ex);
    protected CannotStopBuildException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.ChangesetDisplayInformation : object {
    private int m_changesetId;
    private string m_checkedInBy;
    public int ChangesetId { get; }
    public string CheckedInBy { get; }
    public int get_ChangesetId();
    public string get_CheckedInBy();
    [EditorBrowsableAttribute("1")]
public static ChangesetDisplayInformation FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, ChangesetDisplayInformation obj);
}
internal class Microsoft.TeamFoundation.Build.Client.ChangesetSummary : object {
    private IBuildInformationNode m_node;
    public int Id { get; }
    public int ChangesetId { get; public set; }
    public string Comment { get; public set; }
    public Uri ChangesetUri { get; public set; }
    public string CheckedInBy { get; public set; }
    public IBuildInformationNode Node { get; }
    public ChangesetSummary(IBuildInformationNode node, int changesetId, string comment, string checkedInBy, Uri changesetUri);
    public ChangesetSummary(IBuildInformationNode node);
    public sealed virtual int get_Id();
    public sealed virtual int get_ChangesetId();
    public sealed virtual void set_ChangesetId(int value);
    public sealed virtual string get_Comment();
    public sealed virtual void set_Comment(string value);
    public sealed virtual Uri get_ChangesetUri();
    public sealed virtual void set_ChangesetUri(Uri value);
    public sealed virtual string get_CheckedInBy();
    public sealed virtual void set_CheckedInBy(string value);
    public sealed virtual IBuildInformationNode get_Node();
    public sealed virtual void Save();
    public static List`1<IChangesetSummary> FromInformationNodes(List`1<IBuildInformationNode> nodes);
}
[ObsoleteAttribute("This enum has been deprecated. Please remove all references.", "True")]
public enum Microsoft.TeamFoundation.Build.Client.CodeAnalysisRunType : Enum {
    public int value__;
    public static CodeAnalysisRunType Default;
    public static CodeAnalysisRunType Always;
    public static CodeAnalysisRunType Never;
}
[ObsoleteAttribute("This class has been deprecated. Please remove all references.", "False")]
internal class Microsoft.TeamFoundation.Build.Client.CodeCoverageSummary : object {
    private IBuildInformationNode m_node;
    public int BlocksCovered { get; public set; }
    public int BlocksNotCovered { get; public set; }
    public int LinesCovered { get; public set; }
    public int LinesNotCovered { get; public set; }
    public int LinesPartiallyCovered { get; public set; }
    public bool IsBuildCoverageProcessing { get; public set; }
    public int Id { get; }
    public string RunId { get; public set; }
    public string Name { get; public set; }
    public string RunUser { get; public set; }
    public IBuildInformationNode Node { get; }
    public CodeCoverageSummary(IBuildInformationNode node, int blocksCovered, int blocksNotCovered, int linesCovered, int linesNotCovered, int linesPartiallyCovered, bool isBuildCoverageProcessing, string name, string runId, string runUser);
    public CodeCoverageSummary(IBuildInformationNode node);
    public sealed virtual int get_BlocksCovered();
    public sealed virtual void set_BlocksCovered(int value);
    public sealed virtual int get_BlocksNotCovered();
    public sealed virtual void set_BlocksNotCovered(int value);
    public sealed virtual int get_LinesCovered();
    public sealed virtual void set_LinesCovered(int value);
    public sealed virtual int get_LinesNotCovered();
    public sealed virtual void set_LinesNotCovered(int value);
    public sealed virtual int get_LinesPartiallyCovered();
    public sealed virtual void set_LinesPartiallyCovered(int value);
    public sealed virtual bool get_IsBuildCoverageProcessing();
    public sealed virtual void set_IsBuildCoverageProcessing(bool value);
    public sealed virtual int get_Id();
    public sealed virtual string get_RunId();
    public sealed virtual void set_RunId(string value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual string get_RunUser();
    public sealed virtual void set_RunUser(string value);
    public sealed virtual IBuildInformationNode get_Node();
    public sealed virtual void Save();
    public static List`1<ICodeCoverageSummary> FromInformationNodes(List`1<IBuildInformationNode> nodes);
}
[ObsoleteAttribute("This class has been deprecated. Please remove all references.", "False")]
internal class Microsoft.TeamFoundation.Build.Client.CompilationSummary : object {
    private IBuildInformationNode m_node;
    public List`1<ICompilationSummary> Children { get; }
    public int CompilationErrors { get; public set; }
    public int CompilationWarnings { get; public set; }
    public int Id { get; }
    public ICompilationSummary Parent { get; }
    public string ProjectFile { get; public set; }
    public int StaticAnalysisErrors { get; public set; }
    public int StaticAnalysisWarnings { get; public set; }
    public IBuildInformationNode Node { get; }
    public CompilationSummary(IBuildInformationNode node, int compilationErrors, int compilationWarnings, string projectFile, int staticAnalysisErrors, int staticAnalysisWarnings);
    public CompilationSummary(IBuildInformationNode node);
    public sealed virtual List`1<ICompilationSummary> get_Children();
    public sealed virtual int get_CompilationErrors();
    public sealed virtual void set_CompilationErrors(int value);
    public sealed virtual int get_CompilationWarnings();
    public sealed virtual void set_CompilationWarnings(int value);
    public sealed virtual int get_Id();
    public sealed virtual ICompilationSummary get_Parent();
    public sealed virtual string get_ProjectFile();
    public sealed virtual void set_ProjectFile(string value);
    public sealed virtual int get_StaticAnalysisErrors();
    public sealed virtual void set_StaticAnalysisErrors(int value);
    public sealed virtual int get_StaticAnalysisWarnings();
    public sealed virtual void set_StaticAnalysisWarnings(int value);
    public sealed virtual IBuildInformationNode get_Node();
    public sealed virtual ICompilationSummary AddCompilationSummary();
    public sealed virtual void Save();
    public static List`1<ICompilationSummary> FromInformationNodes(List`1<IBuildInformationNode> nodes);
}
public class Microsoft.TeamFoundation.Build.Client.ConfigurationFolderPathNotFoundException : BuildServerException {
    public ConfigurationFolderPathNotFoundException(string folderPath);
    protected ConfigurationFolderPathNotFoundException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Build.Client.ConfigurationSummary : object {
    private IBuildInformationNode m_node;
    [ObsoleteAttribute("This property has been deprecated. Please remove all references.", "False")]
public List`1<ICodeCoverageSummary> CodeCoverageSummaries { get; }
    [ObsoleteAttribute("This property has been deprecated. Please remove all references.", "False")]
public List`1<ICompilationSummary> CompilationSummaries { get; }
    [ObsoleteAttribute("This property has been deprecated. Please remove all references.", "False")]
public List`1<ITestSummary> TestSummaries { get; }
    public int Id { get; }
    public string Flavor { get; public set; }
    public string FullName { get; }
    [ObsoleteAttribute("This property has been deprecated. Please remove all references.", "False")]
public string LogFile { get; public set; }
    public string Platform { get; public set; }
    public int TotalCompilationErrors { get; private set; }
    public int TotalCompilationWarnings { get; private set; }
    public int TotalStaticAnalysisErrors { get; private set; }
    public int TotalStaticAnalysisWarnings { get; private set; }
    public IBuildInformationNode Node { get; }
    public ConfigurationSummary(IBuildInformationNode node, string flavor, string platform);
    public ConfigurationSummary(IBuildInformationNode node);
    public sealed virtual List`1<ICodeCoverageSummary> get_CodeCoverageSummaries();
    public sealed virtual List`1<ICompilationSummary> get_CompilationSummaries();
    public sealed virtual List`1<ITestSummary> get_TestSummaries();
    public sealed virtual int get_Id();
    public sealed virtual string get_Flavor();
    public sealed virtual void set_Flavor(string value);
    public sealed virtual string get_FullName();
    public sealed virtual string get_LogFile();
    public sealed virtual void set_LogFile(string value);
    public sealed virtual string get_Platform();
    public sealed virtual void set_Platform(string value);
    public sealed virtual int get_TotalCompilationErrors();
    private void set_TotalCompilationErrors(int value);
    public sealed virtual int get_TotalCompilationWarnings();
    private void set_TotalCompilationWarnings(int value);
    public sealed virtual int get_TotalStaticAnalysisErrors();
    private void set_TotalStaticAnalysisErrors(int value);
    public sealed virtual int get_TotalStaticAnalysisWarnings();
    private void set_TotalStaticAnalysisWarnings(int value);
    public sealed virtual IBuildInformationNode get_Node();
    [ObsoleteAttribute("This method has been deprecated. Please remove all references.", "False")]
public sealed virtual ICompilationSummary AddCompilationSummary();
    [ObsoleteAttribute("This method has been deprecated. Please remove all references.", "False")]
public sealed virtual ITestSummary AddTestSummary();
    [ObsoleteAttribute("This method has been deprecated. Please remove all references.", "False")]
public sealed virtual ICodeCoverageSummary AddCodeCoverageSummary();
    public sealed virtual List`1<IBuildProjectNode> GetTopLevelProjects();
    public sealed virtual void Save();
    private List`1<IBuildProjectNode> GetTopLevelProjects(IBuildInformation buildInformation);
    internal static string GetFullName(string platform, string flavor);
    public static List`1<IConfigurationSummary> FromInformationNodes(List`1<IBuildInformationNode> nodes);
}
public class Microsoft.TeamFoundation.Build.Client.ConnectedServiceNotFoundException : BuildServerException {
    public ConnectedServiceNotFoundException(string message);
    public ConnectedServiceNotFoundException(string message, Exception ex);
    protected ConnectedServiceNotFoundException(SerializationInfo info, StreamingContext context);
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Build.Client.ContinuousIntegrationType : Enum {
    public int value__;
    public static ContinuousIntegrationType All;
    public static ContinuousIntegrationType Batch;
    public static ContinuousIntegrationType Gated;
    public static ContinuousIntegrationType Individual;
    public static ContinuousIntegrationType None;
    public static ContinuousIntegrationType Schedule;
    public static ContinuousIntegrationType ScheduleForced;
}
public enum Microsoft.TeamFoundation.Build.Client.ControllerStatus : Enum {
    public int value__;
    public static ControllerStatus Available;
    public static ControllerStatus Offline;
    public static ControllerStatus Unavailable;
}
internal enum Microsoft.TeamFoundation.Build.Client.ControllerStatus2010 : Enum {
    public int value__;
    public static ControllerStatus2010 Available;
    public static ControllerStatus2010 Offline;
    public static ControllerStatus2010 Unavailable;
}
public class Microsoft.TeamFoundation.Build.Client.CoverageServiceRestartFailureDuringDeleteException : BuildServerException {
    public CoverageServiceRestartFailureDuringDeleteException(string message);
    public CoverageServiceRestartFailureDuringDeleteException(string message, Exception ex);
    protected CoverageServiceRestartFailureDuringDeleteException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Build.Client.CustomActivitiesAndExtensions : object {
    public static string LogFailure;
    public static string LogError;
    public static string LogWarning;
    public static string LogMessage;
    public static string LogSummary;
    public static string FileName;
    [CompilerGeneratedAttribute]
private List`1<Assembly> <AssembliesLoaded>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<Type> <ActivityTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private HashSet`1<Type> <ExtensionTypes>k__BackingField;
    [CompilerGeneratedAttribute]
private List`1<IFailure> <InternalFalures>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Messages>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Warnings>k__BackingField;
    [CompilerGeneratedAttribute]
private int <Errors>k__BackingField;
    [CompilerGeneratedAttribute]
private int <AllFalures>k__BackingField;
    private string m_localPath;
    private string m_localFileName;
    private bool m_downloadListedOnly;
    private HostEnvironmentOption m_filterEnvironmentOptions;
    private HostEnvironmentOption m_defaultEnvironmentOption;
    private Dictionary`2<string, XmlAssembly> m_assemblies;
    public ValueCollection<string, XmlAssembly> Assemblies { get; }
    public bool DownloadOnlyListed { get; }
    public string LocalFileName { get; public set; }
    public List`1<Assembly> AssembliesLoaded { get; public set; }
    public HashSet`1<Type> ActivityTypes { get; public set; }
    public HashSet`1<Type> ExtensionTypes { get; public set; }
    public List`1<IFailure> Failures { get; }
    internal List`1<IFailure> InternalFalures { get; internal set; }
    internal int Messages { get; internal set; }
    internal int Warnings { get; internal set; }
    internal int Errors { get; internal set; }
    internal int AllFalures { get; internal set; }
    public HostEnvironmentOption FilterEnvironmentOptions { get; }
    public HostEnvironmentOption DefaultEnvironmentOptions { get; }
    internal CustomActivitiesAndExtensions(string localPath, HostEnvironmentOption environmentOptions);
    internal bool ReadFile(bool includeExtensions);
    private bool GetBool(XPathNavigator node, string name, bool defaultValue);
    private HostEnvironmentOption GetHostOption(XPathNavigator node, HostEnvironmentOption defaultValue);
    public String[] AssemblyNames();
    public void LogRecord(string code, string message);
    public ValueCollection<string, XmlAssembly> get_Assemblies();
    public XmlAssembly GetAssembly(string name);
    public XmlAssembly FindAssembly(string activityName);
    public bool get_DownloadOnlyListed();
    public string get_LocalFileName();
    public void set_LocalFileName(string value);
    public bool ChangeAssemblyStatus(string assembly, State state);
    [CompilerGeneratedAttribute]
public List`1<Assembly> get_AssembliesLoaded();
    [CompilerGeneratedAttribute]
public void set_AssembliesLoaded(List`1<Assembly> value);
    [CompilerGeneratedAttribute]
public HashSet`1<Type> get_ActivityTypes();
    [CompilerGeneratedAttribute]
public void set_ActivityTypes(HashSet`1<Type> value);
    [CompilerGeneratedAttribute]
public HashSet`1<Type> get_ExtensionTypes();
    [CompilerGeneratedAttribute]
public void set_ExtensionTypes(HashSet`1<Type> value);
    public List`1<IFailure> get_Failures();
    [CompilerGeneratedAttribute]
internal List`1<IFailure> get_InternalFalures();
    [CompilerGeneratedAttribute]
internal void set_InternalFalures(List`1<IFailure> value);
    [CompilerGeneratedAttribute]
internal int get_Messages();
    [CompilerGeneratedAttribute]
internal void set_Messages(int value);
    [CompilerGeneratedAttribute]
internal int get_Warnings();
    [CompilerGeneratedAttribute]
internal void set_Warnings(int value);
    [CompilerGeneratedAttribute]
internal int get_Errors();
    [CompilerGeneratedAttribute]
internal void set_Errors(int value);
    [CompilerGeneratedAttribute]
internal int get_AllFalures();
    [CompilerGeneratedAttribute]
internal void set_AllFalures(int value);
    public HostEnvironmentOption get_FilterEnvironmentOptions();
    public HostEnvironmentOption get_DefaultEnvironmentOptions();
    public bool FindActivityType(Type activity);
    public bool FindExtensionType(Type extension);
}
public class Microsoft.TeamFoundation.Build.Client.CustomAssemblyPathNotFoundException : BuildServerException {
    public CustomAssemblyPathNotFoundException(string folderPath);
    public CustomAssemblyPathNotFoundException(string folderPath, Exception innerException);
    protected CustomAssemblyPathNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.CustomBuildServiceException : BuildServerException {
    public CustomBuildServiceException(Type type, string assembly);
    protected CustomBuildServiceException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Build.Client.CustomSummaryInformation : object {
    private IBuildInformationNode m_node;
    public string Message { get; public set; }
    public string SectionName { get; public set; }
    public string SectionHeader { get; public set; }
    public int SectionPriority { get; public set; }
    public IBuildInformationNode Node { get; }
    public CustomSummaryInformation(IBuildInformationNode node, string message, string sectionName, string sectionHeader, int sectionPriority);
    public CustomSummaryInformation(IBuildInformationNode node);
    public sealed virtual string get_Message();
    public sealed virtual void set_Message(string value);
    public sealed virtual string get_SectionName();
    public sealed virtual void set_SectionName(string value);
    public sealed virtual string get_SectionHeader();
    public sealed virtual void set_SectionHeader(string value);
    public sealed virtual int get_SectionPriority();
    public sealed virtual void set_SectionPriority(int value);
    public sealed virtual IBuildInformationNode get_Node();
    public sealed virtual void Save();
}
internal enum Microsoft.TeamFoundation.Build.Client.DefinitionFilterType : Enum {
    public int value__;
    public static DefinitionFilterType DefinitionSpec;
    public static DefinitionFilterType DefinitionUris;
}
public enum Microsoft.TeamFoundation.Build.Client.DefinitionQueueStatus : Enum {
    public int value__;
    public static DefinitionQueueStatus Disabled;
    public static DefinitionQueueStatus Enabled;
    public static DefinitionQueueStatus Paused;
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Build.Client.DefinitionTriggerType : Enum {
    public int value__;
    public static DefinitionTriggerType All;
    public static DefinitionTriggerType BatchedContinuousIntegration;
    public static DefinitionTriggerType BatchedGatedCheckIn;
    public static DefinitionTriggerType ContinuousIntegration;
    public static DefinitionTriggerType GatedCheckIn;
    public static DefinitionTriggerType None;
    public static DefinitionTriggerType Schedule;
    public static DefinitionTriggerType ScheduleForced;
}
public class Microsoft.TeamFoundation.Build.Client.DeleteBuildFailedException : BuildServerException {
    public DeleteBuildFailedException(string build, string failureMessage);
    protected DeleteBuildFailedException(SerializationInfo info, StreamingContext context);
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Build.Client.DeleteOptions : Enum {
    public int value__;
    public static DeleteOptions All;
    public static DeleteOptions Details;
    public static DeleteOptions DropLocation;
    public static DeleteOptions Label;
    public static DeleteOptions None;
    public static DeleteOptions Symbols;
    public static DeleteOptions TestResults;
}
[FlagsAttribute]
internal enum Microsoft.TeamFoundation.Build.Client.DeleteOptions2010 : Enum {
    public int value__;
    public static DeleteOptions2010 All;
    public static DeleteOptions2010 Details;
    public static DeleteOptions2010 DropLocation;
    public static DeleteOptions2010 Label;
    public static DeleteOptions2010 None;
    public static DeleteOptions2010 Symbols;
    public static DeleteOptions2010 TestResults;
}
public class Microsoft.TeamFoundation.Build.Client.DeploymentEnvironment : object {
    [CompilerGeneratedAttribute]
private TeamFoundationStrongBoxService <StrongBox>k__BackingField;
    [CompilerGeneratedAttribute]
private ConnectedService <ConnectedService>k__BackingField;
    private Dictionary`2<string, StrongBoxItemInfo> m_environmentProperties;
    private DeploymentEnvironmentMetadata m_environmentMetadata;
    internal StrongBoxItemInfo[] m_environmentPropertiesInfo;
    private TeamFoundationStrongBoxService StrongBox { get; private set; }
    public ConnectedService ConnectedService { get; internal set; }
    public DeploymentEnvironmentMetadata EnvironmentMetadata { get; }
    [CompilerGeneratedAttribute]
private TeamFoundationStrongBoxService get_StrongBox();
    [CompilerGeneratedAttribute]
private void set_StrongBox(TeamFoundationStrongBoxService value);
    [CompilerGeneratedAttribute]
public ConnectedService get_ConnectedService();
    [CompilerGeneratedAttribute]
internal void set_ConnectedService(ConnectedService value);
    public string GetPropertyValue(string propertyName);
    internal void AfterDeserialize();
    public DeploymentEnvironmentMetadata get_EnvironmentMetadata();
    [EditorBrowsableAttribute("1")]
public static DeploymentEnvironment FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, DeploymentEnvironment obj);
}
public class Microsoft.TeamFoundation.Build.Client.DeploymentEnvironmentCreationData : object {
    private Dictionary`2<string, string> m_environmentProperties;
    private DeploymentEnvironmentMetadata m_environmentMetadata;
    internal InformationField[] m_environmentPropertiesValue;
    public IDictionary`2<string, string> EnvironmentProperties { get; }
    public DeploymentEnvironmentMetadata EnvironmentMetadata { get; }
    public DeploymentEnvironmentCreationData(string name, string teamProject, string connectedServiceName, DeploymentEnvironmentKind kind, string friendlyName, string description, Dictionary`2<string, string> environmentProperties);
    public IDictionary`2<string, string> get_EnvironmentProperties();
    internal void SetEnvironmentProperties(Dictionary`2<string, string> environmentProperties);
    internal void BeforeSerialize();
    private static InformationField[] ConvertDictionaryToFields(Dictionary`2<string, string> dictionary);
    public DeploymentEnvironmentMetadata get_EnvironmentMetadata();
    [EditorBrowsableAttribute("1")]
public static DeploymentEnvironmentCreationData FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, DeploymentEnvironmentCreationData obj);
}
public enum Microsoft.TeamFoundation.Build.Client.DeploymentEnvironmentKind : Enum {
    public int value__;
    public static DeploymentEnvironmentKind AzureCloudApp;
    public static DeploymentEnvironmentKind AzureWebsite;
    public static DeploymentEnvironmentKind Custom;
}
public class Microsoft.TeamFoundation.Build.Client.DeploymentEnvironmentMetadata : object {
    private string m_connectedServiceName;
    private string m_description;
    private string m_friendlyName;
    private DeploymentEnvironmentKind m_kind;
    private string m_name;
    private string m_teamProject;
    public string ConnectedServiceName { get; public set; }
    public string Description { get; public set; }
    public string FriendlyName { get; public set; }
    public DeploymentEnvironmentKind Kind { get; public set; }
    public string Name { get; public set; }
    public string TeamProject { get; public set; }
    public string get_ConnectedServiceName();
    public void set_ConnectedServiceName(string value);
    public string get_Description();
    public void set_Description(string value);
    public string get_FriendlyName();
    public void set_FriendlyName(string value);
    public DeploymentEnvironmentKind get_Kind();
    public void set_Kind(DeploymentEnvironmentKind value);
    public string get_Name();
    public void set_Name(string value);
    public string get_TeamProject();
    public void set_TeamProject(string value);
    [EditorBrowsableAttribute("1")]
public static DeploymentEnvironmentMetadata FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, DeploymentEnvironmentMetadata obj);
}
public class Microsoft.TeamFoundation.Build.Client.DeploymentEnvironmentNotFoundException : BuildServerException {
    public DeploymentEnvironmentNotFoundException(string message);
    public DeploymentEnvironmentNotFoundException(string message, Exception ex);
    protected DeploymentEnvironmentNotFoundException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.DeploymentService : object {
    private BuildDeploymentWebService m_deploymentService;
    private TfsTeamProjectCollection m_tfs;
    private BuildDeploymentWebService BuildDeploymentService { get; }
    private sealed virtual override void Microsoft.TeamFoundation.Client.ITfsTeamProjectCollectionObject.Initialize(TfsTeamProjectCollection server);
    public DeploymentEnvironmentMetadata CreateDeploymentEnvironment(string name, string teamProject, string connectedServiceName, DeploymentEnvironmentKind environmentKind, string friendlyName, string description, Dictionary`2<string, string> environmentProperties);
    public List`1<DeploymentEnvironmentMetadata> QueryDeploymentEnvironments(string teamProject);
    public DeploymentEnvironment GetDeploymentEnvironment(string name, string teamProject);
    public void DeleteDeploymentEnvironment(string name, string teamProject);
    public void ConnectAzureWebsite(string teamProject, string subscriptionId, string webspace, string website);
    public void DisconnectAzureWebsite(string teamProject, string website);
    public IAsyncResult BeginCreateBuildDeployment(Uri deploymentUri, Uri sourceUri, string environmentName, AsyncCallback callback, object state);
    public BuildDeployment EndCreateBuildDeployment(IAsyncResult result);
    public BuildDeployment CreateBuildDeployment(Uri deploymentUri, Uri sourceUri, string environmentName);
    public IAsyncResult BeginAddBuildDeploymentProperty(Uri deploymentUri, string key, string value, AsyncCallback callback, object state);
    public void EndAddBuildDeploymentProperty(IAsyncResult result);
    public void AddBuildDeploymentProperty(Uri deploymentUri, string key, string value);
    public BuildDeployment[] QueryDeployments(BuildDeploymentSpec spec);
    public BuildDeployment[] QueryDeploymentsByUri(Uri[] deploymentUris);
    public IQueuedBuild Redeploy(Uri deploymentUri);
    public IQueuedBuild Redeploy(Uri deploymentUri, AzureDeploymentSlot deploymentSlot);
    private IQueuedBuild Redeploy(Uri deploymentUri, AzureDeploymentSlot deploymentSlot, bool updateSlot);
    public void ConnectAzureCloudApp(string teamProject, string subscriptionId, string azurePublishProfile);
    public void ConnectAzureCloudApp(string teamProject, string subscriptionId, string hostedServiceName, string storageAccountName, string deploymentLabel);
    public void DisconnectAzureCloudApp(string teamProject, string hostedServiceName);
    private BuildDeploymentWebService get_BuildDeploymentService();
}
internal class Microsoft.TeamFoundation.Build.Client.DictionaryChangedEventArgs`2 : EventArgs {
    [CompilerGeneratedAttribute]
private DictionaryChangedType <ChangedType>k__BackingField;
    [CompilerGeneratedAttribute]
private TKey <Key>k__BackingField;
    [CompilerGeneratedAttribute]
private TValue <OldValue>k__BackingField;
    [CompilerGeneratedAttribute]
private TValue <Value>k__BackingField;
    internal DictionaryChangedType ChangedType { get; internal set; }
    internal TKey Key { get; internal set; }
    internal TValue OldValue { get; internal set; }
    internal TValue Value { get; internal set; }
    internal DictionaryChangedEventArgs`2(DictionaryChangedType type, TKey key, TValue value);
    internal DictionaryChangedEventArgs`2(TKey key, TValue oldValue, TValue newValue);
    [CompilerGeneratedAttribute]
internal DictionaryChangedType get_ChangedType();
    [CompilerGeneratedAttribute]
internal void set_ChangedType(DictionaryChangedType value);
    [CompilerGeneratedAttribute]
internal TKey get_Key();
    [CompilerGeneratedAttribute]
internal void set_Key(TKey value);
    [CompilerGeneratedAttribute]
internal TValue get_OldValue();
    [CompilerGeneratedAttribute]
internal void set_OldValue(TValue value);
    [CompilerGeneratedAttribute]
internal TValue get_Value();
    [CompilerGeneratedAttribute]
internal void set_Value(TValue value);
}
internal enum Microsoft.TeamFoundation.Build.Client.DictionaryChangedType : Enum {
    public int value__;
    public static DictionaryChangedType None;
    public static DictionaryChangedType Add;
    public static DictionaryChangedType Delete;
    public static DictionaryChangedType Update;
}
public class Microsoft.TeamFoundation.Build.Client.DuplicateBuildUpdateRequestException : InformationChangeRequestException {
    public DuplicateBuildUpdateRequestException(string message);
    public DuplicateBuildUpdateRequestException(string message, Exception ex);
    protected DuplicateBuildUpdateRequestException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.DuplicateInformationChangeRequestException : InformationChangeRequestException {
    public DuplicateInformationChangeRequestException(string message);
    public DuplicateInformationChangeRequestException(string message, Exception ex);
    protected DuplicateInformationChangeRequestException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.DuplicateProcessTemplateException : AdministrationException {
    public DuplicateProcessTemplateException(string message);
    public DuplicateProcessTemplateException(string message, Exception ex);
    protected DuplicateProcessTemplateException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Build.Client.ExternalLink : object {
    private IBuildInformationNode m_node;
    public string DisplayText { get; public set; }
    public Uri Url { get; public set; }
    public IBuildInformationNode Node { get; }
    public ExternalLink(IBuildInformationNode node, string displayText, Uri url);
    public ExternalLink(IBuildInformationNode node);
    public sealed virtual string get_DisplayText();
    public sealed virtual void set_DisplayText(string value);
    public sealed virtual Uri get_Url();
    public sealed virtual void set_Url(Uri value);
    public sealed virtual IBuildInformationNode get_Node();
    public sealed virtual void Save();
}
internal class Microsoft.TeamFoundation.Build.Client.Failure : object {
    private string m_code;
    private string m_message;
    public string Code { get; internal set; }
    public string Message { get; internal set; }
    internal Failure(Failure2010 failure);
    public sealed virtual string get_Code();
    internal void set_Code(string value);
    public sealed virtual string get_Message();
    internal void set_Message(string value);
    internal static Failure FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, Failure obj);
}
internal class Microsoft.TeamFoundation.Build.Client.Failure2010 : object {
    private string m_code;
    private string m_message;
    public string Code { get; internal set; }
    public string Message { get; internal set; }
    public string get_Code();
    internal void set_Code(string value);
    public string get_Message();
    internal void set_Message(string value);
    internal static Failure2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, Failure2010 obj);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Build.Client.FileContainerHelper : object {
    public static void GetFile(TfsTeamProjectCollection projectCollection, string itemPath, Stream outputStream);
    public static string GetFileAsString(TfsTeamProjectCollection projectCollection, string itemPath);
    public static string ConvertToHttpTarget(TfsTeamProjectCollection projectCollection, string fileContainerPath);
    public static string ConvertToHttpTarget(TfsTeamProjectCollection projectCollection, string fileContainerPath, Int64& containerId, String& itemPath);
}
public class Microsoft.TeamFoundation.Build.Client.GatedCheckInTicketValidationException : BuildServerException {
    public GatedCheckInTicketValidationException(string message);
    public GatedCheckInTicketValidationException(string message, Exception ex);
    protected GatedCheckInTicketValidationException(SerializationInfo info, StreamingContext context);
}
public enum Microsoft.TeamFoundation.Build.Client.GetOption : Enum {
    public int value__;
    public static GetOption Custom;
    public static GetOption LatestOnBuild;
    public static GetOption LatestOnQueue;
}
internal enum Microsoft.TeamFoundation.Build.Client.GetOption2010 : Enum {
    public int value__;
    public static GetOption2010 Custom;
    public static GetOption2010 LatestOnBuild;
    public static GetOption2010 LatestOnQueue;
}
internal class Microsoft.TeamFoundation.Build.Client.GitAssemblyDownloader : object {
    private string m_gitPath;
    private TfsTeamProjectCollection m_projectCollection;
    public GitAssemblyDownloader(string gitPath, TfsTeamProjectCollection projectCollection);
    public sealed virtual List`1<string> DownloadCustomAssemblies(string localPath, CustomActivitiesAndExtensions customActivitiesAndExtensions);
    private void MoveFolder(string sourceFolder, string destinationFolder);
    public sealed virtual bool DownloadCustomActivitiesAndExtensionsFile(string localPath, CustomActivitiesAndExtensions customActivitiesAndExtensions, HostEnvironmentOption environmentOptions, bool includeExtensions);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Build.Client.GitHelper : object {
    public static void GetGitFile(TfsTeamProjectCollection projectCollection, string gitPath, Stream outputStream);
    public static void GetGitFolderZip(TfsTeamProjectCollection projectCollection, string gitPath, Stream outputStream);
    private static void GetGitFile(TfsTeamProjectCollection projectCollection, string gitPath, Stream outputStream, bool isDirectory);
    public static string GetGitFileAsString(TfsTeamProjectCollection projectCollection, string gitPath);
    private static bool GetGitRepo(TfsTeamProjectCollection projectCollection, string gitPath, String& projectName, String& branchAndPath, GitHttpClient& gitClient, GitRepository& gitRepo);
}
internal static class Microsoft.TeamFoundation.Build.Client.Helper : object {
    private static BuildAgent[] m_zeroLengthArrayOfBuildAgent;
    private static BuildAgent2008[] m_zeroLengthArrayOfBuildAgent2008;
    private static BuildAgent2010[] m_zeroLengthArrayOfBuildAgent2010;
    private static BuildAgentQueryResult[] m_zeroLengthArrayOfBuildAgentQueryResult;
    private static BuildAgentQueryResult2010[] m_zeroLengthArrayOfBuildAgentQueryResult2010;
    private static BuildAgentSpec[] m_zeroLengthArrayOfBuildAgentSpec;
    private static BuildAgentSpec2010[] m_zeroLengthArrayOfBuildAgentSpec2010;
    private static BuildAgentUpdateOptions[] m_zeroLengthArrayOfBuildAgentUpdateOptions;
    private static BuildAgentUpdateOptions2010[] m_zeroLengthArrayOfBuildAgentUpdateOptions2010;
    private static BuildController[] m_zeroLengthArrayOfBuildController;
    private static BuildController2010[] m_zeroLengthArrayOfBuildController2010;
    private static BuildControllerQueryResult[] m_zeroLengthArrayOfBuildControllerQueryResult;
    private static BuildControllerQueryResult2010[] m_zeroLengthArrayOfBuildControllerQueryResult2010;
    private static BuildControllerSpec[] m_zeroLengthArrayOfBuildControllerSpec;
    private static BuildControllerSpec2010[] m_zeroLengthArrayOfBuildControllerSpec2010;
    private static BuildControllerUpdateOptions[] m_zeroLengthArrayOfBuildControllerUpdateOptions;
    private static BuildControllerUpdateOptions2010[] m_zeroLengthArrayOfBuildControllerUpdateOptions2010;
    private static BuildDefinition[] m_zeroLengthArrayOfBuildDefinition;
    private static BuildDefinition2010[] m_zeroLengthArrayOfBuildDefinition2010;
    private static BuildDefinitionQueryResult[] m_zeroLengthArrayOfBuildDefinitionQueryResult;
    private static BuildDefinitionQueryResult2010[] m_zeroLengthArrayOfBuildDefinitionQueryResult2010;
    private static BuildDefinitionSourceProvider[] m_zeroLengthArrayOfBuildDefinitionSourceProvider;
    private static BuildDefinitionSpec[] m_zeroLengthArrayOfBuildDefinitionSpec;
    private static BuildDefinitionSpec2010[] m_zeroLengthArrayOfBuildDefinitionSpec2010;
    private static BuildDeletionResult[] m_zeroLengthArrayOfBuildDeletionResult;
    private static BuildDeletionResult2010[] m_zeroLengthArrayOfBuildDeletionResult2010;
    private static BuildDeployment[] m_zeroLengthArrayOfBuildDeployment;
    private static BuildDetail[] m_zeroLengthArrayOfBuildDetail;
    private static BuildDetail2010[] m_zeroLengthArrayOfBuildDetail2010;
    private static BuildDetailSpec[] m_zeroLengthArrayOfBuildDetailSpec;
    private static BuildDetailSpec2010[] m_zeroLengthArrayOfBuildDetailSpec2010;
    private static BuildGroupItemSpec2010[] m_zeroLengthArrayOfBuildGroupItemSpec2010;
    private static BuildGroupQueryResult[] m_zeroLengthArrayOfBuildGroupQueryResult;
    private static BuildInformationNode[] m_zeroLengthArrayOfBuildInformationNode;
    private static BuildInformationNode2010[] m_zeroLengthArrayOfBuildInformationNode2010;
    private static BuildQueryResult[] m_zeroLengthArrayOfBuildQueryResult;
    private static BuildQueryResult2008[] m_zeroLengthArrayOfBuildQueryResult2008;
    private static BuildQueryResult2010[] m_zeroLengthArrayOfBuildQueryResult2010;
    private static BuildQueueQueryResult[] m_zeroLengthArrayOfBuildQueueQueryResult;
    private static BuildQueueQueryResult2008[] m_zeroLengthArrayOfBuildQueueQueryResult2008;
    private static BuildQueueQueryResult2010[] m_zeroLengthArrayOfBuildQueueQueryResult2010;
    private static BuildQueueSpec[] m_zeroLengthArrayOfBuildQueueSpec;
    private static BuildQueueSpec2008[] m_zeroLengthArrayOfBuildQueueSpec2008;
    private static BuildQueueSpec2010[] m_zeroLengthArrayOfBuildQueueSpec2010;
    private static BuildRequest[] m_zeroLengthArrayOfBuildRequest;
    private static BuildRequest2010[] m_zeroLengthArrayOfBuildRequest2010;
    private static BuildServiceHost[] m_zeroLengthArrayOfBuildServiceHost;
    private static BuildServiceHost2010[] m_zeroLengthArrayOfBuildServiceHost2010;
    private static BuildUpdateOptions[] m_zeroLengthArrayOfBuildUpdateOptions;
    private static BuildUpdateOptions2010[] m_zeroLengthArrayOfBuildUpdateOptions2010;
    private static ChangesetDisplayInformation[] m_zeroLengthArrayOfChangesetDisplayInformation;
    private static DeploymentEnvironmentMetadata[] m_zeroLengthArrayOfDeploymentEnvironmentMetadata;
    private static Failure2010[] m_zeroLengthArrayOfFailure2010;
    private static InformationChangeRequest[] m_zeroLengthArrayOfInformationChangeRequest;
    private static InformationChangeRequest2010[] m_zeroLengthArrayOfInformationChangeRequest2010;
    private static InformationField[] m_zeroLengthArrayOfInformationField;
    private static InformationField2010[] m_zeroLengthArrayOfInformationField2010;
    private static Int32[] m_zeroLengthArrayOfInt32;
    private static NameValueField[] m_zeroLengthArrayOfNameValueField;
    private static ProcessTemplate[] m_zeroLengthArrayOfProcessTemplate;
    private static ProcessTemplate2010[] m_zeroLengthArrayOfProcessTemplate2010;
    private static ProcessTemplateType[] m_zeroLengthArrayOfProcessTemplateType;
    private static ProcessTemplateType2010[] m_zeroLengthArrayOfProcessTemplateType2010;
    private static PropertyValue[] m_zeroLengthArrayOfPropertyValue;
    private static QueuedBuild[] m_zeroLengthArrayOfQueuedBuild;
    private static QueuedBuild2008[] m_zeroLengthArrayOfQueuedBuild2008;
    private static QueuedBuild2010[] m_zeroLengthArrayOfQueuedBuild2010;
    private static QueuedBuildUpdateOptions[] m_zeroLengthArrayOfQueuedBuildUpdateOptions;
    private static QueuedBuildUpdateOptions2010[] m_zeroLengthArrayOfQueuedBuildUpdateOptions2010;
    private static RequestedForDisplayInformation[] m_zeroLengthArrayOfRequestedForDisplayInformation;
    private static RetentionPolicy[] m_zeroLengthArrayOfRetentionPolicy;
    private static RetentionPolicy2010[] m_zeroLengthArrayOfRetentionPolicy2010;
    private static Schedule[] m_zeroLengthArrayOfSchedule;
    private static Schedule2010[] m_zeroLengthArrayOfSchedule2010;
    private static String[] m_zeroLengthArrayOfString;
    private static StrongBoxItemInfo[] m_zeroLengthArrayOfStrongBoxItemInfo;
    private static Uri[] m_zeroLengthArrayOfUri;
    private static WorkspaceMapping[] m_zeroLengthArrayOfWorkspaceMapping;
    private static WorkspaceMapping2010[] m_zeroLengthArrayOfWorkspaceMapping2010;
    private static BuildTeamProjectPermission[] m_zeroLengthEnumerableOfBuildTeamProjectPermission;
    private static BuildTeamProjectPermission2010[] m_zeroLengthEnumerableOfBuildTeamProjectPermission2010;
    internal static BuildAgent[] ZeroLengthArrayOfBuildAgent { get; }
    internal static BuildAgent2008[] ZeroLengthArrayOfBuildAgent2008 { get; }
    internal static BuildAgent2010[] ZeroLengthArrayOfBuildAgent2010 { get; }
    internal static BuildAgentQueryResult[] ZeroLengthArrayOfBuildAgentQueryResult { get; }
    internal static BuildAgentQueryResult2010[] ZeroLengthArrayOfBuildAgentQueryResult2010 { get; }
    internal static BuildAgentSpec[] ZeroLengthArrayOfBuildAgentSpec { get; }
    internal static BuildAgentSpec2010[] ZeroLengthArrayOfBuildAgentSpec2010 { get; }
    internal static BuildAgentUpdateOptions[] ZeroLengthArrayOfBuildAgentUpdateOptions { get; }
    internal static BuildAgentUpdateOptions2010[] ZeroLengthArrayOfBuildAgentUpdateOptions2010 { get; }
    internal static BuildController[] ZeroLengthArrayOfBuildController { get; }
    internal static BuildController2010[] ZeroLengthArrayOfBuildController2010 { get; }
    internal static BuildControllerQueryResult[] ZeroLengthArrayOfBuildControllerQueryResult { get; }
    internal static BuildControllerQueryResult2010[] ZeroLengthArrayOfBuildControllerQueryResult2010 { get; }
    internal static BuildControllerSpec[] ZeroLengthArrayOfBuildControllerSpec { get; }
    internal static BuildControllerSpec2010[] ZeroLengthArrayOfBuildControllerSpec2010 { get; }
    internal static BuildControllerUpdateOptions[] ZeroLengthArrayOfBuildControllerUpdateOptions { get; }
    internal static BuildControllerUpdateOptions2010[] ZeroLengthArrayOfBuildControllerUpdateOptions2010 { get; }
    internal static BuildDefinition[] ZeroLengthArrayOfBuildDefinition { get; }
    internal static BuildDefinition2010[] ZeroLengthArrayOfBuildDefinition2010 { get; }
    internal static BuildDefinitionQueryResult[] ZeroLengthArrayOfBuildDefinitionQueryResult { get; }
    internal static BuildDefinitionQueryResult2010[] ZeroLengthArrayOfBuildDefinitionQueryResult2010 { get; }
    internal static BuildDefinitionSourceProvider[] ZeroLengthArrayOfBuildDefinitionSourceProvider { get; }
    internal static BuildDefinitionSpec[] ZeroLengthArrayOfBuildDefinitionSpec { get; }
    internal static BuildDefinitionSpec2010[] ZeroLengthArrayOfBuildDefinitionSpec2010 { get; }
    internal static BuildDeletionResult[] ZeroLengthArrayOfBuildDeletionResult { get; }
    internal static BuildDeletionResult2010[] ZeroLengthArrayOfBuildDeletionResult2010 { get; }
    internal static BuildDeployment[] ZeroLengthArrayOfBuildDeployment { get; }
    internal static BuildDetail[] ZeroLengthArrayOfBuildDetail { get; }
    internal static BuildDetail2010[] ZeroLengthArrayOfBuildDetail2010 { get; }
    internal static BuildDetailSpec[] ZeroLengthArrayOfBuildDetailSpec { get; }
    internal static BuildDetailSpec2010[] ZeroLengthArrayOfBuildDetailSpec2010 { get; }
    internal static BuildGroupItemSpec2010[] ZeroLengthArrayOfBuildGroupItemSpec2010 { get; }
    internal static BuildGroupQueryResult[] ZeroLengthArrayOfBuildGroupQueryResult { get; }
    internal static BuildInformationNode[] ZeroLengthArrayOfBuildInformationNode { get; }
    internal static BuildInformationNode2010[] ZeroLengthArrayOfBuildInformationNode2010 { get; }
    internal static BuildQueryResult[] ZeroLengthArrayOfBuildQueryResult { get; }
    internal static BuildQueryResult2008[] ZeroLengthArrayOfBuildQueryResult2008 { get; }
    internal static BuildQueryResult2010[] ZeroLengthArrayOfBuildQueryResult2010 { get; }
    internal static BuildQueueQueryResult[] ZeroLengthArrayOfBuildQueueQueryResult { get; }
    internal static BuildQueueQueryResult2008[] ZeroLengthArrayOfBuildQueueQueryResult2008 { get; }
    internal static BuildQueueQueryResult2010[] ZeroLengthArrayOfBuildQueueQueryResult2010 { get; }
    internal static BuildQueueSpec[] ZeroLengthArrayOfBuildQueueSpec { get; }
    internal static BuildQueueSpec2008[] ZeroLengthArrayOfBuildQueueSpec2008 { get; }
    internal static BuildQueueSpec2010[] ZeroLengthArrayOfBuildQueueSpec2010 { get; }
    internal static BuildRequest[] ZeroLengthArrayOfBuildRequest { get; }
    internal static BuildRequest2010[] ZeroLengthArrayOfBuildRequest2010 { get; }
    internal static BuildServiceHost[] ZeroLengthArrayOfBuildServiceHost { get; }
    internal static BuildServiceHost2010[] ZeroLengthArrayOfBuildServiceHost2010 { get; }
    internal static BuildUpdateOptions[] ZeroLengthArrayOfBuildUpdateOptions { get; }
    internal static BuildUpdateOptions2010[] ZeroLengthArrayOfBuildUpdateOptions2010 { get; }
    internal static ChangesetDisplayInformation[] ZeroLengthArrayOfChangesetDisplayInformation { get; }
    internal static DeploymentEnvironmentMetadata[] ZeroLengthArrayOfDeploymentEnvironmentMetadata { get; }
    internal static Failure2010[] ZeroLengthArrayOfFailure2010 { get; }
    internal static InformationChangeRequest[] ZeroLengthArrayOfInformationChangeRequest { get; }
    internal static InformationChangeRequest2010[] ZeroLengthArrayOfInformationChangeRequest2010 { get; }
    internal static InformationField[] ZeroLengthArrayOfInformationField { get; }
    internal static InformationField2010[] ZeroLengthArrayOfInformationField2010 { get; }
    internal static Int32[] ZeroLengthArrayOfInt32 { get; }
    internal static NameValueField[] ZeroLengthArrayOfNameValueField { get; }
    internal static ProcessTemplate[] ZeroLengthArrayOfProcessTemplate { get; }
    internal static ProcessTemplate2010[] ZeroLengthArrayOfProcessTemplate2010 { get; }
    internal static ProcessTemplateType[] ZeroLengthArrayOfProcessTemplateType { get; }
    internal static ProcessTemplateType2010[] ZeroLengthArrayOfProcessTemplateType2010 { get; }
    internal static PropertyValue[] ZeroLengthArrayOfPropertyValue { get; }
    internal static QueuedBuild[] ZeroLengthArrayOfQueuedBuild { get; }
    internal static QueuedBuild2008[] ZeroLengthArrayOfQueuedBuild2008 { get; }
    internal static QueuedBuild2010[] ZeroLengthArrayOfQueuedBuild2010 { get; }
    internal static QueuedBuildUpdateOptions[] ZeroLengthArrayOfQueuedBuildUpdateOptions { get; }
    internal static QueuedBuildUpdateOptions2010[] ZeroLengthArrayOfQueuedBuildUpdateOptions2010 { get; }
    internal static RequestedForDisplayInformation[] ZeroLengthArrayOfRequestedForDisplayInformation { get; }
    internal static RetentionPolicy[] ZeroLengthArrayOfRetentionPolicy { get; }
    internal static RetentionPolicy2010[] ZeroLengthArrayOfRetentionPolicy2010 { get; }
    internal static Schedule[] ZeroLengthArrayOfSchedule { get; }
    internal static Schedule2010[] ZeroLengthArrayOfSchedule2010 { get; }
    internal static String[] ZeroLengthArrayOfString { get; }
    internal static StrongBoxItemInfo[] ZeroLengthArrayOfStrongBoxItemInfo { get; }
    internal static Uri[] ZeroLengthArrayOfUri { get; }
    internal static WorkspaceMapping[] ZeroLengthArrayOfWorkspaceMapping { get; }
    internal static WorkspaceMapping2010[] ZeroLengthArrayOfWorkspaceMapping2010 { get; }
    internal static IEnumerable`1<BuildTeamProjectPermission> ZeroLengthEnumerableOfBuildTeamProjectPermission { get; }
    internal static IEnumerable`1<BuildTeamProjectPermission2010> ZeroLengthEnumerableOfBuildTeamProjectPermission2010 { get; }
    internal static BuildAgent[] get_ZeroLengthArrayOfBuildAgent();
    internal static BuildAgent2008[] get_ZeroLengthArrayOfBuildAgent2008();
    internal static BuildAgent2010[] get_ZeroLengthArrayOfBuildAgent2010();
    internal static BuildAgentQueryResult[] get_ZeroLengthArrayOfBuildAgentQueryResult();
    internal static BuildAgentQueryResult2010[] get_ZeroLengthArrayOfBuildAgentQueryResult2010();
    internal static BuildAgentSpec[] get_ZeroLengthArrayOfBuildAgentSpec();
    internal static BuildAgentSpec2010[] get_ZeroLengthArrayOfBuildAgentSpec2010();
    internal static BuildAgentUpdateOptions[] get_ZeroLengthArrayOfBuildAgentUpdateOptions();
    internal static BuildAgentUpdateOptions2010[] get_ZeroLengthArrayOfBuildAgentUpdateOptions2010();
    internal static BuildController[] get_ZeroLengthArrayOfBuildController();
    internal static BuildController2010[] get_ZeroLengthArrayOfBuildController2010();
    internal static BuildControllerQueryResult[] get_ZeroLengthArrayOfBuildControllerQueryResult();
    internal static BuildControllerQueryResult2010[] get_ZeroLengthArrayOfBuildControllerQueryResult2010();
    internal static BuildControllerSpec[] get_ZeroLengthArrayOfBuildControllerSpec();
    internal static BuildControllerSpec2010[] get_ZeroLengthArrayOfBuildControllerSpec2010();
    internal static BuildControllerUpdateOptions[] get_ZeroLengthArrayOfBuildControllerUpdateOptions();
    internal static BuildControllerUpdateOptions2010[] get_ZeroLengthArrayOfBuildControllerUpdateOptions2010();
    internal static BuildDefinition[] get_ZeroLengthArrayOfBuildDefinition();
    internal static BuildDefinition2010[] get_ZeroLengthArrayOfBuildDefinition2010();
    internal static BuildDefinitionQueryResult[] get_ZeroLengthArrayOfBuildDefinitionQueryResult();
    internal static BuildDefinitionQueryResult2010[] get_ZeroLengthArrayOfBuildDefinitionQueryResult2010();
    internal static BuildDefinitionSourceProvider[] get_ZeroLengthArrayOfBuildDefinitionSourceProvider();
    internal static BuildDefinitionSpec[] get_ZeroLengthArrayOfBuildDefinitionSpec();
    internal static BuildDefinitionSpec2010[] get_ZeroLengthArrayOfBuildDefinitionSpec2010();
    internal static BuildDeletionResult[] get_ZeroLengthArrayOfBuildDeletionResult();
    internal static BuildDeletionResult2010[] get_ZeroLengthArrayOfBuildDeletionResult2010();
    internal static BuildDeployment[] get_ZeroLengthArrayOfBuildDeployment();
    internal static BuildDetail[] get_ZeroLengthArrayOfBuildDetail();
    internal static BuildDetail2010[] get_ZeroLengthArrayOfBuildDetail2010();
    internal static BuildDetailSpec[] get_ZeroLengthArrayOfBuildDetailSpec();
    internal static BuildDetailSpec2010[] get_ZeroLengthArrayOfBuildDetailSpec2010();
    internal static BuildGroupItemSpec2010[] get_ZeroLengthArrayOfBuildGroupItemSpec2010();
    internal static BuildGroupQueryResult[] get_ZeroLengthArrayOfBuildGroupQueryResult();
    internal static BuildInformationNode[] get_ZeroLengthArrayOfBuildInformationNode();
    internal static BuildInformationNode2010[] get_ZeroLengthArrayOfBuildInformationNode2010();
    internal static BuildQueryResult[] get_ZeroLengthArrayOfBuildQueryResult();
    internal static BuildQueryResult2008[] get_ZeroLengthArrayOfBuildQueryResult2008();
    internal static BuildQueryResult2010[] get_ZeroLengthArrayOfBuildQueryResult2010();
    internal static BuildQueueQueryResult[] get_ZeroLengthArrayOfBuildQueueQueryResult();
    internal static BuildQueueQueryResult2008[] get_ZeroLengthArrayOfBuildQueueQueryResult2008();
    internal static BuildQueueQueryResult2010[] get_ZeroLengthArrayOfBuildQueueQueryResult2010();
    internal static BuildQueueSpec[] get_ZeroLengthArrayOfBuildQueueSpec();
    internal static BuildQueueSpec2008[] get_ZeroLengthArrayOfBuildQueueSpec2008();
    internal static BuildQueueSpec2010[] get_ZeroLengthArrayOfBuildQueueSpec2010();
    internal static BuildRequest[] get_ZeroLengthArrayOfBuildRequest();
    internal static BuildRequest2010[] get_ZeroLengthArrayOfBuildRequest2010();
    internal static BuildServiceHost[] get_ZeroLengthArrayOfBuildServiceHost();
    internal static BuildServiceHost2010[] get_ZeroLengthArrayOfBuildServiceHost2010();
    internal static BuildUpdateOptions[] get_ZeroLengthArrayOfBuildUpdateOptions();
    internal static BuildUpdateOptions2010[] get_ZeroLengthArrayOfBuildUpdateOptions2010();
    internal static ChangesetDisplayInformation[] get_ZeroLengthArrayOfChangesetDisplayInformation();
    internal static DeploymentEnvironmentMetadata[] get_ZeroLengthArrayOfDeploymentEnvironmentMetadata();
    internal static Failure2010[] get_ZeroLengthArrayOfFailure2010();
    internal static InformationChangeRequest[] get_ZeroLengthArrayOfInformationChangeRequest();
    internal static InformationChangeRequest2010[] get_ZeroLengthArrayOfInformationChangeRequest2010();
    internal static InformationField[] get_ZeroLengthArrayOfInformationField();
    internal static InformationField2010[] get_ZeroLengthArrayOfInformationField2010();
    internal static Int32[] get_ZeroLengthArrayOfInt32();
    internal static NameValueField[] get_ZeroLengthArrayOfNameValueField();
    internal static ProcessTemplate[] get_ZeroLengthArrayOfProcessTemplate();
    internal static ProcessTemplate2010[] get_ZeroLengthArrayOfProcessTemplate2010();
    internal static ProcessTemplateType[] get_ZeroLengthArrayOfProcessTemplateType();
    internal static ProcessTemplateType2010[] get_ZeroLengthArrayOfProcessTemplateType2010();
    internal static PropertyValue[] get_ZeroLengthArrayOfPropertyValue();
    internal static QueuedBuild[] get_ZeroLengthArrayOfQueuedBuild();
    internal static QueuedBuild2008[] get_ZeroLengthArrayOfQueuedBuild2008();
    internal static QueuedBuild2010[] get_ZeroLengthArrayOfQueuedBuild2010();
    internal static QueuedBuildUpdateOptions[] get_ZeroLengthArrayOfQueuedBuildUpdateOptions();
    internal static QueuedBuildUpdateOptions2010[] get_ZeroLengthArrayOfQueuedBuildUpdateOptions2010();
    internal static RequestedForDisplayInformation[] get_ZeroLengthArrayOfRequestedForDisplayInformation();
    internal static RetentionPolicy[] get_ZeroLengthArrayOfRetentionPolicy();
    internal static RetentionPolicy2010[] get_ZeroLengthArrayOfRetentionPolicy2010();
    internal static Schedule[] get_ZeroLengthArrayOfSchedule();
    internal static Schedule2010[] get_ZeroLengthArrayOfSchedule2010();
    internal static String[] get_ZeroLengthArrayOfString();
    internal static StrongBoxItemInfo[] get_ZeroLengthArrayOfStrongBoxItemInfo();
    internal static Uri[] get_ZeroLengthArrayOfUri();
    internal static WorkspaceMapping[] get_ZeroLengthArrayOfWorkspaceMapping();
    internal static WorkspaceMapping2010[] get_ZeroLengthArrayOfWorkspaceMapping2010();
    internal static IEnumerable`1<BuildTeamProjectPermission> get_ZeroLengthEnumerableOfBuildTeamProjectPermission();
    internal static IEnumerable`1<BuildTeamProjectPermission2010> get_ZeroLengthEnumerableOfBuildTeamProjectPermission2010();
    internal static BuildAgent2008[] ArrayOfBuildAgent2008FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildAgent2010[] ArrayOfBuildAgent2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildAgent[] ArrayOfBuildAgentFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildAgentQueryResult2010[] ArrayOfBuildAgentQueryResult2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildAgentQueryResult[] ArrayOfBuildAgentQueryResultFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildAgentSpec2010[] ArrayOfBuildAgentSpec2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildAgentSpec[] ArrayOfBuildAgentSpecFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildAgentUpdateOptions2010[] ArrayOfBuildAgentUpdateOptions2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildAgentUpdateOptions[] ArrayOfBuildAgentUpdateOptionsFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildController2010[] ArrayOfBuildController2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildController[] ArrayOfBuildControllerFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildControllerQueryResult2010[] ArrayOfBuildControllerQueryResult2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildControllerQueryResult[] ArrayOfBuildControllerQueryResultFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildControllerSpec2010[] ArrayOfBuildControllerSpec2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildControllerSpec[] ArrayOfBuildControllerSpecFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildControllerUpdateOptions2010[] ArrayOfBuildControllerUpdateOptions2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildControllerUpdateOptions[] ArrayOfBuildControllerUpdateOptionsFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildDefinition2010[] ArrayOfBuildDefinition2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildDefinition[] ArrayOfBuildDefinitionFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildDefinitionQueryResult2010[] ArrayOfBuildDefinitionQueryResult2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildDefinitionQueryResult[] ArrayOfBuildDefinitionQueryResultFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildDefinitionSourceProvider[] ArrayOfBuildDefinitionSourceProviderFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildDefinitionSpec2010[] ArrayOfBuildDefinitionSpec2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildDefinitionSpec[] ArrayOfBuildDefinitionSpecFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildDeletionResult2010[] ArrayOfBuildDeletionResult2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildDeletionResult[] ArrayOfBuildDeletionResultFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildDeployment[] ArrayOfBuildDeploymentFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildDetail2010[] ArrayOfBuildDetail2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildDetail[] ArrayOfBuildDetailFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildDetailSpec2010[] ArrayOfBuildDetailSpec2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildDetailSpec[] ArrayOfBuildDetailSpecFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildGroupItemSpec2010[] ArrayOfBuildGroupItemSpec2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildGroupQueryResult[] ArrayOfBuildGroupQueryResultFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildInformationNode2010[] ArrayOfBuildInformationNode2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildInformationNode[] ArrayOfBuildInformationNodeFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildQueryResult2008[] ArrayOfBuildQueryResult2008FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildQueryResult2010[] ArrayOfBuildQueryResult2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildQueryResult[] ArrayOfBuildQueryResultFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildQueueQueryResult2008[] ArrayOfBuildQueueQueryResult2008FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildQueueQueryResult2010[] ArrayOfBuildQueueQueryResult2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildQueueQueryResult[] ArrayOfBuildQueueQueryResultFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildQueueSpec2008[] ArrayOfBuildQueueSpec2008FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildQueueSpec2010[] ArrayOfBuildQueueSpec2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildQueueSpec[] ArrayOfBuildQueueSpecFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildRequest2010[] ArrayOfBuildRequest2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildRequest[] ArrayOfBuildRequestFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildServiceHost2010[] ArrayOfBuildServiceHost2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildServiceHost[] ArrayOfBuildServiceHostFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildUpdateOptions2010[] ArrayOfBuildUpdateOptions2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static BuildUpdateOptions[] ArrayOfBuildUpdateOptionsFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static ChangesetDisplayInformation[] ArrayOfChangesetDisplayInformationFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static DeploymentEnvironmentMetadata[] ArrayOfDeploymentEnvironmentMetadataFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static Failure2010[] ArrayOfFailure2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static InformationChangeRequest2010[] ArrayOfInformationChangeRequest2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static InformationChangeRequest[] ArrayOfInformationChangeRequestFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static InformationField2010[] ArrayOfInformationField2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static InformationField[] ArrayOfInformationFieldFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static Int32[] ArrayOfInt32FromXml(XmlReader reader, bool inline);
    internal static NameValueField[] ArrayOfNameValueFieldFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static ProcessTemplate2010[] ArrayOfProcessTemplate2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static ProcessTemplate[] ArrayOfProcessTemplateFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static ProcessTemplateType2010[] ArrayOfProcessTemplateType2010FromXml(XmlReader reader, bool inline);
    internal static ProcessTemplateType[] ArrayOfProcessTemplateTypeFromXml(XmlReader reader, bool inline);
    internal static PropertyValue[] ArrayOfPropertyValueFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static QueuedBuild2008[] ArrayOfQueuedBuild2008FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static QueuedBuild2010[] ArrayOfQueuedBuild2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static QueuedBuild[] ArrayOfQueuedBuildFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static QueuedBuildUpdateOptions2010[] ArrayOfQueuedBuildUpdateOptions2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static QueuedBuildUpdateOptions[] ArrayOfQueuedBuildUpdateOptionsFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static RequestedForDisplayInformation[] ArrayOfRequestedForDisplayInformationFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static RetentionPolicy2010[] ArrayOfRetentionPolicy2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static RetentionPolicy[] ArrayOfRetentionPolicyFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static Schedule2010[] ArrayOfSchedule2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static Schedule[] ArrayOfScheduleFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static String[] ArrayOfStringFromXml(XmlReader reader, bool inline);
    internal static StrongBoxItemInfo[] ArrayOfStrongBoxItemInfoFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static Uri[] ArrayOfUriFromXml(XmlReader reader, bool inline);
    internal static WorkspaceMapping2010[] ArrayOfWorkspaceMapping2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static WorkspaceMapping[] ArrayOfWorkspaceMappingFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static string ArrayToString(T[] array);
    internal static IEnumerable`1<BuildTeamProjectPermission2010> EnumerableOfBuildTeamProjectPermission2010FromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static IEnumerable`1<BuildTeamProjectPermission> EnumerableOfBuildTeamProjectPermissionFromXml(IServiceProvider serviceProvider, XmlReader reader, bool inline);
    internal static Nullable`1<DateTime> NullableOfDateTimeFromXml(IServiceProvider serviceProvider, XmlReader reader);
    internal static Nullable`1<Guid> NullableOfGuidFromXml(IServiceProvider serviceProvider, XmlReader reader);
    internal static Nullable`1<long> NullableOfInt64FromXml(IServiceProvider serviceProvider, XmlReader reader);
    internal static void StringToXmlElement(XmlWriter writer, string element, string str);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildAgent2008[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildAgent2008[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildAgent2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildAgent2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildAgentQueryResult2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildAgentQueryResult2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildAgentQueryResult[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildAgentQueryResult[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildAgentSpec2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildAgentSpec2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildAgentSpec[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildAgentSpec[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildAgentUpdateOptions2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildAgentUpdateOptions2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildAgentUpdateOptions[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildAgentUpdateOptions[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildAgent[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildAgent[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildController2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildController2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildControllerQueryResult2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildControllerQueryResult2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildControllerQueryResult[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildControllerQueryResult[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildControllerSpec2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildControllerSpec2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildControllerSpec[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildControllerSpec[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildControllerUpdateOptions2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildControllerUpdateOptions2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildControllerUpdateOptions[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildControllerUpdateOptions[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildController[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildController[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDefinition2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDefinition2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDefinitionQueryResult2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDefinitionQueryResult2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDefinitionQueryResult[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDefinitionQueryResult[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDefinitionSourceProvider[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDefinitionSourceProvider[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDefinitionSpec2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDefinitionSpec2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDefinitionSpec[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDefinitionSpec[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDefinition[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDefinition[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDeletionResult2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDeletionResult2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDeletionResult[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDeletionResult[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDeployment[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDeployment[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDetail2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDetail2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDetailSpec2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDetailSpec2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDetailSpec[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDetailSpec[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDetail[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildDetail[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildGroupItemSpec2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildGroupItemSpec2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildGroupQueryResult[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildGroupQueryResult[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildInformationNode2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildInformationNode2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildInformationNode[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildInformationNode[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildQueryResult2008[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildQueryResult2008[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildQueryResult2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildQueryResult2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildQueryResult[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildQueryResult[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildQueueQueryResult2008[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildQueueQueryResult2008[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildQueueQueryResult2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildQueueQueryResult2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildQueueQueryResult[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildQueueQueryResult[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildQueueSpec2008[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildQueueSpec2008[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildQueueSpec2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildQueueSpec2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildQueueSpec[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildQueueSpec[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildRequest2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildRequest2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildRequest[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildRequest[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildServiceHost2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildServiceHost2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildServiceHost[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildServiceHost[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildUpdateOptions2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildUpdateOptions2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildUpdateOptions[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, BuildUpdateOptions[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, ChangesetDisplayInformation[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, ChangesetDisplayInformation[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, DeploymentEnvironmentMetadata[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, DeploymentEnvironmentMetadata[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, Failure2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, Failure2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string enumerableName, IEnumerable`1<BuildTeamProjectPermission2010> enumerable, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string enumerableName, IEnumerable`1<BuildTeamProjectPermission> enumerable, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, InformationChangeRequest2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, InformationChangeRequest2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, InformationChangeRequest[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, InformationChangeRequest[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, InformationField2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, InformationField2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, InformationField[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, InformationField[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, Int32[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, Int32[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, NameValueField[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, NameValueField[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, ProcessTemplate2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, ProcessTemplate2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, ProcessTemplateType2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, ProcessTemplateType2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, ProcessTemplateType[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, ProcessTemplateType[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, ProcessTemplate[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, ProcessTemplate[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, PropertyValue[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, PropertyValue[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, QueuedBuild2008[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, QueuedBuild2008[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, QueuedBuild2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, QueuedBuild2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, QueuedBuildUpdateOptions2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, QueuedBuildUpdateOptions2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, QueuedBuildUpdateOptions[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, QueuedBuildUpdateOptions[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, QueuedBuild[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, QueuedBuild[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, RequestedForDisplayInformation[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, RequestedForDisplayInformation[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, RetentionPolicy2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, RetentionPolicy2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, RetentionPolicy[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, RetentionPolicy[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, Schedule2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, Schedule2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, Schedule[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, Schedule[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, String[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, String[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, StrongBoxItemInfo[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, StrongBoxItemInfo[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, Uri[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, Uri[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, WorkspaceMapping2010[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, WorkspaceMapping2010[] array, bool inline, bool allowEmptyArrays);
    internal static void ToXml(XmlWriter writer, string arrayName, WorkspaceMapping[] array);
    internal static void ToXml(XmlWriter writer, string arrayName, WorkspaceMapping[] array, bool inline, bool allowEmptyArrays);
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Build.Client.HostEnvironmentOption : Enum {
    public int value__;
    public static HostEnvironmentOption None;
    public static HostEnvironmentOption Agent;
    public static HostEnvironmentOption Controller;
    public static HostEnvironmentOption All;
}
public interface Microsoft.TeamFoundation.Build.Client.IActivityProperties {
    public Dictionary`2<string, string> Properties { get; }
    public IBuildInformationNode Node { get; }
    public abstract virtual Dictionary`2<string, string> get_Properties();
    public abstract virtual IBuildInformationNode get_Node();
    public abstract virtual void Save();
}
public interface Microsoft.TeamFoundation.Build.Client.IActivityTracking {
    public string ActivityInstanceId { get; public set; }
    public string ActivityType { get; public set; }
    public string DisplayName { get; public set; }
    public string State { get; public set; }
    public DateTime StartTime { get; public set; }
    public DateTime FinishTime { get; public set; }
    public IBuildInformationNode Node { get; }
    public IActivityProperties InitialPropertyValues { get; }
    public IActivityProperties FinalPropertyValues { get; }
    public abstract virtual string get_ActivityInstanceId();
    public abstract virtual void set_ActivityInstanceId(string value);
    public abstract virtual string get_ActivityType();
    public abstract virtual void set_ActivityType(string value);
    public abstract virtual string get_DisplayName();
    public abstract virtual void set_DisplayName(string value);
    public abstract virtual string get_State();
    public abstract virtual void set_State(string value);
    public abstract virtual DateTime get_StartTime();
    public abstract virtual void set_StartTime(DateTime value);
    public abstract virtual DateTime get_FinishTime();
    public abstract virtual void set_FinishTime(DateTime value);
    public abstract virtual IBuildInformationNode get_Node();
    public abstract virtual IActivityProperties get_InitialPropertyValues();
    public abstract virtual IActivityProperties get_FinalPropertyValues();
    public abstract virtual IActivityTracking AddActivityTracking(string activityInstanceId, string activityType, string displayText);
    public abstract virtual IAgentScopeActivityTracking AddAgentScopeActivityTracking(string activityInstanceId, string activityType, string displayText);
    public abstract virtual IActivityProperties AddPropertyValues(Dictionary`2<string, string> properties);
    public abstract virtual void Save();
}
public interface Microsoft.TeamFoundation.Build.Client.IAgentScopeActivityTracking {
    public AgentReservationStatus ReservationStatus { get; public set; }
    public string ReservedAgentName { get; public set; }
    public Uri ReservedAgentUri { get; public set; }
    public abstract virtual AgentReservationStatus get_ReservationStatus();
    public abstract virtual void set_ReservationStatus(AgentReservationStatus value);
    public abstract virtual string get_ReservedAgentName();
    public abstract virtual void set_ReservedAgentName(string value);
    public abstract virtual Uri get_ReservedAgentUri();
    public abstract virtual void set_ReservedAgentUri(Uri value);
}
public interface Microsoft.TeamFoundation.Build.Client.IBuildAgent {
    public IBuildServiceHost ServiceHost { get; }
    public IBuildController Controller { get; public set; }
    public string BuildDirectory { get; public set; }
    public string Description { get; public set; }
    public AgentStatus Status { get; public set; }
    public bool Enabled { get; public set; }
    public string StatusMessage { get; public set; }
    public Uri Url { get; }
    public Uri MessageQueueUrl { get; }
    public List`1<string> Tags { get; public set; }
    public DateTime DateCreated { get; }
    public DateTime DateUpdated { get; }
    public bool IsReserved { get; }
    public Uri ReservedForBuild { get; }
    public IDictionary`2<string, object> AttachedProperties { get; }
    public abstract virtual IBuildServiceHost get_ServiceHost();
    public abstract virtual IBuildController get_Controller();
    public abstract virtual void set_Controller(IBuildController value);
    public abstract virtual string get_BuildDirectory();
    public abstract virtual void set_BuildDirectory(string value);
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual AgentStatus get_Status();
    public abstract virtual void set_Status(AgentStatus value);
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual string get_StatusMessage();
    public abstract virtual void set_StatusMessage(string value);
    public abstract virtual Uri get_Url();
    public abstract virtual Uri get_MessageQueueUrl();
    public abstract virtual List`1<string> get_Tags();
    public abstract virtual void set_Tags(List`1<string> value);
    public abstract virtual DateTime get_DateCreated();
    public abstract virtual DateTime get_DateUpdated();
    public abstract virtual bool get_IsReserved();
    public abstract virtual Uri get_ReservedForBuild();
    public abstract virtual IDictionary`2<string, object> get_AttachedProperties();
    public abstract virtual void Delete();
    public abstract virtual string GetExpandedBuildDirectory(IBuildDefinition buildDefinition);
    public abstract virtual void Save();
    public abstract virtual void Refresh(String[] propertyNameFilters);
}
public interface Microsoft.TeamFoundation.Build.Client.IBuildAgentQueryResult {
    public IBuildAgent[] Agents { get; }
    public IFailure[] Failures { get; }
    public abstract virtual IBuildAgent[] get_Agents();
    public abstract virtual IFailure[] get_Failures();
}
public interface Microsoft.TeamFoundation.Build.Client.IBuildAgentSpec {
    public string ServiceHostName { get; public set; }
    public string Name { get; public set; }
    public List`1<string> Tags { get; public set; }
    public List`1<string> PropertyNameFilters { get; public set; }
    public abstract virtual string get_ServiceHostName();
    public abstract virtual void set_ServiceHostName(string value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual List`1<string> get_Tags();
    public abstract virtual void set_Tags(List`1<string> value);
    public abstract virtual List`1<string> get_PropertyNameFilters();
    public abstract virtual void set_PropertyNameFilters(List`1<string> value);
}
public interface Microsoft.TeamFoundation.Build.Client.IBuildController {
    public IBuildServiceHost ServiceHost { get; }
    public ReadOnlyCollection`1<IBuildAgent> Agents { get; }
    public string CustomAssemblyPath { get; public set; }
    public string Description { get; public set; }
    public string Name { get; public set; }
    public int MaxConcurrentBuilds { get; public set; }
    public int QueueCount { get; }
    public ControllerStatus Status { get; public set; }
    public bool Enabled { get; public set; }
    public string StatusMessage { get; public set; }
    public IDictionary`2<string, object> AttachedProperties { get; }
    public ReadOnlyCollection`1<string> Tags { get; }
    public Uri Uri { get; }
    public Uri Url { get; }
    public Uri MessageQueueUrl { get; }
    public DateTime DateCreated { get; }
    public DateTime DateUpdated { get; }
    public abstract virtual IBuildServiceHost get_ServiceHost();
    public abstract virtual ReadOnlyCollection`1<IBuildAgent> get_Agents();
    public abstract virtual string get_CustomAssemblyPath();
    public abstract virtual void set_CustomAssemblyPath(string value);
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual int get_MaxConcurrentBuilds();
    public abstract virtual void set_MaxConcurrentBuilds(int value);
    public abstract virtual int get_QueueCount();
    public abstract virtual ControllerStatus get_Status();
    public abstract virtual void set_Status(ControllerStatus value);
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual string get_StatusMessage();
    public abstract virtual void set_StatusMessage(string value);
    public abstract virtual IDictionary`2<string, object> get_AttachedProperties();
    public abstract virtual ReadOnlyCollection`1<string> get_Tags();
    public abstract virtual Uri get_Uri();
    public abstract virtual Uri get_Url();
    public abstract virtual Uri get_MessageQueueUrl();
    public abstract virtual DateTime get_DateCreated();
    public abstract virtual DateTime get_DateUpdated();
    public abstract virtual void AddBuildAgent(IBuildAgent agent);
    public abstract virtual void Delete();
    public abstract virtual List`1<Assembly> LoadCustomActivities(string localPath, RecursionType recursionType, HostEnvironmentOption environmentOptions, List`1& activityTypes, List`1& failures);
    public abstract virtual List`1<Assembly> LoadCustomActivitiesAndExtensions(string localPath, RecursionType recursionType, HostEnvironmentOption environmentOptions, List`1& activityTypes, List`1& extensionTypes, List`1& failures);
    public abstract virtual void Refresh(bool refreshAgentList);
    public abstract virtual void Refresh(String[] propertyNameFilters, bool refreshAgentList);
    public abstract virtual void RemoveBuildAgent(IBuildAgent agent);
    public abstract virtual void Save();
}
internal interface Microsoft.TeamFoundation.Build.Client.IBuildControllerAssemblyDownloader {
    public abstract virtual List`1<string> DownloadCustomAssemblies(string localPath, CustomActivitiesAndExtensions customActivitiesAndExtensions);
    public abstract virtual bool DownloadCustomActivitiesAndExtensionsFile(string localPath, CustomActivitiesAndExtensions customActivitiesAndExtensions, HostEnvironmentOption environmentOptions, bool includeExtensions);
}
public interface Microsoft.TeamFoundation.Build.Client.IBuildControllerQueryResult {
    public IBuildController[] Controllers { get; }
    public IFailure[] Failures { get; }
    public abstract virtual IBuildController[] get_Controllers();
    public abstract virtual IFailure[] get_Failures();
}
public interface Microsoft.TeamFoundation.Build.Client.IBuildControllerSpec {
    public string ServiceHostName { get; public set; }
    public bool IncludeAgents { get; public set; }
    public string Name { get; public set; }
    public List`1<string> PropertyNameFilters { get; public set; }
    public abstract virtual string get_ServiceHostName();
    public abstract virtual void set_ServiceHostName(string value);
    public abstract virtual bool get_IncludeAgents();
    public abstract virtual void set_IncludeAgents(bool value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual List`1<string> get_PropertyNameFilters();
    public abstract virtual void set_PropertyNameFilters(List`1<string> value);
}
public interface Microsoft.TeamFoundation.Build.Client.IBuildDefinition {
    public int BatchSize { get; public set; }
    public IBuildController BuildController { get; public set; }
    public Uri BuildControllerUri { get; }
    public string Description { get; public set; }
    public string DefaultDropLocation { get; public set; }
    [ObsoleteAttribute("This property has been deprecated. Use QueueStatus instead.")]
public bool Enabled { get; public set; }
    public DefinitionQueueStatus QueueStatus { get; public set; }
    public string Id { get; }
    public List`1<IRetentionPolicy> RetentionPolicyList { get; }
    public List`1<ISchedule> Schedules { get; }
    public List`1<IBuildDefinitionSourceProvider> SourceProviders { get; }
    public IWorkspaceTemplate Workspace { get; }
    public Uri LastBuildUri { get; }
    public Uri LastGoodBuildUri { get; }
    public string LastGoodBuildLabel { get; }
    public IProcessTemplate Process { get; public set; }
    public string ProcessParameters { get; public set; }
    public IDictionary`2<string, object> AttachedProperties { get; }
    public DefinitionTriggerType TriggerType { get; public set; }
    public DateTime DateCreated { get; }
    public int ContinuousIntegrationQuietPeriod { get; public set; }
    public IBuildServer BuildServer { get; }
    public ContinuousIntegrationType ContinuousIntegrationType { get; public set; }
    public abstract virtual int get_BatchSize();
    public abstract virtual void set_BatchSize(int value);
    public abstract virtual IBuildController get_BuildController();
    public abstract virtual void set_BuildController(IBuildController value);
    public abstract virtual Uri get_BuildControllerUri();
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual string get_DefaultDropLocation();
    public abstract virtual void set_DefaultDropLocation(string value);
    public abstract virtual bool get_Enabled();
    public abstract virtual void set_Enabled(bool value);
    public abstract virtual DefinitionQueueStatus get_QueueStatus();
    public abstract virtual void set_QueueStatus(DefinitionQueueStatus value);
    public abstract virtual string get_Id();
    public abstract virtual List`1<IRetentionPolicy> get_RetentionPolicyList();
    public abstract virtual List`1<ISchedule> get_Schedules();
    public abstract virtual List`1<IBuildDefinitionSourceProvider> get_SourceProviders();
    public abstract virtual IWorkspaceTemplate get_Workspace();
    public abstract virtual Uri get_LastBuildUri();
    public abstract virtual Uri get_LastGoodBuildUri();
    public abstract virtual string get_LastGoodBuildLabel();
    public abstract virtual IProcessTemplate get_Process();
    public abstract virtual void set_Process(IProcessTemplate value);
    public abstract virtual string get_ProcessParameters();
    public abstract virtual void set_ProcessParameters(string value);
    public abstract virtual IDictionary`2<string, object> get_AttachedProperties();
    public abstract virtual DefinitionTriggerType get_TriggerType();
    public abstract virtual void set_TriggerType(DefinitionTriggerType value);
    public abstract virtual DateTime get_DateCreated();
    public abstract virtual int get_ContinuousIntegrationQuietPeriod();
    public abstract virtual void set_ContinuousIntegrationQuietPeriod(int value);
    public abstract virtual IRetentionPolicy AddRetentionPolicy(BuildReason reason, BuildStatus status, int numberToKeep, DeleteOptions deleteOptions);
    public abstract virtual ISchedule AddSchedule();
    public abstract virtual void CopyFrom(IBuildDefinition buildDefinition);
    public abstract virtual IBuildRequest CreateBuildRequest();
    public abstract virtual IBuildDetail CreateManualBuild(string buildNumber);
    public abstract virtual IBuildDetail CreateManualBuild(string buildNumber, string dropLocation);
    public abstract virtual IBuildDetail CreateManualBuild(string buildNumber, string dropLocation, BuildStatus buildStatus, IBuildController controller, string requestedFor);
    public abstract virtual void Delete();
    public abstract virtual void Save();
    public abstract virtual IBuildDefinitionSpec CreateSpec();
    public abstract virtual IBuildDetail[] QueryBuilds();
    public abstract virtual void Refresh(String[] propertyNameFilters, QueryOptions queryOptions);
    public abstract virtual IBuildServer get_BuildServer();
    public abstract virtual ContinuousIntegrationType get_ContinuousIntegrationType();
    public abstract virtual void set_ContinuousIntegrationType(ContinuousIntegrationType value);
}
public interface Microsoft.TeamFoundation.Build.Client.IBuildDefinitionQueryResult {
    public IBuildDefinition[] Definitions { get; }
    public IFailure[] Failures { get; }
    public abstract virtual IBuildDefinition[] get_Definitions();
    public abstract virtual IFailure[] get_Failures();
}
public interface Microsoft.TeamFoundation.Build.Client.IBuildDefinitionSourceProvider {
    public string Name { get; public set; }
    public DefinitionTriggerType SupportedTriggerTypes { get; }
    public IDictionary`2<string, string> Fields { get; }
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual DefinitionTriggerType get_SupportedTriggerTypes();
    public abstract virtual IDictionary`2<string, string> get_Fields();
}
public interface Microsoft.TeamFoundation.Build.Client.IBuildDefinitionSpec {
    public string FullPath { get; }
    public string Name { get; public set; }
    public string TeamProject { get; }
    public QueryOptions Options { get; public set; }
    public DefinitionTriggerType TriggerType { get; public set; }
    public ContinuousIntegrationType ContinuousIntegrationType { get; public set; }
    public List`1<string> PropertyNameFilters { get; public set; }
    public abstract virtual string get_FullPath();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_TeamProject();
    public abstract virtual QueryOptions get_Options();
    public abstract virtual void set_Options(QueryOptions value);
    public abstract virtual DefinitionTriggerType get_TriggerType();
    public abstract virtual void set_TriggerType(DefinitionTriggerType value);
    public abstract virtual ContinuousIntegrationType get_ContinuousIntegrationType();
    public abstract virtual void set_ContinuousIntegrationType(ContinuousIntegrationType value);
    public abstract virtual List`1<string> get_PropertyNameFilters();
    public abstract virtual void set_PropertyNameFilters(List`1<string> value);
}
public interface Microsoft.TeamFoundation.Build.Client.IBuildDeletionResult {
    public bool Successful { get; }
    public IFailure LabelFailure { get; }
    public IFailure SymbolsFailure { get; }
    public IFailure TestResultFailure { get; }
    public IFailure DropLocationFailure { get; }
    public abstract virtual bool get_Successful();
    public abstract virtual IFailure get_LabelFailure();
    public abstract virtual IFailure get_SymbolsFailure();
    public abstract virtual IFailure get_TestResultFailure();
    public abstract virtual IFailure get_DropLocationFailure();
}
public interface Microsoft.TeamFoundation.Build.Client.IBuildDetail {
    public string BuildNumber { get; public set; }
    public BuildPhaseStatus CompilationStatus { get; public set; }
    public string DropLocation { get; public set; }
    public string DropLocationRoot { get; }
    public string LabelName { get; public set; }
    public bool KeepForever { get; public set; }
    public string LogLocation { get; public set; }
    public string Quality { get; public set; }
    public BuildStatus Status { get; public set; }
    public BuildPhaseStatus TestStatus { get; public set; }
    public IBuildController BuildController { get; }
    public Uri BuildControllerUri { get; }
    public IBuildDefinition BuildDefinition { get; }
    public Uri BuildDefinitionUri { get; }
    public bool BuildFinished { get; }
    public IBuildServer BuildServer { get; }
    public IBuildInformation Information { get; }
    public string LastChangedBy { get; }
    public string LastChangedByDisplayName { get; }
    public DateTime LastChangedOn { get; }
    public string ProcessParameters { get; }
    public BuildReason Reason { get; }
    public ReadOnlyCollection`1<int> RequestIds { get; }
    public ReadOnlyCollection`1<IQueuedBuild> Requests { get; }
    public bool IsDeleted { get; }
    public string SourceGetVersion { get; public set; }
    public DateTime StartTime { get; }
    public DateTime FinishTime { get; }
    public Uri Uri { get; }
    public string TeamProject { get; }
    public Nullable`1<long> ContainerId { get; }
    public string RequestedBy { get; }
    public string RequestedFor { get; }
    public string ShelvesetName { get; }
    public abstract virtual string get_BuildNumber();
    public abstract virtual void set_BuildNumber(string value);
    public abstract virtual BuildPhaseStatus get_CompilationStatus();
    public abstract virtual void set_CompilationStatus(BuildPhaseStatus value);
    public abstract virtual string get_DropLocation();
    public abstract virtual void set_DropLocation(string value);
    public abstract virtual string get_DropLocationRoot();
    public abstract virtual string get_LabelName();
    public abstract virtual void set_LabelName(string value);
    public abstract virtual bool get_KeepForever();
    public abstract virtual void set_KeepForever(bool value);
    public abstract virtual string get_LogLocation();
    public abstract virtual void set_LogLocation(string value);
    public abstract virtual string get_Quality();
    public abstract virtual void set_Quality(string value);
    public abstract virtual BuildStatus get_Status();
    public abstract virtual void set_Status(BuildStatus value);
    public abstract virtual BuildPhaseStatus get_TestStatus();
    public abstract virtual void set_TestStatus(BuildPhaseStatus value);
    public abstract virtual IBuildController get_BuildController();
    public abstract virtual Uri get_BuildControllerUri();
    public abstract virtual IBuildDefinition get_BuildDefinition();
    public abstract virtual Uri get_BuildDefinitionUri();
    public abstract virtual bool get_BuildFinished();
    public abstract virtual IBuildServer get_BuildServer();
    public abstract virtual IBuildInformation get_Information();
    public abstract virtual string get_LastChangedBy();
    public abstract virtual string get_LastChangedByDisplayName();
    public abstract virtual DateTime get_LastChangedOn();
    public abstract virtual string get_ProcessParameters();
    public abstract virtual BuildReason get_Reason();
    public abstract virtual ReadOnlyCollection`1<int> get_RequestIds();
    public abstract virtual ReadOnlyCollection`1<IQueuedBuild> get_Requests();
    public abstract virtual bool get_IsDeleted();
    public abstract virtual string get_SourceGetVersion();
    public abstract virtual void set_SourceGetVersion(string value);
    public abstract virtual DateTime get_StartTime();
    public abstract virtual DateTime get_FinishTime();
    public abstract virtual Uri get_Uri();
    public abstract virtual string get_TeamProject();
    public abstract virtual Nullable`1<long> get_ContainerId();
    public abstract virtual void Connect(int pollingInterval, int timeout, ISynchronizeInvoke synchronizingObject);
    public abstract virtual void Connect(int pollingInterval, ISynchronizeInvoke synchronizingObject);
    public abstract virtual void Connect();
    public abstract virtual IBuildDeletionResult Delete();
    public abstract virtual IBuildDeletionResult Delete(DeleteOptions options);
    public abstract virtual void Disconnect();
    public abstract virtual void FinalizeStatus();
    public abstract virtual void FinalizeStatus(BuildStatus status);
    public abstract virtual void RefreshMinimalDetails();
    public abstract virtual void RefreshAllDetails();
    public abstract virtual void Refresh(String[] informationTypes, QueryOptions queryOptions);
    public abstract virtual void Save();
    public abstract virtual void Stop();
    public abstract virtual void Wait();
    public abstract virtual bool Wait(TimeSpan pollingInterval, TimeSpan timeout);
    public abstract virtual bool Wait(TimeSpan pollingInterval, TimeSpan timeout, ISynchronizeInvoke synchronizingObject);
    public abstract virtual Guid RequestIntermediateLogs();
    [CompilerGeneratedAttribute]
public abstract virtual void add_StatusChanging(StatusChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StatusChanging(StatusChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_StatusChanged(StatusChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StatusChanged(StatusChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PollingCompleted(PollingCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PollingCompleted(PollingCompletedEventHandler value);
    public abstract virtual string get_RequestedBy();
    public abstract virtual string get_RequestedFor();
    public abstract virtual string get_ShelvesetName();
}
public interface Microsoft.TeamFoundation.Build.Client.IBuildDetailSpec {
    public string BuildNumber { get; public set; }
    public IBuildDefinitionSpec DefinitionSpec { get; }
    public IList`1<Uri> DefinitionUris { get; }
    public QueryOptions QueryOptions { get; public set; }
    public BuildQueryOrder QueryOrder { get; public set; }
    public string RequestedFor { get; public set; }
    public int MaxBuildsPerDefinition { get; public set; }
    public BuildReason Reason { get; public set; }
    public BuildStatus Status { get; public set; }
    public string Quality { get; public set; }
    public String[] InformationTypes { get; public set; }
    public DateTime MinFinishTime { get; public set; }
    public DateTime MaxFinishTime { get; public set; }
    public DateTime MinChangedTime { get; public set; }
    public QueryDeletedOption QueryDeletedOption { get; public set; }
    public abstract virtual string get_BuildNumber();
    public abstract virtual void set_BuildNumber(string value);
    public abstract virtual IBuildDefinitionSpec get_DefinitionSpec();
    public abstract virtual IList`1<Uri> get_DefinitionUris();
    public abstract virtual QueryOptions get_QueryOptions();
    public abstract virtual void set_QueryOptions(QueryOptions value);
    public abstract virtual BuildQueryOrder get_QueryOrder();
    public abstract virtual void set_QueryOrder(BuildQueryOrder value);
    public abstract virtual string get_RequestedFor();
    public abstract virtual void set_RequestedFor(string value);
    public abstract virtual int get_MaxBuildsPerDefinition();
    public abstract virtual void set_MaxBuildsPerDefinition(int value);
    public abstract virtual BuildReason get_Reason();
    public abstract virtual void set_Reason(BuildReason value);
    public abstract virtual BuildStatus get_Status();
    public abstract virtual void set_Status(BuildStatus value);
    public abstract virtual string get_Quality();
    public abstract virtual void set_Quality(string value);
    public abstract virtual String[] get_InformationTypes();
    public abstract virtual void set_InformationTypes(String[] value);
    public abstract virtual DateTime get_MinFinishTime();
    public abstract virtual void set_MinFinishTime(DateTime value);
    public abstract virtual DateTime get_MaxFinishTime();
    public abstract virtual void set_MaxFinishTime(DateTime value);
    public abstract virtual DateTime get_MinChangedTime();
    public abstract virtual void set_MinChangedTime(DateTime value);
    public abstract virtual QueryDeletedOption get_QueryDeletedOption();
    public abstract virtual void set_QueryDeletedOption(QueryDeletedOption value);
}
public interface Microsoft.TeamFoundation.Build.Client.IBuildError {
    public string ErrorType { get; public set; }
    public abstract virtual string get_ErrorType();
    public abstract virtual void set_ErrorType(string value);
}
public interface Microsoft.TeamFoundation.Build.Client.IBuildErrorBase {
    public string Code { get; public set; }
    public int EndLineNumber { get; public set; }
    public string File { get; public set; }
    public string ServerPath { get; public set; }
    public int LineNumber { get; public set; }
    public string Message { get; public set; }
    public DateTime Timestamp { get; public set; }
    public IBuildInformationNode Node { get; }
    public abstract virtual string get_Code();
    public abstract virtual void set_Code(string value);
    public abstract virtual int get_EndLineNumber();
    public abstract virtual void set_EndLineNumber(int value);
    public abstract virtual string get_File();
    public abstract virtual void set_File(string value);
    public abstract virtual string get_ServerPath();
    public abstract virtual void set_ServerPath(string value);
    public abstract virtual int get_LineNumber();
    public abstract virtual void set_LineNumber(int value);
    public abstract virtual string get_Message();
    public abstract virtual void set_Message(string value);
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual void set_Timestamp(DateTime value);
    public abstract virtual IBuildInformationNode get_Node();
    public abstract virtual void Save();
}
public interface Microsoft.TeamFoundation.Build.Client.IBuildGroupItem {
    public Uri Uri { get; }
    public string Name { get; public set; }
    public string TeamProject { get; }
    public string FullPath { get; }
    public abstract virtual Uri get_Uri();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_TeamProject();
    public abstract virtual string get_FullPath();
    public abstract virtual void Refresh();
}
public interface Microsoft.TeamFoundation.Build.Client.IBuildInformation {
    public IBuildInformationNode[] Nodes { get; }
    public abstract virtual IBuildInformationNode[] get_Nodes();
    public abstract virtual IBuildInformationNode GetNode(int id);
    public abstract virtual List`1<IBuildInformationNode> GetNodesByType(string type);
    public abstract virtual List`1<IBuildInformationNode> GetNodesByType(string type, bool recursive);
    public abstract virtual List`1<IBuildInformationNode> GetNodesByTypes(IEnumerable`1<string> types);
    public abstract virtual List`1<IBuildInformationNode> GetNodesByTypes(IEnumerable`1<string> types, bool recursive);
    public abstract virtual List`1<IBuildInformationNode> GetSortedNodesByType(string type, IComparer`1<IBuildInformationNode> comparer);
    public abstract virtual List`1<IBuildInformationNode> GetSortedNodesByTypes(IEnumerable`1<string> types, IComparer`1<IBuildInformationNode> comparer);
    public abstract virtual List`1<IBuildInformationNode> GetSortedNodes(IComparer`1<IBuildInformationNode> comparer);
    public abstract virtual IBuildInformationNode CreateNode();
    public abstract virtual void Delete();
    public abstract virtual void Save();
}
public interface Microsoft.TeamFoundation.Build.Client.IBuildInformationNode {
    public IBuildInformation Children { get; }
    public Dictionary`2<string, string> Fields { get; }
    public int Id { get; }
    public string LastModifiedBy { get; }
    public DateTime LastModifiedDate { get; }
    public IBuildInformationNode Parent { get; }
    public string Type { get; public set; }
    public abstract virtual IBuildInformation get_Children();
    public abstract virtual Dictionary`2<string, string> get_Fields();
    public abstract virtual int get_Id();
    public abstract virtual string get_LastModifiedBy();
    public abstract virtual DateTime get_LastModifiedDate();
    public abstract virtual IBuildInformationNode get_Parent();
    public abstract virtual string get_Type();
    public abstract virtual void set_Type(string value);
    public abstract virtual void Delete();
    public abstract virtual void Save();
}
public interface Microsoft.TeamFoundation.Build.Client.IBuildMessage {
    public string Message { get; public set; }
    public BuildMessageImportance Importance { get; public set; }
    public DateTime Timestamp { get; public set; }
    public IBuildInformationNode Node { get; }
    public abstract virtual string get_Message();
    public abstract virtual void set_Message(string value);
    public abstract virtual BuildMessageImportance get_Importance();
    public abstract virtual void set_Importance(BuildMessageImportance value);
    public abstract virtual DateTime get_Timestamp();
    public abstract virtual void set_Timestamp(DateTime value);
    public abstract virtual IBuildInformationNode get_Node();
    public abstract virtual void Save();
}
public interface Microsoft.TeamFoundation.Build.Client.IBuildProjectNode {
    public List`1<IBuildProjectNode> Children { get; }
    public int CompilationErrors { get; public set; }
    public int CompilationWarnings { get; public set; }
    public string Flavor { get; public set; }
    public string LocalPath { get; public set; }
    public IExternalLink LogFile { get; }
    public IBuildProjectNode Parent { get; }
    public string Platform { get; public set; }
    public string ServerPath { get; public set; }
    public int StaticAnalysisErrors { get; public set; }
    public int StaticAnalysisWarnings { get; public set; }
    public string TargetNames { get; public set; }
    public DateTime StartTime { get; public set; }
    public DateTime FinishTime { get; public set; }
    public IBuildInformationNode Node { get; }
    public abstract virtual List`1<IBuildProjectNode> get_Children();
    public abstract virtual int get_CompilationErrors();
    public abstract virtual void set_CompilationErrors(int value);
    public abstract virtual int get_CompilationWarnings();
    public abstract virtual void set_CompilationWarnings(int value);
    public abstract virtual string get_Flavor();
    public abstract virtual void set_Flavor(string value);
    public abstract virtual string get_LocalPath();
    public abstract virtual void set_LocalPath(string value);
    public abstract virtual IExternalLink get_LogFile();
    public abstract virtual IBuildProjectNode get_Parent();
    public abstract virtual string get_Platform();
    public abstract virtual void set_Platform(string value);
    public abstract virtual string get_ServerPath();
    public abstract virtual void set_ServerPath(string value);
    public abstract virtual int get_StaticAnalysisErrors();
    public abstract virtual void set_StaticAnalysisErrors(int value);
    public abstract virtual int get_StaticAnalysisWarnings();
    public abstract virtual void set_StaticAnalysisWarnings(int value);
    public abstract virtual string get_TargetNames();
    public abstract virtual void set_TargetNames(string value);
    public abstract virtual DateTime get_StartTime();
    public abstract virtual void set_StartTime(DateTime value);
    public abstract virtual DateTime get_FinishTime();
    public abstract virtual void set_FinishTime(DateTime value);
    public abstract virtual IBuildInformationNode get_Node();
    public abstract virtual IBuildProjectNode AddBuildProjectNode();
    public abstract virtual List`1<IBuildError> GetErrors(string errorType);
    public abstract virtual List`1<IBuildWarning> GetWarnings(string warningType);
    public abstract virtual void Save();
}
public interface Microsoft.TeamFoundation.Build.Client.IBuildQueryResult {
    public IBuildDetail[] Builds { get; }
    public IFailure[] Failures { get; }
    public abstract virtual IBuildDetail[] get_Builds();
    public abstract virtual IFailure[] get_Failures();
}
public interface Microsoft.TeamFoundation.Build.Client.IBuildRequest {
    public Guid BatchId { get; public set; }
    public IBuildController BuildController { get; public set; }
    public Uri BuildControllerUri { get; }
    public IBuildDefinition BuildDefinition { get; }
    public Uri BuildDefinitionUri { get; }
    public string CustomGetVersion { get; public set; }
    public string DropLocation { get; public set; }
    public GetOption GetOption { get; public set; }
    public int MaxQueuePosition { get; public set; }
    public bool Postponed { get; public set; }
    public QueuePriority Priority { get; public set; }
    public string ProcessParameters { get; public set; }
    public string RequestedFor { get; public set; }
    public BuildReason Reason { get; public set; }
    public string ShelvesetName { get; public set; }
    public string GatedCheckInTicket { get; public set; }
    public IBuildServer BuildServer { get; }
    public abstract virtual Guid get_BatchId();
    public abstract virtual void set_BatchId(Guid value);
    public abstract virtual IBuildController get_BuildController();
    public abstract virtual void set_BuildController(IBuildController value);
    public abstract virtual Uri get_BuildControllerUri();
    public abstract virtual IBuildDefinition get_BuildDefinition();
    public abstract virtual Uri get_BuildDefinitionUri();
    public abstract virtual string get_CustomGetVersion();
    public abstract virtual void set_CustomGetVersion(string value);
    public abstract virtual string get_DropLocation();
    public abstract virtual void set_DropLocation(string value);
    public abstract virtual GetOption get_GetOption();
    public abstract virtual void set_GetOption(GetOption value);
    public abstract virtual int get_MaxQueuePosition();
    public abstract virtual void set_MaxQueuePosition(int value);
    public abstract virtual bool get_Postponed();
    public abstract virtual void set_Postponed(bool value);
    public abstract virtual QueuePriority get_Priority();
    public abstract virtual void set_Priority(QueuePriority value);
    public abstract virtual string get_ProcessParameters();
    public abstract virtual void set_ProcessParameters(string value);
    public abstract virtual string get_RequestedFor();
    public abstract virtual void set_RequestedFor(string value);
    public abstract virtual BuildReason get_Reason();
    public abstract virtual void set_Reason(BuildReason value);
    public abstract virtual string get_ShelvesetName();
    public abstract virtual void set_ShelvesetName(string value);
    public abstract virtual string get_GatedCheckInTicket();
    public abstract virtual void set_GatedCheckInTicket(string value);
    public abstract virtual IBuildServer get_BuildServer();
}
public interface Microsoft.TeamFoundation.Build.Client.IBuildServer {
    public BuildServerVersion BuildServerVersion { get; }
    public string NoCICheckInComment { get; }
    public TfsTeamProjectCollection TeamProjectCollection { get; }
    public abstract virtual BuildServerVersion get_BuildServerVersion();
    public abstract virtual string get_NoCICheckInComment();
    public abstract virtual TfsTeamProjectCollection get_TeamProjectCollection();
    public abstract virtual IBuildDefinition CreateBuildDefinition(string teamProject);
    public abstract virtual IQueuedBuildsView CreateQueuedBuildsView();
    public abstract virtual IQueuedBuildsView CreateQueuedBuildsView(string teamProject);
    public abstract virtual IQueuedBuildsView CreateQueuedBuildsView(IEnumerable`1<Uri> definitionUris);
    public abstract virtual IBuildDetailSpec CreateBuildDetailSpec(string teamProject);
    public abstract virtual IBuildDetailSpec CreateBuildDetailSpec(string teamProject, string definitionName);
    public abstract virtual IBuildDetailSpec CreateBuildDetailSpec(IBuildDefinitionSpec definitionSpec);
    public abstract virtual IBuildDetailSpec CreateBuildDetailSpec(IBuildDefinition definition);
    public abstract virtual IBuildDetailSpec CreateBuildDetailSpec(IEnumerable`1<Uri> definitionUris);
    public abstract virtual IBuildAgentSpec CreateBuildAgentSpec();
    public abstract virtual IBuildAgentSpec CreateBuildAgentSpec(string name, string computer, List`1<string> tags);
    public abstract virtual IBuildAgentSpec CreateBuildAgentSpec(string name, string computer, String[] propertyNameFilters, List`1<string> tags);
    public abstract virtual IBuildAgentSpec CreateBuildAgentSpec(IBuildAgent agent);
    public abstract virtual IBuildControllerSpec CreateBuildControllerSpec();
    public abstract virtual IBuildControllerSpec CreateBuildControllerSpec(string name, string computer);
    public abstract virtual IBuildControllerSpec CreateBuildControllerSpec(string name, string computer, String[] propertyNameFilters, bool includeAgents);
    public abstract virtual IBuildDefinitionSpec CreateBuildDefinitionSpec(IBuildDefinition definition);
    public abstract virtual IBuildDefinitionSpec CreateBuildDefinitionSpec(string teamProject);
    public abstract virtual IBuildDefinitionSpec CreateBuildDefinitionSpec(string teamProject, string definitionName);
    public abstract virtual IBuildDefinitionSpec CreateBuildDefinitionSpec(string teamProject, string definitionName, String[] propertyNameFilters);
    public abstract virtual IQueuedBuildSpec CreateBuildQueueSpec(string teamProject);
    public abstract virtual IQueuedBuildSpec CreateBuildQueueSpec(string teamProject, string definitionName);
    public abstract virtual IQueuedBuildSpec CreateBuildQueueSpec(IEnumerable`1<Uri> definitionUris);
    public abstract virtual IBuildRequest CreateBuildRequest(Uri buildDefinitionUri);
    public abstract virtual IBuildRequest CreateBuildRequest(Uri buildDefinitionUri, Uri buildControllerUri);
    public abstract virtual IBuildServiceHost CreateBuildServiceHost(string name, string scheme, string host, int port);
    public abstract virtual IBuildServiceHost CreateBuildServiceHost(string name, Uri baseUrl);
    public abstract virtual IBuildDefinition[] GetAffectedBuildDefinitions(String[] serverItems);
    [ObsoleteAttribute("This method has been deprecated. Use IBuildDefinition[] IBuildServer.GetAffectedBuildDefinitions(String[], DefinitionTriggerType) instead.", "False")]
public abstract virtual IBuildDefinition[] GetAffectedBuildDefinitions(String[] serverItems, ContinuousIntegrationType continuousIntegrationType);
    public abstract virtual IBuildDefinition[] GetAffectedBuildDefinitions(String[] serverItems, DefinitionTriggerType triggerType);
    public abstract virtual IBuildDetail GetMinimalBuildDetails(Uri buildUri);
    public abstract virtual IBuildDetail GetAllBuildDetails(Uri buildUri);
    public abstract virtual IBuildDetail GetBuild(Uri buildUri);
    public abstract virtual IBuildDetail GetBuild(Uri buildUri, String[] informationTypes, QueryOptions queryOptions);
    public abstract virtual IBuildDetail GetBuild(Uri buildUri, String[] informationTypes, QueryOptions queryOptions, QueryDeletedOption queryDeletedOption);
    public abstract virtual IBuildDetail GetBuild(IBuildDefinitionSpec buildDefinitionSpec, string buildNumber, String[] informationTypes, QueryOptions queryOptions);
    public abstract virtual IBuildDetail[] QueryBuildsByUri(Uri[] buildUris, String[] informationTypes, QueryOptions queryOptions);
    public abstract virtual IBuildDetail[] QueryBuildsByUri(Uri[] buildUris, String[] informationTypes, QueryOptions queryOptions, QueryDeletedOption queryDeletedOption);
    public abstract virtual IAsyncResult BeginQueryBuildsByUri(Uri[] buildUris, String[] informationTypes, QueryOptions queryOptions, QueryDeletedOption queryDeletedOption, AsyncCallback callback, object state);
    public abstract virtual IBuildDetail[] EndQueryBuildsByUri(IAsyncResult result);
    public abstract virtual IBuildDetail[] QueryBuilds(string teamProject);
    public abstract virtual IBuildDetail[] QueryBuilds(string teamProject, string definitionName);
    public abstract virtual IBuildDetail[] QueryBuilds(IBuildDefinitionSpec definitionSpec);
    public abstract virtual IBuildDetail[] QueryBuilds(IBuildDefinition definition);
    public abstract virtual IBuildQueryResult QueryBuilds(IBuildDetailSpec buildDetailSpec);
    public abstract virtual IBuildQueryResult[] QueryBuilds(IBuildDetailSpec[] buildDetailSpecs);
    public abstract virtual IAsyncResult BeginQueryBuilds(IBuildDetailSpec[] specs, AsyncCallback callback, object state);
    public abstract virtual IBuildQueryResult[] EndQueryBuilds(IAsyncResult result);
    public abstract virtual IBuildDeletionResult[] DeleteBuilds(IBuildDetail[] builds);
    public abstract virtual IBuildDeletionResult[] DeleteBuilds(IBuildDetail[] builds, DeleteOptions options);
    public abstract virtual IBuildDeletionResult[] DeleteBuilds(Uri[] buildUris);
    public abstract virtual IBuildDeletionResult[] DeleteBuilds(Uri[] buildUris, DeleteOptions options);
    public abstract virtual void DestroyBuilds(IBuildDetail[] builds);
    public abstract virtual void DestroyBuilds(Uri[] buildUris);
    public abstract virtual IBuildDetail[] SaveBuilds(IBuildDetail[] builds);
    public abstract virtual IBuildDefinition GetBuildDefinition(Uri buildDefinitionUri);
    public abstract virtual IBuildDefinition GetBuildDefinition(Uri buildDefinitionUri, QueryOptions options);
    public abstract virtual IBuildDefinition GetBuildDefinition(Uri buildDefinitionUri, String[] propertyNameFilters, QueryOptions options);
    public abstract virtual IBuildDefinition GetBuildDefinition(string teamProject, string name);
    public abstract virtual IBuildDefinition GetBuildDefinition(string teamProject, string name, QueryOptions options);
    public abstract virtual IBuildDefinition[] QueryBuildDefinitionsByUri(Uri[] buildDefinitionUris);
    public abstract virtual IBuildDefinition[] QueryBuildDefinitionsByUri(Uri[] buildDefinitionUris, QueryOptions options);
    public abstract virtual IBuildDefinition[] QueryBuildDefinitionsByUri(Uri[] buildDefinitionUris, String[] propertyNameFilters, QueryOptions options);
    public abstract virtual IAsyncResult BeginQueryBuildDefinitionsByUri(Uri[] uris, String[] propertyNameFilters, QueryOptions options, AsyncCallback callback, object state);
    public abstract virtual IBuildDefinition[] EndQueryBuildDefinitionsByUri(IAsyncResult result);
    public abstract virtual IBuildDefinition[] QueryBuildDefinitions(string teamProject);
    public abstract virtual IBuildDefinition[] QueryBuildDefinitions(string teamProject, QueryOptions options);
    public abstract virtual IBuildDefinition[] QueryBuildDefinitions(string teamProject, QueryOptions options, bool strict);
    public abstract virtual IBuildDefinitionQueryResult QueryBuildDefinitions(IBuildDefinitionSpec buildDefinitionSpec);
    public abstract virtual IBuildDefinitionQueryResult QueryBuildDefinitions(IBuildDefinitionSpec buildDefinitionSpec, bool strict);
    public abstract virtual IBuildDefinitionQueryResult[] QueryBuildDefinitions(IBuildDefinitionSpec[] buildDefinitionSpec);
    public abstract virtual IBuildDefinitionQueryResult[] QueryBuildDefinitions(IBuildDefinitionSpec[] buildDefinitionSpec, bool strict);
    public abstract virtual IAsyncResult BeginQueryBuildDefinitions(IBuildDefinitionSpec[] specs, AsyncCallback callback, object state);
    public abstract virtual IAsyncResult BeginQueryBuildDefinitions(IBuildDefinitionSpec[] specs, bool strict, AsyncCallback callback, object state);
    public abstract virtual IBuildDefinitionQueryResult[] EndQueryBuildDefinitions(IAsyncResult result);
    public abstract virtual void DeleteBuildDefinitions(IBuildDefinition[] definitions);
    public abstract virtual void DeleteBuildDefinitions(Uri[] definitionUris);
    public abstract virtual IBuildDefinition[] SaveBuildDefinitions(IBuildDefinition[] definitions);
    public abstract virtual void DeleteBuildServiceHost(Uri serviceHostUri);
    public abstract virtual IBuildServiceHost GetBuildServiceHost(string serviceHostName);
    public abstract virtual IBuildServiceHost GetBuildServiceHost(Uri buildServiceHostUri);
    public abstract virtual IBuildServiceHost[] QueryBuildServiceHosts(string serviceHostName);
    public abstract virtual IBuildServiceHost[] QueryBuildServiceHostsByUri(Uri[] buildServiceHostUris);
    public abstract virtual void SaveBuildServiceHost(IBuildServiceHost serviceHost);
    public abstract virtual void TestConnectionsForBuildMachine(IBuildServiceHost host);
    public abstract virtual void TestConnectionForBuildAgent(IBuildAgent agent);
    public abstract virtual void TestConnectionForBuildController(IBuildController controller);
    public abstract virtual IBuildAgent GetBuildAgent(Uri buildAgentUri);
    public abstract virtual IBuildAgent GetBuildAgent(Uri buildAgentUri, String[] propertyNameFilters);
    public abstract virtual IBuildAgent[] QueryBuildAgentsByUri(Uri[] buildAgentUris);
    public abstract virtual IBuildAgent[] QueryBuildAgentsByUri(Uri[] buildAgentUris, String[] propertyNameFilters);
    public abstract virtual IBuildAgentQueryResult QueryBuildAgents(IBuildAgentSpec buildAgentSpec);
    public abstract virtual IBuildAgentQueryResult[] QueryBuildAgents(IBuildAgentSpec[] buildAgentSpecs);
    public abstract virtual void DeleteBuildAgents(IBuildAgent[] agents);
    public abstract virtual void DeleteBuildAgents(Uri[] agentUris);
    public abstract virtual IBuildAgent[] SaveBuildAgents(IBuildAgent[] agents);
    public abstract virtual IBuildController GetBuildController(Uri buildControllerUri, bool includeAgents);
    public abstract virtual IBuildController GetBuildController(Uri buildControllerUri, String[] propertyNameFilters, bool includeAgents);
    public abstract virtual IBuildController GetBuildController(string name);
    public abstract virtual IBuildController[] QueryBuildControllers();
    public abstract virtual IBuildController[] QueryBuildControllers(bool includeAgents);
    public abstract virtual IBuildController[] QueryBuildControllersByUri(Uri[] buildControllerUris, bool includeAgents);
    public abstract virtual IBuildController[] QueryBuildControllersByUri(Uri[] buildControllerUris, String[] propertyNameFilters, bool includeAgents);
    public abstract virtual IBuildControllerQueryResult QueryBuildControllers(IBuildControllerSpec buildControllerSpec);
    public abstract virtual IBuildControllerQueryResult[] QueryBuildControllers(IBuildControllerSpec[] buildControllerSpecs);
    public abstract virtual void DeleteBuildControllers(IBuildController[] controllers);
    public abstract virtual void DeleteBuildControllers(Uri[] controllerUris);
    public abstract virtual IBuildController[] SaveBuildControllers(IBuildController[] controllers);
    public abstract virtual IQueuedBuild GetQueuedBuild(int queuedBuildId, QueryOptions queryOptions);
    public abstract virtual IQueuedBuild[] GetQueuedBuild(Int32[] queuedBuildIds, QueryOptions queryOptions);
    public abstract virtual IQueuedBuildQueryResult QueryQueuedBuilds(IQueuedBuildSpec spec);
    public abstract virtual IQueuedBuildQueryResult[] QueryQueuedBuilds(IQueuedBuildSpec[] specs);
    public abstract virtual IAsyncResult BeginQueryQueuedBuilds(IQueuedBuildSpec[] specs, AsyncCallback callback, object state);
    public abstract virtual IQueuedBuildQueryResult[] EndQueryQueuedBuilds(IAsyncResult result);
    public abstract virtual IQueuedBuild[] RetryQueuedBuilds(IQueuedBuild[] queuedBuilds);
    public abstract virtual IQueuedBuild[] RetryQueuedBuilds(IQueuedBuild[] queuedBuilds, Guid batchId);
    public abstract virtual IQueuedBuild[] RetryQueuedBuilds(IQueuedBuild[] queuedBuilds, Guid batchId, QueuedBuildRetryOption retryOption);
    public abstract virtual IQueuedBuild[] SaveQueuedBuilds(IQueuedBuild[] queuedBuilds);
    public abstract virtual void AddBuildQuality(string teamProject, string quality);
    public abstract virtual void AddBuildQuality(string teamProject, String[] qualities);
    public abstract virtual void DeleteBuildQuality(string teamProject, string quality);
    public abstract virtual void DeleteBuildQuality(string teamProject, String[] qualities);
    public abstract virtual String[] GetBuildQualities(string teamProject);
    public abstract virtual IProcessTemplate CreateProcessTemplate(string teamProject, string serverPath);
    public abstract virtual IProcessTemplate[] QueryProcessTemplates(string teamProject);
    public abstract virtual IProcessTemplate[] QueryProcessTemplates(string teamProject, ProcessTemplateType[] types);
    public abstract virtual IProcessTemplate[] SaveProcessTemplates(IProcessTemplate[] processTemplates);
    public abstract virtual void DeleteProcessTemplates(IProcessTemplate[] processTemplates);
    public abstract virtual IQueuedBuild QueueBuild(IBuildDefinition definition);
    public abstract virtual IQueuedBuild QueueBuild(IBuildRequest request);
    public abstract virtual IQueuedBuild QueueBuild(IBuildRequest request, QueueOptions options);
    public abstract virtual IQueuedBuild[] QueueBuild(IEnumerable`1<IBuildRequest> requests, QueueOptions options);
    public abstract virtual void StopBuilds(IBuildDetail[] builds);
    public abstract virtual void StopBuilds(Uri[] uris);
    public abstract virtual void CancelBuilds(IQueuedBuild[] builds);
    public abstract virtual void CancelBuilds(Int32[] ids);
    public abstract virtual IQueuedBuild[] StartQueuedBuildsNow(IQueuedBuild[] builds);
    public abstract virtual IQueuedBuild[] StartQueuedBuildsNow(Int32[] ids);
    public abstract virtual void CreateTeamProjectComponents(Uri projectUri, IEnumerable`1<BuildTeamProjectPermission> permissions);
    public abstract virtual string GetDisplayText(object value);
    public abstract virtual String[] GetDisplayTextValues(Type enumType);
    public abstract virtual object GetEnumValue(Type enumType, string displayText, object defaultValue);
    public abstract virtual ScheduleDays GetScheduleDaysFromDaysOfWeek(DayOfWeek[] weekdays);
}
public interface Microsoft.TeamFoundation.Build.Client.IBuildServiceHost {
    public IBuildServer BuildServer { get; }
    public bool IsVirtual { get; }
    public Uri Uri { get; }
    public string Name { get; public set; }
    public Uri BaseUrl { get; public set; }
    public Uri MessageQueueUrl { get; }
    public bool RequireClientCertificates { get; public set; }
    public ServiceHostStatus Status { get; }
    public DateTime StatusChangedOn { get; }
    public DateTime AcquiredOn { get; }
    public DateTime ConnectedOn { get; }
    public IBuildController Controller { get; }
    public ReadOnlyCollection`1<IBuildAgent> Agents { get; }
    public abstract virtual IBuildServer get_BuildServer();
    public abstract virtual bool get_IsVirtual();
    public abstract virtual Uri get_Uri();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual Uri get_BaseUrl();
    public abstract virtual void set_BaseUrl(Uri value);
    public abstract virtual Uri get_MessageQueueUrl();
    public abstract virtual bool get_RequireClientCertificates();
    public abstract virtual void set_RequireClientCertificates(bool value);
    public abstract virtual ServiceHostStatus get_Status();
    public abstract virtual DateTime get_StatusChangedOn();
    public abstract virtual DateTime get_AcquiredOn();
    public abstract virtual DateTime get_ConnectedOn();
    public abstract virtual IBuildController get_Controller();
    public abstract virtual ReadOnlyCollection`1<IBuildAgent> get_Agents();
    public abstract virtual IBuildController CreateBuildController(string name);
    public abstract virtual IBuildAgent CreateBuildAgent(string name, string buildDirectory);
    public abstract virtual IBuildAgent CreateBuildAgent(string name, string buildDirectory, IBuildController buildController);
    public abstract virtual void Delete();
    public abstract virtual void Save();
    public abstract virtual void DeleteBuildController();
    public abstract virtual bool DeleteBuildAgent(IBuildAgent agent);
    public abstract virtual IBuildAgent FindBuildAgent(string controller, string name);
    public abstract virtual void TakeOwnership();
    public abstract virtual void ReleaseOwnership();
    public abstract virtual void SetBuildControllerStatus(ControllerStatus status, string message);
    public abstract virtual void SetBuildAgentStatus(IBuildAgent agent, AgentStatus status, string message);
    public abstract virtual void AddBuildAgent(IBuildAgent agent);
    public abstract virtual void SetBuildController(IBuildController controller);
}
public interface Microsoft.TeamFoundation.Build.Client.IBuildServiceHostQueryResult {
    public IBuildServiceHost[] ServiceHosts { get; }
    public IFailure[] Failures { get; }
    public abstract virtual IBuildServiceHost[] get_ServiceHosts();
    public abstract virtual IFailure[] get_Failures();
}
public interface Microsoft.TeamFoundation.Build.Client.IBuildStep {
    public DateTime FinishTime { get; public set; }
    public int Id { get; }
    public string Message { get; public set; }
    public string Name { get; public set; }
    public DateTime StartTime { get; public set; }
    public BuildStepStatus Status { get; public set; }
    public IBuildInformationNode Node { get; }
    public abstract virtual DateTime get_FinishTime();
    public abstract virtual void set_FinishTime(DateTime value);
    public abstract virtual int get_Id();
    public abstract virtual string get_Message();
    public abstract virtual void set_Message(string value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual DateTime get_StartTime();
    public abstract virtual void set_StartTime(DateTime value);
    public abstract virtual BuildStepStatus get_Status();
    public abstract virtual void set_Status(BuildStepStatus value);
    public abstract virtual IBuildInformationNode get_Node();
    public abstract virtual IBuildStep Add(string name, string message, DateTime startTime);
    public abstract virtual IBuildStep Add(string name, string message, DateTime time, BuildStepStatus status);
    public abstract virtual void Save();
}
public interface Microsoft.TeamFoundation.Build.Client.IBuildWarning {
    public string WarningType { get; public set; }
    public abstract virtual string get_WarningType();
    public abstract virtual void set_WarningType(string value);
}
public interface Microsoft.TeamFoundation.Build.Client.IChangesetSummary {
    public int ChangesetId { get; public set; }
    public Uri ChangesetUri { get; public set; }
    public string CheckedInBy { get; public set; }
    public string Comment { get; public set; }
    public int Id { get; }
    public IBuildInformationNode Node { get; }
    public abstract virtual int get_ChangesetId();
    public abstract virtual void set_ChangesetId(int value);
    public abstract virtual Uri get_ChangesetUri();
    public abstract virtual void set_ChangesetUri(Uri value);
    public abstract virtual string get_CheckedInBy();
    public abstract virtual void set_CheckedInBy(string value);
    public abstract virtual string get_Comment();
    public abstract virtual void set_Comment(string value);
    public abstract virtual int get_Id();
    public abstract virtual IBuildInformationNode get_Node();
    public abstract virtual void Save();
}
[ObsoleteAttribute("This class has been deprecated. Please remove all references.", "False")]
public interface Microsoft.TeamFoundation.Build.Client.ICodeCoverageSummary {
    public int BlocksCovered { get; public set; }
    public int BlocksNotCovered { get; public set; }
    public int Id { get; }
    public bool IsBuildCoverageProcessing { get; public set; }
    public int LinesCovered { get; public set; }
    public int LinesNotCovered { get; public set; }
    public int LinesPartiallyCovered { get; public set; }
    public string Name { get; public set; }
    public string RunId { get; public set; }
    public string RunUser { get; public set; }
    public IBuildInformationNode Node { get; }
    public abstract virtual int get_BlocksCovered();
    public abstract virtual void set_BlocksCovered(int value);
    public abstract virtual int get_BlocksNotCovered();
    public abstract virtual void set_BlocksNotCovered(int value);
    public abstract virtual int get_Id();
    public abstract virtual bool get_IsBuildCoverageProcessing();
    public abstract virtual void set_IsBuildCoverageProcessing(bool value);
    public abstract virtual int get_LinesCovered();
    public abstract virtual void set_LinesCovered(int value);
    public abstract virtual int get_LinesNotCovered();
    public abstract virtual void set_LinesNotCovered(int value);
    public abstract virtual int get_LinesPartiallyCovered();
    public abstract virtual void set_LinesPartiallyCovered(int value);
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_RunId();
    public abstract virtual void set_RunId(string value);
    public abstract virtual string get_RunUser();
    public abstract virtual void set_RunUser(string value);
    public abstract virtual IBuildInformationNode get_Node();
    public abstract virtual void Save();
}
[ObsoleteAttribute("This class has been deprecated. Please remove all references.", "False")]
public interface Microsoft.TeamFoundation.Build.Client.ICompilationSummary {
    public List`1<ICompilationSummary> Children { get; }
    public int CompilationErrors { get; public set; }
    public int CompilationWarnings { get; public set; }
    public int Id { get; }
    public ICompilationSummary Parent { get; }
    public string ProjectFile { get; public set; }
    public int StaticAnalysisErrors { get; public set; }
    public int StaticAnalysisWarnings { get; public set; }
    public IBuildInformationNode Node { get; }
    public abstract virtual List`1<ICompilationSummary> get_Children();
    public abstract virtual int get_CompilationErrors();
    public abstract virtual void set_CompilationErrors(int value);
    public abstract virtual int get_CompilationWarnings();
    public abstract virtual void set_CompilationWarnings(int value);
    public abstract virtual int get_Id();
    public abstract virtual ICompilationSummary get_Parent();
    public abstract virtual string get_ProjectFile();
    public abstract virtual void set_ProjectFile(string value);
    public abstract virtual int get_StaticAnalysisErrors();
    public abstract virtual void set_StaticAnalysisErrors(int value);
    public abstract virtual int get_StaticAnalysisWarnings();
    public abstract virtual void set_StaticAnalysisWarnings(int value);
    public abstract virtual ICompilationSummary AddCompilationSummary();
    public abstract virtual IBuildInformationNode get_Node();
    public abstract virtual void Save();
}
public interface Microsoft.TeamFoundation.Build.Client.IConfigurationSummary {
    [ObsoleteAttribute("This property has been deprecated. Please remove all references.", "False")]
public List`1<ICodeCoverageSummary> CodeCoverageSummaries { get; }
    [ObsoleteAttribute("This property has been deprecated. Please remove all references.", "False")]
public List`1<ICompilationSummary> CompilationSummaries { get; }
    public string Flavor { get; public set; }
    public string FullName { get; }
    public int Id { get; }
    [ObsoleteAttribute("This property has been deprecated. Please remove all references.", "False")]
public string LogFile { get; public set; }
    public string Platform { get; public set; }
    [ObsoleteAttribute("This property has been deprecated. Please remove all references.", "False")]
public List`1<ITestSummary> TestSummaries { get; }
    public int TotalCompilationErrors { get; }
    public int TotalCompilationWarnings { get; }
    public int TotalStaticAnalysisErrors { get; }
    public int TotalStaticAnalysisWarnings { get; }
    public IBuildInformationNode Node { get; }
    public abstract virtual List`1<ICodeCoverageSummary> get_CodeCoverageSummaries();
    public abstract virtual List`1<ICompilationSummary> get_CompilationSummaries();
    public abstract virtual string get_Flavor();
    public abstract virtual void set_Flavor(string value);
    public abstract virtual string get_FullName();
    public abstract virtual int get_Id();
    public abstract virtual string get_LogFile();
    public abstract virtual void set_LogFile(string value);
    public abstract virtual string get_Platform();
    public abstract virtual void set_Platform(string value);
    public abstract virtual List`1<ITestSummary> get_TestSummaries();
    public abstract virtual int get_TotalCompilationErrors();
    public abstract virtual int get_TotalCompilationWarnings();
    public abstract virtual int get_TotalStaticAnalysisErrors();
    public abstract virtual int get_TotalStaticAnalysisWarnings();
    [ObsoleteAttribute("This method has been deprecated. Please remove all references.", "False")]
public abstract virtual ICompilationSummary AddCompilationSummary();
    [ObsoleteAttribute("This method has been deprecated. Please remove all references.", "False")]
public abstract virtual ITestSummary AddTestSummary();
    [ObsoleteAttribute("This method has been deprecated. Please remove all references.", "False")]
public abstract virtual ICodeCoverageSummary AddCodeCoverageSummary();
    public abstract virtual IBuildInformationNode get_Node();
    public abstract virtual List`1<IBuildProjectNode> GetTopLevelProjects();
    public abstract virtual void Save();
}
[ObsoleteAttribute("This interface has been deprecated. Please remove all references.", "True")]
public interface Microsoft.TeamFoundation.Build.Client.IConfigurationToBuild {
    public string Flavor { get; public set; }
    public string Platform { get; public set; }
    public abstract virtual string get_Flavor();
    public abstract virtual void set_Flavor(string value);
    public abstract virtual string get_Platform();
    public abstract virtual void set_Platform(string value);
}
public interface Microsoft.TeamFoundation.Build.Client.ICustomSummaryInformation {
    public string Message { get; public set; }
    public string SectionName { get; public set; }
    public string SectionHeader { get; public set; }
    public int SectionPriority { get; public set; }
    public IBuildInformationNode Node { get; }
    public abstract virtual string get_Message();
    public abstract virtual void set_Message(string value);
    public abstract virtual string get_SectionName();
    public abstract virtual void set_SectionName(string value);
    public abstract virtual string get_SectionHeader();
    public abstract virtual void set_SectionHeader(string value);
    public abstract virtual int get_SectionPriority();
    public abstract virtual void set_SectionPriority(int value);
    public abstract virtual IBuildInformationNode get_Node();
    public abstract virtual void Save();
}
public interface Microsoft.TeamFoundation.Build.Client.IExternalLink {
    public string DisplayText { get; public set; }
    public Uri Url { get; public set; }
    public IBuildInformationNode Node { get; }
    public abstract virtual string get_DisplayText();
    public abstract virtual void set_DisplayText(string value);
    public abstract virtual Uri get_Url();
    public abstract virtual void set_Url(Uri value);
    public abstract virtual IBuildInformationNode get_Node();
    public abstract virtual void Save();
}
public interface Microsoft.TeamFoundation.Build.Client.IFailure {
    public string Code { get; }
    public string Message { get; }
    public abstract virtual string get_Code();
    public abstract virtual string get_Message();
}
[ObsoleteAttribute("This interface has been deprecated. Please remove all references.", "True")]
public interface Microsoft.TeamFoundation.Build.Client.IMetadataFile {
    public string FilePath { get; public set; }
    public string TestList { get; public set; }
    public abstract virtual string get_FilePath();
    public abstract virtual void set_FilePath(string value);
    public abstract virtual string get_TestList();
    public abstract virtual void set_TestList(string value);
}
internal class Microsoft.TeamFoundation.Build.Client.InformationAddRequest : InformationChangeRequest {
    private BuildInformationNode m_node;
    internal InformationField[] m_fields;
    private int m_nodeId;
    private string m_nodeType;
    private int m_parentId;
    internal BuildInformationNode Node { get; internal set; }
    public InformationField[] Fields { get; public set; }
    public int NodeId { get; public set; }
    public string NodeType { get; public set; }
    public int ParentId { get; public set; }
    internal BuildInformationNode get_Node();
    internal void set_Node(BuildInformationNode value);
    public InformationField[] get_Fields();
    public void set_Fields(InformationField[] value);
    public int get_NodeId();
    public void set_NodeId(int value);
    public string get_NodeType();
    public void set_NodeType(string value);
    public int get_ParentId();
    public void set_ParentId(int value);
    internal static InformationAddRequest FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal virtual void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, InformationAddRequest obj);
}
internal class Microsoft.TeamFoundation.Build.Client.InformationAddRequest2010 : InformationChangeRequest2010 {
    internal InformationField2010[] m_fields;
    private int m_nodeId;
    private string m_nodeType;
    private int m_parentId;
    public InformationField2010[] Fields { get; public set; }
    public int NodeId { get; public set; }
    public string NodeType { get; public set; }
    public int ParentId { get; public set; }
    public InformationField2010[] get_Fields();
    public void set_Fields(InformationField2010[] value);
    public int get_NodeId();
    public void set_NodeId(int value);
    public string get_NodeType();
    public void set_NodeType(string value);
    public int get_ParentId();
    public void set_ParentId(int value);
    internal static InformationAddRequest2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal virtual void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, InformationAddRequest2010 obj);
}
public class Microsoft.TeamFoundation.Build.Client.InformationAddRequestCycleException : InformationChangeRequestException {
    public InformationAddRequestCycleException(string message);
    public InformationAddRequestCycleException(string message, Exception ex);
    protected InformationAddRequestCycleException(SerializationInfo info, StreamingContext context);
}
internal abstract class Microsoft.TeamFoundation.Build.Client.InformationChangeRequest : object {
    protected Uri m_buildUri;
    public Uri BuildUri { get; public set; }
    public Uri get_BuildUri();
    public void set_BuildUri(Uri value);
    internal static InformationChangeRequest FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal abstract virtual void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, InformationChangeRequest obj);
}
internal abstract class Microsoft.TeamFoundation.Build.Client.InformationChangeRequest2010 : object {
    protected Uri m_buildUri;
    public Uri BuildUri { get; public set; }
    public Uri get_BuildUri();
    public void set_BuildUri(Uri value);
    internal static InformationChangeRequest2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal abstract virtual void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, InformationChangeRequest2010 obj);
}
public class Microsoft.TeamFoundation.Build.Client.InformationChangeRequestException : BuildServerException {
    public InformationChangeRequestException(string message);
    public InformationChangeRequestException(string message, Exception ex);
    protected InformationChangeRequestException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Build.Client.InformationDeleteRequest : InformationChangeRequest {
    private int m_nodeId;
    public int NodeId { get; public set; }
    public int get_NodeId();
    public void set_NodeId(int value);
    internal static InformationDeleteRequest FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal virtual void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, InformationDeleteRequest obj);
}
internal class Microsoft.TeamFoundation.Build.Client.InformationDeleteRequest2010 : InformationChangeRequest2010 {
    private int m_nodeId;
    public int NodeId { get; public set; }
    public int get_NodeId();
    public void set_NodeId(int value);
    internal static InformationDeleteRequest2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal virtual void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, InformationDeleteRequest2010 obj);
}
public enum Microsoft.TeamFoundation.Build.Client.InformationEditOptions : Enum {
    public int value__;
    public static InformationEditOptions MergeFields;
    public static InformationEditOptions ReplaceFields;
}
internal enum Microsoft.TeamFoundation.Build.Client.InformationEditOptions2010 : Enum {
    public int value__;
    public static InformationEditOptions2010 MergeFields;
    public static InformationEditOptions2010 ReplaceFields;
}
internal class Microsoft.TeamFoundation.Build.Client.InformationEditRequest : InformationChangeRequest {
    internal InformationField[] m_fields;
    private int m_nodeId;
    private InformationEditOptions m_options;
    public InformationField[] Fields { get; public set; }
    public int NodeId { get; public set; }
    public InformationEditOptions Options { get; public set; }
    public InformationField[] get_Fields();
    public void set_Fields(InformationField[] value);
    public int get_NodeId();
    public void set_NodeId(int value);
    public InformationEditOptions get_Options();
    public void set_Options(InformationEditOptions value);
    internal static InformationEditRequest FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal virtual void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, InformationEditRequest obj);
}
internal class Microsoft.TeamFoundation.Build.Client.InformationEditRequest2010 : InformationChangeRequest2010 {
    internal InformationField2010[] m_fields;
    private int m_nodeId;
    private InformationEditOptions2010 m_options;
    public InformationField2010[] Fields { get; public set; }
    public int NodeId { get; public set; }
    public InformationEditOptions2010 Options { get; public set; }
    public InformationField2010[] get_Fields();
    public void set_Fields(InformationField2010[] value);
    public int get_NodeId();
    public void set_NodeId(int value);
    public InformationEditOptions2010 get_Options();
    public void set_Options(InformationEditOptions2010 value);
    internal static InformationEditRequest2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal virtual void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, InformationEditRequest2010 obj);
}
internal class Microsoft.TeamFoundation.Build.Client.InformationField : object {
    private string m_name;
    private string m_value;
    internal string Name { get; internal set; }
    internal string Value { get; internal set; }
    internal InformationField(string name, string value);
    private void BeforeSerialize();
    internal string get_Name();
    internal void set_Name(string value);
    internal string get_Value();
    internal void set_Value(string value);
    internal static InformationField FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, InformationField obj);
}
internal class Microsoft.TeamFoundation.Build.Client.InformationField2010 : object {
    private string m_name;
    private string m_value;
    internal string Name { get; internal set; }
    internal string Value { get; internal set; }
    internal string get_Name();
    internal void set_Name(string value);
    internal string get_Value();
    internal void set_Value(string value);
    internal static InformationField2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, InformationField2010 obj);
}
[ExtensionAttribute]
public static class Microsoft.TeamFoundation.Build.Client.InformationNodeConverters : object {
    private static String[] ActivityTrackingTypes;
    private static InformationNodeConverters();
    public static List`1<IChangesetSummary> AddAssociatedChangesets(IBuildDetail build, Changeset[] changesets);
    [ExtensionAttribute]
public static List`1<IChangesetSummary> AddAssociatedChangesets(IBuildInformation buildInformation, Changeset[] changesets);
    private static List`1<IChangesetSummary> AddAssociatedChangesets(IBuildInformation buildInformation, Changeset[] changesets, bool saveToServer);
    public static List`1<IChangesetSummary> GetAssociatedChangesets(IBuildDetail build);
    public static List`1<IChangesetSummary> GetAssociatedChangesets(IBuildInformation buildInformation);
    public static IBuildStep AddBuildStep(IBuildDetail build, string name, string message);
    [ExtensionAttribute]
public static IBuildStep AddBuildStep(IBuildInformation buildInformation, string name, string message);
    public static IBuildStep AddBuildStep(IBuildDetail build, string name, string message, DateTime startTime);
    [ExtensionAttribute]
public static IBuildStep AddBuildStep(IBuildInformation buildInformation, string name, string message, DateTime startTime);
    private static IBuildStep AddBuildStep(IBuildInformation buildInformation, string name, string message, DateTime startTime, bool saveToServer);
    public static IBuildStep AddBuildStep(IBuildDetail build, string name, string message, DateTime time, BuildStepStatus status);
    [ExtensionAttribute]
public static IBuildStep AddBuildStep(IBuildInformation buildInformation, string name, string message, DateTime time, BuildStepStatus status);
    private static IBuildStep AddBuildStep(IBuildInformation buildInformation, string name, string message, DateTime time, BuildStepStatus status, bool saveToServer);
    public static List`1<IBuildStep> GetBuildSteps(IBuildDetail build);
    public static List`1<IBuildStep> GetBuildSteps(IBuildInformation buildInformation);
    public static List`1<IWorkItemSummary> AddAssociatedWorkItems(IBuildDetail build, WorkItem[] workItems);
    [ExtensionAttribute]
public static List`1<IWorkItemSummary> AddAssociatedWorkItems(IBuildInformation buildInformation, WorkItem[] workItems);
    public static List`1<IWorkItemSummary> GetAssociatedWorkItems(IBuildDetail build);
    public static List`1<IWorkItemSummary> GetAssociatedWorkItems(IBuildInformation buildInformation);
    [ObsoleteAttribute("This method has been deprecated. Please remove all references.", "False")]
public static IConfigurationSummary AddConfigurationSummary(IBuildDetail build, string flavor, string platform, string logFile);
    [ExtensionAttribute]
public static IConfigurationSummary AddConfigurationSummary(IBuildInformation buildInformation, string flavor, string platform);
    private static IConfigurationSummary AddConfigurationSummary(IBuildInformation buildInformation, string flavor, string platform, bool saveToServer);
    public static IConfigurationSummary GetConfigurationSummary(IBuildDetail build, string flavor, string platform);
    public static IConfigurationSummary GetConfigurationSummary(IBuildInformation buildInformation, string flavor, string platform);
    public static IConfigurationSummary GetConfigurationSummary(IBuildInformationNode buildInformationNode);
    public static int GetChangesetId(IBuildInformation buildInformation);
    public static int GetChangesetId(IBuildInformation buildInformation, int requestId);
    public static int GetChangesetId(IBuildInformation buildInformation, int requestId, bool returnFirstIfNotFound);
    public static bool GetChangesetsInfo(IBuildInformation buildInformation, Int32& successful, Int32& failed);
    public static List`1<IConfigurationSummary> GetConfigurationSummaries(IBuildDetail build);
    public static List`1<IConfigurationSummary> GetConfigurationSummaries(IBuildInformation buildInformation);
    public static List`1<IWorkItemSummary> AddOpenedWorkItems(IBuildDetail build, WorkItem[] workItems);
    [ExtensionAttribute]
public static List`1<IWorkItemSummary> AddOpenedWorkItems(IBuildInformation buildInformation, WorkItem[] workItems);
    public static List`1<IWorkItemSummary> GetOpenedWorkItems(IBuildDetail build);
    public static List`1<IWorkItemSummary> GetOpenedWorkItems(IBuildInformation buildInformation);
    [ExtensionAttribute]
public static IActivityTracking AddActivityTracking(IBuildInformation buildInformation, string activityInstanceId, string activityType, string displayText);
    [ExtensionAttribute]
public static IAgentScopeActivityTracking AddAgentScopeActivityTracking(IBuildInformation buildInformation, string activityInstanceId, string activityType, string displayText);
    public static List`1<IActivityTracking> GetActivityTrackingNodes(IBuildDetail build);
    public static List`1<IActivityTracking> GetActivityTrackingNodes(IBuildInformation buildInformation);
    public static IActivityTracking GetActivityTracking(IBuildDetail build, string activityInstanceId);
    public static IActivityTracking GetActivityTracking(IBuildInformation buildInformation, string activityInstanceId);
    public static IActivityTracking GetActivityTracking(IBuildDetail build, int nodeId);
    internal static IActivityTracking GetActivityTrackingFromNode(IBuildInformationNode node);
    [ExtensionAttribute]
public static ICustomSummaryInformation AddCustomSummaryInformation(IBuildInformation buildInformation, string message, string sectionName, string sectionHeader, int sectionPriority);
    public static ICustomSummaryInformation GetCustomSummaryInformation(IBuildInformationNode node);
    public static List`1<ICustomSummaryInformation> GetCustomSummaryInformationNodes(IBuildDetail build);
    public static List`1<ICustomSummaryInformation> GetCustomSummaryInformationNodes(IBuildInformation buildInformation);
    [ExtensionAttribute]
public static IBuildError AddBuildError(IBuildInformation buildInformation, string message, DateTime timestamp);
    [ExtensionAttribute]
public static IBuildError AddBuildError(IBuildInformation buildInformation, string file, int lineNumber, int endLineNumber, string code, string message, DateTime timestamp);
    [ExtensionAttribute]
public static IBuildError AddBuildError(IBuildInformation buildInformation, string errorType, string file, int lineNumber, int endLineNumber, string code, string message, DateTime timestamp);
    [ExtensionAttribute]
public static IBuildError AddBuildError(IBuildInformation buildInformation, string errorType, string file, string serverPath, int lineNumber, int endLineNumber, string code, string message, DateTime timestamp);
    public static IBuildError GetBuildError(IBuildInformationNode node);
    public static List`1<IBuildError> GetBuildErrors(IBuildDetail build);
    public static List`1<IBuildError> GetBuildErrors(IBuildInformation buildInformation);
    [ExtensionAttribute]
public static IBuildWarning AddBuildWarning(IBuildInformation buildInformation, string message, DateTime timestamp);
    [ExtensionAttribute]
public static IBuildWarning AddBuildWarning(IBuildInformation buildInformation, string file, int lineNumber, int endLineNumber, string code, string message, DateTime timestamp);
    [ExtensionAttribute]
public static IBuildWarning AddBuildWarning(IBuildInformation buildInformation, string file, int lineNumber, int endLineNumber, string code, string message, DateTime timestamp, string warningType);
    [ExtensionAttribute]
public static IBuildWarning AddBuildWarning(IBuildInformation buildInformation, string file, string serverPath, int lineNumber, int endLineNumber, string code, string message, DateTime timestamp, string warningType);
    public static IBuildWarning GetBuildWarning(IBuildInformationNode node);
    public static List`1<IBuildWarning> GetBuildWarnings(IBuildDetail build);
    public static List`1<IBuildWarning> GetBuildWarnings(IBuildInformation buildInformation);
    [ExtensionAttribute]
public static IBuildMessage AddBuildMessage(IBuildInformation buildInformation, string message, BuildMessageImportance importance, DateTime timestamp);
    [ExtensionAttribute]
public static IBuildProjectNode AddBuildProjectNode(IBuildInformation buildInformation, string flavor, string localPath, string platform, string serverPath, DateTime startTime, string targetNames);
    [ExtensionAttribute]
public static IBuildProjectNode AddBuildProjectNode(IBuildInformation buildInformation, DateTime finishTime, string flavor, string localPath, string platform, string serverPath, DateTime startTime, string targetNames);
    public static IBuildProjectNode GetBuildProjectNode(IBuildInformation buildInformation, string localPath, string targets);
    public static List`1<IBuildProjectNode> GetBuildProjectNodes(IBuildDetail build);
    public static List`1<IBuildProjectNode> GetBuildProjectNodes(IBuildInformation buildInformation);
    public static List`1<IBuildProjectNode> GetTopLevelProjects(IBuildDetail build);
    public static List`1<IBuildProjectNode> GetTopLevelProjects(IBuildInformation buildInformation);
    [ExtensionAttribute]
public static IExternalLink AddExternalLink(IBuildInformation buildInformation, string displayText, Uri url);
    private static List`1<IWorkItemSummary> AddWorkItems(IBuildInformation buildInformation, WorkItem[] workItems, string type, bool saveToServer);
    internal static void BulkUpdateInformationNodes(BuildDetail build, List`1<InformationChangeRequest> requests);
    internal static AgentReservationStatus GetAgentReservationStatus(Dictionary`2<string, string> dictionary, string fieldName);
    internal static void SetAgentReservationStatus(Dictionary`2<string, string> dictionary, string fieldName, AgentReservationStatus value);
    internal static bool GetBool(Dictionary`2<string, string> dictionary, string fieldName);
    internal static void SetBool(Dictionary`2<string, string> dictionary, string fieldName, bool value);
    internal static BuildStepStatus GetBuildStepStatus(Dictionary`2<string, string> dictionary, string fieldName);
    internal static void SetBuildStepStatus(Dictionary`2<string, string> dictionary, string fieldName, BuildStepStatus value);
    internal static DateTime GetDateTime(Dictionary`2<string, string> dictionary, string fieldName);
    internal static void SetDateTime(Dictionary`2<string, string> dictionary, string fieldName, DateTime value);
    internal static int GetInt(Dictionary`2<string, string> dictionary, string fieldName);
    internal static void SetInt(Dictionary`2<string, string> dictionary, string fieldName, int value);
    internal static Uri GetUri(Dictionary`2<string, string> dictionary, string fieldName);
    internal static void SetUri(Dictionary`2<string, string> dictionary, string fieldName, Uri value);
    internal static Guid GetGuid(Dictionary`2<string, string> dictionary, string fieldName);
    internal static void SetGuid(Dictionary`2<string, string> dictionary, string fieldName, Guid value);
    internal static T GetEnum(Dictionary`2<string, string> dictionary, string fieldName, T defaultValue);
    internal static void SetEnum(Dictionary`2<string, string> dictionary, string fieldName, T value);
}
public class Microsoft.TeamFoundation.Build.Client.InformationNodeDoesNotExistException : InformationChangeRequestException {
    public InformationNodeDoesNotExistException(string message);
    public InformationNodeDoesNotExistException(string message, Exception ex);
    protected InformationNodeDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.InformationParentNodeDoesNotExistException : InformationChangeRequestException {
    public InformationParentNodeDoesNotExistException(string message);
    public InformationParentNodeDoesNotExistException(string message, Exception ex);
    protected InformationParentNodeDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.InvalidBuildAgentReservationException : AdministrationException {
    public InvalidBuildAgentReservationException(string message);
    public InvalidBuildAgentReservationException(string message, Exception ex);
    protected InvalidBuildAgentReservationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.InvalidBuildGroupItemUpdateException : BuildServerException {
    public InvalidBuildGroupItemUpdateException(string message);
    public InvalidBuildGroupItemUpdateException(string message, Exception ex);
    protected InvalidBuildGroupItemUpdateException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.InvalidBuildRequestException : BuildServerException {
    public InvalidBuildRequestException(string message);
    public InvalidBuildRequestException(string message, Exception ex);
    protected InvalidBuildRequestException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.InvalidBuildUriException : BuildServerException {
    public InvalidBuildUriException(string message);
    public InvalidBuildUriException(string message, Exception ex);
    protected InvalidBuildUriException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.InvalidFinalStatusException : BuildServerException {
    public InvalidFinalStatusException(string buildNumber, BuildStatus invalidStatus, IBuildServer buildServer);
    protected InvalidFinalStatusException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.InvalidGitRepoUriException : BuildServerException {
    public InvalidGitRepoUriException(string message);
    public InvalidGitRepoUriException(string message, Exception ex);
    protected InvalidGitRepoUriException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.InvalidGitUriException : BuildServerException {
    public InvalidGitUriException(string message);
    public InvalidGitUriException(string message, Exception ex);
    protected InvalidGitUriException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.InvalidPlatformFlavorException : BuildServerException {
    public InvalidPlatformFlavorException(string message);
    public InvalidPlatformFlavorException(string message, Exception ex);
    protected InvalidPlatformFlavorException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.InvalidQueueRequestException : AdministrationException {
    public InvalidQueueRequestException(string message);
    public InvalidQueueRequestException(string message, Exception ex);
    protected InvalidQueueRequestException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.InvalidSharedResourceRequestException : AdministrationException {
    public InvalidSharedResourceRequestException(string message);
    public InvalidSharedResourceRequestException(string message, Exception ex);
    protected InvalidSharedResourceRequestException(SerializationInfo info, StreamingContext context);
}
public interface Microsoft.TeamFoundation.Build.Client.IProcessTemplate {
    public int Id { get; }
    public string TeamProject { get; }
    public string ServerPath { get; }
    public ProcessTemplateType TemplateType { get; public set; }
    public string Description { get; public set; }
    public BuildReason SupportedReasons { get; public set; }
    public string Parameters { get; }
    public Version Version { get; }
    public abstract virtual int get_Id();
    public abstract virtual string get_TeamProject();
    public abstract virtual string get_ServerPath();
    public abstract virtual ProcessTemplateType get_TemplateType();
    public abstract virtual void set_TemplateType(ProcessTemplateType value);
    public abstract virtual string get_Description();
    public abstract virtual void set_Description(string value);
    public abstract virtual BuildReason get_SupportedReasons();
    public abstract virtual void set_SupportedReasons(BuildReason value);
    public abstract virtual string get_Parameters();
    public abstract virtual Version get_Version();
    public abstract virtual string Download();
    public abstract virtual string Download(string versionSpec);
    public abstract virtual void Save();
    public abstract virtual void Delete();
    public abstract virtual void CopyFrom(IProcessTemplate source);
}
[ObsoleteAttribute("This interface has been deprecated. Please remove all references.", "True")]
public interface Microsoft.TeamFoundation.Build.Client.IProjectFile {
    public List`1<IConfigurationToBuild> Configurations { get; }
    public List`1<IMetadataFile> MetadataFiles { get; }
    public List`1<ITestContainer> TestContainers { get; }
    public CodeAnalysisRunType RunCodeAnalysis { get; public set; }
    public bool RunTest { get; public set; }
    public List`1<ISolutionToBuild> Solutions { get; }
    public abstract virtual List`1<IConfigurationToBuild> get_Configurations();
    public abstract virtual List`1<IMetadataFile> get_MetadataFiles();
    public abstract virtual List`1<ITestContainer> get_TestContainers();
    public abstract virtual CodeAnalysisRunType get_RunCodeAnalysis();
    public abstract virtual void set_RunCodeAnalysis(CodeAnalysisRunType value);
    public abstract virtual bool get_RunTest();
    public abstract virtual void set_RunTest(bool value);
    public abstract virtual List`1<ISolutionToBuild> get_Solutions();
    public abstract virtual IConfigurationToBuild AddConfigurationToBuild();
    public abstract virtual IMetadataFile AddMetadataFile();
    public abstract virtual ITestContainer AddTestContainer();
    public abstract virtual ISolutionToBuild AddSolutionToBuild();
    public abstract virtual void Save(string serverFolder);
}
public interface Microsoft.TeamFoundation.Build.Client.IQueuedBuild {
    public QueuePriority Priority { get; public set; }
    public Guid BatchId { get; }
    public int Id { get; }
    public string TeamProject { get; }
    public IBuildController BuildController { get; }
    public Uri BuildControllerUri { get; }
    public IBuildDefinition BuildDefinition { get; }
    public Uri BuildDefinitionUri { get; }
    public ReadOnlyCollection`1<IBuildDetail> Builds { get; }
    public IBuildDetail Build { get; }
    public IBuildServer BuildServer { get; }
    public string CustomGetVersion { get; }
    public string DropLocation { get; }
    public GetOption GetOption { get; }
    public DateTime QueueTime { get; }
    public string ProcessParameters { get; }
    public int QueuePosition { get; }
    public BuildReason Reason { get; }
    public string RequestedBy { get; }
    public string RequestedByDisplayName { get; }
    public string RequestedFor { get; }
    public string RequestedForDisplayName { get; }
    public string ShelvesetName { get; }
    public QueueStatus Status { get; }
    public abstract virtual QueuePriority get_Priority();
    public abstract virtual void set_Priority(QueuePriority value);
    public abstract virtual Guid get_BatchId();
    public abstract virtual int get_Id();
    public abstract virtual string get_TeamProject();
    public abstract virtual IBuildController get_BuildController();
    public abstract virtual Uri get_BuildControllerUri();
    public abstract virtual IBuildDefinition get_BuildDefinition();
    public abstract virtual Uri get_BuildDefinitionUri();
    public abstract virtual ReadOnlyCollection`1<IBuildDetail> get_Builds();
    public abstract virtual IBuildDetail get_Build();
    public abstract virtual IBuildServer get_BuildServer();
    public abstract virtual string get_CustomGetVersion();
    public abstract virtual string get_DropLocation();
    public abstract virtual GetOption get_GetOption();
    public abstract virtual DateTime get_QueueTime();
    public abstract virtual string get_ProcessParameters();
    public abstract virtual int get_QueuePosition();
    public abstract virtual BuildReason get_Reason();
    public abstract virtual string get_RequestedBy();
    public abstract virtual string get_RequestedByDisplayName();
    public abstract virtual string get_RequestedFor();
    public abstract virtual string get_RequestedForDisplayName();
    public abstract virtual string get_ShelvesetName();
    public abstract virtual QueueStatus get_Status();
    public abstract virtual void Cancel();
    public abstract virtual void Connect(int pollingInterval, int timeout, ISynchronizeInvoke synchronizingObject);
    public abstract virtual void Connect();
    public abstract virtual bool Copy(IQueuedBuild build, QueryOptions options);
    public abstract virtual void Disconnect();
    public abstract virtual void Postpone();
    public abstract virtual void Refresh(QueryOptions queryOptions);
    public abstract virtual void Resume();
    public abstract virtual void Retry();
    public abstract virtual void Retry(Guid batchId);
    public abstract virtual void Retry(Guid batchId, QueuedBuildRetryOption retryOption);
    public abstract virtual void Save();
    public abstract virtual void StartNow();
    public abstract virtual void Wait();
    public abstract virtual void WaitForBuildStart();
    public abstract virtual bool WaitForBuildStart(int pollingInterval, int timeout);
    public abstract virtual bool WaitForBuildCompletion(TimeSpan pollingInterval, TimeSpan timeout);
    public abstract virtual bool WaitForBuildCompletion(TimeSpan pollingInterval, TimeSpan timeout, ISynchronizeInvoke synchronizingObject);
    [CompilerGeneratedAttribute]
public abstract virtual void add_StatusChanged(StatusChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StatusChanged(StatusChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_PollingCompleted(PollingCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_PollingCompleted(PollingCompletedEventHandler value);
}
public interface Microsoft.TeamFoundation.Build.Client.IQueuedBuildQueryResult {
    public IQueuedBuild[] QueuedBuilds { get; }
    public IFailure[] Failures { get; }
    public abstract virtual IQueuedBuild[] get_QueuedBuilds();
    public abstract virtual IFailure[] get_Failures();
}
public interface Microsoft.TeamFoundation.Build.Client.IQueuedBuildSpec {
    public IBuildControllerSpec ControllerSpec { get; }
    public IBuildDefinitionSpec DefinitionSpec { get; }
    public IList`1<Uri> DefinitionUris { get; }
    public QueryOptions QueryOptions { get; public set; }
    public string RequestedFor { get; public set; }
    public QueueStatus Status { get; public set; }
    public TimeSpan CompletedWindow { get; public set; }
    public abstract virtual IBuildControllerSpec get_ControllerSpec();
    public abstract virtual IBuildDefinitionSpec get_DefinitionSpec();
    public abstract virtual IList`1<Uri> get_DefinitionUris();
    public abstract virtual QueryOptions get_QueryOptions();
    public abstract virtual void set_QueryOptions(QueryOptions value);
    public abstract virtual string get_RequestedFor();
    public abstract virtual void set_RequestedFor(string value);
    public abstract virtual QueueStatus get_Status();
    public abstract virtual void set_Status(QueueStatus value);
    public abstract virtual TimeSpan get_CompletedWindow();
    public abstract virtual void set_CompletedWindow(TimeSpan value);
}
public interface Microsoft.TeamFoundation.Build.Client.IQueuedBuildsView {
    public IBuildControllerSpec ControllerFilter { get; }
    public TimeSpan CompletedWindow { get; public set; }
    public IBuildDefinitionSpec DefinitionFilter { get; }
    public QueryOptions QueryOptions { get; public set; }
    public string RequestedForFilter { get; public set; }
    public QueueStatus StatusFilter { get; public set; }
    public string TeamProjectFilter { get; }
    public IQueuedBuild[] QueuedBuilds { get; }
    public abstract virtual IBuildControllerSpec get_ControllerFilter();
    public abstract virtual TimeSpan get_CompletedWindow();
    public abstract virtual void set_CompletedWindow(TimeSpan value);
    public abstract virtual IBuildDefinitionSpec get_DefinitionFilter();
    public abstract virtual QueryOptions get_QueryOptions();
    public abstract virtual void set_QueryOptions(QueryOptions value);
    public abstract virtual string get_RequestedForFilter();
    public abstract virtual void set_RequestedForFilter(string value);
    public abstract virtual QueueStatus get_StatusFilter();
    public abstract virtual void set_StatusFilter(QueueStatus value);
    public abstract virtual string get_TeamProjectFilter();
    public abstract virtual IQueuedBuild[] get_QueuedBuilds();
    public abstract virtual void Connect(int pollingInterval, ISynchronizeInvoke synchronizingObject);
    public abstract virtual void Connect();
    public abstract virtual void Disconnect();
    public abstract virtual void Refresh(bool useCompletedWindow);
    [CompilerGeneratedAttribute]
public abstract virtual void add_StatusChanging(StatusChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StatusChanging(StatusChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void add_StatusChanged(StatusChangedEventHandler value);
    [CompilerGeneratedAttribute]
public abstract virtual void remove_StatusChanged(StatusChangedEventHandler value);
}
public interface Microsoft.TeamFoundation.Build.Client.IRetentionPolicy {
    public IBuildDefinition BuildDefinition { get; }
    public BuildReason BuildReason { get; public set; }
    public BuildStatus BuildStatus { get; public set; }
    public int NumberToKeep { get; public set; }
    public DeleteOptions DeleteOptions { get; public set; }
    public abstract virtual IBuildDefinition get_BuildDefinition();
    public abstract virtual BuildReason get_BuildReason();
    public abstract virtual void set_BuildReason(BuildReason value);
    public abstract virtual BuildStatus get_BuildStatus();
    public abstract virtual void set_BuildStatus(BuildStatus value);
    public abstract virtual int get_NumberToKeep();
    public abstract virtual void set_NumberToKeep(int value);
    public abstract virtual DeleteOptions get_DeleteOptions();
    public abstract virtual void set_DeleteOptions(DeleteOptions value);
}
public interface Microsoft.TeamFoundation.Build.Client.ISchedule {
    public IBuildDefinition BuildDefinition { get; }
    public ScheduleType Type { get; }
    public int StartTime { get; public set; }
    public ScheduleDays DaysToBuild { get; public set; }
    public TimeZoneInfo TimeZone { get; public set; }
    public abstract virtual IBuildDefinition get_BuildDefinition();
    public abstract virtual ScheduleType get_Type();
    public abstract virtual int get_StartTime();
    public abstract virtual void set_StartTime(int value);
    public abstract virtual ScheduleDays get_DaysToBuild();
    public abstract virtual void set_DaysToBuild(ScheduleDays value);
    public abstract virtual TimeZoneInfo get_TimeZone();
    public abstract virtual void set_TimeZone(TimeZoneInfo value);
}
[ObsoleteAttribute("This interface has been deprecated. Please remove all references.", "True")]
public interface Microsoft.TeamFoundation.Build.Client.ISolutionToBuild {
    public string Properties { get; public set; }
    public string SolutionPath { get; public set; }
    public string Targets { get; public set; }
    public abstract virtual string get_Properties();
    public abstract virtual void set_Properties(string value);
    public abstract virtual string get_SolutionPath();
    public abstract virtual void set_SolutionPath(string value);
    public abstract virtual string get_Targets();
    public abstract virtual void set_Targets(string value);
}
[ObsoleteAttribute("This interface has been deprecated. Please remove all references.", "True")]
public interface Microsoft.TeamFoundation.Build.Client.ITestContainer {
    public string FilePath { get; public set; }
    public abstract virtual string get_FilePath();
    public abstract virtual void set_FilePath(string value);
}
[ObsoleteAttribute("This class has been deprecated. Please remove all references.", "False")]
public interface Microsoft.TeamFoundation.Build.Client.ITestSummary {
    public int Id { get; }
    public string Name { get; public set; }
    public string RunId { get; public set; }
    public bool RunPassed { get; public set; }
    public string RunUser { get; public set; }
    public int TestsFailed { get; public set; }
    public int TestsInconclusive { get; }
    public int TestsPassed { get; public set; }
    public int TestsTotal { get; public set; }
    public IBuildInformationNode Node { get; }
    public abstract virtual int get_Id();
    public abstract virtual string get_Name();
    public abstract virtual void set_Name(string value);
    public abstract virtual string get_RunId();
    public abstract virtual void set_RunId(string value);
    public abstract virtual bool get_RunPassed();
    public abstract virtual void set_RunPassed(bool value);
    public abstract virtual string get_RunUser();
    public abstract virtual void set_RunUser(string value);
    public abstract virtual int get_TestsFailed();
    public abstract virtual void set_TestsFailed(int value);
    public abstract virtual int get_TestsInconclusive();
    public abstract virtual int get_TestsPassed();
    public abstract virtual void set_TestsPassed(int value);
    public abstract virtual int get_TestsTotal();
    public abstract virtual void set_TestsTotal(int value);
    public abstract virtual IBuildInformationNode get_Node();
    public abstract virtual void Save();
}
public interface Microsoft.TeamFoundation.Build.Client.IWorkItemSummary {
    public string AssignedTo { get; public set; }
    public int Id { get; }
    public string Status { get; public set; }
    public string Title { get; public set; }
    public string Type { get; public set; }
    public int WorkItemId { get; public set; }
    public Uri WorkItemUri { get; public set; }
    public IBuildInformationNode Node { get; }
    public abstract virtual string get_AssignedTo();
    public abstract virtual void set_AssignedTo(string value);
    public abstract virtual int get_Id();
    public abstract virtual string get_Status();
    public abstract virtual void set_Status(string value);
    public abstract virtual string get_Title();
    public abstract virtual void set_Title(string value);
    public abstract virtual string get_Type();
    public abstract virtual void set_Type(string value);
    public abstract virtual int get_WorkItemId();
    public abstract virtual void set_WorkItemId(int value);
    public abstract virtual Uri get_WorkItemUri();
    public abstract virtual void set_WorkItemUri(Uri value);
    public abstract virtual IBuildInformationNode get_Node();
    public abstract virtual void Save();
}
public interface Microsoft.TeamFoundation.Build.Client.IWorkspaceMapping {
    public WorkspaceMappingType MappingType { get; public set; }
    public string LocalItem { get; public set; }
    public string ServerItem { get; public set; }
    public WorkspaceMappingDepth Depth { get; public set; }
    public abstract virtual WorkspaceMappingType get_MappingType();
    public abstract virtual void set_MappingType(WorkspaceMappingType value);
    public abstract virtual string get_LocalItem();
    public abstract virtual void set_LocalItem(string value);
    public abstract virtual string get_ServerItem();
    public abstract virtual void set_ServerItem(string value);
    public abstract virtual WorkspaceMappingDepth get_Depth();
    public abstract virtual void set_Depth(WorkspaceMappingDepth value);
}
public interface Microsoft.TeamFoundation.Build.Client.IWorkspaceTemplate {
    public List`1<IWorkspaceMapping> Mappings { get; }
    public DateTime LastModifiedDate { get; }
    public string LastModifiedBy { get; }
    public abstract virtual List`1<IWorkspaceMapping> get_Mappings();
    public abstract virtual DateTime get_LastModifiedDate();
    public abstract virtual string get_LastModifiedBy();
    public abstract virtual IWorkspaceMapping AddMapping();
    public abstract virtual IWorkspaceMapping Cloak(string serverItem);
    public abstract virtual IWorkspaceMapping Map(string serverItem, string localItem);
    public abstract virtual IWorkspaceMapping AddMapping(string serverItem, string localItem, WorkspaceMappingType type);
    public abstract virtual IWorkspaceMapping AddMapping(string serverItem, string localItem, WorkspaceMappingType type, WorkspaceMappingDepth depth);
    public abstract virtual bool RemoveMapping(IWorkspaceMapping mapping);
    public abstract virtual bool RemoveMapping(string serverItem);
    public abstract virtual void CopyFrom(IWorkspaceTemplate source);
}
public class Microsoft.TeamFoundation.Build.Client.MultipleDefaultProcessTemplatesException : AdministrationException {
    public MultipleDefaultProcessTemplatesException(string message);
    public MultipleDefaultProcessTemplatesException(string message, Exception ex);
    protected MultipleDefaultProcessTemplatesException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.MultipleUpgradeProcessTemplatesException : AdministrationException {
    public MultipleUpgradeProcessTemplatesException(string message);
    public MultipleUpgradeProcessTemplatesException(string message, Exception ex);
    protected MultipleUpgradeProcessTemplatesException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Build.Client.NameValueField : object {
    private string m_name;
    private string m_value;
    internal string Name { get; internal set; }
    internal string Value { get; internal set; }
    internal string get_Name();
    internal void set_Name(string value);
    internal string get_Value();
    internal void set_Value(string value);
    internal static NameValueField FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, NameValueField obj);
}
[DefaultMemberAttribute("Item")]
internal class Microsoft.TeamFoundation.Build.Client.ObservableDictionary`2 : object {
    [CompilerGeneratedAttribute]
private EventHandler`1<DictionaryChangedEventArgs`2<TKey, TValue>> DictionaryChanged;
    private IDictionary`2<TKey, TValue> Dictionary;
    public int Count { get; }
    public bool IsReadOnly { get; }
    public TValue Item { get; public set; }
    public ICollection`1<TKey> Keys { get; }
    public ICollection`1<TValue> Values { get; }
    [CompilerGeneratedAttribute]
public void add_DictionaryChanged(EventHandler`1<DictionaryChangedEventArgs`2<TKey, TValue>> value);
    [CompilerGeneratedAttribute]
public void remove_DictionaryChanged(EventHandler`1<DictionaryChangedEventArgs`2<TKey, TValue>> value);
    public sealed virtual IEnumerator`1<KeyValuePair`2<TKey, TValue>> GetEnumerator();
    private sealed virtual override IEnumerator System.Collections.IEnumerable.GetEnumerator();
    public sealed virtual void Add(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void Clear();
    public sealed virtual bool Contains(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual void CopyTo(KeyValuePair`2[] array, int arrayIndex);
    public sealed virtual bool Remove(KeyValuePair`2<TKey, TValue> item);
    public sealed virtual int get_Count();
    public sealed virtual bool get_IsReadOnly();
    public sealed virtual bool ContainsKey(TKey key);
    public sealed virtual void Add(TKey key, TValue value);
    public sealed virtual bool Remove(TKey key);
    public sealed virtual bool TryGetValue(TKey key, TValue& value);
    public sealed virtual TValue get_Item(TKey key);
    public sealed virtual void set_Item(TKey key, TValue value);
    public sealed virtual ICollection`1<TKey> get_Keys();
    public sealed virtual ICollection`1<TValue> get_Values();
}
internal static class Microsoft.TeamFoundation.Build.Client.OMStrings : object {
    private static ResourceManager s_resMgr;
    public static string BuildAgentFailureException;
    public static string BuildAgentNotFoundException;
    public static string BuildAgentNotFoundForUriException;
    public static string BuildAgentNotReadyToSave;
    public static string BuildAgentNotRecognizedException;
    public static string BuildAgentNotUniqueException;
    public static string BuildAgentSpecNotUniqueException;
    public static string BuildControllerNotFoundException;
    public static string BuildControllerNotFoundForUriException;
    public static string BuildControllerNotReadyToSave;
    public static string BuildControllerSpecNotUniqueException;
    public static string BuildDefinitionFailureException;
    public static string BuildDefinitionNotFoundException;
    public static string BuildDefinitionNotFoundForUriException;
    public static string BuildDefinitionSpecNotUniqueException;
    public static string BuildFailedException;
    public static string BuildFailureException;
    public static string BuildNotFinishedException;
    public static string BuildNotFoundException;
    public static string BuildNotFoundForUriException;
    public static string BuildServerInterfaceNotSupported;
    public static string BuildServiceHostNotFoundException;
    public static string BuildServiceHostNotFoundForUriException;
    public static string BuildServiceHostSpecNotUniqueException;
    public static string BuildSpecNotUniqueException;
    public static string BuildStoppedException;
    public static string ConfigurationFolderPathNotFoundException;
    public static string CopyDirectoryException;
    public static string CheckInDirectoryException;
    public static string CustomAssemblyPathNotFoundException;
    public static string CustomAssemblyPathNotFoundExceptionWithDetails;
    public static string CustomBuildServiceException;
    public static string DeleteBuildFailedException;
    public static string DeleteOptionsNotSupported;
    public static string FlagsEnumSeparator;
    public static string IBuildDetailPropertyNotSupported;
    public static string MethodNotSupported;
    public static string InvalidFinalStatusException;
    public static string InvalidQueueIdException;
    public static string MultiplePlaceHolder;
    public static string PlatformFlavorNameFormat;
    public static string PollingError;
    public static string ProjectFileCreationException;
    public static string ProjectFileTemplateNotFoundException;
    public static string ResponseFileCreationException;
    public static string RetentionPolicyNotSupported;
    public static string ScheduleLimitExceeded;
    public static string StopBuildFailedException;
    public static string ExtensionNotFound;
    public static string NotCorrectSubclass;
    public static string CannotCreateWorkspace;
    public static string CannotDeleteWorkspace;
    public static string CustomXmlDownloadProblem;
    public static string XMLFileStructure;
    public static string NoRootElement;
    public static string NoAssemblyFileName;
    public static string NoActivityFullName;
    public static string NoExtensionFullName;
    public static string AssemblyHasBeenProcessedAlready;
    public static string WrongHostOptions;
    public static string Summary;
    public static string MSBuildLogFileLink;
    public static string FirewallException;
    public static string FailedToUpdateBuildServiceHostUri;
    public static string BuildServiceHostConfigurationSaved;
    public static string BuildServiceHostConfigurationDeleted;
    public static string ErrorSavingBuildServiceHostConfiguration;
    public static string ErrorDeletingBuildServiceHostConfiguration;
    public static string ReservedUrlPrefix;
    public static string ErrorReservingUrlPrefix;
    public static string GrantedRegistryRights;
    public static string ErrorGrantingRegistryRights;
    public static string ErrorAddingServiceUserToGroup;
    public static string AddedIdentity;
    public static string FailedGrantingRightsLogonAsService;
    public static string GrantedRightsLogonAsService;
    public static string SuccessfullyAddedPortExceptionFor;
    public static string FailedAddingPortExceptionFor;
    public static string SuccessfullyDeletedPortExceptionFor;
    public static string FailedDeletingPortExceptionFor;
    public static string BuildServiceHostCreationFailed;
    public static string BuildServiceHostHasBeenDeleted;
    public static string BuildServiceHostDeletionFailed;
    public static string ServiceHostRegisteredSuccessfully;
    public static string ServiceHostUnregisteredSuccessfully;
    public static string BuildServiceHostIsNotRegistered;
    public static string IdentityNotFound;
    public static string CannotFreeUrlPrefix;
    public static string UrlPrefixFreed;
    public static string TFSUnavailable;
    public static string FirewallExceptionAdding_ErrorServiceNotRunning;
    public static string FirewallExceptionDeleting_ErrorServiceNotRunning;
    public static string GroupNotFound;
    public static string InnerException;
    public static string CommunicationFailed;
    public static string CannotAddToGroup;
    public static string DoesNotHavePermissions;
    public static string CouldNotFindGroup;
    public static string InvalidOperationMustCallConnect;
    public static string InvalidArgument;
    public static string FailedToDownloadFile;
    public static string GitBranchNotFound;
    public static string GitRepositoryNotFound;
    public static ResourceManager Manager { get; }
    private static OMStrings();
    public static ResourceManager get_Manager();
    public static string Get(string resourceName);
    public static string Get(string resourceName, CultureInfo culture);
    public static int GetInt(string resourceName);
    public static int GetInt(string resourceName, CultureInfo culture);
    public static bool GetBool(string resourceName);
    public static bool GetBool(string resourceName, CultureInfo culture);
    public static string Format(string resourceName, Object[] args);
    public static string Format(string resourceName, CultureInfo culture, Object[] args);
}
internal abstract class Microsoft.TeamFoundation.Build.Client.PollingAlgorithm : object {
    private int m_timeout;
    private int m_interval;
    private bool m_continue;
    private bool m_firstTime;
    private bool m_stopped;
    private Timer m_timer;
    private Timer m_timeoutTimer;
    private object m_stopLock;
    private ManualResetEvent m_pollingEvent;
    private ISynchronizeInvoke m_synchronizingObject;
    public bool InvokeRequired { get; }
    public PollingAlgorithm(int interval, ISynchronizeInvoke synchronizingObject);
    public PollingAlgorithm(int interval, ISynchronizeInvoke synchronizingObject, int timeout);
    public static void Invoke(PollingAlgorithm polling, MethodInvoker anonymousDelegate);
    public void Invoke(MethodInvoker anonymousDelegate);
    public bool get_InvokeRequired();
    public abstract virtual void Refresh();
    public virtual bool ShouldPollingContinue();
    public void Start();
    public void Stop();
    public void Wait();
    public virtual void Dispose();
    private void m_timer_Elapsed(object sender, ElapsedEventArgs args);
    private void m_timeoutTimer_Elapsed(object sender, ElapsedEventArgs args);
}
public class Microsoft.TeamFoundation.Build.Client.PollingCompletedEventArgs : EventArgs {
    private Exception m_pollingCompletedException;
    public bool PollingCompletedNormally { get; }
    public Exception PollingCompletedException { get; }
    public PollingCompletedEventArgs(Exception ex);
    public bool get_PollingCompletedNormally();
    public Exception get_PollingCompletedException();
}
public class Microsoft.TeamFoundation.Build.Client.PollingCompletedEventHandler : MulticastDelegate {
    public PollingCompletedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, PollingCompletedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, PollingCompletedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
internal class Microsoft.TeamFoundation.Build.Client.ProcessTemplate : object {
    private Version m_versionInfo;
    private BuildServer m_buildServer;
    private string m_description;
    private bool m_fileExists;
    private int m_id;
    private string m_parameters;
    private string m_serverPath;
    private BuildReason m_supportedReasons;
    private string m_teamProject;
    private ProcessTemplateType m_templateType;
    private string m_version;
    internal bool FileExists { get; }
    public int Id { get; internal set; }
    public string Parameters { get; internal set; }
    public Version Version { get; }
    public IBuildServer BuildServer { get; private set; }
    public string Description { get; public set; }
    public string ServerPath { get; }
    public BuildReason SupportedReasons { get; public set; }
    public string TeamProject { get; }
    public ProcessTemplateType TemplateType { get; public set; }
    internal ProcessTemplate(BuildServer buildServer, string teamProject, string serverPath);
    internal ProcessTemplate(ProcessTemplate2010 template2010);
    internal bool get_FileExists();
    public sealed virtual int get_Id();
    internal void set_Id(int value);
    public sealed virtual string get_Parameters();
    internal void set_Parameters(string value);
    public sealed virtual Version get_Version();
    public IBuildServer get_BuildServer();
    private void set_BuildServer(IBuildServer value);
    public sealed virtual string Download();
    public sealed virtual string Download(string sourceGetVersion);
    public sealed virtual void Save();
    public sealed virtual void Delete();
    public sealed virtual void CopyFrom(IProcessTemplate processTemplate);
    internal void PrepareToSave();
    public sealed virtual string get_Description();
    public sealed virtual void set_Description(string value);
    public sealed virtual string get_ServerPath();
    public sealed virtual BuildReason get_SupportedReasons();
    public sealed virtual void set_SupportedReasons(BuildReason value);
    public sealed virtual string get_TeamProject();
    public sealed virtual ProcessTemplateType get_TemplateType();
    public sealed virtual void set_TemplateType(ProcessTemplateType value);
    internal static ProcessTemplate FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, ProcessTemplate obj);
}
internal class Microsoft.TeamFoundation.Build.Client.ProcessTemplate2010 : object {
    [CompilerGeneratedAttribute]
private BuildServer <BuildServer>k__BackingField;
    private string m_description;
    private bool m_fileExists;
    private int m_id;
    private string m_parameters;
    private string m_serverPath;
    private BuildReason2010 m_supportedReasons;
    private string m_teamProject;
    private ProcessTemplateType2010 m_templateType;
    internal BuildServer BuildServer { get; internal set; }
    public string Description { get; public set; }
    public bool FileExists { get; public set; }
    public int Id { get; public set; }
    public string Parameters { get; public set; }
    public string ServerPath { get; public set; }
    public BuildReason2010 SupportedReasons { get; public set; }
    public string TeamProject { get; public set; }
    public ProcessTemplateType2010 TemplateType { get; public set; }
    public ProcessTemplate2010(ProcessTemplate template);
    [CompilerGeneratedAttribute]
internal BuildServer get_BuildServer();
    [CompilerGeneratedAttribute]
internal void set_BuildServer(BuildServer value);
    public string get_Description();
    public void set_Description(string value);
    public bool get_FileExists();
    public void set_FileExists(bool value);
    public int get_Id();
    public void set_Id(int value);
    public string get_Parameters();
    public void set_Parameters(string value);
    public string get_ServerPath();
    public void set_ServerPath(string value);
    public BuildReason2010 get_SupportedReasons();
    public void set_SupportedReasons(BuildReason2010 value);
    public string get_TeamProject();
    public void set_TeamProject(string value);
    public ProcessTemplateType2010 get_TemplateType();
    public void set_TemplateType(ProcessTemplateType2010 value);
    internal static ProcessTemplate2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, ProcessTemplate2010 obj);
}
public class Microsoft.TeamFoundation.Build.Client.ProcessTemplateDeletedException : BuildServerException {
    public ProcessTemplateDeletedException(string message);
    public ProcessTemplateDeletedException(string message, Exception ex);
    protected ProcessTemplateDeletedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.ProcessTemplateNotFoundException : AdministrationException {
    public ProcessTemplateNotFoundException(string message);
    public ProcessTemplateNotFoundException(string message, Exception ex);
    protected ProcessTemplateNotFoundException(SerializationInfo info, StreamingContext context);
}
public enum Microsoft.TeamFoundation.Build.Client.ProcessTemplateType : Enum {
    public int value__;
    public static ProcessTemplateType Custom;
    public static ProcessTemplateType Default;
    public static ProcessTemplateType Upgrade;
}
internal enum Microsoft.TeamFoundation.Build.Client.ProcessTemplateType2010 : Enum {
    public int value__;
    public static ProcessTemplateType2010 Custom;
    public static ProcessTemplateType2010 Default;
    public static ProcessTemplateType2010 Upgrade;
}
public class Microsoft.TeamFoundation.Build.Client.ProjectFileCreationException : BuildServerException {
    public ProjectFileCreationException(string fileName, Exception innerException);
    protected ProjectFileCreationException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.ProjectFileTemplateNotFoundException : BuildServerException {
    public ProjectFileTemplateNotFoundException(string fileName);
    protected ProjectFileTemplateNotFoundException(SerializationInfo info, StreamingContext context);
}
public enum Microsoft.TeamFoundation.Build.Client.QueryDeletedOption : Enum {
    public int value__;
    public static QueryDeletedOption ExcludeDeleted;
    public static QueryDeletedOption IncludeDeleted;
    public static QueryDeletedOption OnlyDeleted;
}
internal enum Microsoft.TeamFoundation.Build.Client.QueryDeletedOption2010 : Enum {
    public int value__;
    public static QueryDeletedOption2010 ExcludeDeleted;
    public static QueryDeletedOption2010 IncludeDeleted;
    public static QueryDeletedOption2010 OnlyDeleted;
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Build.Client.QueryOptions : Enum {
    public int value__;
    public static QueryOptions Agents;
    public static QueryOptions All;
    public static QueryOptions BatchedRequests;
    public static QueryOptions Controllers;
    public static QueryOptions Definitions;
    public static QueryOptions HistoricalBuilds;
    public static QueryOptions None;
    public static QueryOptions Process;
    public static QueryOptions Workspaces;
}
[FlagsAttribute]
internal enum Microsoft.TeamFoundation.Build.Client.QueryOptions2010 : Enum {
    public int value__;
    public static QueryOptions2010 Agents;
    public static QueryOptions2010 All;
    public static QueryOptions2010 Controllers;
    public static QueryOptions2010 Definitions;
    public static QueryOptions2010 None;
    public static QueryOptions2010 Process;
    public static QueryOptions2010 Workspaces;
}
internal static class Microsoft.TeamFoundation.Build.Client.QueryResultHelper : object {
    internal static Dictionary`2<Uri, BuildController> Match(IList`1<BuildServiceHost> serviceHosts, IList`1<BuildController> controllers, IList`1<BuildAgent> agents);
}
internal class Microsoft.TeamFoundation.Build.Client.QueuedBuild : object {
    private Guid m_batchId;
    private Uri m_buildControllerUri;
    private Uri m_buildDefinitionUri;
    internal Uri[] m_buildUris;
    private string m_customGetVersion;
    private string m_dropLocation;
    private GetOption m_getOption;
    private int m_id;
    private QueuePriority m_priority;
    private string m_processParameters;
    private int m_queuePosition;
    private DateTime m_queueTime;
    private BuildReason m_reason;
    private string m_requestedBy;
    private string m_requestedByDisplayName;
    private string m_requestedFor;
    private string m_requestedForDisplayName;
    private string m_shelvesetName;
    private QueueStatus m_status;
    private string m_teamProject;
    [CompilerGeneratedAttribute]
private StatusChangedEventHandler StatusChanged;
    [CompilerGeneratedAttribute]
private PollingCompletedEventHandler PollingCompleted;
    private IBuildController m_buildController;
    private IBuildDefinition m_buildDefinition;
    private BuildServer m_buildServer;
    private QueuedBuildUpdateOptions m_lastSnapshot;
    private bool m_postponed;
    private bool m_retry;
    private QueuedBuildRetryOption m_retryOption;
    private Polling m_polling;
    private Exception m_pollingException;
    private BuildDetail m_build;
    private List`1<IBuildDetail> m_allBuilds;
    public Guid BatchId { get; }
    public Uri BuildControllerUri { get; internal set; }
    public Uri BuildDefinitionUri { get; internal set; }
    public string CustomGetVersion { get; }
    public string DropLocation { get; }
    public GetOption GetOption { get; }
    public int Id { get; }
    public QueuePriority Priority { get; public set; }
    public string ProcessParameters { get; }
    public int QueuePosition { get; internal set; }
    public DateTime QueueTime { get; }
    public BuildReason Reason { get; internal set; }
    public string RequestedBy { get; }
    public string RequestedByDisplayName { get; }
    public string RequestedFor { get; }
    public string RequestedForDisplayName { get; }
    public string ShelvesetName { get; }
    public QueueStatus Status { get; internal set; }
    public string TeamProject { get; }
    private ReadOnlyCollection`1<IBuildDetail> Microsoft.TeamFoundation.Build.Client.IQueuedBuild.Builds { get; }
    internal List`1<IBuildDetail> AllBuilds { get; }
    public IBuildDetail Build { get; }
    public IBuildController BuildController { get; internal set; }
    public IBuildDefinition BuildDefinition { get; internal set; }
    public IBuildServer BuildServer { get; public set; }
    private bool BuildCompleted { get; }
    private bool BuildStarted { get; }
    internal QueuedBuild(BuildServer server, Uri buildUri, IBuildRequest request);
    internal QueuedBuild(QueuedBuild2010 build2010);
    internal QueuedBuild(QueuedBuild2008 build2008);
    internal QueuedBuild(BuildDetail build);
    public sealed virtual Guid get_BatchId();
    public sealed virtual Uri get_BuildControllerUri();
    internal void set_BuildControllerUri(Uri value);
    public sealed virtual Uri get_BuildDefinitionUri();
    internal void set_BuildDefinitionUri(Uri value);
    public sealed virtual string get_CustomGetVersion();
    public sealed virtual string get_DropLocation();
    public sealed virtual GetOption get_GetOption();
    public sealed virtual int get_Id();
    public sealed virtual QueuePriority get_Priority();
    public sealed virtual void set_Priority(QueuePriority value);
    public sealed virtual string get_ProcessParameters();
    public sealed virtual int get_QueuePosition();
    internal void set_QueuePosition(int value);
    public sealed virtual DateTime get_QueueTime();
    public sealed virtual BuildReason get_Reason();
    internal void set_Reason(BuildReason value);
    public sealed virtual string get_RequestedBy();
    public sealed virtual string get_RequestedByDisplayName();
    public sealed virtual string get_RequestedFor();
    public sealed virtual string get_RequestedForDisplayName();
    public sealed virtual string get_ShelvesetName();
    public sealed virtual QueueStatus get_Status();
    internal void set_Status(QueueStatus value);
    public sealed virtual string get_TeamProject();
    internal static QueuedBuild FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, QueuedBuild obj);
    internal void AfterDeserialize();
    private sealed virtual override ReadOnlyCollection`1<IBuildDetail> Microsoft.TeamFoundation.Build.Client.IQueuedBuild.get_Builds();
    internal List`1<IBuildDetail> get_AllBuilds();
    public sealed virtual IBuildDetail get_Build();
    public sealed virtual IBuildController get_BuildController();
    internal void set_BuildController(IBuildController value);
    public sealed virtual IBuildDefinition get_BuildDefinition();
    internal void set_BuildDefinition(IBuildDefinition value);
    public sealed virtual IBuildServer get_BuildServer();
    public void set_BuildServer(IBuildServer value);
    public sealed virtual void Cancel();
    public sealed virtual void Postpone();
    public sealed virtual void Refresh(QueryOptions queryOptions);
    public sealed virtual void Resume();
    public sealed virtual void Retry();
    public sealed virtual void Retry(Guid batchId);
    public sealed virtual void Retry(Guid batchId, QueuedBuildRetryOption retryOption);
    public sealed virtual void Save();
    public sealed virtual void WaitForBuildStart();
    public sealed virtual bool WaitForBuildStart(int pollingInterval, int timeout);
    public sealed virtual void Wait();
    public sealed virtual bool WaitForBuildCompletion(TimeSpan pollingInterval, TimeSpan timeout);
    public sealed virtual bool WaitForBuildCompletion(TimeSpan pollingInterval, TimeSpan timeout, ISynchronizeInvoke synchronizingObject);
    public sealed virtual void Connect(int pollingInterval, int timeout, ISynchronizeInvoke synchronizingObject);
    public sealed virtual void Connect();
    public sealed virtual void Disconnect();
    public sealed virtual void StartNow();
    private bool ExceptionStopsPolling(Exception e);
    internal void PollingRefresh(Polling polling);
    private void UpdateInternal(Polling polling, Exception pollingException);
    internal bool ShouldPollingContinue(Polling polling);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StatusChanged(StatusChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StatusChanged(StatusChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_PollingCompleted(PollingCompletedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_PollingCompleted(PollingCompletedEventHandler value);
    private void OnStatusChanged(StatusChangedEventArgs e);
    private void OnPollingCompleted(PollingCompletedEventArgs e);
    private bool get_BuildCompleted();
    private bool get_BuildStarted();
    internal QueuedBuildUpdateOptions GetUpdateOptions();
    internal void SetUpdateOptions(QueuedBuildUpdateOptions snapshot);
    public sealed virtual bool Copy(IQueuedBuild build, QueryOptions queryOptions);
    private QueuedBuildUpdateOptions GetSnapshot();
    private QueuedBuildUpdate CompareSnapshots(QueuedBuildUpdateOptions originalValues, QueuedBuildUpdateOptions modifiedValues);
    public sealed virtual int CompareTo(QueuedBuild build);
    public sealed virtual int CompareTo(IQueuedBuild build);
    [CompilerGeneratedAttribute]
private void <ShouldPollingContinue>b__111_0();
}
internal class Microsoft.TeamFoundation.Build.Client.QueuedBuild2008 : object {
    [CompilerGeneratedAttribute]
private BuildServer <BuildServer>k__BackingField;
    private BuildDetail2010 m_build;
    private Uri m_buildAgentUri;
    private Uri m_buildDefinitionUri;
    private string m_commandLineArguments;
    private string m_customGetVersion;
    private string m_dropLocation;
    private GetOption2010 m_getOption;
    private int m_id;
    private QueuePriority2010 m_priority;
    private int m_queuePosition;
    private DateTime m_queueTime;
    private string m_requestedBy;
    private string m_requestedFor;
    private QueueStatus2010 m_status;
    internal BuildServer BuildServer { get; internal set; }
    public BuildDetail2010 Build { get; public set; }
    public Uri BuildAgentUri { get; public set; }
    public Uri BuildDefinitionUri { get; public set; }
    public string CommandLineArguments { get; public set; }
    public string CustomGetVersion { get; public set; }
    public string DropLocation { get; public set; }
    public GetOption2010 GetOption { get; public set; }
    public int Id { get; public set; }
    public QueuePriority2010 Priority { get; public set; }
    public int QueuePosition { get; public set; }
    public DateTime QueueTime { get; public set; }
    public string RequestedBy { get; public set; }
    public string RequestedFor { get; public set; }
    public QueueStatus2010 Status { get; public set; }
    [CompilerGeneratedAttribute]
internal BuildServer get_BuildServer();
    [CompilerGeneratedAttribute]
internal void set_BuildServer(BuildServer value);
    public BuildDetail2010 get_Build();
    public void set_Build(BuildDetail2010 value);
    public Uri get_BuildAgentUri();
    public void set_BuildAgentUri(Uri value);
    public Uri get_BuildDefinitionUri();
    public void set_BuildDefinitionUri(Uri value);
    public string get_CommandLineArguments();
    public void set_CommandLineArguments(string value);
    public string get_CustomGetVersion();
    public void set_CustomGetVersion(string value);
    public string get_DropLocation();
    public void set_DropLocation(string value);
    public GetOption2010 get_GetOption();
    public void set_GetOption(GetOption2010 value);
    public int get_Id();
    public void set_Id(int value);
    public QueuePriority2010 get_Priority();
    public void set_Priority(QueuePriority2010 value);
    public int get_QueuePosition();
    public void set_QueuePosition(int value);
    public DateTime get_QueueTime();
    public void set_QueueTime(DateTime value);
    public string get_RequestedBy();
    public void set_RequestedBy(string value);
    public string get_RequestedFor();
    public void set_RequestedFor(string value);
    public QueueStatus2010 get_Status();
    public void set_Status(QueueStatus2010 value);
    internal static QueuedBuild2008 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, QueuedBuild2008 obj);
}
internal class Microsoft.TeamFoundation.Build.Client.QueuedBuild2010 : object {
    [CompilerGeneratedAttribute]
private BuildServer <BuildServer>k__BackingField;
    private BuildDetail2010 m_build;
    private Uri m_buildControllerUri;
    private Uri m_buildDefinitionUri;
    private string m_customGetVersion;
    private string m_dropLocation;
    private GetOption2010 m_getOption;
    private int m_id;
    private QueuePriority2010 m_priority;
    private string m_processParameters;
    private int m_queuePosition;
    private DateTime m_queueTime;
    private BuildReason2010 m_reason;
    private string m_requestedBy;
    private string m_requestedFor;
    private string m_shelvesetName;
    private QueueStatus2010 m_status;
    private string m_teamProject;
    internal BuildServer BuildServer { get; internal set; }
    public BuildDetail2010 Build { get; public set; }
    public Uri BuildControllerUri { get; public set; }
    public Uri BuildDefinitionUri { get; public set; }
    public string CustomGetVersion { get; public set; }
    public string DropLocation { get; public set; }
    public GetOption2010 GetOption { get; public set; }
    public int Id { get; public set; }
    public QueuePriority2010 Priority { get; public set; }
    public string ProcessParameters { get; public set; }
    public int QueuePosition { get; public set; }
    public DateTime QueueTime { get; public set; }
    public BuildReason2010 Reason { get; public set; }
    public string RequestedBy { get; public set; }
    public string RequestedFor { get; public set; }
    public string ShelvesetName { get; public set; }
    public QueueStatus2010 Status { get; public set; }
    public string TeamProject { get; }
    [CompilerGeneratedAttribute]
internal BuildServer get_BuildServer();
    [CompilerGeneratedAttribute]
internal void set_BuildServer(BuildServer value);
    public BuildDetail2010 get_Build();
    public void set_Build(BuildDetail2010 value);
    public Uri get_BuildControllerUri();
    public void set_BuildControllerUri(Uri value);
    public Uri get_BuildDefinitionUri();
    public void set_BuildDefinitionUri(Uri value);
    public string get_CustomGetVersion();
    public void set_CustomGetVersion(string value);
    public string get_DropLocation();
    public void set_DropLocation(string value);
    public GetOption2010 get_GetOption();
    public void set_GetOption(GetOption2010 value);
    public int get_Id();
    public void set_Id(int value);
    public QueuePriority2010 get_Priority();
    public void set_Priority(QueuePriority2010 value);
    public string get_ProcessParameters();
    public void set_ProcessParameters(string value);
    public int get_QueuePosition();
    public void set_QueuePosition(int value);
    public DateTime get_QueueTime();
    public void set_QueueTime(DateTime value);
    public BuildReason2010 get_Reason();
    public void set_Reason(BuildReason2010 value);
    public string get_RequestedBy();
    public void set_RequestedBy(string value);
    public string get_RequestedFor();
    public void set_RequestedFor(string value);
    public string get_ShelvesetName();
    public void set_ShelvesetName(string value);
    public QueueStatus2010 get_Status();
    public void set_Status(QueueStatus2010 value);
    public string get_TeamProject();
    internal static QueuedBuild2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, QueuedBuild2010 obj);
}
public class Microsoft.TeamFoundation.Build.Client.QueuedBuildDoesNotExistException : AdministrationException {
    public QueuedBuildDoesNotExistException(string message);
    public QueuedBuildDoesNotExistException(string message, Exception ex);
    protected QueuedBuildDoesNotExistException(SerializationInfo info, StreamingContext context);
}
public enum Microsoft.TeamFoundation.Build.Client.QueuedBuildRetryOption : Enum {
    public int value__;
    public static QueuedBuildRetryOption CompletedBuild;
    public static QueuedBuildRetryOption InProgressBuild;
    public static QueuedBuildRetryOption None;
}
internal class Microsoft.TeamFoundation.Build.Client.QueuedBuildsView : object {
    [CompilerGeneratedAttribute]
private StatusChangedEventHandler StatusChanging;
    [CompilerGeneratedAttribute]
private StatusChangedEventHandler StatusChanged;
    private BuildServer m_server;
    private DateTime m_lastRefresh;
    private string m_teamProject;
    private List`1<IQueuedBuild> m_queuedBuilds;
    private Dictionary`2<int, IQueuedBuild> m_queuedBuildDict;
    private TimeSpan m_completedWindow;
    private Polling m_polling;
    private object m_queueLock;
    private IQueuedBuildSpec m_keySpec;
    private List`1<IQueuedBuildSpec> m_queueSpecs;
    public TimeSpan CompletedWindow { get; public set; }
    public IBuildControllerSpec ControllerFilter { get; }
    public IBuildDefinitionSpec DefinitionFilter { get; }
    public QueryOptions QueryOptions { get; public set; }
    public string RequestedForFilter { get; public set; }
    public QueueStatus StatusFilter { get; public set; }
    public string TeamProjectFilter { get; }
    public IQueuedBuild[] QueuedBuilds { get; }
    private QueuedBuildsView(BuildServer server);
    internal QueuedBuildsView(BuildServer server, string teamProject);
    internal QueuedBuildsView(BuildServer server, IEnumerable`1<Uri> definitionUris);
    public sealed virtual TimeSpan get_CompletedWindow();
    public sealed virtual void set_CompletedWindow(TimeSpan value);
    public sealed virtual IBuildControllerSpec get_ControllerFilter();
    public sealed virtual IBuildDefinitionSpec get_DefinitionFilter();
    public sealed virtual QueryOptions get_QueryOptions();
    public sealed virtual void set_QueryOptions(QueryOptions value);
    public sealed virtual string get_RequestedForFilter();
    public sealed virtual void set_RequestedForFilter(string value);
    public sealed virtual QueueStatus get_StatusFilter();
    public sealed virtual void set_StatusFilter(QueueStatus value);
    public sealed virtual string get_TeamProjectFilter();
    public sealed virtual IQueuedBuild[] get_QueuedBuilds();
    public sealed virtual void Connect();
    public sealed virtual void Connect(int pollingInterval, ISynchronizeInvoke synchronizingObject);
    public sealed virtual void Disconnect();
    public sealed virtual void Refresh(bool useCompletedWindow);
    private void RefreshInternal(PollingAlgorithm polling);
    private IList`1<IQueuedBuild> GetBuilds();
    private void UpdateInternal(PollingAlgorithm polling, IEnumerable`1<IQueuedBuild> builds, Exception pollingException);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StatusChanging(StatusChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StatusChanging(StatusChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void add_StatusChanged(StatusChangedEventHandler value);
    [CompilerGeneratedAttribute]
public sealed virtual void remove_StatusChanged(StatusChangedEventHandler value);
    private void OnBeforeStatusChanged(StatusChangedEventArgs e);
    private void OnAfterStatusChanged(StatusChangedEventArgs e);
    private bool UpdateQueue(IEnumerable`1<IQueuedBuild> queuedBuilds);
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Build.Client.QueuedBuildUpdate : Enum {
    public int value__;
    public static QueuedBuildUpdate BatchId;
    public static QueuedBuildUpdate None;
    public static QueuedBuildUpdate Postponed;
    public static QueuedBuildUpdate Priority;
    public static QueuedBuildUpdate Requeue;
    public static QueuedBuildUpdate Retry;
}
[FlagsAttribute]
internal enum Microsoft.TeamFoundation.Build.Client.QueuedBuildUpdate2010 : Enum {
    public int value__;
    public static QueuedBuildUpdate2010 None;
    public static QueuedBuildUpdate2010 Postponed;
    public static QueuedBuildUpdate2010 Priority;
}
public class Microsoft.TeamFoundation.Build.Client.QueuedBuildUpdateException : AdministrationException {
    public QueuedBuildUpdateException(string message);
    public QueuedBuildUpdateException(string message, Exception ex);
    protected QueuedBuildUpdateException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Build.Client.QueuedBuildUpdateOptions : object {
    private Guid m_batchId;
    private QueuedBuildUpdate m_fields;
    private bool m_postponed;
    private QueuePriority m_priority;
    private int m_queueId;
    private bool m_retry;
    private QueuedBuildRetryOption m_retryOption;
    public Guid BatchId { get; public set; }
    public QueuedBuildUpdate Fields { get; public set; }
    public bool Postponed { get; public set; }
    public QueuePriority Priority { get; public set; }
    public int QueueId { get; public set; }
    public bool Retry { get; public set; }
    public QueuedBuildRetryOption RetryOption { get; public set; }
    public Guid get_BatchId();
    public void set_BatchId(Guid value);
    public QueuedBuildUpdate get_Fields();
    public void set_Fields(QueuedBuildUpdate value);
    public bool get_Postponed();
    public void set_Postponed(bool value);
    public QueuePriority get_Priority();
    public void set_Priority(QueuePriority value);
    public int get_QueueId();
    public void set_QueueId(int value);
    public bool get_Retry();
    public void set_Retry(bool value);
    public QueuedBuildRetryOption get_RetryOption();
    public void set_RetryOption(QueuedBuildRetryOption value);
    internal static QueuedBuildUpdateOptions FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, QueuedBuildUpdateOptions obj);
}
internal class Microsoft.TeamFoundation.Build.Client.QueuedBuildUpdateOptions2010 : object {
    private QueuedBuildUpdate2010 m_fields;
    private bool m_postponed;
    private QueuePriority2010 m_priority;
    private int m_queueId;
    public QueuedBuildUpdate2010 Fields { get; public set; }
    public bool Postponed { get; public set; }
    public QueuePriority2010 Priority { get; public set; }
    public int QueueId { get; public set; }
    internal QueuedBuildUpdateOptions2010(QueuedBuildUpdateOptions updateOptions);
    public QueuedBuildUpdate2010 get_Fields();
    public void set_Fields(QueuedBuildUpdate2010 value);
    public bool get_Postponed();
    public void set_Postponed(bool value);
    public QueuePriority2010 get_Priority();
    public void set_Priority(QueuePriority2010 value);
    public int get_QueueId();
    public void set_QueueId(int value);
    internal static QueuedBuildUpdateOptions2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, QueuedBuildUpdateOptions2010 obj);
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Build.Client.QueueOptions : Enum {
    public int value__;
    public static QueueOptions None;
    public static QueueOptions Preview;
}
[FlagsAttribute]
internal enum Microsoft.TeamFoundation.Build.Client.QueueOptions2010 : Enum {
    public int value__;
    public static QueueOptions2010 None;
    public static QueueOptions2010 Preview;
}
public enum Microsoft.TeamFoundation.Build.Client.QueuePriority : Enum {
    public int value__;
    public static QueuePriority AboveNormal;
    public static QueuePriority BelowNormal;
    public static QueuePriority High;
    public static QueuePriority Low;
    public static QueuePriority Normal;
}
internal enum Microsoft.TeamFoundation.Build.Client.QueuePriority2010 : Enum {
    public int value__;
    public static QueuePriority2010 AboveNormal;
    public static QueuePriority2010 BelowNormal;
    public static QueuePriority2010 High;
    public static QueuePriority2010 Low;
    public static QueuePriority2010 Normal;
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Build.Client.QueueStatus : Enum {
    public int value__;
    public static QueueStatus All;
    public static QueueStatus Canceled;
    public static QueueStatus Completed;
    public static QueueStatus InProgress;
    public static QueueStatus None;
    public static QueueStatus Postponed;
    public static QueueStatus Queued;
    public static QueueStatus Retry;
}
[FlagsAttribute]
internal enum Microsoft.TeamFoundation.Build.Client.QueueStatus2010 : Enum {
    public int value__;
    public static QueueStatus2010 All;
    public static QueueStatus2010 Canceled;
    public static QueueStatus2010 Completed;
    public static QueueStatus2010 InProgress;
    public static QueueStatus2010 None;
    public static QueueStatus2010 Postponed;
    public static QueueStatus2010 Queued;
}
public class Microsoft.TeamFoundation.Build.Client.RequestedForDisplayInformation : object {
    private string m_displayName;
    private Guid m_teamFoundationId;
    public string DisplayName { get; }
    public Guid TeamFoundationId { get; }
    public string get_DisplayName();
    public Guid get_TeamFoundationId();
    [EditorBrowsableAttribute("1")]
public static RequestedForDisplayInformation FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    [EditorBrowsableAttribute("1")]
public void ToXml(XmlWriter writer, string element);
    [EditorBrowsableAttribute("1")]
public static void ToXml(XmlWriter writer, string element, RequestedForDisplayInformation obj);
}
public class Microsoft.TeamFoundation.Build.Client.ResponseFileCreationException : BuildServerException {
    public ResponseFileCreationException(string fileName, Exception innerException);
    protected ResponseFileCreationException(SerializationInfo info, StreamingContext context);
}
internal class Microsoft.TeamFoundation.Build.Client.RetentionPolicy : object {
    private BuildReason m_buildReason;
    private BuildStatus m_buildStatus;
    private DeleteOptions m_deleteOptions;
    private int m_numberToKeep;
    private IBuildDefinition m_buildDefinition;
    public BuildReason BuildReason { get; public set; }
    public BuildStatus BuildStatus { get; public set; }
    public DeleteOptions DeleteOptions { get; public set; }
    public int NumberToKeep { get; public set; }
    public IBuildDefinition BuildDefinition { get; internal set; }
    public RetentionPolicy(IBuildDefinition definition, BuildReason reason, BuildStatus status, int numberToKeep, DeleteOptions deleteOptions);
    public sealed virtual BuildReason get_BuildReason();
    public sealed virtual void set_BuildReason(BuildReason value);
    public sealed virtual BuildStatus get_BuildStatus();
    public sealed virtual void set_BuildStatus(BuildStatus value);
    public sealed virtual DeleteOptions get_DeleteOptions();
    public sealed virtual void set_DeleteOptions(DeleteOptions value);
    public sealed virtual int get_NumberToKeep();
    public sealed virtual void set_NumberToKeep(int value);
    internal static RetentionPolicy FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, RetentionPolicy obj);
    public sealed virtual IBuildDefinition get_BuildDefinition();
    internal void set_BuildDefinition(IBuildDefinition value);
}
internal class Microsoft.TeamFoundation.Build.Client.RetentionPolicy2010 : object {
    private BuildReason2010 m_buildReason;
    private BuildStatus2010 m_buildStatus;
    private DeleteOptions2010 m_deleteOptions;
    private int m_numberToKeep;
    public BuildReason2010 BuildReason { get; public set; }
    public BuildStatus2010 BuildStatus { get; public set; }
    public DeleteOptions2010 DeleteOptions { get; public set; }
    public int NumberToKeep { get; public set; }
    public RetentionPolicy2010(RetentionPolicy policy);
    public BuildReason2010 get_BuildReason();
    public void set_BuildReason(BuildReason2010 value);
    public BuildStatus2010 get_BuildStatus();
    public void set_BuildStatus(BuildStatus2010 value);
    public DeleteOptions2010 get_DeleteOptions();
    public void set_DeleteOptions(DeleteOptions2010 value);
    public int get_NumberToKeep();
    public void set_NumberToKeep(int value);
    internal static RetentionPolicy2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, RetentionPolicy2010 obj);
}
internal class Microsoft.TeamFoundation.Build.Client.Schedule : object {
    private string m_timeZoneId;
    private ScheduleDays m_utcDaysToBuild;
    private int m_utcStartTime;
    private IBuildDefinition m_buildDefinition;
    public ScheduleDays UtcDaysToBuild { get; public set; }
    public int UtcStartTime { get; }
    public IBuildDefinition BuildDefinition { get; internal set; }
    public ScheduleDays DaysToBuild { get; public set; }
    public ScheduleType Type { get; }
    public int StartTime { get; public set; }
    public TimeZoneInfo TimeZone { get; public set; }
    public Schedule(IBuildDefinition definition);
    internal Schedule(BuildDefinition definition, Schedule2010 schedule2010);
    public ScheduleDays get_UtcDaysToBuild();
    public void set_UtcDaysToBuild(ScheduleDays value);
    public int get_UtcStartTime();
    internal static Schedule FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, Schedule obj);
    public sealed virtual IBuildDefinition get_BuildDefinition();
    internal void set_BuildDefinition(IBuildDefinition value);
    public sealed virtual ScheduleDays get_DaysToBuild();
    public sealed virtual void set_DaysToBuild(ScheduleDays value);
    public sealed virtual ScheduleType get_Type();
    public sealed virtual int get_StartTime();
    public sealed virtual void set_StartTime(int value);
    public sealed virtual TimeZoneInfo get_TimeZone();
    public sealed virtual void set_TimeZone(TimeZoneInfo value);
    internal static ScheduleDays Convert(DayOfWeek dayOfWeek);
    internal static ScheduleDays GetScheduleDaysFromDaysOfWeek(DayOfWeek[] weekdays);
    internal void SetScheduleFromLocalTime(DateTime referenceDateTime, int startTime, ScheduleDays daysToBuild);
    internal int GetLocalTimeFromSchedule(DateTime referenceDateTime);
    internal ScheduleDays GetLocalDaysToBuildFromSchedule(DateTime referenceDateTime);
    internal DateTime GetLocalScheduleTime(DateTime referenceDateTime);
    internal DateTime GetUtcScheduleTime(DateTime referenceDateTime);
    internal DateTime GetDate(DateTime referenceDateTime);
    internal ScheduleDays ShiftScheduleDays(ScheduleDays days, int offset);
}
internal class Microsoft.TeamFoundation.Build.Client.Schedule2010 : object {
    private string m_timeZoneId;
    private ScheduleDays2010 m_utcDaysToBuild;
    private int m_utcStartTime;
    public string TimeZoneId { get; }
    public ScheduleDays2010 UtcDaysToBuild { get; public set; }
    public int UtcStartTime { get; }
    internal Schedule2010(Schedule schedule);
    public string get_TimeZoneId();
    public ScheduleDays2010 get_UtcDaysToBuild();
    public void set_UtcDaysToBuild(ScheduleDays2010 value);
    public int get_UtcStartTime();
    internal static Schedule2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, Schedule2010 obj);
}
[FlagsAttribute]
public enum Microsoft.TeamFoundation.Build.Client.ScheduleDays : Enum {
    public int value__;
    public static ScheduleDays All;
    public static ScheduleDays Friday;
    public static ScheduleDays Monday;
    public static ScheduleDays None;
    public static ScheduleDays Saturday;
    public static ScheduleDays Sunday;
    public static ScheduleDays Thursday;
    public static ScheduleDays Tuesday;
    public static ScheduleDays Wednesday;
}
[FlagsAttribute]
internal enum Microsoft.TeamFoundation.Build.Client.ScheduleDays2010 : Enum {
    public int value__;
    public static ScheduleDays2010 All;
    public static ScheduleDays2010 Friday;
    public static ScheduleDays2010 Monday;
    public static ScheduleDays2010 None;
    public static ScheduleDays2010 Saturday;
    public static ScheduleDays2010 Sunday;
    public static ScheduleDays2010 Thursday;
    public static ScheduleDays2010 Tuesday;
    public static ScheduleDays2010 Wednesday;
}
public enum Microsoft.TeamFoundation.Build.Client.ScheduleType : Enum {
    public int value__;
    public static ScheduleType Weekly;
}
public class Microsoft.TeamFoundation.Build.Client.SecurityException : BuildServerException {
    public SecurityException(string message);
    public SecurityException(string message, Exception ex);
    protected SecurityException(SerializationInfo info, StreamingContext context);
}
public enum Microsoft.TeamFoundation.Build.Client.ServiceHostStatus : Enum {
    public int value__;
    public static ServiceHostStatus Offline;
    public static ServiceHostStatus Online;
}
public class Microsoft.TeamFoundation.Build.Client.SharedResourceAlreadyAcquiredException : AdministrationException {
    public SharedResourceAlreadyAcquiredException(string message);
    public SharedResourceAlreadyAcquiredException(string message, Exception ex);
    protected SharedResourceAlreadyAcquiredException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.SharedResourceAlreadyRequestedException : AdministrationException {
    public SharedResourceAlreadyRequestedException(string message);
    public SharedResourceAlreadyRequestedException(string message, Exception ex);
    protected SharedResourceAlreadyRequestedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.StatusChangedEventArgs : EventArgs {
    private bool m_changed;
    private Exception m_pollingException;
    public bool Changed { get; }
    public Exception PollingException { get; }
    public StatusChangedEventArgs(bool changed);
    public StatusChangedEventArgs(Exception ex);
    public bool get_Changed();
    public Exception get_PollingException();
}
public class Microsoft.TeamFoundation.Build.Client.StatusChangedEventHandler : MulticastDelegate {
    public StatusChangedEventHandler(object object, IntPtr method);
    public virtual void Invoke(object sender, StatusChangedEventArgs e);
    public virtual IAsyncResult BeginInvoke(object sender, StatusChangedEventArgs e, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
public class Microsoft.TeamFoundation.Build.Client.StopBuildFailedException : BuildServerException {
    public StopBuildFailedException(string build, string failureMessage);
    protected StopBuildFailedException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Client.StopBuildTimeoutException : BuildServerException {
    public StopBuildTimeoutException(string message);
    public StopBuildTimeoutException(string message, Exception ex);
    protected StopBuildTimeoutException(SerializationInfo info, StreamingContext context);
}
[ObsoleteAttribute("This class has been deprecated. Please remove all references.", "False")]
internal class Microsoft.TeamFoundation.Build.Client.TestSummary : object {
    private IBuildInformationNode m_node;
    public int Id { get; }
    public string RunId { get; public set; }
    public string Name { get; public set; }
    public string RunUser { get; public set; }
    public int TestsTotal { get; public set; }
    public int TestsPassed { get; public set; }
    public int TestsFailed { get; public set; }
    public int TestsInconclusive { get; }
    public bool RunPassed { get; public set; }
    public IBuildInformationNode Node { get; }
    public TestSummary(IBuildInformationNode node, string name, string runId, bool runPassed, string runUser, int testsFailed, int testsPassed, int testsTotal);
    public TestSummary(IBuildInformationNode node);
    public sealed virtual int get_Id();
    public sealed virtual string get_RunId();
    public sealed virtual void set_RunId(string value);
    public sealed virtual string get_Name();
    public sealed virtual void set_Name(string value);
    public sealed virtual string get_RunUser();
    public sealed virtual void set_RunUser(string value);
    public sealed virtual int get_TestsTotal();
    public sealed virtual void set_TestsTotal(int value);
    public sealed virtual int get_TestsPassed();
    public sealed virtual void set_TestsPassed(int value);
    public sealed virtual int get_TestsFailed();
    public sealed virtual void set_TestsFailed(int value);
    public sealed virtual int get_TestsInconclusive();
    public sealed virtual bool get_RunPassed();
    public sealed virtual void set_RunPassed(bool value);
    public sealed virtual IBuildInformationNode get_Node();
    public sealed virtual void Save();
    public static List`1<ITestSummary> FromInformationNodes(List`1<IBuildInformationNode> nodes);
}
internal class Microsoft.TeamFoundation.Build.Client.Tfs2008Helper : object {
    [CompilerGeneratedAttribute]
private BuildServer <BuildServer>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildService <BuildService>k__BackingField;
    internal BuildServer BuildServer { get; private set; }
    internal BuildService BuildService { get; private set; }
    public Tfs2008Helper(BuildServer buildServer);
    [CompilerGeneratedAttribute]
internal BuildServer get_BuildServer();
    [CompilerGeneratedAttribute]
private void set_BuildServer(BuildServer value);
    [CompilerGeneratedAttribute]
internal BuildService get_BuildService();
    [CompilerGeneratedAttribute]
private void set_BuildService(BuildService value);
    internal static ControllerStatus Convert(Agent2008Status status);
    internal static BuildAgentSpec2008 Convert(BuildControllerSpec spec, string defaultTeamProjectName);
    internal static BuildDefinition Convert(BuildDefinition2010 definition);
    internal static BuildDefinitionSpec2010 Convert(BuildDefinitionSpec spec);
    internal static BuildGroupItemSpec2010[] Convert(IList`1<BuildControllerSpec> specs);
    internal static BuildDefinition2010 Convert(BuildServer buildServer, BuildDefinition definition);
    internal BuildDefinition2010[] Convert(IList`1<BuildDefinition> definitions);
    internal static BuildDefinition[] Convert(IList`1<BuildDefinition2010> definitions);
    internal static BuildGroupItemSpec2010[] Convert(IList`1<BuildDefinitionSpec> specs);
    internal static BuildDetail Convert(BuildDetail2010 build);
    internal static BuildDetail[] Convert(IList`1<BuildDetail2010> builds);
    internal static BuildDetailSpec2010 Convert(BuildDetailSpec spec);
    internal static BuildDetailSpec2010[] Convert(IList`1<BuildDetailSpec> specs);
    internal static BuildDeletionResult[] Convert(IList`1<BuildDeletionResult2010> results);
    internal void Convert(IEnumerable`1<BuildAgent2008> agents, IList`1& controllers, IList`1& serviceHosts);
    internal BuildControllerQueryResult ConvertToControllerResult(BuildGroupQueryResult result);
    internal BuildControllerQueryResult[] ConvertToControllerResult(IList`1<BuildGroupQueryResult> results);
    internal BuildDefinitionQueryResult ConvertToDefinitionResult(BuildGroupQueryResult result);
    internal BuildDefinitionQueryResult[] ConvertToDefinitionResult(IList`1<BuildGroupQueryResult> results);
    internal static BuildInformationNode[] Convert(BuildInformationNode2010[] nodes);
    internal static QueryOptions2010 Convert(QueryOptions options);
    internal static QueryOptions2010 Convert(QueryOptions2010 options);
    internal BuildQueryResult Convert(BuildQueryResult2008 result);
    internal BuildQueryResult[] Convert(IList`1<BuildQueryResult2008> results);
    internal BuildQueueQueryResult Convert(BuildQueueQueryResult2008 result);
    internal BuildQueueQueryResult[] Convert(IList`1<BuildQueueQueryResult2008> results);
    internal BuildRequest2008 Convert(BuildRequest request);
    internal static BuildStatus2010 Convert(BuildStatus2010 status);
    internal static BuildUpdateOptions2010 Convert(BuildUpdateOptions update);
    internal static BuildUpdateOptions2010[] Convert(IList`1<BuildUpdateOptions> updates);
    internal static InformationChangeRequest2010[] Convert(IList`1<InformationChangeRequest> requests);
    internal static QueuedBuild Convert(QueuedBuild2008 queuedBuild);
    internal static QueuedBuild[] Convert(IEnumerable`1<QueuedBuild2008> builds);
    internal BuildDefinition[] AddBuildDefinitions(BuildDefinition[] definitions);
    internal void AddBuildQualities(string teamProject, String[] qualities);
    internal void CancelBuilds(Int32[] ids);
    internal void DeleteBuildQualities(string teamProject, String[] qualities);
    internal BuildDeletionResult[] DeleteBuilds(Uri[] uris, DeleteOptions options);
    internal void DeleteBuildAgents(Uri[] agentUris);
    internal void DeleteBuildDefinitions(Uri[] definitionUris);
    internal void EvaluateSchedules();
    internal BuildDefinition[] GetAffectedBuildDefinitions(String[] serverItems, DefinitionTriggerType triggerType);
    internal String[] GetBuildQualities(string teamProject);
    internal BuildControllerQueryResult[] QueryBuildControllers(BuildControllerSpec[] specs);
    internal BuildControllerQueryResult QueryBuildControllersByUri(Uri[] uris, bool includeAgents);
    internal BuildDefinitionQueryResult[] QueryBuildDefinitions(BuildDefinitionSpec[] specs);
    internal IAsyncResult BeginQueryBuildDefinitions(BuildDefinitionSpec[] specs, AsyncCallback callback, object state);
    internal BuildDefinitionQueryResult[] EndQueryBuildDefinitions(IAsyncResult result);
    internal IAsyncResult BeginQueryBuildDefinitionsByUri(Uri[] uris, AsyncCallback callback, object state);
    internal BuildDefinitionQueryResult EndQueryBuildDefinitionsByUri(IAsyncResult result);
    internal BuildDefinitionQueryResult QueryBuildDefinitionsByUri(Uri[] uris);
    internal BuildQueryResult[] QueryBuilds(BuildDetailSpec[] specs);
    internal IAsyncResult BeginQueryBuilds(BuildDetailSpec[] specs, AsyncCallback callback, object state);
    internal BuildQueryResult[] EndQueryBuilds(IAsyncResult result);
    internal IBuildDetail[] QueryBuildsByUri(Uri[] uris, String[] informationTypes, QueryOptions queryOptions, QueryDeletedOption queryDeletedOption);
    internal IAsyncResult BeginQueryBuildsByUri(Uri[] uris, String[] informationTypes, QueryOptions queryOptions, QueryDeletedOption queryDeletedOption, AsyncCallback callback, object state);
    internal IBuildDetail[] EndQueryBuildsByUri(IAsyncResult result);
    internal BuildDetail[] UpdateBuilds(BuildUpdateOptions[] updates);
    internal BuildDefinition[] UpdateBuildDefinitions(BuildDefinition[] definitions);
    internal void ProcessChangeset(int changesetId);
    internal BuildQueueQueryResult[] QueryQueuedBuilds(BuildQueueSpec[] specs);
    internal IAsyncResult BeginQueryQueuedBuilds(BuildQueueSpec[] specs, AsyncCallback callback, object state);
    internal IQueuedBuildQueryResult[] EndQueryQueuedBuilds(IAsyncResult result);
    internal BuildQueueQueryResult QueryQueuedBuildsById(Int32[] queuedBuildIds, QueryOptions queryOptions);
    internal QueuedBuild QueueBuild(BuildRequest request, QueueOptions options);
    internal void StopBuilds(Uri[] uris);
    internal QueuedBuild[] UpdateQueuedBuilds(QueuedBuildUpdateOptions[] updates);
    internal BuildInformationNode[] UpdateBuildInformation(InformationChangeRequest[] requests);
    [CompilerGeneratedAttribute]
private BuildDefinition2010 <Convert>b__15_0(BuildDefinition x);
    [CompilerGeneratedAttribute]
private BuildControllerQueryResult <ConvertToControllerResult>b__25_0(BuildGroupQueryResult x);
    [CompilerGeneratedAttribute]
private BuildDefinitionQueryResult <ConvertToDefinitionResult>b__27_0(BuildGroupQueryResult x);
    [CompilerGeneratedAttribute]
private BuildQueryResult <Convert>b__32_0(BuildQueryResult2008 x);
    [CompilerGeneratedAttribute]
private BuildQueueQueryResult <Convert>b__34_0(BuildQueueQueryResult2008 x);
    [CompilerGeneratedAttribute]
private BuildQueueQueryResult <QueryQueuedBuilds>b__69_1(BuildQueueQueryResult2008 x);
    [CompilerGeneratedAttribute]
private BuildQueueQueryResult <EndQueryQueuedBuilds>b__71_0(BuildQueueQueryResult2008 x);
}
internal class Microsoft.TeamFoundation.Build.Client.Tfs2010Helper : object {
    [CompilerGeneratedAttribute]
private BuildServer <BuildServer>k__BackingField;
    [CompilerGeneratedAttribute]
private AdministrationWebService <AdministrationService>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildWebService <BuildService>k__BackingField;
    [CompilerGeneratedAttribute]
private BuildQueueWebService <BuildQueueService>k__BackingField;
    internal BuildServer BuildServer { get; private set; }
    internal AdministrationWebService AdministrationService { get; private set; }
    internal BuildWebService BuildService { get; private set; }
    internal BuildQueueWebService BuildQueueService { get; private set; }
    public Tfs2010Helper(BuildServer buildServer);
    [CompilerGeneratedAttribute]
internal BuildServer get_BuildServer();
    [CompilerGeneratedAttribute]
private void set_BuildServer(BuildServer value);
    [CompilerGeneratedAttribute]
internal AdministrationWebService get_AdministrationService();
    [CompilerGeneratedAttribute]
private void set_AdministrationService(AdministrationWebService value);
    [CompilerGeneratedAttribute]
internal BuildWebService get_BuildService();
    [CompilerGeneratedAttribute]
private void set_BuildService(BuildWebService value);
    [CompilerGeneratedAttribute]
internal BuildQueueWebService get_BuildQueueService();
    [CompilerGeneratedAttribute]
private void set_BuildQueueService(BuildQueueWebService value);
    internal static QueueStatus Convert(QueueStatus2010 status);
    internal static BuildReason Convert(BuildReason2010 reason);
    internal static QueuePriority Convert(QueuePriority2010 priority);
    internal static GetOption Convert(GetOption2010 options);
    internal static ProcessTemplateType2010 Convert(ProcessTemplateType type);
    internal static ScheduleDays Convert(ScheduleDays2010 days);
    internal static QueuedBuildUpdate2010 Convert(QueuedBuildUpdate update);
    internal static QueuePriority2010 Convert(QueuePriority priority);
    internal static DeleteOptions Convert(DeleteOptions2010 options);
    internal static BuildStatus Convert(BuildStatus2010 status);
    internal static ProcessTemplateType Convert(ProcessTemplateType2010 type);
    internal static ProcessTemplateType[] Convert(IList`1<ProcessTemplateType2010> types);
    internal static ProcessTemplateType2010[] Convert(IList`1<ProcessTemplateType> types);
    internal static DeleteOptions2010 Convert(DeleteOptions options);
    internal static InformationEditOptions2010 Convert(InformationEditOptions options);
    internal static WorkspaceMappingType2010 Convert(WorkspaceMappingType type);
    internal static WorkspaceMappingType Convert(WorkspaceMappingType2010 type);
    internal static BuildReason2010 Convert(BuildReason reason);
    internal static BuildStatus2010 Convert(BuildStatus status);
    internal static ScheduleDays2010 Convert(ScheduleDays days);
    internal static BuildPhaseStatus2010 Convert(BuildPhaseStatus status);
    internal static BuildUpdate2010 Convert(BuildUpdate update);
    internal static BuildServiceHostUpdate2010 Convert(BuildServiceHostUpdate update);
    internal static GetOption2010 Convert(GetOption options);
    internal static QueueStatus2010 Convert(QueueStatus status);
    internal static BuildQueryOrder2010 Convert(BuildQueryOrder order);
    internal static BuildControllerUpdate2010 Convert(BuildControllerUpdate update);
    internal static ControllerStatus Convert(ControllerStatus2010 status);
    internal static ControllerStatus2010 Convert(ControllerStatus status);
    internal static AgentStatus2010 Convert(AgentStatus status);
    internal static BuildAgentUpdate2010 Convert(BuildAgentUpdate update);
    internal static BuildPhaseStatus Convert(BuildPhaseStatus2010 status);
    internal static AgentStatus Convert(AgentStatus2010 status);
    internal static QueryDeletedOption2010 Convert(QueryDeletedOption option);
    internal static QueryOptions2010 Convert(QueryOptions options);
    internal static QueueOptions2010 Convert(QueueOptions options);
    internal static ContinuousIntegrationType Convert(DefinitionTriggerType trigger);
    internal static DefinitionTriggerType Convert(ContinuousIntegrationType trigger);
    internal static BuildDetail Convert(BuildDetail2010 build);
    internal static BuildInformationNode Convert(BuildInformationNode2010 node);
    internal static BuildInformationNode[] Convert(IEnumerable`1<BuildInformationNode2010> nodes);
    internal static RetentionPolicy2010[] Convert(IEnumerable`1<RetentionPolicy> policies);
    internal static RetentionPolicy[] Convert(BuildDefinition definition, IEnumerable`1<RetentionPolicy2010> policies);
    internal static Schedule2010[] Convert(IEnumerable`1<Schedule> schedules);
    internal static Schedule[] Convert(BuildDefinition definition, IEnumerable`1<Schedule2010> schedules);
    internal static InformationField[] Convert(IEnumerable`1<InformationField2010> fields);
    internal static BuildAgent Convert(BuildAgent2010 agent);
    internal static BuildAgent[] Convert(IEnumerable`1<BuildAgent2010> agents);
    internal static BuildAgent2010[] Convert(IEnumerable`1<BuildAgent> agents);
    internal BuildAgentQueryResult Convert(BuildAgentQueryResult2010 result);
    internal BuildAgentQueryResult[] Convert(IEnumerable`1<BuildAgentQueryResult2010> results);
    internal static BuildAgentSpec2010[] Convert(IEnumerable`1<BuildAgentSpec> specs);
    internal static BuildAgentUpdateOptions2010[] Convert(IEnumerable`1<BuildAgentUpdateOptions> updates);
    internal static BuildController Convert(BuildController2010 controller);
    internal static BuildController[] Convert(IEnumerable`1<BuildController2010> controllers);
    internal static BuildController2010[] Convert(IEnumerable`1<BuildController> controllers);
    internal BuildControllerQueryResult Convert(BuildControllerQueryResult2010 result);
    internal BuildControllerQueryResult[] Convert(IEnumerable`1<BuildControllerQueryResult2010> results);
    internal static BuildControllerSpec2010[] Convert(IEnumerable`1<BuildControllerSpec> specs);
    internal static BuildControllerUpdateOptions2010[] Convert(IEnumerable`1<BuildControllerUpdateOptions> updates);
    internal static BuildDefinition Convert(BuildDefinition2010 definition);
    internal static BuildDefinition2010[] Convert(IEnumerable`1<BuildDefinition> definitions);
    internal static BuildDefinition[] Convert(IEnumerable`1<BuildDefinition2010> definitions);
    internal BuildDefinitionQueryResult Convert(BuildDefinitionQueryResult2010 result);
    internal BuildDefinitionQueryResult[] Convert(IEnumerable`1<BuildDefinitionQueryResult2010> results);
    internal static BuildDefinitionSpec2010 Convert(BuildDefinitionSpec spec);
    internal static BuildDefinitionSpec2010[] Convert(IEnumerable`1<BuildDefinitionSpec> specs);
    internal static BuildDetail[] Convert(IEnumerable`1<BuildDetail2010> builds);
    internal static BuildDetailSpec2010 Convert(BuildDetailSpec spec);
    internal static BuildDetailSpec2010[] Convert(IEnumerable`1<BuildDetailSpec> specs);
    internal static BuildDeletionResult[] Convert(IEnumerable`1<BuildDeletionResult2010> results);
    internal BuildQueryResult Convert(BuildQueryResult2010 result);
    internal BuildQueryResult[] Convert(IEnumerable`1<BuildQueryResult2010> results);
    internal BuildQueueQueryResult Convert(BuildQueueQueryResult2010 result);
    internal BuildQueueQueryResult[] Convert(IEnumerable`1<BuildQueueQueryResult2010> results);
    internal static BuildQueueSpec2010[] Convert(BuildQueueSpec[] specs);
    internal static BuildRequest2010 Convert(BuildRequest request);
    internal static BuildRequest2010[] Convert(IEnumerable`1<BuildRequest> requests);
    internal static BuildServiceHost Convert(BuildServer buildServer, BuildServiceHost2010 serviceHost);
    internal static BuildServiceHost2010 Convert(BuildServiceHost serviceHost);
    internal BuildServiceHostQueryResult Convert(BuildServiceHostQueryResult2010 result);
    internal BuildServiceHostQueryResult[] Convert(IEnumerable`1<BuildServiceHostQueryResult2010> results);
    internal static BuildServiceHostUpdateOptions2010 Convert(BuildServiceHostUpdateOptions update);
    internal static BuildTeamProjectPermission2010[] Convert(IEnumerable`1<BuildTeamProjectPermission> permissions);
    internal static BuildUpdateOptions2010 Convert(BuildUpdateOptions update);
    internal static BuildUpdateOptions2010[] Convert(IEnumerable`1<BuildUpdateOptions> updates);
    internal static InformationChangeRequest2010[] Convert(IEnumerable`1<InformationChangeRequest> requests);
    internal static InformationField2010[] Convert(IEnumerable`1<InformationField> fields);
    internal static ProcessTemplate[] Convert(ProcessTemplate2010[] templates);
    internal static ProcessTemplate2010 Convert(ProcessTemplate template);
    internal static ProcessTemplate Convert(ProcessTemplate2010 template);
    internal static ProcessTemplate2010[] Convert(ProcessTemplate[] templates);
    internal static QueuedBuild Convert(QueuedBuild2010 build);
    internal static QueuedBuild[] Convert(IEnumerable`1<QueuedBuild2010> builds);
    internal static QueuedBuildUpdateOptions2010[] Convert(IEnumerable`1<QueuedBuildUpdateOptions> updates);
    internal static WorkspaceMapping2010[] Convert(IEnumerable`1<WorkspaceMapping> mappings);
    internal static WorkspaceMapping[] Convert(IEnumerable`1<WorkspaceMapping2010> mappings);
    internal static WorkspaceTemplate2010 Convert(WorkspaceTemplate template);
    internal static WorkspaceTemplate Convert(WorkspaceTemplate2010 template);
    internal static TResult[] ConvertList(IEnumerable`1<TSource> source, Func`2<TSource, TResult> convertSource);
    internal BuildAgent[] AddBuildAgents(BuildAgent[] agents);
    internal BuildController[] AddBuildControllers(BuildController[] controllers);
    internal BuildDefinition[] AddBuildDefinitions(BuildDefinition[] definitions);
    internal void AddBuildQualities(string teamProject, String[] qualities);
    internal BuildServiceHost AddBuildServiceHost(BuildServiceHost buildServiceHost);
    internal ProcessTemplate[] AddProcessTemplates(ProcessTemplate[] templates);
    internal void CancelBuilds(Int32[] ids);
    internal void CreateTeamProjectComponents(Uri projectUri, IEnumerable`1<BuildTeamProjectPermission> permissions);
    internal IBuildDeletionResult[] DeleteBuilds(Uri[] uris, DeleteOptions options);
    internal void DeleteBuildAgents(Uri[] agentUris);
    internal void DeleteBuildControllers(Uri[] controllerUris);
    internal void DeleteBuildDefinitions(Uri[] definitionUris);
    internal void DeleteBuildQualities(string teamProject, String[] qualities);
    internal void DeleteBuildServiceHost(Uri serviceHostUri);
    internal void DeleteProcessTemplates(Int32[] templateIds);
    internal void DestroyBuilds(Uri[] buildUris);
    internal BuildDefinition[] GetAffectedBuildDefinitions(String[] serverItems, DefinitionTriggerType continuousIntegrationType);
    internal String[] GetBuildQualities(string teamProject);
    internal BuildDetail NotifyBuildCompleted(Uri Uri);
    internal BuildAgentQueryResult[] QueryBuildAgents(BuildAgentSpec[] specs);
    internal BuildAgentQueryResult QueryBuildAgentsByUri(Uri[] uris);
    internal BuildControllerQueryResult[] QueryBuildControllers(BuildControllerSpec[] specs);
    internal BuildControllerQueryResult QueryBuildControllersByUri(Uri[] uris, bool includeAgents);
    internal BuildDefinitionQueryResult[] QueryBuildDefinitions(BuildDefinitionSpec[] specs);
    internal IAsyncResult BeginQueryBuildDefinitions(BuildDefinitionSpec[] specs, AsyncCallback callback, object state);
    internal BuildDefinitionQueryResult[] EndQueryBuildDefinitions(IAsyncResult result);
    internal BuildDefinitionQueryResult QueryBuildDefinitionsByUri(Uri[] uris, QueryOptions options);
    internal IAsyncResult BeginQueryBuildDefinitionsByUri(Uri[] uris, QueryOptions options, AsyncCallback callback, object state);
    internal BuildDefinitionQueryResult EndQueryBuildDefinitionsByUri(IAsyncResult result);
    internal BuildQueryResult[] QueryBuilds(BuildDetailSpec[] specs);
    internal IAsyncResult BeginQueryBuilds(BuildDetailSpec[] specs, AsyncCallback callback, object state);
    internal BuildQueryResult[] EndQueryBuilds(IAsyncResult result);
    internal IBuildDetail[] QueryBuildsByUri(Uri[] uris, String[] informationTypes, QueryOptions queryOptions, QueryDeletedOption queryDeletedOption);
    internal IAsyncResult BeginQueryBuildsByUri(Uri[] uris, String[] informationTypes, QueryOptions queryOptions, QueryDeletedOption queryDeletedOption, AsyncCallback callback, object state);
    internal IBuildDetail[] EndQueryBuildsByUri(IAsyncResult result);
    internal BuildServiceHostQueryResult QueryBuildServiceHosts(string computer);
    internal BuildServiceHostQueryResult QueryBuildServiceHostsByUri(Uri[] uris);
    internal ProcessTemplate[] QueryProcessTemplates(string teamProject, ProcessTemplateType[] types);
    internal BuildQueueQueryResult[] QueryQueuedBuilds(BuildQueueSpec[] specs);
    internal IAsyncResult BeginQueryQueuedBuilds(BuildQueueSpec[] specs, AsyncCallback callback, object state);
    internal IQueuedBuildQueryResult[] EndQueryQueuedBuilds(IAsyncResult result);
    internal BuildQueueQueryResult QueryQueuedBuildsById(Int32[] queuedBuildIds, QueryOptions options);
    internal QueuedBuild[] QueueBuilds(BuildRequest[] requests, QueueOptions options);
    internal void StopBuilds(Uri[] uris);
    internal BuildAgentQueryResult TestBuildAgentConnection(Uri uri);
    internal BuildControllerQueryResult TestBuildControllerConnection(Uri uri);
    internal BuildServiceHostQueryResult TestBuildServiceHostConnections(Uri uri);
    internal void UpdateBuildAgents(BuildAgentUpdateOptions[] updates);
    internal BuildDetail[] UpdateBuilds(BuildUpdateOptions[] updateOptions);
    internal void UpdateBuildControllers(BuildControllerUpdateOptions[] updates);
    internal BuildDefinition[] UpdateBuildDefinitions(BuildDefinition[] definitions);
    internal BuildInformationNode[] UpdateBuildInformation(InformationChangeRequest[] requests);
    internal void UpdateBuildServiceHost(BuildServiceHostUpdateOptions update);
    internal ProcessTemplate[] UpdateProcessTemplates(ProcessTemplate[] templates);
    internal QueuedBuild[] UpdateQueuedBuilds(QueuedBuildUpdateOptions[] updates);
    [CompilerGeneratedAttribute]
private BuildServiceHost <Convert>b__66_2(BuildServiceHost2010 x);
    [CompilerGeneratedAttribute]
private BuildAgentQueryResult <Convert>b__67_0(BuildAgentQueryResult2010 x);
    [CompilerGeneratedAttribute]
private BuildServiceHost <Convert>b__73_2(BuildServiceHost2010 x);
    [CompilerGeneratedAttribute]
private BuildControllerQueryResult <Convert>b__74_0(BuildControllerQueryResult2010 x);
    [CompilerGeneratedAttribute]
private BuildServiceHost <Convert>b__80_3(BuildServiceHost2010 x);
    [CompilerGeneratedAttribute]
private BuildDefinitionQueryResult <Convert>b__81_0(BuildDefinitionQueryResult2010 x);
    [CompilerGeneratedAttribute]
private BuildServiceHost <Convert>b__88_4(BuildServiceHost2010 x);
    [CompilerGeneratedAttribute]
private BuildQueryResult <Convert>b__89_0(BuildQueryResult2010 x);
    [CompilerGeneratedAttribute]
private BuildServiceHost <Convert>b__90_4(BuildServiceHost2010 x);
    [CompilerGeneratedAttribute]
private BuildQueueQueryResult <Convert>b__91_0(BuildQueueQueryResult2010 x);
    [CompilerGeneratedAttribute]
private BuildServiceHost <Convert>b__97_2(BuildServiceHost2010 x);
    [CompilerGeneratedAttribute]
private BuildServiceHostQueryResult <Convert>b__98_0(BuildServiceHostQueryResult2010 x);
}
internal class Microsoft.TeamFoundation.Build.Client.VersionControlAssemblyDownloader : object {
    private VersionControlServer m_versionControl;
    private string m_customAssemblyPath;
    private RecursionType m_recursionType;
    public VersionControlAssemblyDownloader(VersionControlServer versionControl, string customAssemblyPath, RecursionType recursionType);
    public sealed virtual List`1<string> DownloadCustomAssemblies(string localPath, CustomActivitiesAndExtensions customActivitiesAndExtensions);
    public sealed virtual bool DownloadCustomActivitiesAndExtensionsFile(string localPath, CustomActivitiesAndExtensions customActivitiesAndExtensions, HostEnvironmentOption environmentOptions, bool includeExtensions);
}
internal class Microsoft.TeamFoundation.Build.Client.WorkItemSummary : object {
    private IBuildInformationNode m_node;
    public string AssignedTo { get; public set; }
    public int Id { get; }
    public string Status { get; public set; }
    public string Title { get; public set; }
    public string Type { get; public set; }
    public int WorkItemId { get; public set; }
    public Uri WorkItemUri { get; public set; }
    public IBuildInformationNode Node { get; }
    public WorkItemSummary(IBuildInformationNode node, string type, string assignedTo, string status, string title, int workItemId, Uri workItemUri);
    public WorkItemSummary(IBuildInformationNode node);
    public sealed virtual string get_AssignedTo();
    public sealed virtual void set_AssignedTo(string value);
    public sealed virtual int get_Id();
    public sealed virtual string get_Status();
    public sealed virtual void set_Status(string value);
    public sealed virtual string get_Title();
    public sealed virtual void set_Title(string value);
    public sealed virtual string get_Type();
    public sealed virtual void set_Type(string value);
    public sealed virtual int get_WorkItemId();
    public sealed virtual void set_WorkItemId(int value);
    public sealed virtual Uri get_WorkItemUri();
    public sealed virtual void set_WorkItemUri(Uri value);
    public sealed virtual IBuildInformationNode get_Node();
    public sealed virtual void Save();
    public static List`1<IWorkItemSummary> FromInformationNodes(List`1<IBuildInformationNode> nodes);
}
internal class Microsoft.TeamFoundation.Build.Client.WorkspaceMapping : object {
    private int m_depth;
    private string m_localItem;
    private WorkspaceMappingType m_mappingType;
    private string m_serverItem;
    public string LocalItem { get; public set; }
    public WorkspaceMappingType MappingType { get; public set; }
    public string ServerItem { get; public set; }
    public WorkspaceMappingDepth Depth { get; public set; }
    internal WorkspaceMapping(WorkspaceMapping2010 mapping);
    public sealed virtual string get_LocalItem();
    public sealed virtual void set_LocalItem(string value);
    public sealed virtual WorkspaceMappingType get_MappingType();
    public sealed virtual void set_MappingType(WorkspaceMappingType value);
    public sealed virtual string get_ServerItem();
    public sealed virtual void set_ServerItem(string value);
    internal static WorkspaceMapping FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, WorkspaceMapping obj);
    public sealed virtual WorkspaceMappingDepth get_Depth();
    public sealed virtual void set_Depth(WorkspaceMappingDepth value);
}
internal class Microsoft.TeamFoundation.Build.Client.WorkspaceMapping2010 : object {
    private int m_depth;
    private string m_localItem;
    private WorkspaceMappingType2010 m_mappingType;
    private string m_serverItem;
    public int Depth { get; public set; }
    public string LocalItem { get; public set; }
    public WorkspaceMappingType2010 MappingType { get; public set; }
    public string ServerItem { get; public set; }
    internal WorkspaceMapping2010(WorkspaceMapping mapping);
    public int get_Depth();
    public void set_Depth(int value);
    public string get_LocalItem();
    public void set_LocalItem(string value);
    public WorkspaceMappingType2010 get_MappingType();
    public void set_MappingType(WorkspaceMappingType2010 value);
    public string get_ServerItem();
    public void set_ServerItem(string value);
    internal static WorkspaceMapping2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, WorkspaceMapping2010 obj);
}
public enum Microsoft.TeamFoundation.Build.Client.WorkspaceMappingDepth : Enum {
    public int value__;
    public static WorkspaceMappingDepth OneLevel;
    public static WorkspaceMappingDepth Full;
}
public enum Microsoft.TeamFoundation.Build.Client.WorkspaceMappingType : Enum {
    public int value__;
    public static WorkspaceMappingType Cloak;
    public static WorkspaceMappingType Map;
}
internal enum Microsoft.TeamFoundation.Build.Client.WorkspaceMappingType2010 : Enum {
    public int value__;
    public static WorkspaceMappingType2010 Cloak;
    public static WorkspaceMappingType2010 Map;
}
internal class Microsoft.TeamFoundation.Build.Client.WorkspaceTemplate : object {
    private string m_definitionUri;
    internal WorkspaceMapping[] m_internalMappings;
    private string m_lastModifiedBy;
    private DateTime m_lastModifiedDate;
    private List`1<IWorkspaceMapping> m_mappingList;
    internal string DefinitionUri { get; internal set; }
    internal WorkspaceMapping[] InternalMappings { get; internal set; }
    public string LastModifiedBy { get; }
    public DateTime LastModifiedDate { get; }
    public List`1<IWorkspaceMapping> Mappings { get; }
    internal WorkspaceTemplate(WorkspaceTemplate2010 template);
    internal string get_DefinitionUri();
    internal void set_DefinitionUri(string value);
    internal WorkspaceMapping[] get_InternalMappings();
    internal void set_InternalMappings(WorkspaceMapping[] value);
    public sealed virtual string get_LastModifiedBy();
    public sealed virtual DateTime get_LastModifiedDate();
    internal static WorkspaceTemplate FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, WorkspaceTemplate obj);
    internal void AfterDeserialize();
    public sealed virtual List`1<IWorkspaceMapping> get_Mappings();
    public sealed virtual IWorkspaceMapping AddMapping();
    public sealed virtual IWorkspaceMapping AddMapping(string serverItem, string localItem, WorkspaceMappingType type);
    public sealed virtual IWorkspaceMapping AddMapping(string serverItem, string localItem, WorkspaceMappingType type, WorkspaceMappingDepth depth);
    public sealed virtual IWorkspaceMapping Cloak(string serverItem);
    public sealed virtual IWorkspaceMapping Map(string serverItem, string localItem);
    public sealed virtual bool RemoveMapping(IWorkspaceMapping mapping);
    public sealed virtual bool RemoveMapping(string serverItem);
    public sealed virtual void CopyFrom(IWorkspaceTemplate workspaceTemplate);
}
internal class Microsoft.TeamFoundation.Build.Client.WorkspaceTemplate2010 : object {
    private string m_definitionUri;
    internal WorkspaceMapping2010[] m_internalMappings;
    private string m_lastModifiedBy;
    private DateTime m_lastModifiedDate;
    internal string DefinitionUri { get; internal set; }
    internal WorkspaceMapping2010[] InternalMappings { get; internal set; }
    public string LastModifiedBy { get; public set; }
    public DateTime LastModifiedDate { get; public set; }
    internal WorkspaceTemplate2010(WorkspaceTemplate template);
    internal string get_DefinitionUri();
    internal void set_DefinitionUri(string value);
    internal WorkspaceMapping2010[] get_InternalMappings();
    internal void set_InternalMappings(WorkspaceMapping2010[] value);
    public string get_LastModifiedBy();
    public void set_LastModifiedBy(string value);
    public DateTime get_LastModifiedDate();
    public void set_LastModifiedDate(DateTime value);
    internal static WorkspaceTemplate2010 FromXml(IServiceProvider serviceProvider, XmlReader reader);
    public virtual string ToString();
    internal void ToXml(XmlWriter writer, string element);
    internal static void ToXml(XmlWriter writer, string element, WorkspaceTemplate2010 obj);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
