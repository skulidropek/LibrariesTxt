[CompilerGeneratedAttribute]
[EmbeddedAttribute]
internal class Microsoft.CodeAnalysis.EmbeddedAttribute : Attribute {
}
public static class Microsoft.TeamFoundation.Build.Common.AdministrationPermissions : object {
    public static int ViewBuildResources;
    public static int ManageBuildResources;
    public static int UseBuildResources;
    public static int AdministerBuildResourcePermissions;
    public static int ManagePipelinePolicies;
    public static int AllPermissions;
    private static AdministrationPermissions();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Build.Common.ArgumentValidation : object {
    public static void Check(string argumentName, string argument, bool allowNullOrEmpty, string errorMessage);
    public static void Check(string argumentName, object argument, bool allowNull);
    public static void CheckArray(string argumentName, IList`1<T> argument, Validate`1<T> validate, bool allowNull, string errorMessage);
    public static void CheckArray(string argumentName, IList`1<T> argument, ValidateType`1<T> validate, string type, bool allowNull, string errorMessage);
    public static void CheckBound(string argumentName, int argument, int lowerBound);
    public static void CheckBound(string argumentName, int argument, int lowerBound, int upperBound);
    public static void CheckUri(string argumentName, string argument, bool allowNull, string errorMessage);
    public static void CheckUri(string argumentName, string argument, string type, bool allowNull, string errorMessage);
    public static void CheckBuildDirectory(string argumentName, String& argument, bool allowNull);
    public static void CheckBuildMachine(string argumentName, string argument, bool allowNull);
    public static void CheckBuildNumber(string argumentName, string argument, bool allowNull);
    public static void CheckBuildType(string argumentName, string argument, bool allowNull);
    public static void CheckConfiguration(string argumentName, string argument, bool allowNull, string errorMessage);
    public static void CheckDropLocation(string argumentName, String& argument, bool allowNull, string errorMessage);
    public static void CheckDropLocation(string argumentName, String& argument, bool allowNull, bool allowVCDrop, string errorMessage);
    public static void CheckLogLocation(string argumentName, String& argument, bool allowNull, string errorMessage);
    public static void CheckItemPath(string argumentName, String& argument, bool allowNull, bool allowWildcards);
    public static void CheckShelvesetName(string argumentName, string argument, bool allowNull);
    public static void CheckSharedResourceName(string argumentName, string argument);
    public static void CheckUriArray(string argumentName, IList`1<string> array, bool allowNull, string errorMessage);
    public static void CheckUriArray(string argumentName, IList`1<string> array, string type, bool allowNull, string errorMessage);
}
public class Microsoft.TeamFoundation.Build.Common.AzureCloudAppProfile : object {
    [CompilerGeneratedAttribute]
private string <AzureHostedServiceName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AzureHostedServiceLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private AzureDeploymentSlot <AzureSlot>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AzureStorageAccountName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AzureStorageAccountLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AzureDeploymentLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AzureSolutionConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private string <AzureServiceConfiguration>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AzureAppendTimestampToDeploymentLabel>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AzureAllowUpgrade>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <AzureFallbackToDeleteAndRecreateIfUpgradeFails>k__BackingField;
    [CompilerGeneratedAttribute]
private IDictionary`2<string, string> <Properties>k__BackingField;
    public string AzureHostedServiceName { get; public set; }
    public string AzureHostedServiceLabel { get; private set; }
    public AzureDeploymentSlot AzureSlot { get; public set; }
    public string AzureStorageAccountName { get; public set; }
    public string AzureStorageAccountLabel { get; private set; }
    public string AzureDeploymentLabel { get; public set; }
    public string AzureSolutionConfiguration { get; private set; }
    public string AzureServiceConfiguration { get; public set; }
    public bool AzureAppendTimestampToDeploymentLabel { get; private set; }
    public bool AzureAllowUpgrade { get; public set; }
    public bool AzureFallbackToDeleteAndRecreateIfUpgradeFails { get; public set; }
    public IDictionary`2<string, string> Properties { get; private set; }
    public static AzureCloudAppProfile Parse(string fileText);
    public static AzureCloudAppProfile CreateDefaultProfile(string hostedServiceName, string storageAccountName, string deploymentLabel);
    [CompilerGeneratedAttribute]
public string get_AzureHostedServiceName();
    [CompilerGeneratedAttribute]
public void set_AzureHostedServiceName(string value);
    [CompilerGeneratedAttribute]
public string get_AzureHostedServiceLabel();
    [CompilerGeneratedAttribute]
private void set_AzureHostedServiceLabel(string value);
    [CompilerGeneratedAttribute]
public AzureDeploymentSlot get_AzureSlot();
    [CompilerGeneratedAttribute]
public void set_AzureSlot(AzureDeploymentSlot value);
    [CompilerGeneratedAttribute]
public string get_AzureStorageAccountName();
    [CompilerGeneratedAttribute]
public void set_AzureStorageAccountName(string value);
    [CompilerGeneratedAttribute]
public string get_AzureStorageAccountLabel();
    [CompilerGeneratedAttribute]
private void set_AzureStorageAccountLabel(string value);
    [CompilerGeneratedAttribute]
public string get_AzureDeploymentLabel();
    [CompilerGeneratedAttribute]
public void set_AzureDeploymentLabel(string value);
    [CompilerGeneratedAttribute]
public string get_AzureSolutionConfiguration();
    [CompilerGeneratedAttribute]
private void set_AzureSolutionConfiguration(string value);
    [CompilerGeneratedAttribute]
public string get_AzureServiceConfiguration();
    [CompilerGeneratedAttribute]
public void set_AzureServiceConfiguration(string value);
    [CompilerGeneratedAttribute]
public bool get_AzureAppendTimestampToDeploymentLabel();
    [CompilerGeneratedAttribute]
private void set_AzureAppendTimestampToDeploymentLabel(bool value);
    [CompilerGeneratedAttribute]
public bool get_AzureAllowUpgrade();
    [CompilerGeneratedAttribute]
public void set_AzureAllowUpgrade(bool value);
    [CompilerGeneratedAttribute]
public bool get_AzureFallbackToDeleteAndRecreateIfUpgradeFails();
    [CompilerGeneratedAttribute]
public void set_AzureFallbackToDeleteAndRecreateIfUpgradeFails(bool value);
    [CompilerGeneratedAttribute]
public IDictionary`2<string, string> get_Properties();
    [CompilerGeneratedAttribute]
private void set_Properties(IDictionary`2<string, string> value);
    public string ToXml();
}
[DataContractAttribute]
public enum Microsoft.TeamFoundation.Build.Common.AzureDeploymentSlot : Enum {
    public int value__;
    [EnumMemberAttribute]
public static AzureDeploymentSlot Staging;
    [EnumMemberAttribute]
public static AzureDeploymentSlot Production;
}
internal static class Microsoft.TeamFoundation.Build.Common.AzureProfileXNames : object {
    internal static string msbuildns;
    internal static string MSBuildNamespace;
    internal static string ProjectElement;
    internal static string PropertyGroupElement;
    internal static string AzureHostedServiceNameElement;
    internal static string AzureHostedServiceLabelElement;
    internal static string AzureSlotElement;
    internal static string AzureStorageAccountNameElement;
    internal static string AzureStorageAccountLabelElement;
    internal static string AzureDeploymentLabelElement;
    internal static string AzureSolutionConfigurationElement;
    internal static string AzureServiceConfigurationElement;
    internal static string AzureAppendTimestampToDeploymentLabelElement;
    internal static string AzureAllowUpgradeElement;
    internal static string ToolsVersionAttribute;
    internal static string AzureFallbackToDeleteAndRecreateIfUpgradeFailsElement;
}
[GenerateAllConstantsAttribute("")]
public static class Microsoft.TeamFoundation.Build.Common.BuildArtifactConstants : object {
    public static string Drop;
    public static string SourceLabel;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Build.Common.BuildArtifactUris : object {
    public static string BuiltInTemplateArtifactType;
    public static string BuiltInTemplateToolSpecificId;
}
public static class Microsoft.TeamFoundation.Build.Common.BuildCommonUtil : object {
    internal static DateTime DefaultDateTime;
    private static string s_defaultWorkingDir;
    private static string s_defaultHostedWorkingDir;
    private static string s_buildAgentId;
    private static string s_buildAgentName;
    private static string s_buildDefinitionId;
    private static string s_buildDefinitionPath;
    private static string s_buildDirEnv;
    private static string s_sourceDir;
    private static Regex s_envRegex;
    private static int s_defaultAgentPort;
    public static string BuildRegistryKeyPath { get; }
    public static string BuildAgentIdVariable { get; }
    public static string BuildAgentNameVariable { get; }
    public static string BuildDefinitionIdVariable { get; }
    public static string BuildDefinitionPathVariable { get; }
    public static string BuildDirEnvironmentVariable { get; }
    public static string NoCICheckInComment { get; }
    public static string NoTriggerCheckInComment { get; }
    public static string DoNotCopyLogsToFileContainer { get; }
    public static string SourceDirEnvironmentVariable { get; }
    public static string DefaultWorkingDirectory { get; }
    public static string DefaultHostedWorkingDirectory { get; }
    public static int DefaultAgentPort { get; }
    public static Regex MacroPattern { get; }
    private static BuildCommonUtil();
    public static string get_BuildRegistryKeyPath();
    public static string get_BuildAgentIdVariable();
    public static string get_BuildAgentNameVariable();
    public static string get_BuildDefinitionIdVariable();
    public static string get_BuildDefinitionPathVariable();
    public static string get_BuildDirEnvironmentVariable();
    public static string get_NoCICheckInComment();
    public static string get_NoTriggerCheckInComment();
    public static string get_DoNotCopyLogsToFileContainer();
    public static string get_SourceDirEnvironmentVariable();
    public static string get_DefaultWorkingDirectory();
    public static string get_DefaultHostedWorkingDirectory();
    public static int get_DefaultAgentPort();
    public static Regex get_MacroPattern();
    [EditorBrowsableAttribute("1")]
public static bool IsStar(string value);
    [EditorBrowsableAttribute("1")]
public static bool IsDefaultDateTime(DateTime value);
    [EditorBrowsableAttribute("1")]
public static string DateTimeToString(DateTime value);
    public static string GetCommonLocalPath(IEnumerable`1<string> localItems);
    public static string GetCommonServerPath(IEnumerable`1<string> serverItems);
    private static string GetCommonLocalPath(string path1, string path2);
    private static string GetCommonServerPath(string path1, string path2);
    public static string Replace(string original, string pattern, string replacement, bool ignoreCase);
    public static string ExpandEnvironmentVariables(string inputValue);
    public static string ExpandEnvironmentVariables(string inputValue, IDictionary`2<string, string> additionalVariableReplacements);
    public static string ExpandEnvironmentVariables(string inputValue, IDictionary`2<string, string> variables, Func`3<string, string, string> expandVariable);
    private static string GetEnvironmentVariableName(string matchValue);
    internal static IList`1<VariableMatch> GetEnvironmentVariableMatches(string inputValue);
    [EditorBrowsableAttribute("1")]
public static bool IsEnvironmentVariable(string value);
    [EditorBrowsableAttribute("1")]
public static T GetRegistryValue(string keyPath, string name, T defaultValue);
    public static bool VariableInUse(string value);
    private static bool GetValueFromKey(RegistryKey registryKey, string name, T defaultValue, T& value);
    [EditorBrowsableAttribute("1")]
public static void SetRegistryValue(string keyPath, string name, T value);
    [EditorBrowsableAttribute("1")]
public static string GetBuildReportUrl(TfsTeamProjectCollection collection, Uri buildUri);
    [EditorBrowsableAttribute("1")]
public static void OpenDropFolder(string folderPath);
    internal static string GetServerPathForUrl(string rootPath, string url);
}
[GenerateSpecificConstantsAttribute("")]
public static class Microsoft.TeamFoundation.Build.Common.BuildConstants : object {
    public static int MaxPathLength;
    public static int MaxPathNameLength;
    public static int MaxUriLength;
    [EditorBrowsableAttribute("1")]
public static int WebRequestRetryCount;
    [GenerateConstantAttribute("")]
public static string BuildOptionAdditionalFieldsName;
    private static string serviceApplicationName;
    private static string windowsServiceName;
    private static string processName;
    private static string eventSourceName;
    private static string buildService;
    private static string buildService3;
    private static string buildTypeFolderName;
    private static string projectFileName;
    private static string logFileName;
    private static string customEventsFileName;
    private static string star;
    private static String[] allInformationTypes;
    private static String[] allPropertyNames;
    private static String[] noPropertyNames;
    private static string serviceHostUrlPath;
    private static int currentVersion;
    private static string doNotAutoDeleteProperty;
    private static string firewallExceptionFormat;
    private static string argBuildUri;
    private static string argTFSUrl;
    private static string argTFSProjectFile;
    private static string argLogFilePerProject;
    private static string argDropLocation;
    private static string argBuildNumber;
    private static string argInformationNodeId;
    [ObsoleteAttribute("moved to Microsoft.TeamFoundation.Build2.Server.OrchestrationConstants")]
private static string orchestrationHubName;
    private static int defaultDaysToKeepDefinitionMetrics;
    private static int defaultDaysToKeepDailyProjectMetrics;
    private static int defaultDaysToKeepHourlyProjectMetrics;
    private static int defaultDaysToKeepFiredEvents;
    private static int defaultDaysToKeepFailedEvents;
    private static int defaultBuildEventsJobBatchSize;
    private static int defaultBuildCompletionEventListenerJobTimeoutMinutes;
    private static int defaultServiceConnectionHistoryRegistrationJobTimeoutMinutes;
    private static int defaultDaysToKeepFiredCheckEvents;
    private static int defaultDaysToKeepFailedCheckEvents;
    private static int defaultCheckEventsMaxAttempts;
    private static int defaultCheckEventsBatchSizeExecute;
    private static int defaultCheckEventsMaxDegreeOfParallelism;
    public static string WorkflowIntegrationServiceConfigurationKey;
    public static string TeamFoundationServerUrlKey;
    public static string BuildServiceHostUriKey;
    public static string NetworkIsolated;
    public static string SequenceIdKey;
    public static string RetryIdKey;
    public static char WorkflowIntegrationConfigurationValueSeparator;
    public static string WorkflowIntegrationConfigurationValueFormat;
    public static string CredentialsKey;
    public static string DomainNameToken;
    public static string UserNameToken;
    public static string PasswordToken;
    public static string DisclaimerToken;
    public static string ServiceHostUriKey;
    public static string AgentUriKey;
    public static string BuildServiceHostDiagnosticInfoKey;
    public static string BuildServiceHostStatusKey;
    public static string BuildAgentDiagnosticInfoKey;
    public static string ServiceContractVersionKey;
    public static string ServiceVersionKey;
    public static string AgentContractVersionKey;
    public static string AgentVersionKey;
    public static string FenceAgentSubkey;
    public static string FenceAgentConfigurationStatusValue;
    public static string FenceAgentInstructionValue;
    public static int MaxAgentKeyCount;
    public static string ProjectFileName { get; }
    public static string BuildTypeFolderName { get; }
    [ObsoleteAttribute("This property has been deprecated. Please remove all references and use WindowsServiceName, ProcessName or EventSourceName instead.")]
public static string ServiceApplicationName { get; }
    public static string WindowsServiceName { get; }
    public static string ProcessName { get; }
    public static string EventSourceName { get; }
    public static string BuildService { get; }
    public static string BuildService3 { get; }
    public static string BuildLogFileName { get; }
    public static string CustomEventsFileName { get; }
    public static string DefaultServiceHostUrlPath { get; }
    [EditorBrowsableAttribute("1")]
public static string Star { get; }
    [EditorBrowsableAttribute("1")]
public static string FirewallExceptionFormat { get; }
    [EditorBrowsableAttribute("1")]
public static String[] AllInformationTypes { get; }
    [EditorBrowsableAttribute("1")]
public static String[] AllPropertyNames { get; }
    [EditorBrowsableAttribute("1")]
public static String[] NoPropertyNames { get; }
    [EditorBrowsableAttribute("1")]
public static int CurrentVersion { get; }
    [EditorBrowsableAttribute("1")]
public static string DoNotAutoDeleteProperty { get; }
    public static string BuildUriArgument { get; }
    public static string TfsUrlArgument { get; }
    public static string TfsProjectFileArgument { get; }
    public static string LogFilePerProjectArgument { get; }
    public static string DropLocationArgument { get; }
    public static string BuildNumberArgument { get; }
    public static string InformationNodeIdArgument { get; }
    [ObsoleteAttribute("moved to Microsoft.TeamFoundation.Build2.Server.OrchestrationConstants")]
public static string OrchestrationHubName { get; }
    public static string Disabled { get; }
    public static int DefaultDaysToKeepDefinitionMetrics { get; }
    public static int DefaultDaysToKeepDailyProjectMetrics { get; }
    public static int DefaultDaysToKeepHourlyProjectMetrics { get; }
    public static int DefaultDaysToKeepFiredEvents { get; }
    public static int DefaultDaysToKeepFailedEvents { get; }
    public static int DefaultBuildEventsJobBatchSize { get; }
    public static int DefaultBuildCompletionEventListenerJobTimeoutMinutes { get; }
    public static int DefaultServiceConnectionHistoryRegistrationJobTimeoutMinutes { get; }
    public static int DefaultDaysToKeepFiredCheckEvents { get; }
    public static int DefaultDaysToKeepFailedCheckEvents { get; }
    public static int DefaultCheckEventsMaxAttempts { get; }
    public static int DefaultCheckEventsBatchSizeExecute { get; }
    public static int DefaultCheckEventsMaxDegreeOfParallelism { get; }
    private static BuildConstants();
    public static string get_ProjectFileName();
    public static string get_BuildTypeFolderName();
    public static string get_ServiceApplicationName();
    public static string get_WindowsServiceName();
    public static string get_ProcessName();
    public static string get_EventSourceName();
    public static string get_BuildService();
    public static string get_BuildService3();
    public static string get_BuildLogFileName();
    public static string get_CustomEventsFileName();
    public static string get_DefaultServiceHostUrlPath();
    public static string get_Star();
    public static string get_FirewallExceptionFormat();
    public static String[] get_AllInformationTypes();
    public static String[] get_AllPropertyNames();
    public static String[] get_NoPropertyNames();
    public static int get_CurrentVersion();
    public static string get_DoNotAutoDeleteProperty();
    public static string get_BuildUriArgument();
    public static string get_TfsUrlArgument();
    public static string get_TfsProjectFileArgument();
    public static string get_LogFilePerProjectArgument();
    public static string get_DropLocationArgument();
    public static string get_BuildNumberArgument();
    public static string get_InformationNodeIdArgument();
    public static string get_OrchestrationHubName();
    public static string get_Disabled();
    public static int get_DefaultDaysToKeepDefinitionMetrics();
    public static int get_DefaultDaysToKeepDailyProjectMetrics();
    public static int get_DefaultDaysToKeepHourlyProjectMetrics();
    public static int get_DefaultDaysToKeepFiredEvents();
    public static int get_DefaultDaysToKeepFailedEvents();
    public static int get_DefaultBuildEventsJobBatchSize();
    public static int get_DefaultBuildCompletionEventListenerJobTimeoutMinutes();
    public static int get_DefaultServiceConnectionHistoryRegistrationJobTimeoutMinutes();
    public static int get_DefaultDaysToKeepFiredCheckEvents();
    public static int get_DefaultDaysToKeepFailedCheckEvents();
    public static int get_DefaultCheckEventsMaxAttempts();
    public static int get_DefaultCheckEventsBatchSizeExecute();
    public static int get_DefaultCheckEventsMaxDegreeOfParallelism();
}
public static class Microsoft.TeamFoundation.Build.Common.BuildContainerPath : object {
    private static string m_root;
    private static string m_pathSeparator;
    private static char m_pathSeparatorChar;
    public static string RootFolder { get; }
    [EditorBrowsableAttribute("1")]
public static string PathSeparator { get; }
    [EditorBrowsableAttribute("1")]
public static char PathSeparatorChar { get; }
    public static string Combine(String[] pathParts);
    public static bool IsValidPath(String& path, String& error);
    public static string GetFullPath(string path);
    public static void GetContainerIdAndPath(string buildPath, Int64& containerId, String& itemPath);
    public static string MakeRelative(string parentPath, string fullPath);
    public static string GetFolderName(string fullPath);
    public static bool IsHttpUrl(string logLocation);
    public static void GetContainerId(string buildPath, Int64& containerId);
    public static string GetItemName(string path);
    public static bool IsServerPath(string path);
    public static bool AreEqual(string path1, string path2);
    public static bool IsSubItem(string item, string parent);
    public static string get_RootFolder();
    public static string get_PathSeparator();
    public static char get_PathSeparatorChar();
}
public enum Microsoft.TeamFoundation.Build.Common.BuildDefinitionSubscriptionType : Enum {
    public int value__;
    public static BuildDefinitionSubscriptionType None;
    public static BuildDefinitionSubscriptionType User;
    public static BuildDefinitionSubscriptionType System;
    public static BuildDefinitionSubscriptionType Ignored;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Build.Common.BuildFeatureFlags : object {
    public static string BuildPollingTrigger;
    public static string AllowOutOfScopeRepository;
    public static string BuildPollingUseLibGit2Sharp;
    public static string passPercentageForTIARuns;
    public static string BuildAndReleaseResourceLimits;
    public static string WorkItemTrackingBuildAutoLinkWorkItems;
    public static string WorkItemTrackingBuildAutoLinkWorkItemsNoCache;
    public static string XamlHubEnabled;
    public static string XamlEnabled;
    public static string FireBuildEventAsync;
    public static string ScanPipelineArtifacts;
    public static string DisableGithubUseGraphQLForPollingJob;
    public static string DoNotSyncScheduleIfDesigner;
    public static string SelectTriggeringRepositoriesBasedOnSHA;
    public static string ResolveRetentionLeasesInBatch;
    public static string UsePreviousSundayToScheduleJobs;
    public static string FixBuildAuthorizationScopeOverride;
    public static string GetRunRestAPIConsumedResources;
    public static string ExitIfNoControllerMatchesURI;
    public static string HandleBuildJobScheduleDSTTransitions;
    public static string FixIsSourceBranchProtectedChange;
    public static string DoNotAllowSpoofedRequestedForField;
    public static string StoreServiceConnectionListInsteadOfId;
    public static string LogSuspiciousAccessToBuildApi;
    public static string BlockSuspiciousUpdatesToBuildArtifacts;
    public static string DisableSanitizeForBuildProperties;
    public static string DoNotLoadEndpointDetailsForRunDetails;
    public static string GetRunRestAPIWithBuildConsumedResources;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Build.Common.BuildNotificationConstants : object {
    public static string ApplicationName;
    private static int WM_APP;
    public static int UM_SHOW_BUILD_STATUS;
    public static string BuildNotificationRootKey;
    public static string Subscriptions;
    public static string SubscriptionsKey;
    public static string GatedBuilds;
    public static string AutoStartValue;
    public static string EventsSubscribedValue;
    public static string PollingIntervalValue;
    public static string TriggerSubscribedValue;
    public static string BuildDefinitionSubscriptionTypeValue;
    private static string ConfigurationMutex;
    private static BuildNotificationConstants();
    public static Mutex GetConfigurationMutex();
    public static Mutex GetConfigurationMutex(WindowsIdentity identity);
}
[ContentPropertyAttribute("Json")]
[EditorAttribute("Microsoft.TeamFoundation.Build.Controls.WpfBuildParameterEditor, Microsoft.TeamFoundation.Build.Controls", "System.Activities.Presentation.PropertyEditing.PropertyValueEditor, System.Activities.Presentation")]
public class Microsoft.TeamFoundation.Build.Common.BuildParameter : object {
    private JObject m_jsonObject;
    [EditorBrowsableAttribute("1")]
public string Json { get; public set; }
    internal JObject Value { get; }
    public BuildParameter(object value);
    internal BuildParameter(JObject jObject);
    public BuildParameter(string json);
    public string get_Json();
    public void set_Json(string value);
    internal JObject get_Value();
    public BuildParameter GetBuildParameter(string path);
    public T GetValue(string path);
    public T GetValue(string path, T value);
    private T GetObjectValueByPath(string path, bool errorWhenNoMatch, Boolean& returnedDefault);
    private T GetObjectValueByObject(object value, Boolean& returnedDefault);
    public T GetValue();
    public void SetValue(string propertyName, T newValue);
    public void Merge(BuildParameter newBuildParameter);
    public virtual string ToString();
    public IDictionary`2<string, BuildParameterType> GetPropertyTypes();
    public BuildParameterType GetArrayType(string propertyName);
    private BuildParameterType ConvertType(JTokenType type);
    private static string SerializeObjectToJson(object value);
}
public class Microsoft.TeamFoundation.Build.Common.BuildParameterException : Exception {
    public BuildParameterException(string message);
    public BuildParameterException(string message, Exception innerException);
    protected BuildParameterException(SerializationInfo info, StreamingContext context);
}
public class Microsoft.TeamFoundation.Build.Common.BuildParameterNotFoundException : BuildParameterException {
    public BuildParameterNotFoundException(string detailedMessage, Exception innerException);
}
public class Microsoft.TeamFoundation.Build.Common.BuildParameterSerializationException : BuildParameterException {
    public BuildParameterSerializationException(string detailedMessage, Exception innerException);
}
public enum Microsoft.TeamFoundation.Build.Common.BuildParameterType : Enum {
    public int value__;
    public static BuildParameterType None;
    public static BuildParameterType Object;
    public static BuildParameterType Array;
    public static BuildParameterType Integer;
    public static BuildParameterType Float;
    public static BuildParameterType String;
    public static BuildParameterType Boolean;
    public static BuildParameterType Null;
    public static BuildParameterType Date;
    public static BuildParameterType Guid;
    public static BuildParameterType Uri;
    public static BuildParameterType TimeSpan;
}
public static class Microsoft.TeamFoundation.Build.Common.BuildPath : object {
    private static string m_recursionOperator;
    private static string m_slashRecursionOperator;
    private static string m_pathSeparator;
    private static char m_pathSeparatorChar;
    private static Char[] m_splitSeparators;
    public static string RootFolder { get; }
    [EditorBrowsableAttribute("1")]
public static string RecursionOperator { get; }
    [EditorBrowsableAttribute("1")]
public static string PathSeparator { get; }
    [EditorBrowsableAttribute("1")]
public static char PathSeparatorChar { get; }
    private static BuildPath();
    public static string Combine(string parent, string relative);
    public static bool IsRecursive(string queryPath);
    public static bool IsValidPath(String& path, bool allowWildcards, String& error);
    public static DropType GetDropType(string dropLocation);
    public static string GetFullPath(string buildPath);
    public static string GetRelativePath(string basePath, string path);
    public static string GetTeamProject(string buildPath);
    public static int GetItemDepth(string buildPath);
    public static string GetItemName(string buildPath);
    [EditorBrowsableAttribute("1")]
public static string RemoveTeamProject(string path);
    [EditorBrowsableAttribute("1")]
public static string Root(string rootPath, string relativePath);
    [EditorBrowsableAttribute("1")]
public static string RootNoCanonicalize(string rootPath, string relativePath);
    [EditorBrowsableAttribute("1")]
public static void SplitTeamProject(string buildPath, String& teamProject, String& groupPath);
    public static string get_RootFolder();
    public static string get_RecursionOperator();
    public static string get_PathSeparator();
    public static char get_PathSeparatorChar();
}
[GenerateAllConstantsAttribute("")]
public static class Microsoft.TeamFoundation.Build.Common.BuildPermissions : object {
    public static int ViewBuilds;
    public static int EditBuildQuality;
    public static int RetainIndefinitely;
    public static int DeleteBuilds;
    public static int ManageBuildQualities;
    public static int DestroyBuilds;
    public static int UpdateBuildInformation;
    public static int QueueBuilds;
    public static int ManageBuildQueue;
    public static int StopBuilds;
    public static int ViewBuildDefinition;
    public static int EditBuildDefinition;
    public static int DeleteBuildDefinition;
    public static int OverrideBuildCheckInValidation;
    public static int AdministerBuildPermissions;
    public static int CreateBuildDefinition;
    public static int EditPipelineQueueConfigurationPermission;
    public static int AllPermissions;
    private static BuildPermissions();
}
public static class Microsoft.TeamFoundation.Build.Common.BuildPropertyKinds : object {
    public static Guid BuildAgent;
    public static Guid BuildController;
    public static Guid BuildDefinition;
    public static Guid BuildDeployment;
    public static Guid BuildServiceHost;
    private static BuildPropertyKinds();
}
[GenerateSpecificConstantsAttribute("")]
public static class Microsoft.TeamFoundation.Build.Common.BuildSecurity : object {
    public static Guid AdministrationNamespaceId;
    public static string BuildNamespaceIdString;
    [GenerateConstantAttribute("")]
public static Guid BuildNamespaceId;
    public static string PrivilegesToken;
    public static char NamespaceSeparator;
    private static BuildSecurity();
    [EditorBrowsableAttribute("1")]
public static String[] GetPermissionStrings(Guid namespaceId, int permissions);
    [EditorBrowsableAttribute("1")]
public static string GetSecurityTokenPath(string path);
    [EditorBrowsableAttribute("1")]
public static int ConvertAuthPermissionsToBuildPermissions(int authPermissions);
    [EditorBrowsableAttribute("1")]
public static int ConvertBuildPermissionsToAuthPermissions(int buildPermissions);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Build.Common.BuildServiceConstants : object {
    public static string AdministrationService3Identifier;
    public static string AdministrationService3Name;
    public static string AdministrationService4Identifier;
    public static string AdministrationService4Name;
    public static string AgentReservationService3Identifier;
    public static string AgentReservationService3Name;
    public static string AgentReservationService4Identifier;
    public static string AgentReservationService4Name;
    public static string BuildControllerServiceIdentifier;
    public static string BuildControllerServiceName;
    internal static string BuildPropertyService4Identifier;
    internal static string BuildPropertyService4Name;
    public static string BuildQueueService3Identifier;
    public static string BuildQueueService3Name;
    public static string BuildQueueService4Identifier;
    public static string BuildQueueService4Name;
    public static string BuildServiceIdentifier;
    public static string BuildServiceName;
    public static string BuildService3Identifier;
    public static string BuildService3Name;
    public static string BuildService4Identifier;
    public static string BuildService4Name;
    public static string BuildService5Identifier;
    public static string BuildService5Name;
    public static string BuildStoreServiceIdentifier;
    public static string BuildStoreServiceName;
    public static string SharedResourceService3Identifier;
    public static string SharedResourceService3Name;
    public static string SharedResourceService4Identifier;
    public static string SharedResourceService4Name;
    public static string BuildDeploymentServiceIdentifier;
    public static string BuildDeploymentServiceName;
    public static string HostedBuildPoolServiceIdentifier;
    public static string HostedBuildPoolServiceName;
}
public enum Microsoft.TeamFoundation.Build.Common.BuildServiceHostLabStatus : Enum {
    public int value__;
    public static BuildServiceHostLabStatus Idle;
    public static BuildServiceHostLabStatus InProgress;
}
public static class Microsoft.TeamFoundation.Build.Common.BuildSourceProviders : object {
    public static string TfVersionControl;
    public static string TfGit;
    public static string Git;
    public static string Svn;
    private static IReadOnlyList`1<string> s_supportedRefFilterPrefixes;
    private static BuildSourceProviders();
    public static bool IsTfGit(string sourceProvider);
    public static bool IsGit(string sourceProvider);
    public static bool IsTfVersionControl(string sourceProvider);
    public static string GetProperty(IDictionary`2<string, string> propertyBag, string propertyName);
}
public static class Microsoft.TeamFoundation.Build.Common.BuildSourceVersion : object {
    public static string GitPrefix;
    public static string GitSeparator;
    public static string GitLatest;
    private static BuildSourceVersion();
    public static bool IsValidSourceVersion(string sourceVersion);
    public static bool IsGit(string sourceVersion);
    public static string FormatGit(string branch, string commit);
    public static string FormatCommit(Byte[] commit);
    public static bool TryParseGit(string sourceVersion, String& branch, String& commit);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Build.Common.BuildTemplateUris : object {
    public static string TemplatesFolder;
    public static string GitTemplate;
    public static string GitTemplateFileName;
    public static string GitTemplate12FileName;
    public static string GitContinuousDeploymentTemplate12FileName;
    public static string GitUpgrardeTemplateFileName;
    public static string TfvcTemplate;
    public static string TfvcTemplate12FileName;
    public static string TfvcContinuousDeploymentTemplate12FileName;
    public static string UpgradeTemplate;
    public static string UpgradeTemplateFileName;
    public static string AzureTemplate;
    public static string AzureTemplateFileName;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Build.Common.BuildTypeConstants : object {
    public static string AvailableConfigurations;
    public static string AnyCpu;
    public static string AvailablePlatforms;
    public static string WorkspaceTemplateFileName;
    private static BuildTypeConstants();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Build.Common.BuildTypeInfo : object {
    private string m_name;
    private string m_description;
    private string m_buildMachine;
    private string m_buildDir;
    private string m_dropLocation;
    public string Name { get; }
    public string Description { get; }
    public string BuildMachine { get; }
    public string BuildDir { get; }
    public string DropLocation { get; }
    public BuildTypeInfo(string name, string description, string buildMachine, string buildDirectory, string dropLocation);
    public BuildTypeInfo(string name);
    public string get_Name();
    public string get_Description();
    public string get_BuildMachine();
    public string get_BuildDir();
    public string get_DropLocation();
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Build.Common.BuildTypeResource : object {
    private static ResourceManager s_resMgr;
    public static ResourceManager Manager { get; }
    private static BuildTypeResource();
    public static ResourceManager get_Manager();
    private static string Get(string resourceName);
    private static string Get(string resourceName, CultureInfo culture);
    public static int GetInt(string resourceName);
    public static int GetInt(string resourceName, CultureInfo culture);
    public static bool GetBool(string resourceName);
    public static bool GetBool(string resourceName, CultureInfo culture);
    private static string Format(string resourceName, Object[] args);
    private static string Format(string resourceName, CultureInfo culture, Object[] args);
    public static string ADMINISTER_BUILD();
    public static string ADMINISTER_BUILD(CultureInfo culture);
    public static string ArtifactTypeMisMatch(object arg0, object arg1);
    public static string ArtifactTypeMisMatch(object arg0, object arg1, CultureInfo culture);
    public static string BuildDeletionResultDropLocationFailure(object arg0, object arg1, object arg2);
    public static string BuildDeletionResultDropLocationFailure(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string BuildDeletionResultDropLocationFailureWithAccount(object arg0, object arg1, object arg2, object arg3);
    public static string BuildDeletionResultDropLocationFailureWithAccount(object arg0, object arg1, object arg2, object arg3, CultureInfo culture);
    public static string BuildDeletionResultLabelFailure(object arg0, object arg1, object arg2);
    public static string BuildDeletionResultLabelFailure(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string BuildDeletionResultLabelFailureWithAccount(object arg0, object arg1, object arg2, object arg3);
    public static string BuildDeletionResultLabelFailureWithAccount(object arg0, object arg1, object arg2, object arg3, CultureInfo culture);
    public static string BuildDeletionResultSymbolsFailure(object arg0, object arg1);
    public static string BuildDeletionResultSymbolsFailure(object arg0, object arg1, CultureInfo culture);
    public static string BuildDeletionResultTestFailure(object arg0, object arg1);
    public static string BuildDeletionResultTestFailure(object arg0, object arg1, CultureInfo culture);
    public static string BuildQualityUnexamined();
    public static string BuildQualityUnexamined(CultureInfo culture);
    public static string BuildStoppedBy(object arg0);
    public static string BuildStoppedBy(object arg0, CultureInfo culture);
    public static string BuildInitializingState();
    public static string BuildInitializingState(CultureInfo culture);
    public static string BuildInProgress(object arg0);
    public static string BuildInProgress(object arg0, CultureInfo culture);
    public static string BuildNumberInvalidChars(object arg0);
    public static string BuildNumberInvalidChars(object arg0, CultureInfo culture);
    public static string BuildNumberInvalidTermination(object arg0);
    public static string BuildNumberInvalidTermination(object arg0, CultureInfo culture);
    public static string BuildExeNotFound(object arg0, object arg1, object arg2);
    public static string BuildExeNotFound(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string BuildReasonNotSupported(object arg0, object arg1, object arg2);
    public static string BuildReasonNotSupported(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string TemplateVersionNotSupported(object arg0, object arg1);
    public static string TemplateVersionNotSupported(object arg0, object arg1, CultureInfo culture);
    public static string BuildRequestFromInvalidMachine(object arg0);
    public static string BuildRequestFromInvalidMachine(object arg0, CultureInfo culture);
    public static string BuildStepNotFoundException(object arg0, object arg1);
    public static string BuildStepNotFoundException(object arg0, object arg1, CultureInfo culture);
    public static string BuildTagGroup_Agent();
    public static string BuildTagGroup_Agent(CultureInfo culture);
    public static string BuildTagGroup_Build();
    public static string BuildTagGroup_Build(CultureInfo culture);
    public static string BuildTagGroup_Definition();
    public static string BuildTagGroup_Definition(CultureInfo culture);
    public static string BuildTypeNotFound(object arg0, object arg1);
    public static string BuildTypeNotFound(object arg0, object arg1, CultureInfo culture);
    public static string CannotCreateDropLocation(object arg0, object arg1);
    public static string CannotCreateDropLocation(object arg0, object arg1, CultureInfo culture);
    public static string CannotStartBuildForActiveDefinition(object arg0, object arg1);
    public static string CannotStartBuildForActiveDefinition(object arg0, object arg1, CultureInfo culture);
    public static string CannotStartBuildForUnavailableController(object arg0, object arg1);
    public static string CannotStartBuildForUnavailableController(object arg0, object arg1, CultureInfo culture);
    public static string CannotStartBuildControllerOverloaded(object arg0, object arg1);
    public static string CannotStartBuildControllerOverloaded(object arg0, object arg1, CultureInfo culture);
    public static string CheckinComment();
    public static string CheckinComment(CultureInfo culture);
    public static string CheckinPermissionDenied(object arg0, object arg1);
    public static string CheckinPermissionDenied(object arg0, object arg1, CultureInfo culture);
    public static string CheckinPluginInitializationException(object arg0, object arg1);
    public static string CheckinPluginInitializationException(object arg0, object arg1, CultureInfo culture);
    public static string CheckinPluginSubscriptionException(object arg0, object arg1);
    public static string CheckinPluginSubscriptionException(object arg0, object arg1, CultureInfo culture);
    public static string ConnectionLostError();
    public static string ConnectionLostError(CultureInfo culture);
    public static string DefinitionQueueStatus_Disabled();
    public static string DefinitionQueueStatus_Disabled(CultureInfo culture);
    public static string DefinitionQueueStatus_Enabled();
    public static string DefinitionQueueStatus_Enabled(CultureInfo culture);
    public static string DefinitionQueueStatus_Paused();
    public static string DefinitionQueueStatus_Paused(CultureInfo culture);
    public static string DefinitionTrigger_All();
    public static string DefinitionTrigger_All(CultureInfo culture);
    public static string DefinitionTrigger_None();
    public static string DefinitionTrigger_None(CultureInfo culture);
    public static string DefinitionTrigger_ContinuousIntegration();
    public static string DefinitionTrigger_ContinuousIntegration(CultureInfo culture);
    public static string DefinitionTrigger_BatchedContinuousIntegration();
    public static string DefinitionTrigger_BatchedContinuousIntegration(CultureInfo culture);
    public static string DefinitionTrigger_Schedule();
    public static string DefinitionTrigger_Schedule(CultureInfo culture);
    public static string DefinitionTrigger_ScheduleForced();
    public static string DefinitionTrigger_ScheduleForced(CultureInfo culture);
    public static string DefinitionTrigger_GatedCheckIn();
    public static string DefinitionTrigger_GatedCheckIn(CultureInfo culture);
    public static string DefinitionTrigger_BatchedGatedCheckIn();
    public static string DefinitionTrigger_BatchedGatedCheckIn(CultureInfo culture);
    public static string DeleteOptions_All();
    public static string DeleteOptions_All(CultureInfo culture);
    public static string DeleteOptions_Details();
    public static string DeleteOptions_Details(CultureInfo culture);
    public static string DeleteOptions_DropLocation();
    public static string DeleteOptions_DropLocation(CultureInfo culture);
    public static string DeleteOptions_Label();
    public static string DeleteOptions_Label(CultureInfo culture);
    public static string DeleteOptions_None();
    public static string DeleteOptions_None(CultureInfo culture);
    public static string DeleteOptions_Symbols();
    public static string DeleteOptions_Symbols(CultureInfo culture);
    public static string DeleteOptions_TestResults();
    public static string DeleteOptions_TestResults(CultureInfo culture);
    public static string DropLocationAlreadyExists(object arg0);
    public static string DropLocationAlreadyExists(object arg0, CultureInfo culture);
    public static string DuplicateBuildType(object arg0);
    public static string DuplicateBuildType(object arg0, CultureInfo culture);
    public static string EDIT_BUILD_STATUS();
    public static string EDIT_BUILD_STATUS(CultureInfo culture);
    public static string EnlistmentEmptyTag(object arg0);
    public static string EnlistmentEmptyTag(object arg0, CultureInfo culture);
    public static string Error_InvalidOperationFailure();
    public static string Error_InvalidOperationFailure(CultureInfo culture);
    public static string Error_NetFailure(object arg0);
    public static string Error_NetFailure(object arg0, CultureInfo culture);
    public static string Error_TFSFailure();
    public static string Error_TFSFailure(CultureInfo culture);
    public static string Error_UnauthorizedAccess();
    public static string Error_UnauthorizedAccess(CultureInfo culture);
    public static string ErrorInCheckInTag();
    public static string ErrorInCheckInTag(CultureInfo culture);
    public static string ErrorInGettingSolutionNamesTag(object arg0);
    public static string ErrorInGettingSolutionNamesTag(object arg0, CultureInfo culture);
    public static string ErrorInGettingVsmdiFilesTag(object arg0);
    public static string ErrorInGettingVsmdiFilesTag(object arg0, CultureInfo culture);
    public static string ErrorInSyncingConfigFilesTag();
    public static string ErrorInSyncingConfigFilesTag(CultureInfo culture);
    public static string ErrorOpeningWizardTag(object arg0);
    public static string ErrorOpeningWizardTag(object arg0, CultureInfo culture);
    public static string ErrorWorkspaceAlreadyExistsTag(object arg0);
    public static string ErrorWorkspaceAlreadyExistsTag(object arg0, CultureInfo culture);
    public static string ExceedMaxLength(object arg0);
    public static string ExceedMaxLength(object arg0, CultureInfo culture);
    public static string FailedToStartBuild();
    public static string FailedToStartBuild(CultureInfo culture);
    public static string FileSystemCannotSetAcls();
    public static string FileSystemCannotSetAcls(CultureInfo culture);
    public static string FinishedCompilationState();
    public static string FinishedCompilationState(CultureInfo culture);
    public static string FixFrameworkInstall();
    public static string FixFrameworkInstall(CultureInfo culture);
    public static string FolderOpenError(object arg0, object arg1);
    public static string FolderOpenError(object arg0, object arg1, CultureInfo culture);
    public static string FolderOpenErrorMissingPath();
    public static string FolderOpenErrorMissingPath(CultureInfo culture);
    public static string GatedCheckinSingleDefinition(object arg0, object arg1);
    public static string GatedCheckinSingleDefinition(object arg0, object arg1, CultureInfo culture);
    public static string GatedCheckinSingleDefinitionFromShelveset(object arg0);
    public static string GatedCheckinSingleDefinitionFromShelveset(object arg0, CultureInfo culture);
    public static string GatedCheckinMultipleDefinition(object arg0);
    public static string GatedCheckinMultipleDefinition(object arg0, CultureInfo culture);
    public static string GatedCheckinMultipleDefinitionWithShelveset(object arg0, object arg1);
    public static string GatedCheckinMultipleDefinitionWithShelveset(object arg0, object arg1, CultureInfo culture);
    public static string GatedCheckinOverrideDenied(object arg0, object arg1, object arg2);
    public static string GatedCheckinOverrideDenied(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string GENERIC_READ();
    public static string GENERIC_READ(CultureInfo culture);
    public static string InvalidAgentNameInvalidCharacters(object arg0);
    public static string InvalidAgentNameInvalidCharacters(object arg0, CultureInfo culture);
    public static string InvalidAgentNameTooLong(object arg0, object arg1);
    public static string InvalidAgentNameTooLong(object arg0, object arg1, CultureInfo culture);
    public static string InvalidAgentNameReservedName(object arg0);
    public static string InvalidAgentNameReservedName(object arg0, CultureInfo culture);
    public static string InvalidAgentNameInvalidTermination(object arg0);
    public static string InvalidAgentNameInvalidTermination(object arg0, CultureInfo culture);
    public static string InvalidControllerNameInvalidCharacters(object arg0);
    public static string InvalidControllerNameInvalidCharacters(object arg0, CultureInfo culture);
    public static string InvalidControllerNameTooLong(object arg0, object arg1);
    public static string InvalidControllerNameTooLong(object arg0, object arg1, CultureInfo culture);
    public static string InvalidControllerNameReservedName(object arg0);
    public static string InvalidControllerNameReservedName(object arg0, CultureInfo culture);
    public static string InvalidControllerNameInvalidTermination(object arg0);
    public static string InvalidControllerNameInvalidTermination(object arg0, CultureInfo culture);
    public static string InvalidBuildDir();
    public static string InvalidBuildDir(CultureInfo culture);
    public static string InvalidBuildRequest(object arg0);
    public static string InvalidBuildRequest(object arg0, CultureInfo culture);
    public static string InvalidBuildDirectoryForDrive(object arg0);
    public static string InvalidBuildDirectoryForDrive(object arg0, CultureInfo culture);
    public static string InvalidLogLocation(object arg0);
    public static string InvalidLogLocation(object arg0, CultureInfo culture);
    public static string InvalidDropLocation(object arg0);
    public static string InvalidDropLocation(object arg0, CultureInfo culture);
    public static string NonCanonicalBuildDirectory(object arg0);
    public static string NonCanonicalBuildDirectory(object arg0, CultureInfo culture);
    public static string RootBuildDirectory(object arg0);
    public static string RootBuildDirectory(object arg0, CultureInfo culture);
    public static string InvalidDefinitionNameInvalidCharacters(object arg0);
    public static string InvalidDefinitionNameInvalidCharacters(object arg0, CultureInfo culture);
    public static string InvalidDefinitionNameTooLong(object arg0, object arg1);
    public static string InvalidDefinitionNameTooLong(object arg0, object arg1, CultureInfo culture);
    public static string InvalidDefinitionNameReservedName(object arg0);
    public static string InvalidDefinitionNameReservedName(object arg0, CultureInfo culture);
    public static string InvalidDefinitionNameInvalidTermination(object arg0);
    public static string InvalidDefinitionNameInvalidTermination(object arg0, CultureInfo culture);
    public static string InvalidDropDir(object arg0);
    public static string InvalidDropDir(object arg0, CultureInfo culture);
    public static string InvalidPathContainsWildcards(object arg0);
    public static string InvalidPathContainsWildcards(object arg0, CultureInfo culture);
    public static string InvalidPathMustContainRoot(object arg0);
    public static string InvalidPathMustContainRoot(object arg0, CultureInfo culture);
    public static string InvalidPathTeamProjectRequired(object arg0);
    public static string InvalidPathTeamProjectRequired(object arg0, CultureInfo culture);
    public static string InvalidPathVolumeRequired(object arg0);
    public static string InvalidPathVolumeRequired(object arg0, CultureInfo culture);
    public static string InvalidPlatformFlavorInvalidCharacters(object arg0);
    public static string InvalidPlatformFlavorInvalidCharacters(object arg0, CultureInfo culture);
    public static string InvalidPathReservedName(object arg0);
    public static string InvalidPathReservedName(object arg0, CultureInfo culture);
    public static string InvalidServiceHostNameInvalidCharacters(object arg0);
    public static string InvalidServiceHostNameInvalidCharacters(object arg0, CultureInfo culture);
    public static string InvalidServiceHostNameTooLong(object arg0, object arg1);
    public static string InvalidServiceHostNameTooLong(object arg0, object arg1, CultureInfo culture);
    public static string InvalidServiceHostNameReservedName(object arg0);
    public static string InvalidServiceHostNameReservedName(object arg0, CultureInfo culture);
    public static string InvalidServiceHostNameInvalidTermination(object arg0);
    public static string InvalidServiceHostNameInvalidTermination(object arg0, CultureInfo culture);
    public static string InvalidSharedResourceName(object arg0, object arg1);
    public static string InvalidSharedResourceName(object arg0, object arg1, CultureInfo culture);
    public static string InvalidShelvesetName(object arg0, object arg1);
    public static string InvalidShelvesetName(object arg0, object arg1, CultureInfo culture);
    public static string InvalidShelvesetOwner(object arg0, object arg1);
    public static string InvalidShelvesetOwner(object arg0, object arg1, CultureInfo culture);
    public static string MissingShelvesetOwner(object arg0);
    public static string MissingShelvesetOwner(object arg0, CultureInfo culture);
    public static string InvalidUncPath(object arg0);
    public static string InvalidUncPath(object arg0, CultureInfo culture);
    public static string ServerPathNotSupported(object arg0);
    public static string ServerPathNotSupported(object arg0, CultureInfo culture);
    public static string InvalidUriNotAbsolute(object arg0);
    public static string InvalidUriNotAbsolute(object arg0, CultureInfo culture);
    public static string InvalidBuildTypeNoDownload(object arg0);
    public static string InvalidBuildTypeNoDownload(object arg0, CultureInfo culture);
    public static string InvalidBuildType(object arg0, object arg1);
    public static string InvalidBuildType(object arg0, object arg1, CultureInfo culture);
    public static string InvalidBuildTypeFile(object arg0, object arg1);
    public static string InvalidBuildTypeFile(object arg0, object arg1, CultureInfo culture);
    public static string InvalidBuildTypeFileFormat(object arg0);
    public static string InvalidBuildTypeFileFormat(object arg0, CultureInfo culture);
    public static string InvalidInput(object arg0);
    public static string InvalidInput(object arg0, CultureInfo culture);
    public static string InvalidInputAtIndex(object arg0, object arg1, object arg2);
    public static string InvalidInputAtIndex(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string InvalidInputParameterOutOfRange(object arg0, object arg1);
    public static string InvalidInputParameterOutOfRange(object arg0, object arg1, CultureInfo culture);
    public static string InvalidInputNull();
    public static string InvalidInputNull(CultureInfo culture);
    public static string InvalidInputParameterNull(object arg0);
    public static string InvalidInputParameterNull(object arg0, CultureInfo culture);
    public static string MergeConflictTag();
    public static string MergeConflictTag(CultureInfo culture);
    public static string MissingAgentName();
    public static string MissingAgentName(CultureInfo culture);
    public static string MissingControllerName();
    public static string MissingControllerName(CultureInfo culture);
    public static string MissingDefinitionName();
    public static string MissingDefinitionName(CultureInfo culture);
    public static string MissingBuildDirectory();
    public static string MissingBuildDirectory(CultureInfo culture);
    public static string MissingBuildMachine();
    public static string MissingBuildMachine(CultureInfo culture);
    public static string MissingBuildNumber();
    public static string MissingBuildNumber(CultureInfo culture);
    public static string MissingBuildType();
    public static string MissingBuildType(CultureInfo culture);
    public static string MissingServiceHostName();
    public static string MissingServiceHostName(CultureInfo culture);
    public static string PermissionDenied(object arg0);
    public static string PermissionDenied(object arg0, CultureInfo culture);
    public static string PlatformFlavorFormatText(object arg0, object arg1);
    public static string PlatformFlavorFormatText(object arg0, object arg1, CultureInfo culture);
    public static string PortfolioProjectDoesNotExistTag(object arg0);
    public static string PortfolioProjectDoesNotExistTag(object arg0, CultureInfo culture);
    public static string ProcessTemplateDeleted();
    public static string ProcessTemplateDeleted(CultureInfo culture);
    public static string ProcessTemplateDeletedWithServerPath(object arg0);
    public static string ProcessTemplateDeletedWithServerPath(object arg0, CultureInfo culture);
    public static string ColumnRetentionPolicyHeaderText();
    public static string ColumnRetentionPolicyHeaderText(CultureInfo culture);
    public static string ColumnDeleteOptionsHeaderText();
    public static string ColumnDeleteOptionsHeaderText(CultureInfo culture);
    public static string QueuePriority_High();
    public static string QueuePriority_High(CultureInfo culture);
    public static string QueuePriority_AboveNormal();
    public static string QueuePriority_AboveNormal(CultureInfo culture);
    public static string QueuePriority_Normal();
    public static string QueuePriority_Normal(CultureInfo culture);
    public static string QueuePriority_BelowNormal();
    public static string QueuePriority_BelowNormal(CultureInfo culture);
    public static string QueuePriority_Low();
    public static string QueuePriority_Low(CultureInfo culture);
    public static string Reason_All();
    public static string Reason_All(CultureInfo culture);
    public static string Reason_None();
    public static string Reason_None(CultureInfo culture);
    public static string Reason_Manual();
    public static string Reason_Manual(CultureInfo culture);
    public static string Reason_IndividualCI();
    public static string Reason_IndividualCI(CultureInfo culture);
    public static string Reason_BatchedCI();
    public static string Reason_BatchedCI(CultureInfo culture);
    public static string Reason_Schedule();
    public static string Reason_Schedule(CultureInfo culture);
    public static string Reason_ScheduleForced();
    public static string Reason_ScheduleForced(CultureInfo culture);
    public static string Reason_UserCreated();
    public static string Reason_UserCreated(CultureInfo culture);
    public static string Reason_ValidateShelveset();
    public static string Reason_ValidateShelveset(CultureInfo culture);
    public static string Reason_CheckinShelveset();
    public static string Reason_CheckinShelveset(CultureInfo culture);
    public static string Reason_Triggered();
    public static string Reason_Triggered(CultureInfo culture);
    public static string RetentionPolicy_KeepAll();
    public static string RetentionPolicy_KeepAll(CultureInfo culture);
    public static string RetentionPolicy_KeepNone();
    public static string RetentionPolicy_KeepNone(CultureInfo culture);
    public static string RetentionPolicy_KeepLatest();
    public static string RetentionPolicy_KeepLatest(CultureInfo culture);
    public static string RetentionPolicy_KeepLatestN_Format(object arg0);
    public static string RetentionPolicy_KeepLatestN_Format(object arg0, CultureInfo culture);
    public static string ServiceAccountUnauthorized(object arg0, object arg1);
    public static string ServiceAccountUnauthorized(object arg0, object arg1, CultureInfo culture);
    public static string SyncState();
    public static string SyncState(CultureInfo culture);
    public static string SyncCompletedState();
    public static string SyncCompletedState(CultureInfo culture);
    public static string StartedCompilationState();
    public static string StartedCompilationState(CultureInfo culture);
    public static string StartedTestingState();
    public static string StartedTestingState(CultureInfo culture);
    public static string SourceControlDoesNotExist();
    public static string SourceControlDoesNotExist(CultureInfo culture);
    public static string START_BUILD();
    public static string START_BUILD(CultureInfo culture);
    public static string Status_All();
    public static string Status_All(CultureInfo culture);
    public static string Status_Available();
    public static string Status_Available(CultureInfo culture);
    public static string Status_Canceled();
    public static string Status_Canceled(CultureInfo culture);
    public static string Status_Completed();
    public static string Status_Completed(CultureInfo culture);
    public static string Status_Disabled();
    public static string Status_Disabled(CultureInfo culture);
    public static string Status_Enabled();
    public static string Status_Enabled(CultureInfo culture);
    public static string Status_Failed();
    public static string Status_Failed(CultureInfo culture);
    public static string Status_Initializing();
    public static string Status_Initializing(CultureInfo culture);
    public static string Status_InProgress();
    public static string Status_InProgress(CultureInfo culture);
    public static string Status_None();
    public static string Status_None(CultureInfo culture);
    public static string Status_NotStarted();
    public static string Status_NotStarted(CultureInfo culture);
    public static string Status_Offline();
    public static string Status_Offline(CultureInfo culture);
    public static string Status_PartiallySucceeded();
    public static string Status_PartiallySucceeded(CultureInfo culture);
    public static string Status_Postponed();
    public static string Status_Postponed(CultureInfo culture);
    public static string Status_Queued();
    public static string Status_Queued(CultureInfo culture);
    public static string Status_Retry();
    public static string Status_Retry(CultureInfo culture);
    public static string Status_Stopped();
    public static string Status_Stopped(CultureInfo culture);
    public static string Status_Succeeded();
    public static string Status_Succeeded(CultureInfo culture);
    public static string Status_V1_Succeeded();
    public static string Status_V1_Succeeded(CultureInfo culture);
    public static string Status_Unavailable();
    public static string Status_Unavailable(CultureInfo culture);
    public static string Status_Unknown();
    public static string Status_Unknown(CultureInfo culture);
    public static string Status_Unreachable();
    public static string Status_Unreachable(CultureInfo culture);
    public static string TaskCannotAddBuildStep(object arg0);
    public static string TaskCannotAddBuildStep(object arg0, CultureInfo culture);
    public static string TaskBuildStepException(object arg0, object arg1);
    public static string TaskBuildStepException(object arg0, object arg1, CultureInfo culture);
    public static string InvalidPropertyValueException(object arg0, object arg1, object arg2);
    public static string InvalidPropertyValueException(object arg0, object arg1, object arg2, CultureInfo culture);
    public static string TestCompletedState();
    public static string TestCompletedState(CultureInfo culture);
    public static string ThreadPoolFailure();
    public static string ThreadPoolFailure(CultureInfo culture);
    public static string UnableToSetAcl(object arg0, object arg1);
    public static string UnableToSetAcl(object arg0, object arg1, CultureInfo culture);
    public static string UnableToSetPermissionsOnDropDir(object arg0, object arg1);
    public static string UnableToSetPermissionsOnDropDir(object arg0, object arg1, CultureInfo culture);
    public static string UnexpectedTFServerException(object arg0, object arg1);
    public static string UnexpectedTFServerException(object arg0, object arg1, CultureInfo culture);
    public static string UPDATE_BUILD();
    public static string UPDATE_BUILD(CultureInfo culture);
    public static string VSNotFound();
    public static string VSNotFound(CultureInfo culture);
    public static string ResponseFileReadException(object arg0);
    public static string ResponseFileReadException(object arg0, CultureInfo culture);
    public static string ResponseFileWriteException(object arg0);
    public static string ResponseFileWriteException(object arg0, CultureInfo culture);
    public static string InvalidAgentStatus(object arg0);
    public static string InvalidAgentStatus(object arg0, CultureInfo culture);
    public static string Unknown();
    public static string Unknown(CultureInfo culture);
    public static string DeleteBuildDefinitionPermission();
    public static string DeleteBuildDefinitionPermission(CultureInfo culture);
    public static string DeleteBuildsPermission();
    public static string DeleteBuildsPermission(CultureInfo culture);
    public static string DestroyBuildsPermission();
    public static string DestroyBuildsPermission(CultureInfo culture);
    public static string EditBuildDefinitionPermission();
    public static string EditBuildDefinitionPermission(CultureInfo culture);
    public static string EditBuildQualityPermission();
    public static string EditBuildQualityPermission(CultureInfo culture);
    public static string ManageBuildQualitiesPermission();
    public static string ManageBuildQualitiesPermission(CultureInfo culture);
    public static string ManageBuildQueuePermission();
    public static string ManageBuildQueuePermission(CultureInfo culture);
    public static string ManageBuildResourcesPermission();
    public static string ManageBuildResourcesPermission(CultureInfo culture);
    public static string QueueBuildsPermission();
    public static string QueueBuildsPermission(CultureInfo culture);
    public static string RetainIndefinitelyPermission();
    public static string RetainIndefinitelyPermission(CultureInfo culture);
    public static string StopBuildsPermission();
    public static string StopBuildsPermission(CultureInfo culture);
    public static string UpdateBuildInformationPermission();
    public static string UpdateBuildInformationPermission(CultureInfo culture);
    public static string UseBuildResourcesPermission();
    public static string UseBuildResourcesPermission(CultureInfo culture);
    public static string ViewBuildDefinitionPermission();
    public static string ViewBuildDefinitionPermission(CultureInfo culture);
    public static string ViewBuildResourcesPermission();
    public static string ViewBuildResourcesPermission(CultureInfo culture);
    public static string ViewBuildsPermission();
    public static string ViewBuildsPermission(CultureInfo culture);
    public static string OverrideBuildCheckInPermission();
    public static string OverrideBuildCheckInPermission(CultureInfo culture);
    public static string BuildServicesGroupDescription();
    public static string BuildServicesGroupDescription(CultureInfo culture);
    public static string CollectionBuildServicesGroupName();
    public static string CollectionBuildServicesGroupName(CultureInfo culture);
    public static string InvalidControllerStatus(object arg0);
    public static string InvalidControllerStatus(object arg0, CultureInfo culture);
    public static string InvalidAccount(object arg0);
    public static string InvalidAccount(object arg0, CultureInfo culture);
    public static string InvalidContractVersion(object arg0);
    public static string InvalidContractVersion(object arg0, CultureInfo culture);
    public static string BuildAdministratorsGroupDescription();
    public static string BuildAdministratorsGroupDescription(CultureInfo culture);
    public static string CollectionBuildAdministratorsGroupName();
    public static string CollectionBuildAdministratorsGroupName(CultureInfo culture);
    public static string CannotStartBuildGatedInProgress(object arg0, object arg1);
    public static string CannotStartBuildGatedInProgress(object arg0, object arg1, CultureInfo culture);
    public static string AdministerBuildPermissionsPermission();
    public static string AdministerBuildPermissionsPermission(CultureInfo culture);
    public static string AdministerBuildResourcePermissionsPermission();
    public static string AdministerBuildResourcePermissionsPermission(CultureInfo culture);
    public static string EditPipelineQueueConfigurationPermission();
    public static string EditPipelineQueueConfigurationPermission(CultureInfo culture);
    public static string InvalidBuildFileContainerId(object arg0);
    public static string InvalidBuildFileContainerId(object arg0, CultureInfo culture);
    public static string InvalidBuildFileContainerRoot(object arg0);
    public static string InvalidBuildFileContainerRoot(object arg0, CultureInfo culture);
    public static string BuildContainerPathNotSupported(object arg0);
    public static string BuildContainerPathNotSupported(object arg0, CultureInfo culture);
    public static string InvalidUriToolId(object arg0, object arg1);
    public static string InvalidUriToolId(object arg0, object arg1, CultureInfo culture);
    public static string BuildParameterDeserializationException(object arg0);
    public static string BuildParameterDeserializationException(object arg0, CultureInfo culture);
    public static string BuildParameterElementNotFoundException(object arg0);
    public static string BuildParameterElementNotFoundException(object arg0, CultureInfo culture);
    public static string ManagePipelinePoliciesPermission();
    public static string ManagePipelinePoliciesPermission(CultureInfo culture);
    public static string CreateBuildDefinitionPermission();
    public static string CreateBuildDefinitionPermission(CultureInfo culture);
}
public static class Microsoft.TeamFoundation.Build.Common.BuildWellKnownBatchIds : object {
    public static Guid DynamicBatch;
    public static string DynamicBatchId;
    private static BuildWellKnownBatchIds();
}
public static class Microsoft.TeamFoundation.Build.Common.BuildWellKnownGroups : object {
    public static SecurityIdentifier BuildServicesIdentifier { get; }
    public static SecurityIdentifier BuildAdministratorsIdentifier { get; }
    public static SecurityIdentifier get_BuildServicesIdentifier();
    public static SecurityIdentifier get_BuildAdministratorsIdentifier();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Build.Common.CertHelper : object {
    private static string RsaSha1Oid;
    public static X509Certificate2 CreateCertificate(X500DistinguishedName subjectName, string friendlyName);
    public static X500DistinguishedName CreateContinuousDeploymentDistinguishedName();
    public static string CreateContinuousDeploymentCertificateFriendlyName();
    private static CngKey Create2048RsaKey();
    private static X509Certificate2 CreateSelfSignedCertificate(CngKey key, X500DistinguishedName subjectName);
    [SecurityCriticalAttribute]
private static SafeCertContextHandle CreateSelfSignedCertificate(CngKey key, bool takeOwnershipOfKey, Byte[] subjectName, X509CertificateCreationOptions creationOptions, string signatureAlgorithmOid, DateTime startTime, DateTime endTime);
    private static SafeCertContextHandle CertCreateSelfSignCertificate(SafeNCryptKeyHandle hCryptProvOrNCryptKey, CRYPTOAPI_BLOB& pSubjectIssuerBlob, X509CertificateCreationOptions dwFlags, CRYPT_KEY_PROV_INFO& pKeyProvInfo, CRYPT_ALGORITHM_IDENTIFIER& pSignatureAlgorithm, SYSTEMTIME& pStartTime, SYSTEMTIME& pEndTime, CERT_EXTENSIONS& pExtensions);
    private static bool CertSetCertificateContextProperty(SafeCertContextHandle pCertContext, CertificateProperty dwPropId, CertificatePropertySetFlags dwFlags, CERT_KEY_CONTEXT& pvData);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Build.Common.CheckInOutcomeValues : object {
    public static string Succeeded;
    public static string NoChangesToCheckIn;
    private static CheckInOutcomeValues();
}
public enum Microsoft.TeamFoundation.Build.Common.CleanupPolicy : Enum {
    public int value__;
    public static CleanupPolicy DeleteProfile;
    public static CleanupPolicy Reimage;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Build.Common.CommonInformationHelper : object {
    public static string GetString(IDictionary`2<string, string> dictionary, string fieldName);
    public static bool GetBool(IDictionary`2<string, string> dictionary, string fieldName);
    public static void SetBool(IDictionary`2<string, string> dictionary, string fieldName, bool value);
    public static DateTime GetDateTime(IDictionary`2<string, string> dictionary, string fieldName);
    public static void SetDateTime(IDictionary`2<string, string> dictionary, string fieldName, DateTime value);
    public static T GetEnum(IDictionary`2<string, string> dictionary, string fieldName, T defaultValue);
    public static void SetEnum(IDictionary`2<string, string> dictionary, string fieldName, T value);
    public static int GetInt(IDictionary`2<string, string> dictionary, string fieldName);
    public static int GetInt(IDictionary`2<string, string> dictionary, string fieldName, int invalidValue);
    public static void SetInt(IDictionary`2<string, string> dictionary, string fieldName, int value);
    public static Uri GetUri(IDictionary`2<string, string> dictionary, string fieldName);
    public static void SetUri(IDictionary`2<string, string> dictionary, string fieldName, Uri value);
    public static Guid GetGuid(IDictionary`2<string, string> dictionary, string fieldName);
    public static void SetGuid(IDictionary`2<string, string> dictionary, string fieldName, Guid value);
    public static DateTime ToDateTime(string value);
    public static T ToEnum(string value, T defaultValue);
    public static int ToInt(string value);
    public static int ToInt(string value, int invalidValue);
    public static string EnumToString(T value);
    public static string ToString(DateTime value);
    public static string ToString(int value);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Build.Common.ConfigurationHelper : object {
    private static string s_logonAsServiceName;
    [CLSCompliantAttribute("False")]
public static UInt32 ServiceNoChange;
    private static HTTPAPI_VERSION HttpApiVersion;
    private static UInt32 HTTP_INITIALIZE_CONFIG;
    internal static LSA_UNICODE_STRING[] LogonAsServiceRights { get; }
    private static ConfigurationHelper();
    public static bool FreeUrlPrefix(string urlPrefix);
    private static bool ReserveUrlPrefixInternal(string urlPrefix, string securityDescriptor);
    public static bool ReserveUrlPrefix(string userName, string urlPrefix);
    public static bool AddSslCertificate(IPAddress address, int port, X509Certificate certificate, Guid appId, bool requireClientCertificates, StoreName storeName);
    public static bool DeleteSslCertificate(IPAddress address, int port);
    internal static Byte[] GetSidBinaryFromWindows(string domain, string user);
    public static bool GrantLogonAsService(string domain, string username);
    public static bool RevokeLogonAsService(string domain, string username);
    public static bool GetUserHasLogonAsService(string domain, string username);
    internal static LSA_UNICODE_STRING[] get_LogonAsServiceRights();
    public static bool TryQueryServiceConfig(string serviceName, QUERY_SERVICE_CONFIG& serviceConfig);
    private static ushort htons(ushort hostshort);
    private static ushort ntohs(ushort hostshort);
    internal static bool QueryServiceConfig(SafeHandle hService, IntPtr intPtrQueryConfig, int cbBufSize, Int32& pcbBytesNeeded);
    [EditorBrowsableAttribute("1")]
[CLSCompliantAttribute("False")]
public static int ChangeServiceConfig(SafeHandle handle, UInt32 type, UInt32 startType, UInt32 errorControl, string binaryPathName, string loadOrderGroup, string tagId, string dependencies, string accountName, string password, string displayName);
    private static int HttpDeleteServiceConfiguration(IntPtr ServiceIntPtr, HTTP_SERVICE_CONFIG_ID ConfigId, HTTP_SERVICE_CONFIG_URLACL_SET& pConfigInformation, int ConfigInformationLength, IntPtr pOverlapped);
    private static int HttpDeleteServiceConfiguration(IntPtr ServiceIntPtr, HTTP_SERVICE_CONFIG_ID ConfigId, HTTP_SERVICE_CONFIG_SSL_SET& pConfigInformation, int ConfigInformationLength, IntPtr pOverlapped);
    private static int HttpInitialize(HTTPAPI_VERSION Version, UInt32 Flags, IntPtr pReserved);
    private static int HttpSetServiceConfiguration(IntPtr ServiceIntPtr, HTTP_SERVICE_CONFIG_ID ConfigId, HTTP_SERVICE_CONFIG_URLACL_SET& pConfigInformation, int ConfigInformationLength, IntPtr pOverlapped);
    private static int HttpSetServiceConfiguration(IntPtr ServiceIntPtr, HTTP_SERVICE_CONFIG_ID ConfigId, HTTP_SERVICE_CONFIG_SSL_SET& pConfigInformation, int ConfigInformationLength, IntPtr pOverlapped);
    private static int HttpTerminate(UInt32 Flags, IntPtr pReserved);
}
public static class Microsoft.TeamFoundation.Build.Common.DeploymentInformationTypes : object {
    public static string Build;
    public static string Deploy;
    public static string ConnectToSnapshot;
    public static string Test;
    private static DeploymentInformationTypes();
}
public enum Microsoft.TeamFoundation.Build.Common.DropType : Enum {
    public int value__;
    public static DropType Unknown;
    public static DropType None;
    public static DropType Server;
    public static DropType Unc;
    public static DropType Uri;
    public static DropType VersionControl;
}
[EditorBrowsableAttribute("1")]
[DataContractAttribute]
public class Microsoft.TeamFoundation.Build.Common.ElasticBuildAuthorization : object {
    [CompilerGeneratedAttribute]
private Byte[] <AccessToken>k__BackingField;
    [CompilerGeneratedAttribute]
private string <PoolName>k__BackingField;
    [CompilerGeneratedAttribute]
private string <RoleInstance>k__BackingField;
    [DataMemberAttribute]
public Byte[] AccessToken { get; public set; }
    [DataMemberAttribute]
public string PoolName { get; public set; }
    [DataMemberAttribute]
public string RoleInstance { get; public set; }
    [CompilerGeneratedAttribute]
public Byte[] get_AccessToken();
    [CompilerGeneratedAttribute]
public void set_AccessToken(Byte[] value);
    [CompilerGeneratedAttribute]
public string get_PoolName();
    [CompilerGeneratedAttribute]
public void set_PoolName(string value);
    [CompilerGeneratedAttribute]
public string get_RoleInstance();
    [CompilerGeneratedAttribute]
public void set_RoleInstance(string value);
}
[ExtensionAttribute]
public static class Microsoft.TeamFoundation.Build.Common.EnumerableExtensions : object {
    [IteratorStateMachineAttribute("Microsoft.TeamFoundation.Build.Common.EnumerableExtensions/<Buffer>d__0`1")]
[ExtensionAttribute]
public static IEnumerable`1<IList`1<TSource>> Buffer(IEnumerable`1<TSource> source, int size, bool share);
}
public static class Microsoft.TeamFoundation.Build.Common.ErrorWarningTypes : object {
    public static string Compilation;
    public static string StaticAnalysis;
    public static string Test;
    private static ErrorWarningTypes();
}
public static class Microsoft.TeamFoundation.Build.Common.GatedCheckInErrorCode : object {
    public static int ShelvesetCreated;
    public static int ShelvesetNotCreated;
    public static int BuildSubmitted;
    public static int OverrideDenied;
}
public class Microsoft.TeamFoundation.Build.Common.HostedBuildSettings : object {
    [CompilerGeneratedAttribute]
private string <ConnectionString>k__BackingField;
    [CompilerGeneratedAttribute]
private string <SubscriptionId>k__BackingField;
    [CompilerGeneratedAttribute]
private string <ManagementCertificate>k__BackingField;
    public string ConnectionString { get; public set; }
    public string SubscriptionId { get; public set; }
    public string ManagementCertificate { get; public set; }
    [CompilerGeneratedAttribute]
public string get_ConnectionString();
    [CompilerGeneratedAttribute]
public void set_ConnectionString(string value);
    [CompilerGeneratedAttribute]
public string get_SubscriptionId();
    [CompilerGeneratedAttribute]
public void set_SubscriptionId(string value);
    [CompilerGeneratedAttribute]
public string get_ManagementCertificate();
    [CompilerGeneratedAttribute]
public void set_ManagementCertificate(string value);
}
public static class Microsoft.TeamFoundation.Build.Common.InformationFields : object {
    public static string AssemblySignature;
    public static string ActivityInstanceId;
    public static string ActivityType;
    public static string AssignedTo;
    public static string Author;
    public static string ChangesetId;
    public static string ChangesetUri;
    public static string CheckedInBy;
    public static string CheckInCommitted;
    public static string Code;
    public static string Comment;
    public static string CommitId;
    public static string Committer;
    public static string CompilationErrors;
    public static string CompilationWarnings;
    public static string ContextId;
    public static string DisplayText;
    public static string EndLineNumber;
    public static string ErrorType;
    public static string File;
    public static string FinishTime;
    internal static string FirstAgentName;
    internal static string FirstAgentUri;
    public static string Flavor;
    public static string GitUri;
    public static string Importance;
    public static string LineNumber;
    public static string LocalPath;
    public static string LogFile;
    public static string Message;
    public static string Name;
    public static string NumBytes;
    public static string NumFiles;
    public static string OriginalName;
    public static string Owner;
    public static string OriginalOwner;
    public static string Platform;
    public static string PossibleAgents;
    public static string ProjectFile;
    public static string Properties;
    public static string QualifiedName;
    public static string RelativeServerLogDirectory;
    public static string RequestId;
    public static string RequestedBy;
    public static string ReservationStatus;
    public static string ReservedAgentName;
    public static string ReservedAgentUri;
    public static string SectionHeader;
    public static string SectionName;
    public static string SectionPriority;
    public static string ServerPath;
    public static string StartTime;
    public static string State;
    public static string StaticAnalysisErrors;
    public static string StaticAnalysisWarnings;
    public static string Status;
    internal static string StorePath;
    public static string TargetNames;
    public static string Timestamp;
    public static string TotalCompilationErrors;
    public static string TotalCompilationWarnings;
    public static string TotalOtherErrorsCount;
    public static string TotalStaticAnalysisErrors;
    public static string TotalStaticAnalysisWarnings;
    public static string Title;
    internal static string TransactionId;
    public static string Uri;
    public static string Url;
    public static string WarningType;
    public static string WorkItemId;
    public static string WorkItemUri;
    public static string WorkItemType;
    public static string DeploymentInformationType;
    public static string TotalTests;
    public static string PassedTests;
    public static string FailedTests;
    public static string NotImpactedTests;
    public static string OtherTests;
    public static string TestRunDuration;
    public static string TestResultPassPercent;
    public static string WebAccessUri;
    [ObsoleteAttribute("This property has been deprecated. Please remove all references.", "False")]
public static string BlocksCovered;
    [ObsoleteAttribute("This property has been deprecated. Please remove all references.", "False")]
public static string BlocksNotCovered;
    [ObsoleteAttribute("This property has been deprecated. Please remove all references.", "False")]
public static string LinesCovered;
    [ObsoleteAttribute("This property has been deprecated. Please remove all references.", "False")]
public static string LinesNotCovered;
    [ObsoleteAttribute("This property has been deprecated. Please remove all references.", "False")]
public static string LinesPartiallyCovered;
    [ObsoleteAttribute("This property has been deprecated. Please remove all references.", "False")]
public static string IsBuildCoverageProcessing;
    [ObsoleteAttribute("This property has been deprecated. Please remove all references.", "False")]
public static string RunId;
    [ObsoleteAttribute("This property has been deprecated. Please remove all references.", "False")]
public static string RunPassed;
    [ObsoleteAttribute("This property has been deprecated. Please remove all references.", "False")]
public static string RunUser;
    [ObsoleteAttribute("This property has been deprecated. Please remove all references.", "False")]
public static string TestsFailed;
    [ObsoleteAttribute("This property has been deprecated. Please remove all references.", "False")]
public static string TestsPassed;
    [ObsoleteAttribute("This property has been deprecated. Please remove all references.", "False")]
public static string TestsTotal;
    private static InformationFields();
}
public static class Microsoft.TeamFoundation.Build.Common.InformationTypes : object {
    public static string ActivityProperties;
    public static string ActivityTracking;
    public static string AgentScopeActivityTracking;
    public static string AssociatedChangeset;
    public static string AssociatedCommit;
    public static string AssociatedWorkItem;
    public static string BuildError;
    public static string BuildMessage;
    public static string BuildProject;
    public static string BuildStep;
    public static string BuildWarning;
    public static string CheckInOutcome;
    public static string CompilationSummary;
    public static string ConfigurationSummary;
    public static string DeploymentInformation;
    public static string ExternalLink;
    public static string GetStatus;
    public static string OpenedWorkItem;
    public static string CustomSummaryInformation;
    public static string OtherBuildErrorsCount;
    public static string AutomatedTests;
    public static string ReshelvedShelveset;
    [EditorBrowsableAttribute("1")]
public static string RunOnceState;
    [EditorBrowsableAttribute("1")]
public static string SymStoreTransaction;
    [EditorBrowsableAttribute("1")]
public static string IntermediateLogInformation;
    [ObsoleteAttribute("This property has been deprecated. Please remove all references.", "False")]
public static string CodeCoverageSummary;
    [ObsoleteAttribute("This property has been deprecated. Please remove all references.", "False")]
public static string TestSummary;
    private static InformationTypes();
}
internal enum Microsoft.TeamFoundation.Build.Common.LabCompatibilityResult : Enum {
    public int value__;
    public static LabCompatibilityResult OK;
    public static LabCompatibilityResult Fail;
    public static LabCompatibilityResult WarnUpgrade;
    public static LabCompatibilityResult InformUpgrade;
}
internal static class Microsoft.TeamFoundation.Build.Common.LabCompatibilityUtils : object {
    internal static LabCompatibilityResult CheckCompatibility(Version preferredVersion, Version givenVersion);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Build.Common.LegacyBuildTypeHelper : object {
    public static BuildTypeInfo ParseBuildTypeFile(string buildTypeName, string fileName, bool allowZeroLengthFile, String& version);
}
internal class Microsoft.TeamFoundation.Build.Common.LsaPolicy : object {
    [CompilerGeneratedAttribute]
private IntPtr <Handle>k__BackingField;
    public IntPtr Handle { get; public set; }
    [CompilerGeneratedAttribute]
public IntPtr get_Handle();
    [CompilerGeneratedAttribute]
public void set_Handle(IntPtr value);
    private sealed virtual override void System.IDisposable.Dispose();
}
public static class Microsoft.TeamFoundation.Build.Common.MachinePoolDefaults : object {
    public static KeyValuePair`2[] DefaultProperties;
    public static long DefaultLeaseTimeout;
    public static long DefaultStatusReportInterval;
    public static long DefaultIdleTimeout;
    public static long DefaultMinRunDuration;
    public static long DefaultMaxQueuedDuration;
    public static long DefaultTargetQueuedDuration;
    public static double DefaultServiceLevel;
    public static long DefaultDisconnectionTimeout;
    private static long MicrosecondsPerSecond;
    private static MachinePoolDefaults();
}
public static class Microsoft.TeamFoundation.Build.Common.MachinePoolProperties : object {
    public static string Description;
    public static string VMImageName;
    public static string VMSize;
    public static string IsDefault;
    public static string MachineCount;
    public static string ControllerName;
    public static string ServiceUserName;
    public static string ServicePassword;
    public static string StatusReportInterval;
    public static string IdleTimeout;
    public static string LeaseTimeout;
    public static string CleanupPolicyProperty;
    public static string MinRunDuration;
    public static string MaxQueuedDuration;
    public static string TargetQueuedDuration;
    public static string ServiceLevel;
    public static string DisconnectTimeout;
}
public static class Microsoft.TeamFoundation.Build.Common.PermissionStringConstants : object {
    public static string ViewBuildResources;
    public static string ManageBuildResources;
    public static string UpdateBuildInformation;
    public static string UseBuildResources;
    public static string ViewBuilds;
    public static string EditBuildQuality;
    public static string RetainIndefinitely;
    public static string DeleteBuilds;
    public static string ManageBuildQualities;
    public static string DestroyBuilds;
    public static string QueueBuilds;
    public static string ManageBuildQueue;
    public static string StopBuilds;
    public static string ViewBuildDefinition;
    public static string EditBuildDefinition;
    public static string DeleteBuildDefinition;
    public static string OverrideBuildCheckInValidation;
    public static string AdministerBuildPermissions;
    public static string AdministerBuildResourcePermissions;
    public static string ManagePipelinePolicies;
    public static string CreateBuildDefinition;
    public static string EditPipelineQueueConfigurationPermission;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Build.Common.RegistryKeys : object {
    public static string RegistrySettingsPath;
    public static string ElasticQueueRoot;
    public static string MachinePoolRoot;
    public static string AlertsForPool;
    public static string QueueConnectionString;
    public static string SubscriptionId;
    public static string ManagementCertificate;
    public static string MachinePoolProperties;
    public static string MachinePoolHostedServiceName;
    public static string MachinePoolPoolAuthToken;
    public static string MachinePoolDeployments;
    public static string MachinePoolVMImages;
    public static string DeleteBuildsBatchSize;
    public static string BuildRetentionPolicyLastEvaluated;
    public static string QueuePausedBuildsBatchSize;
    public static string CancelOrphanedBuildsInQueueBatchSize;
    public static string BuildDeletionBatchSizeForJob;
    public static string EventPublisherJobDelay;
    public static string BuildEventListenerTimeWarning;
    public static string BuildEventListenerConcurrency;
    public static string LastTimeChecked;
    public static string LastHourChecked;
    public static string BuildsWaitingAlertThreshold;
    public static string QueueViolationWeight;
    public static string OnlineMachineRatioGood;
    public static string OnlineMachineRatioWarning;
    public static string ReimageDurationAlertThreshold;
    public static string ReimageDurationDelayThreshold;
    public static string AvailabilityGood;
    public static string AvailabilityWarning;
    public static string HealthDataTimeSkew;
    public static string SlowCommandThresholdPath;
    public static string GetBuildsLegacyThreshold;
    public static string FilterBuildsThreshold;
    public static string GetBuildsByIdsThreshold;
    public static string BuildJobCancellingTimeout;
    public static string RetentionPolicyPath;
    public static string RetentionCurrentProjectToProcess;
    public static string RetentionNextDefinitionToProcess;
    public static string RetentionLastFinishTimeProcessed;
    public static string RetentionMaxBuildBatchSize;
    public static string RetentionMaxDefinitionBatchSize;
    public static string RetentionMaxFinishDate;
    public static string RetentionPolicyDefaultPolicyPath;
    public static string RetentionPolicyDefaultDaysToKeep;
    public static string RetentionPolicyDefaultMinimumToKeep;
    public static string RetentionPolicyMaximumPolicyPath;
    public static string RetentionPolicyMaximumDaysToKeep;
    public static string RetentionPolicyMaximumMinimumToKeep;
    public static string RetentionDaysToKeepDeletedBuildsBeforeDestroy;
    public static string RetentionMaxDestroyBatchSize;
    public static string RetentionIgnoreDefinitions;
    public static string RetentionDefinitionsWithDefaultCount;
    public static string MetricsPath;
    public static string DaysToKeep;
    public static string OrgSettingsPath;
    public static string StatusBadgesArePublic;
    public static string EnforceSettableVar;
    public static string AuditEnforceSettableVar;
    public static string EnforceJobAuthScope;
    public static string EnforceJobAuthScopeForReleases;
    public static string EnforceReferencedRepoScopedToken;
    public static string DisableStageChooser;
    public static string DisableClassicPipelineCreation;
    public static string DisableClassicBuildPipelineCreation;
    public static string DisableClassicReleasePipelineCreation;
    public static string DisableImpliedYAMLCiTrigger;
    public static string ForkProtectionEnabled;
    public static string BuildsEnabledForForks;
    public static string EnforceJobAuthScopeForForks;
    public static string EnforceNoAccessToSecretsFromForks;
    public static string IsCommentRequiredForPullRequest;
    public static string RequireCommentsForNonTeamMembersOnly;
    public static string RequireCommentsForNonTeamMemberAndNonContributors;
    public static string DefinitionMetricsPath;
    public static string DaysToKeepDefinitionMetrics;
    public static string ProjectMetricsPath;
    public static string DaysToKeepDailyProjectMetrics;
    public static string DaysToKeepHourlyProjectMetrics;
    public static string LastAggregatedTime;
    public static string PollingPolicyPath;
    public static string PollingTimeoutInSeconds;
    public static string LeaseRenewalTimeout;
    public static string AzureServiceManagementUrl;
    public static string ChangesetQueryPageSize;
    public static string EventsPath;
    public static string FiredDaysToKeep;
    public static string FailedDaysToKeep;
    public static string BatchSize;
    public static string JobTimeout;
    public static string CheckEventsFiredDaysToKeep;
    public static string CheckEventsFailedDaysToKeep;
    public static string CheckEventsBatchSize;
    public static string CheckEventsMaxAttempts;
    public static string CheckEventsBatchSizeExecute;
    public static string CheckEventsMaxDegreeOfParallelism;
    public static string RepositoryAnalysisPath;
    public static string MaxNodeCount;
    public static string OrphanedBuildCleanupLookbackMaxTimeInHours;
    public static string OrphanedBuildCleanupLookbackMinTimeInDays;
    public static string OrphanedBuildCleanupCancelOrphans;
    public static string BuildSchedulesMaxThreshold;
    public static string BuildSchedulesMaxLookback;
    public static string BuildSchedulesDelayRangeSec;
    public static string BuildSchedulesMaxRetries;
    public static string BuildSchedulesRequeueIntervalMin;
    public static string CronSchedulesPerJobThreshold;
    public static string NScheduledRunsToDisplay;
    public static string NJobsFromLimit;
    public static string BuildsInQueuedStateMaxThresholds;
    public static string CronSchedulesPerDefinitionThreshold;
    public static string PoisonedBuildsCleanupBatch;
    public static string PoisonedBuildsContinueInSec;
    public static string PoisonedBuildsJobRerunInSec;
    public static string MaxItemsBetweenBuildsForWorkItems;
    public static string MaxNumberPipelinesForCommentTrigger;
    public static string MaxBuildsCount;
    public static string ArtifactTreeRecursionLimit;
    public static string MachinePoolDescription;
    public static string MachinePoolIsDefault;
    public static string MachinePoolVMImageName;
    public static string MachinePoolVMSize;
    public static string MachinePoolMachineCount;
    public static string MachinePoolControllerName;
    public static string MachinePoolServiceUserName;
    public static string MachinePoolServicePassword;
    public static string EnableShellTasksArgsSanitizing;
    public static string EnableShellTasksArgsSanitizingAudit;
    private static RegistryKeys();
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Build.Common.RegistryWatcher : object {
    [CompilerGeneratedAttribute]
private RegistryHive <Hive>k__BackingField;
    [CompilerGeneratedAttribute]
private string <KeyPath>k__BackingField;
    [CompilerGeneratedAttribute]
private bool <WatchSubtree>k__BackingField;
    [CompilerGeneratedAttribute]
private RegistryChangeNotificationFilter <Filter>k__BackingField;
    [CompilerGeneratedAttribute]
private Action`1<Exception> <Error>k__BackingField;
    [CompilerGeneratedAttribute]
private Action <KeyChanged>k__BackingField;
    private Thread m_monitorThread;
    private SafeHandle m_registryHandle;
    private AutoResetEvent m_shutdownEvent;
    private AutoResetEvent m_registryChangedEvent;
    public RegistryHive Hive { get; private set; }
    public string KeyPath { get; private set; }
    public bool WatchSubtree { get; private set; }
    [CLSCompliantAttribute("False")]
public RegistryChangeNotificationFilter Filter { get; private set; }
    public Action`1<Exception> Error { get; public set; }
    public Action KeyChanged { get; public set; }
    public RegistryWatcher(RegistryHive hive, string keyPath);
    public RegistryWatcher(RegistryHive hive, string keyPath, bool watchSubtree);
    [CLSCompliantAttribute("False")]
public RegistryWatcher(RegistryHive hive, string keyPath, bool watchSubtree, RegistryChangeNotificationFilter filter);
    [CompilerGeneratedAttribute]
public RegistryHive get_Hive();
    [CompilerGeneratedAttribute]
private void set_Hive(RegistryHive value);
    [CompilerGeneratedAttribute]
public string get_KeyPath();
    [CompilerGeneratedAttribute]
private void set_KeyPath(string value);
    [CompilerGeneratedAttribute]
public bool get_WatchSubtree();
    [CompilerGeneratedAttribute]
private void set_WatchSubtree(bool value);
    [CompilerGeneratedAttribute]
public RegistryChangeNotificationFilter get_Filter();
    [CompilerGeneratedAttribute]
private void set_Filter(RegistryChangeNotificationFilter value);
    [CompilerGeneratedAttribute]
public Action`1<Exception> get_Error();
    [CompilerGeneratedAttribute]
public void set_Error(Action`1<Exception> value);
    [CompilerGeneratedAttribute]
public Action get_KeyChanged();
    [CompilerGeneratedAttribute]
public void set_KeyChanged(Action value);
    public sealed virtual void Dispose();
    public void Stop();
    public void Start();
    private void OnError(Exception ex);
    private void OnKeyChanged();
    private void StopInternal();
    private bool StartKeyMonitor();
    private void MonitorRegistryKey();
}
public enum Microsoft.TeamFoundation.Build.Common.ServiceAction : Enum {
    public int value__;
    public static ServiceAction None;
    public static ServiceAction Add;
    public static ServiceAction Delete;
    public static ServiceAction Update;
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Build.Common.ServiceConstants : object {
    internal static string BaseNamespace;
    public static string HostingNamespace;
    public static string BaseAction;
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Build.Common.Validate`1 : MulticastDelegate {
    public Validate`1(object object, IntPtr method);
    public virtual void Invoke(string argumentName, T obj, bool allowNull, string errorMessage);
    public virtual IAsyncResult BeginInvoke(string argumentName, T obj, bool allowNull, string errorMessage, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Build.Common.ValidateType`1 : MulticastDelegate {
    public ValidateType`1(object object, IntPtr method);
    public virtual void Invoke(string argumentName, T obj, string type, bool allowNull, string errorMessage);
    public virtual IAsyncResult BeginInvoke(string argumentName, T obj, string type, bool allowNull, string errorMessage, AsyncCallback callback, object object);
    public virtual void EndInvoke(IAsyncResult result);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Build.Common.Validation : object {
    private static Char[] s_msbuildSpecialChars;
    private static Char[] s_invalidPlatformFlavorChars;
    private static Char[] s_definitionSpecialChars;
    private static Validation();
    public static void CheckValidBuildDirectory(String& path);
    public static void CheckValidBuildNumber(string buildNumber);
    public static void CheckValidBuildType(string buildType);
    public static void CheckValidConfigPlatform(string configPlatform);
    public static void CheckValidAgentName(string name, bool allowWildcards);
    public static void CheckValidControllerName(string name, bool allowWildcards);
    public static void CheckValidDefinitionName(string name);
    public static void CheckValidDropLocation(string path);
    [CLSCompliantAttribute("False")]
public static void CheckValidDropLocation(String& path);
    public static void CheckValidServerPathDropLocation(String& path);
    public static void CheckValidUncDropLocation(String& path);
    public static void CheckValidBuildContainerDropLocation(String& path);
    public static void CheckValidUncDropLocationNotServer(String& path);
    public static void CheckValidLogLocation(String& path);
    public static void CheckValidItemPath(String& path, bool allowWildcards);
    public static void CheckValidMachineName(string machineName);
    public static void CheckValidServiceHostName(string name, bool allowWildcards);
    public static void CheckValidUri(string uri, string type);
    public static bool IsValidDropLocation(string path, String& error);
    [CLSCompliantAttribute("False")]
public static bool IsValidDropLocation(String& path, String& error);
    internal static bool IsValidLogLocation(String& path, String& error);
    public static bool IsValidBuildDirectory(String& path, String& error, bool allowVariables);
    internal static bool IsValidBuildNumber(string buildNumber, String& error);
    internal static bool IsValidMachineName(string machineName, String& error);
    public static bool IsValidUncPath(string path, String& error);
    [CLSCompliantAttribute("False")]
public static bool IsValidUncPath(String& path, String& error);
    internal static bool IsValidServerPath(string path, String& error);
    internal static bool IsValidServerPath(String& path, String& error);
    internal static bool IsValidBuildContainerPath(string path, String& error);
    internal static bool IsValidBuildContainerPath(String& path, String& error);
    internal static bool IsValidDropLocationUri(string uri, String& error);
    internal static bool IsValidConfigPlatform(string str, String& error);
    internal static bool IsValidAgentName(string name, bool allowWildcards, String& error);
    internal static bool IsValidControllerName(string name, bool allowWildcards, String& error);
    internal static bool IsValidServiceHostName(string name, bool allowWildcards, String& error);
    public static bool IsValidDefinitionName(string name, String& error);
    public static bool IsValidUri(string uri, String& error);
    internal static bool IsValidUri(string uri, string type, String& error);
    internal static bool IsValidBuildType(string buildType, String& error);
    internal static bool IsValidFolderName(string folder, bool requireVersionControl);
    internal static bool IsValidFolderName(string folder, bool requireVersionControl, String& error);
    internal static bool IsValidSymbolStorePath(string path, String& error);
}
internal class Microsoft.TeamFoundation.Build.Common.VariableMatch : object {
    [CompilerGeneratedAttribute]
private string <Name>k__BackingField;
    [CompilerGeneratedAttribute]
private int <EndIndex>k__BackingField;
    [CompilerGeneratedAttribute]
private int <StartIndex>k__BackingField;
    public string Name { get; private set; }
    public int EndIndex { get; private set; }
    public int StartIndex { get; private set; }
    public VariableMatch(string name, int startIndex, int endIndex);
    [CompilerGeneratedAttribute]
public string get_Name();
    [CompilerGeneratedAttribute]
private void set_Name(string value);
    [CompilerGeneratedAttribute]
public int get_EndIndex();
    [CompilerGeneratedAttribute]
private void set_EndIndex(int value);
    [CompilerGeneratedAttribute]
public int get_StartIndex();
    [CompilerGeneratedAttribute]
private void set_StartIndex(int value);
}
[EditorBrowsableAttribute("1")]
public static class Microsoft.TeamFoundation.Build.Common.XamlHelper : object {
    private static string XamlNamespace;
    private static string SystemNamespace;
    private static string SystemCollectionsGenericNamespace;
    public static string Save(IDictionary`2<string, string> parameters);
    public static Dictionary`2<string, string> LoadPartial(string xaml);
    private static bool IsKnownNode(XmlReader xmlReader, XmlNodeType nodeType, string ns, string localName);
}
[EditorBrowsableAttribute("1")]
public class Microsoft.TeamFoundation.Build.Common.XamlNamespaceComparer : object {
    public static bool Equals(string left, string right);
    private sealed virtual override bool System.Collections.Generic.IEqualityComparer<System.String>.Equals(string left, string right);
    private sealed virtual override int System.Collections.Generic.IEqualityComparer<System.String>.GetHashCode(string obj);
}
[CompilerGeneratedAttribute]
[EmbeddedAttribute]
[AttributeUsageAttribute("2")]
internal class System.Runtime.CompilerServices.RefSafetyRulesAttribute : Attribute {
    public int Version;
    public RefSafetyRulesAttribute(int );
}
